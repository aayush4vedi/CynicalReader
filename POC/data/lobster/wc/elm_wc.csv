ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,elm,Elm programming,Why functional?,https://blog.testdouble.com/posts/2020-06-30-why-functional/,functional,functional scary think todo app taming uncertain future one elixir elm intent avoiding backwash time state please functional core imperative shell cqrs elixir elm ramda thinker,internet full information mostly related learning something come software development feel bigger question learn something imagine explaining friend confronted bear stand ground make lot noise try look big scary possible trying intimidate animal could brush aside flick claw seems ridiculous friend might decide better stick knee strategy might take advice use wrong time like mother bear cub knowing certain thing allows u trust worth importantly context know appropriate functional scary think point may looked example todo app written functionally decided maybe gave try turned unmaintainable mess without understanding goal functional programming hard receive benefit like focus developer would choose learn think functional way say need switch using functional language immediately programming functional use pattern architecture embraced functional give many benefit worth time change entire process carrying fine well one functional codebase generally lot enjoyable live work may surprise time told functional programming confusing academic hard read etc true staring blank page producing functional code may require bit upfront thought programming paradigm generally result much enjoyable read maintain think important differentiate something versus something example could use basic word say sad could say even word slightly advanced better understand feeling word choice accurate nuanced description emotion similarly functional programming concept slightly advanced accurate description kind problem trying solve program taming uncertain future generally write code solve problem automate task going happen future write code read present tense future tense may slightly complex language construct present tense future complicated future tense accurate representation situation consider two way giving driving direction left turn right go straight past blue turn left turn right keep driving straight go past blue house struggling give first scenario written present tense make assumption road closed blue house painted white work fine lot time give u false sense security sitting front sign freshly painted white house idea second scenario beginning similar writing future tense reminds u describing one possible future thing future uncertain actually many possible future therefore end direction acknowledging offering alternative course action calling help something fit expected future concept uncertain future nothing functional programming universe work choose ignore fact traditional programming risk buggy confusing code result functional programming need handle many possible future depends type problem solving case driving direction provide instruction expected case case simply reach help case self driving car say intersection light also need explicitly handle case light red person walking stop approach taken defining future depends lot use case language like elixir tend embrace style first example define case expect happen case allow erlang runtime fail immediately report problem perfect backend system monitor log fix unexpected behavior elm hand favor latter example frontend language priority seamless user experience forced always handle possible case even unlikely error handling well serf purpose word error suggests something unexpected happened thinking uncertain future nothing unexpected subtle difference point trying make future complicated rather trying describe basic language describe appropriate grammar readable code using simple language construct clearly modelling intent avoiding backwash time move completely idea want note functional pattern provide better language construct also allow u form code easily defined sequential flow time always move forward control flow logic one two way funnel one possible future result fan many possible future based result main two construct functional programming conditionals used define possible future function used describe happens one future make concrete conditionals take one input define many output function take many input produce one output define chain condition function scope possible future expands contract always moving forward time never think changing something already happened state please hold sound like saying way keep track state well hold thought first talk benefit worry state within flow logic look another example two version recipe egg stir cup flour place egg cup flour oven preheated degree whisk egg stir flour place oven produce first example look easier first glance think assumption make happens whisked egg realize flour finished combining ingredient realize oven needed preheated instruction could made little clear saying oven degree whisk two egg refrigerator stir cup flour pantry place little better still assumption state world assumes ingredient pantry oven actually work second example state front required complete recipe state produced following recipe nothing assumed ingredient working preheated oven know even start recipe consider real code example eventsbylocation const event jsonparse localstorageevents let group const event event const group group eventlocation grouppush event group eventlocation group return group got two concerning thing going right first referencing localstorage making assumption state world within function always trust function work function deterministic result input known function functional language enforce common best practice follow pattern much possible second built lot local state along way group variable mutated looping event started blur intent function simply giving linear direction keeping track thing happened past let try instead eventsbylocation event eventsreduce acc event const group acc eventlocation return acc eventlocation group event see function pure pas everything need mutable internal state everything flow beginning end elegant way using modern javascript functional language library could one liner state somewhere yes never eliminate state completely system keep seeping every part application constantly managing pattern called functional core imperative shell idea core business logic application written pure function future tense wrapped thin layer code interacts outside world deal state written state useful want stay way one way elixir lean heavily erlang otp process state maintained modifying data recursive loop elm deal state using internal architecture modify directly send message instruct internal state would like change implementation cqrs pattern redux common state management library javascript often used react regardless library architecture choose main point state business logic stay separate deal complexity uncertain state language like elixir elm suggest enforce functional pattern varying degree great thing start wherever functional way thinking language instance react helped start thinking functional way idea ui simply function state incredibly powerful redux top helped decouple state business logic even got excited pattern started using ramda library allows writing functional code fluently javascript using function composition piping currying finally started working language designed functional honestly point become functional thinker big jump hope journey encourage thoughtfulness way define problem way communicate intent
2,Lobsters,elm,Elm programming,Wheel of Fortune for videocalls,https://blog.rebased.pl/2020/06/16/wheel-of-fortune.html,wheel fortune videocalls,wheel fortune github page ob setting scene le pink please black unsplash face krtek hiding background streaming virtual camera plugin module jitsi electron app meetjitsi gameplay project page twittercomrebased,rebased invested remote work year still keeping small office three big polish city people want work office meet coworkers good coffee local roastery situation meant working office highly discouraged fell back working home remote location away big city order least bit face time introduced daily online coffee call halfhour slot every day anyone join chat listen talking coping read saw spare time eventually get stale despite best effort inspired recurring quiz youtube occasionally watch cobbled together quick prototype wheel fortune game play call decided rewrite properly elm positive feedback comprehensive readme project github page detailing set video call platform choice let quick look set linux machine ob jitsi videocall platform ob ob open broadcaster studio excellent opensource program video recording especially live streaming install package manager may named obsstudio running first time pop autoconfiguration wizard either dismiss configure ob streaming using whatever setting detects really relevant afterwards go settingsvideo set output resolution higher aspect ratio best compatibility video call software return main interface see something similar panel layout configurable reorganized presentation window similar setting scene start launching wheel fortune browser choice separate window switch tab mistakenly enable developer tool undock separate window player see setting new puzzle problem also worked around ob scene switching devtools window foolproof using firefox screen top tab bar use vertical tab hidden single tab open hideous magenta background reason get rid return ob click plus button source panel select window capture exact name source depends o dialog follows give source name click ok next window allow select specific window set basic cropping choose dedicated browser window crop ui confirm ok scene look something like red frame indicate scene element movable resizable scale reposition quickly scale fill screen click press ctrlf le pink please next right click either scene element name source window select filter new window click plus select chroma key accept default name see effect control slider change key color type magenta move similarity dial back color correct minimal color bleeding value seems work may also want change smoothness closing window see game interface black background black launch favourite browser find nice background image download return ob add image source new picture default added top layer obscuring interface rearrange source list dragging selecting scene element using caret button want image bottom list chosen freely usable photo walt disney concert hall la unsplash additionally locked source using padlock icon accidentally moving longer possible face one thing still missing host video feed source panel add video capture source select webcam reorder position image somewhere obscure anything add crop filter show little surroundings possible next image show hiding behind krtek plushie positioned corner behind wheel graphic hiding background notice green background behind screenshot green screen easily buy photography equipment vendor ob offer option remove static background choice applying another chroma key filter remove green background integrate image notice discoloration plushie hat due lighting room uneven unlike real photo studio chroma key filter suffering completes scene setup instruction let move streaming part streaming exactly streaming close setting broadcast popular streaming platform could add server info click start streaming however working video chat slightly different goal constraint discus jitsi similar quirk restriction one thing taken ob camera present videocall enter virtual camera virtual camera virtual camera piece software usable application like real webcam take video input another source continuing linux need two piece one ob plugin either install package manager compile manually way scope second piece linux kernel module also likely available package manager load module first ensure use newly created device adding video group setting permission bit way scope install plugin restart ob use new option tool start feeding virtual camera device path must match module created video format matter click start make virtual camera film scene setup ob older version used crash ob clicking stop seems longer case may jitsi linux use jitsi meet electron app want app using browser version also acceptable jitsi special requirement available three major operating system use today launch join start room jitsi videobridge workbase server instance use freely available meetjitsi server video feed automatically pick available camera system virtual cam set use dropdown attached camera button find enable worry preview picture appears cropped like participant see full videocall program crop video optimized case single face somewhere center enable microphone interact browser devtools window control game invite people use console command add player list set puzzle start playing gameplay rule keybindings described detail project page quick recap enter spin letter reveal present player turn space move next player manually first time presented morning coffee call lot surprised face given rebased programmer experienced seniorlevels every one able implement really something version played day polished one available github quick javascript prototype cobbled weekend want release due poor quality later rewrite elm gave rise currently published version project still bit rough around edge could use work extensive testing go ahead set fun let u know github issue break like see added give u shout twittercomrebased set played team
3,Lobsters,elm,Elm programming,Recreating Pong for the Web with Elm,https://dev.to/bijanbwb/recreating-pong-for-the-web-with-elm-2bi8,recreating pong web elm,introductory post series goal rebuild classic interactive game learn little bit along way pong ball left paddle right paddle score window history atari would use skill several discipline like engineering design entrepreneurship create something accessible atari home console version wikipedia page rebuilding pong web pong perfect turn perfect place get started game development simple amazing rule game loop input handling competition rendering game state ai basic physic collision asset game development constant stream activity deeper level getting basic game element worked turn much deeper level game game design risk reward without turn surprisingly boring predictable speed randomness fairness playtesting tinkering long process adding feature playing game see often unintended consequence aesthetic ui learning skill development game compelling learning play working elm elm architecture model game using type provide initial value modeling game component coming initial version data model nt perfect window rect svg package strokedasharray much look far work ball paddle pull together model basic element game update update ball position move paddle around update player score etc subscription sketching update pseudocode instead thinking ifthisthenthat try come union type different state getting ball moving paddle collision game state draw owl set implementation apart many others interesting bit changing ball angle pick one feature make big difference game one solution give player way control angle ball paddle also add element strategy game give player option conservative option risky option ai right paddle winning ball path history inventing principle performance relatively new macbook pro laptop polish sound howlerjs idea sometimes accidentally write bad code produce interesting result multiball lesson learned moving away value separate file module easy get first done interesting bit final stretch said find good stopping point next intro post series resource get touch find twitter,let take tour process creating web version classic atari game pong case missed introductory post series goal rebuild classic interactive game learn little bit along way pong dive let set context pong look like pong abstract representation table tennis consisting basic shape ball move bounce around screen left paddle move controlled player right paddle move controlled computer score indicator paddle window rectangle black background net middle many version pong released year use element model version let start fun history history one fascinating thing pong released early public little context idea digital video game atari would need productize arcade game time coinoperated pinball game probably closest corollary game like spacewar predate release pong decade available academic complicated public atari would use skill several discipline like engineering design entrepreneurship create something accessible result game cabinet pictured marketing material see straightforward made instruction affordances version use arrow key keyboard control paddle easy see people could take simple control cabinet story go atari put prototype local bar named andy capp tavern heart silicon valley machine popular would overflow quarter research project bought atari emulator called retron thinking would good way simulate original turn pong may considered passé time atari released arcade cabinet dedicated home console version predated cartridgebased atari emulator still fun share daughter due cultural relevance pong even part smithsonian museum interested learning history pong wikipedia page good place start fun documentary called world might like rebuilding pong web original intention series rebuild classic game post stepbystep walkthroughs taking time work mechanic pong realized approach would exhausting read would take whole course justice content post tour process interesting bit share source code github end plus still learning game development nt want steer wrong direction try stick clear explanation plain term without relying jargon scary first getting started goal still create faithful reproduction classic game worked hard figure made pong fun play also add little feature interesting bit make sense pong perfect turn pong perfect place get started game development like software project first straightforward last make difference simple amazing start sketching element make pong get idea want put screen involves basic everything need make surprisingly fun game rule clear rule controlling paddle scoring make game accessible game loop loop allows u continuously listen input adjust object time input handling use keyboard handle player input move left paddle competition player scoring add fun win state rendering use svg create game window render element game state transition different state startingscreen playingscreen endingscreen ai simulate simple ai computercontrolled right paddle basic physic use basic physic keep ball paddle moving position velocity collision ball collides paddle edge screen handle collision responding accordingly asset game incorporate external asset like sprite sound wo nt need sprite since using simple svg shape use external sound library incorporate simple sound effect tricky u background web development building web application app nothing time occasionally need load new page make request database part content static even reading post hard work loading text page already done game development constant stream activity use game loop handle input player even input still move object around screen time started learning concept scared term like delta time velocity vector understandable feel way also get confusing think coordinate way one helpful technique think word comfortable instance could think horizontalposition instead x position verticalspeed instead vy velocity changeintime instead deltatime get working mental model work towards using common term find fitting deeper level getting basic game element worked turn much deeper level game beyond getting thing show screen move around start take interest game design major takeaway project little change make big difference gameplay game element mentioned get thing running tinker kind little setting like ball speed angle scoring make fun risk reward hitting ball closer edge paddle risky move likely miss safe approach would hit ball center paddle change ball angle coming paddle risky move turn reward paddle much difficult time returning without pong turn surprisingly boring predictable speed start tinkering set fast ball speed fun play fast difficult also speed ball slightly every time hit paddle result feeling game speed increase volley add much fun game randomness start simple serve location direction add randomness ball location direction keep paying attention build skill consistently return serve fairness turn change feel unfair ball speed randomness serf feel unfair get easy get scored without capping ball speed upper bound start feel unfair successful return impossible playtesting tinkering nt know building game long process adding feature playing game see often unintended consequence tinkering value lead lot fun interesting idea aesthetic ui spent time trying recreate feel arcade cabinet ended throwing work adding little color polish add lot experience learning skill development game compelling learning play wired recognize pattern fun feel sense improvement progress get better book called theory fun game design might like interested reading topic working elm nt worked elm programming language introduction elm good place get started short book example give everything need start building frontend web application elm elm architecture also wellsuited building game glance see similar pattern elm architecture function init update view simple game development platform like init update draw init model game using type provide initial value example ball paddle located start game update allows u continuously change model value time update player score move ball transition game state view continuously draw updated model screen using svg dive elm code throughout rest post nt know elm yet feel free skim content see process hopefully inspire go learn elm functional programming modeling game component coming initial version data model nt perfect start handful element know need pull view function something look window ball left paddle right paddle window window type alias use create svg rectangle element hold game keep mind svg us top left starting point start value x starting top left x value increase move right value increase move using value x height width draw rectangle game window type alias window backgroundcolor string x float float width float height float set initial value initialwindow window initialwindow backgroundcolor black x width height value correspond svg rect element elm svg package contains element attribute need corresponding view function call svgrect pas initialwindow function produce rectangle need viewgamewindow window svgsvg msg viewgamewindow window svgrect svgattributesfill windowbackgroundcolor svgattributesx stringfromfloat windowx svgattributesy stringfromfloat windowy svgattributeswidth stringfromfloat windowwidth svgattributesheight stringfromfloat windowheight even add another view function net middle screen googling turned strokedasharray doc mdn worked well placing dashed line middle game window viewnet window svg msg viewnet window svgline svgattributesstroke white svgattributesstrokedasharray svgattributesstrokewidth stringfromfloat windowwidth stringfromfloat windowwidth stringfromfloat windowy stringfromfloat windowheight much look far work ball ball like window still using svgrect case much smaller add vx vy use indicate horizontal vertical velocity could push position ball around time using x velocity value allow u thing like change speed negate value get ball moving way strike paddle type alias ball color string x float float vx float vy float width float height float initial value ended initialball basically matter tinkering somewhere near middle screen initialball ball initialball color white x vx vy width height also could represented data position value hold x velocity hold vx vy first game wanted stick flat model nt involve nesting updating value would easy likely change approach next game build also mention used int value started later switched using float value avoid perform conversion round integer sure think precision float value also make animation look little smoother view function render ball page viewball ball svg msg viewball ball svgrect svgattributesfill ballcolor svgattributesx stringfromfloat ballx svgattributesy stringfromfloat bally svgattributeswidth stringfromfloat ballwidth svgattributesheight stringfromfloat ballheight paddle paddle rectangle like window ball paddle field add paddleid type differentiate add score paddle increment also note need vy vertical speed since paddle nt need move horizontally type paddleid left right type alias paddle color string id paddleid score int x float float vy float width float height float set initial value locate paddle near left right edge game window initialleftpaddle paddle initialleftpaddle color lightblue id left score x vy width height initialrightpaddle paddle initialrightpaddle color lightpink id right score x vy width height view function paddle paddle scoring viewpaddle paddle svg msg viewpaddle paddle svgrect svgattributesfill paddlecolor svgattributesx stringfromfloat paddlex svgattributesy stringfromfloat paddley svgattributeswidth stringfromfloat paddlewidth svgattributesheight stringfromfloat paddleheight viewpaddlescore int window float svg msg viewpaddlescore score window positionoffset svgtext svgattributesfill white svgattributesfontfamily monospace svgattributesfontsize svgattributesfontweight bold svgattributesx stringfromfloat windowwidth positionoffset svgattributesy svgtext stringfromint score first started hardcoded value keep thing simple instance positionoffset score something added later way use function display score pas number move score within svg window pull together model basic element game type alias model ball ball leftpaddle paddle rightpaddle paddle window window initialmodel model initialmodel ball initialball leftpaddle initialleftpaddle rightpaddle initialrightpaddle window initialwindow game nt alive yet everything need roughly correct location update update function lot magic happens game update ball position move paddle around update player score etc also thing get little complicated source code project available bottom post try keep section high level without diving detail subscription subscription function good place start handle update use subscription two major feature handling keyboard input adding animation code snippet use browserevents module elm browser package handle browser animation key event player subscription model sub msg subscription model subbatch browsereventsonanimationframedelta browseradvancedanimationframe browsereventsonkeydown jsondecodemap playerpressedkeydown keydecoder browsereventsonkeyup jsondecodemap playerpressedkeyup keydecoder produce steady stream data use game msg type allows u indicate want handle update function type msg browseradvancedanimationframe time playerpressedkeydown string playerreleasedkey string admittedly glossing lot detail blog post grows much larger intended important part use browseradvancedanimationframe animate ball paddle move time playerpressedkeydown give u way know player pressing arrow key move left paddle sketching update pseudocode started writing update function mapped quick plan pseudocode thinking way conditionals turned huge mistake every time wanted add feature meant adding yet another condition order condition ended important nothing happening move ball move right ai paddle player input move left paddle ball hit right paddle negate ballvx update ball position ball hit left paddle negate ballvx update ball position ball hit left window edge increment right player score reset ball initial position set ball motion ball hit right window edge increment left player score reset ball initial position set ball motion ball hit top bottom window edge negate ballvy least gave rough idea event game pong next game work sketch paper dive code instead thinking ifthisthenthat try come union type different state getting ball moving point fun set ball motion see happens use something like adjust position based time getting browseradvancedanimationframe word time advance ball x position increase mean ball move right ball x ballx ballvx time bally ballvy time fun see ball start moving quickly realize wo nt know stop bottom window need check source code bottom post see complete example basic idea point invert ball vertical direction hit bottom window ball positive vy value moving downward hitting bottom edge window know value windowheight mean take vy value turn negative value ball hit bottom edge window case edge windowbottom ball vy negate ballvy development start flow bit ball collides top bottom window negate vy value ball hit left right edge window increment player score reset ball back original position paddle collision handling ball collision edge window somewhat straightforward since use window x width height value paddle little difficult compare ball location paddle location see intersect boolean check used determine ball collided one paddle ballhitleftpaddle ball paddle bool ballhitleftpaddle ball paddle paddley bally bally paddley paddleheight paddlex ballx ballx paddlex paddlewidth ballvx ballhitrightpaddle ball paddle bool ballhitrightpaddle ball paddle paddley bally bally paddley paddleheight paddlex ballx ballwidth ballx paddlex paddlewidth ballvx game state getting initial feature running realize game nt always playing state super mario bros memorable example initial screen press start button begin playing game begin startingscreen state transition playingscreen state player ready pong added brief instruction game window visible bottom post used spacebar key start game super mario bros also memorable game screen one player reach winning score transition playingscreen endingscreen state display winner type gamestate startingscreen playingscreen endingscreen create custom type like handle different game state transition also ensures player one state time since nt still playing game game screen disable movement ball paddle start end state also handle keyboard input start restart game state draw owl take look source code actually lot going update function hate say draw owl wanted make sure cover interesting aspect set implementation pong apart many others interesting bit get working version game running time figure make interesting compelling fun changing ball angle pick one feature make big difference game one ball collides paddle initially make sense invert ball vx value send back way would look something like ball hit paddle ball vx negate ballvx work well ball hit paddle change horizontal direction turn ball follow slow predictable path make game boring solution give player way control angle ball paddle better explained visually couple quick sketch instead ball follow predictable path location ball hit paddle determines angle might seem like big difference result one paddle make way harder paddle return ball also add small amount ball speed whenever hit paddle make game feel quicker whenever ball collides paddle add vx value increase horizontal speed elm clamp function useful set upper bound ball end moving fast becomes difficult play adjusting thing like ball angle speed huge impact playability also add element strategy game give player option conservative option conservative hit ball middle paddle speed increase hit eventually right paddle struggle keep risky option take risk hitting ball closer edge paddle return harder angle ai paddle ai right paddle first attempt getting computercontrolled paddle working paddley position match bally position work well starting point ball right paddle end sync one another allows right paddle consistently return ball problem make impossible left paddle score right paddle always meet ball ended finding solution seems work pretty well right paddle try catch ball location updaterightpaddle ball float paddle paddle updaterightpaddle ball time paddle bally paddley paddle paddley paddlevy time else bally paddley paddle paddley paddlevy time else paddle ball higher screen paddle chase upward ball lower paddle chase downward tinker right paddle vy value increase decrease difficulty ended finding value work well difficult score impossible feel rewarding score point ai paddle winning speaking scoring surprisingly difficult figure winning score supposed arcade game whoever scored within certain time frame found sticker first player score point win curious score arcade cabinet sticker instead located rest instruction turn physical switch arcade owner could use adjust winning score felt like lowhanging fruit added option game ball path history felt like killer app version pong saw bret victor inventing principle talk year ago loved idea game element past future never thought something like work elm little obvious elm debugger give glimpse stream value look like time visualize ball history start creating empty list every time ball change position prepend ball list updateballpath ball ballpath maybe windowedge model model updateballpath ball ballpath maybewindowedge model case modelshowballpath pongballoff model pongballon case maybewindowedge pongwindowleft model ballpath pongwindowright model ballpath model ballpath listtake ball ballpath ball hit left right edge game window clear history setting ballpath rest time collecting new position prepending ball ballpath instead prepend operator usually called con language like lisp elm lastly pipe listtake limit amount history avoid potential performance pitfall said curious much history could handle slowing might even able build whole new game around idea performance game development pretty tricky write inefficient function application going run probably wo nt noticeable write inefficient function game run time per second whole time continue make game like find better way profile performance benchmark recorded performance profile using browser devtools difficult see inefficiency also interesting try different machine browser wrote relatively new macbook pro laptop likely would nt run smoothly older laptop added viewfps function util module take list time allows use toggle display hide current frame per second polish sound final polish added color background pay homage original game cabinet used svg recreate pong lettering top screen fun idea create cabinet affordances ui would taken time get right also great javascript library called howlerjs adding audio game howler demo really amazing elm provides port integrate javascript library safe way added simple beepwav boopwav sound ball hit paddle edge collision occur trigger port play sound browser check source code want see example work idea one fun part game development stumbling little idea would intriguing implement sometimes idea want see come life sometimes accidentally write bad code produce interesting result instance made mistake ball motion stopped unless moving paddle got thinking game like superhot time move move ball path history feature mentioned good example kind feature core game add lot idea varying complexity would loved implement given time change ball color add particle effect collision add pause state dynamically change ball width height multiball mode multipaddle mode superhot mode ball move move replay winning shot ending screen state local multiplayer one paddle us keyboard one paddle us mouse online multiplayer build something like love see lesson learned little thing make difference adjusting setting like ball speed path huge impact playability polish think state union type instead conditionals start small moving away bool value switch add additional custom state refactoring ups down great clean code add clarity split application code separate file module nt improve development experience find balance gently resist urge move work something else new different easy get first done interesting bit final stretch adding polish move lark genuinely interesting project said find good stopping point could probably keep building different version pong fancy feature year tempting implement fun idea list important find good place stop ship want keep moving growing next rebuilding pong bunch time wanted bail work something complex impressive time wanted quickly build game like tetri snake going try sticking approach outlined intro post series breakout always favorite atari game kid fun figure plus basic mechanic built project give opportunity try different data structure add interesting feature like particle effect nt get pong resource learning functional programming game development feel free get touch happy hear also find twitter promised link game source code
4,Lobsters,elm,Elm programming,Single out elements using phantom types,https://jfmengels.net/single-out-elements-using-phantom-types/,single element using phantom type,puzzle however solution repository solution work distinguishable indistinguishable benefit approach practical case error errorformodule resizing webgl texture,today showcase technique single element type medium puzzle try solve ignore puzzle imagine try design car factory factory build kind car electric hydrogen diesel factory build environmentfriendly green car electric hydrogen though think hydrogen car environmentfriendly moment let say want user able create customized car factory provide api specifically createcarfactory creategreencarfactory function reflect specification function take userprovided function build car createcarfactory function return list car kind potentially different kind car mixed together creategreencarfactory function return list green car potentially also mixed together module author want guarantee user able provide function create nongreen car creategreencarfactory function still able create kind car createcarfactory function also want use type system compiler one complain guarantee respected user module simplicity sake imagine car contain data following example api could look like without guarantee mentioned allowed tweak change however want module factory exposing factory createcarfactory creategreencarfactory car electriccar hydrogencar dieselcar type car electriccar hydrogencar dieselcar createcarfactory data list car factory creategreencarfactory data list car factory electriccar electriccar hydrogencar hydrogencar dieselcar dieselcar example api could used code work see check solution work import factory exposing factory anycarfactory factory anycarfactory factorycreatecarfactory factorydieselcar factoryelectriccar factoryhydrogencar greenfactory factory greenfactory factorycreategreencarfactory factoryelectriccar factoryhydrogencar invalidfactory factory invalidfactory factorycreategreencarfactory factorydieselcar factoryelectriccar factoryhydrogencar last constraint important interesting one feel like try solving problem otherwise read article title hint way address problem blank spacing see answer accidentally solution several solution problem solution went adding phantom type set concrete type diesel car unbounded value others concretely module factory exposing factory createcarfactory creategreencarfactory car electriccar hydrogencar dieselcar type car fuel electriccar hydrogencar dieselcar type polluting polluting type green green electriccar car fuel electriccar electriccar hydrogencar car fuel hydrogencar hydrogencar dieselcar car polluting dieselcar dieselcar createcarfactory data list car fuel factory creategreencarfactory data list car green factory created repository solution already place play work first thing add phantom type car type phantom type type variable like maybe never appears type constructor unlike maybe appears variant phantom type allows u distinguish element similar element allowing u use set subset function manipulate want able use different car like thing make diesel car distinguishable rest specifying value car phantom type dieselcar car polluting trick make electric hydrogen car indistinguishable others making generic car car fuel notice lower case f indicates type variable car would also work way electriccar hydrogencar car fuel mean kind car word indistinguishable car therefore following code typecheck fine import factory exposing car diesel car green factoryelectriccar car polluting factoryelectriccar also mean mix kind car list electriccar dieselcar finally change constraint car factory function return createcarfactory keep generic meaning return kind car long stored list currently creategreencarfactory requires car green mean diesel car type car polluting fit able returned benefit approach able compare approach others several way problem could solved like solution several factor first type error mean compiler complaining error case module user handle know factory valid need return maybe factory result error factory neither module user module need runtime check either meaning runtime performance cost like change constraint like marking hydrogencar polluting therefore allowing creategreencarfactory without code looking different would breaking change though practical case elmreview user create rule providing function create error two main way create error error function errorformodule function former creates error file currently analyzed latter creates error specific file given argument example used rule rule rule rulenewprojectruleschema rulename initialprojectcontext rulewithsimpleexpressionvisitor expressionvisitor rulewithfinalprojectevaluation finalevaluationforproject rulefromprojectruleschema expressionvisitor node expression list error expressionvisitor node case nodevalue node expressionfunctionorvalue xyz ruleerror message xyz used detail xyz dangerous reason noderange node finalevaluationforproject projectcontext list error finalevaluationforproject projectcontext unusedfunctions projectcontext listmap modulekey functionname range ruleerrorformodule modulekey message function functionname never used detail bla bla bla range case want use error function usually raise error current file case using make sense therefore lead unwanted behavior creating project rule analyzes project file provide function handle part analysis context single file instance final evaluation project like example phase module analyzed report thing full knowledge happens project phase calling error make much sense since file affected automatically solve problem technique described previous section singling forbidding use error dieselcar inside visitor factory type local local type nonlocal nonlocal error errordata range error local errorformodule modulekey errordata range error anytarget withsimpleexpressionvisitor node expression list error anytarget ruleschema ruleschema withfinalprojectevaluation projectcontext list error nonlocal ruleschema ruleschema look package api notice thing bit differently another article alternative envisioned ignore reported error replace global error make elmreview stop case would add big warning function documentation would testing module helper writing test rule fail test error defined context much try help user test would work user wrote test wrote test triggered misused kind error downside current method error useless type variable case find aesthetically displeasing knowing nobody lose time raise issue ask help misused function make worth another example pattern pointed configuration resizing webgl texture hope enjoyed article liked let know expect see article phantom type type variable
5,Lobsters,elm,Elm programming,The cost of funding in Open Source languages - Elm,https://discourse.elm-lang.org/t/costs-funding-in-open-source-languages/5722,cost funding open source language elm,big company logic go sawzall dart devolpers developer developer spread smart phone firefoxos asmjs browser war open source culture worst nightmare netscape alternate partnership conclusion,excited see perspective feeling might agree pretty much everything need share bunch clarify trying say belief interest big company directly determine language design choice never heard story kind thing talking anyone paid work language feel like would point think people set better expectation language think cost funding headcount already filter specific characteristic depending organization feeling reckless sharing bunch idea talked publicly many year sorry long big company logic heard headcount story someone justifiably wanted fewer engineer large team think would happen person led believe large company high headcount meant important important people low headcount confused think better product fewer worker ie le money best could explain big company logic thought story lot since heard story informed perspective google seem te pretty unique case come language understanding go go team worked language called sawzall processing log may sound important way google calculates much people owe ad processing data like understanding something count money project extremely valuable sense team highly regarded organization dart dart smalltalk team made really fast jit compilation vm later incorporated technique jvm fraction crew brought google implement fast jit j chrome great perf major part chrome gained market share going back tac theory whole effort save google billion dollar per year team highly regarded organization know headcount number today project know dart much higher headcount highest number heard go rust swift elm python personally came believe detail important degree google sure whole range factor sense google bit good make want vibe maybe lenient big firm thinking googlex well putting aside get sense developer experience super accounted org chart work focused developer experience happened fairly adhoc way project manager turned ie toolbar google search chrome eventually went become ceo personally think keen eye free consumer product scaffold position regarding ad revenue much developer product matter business adhoc system major contrast microsoft specific department meant work language microsoft research supported ton interesting pl work work often end manifesting great work developer tool department suspect wellorganized wellfunded organization devolpers developer developer era sure fit modern microsoft azure think adding big company logic help explain various language headcount never heard story people outside project influencing specific design decision think would mistake think mean thing like tac matter learned project headcount smart phone getting popular spread smart phone personally noticed ton open source initiative began smart phone started getting really popular mobile game getting huge user facebookgoogle moving mobile apps big company mobile ad network figured became mobile first everyone thought facing existential threat remember people saying thing like need browser every app need settle j performance get objectivec performance lot people freaking time example prezi survive mobile world without flash need team android io browser tablet desktop share code keep thing sync product one language could compile many platform worthwhile hire one weird kid well people see happens think would offered nostringsattached support facing many risk particular moment also short contract another compiler project time see happen elm young needed standard became bunch team think elm would exist today without support mozilla survive transition mobile world revenue tac happens traffic android io developing country mobile coincides project like firefoxos asmjs could conceivably preserve sort tac funding worst case scenario came pas maybe mobile developed market maybe focus developing market lower powered device people talking bytecode j vm many year found interesting project like started particular moment absolute worst case scenario happen firefox position weakened whole era google came much powerful chrome continued gain market share browser phone total outsider perspective seems important rust headcount safesecure concurrency could mean firefox could deliver feature faster use le memory chrome could maybe could start pushing market share back negotiate better tac far seem bourne market share number think overall theory fit detail shared headcount changed time friend mine worked firefoxos think headcount followed similar path saying criticize mozilla rust people organization would totally reckless strategy figure headcount various open source project within organization mozilla definitely fund exist started looking earlier time try understand happening started get feeling factor influence open source culture well browser war open source culture going back microsoft dominant force online created enough bad feeling turned successful antitrust case u major advocate term open source saying thing like worst nightmare microsoft exec elevator time first major victory concept open source netscape open sourced browser starting mozilla project time mozilla developed process oriented towards customization adding feature open online way made sense foil microsoft personally think gained market share partly based critique microsoft monopoly power partly lot programmer value extreme customization lot say expanding available option think open source culture deeply tied thesis event mozilla eventually formed financial partnership young hopeful google spreading information worked really well microsoft seen scary google fun upstart shaking thing anymore mozilla left partnership google google inhoused much possible copied cultural process developed mozilla funding turn developer discontent critique monopoly power market share circumstance personal feeling mozilla tough negotiating position coherent critique consumer tech gain traction among programmer find partner revenue source imagine critique could surveillance interesting exmozilla leadership created brave try make case trying eat ad revenue directly alternate partnership feeling surveillance reached peak level yet feel like take many surveillance controversy reputation big company change significantly enough get going think critique mozilla rust knowing detail tac feel weird level dominance chrome android way critique engineer working expectation many google engineer never even heard tac certainly know point psychological factor mention seem rooted history open source culture around also think strength weakness particular process fully assessed without looking back year later thinking extent proven microsoft worst nightmare effect cultural expectation project funded way conclusion elm goodwill model prezi noredink one salary string attached best know widely used language survive zero fulltime worker lot one worker think get three four lot room balance building relationship working technology interacting online promoting project communicating vision etc cover aspect impression additional capacity end going towards adding feature think higher headcount important want languagetools lot feature confident saying definitely happens get range main point really think people underestimate role fundingheadcount supporting good working relationship open source language zero one huge one two huge two four huge feeling language like elm python ruby fraction people use language work may also build package tool fraction people may end building good personal working relationship paid worker fraction people may carve time day job volunteer body work produced time maybe volunteer highstress role covered otherwise opensource work support business enough justifiably done work hour sense person weather highstress event highstress role person volunteering way start look like working normal software team work paid people know communicate often etc membership paid voting central funding somewhat traditional software team formed nonetheless project higher headcount may hire role directly long process building personal working relationship skipped job interview clearly defined role presto someone aligned project vision role may filled year otherwise without option definitely take longer fill role higher emotional labor night weekend burn people really fast maybe particularly bad communicating developing relationship online asking help work much emotionally difficult normal software job trying thing may help personally idea esf focus community event overall experience online forum accumulated expecting always get slammed today maybe year positive message people sent last week really meant lot ended chatting lot people normal already cool project started got feeling sharing even messy perspective thing might lead positive thing addition conditioned expectation tbd anyway goal criticize languagecommunity claim everything perfect elm fully expect misconception certain thing easily corrected people direct knowledge tend find helpful emotionally look historyfunding conflict based know far
6,Lobsters,elm,Elm programming,Announcing Lamdera Open Alpha,https://discourse.elm-lang.org/t/announcing-lamdera-open-alpha/5669,announcing lamdera open alpha,lamdera elm service evergreen migration lamdera open alpha sign use lamdera use lamdera people built lamdera far best color thebestcolorlamderaapp link game gamelamderaapp link note app noteslamderaapp link big two card game big beatthebigtwolamderaapp planning poker app planorpokerlamderaapp link highscore mogee mogee mogeelamderaapp link lamdera dashboard sendgrid getting started signup documentation,almost three year design development excited announce lamdera open alpha lamdera developer deal lot incidental complexity building fullstack application bundling deploying apps serialising deserialising data handling network transport interacting database migration glue code cost development time typesafe increase risk bug lamdera goal empower write code matter application logic building hiding complexity removing lamdera typesafe fullstack webapp platform elm hosting deployment migration networking encodersdecoders persistent storage handled lamdera focus application logic glue code originally announced lamdera keynote elm service elm europe lamdera also typesafe migration system called evergreen combined feature mean new app deployment livereload connected client preserving state spoke evergreen migration elm europe lamdera open alpha alpha intended elm enthusiast keen try vision glueless fullstack web development appetite bleeding edge alpha yet suitable production use case exploration experimentation sign huge thank people helped private alpha even use lamdera lot project day seem advertise get started nanosecond often see also waste time pitfall matter often left decipher someone would eventually spend time writing blog post use lamdera instead outlined use lamdera might want read going people built lamdera far sometimes seeing believing small selection lamdera apps people built far generously shared source code apps written entirely elm showcase lamdera abstract away concern around networking persistence data enabling developer focus application logic glue code best color martin built fun game people fight best color glorious right background color someone disagrees try thebestcolorlamderaapp source link game simon built game game workinprogress multiplayer world run avatar around chat player also satisfying graphic try gamelamderaapp source link note app jim built searchable stash random note support markdown filtering note title tag full text active link mostused tag even export json special thanks jim longest helping alpha tester almost year graciously suffering data reset anyone else try noteslamderaapp source link big two card game ed built online version big card game chinese origin find another people make room give go ed commented wanted make game play friend lockdown time write elm frontend plus separate backend glue code lamdera made really easy get idea game hour try beatthebigtwolamderaapp planning poker app egor built app planning poker estimate distributed engineering team using work told team think cool egor commented think quicker write app rather search alternative exist try planorpokerlamderaapp source link highscore mogee andrey originally built mogee webgl platformer fit screen wanted see could port lamdera give persistent high score leaderboard function predictably andrey hold high score title maybe someone beat though try mogeelamderaapp source link lamdera dashboard spirit eat dog food much possible lamdera built lamdera lamdera dashboard feature basic user account auth system email via sendgrid manages lamdera app creation getting started best way get started signup check documentation hope lamdera inspires build something built otherwise
7,Lobsters,elm,Elm programming,Elm Regression Testing,https://github.com/jgrenat/regression-testing/blob/master/README.md,elm regression testing,elm regression testing regression testing need regression testing make change easy make easy change discover thanks dillon kearns work watch video explaining concept along specific use case hopefully forgive english counter program create generator test harness test dependency elmtest package package generate save test harness nodejs refactor code rerun test compare output saved output want refactor model message thanks,elm regression testing refactor obscure piece code nobody understand anymore imagine start new job already existing product former developer solution hand source code run exit leaving wondering happening look code damn nt even know possible write bad code elm obfuscated humanwritten code ever seen product wo nt survive ca nt refactor improve code fortunately elm refactoring easy right wait minute function one heck type representing naming type help way understand happening know current implementation work break refactor without altering behaviour nt know guessed regression testing need regression testing need refactor code without knowing exactly code could code specification maybe code grown complex overtime nobody know everything anymore thing current implementation considered correct want break refactoring fact even bug piece code nt want fix refactoring something address later code easier work make change easy make easy change piece wisdom kent beck discover thanks dillon kearns know well code supposed unit test fuzz test elmtest directly may suit better work watch video explaining concept along specific use case hopefully forgive english well take program generate initial model generate random message send update method save final model without knowing exactly happened test given initial model input produce specific output generate save input output run later refactor part code want done run test comparing final output previous final output every test great improved code without breaking anything test nt pas changed behaviour try fix mistake generated test called test harness help improve code see four step create generator test harness generate save test harness refactor code rerun test compare output saved output package ca nt help step job help step let see following example let imagine want build test harness counter program create generator test harness package help generate test need input first install package test dependency elmtest elmtest install jgrenatregressiontesting need know generate initial model program job create generator using elmrandom package let see example counter program import random exposing generator import counter exposing model modelgenerator generator model modelgenerator randomint initial model always use constant generator modelgenerator generator model modelgenerator randomconstant define generate message application import counter exposing msg import random exposing generator modelgenerator generator msg modelgenerator randomuniform increment decrement message frequent others use randomweighted define encode model message json save using elmjson package import counter exposing model msg import jsonencode encode encodemodel model encodevalue encodemodel model encodeint model encodemessage msg encodevalue encodemessage msg case msg increment encodestring increment decrement encodestring decrement find complex example example folder declare port get back generated test port module regressiontestgenerator exposing main import jsonencode encode name important outputport port outputport encodevalue cmd msg everything ready create generator port module regressiontestgenerator exposing main import counter exposing model msg update import regressiontestgenerator exposing regressiontestgeneratorprogram main regressiontestgeneratorprogram model msg main regressiontestgeneratorsandboxupdate modelgenerator modelgenerator messagegenerator messagegenerator update update encodemodel encodemodel encodemessage encodemessage outputport outputport numberoftests generate save test harness going use node module generate one need nodejs installed install tool npm install global jgrenatelmregressiontesting generate test go root project assuming testgenerator file test directory run command elmregressiontesting testsregressiontestgeneratorelm generate file testsgeneratedregressiontestdataelm containing test data want change path name file use output option elmregressiontesting testsregressiontestgeneratorelm outputtestscustomfilenameelm refactor code afraid wo nt help nt want take job anyway rerun test compare output saved output test data saved need rerun test compare result need know decode model message generated json import counter exposing model msg import jsondecode decode exposing decoder modeldecoder decoder model modeldecoder decodeint messagedecoder decoder msg messagedecoder decodestring decodeandthen messagetype case msg increment decodesucceed increment decrement decodesucceed decrement decodefail invalid message messagetype find complex example example folder create runner module regressiontestrunner exposing suite import counter exposing update import generatedregressiontestdata exposing testdata import regressiontestrunner import test exposing test suite test suite regressiontestrunnerelement modeldecoder modeldecoder messagedecoder messagedecoder update update testdata launch usual requires point set elmexplorationstest project want refactor model message want change representation model change message app problem test harness still test data stored json decode want let imagine want change model counter example allow adding information future previous model simply int want use record containing int refactoring type alias model value int change decoder follow change modeldecoder decoder model modeldecoder decodeint decodemap model run test elmtest thanks many thanks fberthelot jfmengels precious help conception tool
8,Lobsters,elm,Elm programming,Safe unsafe operations in Elm,https://jfmengels.net/safe-unsafe-operations-in-elm/,safe unsafe operation elm,package create unsafe function wrap safe function detect call invalid regexes visitor expression source code full source code test handling way import function reason full source code test forbidding complex thing unsafe function full source code test making sure target function exists full source code test summary work wellbuilt module help test rule learn guarantee,elm often module around data type need validation initially create instance elmregex package defines regexfromstring function people often use following way import regex lowercase regexregex lowercase regexfromstring az maybewithdefault regexnever regexfromstring signature string maybe regex take string corresponds valid regex return regex wrapped otherwise return nothing return nothing usually call maybewithdefault regexnever create regex never match anything give u regex use valid opinion two problem code even know sure regex string valid need handle case regex string course project becomes wrong may notice problem long time mind problem much especially since easy way handling error case problem kind problem would love compiler help u imagine someone could create new modulepackage generate valid regular expression api would much verbose far people would used sidenote elm creating regex invalid regex string would cause runtime error current behavior opinion vast improvement previous one post going use safe unsafe pattern create unsafe function wrap safe regexfromstring function always return regex using elmreview rule make safe verifying never used invalid regex also slightly easier use current way look like import regex import helpersregex lowercase regexregex lowercase helpersregexfromliteral az could use pattern make much nicer safe nonemptylist nonemptylist nonemptylist helpersnonemptylistfromliteral email email email helpersemailfromliteral someaddress providercom num numberlessthanfive num helpersnumberlessthanfivefromliteral board board board helpersboardfromliteral create unsafe function wrap safe function point unsafe function wrap safe function simplify api something never fail unsafe function regexfromstring could look like module helpersregex exposing fromliteral import regex exposing regex fromliteral string regex fromliteral string regexfromstring string maybewithdefault regexnever notice fromliteral return regex maybe regex point may notice close original example showed call unsafe still give invalid regex type default value use thing go wrong unsafe function would look like module helpersregex exposing fromliteral import regex exposing regex fromliteral string regex fromliteral string case regexfromstring string regex regex nothing fromliteral string function try create return regex fails call recursive call unsafe part enter case call function recursively indefinitely program practice halt please careful using pattern call function fromliteral limit function used string literal like fromliteral abc never something dynamic complex like fromliteral somestring reason literal value easily determine looking function call code whether function call fail elmreview rule build next check call fromliteral somestring elmreview rule warn u detect call invalid regexes aim detect call unsafe function invalid regexes like regex helpersregexfromliteral abc going start simple rule update find thing need handle let start empty rule nothing module nounsaferegexfromliteral exposing rule import reviewrule rule exposing rule rule rule rule rulenewmoduleruleschema nounsaferegexfromliteral rulefrommoduleruleschema rulenewmoduleruleschema rulefrommoduleruleschema call going add visitor visitor function look piece source code report error extract data context order report error later actually simple compile elmreview package api let compile rule define visitor since would make rule useless interested detecting call helpersregexfromliteral function function call expression going add expression visitor module nounsaferegexfromliteral exposing rule import elmsyntaxexpression expression exposing expression import elmsyntaxnode node exposing node import regex import reviewrule rule exposing error rule rule rule rule rulenewmoduleruleschema nounsaferegexfromliteral rulewithsimpleexpressionvisitor expressionvisitor rulefrommoduleruleschema expressionvisitor node expression list error expressionvisitor node case nodevalue node expressionapplication function argument case nodevalue function expressionfunctionorvalue helper regex fromliteral case nodevalue argument expressionliteral string case regexfromstring string nothing ruleerror invalidregex noderange node invalidregex message string detail list string invalidregex message helpersregexfromliteral need called valid regex detail regex passed evaluate valid regex please fix use regexfromstring run elmreview result look like following color elmreview error srcmainelm nounsaferegexfromliteral helpersregexfromliteral need called valid regex invalidregex helpersregexfromliteral abc regex passed evaluate valid regex please fix use regexfromstring already lot value could change helper regex regex fromliteral fromstring find use regexfromstring invalid regex project right though work function called regexfromstring exactly omitting test post find one step next source code next create error argument something else literal string rule could made smarter trying find value expression compute static expression like string concatenation definitely could rule quickly become much complex case think constraining force user use simple literal string fine tradeoff guarantee give return expressionvisitor node expression list error expressionvisitor node case nodevalue node expressionapplication function argument case nodevalue function expressionfunctionorvalue helper regex fromliteral case nodevalue argument expressionliteral string case regexfromstring string nothing ruleerror invalidregex noderange node ruleerror nonliteralvalue noderange node nonliteralvalue message string detail list string nonliteralvalue message helpersregexfromliteral need called static string literal detail function serf give guarantee creating regular expression argument dynamic complex wo nt able tell either make argument static use regexfromstring full source code test great something really safe yet problem need handle report problem function imported called using full module name detect call fromliteral rfromliteral instance people use function complex construction sensitive name function get renamed moved report anything anymore let handle one one handling way import function problem report problem function imported called using full module name detect call fromliteral rfromliteral instance aim detect call unsafe function regardless imported like import helpersregex r exposing fromliteral regex fromliteral abc regex rfromliteral abc could report call fromliteral regardless module come could create lot false positive false positive kind tool annoy hell developer instead manually track import import alias imported import local function overrideshadow imported yes kind shadowing possible sound tedious well fortunately kind soul yes would created library work u use scope module jfmengelselmreviewscope copying file project reason need collect data traverse module requires equip context store useful information including everything scope collect u import elmsyntaxexposing exposing import elmsyntaximport exposing import import scope rule rule rule rulenewmoduleruleschema nounsaferegexfromliteral initialcontext scopeaddmodulevisitors rulewithimportvisitor importvisitor rulewithexpressionvisitor expressionvisitor rulefrommoduleruleschema type alias context scope scopemodulecontext fromliteralwasexposed bool initialcontext context initialcontext scope scopeinitialmodulecontext fromliteralwasexposed false importvisitor node import context list nothing context importvisitor nodenode modulename exposinglist context nodevalue modulename helper regex case maybemap nodevalue exposinglist exposingall context fromliteralwasexposed true context else context expressionvisitor node expression ruledirection context list error context expressionvisitor node direction context case direction nodevalue node ruleonenter expressionapplication function argument case nodevalue function expressionfunctionorvalue modulename fromliteral scopemodulenameforvalue contextscope fromliteral modulename helper regex listisempty modulename contextfromliteralwasexposed case nodevalue argument full source code test great handle way user import unsafe function next problem forbidding complex thing unsafe function problem people use function complex construction hard handle way function used aim detect report one complex could potentially used unsafe way like reallyunsafe helpersregexfromliteral regex helpersregexfromliteral ab c regex abc helpersregexfromliteral make rule smarter handle pattern would make rule lot complex think toolinglibraries help time yet case think fine simply report error anytime see function used outside function call type alias context allowedfunctionorvalues list range initialcontext context initialcontext allowedfunctionorvalues istargetfunction context modulename string bool istargetfunction context modulename functionname functionname targetfunctionname false else scopemodulenameforvalue contextscope targetfunctionname modulename targetmodulename listisempty modulename contextfromliteralwasexposed targetmodulename list string targetmodulename helper regex targetfunctionname string targetfunctionname fromliteral expressionvisitor node expression ruledirection context list error context expressionvisitor node direction context case direction nodevalue node ruleonenter expressionapplication function argument case nodevalue function expressionfunctionorvalue modulename functionname istargetfunction context modulename functionname let error list error error error context allowedfunctionorvalues noderange function contextallowedfunctionorvalues else context context ruleonenter expressionfunctionorvalue modulename functionname istargetfunction context modulename functionname listmember noderange node contextallowedfunctionorvalues ruleerror notusedasfunction noderange node context else context context notusedasfunction message string detail list string notusedasfunction message helpersregexfromliteral must called directly detail function aim give guarantee creating regular expression ca nt determine used something else calling directly full source code test last problem making sure target function exists problem sensitive name function get renamed moved report anything anymore elmreview able compare project previous version determine function recently renamed instead report problem find helpersregexfromliteral anywhere project something determine visiting project module module rule like one built capability since forget everything module start analyzing different one turn api simpler benefit performance optimization therefore turn project rule remember found module track function found end project analysis found yet report error rule rule rule rulenewprojectruleschema nounsaferegexfromliteral initialprojectcontext scopeaddprojectvisitors rulewithelmjsonprojectvisitor elmjsonvisitor rulewithmodulevisitor modulevisitor rulewithmodulecontext fromprojecttomodule fromprojecttomodule frommoduletoproject frommoduletoproject foldprojectcontexts foldprojectcontexts rulewithfinalprojectevaluation finalprojectevaluation rulefromprojectruleschema modulevisitor rulemoduleruleschema modulecontext rulemoduleruleschema hasatleastonevisitor modulecontext modulevisitor schema schema rulewithdeclarationlistvisitor declarationlistvisitor rulewithexpressionvisitor expressionvisitor type alias projectcontext scope scopeprojectcontext elmjsonkey maybe ruleelmjsonkey foundtargetfunction bool type alias modulecontext scope scopemodulecontext allowedfunctionorvalues list range foundtargetfunction bool initialprojectcontext projectcontext initialprojectcontext scope scopeinitialprojectcontext elmjsonkey nothing foundtargetfunction false fromprojecttomodule rulemodulekey node modulename projectcontext modulecontext fromprojecttomodule projectcontext scope scopefromprojecttomodule projectcontextscope allowedfunctionorvalues foundtargetfunction false frommoduletoproject rulemodulekey node modulename modulecontext projectcontext frommoduletoproject modulenamenode modulecontext scope scopefrommoduletoproject modulenamenode modulecontextscope elmjsonkey nothing foundtargetfunction modulecontextfoundtargetfunction nodevalue modulenamenode targetmodulename foldprojectcontexts projectcontext projectcontext projectcontext foldprojectcontexts newcontext previouscontext scope scopefoldprojectcontexts newcontextscope previouscontextscope elmjsonkey previouscontextelmjsonkey foundtargetfunction previouscontextfoundtargetfunction newcontextfoundtargetfunction elmjsonvisitor maybe elmjsonkey ruleelmjsonkey projectcontext list nothing projectcontext elmjsonvisitor elmjson projectcontext projectcontext elmjsonkey maybemap elmjsonkey elmjson declarationlistvisitor list node declaration modulecontext list nothing modulecontext declarationlistvisitor node modulecontext let foundtargetfunction bool foundtargetfunction listany node case nodevalue node declarationfunctiondeclaration function targetfunctionname functiondeclaration nodevalue name nodevalue false node modulecontext foundtargetfunction foundtargetfunction finalprojectevaluation projectcontext list error scope finalprojectevaluation projectcontext projectcontextfoundtargetfunction else case projectcontextelmjsonkey elmjsonkey ruleerrorforelmjson elmjsonkey message could find helpersregexfromliteral detail want provide guarantee use function ca nt find likely renamed prevents giving guarantee rename back update rule new name use function anymore remove rule range start row column end row column nothing istargetfunction modulecontext modulename string bool istargetfunction modulecontext modulename functionname functionname targetfunctionname scopemodulenameforvalue modulecontextscope targetfunctionname modulename targetmodulename full source code test test changed bit since need least file test summary work wrapped safe function unsafe function made rule check whether regex passed unsafe function valid check whether argument function literal string check whether function used nonhandled way check whether unsafe function present project think something really solid make sure misuse function want lose guarantee elm give u introduce runtime error recommend make check really solid otherwise like compiler checked thing could still runtime error obviously need test rule rigorously writing akin compiler check elm compiler job elmreview provides wellbuilt module help test rule along tip guideline well done though safe unsafe pattern benefit giving something similar automated unit test every time function used well always pas without actually testing handling error case know happen usually return dumb stuff anyway strongly recommend exposing unsafe function package think user use elmreview rule even provide rule next package instead prefer letting define unsafe function make accessible somewhere learn think learned quite thing together writing elmreview rule quite easy simple case covering case much harder static analysis need think handle lot case wish important otherwise may allow thing wished forbid especially using elmreview create guarantee compiler give u sometimes make code simpler thank reading way go build awesome rule
9,Lobsters,elm,Elm programming,Building a web app with functional programming - Elm - part I · PatchGirl,https://blog.patchgirl.io/elm/2020/03/02/elm-part-I.html,building web app functional programming elm part patchgirl,building web app functional programming elm part summary building web app functional programming series definition production ready elm part elm part ii haskell part haskell part ii nixos building web app functional programming background functional reactive programming language learning curve workshop rtfeldman power probably gon na need elm architecture elm architecture compiler helpful amazing performance refactoring conclusion,building web app functional programming elm part mar summary building web app functional programming series definition production ready elm part elm part ii haskell part haskell part ii nixos hi great see first part building web app functional programming probably interested elm first part elm focus language second part ecosystem background said working elm prior experience fp scala haskell lisp tried elm first time believe version time writing back hard time understanding concept signal example thought promising language couple version later everything related functional reactive programming also happened elm toughest topic removed nowadays elm much simpler started working patchgirl wanted learn something new interesting compelling technology ghcjs purescript elm backend engineer needed something easy pick quickly productive went elm seemed human friendliest one language learning curve elm strongly typed language haskell like syntax wish could give feedback syntax knew haskell beforehand biased learning elm felt dead simple say instead workshop thank rtfeldman great work former company feedback great many developer mainly scala devs said felt nice easy play power probably gon na need one feature elm lack powerful abstraction designed make easy learn fast productive like say elm haskell without hard part need know concept like monad functor type class whatnot elm provides simple api plenty enough vast majority case learnt appreciate philosophy believe quite adapted real world application need language generate code avoid boilerplate provides powerful abstraction probably use elm instead want deliver quickly high quality product elm great choice project elm great pick elm architecture could talk elm architecture hour many done nutshell pattern io computation interact outside world eg send http request parse form one benefit force developer handle possible case like error need pinpoint actually quite simple understand browsing elm guide quickly grasp main idea start play compiler helpful straight point elm compiler amazing piece work clearly designed developer friendly best thing elm think elm compiler guide compiler time tell human readable sentence wrong code certain case even give solution problem beginner helped lot picking language elm error message accurate helpful almost never needed google incomprehensible error quite delightful experience performance let talk compiler performance elm real beast compiling many language always frustrating wait compiler finish even tiny modification elm wait single second patchgirl take le compile roughly line year old laptop xps elm make elmmainelm user system cpu total still mind blown fast never thought performance could possible compile time feedback fast sometime think compiler run term developer experience feel weird longer able browse twitter compiles refactoring improve skill product requirement evolving constantly need refactor software elm strong typing great compiler refactoring child play easy might boring put brain sleep mode follow compiler errorsadvices much say easy love conclusion huge crush elm still stopped front end development frustrated felt writing javascript elm brings everything good fp browser without cost complexity satisfy experimented beginner developer type system record sum type adapted design real world problem compiler make refactoring piece cake baked functional programming maintainable stable weird side effect runtime error describe experience elm would probably ease fun productivity keep reading elm second part
10,Lobsters,elm,Elm programming,elm-review - a static code analysis tool,https://jfmengels.net/elm-review-v2/,elmreview static code analysis tool,new review capability easier use sorry elmreview initial announcement nice api example phantom builder pattern project rule module rule project rule reporting error elmjson reading dependency docsjson file visiting readmemd file visiting comment documentation new helper creating rule much faster watch mode watch mode configuring exception lead sort problem think whether enabling rule good idea configure rule fixall flag better default folder structure test included default rule start package website package improve quality documentation compare elm analyse different philosophy original announcement get started migration guide documentation feedback help appreciated,today excited release elmreview share new feature tl dr list introduced feature new review capability project rule reporting error elmjson reading dependency docsjson file visiting readmemd file visiting comment documentation new helper creating rule easier use much faster watch mode configuring exception fixall flag better default folder structure test included default rule start sorry elmreview missed initial announcement memory unclear let explain elmreview static code analysis tool elm look elm project report pattern configured find using rule friendly elm compilerlike way highly customizable write rule since written elm need know different language even publish elm package put lot effort making nice api use example even going length discovering new elm technique expect see blog post phantom builder pattern blog happy result elmreview look like linter necessarily wrong since enable rule help improve quality code enforce coding convention team dive bit find create new guarantee elm compiler give instance write rule elmreview analysis broke soon problem spanned multiple module though solved project rule elmreview version elm analyse eslint lot similar tool language analysis scoped single file mean rule finished looking module start looking module b forgets everything module make lot useful analysis untenable like module function xyz come module imported using import exposing potentially lose ability tell problem type encountering import exposing b type imported function element ever used project addition module rule described elmreview project rule rule go module use information collected different module infer report thing solving problem mentioned short feature make rule much accurate allow almost complete best effort due limitation looking single module open wide range possibility example usecases reporting error elmjson version reading content elmjson possible possible report error reading dependency docsjson file docsjson file dependency contain public information direct indirect dependency reading tell dependency module come along type function contain give lot information direct indirect dependency instance module contain function type defined information rule much accurate instance knowing added scope encountering import xyz exposing becomes possible added new information get previous point sufficient knowledge replicate compiler type inference logic example usecases visiting readmemd file readme integral part project especially package package author user important everything correct version introduces visitor readme allows collect data report error error fixed automatically example usecases visiting comment documentation version also look content comment documentation function module honest forgetting add visitor would easy addition example usecases todo list jfmengelsreviewdocumentation making sure doc module documentation always correct date report link nonexisting nonexposed module even invalid functionssection id reporting duplicate markdown section report usage word like todo new helper creating rule task like targeting specific function harder instance want forbid foobar need handle multiple way function called imported tedious errorprone started writing helper named elmreviewscope deal problem make task easy making part elmreview publishing separate package though api still unstable much faster watch mode version focused usability validating elmreview good solution problem performance secondary version performance focus result really good parsed file cached initial run still bit slow subsequent run faster several time also watch mode change feel instantaneous sure much better future version work done help pave way editor support configuring exception enabled rule version able ignore error reported edit fork rule ignore case wanted ignore idea avoid ignoring error locally comment sort like happens place eslint lead sort problem instead user think whether enabling rule good idea first place still stand choice place reasonable ignore review error namely generated code vendored code introducing rule gradually many error sometimes also make sense test follow slightly different rule case configure rule apply section directory file fixall flag version fix flag would propose automatic fix problem knew fix could accept refuse annoying go fix could long tedious lot error version come fixall get one big diff current source one fix applied accept refuse believe automatic fix always perfect know kink one wrote please cautious looking beforeafter diff commit change blindly better default folder structure default structure version created allow run test rule due conflict elmtest review application get running elmreview init structured way make test work box elmreview init add dependency needed write rule default test included default test directory included default since part elm project make sense review rule start catalog rule quite small understand many people blocker adoption along release publishing rule previously written find searching jfmengelsreview package website general looking review people package among also working package improve quality documentation help package author especially also rule wrote still unsure whether want maintain personally copy jfmengelsreviewsimplification compare elm analyse philosophywise elm analyse moment de facto static code analysis tool elm different philosophy elmreview elm analyse want improve quality code enabling rule work everyone elmreview hand aim create guarantee tailored team project enabling way improve quality code shareable manner think rule could use everyone share publishing elm package registry functionalitywise check naming rule find elm analyse available package published github repos written remaining one one outdated disagree reasonably easy write using package api exception check unused pattern unused argument plan add anyone publishing missing one care test run found elmreview faster guessing mostly rule built way avoid duplicate work thing elm analyse elmreview web interface elmreview similar cli watch mode showing graph module really see value brings showing dependency updated see value think good fit tool editor support definitely see value let know want help rest hope shown post original announcement tool elm analyse get started already use elmreview project follow migration guide otherwise follow instruction cd yourproject npm install savedev elmreview yarn add dev elmreview npx elmreview init cd review elm install jfmengelsreviewunused elm install jfmengelsreviewcommon elm install jfmengelsreviewdebug add rule configuration fyi include one jfmengelsreviewdocumentation jfmengelsreviewdebug import nodebuglog import nodebugtodoortostring import noexposingeverything import noimportingeverything import nomissingtypeannotation import nounusedcustomtypeconstructors import nounuseddependencies import nounusedexports import nounusedmodules import nounusedvariables import reviewrule exposing rule config list rule config nodebuglogrule nodebugtodoortostringrule noexposingeverythingrule noimportingeverythingrule nomissingtypeannotationrule nounusedcustomtypeconstructorsrule nounuseddependenciesrule nounusedexportsrule nounusedmodulesrule nounusedvariablesrule finally run using get started recommend reading documentation go far give advice best set elmreview project andor team feedback help appreciated hope try elmreview enjoy spent lot time polishing give great experience using writing rule room lot improvement would like help would love help get tool working different editor also publish awesome rule advice feedback write tool blog post would love hear constructive criticism want help want share using want share enjoy yes help lot elmreview channel elm slack ask help talk privately jfmengels
11,Lobsters,elm,Elm programming,Why I’m leaving Elm,https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/,leaving elm,elm bucklescript need think steward owner elm discourse lot confrontational thinking issue fluent elmfluent djangoftl fluentcompiler intl attempted core library elmcommunity packageelmlangorg elmgithubinstall blogged intl licence hard part open source elmdev google group never discourse possible elmgithubinstall issue comment created python fork open source definition packageelmlangorg boto edit bottom anonymous comment hacker news post hard part open source know first markdown marked used elmlangorg part part favouritism unfairness every single reason evan may chosen course also applies developer well choose block choose make cool thing elm second library elmparser parsec couple custom operator mzero commented kernel code post trust richard feldman official elm web page excellent guide contributing open source project reality always process rule elm leadership blind unwritten rule perfect way discriminate knowingly unknowingly evan blog post elm every package packageelmlangorg written entirely elm packageelmlangorg core json browser url http evan post removal custom operator usage package root design goal like encouraging policy intl elmintl http githubcomvanwagonetelmintl arrogance little core team understand process indeed rule process always unwritten one supposed know immediately close thread shuts metaprocess zero progress nonenglish developer end user discriminated aware go way build completely unnecessary discriminatory policy responsible discriminatory effect one aspect open source love value able share work way benefit everyone without risk someone going take thing away use privileged,past year reluctantly come conclusion need leave elm migrate language likely bucklescript via definitely recommend anyone else post reason mostly way leadership behave going talk good point elm technology read place probably true elm version least joy work hard replace also note mileage may etc would entirely possible use elm find adequate need therefore never bump thing hit quickly post people assessing elm may something benefit people community especially leader part elm core team might want skip post sake mental health tried harder past fair reasoned likely easy reading hand people within elm community courage ask read maybe also think decision behaviour criticise actually causing core elm team far stress necessary change would good mental wellbeing since post mainly complaint criticism thought worth addressing whether ever appropriate open source current maintainer handful small open source project put lot hour bigger one well aware unwarranted sense entitlement many people come interacting open source project agree problem think paid people zero expectation behave first reason general ethical standard including honesty fairness apply even people paying second advertise something open source common set assumption mean explicit accepted definition term third golden rule applies think safe say every producer open source software also massive consumer open source movement possible certain standard behaviour adhered think degree responsible people paying u depend number thing benefit derive running open source project one factor number people affected decision another contribution received people third whether contribution code case author maintainer sponsor project stand gain lot success project especially project function platform kind usually hard author thriving language find sponsor decision made popular language damage sink someone project someone career even someone livelihood made gamble investing language example well aware career hugely helped part django core team often way really feel fair change make django affect lot people better worse mean people come along demand change want mean ought exercise certain amount care responsibility author language think whatever want providing code free must remember army people provided high quality library free done countless hour bug reporting free done beta testing free done usability testing free high personal risk especially early adopter mean least provided effective kind advertising marketing entirely free personal word mouth recommendation promotion mean even single person wrote every line code language compiler come thinking project need think steward owner post demanding missing feature elm although certain feature affect story wider issue treat people expectation area comment level personal preference technical need come looking open source project others definitely level ethic think people behave treated general open source project specifically onto reason one big factor leaving elm community messed majorly interaction elm core team beginning entirely fault set positive post elm discourse core devs announced change would really hurt project along many people introduction instead turned something lot confrontational feel slightly victim bad timing though course accept responsibility word since done whole much better although trying story needed internationalise app year seeing different solution particularly eye django thinking issue found mozilla awesome fluent project settled solution also look existing elm solution could find found wanting even attempt solve problem fluent solves turn fluent used really elegant way elm compiling ftl file elm source code created elmfluent implement complementing djangoftl fluentcompiler also created python backend like many elm project need feature elmfluent need official wrapper intl initial version us nonofficial wrapper impossible elm onwards attempted get thing going regarding official wrapper went nowhere topic came later elm discourse contributed thread shut considered really unhelpful way rather starting new thread argue thought building something useful would better persuasive idea ready elmfluent elm restriction native module made elmfluent impossible official wrapper intl released rather announce project effectively dead water supporting old elm release started looking way round restriction led eventually private email richard feldman unfortunately messed discussion native module used argument find looking back email ashamed used even le tact care managed certainly le necessary although multiple point ascribe good motivation elm core team somehow succeeded persuading richard considered core team bad faith actor end communication apologise rest elm community way allowed frustration get better squandered opportunity elm community hope useful depends relationship offending people pretty sure blown looking reason dismiss post ranting someone get along people well right however never kind problem open source community think thinking getting involved elm community take lesson thing community make pretty uncomfortable part messed might considered persevering little longer technical limitation really killing usage elm restriction native module know native module elm allow write part elm module javascript feature absolutely necessary elm used many core library bunch library elmcommunity previously tight restriction native module uploaded packageelmlangorg could work around need necessary using something like elmgithubinstall elm however compiler limit feature certain official library use project blogged need native module since bigger thing came need intl wrapper mentioned restriction cause huge problem lot people example bug core library something missing wait core team fix rather able fix might need performance fix done using javascript elm lack destructive update make thing hard implement efficiently stuck explain bos know possible javascript chose elm make workarounds attractive case simply work example elmfluent work around restriction without destroying design experience thing like come know going need intl wrapper happened without ability get kind sticky situation elm attractive option recommend people basis alone difficult part accept crippleware mean deliberate limitation take additional work author impose feature still much much necessary disabled compiler see contributing certain project foreseeable future something like needed long possible distribute core library separate compiler doubt elm core team believe change people best interest evan initially expressed belief everyone would able upgrade elm however despite many people indicating reversal decision appears believe long term still acting best forcing change move ecosystem pure elm code evan belief benefit project future many hole problem argument attitude treating existing project collateral damage unacceptable book elm claim open source example see licence compiler fact evan delivers talk elm entitled thing like hard part open source think claim increasingly hard defend real open source go beyond license file first point may personal preference start like see kind openness development process considered something open source elm even see record core team decision making process let alone contribute see section latter past used elmdev google group closed never place elm design discussed could contribute way today forum find meaningfully see elm development decision made discourse designed kind interaction eg thread close day automatically category development discussion etc slack obviously appropriate multitude reason another requirement open source book forkability fork per se necessarily helpful required possible fork patch part investigation make possible others try elmfluent elm considered possibility patching elm patch long term fork shared thread completely outside normal elm forum elmgithubinstall issue richard feldman arrived attempt shut knew thought right idea comment made clear persona non grata elm community patch elm compiler earlier version comment much strongly worded richard apologised intention revised version know stand core elm developer deliberately unnecessarily introduced restriction elm order stop using feature want reserve exclusive use find share workaround thing broken project one considered aggressor one elm threatening person exclusion community attempting patch source code quite antithetical spirit open source far see opposite behaviour see open source project example dropbox created python fork without smallest thought needing apologise behaviour multiple competing implementation considered healthy open source project forkable leader need accept people right community also need ready decide current leadership serving interest big part point open source example people contributed openoffice although owned company licence meant started throwing weight around unwelcome way community able fork carry well run open source project understand essential feature open source welcome rather resort threat maintain control open source definition written osi generally recognised kind authority area includes discrimination person discrimination field item list requirement open source licence technically elm fall foul elm licence restriction pretty clear building discrimination certain library compiler ie restriction feature everything except core library library certain github organisation elm attempt clearly spirit osi definition thinking distinguish primary secondary user whose right tension example run open source blogging software blog topic like also heavily censormoderate comment user choose primary user get choose use software osi definition licence open source try stop basis certain religiouspolitical view etc osi definition give right primary user secondary user primary user elm compiler secondary user packageelmlangorg reason complaint fact user packageelmlangorg right upload core package others time recognise proprietary service give away client tool open source software really token gesture done smooth wheel proprietary service example would never claim open benefit using boto python frontend amazon web service given compiler get install elm deliberately crippled make binding browser apis example despite necessary present compiler feature compiler hard code http packageelmlangorg source package use get functioning program give ability configure source fact ability turn connecting secondary user packageelmlangorg lacking key right user think pretty inescapable essentially proprietary system free software purist type think proprietary software evil elm started open source project attracted user basis longer meet basic expectation word mean everyone else problem least potential user contributor aware leadership style elm extremely aggressive authoritarian mean impolite rude almost always civil still ultimately aggressive controlling gave example happened even outside elm forum elm discourse thing tightly controlled within first week starting contribute post deleted blocked contributing week offense core team announced plan restrict native module elm posted solution someone problem made use native module find many similar report across different site internet example sometimes find denial defence core developer really think escape conclusion elm threatening aggressive leadership style example see edit bottom anonymous comment hacker news post ton bug compiler library never fixed many pull request community member open year never merged tiny fix line code adding new feature way fork package apply patch package contains native code report bug hope evan fix deadline range week year edit using throwaway get banned elm discourse relm still production application using elm kind community necessary people anonymise criticism way time see behaviour never reason disagree leadership likely find friendly helpful leadership style judged leader behave everyone agrees say assessment would quite different course judge leadership style borrowed phrase evan talk hard part open source evan complaining people make inadequately informed suggestion take second make take hour explain suggestion cut despite knowing incredibly frustrating evan core elm team thing community taken whole new level say say must despite knowing anything rest projectspecific constraint taking account explain build opinion compiler simply making design decision language felt right would bearable disagree language feature course job language designer decide feature go get cut fact know purpose solution suffice therefore keep feature reserve use distinct whether believe open source whether elm considered open source principle fairness important enough ethical principle deserves section decision limit certain feature certain people ie github organisation go right principle deliberately using rather sens impossible treat people equally recognise people leader worth listening others treating people equally allow people publish standard library code others equality clearly still treat people fairly without treating equally illustrate two library first evan markdown library bundle minified javascript library us kernel code internals use fast optimised markdown parser elm api pure function way characterise library merely richard feldman tried claim valid use case kernel code since restriction kernel code elm part elmexplorations description say exists historical dodging issue delete repo click exist hard imagine kind reason evan wanted write markdown convert html within elm app javascript library marked hard work well elm wanted pure function signature string html reason would clearly nicest interface addition wanted use code would double demo code since used elmlangorg therefore needed clearly demonstrate elm architecture rather obscure would happen workaround javascript interop used wanted soon would take long time rewrite javascript code pure elm module every minute spent rewriting working code pure elm time could spent potentially valuable thing elm community rewritten version might well slow buggy original bug fixed handoptimized pretty well already well known situation pure functional language serious problem producing performant code translating optimised j code elm pretty hard maybe evan actually need extend interesting way usage least going benefit much elm implementation therefore someone else interest extendable elm implementation would probably better position rewrite course might fix bit native code every time new compiler entire wrapper pretty small even rewrite huge amount work part part solid reasoning decision benefit everyone involved last thing want evan stop important thing elm rewrite already working code problem favouritism unfairness put need core elm developer friend create repos certain github organisation everyone else every single reason evan may chosen course also applies developer well small modification instead realising sometimes developer going benefit escape hatch like try stop using locked escape hatch everyone friend moved code elmexplorations would continue work addition people community past chosen exactly thing evan use kernel code make elm wrapper javascript library effectively accused blocking elm bad community choose block choose make cool thing elm hypocrisy pretty galling ultimately say using position leader bully people writing library project even interest might argue writing demo code illustrate elm architecture would right something much important writing production code think demo code important production code term needing good architecture priority upside second library evan elmparser library common many similar library language like haskell parsec defines couple custom operator custom operator limited github repos elm later mean want write parsing library hard time competing evan important one thing community may well need one parsing library theoretical concern mzero commented change one hurt code parser combinator library used two custom operator reason evan point top learn elmparser define two operator parsing reason library done indeed time custom embedded language custom operator worth mental effort programming staff parsing one evan acknowledges indeed us elmparser however realistic assume elmparser become parsing package ever need one work string parsing byte array quite common mine even elmparse parameterized stream type still differing implementation functionality tradeoff parser backtracking error tracking error recovery etc make different parser library useful even support stream type current policy bad elm ecosystem discriminates need user happen exactly need core elm team important principle fairness seems evan core team forgotten language especially open source one operate platform platform contribution developer reputation critical library author need contribution developer library scratch also create popular wellrecognised library reputation improves may able get sponsor working library work based reputation hugely important part currency open source work perhaps sustainable model funding open source way right evan ought understand given red ink currently sponsor work elm level playing field library author vital instead evan reserved feature friend well custom operator elmparser also benefit kernel code performance critical part going compete fairness must central principle open source project choose model leadership dictatorship critical pay special attention believe good intention enough stop abuse power include neglect must completely ignorant human condition concept like democracy fact originally meant simply rule absolute without overtone cruelty exist ought clue course possible perfectly fair try deliberately building discriminatory restriction compiler done going way unfair elm defined process contributing closest find post trust richard feldman linked official elm web page section regarding contributing elm instead process told need build trust core developer spectacularly failed built understand people think sound nice practice lead awful lot frustration even worse mean top tier community quickly become old boy network opposite kind community enjoyed elsewhere open source world open source project recognised clearly documented contribution process good thing strive keep process working well github standardised contributingmd file sarah dresner excellent guide contributing open source project virtually nothing applies elm core elm developer rejected accumulated wisdom project instead put huge wall around contributing experience wall blocking many people especially effective blocking people already minority technology community people already struggling find way example due nonnative english speaker feeling minority reason find elm contribution nonprocess impossible barrier reality always process rule see later elm leadership blind unwritten rule perfect way discriminate knowingly unknowingly core team effectively absolved responsibility potential contributor process failure process blamed people failing build relationship completely agree relationship key open source project relationship process almost every sphere life trading government starting business etc answer question anything word would optimistic ethic thing operating find certain element core elm team communicates hard stomach example take instance evan blog post elm claim every package packageelmlangorg written entirely elm mean guarantee nothing weird going dependency cut easily application package contained arbitrary javascript code would inherit optimization challenge conservative notice emphasis original claim repeated page work across entire elm ecosystem every single package packageelmlangorg written completely elm click time packageelmlangorg find view source link discover popular package listed top partly written javascript core json browser url http think possible defend evan false statement reported richard feldman many month ago kind marketing hyperbole however prefer would expect technical blog post higher regard accuracy especially talking something directly relates controversial decision read post core team instead able take reliable source information elm work becomes like deciphering political party propaganda take evan post removal custom operator start pretty dubious statement elm remove syntax userdefined operator mean syntax still much much used library available people leaving aside let look one angle follows want define custom operator use math excerpt usage package elm feature studied used far package snip math operator package math vector math matrix math generally use operator like match cultural norm common would hoped actually math snip root design goal category stem reasonable design goal try outline design goal point path towards acheiving goal nicer way snip want math really like goal think language like julia done excellent job overloading reasonable way approach really lovely would lose type system match point rather making stopgap perhaps possible think broader question comprehensive way way overload vector matrix math would work would multiply vector scalar perhaps best design restore userdefined operator bracketed math operation like certain type maybe done really nice way library worth exploring see enthusiastic evan mathematics look exclamation mark look question mark see open community idea actually happened trying math elm face significant problem first basic operator overloading baked language mathematics operator work int float type want polymorphic operation using math elm much fun addition like pure functional language present significant challenge trying high performance work elm worse escape hatch compiler still infancy come optimisation like eliminating intermediate data structure elm couple plus point although stable interface importing function written javascript compiletojavascript language unstable interface known native module could write custom operator make mathsy code least look bit nicer readable taken away evan say top going path towards achieving goal nicer actually user leave bunch question suggestion nothing exploring sound like invitation explore understood context evan person actually empowered anything lead feeling gaslighted think evan added completely unnecessary restriction made life much harder taking away genuinely useful thing people like trying mathematics without compensating improvement must imagining thing like math encouraging math said black white lot friendly exclamation mark evaluating ethical issue find analogy government helpful suppose leader whose job make policy people whether country function democracy expect everyone country equal access leader would neither desirable possible everyone able influence leader degree trusted advisor even spouse inevitably going influence elm community recognise talking need relationship go however pretty much make policy leader listen small group people pretty unwise let say live suppose leader dictator make law give preferential treatment group people like tax break looking fairness government law immediately suspect could perhaps justified preferential treatment justified basis kind work done simply certain people eg everyone food industry get certain tax break special need country objectively decide get tax break special treatment limited leader friend definitely lost plot ethically leader hypothetical dictatorship already special privilege virtue lawmaker law country along service provided government etc correspond source code produced analogy apply equally everyone whether dictatorship democracy rule applies believe fairness beauty open source software way benefit anyone human relationship software author inherently limited human nature build relationship trust everyone source code produce limitation unavoidable inequality intrinsic necessity human relationship leadership structure used excuse deliberately propagating unfairness adding discriminatory restriction thing produce people outside structure see look like practice take issue needing wrapper intl mentioned couple time long standing problem elm user elm solved able write kernel code wrap intl use elmintl install elmgithubinstall several people tried something unfortunately luke westby response illustrated many thing wrong elm leadership quote toastal step required get radar elm dev team already radar toastal seems many seem agree leveraging intl feature right thing toastal wrapped implementation making wrapper browser api posting right way propose something platform looked http githubcomvanwagonetelmintl quickly decided consider wrap intl api instead serving explain ideal elm api us intl could think pretty hard question right considering much stuff intl actually toastal going kill current solution party native code seems like thread really something us native module answer use port custom element going happen program repos distribute third party native code intl special regard uniquely poorly suited port custom element want help process along finish first step always literature review find way language platform address specific use case mind intl lot stuff consider distinct apis present learned share source immediately posted thread getting long fractious make new thread specific problem converting stuff intl use port custom element make new thread fluent stuff spookylukey working spookylukey want definitely interesting make new thread toastal anyone else want complete review prior work subject apis might use intl elm implementation feel free find slack send dm question final product might look like closed thread blocking anyone replying comment first major problem arrogance demonstrated picking luke westby merely demonstrating attitude core team despite multiple people demonstrated experience expressed willingness help including pretty clear elm core team consulted people sense might possibly benefit someone else luke flatly contradicts people list stated portscustom element really suitable wrapping intl effect say without proof despite clear people thread much experienced matter core dev need thing like reason seems need ask people hold view know better effectively accuses people thread trouble maker seems like thread really something us native mean dare bring yet another piece evidence previous decision caused huge problem adequate answer next major problem clearly demonstrates little core team understand pretty much everything said wrongheaded regarding process scold people contributed far using wrong process wrapper browser api posting right way propose something tell right process according literature review far see completely impractical discover indeed rule process always unwritten one supposed know expect chided knowing biggest problem immediately close thread give noone chance respond specific point make give process extremely unlikely go anywhere fast shuts metaprocess extremely arrogant aggressive way interact community give community member good option happen disagree could choose silent elm discourse board even enough tact realise immediately opening thread entitled everything said last thread would bad move aggressive confrontational return like eventually done blog post result entirely predictable month later time writing far see zero progress front consequence nonenglish developer end user discriminated due difficulty formatting number date correct way nonenglish locale going say something silly like programming language strong bias towards english multiple way perfectly reasonable make programming language use natural language convention author default think need feel guilty huge advantage give first language english speaker emergence common language phenomenon occurred throughout history benefit everyone however ought aware advantage fact benefited others language author go way build completely unnecessary discriminatory policy compiler despite going whole spirit open source way give additional special advantage like access certain compiler feature people already advantage like core team surprised make life even harder minority responsible discriminatory effect especially thing pointed technical reason excuse level discrimination nonenglish internet user elm project browser already provides web developer cldr data needed correctly formatting date number different locale localization issue via intl apis elm compiler already mechanism interfacing browser apis mechanism going disappear perfectly acceptable elm standard library acceptable elm core team attempt block using already existing compiler mechanism browser apis provide solution user worked example focused need intl wrapper illustrates previous point however thing happen many time every group whose need adequately represented core team suffer unfairness discrimination even easy put name group identify think asking much elm leadership principle laid seen put practice every open source community worked even project using bdfl model django beginning never expected seen behaviour seen elm leadership rather elm leadership gone way ignore normal behaviour open source project addition abandoning basic principle fairness also made work able fix certain kind bug missing library make many decision may entirely unqualified make blocked many valuable contribution many people result project feel inclined contribute open source project ever involved work bug fix feature high degree confidence contribution accepted would benefit everyone community equally least without deliberate discrimination fact one aspect open source love value able share work way benefit everyone without risk someone going take thing away use privileged elm confidence leader demonstrated believe principle behind expectation huge turnoff hope project look elm inspiration run
12,Lobsters,elm,Elm programming,Write Better Python by Learning Elm,https://medium.com/@SaturnFromTitan/write-better-python-by-learning-elm-66c391fa3fec,write better python learning elm,antipatterns alternative fragile code return typing module pycharm additional code inspection warning realpythoncom great guide custom type attr project namedtuple raymond hettinger talk realpythoncom ultimate guide mutability mutable default argument nearly enums ambiguous type python antipatterns,antipatterns alternativesthroughout section continue successively refactor python code increase robustness understandabilityfragile codelet take look following ispaid function take dictionary check paiddate value set def ispaid invoice return invoice paiddate nonecan see biggest problem function exactly guarantee paiddate available dictionary calling function might actually result keyerror paiddate piece code pretty fragile need pay close attention refactoringa safer approach would rewrite asdef ispaid invoice return invoiceget paiddate nonei go detail interested make sure check return library offer elegant solution sort problem introducing elmlike maybe container pythonthe typing modulelet take another look ispaid know invoice obvious could dictionary could also custom type implementing get method derive answer studying piece codebase call functiona good way concrete python typing module typically use mixed approach necessarily type whole codebase focus critical complex unobvious part document code save lot time especially new developer join teaman improved version would typing import dictdef ispaid invoice dict str bool return invoiceget paiddate nonenow obvious invoice expected dictionary becomes apparent get behavesin case use ide like pycharm give benefit additional code inspection warningswhen want learn typing recommend reading realpythoncom great guide subjectcustom typesknowing invoice dictionary better still pretty clueless content key invoice supposed paiddate key always available lack clear definition invoice consists call custom type especially python class syntax pretty clunky easy fall antipattern defining enough custom type rather relying native type like dictionary tuples muchfor simplicity let invoice consist three attribute amount paiddate status defining regular class end something like class invoice def init self amount paiddate status selfamount amount selfpaiddate paiddate selfstatus statusmeh quite bit clutter therefore pretty unpythonic luckily way define concisely example using dataclasses dataclasses import dataclassfrom datetime import datetimefrom typing import optional dataclassclass invoice id int amount float paiddate optional datetime status strusing refactor code accept new custom type def ispaid invoice invoice bool return invoicepaiddate nonenote point could also make property invoice leave exercise ambitious reader please note dataclasses available since python good alternative attr project namedtuple though also differ featuresif want dive deeper subject recommend raymond hettinger talk dataclasses realpythoncom ultimate guide mutability another problem language like python mutability list dictionary mutable cause surprising bug code likely encountered least mutable default argument function method go detail least want mention dataclasses attr support optional frozen keyword make class nearly immutableenums application find use case enumerated value ie attribute limited set possible value invoicestatus good example certainly small set value allowed field instance draft sent paid cancelled current implementation would string work robust typoslet consider following example def isopen invoice invoice bool return invoicestatus send see problem typed send instead sent worst case could lead overdue invoice marked paid company loses quite bit money scary use enum instead safeguarded sort bug enums import enumclass invoicestatus enum draft draft sent sent paid paid cancelled cancelled dataclassclass invoice status invoicestatusnow isopen function becomesdef isopen invoice invoice bool return invoicestatus invoicestatussendwhich would raise attributeerror send function called even single test case somehow invokes function surely find bug deploymentambiguous typeslast least would like highlight issue using ambiguous argument return type inevitably drive complexity code cause many bug attentive dealing themtake following example add new invoicemeta type carry metadata invoice toy example hope get point def getmeta invoice metas meta metas invoiceid metaid return metameta getmeta invoice metas print metarecipient problem code implicitly assumes invoice corresponding meta entity assumption hold run exception attributeerror nonetype object attribute recipientsnap ok use type annotation thoroughly would spotted return type must optional invoicemeta even find writing complex code road always need check whether meta invoicemeta none meta getmeta invoice metas meta none print recipient unknown invoicemeta recorded else print metarecipient suggested python antipatterns better approach would raise exception directly getmeta handle error different layer codedef getmeta invoice metas meta metas invoiceid metaid return meta raise lookuperror f invoicemeta available invoiceid
13,Lobsters,elm,Elm programming,Elm Bits - a weekly newsletter about Elm,https://elmbits.com,elm bit weekly newsletter elm,,week mutually recursive type embedding elm j apps esri make use elm reflection elm chronzpeter duncanmalashock jmhauck riccardoodone fissioncodes
14,Lobsters,elm,Elm programming,"LambdaConf 2020 Call for Proposals: Scala, Haskell, Kotlin, Purescript, Rust, Elm, Elixir, F#",https://lambdaconf.zohobackstage.com/LambdaConf2020#/cfp?lang=en,lambdaconf call proposal scala haskell kotlin purescript rust elm elixir f,,
15,Lobsters,elm,Elm programming,Write a jigsaw puzzle generator in Elm,https://www.juricho.me/posts/puzzle-generator/,write jigsaw puzzle generator elm,write puzzle generator elm suggest edit post elm intro http voronoi tesselation http generate grid square piece randomly move inner corner grid little bit replace edge tongue shape save svg ellie code repo tutorial possible improvement setting elm project elm compiler installed generate grid look ellie browse code repo point time ellie code repo wiggle grid ellie code puzzle edge shape explanation svg path ellie read full code lot ellie final code extract svg svginsert conclusion fun failure fun failure possible improvement initial voronoi approach,write puzzle generator elm published suggest edit post holiday season wanted make custom jigsaw puzzle gift plan write jigsaw puzzle generator use laser cutter cut much fun randomly generating puzzle nice problem beginner tinkerer wanted write approach came love hear attempted something similar especially came different solution used elm nice way produce svgs happens frontend language know best intro sidenote post turned longer anticipated want skip straight code http actually made two attempt first one based generating voronoi tesselation making heavy use elmgeometry approach subtle problem made go back drawing board second attempt describe approach much detail instead walk fully working solution based second attempt however interested look messy original code repo http broke problem generate grid square piece randomly move inner corner grid little bit replace edge tongue shape save svg high level view turn however need solve smaller problem make work look code ellie code repo tutorial see possible improvement idea make puzzle better polish overall tool try achieve setting elm project assume elm compiler installed everything need initialise project mkdir jigsawtutorial cd jigsawtutorial elm init elm install elmrandom elm install elmsvg elm install elmcommunitylistextra create srcmainelm launch elm reactor commandline open http let give skeleton mainelm commented import needed second feel free uncomment already module main exposing main import dict exposing dict import listextra list import random import svg exposing svg import svgattributes exposing main svg msg main svgsvg width height viewbox svgrect x width height already super loving two thing repeat dimension two place string nt nice canvas backdrop give visual feedback drawing window fixed convenience function parametrises dimension draw checkered background pattern code terribly interesting look use interactively ellie look like amazing way start solving actual problem generate grid benefit hindsight abstract couple thing let define basic type toplevel record hold parameter puzzle module main exposing main puzzle piecesx piecesy gridperturb seed randominitialseed draftmode false pixelspercell type alias point x int int type alias edge start point end point commented part give taste need minute need make grid square piece thought grid list corner point also list edge one generate depends want unit pixel might want keep coordinate piece separate numbering piece often confused two carrying numbering work edge take care useful later want sort path mind decided describe grid dict point key tuples correspond x numbering piece point contain coordinate bit programming function give u dictionary corner point grid rectangulargrid int int dict int int point rectangulargrid nx ny let indicesx listrange nx indicesy listrange ny index tuplepair indicesx indicesy index listmap ix iy ix iy x ix puzzlepixelspercell iy puzzlepixelspercell dictfromlist unless draw going useful let draw point main svg msg main let grid rectangulargrid puzzlepiecesx puzzlepiecesy marker dictvalues grid listmap drawmarker canvas paramswidth paramsheight marker drawing function drawmarker point svg msg drawmarker x svgcircle cx stringfromint x cy stringfromint r stroke fillopacity checkpoint look ellie browse code repo point time seems nice unfortunately still work ultimately want work edge corner challenge therefore find function following type signature type alias point x int int type alias edge start point end point calcedges dict int int point list edge calcedges kind stuff like solving programming exercise want time one solution calcedges dict int int point list edge calcedges grid let maybeconnect index point dictget index grid maybemap start point end horizontal grid dictmap ix iy point maybeconnect ix iy point dicttolist listsortby iy iy listmap tuplesecond listfiltermap identity vertical grid dictmap ix iy point maybeconnect ix iy point dicttolist listsortby ix ix listmap tuplesecond listfiltermap identity horizontal vertical might slightly complicated necessary really wanted control sorting order let draw main svg msg main let grid rectangulargrid puzzlepiecesx puzzlepiecesy marker dictvalues grid listmap drawmarker edge calcedges grid canvas paramswidth paramsheight svgg marker svgg listmap drawedge edge drawing function drawedge edge svg msg drawedge start end svgline stringfromint startx stringfromint starty stringfromint endx stringfromint endy strokewidth stroke sidenote ping know highlightjs syntax highlighting elm sometimes break like progress look like checkpoint ellie code repo step wiggle grid time make grid le boring advantage setup chose possible function transforms grid dict another grid dict new piece code module main exposing main import random puzzle draftmode true piecesx piecesy pixelspercell seed randominitialseed gridperturb perturbgrid dict int int point dict int int point perturbgrid grid let pert puzzlegridperturb randompair randompair randomint pert pert randomint pert pert randompairlistgen randomlist dictsize grid randompair randompairlist randomstep randompairlistgen puzzleseed dictvalues grid rx ry point x pointx rx pointy ry randompairlist optional keep border straight listmap snaptoborder tuplepair dictkeys grid dictfromlist snaptoborder point point snaptoborder x x snaptoborder puzzlegridperturb paramswidth x snaptoborder puzzlegridperturb paramsheight snaptoborder int int int int snaptoborder howclose maxcoord coord coord howclose else coord howclose maxcoord maxcoord else coord mostly simple code fairly tricky use random right way easy fall trap using seed list thing getting perturbation everywhere rest consists mundane logic snap outer edge back rectangular border shape could skip get interesting puzzle yay ellie code checkpoint puzzle edge shape nt look like much yet everything goint fall place next step idea replace inner edge typical puzzle tongue shape create interlocking part basically want thing everywhere help basic intuition bézier curve syntax admit stare explanation svg path quite bit basically syntax cubic spline curve two point two control point special syntax chaining bunch together looking generate something like svg path c svg coordinate point curve respective control point letter way tag also one control point omitted symmetrical previous one super easy get confused example endpoint one control point coordinate specified point time define record type keep track coordinate pair mean along drawing function type alias start point startcontrol point middle point middlecontrol point endcontrol point end point svg msg curve let stringfromint curvestartx stringfromint curvestarty c c stringfromint curvestartcontrolx stringfromint curvestartcontroly stringfromint curvemiddlecontrolx stringfromint curvemiddlecontroly stringfromint curvemiddlex stringfromint curvemiddley stringfromint curveendcontrolx stringfromint curveendcontroly stringfromint curveendx stringfromint curveendy pathstring c listmap stringjoin stringjoin svgpath stroke black fill none pathstring try ellie read full code one last fun problem solve given edge fit tongue shape also parameter decides way flip piece used boolean would good define proper type like type flipdirection oneway theotherway generating randomly exactly easy generating list bool boo laziness ok maketongue bool edge maketongue try way basically linear interpolation edge curve point definitely something lot nicer elmgeometry since define base shape rotate translate scale right way maketongue bool edge maketongue flip start end let vedge x endx startx endy starty vperp starty endy x tofloat vedgex tofloat vedgey round else startx endx x tofloat vedgey tofloat vedgex round flipmult flip else vperpn x flipmult tofloat vperpx norm vperp round flipmult tofloat vperpy norm vperp round middlescale tofloat puzzlepixelspercell round scalev h vect x tofloat vectx h round tofloat vecty h round scale h n tofloat n h round middle x vperpnx middlescale scale startx endx vperpny middlescale scale starty endy start point startx starty startcontrol point startx scale vedgex starty scale vedgey middlecontrol point middlex scale vedgex middley scale vedgey middle point middlex middley endcontrol point endx scale vedgex endy scale vedgey end point endx endy norm length vector norm point float norm vect vectx vecty tofloat sqrt definitely bunch magic number since get done nt time create nicer abstraction work bothered let hook let figure additional code main svg msg main let cnvs canvas paramswidth paramsheight grid rectangulargrid puzzlepiecesx puzzlepiecesy perturbgrid marker dictvalues grid listmap drawmarker isonborder edge false edgestartx edgeendx edgestarty edgeendy edgestartx paramswidth edgeendx paramswidth edgestarty paramsheight edgeendy paramsheight edge calcedges grid listfilter isonborder flip randomuniform true true false randomlist listlength edge l randomstep l puzzleseed tongue maketongue flip edge border svgrect x width stringfromint paramswidth height stringfromint paramsheight fillopacity stroke black cnvs puzzledraftmode svgg listmap tongue border svgg marker svgg listmap drawedge edge else svgg listmap tongue border one last time see everything together ellie look final code let see result switch draftmode false see final puzzle glory extract svg one important thing almost forgot generated fantastic svg code get really time display dom string simplest way possible copypaste generated svg site source code dumb kind quick hacky solution make happy obviously wanted export hundred could easily display svg string even hook button copy clipboard know way make elm download svg file generated let know save svg file use featureplugin vector graphic editor used svginsert happen use sketch conclusion tutorial show final happy path took little bit work come nice way express solve problem nt frustrated get stuck seemingly simple part jump fun failure see garbage produced get sure lot improvement done quite happy readability flexibility code bunch photo physical result work even cut plexiglas machine seriously cool fun failure let agree call generative art possible improvement time would like improve several thing initial voronoi approach could also generate truly random piece would cool put logic avoid tongue piece intersecting also avoid generating piece small tool could easily made website set parameter interactively low enough perturbation piece actually unique enough puzzle made quite tough solve would like randomise shape tongue bit would nt hard make thinner slanted would help lot making piece unique could engrave next puzzle making pretty slightly easier solve feel free send pull request happen hack code laser laser hi well done scrolling nothing see blank space jumping footnote nt suck
16,Lobsters,elm,Elm programming,The Power of Elm in JavaScript,https://medium.com/@franzejr/the-power-of-elm-in-javascript-816b127e4553,power elm javascript,power elm javascript could become care elm elm exist elm compiler compiler assistant total immutability purely functional good article talking fp reactive programming strong static type elm solution bringing thing j static type flow typescript find people web talking highly redux similar redux first router navigation decoder summary resource,power elm javascriptsince first learning elm heard good thing convinced elm could become future frontend development coming year maybe reason blog post elm community particularly stuck moment involved elm project however messing around elm bit want work elm know elm bring incredible thing frontend developmenthow bring thing javascript since working javascript presently let see first elm u developerswhy care elm common question people ask book called elm reillyin book say many common issue frontend developer deal exist elmyes read well simply exist imagine dealing undefined function odd thing like nan nan weird thing explanation still weirdelm compilerelm awesome compiler imagine compiler assistantelm ensures error happen compile time front developer instead runtime front user elmthe elm compiler awesome let look one example example trying return string number ifelse compiler make life easier explaining exactly error donow imagine made typo rather typing map typed napthe compiler explains give optionstotal immutabilityimagine need worry mutable state application everything immutablepurely functionalelm purely functional language mean use power functional programming codehere good article talking fpreactive programmingin imperative programming language let b cif change value b updated elm help u computing value statestrong static typesthe use type one main point using elm strong static type elm infer type variable function prevents series mistake makelso need worry null undefined elm solution thisbringing thing jswe saw elm best used let see bring thing javascript possiblestatic typesthere way bring something like static typing javascriptflowwe using flow formula projectimagine function used undeclared variablefunction myfunction let b flow explain used undeclared formulaereact git master flow let b identifier b could resolve namefound errornow imagine function receives number pas string function timestwo x number return x function main timestwo hello flow say type incompatible expected parameter formulaereact git master flow timestwo hello string type incompatible expectedparam type function timestwo x number numberfound errorthese little thing help lot development phasetypescripttypescript lot interesting feature find people web talking highly personally prefer using flow mentioning typescript think good go reduxfor work react redux based elm architecture already using redux using something elmbased never thought itwe using redux like check simple structure program elm see model function update view similar reduximport html exposing modeltype alias model updatetype msg reset update msg model modelupdate msg model case msg reset viewview model html msg view model redux first routeranother thing think good redux first router using project mentioned earlier liked idea routing state another part application statein store define route const routesmap home action url path product product id id dynamic segment action used reducer change state change routeconst productsreducer state init action switch actiontype case home case product handling routing elm via navigation basically thingdecoderselm us layer called decoder boundary frontend backend see language elm explicitly javascript code created decoder data received created encoders data sendas using immutablejs convert json receive app type app recognizes weird json structure easily also add new validation phase getting data apilet imagine api person receive data server call decode function responsibility return persontypeconst person get name string promise persontype return apiget name resp decodepersontype respdata case persontype immutable recordimport record immutableexport default class persontype extends record name age github name string age number github string code apiperson typehis map exactly json receivetype apiperson name string age number github string decodepersontype person apiperson persontype return new persontype name personname age personage github persongithub decode function convert api type apiperson persontypesummarynow know good thing elm bring u work javascript project probably bring elm feature javascript coderesources
17,Lobsters,elm,Elm programming,Writing a Chrome Plugin with Elm,https://www.dev-log.me/writing_a_chrome_pluging_with_elm/,writing chrome plugin elm,elm http githubcomyannickcwelmexamplechromeplugin setting project createelmapp setup plugin extension api enabling plugin extension api using port access plugin api port doc mock dev,recently need write small browser plugin one project thought already making feel bad thinking needing program javascript fear turned joy realized perfect opportunity write plugin elm favorite language frontend elm beautiful language similar feel haskell give benefit runtime exception great performance functional core great error message compiler elm architecture check nice introduction find whole code example http githubcomyannickcwelmexamplechromeplugin setting project create elm project createelmapp make developing pretty comfortable easy run createelmapp elmplug cd elmplug afterwards verify working run elmapp start see elm app running http structure like elmplug readmemd elmjson gitignore able run elmapp build generates production build u build buildstatic setup plugin next need add manifestjson file publicmanifiestjson already one replace new need different setup using app plugin manifestversion name elm plug description example plugin version browseraction defaultpopup indexhtml permission cooky http wwwtestde one important part tell browser file load initially browseractiondefaultpopup get permission want access anything extension api want read cooky later already add also add url specify host access eg read cooky next time add plugin browser see action enabling plugin run elmapp build build new manifestjson build directory ready need load build directory unpacked chrome plugin shown gif great already elm application running plugin else need access extension api would great interact browser outside plugin using port access plugin api access anything outside save elm world need use port way interact asynchronously j synchronous way directly interact anything outside could risk runtime exception guarantee go detail port work check nice doc information need create new file portselm port module port exposing askcookie updatecookie cookievalue type alias cookievalue string type alias cookiename string port updatecookie maybe cookievalue msg sub msg port askcookie cookiename cmd msg important add port front module declaration added two function askcookie used send something outside world updatecookie used receive something outside world askcookie returning resulting cookievalue way asynchronous message outside triggering action never rely j code outside ever expect maybe receive cookievalue use updatecookie need provide function creates message cookievalue get back let use port mainelm add import port exposing askcookie updatecookie cookievalue import send askcookie event plugin opened type alias model maybe cookievalue init model cmd msg init nothing askcookie somecookie next need make sure listen cooky coming updatecookie add new msg fulfilling exactly parameter updatecookie function maybe cookievalye msg type msg gotcookie maybe cookievalue add subscription updatecookie main program model msg main browserelement view view init init update update subscription updatecookie gotcookie finally react received update cookie update msg model model cmd msg update msg model case msg gotcookie maybecookie maybecookie cmdnone display cookie value view model html msg view model let cookietext case model c text c nothing text get cookie div img src logosvg cookietext get lastly need add javascript actually read cookie browser therefore change srcindexjs file import maincss import elm mainelm import serviceworker serviceworker const app elmmaininit node documentgetelementbyid root const updatecookie cookiename chrome chromecookies chromecookiesget url http wwwtestde name cookiename function cookie cookie appportsupdatecookiesend cookievalue else appportsupdatecookiesend null appportsaskcookiesubscribe updatecookie serviceworkerunregister subscribes askcookie message run updatecookie function whenever new message akscookie updatecookie function try access cooky wwwtestde given name cookie send asynchronously back elm app updatecookiesend send null case find cookie receive nothing inside elm app cookie set wwwtestde name somecookie show open plugin mock dev one last thing make development easier faster mock chromecookies access see elm app behaviour without running elmapp build every time change eg add indexjs const updatecookie cookiename chrome chromecookies chromecookiesget url http wwwtestde name cookiename function cookie cookie appportsupdatecookiesend cookievalue else appportsupdatecookiesend null else appportsupdatecookiesend devcookie develop elmapp start running inspecting page browser directly instead plugin window thats get started building plugins elm
18,Lobsters,elm,Elm programming,Subverting Elm packaging for fun and profit,https://vllmrt.net/spam/subverting-elm.html,subverting elm packaging fun profit,elm application internationalization api ecmascript internationalization api elmtime calling native code port recent insight native module compiling module little demo app get module app building elm apps guix robxshelm guix discussion making thing right shelm githubcomrobxelmdatetime githubcomrobxshelm spam,elm application working present item publication timestamps user around world far printed slightly mangled utc timestamp formattimestamp string string formattimestamp t t stringleft stringlength stringreplace worked well enough start felt time solve properly give user localized timestamps article account quest better timezone aware variant formattimestamp meet ecmascript internationalization api figure write simple native elm module build binary package database using printf trick elm compiler cooperating likely elm team preferred approach best keep official elm community channel internationalization api first thing need move stringy timestamps something logical elm talk unix timestamps type posix posix int number millisecond since epoch instead parsing timestamps clientside using something like opted conversion postgrest backend publishedat extract epoch publishedat publishedatposix looking timezone locale aware function formattimestamp posix string turn browser rather neat interface related topic ecmascript internationalization api way want given posix value function formattimestamp posix var datetimeformat new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric return datetimeformatformat posix undefined first argument constructor mean use user locale unspecified timezone second option argument mean use user local timezone think together format dec utc pleasing engb locale europeberlin timezone locale say enus thucabuddhist would show pm respectively figure local setting enter following browser console new intldatetimeformat resolvedoptions elm turn tricky however time library situation bit mess barebones core library elmtime speaks unix timestamps variety date time related package none appear job simple mostly pure javascript solution available use calling native code documented approach interacting javascript code elm using port would effectively turn simple function call asynchronous rpc invocation ton scaffolding appear acceptable solution thought apply recent insight elm tooling figure use javascript api within elm seemed like fun challenge native module following along vanwagonetelmintl elmtime javascript interop came native module elmkerneldatetime implemented file srcelmkerneldatetimejs function datetimelocalnumericdatetime return new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric var datetimeformat function datetimeformat value return datetimeformatformat value together elm wrapper module datetime implemented srcdatetimeelm module datetime exposing datetimeformat localnumericdatetime format import elmkerneldatetime import maybe exposing maybe import time exposing posix type datetimeformat datetimeformat localnumericdatetime datetimeformat localnumericdatetime elmkerneldatetimelocalnumericdatetime format datetimeformat posix string format datetimeformat posix elmkerneldatetimeformat datetimeformat timeposixtomillis posix walking javascript file start empty header comment listing elm import declare function elmkerneldatetimelocalnumericdatetime datetimelocalnumericdatetime called elm unit argument finally declare twoargument function datetimeformat curried form using helper compiling module setting thing naïvely following elmjson type package name robxelmdatetime summary format local date time via javascript license version exposedmodules datetime elmversion v dependency elmcore v elmtime v testdependencies get error elm make elm make bad module name srcdatetimeelm datetime module trying import elmkerneldatetime name like reserved internal use switch name outside elmkernel namespace bad robx cookie instead moving module elm namespace let move package name robxelmdatetime name elmmyelmdatetime elm make happy elm make success compiled module also call elm make docsdocsjson check happy state documentation otherwise compiling app using package fail obscure error message elm tooling ensures published package dependency fail compile bypass later little demo app test function give u something concrete try make work let build small demo app merely tick clock module demo exposing main import browser import datetime import html import time main program model msg main browserdocument init init view view update update subscription subscription type alias model time maybe timeposix type msg tick timeposix init model cmd msg init flag time nothing cmdnone update msg model model cmd msg update msg model case msg tick posix model time posix cmdnone view model browserdocument msg view model let format datetimeformat datetimelocalnumericdatetime title puzzle body case modeltime posix htmldiv htmltext stringfromint timeposixtomillis posix htmldiv htmltext format posix htmldiv htmltext subscription model sub msg subscription model timeevery tick track current time model subscribing timeevery display next formatted version build assemble naïve elmjson type application sourcedirectories src elmversion dependency direct elmbrowser elmcore elmhtml elmtime elmmyelmdatetime indirect elmjson elmurl elmvirtualdom testdependencies direct indirect naturally work elmmyelmdatetime exist elm tool elm make srcdemoelm corrupt cache ran unknown package exploring dependency elmmyelmdatetime get module app course publish elm package database name get fun part approach took building elm apps guix help fact building guix could pull pretendelm package quite easily without extra work regularly developing using guix wanted find shellbased solution necessary environment tweak get elm play along fetch dependency archive unpack elm home directory went elmstuffhome mean unpacking eg elmdatetime package accordingly dependency elmjson generate elm registry using printf generate binary data call homeelmstuffhome httpproxy elm make build collected wrapped various shell snippet involved bash script available robxshelm let look core part regular elm package step may achieved jq curl tar jq r dependenciesdirectdependenciesindirect toentries key value tsv read package version unpack mktemp cd unpack curl l http githubcom package archive version targz tar xz dest elmhome package mkdir p dest mv unpack dest rmdir dest done collect dependency elmjson need little bit careful work move right place turn code also work fine unpublished package elmmyelmdatetime thing need redirect real github project robxelmdatetime chose encode information extra elmjson field dependency direct elmmyelmdatetime location elmmyelmdatetime method github name robxelmdatetime compact format like elmmyelmdatetime robxelmdatetime worked initially present form result overengineering packaging script might tweak unpacking fragment support follows location jq dependencieslocations package name package elmjson cd unpack curl l http githubcom location archive version targz tar xz step list package version installed package cache write elm binary package registry format use printf eg integer encoded bigendian byte haskell binary encoding integer byte bigendian hex printf printf x x x x printf x x x x see guix discussion detail fixing various bug work cd l hexdump c elmbrowser elmcore elm html elmjson elmmyelmd atetime elmtime elmurl elmvi rtualdom home pwd elmstuffhome httpproxy elm make outputdemojs srcdemoelm dependency loaded local cache dependency ready success compiled module app action elmdatetime demo making thing right might stop still issue native datetime module format datetimeformat posix string pure function localnumericdatetime datetimeformat lying pretend calling intldatetime locale option without fully resolved option depends environment might change call eg timezone change model correctly change task type localnumericdatetime task x datetimeformat modelling thing timehere change javascript module follows asrcelmkerneldatetimejs bsrcelmkerneldatetimejs import elmkernelscheduler exposing binding succeed function datetimelocalnumericdatetime return new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric return schedulerbinding function callback callback schedulersucceed new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric elmkernelscheduler native module behind task elmside diff trivial asrcdatetimeelm bsrcdatetimeelm module bind import elmkerneldatetime import maybe exposing maybe import task exposing task import time exposing posix type datetimeformat create datetimeformat using user locale timezone localnumericdatetime datetimeformat localnumericdatetime task x datetimeformat localnumericdatetime elmkerneldatetimelocalnumericdatetime let bump package version aelmjson belmjson name elmmyelmdatetime summary format local date time via javascript license version version exposedmodules datetime getting demo involves performing task obtain formatter application startup keeping around model bdemoelmjson elmcore elmhtml elmtime elmmyelmdatetime elmmyelmdatetime indirect elmjson diff git ademosrcdemoelm bdemosrcdemoelm index ademosrcdemoelm bdemosrcdemoelm module demo exposing main import browser import datetime import html import task import time main type alias model time maybe timeposix format maybe datetimedatetimeformat type msg tick timeposix newformat datetimedatetimeformat init model cmd msg init flag time nothing cmdnone time nothing format nothing taskperform newformat datetimelocalnumericdatetime update msg model tick posix model time posix cmdnone newformat fmt model format fmt cmdnone view model browserdocument msg view model let format datetimeformat datetimelocalnumericdatetime title puzzle body case modeltime posix case modeltime modelformat posix fmt let format datetimeformat fmt htmldiv htmltext stringfromint timeposixtomillis posix htmldiv htmltext format posix done make shelm fetch pruning stale dependency fetching http generating shelm make outputdemojs srcdemoelm dependency loaded local cache dependency ready success compiled module still work time around used shelm build application via make elmdatetime demo find full code package demo app githubcomrobxelmdatetime release shelm package manager available githubcomrobxshelm comment question write spam domain spam spam
19,Lobsters,elm,Elm programming,Minesweeper in Elm,https://functional.christmas/2019/4,minesweeper elm,tl dr minesweeper background result play code biggest challenge thought,tl dr sucker math necessarily good like really dislike null pointer exception relate functional programming probably something like almost replicated minesweeper elm thought write little bit background started working bekk nt heard functional programming mostly coincidence joined group started practicing elm struggle beginning actually quite time practiced maybe gotten past noob level decided wanted try write classic minesweeper game elm wanted without getting hint like following tutorial sort idea way struggle would steep learning curve could get hopefully guess believe efficient way practice learn new thing thought would try persuade reader try something similar hopefully something involves functional programming result look like moment still stuff feature missing exactly clean code far afraid point learn fast hope excused entire design manually written svg part pretty happy want play check help code biggest challenge thought would pick one part code dig instead trying cover much part found challenging black belt recursion likely easy task white belt maybe yellow gave one great nerdrushes got working end task click square contains nothing neighbour automatically open neighbour also contains nothing neighbour automatically open ca nt open empty square collection neighbour solution started sketch model matrix use coordinate j every square id stepping example open opening neighbour seeing also empty square opening neighbour square seeing empty neighbour opening neighbour square putting something done recursively open open neighbour save list named something like listofcompletedsquares save empty neighbour list named something like todolistofemptyneighbours except already listofcompletedsquares case todolistofemptyneighbours empty return result finished case moment case todolistofemptyneighbours empty whole process changing another square todolistofemptyneighbours wrote elm goagain algdat algdat goagain ag let currentmatrix agcurrentmatrix currentsquare agcurrentsquare remaining agremaining done agdone newemptyneighbours getlistofemptyneighbours currentmatrix currentsquarei currentsquarej matrixupdated openallneighbours currentmatrix currentsquare doneupdated currentsquare done remainingupdated updateremaininglist remaining newemptyneighbours done currentsquareupdated listhead remainingupdated case currentsquareupdated nothing remaining remainingupdated currentmatrix matrixupdated currentsquare currentsquare done doneupdated debugremaining newemptyneighbours nextsquare goagain remaining remainingupdated currentmatrix matrixupdated currentsquare nextsquare done doneupdated debugremaining newemptyneighbours list remainingupdated member left currentsquareupdated actual square nothing nextsquare case lead stupidly named function goagain calling take self criticism bad naming messy thing find name type algdat example stupid name chose since nt want try come something better got work cleaned still hav nt done could probably efficient guess could turn lot inefficient well guess happy moment least lot fun seriously thought reactreduxtypescript great mostly use work ton great module easily used famous hard get project use anything else hard create bug many wereare fault admit often hard find compiles anyway almost every time track bug usually something caused something undefined null dream compiler tell elm forgotten side effect type accidental mutation pure function make much easier get wa nt scratched surface functional programming applicatives functors monad nt know yet bet awesome
20,Lobsters,elm,Elm programming,Guix and Elm,https://vllmrt.net/spam/guix-elm-1.html,guix elm,guix system elm developing guix infrastructure building elm apps using package elm reactor full elm tool deploying elm web application guix system tool githubcomelmcompiler currysoftware fork packageelmlangorg part packaging elm compiler minus reactor elmcompilerrelaxglslboundpatch scheme record quasiquote guix hackage turn elmcompilerdisablereactorpatch guix repository next article spam,month ago converted server administering run guix system recommend point subject long tragic story yet told learn lot along way particular get elm web app built running want talk aim document state elm packaging work others build show bypass elm highly opinionated packaging infrastructure provide introduction guix packaging split series article packaging elm compiler developing guix infrastructure building elm apps using package elm reactor full elm tool deploying elm web application guix system first part go guix packaging elm compiler proper haskell project work already made guix upstream guix package showelmcompiler name elmcompiler version output system dependency ghcansiterminal ghcansiwlpprint ghceditdistance ghcfileembed ghchttpclienttls ghchttpclient ghchttptypes ghchttp ghclanguageglsl ghclogict ghcnetwork ghcrawstringsqq ghcscientific ghcsha ghcsnapcore ghcsnapserver ghcunorderedcontainers ghcvector ghcziparchive location homepage http elmlangorg license modified bsd synopsis elm command line interface without elm reactor description includes command like elm make elm repl many others helping make elm developer happy productive elm tool source githubcomelmcompiler command line program provides variety subcommands related building elm application written haskell first step build tool guix enough tool able run elm make successfully source githubcomelm packaging version elm meantime bugfix release released avoid problem upstream release initially based packaging currysoftware fork found patch apply elm source useful rough idea elm tool work elm project come two form package application package distributed via packageelmlangorg used library package application application hand end product compiling javascript served web browser project defined file elmjson elm tool run directory containing file provides couple command relevant one u elm make download package dependency elm packageelmlangorg compile dependency within elm internal format compile elm module within elmstuff internal format application compile internal format javascript elm reactor serf web app interactively debug elm application implemented elm application face issue elm make allinone design great ease use thing way meant done building sandboxed environment without internet access need trick believe actually built package database talking packageelmlangorg grudgingly fall back offline mode work u concretely construct package database unpacking dependency source generating versionsdat database issue elm reactor use build since elm application need elm make logic available build clean way twostage build first build elm compiler use build elm reactor good except upstream build solves different rather hacky way call via template haskell generating web application javascript build elm tool one address tearing build apart first stage patch reactor build version elm tool primarily support elm make second stage reenable reactor providing javascript file built using first stage elm make tool nix deal issue different way see part brief comparison packaging elm compiler minus reactor step follow package elm make make sure haskell project build stack right lts version generate package definition using guix import hackage elmcabal import unpackaged haskell dependency replace source field refer github release apply patch go process explicitly least share pain inherent guix packaging work first step easy enough found thing built fine ghc stackage release applying patch elmcompilerrelaxglslboundpatch relax version bound guix import hackage convert cabal file expression form package name ghcelm version source origin method urlfetch uri stringappend http hackagehaskellorgpackageelmelm version targz failed download tar archive buildsystem haskellbuildsystem input ghcansiterminal ghcansiterminal ghcziparchive ghcziparchive homepage http elmlangorg synopsis elm command line interface description includes command like elm make elm repl many others helping make elm developer happy productive license scheme record number named field important one source declares package source archive input declares list dependency typically package buildsystem declares build system used pretty much build system define source input field actually dependency input given association list pair packagename package name appears mostly irrelevant package package record like defining knowing scheme well thought comma part tuple syntax instead part scheme syntax defining data mix literal evaluated data quasiquote starting guix tempting mostly fine thing copyandpasting existing package definition sorry state guile error message really way around learning language let try build package definition write file called elmscm call guix build guix build f elmscm procedure proc error package unbound variable hint forget usemodules guix package indeed putting hinted line top file help guile module guix package defined guixpackagesscm within guix git repository generally guix tooling packaging infrastructure defined within guix package defined gnu next failure relates broken source field guix build f elmscm guix build error exception thrown condition character e string failed download tar archive unsurprisingly failed download tar archive valid hash happened elm actually published hackage guix import failed download source archive compute hash fix edit file refer correct uri elm compiler source put arbitray valid hash copied another package definition eventually fix hash correct version guix build f elmscm procedure proc error urlfetch unbound variable hint forget usemodules guix build download well forget indeed adding import get u guix build f elmscm procedure proc error haskellbuildsystem unbound variable hint forget usemodules form yes also need usemodules guix buildsystem haskell guix build f elmscm procedure proc error unbound variable hint forget usemodules guix license oh guix build f elmscm procedure input error ghcansiterminal unbound variable hint forget usemodules form oh dependency yet imported find one guix search ghcansiterminal name ghcansiterminal version output system dependency ghccolour location homepage http githubcomfeuerbachansiterminal license modified bsd synopsis ansi terminal support haskell description package provides ansi terminal support haskell allows cursor movement screen clearing color output showing hiding cursor changing title relevance defined module gnu package haskellxyz add import similar missing import fix also importing gnu package haskellcheck gnu package haskellweb elm dependency packaged usually point expect find library still missing package first guix import recursive mode help guix build f elmscm backtrace guixstorescm callwithstore guixscriptsbuildscm storeconnection catch procedure guixuiscm guixscriptsbuildscm appendmap appendmap package elm guixscriptsbuildscm guixpackagesscm cache weaktable package elm thunk bag derivation storeconnection haskell package ghc source origin http catch procedure guixpackagesscm guixstorescm runwithstore storeconnection guixbuilddownloadscm urlfetch timeout verifycertificate procedure urlfetch invalid keyword oops never seen error going step writing article turn helpful hint import guix build download misleading want import urlfetch guix download instead guix build f elmscm downloading http transferred hash mismatch expected hash actual hash hash mismatch store item progress copy paste actual hash elmscm actually trying build though expected run trouble haskell configure phase guix build f elmscm starting phase configure running runhaskell setuphs command configure configuring setuphs encountered missing dependency languageglsl need apply patch elmcompilerrelaxglslboundpatch store current directory add source definition source origin method urlfetch filename uri http patch elmcompilerrelaxglslboundpatch guix build f elmscm error exception trying run compiletime code homelessshelter createdirectory permission denied permission denied code bstoexp runio buildcompile untyped splice bstoexp runio buildcompile bstoexp runio buildcompile finally run trouble convoluted elm build trying run compiler building try write home readonly inside guix sandbox could get around providing writable home directory fail soon try access network fix adding another patch elmcompilerdisablereactorpatch guix build f elmscm successfully built hi thank trying elm evan hope like success wrapping package guix upstream requires little bit work bind package definition name place module within gnu package hierarchy move patch gnupackagespatches add file list gnulocalmk rewrite guix importgenerated synopsis description fit guix style markup format look complete patch guix repository next article see use elm compiler within guix package elm application comment question write spam domain spam spam
21,Lobsters,elm,Elm programming,The Biggest Problem with Elm,https://medium.com/@cscalfani/the-biggest-problem-with-elm-4faecaa58b77,biggest problem elm,biggest problem elm elm architecture tea short need differentiator small hammer big job state management nightmare serial parallel spaghetti execution done proceed,biggest problem elmthe biggest problem elm language lack higher level abstraction like many haskellers complain language keep removing advanced feature favor beginner experiencethe ffi foreign function interface mechanism allows developer call javascript elm leaf lot desired especially compared functional language mechanism would benefit returning task instead cmd biggest problemand programmer prohibited writing effect manager eg websocket effect manager would support websockets natively instead forcing developer use weak ffi mechanism known portsit certainly boilerplate code find writing interface json api backend loc application around codebase fact elm language worked almost decade official support private library still biggest problemthese problem pale comparison biggest reason leaving elm purescript elm architecturethe elm architecture tea short elm architecture work well lot case one size never fit see different library ecosystem solve similar problem elmat first might think one architecture great thing get lot benefit single hammer toolbelt master lone hammer know exactly drive every nail encounteralso look someone else program already understand structure already understand architecture strength single architecture applicationsthis approach attractive two type programmer new one one develop simple application new elm find great comfort able understand someone else code much quicker would environmentsthose play elm make simple standalone game small application say line le sing praise anointed architecture defend vehementlyand argument without merit small hammer great tool ever hang picture need certainly want heavy hammer fact overpowered tool make life miserablebut underpowered oneneed differentiatoras long simple problem solve simple tool best solution push simple tool far quickly learn cost limitationsthe small hammer hang picture perfectly today fail miserably try use break cement tomorrow need different hammerdoes eventual need jackhammer invalidate small hammer absolutely free purchase jackhammer use whichever tool make sense jobbut talking multiple hammer world allowed use one specific small hammera small hammer big jobas program grows complexity find creating module actually set module contain following file bigger application application toplevel update manage calling update lowerlevel update module complicated need call cmdmapsame go calling view view module like update subscription complicated call submapall plumbing boilerplate necessary tea mechanism handling anything single update model view subscription topmost level rest youthis part problemstate management nightmareimagine user navigates page need make multiple call backend retrieve data two choice make request parallel serialserialif make serially take longer render page code simpler make call backend finished handle response previous call make next call repeat received everything need finally render pagethe processing simple serial codehere squirrel away data retrieved time get result previous call data need finally render pagethis overly simplistic code example illustrates overhead state management serial caseparallelif make request parallel need handle response come asynchronously particular order parallel codenotice painstakingly check result call time error prone process sure help compiler accidentally type instead new elm may think code could helped async library first reactioni thought could build function update function must return elm runtime async call completedif try library quickly realize burdening caller managing yet another update function model limitation tea really become apparent herein javascript create library parallel async call javascript specify callback return exact scope originating call madein elm always exit scope forcing u manage state unnecessarily manually squirrel away temporary data model would normally scope upon returning one async callsconstantly exiting scope necessary requirement tea elm runtime continuespaghetti executionwe use websockets app since longer allowed write effect manager since websocket support recently removed elm forced websocket communication port write websocket code javascriptthis mean listen message coming back websocket using subscription every single place websockets usedwe give javascript message constructor properly mapped using cmdmap prepare completion message proper delivery code originating callthis functionality reserved effect manager instead everyone call backend must listen response process one matching initiator id state management make sure expecting callto make matter worse procedure developer must go see single request sent response handled frustrating tedious must weave dozen file port subscription message model update javascript code etc piece together picture application workswhat doneso fix tthe real problem hammer small job big carpenter idea limiting small hammer would latelearning limitation tool really important point article inform thinking using elm small hammer depending technology choice andor requirement may hit hard wallsyou work around cost complexity line code large team equally sized budget expect codebase remain stable added complexity technological debt worry aboutbut case u complexity curve grew exponentially pushed tea limit noredink dollar staff help mitigate limitation make matter worse codebase brand new changing foreseeable futureso forced live technical debt pay even higher price moving application purescript time tellhow proceedi suggest building prototype application overcome call technological hurdle technology tried one hurdle websockets via port call elmalso create proof concept application example page app build page depth first depth tea killer breadthmake sure implement encoders decoder fuzzers soon possible help judge level effort necessary working json language like purescript haskell nearly zero thanks generic time step embarked project mostly toss line code found elm would removing native code capability regular developer put project woefully behind scheduleif take time start see area complexity creeping boilerplate polluting codebaseif see manageable best advice move forward caution would using new technology stack could application requirement perfect small hammerunfortunately u bought small hammer proceeded use like jackhammer let happen youbest luck
22,Lobsters,elm,Elm programming,Elm 0.19.1 released: The syntax cliff,https://elm-lang.org/news/the-syntax-cliff,elm released syntax cliff,,
23,Lobsters,elm,Elm programming,Re-writing Vy.no in Elm,https://blogg.bekk.no/using-elm-at-vy-e028b11179eb,rewriting vyno elm,website early experiment new developer quickly became productive boilerplate fine rough edge elm stay,written robin heggelund hansen kjetil vallevy largest transport provider norway website million visitor month people depend every day purchase bus train ticket another interesting fact website almost entirely written elm application make nonstatic part website application rely private package common functionality little bit javascript certain operation directly supported elm amount line code number continues grow dayphoto vymads kristiansenearly experimentswe elm production vy since late started testing language small internal application get feel capability limitation found strong type system prevented several class bug application alluring promise runtime exception confirmed big boost productivity short really liked yet still unsure whether would scale real use term making something complex end user also term introducing new language team functional one thatto test latter summer tasked team summer intern renewal seat map application crucial component ticket booking process use elm language prior experience surprise took language easily work turned great application wrote still running production minor change sincethis experiment gave u confidence needed try elm larger scale luck would decision made rewrite entire booking process vy vision make easier accessible purchase ticket even people travel using environmentally friendly public transportationfast forward today entire booking process rewritten elm well part websitenew developer quickly became productivewe found surprisingly easy get new people speed project starting diehard elm fan quickly grown elm developer spread across multiple team several round summer intern also proven possible learn elm system become productive matter day achieved combination intro elm workshop liberal use pair programmingan approach found especially useful find person comfortable start part code base instance someone deep knowledge html cs probably start work view code someone primarily know backend coding perhaps working api integration familiar ground good starting point feel comfortable easy expand look new aspect applicationthere boilerplate finewe believe big reason behind success getting new developer rapidly speed due core design choice behind language namely elm small language feature favor explicitness type system involved everything tool abstract away repetitive code outside wrapping thing functionslet look error handling example elm wrap everything fail type want extract value type first check something fact go wrong avoiding possible would javascript pretend everything ok catch case exception handler top program write one error handler work kind error either elm way declaring two type adhere contractthis lead elm criticized tool avoid boilerplate experience however good thing explicit elm apps tend easy understand code without familiar figure function perform kind side effect simply glance type signature elm apps also tend structured way want see sort thing happen simply look top level update function app structured little differently easy figure thing meant work simply starting top level mainelm filewhile boilerplate tends viewed negative many language framework found simple important guide frontend application set reading able better understand given system worksit rough edgeswe also share frustration mentioned earlier code resides package reused frontend facing apps elm however support private package ended using third party tool called elmgitinstall solve issue work fine elm application relying private package private package able rely private package forced u include frontend app within package repo sole purpose building package dependency least know work outside repowhile show stopper little awkward several developer view sign language immaturityanother thing issue small number thirdparty package partly due elm young age also core design decision languagethe way elm make promise runtime exception strict kind package available mean javascript included package deployed elm package registry library pure elm code allowed many case javascript interop becomes unavoidablefortunately u big problem total line javascript code across application duplicated app however point time caselast year wanted phone number validation one apps elm package time imported javascript library called elm mechanism javascript interop portsports work asynchronously fine certain thing like local storage websockets validating phone number ideally synchronous operation introduced lot unnecessary complexity consider phone number validation occurred could happen user click submit button entering phone number end causing bug surprisingly difficult find given size featurefortunately u elmphonenumbers library came along able replace asynchronous validation code three simple line elm code lesson learned still relevant javascript interop quite painful especially converting synchronous api asynchronous oneelm staythe thing got u interested elm first place wish good static type system along guarantee runtime exception two year experience elm production found promise result definite boost productivity team member experienced inexperienced alike feel confident making larger change code base languagesbecause easy scale elm enthusiast one small application significant portion website elm supported growing team elm developer refactoring easy lot pain associated scaling fade awaya common misconception risky use nonmainstream language since difficult find developer right experience found however need people know elm beforehand onboarded people different technical background tend pick language rapidly become productive within dayswe found elm joy work part course issue nothing able work around extreme case something pure elm always use escape hatch rather escape port javascript instance needed far betweenin total experience working elm overwhelmingly positive look forward continue working going forwardthanks aksel fredrik sonja many others proof reading feedback
24,Lobsters,elm,Elm programming,Learning Elm by porting a medium-sized web frontend from React,https://benhoyt.com/writings/learning-elm/,learning elm porting mediumsized web frontend react,learning elm porting mediumsized web frontend react go taste elm port number loved could improved wedding gift registry elm official guide taste elm image credit increment decrement counter official guide port overall structure guest view modal json decoding number bundle size asset size react realworld example app elm equivalent line code react elm reasonml elmformat performance elm fast outofthebox performance loved elm tooling package type system ergonomics simplicity could improved documentation guide community faq syntax summary elmformat json decoding date handling use elm work,learning elm porting mediumsized web frontend react october summary learn elm ported frontend small site run react elm fun mindexpanding time go taste elm port number loved could improved learn learnt go similar way porting backend wedding gift registry website python go time learn something new frontend colleague mine passionate elm enthusiasm well selling point elm homepage guide got interested elm programming language building web apps far good also statically typed functional programming language pure functional one almost enough turn actually spent time scala couple year ago really disliked compiler slow language complex learning curve steep people seemed love writing indecipherable dsl using operator overloading ah punctuation elm functional also easy get started official guide nice way punctuation everywhere compiler fast provides helpful error message taste elm promise elm runtime exception safe refactoring achieves powerful static type system pure function immutable type everything type checked null undefined poke object tweak field side effect possible language every elm app model type represent current state example list gift registry form field value etc think react state view function take model return html like react render update function responds message like button click form field change return new model like redux reducer note none modifies anything view function return new html update function return new model additional side effect command execute elm browser runtime take care dirty work actually modifying dom running command asked pattern much like redux type safe significantly simpler come called elm architecture note data flow one way image credit elm code look like classic increment decrement counter app elm module main exposing import browser import html exposing button div text import htmlevents exposing onclick set thing main browsersandbox init count view view update update model type state one field count type alias model count int possible message action type msg increment decrement return new model based incoming message update msg model case msg increment model count modelcount decrement model count modelcount return html view model state view model div button onclick decrement text div text stringfromint modelcount button onclick increment text note particular view function plain elm template language jsx syntax learn html node function take two argument list attribute list child content node exception text creates text node take single string argument example href example class eglink text example even though elm statically typed explicit type specify type signature function get slightly better error message elm us type inference whole program level want add type signature look like take msg model return new model update msg model model update msg model case msg take model return html msg view model html msg view model div get taste elm go nice official guide port porting gift registry app started registry page center app view two mode admin couple view guest react codebase code intertwined lot admin else clause mistake even reactland wanted fix elm port however fairly direct port overall structure structured app around three view admin home guest modal manage conceptually addition common functionality like api call date gift type etc adminelm adminregistryelm editdetailsmodalelm editgiftmodalelm imagemodalelm personalmessagemodalelm sendinvitesmodalelm homeelm findregistrymodalelm signinmodalelm guestelm guestregistryelm crossmodalelm uncrossmodalelm apielm dateelm flashelm giftelm modalelm file owns model type exception view helper function flashelm modalelm wrote view admin home guest using browserelement rather browserapplication could mounted serverrendered page like react version especially important homepage content serverside rendered interactive function use elm standard elm architecture stuff every page model type view update function model initialized via elm flag json written html server elm initialized javascript follows var guestapp elmguestinit node documentgetelementbyid registry flag registry registry gift gift initialmessage sessionmessage null initialerror sessionerror null function reporterror message consolelog error reported elm message ravencapturemessage message send sentry guestappportsreportguesterrorsubscribe reporterror turn thing reporterror used decoding initial flag payload messed json json decoder somehow get reported via sentry error handled gracefully inside elm guest view first page built guest view guestelm standard elm modelviewupdate structure important model type alias model registry guestregistry gift list gift defaultimageurl string viewasguest bool flash flash modal modal flashing message error top screen type flash flashnone flashsuccess string bool flasherror string bool popopen modal crossing gift uncrossing type modal modalnone modalcross crossmodalmodel modaluncross uncrossmodalmodel render main part page basic guestregistry info list gift couple setting passed via serverrendered html template also flash message modal usually visible modal first tricky thing figure organize modal first everything inline toplevel file eg guestelm two modal guest view would okay unwieldy admin view five different modal large number field example model editgift modal admin view type alias model id int category string name string detail string url string price string quantity string currencysymbol string registryslug string numbought int gift list gift defaultcategories list string showingdeletequestion bool previouscategory maybe string nameerror maybe string categoryerror maybe string quantityerror maybe string priceerror maybe string want field toplevel model moved modal different file model type view work well easily forward message modal viewmodal modal html msg viewmodal modal case modal modalnone text modalcross model htmlmap crossmodalmsg crossmodalview model modaluncross model htmlmap uncrossmodalmsg uncrossmodalview model command using cmdmap translate modal command toplevel command pas elm runtime le obvious pas data action back modal top level example modal closed looking around web browsing forum decided use effect additional type modal update function return telling top level app modal update look like update msg model model cmd msg effect update msg model case msg couplenamechanged value model couplename value cmdnone noeffect closerequested model cmdnone closed like regular elm update function return new model cmd also return effect case return noeffect need communicate parent return effect like closed indicate user closed modal drawback forwarding effect passing fair number line boilerplate modal elm pro better idea structure kind thing love hear json decoding json decoding elm somewhat tricky converting freeform javascript object complete null wellformed elm type case mismatch backend serf admin registry json elm represents backend give flat javascript object bunch nullable field admin registry one four state defined type elm type adminregistry temp basic initial state temporary registry saved basic detail saved paid basic detail paid passed basic detail wedding date passed type alias basic slug string imageurl maybe string personalmessage string showhowitworks bool currency string currencysymbol string price int priceformatted string type alias detail groomfirst string groomlast string bridefirst string bridelast string email string weddingdate string decode flat json object though json state field first decode determine type looking andthen decode part full decoder decoder decodedecoder adminregistry decoder decodefield state decodestring decodeandthen state case state temp decodemap temp basicsdecoder saved saved basicsdecoder detailsdecoder paid paid basicsdecoder detailsdecoder passed passed basicsdecoder detailsdecoder decodefail unknown registry state state basicsdecoder decodedecoder basic basicsdecoder basic field slug string field imageurl nullable string field personalmessage string field showhowitworks bool field currency string field currencysymbol string field price int field priceformatted string detailsdecoder decodedecoder detail detailsdecoder detail field groomfirstname string field groomlastname string field bridefirstname string field bridelastname string field email string field weddingdate string number bundle size first great news elm bundle size much smaller react one react minified minifiedgzipped elm minified minifiedgzipped huge reduction le third size faster download faster parse drain le battery elm small asset size real selling point comparison point react realworld example app bundle size minified minifedgzipped elm equivalent minified minifiedgzipped line code contrast source code significantly bigger react nonblank line code elm nonblank line code surprised though surprised much comparison realworld example apps react nonblank line elm nonblank line reasonml nonblank line note similarity size reason another statically typed language number reason elm code verbose type definition type union field record definition separate line total module import line elmformat often put exposing name separate line also react version single file import together account total line json encoding decoding javascript write code account estimated total line let line keywords take line total modal message passing boilerplate described probably another couple hundred line simply wrapping line react codebase often used long line component bunch prop elm tended wrap onto multiple line readability elmformat used elmformat source code like gofmt style promise tool particularly verbose seems love vertical space think tradeoff worth happy let go conciseness gain reliability performance sorry disappoint lack number see need performance testing optimization giftyweddingscom simple app need high performance focus port speed measure seems bit faster truth plenty fast react looked using htmlkeyed htmllazy fast enough decided bother react version used key shouldcomponentupdate override read elm fast outofthebox performance loved elm part really loved coding elm highlight tooling elm command great simplicity speed allinone usage reminds go command use compile single file install new package start repl build project compiler fast produce nice error message example get mistype field type mismatch elmappeditdetailsmodalelm model record email field model email value cmdnone noeffect usually typo model field similar email string emailerror maybe string maybe email email one aspect tooling supersimple deployment use elm make build uglifyjs minify upload resulting j file cdn figuring babel presets fighting webpack configs package install package type elm install elmtime downloads latest version package dependency lock version add elmjson dependency list react version packagelockjson list nondev dependency somewhat allergic dependency explicitly pull except react reactdom wrote react pleased see latest version react reactdom pull dependency develop mediumsized application elm needed following dependency note elm builtin package direct noredinkelmjsondecodepipeline elmbrowser elmcore elmhtml elmhttp elmjson elmregex elmtime elmurl elmcommunitylistextra indirect elmbytes elmfile elmvirtualdom type system elm strong static typing provides lot guarantee especially define type match problem course null undefined instead use optionals like maybe int even better custom type exactly name state application javascript often use string represent message type state etc stringly typed elm make custom type get lot compiler check free compiler tell missed branch case statement complains try misuse type tell parameter forgotten etc one huge advantage make refactoring safe change restructure type used one part program follow compiler tell fix almost always program compiled worked occasionally fight compiler minute usually guided back success ergonomics simplicity lot work gone design elm language standard library thing work well together liked various elmcore package particularly liked elmhttp package example apisignin function signin name password msg httppost url apisignin body formbody name name password password expect httpexpectjson msg signindecoder signindecoder decodefield slug decodenullable decodestring however couple exception notably difficult json decoding date handling discussed could improved documentation tutorial great get past basic lot tutorial go build real app help structure larger app would good point downloaded elmspaexample learned number thing almost complex found bit hard get much package documentation good problem constantly landing outofdate documentation like elmlangjson instead elmjson first idea looking wrong version figured used elm package nice clear structure top doc belonged elm old result show prominently google documentation vague example listfiltermap say filter certain value extent formal documentation example helpful think example substitute thorough documentation also think would beneficial function addition type signature meaningful list argument name current listfiltermap documentation filtermap maybe b list list b filter certain value example could filtermap maybe b list list b filtermap convertfn input filter value input list convertfn return none value return b include output list example another couple example string module stringlength say merely get length string number byte encoding number unicode codepoints number word stringtoint say try convert string int failing improperly formatted string helpfully provides couple example range proper formatting whitespace allowed either side leading zero okay leading plus sign additionally detail elm language sparse guide community faq syntax summary thorough language documentation specification learning go would regularly refer spec see specific operator syntax worked detail talking formal spec formal grammar detailed documentation language maybe something like exists elm find many case example would helpful starting use subscription certain point wanted able subscribe multiple subscription subbatch seemed related wanted also sounded bit weird batch subscription end tried worked example would nice cmdmap documentation example ended using modal kind guess also vague transform message produced command elmformat go go fmt user really like concept elmformat leadingcomma thing still seems cutesy got really like huge amount vertical space introduced example snippet elm v javascript code elm nonblank line total numleft giftnumleft modelgift itorsome numleft else javascript line var numleft giftnumleft propsgift var itorsome numleft think way elmformat always wrap else onto four line bit patronizing especially blank line else another example case statement sometimes trivial mapping one thing another elmformat force line per branch example parsemonth month case stringtolower stringslice month jan timejan feb timefeb mar timemar nothing seems much sensible use third number line parsemonth month case stringtolower stringslice month jan timejan feb timefeb mar timemar nothing json decoding first weird moment json decoding fact count field use correct decodemapn variant feel hokey go field need pull external library noredinkelmjsondecodepipeline date handling another significant gap lack good date library elmtime library decent support timestamps converting humanreadable value however date type needed represent couple wedding date looked around bit party library felt bit heavy wrote simple module opaque date type follows type date date year int month timemonth day int wrote parse format function go along parse already nice regexes parsing date sep sep form reused javascript version though realize using elmparser would idiomatic format function relatively simple give formatting style date return string type style monddyyyy ddmonyyyy yyyymmdd format style date string format style date date let month monthabbr eg sep monthinfo datemonth case style monddyyyy monthabbr stringfromint dateday stringfromint dateyear ddmonyyyy stringfromint dateday monthabbr stringfromint dateyear yyyymmdd stringpadleft stringfromint dateyear stringpadleft stringfromint month stringpadleft stringfromint dateday would nice write much parse format date convert really agree elm philosophy fewer better module overall extremely happy turned creating gifty wedding scratch today choose elm know language deep level yet mean feel needed explore every nook cranny get project built also recommend watching talk evan czaplicki elm creator give idea elm community think video really good love speed simplicity philosophy elm recommend trying frontend project near even blog post use elm work
25,Lobsters,elm,Elm programming,State of Elm 2018 Results,https://www.brianthicks.com/post/2018/12/26/state-of-elm-2018-results/,state elm result,state elm result permalink reading data elmweeklynl use elm rofrolawesomeelmgamedev rofrolelmgames advent code project euler use elm elmui elmwebpackstarter elmwebpackloader kakoune released,state elm result published december minute read permalink state elm survey take pulse elm community experience newcomer learning decent pace company elm production year survey ran end janary beginning march collected response last year survey ended scrubbed field question make sure good data reduced five question tag performed analysis know long wait thank patience people checked asked could help let get going reading data year got response last year mean left raw count instead converting percentage introduce much error comparing directly want last year response year except map question number available hover bar would liked embed without hovering figure faceted plot vegalite multiplechoice answer number add people use elm work side project consider together peple respondent using elm capacity using elm work cool fun see change hope number increase year many people answering experience whatsoever roughly shape distribution year last year question designed get idea confident people using elm think may redesigned next year since past two year revealed anything useful people click middle scale difference yearoveryear pretty significant survey design respondent difference last year asked language coming year asked programming language elm familiar new language clarified intent question use next meant got lot response upshot language compared yearoveryear except people top language javascript really surprising least surprising change year blog post top list new category year elm discourse new category came existence survey published replaced elmdiscuss mailing list number respondent elm weekly newsletter dropped since stopped published back though sign elmweeklynl elm rewritten list goto learning resource interactive resource elm slack stackoverflow reddit thread book like elm action programming elm json survival kit respondent elm user group near fantastic show citylevel view respondent hotspot san francisco bay area london oslo berlin data organized country viewed way united state dominates list told eu country plus uk respondent u use elm sure gaming dropped last year sure picked year curious kind game people writing asked folk gamedev elm slack pointed rofrolawesomeelmgamedev nice overview rofrolelmgames comprehensive list game elm enjoy note web development tried hard could avoid situation people answered careful tagging try figure exactly people elm web development exactly helpful answer result category dropped way year overall people using elm longer time make sense since people using elm one year likely use another another note sorry messiness chart used vegalite could figure get facet order properly vegalite expert want help fix get touch people use elm work tend get production hooray work project elm mostly closed source see response work project opensource interesting note permissive license like compiler package licensed popular sharealike license like gpl highest response buyin thing like bos approve peer like functional language typed language lead second answered item elm language ml family unfamiliar especially people mostly come cstyle language background think rest item stem two contrast far along work project much easier start side project much harder finish usually external deadline project manager asking update make sense em rate project development would higher see elm compiler opensource elm library licensed fall top category pretty selfexplanatory people lot time side project lessening learning cost tip try challenge like advent code project euler provide framework trying new language small welldefined problem survey ran mean need looking usage v prior happily usage old version fell current version rose hope see similar trend next year adoption use elm last year data showed people generally favor using elmformat year effect even stronger people heard elmformat amount people prefer use rose people using plain cs people integrating elm larger existing codebases somewhat unsurprisingly first two elm library used elmcss styleelements elmui great option styling elm apps typesafe way people use webpack build elm application kind unsurprising given support elmwebpackstarter elmwebpackloader surprising see second two result elmmake elmreactor curious mean people application delivered built overall vscode surprisingly popular previously question like would expected see atom top followed one vim emacs nearly happened really surprised see atom third place one editor fell list fewer people answered curious wrote part post got really interesting idea selection interested text editor maybe check people use external javascript library thing like aws sdk common next common localstorage file came third curious see hold next year elmfiles elmbytes released almost use v use thing would expect tell split testing roughly people test elm application useful quetsion retrospect could simpler test elm project enlightening people write test mostly faced complex function whose behavior compiler check write test especially avoid logical error changing value incompatible way got big peak top functional something lot people want try happy similar thing going type glad people exploring area found really rewarding third fourth response runtime exception javascript line expected question thing really painful language like javascript elm commonlylisted alternative people want find solution pain help grow elm community nb looooong tail cut including item occurred response note question getting data difficult timeconsuming since distill nearly plain text input smallish number tag presentation mean tag completely change yearoveryear depending people type may always accurate tried minimize error wherever possible still completely humandriven process said find particularly valuable pulse people feeling yearoveryear probably always survey year slightly people trouble json decoder learning curve flip spot yearoveryear people also notably le trouble interop year problem documentation find encouraging respondent much problem scaling year mean grown elm codebases way think bigger picture instead hmm maybe mean see big drop people explicitly requesting type class form interface total number request type system feature remains unchanged usual culprit question people like error message type course saw big jump people saying thing like compiles work year year also saw big jump refactoring think support point people trouble scaling elm apps since grown advanced another big change drop javascript response decrease hope longterm elm seen something good right refuge people bad experience javascript kind drop encourages lot response saying thing like elm make better programmer elm improved way think work addition make better programmer tagged confidence roughly doubled response year really nice tag
26,Lobsters,elm,Elm programming,Why functional?,https://blog.testdouble.com/posts/2020-06-30-why-functional/,functional,functional scary think todo app taming uncertain future one elixir elm intent avoiding backwash time state please functional core imperative shell cqrs elixir elm ramda thinker,internet full information mostly related learning something come software development feel bigger question learn something imagine explaining friend confronted bear stand ground make lot noise try look big scary possible trying intimidate animal could brush aside flick claw seems ridiculous friend might decide better stick knee strategy might take advice use wrong time like mother bear cub knowing certain thing allows u trust worth importantly context know appropriate functional scary think point may looked example todo app written functionally decided maybe gave try turned unmaintainable mess without understanding goal functional programming hard receive benefit like focus developer would choose learn think functional way say need switch using functional language immediately programming functional use pattern architecture embraced functional give many benefit worth time change entire process carrying fine well one functional codebase generally lot enjoyable live work may surprise time told functional programming confusing academic hard read etc true staring blank page producing functional code may require bit upfront thought programming paradigm generally result much enjoyable read maintain think important differentiate something versus something example could use basic word say sad could say even word slightly advanced better understand feeling word choice accurate nuanced description emotion similarly functional programming concept slightly advanced accurate description kind problem trying solve program taming uncertain future generally write code solve problem automate task going happen future write code read present tense future tense may slightly complex language construct present tense future complicated future tense accurate representation situation consider two way giving driving direction left turn right go straight past blue turn left turn right keep driving straight go past blue house struggling give first scenario written present tense make assumption road closed blue house painted white work fine lot time give u false sense security sitting front sign freshly painted white house idea second scenario beginning similar writing future tense reminds u describing one possible future thing future uncertain actually many possible future therefore end direction acknowledging offering alternative course action calling help something fit expected future concept uncertain future nothing functional programming universe work choose ignore fact traditional programming risk buggy confusing code result functional programming need handle many possible future depends type problem solving case driving direction provide instruction expected case case simply reach help case self driving car say intersection light also need explicitly handle case light red person walking stop approach taken defining future depends lot use case language like elixir tend embrace style first example define case expect happen case allow erlang runtime fail immediately report problem perfect backend system monitor log fix unexpected behavior elm hand favor latter example frontend language priority seamless user experience forced always handle possible case even unlikely error handling well serf purpose word error suggests something unexpected happened thinking uncertain future nothing unexpected subtle difference point trying make future complicated rather trying describe basic language describe appropriate grammar readable code using simple language construct clearly modelling intent avoiding backwash time move completely idea want note functional pattern provide better language construct also allow u form code easily defined sequential flow time always move forward control flow logic one two way funnel one possible future result fan many possible future based result main two construct functional programming conditionals used define possible future function used describe happens one future make concrete conditionals take one input define many output function take many input produce one output define chain condition function scope possible future expands contract always moving forward time never think changing something already happened state please hold sound like saying way keep track state well hold thought first talk benefit worry state within flow logic look another example two version recipe egg stir cup flour place egg cup flour oven preheated degree whisk egg stir flour place oven produce first example look easier first glance think assumption make happens whisked egg realize flour finished combining ingredient realize oven needed preheated instruction could made little clear saying oven degree whisk two egg refrigerator stir cup flour pantry place little better still assumption state world assumes ingredient pantry oven actually work second example state front required complete recipe state produced following recipe nothing assumed ingredient working preheated oven know even start recipe consider real code example eventsbylocation const event jsonparse localstorageevents let group const event event const group group eventlocation grouppush event group eventlocation group return group got two concerning thing going right first referencing localstorage making assumption state world within function always trust function work function deterministic result input known function functional language enforce common best practice follow pattern much possible second built lot local state along way group variable mutated looping event started blur intent function simply giving linear direction keeping track thing happened past let try instead eventsbylocation event eventsreduce acc event const group acc eventlocation return acc eventlocation group event see function pure pas everything need mutable internal state everything flow beginning end elegant way using modern javascript functional language library could one liner state somewhere yes never eliminate state completely system keep seeping every part application constantly managing pattern called functional core imperative shell idea core business logic application written pure function future tense wrapped thin layer code interacts outside world deal state written state useful want stay way one way elixir lean heavily erlang otp process state maintained modifying data recursive loop elm deal state using internal architecture modify directly send message instruct internal state would like change implementation cqrs pattern redux common state management library javascript often used react regardless library architecture choose main point state business logic stay separate deal complexity uncertain state language like elixir elm suggest enforce functional pattern varying degree great thing start wherever functional way thinking language instance react helped start thinking functional way idea ui simply function state incredibly powerful redux top helped decouple state business logic even got excited pattern started using ramda library allows writing functional code fluently javascript using function composition piping currying finally started working language designed functional honestly point become functional thinker big jump hope journey encourage thoughtfulness way define problem way communicate intent
27,Lobsters,elm,Elm programming,Wheel of Fortune for videocalls,https://blog.rebased.pl/2020/06/16/wheel-of-fortune.html,wheel fortune videocalls,wheel fortune github page ob setting scene le pink please black unsplash face krtek hiding background streaming virtual camera plugin module jitsi electron app meetjitsi gameplay project page twittercomrebased,rebased invested remote work year still keeping small office three big polish city people want work office meet coworkers good coffee local roastery situation meant working office highly discouraged fell back working home remote location away big city order least bit face time introduced daily online coffee call halfhour slot every day anyone join chat listen talking coping read saw spare time eventually get stale despite best effort inspired recurring quiz youtube occasionally watch cobbled together quick prototype wheel fortune game play call decided rewrite properly elm positive feedback comprehensive readme project github page detailing set video call platform choice let quick look set linux machine ob jitsi videocall platform ob ob open broadcaster studio excellent opensource program video recording especially live streaming install package manager may named obsstudio running first time pop autoconfiguration wizard either dismiss configure ob streaming using whatever setting detects really relevant afterwards go settingsvideo set output resolution higher aspect ratio best compatibility video call software return main interface see something similar panel layout configurable reorganized presentation window similar setting scene start launching wheel fortune browser choice separate window switch tab mistakenly enable developer tool undock separate window player see setting new puzzle problem also worked around ob scene switching devtools window foolproof using firefox screen top tab bar use vertical tab hidden single tab open hideous magenta background reason get rid return ob click plus button source panel select window capture exact name source depends o dialog follows give source name click ok next window allow select specific window set basic cropping choose dedicated browser window crop ui confirm ok scene look something like red frame indicate scene element movable resizable scale reposition quickly scale fill screen click press ctrlf le pink please next right click either scene element name source window select filter new window click plus select chroma key accept default name see effect control slider change key color type magenta move similarity dial back color correct minimal color bleeding value seems work may also want change smoothness closing window see game interface black background black launch favourite browser find nice background image download return ob add image source new picture default added top layer obscuring interface rearrange source list dragging selecting scene element using caret button want image bottom list chosen freely usable photo walt disney concert hall la unsplash additionally locked source using padlock icon accidentally moving longer possible face one thing still missing host video feed source panel add video capture source select webcam reorder position image somewhere obscure anything add crop filter show little surroundings possible next image show hiding behind krtek plushie positioned corner behind wheel graphic hiding background notice green background behind screenshot green screen easily buy photography equipment vendor ob offer option remove static background choice applying another chroma key filter remove green background integrate image notice discoloration plushie hat due lighting room uneven unlike real photo studio chroma key filter suffering completes scene setup instruction let move streaming part streaming exactly streaming close setting broadcast popular streaming platform could add server info click start streaming however working video chat slightly different goal constraint discus jitsi similar quirk restriction one thing taken ob camera present videocall enter virtual camera virtual camera virtual camera piece software usable application like real webcam take video input another source continuing linux need two piece one ob plugin either install package manager compile manually way scope second piece linux kernel module also likely available package manager load module first ensure use newly created device adding video group setting permission bit way scope install plugin restart ob use new option tool start feeding virtual camera device path must match module created video format matter click start make virtual camera film scene setup ob older version used crash ob clicking stop seems longer case may jitsi linux use jitsi meet electron app want app using browser version also acceptable jitsi special requirement available three major operating system use today launch join start room jitsi videobridge workbase server instance use freely available meetjitsi server video feed automatically pick available camera system virtual cam set use dropdown attached camera button find enable worry preview picture appears cropped like participant see full videocall program crop video optimized case single face somewhere center enable microphone interact browser devtools window control game invite people use console command add player list set puzzle start playing gameplay rule keybindings described detail project page quick recap enter spin letter reveal present player turn space move next player manually first time presented morning coffee call lot surprised face given rebased programmer experienced seniorlevels every one able implement really something version played day polished one available github quick javascript prototype cobbled weekend want release due poor quality later rewrite elm gave rise currently published version project still bit rough around edge could use work extensive testing go ahead set fun let u know github issue break like see added give u shout twittercomrebased set played team
28,Lobsters,elm,Elm programming,Recreating Pong for the Web with Elm,https://dev.to/bijanbwb/recreating-pong-for-the-web-with-elm-2bi8,recreating pong web elm,introductory post series goal rebuild classic interactive game learn little bit along way pong ball left paddle right paddle score window history atari would use skill several discipline like engineering design entrepreneurship create something accessible atari home console version wikipedia page rebuilding pong web pong perfect turn perfect place get started game development simple amazing rule game loop input handling competition rendering game state ai basic physic collision asset game development constant stream activity deeper level getting basic game element worked turn much deeper level game game design risk reward without turn surprisingly boring predictable speed randomness fairness playtesting tinkering long process adding feature playing game see often unintended consequence aesthetic ui learning skill development game compelling learning play working elm elm architecture model game using type provide initial value modeling game component coming initial version data model nt perfect window rect svg package strokedasharray much look far work ball paddle pull together model basic element game update update ball position move paddle around update player score etc subscription sketching update pseudocode instead thinking ifthisthenthat try come union type different state getting ball moving paddle collision game state draw owl set implementation apart many others interesting bit changing ball angle pick one feature make big difference game one solution give player way control angle ball paddle also add element strategy game give player option conservative option risky option ai right paddle winning ball path history inventing principle performance relatively new macbook pro laptop polish sound howlerjs idea sometimes accidentally write bad code produce interesting result multiball lesson learned moving away value separate file module easy get first done interesting bit final stretch said find good stopping point next intro post series resource get touch find twitter,let take tour process creating web version classic atari game pong case missed introductory post series goal rebuild classic interactive game learn little bit along way pong dive let set context pong look like pong abstract representation table tennis consisting basic shape ball move bounce around screen left paddle move controlled player right paddle move controlled computer score indicator paddle window rectangle black background net middle many version pong released year use element model version let start fun history history one fascinating thing pong released early public little context idea digital video game atari would need productize arcade game time coinoperated pinball game probably closest corollary game like spacewar predate release pong decade available academic complicated public atari would use skill several discipline like engineering design entrepreneurship create something accessible result game cabinet pictured marketing material see straightforward made instruction affordances version use arrow key keyboard control paddle easy see people could take simple control cabinet story go atari put prototype local bar named andy capp tavern heart silicon valley machine popular would overflow quarter research project bought atari emulator called retron thinking would good way simulate original turn pong may considered passé time atari released arcade cabinet dedicated home console version predated cartridgebased atari emulator still fun share daughter due cultural relevance pong even part smithsonian museum interested learning history pong wikipedia page good place start fun documentary called world might like rebuilding pong web original intention series rebuild classic game post stepbystep walkthroughs taking time work mechanic pong realized approach would exhausting read would take whole course justice content post tour process interesting bit share source code github end plus still learning game development nt want steer wrong direction try stick clear explanation plain term without relying jargon scary first getting started goal still create faithful reproduction classic game worked hard figure made pong fun play also add little feature interesting bit make sense pong perfect turn pong perfect place get started game development like software project first straightforward last make difference simple amazing start sketching element make pong get idea want put screen involves basic everything need make surprisingly fun game rule clear rule controlling paddle scoring make game accessible game loop loop allows u continuously listen input adjust object time input handling use keyboard handle player input move left paddle competition player scoring add fun win state rendering use svg create game window render element game state transition different state startingscreen playingscreen endingscreen ai simulate simple ai computercontrolled right paddle basic physic use basic physic keep ball paddle moving position velocity collision ball collides paddle edge screen handle collision responding accordingly asset game incorporate external asset like sprite sound wo nt need sprite since using simple svg shape use external sound library incorporate simple sound effect tricky u background web development building web application app nothing time occasionally need load new page make request database part content static even reading post hard work loading text page already done game development constant stream activity use game loop handle input player even input still move object around screen time started learning concept scared term like delta time velocity vector understandable feel way also get confusing think coordinate way one helpful technique think word comfortable instance could think horizontalposition instead x position verticalspeed instead vy velocity changeintime instead deltatime get working mental model work towards using common term find fitting deeper level getting basic game element worked turn much deeper level game beyond getting thing show screen move around start take interest game design major takeaway project little change make big difference gameplay game element mentioned get thing running tinker kind little setting like ball speed angle scoring make fun risk reward hitting ball closer edge paddle risky move likely miss safe approach would hit ball center paddle change ball angle coming paddle risky move turn reward paddle much difficult time returning without pong turn surprisingly boring predictable speed start tinkering set fast ball speed fun play fast difficult also speed ball slightly every time hit paddle result feeling game speed increase volley add much fun game randomness start simple serve location direction add randomness ball location direction keep paying attention build skill consistently return serve fairness turn change feel unfair ball speed randomness serf feel unfair get easy get scored without capping ball speed upper bound start feel unfair successful return impossible playtesting tinkering nt know building game long process adding feature playing game see often unintended consequence tinkering value lead lot fun interesting idea aesthetic ui spent time trying recreate feel arcade cabinet ended throwing work adding little color polish add lot experience learning skill development game compelling learning play wired recognize pattern fun feel sense improvement progress get better book called theory fun game design might like interested reading topic working elm nt worked elm programming language introduction elm good place get started short book example give everything need start building frontend web application elm elm architecture also wellsuited building game glance see similar pattern elm architecture function init update view simple game development platform like init update draw init model game using type provide initial value example ball paddle located start game update allows u continuously change model value time update player score move ball transition game state view continuously draw updated model screen using svg dive elm code throughout rest post nt know elm yet feel free skim content see process hopefully inspire go learn elm functional programming modeling game component coming initial version data model nt perfect start handful element know need pull view function something look window ball left paddle right paddle window window type alias use create svg rectangle element hold game keep mind svg us top left starting point start value x starting top left x value increase move right value increase move using value x height width draw rectangle game window type alias window backgroundcolor string x float float width float height float set initial value initialwindow window initialwindow backgroundcolor black x width height value correspond svg rect element elm svg package contains element attribute need corresponding view function call svgrect pas initialwindow function produce rectangle need viewgamewindow window svgsvg msg viewgamewindow window svgrect svgattributesfill windowbackgroundcolor svgattributesx stringfromfloat windowx svgattributesy stringfromfloat windowy svgattributeswidth stringfromfloat windowwidth svgattributesheight stringfromfloat windowheight even add another view function net middle screen googling turned strokedasharray doc mdn worked well placing dashed line middle game window viewnet window svg msg viewnet window svgline svgattributesstroke white svgattributesstrokedasharray svgattributesstrokewidth stringfromfloat windowwidth stringfromfloat windowwidth stringfromfloat windowy stringfromfloat windowheight much look far work ball ball like window still using svgrect case much smaller add vx vy use indicate horizontal vertical velocity could push position ball around time using x velocity value allow u thing like change speed negate value get ball moving way strike paddle type alias ball color string x float float vx float vy float width float height float initial value ended initialball basically matter tinkering somewhere near middle screen initialball ball initialball color white x vx vy width height also could represented data position value hold x velocity hold vx vy first game wanted stick flat model nt involve nesting updating value would easy likely change approach next game build also mention used int value started later switched using float value avoid perform conversion round integer sure think precision float value also make animation look little smoother view function render ball page viewball ball svg msg viewball ball svgrect svgattributesfill ballcolor svgattributesx stringfromfloat ballx svgattributesy stringfromfloat bally svgattributeswidth stringfromfloat ballwidth svgattributesheight stringfromfloat ballheight paddle paddle rectangle like window ball paddle field add paddleid type differentiate add score paddle increment also note need vy vertical speed since paddle nt need move horizontally type paddleid left right type alias paddle color string id paddleid score int x float float vy float width float height float set initial value locate paddle near left right edge game window initialleftpaddle paddle initialleftpaddle color lightblue id left score x vy width height initialrightpaddle paddle initialrightpaddle color lightpink id right score x vy width height view function paddle paddle scoring viewpaddle paddle svg msg viewpaddle paddle svgrect svgattributesfill paddlecolor svgattributesx stringfromfloat paddlex svgattributesy stringfromfloat paddley svgattributeswidth stringfromfloat paddlewidth svgattributesheight stringfromfloat paddleheight viewpaddlescore int window float svg msg viewpaddlescore score window positionoffset svgtext svgattributesfill white svgattributesfontfamily monospace svgattributesfontsize svgattributesfontweight bold svgattributesx stringfromfloat windowwidth positionoffset svgattributesy svgtext stringfromint score first started hardcoded value keep thing simple instance positionoffset score something added later way use function display score pas number move score within svg window pull together model basic element game type alias model ball ball leftpaddle paddle rightpaddle paddle window window initialmodel model initialmodel ball initialball leftpaddle initialleftpaddle rightpaddle initialrightpaddle window initialwindow game nt alive yet everything need roughly correct location update update function lot magic happens game update ball position move paddle around update player score etc also thing get little complicated source code project available bottom post try keep section high level without diving detail subscription subscription function good place start handle update use subscription two major feature handling keyboard input adding animation code snippet use browserevents module elm browser package handle browser animation key event player subscription model sub msg subscription model subbatch browsereventsonanimationframedelta browseradvancedanimationframe browsereventsonkeydown jsondecodemap playerpressedkeydown keydecoder browsereventsonkeyup jsondecodemap playerpressedkeyup keydecoder produce steady stream data use game msg type allows u indicate want handle update function type msg browseradvancedanimationframe time playerpressedkeydown string playerreleasedkey string admittedly glossing lot detail blog post grows much larger intended important part use browseradvancedanimationframe animate ball paddle move time playerpressedkeydown give u way know player pressing arrow key move left paddle sketching update pseudocode started writing update function mapped quick plan pseudocode thinking way conditionals turned huge mistake every time wanted add feature meant adding yet another condition order condition ended important nothing happening move ball move right ai paddle player input move left paddle ball hit right paddle negate ballvx update ball position ball hit left paddle negate ballvx update ball position ball hit left window edge increment right player score reset ball initial position set ball motion ball hit right window edge increment left player score reset ball initial position set ball motion ball hit top bottom window edge negate ballvy least gave rough idea event game pong next game work sketch paper dive code instead thinking ifthisthenthat try come union type different state getting ball moving point fun set ball motion see happens use something like adjust position based time getting browseradvancedanimationframe word time advance ball x position increase mean ball move right ball x ballx ballvx time bally ballvy time fun see ball start moving quickly realize wo nt know stop bottom window need check source code bottom post see complete example basic idea point invert ball vertical direction hit bottom window ball positive vy value moving downward hitting bottom edge window know value windowheight mean take vy value turn negative value ball hit bottom edge window case edge windowbottom ball vy negate ballvy development start flow bit ball collides top bottom window negate vy value ball hit left right edge window increment player score reset ball back original position paddle collision handling ball collision edge window somewhat straightforward since use window x width height value paddle little difficult compare ball location paddle location see intersect boolean check used determine ball collided one paddle ballhitleftpaddle ball paddle bool ballhitleftpaddle ball paddle paddley bally bally paddley paddleheight paddlex ballx ballx paddlex paddlewidth ballvx ballhitrightpaddle ball paddle bool ballhitrightpaddle ball paddle paddley bally bally paddley paddleheight paddlex ballx ballwidth ballx paddlex paddlewidth ballvx game state getting initial feature running realize game nt always playing state super mario bros memorable example initial screen press start button begin playing game begin startingscreen state transition playingscreen state player ready pong added brief instruction game window visible bottom post used spacebar key start game super mario bros also memorable game screen one player reach winning score transition playingscreen endingscreen state display winner type gamestate startingscreen playingscreen endingscreen create custom type like handle different game state transition also ensures player one state time since nt still playing game game screen disable movement ball paddle start end state also handle keyboard input start restart game state draw owl take look source code actually lot going update function hate say draw owl wanted make sure cover interesting aspect set implementation pong apart many others interesting bit get working version game running time figure make interesting compelling fun changing ball angle pick one feature make big difference game one ball collides paddle initially make sense invert ball vx value send back way would look something like ball hit paddle ball vx negate ballvx work well ball hit paddle change horizontal direction turn ball follow slow predictable path make game boring solution give player way control angle ball paddle better explained visually couple quick sketch instead ball follow predictable path location ball hit paddle determines angle might seem like big difference result one paddle make way harder paddle return ball also add small amount ball speed whenever hit paddle make game feel quicker whenever ball collides paddle add vx value increase horizontal speed elm clamp function useful set upper bound ball end moving fast becomes difficult play adjusting thing like ball angle speed huge impact playability also add element strategy game give player option conservative option conservative hit ball middle paddle speed increase hit eventually right paddle struggle keep risky option take risk hitting ball closer edge paddle return harder angle ai paddle ai right paddle first attempt getting computercontrolled paddle working paddley position match bally position work well starting point ball right paddle end sync one another allows right paddle consistently return ball problem make impossible left paddle score right paddle always meet ball ended finding solution seems work pretty well right paddle try catch ball location updaterightpaddle ball float paddle paddle updaterightpaddle ball time paddle bally paddley paddle paddley paddlevy time else bally paddley paddle paddley paddlevy time else paddle ball higher screen paddle chase upward ball lower paddle chase downward tinker right paddle vy value increase decrease difficulty ended finding value work well difficult score impossible feel rewarding score point ai paddle winning speaking scoring surprisingly difficult figure winning score supposed arcade game whoever scored within certain time frame found sticker first player score point win curious score arcade cabinet sticker instead located rest instruction turn physical switch arcade owner could use adjust winning score felt like lowhanging fruit added option game ball path history felt like killer app version pong saw bret victor inventing principle talk year ago loved idea game element past future never thought something like work elm little obvious elm debugger give glimpse stream value look like time visualize ball history start creating empty list every time ball change position prepend ball list updateballpath ball ballpath maybe windowedge model model updateballpath ball ballpath maybewindowedge model case modelshowballpath pongballoff model pongballon case maybewindowedge pongwindowleft model ballpath pongwindowright model ballpath model ballpath listtake ball ballpath ball hit left right edge game window clear history setting ballpath rest time collecting new position prepending ball ballpath instead prepend operator usually called con language like lisp elm lastly pipe listtake limit amount history avoid potential performance pitfall said curious much history could handle slowing might even able build whole new game around idea performance game development pretty tricky write inefficient function application going run probably wo nt noticeable write inefficient function game run time per second whole time continue make game like find better way profile performance benchmark recorded performance profile using browser devtools difficult see inefficiency also interesting try different machine browser wrote relatively new macbook pro laptop likely would nt run smoothly older laptop added viewfps function util module take list time allows use toggle display hide current frame per second polish sound final polish added color background pay homage original game cabinet used svg recreate pong lettering top screen fun idea create cabinet affordances ui would taken time get right also great javascript library called howlerjs adding audio game howler demo really amazing elm provides port integrate javascript library safe way added simple beepwav boopwav sound ball hit paddle edge collision occur trigger port play sound browser check source code want see example work idea one fun part game development stumbling little idea would intriguing implement sometimes idea want see come life sometimes accidentally write bad code produce interesting result instance made mistake ball motion stopped unless moving paddle got thinking game like superhot time move move ball path history feature mentioned good example kind feature core game add lot idea varying complexity would loved implement given time change ball color add particle effect collision add pause state dynamically change ball width height multiball mode multipaddle mode superhot mode ball move move replay winning shot ending screen state local multiplayer one paddle us keyboard one paddle us mouse online multiplayer build something like love see lesson learned little thing make difference adjusting setting like ball speed path huge impact playability polish think state union type instead conditionals start small moving away bool value switch add additional custom state refactoring ups down great clean code add clarity split application code separate file module nt improve development experience find balance gently resist urge move work something else new different easy get first done interesting bit final stretch adding polish move lark genuinely interesting project said find good stopping point could probably keep building different version pong fancy feature year tempting implement fun idea list important find good place stop ship want keep moving growing next rebuilding pong bunch time wanted bail work something complex impressive time wanted quickly build game like tetri snake going try sticking approach outlined intro post series breakout always favorite atari game kid fun figure plus basic mechanic built project give opportunity try different data structure add interesting feature like particle effect nt get pong resource learning functional programming game development feel free get touch happy hear also find twitter promised link game source code
29,Lobsters,elm,Elm programming,Single out elements using phantom types,https://jfmengels.net/single-out-elements-using-phantom-types/,single element using phantom type,puzzle however solution repository solution work distinguishable indistinguishable benefit approach practical case error errorformodule resizing webgl texture,today showcase technique single element type medium puzzle try solve ignore puzzle imagine try design car factory factory build kind car electric hydrogen diesel factory build environmentfriendly green car electric hydrogen though think hydrogen car environmentfriendly moment let say want user able create customized car factory provide api specifically createcarfactory creategreencarfactory function reflect specification function take userprovided function build car createcarfactory function return list car kind potentially different kind car mixed together creategreencarfactory function return list green car potentially also mixed together module author want guarantee user able provide function create nongreen car creategreencarfactory function still able create kind car createcarfactory function also want use type system compiler one complain guarantee respected user module simplicity sake imagine car contain data following example api could look like without guarantee mentioned allowed tweak change however want module factory exposing factory createcarfactory creategreencarfactory car electriccar hydrogencar dieselcar type car electriccar hydrogencar dieselcar createcarfactory data list car factory creategreencarfactory data list car factory electriccar electriccar hydrogencar hydrogencar dieselcar dieselcar example api could used code work see check solution work import factory exposing factory anycarfactory factory anycarfactory factorycreatecarfactory factorydieselcar factoryelectriccar factoryhydrogencar greenfactory factory greenfactory factorycreategreencarfactory factoryelectriccar factoryhydrogencar invalidfactory factory invalidfactory factorycreategreencarfactory factorydieselcar factoryelectriccar factoryhydrogencar last constraint important interesting one feel like try solving problem otherwise read article title hint way address problem blank spacing see answer accidentally solution several solution problem solution went adding phantom type set concrete type diesel car unbounded value others concretely module factory exposing factory createcarfactory creategreencarfactory car electriccar hydrogencar dieselcar type car fuel electriccar hydrogencar dieselcar type polluting polluting type green green electriccar car fuel electriccar electriccar hydrogencar car fuel hydrogencar hydrogencar dieselcar car polluting dieselcar dieselcar createcarfactory data list car fuel factory creategreencarfactory data list car green factory created repository solution already place play work first thing add phantom type car type phantom type type variable like maybe never appears type constructor unlike maybe appears variant phantom type allows u distinguish element similar element allowing u use set subset function manipulate want able use different car like thing make diesel car distinguishable rest specifying value car phantom type dieselcar car polluting trick make electric hydrogen car indistinguishable others making generic car car fuel notice lower case f indicates type variable car would also work way electriccar hydrogencar car fuel mean kind car word indistinguishable car therefore following code typecheck fine import factory exposing car diesel car green factoryelectriccar car polluting factoryelectriccar also mean mix kind car list electriccar dieselcar finally change constraint car factory function return createcarfactory keep generic meaning return kind car long stored list currently creategreencarfactory requires car green mean diesel car type car polluting fit able returned benefit approach able compare approach others several way problem could solved like solution several factor first type error mean compiler complaining error case module user handle know factory valid need return maybe factory result error factory neither module user module need runtime check either meaning runtime performance cost like change constraint like marking hydrogencar polluting therefore allowing creategreencarfactory without code looking different would breaking change though practical case elmreview user create rule providing function create error two main way create error error function errorformodule function former creates error file currently analyzed latter creates error specific file given argument example used rule rule rule rulenewprojectruleschema rulename initialprojectcontext rulewithsimpleexpressionvisitor expressionvisitor rulewithfinalprojectevaluation finalevaluationforproject rulefromprojectruleschema expressionvisitor node expression list error expressionvisitor node case nodevalue node expressionfunctionorvalue xyz ruleerror message xyz used detail xyz dangerous reason noderange node finalevaluationforproject projectcontext list error finalevaluationforproject projectcontext unusedfunctions projectcontext listmap modulekey functionname range ruleerrorformodule modulekey message function functionname never used detail bla bla bla range case want use error function usually raise error current file case using make sense therefore lead unwanted behavior creating project rule analyzes project file provide function handle part analysis context single file instance final evaluation project like example phase module analyzed report thing full knowledge happens project phase calling error make much sense since file affected automatically solve problem technique described previous section singling forbidding use error dieselcar inside visitor factory type local local type nonlocal nonlocal error errordata range error local errorformodule modulekey errordata range error anytarget withsimpleexpressionvisitor node expression list error anytarget ruleschema ruleschema withfinalprojectevaluation projectcontext list error nonlocal ruleschema ruleschema look package api notice thing bit differently another article alternative envisioned ignore reported error replace global error make elmreview stop case would add big warning function documentation would testing module helper writing test rule fail test error defined context much try help user test would work user wrote test wrote test triggered misused kind error downside current method error useless type variable case find aesthetically displeasing knowing nobody lose time raise issue ask help misused function make worth another example pattern pointed configuration resizing webgl texture hope enjoyed article liked let know expect see article phantom type type variable
30,Lobsters,elm,Elm programming,The cost of funding in Open Source languages - Elm,https://discourse.elm-lang.org/t/costs-funding-in-open-source-languages/5722,cost funding open source language elm,big company logic go sawzall dart devolpers developer developer spread smart phone firefoxos asmjs browser war open source culture worst nightmare netscape alternate partnership conclusion,excited see perspective feeling might agree pretty much everything need share bunch clarify trying say belief interest big company directly determine language design choice never heard story kind thing talking anyone paid work language feel like would point think people set better expectation language think cost funding headcount already filter specific characteristic depending organization feeling reckless sharing bunch idea talked publicly many year sorry long big company logic heard headcount story someone justifiably wanted fewer engineer large team think would happen person led believe large company high headcount meant important important people low headcount confused think better product fewer worker ie le money best could explain big company logic thought story lot since heard story informed perspective google seem te pretty unique case come language understanding go go team worked language called sawzall processing log may sound important way google calculates much people owe ad processing data like understanding something count money project extremely valuable sense team highly regarded organization dart dart smalltalk team made really fast jit compilation vm later incorporated technique jvm fraction crew brought google implement fast jit j chrome great perf major part chrome gained market share going back tac theory whole effort save google billion dollar per year team highly regarded organization know headcount number today project know dart much higher headcount highest number heard go rust swift elm python personally came believe detail important degree google sure whole range factor sense google bit good make want vibe maybe lenient big firm thinking googlex well putting aside get sense developer experience super accounted org chart work focused developer experience happened fairly adhoc way project manager turned ie toolbar google search chrome eventually went become ceo personally think keen eye free consumer product scaffold position regarding ad revenue much developer product matter business adhoc system major contrast microsoft specific department meant work language microsoft research supported ton interesting pl work work often end manifesting great work developer tool department suspect wellorganized wellfunded organization devolpers developer developer era sure fit modern microsoft azure think adding big company logic help explain various language headcount never heard story people outside project influencing specific design decision think would mistake think mean thing like tac matter learned project headcount smart phone getting popular spread smart phone personally noticed ton open source initiative began smart phone started getting really popular mobile game getting huge user facebookgoogle moving mobile apps big company mobile ad network figured became mobile first everyone thought facing existential threat remember people saying thing like need browser every app need settle j performance get objectivec performance lot people freaking time example prezi survive mobile world without flash need team android io browser tablet desktop share code keep thing sync product one language could compile many platform worthwhile hire one weird kid well people see happens think would offered nostringsattached support facing many risk particular moment also short contract another compiler project time see happen elm young needed standard became bunch team think elm would exist today without support mozilla survive transition mobile world revenue tac happens traffic android io developing country mobile coincides project like firefoxos asmjs could conceivably preserve sort tac funding worst case scenario came pas maybe mobile developed market maybe focus developing market lower powered device people talking bytecode j vm many year found interesting project like started particular moment absolute worst case scenario happen firefox position weakened whole era google came much powerful chrome continued gain market share browser phone total outsider perspective seems important rust headcount safesecure concurrency could mean firefox could deliver feature faster use le memory chrome could maybe could start pushing market share back negotiate better tac far seem bourne market share number think overall theory fit detail shared headcount changed time friend mine worked firefoxos think headcount followed similar path saying criticize mozilla rust people organization would totally reckless strategy figure headcount various open source project within organization mozilla definitely fund exist started looking earlier time try understand happening started get feeling factor influence open source culture well browser war open source culture going back microsoft dominant force online created enough bad feeling turned successful antitrust case u major advocate term open source saying thing like worst nightmare microsoft exec elevator time first major victory concept open source netscape open sourced browser starting mozilla project time mozilla developed process oriented towards customization adding feature open online way made sense foil microsoft personally think gained market share partly based critique microsoft monopoly power partly lot programmer value extreme customization lot say expanding available option think open source culture deeply tied thesis event mozilla eventually formed financial partnership young hopeful google spreading information worked really well microsoft seen scary google fun upstart shaking thing anymore mozilla left partnership google google inhoused much possible copied cultural process developed mozilla funding turn developer discontent critique monopoly power market share circumstance personal feeling mozilla tough negotiating position coherent critique consumer tech gain traction among programmer find partner revenue source imagine critique could surveillance interesting exmozilla leadership created brave try make case trying eat ad revenue directly alternate partnership feeling surveillance reached peak level yet feel like take many surveillance controversy reputation big company change significantly enough get going think critique mozilla rust knowing detail tac feel weird level dominance chrome android way critique engineer working expectation many google engineer never even heard tac certainly know point psychological factor mention seem rooted history open source culture around also think strength weakness particular process fully assessed without looking back year later thinking extent proven microsoft worst nightmare effect cultural expectation project funded way conclusion elm goodwill model prezi noredink one salary string attached best know widely used language survive zero fulltime worker lot one worker think get three four lot room balance building relationship working technology interacting online promoting project communicating vision etc cover aspect impression additional capacity end going towards adding feature think higher headcount important want languagetools lot feature confident saying definitely happens get range main point really think people underestimate role fundingheadcount supporting good working relationship open source language zero one huge one two huge two four huge feeling language like elm python ruby fraction people use language work may also build package tool fraction people may end building good personal working relationship paid worker fraction people may carve time day job volunteer body work produced time maybe volunteer highstress role covered otherwise opensource work support business enough justifiably done work hour sense person weather highstress event highstress role person volunteering way start look like working normal software team work paid people know communicate often etc membership paid voting central funding somewhat traditional software team formed nonetheless project higher headcount may hire role directly long process building personal working relationship skipped job interview clearly defined role presto someone aligned project vision role may filled year otherwise without option definitely take longer fill role higher emotional labor night weekend burn people really fast maybe particularly bad communicating developing relationship online asking help work much emotionally difficult normal software job trying thing may help personally idea esf focus community event overall experience online forum accumulated expecting always get slammed today maybe year positive message people sent last week really meant lot ended chatting lot people normal already cool project started got feeling sharing even messy perspective thing might lead positive thing addition conditioned expectation tbd anyway goal criticize languagecommunity claim everything perfect elm fully expect misconception certain thing easily corrected people direct knowledge tend find helpful emotionally look historyfunding conflict based know far
31,Lobsters,elm,Elm programming,Announcing Lamdera Open Alpha,https://discourse.elm-lang.org/t/announcing-lamdera-open-alpha/5669,announcing lamdera open alpha,lamdera elm service evergreen migration lamdera open alpha sign use lamdera use lamdera people built lamdera far best color thebestcolorlamderaapp link game gamelamderaapp link note app noteslamderaapp link big two card game big beatthebigtwolamderaapp planning poker app planorpokerlamderaapp link highscore mogee mogee mogeelamderaapp link lamdera dashboard sendgrid getting started signup documentation,almost three year design development excited announce lamdera open alpha lamdera developer deal lot incidental complexity building fullstack application bundling deploying apps serialising deserialising data handling network transport interacting database migration glue code cost development time typesafe increase risk bug lamdera goal empower write code matter application logic building hiding complexity removing lamdera typesafe fullstack webapp platform elm hosting deployment migration networking encodersdecoders persistent storage handled lamdera focus application logic glue code originally announced lamdera keynote elm service elm europe lamdera also typesafe migration system called evergreen combined feature mean new app deployment livereload connected client preserving state spoke evergreen migration elm europe lamdera open alpha alpha intended elm enthusiast keen try vision glueless fullstack web development appetite bleeding edge alpha yet suitable production use case exploration experimentation sign huge thank people helped private alpha even use lamdera lot project day seem advertise get started nanosecond often see also waste time pitfall matter often left decipher someone would eventually spend time writing blog post use lamdera instead outlined use lamdera might want read going people built lamdera far sometimes seeing believing small selection lamdera apps people built far generously shared source code apps written entirely elm showcase lamdera abstract away concern around networking persistence data enabling developer focus application logic glue code best color martin built fun game people fight best color glorious right background color someone disagrees try thebestcolorlamderaapp source link game simon built game game workinprogress multiplayer world run avatar around chat player also satisfying graphic try gamelamderaapp source link note app jim built searchable stash random note support markdown filtering note title tag full text active link mostused tag even export json special thanks jim longest helping alpha tester almost year graciously suffering data reset anyone else try noteslamderaapp source link big two card game ed built online version big card game chinese origin find another people make room give go ed commented wanted make game play friend lockdown time write elm frontend plus separate backend glue code lamdera made really easy get idea game hour try beatthebigtwolamderaapp planning poker app egor built app planning poker estimate distributed engineering team using work told team think cool egor commented think quicker write app rather search alternative exist try planorpokerlamderaapp source link highscore mogee andrey originally built mogee webgl platformer fit screen wanted see could port lamdera give persistent high score leaderboard function predictably andrey hold high score title maybe someone beat though try mogeelamderaapp source link lamdera dashboard spirit eat dog food much possible lamdera built lamdera lamdera dashboard feature basic user account auth system email via sendgrid manages lamdera app creation getting started best way get started signup check documentation hope lamdera inspires build something built otherwise
32,Lobsters,elm,Elm programming,Elm Regression Testing,https://github.com/jgrenat/regression-testing/blob/master/README.md,elm regression testing,elm regression testing regression testing need regression testing make change easy make easy change discover thanks dillon kearns work watch video explaining concept along specific use case hopefully forgive english counter program create generator test harness test dependency elmtest package package generate save test harness nodejs refactor code rerun test compare output saved output want refactor model message thanks,elm regression testing refactor obscure piece code nobody understand anymore imagine start new job already existing product former developer solution hand source code run exit leaving wondering happening look code damn nt even know possible write bad code elm obfuscated humanwritten code ever seen product wo nt survive ca nt refactor improve code fortunately elm refactoring easy right wait minute function one heck type representing naming type help way understand happening know current implementation work break refactor without altering behaviour nt know guessed regression testing need regression testing need refactor code without knowing exactly code could code specification maybe code grown complex overtime nobody know everything anymore thing current implementation considered correct want break refactoring fact even bug piece code nt want fix refactoring something address later code easier work make change easy make easy change piece wisdom kent beck discover thanks dillon kearns know well code supposed unit test fuzz test elmtest directly may suit better work watch video explaining concept along specific use case hopefully forgive english well take program generate initial model generate random message send update method save final model without knowing exactly happened test given initial model input produce specific output generate save input output run later refactor part code want done run test comparing final output previous final output every test great improved code without breaking anything test nt pas changed behaviour try fix mistake generated test called test harness help improve code see four step create generator test harness generate save test harness refactor code rerun test compare output saved output package ca nt help step job help step let see following example let imagine want build test harness counter program create generator test harness package help generate test need input first install package test dependency elmtest elmtest install jgrenatregressiontesting need know generate initial model program job create generator using elmrandom package let see example counter program import random exposing generator import counter exposing model modelgenerator generator model modelgenerator randomint initial model always use constant generator modelgenerator generator model modelgenerator randomconstant define generate message application import counter exposing msg import random exposing generator modelgenerator generator msg modelgenerator randomuniform increment decrement message frequent others use randomweighted define encode model message json save using elmjson package import counter exposing model msg import jsonencode encode encodemodel model encodevalue encodemodel model encodeint model encodemessage msg encodevalue encodemessage msg case msg increment encodestring increment decrement encodestring decrement find complex example example folder declare port get back generated test port module regressiontestgenerator exposing main import jsonencode encode name important outputport port outputport encodevalue cmd msg everything ready create generator port module regressiontestgenerator exposing main import counter exposing model msg update import regressiontestgenerator exposing regressiontestgeneratorprogram main regressiontestgeneratorprogram model msg main regressiontestgeneratorsandboxupdate modelgenerator modelgenerator messagegenerator messagegenerator update update encodemodel encodemodel encodemessage encodemessage outputport outputport numberoftests generate save test harness going use node module generate one need nodejs installed install tool npm install global jgrenatelmregressiontesting generate test go root project assuming testgenerator file test directory run command elmregressiontesting testsregressiontestgeneratorelm generate file testsgeneratedregressiontestdataelm containing test data want change path name file use output option elmregressiontesting testsregressiontestgeneratorelm outputtestscustomfilenameelm refactor code afraid wo nt help nt want take job anyway rerun test compare output saved output test data saved need rerun test compare result need know decode model message generated json import counter exposing model msg import jsondecode decode exposing decoder modeldecoder decoder model modeldecoder decodeint messagedecoder decoder msg messagedecoder decodestring decodeandthen messagetype case msg increment decodesucceed increment decrement decodesucceed decrement decodefail invalid message messagetype find complex example example folder create runner module regressiontestrunner exposing suite import counter exposing update import generatedregressiontestdata exposing testdata import regressiontestrunner import test exposing test suite test suite regressiontestrunnerelement modeldecoder modeldecoder messagedecoder messagedecoder update update testdata launch usual requires point set elmexplorationstest project want refactor model message want change representation model change message app problem test harness still test data stored json decode want let imagine want change model counter example allow adding information future previous model simply int want use record containing int refactoring type alias model value int change decoder follow change modeldecoder decoder model modeldecoder decodeint decodemap model run test elmtest thanks many thanks fberthelot jfmengels precious help conception tool
33,Lobsters,elm,Elm programming,Safe unsafe operations in Elm,https://jfmengels.net/safe-unsafe-operations-in-elm/,safe unsafe operation elm,package create unsafe function wrap safe function detect call invalid regexes visitor expression source code full source code test handling way import function reason full source code test forbidding complex thing unsafe function full source code test making sure target function exists full source code test summary work wellbuilt module help test rule learn guarantee,elm often module around data type need validation initially create instance elmregex package defines regexfromstring function people often use following way import regex lowercase regexregex lowercase regexfromstring az maybewithdefault regexnever regexfromstring signature string maybe regex take string corresponds valid regex return regex wrapped otherwise return nothing return nothing usually call maybewithdefault regexnever create regex never match anything give u regex use valid opinion two problem code even know sure regex string valid need handle case regex string course project becomes wrong may notice problem long time mind problem much especially since easy way handling error case problem kind problem would love compiler help u imagine someone could create new modulepackage generate valid regular expression api would much verbose far people would used sidenote elm creating regex invalid regex string would cause runtime error current behavior opinion vast improvement previous one post going use safe unsafe pattern create unsafe function wrap safe regexfromstring function always return regex using elmreview rule make safe verifying never used invalid regex also slightly easier use current way look like import regex import helpersregex lowercase regexregex lowercase helpersregexfromliteral az could use pattern make much nicer safe nonemptylist nonemptylist nonemptylist helpersnonemptylistfromliteral email email email helpersemailfromliteral someaddress providercom num numberlessthanfive num helpersnumberlessthanfivefromliteral board board board helpersboardfromliteral create unsafe function wrap safe function point unsafe function wrap safe function simplify api something never fail unsafe function regexfromstring could look like module helpersregex exposing fromliteral import regex exposing regex fromliteral string regex fromliteral string regexfromstring string maybewithdefault regexnever notice fromliteral return regex maybe regex point may notice close original example showed call unsafe still give invalid regex type default value use thing go wrong unsafe function would look like module helpersregex exposing fromliteral import regex exposing regex fromliteral string regex fromliteral string case regexfromstring string regex regex nothing fromliteral string function try create return regex fails call recursive call unsafe part enter case call function recursively indefinitely program practice halt please careful using pattern call function fromliteral limit function used string literal like fromliteral abc never something dynamic complex like fromliteral somestring reason literal value easily determine looking function call code whether function call fail elmreview rule build next check call fromliteral somestring elmreview rule warn u detect call invalid regexes aim detect call unsafe function invalid regexes like regex helpersregexfromliteral abc going start simple rule update find thing need handle let start empty rule nothing module nounsaferegexfromliteral exposing rule import reviewrule rule exposing rule rule rule rule rulenewmoduleruleschema nounsaferegexfromliteral rulefrommoduleruleschema rulenewmoduleruleschema rulefrommoduleruleschema call going add visitor visitor function look piece source code report error extract data context order report error later actually simple compile elmreview package api let compile rule define visitor since would make rule useless interested detecting call helpersregexfromliteral function function call expression going add expression visitor module nounsaferegexfromliteral exposing rule import elmsyntaxexpression expression exposing expression import elmsyntaxnode node exposing node import regex import reviewrule rule exposing error rule rule rule rule rulenewmoduleruleschema nounsaferegexfromliteral rulewithsimpleexpressionvisitor expressionvisitor rulefrommoduleruleschema expressionvisitor node expression list error expressionvisitor node case nodevalue node expressionapplication function argument case nodevalue function expressionfunctionorvalue helper regex fromliteral case nodevalue argument expressionliteral string case regexfromstring string nothing ruleerror invalidregex noderange node invalidregex message string detail list string invalidregex message helpersregexfromliteral need called valid regex detail regex passed evaluate valid regex please fix use regexfromstring run elmreview result look like following color elmreview error srcmainelm nounsaferegexfromliteral helpersregexfromliteral need called valid regex invalidregex helpersregexfromliteral abc regex passed evaluate valid regex please fix use regexfromstring already lot value could change helper regex regex fromliteral fromstring find use regexfromstring invalid regex project right though work function called regexfromstring exactly omitting test post find one step next source code next create error argument something else literal string rule could made smarter trying find value expression compute static expression like string concatenation definitely could rule quickly become much complex case think constraining force user use simple literal string fine tradeoff guarantee give return expressionvisitor node expression list error expressionvisitor node case nodevalue node expressionapplication function argument case nodevalue function expressionfunctionorvalue helper regex fromliteral case nodevalue argument expressionliteral string case regexfromstring string nothing ruleerror invalidregex noderange node ruleerror nonliteralvalue noderange node nonliteralvalue message string detail list string nonliteralvalue message helpersregexfromliteral need called static string literal detail function serf give guarantee creating regular expression argument dynamic complex wo nt able tell either make argument static use regexfromstring full source code test great something really safe yet problem need handle report problem function imported called using full module name detect call fromliteral rfromliteral instance people use function complex construction sensitive name function get renamed moved report anything anymore let handle one one handling way import function problem report problem function imported called using full module name detect call fromliteral rfromliteral instance aim detect call unsafe function regardless imported like import helpersregex r exposing fromliteral regex fromliteral abc regex rfromliteral abc could report call fromliteral regardless module come could create lot false positive false positive kind tool annoy hell developer instead manually track import import alias imported import local function overrideshadow imported yes kind shadowing possible sound tedious well fortunately kind soul yes would created library work u use scope module jfmengelselmreviewscope copying file project reason need collect data traverse module requires equip context store useful information including everything scope collect u import elmsyntaxexposing exposing import elmsyntaximport exposing import import scope rule rule rule rulenewmoduleruleschema nounsaferegexfromliteral initialcontext scopeaddmodulevisitors rulewithimportvisitor importvisitor rulewithexpressionvisitor expressionvisitor rulefrommoduleruleschema type alias context scope scopemodulecontext fromliteralwasexposed bool initialcontext context initialcontext scope scopeinitialmodulecontext fromliteralwasexposed false importvisitor node import context list nothing context importvisitor nodenode modulename exposinglist context nodevalue modulename helper regex case maybemap nodevalue exposinglist exposingall context fromliteralwasexposed true context else context expressionvisitor node expression ruledirection context list error context expressionvisitor node direction context case direction nodevalue node ruleonenter expressionapplication function argument case nodevalue function expressionfunctionorvalue modulename fromliteral scopemodulenameforvalue contextscope fromliteral modulename helper regex listisempty modulename contextfromliteralwasexposed case nodevalue argument full source code test great handle way user import unsafe function next problem forbidding complex thing unsafe function problem people use function complex construction hard handle way function used aim detect report one complex could potentially used unsafe way like reallyunsafe helpersregexfromliteral regex helpersregexfromliteral ab c regex abc helpersregexfromliteral make rule smarter handle pattern would make rule lot complex think toolinglibraries help time yet case think fine simply report error anytime see function used outside function call type alias context allowedfunctionorvalues list range initialcontext context initialcontext allowedfunctionorvalues istargetfunction context modulename string bool istargetfunction context modulename functionname functionname targetfunctionname false else scopemodulenameforvalue contextscope targetfunctionname modulename targetmodulename listisempty modulename contextfromliteralwasexposed targetmodulename list string targetmodulename helper regex targetfunctionname string targetfunctionname fromliteral expressionvisitor node expression ruledirection context list error context expressionvisitor node direction context case direction nodevalue node ruleonenter expressionapplication function argument case nodevalue function expressionfunctionorvalue modulename functionname istargetfunction context modulename functionname let error list error error error context allowedfunctionorvalues noderange function contextallowedfunctionorvalues else context context ruleonenter expressionfunctionorvalue modulename functionname istargetfunction context modulename functionname listmember noderange node contextallowedfunctionorvalues ruleerror notusedasfunction noderange node context else context context notusedasfunction message string detail list string notusedasfunction message helpersregexfromliteral must called directly detail function aim give guarantee creating regular expression ca nt determine used something else calling directly full source code test last problem making sure target function exists problem sensitive name function get renamed moved report anything anymore elmreview able compare project previous version determine function recently renamed instead report problem find helpersregexfromliteral anywhere project something determine visiting project module module rule like one built capability since forget everything module start analyzing different one turn api simpler benefit performance optimization therefore turn project rule remember found module track function found end project analysis found yet report error rule rule rule rulenewprojectruleschema nounsaferegexfromliteral initialprojectcontext scopeaddprojectvisitors rulewithelmjsonprojectvisitor elmjsonvisitor rulewithmodulevisitor modulevisitor rulewithmodulecontext fromprojecttomodule fromprojecttomodule frommoduletoproject frommoduletoproject foldprojectcontexts foldprojectcontexts rulewithfinalprojectevaluation finalprojectevaluation rulefromprojectruleschema modulevisitor rulemoduleruleschema modulecontext rulemoduleruleschema hasatleastonevisitor modulecontext modulevisitor schema schema rulewithdeclarationlistvisitor declarationlistvisitor rulewithexpressionvisitor expressionvisitor type alias projectcontext scope scopeprojectcontext elmjsonkey maybe ruleelmjsonkey foundtargetfunction bool type alias modulecontext scope scopemodulecontext allowedfunctionorvalues list range foundtargetfunction bool initialprojectcontext projectcontext initialprojectcontext scope scopeinitialprojectcontext elmjsonkey nothing foundtargetfunction false fromprojecttomodule rulemodulekey node modulename projectcontext modulecontext fromprojecttomodule projectcontext scope scopefromprojecttomodule projectcontextscope allowedfunctionorvalues foundtargetfunction false frommoduletoproject rulemodulekey node modulename modulecontext projectcontext frommoduletoproject modulenamenode modulecontext scope scopefrommoduletoproject modulenamenode modulecontextscope elmjsonkey nothing foundtargetfunction modulecontextfoundtargetfunction nodevalue modulenamenode targetmodulename foldprojectcontexts projectcontext projectcontext projectcontext foldprojectcontexts newcontext previouscontext scope scopefoldprojectcontexts newcontextscope previouscontextscope elmjsonkey previouscontextelmjsonkey foundtargetfunction previouscontextfoundtargetfunction newcontextfoundtargetfunction elmjsonvisitor maybe elmjsonkey ruleelmjsonkey projectcontext list nothing projectcontext elmjsonvisitor elmjson projectcontext projectcontext elmjsonkey maybemap elmjsonkey elmjson declarationlistvisitor list node declaration modulecontext list nothing modulecontext declarationlistvisitor node modulecontext let foundtargetfunction bool foundtargetfunction listany node case nodevalue node declarationfunctiondeclaration function targetfunctionname functiondeclaration nodevalue name nodevalue false node modulecontext foundtargetfunction foundtargetfunction finalprojectevaluation projectcontext list error scope finalprojectevaluation projectcontext projectcontextfoundtargetfunction else case projectcontextelmjsonkey elmjsonkey ruleerrorforelmjson elmjsonkey message could find helpersregexfromliteral detail want provide guarantee use function ca nt find likely renamed prevents giving guarantee rename back update rule new name use function anymore remove rule range start row column end row column nothing istargetfunction modulecontext modulename string bool istargetfunction modulecontext modulename functionname functionname targetfunctionname scopemodulenameforvalue modulecontextscope targetfunctionname modulename targetmodulename full source code test test changed bit since need least file test summary work wrapped safe function unsafe function made rule check whether regex passed unsafe function valid check whether argument function literal string check whether function used nonhandled way check whether unsafe function present project think something really solid make sure misuse function want lose guarantee elm give u introduce runtime error recommend make check really solid otherwise like compiler checked thing could still runtime error obviously need test rule rigorously writing akin compiler check elm compiler job elmreview provides wellbuilt module help test rule along tip guideline well done though safe unsafe pattern benefit giving something similar automated unit test every time function used well always pas without actually testing handling error case know happen usually return dumb stuff anyway strongly recommend exposing unsafe function package think user use elmreview rule even provide rule next package instead prefer letting define unsafe function make accessible somewhere learn think learned quite thing together writing elmreview rule quite easy simple case covering case much harder static analysis need think handle lot case wish important otherwise may allow thing wished forbid especially using elmreview create guarantee compiler give u sometimes make code simpler thank reading way go build awesome rule
34,Lobsters,elm,Elm programming,Building a web app with functional programming - Elm - part I · PatchGirl,https://blog.patchgirl.io/elm/2020/03/02/elm-part-I.html,building web app functional programming elm part patchgirl,building web app functional programming elm part summary building web app functional programming series definition production ready elm part elm part ii haskell part haskell part ii nixos building web app functional programming background functional reactive programming language learning curve workshop rtfeldman power probably gon na need elm architecture elm architecture compiler helpful amazing performance refactoring conclusion,building web app functional programming elm part mar summary building web app functional programming series definition production ready elm part elm part ii haskell part haskell part ii nixos hi great see first part building web app functional programming probably interested elm first part elm focus language second part ecosystem background said working elm prior experience fp scala haskell lisp tried elm first time believe version time writing back hard time understanding concept signal example thought promising language couple version later everything related functional reactive programming also happened elm toughest topic removed nowadays elm much simpler started working patchgirl wanted learn something new interesting compelling technology ghcjs purescript elm backend engineer needed something easy pick quickly productive went elm seemed human friendliest one language learning curve elm strongly typed language haskell like syntax wish could give feedback syntax knew haskell beforehand biased learning elm felt dead simple say instead workshop thank rtfeldman great work former company feedback great many developer mainly scala devs said felt nice easy play power probably gon na need one feature elm lack powerful abstraction designed make easy learn fast productive like say elm haskell without hard part need know concept like monad functor type class whatnot elm provides simple api plenty enough vast majority case learnt appreciate philosophy believe quite adapted real world application need language generate code avoid boilerplate provides powerful abstraction probably use elm instead want deliver quickly high quality product elm great choice project elm great pick elm architecture could talk elm architecture hour many done nutshell pattern io computation interact outside world eg send http request parse form one benefit force developer handle possible case like error need pinpoint actually quite simple understand browsing elm guide quickly grasp main idea start play compiler helpful straight point elm compiler amazing piece work clearly designed developer friendly best thing elm think elm compiler guide compiler time tell human readable sentence wrong code certain case even give solution problem beginner helped lot picking language elm error message accurate helpful almost never needed google incomprehensible error quite delightful experience performance let talk compiler performance elm real beast compiling many language always frustrating wait compiler finish even tiny modification elm wait single second patchgirl take le compile roughly line year old laptop xps elm make elmmainelm user system cpu total still mind blown fast never thought performance could possible compile time feedback fast sometime think compiler run term developer experience feel weird longer able browse twitter compiles refactoring improve skill product requirement evolving constantly need refactor software elm strong typing great compiler refactoring child play easy might boring put brain sleep mode follow compiler errorsadvices much say easy love conclusion huge crush elm still stopped front end development frustrated felt writing javascript elm brings everything good fp browser without cost complexity satisfy experimented beginner developer type system record sum type adapted design real world problem compiler make refactoring piece cake baked functional programming maintainable stable weird side effect runtime error describe experience elm would probably ease fun productivity keep reading elm second part
35,Lobsters,elm,Elm programming,elm-review - a static code analysis tool,https://jfmengels.net/elm-review-v2/,elmreview static code analysis tool,new review capability easier use sorry elmreview initial announcement nice api example phantom builder pattern project rule module rule project rule reporting error elmjson reading dependency docsjson file visiting readmemd file visiting comment documentation new helper creating rule much faster watch mode watch mode configuring exception lead sort problem think whether enabling rule good idea configure rule fixall flag better default folder structure test included default rule start package website package improve quality documentation compare elm analyse different philosophy original announcement get started migration guide documentation feedback help appreciated,today excited release elmreview share new feature tl dr list introduced feature new review capability project rule reporting error elmjson reading dependency docsjson file visiting readmemd file visiting comment documentation new helper creating rule easier use much faster watch mode configuring exception fixall flag better default folder structure test included default rule start sorry elmreview missed initial announcement memory unclear let explain elmreview static code analysis tool elm look elm project report pattern configured find using rule friendly elm compilerlike way highly customizable write rule since written elm need know different language even publish elm package put lot effort making nice api use example even going length discovering new elm technique expect see blog post phantom builder pattern blog happy result elmreview look like linter necessarily wrong since enable rule help improve quality code enforce coding convention team dive bit find create new guarantee elm compiler give instance write rule elmreview analysis broke soon problem spanned multiple module though solved project rule elmreview version elm analyse eslint lot similar tool language analysis scoped single file mean rule finished looking module start looking module b forgets everything module make lot useful analysis untenable like module function xyz come module imported using import exposing potentially lose ability tell problem type encountering import exposing b type imported function element ever used project addition module rule described elmreview project rule rule go module use information collected different module infer report thing solving problem mentioned short feature make rule much accurate allow almost complete best effort due limitation looking single module open wide range possibility example usecases reporting error elmjson version reading content elmjson possible possible report error reading dependency docsjson file docsjson file dependency contain public information direct indirect dependency reading tell dependency module come along type function contain give lot information direct indirect dependency instance module contain function type defined information rule much accurate instance knowing added scope encountering import xyz exposing becomes possible added new information get previous point sufficient knowledge replicate compiler type inference logic example usecases visiting readmemd file readme integral part project especially package package author user important everything correct version introduces visitor readme allows collect data report error error fixed automatically example usecases visiting comment documentation version also look content comment documentation function module honest forgetting add visitor would easy addition example usecases todo list jfmengelsreviewdocumentation making sure doc module documentation always correct date report link nonexisting nonexposed module even invalid functionssection id reporting duplicate markdown section report usage word like todo new helper creating rule task like targeting specific function harder instance want forbid foobar need handle multiple way function called imported tedious errorprone started writing helper named elmreviewscope deal problem make task easy making part elmreview publishing separate package though api still unstable much faster watch mode version focused usability validating elmreview good solution problem performance secondary version performance focus result really good parsed file cached initial run still bit slow subsequent run faster several time also watch mode change feel instantaneous sure much better future version work done help pave way editor support configuring exception enabled rule version able ignore error reported edit fork rule ignore case wanted ignore idea avoid ignoring error locally comment sort like happens place eslint lead sort problem instead user think whether enabling rule good idea first place still stand choice place reasonable ignore review error namely generated code vendored code introducing rule gradually many error sometimes also make sense test follow slightly different rule case configure rule apply section directory file fixall flag version fix flag would propose automatic fix problem knew fix could accept refuse annoying go fix could long tedious lot error version come fixall get one big diff current source one fix applied accept refuse believe automatic fix always perfect know kink one wrote please cautious looking beforeafter diff commit change blindly better default folder structure default structure version created allow run test rule due conflict elmtest review application get running elmreview init structured way make test work box elmreview init add dependency needed write rule default test included default test directory included default since part elm project make sense review rule start catalog rule quite small understand many people blocker adoption along release publishing rule previously written find searching jfmengelsreview package website general looking review people package among also working package improve quality documentation help package author especially also rule wrote still unsure whether want maintain personally copy jfmengelsreviewsimplification compare elm analyse philosophywise elm analyse moment de facto static code analysis tool elm different philosophy elmreview elm analyse want improve quality code enabling rule work everyone elmreview hand aim create guarantee tailored team project enabling way improve quality code shareable manner think rule could use everyone share publishing elm package registry functionalitywise check naming rule find elm analyse available package published github repos written remaining one one outdated disagree reasonably easy write using package api exception check unused pattern unused argument plan add anyone publishing missing one care test run found elmreview faster guessing mostly rule built way avoid duplicate work thing elm analyse elmreview web interface elmreview similar cli watch mode showing graph module really see value brings showing dependency updated see value think good fit tool editor support definitely see value let know want help rest hope shown post original announcement tool elm analyse get started already use elmreview project follow migration guide otherwise follow instruction cd yourproject npm install savedev elmreview yarn add dev elmreview npx elmreview init cd review elm install jfmengelsreviewunused elm install jfmengelsreviewcommon elm install jfmengelsreviewdebug add rule configuration fyi include one jfmengelsreviewdocumentation jfmengelsreviewdebug import nodebuglog import nodebugtodoortostring import noexposingeverything import noimportingeverything import nomissingtypeannotation import nounusedcustomtypeconstructors import nounuseddependencies import nounusedexports import nounusedmodules import nounusedvariables import reviewrule exposing rule config list rule config nodebuglogrule nodebugtodoortostringrule noexposingeverythingrule noimportingeverythingrule nomissingtypeannotationrule nounusedcustomtypeconstructorsrule nounuseddependenciesrule nounusedexportsrule nounusedmodulesrule nounusedvariablesrule finally run using get started recommend reading documentation go far give advice best set elmreview project andor team feedback help appreciated hope try elmreview enjoy spent lot time polishing give great experience using writing rule room lot improvement would like help would love help get tool working different editor also publish awesome rule advice feedback write tool blog post would love hear constructive criticism want help want share using want share enjoy yes help lot elmreview channel elm slack ask help talk privately jfmengels
36,Lobsters,elm,Elm programming,Why I’m leaving Elm,https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/,leaving elm,elm bucklescript need think steward owner elm discourse lot confrontational thinking issue fluent elmfluent djangoftl fluentcompiler intl attempted core library elmcommunity packageelmlangorg elmgithubinstall blogged intl licence hard part open source elmdev google group never discourse possible elmgithubinstall issue comment created python fork open source definition packageelmlangorg boto edit bottom anonymous comment hacker news post hard part open source know first markdown marked used elmlangorg part part favouritism unfairness every single reason evan may chosen course also applies developer well choose block choose make cool thing elm second library elmparser parsec couple custom operator mzero commented kernel code post trust richard feldman official elm web page excellent guide contributing open source project reality always process rule elm leadership blind unwritten rule perfect way discriminate knowingly unknowingly evan blog post elm every package packageelmlangorg written entirely elm packageelmlangorg core json browser url http evan post removal custom operator usage package root design goal like encouraging policy intl elmintl http githubcomvanwagonetelmintl arrogance little core team understand process indeed rule process always unwritten one supposed know immediately close thread shuts metaprocess zero progress nonenglish developer end user discriminated aware go way build completely unnecessary discriminatory policy responsible discriminatory effect one aspect open source love value able share work way benefit everyone without risk someone going take thing away use privileged,past year reluctantly come conclusion need leave elm migrate language likely bucklescript via definitely recommend anyone else post reason mostly way leadership behave going talk good point elm technology read place probably true elm version least joy work hard replace also note mileage may etc would entirely possible use elm find adequate need therefore never bump thing hit quickly post people assessing elm may something benefit people community especially leader part elm core team might want skip post sake mental health tried harder past fair reasoned likely easy reading hand people within elm community courage ask read maybe also think decision behaviour criticise actually causing core elm team far stress necessary change would good mental wellbeing since post mainly complaint criticism thought worth addressing whether ever appropriate open source current maintainer handful small open source project put lot hour bigger one well aware unwarranted sense entitlement many people come interacting open source project agree problem think paid people zero expectation behave first reason general ethical standard including honesty fairness apply even people paying second advertise something open source common set assumption mean explicit accepted definition term third golden rule applies think safe say every producer open source software also massive consumer open source movement possible certain standard behaviour adhered think degree responsible people paying u depend number thing benefit derive running open source project one factor number people affected decision another contribution received people third whether contribution code case author maintainer sponsor project stand gain lot success project especially project function platform kind usually hard author thriving language find sponsor decision made popular language damage sink someone project someone career even someone livelihood made gamble investing language example well aware career hugely helped part django core team often way really feel fair change make django affect lot people better worse mean people come along demand change want mean ought exercise certain amount care responsibility author language think whatever want providing code free must remember army people provided high quality library free done countless hour bug reporting free done beta testing free done usability testing free high personal risk especially early adopter mean least provided effective kind advertising marketing entirely free personal word mouth recommendation promotion mean even single person wrote every line code language compiler come thinking project need think steward owner post demanding missing feature elm although certain feature affect story wider issue treat people expectation area comment level personal preference technical need come looking open source project others definitely level ethic think people behave treated general open source project specifically onto reason one big factor leaving elm community messed majorly interaction elm core team beginning entirely fault set positive post elm discourse core devs announced change would really hurt project along many people introduction instead turned something lot confrontational feel slightly victim bad timing though course accept responsibility word since done whole much better although trying story needed internationalise app year seeing different solution particularly eye django thinking issue found mozilla awesome fluent project settled solution also look existing elm solution could find found wanting even attempt solve problem fluent solves turn fluent used really elegant way elm compiling ftl file elm source code created elmfluent implement complementing djangoftl fluentcompiler also created python backend like many elm project need feature elmfluent need official wrapper intl initial version us nonofficial wrapper impossible elm onwards attempted get thing going regarding official wrapper went nowhere topic came later elm discourse contributed thread shut considered really unhelpful way rather starting new thread argue thought building something useful would better persuasive idea ready elmfluent elm restriction native module made elmfluent impossible official wrapper intl released rather announce project effectively dead water supporting old elm release started looking way round restriction led eventually private email richard feldman unfortunately messed discussion native module used argument find looking back email ashamed used even le tact care managed certainly le necessary although multiple point ascribe good motivation elm core team somehow succeeded persuading richard considered core team bad faith actor end communication apologise rest elm community way allowed frustration get better squandered opportunity elm community hope useful depends relationship offending people pretty sure blown looking reason dismiss post ranting someone get along people well right however never kind problem open source community think thinking getting involved elm community take lesson thing community make pretty uncomfortable part messed might considered persevering little longer technical limitation really killing usage elm restriction native module know native module elm allow write part elm module javascript feature absolutely necessary elm used many core library bunch library elmcommunity previously tight restriction native module uploaded packageelmlangorg could work around need necessary using something like elmgithubinstall elm however compiler limit feature certain official library use project blogged need native module since bigger thing came need intl wrapper mentioned restriction cause huge problem lot people example bug core library something missing wait core team fix rather able fix might need performance fix done using javascript elm lack destructive update make thing hard implement efficiently stuck explain bos know possible javascript chose elm make workarounds attractive case simply work example elmfluent work around restriction without destroying design experience thing like come know going need intl wrapper happened without ability get kind sticky situation elm attractive option recommend people basis alone difficult part accept crippleware mean deliberate limitation take additional work author impose feature still much much necessary disabled compiler see contributing certain project foreseeable future something like needed long possible distribute core library separate compiler doubt elm core team believe change people best interest evan initially expressed belief everyone would able upgrade elm however despite many people indicating reversal decision appears believe long term still acting best forcing change move ecosystem pure elm code evan belief benefit project future many hole problem argument attitude treating existing project collateral damage unacceptable book elm claim open source example see licence compiler fact evan delivers talk elm entitled thing like hard part open source think claim increasingly hard defend real open source go beyond license file first point may personal preference start like see kind openness development process considered something open source elm even see record core team decision making process let alone contribute see section latter past used elmdev google group closed never place elm design discussed could contribute way today forum find meaningfully see elm development decision made discourse designed kind interaction eg thread close day automatically category development discussion etc slack obviously appropriate multitude reason another requirement open source book forkability fork per se necessarily helpful required possible fork patch part investigation make possible others try elmfluent elm considered possibility patching elm patch long term fork shared thread completely outside normal elm forum elmgithubinstall issue richard feldman arrived attempt shut knew thought right idea comment made clear persona non grata elm community patch elm compiler earlier version comment much strongly worded richard apologised intention revised version know stand core elm developer deliberately unnecessarily introduced restriction elm order stop using feature want reserve exclusive use find share workaround thing broken project one considered aggressor one elm threatening person exclusion community attempting patch source code quite antithetical spirit open source far see opposite behaviour see open source project example dropbox created python fork without smallest thought needing apologise behaviour multiple competing implementation considered healthy open source project forkable leader need accept people right community also need ready decide current leadership serving interest big part point open source example people contributed openoffice although owned company licence meant started throwing weight around unwelcome way community able fork carry well run open source project understand essential feature open source welcome rather resort threat maintain control open source definition written osi generally recognised kind authority area includes discrimination person discrimination field item list requirement open source licence technically elm fall foul elm licence restriction pretty clear building discrimination certain library compiler ie restriction feature everything except core library library certain github organisation elm attempt clearly spirit osi definition thinking distinguish primary secondary user whose right tension example run open source blogging software blog topic like also heavily censormoderate comment user choose primary user get choose use software osi definition licence open source try stop basis certain religiouspolitical view etc osi definition give right primary user secondary user primary user elm compiler secondary user packageelmlangorg reason complaint fact user packageelmlangorg right upload core package others time recognise proprietary service give away client tool open source software really token gesture done smooth wheel proprietary service example would never claim open benefit using boto python frontend amazon web service given compiler get install elm deliberately crippled make binding browser apis example despite necessary present compiler feature compiler hard code http packageelmlangorg source package use get functioning program give ability configure source fact ability turn connecting secondary user packageelmlangorg lacking key right user think pretty inescapable essentially proprietary system free software purist type think proprietary software evil elm started open source project attracted user basis longer meet basic expectation word mean everyone else problem least potential user contributor aware leadership style elm extremely aggressive authoritarian mean impolite rude almost always civil still ultimately aggressive controlling gave example happened even outside elm forum elm discourse thing tightly controlled within first week starting contribute post deleted blocked contributing week offense core team announced plan restrict native module elm posted solution someone problem made use native module find many similar report across different site internet example sometimes find denial defence core developer really think escape conclusion elm threatening aggressive leadership style example see edit bottom anonymous comment hacker news post ton bug compiler library never fixed many pull request community member open year never merged tiny fix line code adding new feature way fork package apply patch package contains native code report bug hope evan fix deadline range week year edit using throwaway get banned elm discourse relm still production application using elm kind community necessary people anonymise criticism way time see behaviour never reason disagree leadership likely find friendly helpful leadership style judged leader behave everyone agrees say assessment would quite different course judge leadership style borrowed phrase evan talk hard part open source evan complaining people make inadequately informed suggestion take second make take hour explain suggestion cut despite knowing incredibly frustrating evan core elm team thing community taken whole new level say say must despite knowing anything rest projectspecific constraint taking account explain build opinion compiler simply making design decision language felt right would bearable disagree language feature course job language designer decide feature go get cut fact know purpose solution suffice therefore keep feature reserve use distinct whether believe open source whether elm considered open source principle fairness important enough ethical principle deserves section decision limit certain feature certain people ie github organisation go right principle deliberately using rather sens impossible treat people equally recognise people leader worth listening others treating people equally allow people publish standard library code others equality clearly still treat people fairly without treating equally illustrate two library first evan markdown library bundle minified javascript library us kernel code internals use fast optimised markdown parser elm api pure function way characterise library merely richard feldman tried claim valid use case kernel code since restriction kernel code elm part elmexplorations description say exists historical dodging issue delete repo click exist hard imagine kind reason evan wanted write markdown convert html within elm app javascript library marked hard work well elm wanted pure function signature string html reason would clearly nicest interface addition wanted use code would double demo code since used elmlangorg therefore needed clearly demonstrate elm architecture rather obscure would happen workaround javascript interop used wanted soon would take long time rewrite javascript code pure elm module every minute spent rewriting working code pure elm time could spent potentially valuable thing elm community rewritten version might well slow buggy original bug fixed handoptimized pretty well already well known situation pure functional language serious problem producing performant code translating optimised j code elm pretty hard maybe evan actually need extend interesting way usage least going benefit much elm implementation therefore someone else interest extendable elm implementation would probably better position rewrite course might fix bit native code every time new compiler entire wrapper pretty small even rewrite huge amount work part part solid reasoning decision benefit everyone involved last thing want evan stop important thing elm rewrite already working code problem favouritism unfairness put need core elm developer friend create repos certain github organisation everyone else every single reason evan may chosen course also applies developer well small modification instead realising sometimes developer going benefit escape hatch like try stop using locked escape hatch everyone friend moved code elmexplorations would continue work addition people community past chosen exactly thing evan use kernel code make elm wrapper javascript library effectively accused blocking elm bad community choose block choose make cool thing elm hypocrisy pretty galling ultimately say using position leader bully people writing library project even interest might argue writing demo code illustrate elm architecture would right something much important writing production code think demo code important production code term needing good architecture priority upside second library evan elmparser library common many similar library language like haskell parsec defines couple custom operator custom operator limited github repos elm later mean want write parsing library hard time competing evan important one thing community may well need one parsing library theoretical concern mzero commented change one hurt code parser combinator library used two custom operator reason evan point top learn elmparser define two operator parsing reason library done indeed time custom embedded language custom operator worth mental effort programming staff parsing one evan acknowledges indeed us elmparser however realistic assume elmparser become parsing package ever need one work string parsing byte array quite common mine even elmparse parameterized stream type still differing implementation functionality tradeoff parser backtracking error tracking error recovery etc make different parser library useful even support stream type current policy bad elm ecosystem discriminates need user happen exactly need core elm team important principle fairness seems evan core team forgotten language especially open source one operate platform platform contribution developer reputation critical library author need contribution developer library scratch also create popular wellrecognised library reputation improves may able get sponsor working library work based reputation hugely important part currency open source work perhaps sustainable model funding open source way right evan ought understand given red ink currently sponsor work elm level playing field library author vital instead evan reserved feature friend well custom operator elmparser also benefit kernel code performance critical part going compete fairness must central principle open source project choose model leadership dictatorship critical pay special attention believe good intention enough stop abuse power include neglect must completely ignorant human condition concept like democracy fact originally meant simply rule absolute without overtone cruelty exist ought clue course possible perfectly fair try deliberately building discriminatory restriction compiler done going way unfair elm defined process contributing closest find post trust richard feldman linked official elm web page section regarding contributing elm instead process told need build trust core developer spectacularly failed built understand people think sound nice practice lead awful lot frustration even worse mean top tier community quickly become old boy network opposite kind community enjoyed elsewhere open source world open source project recognised clearly documented contribution process good thing strive keep process working well github standardised contributingmd file sarah dresner excellent guide contributing open source project virtually nothing applies elm core elm developer rejected accumulated wisdom project instead put huge wall around contributing experience wall blocking many people especially effective blocking people already minority technology community people already struggling find way example due nonnative english speaker feeling minority reason find elm contribution nonprocess impossible barrier reality always process rule see later elm leadership blind unwritten rule perfect way discriminate knowingly unknowingly core team effectively absolved responsibility potential contributor process failure process blamed people failing build relationship completely agree relationship key open source project relationship process almost every sphere life trading government starting business etc answer question anything word would optimistic ethic thing operating find certain element core elm team communicates hard stomach example take instance evan blog post elm claim every package packageelmlangorg written entirely elm mean guarantee nothing weird going dependency cut easily application package contained arbitrary javascript code would inherit optimization challenge conservative notice emphasis original claim repeated page work across entire elm ecosystem every single package packageelmlangorg written completely elm click time packageelmlangorg find view source link discover popular package listed top partly written javascript core json browser url http think possible defend evan false statement reported richard feldman many month ago kind marketing hyperbole however prefer would expect technical blog post higher regard accuracy especially talking something directly relates controversial decision read post core team instead able take reliable source information elm work becomes like deciphering political party propaganda take evan post removal custom operator start pretty dubious statement elm remove syntax userdefined operator mean syntax still much much used library available people leaving aside let look one angle follows want define custom operator use math excerpt usage package elm feature studied used far package snip math operator package math vector math matrix math generally use operator like match cultural norm common would hoped actually math snip root design goal category stem reasonable design goal try outline design goal point path towards acheiving goal nicer way snip want math really like goal think language like julia done excellent job overloading reasonable way approach really lovely would lose type system match point rather making stopgap perhaps possible think broader question comprehensive way way overload vector matrix math would work would multiply vector scalar perhaps best design restore userdefined operator bracketed math operation like certain type maybe done really nice way library worth exploring see enthusiastic evan mathematics look exclamation mark look question mark see open community idea actually happened trying math elm face significant problem first basic operator overloading baked language mathematics operator work int float type want polymorphic operation using math elm much fun addition like pure functional language present significant challenge trying high performance work elm worse escape hatch compiler still infancy come optimisation like eliminating intermediate data structure elm couple plus point although stable interface importing function written javascript compiletojavascript language unstable interface known native module could write custom operator make mathsy code least look bit nicer readable taken away evan say top going path towards achieving goal nicer actually user leave bunch question suggestion nothing exploring sound like invitation explore understood context evan person actually empowered anything lead feeling gaslighted think evan added completely unnecessary restriction made life much harder taking away genuinely useful thing people like trying mathematics without compensating improvement must imagining thing like math encouraging math said black white lot friendly exclamation mark evaluating ethical issue find analogy government helpful suppose leader whose job make policy people whether country function democracy expect everyone country equal access leader would neither desirable possible everyone able influence leader degree trusted advisor even spouse inevitably going influence elm community recognise talking need relationship go however pretty much make policy leader listen small group people pretty unwise let say live suppose leader dictator make law give preferential treatment group people like tax break looking fairness government law immediately suspect could perhaps justified preferential treatment justified basis kind work done simply certain people eg everyone food industry get certain tax break special need country objectively decide get tax break special treatment limited leader friend definitely lost plot ethically leader hypothetical dictatorship already special privilege virtue lawmaker law country along service provided government etc correspond source code produced analogy apply equally everyone whether dictatorship democracy rule applies believe fairness beauty open source software way benefit anyone human relationship software author inherently limited human nature build relationship trust everyone source code produce limitation unavoidable inequality intrinsic necessity human relationship leadership structure used excuse deliberately propagating unfairness adding discriminatory restriction thing produce people outside structure see look like practice take issue needing wrapper intl mentioned couple time long standing problem elm user elm solved able write kernel code wrap intl use elmintl install elmgithubinstall several people tried something unfortunately luke westby response illustrated many thing wrong elm leadership quote toastal step required get radar elm dev team already radar toastal seems many seem agree leveraging intl feature right thing toastal wrapped implementation making wrapper browser api posting right way propose something platform looked http githubcomvanwagonetelmintl quickly decided consider wrap intl api instead serving explain ideal elm api us intl could think pretty hard question right considering much stuff intl actually toastal going kill current solution party native code seems like thread really something us native module answer use port custom element going happen program repos distribute third party native code intl special regard uniquely poorly suited port custom element want help process along finish first step always literature review find way language platform address specific use case mind intl lot stuff consider distinct apis present learned share source immediately posted thread getting long fractious make new thread specific problem converting stuff intl use port custom element make new thread fluent stuff spookylukey working spookylukey want definitely interesting make new thread toastal anyone else want complete review prior work subject apis might use intl elm implementation feel free find slack send dm question final product might look like closed thread blocking anyone replying comment first major problem arrogance demonstrated picking luke westby merely demonstrating attitude core team despite multiple people demonstrated experience expressed willingness help including pretty clear elm core team consulted people sense might possibly benefit someone else luke flatly contradicts people list stated portscustom element really suitable wrapping intl effect say without proof despite clear people thread much experienced matter core dev need thing like reason seems need ask people hold view know better effectively accuses people thread trouble maker seems like thread really something us native mean dare bring yet another piece evidence previous decision caused huge problem adequate answer next major problem clearly demonstrates little core team understand pretty much everything said wrongheaded regarding process scold people contributed far using wrong process wrapper browser api posting right way propose something tell right process according literature review far see completely impractical discover indeed rule process always unwritten one supposed know expect chided knowing biggest problem immediately close thread give noone chance respond specific point make give process extremely unlikely go anywhere fast shuts metaprocess extremely arrogant aggressive way interact community give community member good option happen disagree could choose silent elm discourse board even enough tact realise immediately opening thread entitled everything said last thread would bad move aggressive confrontational return like eventually done blog post result entirely predictable month later time writing far see zero progress front consequence nonenglish developer end user discriminated due difficulty formatting number date correct way nonenglish locale going say something silly like programming language strong bias towards english multiple way perfectly reasonable make programming language use natural language convention author default think need feel guilty huge advantage give first language english speaker emergence common language phenomenon occurred throughout history benefit everyone however ought aware advantage fact benefited others language author go way build completely unnecessary discriminatory policy compiler despite going whole spirit open source way give additional special advantage like access certain compiler feature people already advantage like core team surprised make life even harder minority responsible discriminatory effect especially thing pointed technical reason excuse level discrimination nonenglish internet user elm project browser already provides web developer cldr data needed correctly formatting date number different locale localization issue via intl apis elm compiler already mechanism interfacing browser apis mechanism going disappear perfectly acceptable elm standard library acceptable elm core team attempt block using already existing compiler mechanism browser apis provide solution user worked example focused need intl wrapper illustrates previous point however thing happen many time every group whose need adequately represented core team suffer unfairness discrimination even easy put name group identify think asking much elm leadership principle laid seen put practice every open source community worked even project using bdfl model django beginning never expected seen behaviour seen elm leadership rather elm leadership gone way ignore normal behaviour open source project addition abandoning basic principle fairness also made work able fix certain kind bug missing library make many decision may entirely unqualified make blocked many valuable contribution many people result project feel inclined contribute open source project ever involved work bug fix feature high degree confidence contribution accepted would benefit everyone community equally least without deliberate discrimination fact one aspect open source love value able share work way benefit everyone without risk someone going take thing away use privileged elm confidence leader demonstrated believe principle behind expectation huge turnoff hope project look elm inspiration run
37,Lobsters,elm,Elm programming,Write Better Python by Learning Elm,https://medium.com/@SaturnFromTitan/write-better-python-by-learning-elm-66c391fa3fec,write better python learning elm,antipatterns alternative fragile code return typing module pycharm additional code inspection warning realpythoncom great guide custom type attr project namedtuple raymond hettinger talk realpythoncom ultimate guide mutability mutable default argument nearly enums ambiguous type python antipatterns,antipatterns alternativesthroughout section continue successively refactor python code increase robustness understandabilityfragile codelet take look following ispaid function take dictionary check paiddate value set def ispaid invoice return invoice paiddate nonecan see biggest problem function exactly guarantee paiddate available dictionary calling function might actually result keyerror paiddate piece code pretty fragile need pay close attention refactoringa safer approach would rewrite asdef ispaid invoice return invoiceget paiddate nonei go detail interested make sure check return library offer elegant solution sort problem introducing elmlike maybe container pythonthe typing modulelet take another look ispaid know invoice obvious could dictionary could also custom type implementing get method derive answer studying piece codebase call functiona good way concrete python typing module typically use mixed approach necessarily type whole codebase focus critical complex unobvious part document code save lot time especially new developer join teaman improved version would typing import dictdef ispaid invoice dict str bool return invoiceget paiddate nonenow obvious invoice expected dictionary becomes apparent get behavesin case use ide like pycharm give benefit additional code inspection warningswhen want learn typing recommend reading realpythoncom great guide subjectcustom typesknowing invoice dictionary better still pretty clueless content key invoice supposed paiddate key always available lack clear definition invoice consists call custom type especially python class syntax pretty clunky easy fall antipattern defining enough custom type rather relying native type like dictionary tuples muchfor simplicity let invoice consist three attribute amount paiddate status defining regular class end something like class invoice def init self amount paiddate status selfamount amount selfpaiddate paiddate selfstatus statusmeh quite bit clutter therefore pretty unpythonic luckily way define concisely example using dataclasses dataclasses import dataclassfrom datetime import datetimefrom typing import optional dataclassclass invoice id int amount float paiddate optional datetime status strusing refactor code accept new custom type def ispaid invoice invoice bool return invoicepaiddate nonenote point could also make property invoice leave exercise ambitious reader please note dataclasses available since python good alternative attr project namedtuple though also differ featuresif want dive deeper subject recommend raymond hettinger talk dataclasses realpythoncom ultimate guide mutability another problem language like python mutability list dictionary mutable cause surprising bug code likely encountered least mutable default argument function method go detail least want mention dataclasses attr support optional frozen keyword make class nearly immutableenums application find use case enumerated value ie attribute limited set possible value invoicestatus good example certainly small set value allowed field instance draft sent paid cancelled current implementation would string work robust typoslet consider following example def isopen invoice invoice bool return invoicestatus send see problem typed send instead sent worst case could lead overdue invoice marked paid company loses quite bit money scary use enum instead safeguarded sort bug enums import enumclass invoicestatus enum draft draft sent sent paid paid cancelled cancelled dataclassclass invoice status invoicestatusnow isopen function becomesdef isopen invoice invoice bool return invoicestatus invoicestatussendwhich would raise attributeerror send function called even single test case somehow invokes function surely find bug deploymentambiguous typeslast least would like highlight issue using ambiguous argument return type inevitably drive complexity code cause many bug attentive dealing themtake following example add new invoicemeta type carry metadata invoice toy example hope get point def getmeta invoice metas meta metas invoiceid metaid return metameta getmeta invoice metas print metarecipient problem code implicitly assumes invoice corresponding meta entity assumption hold run exception attributeerror nonetype object attribute recipientsnap ok use type annotation thoroughly would spotted return type must optional invoicemeta even find writing complex code road always need check whether meta invoicemeta none meta getmeta invoice metas meta none print recipient unknown invoicemeta recorded else print metarecipient suggested python antipatterns better approach would raise exception directly getmeta handle error different layer codedef getmeta invoice metas meta metas invoiceid metaid return meta raise lookuperror f invoicemeta available invoiceid
38,Lobsters,elm,Elm programming,Elm Bits - a weekly newsletter about Elm,https://elmbits.com,elm bit weekly newsletter elm,,week mutually recursive type embedding elm j apps esri make use elm reflection elm chronzpeter duncanmalashock jmhauck riccardoodone fissioncodes
39,Lobsters,elm,Elm programming,"LambdaConf 2020 Call for Proposals: Scala, Haskell, Kotlin, Purescript, Rust, Elm, Elixir, F#",https://lambdaconf.zohobackstage.com/LambdaConf2020#/cfp?lang=en,lambdaconf call proposal scala haskell kotlin purescript rust elm elixir f,,
40,Lobsters,elm,Elm programming,Write a jigsaw puzzle generator in Elm,https://www.juricho.me/posts/puzzle-generator/,write jigsaw puzzle generator elm,write puzzle generator elm suggest edit post elm intro http voronoi tesselation http generate grid square piece randomly move inner corner grid little bit replace edge tongue shape save svg ellie code repo tutorial possible improvement setting elm project elm compiler installed generate grid look ellie browse code repo point time ellie code repo wiggle grid ellie code puzzle edge shape explanation svg path ellie read full code lot ellie final code extract svg svginsert conclusion fun failure fun failure possible improvement initial voronoi approach,write puzzle generator elm published suggest edit post holiday season wanted make custom jigsaw puzzle gift plan write jigsaw puzzle generator use laser cutter cut much fun randomly generating puzzle nice problem beginner tinkerer wanted write approach came love hear attempted something similar especially came different solution used elm nice way produce svgs happens frontend language know best intro sidenote post turned longer anticipated want skip straight code http actually made two attempt first one based generating voronoi tesselation making heavy use elmgeometry approach subtle problem made go back drawing board second attempt describe approach much detail instead walk fully working solution based second attempt however interested look messy original code repo http broke problem generate grid square piece randomly move inner corner grid little bit replace edge tongue shape save svg high level view turn however need solve smaller problem make work look code ellie code repo tutorial see possible improvement idea make puzzle better polish overall tool try achieve setting elm project assume elm compiler installed everything need initialise project mkdir jigsawtutorial cd jigsawtutorial elm init elm install elmrandom elm install elmsvg elm install elmcommunitylistextra create srcmainelm launch elm reactor commandline open http let give skeleton mainelm commented import needed second feel free uncomment already module main exposing main import dict exposing dict import listextra list import random import svg exposing svg import svgattributes exposing main svg msg main svgsvg width height viewbox svgrect x width height already super loving two thing repeat dimension two place string nt nice canvas backdrop give visual feedback drawing window fixed convenience function parametrises dimension draw checkered background pattern code terribly interesting look use interactively ellie look like amazing way start solving actual problem generate grid benefit hindsight abstract couple thing let define basic type toplevel record hold parameter puzzle module main exposing main puzzle piecesx piecesy gridperturb seed randominitialseed draftmode false pixelspercell type alias point x int int type alias edge start point end point commented part give taste need minute need make grid square piece thought grid list corner point also list edge one generate depends want unit pixel might want keep coordinate piece separate numbering piece often confused two carrying numbering work edge take care useful later want sort path mind decided describe grid dict point key tuples correspond x numbering piece point contain coordinate bit programming function give u dictionary corner point grid rectangulargrid int int dict int int point rectangulargrid nx ny let indicesx listrange nx indicesy listrange ny index tuplepair indicesx indicesy index listmap ix iy ix iy x ix puzzlepixelspercell iy puzzlepixelspercell dictfromlist unless draw going useful let draw point main svg msg main let grid rectangulargrid puzzlepiecesx puzzlepiecesy marker dictvalues grid listmap drawmarker canvas paramswidth paramsheight marker drawing function drawmarker point svg msg drawmarker x svgcircle cx stringfromint x cy stringfromint r stroke fillopacity checkpoint look ellie browse code repo point time seems nice unfortunately still work ultimately want work edge corner challenge therefore find function following type signature type alias point x int int type alias edge start point end point calcedges dict int int point list edge calcedges kind stuff like solving programming exercise want time one solution calcedges dict int int point list edge calcedges grid let maybeconnect index point dictget index grid maybemap start point end horizontal grid dictmap ix iy point maybeconnect ix iy point dicttolist listsortby iy iy listmap tuplesecond listfiltermap identity vertical grid dictmap ix iy point maybeconnect ix iy point dicttolist listsortby ix ix listmap tuplesecond listfiltermap identity horizontal vertical might slightly complicated necessary really wanted control sorting order let draw main svg msg main let grid rectangulargrid puzzlepiecesx puzzlepiecesy marker dictvalues grid listmap drawmarker edge calcedges grid canvas paramswidth paramsheight svgg marker svgg listmap drawedge edge drawing function drawedge edge svg msg drawedge start end svgline stringfromint startx stringfromint starty stringfromint endx stringfromint endy strokewidth stroke sidenote ping know highlightjs syntax highlighting elm sometimes break like progress look like checkpoint ellie code repo step wiggle grid time make grid le boring advantage setup chose possible function transforms grid dict another grid dict new piece code module main exposing main import random puzzle draftmode true piecesx piecesy pixelspercell seed randominitialseed gridperturb perturbgrid dict int int point dict int int point perturbgrid grid let pert puzzlegridperturb randompair randompair randomint pert pert randomint pert pert randompairlistgen randomlist dictsize grid randompair randompairlist randomstep randompairlistgen puzzleseed dictvalues grid rx ry point x pointx rx pointy ry randompairlist optional keep border straight listmap snaptoborder tuplepair dictkeys grid dictfromlist snaptoborder point point snaptoborder x x snaptoborder puzzlegridperturb paramswidth x snaptoborder puzzlegridperturb paramsheight snaptoborder int int int int snaptoborder howclose maxcoord coord coord howclose else coord howclose maxcoord maxcoord else coord mostly simple code fairly tricky use random right way easy fall trap using seed list thing getting perturbation everywhere rest consists mundane logic snap outer edge back rectangular border shape could skip get interesting puzzle yay ellie code checkpoint puzzle edge shape nt look like much yet everything goint fall place next step idea replace inner edge typical puzzle tongue shape create interlocking part basically want thing everywhere help basic intuition bézier curve syntax admit stare explanation svg path quite bit basically syntax cubic spline curve two point two control point special syntax chaining bunch together looking generate something like svg path c svg coordinate point curve respective control point letter way tag also one control point omitted symmetrical previous one super easy get confused example endpoint one control point coordinate specified point time define record type keep track coordinate pair mean along drawing function type alias start point startcontrol point middle point middlecontrol point endcontrol point end point svg msg curve let stringfromint curvestartx stringfromint curvestarty c c stringfromint curvestartcontrolx stringfromint curvestartcontroly stringfromint curvemiddlecontrolx stringfromint curvemiddlecontroly stringfromint curvemiddlex stringfromint curvemiddley stringfromint curveendcontrolx stringfromint curveendcontroly stringfromint curveendx stringfromint curveendy pathstring c listmap stringjoin stringjoin svgpath stroke black fill none pathstring try ellie read full code one last fun problem solve given edge fit tongue shape also parameter decides way flip piece used boolean would good define proper type like type flipdirection oneway theotherway generating randomly exactly easy generating list bool boo laziness ok maketongue bool edge maketongue try way basically linear interpolation edge curve point definitely something lot nicer elmgeometry since define base shape rotate translate scale right way maketongue bool edge maketongue flip start end let vedge x endx startx endy starty vperp starty endy x tofloat vedgex tofloat vedgey round else startx endx x tofloat vedgey tofloat vedgex round flipmult flip else vperpn x flipmult tofloat vperpx norm vperp round flipmult tofloat vperpy norm vperp round middlescale tofloat puzzlepixelspercell round scalev h vect x tofloat vectx h round tofloat vecty h round scale h n tofloat n h round middle x vperpnx middlescale scale startx endx vperpny middlescale scale starty endy start point startx starty startcontrol point startx scale vedgex starty scale vedgey middlecontrol point middlex scale vedgex middley scale vedgey middle point middlex middley endcontrol point endx scale vedgex endy scale vedgey end point endx endy norm length vector norm point float norm vect vectx vecty tofloat sqrt definitely bunch magic number since get done nt time create nicer abstraction work bothered let hook let figure additional code main svg msg main let cnvs canvas paramswidth paramsheight grid rectangulargrid puzzlepiecesx puzzlepiecesy perturbgrid marker dictvalues grid listmap drawmarker isonborder edge false edgestartx edgeendx edgestarty edgeendy edgestartx paramswidth edgeendx paramswidth edgestarty paramsheight edgeendy paramsheight edge calcedges grid listfilter isonborder flip randomuniform true true false randomlist listlength edge l randomstep l puzzleseed tongue maketongue flip edge border svgrect x width stringfromint paramswidth height stringfromint paramsheight fillopacity stroke black cnvs puzzledraftmode svgg listmap tongue border svgg marker svgg listmap drawedge edge else svgg listmap tongue border one last time see everything together ellie look final code let see result switch draftmode false see final puzzle glory extract svg one important thing almost forgot generated fantastic svg code get really time display dom string simplest way possible copypaste generated svg site source code dumb kind quick hacky solution make happy obviously wanted export hundred could easily display svg string even hook button copy clipboard know way make elm download svg file generated let know save svg file use featureplugin vector graphic editor used svginsert happen use sketch conclusion tutorial show final happy path took little bit work come nice way express solve problem nt frustrated get stuck seemingly simple part jump fun failure see garbage produced get sure lot improvement done quite happy readability flexibility code bunch photo physical result work even cut plexiglas machine seriously cool fun failure let agree call generative art possible improvement time would like improve several thing initial voronoi approach could also generate truly random piece would cool put logic avoid tongue piece intersecting also avoid generating piece small tool could easily made website set parameter interactively low enough perturbation piece actually unique enough puzzle made quite tough solve would like randomise shape tongue bit would nt hard make thinner slanted would help lot making piece unique could engrave next puzzle making pretty slightly easier solve feel free send pull request happen hack code laser laser hi well done scrolling nothing see blank space jumping footnote nt suck
41,Lobsters,elm,Elm programming,The Power of Elm in JavaScript,https://medium.com/@franzejr/the-power-of-elm-in-javascript-816b127e4553,power elm javascript,power elm javascript could become care elm elm exist elm compiler compiler assistant total immutability purely functional good article talking fp reactive programming strong static type elm solution bringing thing j static type flow typescript find people web talking highly redux similar redux first router navigation decoder summary resource,power elm javascriptsince first learning elm heard good thing convinced elm could become future frontend development coming year maybe reason blog post elm community particularly stuck moment involved elm project however messing around elm bit want work elm know elm bring incredible thing frontend developmenthow bring thing javascript since working javascript presently let see first elm u developerswhy care elm common question people ask book called elm reillyin book say many common issue frontend developer deal exist elmyes read well simply exist imagine dealing undefined function odd thing like nan nan weird thing explanation still weirdelm compilerelm awesome compiler imagine compiler assistantelm ensures error happen compile time front developer instead runtime front user elmthe elm compiler awesome let look one example example trying return string number ifelse compiler make life easier explaining exactly error donow imagine made typo rather typing map typed napthe compiler explains give optionstotal immutabilityimagine need worry mutable state application everything immutablepurely functionalelm purely functional language mean use power functional programming codehere good article talking fpreactive programmingin imperative programming language let b cif change value b updated elm help u computing value statestrong static typesthe use type one main point using elm strong static type elm infer type variable function prevents series mistake makelso need worry null undefined elm solution thisbringing thing jswe saw elm best used let see bring thing javascript possiblestatic typesthere way bring something like static typing javascriptflowwe using flow formula projectimagine function used undeclared variablefunction myfunction let b flow explain used undeclared formulaereact git master flow let b identifier b could resolve namefound errornow imagine function receives number pas string function timestwo x number return x function main timestwo hello flow say type incompatible expected parameter formulaereact git master flow timestwo hello string type incompatible expectedparam type function timestwo x number numberfound errorthese little thing help lot development phasetypescripttypescript lot interesting feature find people web talking highly personally prefer using flow mentioning typescript think good go reduxfor work react redux based elm architecture already using redux using something elmbased never thought itwe using redux like check simple structure program elm see model function update view similar reduximport html exposing modeltype alias model updatetype msg reset update msg model modelupdate msg model case msg reset viewview model html msg view model redux first routeranother thing think good redux first router using project mentioned earlier liked idea routing state another part application statein store define route const routesmap home action url path product product id id dynamic segment action used reducer change state change routeconst productsreducer state init action switch actiontype case home case product handling routing elm via navigation basically thingdecoderselm us layer called decoder boundary frontend backend see language elm explicitly javascript code created decoder data received created encoders data sendas using immutablejs convert json receive app type app recognizes weird json structure easily also add new validation phase getting data apilet imagine api person receive data server call decode function responsibility return persontypeconst person get name string promise persontype return apiget name resp decodepersontype respdata case persontype immutable recordimport record immutableexport default class persontype extends record name age github name string age number github string code apiperson typehis map exactly json receivetype apiperson name string age number github string decodepersontype person apiperson persontype return new persontype name personname age personage github persongithub decode function convert api type apiperson persontypesummarynow know good thing elm bring u work javascript project probably bring elm feature javascript coderesources
42,Lobsters,elm,Elm programming,Writing a Chrome Plugin with Elm,https://www.dev-log.me/writing_a_chrome_pluging_with_elm/,writing chrome plugin elm,elm http githubcomyannickcwelmexamplechromeplugin setting project createelmapp setup plugin extension api enabling plugin extension api using port access plugin api port doc mock dev,recently need write small browser plugin one project thought already making feel bad thinking needing program javascript fear turned joy realized perfect opportunity write plugin elm favorite language frontend elm beautiful language similar feel haskell give benefit runtime exception great performance functional core great error message compiler elm architecture check nice introduction find whole code example http githubcomyannickcwelmexamplechromeplugin setting project create elm project createelmapp make developing pretty comfortable easy run createelmapp elmplug cd elmplug afterwards verify working run elmapp start see elm app running http structure like elmplug readmemd elmjson gitignore able run elmapp build generates production build u build buildstatic setup plugin next need add manifestjson file publicmanifiestjson already one replace new need different setup using app plugin manifestversion name elm plug description example plugin version browseraction defaultpopup indexhtml permission cooky http wwwtestde one important part tell browser file load initially browseractiondefaultpopup get permission want access anything extension api want read cooky later already add also add url specify host access eg read cooky next time add plugin browser see action enabling plugin run elmapp build build new manifestjson build directory ready need load build directory unpacked chrome plugin shown gif great already elm application running plugin else need access extension api would great interact browser outside plugin using port access plugin api access anything outside save elm world need use port way interact asynchronously j synchronous way directly interact anything outside could risk runtime exception guarantee go detail port work check nice doc information need create new file portselm port module port exposing askcookie updatecookie cookievalue type alias cookievalue string type alias cookiename string port updatecookie maybe cookievalue msg sub msg port askcookie cookiename cmd msg important add port front module declaration added two function askcookie used send something outside world updatecookie used receive something outside world askcookie returning resulting cookievalue way asynchronous message outside triggering action never rely j code outside ever expect maybe receive cookievalue use updatecookie need provide function creates message cookievalue get back let use port mainelm add import port exposing askcookie updatecookie cookievalue import send askcookie event plugin opened type alias model maybe cookievalue init model cmd msg init nothing askcookie somecookie next need make sure listen cooky coming updatecookie add new msg fulfilling exactly parameter updatecookie function maybe cookievalye msg type msg gotcookie maybe cookievalue add subscription updatecookie main program model msg main browserelement view view init init update update subscription updatecookie gotcookie finally react received update cookie update msg model model cmd msg update msg model case msg gotcookie maybecookie maybecookie cmdnone display cookie value view model html msg view model let cookietext case model c text c nothing text get cookie div img src logosvg cookietext get lastly need add javascript actually read cookie browser therefore change srcindexjs file import maincss import elm mainelm import serviceworker serviceworker const app elmmaininit node documentgetelementbyid root const updatecookie cookiename chrome chromecookies chromecookiesget url http wwwtestde name cookiename function cookie cookie appportsupdatecookiesend cookievalue else appportsupdatecookiesend null appportsaskcookiesubscribe updatecookie serviceworkerunregister subscribes askcookie message run updatecookie function whenever new message akscookie updatecookie function try access cooky wwwtestde given name cookie send asynchronously back elm app updatecookiesend send null case find cookie receive nothing inside elm app cookie set wwwtestde name somecookie show open plugin mock dev one last thing make development easier faster mock chromecookies access see elm app behaviour without running elmapp build every time change eg add indexjs const updatecookie cookiename chrome chromecookies chromecookiesget url http wwwtestde name cookiename function cookie cookie appportsupdatecookiesend cookievalue else appportsupdatecookiesend null else appportsupdatecookiesend devcookie develop elmapp start running inspecting page browser directly instead plugin window thats get started building plugins elm
43,Lobsters,elm,Elm programming,Subverting Elm packaging for fun and profit,https://vllmrt.net/spam/subverting-elm.html,subverting elm packaging fun profit,elm application internationalization api ecmascript internationalization api elmtime calling native code port recent insight native module compiling module little demo app get module app building elm apps guix robxshelm guix discussion making thing right shelm githubcomrobxelmdatetime githubcomrobxshelm spam,elm application working present item publication timestamps user around world far printed slightly mangled utc timestamp formattimestamp string string formattimestamp t t stringleft stringlength stringreplace worked well enough start felt time solve properly give user localized timestamps article account quest better timezone aware variant formattimestamp meet ecmascript internationalization api figure write simple native elm module build binary package database using printf trick elm compiler cooperating likely elm team preferred approach best keep official elm community channel internationalization api first thing need move stringy timestamps something logical elm talk unix timestamps type posix posix int number millisecond since epoch instead parsing timestamps clientside using something like opted conversion postgrest backend publishedat extract epoch publishedat publishedatposix looking timezone locale aware function formattimestamp posix string turn browser rather neat interface related topic ecmascript internationalization api way want given posix value function formattimestamp posix var datetimeformat new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric return datetimeformatformat posix undefined first argument constructor mean use user locale unspecified timezone second option argument mean use user local timezone think together format dec utc pleasing engb locale europeberlin timezone locale say enus thucabuddhist would show pm respectively figure local setting enter following browser console new intldatetimeformat resolvedoptions elm turn tricky however time library situation bit mess barebones core library elmtime speaks unix timestamps variety date time related package none appear job simple mostly pure javascript solution available use calling native code documented approach interacting javascript code elm using port would effectively turn simple function call asynchronous rpc invocation ton scaffolding appear acceptable solution thought apply recent insight elm tooling figure use javascript api within elm seemed like fun challenge native module following along vanwagonetelmintl elmtime javascript interop came native module elmkerneldatetime implemented file srcelmkerneldatetimejs function datetimelocalnumericdatetime return new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric var datetimeformat function datetimeformat value return datetimeformatformat value together elm wrapper module datetime implemented srcdatetimeelm module datetime exposing datetimeformat localnumericdatetime format import elmkerneldatetime import maybe exposing maybe import time exposing posix type datetimeformat datetimeformat localnumericdatetime datetimeformat localnumericdatetime elmkerneldatetimelocalnumericdatetime format datetimeformat posix string format datetimeformat posix elmkerneldatetimeformat datetimeformat timeposixtomillis posix walking javascript file start empty header comment listing elm import declare function elmkerneldatetimelocalnumericdatetime datetimelocalnumericdatetime called elm unit argument finally declare twoargument function datetimeformat curried form using helper compiling module setting thing naïvely following elmjson type package name robxelmdatetime summary format local date time via javascript license version exposedmodules datetime elmversion v dependency elmcore v elmtime v testdependencies get error elm make elm make bad module name srcdatetimeelm datetime module trying import elmkerneldatetime name like reserved internal use switch name outside elmkernel namespace bad robx cookie instead moving module elm namespace let move package name robxelmdatetime name elmmyelmdatetime elm make happy elm make success compiled module also call elm make docsdocsjson check happy state documentation otherwise compiling app using package fail obscure error message elm tooling ensures published package dependency fail compile bypass later little demo app test function give u something concrete try make work let build small demo app merely tick clock module demo exposing main import browser import datetime import html import time main program model msg main browserdocument init init view view update update subscription subscription type alias model time maybe timeposix type msg tick timeposix init model cmd msg init flag time nothing cmdnone update msg model model cmd msg update msg model case msg tick posix model time posix cmdnone view model browserdocument msg view model let format datetimeformat datetimelocalnumericdatetime title puzzle body case modeltime posix htmldiv htmltext stringfromint timeposixtomillis posix htmldiv htmltext format posix htmldiv htmltext subscription model sub msg subscription model timeevery tick track current time model subscribing timeevery display next formatted version build assemble naïve elmjson type application sourcedirectories src elmversion dependency direct elmbrowser elmcore elmhtml elmtime elmmyelmdatetime indirect elmjson elmurl elmvirtualdom testdependencies direct indirect naturally work elmmyelmdatetime exist elm tool elm make srcdemoelm corrupt cache ran unknown package exploring dependency elmmyelmdatetime get module app course publish elm package database name get fun part approach took building elm apps guix help fact building guix could pull pretendelm package quite easily without extra work regularly developing using guix wanted find shellbased solution necessary environment tweak get elm play along fetch dependency archive unpack elm home directory went elmstuffhome mean unpacking eg elmdatetime package accordingly dependency elmjson generate elm registry using printf generate binary data call homeelmstuffhome httpproxy elm make build collected wrapped various shell snippet involved bash script available robxshelm let look core part regular elm package step may achieved jq curl tar jq r dependenciesdirectdependenciesindirect toentries key value tsv read package version unpack mktemp cd unpack curl l http githubcom package archive version targz tar xz dest elmhome package mkdir p dest mv unpack dest rmdir dest done collect dependency elmjson need little bit careful work move right place turn code also work fine unpublished package elmmyelmdatetime thing need redirect real github project robxelmdatetime chose encode information extra elmjson field dependency direct elmmyelmdatetime location elmmyelmdatetime method github name robxelmdatetime compact format like elmmyelmdatetime robxelmdatetime worked initially present form result overengineering packaging script might tweak unpacking fragment support follows location jq dependencieslocations package name package elmjson cd unpack curl l http githubcom location archive version targz tar xz step list package version installed package cache write elm binary package registry format use printf eg integer encoded bigendian byte haskell binary encoding integer byte bigendian hex printf printf x x x x printf x x x x see guix discussion detail fixing various bug work cd l hexdump c elmbrowser elmcore elm html elmjson elmmyelmd atetime elmtime elmurl elmvi rtualdom home pwd elmstuffhome httpproxy elm make outputdemojs srcdemoelm dependency loaded local cache dependency ready success compiled module app action elmdatetime demo making thing right might stop still issue native datetime module format datetimeformat posix string pure function localnumericdatetime datetimeformat lying pretend calling intldatetime locale option without fully resolved option depends environment might change call eg timezone change model correctly change task type localnumericdatetime task x datetimeformat modelling thing timehere change javascript module follows asrcelmkerneldatetimejs bsrcelmkerneldatetimejs import elmkernelscheduler exposing binding succeed function datetimelocalnumericdatetime return new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric return schedulerbinding function callback callback schedulersucceed new intldatetimeformat undefined year numeric month numeric day numeric hour numeric minute numeric elmkernelscheduler native module behind task elmside diff trivial asrcdatetimeelm bsrcdatetimeelm module bind import elmkerneldatetime import maybe exposing maybe import task exposing task import time exposing posix type datetimeformat create datetimeformat using user locale timezone localnumericdatetime datetimeformat localnumericdatetime task x datetimeformat localnumericdatetime elmkerneldatetimelocalnumericdatetime let bump package version aelmjson belmjson name elmmyelmdatetime summary format local date time via javascript license version version exposedmodules datetime getting demo involves performing task obtain formatter application startup keeping around model bdemoelmjson elmcore elmhtml elmtime elmmyelmdatetime elmmyelmdatetime indirect elmjson diff git ademosrcdemoelm bdemosrcdemoelm index ademosrcdemoelm bdemosrcdemoelm module demo exposing main import browser import datetime import html import task import time main type alias model time maybe timeposix format maybe datetimedatetimeformat type msg tick timeposix newformat datetimedatetimeformat init model cmd msg init flag time nothing cmdnone time nothing format nothing taskperform newformat datetimelocalnumericdatetime update msg model tick posix model time posix cmdnone newformat fmt model format fmt cmdnone view model browserdocument msg view model let format datetimeformat datetimelocalnumericdatetime title puzzle body case modeltime posix case modeltime modelformat posix fmt let format datetimeformat fmt htmldiv htmltext stringfromint timeposixtomillis posix htmldiv htmltext format posix done make shelm fetch pruning stale dependency fetching http generating shelm make outputdemojs srcdemoelm dependency loaded local cache dependency ready success compiled module still work time around used shelm build application via make elmdatetime demo find full code package demo app githubcomrobxelmdatetime release shelm package manager available githubcomrobxshelm comment question write spam domain spam spam
44,Lobsters,elm,Elm programming,Minesweeper in Elm,https://functional.christmas/2019/4,minesweeper elm,tl dr minesweeper background result play code biggest challenge thought,tl dr sucker math necessarily good like really dislike null pointer exception relate functional programming probably something like almost replicated minesweeper elm thought write little bit background started working bekk nt heard functional programming mostly coincidence joined group started practicing elm struggle beginning actually quite time practiced maybe gotten past noob level decided wanted try write classic minesweeper game elm wanted without getting hint like following tutorial sort idea way struggle would steep learning curve could get hopefully guess believe efficient way practice learn new thing thought would try persuade reader try something similar hopefully something involves functional programming result look like moment still stuff feature missing exactly clean code far afraid point learn fast hope excused entire design manually written svg part pretty happy want play check help code biggest challenge thought would pick one part code dig instead trying cover much part found challenging black belt recursion likely easy task white belt maybe yellow gave one great nerdrushes got working end task click square contains nothing neighbour automatically open neighbour also contains nothing neighbour automatically open ca nt open empty square collection neighbour solution started sketch model matrix use coordinate j every square id stepping example open opening neighbour seeing also empty square opening neighbour square seeing empty neighbour opening neighbour square putting something done recursively open open neighbour save list named something like listofcompletedsquares save empty neighbour list named something like todolistofemptyneighbours except already listofcompletedsquares case todolistofemptyneighbours empty return result finished case moment case todolistofemptyneighbours empty whole process changing another square todolistofemptyneighbours wrote elm goagain algdat algdat goagain ag let currentmatrix agcurrentmatrix currentsquare agcurrentsquare remaining agremaining done agdone newemptyneighbours getlistofemptyneighbours currentmatrix currentsquarei currentsquarej matrixupdated openallneighbours currentmatrix currentsquare doneupdated currentsquare done remainingupdated updateremaininglist remaining newemptyneighbours done currentsquareupdated listhead remainingupdated case currentsquareupdated nothing remaining remainingupdated currentmatrix matrixupdated currentsquare currentsquare done doneupdated debugremaining newemptyneighbours nextsquare goagain remaining remainingupdated currentmatrix matrixupdated currentsquare nextsquare done doneupdated debugremaining newemptyneighbours list remainingupdated member left currentsquareupdated actual square nothing nextsquare case lead stupidly named function goagain calling take self criticism bad naming messy thing find name type algdat example stupid name chose since nt want try come something better got work cleaned still hav nt done could probably efficient guess could turn lot inefficient well guess happy moment least lot fun seriously thought reactreduxtypescript great mostly use work ton great module easily used famous hard get project use anything else hard create bug many wereare fault admit often hard find compiles anyway almost every time track bug usually something caused something undefined null dream compiler tell elm forgotten side effect type accidental mutation pure function make much easier get wa nt scratched surface functional programming applicatives functors monad nt know yet bet awesome
45,Lobsters,elm,Elm programming,Guix and Elm,https://vllmrt.net/spam/guix-elm-1.html,guix elm,guix system elm developing guix infrastructure building elm apps using package elm reactor full elm tool deploying elm web application guix system tool githubcomelmcompiler currysoftware fork packageelmlangorg part packaging elm compiler minus reactor elmcompilerrelaxglslboundpatch scheme record quasiquote guix hackage turn elmcompilerdisablereactorpatch guix repository next article spam,month ago converted server administering run guix system recommend point subject long tragic story yet told learn lot along way particular get elm web app built running want talk aim document state elm packaging work others build show bypass elm highly opinionated packaging infrastructure provide introduction guix packaging split series article packaging elm compiler developing guix infrastructure building elm apps using package elm reactor full elm tool deploying elm web application guix system first part go guix packaging elm compiler proper haskell project work already made guix upstream guix package showelmcompiler name elmcompiler version output system dependency ghcansiterminal ghcansiwlpprint ghceditdistance ghcfileembed ghchttpclienttls ghchttpclient ghchttptypes ghchttp ghclanguageglsl ghclogict ghcnetwork ghcrawstringsqq ghcscientific ghcsha ghcsnapcore ghcsnapserver ghcunorderedcontainers ghcvector ghcziparchive location homepage http elmlangorg license modified bsd synopsis elm command line interface without elm reactor description includes command like elm make elm repl many others helping make elm developer happy productive elm tool source githubcomelmcompiler command line program provides variety subcommands related building elm application written haskell first step build tool guix enough tool able run elm make successfully source githubcomelm packaging version elm meantime bugfix release released avoid problem upstream release initially based packaging currysoftware fork found patch apply elm source useful rough idea elm tool work elm project come two form package application package distributed via packageelmlangorg used library package application application hand end product compiling javascript served web browser project defined file elmjson elm tool run directory containing file provides couple command relevant one u elm make download package dependency elm packageelmlangorg compile dependency within elm internal format compile elm module within elmstuff internal format application compile internal format javascript elm reactor serf web app interactively debug elm application implemented elm application face issue elm make allinone design great ease use thing way meant done building sandboxed environment without internet access need trick believe actually built package database talking packageelmlangorg grudgingly fall back offline mode work u concretely construct package database unpacking dependency source generating versionsdat database issue elm reactor use build since elm application need elm make logic available build clean way twostage build first build elm compiler use build elm reactor good except upstream build solves different rather hacky way call via template haskell generating web application javascript build elm tool one address tearing build apart first stage patch reactor build version elm tool primarily support elm make second stage reenable reactor providing javascript file built using first stage elm make tool nix deal issue different way see part brief comparison packaging elm compiler minus reactor step follow package elm make make sure haskell project build stack right lts version generate package definition using guix import hackage elmcabal import unpackaged haskell dependency replace source field refer github release apply patch go process explicitly least share pain inherent guix packaging work first step easy enough found thing built fine ghc stackage release applying patch elmcompilerrelaxglslboundpatch relax version bound guix import hackage convert cabal file expression form package name ghcelm version source origin method urlfetch uri stringappend http hackagehaskellorgpackageelmelm version targz failed download tar archive buildsystem haskellbuildsystem input ghcansiterminal ghcansiterminal ghcziparchive ghcziparchive homepage http elmlangorg synopsis elm command line interface description includes command like elm make elm repl many others helping make elm developer happy productive license scheme record number named field important one source declares package source archive input declares list dependency typically package buildsystem declares build system used pretty much build system define source input field actually dependency input given association list pair packagename package name appears mostly irrelevant package package record like defining knowing scheme well thought comma part tuple syntax instead part scheme syntax defining data mix literal evaluated data quasiquote starting guix tempting mostly fine thing copyandpasting existing package definition sorry state guile error message really way around learning language let try build package definition write file called elmscm call guix build guix build f elmscm procedure proc error package unbound variable hint forget usemodules guix package indeed putting hinted line top file help guile module guix package defined guixpackagesscm within guix git repository generally guix tooling packaging infrastructure defined within guix package defined gnu next failure relates broken source field guix build f elmscm guix build error exception thrown condition character e string failed download tar archive unsurprisingly failed download tar archive valid hash happened elm actually published hackage guix import failed download source archive compute hash fix edit file refer correct uri elm compiler source put arbitray valid hash copied another package definition eventually fix hash correct version guix build f elmscm procedure proc error urlfetch unbound variable hint forget usemodules guix build download well forget indeed adding import get u guix build f elmscm procedure proc error haskellbuildsystem unbound variable hint forget usemodules form yes also need usemodules guix buildsystem haskell guix build f elmscm procedure proc error unbound variable hint forget usemodules guix license oh guix build f elmscm procedure input error ghcansiterminal unbound variable hint forget usemodules form oh dependency yet imported find one guix search ghcansiterminal name ghcansiterminal version output system dependency ghccolour location homepage http githubcomfeuerbachansiterminal license modified bsd synopsis ansi terminal support haskell description package provides ansi terminal support haskell allows cursor movement screen clearing color output showing hiding cursor changing title relevance defined module gnu package haskellxyz add import similar missing import fix also importing gnu package haskellcheck gnu package haskellweb elm dependency packaged usually point expect find library still missing package first guix import recursive mode help guix build f elmscm backtrace guixstorescm callwithstore guixscriptsbuildscm storeconnection catch procedure guixuiscm guixscriptsbuildscm appendmap appendmap package elm guixscriptsbuildscm guixpackagesscm cache weaktable package elm thunk bag derivation storeconnection haskell package ghc source origin http catch procedure guixpackagesscm guixstorescm runwithstore storeconnection guixbuilddownloadscm urlfetch timeout verifycertificate procedure urlfetch invalid keyword oops never seen error going step writing article turn helpful hint import guix build download misleading want import urlfetch guix download instead guix build f elmscm downloading http transferred hash mismatch expected hash actual hash hash mismatch store item progress copy paste actual hash elmscm actually trying build though expected run trouble haskell configure phase guix build f elmscm starting phase configure running runhaskell setuphs command configure configuring setuphs encountered missing dependency languageglsl need apply patch elmcompilerrelaxglslboundpatch store current directory add source definition source origin method urlfetch filename uri http patch elmcompilerrelaxglslboundpatch guix build f elmscm error exception trying run compiletime code homelessshelter createdirectory permission denied permission denied code bstoexp runio buildcompile untyped splice bstoexp runio buildcompile bstoexp runio buildcompile finally run trouble convoluted elm build trying run compiler building try write home readonly inside guix sandbox could get around providing writable home directory fail soon try access network fix adding another patch elmcompilerdisablereactorpatch guix build f elmscm successfully built hi thank trying elm evan hope like success wrapping package guix upstream requires little bit work bind package definition name place module within gnu package hierarchy move patch gnupackagespatches add file list gnulocalmk rewrite guix importgenerated synopsis description fit guix style markup format look complete patch guix repository next article see use elm compiler within guix package elm application comment question write spam domain spam spam
46,Lobsters,elm,Elm programming,The Biggest Problem with Elm,https://medium.com/@cscalfani/the-biggest-problem-with-elm-4faecaa58b77,biggest problem elm,biggest problem elm elm architecture tea short need differentiator small hammer big job state management nightmare serial parallel spaghetti execution done proceed,biggest problem elmthe biggest problem elm language lack higher level abstraction like many haskellers complain language keep removing advanced feature favor beginner experiencethe ffi foreign function interface mechanism allows developer call javascript elm leaf lot desired especially compared functional language mechanism would benefit returning task instead cmd biggest problemand programmer prohibited writing effect manager eg websocket effect manager would support websockets natively instead forcing developer use weak ffi mechanism known portsit certainly boilerplate code find writing interface json api backend loc application around codebase fact elm language worked almost decade official support private library still biggest problemthese problem pale comparison biggest reason leaving elm purescript elm architecturethe elm architecture tea short elm architecture work well lot case one size never fit see different library ecosystem solve similar problem elmat first might think one architecture great thing get lot benefit single hammer toolbelt master lone hammer know exactly drive every nail encounteralso look someone else program already understand structure already understand architecture strength single architecture applicationsthis approach attractive two type programmer new one one develop simple application new elm find great comfort able understand someone else code much quicker would environmentsthose play elm make simple standalone game small application say line le sing praise anointed architecture defend vehementlyand argument without merit small hammer great tool ever hang picture need certainly want heavy hammer fact overpowered tool make life miserablebut underpowered oneneed differentiatoras long simple problem solve simple tool best solution push simple tool far quickly learn cost limitationsthe small hammer hang picture perfectly today fail miserably try use break cement tomorrow need different hammerdoes eventual need jackhammer invalidate small hammer absolutely free purchase jackhammer use whichever tool make sense jobbut talking multiple hammer world allowed use one specific small hammera small hammer big jobas program grows complexity find creating module actually set module contain following file bigger application application toplevel update manage calling update lowerlevel update module complicated need call cmdmapsame go calling view view module like update subscription complicated call submapall plumbing boilerplate necessary tea mechanism handling anything single update model view subscription topmost level rest youthis part problemstate management nightmareimagine user navigates page need make multiple call backend retrieve data two choice make request parallel serialserialif make serially take longer render page code simpler make call backend finished handle response previous call make next call repeat received everything need finally render pagethe processing simple serial codehere squirrel away data retrieved time get result previous call data need finally render pagethis overly simplistic code example illustrates overhead state management serial caseparallelif make request parallel need handle response come asynchronously particular order parallel codenotice painstakingly check result call time error prone process sure help compiler accidentally type instead new elm may think code could helped async library first reactioni thought could build function update function must return elm runtime async call completedif try library quickly realize burdening caller managing yet another update function model limitation tea really become apparent herein javascript create library parallel async call javascript specify callback return exact scope originating call madein elm always exit scope forcing u manage state unnecessarily manually squirrel away temporary data model would normally scope upon returning one async callsconstantly exiting scope necessary requirement tea elm runtime continuespaghetti executionwe use websockets app since longer allowed write effect manager since websocket support recently removed elm forced websocket communication port write websocket code javascriptthis mean listen message coming back websocket using subscription every single place websockets usedwe give javascript message constructor properly mapped using cmdmap prepare completion message proper delivery code originating callthis functionality reserved effect manager instead everyone call backend must listen response process one matching initiator id state management make sure expecting callto make matter worse procedure developer must go see single request sent response handled frustrating tedious must weave dozen file port subscription message model update javascript code etc piece together picture application workswhat doneso fix tthe real problem hammer small job big carpenter idea limiting small hammer would latelearning limitation tool really important point article inform thinking using elm small hammer depending technology choice andor requirement may hit hard wallsyou work around cost complexity line code large team equally sized budget expect codebase remain stable added complexity technological debt worry aboutbut case u complexity curve grew exponentially pushed tea limit noredink dollar staff help mitigate limitation make matter worse codebase brand new changing foreseeable futureso forced live technical debt pay even higher price moving application purescript time tellhow proceedi suggest building prototype application overcome call technological hurdle technology tried one hurdle websockets via port call elmalso create proof concept application example page app build page depth first depth tea killer breadthmake sure implement encoders decoder fuzzers soon possible help judge level effort necessary working json language like purescript haskell nearly zero thanks generic time step embarked project mostly toss line code found elm would removing native code capability regular developer put project woefully behind scheduleif take time start see area complexity creeping boilerplate polluting codebaseif see manageable best advice move forward caution would using new technology stack could application requirement perfect small hammerunfortunately u bought small hammer proceeded use like jackhammer let happen youbest luck
47,Lobsters,elm,Elm programming,Elm 0.19.1 released: The syntax cliff,https://elm-lang.org/news/the-syntax-cliff,elm released syntax cliff,,
48,Lobsters,elm,Elm programming,Re-writing Vy.no in Elm,https://blogg.bekk.no/using-elm-at-vy-e028b11179eb,rewriting vyno elm,website early experiment new developer quickly became productive boilerplate fine rough edge elm stay,written robin heggelund hansen kjetil vallevy largest transport provider norway website million visitor month people depend every day purchase bus train ticket another interesting fact website almost entirely written elm application make nonstatic part website application rely private package common functionality little bit javascript certain operation directly supported elm amount line code number continues grow dayphoto vymads kristiansenearly experimentswe elm production vy since late started testing language small internal application get feel capability limitation found strong type system prevented several class bug application alluring promise runtime exception confirmed big boost productivity short really liked yet still unsure whether would scale real use term making something complex end user also term introducing new language team functional one thatto test latter summer tasked team summer intern renewal seat map application crucial component ticket booking process use elm language prior experience surprise took language easily work turned great application wrote still running production minor change sincethis experiment gave u confidence needed try elm larger scale luck would decision made rewrite entire booking process vy vision make easier accessible purchase ticket even people travel using environmentally friendly public transportationfast forward today entire booking process rewritten elm well part websitenew developer quickly became productivewe found surprisingly easy get new people speed project starting diehard elm fan quickly grown elm developer spread across multiple team several round summer intern also proven possible learn elm system become productive matter day achieved combination intro elm workshop liberal use pair programmingan approach found especially useful find person comfortable start part code base instance someone deep knowledge html cs probably start work view code someone primarily know backend coding perhaps working api integration familiar ground good starting point feel comfortable easy expand look new aspect applicationthere boilerplate finewe believe big reason behind success getting new developer rapidly speed due core design choice behind language namely elm small language feature favor explicitness type system involved everything tool abstract away repetitive code outside wrapping thing functionslet look error handling example elm wrap everything fail type want extract value type first check something fact go wrong avoiding possible would javascript pretend everything ok catch case exception handler top program write one error handler work kind error either elm way declaring two type adhere contractthis lead elm criticized tool avoid boilerplate experience however good thing explicit elm apps tend easy understand code without familiar figure function perform kind side effect simply glance type signature elm apps also tend structured way want see sort thing happen simply look top level update function app structured little differently easy figure thing meant work simply starting top level mainelm filewhile boilerplate tends viewed negative many language framework found simple important guide frontend application set reading able better understand given system worksit rough edgeswe also share frustration mentioned earlier code resides package reused frontend facing apps elm however support private package ended using third party tool called elmgitinstall solve issue work fine elm application relying private package private package able rely private package forced u include frontend app within package repo sole purpose building package dependency least know work outside repowhile show stopper little awkward several developer view sign language immaturityanother thing issue small number thirdparty package partly due elm young age also core design decision languagethe way elm make promise runtime exception strict kind package available mean javascript included package deployed elm package registry library pure elm code allowed many case javascript interop becomes unavoidablefortunately u big problem total line javascript code across application duplicated app however point time caselast year wanted phone number validation one apps elm package time imported javascript library called elm mechanism javascript interop portsports work asynchronously fine certain thing like local storage websockets validating phone number ideally synchronous operation introduced lot unnecessary complexity consider phone number validation occurred could happen user click submit button entering phone number end causing bug surprisingly difficult find given size featurefortunately u elmphonenumbers library came along able replace asynchronous validation code three simple line elm code lesson learned still relevant javascript interop quite painful especially converting synchronous api asynchronous oneelm staythe thing got u interested elm first place wish good static type system along guarantee runtime exception two year experience elm production found promise result definite boost productivity team member experienced inexperienced alike feel confident making larger change code base languagesbecause easy scale elm enthusiast one small application significant portion website elm supported growing team elm developer refactoring easy lot pain associated scaling fade awaya common misconception risky use nonmainstream language since difficult find developer right experience found however need people know elm beforehand onboarded people different technical background tend pick language rapidly become productive within dayswe found elm joy work part course issue nothing able work around extreme case something pure elm always use escape hatch rather escape port javascript instance needed far betweenin total experience working elm overwhelmingly positive look forward continue working going forwardthanks aksel fredrik sonja many others proof reading feedback
49,Lobsters,elm,Elm programming,Learning Elm by porting a medium-sized web frontend from React,https://benhoyt.com/writings/learning-elm/,learning elm porting mediumsized web frontend react,learning elm porting mediumsized web frontend react go taste elm port number loved could improved wedding gift registry elm official guide taste elm image credit increment decrement counter official guide port overall structure guest view modal json decoding number bundle size asset size react realworld example app elm equivalent line code react elm reasonml elmformat performance elm fast outofthebox performance loved elm tooling package type system ergonomics simplicity could improved documentation guide community faq syntax summary elmformat json decoding date handling use elm work,learning elm porting mediumsized web frontend react october summary learn elm ported frontend small site run react elm fun mindexpanding time go taste elm port number loved could improved learn learnt go similar way porting backend wedding gift registry website python go time learn something new frontend colleague mine passionate elm enthusiasm well selling point elm homepage guide got interested elm programming language building web apps far good also statically typed functional programming language pure functional one almost enough turn actually spent time scala couple year ago really disliked compiler slow language complex learning curve steep people seemed love writing indecipherable dsl using operator overloading ah punctuation elm functional also easy get started official guide nice way punctuation everywhere compiler fast provides helpful error message taste elm promise elm runtime exception safe refactoring achieves powerful static type system pure function immutable type everything type checked null undefined poke object tweak field side effect possible language every elm app model type represent current state example list gift registry form field value etc think react state view function take model return html like react render update function responds message like button click form field change return new model like redux reducer note none modifies anything view function return new html update function return new model additional side effect command execute elm browser runtime take care dirty work actually modifying dom running command asked pattern much like redux type safe significantly simpler come called elm architecture note data flow one way image credit elm code look like classic increment decrement counter app elm module main exposing import browser import html exposing button div text import htmlevents exposing onclick set thing main browsersandbox init count view view update update model type state one field count type alias model count int possible message action type msg increment decrement return new model based incoming message update msg model case msg increment model count modelcount decrement model count modelcount return html view model state view model div button onclick decrement text div text stringfromint modelcount button onclick increment text note particular view function plain elm template language jsx syntax learn html node function take two argument list attribute list child content node exception text creates text node take single string argument example href example class eglink text example even though elm statically typed explicit type specify type signature function get slightly better error message elm us type inference whole program level want add type signature look like take msg model return new model update msg model model update msg model case msg take model return html msg view model html msg view model div get taste elm go nice official guide port porting gift registry app started registry page center app view two mode admin couple view guest react codebase code intertwined lot admin else clause mistake even reactland wanted fix elm port however fairly direct port overall structure structured app around three view admin home guest modal manage conceptually addition common functionality like api call date gift type etc adminelm adminregistryelm editdetailsmodalelm editgiftmodalelm imagemodalelm personalmessagemodalelm sendinvitesmodalelm homeelm findregistrymodalelm signinmodalelm guestelm guestregistryelm crossmodalelm uncrossmodalelm apielm dateelm flashelm giftelm modalelm file owns model type exception view helper function flashelm modalelm wrote view admin home guest using browserelement rather browserapplication could mounted serverrendered page like react version especially important homepage content serverside rendered interactive function use elm standard elm architecture stuff every page model type view update function model initialized via elm flag json written html server elm initialized javascript follows var guestapp elmguestinit node documentgetelementbyid registry flag registry registry gift gift initialmessage sessionmessage null initialerror sessionerror null function reporterror message consolelog error reported elm message ravencapturemessage message send sentry guestappportsreportguesterrorsubscribe reporterror turn thing reporterror used decoding initial flag payload messed json json decoder somehow get reported via sentry error handled gracefully inside elm guest view first page built guest view guestelm standard elm modelviewupdate structure important model type alias model registry guestregistry gift list gift defaultimageurl string viewasguest bool flash flash modal modal flashing message error top screen type flash flashnone flashsuccess string bool flasherror string bool popopen modal crossing gift uncrossing type modal modalnone modalcross crossmodalmodel modaluncross uncrossmodalmodel render main part page basic guestregistry info list gift couple setting passed via serverrendered html template also flash message modal usually visible modal first tricky thing figure organize modal first everything inline toplevel file eg guestelm two modal guest view would okay unwieldy admin view five different modal large number field example model editgift modal admin view type alias model id int category string name string detail string url string price string quantity string currencysymbol string registryslug string numbought int gift list gift defaultcategories list string showingdeletequestion bool previouscategory maybe string nameerror maybe string categoryerror maybe string quantityerror maybe string priceerror maybe string want field toplevel model moved modal different file model type view work well easily forward message modal viewmodal modal html msg viewmodal modal case modal modalnone text modalcross model htmlmap crossmodalmsg crossmodalview model modaluncross model htmlmap uncrossmodalmsg uncrossmodalview model command using cmdmap translate modal command toplevel command pas elm runtime le obvious pas data action back modal top level example modal closed looking around web browsing forum decided use effect additional type modal update function return telling top level app modal update look like update msg model model cmd msg effect update msg model case msg couplenamechanged value model couplename value cmdnone noeffect closerequested model cmdnone closed like regular elm update function return new model cmd also return effect case return noeffect need communicate parent return effect like closed indicate user closed modal drawback forwarding effect passing fair number line boilerplate modal elm pro better idea structure kind thing love hear json decoding json decoding elm somewhat tricky converting freeform javascript object complete null wellformed elm type case mismatch backend serf admin registry json elm represents backend give flat javascript object bunch nullable field admin registry one four state defined type elm type adminregistry temp basic initial state temporary registry saved basic detail saved paid basic detail paid passed basic detail wedding date passed type alias basic slug string imageurl maybe string personalmessage string showhowitworks bool currency string currencysymbol string price int priceformatted string type alias detail groomfirst string groomlast string bridefirst string bridelast string email string weddingdate string decode flat json object though json state field first decode determine type looking andthen decode part full decoder decoder decodedecoder adminregistry decoder decodefield state decodestring decodeandthen state case state temp decodemap temp basicsdecoder saved saved basicsdecoder detailsdecoder paid paid basicsdecoder detailsdecoder passed passed basicsdecoder detailsdecoder decodefail unknown registry state state basicsdecoder decodedecoder basic basicsdecoder basic field slug string field imageurl nullable string field personalmessage string field showhowitworks bool field currency string field currencysymbol string field price int field priceformatted string detailsdecoder decodedecoder detail detailsdecoder detail field groomfirstname string field groomlastname string field bridefirstname string field bridelastname string field email string field weddingdate string number bundle size first great news elm bundle size much smaller react one react minified minifiedgzipped elm minified minifiedgzipped huge reduction le third size faster download faster parse drain le battery elm small asset size real selling point comparison point react realworld example app bundle size minified minifedgzipped elm equivalent minified minifiedgzipped line code contrast source code significantly bigger react nonblank line code elm nonblank line code surprised though surprised much comparison realworld example apps react nonblank line elm nonblank line reasonml nonblank line note similarity size reason another statically typed language number reason elm code verbose type definition type union field record definition separate line total module import line elmformat often put exposing name separate line also react version single file import together account total line json encoding decoding javascript write code account estimated total line let line keywords take line total modal message passing boilerplate described probably another couple hundred line simply wrapping line react codebase often used long line component bunch prop elm tended wrap onto multiple line readability elmformat used elmformat source code like gofmt style promise tool particularly verbose seems love vertical space think tradeoff worth happy let go conciseness gain reliability performance sorry disappoint lack number see need performance testing optimization giftyweddingscom simple app need high performance focus port speed measure seems bit faster truth plenty fast react looked using htmlkeyed htmllazy fast enough decided bother react version used key shouldcomponentupdate override read elm fast outofthebox performance loved elm part really loved coding elm highlight tooling elm command great simplicity speed allinone usage reminds go command use compile single file install new package start repl build project compiler fast produce nice error message example get mistype field type mismatch elmappeditdetailsmodalelm model record email field model email value cmdnone noeffect usually typo model field similar email string emailerror maybe string maybe email email one aspect tooling supersimple deployment use elm make build uglifyjs minify upload resulting j file cdn figuring babel presets fighting webpack configs package install package type elm install elmtime downloads latest version package dependency lock version add elmjson dependency list react version packagelockjson list nondev dependency somewhat allergic dependency explicitly pull except react reactdom wrote react pleased see latest version react reactdom pull dependency develop mediumsized application elm needed following dependency note elm builtin package direct noredinkelmjsondecodepipeline elmbrowser elmcore elmhtml elmhttp elmjson elmregex elmtime elmurl elmcommunitylistextra indirect elmbytes elmfile elmvirtualdom type system elm strong static typing provides lot guarantee especially define type match problem course null undefined instead use optionals like maybe int even better custom type exactly name state application javascript often use string represent message type state etc stringly typed elm make custom type get lot compiler check free compiler tell missed branch case statement complains try misuse type tell parameter forgotten etc one huge advantage make refactoring safe change restructure type used one part program follow compiler tell fix almost always program compiled worked occasionally fight compiler minute usually guided back success ergonomics simplicity lot work gone design elm language standard library thing work well together liked various elmcore package particularly liked elmhttp package example apisignin function signin name password msg httppost url apisignin body formbody name name password password expect httpexpectjson msg signindecoder signindecoder decodefield slug decodenullable decodestring however couple exception notably difficult json decoding date handling discussed could improved documentation tutorial great get past basic lot tutorial go build real app help structure larger app would good point downloaded elmspaexample learned number thing almost complex found bit hard get much package documentation good problem constantly landing outofdate documentation like elmlangjson instead elmjson first idea looking wrong version figured used elm package nice clear structure top doc belonged elm old result show prominently google documentation vague example listfiltermap say filter certain value extent formal documentation example helpful think example substitute thorough documentation also think would beneficial function addition type signature meaningful list argument name current listfiltermap documentation filtermap maybe b list list b filter certain value example could filtermap maybe b list list b filtermap convertfn input filter value input list convertfn return none value return b include output list example another couple example string module stringlength say merely get length string number byte encoding number unicode codepoints number word stringtoint say try convert string int failing improperly formatted string helpfully provides couple example range proper formatting whitespace allowed either side leading zero okay leading plus sign additionally detail elm language sparse guide community faq syntax summary thorough language documentation specification learning go would regularly refer spec see specific operator syntax worked detail talking formal spec formal grammar detailed documentation language maybe something like exists elm find many case example would helpful starting use subscription certain point wanted able subscribe multiple subscription subbatch seemed related wanted also sounded bit weird batch subscription end tried worked example would nice cmdmap documentation example ended using modal kind guess also vague transform message produced command elmformat go go fmt user really like concept elmformat leadingcomma thing still seems cutesy got really like huge amount vertical space introduced example snippet elm v javascript code elm nonblank line total numleft giftnumleft modelgift itorsome numleft else javascript line var numleft giftnumleft propsgift var itorsome numleft think way elmformat always wrap else onto four line bit patronizing especially blank line else another example case statement sometimes trivial mapping one thing another elmformat force line per branch example parsemonth month case stringtolower stringslice month jan timejan feb timefeb mar timemar nothing seems much sensible use third number line parsemonth month case stringtolower stringslice month jan timejan feb timefeb mar timemar nothing json decoding first weird moment json decoding fact count field use correct decodemapn variant feel hokey go field need pull external library noredinkelmjsondecodepipeline date handling another significant gap lack good date library elmtime library decent support timestamps converting humanreadable value however date type needed represent couple wedding date looked around bit party library felt bit heavy wrote simple module opaque date type follows type date date year int month timemonth day int wrote parse format function go along parse already nice regexes parsing date sep sep form reused javascript version though realize using elmparser would idiomatic format function relatively simple give formatting style date return string type style monddyyyy ddmonyyyy yyyymmdd format style date string format style date date let month monthabbr eg sep monthinfo datemonth case style monddyyyy monthabbr stringfromint dateday stringfromint dateyear ddmonyyyy stringfromint dateday monthabbr stringfromint dateyear yyyymmdd stringpadleft stringfromint dateyear stringpadleft stringfromint month stringpadleft stringfromint dateday would nice write much parse format date convert really agree elm philosophy fewer better module overall extremely happy turned creating gifty wedding scratch today choose elm know language deep level yet mean feel needed explore every nook cranny get project built also recommend watching talk evan czaplicki elm creator give idea elm community think video really good love speed simplicity philosophy elm recommend trying frontend project near even blog post use elm work
50,Lobsters,elm,Elm programming,State of Elm 2018 Results,https://www.brianthicks.com/post/2018/12/26/state-of-elm-2018-results/,state elm result,state elm result permalink reading data elmweeklynl use elm rofrolawesomeelmgamedev rofrolelmgames advent code project euler use elm elmui elmwebpackstarter elmwebpackloader kakoune released,state elm result published december minute read permalink state elm survey take pulse elm community experience newcomer learning decent pace company elm production year survey ran end janary beginning march collected response last year survey ended scrubbed field question make sure good data reduced five question tag performed analysis know long wait thank patience people checked asked could help let get going reading data year got response last year mean left raw count instead converting percentage introduce much error comparing directly want last year response year except map question number available hover bar would liked embed without hovering figure faceted plot vegalite multiplechoice answer number add people use elm work side project consider together peple respondent using elm capacity using elm work cool fun see change hope number increase year many people answering experience whatsoever roughly shape distribution year last year question designed get idea confident people using elm think may redesigned next year since past two year revealed anything useful people click middle scale difference yearoveryear pretty significant survey design respondent difference last year asked language coming year asked programming language elm familiar new language clarified intent question use next meant got lot response upshot language compared yearoveryear except people top language javascript really surprising least surprising change year blog post top list new category year elm discourse new category came existence survey published replaced elmdiscuss mailing list number respondent elm weekly newsletter dropped since stopped published back though sign elmweeklynl elm rewritten list goto learning resource interactive resource elm slack stackoverflow reddit thread book like elm action programming elm json survival kit respondent elm user group near fantastic show citylevel view respondent hotspot san francisco bay area london oslo berlin data organized country viewed way united state dominates list told eu country plus uk respondent u use elm sure gaming dropped last year sure picked year curious kind game people writing asked folk gamedev elm slack pointed rofrolawesomeelmgamedev nice overview rofrolelmgames comprehensive list game elm enjoy note web development tried hard could avoid situation people answered careful tagging try figure exactly people elm web development exactly helpful answer result category dropped way year overall people using elm longer time make sense since people using elm one year likely use another another note sorry messiness chart used vegalite could figure get facet order properly vegalite expert want help fix get touch people use elm work tend get production hooray work project elm mostly closed source see response work project opensource interesting note permissive license like compiler package licensed popular sharealike license like gpl highest response buyin thing like bos approve peer like functional language typed language lead second answered item elm language ml family unfamiliar especially people mostly come cstyle language background think rest item stem two contrast far along work project much easier start side project much harder finish usually external deadline project manager asking update make sense em rate project development would higher see elm compiler opensource elm library licensed fall top category pretty selfexplanatory people lot time side project lessening learning cost tip try challenge like advent code project euler provide framework trying new language small welldefined problem survey ran mean need looking usage v prior happily usage old version fell current version rose hope see similar trend next year adoption use elm last year data showed people generally favor using elmformat year effect even stronger people heard elmformat amount people prefer use rose people using plain cs people integrating elm larger existing codebases somewhat unsurprisingly first two elm library used elmcss styleelements elmui great option styling elm apps typesafe way people use webpack build elm application kind unsurprising given support elmwebpackstarter elmwebpackloader surprising see second two result elmmake elmreactor curious mean people application delivered built overall vscode surprisingly popular previously question like would expected see atom top followed one vim emacs nearly happened really surprised see atom third place one editor fell list fewer people answered curious wrote part post got really interesting idea selection interested text editor maybe check people use external javascript library thing like aws sdk common next common localstorage file came third curious see hold next year elmfiles elmbytes released almost use v use thing would expect tell split testing roughly people test elm application useful quetsion retrospect could simpler test elm project enlightening people write test mostly faced complex function whose behavior compiler check write test especially avoid logical error changing value incompatible way got big peak top functional something lot people want try happy similar thing going type glad people exploring area found really rewarding third fourth response runtime exception javascript line expected question thing really painful language like javascript elm commonlylisted alternative people want find solution pain help grow elm community nb looooong tail cut including item occurred response note question getting data difficult timeconsuming since distill nearly plain text input smallish number tag presentation mean tag completely change yearoveryear depending people type may always accurate tried minimize error wherever possible still completely humandriven process said find particularly valuable pulse people feeling yearoveryear probably always survey year slightly people trouble json decoder learning curve flip spot yearoveryear people also notably le trouble interop year problem documentation find encouraging respondent much problem scaling year mean grown elm codebases way think bigger picture instead hmm maybe mean see big drop people explicitly requesting type class form interface total number request type system feature remains unchanged usual culprit question people like error message type course saw big jump people saying thing like compiles work year year also saw big jump refactoring think support point people trouble scaling elm apps since grown advanced another big change drop javascript response decrease hope longterm elm seen something good right refuge people bad experience javascript kind drop encourages lot response saying thing like elm make better programmer elm improved way think work addition make better programmer tagged confidence roughly doubled response year really nice tag
51,Lobsters,elm,Elm programming,Elm and why it’s not quite ready yet,https://blog.bitsrc.io/elm-and-why-its-not-quite-ready-yet-2c516a81e252,elm quite ready yet,elm quite ready yet elm ever ready disclaimer elm slightlysmaller bundle size faster render time tip bit github using elm blog post discord company utilising beam great effect good bad debugging look awful largely unhelpful install elm package anywhere official package repository packageelmlangorg tutorial example online date due doc incomplete elm core development life walled garden touch even wanted baked right language source code reddit post pull request open year runtime error happen missing key feature lack ecosystem sibling biggest problem conclusion,elm quite ready yetwill elm ever ready photo jorge franco unsplash know probably point article going talk elm could going tell todaydisclaimer article comprised view alone employer colleague publicationswhat elm elm functional language compiles javascript think competitor react vue used create website web appselm promise run time exception null undefined function us type inference detect corner case help user issue might beone biggest feature elm also come built robust type system compiler help development need typescript actual type code must adhere toit slouch come performance either comparing react vue seems produce slightlysmaller bundle size faster render time metric gathered trust source elm feel slow meanstip share sync component across apps build faster use tool like bit github share existing component reusable collection try itcomponents bit easily share reuse sync across projectswhy using elm workplace use elixir functional language might heard built beam erlang vm picking fair amount traction many tech team ruby shop particular starting adopt due elegant syntax powerful functional feature natural talent highly concurrent realtime system go beauty elixir quickly becoming one favourite language code like hear take look blog post discord read company utilising beam great effectdue functional nature elm felt right home many developer team due background fondness functional programming hatred oo niche language still state infancy aware may teething issue deal team felt potential problem worth outofthebox feature elm provided type system oneway data flow model already using elixir fairly niche go bleeding edge tech stack currently using elm production build dynamic frontend feature admin page new employer job application submission appthe goodlet get clear first working elm bad brief highlight refactoring breeze due strict typing compiled aspectthe compiler helpful work time help point right direction partimmutability unidirectional data flow baked right think reduxfunctional design currying make functional composition nice work withstyling system based modern cs j approach see styledcomponents mostly need write front end test badbut elm rose seems great paper found developing real production system issue biggest pain point brief time elm date debugging look awful largely unhelpfulelm version consolelog use debug statement print whatever want without writing perfect code elm allow side effect meaning write code return used main execution path okay stick debuglog front code update model right way pretty print look something like show apprenticeshipqualification qualification id name project manager level id name user skill level id name digital marketer level id name assistant accountant level id name customer service practitioner level id name software developer level basicserrors companyid date nothing datepicker datepicker focused rd forceopen false inputtext nothing open false today rd duration goodcandidateerrors goodcandidaterequirements hiringmanagers employeeid firstname dorian lastname bahringer employeeid firstname felipe lastname jacobi hiringprocesserrors salary selectedhiringmanagers dictfromlist shortintroductionerrors trainingprovider company typicaldayerrors url fragment nothing host localhost path appbasics port protocol http query nothing internals elm debugger imagine redux devtools work app use using certain message type think redux action reactland cause debugger throw upyou install elm package anywhere official package repositoryimagine package want use requires pr improve slightly tweak fix functionality say maintainer replying merge outstanding pull request elm unable fork host version github without also publishing entirely new package packageelmlangorg tutorial example online date due last month writing elm unable find clear concise answer seemingly simple question follow along clear example due date happen language yes currently case elmthe doc incompleteagain fine expected given new language yet harkens back original point ready yet new application recently built company elm requirement singlepageapplication routingi followed along official doc implementing client side routing started adding thing made sense app found greatelm core development life walled garden touch even wanted tostarting one except access elmlang elmexplorations github account write native code even private use even exploration unless evan creator give repo native code want upgrade fork compiler remove restrictionphoto jason blackeye unsplash see baked right language source codethis lead vast amount community wondering elm going flourish fumble whilst personally direct issue yet agree fundamental principle language built consumedtaken directly reddit post discussing user continue use elm worth prefer language whose design approach rooted inherent distrust userspull request open yearsruntime error happenthis one shocked check time whilst working feature discovered elm despite promise runtime errorsi handling click event selecting checkbox expecting tuple sent model compiled error ran app clicked box gave big ol undecipherable javascript runtime error felt like lied tomissing key featuresat time writing elm implementation server side rendering web socket localstoragelacks ecosystem siblingsa major point overstated using tried tested front end system like react vue mean get access extremely large library high quality package tool community supporti go mass detail largely adoption time around want see checkout thing minimal implementation thanks score opensource developer compare elm equivalent biggest problemwhat one core thing developer tech shop entrepreneur looking help stand crowd even survive iterate quicklycan elm help yes established type application basic app scaffolding quite fast iterate feature oneway data flow great great redux inspired compiler help debug refactor relative ease type system quite expressive opinion accelerate steep plateau thing start slow downwhat want service worker app offline support want localstorage server side rendering want transparency going future language using small extract enaqxawesomereact githubyes elm quite bit quite well current inability provide stable documentation key feature lack developer transparency lack opinion fundamental feature like ssr mean ready could use something battletested like vue react come everything could want option yes likely write test backing solid ecosystem help tackle issue actually come across daytoday work meaning ultimately iterating fasterconclusionyou use elm work part might avoid headache may get frontend solution giving smorgasbord fantastic opensource readytouse package key feature like server side rendering yes know googlebot par j thousand tutorial large thriving passionate community complete robust documentation yes may write test really writing business logic test anyway saying people adopt new technology love playing new language paradigm elm quite interesting get know contrary promise think currently fastest safest option sometimes matter
52,Lobsters,elm,Elm programming,Improving Elm's compiler output,https://dev.to/skinney/improving-elm-s-compiler-output-5e1h,improving elm compiler output,hidden class github elm europe inlining currying conclusion reading whats monomorphism kind,elm fast innovation compiler fact elm compiler hardly optimization elm fast compiles javascript dedicated talented engineer globe optimizing decade question elm compiler output javascript make easy browser optimize performance gain changing compiler output javascript let look hidden class javascript dynamic language javascript allows object change shape time variable data structure contain different value different type time practice however program fairly static browser try take advantage chrome every object literal class seen shape shape object class change like property dynamicly added removed chrome see resultant new shape try convert case chrome treat object hashmaps kinda like elm dict trouble figuring precise shape something call shape hidden class get best performance javascript code nt seem deal many different shape time fortunately elm static language pretty common however case elm produce different shape pas type let look example type maybe nothing elm maybe defined compiled following javascript using optimized var elm core maybe function return var elm core maybe nothing see javascript object literal nothing different shape result every javascript code deal maybe able deal two different shape costly measure effect done two thing make benchmark hopefully pick performance difference make two version one handcoded avoid overhead look assembly code node output node chrome us j engine find code experiment github focused elm builtin list type used pretty much every program performance improvement would big benefit everyone us elm focusing following benchmark benchmark int foldl intlist simply left fold element adding together change performance tell u quickly iterate list theory removing overhead dealing multiple hidden class increase performance compile benchmark looking compiled j output find piece code var listnil function listcons hd tl return hd b tl empty list look different list element wondering list work explained decently well elm europe copy j file make following modificaiton var listnil null b null function listcons hd tl return hd b tl list longer polymorphic many shape result firefox modification opssec firefox modification opssec safari modification opssec safari modification opssec chrome modification opssec chrome modification opssec difference safari however chrome firefox see pretty decent improvement firefox chrome keep mind something implemented compiler elm code would change performance improvement effort part application developer also look code generates running following script node printoptcode codecomments indexjs jitlog reading jitlog benchmark run without modification see optimized code optimizationid sourceposition kind optimizedfunction name list foldl stackslots compiler turbofan address body size instruction size assembly code modified code see optimized code optimizationid sourceposition kind optimizedfunction name list foldl stackslots compiler turbofan address body size instruction size assembly code expected generated le code code nt deal polymorphism however something log give pause inlined function count sharedfunctioninfo section log list many function inlined case function evaluates passed function inlined explain mean second nt actually surprising foldl contains single function call done per loop function usually never either make sense nt inlined however look function optimized function inlined either function take single argument also called function function called etc give inlining inlining function call replacing function call implementation function one important optimization compiler make necessarily function call expensive allows compiler better understand code perform optimization based let look benchmark benchmark int foldl intlist without inlining would call foldl function loop calling function every element list since foldl accept function would store intermediary number value reference even though could stored number stack performing lookup memory time function called nt storing ints intermediary value would case folding thing javscript optimizer would likely treat value generic hashmap inside foldl inlining however function likely compiled single javascript loop without function call specialized code type actually used loop like getting benefit monomorphising compiler without actually monomorphishing compiler nt many function inlined thing currying elm concept currying given following function add int int int add b b create new function like int int add call function enough argument execute call function without argument requires return new function accepts missing argument add function compiled j function f arity fun wrapper wrappera arity wrapperf fun return wrapper function fun return f fun function return function b return fun b var author project main add function b return b add function well every elm function wrapped object contains original function arity function expects curried function calling function done implemented like function fun b return funa funf b fun b take object call function directly provided function actually take two argument curried call perspective javascript engine big problem unless whole program analysis expensive way know function called called using currying call inlined nothing made elm compiler smarter elm compiler knew many argument function required could rewrite author project main add author project main addf make copy benchmark make change hand every function call benchmark function called benchmark time going focus result following function benchmark map intlist result firefox modification opssec firefox modification opssec safari modification opssec safari modification opssec chrome modification opssec chrome modification opssec pretty good performance firefox doubled seeing improvement chrome safari looking inlining result unmodified code inlined function count sharedfunctioninfo see change modification inlined function count sharedfunctioninfo map sharedfunctioninfo foldr sharedfunctioninfo foldrhelper sharedfunctioninfo sharedfunctioninfo f however looking generated assembly code seeing lot line containing following call callreceiverisnotnullorundefined calling function using someobjectf args chrome make sure someobject nt null undefined run one benchmark time placed function outside f wrapper call directly result firefox modification opssec firefox modification opssec safari modification opssec safari modification opssec chrome modification opssec chrome modification opssec chrome firefox see nice speedup firefox chrome safari actually see slowdown nt know rerunning benchmark several time give wildly different result nt know make conclusion elm fast still room become faster making change elm compiler output javascript increase performance elm program significant margin reading want know chrome make javascript fast two best resource came across whats monomorphism kind
53,Lobsters,elm,Elm programming,From Rails to Elm and Haskell,https://www.youtube.com/watch?v=5CYeZ2kEiOI,rail elm haskell,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature rail elm haskell richard feldman youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature rail elm haskell richard feldman youtube
54,Lobsters,elm,Elm programming,elm-conf 2019 call for speakers is open,https://discourse.elm-lang.org/t/we-want-your-talk-at-elm-conf-2019/3467,elmconf call speaker open,elmconf call speaker speak elmconf page elmconfcfp,back elmconf singleday onetrack conference elm happening september call speaker open today run may returning st louis year strange loop preconference day call speaker open want talk addition feedback round normally get reserving couple spot firsttime speaker went well last year full detail speak elmconf page last year year site made elm talk submission functionality also made using elm along postgraphile elmgraphql see backend elmconfcfp frontend
55,Lobsters,elm,Elm programming,Philip2: An Elm-to-OCaml compiler,https://medium.com/@paulbiggar/philip2-an-elm-to-reasonml-compiler-a210aaa6cd04,elmtoocaml compiler,elmtoreasonml compiler dark elm bucklescript elmformat bucklescripttea guide help port project try,elmtoreasonml compilersome cut treesin november dark made decision move elm port frontend bucklescript aka ocaml dba reasonml active development would error prone difficult port manually instead wrote elmtoocaml compiler translate semiautomatically worked get line pronounced feeleapthesecond compiler elm bucklescript par elm using elmformat translates ocaml abstract syntax tree us ocaml compiler print ocaml specifically target bucklescript result play nicely bucklescripttea elm architecture bucklescriptbucklescript translates ocaml javascript commonly used reasonml ecosystem since elm mostly subset ocaml though different syntax fairly straightforward translate itthe conversion using removed several week gruntwork convert code bucklescript still took several week engineering time finish conversion including guide help port project accept contribution make process easier automated using tool shave week translationwe hope tool useful people looking exit strategy elm well looking try elm worried working outtry
56,Lobsters,elm,Elm programming,Abstraction levels in functional programming,https://tzemanovic.gitlab.io/posts/abstraction-levels-in-functional-programming/,abstraction level functional programming,elm higher kinded parametricity hoogle functor,update december misinterpreted meant implementation inhabitant scratched sentence talked thanks brian teaching learning functional programming challenging many people already experience programming usually different fp concept analogy language sometimes damage good probably heard unlearn stuff starting learn fp delighted see people learning functional programming find effort go making accessible wider audience encouraging think elm great role play fan work brian mckenna haskell front personal favourite stream building sonic haskell recent post higher kinded parametricity made think abstraction role teaching learning fp argument concern functor type class following function confused void type originated algol c found many popular oop language anyone versed haskell basic example functor fundamental building block appears many place le familiar could pose many new challenge upon opening hoogle might find definition functor functor class used type mapped alright functor class class nothing like oop class assuming familiarity concept maybe data type language called optional would happen instead started bottom abstraction ladder worked way haddock tell u example void replaces content maybe int unit unit denoted basic form express purpose function irrelevant parameter maybe int maybe bool maybe introduce parametric polymorphism type starting lower case letter polymorphic meaning put another type place indeed replace int get exactly previous level next could show kind operation maybe type something content common define first parameter accepts function get applied content second argument content use implement void function elm reach ceiling abstraction note elm haskell const named always named list data type would implement data type want use function tedious really complicated haskell void implementation maybe still single inhabitant list stop elm incredibly practical could viable alternative currently prominent web library react reason think exceeds react many front pick elm feel encouraged able build great thing using pure fp haskell course take abstraction another level thanks wonderful concept type class first introduced living legend philip wadler stephen blott way taming adhoc polymorphism go much type class built category theory language mathematics even mathematician struggle abstraction recommend work eugenia cheng explains mathematics category theory accessible earth way following quote come bake pi edible exploration mathematics mathematics moment advanced mathematician sometimes reach abstract limit category theory react much way teenager need x say see point resist abstraction programmer lucky context learning concept type class essential part toolbox possibly find using elm restricting however scary territory newcomer important sympathetic especially teach fp using haskell regardless exclusive choice elm developer get need pursue abstraction definitely circle back haskell purescript anything else advanced type system hopeful elm evolve implement type class future different way learn effectively previous experience affect learning functional programming constructive fp community united common goal teaching fp please share thought
57,Lobsters,elm,Elm programming,Practical Elm now available,https://korban.net/posts/elm/2018-11-28-practical-elm-019-update-published/,practical elm available,practical elm busy developer elm wrote introduction book book cover check sample get book,published elm update book practical elm busy developer update also based latest version elmui elmtest package elm familiar elm would choose many good reason whether goal broaden knowledge find new language use production application goal produce runtime exception relatively easy introduction functional programming statically typed language already use javascript give different perspective dealing state data flow elm package allows write ui code pure elm mostly without thinking htmlcss promising experiment wrote introduction timetravelling debugger something widely available language also experiment different approach building community evolving language starkly different constant churn javascript world least dozen possibly hundred company already using production book still chasm learning basic concept elm using create complex real world application kind release production work could skip frustration figuring thing meandering blog post scant tutorial terse package readmes practical elm busy developer help get point writing elm code feel comfortable writing javascript guide practical task creating application elm building uis styling working json interacting javascript code testing also show power user feature elm beyond basic syntax start benefit elm type system write reliable exceptionfree code one crucial difference elm book practical elm rehash basic easily pick elm guide online resource explaining functional programming great want currying union type want waste time stuff already know book cover focus book practical topic discussion option creating uis styling approach tool preventing finding bug json parsing commonly reported problem elm newcomer face making server request working command j interop port discussion code organisation application grows example integrating rich editor help custom element detailed introduction elmui ui package liberates html cs discussion integrating elm j application indepth look language feature pattern matching tool productive writing elm code check sample get book reader find useful usually find elm documentation web excellent find stuff book directly transferrable realworld task look forward reading saving session id localstorage custom element example thanks lot book find valuable resource finally thanks lot everyone already bought book going read hope find helpful
58,Lobsters,elm,Elm programming,Structured Editing for Elm* in Elm,https://www.youtube.com/watch?v=-TFL6E1uSHE,structured editing elm elm,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature structured editing elm elm ravi chugh youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature structured editing elm elm ravi chugh youtube
59,Lobsters,elm,Elm programming,Elm Weekly newsletter is live again,http://www.elmweekly.nl,elm weekly newsletter live,elm weekly issue,elm weekly issue aug
60,Lobsters,elm,Elm programming,Types in Elm: Decomposition and Ad Hoc Polymorphism,https://sonnym.github.io/2018/11/19/types-in-elm-decomposition-and-ad-hoc-polymorphism/,type elm decomposition ad hoc polymorphism,type elm decomposition ad hoc polymorphism new beginning experience thus far elm ludum dare returning limited extent virtual dom mailbox moved manages effect decomposing message standardmsgelm decomposedmsgelm ad hoc polymorphism ad hoc polymorphism standardtypealiaselm type class way current limitation extensible record polymorphictypealiaselm reductio ad minimum flow guide,type elm decomposition ad hoc polymorphism new beginning since originally learned tried elm lot language changed elm grown distant close several time year encounter pleasant last always ending somewhat abruptly falling bit short recent reunion however feel though language matured point empowered really move forward larger project began several year ago purpose article elucidate topic abundantly clear effectively new elm user build real problem encountered writing real program solution devised address issue technique revolve around compose decompose type make program maintainable move forward specific would like take detour history elm way frame present discussion experience thus far first foray elm december wrote toy program ludum dare since time always admired language enjoyed returning whenever could although limited extent past year language heavily refined focus shifted heavily graphical canvasoriented competing mainstream framework elm share core feature framework make excellent web application development instance making use virtual dom implementation efficiently handling state update elm however also come advantage javascript framework incapable offering type system provides unparalleled level safety also allows dead code elimination far surpasses anything feasible highly dynamic language like javascript release earlier year brought back language extended hiatus experience thus far extremely pleasant last time spent significant time elm able make progress project reasonable complexity ultimately hit wall future direction program started become unclear time signal underlying principle mailbox address allowed u create effect retrospect concise explanation give problem encountered time related managing effect maintaining series reusable action could triggered different way properly factor application quickly became insurmountable hurdle intervening version however elm moved functional reactive programming paradigm perhaps even importantly added runtime manages effect latter point anything given u ability structure program way feel natural easily maintainable writing lot elm past month stumbled upon new entirely tractable problem would like discus decomposing message one problem encountered writing elm application certain size ever expanding update function never really sure properly factor easy separate function branch case statement handle message type still lead extremely unwieldy function right core application logic typically want able split logic perview basis update selfcontained model module view rather top level consider following example designed invoke two simple menu file edit contains number command entirely handled update function primary concern msgtostring function must also keep separate message list able map type variant mildly inconvenient particular bothersome standardmsgelm source import browser import html exposing html import htmlevents event type alias model string type msg filenew fileopen filesave fileprint filequit editundo editredo editcopy editcut editpaste main browsersandbox init update update view view update msg model model update msg model msgtostring msg view model html msg view model htmldiv currentview model listmap button message currentview model html msg currentview model htmldiv htmltext current view model button msg html msg button msg htmlbutton eventsonclick msg htmltext msgtostring msg msgtostring msg string msgtostring msg case msg filenew file new fileopen file open filesave file save fileprint file print filequit file quit editundo edit undo editredo edit redo editcopy edit copy editcut edit cut editpaste edit paste message list msg message filenew fileopen filesave fileprint filequit editundo editredo editcopy editcut editpaste wanted able treat file command edit command separately first may apparent accomplish goal feasible rather simple major change following modify msg type variant take value value separate type specific variant practice look like type msg file filemsg edit editmsg simply define two new filemsg editmsg type contain respective subordinate message following implementation exhibit exact behavior original using file edit variant toplevel msg type act like container filemsg editmsg type respectively also show technique used factor logic common toplevel message decomposedmsgelm source import browser import html exposing html import htmlevents event type alias model string type msg file filemsg edit editmsg type filemsg new open save print quit type editmsg undo redo copy cut paste main browsersandbox init update update view view update msg model model update msg model msgtostring msg view model html msg view model htmldiv currentview model listmap button message currentview model html msg currentview model htmldiv htmltext current view model button msg html msg button msg htmlbutton eventsonclick msg htmltext msgtostring msg msgtostring msg string msgtostring msg case msg file filemsg file filemsgtostring filemsg edit editmsg edit editmsgtostring editmsg filemsgtostring filemsg string filemsgtostring filemsg case filemsg new new open open save save print print quit quit editmsgtostring editmsg string editmsgtostring editmsg case editmsg undo undo redo redo copy copy cut cut paste paste message list msg message file new file open file save file print file quit edit undo edit redo edit copy edit cut edit paste see worked exactly expected already pay dividend small scale becomes even important larger application update function split across many module encapsulate logic specific part application ad hoc polymorphism next technique somehow feel like abusing type system still working entirely within boundary particular going devise way treat different type thing going effectively define method achieving ad hoc polymorphism elm example using hopefully resonate reader simple form control imagine radio button checkboxes lot shared behavior also distinct behavior one allows single selection allows number selection long need mix page easy enough define separately simply map list composing html result afterwards following example example two simple type alias radio checkbox share common label string field differ value field type string list string respectively case would impossible simply allow radio button list value sake argument imagine solution tenable standardtypealiaselm source import browser import html exposing html type alias radio label string selected string type alias checkbox label string selected list string radio list radio radio radio first radio first selection radio second radio second selection checkboxes list checkbox checkboxes checkbox first checkbox first selection one first selection two checkbox second checkbox second selection one second selection two main browsersandbox init update identity view view view html view nothing div listappend listmap radio radio listmap checkbox checkboxes radio radio html msg radio label selected div htmltext label selected checkbox checkbox html msg checkbox label selected div htmltext label stringjoin selected div list html msg html msg div htmldiv need mixture radio checkboxes throughout form something horrifying like firstradio secondradio firstcheckbox secondcheckbox function certainly work simple case much real world really want though able treat radio checkboxes want polymorphic since elm support type class must impossible way work around current limitation also possible leverage type system accomplish something similar technique borrows name eric evan book domaindriven design although take different meaning still worth understanding origin term original definition aside specification predicate determines object satisfy criterion many specification simple case rule complex concept extended allow simple specification combined predicate combined logical operator fundamental pattern stay provides path simpler complex model example instead specification predicate instead function augment type mean able shared behavior base type add additional behavior type reminiscent extensible record also somewhat different start creating single higherorder type control encapsulate shared behavior radio checkboxes specifically label spec field specification type defined way decomposed message first example type acting like box holding specification example radio checkbox type work concrete implementation specification lastly simply need define list control write view function handle modify view function slightly also accept specification polymorphictypealiaselm source import browser import html exposing html type specification radiospec radio checkboxspec checkbox type alias control label string spec specification type alias radio selected string type alias checkbox selected list string control list control control control first radio radiospec radio first selection control first checkbox checkboxspec checkbox first selection one first selection two control second radio radiospec radio second selection control second checkbox checkboxspec checkbox second selection one second selection two main browsersandbox init update identity view view view html view nothing div listmap control control control control html msg control spec ctrl case spec radiospec radiospec radio ctrl radiospec checkboxspec checkboxspec checkbox ctrl checkboxspec radio control radio html msg radio label selected div htmltext label selected checkbox control checkbox html msg checkbox label selected div htmltext label stringjoin selected div list html msg html msg div htmldiv example show found way treat checkboxes radio button simply control practice found extremely useful albeit little strange bit boilerplate defining list control additional type constructor amount little reductio ad minimum two technique significantly simplify certain aspect elm application decomposing message make main update function easer understand glance factoring concern separate function stored separate module using ad hoc polymorphism outlined make possible u combine related set data treat functionally equivalent could probably abused reasonable situation appears safe technique deploy one thing often struggle writing elm making largescale change type one way type flow application one nicest aspect working elm greatly simplifying refactors compiler identifying helping fix mistake flow type cascading effect experimental change difficult untangle case solution construct example reduced bare minimum moving part example article exactly result inability concretely understand accomplish goal real application resorting scratch pad work conceptually arrive concrete implementation able apply actual problem often recourse trimming away much nonessential information possible help understand issue hand conclusion want reinforce better time try elm guide great resource perfect place start nov
61,Lobsters,elm,Elm programming,elm-ui: Forget CSS and enjoy creating UIs in pure Elm,https://korban.net/posts/elm/2019-11-17-elm-ui-introduction/,elmui forget cs enjoy creating uis pure elm,making start filling channel list message like seen elmui far practical elm check next step elmui documentation elmui http building toolkit design,creating uis cs rarely straightforward expect week ago wanted make navigation site responsive switch row link hamburger slideout menu seems like reasonable thing cs right really often happens tried reasonable thing work started searching solution involved javascript finally found solution cssonly spent couple hour trying different combination style get mostly work context site many time find something totally reasonable simple cs find getting derailed bizarre way maybe text align vertically seem get width element right style added seem effect seems common experience cs excited elm package called elmui goal allow build uis pure elm html cs generated behind scene approach taken elmui based four idea getting compiler verify much layout styling possible defining elm code enabling reuse refactoring capability elm ui code simplified approach style particular layout style specified locally element context independence element attribute expected behave regardless surrounding context often case cs elmui layout visual styling done within view function gross morphology layout made explicit function exposed package style attribute specified element layout making start see elmui action let implement simplified version slack ui first let initialise project elm init elm install mdgriffithelmui let make smallest increment towards layout module main exposing main import element exposing import elementbackground background import elementborder border import elementevents exposing import elementfont font import elementinput input import html exposing html channelpanel element msg channelpanel column height fill width fillportion backgroundcolor fontcolor text channel chatpanel element msg chatpanel column height fill width fillportion text chat main html msg main layout row height fill width fill channelpanel chatpanel page produced code enough code demonstrate main concept elmui main used layout function main purpose convert element msg return type elmui layout function html msg need use browser function like browserdocument since two panel side side channel left chat message right used row function arranges child element row first argument function list attribute used height fill width fill make fill height width viewport also used couple attribute visual styling backgroundcolor fontcolor second argument list child case channelpanel chatpanel notice definition channelpanel chatpanel similar except used column function since child element arranged vertically need fill full height parent element far width go allocated part total width channel list part chat using fillportion finally specified background font color channel panel simple right combining row column fashion surprisingly versatile although layout function offer filling channel list next let show list channel highlighting active channel implement channelpanel list string string element msg channelpanel channel activechannel let activechannelattrs backgroundcolor fontbold channelattrs paddingxy width fill channelel channel el channel activechannel activechannelattrs channelattrs else channelattrs text channel column height fill width fillportion paddingxy backgroundcolor fontcolor listmap channelel channel main component function channelel let use el generic element basic building block elmui kind like div html specify different attribute based whether channel active channel function mapped list channel next start filling part content area corresponding code look like chatpanel string element msg chatpanel channel let header row width fill paddingxy borderwidtheach bottom top left right bordercolor el text channel inputbutton padding alignright borderwidth borderrounded bordercolor onpress nothing label text search messagepanel column footer el alignbottom padding width fill row spacingxy width fill borderwidth borderrounded bordercolor el padding borderwidtheach right left top bottom bordercolor mouseover backgroundcolor text el backgroundcolor none column height fill width fillportion header messagepanel footer first glance might look like lot code however note really straightforward simply layout styling attribute bottom function clearly stated vertically arranged header message footer definition header footer readable conceptually simple still combining row column sprinkling padding spacing plus visual styling like colour way elmui away rather troublesome concept margin padding found cs instead specify internal padding element also specify spacing child element find much intuitive needed attach footer bottom give alignbottom attribute message last thing need implement message panel want take available screen space scroll message fit screen make chatpanel take list message argument flesh messagepanel let clause type alias message author string time string text string chatpanel string list message element msg chatpanel channel message let header messageentry message column width fill spacingxy row spacingxy el fontbold text messageauthor text messagetime paragraph text messagetext messagepanel column padding spacingxy scrollbary listmap messageentry message footer column height fill width fillportion header messagepanel footer defining messageentry used new function called paragraph function lay child wrapped inline element case one child message text still need wrap also note column messagepanel scrollbary attribute prevents pushing footer beyond bottom edge viewport one change required constrain whole layout viewport rather message extend past fold top level layout need height fill attribute main html msg main layout height fill row height fill width fill channelpanel samplechannels sampleactivechannel chatpanel sampleactivechannel samplemessages whole thing line code bad nontrivial layout clear code boot html cs sight far implementing go thing stymied short making message scroll without pushing footer found rest layout straightforward convert code rather unlike experience cs think great strength elmui like seen elmui far book practical elm walk building sample application using elmui also demonstrate possible approach implementing ui html package elmcss elmbootstrap check next step encourage try package documentation elmui documentation dedicated channel elmui elm slack elmui see full code post ellie http need widen output pane see whole layout unless large screen try making small change layout ellie could rightalign channel name could move channel name centre header area could add user icon message also matthew griffith gave talk motivation creating elmui difficulty cs might find interesting building toolkit design
62,Lobsters,elm,Elm programming,Bringing Elm’s architecture to Rust and Webassembly,https://sindrejohansen.no/blog/willow/rust/elm/2018/11/16/willow-elm-in-rust.html,bringing elm architecture rust webassembly,http githubcomsindreijwillow idea implementation websys jssys wasmbindgen htmlmap conclusion counter todomvc elmtodomvc,tl dr see http githubcomsindreijwillow really like elm delightful language amazing ecosystem interesting architecture called tea elm architecture tea elm separable one thing without make elm pleasure use tea also inspiration redux used handle state react ecosystem another language like rust paper rust completely different elm using seen resemblance great type system make easier refactor give runtime exception similar support tagged union pattern matching handle error using sumtype result easy see inspired similar set language big difference elm compiles j rust compiles machine code main goal elm writing frontend run browser rust run natively primarily meant used server native code recently something brewing called webassembly wasm short compile target make possible run rust c c lot language browser rust support compiling wasm last month support become really great rust team created amazing tool make using rust wasm breeze idea used elm rust something wanted try would possible create elm architecture rust basic elm app excluding import type msg increment decrement type alias model counter int update msg model model update msg model case msg increment model counter modelcounter decrement model counter modelcounter view model html msg view model div button onclick increment text div text stringfromint modelcounter button onclick decrement text main program model msg main browsersandbox init model update update view view msg action type elm event elm creates one message update function take message model return new model view function take model return html render last mainfunction connects everything try translate rust become something like derive debug clone partialeq eq pub enum msg increment decrement derive debug clone pub struct model counter fn update msg msg model mut model match msg msg increment modelcounter msg decrement modelcounter fn view model model html msg div button onclick msg increment text div text modelcountertostring button onclick msg decrement text pub fn main program model msg program new view update init model counter compilable rust code using project render run exactly elm code try note much rust code resembles elm code msg translated elm type rust enum apart different name syntax exactly model becoming rust struct largest change update function rust builtin support immutable structure instead mutate model rust powerful borrow system mean control model mutable meaning change updatefunction example viewfunction therefore think using mutation mean le safe elm code last main function return program model msg closely resembling program model msg returned main function elm app interesting degree type work look implementation formulated idea written code started implementation first iteration rendered html dom added event message needed update dom first virtual diffing deleted whole dom recreated new html later added real domdiffing algorithm writing possible without writing javascriptcode thanks websys jssys crate build wasmbindgen enough render todomvc application anything probably mean miss something example function html html b like elm htmlmap conclusion experiment see far rust come web development think show come really far hope inspire someone create next awesome webframework using rust one day use rust write webapps dayjob written two example using willow counter code todomvc todomvc manually converted evan elmtodomvc found spelling mistake feel free correct
63,Lobsters,elm,Elm programming,Working with Files,https://elm-lang.org/blog/working-with-files,working file,,
64,Lobsters,elm,Elm programming,The Hard Parts of Open Source,https://www.youtube.com/watch?v=o_4EX4dPppA,hard part open source,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hard part open source evan czaplicki youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hard part open source evan czaplicki youtube
65,Lobsters,elm,Elm programming,An Elm compiler for the Erlang Virtual Machine,https://kofi.sexy/blog/elm-beam,elm compiler erlang virtual machine,project github background website roadmap writeup go lua erlang hard part supporting domain compiler making good ecosystem putting typed functional language domain mean fun productive practice project overview codecbeam building project erlang virtual machine documentation elm process module elm mean javascript interop otp genserver design implication allows incrementally introduce elm erlangelixir system generating beam codecbeam getting beam without going erlang core erlang beam best elm roadmap writeup love hear elm slack,exploring idea elm compiler produce assembly erlang virtual machine find code project github essay document interesting part project background according website elm delightful language reliable webapps huge fan language goal encourage give try elm helped enjoy writing frontend code many community share experience elm ecosystem focused frontend webapp domain domain focus much make elm tooling documentation community largely coalesce around goal experience elm produce particular effect many folk heard called xisgreatsoweshouldusexeverywhere effect large part small community excited idea elm server though phrase likely mean different thing different people enjoy elm author responds idea roadmap writeup many folk tell elm compile x x thing like people suggesting go lua go ocaml c java scala f haskell c rust nodejs hard part supporting domain compiler making good ecosystem python nice scientific computing thing like numpy scipy whatever backend elm nice frontend ecosystem like html library elm architecture particular code generation putting typed functional language domain mean fun productive practice writing compiler backend like take make project like worthwhile echo idea completely project discussed elm server suggested direction elm team instead fun exploration compiler code generation excited share others perhaps work help someone interested building delightful language reliable web server project overview tree elmcompiler git submodule elm compiler src elmbeam bridge submodule src generate codegen module mainhs elmbeam haskell project major dependency elm compiler beam codegen library wrote called codecbeam integration elm compiler bit untraditional cabal file point file project file git submodule building project result executable take elm file produce file called elmbeam erlang virtual machine many way elm match semantics erlang elixir language feature immutable data structure pattern matching lambda function however similarity run even implementation elm runtime quote documentation elm process module right library pretty sparse example public api process communicate really important ability also something extraordinarily easy get wrong think trend towards erlang style concurrency every process event queue anyone send message internally elm runtime built upon process message seems implementation explicitly inspired erlang design elm programmer recognize design use port elm mean javascript interop order communicate javascript elm application send message much like interprocess communication erlang sending message appportsfromjssend x elm javascript apppid x erlang erlang receiving message appportstojssubscribe x f x elm javascript receive x f x end erlang erlang elmbeam embrace similarity compiled elm application beam module defines otp genserver starting genserver communicating us erlang function standard library see function action following demo genserver design implication since elmbeam commits genserver protocol elmwritten module exist within supervision tree may exciting aspect exploration imagine team spent several year writing software erlangelixir ecosystem time organization developed tooling workflow around erlang virtual machine interested exploring static type offer must forfeit tooling workflow try design project thus far suggests answer hypothetical concern elmbeam allows incrementally introduce elm erlangelixir system elmwritten genserver act like erlangelixirwritten genserver living inside supervision tree application generating beam elmbeam written haskell elm compiler written haskell erlang compiler however written erlang erlang toolchain expose api compiler program must written erlang order make use project decided generate beam file created codecbeam library assembling syntactically valid beam file though elmbeam experiment plan continue supporting codecbeam excited see haskell programmer use create compiletobeam language interested learning codecbeam please refer talk getting beam without going erlang previous version elmbeam compiled erlang intermediate form called core erlang could use erlc fromcore compile core file beam file decided experience would much nicer could generate beam abandoned direction like learn time core erlang please refer blog post core erlang beam best elm fact elm author suggests much aforementioned roadmap writeup ultimately ideal form project like bespoke backend going assembly directly agree many way going beam shortcut similarity erlang elm mean elm fit beam language elm certainly better instance elmspecific garbage collector could use precise strategy erlang natural difference language withwithout exhaustive type information compiletime erlang platform includes native compiler called high performance erlang hipe hipe read beam module produce native program generally run faster vminterpreted counterpart existence hipe support going assembly elm compiler exhaustive type information compiletime elm could create faster densely packed program beam even allows point feel like work elmbeam come end satisfied result exploration ready continue project hopefully found value idea love hear interested continuing exploration join u elmbeam channel elm slack finally want express sincerest admiration project referenced elm erlang particular language large project tend take granted thanks folk involved project spend time energy creating awesome tool use free
66,Lobsters,elm,Elm programming,Elm 0.19 Broke Us,https://dev.to/kspeakman/elm-019-broke-us--khn,elm broke u,release note post post native module back march know community elm community really nice general preemptively lock control keep using monkey patch wait elm fork wait elm solidify switch something else conclusion,elm released yesterday significant number breaking change every level configuration tooling library language post primarily edit elm provides upgrade tool autofix many thing team release broke heart two change placed proverbial straw broke camel back removal custom operator native module first saw removal custom operator posted reaction removal native module mentioned release note nt find today happened think search turned post post native module back march know community disconnected participating elm community little back nt say much time share reason love elm platform use decided way community managed frustrating tone firmly set way elm github issue managed many locked prevent disagreeable feedback personal item blessed contributor even though public post issue likely get smacked hand thing properly properly mean rigorous sscce bug participating gladiator arena public forum ideasrequestssuggestions forget thing went extra extra mile trusted contributor say gladiator arena elm community really nice general especially helping newcomer however people ruler ready smack hand enforce whatever evan creator elm said said chance high posting idea feedback forum result chided turn justifies agreement post among community ignored go post forum first rule effective way ignore feedback apparently since elm forum moved edit reddit discourse thread locked mod know evan nt want hear disagreement particular issue may preemptively lock post might surface end feel like bdfl taken little seriously appreciated product mostly stayed away community nt happen catch post telegraphing change fair bad experience fault observed pattern unwelcomeness elm old github google group many time onlooker nt way project worked control removal custom operator ostensibly good elm however post explaining reasoning behind removal estimated user several reason using common language task chaining parsing end specific custom operator blessed evan allowed remain exception rule whatever ordinary elm user think valid custom operator use case bad elm okay theoretically still inject native module monkey patching javascript right however dead code elimination monkey patching could bit difficult unless turn optimization real kicker native module still reserved elm contributor rest u access expert feature apparently total line native code use completely break elm community even though reasonable way need okay minor indicative evan posted many time telling user change way talk think elm fair point nice valid point still indicative example nt use word component nt say native say kernel instead union type called custom type nt dare respond one post always closing section instructing acceptable reply reply okay considering picture forming u expect overbearingly micromanaged elm user feedback well disagreement welcome considered even decisive voluminous like native module evan decides nt like something see elm user even credibility similar language like custom operator get disabled next release way highway despite amazing thing elm u intense behavior toolchain really situation team want way see option keep using major issue could avoid broken thing pointed changelog like array however long term strategy seems unlikely ever see another bugfix old version tool like create elm app eventually stop maintained meanwhile computer science web advance monkey patch dead code elimination putting formerly native code monkey patching unknown deeper issue moving still place feeling unstable future toolchain wait elm fork lot tree name probably still available ie acacia poplar etc unfortunately resource maintain fork seems likely somebody draw similar conclusion u place want create one even path lot unknown wait elm solidify project reach phase solidify meaning effort maintain backward compatibility elm decides point could evaluate latest version maybe legitimately wo nt need freedom taken away moot issue however probably long encoders decoder official way deal json need native code line native code save u hundred line encoders decoder switch something else modelviewupdate platform aware fableelmish us f already use apis anyway unfortunate bit f pure language take discipline write pure function whereas elm taking purity far recent change f quite far enough imo front end f great apis since integrating external system eg ui database email file etc f would harder use lot overhead perform side effect striking right balance use case important anyway still option table could also arise alternative mvu platform point believe clojurescript library work similar mvu nt really want go back componentbased system yes pure function mvu good conclusion team agreed sticking best choice u right apps coming create ignoring experiment fable see another mvu style platform around eventually start rot need switch something else going forward find situation really disheartening love elm never wanted use anything else begun feel relationship elm unstable
67,Lobsters,elm,Elm programming,Small Assets without the Headache – Minification made easy with Elm 0.19,https://elm-lang.org/blog/small-assets-without-the-headache,small asset without headache minification made easy elm,,
68,Lobsters,elm,Elm programming,Headache free setup of Elm 0.18 with Phoenix 1.3 using Brunch 2,http://petergao.com/2018/07/18/using-elm-with-elixir-phoenix-brunch.html,headache free setup elm phoenix using brunch,latest elm elixir phoenix brunch installing updating elixir next step asdf github page installing updating phoenix next step phoenix preinstall guide tl dr postgresql note installing updating elm next step creating new phoenix project installing configuring elmbrunch action performed within directory project filepaths directory given relative creating hello world elm app troubleshooting tip wrapping,endtoend tutorial getting setup latest elm elixir phoenix brunch minimum headache plenty great tutorial past version elm elixir phoenix course lesson largely still applicable phoenix directory structure thing shifted around little bit fresh introduction getting moving target play nicely together oh monkey around webpack everything purely phoenixway brunch unwieldy configs monkeying around cryptic webpack config parameter let jump installing updating elixir skip next step latest elixir already installed get anything ground need install elixir highly recommend installing elixir using version manager asdf manage erlang runtime necessary compile run elixir elixir platform one unified tool detail installing asdf available github page clean slate asdf installing erlang elixir quite simple may need install dependency erlang runtime system prior installing erlang see http asdf pluginadd erlang asdf pluginadd elixir asdf install erlang latest version writing double check newest version asdf listall erlang asdf install elixir notice check asdf listall elixir older version erlang elixir want update updating erlang elixir version asdf trivial operates exactly except perform two pluginadd step asdf install erlang latest version writing double check newest version asdf listall erlang asdf install elixir notice check asdf listall elixir installing updating phoenix skip next step latest phoenix already installed installing phoenix go phoenix preinstall guide tl dr need hex elixir package manager postgresql nodejs yet install asdf well prerequisite installed installing phoenix one command away mix archiveinstall http githubcomphoenixframeworkarchivesrawmasterphxnewez older minor release phoenix ie update local phoenix package already absolute latest version use note phoenix changed mix task name phoenix phx installing updating elm skip next step latest elm already installed installing elm npm installed piece cake updating similarily easy run yep easiest step whole process far thanks elm creating new phoenix project dependency installed create new phoenix project like mix phxnew phoenixwithelm create new folder named phoenixwithelm current working directory prompt u install default nodejs dependency phoenix brunch build tool one unless reason defer installing dependency need eventually respond e installing configuring elmbrunch need third party node package called elmbrunch plugin brunch performs elm compilation u whenever save elm file asset directory action performed within asset directory project filepaths directory given relative asset start add elmbrunch line packagejson file section devdependencies elmbrunch dependency added elmbrunch packagejson file need install everything gone well far need put final touch elmbrunch configuration race still inside asset directory time edit brunchconfigjs plugins section see babel sole default plugin section plugins babel use compiler vendor code ignore vendor want extend section include elmbrunch plugin configs section plugins babel use compiler vendor code ignore vendor elmbrunch required set elm file containing main function elm make handle elm dependency relative elmfolder mainmodules elmmainelm optional specified mainmodules compiled single file merged outputfolder outputfile elmjs optional add parameter passed elmmake makeparameters warn bare minimum configs necessary compile elm app config flag available documented elmbrunch repository want make additional change path section add elm list watched path path dependency current project directory watch watched static cs j elm vendor configuration creating hello world elm app config setup one last thing create elm directory asset make elm file within using favourite text editor create save mainelm bare minimum content module main exposing import html exposing main p text hello world let boot phoenix server turn start brunch watch job compile mainelm file cd still inside assetselm back project root mix phxserver compiled elm file found projectroot privstaticjselmjs default change location name compiled file brunchconfigjs file wished one last thing need check hello world elm code add layout file get loaded page load add line libpropertyspeculationwebtemplateslayoutapphtmleex script src staticpath conn jselmjs script go right existing script pointing jsappjs everything place able hit browser see phoenix app greeting screen make sure elm app actually loaded open inspector plunk line j elmmainembed documentgetelementsbyclassname logo immediately see word hello world overlap phoenix logo banner huzzah prof elm app loaded onto page successfully mounted troubleshooting tip running issue make sure elm directory created projectroot asset wrapping congratulation point brunch setup compile change made elm code real time long brunch watcher running autorun whenever phoenix server started app template updated load elmjs file noticed brunch watcher selfexits restart brunchconfigjs modified phoenix running necessitating entire server reboot know way around love hear contact info footer please reach let review finalized directory structure asset priv asset cs elm put elm source elmstuff elm package dependency go j nodemodules static vendor priv gettext repo static cs image j compiled elm get output elmjs list focus two main directory filter directory
69,Lobsters,elm,Elm programming,Using Capacitor to Build and Distribute an Elm App,https://bendyworks.com/blog/capacitor-elm/,using capacitor build distribute elm app,using capacitor build distribute elm app web component ionic elm promise pitfall capacitor capacitor setup building platform installed electron future improvement stenciljs stencilwepback pr copywebpackplugin webpack config,using capacitor build distribute elm app web component ionic elm promise pitfall looked building elm app using new ionic web component despite rough edge place library nt especially good job sharing control dom overall process turned pretty painless since already spending time ionic team indevelopment tool framework decided take elm app last post build hybrid native app using ionic new capacitor framework capacitor describes crossplatform api code execution layer make easy call native sdks web code write custom native plugins app might need might expect given people developed capacitor also excellent easytouse tooling managing build deployment platform still beta already fully capable building apps io android electron capacitor designed code configure everywhere philosophy sharp contrast cordova intended alternative perhaps evolution team behind cordova put tremendous engineering effort allowing manage configuration build process across every supported platform capacitor instead focused managing application web asset integration target platform leaving specific actually building packaging app platform dedicated tool chain first heard taking capacitor direction little disappointed since worry platform difference wherever possible one reason got hybrid app development first place however used capacitor project lot firmly board vision first somewhat trivially simple project like real interaction xcode android studio starting emulator finding button ide interface need click build deploy app second importantly actual build experience cordova never quite lived write run everywhere dream anyway spent almost much time managing cordova configxml file saved project configuration one place command line build process work part android io project always wound spending lot time xcode lucky scrolling page terminal output trying understand obscure build error overall willing grant least principle leaving platformspecific heavy lifting platformspecific tool could make better experience capacitor setup capacitor designed added existing project rather requiring generate fresh capacitor based project really need install make configuration change however need createelmapp relinquish control packagejson assorted configuration file run install capacitor via npm npm install save capacitorcore capacitorcli initialize capacitor configuration running note beginning command npx npm run capacitor inside project local nodemodules directory allowing different capacitor version used different project reducing need globally installed package aware npx command present since npm need version recent one use next change webdir setting capacitorconfigjson www build tell capacitor createelmapp putting output finally run build public asset set go build directory root publicurl npm run build make sure everything worked running capacitor internal server building platform capacitor set remarkably easy add new platform want try project standalone application assuming already installed electron run npx cap add electron npx cap copy cd electron npm run electron start running electron app built web app asset adding mobile platform similarly easy eg however capacitor handsoff approach detail actually building deploying code platform next step run open xcode directly still xcode environment set need select simulator click play working io build bad running couple command future improvement one important thing nt mentioned since beginning last post cdnbased method using load ionic component going publish app store would nt want rely end user device connected internet first time app run unfortunately integrating ionic build pipeline little complicated installing ioniccore package npm importing ionic component built stenciljs another product ionic team interesting tool right stencil component expect able load asset well polyfills associated code fly packing ionic core component main webpack bundle wo nt work stencil plugin intended help stencilwepback put output top level build directory instead staticjs folder app expecting load configuration setting control moment submitted pr adding one meantime found manual solution form copywebpackplugin seen webpack config app curious experience given even confidence future hybrid universal web app development able start language love pull preferred mobile friendly ui framework build result pwa package standalone app major platform minimum customization hack fighting framework certainly keeping close eye ionic capacitor get closer release expect pitching technology choice future client project
70,Lobsters,elm,Elm programming,Elm on fire! Shaders in elm,https://jappieklooster.nl/elm-on-fire-shaders-in-elm.html,elm fire shaders elm,beautiful art javascript webgl fire elm implementation beginning nothing example shader copied elm architecture javascript initial work unbreak rendering hue code black background right option solved issue random sphere movement speed speed suggests entity function shader conclusion,shaders long list possible subject study jappie potential creating beautiful art well parallel processing seem incredible valuable capability post comment effort porting javascript webgl fire elm implementation elm chosen target language opinionated easy type safe post explore get started elm shaders move trying port fire project finally performance increased much possiblein beginning nothingthere example shader setup elm crate copied resulting fully crate exactly output desired crate fire obviously skeleton elm architecture example shaders play withfrom two possible path continue one try completely understand shaders work one copy shader code javascript project see make work although initial work started former approach latter approach topic shader large lot math involved although exercise exploration learning trying understand massive scope creepunbreak renderingafter copying shader logic fire project everything broke surprising crate project whereas fire project luckily elm strongly typed input shaders therefore solving mismatch relatively easy could follow compile error example program essentially gutted basic architecture api call left tact elm force architecture upon u choice result effort shown belowit look like much anything however counted progress blank screen good next thing fixing color happened porting hue code elm implementation particular kind hue representation white background hue produce light blue added black background mix orange right color however transparency also broken transparency quite interesting initial fix involved changing shader however right api option eventually found solved issue place get single circle right color baby step graphic take timerandom spheresthis impressive however life one may find arity change everything single dot single dot randomly place screen get something nice look live browser support video tag aside random creation bring u much closer goal fire however work done jappie thought looked beautiful performance increased converting particle immediately webgl representationmovementto movement dropped change random sphere case idea update loop temporary put aside using update loop closer javascript original keeping would make porting easierdoing movement simply adding velocity time time position every frame simplex noise part javascript code also implemented variation movementit turn however result somewhat unimpressive yes look like fire second memory full garbage collection kick program grind halt example live may grind computer halt browser support video tag speedthe problem aside creating particle sending gpu existing particle must every cycle updated new location may observer however path particle creation entirely deterministic let shaders idea create particle initial position timestamp velocity let shaders calculate position whatever current timestamp iswhen trying implement found elm gl api used inefficient way realization came using entity per quad allow u share uniform across quad entity analogue webgl program architecture redesigned take account multiple particle per elm entity rather tracking list entity list tuples vertex tracked list vertex vertex vertex would preferable use mesh vertex type type support appending elm shader apithis approach seemed work much better fact probably one use api possible render particle computer lock live browser support video tag still good original javascript implementation able particle per second quite comfortably much better frame rate lot thing done implementation cpu side still cpu intense javascript implementation faster perhaps limit using elmmore speed thinking problem time another idea came mind increase speed amount information send gl pipeline reduced every frame sends mesh collection gpu trough buffer buffer decreased size speed would increase would also lighten load garbage collection le object need created suspicion elm slow garbage collection rather trivially representing particle single vertex position size use shader reconstruct vertex quad square vertex shader would move vertex first another unkown shader would reconstruction fragment shader would drawing easy overflow suggests use geometry shader unfortunately elm gl api support slot vertex fragment shader entity function jappie briefly got excited adding shader type elm api however discovered webgl support type shader point unclear increase speed changing webgl borderline impossible would take least year conclusionupon discovery webgl api elm jappie quite excited using however using finding rather large performance difference excitement tempered still lot learned project elm good entry point graphic development typesafety make complexity quite manageable fact idea using geometry shaders would realized faster languagehowever future faster language used able get everything machine quite frustrating therefore exclude use webgl major drive using webgl first place share result online however reasoning quite flawed video result made even include live result concern freeze reader computerto interested graphic elm recommended start especially already familiar elm reactredux architecture type safety shader level really nice especially thing wrong structurally compiler exactly tell need repair thing happened project entity price one pay execution speed return development speed
71,Lobsters,elm,Elm programming,Elchemy,https://wende.github.io/elchemy/,elchemy,,type language elixir elm perk language string perk language case language elixir easy concurrency elm runtime error elchemy elchemy let write simple fast quality type safe code leveraging elm safety elixir ecosystem
72,Lobsters,elm,Elm programming,Web Components with Ionic 4 and Elm: Promises and Pitfalls - Bendyworks,https://bendyworks.com/blog/ionic-4-elm/,web component ionic elm promise pitfall bendyworks,web component ionic elm promise pitfall ionic web component stencil progressive web app github page ellie sandbox app code createelmapp configuration change enthusiasm damper elmement,web component ionic elm promise pitfall although firm date set release next version ionic framework approaching one exciting change shift using web component built stencil core framework promise free ionic dependency angular allow used framework none combining simple mobile friendly ui element ionic joy building web app elm always dream mine decided give try using alpha version ionic couple hurdle overall worked great thanks nice tooling end result fully offline capable progressive web app extra configuration required first go process getting example app running discus potential challenge using approach build production application like see app action see final version github page add home screen pwa play code ellie sandbox app code first install createelmapp generate new elm project running elmapp create modify mainelm match module main exposing import html exposing html div img node text import htmlevents exposing onclick model type alias model counter int init model cmd msg init counter cmdnone update type msg noop increment decrement update msg model model cmd msg update msg model case msg noop model increment model counter modelcounter decrement model counter modelcounter view view model html msg view model div htmlp text elm node ionbutton onclick increment text node ionbutton onclick decrement text htmlp text count tostring modelcounter main program never model msg main htmlprogram view view init init update update subscription always subnone standard reactive app counter demo boilerplate worth pointing use ionbutton view function far elm concerned using plain old html tag rich behavior hidden inside component elm side notionally nt worry finally modify publicindexhtml match doctype html html lang en head meta charset meta httpequiv xuacompatible content ieedge meta name viewport content widthdevicewidth shrinktofitno meta name themecolor content link rel manifest href publicurl manifestjson link rel shortcut icon href publicurl faviconico script src http unpkgcom ioniccore script title elm app title head body ionapp ionheader iontoolbar colorprimary iontitle elmonic iontitle iontoolbar ionheader ioncontent padding div id root div ioncontent ionapp body html nt forget script tag pulling ionic core unpkg eventually want move build pipeline loading ionic cdn get demo running without change webpack configuration point see app action running elmapp start project root browsing may wondering many component html template elm code unfortunately answer wo nt work otherwise elm responsible rendering everything ionapp change state case clicking plus minus button cause elm framework throw read property replacedata undefined runtime error come back issue later embedding elm app inside ioncontent element good enough workaround proof concept exciting web app course impressed closely ionic web component already come ideal work experience even better since project generated createelmapp need make configuration change ready deploy full pwa github page another static hosting provider enthusiasm damper pretty happy easy start using web component elm prospect using build pwas hybrid mobile apps couple issue give pause think using approach larger production setting first usual concern around interacting outside world elm nice runtime safety guarantee lost least become complicated working state managed component likely involve lot messing around port still nt exactly new concern elm ecosystem project like ossi hanhinen elmement point toward possibility managing well designed abstraction runtime error happens trying render whole view elm small problem since many interesting complex ionic component eg navigation layer operate higher level ioncontent tag talked folk ionic slack digging around elm internals really conclude limited elm ionic knowledge elm losing reference part dom expects update result application state change possible better workaround problem go away ionic develops still alpha worry could common issue trying use web component framework exercise lot control dom elm trying render web component turn expecting control rendering child element nt bound run trouble retreat web component elevator pitch able freely use fully encapsulated component html context even particular problem quirk elm implementation unable reproduce issue similarly structure react app exactly sort abstractionboundarycrossing concern make want stay walled garden given front end framework still hopeful momentum behind web component clearly expect edge case get ironed various supporting standard technology develop still early day web component already possible build sleek looking mobile friendly pwa using shelf component even niche framework like elm
74,Lobsters,elm,Elm programming,Introducing Elmstatic: an Elm-to-HTML static site generator,https://korban.net/posts/elm/2018-05-03-introducing-elmstatic-elm-static-site-generator/,introducing elmstatic elmtohtml static site generator,elmstatic use thing organised configjson elmpackagejson templatehtml styleselm pageelm postelm postselm resource directory markdown file post directory directory structure output came first attempt elmstatichtml elmstatichtml elmmarkdown pablohirafujielmmarkdown feed improvement elmstatichtmllib elmcss post rtfeldmanelmcss,using elm generate site month still highly experimental incomplete hope elm enthusiast may find useful moment work need allows generate site single command requires manual intervention thing like deleting page adding new elm dependency sure many use case address think something barebones useful published npm name elmstatic current set feature page generated elm code possibly arranged kind hierarchy use styleelements html package generates html msg value cs generated elmcss stylesheets elm code use plain old stylesheets like page designated index page page template post list post fully customisable post written markdown post multiple tag page list post generated tag r generated post code highlighting via highlightjs set whatever want use basic workflow like install package npm npm install g elmstatic create directory site mkdir mysite cd mysite run init command site directory generate scaffold elmstatic init change generated file liking generate output elmstatic run http server output directory test site cd output httpserver publish host choice use github page thing organised file structure scaffold page aboutelm postelm postselm post resource img logopng configjson elmpackagejson pageelm styleselm tagselm templatehtml configjson configjson contains sitespecific parameter elmstatic insert appropriate place default config look like sitetitle author fancy blog outputdir output index post feed title author fancy blog description author blog post id http examplecom link http examplecomposts image http examplecomimglogopng copyright copyright author language en generator elmstatic author name author link http examplecomabout sitetitle go title tag html outputdir relative path site directory index name page going become indexhtml root level example set post mean elmstatic use pagespostselm generate two page postsindexhtml indexhtml object feed key specifies parameter r feed elmpackagejson elmpackagejson standard issue elm file need additional elm package code add templatehtml templatehtml html template used every page doctype html html head title title title script src script script src script script hljsinithighlightingonload script link rel stylesheet href link href fontsgoogleapiscomcss familyopensansprozalibreinconsolata rel stylesheet type textcss head body content link rel stylesheet href cssdefaultcss body html content get replaced html given page add custom style custom javascript analytics google font example toyed idea moving template elm well figured much value styleselm scaffold file look like module style exposing import cs exposing import cssforeign exposing import csscolors exposing import html import htmlstyled import jsondecode codestyle fontfamily inconsolata monospace fontsize rem style htmlhtml msg style global class markdown descendant color hex fontfamily proza libre helvetica sansserif code codestyle pre descendant code codestyle htmlstyledtounstyled elmcss stylesheet generator look specifically stylesstyles function needed style markdown within node markdown class external dom node able style via elm stylesheet get converted cssdefaultcss linked templatehtml scaffold set couple default tag change see fit module tag exposing import string exposing tolower type tag book personal software unknowntag required fromstring string tag fromstring case tolower book book personal personal software software unknowntag tag applied blog post since tag specified markdown file compile time enforcement unknowntag catch misspelled nonexistent tag go tagsunknowntag page check post invalid tag retrospect sure even need union type maybe list valid tag would sufficient tag post generator creates page list post tag tag name pageelm pageelm contains bulk code describes layout styling export function used specific page example view function view header variation list element pagestyles variation htmlhtml view header contentelems viewport stylesheet column main center width percent header column main width px paddingtop paddingbottom spacingxy alignleft contentelems footer view function aboutelm us function pageelm pagecontent write something using markdown view htmlhtml msg view pageview pagetoplevelheader pagetitle author pagemarkdown pagecontent module page directory get converted corresponding html page elmstatic postelm postselm function provide template single post list post example generator take markdown pas pagespostview function use result generate html note elm naming convention module apply module name prefixed page eg pagespost resource directory everything resource directory get copied verbatim root level output directory example resourcesimglogopng becomes available myblogdomaincomimglogopng published site add additional stylesheets script image markdown file post directory post handled similarly jekyll post file particular naming scheme yyyymmddkebabcaseposturlslugmd elmstatic extract date post url file name additionally post file start preamble look like title introducing elmstatic tag software elm title quoted appears top post well post list page post one tag tag associated post elmstatic generates post list page body post written markdown appears preamble directory structure output structure modelled output jekyll scaffold described output structure look like indexhtml cs defaultscss img logopng post indexhtml indexhtml tag personal indexhtml software indexhtml indexhtml rssxml came used jekyll site long time jekyll convenient enough blog adding managing various page addition blog post always bit pain one point also discovered styleelements library elm far pleasant use layout cs thing made sense way never cs gave idea could whip static site generator would allow use elm generating page anything fancy even comment blog post following great tradition yak shaving set experiment find much elm use could work naturally thought would take couple day naturally wrong took quite day get even barebones version working first attempt elmstatichtml first find way convert elm code html turned npm package called elmstatichtml relies another package called nodeelmcompiler invoke elm compiler generate html output html msg value returned view function could borrow approach slight modification purpose since styleelements function produce html msg value end could use styleelements without problem quickly figured make sense write post elm already archive post markdown simply much convenient ran problem default elm package generating markdown elmmarkdown runtime using javascript far late wanted post converted published luckily found another package pablohirafujielmmarkdown pure elm implementation markdown parsing allows produce html msg value markdown calling markdowntohtml great needed could plug markdown styleelements layout like markdown string element pagestyles v msg markdown content elementhtml htmldiv htmlattributesclass markdown markdowntohtml nothing content viewport stylesheet column main center width percent header column main width px paddingtop paddingbottom spacingxy alignleft markdown come markdown footer problem html generated another package apply styleelements styling settled styling markdown via cs file hence extra div markdown class markdown function also important syntax highlighting code snippet used highlightjs rather trying something elm highlightjs highlight elm code finally used feed package npm generate r feed working site generated elm improvement elmstatichtmllib elmcss downside elmstatichtml used native module going become unavailable elm asked native module issue slack noah told elm elmstatichtmllib compatible using new approach involve native module decided convert generator elmstatichtmllib wrote post elmstatichtmllib fairly straightforward along bit futureproofing also cleaned generator code quite lot even got better performance also noticed cssforeign module rtfeldmanelmcss produce html msg value via global function creates script node containing cs meant could easily adapt generator produce cs file elm code elmstatichtmllib unable handle scenario change package dependency elmpackagejson update copy install new dependency delete one elm file produce error still generated module thing list future improvement
75,Lobsters,elm,Elm programming,Elm at Pacific Health Dynamics,https://mordrax.gitbooks.io/elm-at-phd/content/,elm pacific health dynamic,introduction spa overview prologue brave new w holy cow refactoring compile time child parent component form endpoint extensible type file structure tool rant rave thanks http wwwhappylearnhaskelltutorialcom http githubcommordraxcotwelm http youtubeulrukprysws http uspsharing,introduction story guy left chase elm full time technical trial tribulation faced euphoric euphoric bit writing spa elm scope ambitious use italic summary header decide section want read total word count around reading time minute code snippet published april write elm pacific health dynamic small health insurance software vendor big dream since july leading frontend rewrite flagship product rewrite legacy application already loc joined month ago since rewritten various subsystem least looking generic form component introduced core structure necessary spa codebase loc third way completion typical massive legacy regulated system driving motivation article share experience discus various challenge faced provide practical solution took overcome feel enough long form analysis team using elm something craved deciding whether take elm professional setting rather therefore article aimed similar sure whether take step team using elm struggle various topic cover effect code sample beginner language focus explaining basic concept aside constructive feedbackdiscussions welcome learning please share idea team may somethings differently hovering paragraph commenting thanks overview heart story story always beginning prologue next chapter brave new w holy cow detail analysis existing codebase started go straight strategy refactoring large codebases around time started hitting brick wall compile time prodded noah produced talk elm remote much structured foundation started developing pattern child parent communication various type component matured tackled generic form still unhappy core piece frontend interacts backend endpoint consist solely autogenerated decoder extensible type powerful also fun talk file structure grew organically major consideration compile time throw together bunch random tool may useful making spa useless making game finally rant rave much love elm try best word like objective observation strength weakness language thanks julian leviston mentor elm gave time freely review critique articlehe also mad keen haskeller check wonderful haskell book http wwwhappylearnhaskelltutorialcom castle wind remake elm http githubcommordraxcotwelm elm remote meetup talk http youtubeulrukprysws elm remote meetup slide http uspsharing
76,Lobsters,elm,Elm programming,Tricking elm-test into solving a river-crossing puzzle,https://ellie-app.com/nHNx6brVja1/0,tricking elmtest solving rivercrossing puzzle,,
77,Lobsters,elm,Elm programming,Life in the land of unqualified imports,https://maxhallinan.com/posts/2018/03/17/life-in-the-land-of-unqualified-imports/,life land unqualified import,ii iii noredinkelmdecodepipeline iv v vi vii viii note life file return vim tip wiki using mark return,unqualified import might readable qualified import unqualified import trouble qualified import readability confused clarity trouble unqualified import unclear ii debugging elm code write file line large file arrive line unfamiliar function called want know function must jump top file hunt function name among import declaration sixteen import declaration three declaration use form import foo exposing must look function three library hoping find first one end forgotten line iii fallacy unqualified import small simple name readable example popular elm library noredinkelmdecodepipeline userdecoder decoder user userdecoder decode user required id int required email nullable string optional name string fallback name null present hardcoded meant code read like plainenglish description code considered readable scan line understand user required id email address name function required optional hardcoded composed like word sentence describe underlying domain model qualified import ruin effect jsondecodepipelinerequired id int jsondecodepipelinerequired email nullable string jsondecodepipelineoptional name string fallback name null present jsondecodepipelinehardcoded elm poetry elm code gratified poetry need deeply understand code need know int string easily confused might guess function exported jsondecodepipeline fact function belong jsondecode library commonly used context without qualified import constantly jumping import declaration guessing look documentation iv maybe readability preserved confusion mitigated using import alias prequired id dint prequired email dnullable dstring poptional name dstring fallback name null present phardcoded compromise might appeal developer enamored small simple function name doubtful compromise mean le jumping top file code clarified alias memorized every alias file clarity last long maintain memorization v aliased module import breed trouble someone chooses odd alias human dependably clear thinker people inexplicably call foobar baz two module reasonably referred alias foo might datafoo viewfoo still jumping import declaration like dog rummaging dead leaf looking chicken bone vi traversing file hard hand mostly remembers set mark making mark make round trip call site import declaration pretty quick trying save key stroke trying save thinking want think function come want think mean set string want think reasonable alias foobarbaz want know immediately unfamiliar function come get work full module name however long name guaranteed give useful information vii recently conceded qualified unqualified import appropriate depending context conceded end argument lasting long privately remain qualified import absolutist rule useful degree applied consistently always qualify import full module name useful rule followed consistently depending context useful rule invokes personal judgment result dependably consistent viii gained inviting spectre subjective avoided must code selfexpressive one degree necessarily note life file evan czaplicki return vim tip wiki using mark return
79,Lobsters,elm,Elm programming,Learning the Language of Functional Programming,https://maxhallinan.com/posts/2018/03/03/learning-the-language-of-functional-programming/,learning language functional programming,note andrestaltz drboolean return evan czaplicki return evan czaplicki return,elm functional programming language largely avoids vocabulary functional programming chatter bifunctor contramap seldom occur world though elm maybe might one instance monoid category endofunctors concept monad elm evan czaplicki elm creator argues theory instead elm focus programmer concrete pattern problem solving domain user interface possible elm programmer write elm program little awareness theory implied work approach make sense purpose teach user interface development sure make sense purpose teach functional programming assumed functional programming inevitable result programming functional language functional programming programming functional language thing need functional programming language functional programming need language first class function mean functional programming many language commonly called functional language called functional language lends expressing certain kind thought done functional programming thought way degree elm haskell clojure force way thinking proficiency language amount understanding subject act functional programming remains thought user interface programming one opportunity demonstrate way thinking unless thought made explicit demonstration understanding occurs incidentally way thinking functional programming program arrow two point point data type arrow transformation one type arrow originates input point end output point thus linecount program arrow string integer one inspects path arrow connecting input output one find arrow point single arrow like arrow input output sometimes composition two arrow two arrow compose one arrow end begin said single arrow start first arrow end second arrow functional programming largely composing smaller arrow bigger arrow finally one arrow input output law dictate arrow exist every pair point connect two point functional programmer follows law functional programming understood law understood write code functional language applies law understand maybe productive programmer understood functional programming good understanding law productive without understanding question reminds eighthgrade algebra eighthgrade algebra taught law taught apply law math problem law came calculation technique something like dividing number right side number left side calculation technique method applying law problem student tested result calculation knowing answer depend knowing law success algebra meant choosing correct calculation technique necessarily knowing law justified choice two group student emerged class first group became skilled memorizing technique went kind problem worked like decision tree detail problem like x use technique approach law essential information second group tried abstract detail problem law first work number perhaps student second group still used prescribed technique knowing technique prescribed decision tree limited form understanding enabled student solve familiar problem unfamiliar problem required extension decision tree even solution simply used new combination familiar law knowing law decision tree empowered student solve unfamiliar problem knowing law meant new application law le work learn sometimes could make shift fly without study reduced time spent math outside class saved test paper resemble elm target audience math education concluded early third year highschool nearly failed final year nothing changed since remain uncomfortable number know little category theory define contramap working change remember usefulness seemingly unuseful law eighthgrade algebra promise functional programming knowing law make capable programmer made capable math student sense best functional programming language language law whether learn law use programming language must learn law learn functional programming argument remains theory learned later learning suppose true wonder elm programmer ever made aware theory language make aware avoids subject necessarily responsibility language convey theory programmer nonetheless best served student functional programming language expose concept note close redux connect function bifunctor see fantasy land detail honest question could designed bimap somehow andrestaltz seems like contramap contravariant bifunctor abstracting connect function builder drboolean return essentially active using monadic thing without ever talking evan czaplicki return design language someone get started get productive slowly realize concept way build upon way work people evan czaplicki return
80,Lobsters,elm,Elm programming,State of Elm 2018,http://www.brianthicks.com/post/2018/02/01/state-of-elm-2018/,state elm,state elm permalink full screen mode result last year,state elm published february minute read permalink state elm put survey every year take pulse elm community going survey open close march take full screen mode better mobile user update february browser extension privacy badger appear blocking crucial component survey form work frame appears empty glitchy may need disable blocking want whitelist site permanently incognitoprivate window may trick also get result last year
81,Lobsters,elm,Elm programming,Critique of a Code Meme,https://maxhallinan.com/posts/2018/01/31/critique-of-a-code-meme/,critique code meme,code meme ii remotedata code meme iii remotedata model possible state iv inefficientmeme hypothesis v alternative vi remote data cache state machine vii polymorphic transition without polymorphism viii general specific state change x unfinished map note know see elm slays ui antipattern slaying ui antipattern fantasyland slaying ui antipattern react slaying ui antipattern flow slaying ui antipattern reasonml alfred korzybski wikiquote,example written elm original language remotedata pattern like pattern thinking generalized language code meme certain code meme exist hard time defining idea unlike justice stewart uncomfortable asserting reality something escape code meme label give bit programming encounter twitter technical content code meme readymade response common experience macro thought rigidly copied one context next like meme code meme suddenly seems everywhere suddenly nowhere every use programming pattern mimetic programmer often adapt pattern problem pattern informs dictate result code meme defy adaptation perhaps wellknown code meme hello world program hello world readymade solution problem program write beginning learn new language thought expressed code unmodified detail like language implementation change ii remotedata code meme code meme slaying ui antipattern refers remotedata pattern invoke meme slaying ui antipattern elm mean show elm implementation remotedata like hello world program implementation used sample flavor language specifically flavor language union type remotedata pattern ui antipattern approach modeling state data generated rest request user interface generally present remote data state like loaded loading error success ui antipattern represents state implicitly current state derived model roughly shape type alias model x list x isloading bool error error remotedata improves approach using union type make state explicit state data encoded data type type remotedata b notasked loading failure success b type alias model x remotedata error list x making state explicit two benefit first state universally consistent clear risk consumer data incorrectly derive implicit state second consumer data required handle every state view model html view model case modelxs notasked emptyview loading loadingview failure error errorview error success data successview data code compile unless pattern case statement cover every possible state result robust system iii remotedata model possible state remotedata model stateful cache data term stateless transfer data rest current state remotedata value preserve none prior state example transformation success b loading mean information b lost carry information success b loading requires u update loading constructor loading b loading maybe b must recall old adage user interface state machine many common feature demand continuity context example infinite scroll combination success loading breaking continuity remotedata make impossible model many legitimate state state include empty general error request pending empty general error request pending subset data empty error subset data request pending empty error subset data request pending subset data data cached general error data cached error subset data data cached request pending data cached request pending subset data data cached general error request pending data cached general error request pending subset data data cached error subset data request pending data cached error subset data request pending subset data attempt salvage remotedata pattern adding nullable error data parameter loading failure state type remotedata b notasked loading maybe maybe b failure maybe b success maybe b enables u model state mix loading error data example data cached general error request pending state would look like loading error x empty general error request pending state would look like loading error nothing use similar approach associate loading error state subset data assume collection item item uniquely identified string relationship state item collection made adding nullable string parameter loading failure state type remotedata b notasked loading maybe string maybe maybe b failure maybe string maybe b success maybe b approach enables u associate error state loading state one item time approach enable u relate mix state multiple item collection relate multiple state item time loading maybe string maybe maybe b must become loading maybe string maybe string maybe maybe b associate error loading state item collection could continue cram information remotedata type recommend path lead directly back implicit state code consumes value remotedata type explode nested case statement required derive current state iv inefficientmeme hypothesis efficientmarket hypothesis state price always reflect available information propose inefficientmeme hypothesis meme never reflects available information utterance becomes memetic map corresponding le le edsger dijkstra famously defined programming art organizing complexity mastering multitude organizing complexity make program le complex need programmer wary code meme inefficientmeme hypothesis suggests code meme master multitude leaving multitude v alternative tempting sign conclusion critique critique solve problem modeling state remote data cache work lot user interface whether use remote data pattern still want solve problem alternative approach modeling state experimental approach sure sane approach always suspicious simpler way glad hear core problem insufficient number state even relatively simple user interface requires many four state remotedata two kind missing state first kind missing state compound state even relatively simple user interface display state mix empty loading error success let start defining state type cache b empty emptyinvalid emptysyncing emptyinvalidsyncing filled b filledsyncing b filledinvalid b filledinvalidsyncing b second kind missing state specific state state collection state item collection always example application might load list data first later make request detail one item list item collection filledsyncing state general specific state achieved creating cache cache imagine fetching data person api every person create personcache store personcache dict keyed person id finally create cache personcollection general state managed outer cache specific state managed inner cache type alias person name string type alias personcache cache httperror person type alias personcollection dict string personcache type alias model person cache httperror personcollection possible state represented cache change current state cache change state response cacheevent cache respond three event start request remote data source resolution request error data type cacheevent b sync error update b vi remote data cache state machine every combination cache state cache event result new cache state state event known state change knowable example cache empty state change emptyinvalid error event occurs table show state change response event state sync error update empty emptysyncing emptyinvalid filled b emptyinvalid emptyinvalidsyncing emptyinvalid filled b emptysyncing emptysyncing emptyinvalid filled b emptyinvalidsyncing emptyinvalidsyncing emptyinvalid filled b filled b filledsyncing b filledinvalid b filled b filledsyncing b filledsyncing b filledinvalid b filled b filledinvalid b filledinvalidsyncing b filledinvalid b filled b filledinvalidsyncing b filledinvalidsyncing b filledinvalid b filled b know state state change state change know want happen need system make happen fact already name system describing remote data cache specified finite state machine finite state machine three component state event transition event prompt finite state machine transition current state new state finite state machine make correct transition testing condition time event case condition combination state event found state change table simplified elm update function closely resembles simple state machine type msg increment decrement reset type alias model int update msg model model update msg model case msg increment model decrement model reset msg like event model like state branch case expression transition current state next state major difference update function finite state machine update produce infinite number state without upper lower bound update return member infinitely large set integer write similar update function change state remote data cache heart state machine updatecache take cacheevent event current cache state return new cache state state change according rule defined state change table updatecache cacheevent c cache b cache b updatecache event current case current empty case event sync emptysyncing error nexterror emptyinvalid nexterror update nextdata filled nextdata emptyinvalid currenterror case event sync emptyinvalidsyncing currenterror etc prescribed implementation remote data cache finite state machine state event transition reflect need application state machine come several variety principal aim make conceptual connection nonetheless enough say use finite state machine implementing state machine purpose trivial want touch detail vii polymorphic transition without polymorphism implementing updatecache must remember cache system compatible different type data one problem state cache change sometimes necessary change data example update b event might require u merge new data existing data state cache filled b data change probably specific type data cache must typespecific transformation remaining uncoupled type solution pas transition state machine transition hook moment process changing state state machine know call hook know keep typespecific logic cache enabling typespecific transformation moment let provide two transition first updateempty transition called empty cache change filled cache updateempty called data update cache event second updatefilled transition called filled cache change filled cache updatefilled called data update cache event data already cache type alias transition b updateempty b updatefilled b b updatecache transition c b cacheevent c cache b cache b updatecache transition event current case current empty case event sync emptysyncing error nexterror emptyinvalid nexterror update nextdata filled transitionsupdateempty nextdata etc viii general specific state change recall person cache example structured cache cache move forward implementation realize way update inner cache updating inner cache begin update outer cache outer cache know event resulting state change specific one inner cache system cache know structure cached data mean cache even know inner cache cache need know difference change cached data change piece cached data event medium communication state machine update b event signal change cached data need add new event signal change subset data call event patch c type cacheevent b c sync error update b patch c changing data response update b different changing data response patch c example merging two list data response update b one transformation merging two copy one item list response patch c second transformation account difference add patchfilled transition transition called data patch c event cached data patchfilled state machine responsible selecting subset data transform type alias transition b c updateempty b updatefilled b b patchfilled c b b updatecache transition c b cacheevent c cache b cache b updatecache transition event current case current etc filled currentdata case event sync filledsyncing currentdata error nexterror filledinvalid nexterror currentdata update nextdata filled transitionsupdatefilled nextdata currentdata patch patch filled transitionspatchfilled patch currentdata etc update state inner cache send event outer cache inner cache patch cacheevent used carry inner cache event outer state machine patchfilled receives event coordinate update type alias personcollection dict string personcache type alias personcache cache httperror person patchfilled string cacheevent httperror person personcollection personcollection patchfilled key cacheevent personcollection select inner cache dictget key personcollection update state inner cache maybemap updatecache updateempty updatepersonempty updatefilled updatepersonfilled patchfilled patchpersonfilled cacheevent reinsert updated inner cache collection cache maybemap update dictinsert key update personcollection maybewithdefault personcollection part approach least comfortable concept undoubtedly hard understand tricky implement proof concept consumer remote data cache required handle every cache state depending pattern matching capability language explicit state result verbose code code becomes especially noisy many state handled way view function prone suffer noisiness many view function binary relationship state cache loading icon displayed cache loading state otherwise loading icon displayed error message displayed cache error state otherwise error message displayed view function responsible feature need know variety cache state advisable reduce many state cache set fewer state view type visibility show hide kind view defines reduction cache visibility example error view might reduce cache error state show error cache state hide errorvisibility cache error visibility error errorvisibility cache case cache empty hide emptyinvalid error show error emptyinvalidsyncing error show error emptysyncing hide filled hide filledinvalid error show error filledinvalidsyncing error show error filledsyncing hide approach enhanced higherorder function handle hide case visibilitytohtml html b visibility html b visibilitytohtml tohtml visibility case visibility show x tohtml x hide text view composition function keep large case statement function produce html errorview cache httperror html msg errorview errorvisibility visibilitytohtml errorhtml x unfinished map lot information convinced good emphatically experiment remotedata pattern simple approach danger becoming complicated accustomed doubt correctness messy abstraction messy inclined also doubt tidy abstraction tidy lesson code meme messiness tidiness abstraction kind incorrectness world messy tidy abstraction crystallize understanding world expect abstraction messy tidy pronounced messiness pronounced tidiness might sign incomplete understanding began tidy abstraction end messy abstraction please let know find middle path note supreme court justice potter stewart doubted could ever intelligibly define obscenity instead famous test know see elm slays ui antipattern kris jenkins first describe pattern slaying ui antipattern fantasyland slaying ui antipattern react slaying ui antipattern flow slaying ui antipattern reasonml usefulness code meme like code depends accurately represents problem map territory represents correct similar structure territory account usefulness alfred korzybski edsger dijkstra note structured programming via wikiquote art programming art organizing complexity mastering multitude avoiding bastard chaos effectively possible
82,Lobsters,elm,Elm programming,"On Storytelling, by Evan Czaplicki, at Deconstruct 2017 (20 minutes, transcript available)",https://www.deconstructconf.com/2017/evan-czaplicki-on-storytelling,storytelling evan czaplicki deconstruct minute transcript available,transcript,transcript editor note transcript nt talk justice transcript useful searching reference recommend watching video rather reading transcript alone reader typical speed reading take le time watching video miss body language speaker slide hello evan czaplicki designed programming language called elm according website delightful language reliable web apps work company called noredink far know biggest elm user got line elm running new code written elm year half using production still runtime error pretty neat day day work elm time lot say technical aspect want emphasize storytelling influence technical decision design come trying communicate people think storytelling start people nt care living life start start observing conflict something people anxious make angry whatever try find shared language way talk productive constructive try tell story finally try create news people actually learn story hopefully end anxiety resolved let observe conflict say see two people talking wonder talking talking type ok sad situation laughter dynamic type best static type best instead slowly backing away decide say ooh interesting question ask disagreement surely people see fact come conclusion root problem perhaps overenthusiastic person thinking experience haskell person little lukewarm thinking java seeing world way discussion someone truthfully say type make productive another person say type make le productive two true thing coexist root problem see problem meaning someone say word like type really picking experience maybe picking experience first thing learned java thing hard learning programming language first time forgetting semicolon understanding loop thing get wrapped experience look back think java different say using javascript well type nt problem longer emotional content experience talking talk type someone else maybe coworker mine got hired bootcamp new javascript started learning elm work like oh pretty nice complicated relationship someone else learned university professor writes interesting academic paper give dimension think everyone particular experience background meaning question right word really mean turn old question reading oldest answer come guy nagarjuna around year contemporary treatment look philosophy language semiotics postmodernism medium study lot people concerned question concerned question hobby read stuff want bring interesting work see tell u design elm storytelling general book public opinion walter lippmann written primarily concerned medium people communicate mean democracy also created modern term stereotype book came along people said stereotype thinking thing printing exact image nuance detail might get handwriting interestingly french word cliché laughter anyway walter lippmann say static type dynamic type say useful discussion instead comparing ideal reexamines vision fact may party discussion see exactly reality difference emotional experience fact different conflict come useful discussion want pick emotional experience mean people understanding proceed trying find shared language talk kind stuff let start true statement think weak statement one would nt say elm general elm sound type system full type inference true fact think useful valid vision yeah care think sentence actual content useful content low right someone new programming might say well type system really sure sound type system nt really make sense well type inference really sure first case full incomplete nt really know basically sentence elm thing stuff laughter statement think correct answer one thing try communication concrete never want audience user reader infer benefit want say benefit let try factually correct statement communicating emotional experience catch error compile time factual statement someone javascript might look say ok going slower development cycle nt sound good bet error message suck also nt sound good runtime error give stack trace new kind error nt nt give context work sound like strictly worse experience ok fair enough fair enough maybe say questionable say well better error message arrive getting experience clearer fix quickly division would yes say well say better obviously say better thing level lack authority elm let try different direction could also say nt need type annotation elm get benefit nt write type javascript person say already nt write type laughter right offering complexity never asked convenience already laughter ok weak weak pitch let try different direction right another implication runtime error reaction wait possible say clearly liar think subtext laughter say kind thing elm really like sense creates curiosity project like technically feasible going go fact check guy ha ha ha trying hopefully like laughter also communicating emotional experience right learned standard ml family language elm experience already enjoying programming special kind joy writing big program changing feeling really pleasant saying thing different way communicate emotional content way translates across community word nt necessarily mean thing found shared language great nt tell anybody care found phrase fine next step tell story walter lippmann tip u first visualization description word requires effort memory picture exists mind screen whole process observing imagining accomplished writing seeing rise moving picture reader like thinking reality level see power new kind communication powerful radio book image also see risk another tip give u context visual idea significant enveloped stress personality enough show image clearly relevant life walk park every day may bench nt know day rock shoe bench going really important going want tell friend something nt know important laughter want explore particular story told elm worked well friendly error message primarily visual look look line problem le say string negative otherwise give back number expression produce different kind value people use function may know deal visualized benefit type system emotional content experience people code crashing work find undefined function console maybe minute minute hour next day figure root issue someone wrote function string longer character undefined function forgot handle scenario actually le character null function forgot handle combination particular string going get crash hunting rough case say oh look function giving back string sometimes number time handle case explicitly proceed daytoday concern behind question code crashing question good job company paying money sit know happening time laughter actually quite lot emotional content also address idea type lame thing idea exists world show visual story like least account story right may still think type lame like well give error message go equation story double duty emotional content addressing broader concern style programming elm clear visual story go test play story think nice got create news story good write book put drawer going big impact walter lippmann tip u series event becomes news usually make noticeable le overt act generally crudely overt act go example businessman mismanages money decade people know becomes news day file bankruptcy actual event becomes newsworthy thing programming thing little bit easier u release news builtin mechanism everyone community even community going look say oh going elm use technique called batching think help create stronger story release typical project someone open issue ideal get resolved open issue resolved open optimizing latency quickly respond everybody internet thing say project use different approach think controversial work well opinion someone open issue say ok someone else open another issue time let build high level analysis concern people look holistically find one fix address concern way clear think end lead better design perspective storytelling also mean stronger narrative release work compiler elm emphasis developer experience get broader narrative thing happened always sad see language release list pull request merged like ok happened want show process working moment single page apps term think need quote laughter step one observe conflict easy people yell stuff laughter people come outside nt feature possible people within elm like sure approach lot people think well evan got around writing doc would clear writing feature basically need objectoriented language fine see conflict trying find shared language thing people talk dig detail actually referring one tree shaking hate almost term idea shaking tree like good part might fall nt know name dead code anyway people talk code slicing cut asset smaller piece serve right time lazy loading cut make sure people get transition page page server side rendering routing people transfer page want handle properly multiple page ok find interesting laughter ok something weird look think term asset management root concern get people content quickly minimize bandwidth get page load want think term next step create story story nt word rhetoric take story want tell need true technically story make sense step one implement feature need code elimination da da da da working kind stuff broader goal address concern site fast branch broader question like hard time good right technical phase know story want tell need certain technical thing true point technical detail service story want tell sake yeah come back look storytelling overall think process anything particularly recipe walter lippmann nt giving recipe think anyone knack communication find piece consciously unconsciously perform process give process ethical moral character people use case joyful experience using standard ml thought kind experience bet people learning programming struggling project getting alienated struggling sense could experience goal take anxiety conflict actually resolve nice way walter lippmann actually interested medium people communicate implication democracy see process advertising politics often take fear intention resolving intention stoking using guide people moral character quite interesting interested aspect recommend checking public opinion also documentary want watch thing rather power visual communication century self get guy called edward bernays tell little bit dark side process interested elm check website talk twitter low volume hopefully give insight process behind elm feature give stokes curiosity interesting field study thank applause
83,Lobsters,elm,Elm programming,LambdaConf 2018: Call for Proposals,https://lambdaconf2018.dryfta.com/en/abstract-submission,lambdaconf call proposal,,event website either suspended unavailable use visitor attendee please contact event organizer correct link website dryfta support team
85,Lobsters,elm,Elm programming,Fuzzy Thinking: Fuzz Testing and Formal Grammar,https://maxhallinan.com/posts/2017/12/09/fuzzy-thinking/,fuzzy thinking fuzz testing formal grammar,hunting blindspots sixdigit threedigit generating random input thinking pattern formal grammar contextfree grammar formal grammar hex color formal grammar fuzzers formal grammar fuzzy thinking,two rabbit hole fuzz testing formal grammar traveled simultaneously found converged article retraces path example written elm code idea specific language hunting blindspots innumerable way dividing selecting attention fact event data required prediction decision thus moment come choice always rankling doubt important data may overlooked alan watt essay zen spiritual experience let say function hextorgb convert hex color string rgb value implementation hextorgb unimportant interested type signature hextorgb take string hex color value return result error string rgb representation hextorgb string result string int int int want test hextorgb first write unit test asserts hextorgb ffffff return ok test focus correctness conversion formula hextorgb convert ffffff ok use reasonable first test write test pass done testing handful thing test tell u example know hextorgb really handle valid hex color string tested one might assume hextorgb work valid string work ffffff maybe edge case aware maybe hextorgb return err hex color ffffff know write test could simply generate valid hex color string write test call hextorgb lot hex color fact sixdigit threedigit hex color code decide take idea scale instead generating million hex color generate generate hex color randomly time test run matter hex color different time test run testing conversion want test nothing unexpected happens call hextorgb valid hex color test simply assert hextorgb return ok valid hex string generating random input approach testing called fuzz testing fuzz testing requires u think generally input instead writing test specific value like ffffff write test kind value case hex color string going use fuzz module elmcommunityelmtest package generate random input fuzz test written elmcommunityelmtest use fuzzer generate random value certain type example fuzzstring fuzzer string generates random string length likewise fuzzint fuzzer int generates random integer hextorgb took string integer fuzzers would useful unfortunately every string every integer valid hex color fuzz module expose hex color string fuzzer define defining fuzzer mean implementing fuzzer type scratch addition basic fuzzers like fuzzstring fuzzint fuzz module expose helper function used combine small simple fuzzers large complex fuzzers job break concept valid hex color smaller part represented tool use tool connect part result fuzzer generates random valid hex color string thinking pattern human thinking skip great deal leap small misunderstanding contain ifs buts untroubled corner mind machine corner ellen ullman close machine technophilia discontent find element hex color let think hex color string pattern character first character string always every character first must valid hexadecimal digit hexadecimal digit integer character f lowercase uppercase alphabetic character valid hexadecimal string hex color always three digit six digit long pattern sound complicated description pattern ambiguous example forgot mention hex number include whitespace maybe familiar hex color string would leap small misunderstanding certain everyone would add another item list say hex color string contain whitespace define whitespace whitespace space character space tab linebreaks way requirement become verbose misintepretation becomes likely exact meaning hard express natural language find reaching language fewer possible meaning fewer word required say mean formal grammar becomes useful formal grammar might feel like drifting original task generating random hex color really need exact specification could start building hex color fuzzer address latent ambiguity arise true writing formal grammar hex color string worthwhile exercise addition exposing ambiguity hex color grammar show u structure fuzzers formal grammar notation us pattern symbol describe set valid string pattern symbol grammar whatever describing two type symbol formal grammar terminal nonterminal name terminal nonterminal imply action movement terminus something stop end case action movement replacement given nonterminal symbol want replace terminal symbol string valid nonterminal symbol replaced terminal symbol way produce string formal grammar theoretical subject learn need know looking example let say four string aa aa aa aa string form language four string valid language describe language contextfree grammar start char char char let walk process testing whether aa valid sentence according grammar take first character aa look right side start symbol moving left right first encounter nonterminal symbol char order test whether match char replace char terminal symbol go definition char right side char first find match option logical char replaced match char far good need test second character string return start move right finding second nonterminal symbol char test way tested find match char finally character test nonterminal symbol replace string end pattern end pattern character string match pattern symbol grammar aa valid sentence language formal grammar hex color let write contextfree grammar hex color string start atomic element terminal symbol work start symbol hex color hexadecimal number write hex color grammar must first write grammar hexadecimal number hexadecimal number base mean sixteen digit instead usual digit digit represented integer letter f let start creating nonterminal symbol called num num alphabetic digit slightly complicated letter lowercase uppercase describe creating nonterminal symbol letter joining alpha symbol b b b c c c e e e f f f alpha b c e f similar fashion join num alpha hexdigit symbol first hex color building block alpha num another atomic element hex color string symbol every hex color grammar start character second hex color building block hash described atomic element hex color string start describe string hex color come threedigit sixdigit format worry adding hash later focus describing three six digit pattern describe threedigit format simply repeat symbol three time describe sixdigit format simply repeat symbol two time building block need define start symbol start hash hash together grammar start hash hash hash num alpha num alpha b c e f b b b c c c e e e f f f formal grammar fuzzers might noticed formal grammar made liberal use two powerful logical pattern recursion combination nonterminal symbol resolved terminal symbol recursively smaller pattern combined create larger pattern use approach create hex color fuzzer let start smallest piece letter number fuzzstring fuzzint much help generate string int respectively might include character hex digit number hex color range instead use fuzzconstant create fuzzer hexadecimal digit example fuzzerconstant fuzzer always generates use fuzzoneof combine hex digit fuzzers result fuzzer generates single random hex digit note elm code closely resembles contextfree grammar fuzzer string fuzzoneof alpha num alpha fuzzer string alpha fuzzoneof fuzzconstant fuzzconstant b fuzzconstant c fuzzconstant fuzzconstant e fuzzconstant f fuzzconstant fuzzconstant b fuzzconstant c fuzzconstant fuzzconstant e fuzzconstant f num fuzzer string num fuzzoneof fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant fuzzconstant also use fuzzconstant create fuzzer character hash fuzzer string hash fuzzconstant basic building block want start combining complex pattern syntax contextfree grammar concatenation operator elm also provides string concatenation operator apply operator directly fuzzers way applied nonterminal symbol like algebraic data type use operator like map transform value type represents hex number use apply concatenation operator three random hex digit fuzzer string b c b c go let take moment extract helper function fuzzer string fuzzer string fuzzer fuzzer fuzzer fuzzer string fuzzer string fuzzer fuzzer fuzzer use abstraction simplify fuzzer create fuzzer fuzzer string fuzzer string note closely elm code resembles hex color string grammar combined create single fuzzer randomizes format ultimate hex number fuzzer fuzzer generates hex number within hex color range hex fuzzer string hex fuzzoneof finally prepend random hexadecimal string character fuzzer randomly generates valid hex color string hexcolor fuzzer string hexcolor hash hex formal grammar fuzzy thinking string fuzzers used like formal grammar describe pattern character fuzzer equivalent nonterminal symbol value generated fuzzer equivalent terminal symbol combining nonterminal symbol small pattern small pattern large pattern relatively easy way create fuzzers generate random string within complex constraint
87,Lobsters,elm,Elm programming,Advanced Types in Elm - Phantom Types,https://medium.com/@ckoster22/advanced-types-in-elm-phantom-types-808044c5946d,advanced type elm phantom type,advanced type elm phantom type part iv phantom type extensible record phantom type parameterized type one parameter left hand side appear right hand side useful restricting function argument fetchrepos formdata valid invalid opaque type formdata formfield formdata formfield list formfield formdata opaque type formdata validate formdata fetchrepos fetchrepos string formdata valid fetchrepos result compiler error formdata formdata invalid invalidformdata formdata valid result use phantom type credit additional reading http wikihaskellorgphantomtype http,advanced type elm phantom typespart iv phantom typesthe fourth part series phantom type someone coming background c family language concept especially intriguinggiven background post exhaustive description phantom type use case tradeoff like post extensible record instead discus potential use case encourage reader explore morewhat phantom type phantom type parameterized type one parameter left hand side appear right hand sidetype aphantomtype string code parameter appear right hand side expressiona type technically phantom type parameterized type appear right hand side mean also phantom typetype aphantomtype b b even though b used right hand side qualifies phantom typewhen useful phantom type useful restricting function argument beginning think named series restricting function argument elm phantom type allowing function carry information type level let look example involving form validation without phantom typesthe example allows user enter keyword used search github repository containing keyword however notice happens search performed without keywords presentthis form lack validation user attempting perform search keyword actually required form even make http requestthere obvious way resolve common would creating function return bool indicates whether input valid lot obvious strategy get u runtime guarantee actually use phantom type get guarantee compile timephantom type used obtain guarantee compile timelet dive function question fetchreposthis function accept possible string always produce cmd function signature far trusting developer send valid string update function annotation ever receive valid data yep first let define typeshere defined typesformdata phantom type parameter used enumerated valuesvalid invalid opaque type constructor function hidden also type take place formdataformfield sound like contains information field formsince example single input chose formdata contain single formfield would likely list formfieldnot formdata phantom type also want opaque type result need function construct formdatanote want allow developer construct invalid form want disallow developer manually constructing valid form expose validate function later thathere revealed phantom type used one two way formdata either valid invalid let pause update fetchreposthe important part annotation fetchrepos used string replaced formdata valid restricted function argument fetchrepos invoked valid form data attempting invoke invalid form result compiler errorit worth pausing understanding neat really changed function used produce failure result runtime rather updating guarded check instead enlisted compiler force consumer function send valid data last piece puzzle show invalid valid formdata constructeda formdata invalid constructed invoking invalidformdata function abovea formdata valid constructed invoking another exposed function defined belowgiven invalid form function return result containing valid form fact validhere example piece put togetherellie support defining separate module therefore opaque type difficult show added comment would module separationshould use phantom type based offline online discussion gather phantom type incredibly common use case likely see used frequently advanced type seriesi also personally used extensively form validation example make obvious encourage reader read phantom type continue ask question elm slackcredit additional readinghttps wikihaskellorgphantomtypehttp
89,Lobsters,elm,Elm programming,A vision for data interchange in Elm by Evan Czaplicki,https://gist.github.com/evancz/1c5f2cf34939336ecb79b97bb89d9da6,vision data interchange elm evan czaplicki,vision data interchange elm send information client server literature review json pro integrates perfectly javascript integrates decently dynamicly language like ruby python often human readable con fit naturally typed language dense guidance client server change guidance store information database protobuf protobuf pro protobuf designed dense possible protobuf good support union type protobuf designed evolve application protobuf facillicates use different programming language within google database set use protobufs con must specify format explicitly front graphql pro let database optimization data extracted json format permit query optimization send fewer request optimize request size support multiple language con personally know push design evolving application lesson big project use file big project care asset size decoupling data interchange people useful lesson elm,vision data interchange elm send information client server format information happens server change format client updated yet happens server change format database updated difficult question picking format rather picking format evolve application evolves literature review many approach communicating client server approach tend known within specific company language community technique cross border outline json protobuf graphql learn json within javascript community common use json format data interchange pro integrates perfectly javascript integrates decently dynamicly language like ruby python often human readable maybe need prettify though con fit naturally typed language dense field name like price easily repeated hundred thousand time single message guidance evolve client server change change json write test everyone kind make seems guidance efficiently store information database database person deal protobuf google used protobuf everything think effort better xml share many json weakness pro protobuf designed dense possible specifying format proto file beforehand send bit without price annotation data protobuf good support union type latest version support oneof making union type pretty easy represent protobuf designed evolve application two major rule protobufs google never remove existing field every field optional together rule guarantee data format always fully backwards compatible ever add optional field client check field x great maybe server updated yet decouples code data exchange code backwards compatibility protobuf facillicates use different programming language compile proto file c java javascript etc unpack protobufs nice data structure within language decide revamp client server need revamp data interchange format make thing feel nice within google database set use protobufs actually format client server database think pro exists outside google right least point theory server database work together better con must specify format explicitly front rather implicitly every time write data interchange code client server include mainly see people would feel way personally feel planning ahead save time within matter hour people see delayed payoff differently graphql facebook introduced graphql last year think effort address question data interchange format evolve client server change pro let delay database optimization clientside developer say data need rather asking database engineer add specific query database folk observe traffic pattern optimize based focusing work problem area effectively data extracted json mean work well use javascript flow typescript thing like format permit query optimization send fewer request basically two graphql query combine one mean le time handshake server le data sent across two query needed overlapping data optimize request size request specified graphql file choose dense representation certain request long client server think thing need say support multiple language graphql file generate code javascript python ruby elixir whatever else changing new language require redesigning data interchange format con personally know push design evolving application may culture required field never remove field like protobuf know detail sure pro community user embrace approach practice lesson big project use format file decouples data interchange format particular client server big project care asset size serving lot data lot people couple bit really add decoupling data interchange format people useful google backwards compatibility facebook making sure clientside work blocked server folk lesson elm reason think json thing fine great choice basically every metric matter building reliable efficient flexible application seems unreasonable think folk using json purpose year moment elm ecosystem folk quite upset write json decoder hand rather questioning idea using json wonder elm generating json decoder history building support particular interchange format pretty poor example java assumed xml way go scala followed tradition actually xml syntax part parser xml valid scala think easy argue direction wise know effort get scala contrast success story protobuf graphql around specific format file generating code whatever language need require specific language support language get tied interchange format viceversa hope rather lamenting elm lack language feature historically turned poorly folk start getting world data interchange format rich history many option going route mean better interop language smaller asset sent across wire need deal json hand need clutter language
90,Lobsters,elm,Elm programming,Modeling with Union Types,https://robots.thoughtbot.com/modeling-with-union-types,modeling union type,previous article enums union type tagged union algebraic data type adts elm,previous article showed refactor messy boolean code using enums aka union type many language turbo charge enums allowing parameter often called tagged union algebraic data type adts tagged union killer language feature allow expressively model problem domain avoid pitfall relying entirely primitive using elm example due firstclass support tagged union strict helpful compiler unlike language like c javascript ruby elm null nil explicitly tag value possibly present maybe often called option language like swift instead everything could null unless explicitly checked work assumption everything guaranteed present unless wrapped maybe incredibly useful easy overuse particularly coming language based around null elm record lot field maybe smell take example following booking type alias booking date maybe date option maybe bookingoption ticket maybe ticketquantities user first start selecting date request made api fetch option date user selects option another api call made see available ticket option using maybe problematic allows invalid combination selected option without date possible state represented booking type legitimate empty state three phase selection use tagged union represent legitimate state type alias booking date date option bookingoption ticket ticketquantities type bookingprocess notstarted dateselected date optionselected date bookingoption ticketsselected booking coming language based around null easy turn maybe whenever data quite fit shape structure rental may may option selected may may description stand nested maybe allows four state super obvious also annoying chain maybes order access description type alias rental date date option maybe rentaloption type alias rentaloption name string id string description maybe string business perspective three state option selected option selected described option selected described easily turn code union type type rentaloption notselected string string notdescribed string string complete string string string hiding behind maybes looking larger problem trying force data multiple shape single shape using maybe whenever thing quite fit union type great solving problem allow u specify multiple shape data example say modeling deck card type alias card suit string value int allows u create card like also allows u create completely invalid card like solve problem creating enums list valid suit value type suit heart spade diamond club type value two three four five six seven eight nine ten jack queen king ace type alias card suit suit value value great card always valid far card shape joker really value suit could use maybe try force existing shape perhaps type alias card suit maybe suit value maybe value card nothing nothing joker could get rid one maybes making joker either suit type value also allows invalid configuration like joker joker heart trying force joker single card shape going work instead use union type allow multiple shape type card standardcard value suit joker
91,Lobsters,elm,Elm programming,Elm in the wild: A Sandwich Delivery Game,https://www.innoq.com/en/blog/sandwich-delivery-game/,elm wild sandwich delivery game,elm github cobi sandwich delivery game cobi devkit brezelbike haskell elm guide elm blog post ease function easingsnet outexpo ease function inexpo ease function leaflet carto elm guide,new language often look shiny cool playground example bringing wild code example tutorial often reveals true value new language order evaluate shininess elm language compiled javascript used building web front end decided use scoped project programmed sandwich delivery game smart city exhibition basel switzerland sandwich delivery game game player virtually deliver many sandwich possible customer sitting reality fixed bike cellphone attached handlebar front player show position map turning handlebar change orientation player map moving forward realized speed sensor sensor attached back wheel bike turn fixed trainer stand run resistance speed wheel sent cellphone order attract attention passersby device screen mirrored wall front player impression setup exhibition seen image image setup bike exhibition image close view game action post first describe way finding idea game introducing elm winning loosing point project close description overall architecture latter show challenge integrating javascript library elm especially central map component well connecting input hardware component game logic source code viewed github requirement build something catchy interactive visitor exhibition stand smart city exhibition basel exhibition wanted address topic connected mobility therefore upgraded ordinary bike cobi hardware ie smart phone holder controller right hand along speed sensor phone mounted handlebar show game screen bike mounted trainer resistance back wheel setup player could move faster slower using pedal break well move left right moveable handlebar letting player virtually move around city basel must feature see image moving around especially virtually boring give task player brainstorming discarding idea like tron derivate platform game german call jump n run finally arrived delivery game tough deadline discussion whether player deliver ice cream sandwich pretty short score introduced motivate competition player within time frame two minute player deliver many sandwich possible delivered sandwich chf earned driving street well ignoring red traffic light penalized realistic swiss fine chf chf order make scenario even realistic green wave along virtual bikers added column bikers approaching red traffic light triggering traffic light change green therefore following group virtual bikers may reduce waiting time red traffic light player intro screen opened laptop scene final game seen image image intro screen game image scene final game diving learning architecture let deliver sandwich sandwich delivery game play keyboard mobile phone described intro screen depending device game opened published version score server deactivated since different input method keyboard mobile phone comparable moreover would easy fake result bike integration done cobi devkit removed code since devkit released yet time game developed moreover sandwich delivery game first externally developed cobi module therefore surely also test released devkit side note cobi evolved completed idea brezelbike elm purely functional programming language root haskell elm similar clutterfree syntax statically typed powerful type inference elm far language also provides architecture thrilling feature elm even though concept architecture old rusty since modelupdateview elm embodies concept way feel naturally develop programm architecture elm modelupdateview architecture realized follows model defines state application simply expressed type alias type alias model time time state state mapinitialized bool anything may change runtime described model otherwise updated update function update function update state first parameter update msg msg union type algebraic data type adt everything happens program may cause update model type msg restart onmapinitialized tick time second parameter update current model updated result updated model update msg model model cmd msg update msg model case msg restart onmapinitialized model mapinitialized true cmdnone tick newtime little bit confusing update also return command cmd msg command http request generating random number along updated model update request asynchronous operation ie operation pure function result operation msg get fed update elm runtime counterpart command shown post subscription subscription sub msg also produce msg update time javascript callback example subscription curious one concept command subscription described effect chapter elm guide third part view map model html view model html msg view model let div htmlattributesid elmmain map mapoverlay msg return value view also generate msg update function example button clicked another noteworthy feature elm surprisingly incomparably friendly compiler compiler state compile error also try provide solution give hint one compiler error error srcelmmainelm module build failed error compiler process exited error compilation failed type mismatch srcelmappbikerelm branch produce different type value nextroute case constail bikerroute h newbiker route conscons h nothing else newbiker branch type maybe id int lastlocation location location location speed speed route con location else branch id int lastlocation location location location speed speed route con location hint need match matter branch take always get back type value usually long compiler error mean something bad happened especially coding c true elm looking error message following information printed apparently compiler complains type statement problematic statement printed start line file bikerelm order help fix bug compiler state inferred mismatching type branch branch type maybe id int else branch id int therefore thing compare fix type problem branch return maybe whereas else branch consequently changing line newbiker solves problem also note hint end compiler error help understand reported failure compiler complain satisfied also try provide information find solution give hint improve understanding error occurred consequently compiler played small role onboarding process supporting trainee nice error message already mean architecture elm force developer describe application safe way shortcut updating current state using update also way present nonstatic information view function providing via model elm also take runtime developer care developer provides update view function subscribes effect like mouse click callback javascript time calling implemented update view function done elm runtime whenever required general main loop update happens msg sent update together current model result new model new model put view result new view new view shown wait new update first sight loop seems restriction developer simple force developer express everything function type end loop needed power additionally prevents developer hopefully unknowingly stupid thing like modifying state anywhere handling concurrency side effect carelessly important enough mention elm render complete page call view function elm keep copy current page computes difference current new page knowing difference elm update part page information technique called virtual dom well elmprovided performance test found elm blog post elm architecture nature language lead fact satisfying compiler becomes like talking friend passionate discussion compiler always program worked every time intended pretty astonishing faced runtime error except hit bug elm compiler turn rooted javascript limitation another advantage arises declarative description view animation almost trivial subscribing time every update function get called every animation save start time computes new position object time matter fact notification game poping next player arrow animation notification indicate remaining time earned money penalty animation notification text move simultaneously get smaller time order stylish ie linear ease function used available ease function easingsnet simplification code follows type alias notification text string started time duration time viewnotification float string int notification form msg viewnotification time text index n let lifetime n nstarted nduration time nduration fontsize n lifetime n easeoutexpo basicsround paddingtop n lifetime n easeinexpo tofloat position paddingtop index n rightjustified fontfamily arial fontcolor ncolor bold graphicsrendertext fontsize n text lifetime notification describes long already active note notification negative lifetime removed update function fontsize computes font size based lifetime outexpo ease function paddingtop computes position based index notification older notification shown newer one inexpo ease function lifetime part letin function like position rightjustified etc graphic library used create viewable form since elm transpiled javascript ie file hard modularize elm application separate loosely coupled program possible develop independent elm program let communicate javascript bridge subscription command certain become tedious general elm intended creation single page application spa consequently good developing exactly spa sandwich delivery game pure spa reasonable program game way game capture whole page control every single pixel screen nevertheless modularizing within single application becomes problem well let model well update function get bigger bigger every added feature point update function maintainable understandable question split function arise one solution create subtypes msg handle function subtype update act router delegate message handle function type msg type b update msg model case msg model still every message enters update function solution certainly expressive understandable connecting different module nonvisible router application delegated update msg could expressed one line specific handle function already big easy win regarding comprehensibility update msg model model cmd msg update msg model case msg restart model restart onmapinitialized model mapinitialized true cmdnone tick newtime handletick model newtime roadsresult result handleroadsresult model result trafficlightsresult result handletrafficlightsresult model result sadly currently support ide refactorings like extracting code smaller function would handy modularizing function debugging elm different well therefore need time get used advanced approach would use elm debugger opened live view see image image debugger lower right corner image game opened debugger history message debugger neat feature first debugger history message passed update function therefore state application viewed doubleclicking one message show state resulted message pretty powerful analyzing bug also handy history exported imported order share program run reconstruct run later contrary initial expectation debugger stop program selecting message history since subscribed basis time message time content still flow update function moreover time message side effect since draw element map see chapter game architecture flow consequently debugger despite analyzing history message due tight interaction javascript universe useful u nevertheless poor man debugger printing message console good enough alternative another downside onboarding hard people used functional programming wrap head around handling thing functional way example generating random number side effect mean command returned update function generated random number asynchronously received system update function via msg handling correctly painfully first sight often clarity arises within developer problem expressed way order free side effect similar often one first experience correct handling nonexistence maybe workaround null scala end lead learning using pattern functional programming game consists javascript elm component interacting provide game experience core screen game city center basel presented map via leaflet tile served carto since leaflet javascript library elm application send command javascript updating map element shown side javascript component listens navigation input event depending device keyboard input callback orientation api andor callback cobi library callback forwarded elm via subscription mechanism see elm guide overall architecture responsibility javascript elm component described image image overview architecture initialization configuration elm application done javascript elm application initializes basic layout page javascript part notified map drawn following request elm lowest layer map initialized drawn javascript top overlay layer drawn used elm show sidebar player notification navigation speed sensor bike orientation cell phone received via callback javascript alternatively keyboard input supported nonmobile browser info forwarded elm due game play due update navigation input elm update displayed map element well shown map sector rotation map element game bikers blue dot player arrow traffic light hot spot sandwich request circle number street architecture le given choice use elm nevertheless proved robust viable despite integration javascript elm hardware programming elm fun productive time language simple powerful architecture also power million javascript library still lie hand easy integrate javascript holy world elm universe developing game proved concept elm well thoughtout way integrating javascript may enabler lot program written elm hand elm young mean breaking change release still happen also thing like tool refactoring still missing rather highlevel nonetheless nonnegligible problem new product elm conclusion use elm every case meaningful every case try mimic architecture provided elm order stressfree life
93,Lobsters,elm,Elm programming,Elm and React: Convergent Evolution,https://www.youtube.com/watch?v=jl1tGiUiTtI,elm react convergent evolution,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature evan czaplicki convergent evolution youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature evan czaplicki convergent evolution youtube
96,Lobsters,elm,Elm programming,Advanced Types in Elm - Opaque Types,https://medium.com/@ckoster22/advanced-types-in-elm-opaque-types-ec5ec3b84ed2,advanced type elm opaque type,advanced type elm opaque type part opaque type opaque type opaque type problem sortedlabels sortedlabels aslist sortedlabels sortdirection sortedlabels sortdirection sortedlabels addarticle addkeyword addkeyword aslist sortedlabels list set sortedlabels solution sortedlabels opaque type sortedlabels sortedlabels ascendinglabels descendinglabels sortdirection aslist addlabel aslist exposed sortedlabels set list string set string sortedlabels ascendinglabels descendinglabels sortedlabels settolist setfromlist setinsert module definition change code consuming module also change extensible record,advanced type elm opaque typespart opaque typesthere handful way use type elm might see hello world app may commonly see published package production application post introduces opaque typeswhat opaque type opaque type type hide internal implementation detail within module statement seems benign surface incredibly important concept ecosystem enforces semantic versioningthe problemlet assume using opaque type create sortedlabels module meant track label recordslet pay attention line code first sortedlabels aliashere identifying module two important piece data list string label union type indicate sort directionnext let look implied invariantthe intent behind function consumer module invoke return sorted list string label given sortedlabels recordlastly let look module definitionthe aslist function exposed expected sortedlabels notice sortdirection type constructor function exposed part necessary order consumer module create record fit sortedlabels shape sortdirection also neededhere example sortedlabels module might consumedthis greatest looking elm code nasty part point outthe implementation detail sortedlabels leaked addarticle addkeyword functionsthe addkeyword function overly verbose closely resembles nested record update syntaxthe implied invariant label sorted upheld call aslist function use sortedlabels unsorted waythe code protected breaking change let say realize label unique rather using list represent label want use set able update sortedlabels module without causing breaking change currently implementedthe solutionlet refactor sortedlabels module use opaque typesok code let analyze thisthe sortedlabels alias became type single constructor function uncommon see constructor function name match type namethe constructor function sortedlabels exposed module definition type opaque instead ascendinglabels descendinglabels function exposed construct opaque typesortdirection longer need exposed purely type used internally modulethere one way get list label aslist function give u greater confidence sorted invariant upheld also mean addlabel need care adding new label correct sort order since sorted aslist function function allows see labelsnote opaque type special syntax essentially type type alias whose constructor function exposed modulethe code consuming module also clean littlewe traded verbose module implementation readable code consumes module sorted invariant broken consuming code anymorethere one benefit remember part duplicating label sortedlabels implemented set hood would nice way prevent duplicatesthis refactor changed lot fact added line code changed list string set string flipped argument sortedlabels type matter convenience cascaded change constructor function invocation ascendinglabels descendinglabels also caused minor change function pattern matching sortedlabels also sprinkled settolist setfromlist setinsert necessarythat seems like lot change well module definition change may changed underlying implementation type module still exposing api result code consuming module also changethis great clean separation consumer module need know module internal implementationas stated earlier also important elm package ecosystem semantic versioning enforced use opaque type confidently change implementation detail package without concerned bumping major version packagemore importantly need concerned changing implementation detail module package cause rippling effect code consuming module packagenext extensible record
100,Lobsters,elm,Elm programming,Ellie Live Stream by Luck Westby,https://www.youtube.com/c/Ellie_editor/live,ellie live stream luck westby,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
101,Lobsters,elm,Elm programming,"Elm In Production: 25,000 Lines Later",https://charukiewi.cz/posts/elm/,elm production line later,roompact trying elm use elm work teaching elm using elm reflecting elm elm incredibly powerful type system union type must must elm great compiler describes line elm code built since never thrown runtime exception writing functional style significant productivity benefit pure function referentially transparent immutable value higherorder function pattern matching modelupdateview architecture wellsuited building web application elm architecture model update view elm powerful debugger time traveling debugger elm readable syntax elm community friendly helpful relm elm slack elm discus elm application excellent performance additional optimization easy nonoptimized elm code able outperform react angular ember performance par react angular htmllazy htmlkeyed elm application rather large compiled google closure compiler version written nodejs elm core library yet certain web api binding interoperability javascript code safe easy javascript interoperability port flag elm language core library prone change new version compiler released elmmdl elm might seem hard actually quite easy inverse also true conclusion,roompact make saas product used university residence life department across united state software provides array feature range formbased tool digital roommate agreement email text message broadcasting central news feed act communication tool data aggregator residence hall staff roompact founded since inception combination plain javascript jquery assortment jqueryesque library entire front end application built october realized long past due upgrade straw broke back occurred feature worked summer released august already started feeling like legacy application built singlepage application spa making heavy use ajax call jsonbased restful api back end line front end code already becoming difficult work modify hardly month release turn jquery spaghetti thought trying elm search replacement front end framework considering react vuejs top candidate several week feeling examine elm closely read elm past showcased haskell meetup attended chicago mean advanced haskeller making consideration use elm knew several year writing small haskell program reading language would left knowledge transferable elm also belief benefit statically typed functional programming made opportunity least try elm tempting pas decided follow general strategy outlined evan use elm work post one day november set make small internal tool solved problem ui configure certain one feature project took three full day complete experience involved lot fighting compiler resisting feeling trapped write functional style end written bit line elm realize despite running compiler error often completely eschew technique commonplace imperative code constraint imposed elm actually rather helpful compiler offered protection silly mistake functional code easy read naturally highly composable type benefit read learning fundamental haskell teaching elm week finishing little project introduced one engineer elm would writing another internal tool quite bit larger mine importantly previous functional programming experience whatsoever order able adopt elm company absolutely imperative would able get productive completely foreign language rather quickly order accomplish approach pair program significant portion initial project make write code emphasize importance reading type signature code documentation referencing treat compiler error helpful feedback rather signal indicating failure practice approaching problem functional mindset eg apply listmap listfilter rather loop array mutation project took week complete end result highly successful learned quite bit elm worked together importantly end engineer comfortable enough elm work independently extended period time lesson success also proved week intense training someone never written functional code build solid understanding basic elm within month able work independently code eventually make production work gotten really interesting another important factor emerged process human one writing elm code fun interesting favorite quote newtoelm engineer process one hearing top initial priority looking new tool reassuring thing hear chief technology officer company whose main focus build software responsibility end ensuring team productive view obligation ensure team member feel importance work engages work personal affinity towards continually develops professionally simply writing code elm immediately hitting two three goal using elm two trial elm successful evidence needed going move forward elm first userfacing application elm would come short order without going extensive detail spent entire first half making largest complex feature roompact ever seen highly customizable formbuilder system integration rest data software almost every single piece data page feature dynamic question input type order value tag answer form template submission edit history etc need managing data effectively paramount moreover data would shared across multiple view seamlessly edit form template would reflected corresponding form submission creation page immediately new form submission would visible multiple tabular view addition individual page view scope complexity feature extremely broad would also serve replacement two existing feature longer uptopar worth updating would easily highstakes project ever undertaken mind quite convinced elm would best tool job used elm entire front end released early june line elm code form single elm application feedback summer user nothing short glowing certain decision use elm make possible build intricate front end high degree complexity without making compromise performance reliability reflecting elm rest post going outline learned used elm strength weakness meant elm tutorial meant inform someone littletono knowledge language distinguishing feature every point discussed aimed addressing experience using elm production setting software likely written several people must bugfree performant address certain set functionality requirement see significant use end user elm incredibly powerful type system relative front end tool type system distinct powerful feature elm statically typed meaning code verified compilation process later importantly elm allows creation algebraic data type referred union type elm allows programmer model much business logic application type system verified statically compiler rather code evaluated runtime one simple example threeway state suppose tag input field arrive page input certain tag may already present edit tag list either adding removing tag catch press return previous view application tag list must revert original state press change must applied number way javascript one solution would addition master tag array field create temporary array added removed tag tag change apply master array keep record change corresponding temporary array tag removed remove master array add removed array tag added add master array added array apply revert change depending final user action button pressed use tag stored temporary array permanently save change egâ http request back end button pressed use temporary array identify tag add back remove master array clear temporary array javascript solution relies using several data structure help bookkeeping keeping track tag added removed might work make many consideration order avoid possible error something reinitialized correctly user visit page second time resetting every time need keep tag list user see dom sync state chose approach great way model current state tag tag attempting might involve adding status field containing string indicates one three possible state worse yet could try model juggling several boolean field eg addedstatus removedstatus even singlefield approach likely result chain ifstatements perform string comparison several place program also ensure status field always initialized tag object order protect runtime error could attempt solve latter problem creating prototype function extend tag constructor object nothing forcing anyone use prototypal function create tag object begin short adding field tag object encumbrance remember handle extra field throughout program contrast elm modeling possible state tag incredibly easy write follows example every value type tag contain tagstatus field contain value type tagstate turn one three state want represent important thing note every tag value must tagstatus field must always contain one three defined tagstate value field initialized egâ json decoder tag value handled exhaustively egâ view code program compile show example latter scenario elm great compiler compiler heavy lifting enforcing constraint type system would consider huge asset writing elm code statically typed language compiler league consider snippet code section type every tag application always tagstate see would use advantage address problem keeping dom sync data note would possible restructure code way display empty div case removed tag code result clearest example forgotten handle one case suppose include removed case error missing pattern tagdisplayelm case branch possibility case tagtagstatus current div class tag text tagtagname added div class tag tagadded text tagtagname need account following value removed add branch cover pattern seeing error first time check hint http recommendation wildcard pattern debugcrash important detected error module compiler tell u cause error exactly need fix large majority compiler error elm written manner wildly helpful dealing something like potentially dozen userdefined type numerous possible value particularly helpful one developer might editing another code necessary look definition tagstate type order safely edit code relies miss something compiler let know one key benefit come combination static typing powerful compiler elm absolutely never encounter runtime exception talk recorded april richard feldman noredink describes line elm code built since never thrown runtime exception writing functional style significant productivity benefit everyone know elm know functional language however think relatively developer written enough functional code build appreciation pleasant reading writing functional code productivity gain come result hallmark feature elm code pure function virtually function elm considered mean given set parameter function always produce result function also referred referentially transparent meaning replaced corresponding return value without altering behavior program constraint enforce property pure function lack ability produce side effect making http request changing html page printing output somewhere etc trait combine result significantly lower cognitive load required read elm code example see function whose type signature int int meaning take one int parameter return int value safely assume sort numerical manipulation without side effect searching code validates email address know look elsewhere perhaps function take string return bool immutable value value elm immutable changed set may seem limiting someone coming writing javascript functional paradigm changing value necessary standard approach return new value rather overwrite old one immutability eliminates whole array possible issue program ranging race condition caused concurrent code uncontrolled global state modification higherorder function higher order function simply function take another function parameter return function result style programming common elm lead code well suited function composition turn reusability take look example map function take function applies function every element list code square function applied every element normallist code evaluated squaredlist contain pattern matching without doubt one useful feature elm pattern matching allows write code get evaluated value examined match defined pattern consider following example code combine requiredpermissionlevel currentusergroup parameter tuple case statement evaluate together try match one case value match value case statement use avoid define standardpermissionlevel administratorusergroup administratorpermissionlevel administratorusergroup two separate case instead tell compiler produce code evaluates true anytime user administrator also use value final case statement catchall deny possible combination required permission level user group modelupdateview architecture wellsuited building web application core architectural pattern every elm web application referred elm architecture consisting three main part model state application model consists single data structure contains every piece data used application usually grow incrementally application grows feature complexity structured developer application model take form record type similar object javascript may number top level field may type data structure including record type update portion application handle change model well io elm application perform http request calling external javascript function etc portion program change state model perform io update called anytime msg value produced application msg value usually represent action may additional data bound eg usersearchinput john view portion program render html handle user input view always take model argument conditional logic us data dictate html page changed runtime must based data model view automatically called elm runtime anytime value model change user input view produce msg value result elm runtime invoking update general execution elm program follows model enters particular state view rendered based state model user interacts application msg value produced update called receiving msg value parameter result change model return step structure separation concern different portion application make easy build later refactor even extremely large application structure also eliminates nearly issue data going sync dom different dom element sync oneanother view always rerender dom based content model someone used using type architecture seeing action first time may feel like magic uncommon think change value model html relies value updated elm powerful debugger one feature released latest version elm known throughout elm community time traveling debugger opened debugger display current state program well history msg value produced user interacted program one older msg value list clicked entire elm application revert point history execution program include state point time well entire content dom clicking msg list effectively allows one replay entire history current session entire history exported json file user asked reproduce step led bug export history send history file developer fix problem debugger easily enabled via debug flag appended compilation time requires external tool plugins elm readable syntax may point contention opinion syntax largely taken haskell readable tends quite terse individual line elm code short away unnecessary curly bracket semicolon function parameter delineated via space function variable start lower case letter always written camelcase type module name always start uppercase letter written pascalcase elm code indented space killing tab vsâ space debate indentation largely matter place begin though community us utility autoformat code discussed elm community developed number tool time remove many pain point development standard elm binary come four primary utility elm make compiler also enables debugger via debug flag elm package package build tool used quickly install new package download dependency existing project elm repl simple readevalprint loop good way test code idea command line elm reactor simple web server websocketbased live reload used rudimentary development elmformat utility autoformats code community standard editor plugins autorun time file saved elmupgrade utility help automatically upgrade much code new version elm released later elm community friendly helpful experience following three community best place elm help discussion relm elm reddit community place news general discussion elm slack elm slack team great place go help certain topic always user active experience skill level range total beginner expert surprised hear answer people obviously advanced knowledge thing like elm compiler reassuring know language expert willingness help elm novice elm discus elm google group like two community active discussion ranging beginner asking help discussion advanced topic project proposal etc elm application excellent performance additional optimization easy although elm high level language javascript compiler produce extremely fast august elm last version elm time writing even nonoptimized elm code able outperform react angular ember different set benchmark posted may performance par react angular among fastest framework benchmark slowdown relative optimal vanilla javascript implementation benchmark fastest framework intended production use inferno scored practice runtime performance rarely concern elm normal web application event additional optimization required elm two library increase performance application htmllazy contains function used cache result view function reducing need rerender certain element htmlkeyed contains function used optimize situation element getting added removed reordered list function module dropin replacement function standard html module meaning substantial rearchitecting code required apply function elm application rather large compiled amount code produced elm compiler somewhat lengthy line application compiles file line javascript size fortunately using google closure compiler simple optimization enabled file reduced mere size minor downside using gcc written java java runtime required run version written nodejs considered experimental release experience compiler far slower large javascript file one case powerful core linux machine whereas java version take second complete nodejs version take second substantially weaker hardware like instance used development build environment javascript version would take several minute run elm core library yet certain web api binding interoperability javascript code safe easy everything possible native elm code example official library using localstorage api elm api still developed however good news elm well thought javascript interoperability two primary method port used talk javascript code outside elm application runtime technique also used send data elm function elm application object expose flag used set value elm initialization application may used set value passed browser web server elm must access user configuration setting authentication token technique would likely used elm used full stack mvc framework ruby rail laravel distinguishing feature interoperability model ensures type safety integrity program even though elm application make use flag port still use compiletime type checking never encounter runtime exception elm language core library prone change new version compiler released point may sound scarier implication certainly considered using elm production use elm currently version release coming likely next month released december right finishing second small elm project result experienced process upgrading elm first two small application give summary experience process well documented relatively simple several syntax change handled elmupgrade tool mentioned change way http library worked spend time portion process likely took lot longer would today new elm wait upgrade dependency library upgraded well add last point may huge potential ramification production application somewhat reserved using external library application particularly avoiding one large dependency tree lot code foresee scenario dependency used application get abandoned team may support certainly risk library language elm compiler refuse even attempt compile application unless every dependency project support current version abandonment scenario take place single module library line code maintaining library likely quite straightforward may even require change short version bump package file would stay far away library like elmmdl material design implementation elm contains line elm code application becomes highly dependent library maintainer stop supporting make decision forking library maintaining never upgrading newest version elm elm might seem hard actually quite easy inverse also true unique feature often come together produce language often flip definition head want add new possible value one union type necessitate change code dozen place application easy start changing type definition compiler error help find everywhere need updating want decode json hard especially json heavily nested must decoded custom type defined application require understanding json decoding work elm usually result quite bit code application contains line json decoder alone want create multiple different view application complex data interdependency easy elm modelview relationship make type thing almost trivial also almost impossible data get sync across different view want measure height element page moment user click hard order make heavy use event bubbling writing json decoder native eventtarget object produced onclick event generally speaking however trade worth easy task become difficult usually gain sort benefit type safety elm difficult task become easy usually result massive productivity reliability gain particularly elm application reach large size line elm application easier refactor line jquerybased application wide margin elm application age well becoming reliable performant make improvement add feature time jquerybased one slated replacement limitation become prominent conclusion using elm production successful endeavor roompact latest project front end written solely elm exceeded expectation user well managed take set functionality would exceptionally difficult build using old method using strength elm language architecture successfully developed largest feature entire software product date done high degree maintainability reliability post record experience elm point decision use elm first time difficult due risk associated unknown would come departure normalcy decision continue using elm
103,Lobsters,elm,Elm programming,State of Elm 2017 Results,https://www.brianthicks.com/post/2017/07/27/state-of-elm-2017-results/,state elm result,state elm result permalink longer version survey anyway last year result year question response domain applying elm long using elm serious use elm level experience functional programming version elm using language coming go elm news discussion elm slack elm subreddit elm town podcast elmdiscuss format code like use elm biggest pain point use elm json decoder wrote book j interop package ecosystem typeclasses love elm luke westby talked elmconf get slack get slack get slack get slack conclusion stuck ask slack sign elm slack regret excessively listen elm town elm town upgrade start elm group near finally offer brian brianthickscom elm slack brianhicks,state elm result published july minute read permalink state elm result first presented two talk one elm europe one oslo elm day embedded elm europe talk shorter longer version also youtube survey anyway state elm survey take temperature elm community company elm production people experience coming elm learning decent pace tool popular need help last year survey tried find elm conference possible fast forward year already community take data make better way last year result year question year asked question domain applying elm long using elm serious use elm level experience functional programming version elm using language coming go elm news discussion format code elmformat like use elm biggest pain point use elm question turned useful signal excluded analysis completeness sake industry using elm got vague data due vague question wording level influence within team almost everyone answered attend elmconf u bearing question plan attend elm europe bearing question comment answer question incorporated question response year people responded survey almost double last year possible combined answer year last year sometimes question changed enough possible one data set represents year survey domain applying elm answer proportionally compare roughly doubling count top response web development year make sense elm target browser people use lot parity two year may question design keep constant next year see get similar shift question change long using elm year separated curiouslearning started difference elm ok installed editor plugins started project next combine exceed amount answer next category year highest lot people coming community strict time scale year four year year proportionally similar number people gaining year experience year encouraging sign mean people stick elm get value stay happy serious use elm modified scale question chosen generate yearoveryear comparison last year enough nuance measured project kickoff production measure thing like side project production internal production use year added category capture distinction result surprised expected see kind curve people production case instead three productionlevel response add biggest category total cool level experience functional programming question resulted rough bell curve centered around outlier make sense almost nobody think know everything know functional programming know much likely answer word know nothing versus know little also note almost everyone said know haskell answered question humble haskellers version elm using last year latest version dropped right survey ended number people latest version changed much relative year upgrade elm taking place slower elm weird upgrade syntax minor api change much smaller scope removing signal effect syntax change think people would move faster moved weird reputation difficult really use elmupgrade dirty work apply rest api change hand legitimate reason upgrading blocked change give one tool shot language coming hey everybody know javascript aside huge number javascript programmer top ruby python haskell java functional language beside haskell cracked top little surprised expected see people functional programming experience notable top language use dynamic typing system see later elm static type system big draw people go elm news discussion almost everybody us elm slack elm subreddit correlate well long people using elm new user tend subreddit experienced user slack complete disconnect opportunity growth experienced user answer question reddit make welcoming environment newbie newbie get slack find help much faster part chat instead message board also people also notable elm town podcast point episode despite came elmdiscuss good job murphy keep format code elmformat people tried elmformat prefer use give try like use elm response expect popular answer type system great error message fact pure functional language one correlation want point people answered using elm production much likely say enjoyed refactoring experience difference pretty stark one thing surprised kind go well yeah make sense biggest pain point use elm top pain people elm learning curve actually comprised several smaller pain smaller pain tagged eg learning curve fp also people wrote learning curve superset instead strict union specific detail pain json decoder one thing everyone trouble sure wrote book bad get used j interop almost port smidge nativekernel code pain package ecosystem two main concern first people able find package needed within elm eg slippy map second people support web api needed eg web audio typeclasses mention people wanting derive thing majority respondent mentioned wanting method write interface love elm bummer end pain nice thing people left survey comment year programming elm favorite language mine elm first language actually get side project done love ton people experience luke westby talked elmconf elm slack excessively helpful recommend get slack get slack get slack get slack conclusion stuck ask slack many time link slack post couple sign elm slack regret remember excessively helpful listen elm town listening elm town yet go give try good entry point series interview evan czaplicki elm came way learn something almost guarantee upgrade big time investment move code base know right benefit large enough consider elmupgrade helpful start elm group near bunch comment left saying something like really wish elmfp groupconference near want one start one say flippant personally rewarding make community around better make valuable within finally offer something elm community detailed data would helpful shoot email get need survey lot work run help people need make worth get brian brianthickscom elm slack brianhicks get one link see next year
104,Lobsters,elm,Elm programming,Alternative View Layers for an Elm App,https://robots.thoughtbot.com/elm-glimmer,alternative view layer elm app,elm emberjs glimmer complete example github example app pull request work check compare,current fastchanging javascript scene two project following closely rest elm emberjs recently opportunity experiment worked use glimmer emberjs rendering engine view layer elm code write solution actually divided two part using external view layer elm messaging tofrom glimmer application comprehensive walkthrough rather cover important detail build glue two piece check complete example github want know simply play result something surprising elm newcomer work view layer instead writing html template commonplace environment developer designer expected use elm language describe output example normally would something like following tr td class itemid itemid td td class itemname itemname td tr elm would define following function instead itemview item html msg itemview item tr td class itemid text itemid td class itemname text itemname give template benefit elm compiletime type checking helping u identify many error code immediately hand bit verbose arguably inconvenient difficult handle converting existing html generally liaising member team implementing view whether tradeoff acceptable team decide worth pointing though elm type checking major boon language disregard lightly said alternative possible work elm keeping classic htmlbased template answer yes least two option actually first option would write elm library handle example core library elmlanghtml implement htmlprogram expects among thing view argument basis elmbased template like one example custom library would handle thing differently capturing dom event notifying update function refreshing view layer model change could call foobartemplate provide templateprogram problem approach requires certain knowledge elm internal apis least enough write library type posse knowledge look another simpler option second option instead using htmlprogram completely eschew html library create headless program using platformprogram take usual argument except view communicate view layer using elm port let try put something together would example elm program without view layer expects message come port model change program send via another port port module main exposing main import jsondecode bug elm force u explicitly require type alias model int port increment int msg sub msg port reset msg sub msg port render model cmd msg type msg increment int reset subscription model sub msg subscription model subbatch increment amount increment amount reset reset update msg model model cmd msg update msg model let newmodel case msg increment amount model amount reset newmodel render newmodel main program never model msg main platformprogram init cmdnone subscription subscription update update program expose port render outbound passed model change reset inbound set model increment int inbound increment model given amount write html j load elm program interacts simple start let render anything use browser console elm code compiled file called elmjs load follows html head title elm experiment title head body script type textjavascript src elmjs script script var elmapp elmmainworker windowelmapp elmapp elmappportsrendersubscribe function model consolelog render model function actionincrement value elmappportsincrementsend value function actionreset elmappportsresetsend null actionreset script body html open browser file ok get beautiful blank page remember rendering anything yet work console opening inspector reveal output present already render interact elm program using interface created example session render actionincrement render actionincrement render actionincrement render actionreset render clear interface send message elm well elm tell u change model integrate javascript code including templating library time wire one go detail build elm glimmer application side side project check example app see simple way let assume working project application building correctly minimum involve altering html change like following appjs glimmer code turn expects container element id app result rendered body div id app div script type textjavascript src appjs script script type textjavascript src elmjs script time writing standalone glimmer opposed integrated ember beta software outstanding issue one important u glimmer provide way external code communicate component pas data notify change occurred outside addressed point year fact pull request work write line time make mainline glimmer web api use purpose work around glimmer limitation using windowpostmessage successfully familiar web api know commonly used send message frame window app also used send message within current window code may listening let see would work u first html glue code send model template elm notifies u change elmappportsrendersubscribe function model consolelog render model var msg origin core target view action update payload model windowpostmessage msg windowlocationorigin topmost component glimmer app set listener postmessage notification import component tracked glimmercomponent export default class modeldisplay extends component tracked model null component code didinsertelement windowaddeventlistener message evt evtorigin windowlocationorigin return false let data evtdata dataorigin core datatarget view return false let action payload data action update thismodel payloadmodel enough get first render glimmer component representation initial model elm app appear screen next enable communication opposite direction glimmer component elm app use similar code reversed example glimmer component two action increment decrement look like follows increment thispostincrement decrement thispostincrement postincrement amount let msg origin view target core action increment payload amount windowpostmessage msg windowlocationorigin trigger action pressing button whatever appropriate glue code receive message forward elm app inbound port code mirror one receiving message component windowaddeventlistener message function evt evtorigin windowlocationorigin return false var data evtdata dataorigin view datatarget core return false var action dataaction action increment actionincrement datapayloadamount enough get incrementdecrement action going implementing reset similar left exercise reader wondered efficient would sending message across using asynchronous api simple benchmark built simple app show large table update random row push button actually wrote three different simplementations pure elm pure glimmer hybrid check compare see significant difference elm hybrid version glimmeronly version performs way better take pinch salt anyway
105,Lobsters,elm,Elm programming,miso - an Elm-alike written in Haskell,https://github.com/dmjio/miso,miso elmalike written haskell,miso haskell miso isomorphic haskell servant elm redux bobril miso miso ghcjs miso embedded domainspecific language table content quick start stack obtained begin nix nix haskell production sample application architecture link nix script http haskellmisoorg example todomvc flatris snake mario miso plane flappy bird websocket sse xhr router svg canvas threejs simple file reader webvr haddock ghcjs ghc sample application transition application live reload jsaddle readme docker readme building example coverage diffjs code coverage jsdom jest isomorphic isomorphic javascript tutorial pinning nixpkgs binary cache binary cache cachix benchmark according benchmark elm maintainer dmjio commercial user contributing open issue pr contributing contributor code contributor contribute financial contributor contribute individual organization contribute license,miso tasty haskell frontend framework miso small productionready isomorphic haskell frontend framework quickly building highly interactive singlepage web application feature virtualdom recursive diffing patching algorithm attribute property normalization event delegation event batching svg serversent event websockets typesafe servantstyle routing extensible subscriptionbased subsystem inspired elm redux bobril miso pure default side effect like xhr introduced system via effect data type miso make heavy use ghcjs ffi therefore minimal dependency miso considered shallow embedded domainspecific language modern web programming table content quick start get started quickly building application recommend using nix package manager miso binary cache provided cachix possible use stack build ghcjs project support procuring ghcjs removed stack nix used procure working version ghcjs using cabal assume obtained ghcjs mean source code depicted quick start app available begin build sampleapp nix execute command optional use cache nixenv ia cachix f http optional use cache cachix use misohaskell git clone http githubcomdmjiomiso cd misosampleapp nixbuild open resultbinappjsexeindexhtml command add miso binary cache nix installation support linux osx nixbuild fetch dependency miso cache build sample application nix nix powerful option building web application miso since encompasses development workflow configuration management deployment source code haskellmisoorg example unfamiliar nix recommend nix haskell production guide begin make following directory layout mkdir app touch app mainhs appcabal defaultnix tree app app mainhs appcabal defaultnix add cabal file cat app cabal name app version synopsis first miso app category web buildtype simple cabalversion executable app mainis mainhs ghcjsoptions dedupe builddepends base miso defaultlanguage write defaultnix fetch recent version miso miso provide working nixpkgs named pkgs automatically produce nix expression build cabal file import builtinsfetchtarball url http app add source sample application appmainhs build project nixbuild open result open resultbinappjsexeindexhtml development nix nice cabal present building command make available path nixenv ia cabalinstall f nixpkgs put shell w ghcjs dependency project present use nixshell nixshell env view dependency project call ghcjspkg list inside shell nixshell env run ghcjspkg list build project cabal entering nixshell nixshell env run cabal configure ghcjs cabal build incremental development inside nixshell recommend using tool like entr automatically rebuild file change roll solution inotify ag l entr sh c cabal build architecture constructing client server application recommend using one cabal file two executable section buildable attribute set contingent compiler example layout info use stack clientserver setup see link information use nix clientserver setup see nix script http haskellmisoorg example todomvc flatris snake mario miso plane flappy bird websocket sse xhr router svg canvas threejs simple file reader webvr haddock ghcjs ghc sample application haskell language pragma language overloadedstrings language recordwildcards haskell module declaration module main miso framework import import miso import misostring type synonym application model type model int sum type application event data action addone subtractone noop sayhelloworld deriving show eq entry point miso application main io main startapp app initialaction sayhelloworld initial action executed application load model initial model update updatemodel update function view viewmodel view function event defaultevents default delegated event sub empty subscription list mountpoint nothing mount point application nothing default body loglevel used prerendering see vdom dom sync applies miso function update model optionally introduces side effect updatemodel action model effect action model updatemodel action case action addone noeff subtractone noeff noop noeff sayhelloworld consolelog hello world pure noop construct virtual dom model viewmodel model view action viewmodel x div button onclick addone text text m x button onclick subtractone text transition application alternative powerful interface constructing miso application using transition interface transition based statet monad transformer used construct component also work nicely lens based monadstate ie haskell language pragma language overloadedstrings language recordwildcards haskell module declaration module main miso framework import import miso import misostring lens import import controllens type synonym application model data model model counter int deriving show eq counter lens model int counter lens counter record field record counter field sum type application event data action addone subtractone noop sayhelloworld deriving show eq entry point miso application main io main startapp app initialaction sayhelloworld initial action executed application load model model initial model update fromtransition updatemodel update function view viewmodel view function event defaultevents default delegated event sub empty subscription list mountpoint nothing mount point application nothing default body loglevel used prerendering see vdom dom sync applies miso function update model optionally introduces side effect updatemodel action transition action model updatemodel action case action addone counter subtractone counter noop pure sayhelloworld scheduleio consolelog hello world construct virtual dom model viewmodel model view action viewmodel x div button onclick addone text text m xcounter button onclick subtractone text live reload jsaddle possible build miso application ghcid jsaddle allow live reloading application reponse change application code see readme sampleappjsaddle folder information docker developing miso application inside docker container supported allows application built window see readme docker folder information building example easiest way build example nix package manager git clone http githubcomdmjiomiso cd miso nixbuild arg example true build example documentation folder named result miso git master tree resultbin resultbin composeupdatejsexe filereaderjsexe mariojsexe imgs mathmljsexe routerjsexe simplejsexe svgjsexe testsjsexe threejsjsexe todomvcjsexe websocketjsexe xhrjsexe see example recommend hosting webserver cd resultbintodomvcjsexe nixshell p python run python simplehttpserver serving http port coverage core algorithmic component miso diffjs responsible dom manipulation occurs miso application code coverage test coverage made possible using jsdom jest run test build coverage report cd misotests npm npm run test using yarn instead npm yarn yarn test isomorphic isomorphic javascript technique increased seo codesharing perceived page load time work two part first server sends prerendered html body client browser second client javascript application load pointer prerendered dom copied virtual dom application proceeds normal subsequent page navigation handled locally client avoiding fullpage postbacks necessary miso function used perform pointercopying behavior clientside information miso handle isomorphic javascript recommend tutorial pinning nixpkgs default miso us knowntowork pinned version nixpkgs binary cache nix user linux osx distro take advantage binary cache faster build use binary cache follow instruction cachix benchmark according benchmark miso among fastest functional programming web framework second elm maintainer dmjio commercial user contributing feel free dive open issue submit pr see contributing info contributor code contributor project exists thanks people contribute contribute financial contributor become financial contributor help u sustain community contribute individual organization support project organization logo show link website contribute license david johnson
107,Lobsters,elm,Elm programming,Zero Runtime Exceptions in Two Years of Production with 100kloc of Elm,https://www.infoq.com/news/2017/05/elm-zero-runtime-exception,zero runtime exception two year production elm,qcon london noredink explained ellie one billion dollar mistake virtual dom elm package manager,qcon london richard feldman software engineer noredink author elm action manning explained decision switch elm led loc system running production zero runtime exception since provide brief summary feldman key point elm purely functional programming language compiles javascript foster use immutable data static typing creation browserbased apps feldman recount went fullscale elm using smaller sideprojects particular completing month long project using react realized would taken much le time elm fact would accounted amount time would taken u ramp people introduce new technology stack end result would easier maintain feldman identifies number key factor account increased productivity reliability using elm ellie elm live editor sort advanced repl elm providing rich interface write compile render elm code elm incur one billion dollar mistake allowing null value freely propagate system requires explicitly deal using maybe value elm enforces use single immutable value represent state whole ui state associated individual component happens react although model need monolithic value using model elm assembles virtual dom diffed actual dom relevant change applied approach also found react able preserve performance granting simplicity dealing immutable value one huge benefit representing ui state single immutable value possibility handling sequence ui change sequence immutable value associated compiled debug mode elm allows navigate older ui state simply clicking corresponding model value additionally possible export set value developer immediately reproduce faulty ui state generated statically typechecked big selling point elm according feldman making almost always true compiles work major factor behind elm reliability way handle javascript interoperability contrary language compiling javascript indeed elm enforces messagebased approach javascript code run inside service ensures guarantee provided static typing broken untyped javascript code finally elm package manager extensive npm strength particular allows package contain elm code specifically binary allowed make much secure npm additionally allows package build correctly automatically enforces semantic versioning overall feldman say javascript proven quicker get something screen elm ensures higher overall development velocity final remark concern one usual objection using language like elm ie difficulty finding developer hire reality feldman say using elm gave noredink twofold advantage one hand made job post stand attracted developer specifically interested learning elm
110,Lobsters,elm,Elm programming,Machine-checked explicit state: An arrow in the heart of complex web applications,https://blog.reifyworks.com/machine-checked-explicit-state-an-arrow-in-the-heart-of-complex-web-applications-bbe1ef2038ed,machinechecked explicit state arrow heart complex web application,elm programming language elm architecture machinechecked explicit state state state stuff change explicit state explicit add equation defined easily excludes state implicit debugging system model update view elm architecture fit model update message model model view model state explicit machinechecked matter elm community luke westby,elm architecture implement interesting work frontend programming last year aimed solving problem arise program lot ui state reach level complexity making reasonable change challenging time prohibitive elm programming language associated elm architecture take extremely compelling encouraging approach solving problem essay describe machinechecked explicit state mean discus think elm implementation idea step right direction toward finally conquering beast stateful ui programming machinechecked explicit state bit mouthful really twoish idea smooshed together let start beginning state context anything need change order make stuff happen inside application illustration two state web application obvious change taking place two like old kid game changed left three piece state red star green pentagon blue triangle purposefully abstract could represent anything number user care chat message etc right three piece state well obvious change made two number got incremented chat message got edited time went made application transition one state another usually kind external input maybe time user click form input etc word state stuff change explicit state state entered bookkeeping system sort order use application elm architecture state represented code specific way available application user explicit add equation defined easily excludes state implicit stuff accretes time make application challenging change elm place hide state application threaded type checker wild goose chase see ended ended want know change state anywhere made know exactly look aside elm debugging system hook state one fabulous example state explicit enables finally machinechecked mean homework handled bookkeeping system mentioned earlier call bookkeeper type checker elm type checker act assistant making sure change expect propagated throughout application properly accounted want add state elm program roughly add piece state model craft message change specific state update function expose state visually view might seem like lot mean update thing three different place elm program order make even simple change state change yes typically compiler let forget last one forgot like human machinechecked mean pay front guarantee later reminded need thing important visualization hmm missing elm program make change model go ahead try represent view appropriately bookkeep type message make change visible view type checker stop tell created necessary message necessary place order implement change compile usable j file project need stop slow check may seem trivial fancy bookkeeping constantly mechanical ally rely make act stateful web programming considerably easier consistent elm architecture fit bareminimum representation elm architecture shown elm documentation model type alias model update type msg reset update msg model model update msg model case msg reset view view model html msg view model one way read model data structure describes state application change state use update function take message model return model view application function take model return html typing explanation bone architecture sink see nowhere shove phantom state control bookkeeper type checker contention creeping implicit state heart complexity many frontend application elm architecture hobble complexity demanding state explicit machinechecked matter underlying platform web everything audio video networking extremely fast performance general point lacked mature architecture allow developer cleanly map user interaction change underlying data model people undoubtedly created amazing application platform still lot room framework describes precisely creeping complexity state ui tamed opinion elm architecture far perfect encouraging exciting step direction everything advantage machinecheck explicit state described sound awesome elm community welcoming give language chance special thanks luke westby reviewing article
111,Lobsters,elm,Elm programming,The importance of state ownership in Elm,https://hackernoon.com/the-importance-of-state-ownership-in-elm-72f711ceb244?gi=e4e387d1e4cd,importance state ownership elm,,
112,Lobsters,elm,Elm programming,Full-Scale Elm in Production,https://www.infoq.com/presentations/elm-producton,fullscale elm production,infoq homepage presentation fullscale elm production summary bio conference related sponsored content,infoq homepage presentation fullscale elm production fullscale elm production summary richard feldman introduces elm work differentiates frontend technology give practical advice introducing existing javascript codebase bio richard feldman work software engineer noredink author elm action manning publication instructor frontend master elm workshop conference software changing world qcon empowers software development facilitating spread knowledge innovation developer community practitionerdriven conference qcon designed technical team lead architect engineering director project manager influence innovation team recorded may related sponsored content
115,Lobsters,elm,Elm programming,Elm on Rails 5.1 with Webpacker,https://bendyworks.com/blog/elm-on-rails-5-1-webpacker/,elm rail webpacker,elm rail webpacker elm elm language wellorganized fearless install elm webpacker install yarn install elm webpacker rubygems webpacker page install yarn using elm webpacker start writing elm guide elmrails noredink elmactioncable truly,elm rail webpacker elm new hotness frontend programming almost officially supported rail via webpacker gem elm language provides strong typechecking immutable functional programming language compiles javascript browser like characterize writing elm wellorganized fearless something forever wanting frontend let see set install elm webpacker current release webpacker gem support elm yet use master branch easiest way create rail application first bundle install webpacker first sure install yarn perform following gem install rail rail new myapp skipturbolinks cd myapp echo gem webpacker github railswebpacker gemfile bundle binrails webpacker install binrails webpacker install elm install elm webpacker writing released version webpacker support elm see rubygems webpacker page find latest released version past shorter set command work first instruction sure install yarn perform following gem install rail webpacker rail new myapp webpackelm cd myapp using elm webpacker installation procedure get necessary bit installed still need change layout support webpacker elm eventually may want rename appjavascriptpackshelloelmjs file something le helloworldy appviewslayoutsapplicationhtmlerb javascriptpacktag helloelm removecommentout line javascriptincludetag application seeing wo nt really need view make blank page order render layout mkdir appviewsapplication touch appviewsapplicationemptyhtml routesrb railsapplicationroutesdraw root application empty end finally make sure run webpack dev server alongside standard rail server one terminal run binrails another run binwebpackdevserver start writing elm time write elm appjavascriptpacksmainelm quite familiar language wonderful guide follow great rail integration package check elmrails noredink elmactioncable truly write learn love compiler help write code much like tdd help write rail code see compiler error warning view browser console terminal ran binwebpackdevserver better yet add overlay true moduleexports devserver key configwebpackdevelopmentserverjs see error right browser
116,Lobsters,elm,Elm programming,Get Started Learning Music,https://learningmusic.ableton.com/,get started learning music,get started making music,get started making music lesson learn basic music making prior experience equipment required everything right browser get started check box one contains small piece music click box turn playing box discover certain combination like many type music created exactly way mixing matching small musical idea make interesting combination changing combination time combined premade musical pattern next make pattern
117,Lobsters,elm,Elm programming,Elm Roadmap FAQ,https://github.com/elm-lang/projects/blob/master/roadmap.md,elm roadmap faq,roadmap faq suggestion timeline timeline exact date know horizon make singlepage app like improve asset management note scott elmlangnavigation evanczurlparser example localstorage package expanding web platform support high priority behind singlepage apps port note use elm server started today would still multiyear project elaborated upon think better strategy make elm extremely strong choice web apps expanding domain elm compile x compiling x probably accomplish hope go lua erlang hard part supporting domain compiler making good ecosystem putting typed functional language domain mean fun productive practice code easy part project,roadmap faq people want know going happen elm hopefully document help looking way contribute please check suggestion repo timeline timeline exact date know horizon lot people think language feature need implementing feature placed calendar throw people feature done early elm developed first come language design think thing right far valuable thing right easy think short term rush feature language live decade takebacks mistake second looking back playfulness inspiration crucial part elm development example friendly error message began project provide json output code editor huge demand json output spending bit time project became clear error message could dramatically improved one knew possible mean one asking either reasonable prioritization scheme pointless project turned extremely valuable part elm point think scheduling progress kind silly idea conceptual breakthrough scheduled september listening experimenting part process extremely valuable elm far expect continue true make singlepage app like improve asset management major focus creating singlepage apps elm feature fall umbrella include serverside rendering sending html initial response tree shaking trimming unused code usually called deadcode elimination dce code splitting cutting code smaller chunk better caching lazy loading sending code chunk needed particular page basically mean elm singlepage app getting efficient serve note still early say exactly feature release everything work perhaps feature first iteration maybe one cut others released earlier kind thing point list major concern people evaluating elm may need feature particular project perhaps every millisecond page load significant impact revenue recommend measuring thing elm bundle gzipped may actually competitive option imagining work totally reasonable choice hold using elm get hope circle back evaluate elm scott case nearly extreme one developer different tradeoff recommend treating page separate elm module routing module us elmlangnavigation evanczurlparser cmdmap submap swap page example set well provide much nicer alternative routing layer localstorage package expanding web platform support high priority behind singlepage apps first many people think expanding web platform support easy copy j api elm task whole point elm rethink common problem try better figuring right way typed functional language sideeffects take time example elm existed two year added html support imagine people saying rather fragmented ecosystem competing html library varying quality one library great many elm user fact clear default work well within ecosystem huge draw second general policy prioritize thing done thing could done better obviously would great whole web platform available elm today anything missing done port feature singlepage apps expanding web platform seems like highest priority third great deal work actually gone localstorage indexeddb already result good enough released library like released need supported forever switch better api figure programmer may store important information thousand computer world losing data could hurt business offer really solid approach one crossbrowser grow application upgrade browser data new release prefer clear offer yet maybe prioritization choice appeal sensibility today tradeoff seem work scenario fine totally reasonable circle back elm web platform support expanded see work better note many people wonder community expand web platform tried address question language make different choice question recommend checking may suit better use elm server started today would still multiyear project great deal excitement elm server think partially due couple common misconception running language frontend backend folk want share type json sound amazing happens user keep tab open share type directly changing type break code creating serialization format evolve product hard problem elaborated upon simply type solve people want serverside rendering html running server elm really give mean way complicated tool take elm module spit html simpler version work existing server approach explored folk like think language generalpurpose language good good anything people say c generalpurpose language nice web apps people say python general purpose language good operating system make python good operating system compiling c note generalpurpose questionable concept think main thing get elm server ability share library common tooling still pretty neat perhaps worthwhile said think better strategy make elm extremely strong choice web apps expanding domain still lot work web apps try elm compile x compiling x probably accomplish hope many folk tell elm compile x x thing like people suggesting go lua erlang go ocaml c java scala f haskell c rust nodejs hard part supporting domain compiler making good ecosystem python nice scientific computing thing like numpy scipy whatever backend elm nice frontend ecosystem like html library elm architecture particular code generation putting typed functional language domain mean fun productive practice say choose go erlang make elm server language great question write typed server sideeffects true spirit elm feel nicer server language hard question answer may done writing compiler backend like take make project like worthwhile ultimately ideal form project like bespoke backend going assembly directly point think hacking something together extremely time consuming ultimately hurt elm reputation focus api quality instead recommend watching code easy part learn collaborate elm community wild west anarchy like j recommend project promising way contributing elm ecosystem code
119,Lobsters,elm,Elm programming,"Growing a language’s ecosystem: Elm, a case study",https://medium.com/@eeue56/growing-a-languages-ecosystem-elm-a-case-study-b94a9122c589,growing language ecosystem elm case study,growing language ecosystem elm case study prelude unblocking pull request elmnativeui ossi project take away prior experience elmarrayexploration elmarrayexploration robin take away indepth knowledge ellie ellie luke westby take away contextaware pull request elmcss elmcss richard feldman lightning talk take away code review elmbenchmark elmbenchmark brian hick take away group dedicated conclusion,growing language ecosystem elm case studypreludein blog post going explore take grow ecosystem language ecosystem considered combination tooling package documentation particular going look approach helping community grow ecosystem without needing single person everything explore range package tool exist elm ecosystem discus briefly helped come aboutevery package tool list awesome author many many example like one fit post best mainly look package tool helped small amount perhaps another helped point blog post examine little need personally go long waywhy one person time world might able keep top one two project project le attention give healthy ecosystem contains well designed package lot thought put themin world academia work usually split research group individual researcher might particular topic subsection work looking week meet chat going usually mentor lead session always case role mentor able identify resource people need help certain problem basic idea mentor get work done helping people work rather role mentor know individual topic rather good understanding area wholein world open source also applies one great thing open source community rest blog post examine way help community role mentorunblocking pull request elmnativeuielm native ui project intended provide way work react native via elm ossi created project explore world making elm work mobile application first created idea use alternate form program opposed pure j html version would use reactnative view instead html running elm normally j threadthere limitation type valid main function elm type used elmnativeui would work elm compiler ossi spoken evan met ossi stockholm meetup explained evan said needed changed got home submitted pr enable using elmmake way needed whole pr roughly two line elmnativeui also used elm kernel code order render reactnative component also created tool trying kernel code locallyto day run reactnative app maybe time general idea work never used extensively ossi however important part elmnativeui reactnativetake awayit important fully understand project tool someone know need help take care order let focus important part pivotal part application pr good understandingprior experience elmarrayexplorationelmarrayexploration alternate library robin elm core array implementation numerous issue array implementation elm core package something looking robin previously working implementing sort alternate data structure elmwhen robin implementing project discussed lot elmdev channel slack previous experiment looking fixing array implementation decided ideal structure pure elm implementation complex immutablearray data structure use lowlevel wrapper around fixedsize j array implementation would allow code fast maintainable time pure elm implementation would slow complex pure j implementation originallythis advice along codereview helped elmarrayexploration become recommended array implementation use elm robin hard work along way conversation provide helpful info based previous experimentstake awayif someone start project area previous started similar project sometimes best way productive help achieve shared goal make thing way discus explain choice made previously better position finish work help indepth knowledge ellieellie application like jsbin designed sharing elm code snippet preview compiled version luke westby created coworker intending help community needed way sharing snippet since become popular way showing demo world elmluke came onto elmdev channel asked bunch question couple one elmpackage work wanted download package share across every ellieapp save disk space bandwidth cost luckily depth knowledge elmpackage work due various issue past able point direction package listingsonce good beta site invited u try left whole bunch feedback roughly around different point thought among thing found couple weird visual bugstake awaysometimes need help answer question test something helpful code sometimes faster answer question someone middle context fully bring contextcontextaware pull request elmcsselmcss way writing cs pure elm let use elm function order construct cs web apps richard feldman came idea implemented version lightning talk idea gone prototype something used production multiple elm web appswhen met richard reactiveconf year told original demo text output cs managed get elmcss api producing string played elm virtualdom lot time knew trivial implement actually created tag style string attribute see tiny bit help helped turn live demo something people could really see visuallytake awaya small amount help big impact context give help important someone working demo think aid presentation someone designing api think long term right help wrong time wrong helpcode review elmbenchmarkelmbenchmark library brian hick benchmarking elm code would thought defacto way benchmark individual function elm elmbenchmark seek fix problem brian ready publish came elmdev channel ask code review took look code gave recommendation nothing big mostly checking possible cause runtime error kernel code needed usetake awaya code review world open source useful thing case vetting potentially harmful code order ensure would function expected reviewing code also helpful ensure someone else understands code library published package potential consumed thousand user disappear community someone else need carry work library elm group dedicated thatconclusionthe help give advice knowledge able unblock people vital let amazing ecosystem healthy many people creating package tooling people blocked unable share toolseven smallest code input big impact afraid read people code need also aware time effective thing read code instead simply answer questionsyou need depth knowledge every project help even used simply need hear people need understand need particular thing help get
120,Lobsters,elm,Elm programming,How to grow a successful programming language community,https://medium.com/@eeue56/how-to-grow-a-successful-programming-language-community-3f9aac66562a,grow successful programming language community,grow successful programming language community prelude tip never let question go unanswered tip lead example tip keep library example hand tip already example make one tip know take break tip learn guide user good question tip repeat advice often tip patient conclusion,grow successful programming language communitypreludein post going talk take run successful community elm community generally reputation friendly welcoming majority discussion happens elmlang slack group since early day slack group became one owner hitting user soon today little blog post helped make community grow got helpful state today bunch awesome helpful people community speak personal tipstip never let question go unansweredin early day slack group people people would pop ask question might get answered several hour later language like elm large amount user coming different language like javascript elixir easy new user stumble block getting anywhere especially early day blog post rareduring early day felt important help people progress elm made internal goal try answer every question good time actually manage answering every single question asked elm slack people answered likely hang around therefore help people day dozen people waiting answer kind questionsyou always need know answer start answering someone find go along long explain thinking goldtip lead examplethere time call people slack think ban single person important part growing healthy welcoming culture welcoming make people feel like get help come itfor time need deal situation handle much possible public reasonable remember people talking people something probably reason understanding firm broke rule damaging community okay set guideline help contribute productively afraid put foot led example find needing muchtip keep library example handwhen question come lot time good reference hand example someone curious eq work elm good able refer exact line core package another example someone encounter bug important able remember find issue bug refer therei real tip achieve seems something naturally however one thing help read lot code time read source code every published elm package knowing package made really help suggesting one recommendtip already example make onethis idea pretty simple best way way show someone achieve something share code describe small enough write top head find writing lot code examplesif find people asking something lot important example refer one write one description inlined comment cut amount repetition even encourage people make pr help make example solidyou might even find writing tooling help solve problem seeing understanding struggle user facing fundamental learning improve ecosystem good example jsontoelm born frustration decoderstip know take breakif help people day every day start get tiring explaining concept work writing example keeping peace activity require cool head find getting irritated frustrated question step away bit go something else sometimes best community take part conversation someone often go easy thing step away ensure recruit team around help answer difficult question deal issue away team need big need consistent friendlyi often end answering question middle night helpful time good tire constantly distracted disable notification phone need step awaytip learn guide user good questionsonce community get decent size way able answer question come one simple trick used guide user get answer asking better question decent article general recommendation elm prompt user explain trying provide code example usually find people able take job always answer question rather ensure question get answered someonetip repeat advice oftenin land python zen python help guide way state simple single line guideline python developer aim follow originally meant joke become handy reference time fact everyone know mean easy refer guideline elm try make guideline second nature whether structure data structure app good always sum help gave example helped someone untangle complex model might say keep model flat possible next person come along problem might hear advice even replytip patientpeople get stuck kind issue need rush slack help people taking long time explain someone particular issue someone else might jump take let get tired chime back helpful sidenotes trust community take care rarely need lose patienceif take long enough explain might worth writing blog post time write blog post often bad great thing encourage user write blog post blog post example next time concept need explained need give blog post sidenotesconclusionhopefully tip helpful strange writeup make examining process guideline follow internally like finish big shout elm community taken screenshots people saying awesome reference since believe folk
121,Lobsters,elm,Elm programming,Where Am I? Geolocation in Elm,https://jpvillaisaza.github.io/2017/03/22/where-am-i-geolocation-in-elm/,geolocation elm,elm npm package elm application location optional error result impossible state impossible program task task attempt subscription,elm simple functional language compiles javascript note getting started elm using small complete application get current location device update based movement first install elm several way used npm package npm install global elm version got also need directory application mkdir whereami cd whereami elm project package got geolocation elm use geolocation package elm package install elmlanggeolocation yes version got let create elm file application run elm elm reactor elmreactor listening http go open elm file fix problem add list import import geolocation exposing location import html exposing html import task empty model reload every time something reload short elm application consists model represents state application way update view model let take look part build geolocation application basic idea application get update location device model could location type alias model location location beginning model could optional location instead type alias model maybe location also could error user denies permission access location location unavailable better model could result either error optional location type alias model result geolocationerror maybe location cool thing model make impossible state impossible way error location one could possible state different application also possible model application good enough always model need declare initial one init model cmd msg init ok nothing cmdnone location beginning command elm yet mean nothing happen initializing application course something happen get current location device come back change model need message communicate application type msg update result geolocationerror location message update either error location almost model message useless given message model new model something happen updating model update msg model model cmd msg update msg model case msg update err err err err cmdnone update ok location ok location cmdnone case error new model error case location new model location command elm either case simplify update msg model model cmd msg update msg model case msg update result resultmap result cmdnone result update message location new model location wrapped inside otherwise new model result still useless though command init function trigger update getting current location device declare subscription trigger update based movement subscription model sub msg subscription subnone subscription yet come back recap model way update let take look view model html view model html msg view model htmldiv htmltext htmldiv htmltext tostring model title model string wrap thing need program describe application elm word need explicitly tell elm model message initialize model main program never model msg main htmlprogram init init subscription subscription update update view view thing make sense never corresponds javascript flag used initialize model case telling elm application never take flag reload see something like something initializing application command get current location device geolocation package expose task geolocationnow task geolocationerror location task describes operation could fail use task attempt taskattempt result x msg task x cmd msg given way turn result message task get command attempt task turn result message sent application used update let create command get current location device note type command cmd msg cmd msg using message type created init model cmd msg init ok nothing taskattempt update geolocationnow word initializing application elm attempt get current location using task send result application update message reload see something like ignoring title ok latitude longitude unless block access location err permissiondenied user denied geolocation want try phone device set address server elm reactor address note browser allow secure origin geolocation update location reload actually update based movement need subscription location change geolocation package expose subscription geolocationchanges location msg sub msg given way turn location message get subscription location change turn location message sent application used update let subscription model sub msg subscription geolocationchanges update ok note first putting location inside ok turning update message reload see thing location change try switching moving finally compile elm file javascript elm make whereamielm output whereamijs embed html div id whereami div script src whereamijs script script elmmainembed documentgetelementbyid whereami script instead running elm open html file
122,Lobsters,elm,Elm programming,"NCAA Bracket Winner Picker, Based on Prior Matchups",http://lazybracket.com/,ncaa bracket winner picker based prior matchup,,
123,Lobsters,elm,Elm programming,Top 6 ways to make your Elm app crash at runtime,https://medium.com/@eeue56/top-6-ways-to-make-your-elm-app-crash-at-runtime-562b2fa92d70,top way make elm app crash runtime,top way make elm app crash runtime pretext number regex broken rule define regexes top scope number array broken long time elmarrayexploration robin rule never use elmlangcore array want thing work use elmarrayexploration replaces core implementation number function equality rule probably want function equality stick value dict id kind number elm lazy rule never debugcrash either case statement function number everything encoded rule never tostring etc jsonvalue use function look like jsonvalue number htmlattributes rule make sure know html spec conclusion,top way make elm app crash runtimepretextelm famous runtime exception part really really good job possible write elm without runtime exception majority user may never see thema ago tweeted different way make runtime exception could think top head series day little examination encountered wild rule like follow avoid running follow rule ensure elm application never crash sometimes fun anywaythis true elm regexregex broken create runtime error elm basic example go result tab see nothing regexregex crash give invalid regex case started group without closing mean elm app crashed crash load since elm lazy top level value use regex inline crash load meaning runtime error easily make way productionclick result tab click button see nothing change runtime error happens update function evaluated imagine actually several function deep pretty tricky figure outmy rule define regexes top scopenumber arrayslike regex array broken long time small little example click result tab see nothing way core array implementation implement thing internally us structure based around number lay nested tree array allow fast indexing read exploring fixed alternative called elmarrayexploration robin original implementation almost entirely written javascript documentation author long vanished like old oak table night robin implementation focus writing much possible pure elm using j implementation core part neededmy rule never use elmlangcore array want thing work use elmarrayexploration replaces core implementationnumber function equalityfunction equality somewhat difficult thing figure language partial application mean function equal well python say function object args function elm however function equality supportedcheck result tab see anything really much say maybe function equality supported maybe side really theremy rule probably want function equality stick value dict id kindnumber elm lazy common mistake see lot slack channel elm treated lazy example notice maybewithdefault might look harmless actually go result get page full blank debugcrash evaluated pas string without putting function get run right away even though fix use good old case statement insteadcase nothing debugcrash never happen x xmy rule never debugcrash either case statement functionnumber everything encodedin elm core algorithm little difference json object record fact difference two merely found compile time union type little different get magical field called ctor along n argument take since create object runtime via jsonencode make crash tricking whole bunch methodsnotice make new object twice otherwise elm us referential equality shortcut trick however run problem twice neither time shortcutted documentation data structure heremy rule never tostring etc jsonvalue use function look like jsonvalue number htmlattributesin elmhtml possible give invalid property html element example select given type number make sense crash elmmy rule make sure know html spec tongue cheek applied conclusionthese may seem like something run nasty surprise hold elm high standard effort taken prevent kind crash glad obscure json object encoded equalled one way make application crash one favourite language say many language
124,Lobsters,elm,Elm programming,Why type classes aren’t important in Elm yet,https://medium.com/@eeue56/why-type-classes-arent-important-in-elm-yet-dd55be125c81,type class important elm yet,type class important elm yet pretext problem wattyped burritotyped brian hick collected typeclass redefinition wild elmalldict elmtest solid use case alldict production code look conclusion http klaftertiefgithubioelmsearch qmap,type class important elm yetpretextthese series post talking solving problem elm see lot community discussion point around problem come away thinking new way solve problem post failed elm currently support typeclasses function take argument based contract often come community question elm get typeclasses post aim explore people want typeclasses case might used elm today reason believe typeclasses important prioritywhat problem main discussion elm feature known typeclasses explain typeclasses bit unfamiliar haskell language promoted use typeclasses elm sits funny place world wattyped j burritotyped haskell originally come haskell background write j well day say myselfwhat elm user come well luckily u brian hick collected data elm developer either basic familiarity fpit turn majority elm developer either familiar fp basic familiarity concept hand large portion people come haskell deeply familiar monad quite mix therewhen discussion typeclasses come think important remember elm language aimed primarily javascript developer people little fp experience mean powerful feature added mean need thought carefullywhat typeclass lot reading typeclass go much detail tl dr people want able say data type standard behaviour write single function work data type follows behaviour example interface canbeanint toint inttype animalenum cat dogtoint animalenum inttoint animal case animal cat dog directionenum downtoint directionenum inttoint direction case direction addthingsup list canbeanint intaddthingsup thing listmap toint listsumhere function addthingsup take either directionenum animalenum mean need write addthingsup current elm thing animalelmtype animalenum cat dogtoint animalenum inttoint animal case animal cat dog list animalenum intaddthingsup thing listmap toint listsum directionelmtype directionenum downtoint directionenum inttoint direction case direction list directionenum intaddthingsup thing listmap toint listsumnotice define exact function twiceredefinitions wildat time writing map defined time public elm package sound like lot common problem people claim remember map function use well let take look code elm prefer keep data structure namespaced name example rare import map globally instead use listmap dictmap solution symptom without typeclasses get compiler guess implementation map use fact import two symbol name elm complain youwith said majority people defining data structure elm generally belief following like call one library want dict probably either using core dict elmalldict want test thing using elmtest type problem defacto librarythis pretty handy come developing thing never spend long looking package decide one use also mean problem library probably reach creator package instead implementing ownyou might say need dict performs better situation totally fair except time need worry performance elm targeting client side application optimised code likely slow due algorithm data structure enjoy pushing elm limit found limit performs slow need apply lazy view using serverside codea solid use casetypeclasses particularly useful data structure require user implement kind function dictionary elm implemented redblack tree mean elm us comparison two value order discover smaller place right place dict comparable alldict work around limitation requiring pas function used figuring element smalleralldict empty function take way turning key comparabletypeclasses would help solve problem instead saying data must look like empty dict ord k vmeaning k must orderable function defined right use tostring achieve thing ideal collision reasonsin fact comparable type actually typeclass defined inside elm extended changed way go appendable number number simplest explain contains int float using single operator see elm use case typeclasses accepts introducing typeclass syntax elm heated discussion occurs weekly read github issue insight discussionhow production code looksthe majority elm code production look view entry point main defined model update code depending domain may lot model might even model anything else example model might see example code type alias city business list business type alias business people list person type alias person pet list pet type alias pet specie animal type animal cat dogviewanimal animal html msg viewanimal animal tostring animal htmltextviewperson person html msgviewperson person listmap specie viewanimal personpets htmldiv viewbusiness business html msgviewbusiness business listmap viewperson businesspeople htmldiv viewcity city html msgviewcity city listmap viewbusiness citybusinesses htmldiv different type record one union type using enumeration animal specie also different view function defined create pure text representation type record notice implementation viewbusiness viewcity identical field work withwe cut amount view code something like viewsomething record list field field html msg record html msg viewsomething getter viewfunction record listmap viewfunction getter record htmldiv define function first take function take record produce list field business use people example take something convert element field list html finally take record apply two function wrap everything div mean rest view code look like viewanimal animal html msg viewanimal animal tostring animal htmltextviewperson person html msgviewperson person viewsomething pet specie viewanimal personviewbusiness business html msgviewbusiness business viewsomething people viewperson businessviewcity city html msgviewcity city viewsomething business viewbusiness citywe really save much code also think bit harder see function could tell viewcity look like without referring original function introduction type class would allow define viewsomething multiple way could consistently use across record look like kind thing example could rewrite viewanimal order use viewsomething identity tostring animal something effectif applied codebase majority elm would like discovering something new time changed code base right elm developer examine elm code another developer written fully understand going consider major thing elm got rightone thing common problem however dealing nested update loop order call update function another function must manually unwrap result set part toplevel model map effect problem mainly exists due fact pas setter around freely consider bigger source pain simpler fix adding fullon typeclasses languageconclusiontypeclasses help developer keep track piece data behave way help thinking problem also help developer solve problem higher level abstraction might able otherwisethinking introduce typeclasses elm problem requires lot time design thinking simply adding haskell style typeclasses elm approach elm prefers reduce number way approach problem typeclasses allow multiple wayselm targeted main source user javascript developer javascript developer may familiar typeclasses le likely haskell developer alternative like purescript provide abstraction powerful type system suited haskell community many u haskell user sit happily elm toothe majority production code written elm would benefit much typeclasses could feature belief introducing typeclasses right elm would answer problem people facing bigger priority focused scaling update function behave correctly typeclasses help simpler way solve problem allowing setter generated another blog postpost text figured using http klaftertiefgithubioelmsearch qmap running code
125,Lobsters,elm,Elm programming,JSON decoding in Elm is still difficult,https://medium.com/@eeue56/json-decoding-in-elm-is-still-difficult-cad2d1fb39ae,json decoding elm still difficult,json decoding elm still difficult pretext decoding doc jsontoelm elmdecodepipeline fuzzers alternative jsonint eint conclusion elmalternativejson,json decoding elm still difficultpretextthese series post talking solving problem elm see lot community discussion point around problem come away thinking new way solve problem post failed post talk json talk decode json problem current approach take examination alternative approach think interesting note interesting always good differentdecodingthe state json decodingencoding bit problem let talk go doc page see json decoder example look nice simple right big deal one point belowunfortunately decoder look like production good example one lot boilerplate wan na know secret generated fact actually generated example json using jsontoelm name hello age location name london zip friend flip language language national country isonline false boilerplate big deal right elmdecodepipeline deal well introduce subtle bug type alias person name string location string decodeperson jsondecodedecoder persondecodeperson person field location jsondecodestring field name jsondecodestring spot happens give json blob name hello location somewhere decode correctly answer yes decode decode correctly however create record name somewhere location hello decoder work create solid type alias elm constructor generated name example person function type signature person string string person way decoding work field partially applied function passing new partial onwards mean person first get given string us name second used location decode field match type order field record easily get runtime logical error fault may even catch elmtest fuzzers might even catch properlyour alternativeokay term implementing json without depending orderlet start defining simple model type alias model name string age int nothing fancy really let describe like decoder look decodemodel jsonvalue result string modeldecodemodel value ok name age decodefield age jsonint setage value decodefield name jsonstring setname valuenotice gotten rid confusing decoder abstraction taking thing take jsonvalueand return result many people come elm get confused right away decoder since opaque type also notice name age order also notice use something called setage setnamethese setter take model set attribute example implementation setname model string modelsetname model name model name name mostly boilerplatewe use decoder like exampleobject eobject name estring noah age eint main exampleobject decodemodel tostring htmltextthe first line encoding json object example call decoder since function expecting jsonvalue need decodevalue decodestring decodemodel return result ok name noah age decodefield scary looking thing actually pretty simple decodefield string jsondecoder model model jsonvalue result string model result string modeldecodefield fieldname decoder setter value model let decoded jsondecodevalue jsonfield fieldname decoder value case model err case decoded err newmessage err nand newmessage ok model ok v resultmap setter v decodedthere various way cleaning outoforder decoding elm notice gather message throughout chain meaning decoding fails point get full stack trace pretty handy example expecting object field named name instead got nulland expecting object field named age instead got nulland expecting object field named location instead got nullconclusiondecoding elm still solved problem lot gotcha used elm become familiar sensible default approach take thing would great json decoding little easier followit could simplified elm provided couple thing namely thing taken type system need eg adding field record need provide default change make refactoring change model without worrying order right tooling generating settersgetters trivial still bit legwork would also great setter could generated getters currently place pain point another posti published package called elmalternativejson love discus slack anyone interested github twitter
126,Lobsters,elm,Elm programming,Server-side rendering with elm,http://pietrograndi.com/server-side-rendering-with-elm/,serverside rendering elm,elm community official website image description critical feature open graph static page static page fetch static content static renderer elmstatichtml noah take snapshot application accepts already provide serve application different state need deliver right client human interested static page detecting web crawler npm spiderdetector putting together static page rebuilt time modify source code reuse html repeat splitting html pug split basic component page three different file assemble buildtime gulpconcat introhtml appoutrohtml outrohtml generated building process build process gulp weird error unwanted result gnu make definitely need help deadline met happy,recently possibility develop website ground elm born experiment showcase elm version language maltajs presentation became community official website although found coping annoying issue posting page facebook twitter link looked like ugly link clearly wanted link look like cool link image description bit investigation turned missing couple setting critical feature namely open graph tag static page static page web crawler hit website fetch static content mean case looking indexhtml click full version doctype html html lang en link rel shortcut icon type imagepng href faviconico link rel stylesheet type textcss href distcssstylesmincss link type textcss rel stylesheet href http fontsgoogleapiscomcss link rel stylesheet type textcss href fontsgoogleapiscomcss familyopensans meta name viewport content widthdevicewidth head meta charset title maltajs elm app title head body div id main div external resource script src http mapsgoogleapiscommapsapijs script script src distjsappminjs script script initialize google map run elm config port script body html html seen crawler poor div named main course work expected html generated runtime using elm get static renderer thanks amazing elm community got solution prerendering elmstatichtml package noah well know elm contributor package allows u take snapshot application based view function work command line taking main elm file input looking view function signature elmstatichtml filename mainelm output indexhtml mainelm method expected exist view htmlhtml msg good view different signature since accepts model input view model html msgview model div id container viewheader modelshownavigation nothing c togglenavigation c super cool code solution already indeed already provide initialmodel application thus jus need define curried function static renderer initialview view sharedinitialmodel note way free serve application different state rather initial one need configure renderer using configuration file order let know function use put result file sourcemainelm output sourcetemplatesbodystatichtml viewfunction initialview way run passing configuration like elmstatichtml c elmstatichtmljson solves part problem produce initial snapshot page need deliver right client sure human interested static page rather whole application detecting web crawler order discriminate normal client web crawler used nice npm package named spiderdetector work way appget function req re reqisspider ressendfile publicfolderstatichtml else ressendfile publicfolderindexhtml hit spider crawler static page sent otherwise normal page j bundle putting together far collected utility take screenshot elm application certain state prerendered static page way serve different content web crawler need static page rebuilt time modify source code possibility reuse html repeat problem html case head part page static dynamic one change part inside body div id main former case contains html latter contains javascript code run splitting html tried using template language like pug formerly jade taking much time tight schedule decided split basic component page three different file assemble buildtime simply using gulpconcat division used file introhtml contains common initial part dependency meta tag file appoutrohtml contains template code dynamic execution file outrohtml contains closing tag static page fourth part static one generated building process used assemble full static page build process part shame since still struggling tool like gulp coping weird error unwanted result needed thing done got using good old gnu make proud definitely need help side hand deadline met happy much better link
128,Lobsters,elm,Elm programming,The beauty of recursion and list machinery,http://langram.org/2017/02/19/the-beauty-of-recursion-and-list-machinery/,beauty recursion list machinery,initial recognition introduction via haskell joseph project euler lecture programming haskell sap teched emea elm elm learn elm subsequent understanding page wikipedia loop pattern example factorial length reverse take member maximum list machinery postscript lambda lounge madlab elixir,beautiful pattern inherent use recursion seen attempt reboot brain new functionally focused way thinking programming post explores one particular pattern inherent recursion often expressed functional language finish alternative based going call list machinery mechanism within language provide powerful processing abstraction structure list initial recognition erik meijer mention properly moment us phrase stare long enough really appeal express act focus concentration wonderfully casual way stared stuff long enough become something tangible something recognisable hopefully useful content stare introduction via haskell son joseph introduced concept intrigued since first day saw proficient many different language showing solution project euler challenge written haskell involved fascinating approach using pattern matching determining resulting value something based upon list possible match data processed involved expression involving symbol x x abstract become concrete shortly lecture next time encountered pattern matching technique series lecture inimitable erik meijer lecture functional programming technique series called programming haskell although concept explained term language c linq thoroughly recommend spend time enjoying one thing erik said lot x x expressed x x somewhat intimidated mword monad avoided haskell far although interest functional programming language clojure ramda javascript grown considerably presented sap teched emea also functional programming technique javascript elm learning elm reencounter patternmatching pattern think least naive mind elm seems reflect lot concept haskell clojure matter pattern expressed nicely online book learn elm book much workinprogress definitely worth read even early stage example post elm subsequent understanding turn wonderfully succinct expression x x represents one core concept functional programming list seen two part head tail first element rest element x represents head list x represents tail represents concept con page wikipedia going call prepend brevity loop one thing bear mind outset functional programming loop might understand least think list item want process loop concept x x need want transform list applying function element list go using concept remembering functional programming le describing stating say new list result function applied head list individual element combined result function applied tail list smaller list function applied tail list result function applied head list combined function applied tail list go element ever decreasing tail function must applied function called recursively fashion example list want compute sum element list pattern matching approach look like sum list number number sum list case list x x x sum x calling function list give u looking sum let extract core pattern matching approach case expression match empty list useful ie go forever recursion need base case base case x x pattern match two part head tail list earlier match going least one element matched x element exist matched x like steeped strongly typed language question happens pas list say string even come elm compiler allow happen sum empty list number base case zero clearly sum non empty list number see recursive nature definition first number added sum rest number contemplating beautiful simplicity consider also example functional approach programming declarative rather imperative rather explaining compute sum traditionally loop variable accumulate final value saying pattern example let examine instance pattern matching going quite example stare factorial first calculating factorial factorial int int factorial n case n n factorial n factorial approach matching base case n zero declaring factorial n n multiplied factorial n particular example pattern matching interested capturing matched number already n hence pattern length calculating length list simple length list int length list case list x length x length see pattern reverse time use pattern matching approach produce reverse list reverse list list reverse list case list x x reverse x x reverse time base case empty list result empty list otherwise take head prepend reverse tail recursively take let define take function common facility found functional language naturally listoriented function return first n element list take int list list take n list n else case list x x x take n x take something extra two base case list empty also number element take zero le otherwise pattern member time going need else expression declare recursive definition function return whether element member list member list bool member list case list false x x x true else member x member true member false list empty base case answer clearly going false otherwise check see head list element find answer true otherwise recurse tail list maximum finally definition function return maximum value list note function type signature us comparable type maximum list comparable comparable maximum list case list debugcrash maximum empty list x x x x let maximum x x x else maximum see another construct let expression similar let used clojure binding allows creation shortlived value similar scopelimited variable language saying last pattern case x x want calculate maximum tail list assign context check whether head list greater elm builtin function max return maximum two comparables learn elm book point allow u even succinct maximum function like maximum list comparable comparable maximum list case list debugcrash maximum empty list x x x x max x maximum x maximum wonderful list machinery talked length recursion perhaps see beauty therein list machinery following philosophy let look little bit list machinery form swiss army chainsaw function reduce elm language known foldl foldleft reimplement maximum function foldl max builtin function maximum list comparable comparable maximum list listfoldl max list maximum foldl function reduces list applying function turn element function apply two parameter first accept accumulated value second accept list element folded function apply max take two argument initial value maximum comparison positive number least zero perhaps wonderful even recursive version remember processing element list without concern processing happens leave language list machinery deal u finish using foldl reverse list contrast recursive definition earlier listfoldl con function used function position surrounding bracket gosh worthy long stare think postscript day publishing post find lambda lounge manchester evening hosted madlab learning elixir dynamic functional language erlang otp platform short way session sample presented u defmodule factorial def def n n end factorialof elixir syntax may le familiar u right guessing approach examined post jump page rush familiarity within factorial module couple definition function used pattern matching way see base case defined thus def recursive call def n n lovely
129,Lobsters,elm,Elm programming,"Phoenix and Elm, a real use case (pt. 1)",http://codeloveandboards.com/blog/2017/02/02/phoenix-and-elm-a-real-use-case-pt-1/,phoenix elm real use case pt,introduction book everyone team elixir phoenix elm phoenix battleship react redux elm tboe elm spa elm phoenix elm elm phoenix application rail react installing elm hello world http hello world comment powered disqus comment powered,introduction long time since last post last september joined book everyone cool startup awesome product passionate talented team well busy since apart working team another main reason joining current stack elixir phoenix excellent opportunity solving real problem using favorite technology time also started play around elm functional programming language web rewriting pet project like phoenix battleship reactredux fan recently converted functional programmer felt right path take comfortable enough syntax architecture proposed building proof concept elm new frontend internal tool use tboe creating landing page week later poc ready pushed production working without single runtime error since much fun coding elm ca nt resist writing small series creating small spa covering basic topic integrating elm phoenix project routing elm program making http request socket support let get started elm people either know well worked know extremely passionate new technology start learning like however case elm different first heard elm almost year ago learning elixir first pet project think reading kind article redux fact thanks article discovered elm architecture inspired redux caught attention immediately initial try decided learning elixir enough task left elm later kept reading article tutorial version came decided give another try coding elm almost every day since joy time joy word truly represents experience coding elm functional immutable therefore need switching paradigm coding backend frontend type system combination gentle compiler force write good errorfree code talking compiler best error message ever seen look like tutorial nothing error message used also make refactoring really easy straightforward generates good javascript free runtime error compiles work browser true story decent package manager repository strict term publishing package even detects breaking change new version language framework tried redux find elm architecture easy understand familiar decent linting formatting package almost editor assist writing clean pretty code performant fast virtual dom get experiment real productivity boost could probably keep adding reason list let leave start fun part phoenix application continuing let take closer look going build following blog sure find familiar concept using since started writing rail react starting new phoenix application let create model need mix phoenixgenmodel contact contact firstname lastname gender integer birthdate date location phonenumber email headline text picture creates following migration file defmodule phoenixandelmrepomigrationscreatecontact use ectomigration def change create table contact add firstname string null false add lastname string null false add gender integer default add birthdate date null false add location string null false add phonenumber string add email string null false add headline text add picture string timestamps end end end previous command also creates basic modelschema bunch field webmodelscontactex defmodule phoenixandelmcontact use phoenixandelmweb model schema contact field firstname string field lastname string field gender integer field birthdate ectodate field location string field phonenumber string field email string field headline string field picture string timestamps end doc build changeset based struct params def changeset struct params struct cast params firstname lastname gender birthdate location phonenumber email headline picture validaterequired firstname lastname gender birthdate location phonenumber email headline picture end end need moment eventually adding fulltext search support see later nt forget run migration task moving next step mix ectomigrate installing elm order add elm project first need install necessary npm package npm install elm elmbrunch save going placing elm stuff webelm folder update brunchconfigjs file adding following change brunchconfigjs exportsconfig path watched webelm plugins elmbrunch elmfolder webelm mainmodules mainelm outputfolder staticjs telling brunch watch webelm folder configuring elmbrunch plugin set correctly let create webelm folder install first one elm package using mkdir webelm cd webelm elmpackage install elmlanghtml installs elm core html library creates basic elmpackagejson file similar npm packagejson file core configuration elm application version summary helpful summary project le character repository http githubcomuserprojectgit license sourcedirectories exposedmodules dependency elmlangcore v elmlanghtml v elmversion v add basic mainelm file main module simply return hello world message webelmmainelm module main exposing import html exposing html text main html main text hello world next need update main appjs file import javascript generated elm render result webstaticjsappjs import elm main const elmdiv documentqueryselector elmtarget elmdiv elmmainembed elmdiv want embed div elmtarget id let go ahead add div corresponding phoenix template webtemplatespageindexhtmleex div id elmtarget div ready start phoenix server check everything working fine output something similar iex mix phoenixserver erlangotp source hipe kernelpoll false info running phoenixandelmendpoint cowboy using http interactive elixir press ctrlc exit type h enter help iex elm compile mainelm webelm staticjsmainjs babel note code generator deoptimised styling webstaticjsmainjs exceeds max info compiling info compiled file file copied sec visiting http render hello world message browser enough next part dig bit elm architecture define application state start coding first elm module meantime take look repository final result see action live demo happy coding please enable javascript view comment powered disqus comment powered
131,Lobsters,elm,Elm programming,Using Elm in Production at Pivotal Tracker,https://www.pivotaltracker.com/blog/Elm-pivotal-tracker/,using elm production pivotal tracker,elm new dashboard experience product challenge cherry top conclusion presented elm,pivotal tracker large product many piece many different tech rail rjs plain jquery lot backbone react experimented redux though architecture good added much complexity especially tried integrate existing backbone code tried elm first lot doubt suspicion fear championing trial run proved fullest way possible received approval build new dashboard elm although went growing pain elm first went well overall recently released experience section likely sound like broken record read account company using elm first new strange syntax functional paradigm intimidated developer u caught le two day learning think challenging elm help ease even better though working elm downright enjoyable tool make easy frictionless develop compiler make refactoring cinch refactored entire file system day regression something nearly impossible code base sum developer literally bidding story involved elm work morning standups product end result working well zero runtime failure filesize ridiculously small run faster anything else code base also fewer bug largely type system force model domain carefully sum manager mandated new code written elm challenge despite positive experience still faced challenge learning organize large app took get still somewhat confusing arrived place happy integrating rail app buildci cycle tricky ultimately found mix reactonrails webpack allow dev environment compiling static asset asset pipeline use used packagejson script tie together including elm test particular hurdle u pivotal changing mindset traditional approach driven approach learning write code made test unnecessary still getting sufficient coverage business logic end came pattern work well u cherry top elm added tool quickly become indispensable prior version limited instrumenting code log statement requiring cleanup making guess code path new debugger always active development build meaning open discovering error state take snapshot deeper investigation another bonus ability rewind lazyload message come back examine loading state without mucking around dev throttling setting additionally challenge imagine developer dread entirely defanged ieexclusive bug state table showed cause immediately update message fired input event sent often lead brought u directly bug report msdn replication straight identification special instrumentation required bit additional logic worked around defect conclusion elm contributor richard feldman presented elm saying backend team experience using elm confirm sentiment
132,Lobsters,elm,Elm programming,The Tragedy of Maybe and Ruby,http://bendyworks.com/blog/tragedy-maybe-monad-ruby,tragedy maybe ruby,tragedy maybe ruby act test compile act ii nil name never know nil act iii ruby tragedy contract rdl epilogue updated azrazalea lobster,tragedy maybe ruby different nil inevitable question get rubyists upon learning maybe monad flash inspiration day nt quite good explanation question sure explanation nt think convincing rubyists went something like force explicitly handle nil case rather accidentally let got better explanation heartening rubyists let start examining general sense maybe good thing get maybe unrequited love ruby act test compile let begin contrasting stronglytypechecked haskell dynamically typed ruby elixir approach let call checked dynamic respectively advantage disadvantage going focus small subset typesclasses function argument function return value making big decision want look whole picture two paradigm primary mechanism inspire confidence codebase unit interact dynamic language tend use integration testing checked language use typechecking compilation test unit functionallevel ought identical paradigm wo nt examine found dynamic community integration test usually omitted favor functional test instead testing function sends right data function b bdd adherent tend write toplevel functional test pressing ui button hitting api endpoint fill crack unit test hardly surprising integration test often skipped given sheer number permutation function called within codebase checking type compilation mean effectively gatekeeper every function codebase asserting shape input always additionally ensures always return shape data function best part automated nt write test get sure may write type annotation type annotation basically comment lie best kind comment act ii nil name compiler automating away integration testing data shape get interesting liberating side effect normal string never potentially nil function accepts string know always receive string function return array know return nil though might empty array sure may situation need consider possibility nillike return value example calling first array ruby give nil checked language however calling first array string whether empty return something look bit like maybe string aha first maybe typechecked language calling reverse array string return another array string calling first array string return maybe string former immediately usable second scream ca nt use split functionality happy path error path nearly everywhere code use regular string know nil saving maybe string situation really need act iii ruby tragedy darkness cover rubyland rubyists nt typechecker compiler therefore never confidence value passed around string int nil add maybe library simply double number possible type value adding maybe string maybe int etc rubyists would need exhaustive type checker optional gradual typecheckers ruby cf contract rdl nonexhaustive aspect approach inspire confidence needed walk codebase month later make small change shunt ci deployment additionally library probably add overhead every annotated function call every function call app wanted truly solve problem codebaseexhaustiveness however posit impossible create fully robust type checker ruby added constraint language eliminating instanceeval classeval imagine astbased analysis could job suspect checker yet exist unless checker exists effective use maybe requires constant vigilance entire development team since ruby default behavior allows nilable value sneak anywhere think agree automated significantly better requires constant vigilance epilogue essence rubyist view maybe constrained typelooseness ruby one assumes code run atop ruby vm pragmatic eminently reasonable approach however one considers type system unencumbered ruby vm maybe make whole lot sense therein lie tragedy maybe ruby updated changed example eval instead definefunction courtesy inspiration azrazalea lobster
133,Lobsters,elm,Elm programming,XT16 - Kris Jenkins - Adventures in User Interfaces,https://www.youtube.com/watch?v=yF1tX60sRQk,kris jenkins adventure user interface,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kris jenkins adventure user interface youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kris jenkins adventure user interface youtube
134,Lobsters,elm,Elm programming,Five Months of Gamedev with Elm,http://www.markwunsch.com/thinkpiece/2017/01/hive_city_retrospective.html,five month gamedev elm,elm hive city retrospective stumbled functional reactive programming react conal elliott om redux farewell frp warhammer white dwarf necromunda pseudorandomness went well readme elm architecture upgrade path compiler error go well learned jweissmanmandos blog post still puzzle webgl elm really interesting stuff vuejs typescript flow purescript scalajs ghcjs javascriptcore developer tool redux turbulenz superpower mwunschhivecity announced first sonicsketches subscribe weekly newsletter racket,early august began writing game elm programming language first experience using elm first experience developing game developing game justification learning elm elm seemed like good language experimenting game development game hive city five month later abandoning project retrospective stumbled upon elm spring researching newtome concept functional reactive programming even wrapped brain around concept timevarying value knew elm impressive important advancement development user interface evan czaplicki thesis elm concurrent frp functional gui published felt like early would become really interesting movement another interesting thing happened springearly summer initial public release react post right venue discus specific functional reactive programming elm thesis instructive worth reading along foundational paper conal elliott narrative arc easily drawn idea behind frp implementation methodology react descendant data flow one direction final rendering avoids elm thesis describes needle recomputation system like om redux practical implementation remixing idea suit different context began work hive city elm said farewell frp release elm frp anymore day elm functional language take concurrency seriously user perspective elm friendly functional language bit flummoxed decision become clear functional ui paradigm converging searching best metaphor vocabulary ease newcomer think great introduced warhammer cool warhammer tabletop wargame encapsulates everything thought cool kid mid learned game bought whole ecosystem literally buy expensive hobby read lot white dwarf found necromunda spinoff game set universe dabbling pseudorandomness recent project gained newfound appreciation dicebased game like dungeon dragon warhammer hive city would attempt make game elm inspired necromunda went well laid goal project hive city readme repository house attempt better understand problem involved elm language tool ecosystem elm architecture ongoing evolution functional reactive programming making game modeling entity state computer game inspired physical counterpart getting immerse funky esoteric game better understand thing last point especially picked original necromunda manual read throughout implementation still cool elm great language great community lurk quite bit elm slack folk genuinely nice interested finding way help newcomer understand language architecture struggled first help elm language nearly impossible distinguish elm architecture working game mitten drinnen elm released upgrade path clear easy follow elm compiler error received lot welldeserved attention usefulness readability relied heavily compiler grateful clarity tone plenty internet handwringing elm lack feature notably typeclasses find real dealbreaker got along fine without experience elm went well go well experience making game go well idea entering chose render game svg seemed like elm ecosystem encouraged think making webbased game svg common elm tooling still nascent community framework library built around elm kept date young great reference game development elm though sure expecting also much math help think solid game framework would provided stated abandoning project reached goal learning elm still intrigued game development feel like staying within elm ecosystem provide education need picking unity learn perhaps obvious choice someone new game development hopeful elm would provide enough scratch gamedev itch still itching learned lot learned elm learned productive statically typed purely functional language briefly toyed haskell past learned svg thought wanted since applied knowledge thing like learned game development learned like learned warhammer stopped cool resource really helped along way jweissmanmandos tiny rogue clone written elm project incredibly useful example follow game programming pattern robert nystrom finish book helped get mindset game development making impossible state impossible richard feldman really useful talk leaning elm type system reduce unwanted application state rich animation matthew griffith another useful talk elmconf one using elmstyleanimation library pointfree die amar shah provocatively named talk walk pointfree style programming used elm language like finally importantly talk best defines elm approach code easy part talk outline goal methodology elm community ecosystem one argument leveled elm stand similar programming environment blog post comparing different purely functional web ui approach talk explicitly outline elm trying pinnacle last twenty year functional programming research monadic code something elm care honestly neither neither developer suspect still puzzle embarking project expect captivated game development want make game want explore game development variety context someone asked thought functional approach game development better imperative approach honestly know never done game development way something barely scratched surface completely befuddled webgl particular webgl elm work never done anything opengl strange syntax allows webgl work within elm puzzled elm work within native environment browser mostly using effect manager effect manager welldocumented really interested diving gut elm curious implementation detail mostly think would neat elm exist runtimes outside browser know work could extended area clojure really interesting stuff fret elm ongoing relevance code easy part suggests elm goal compete javascript framework arena web developer mind share come really like enjoy elm help think ship already sailed developer plurality choice web development decision tree developer engineering manager must take reach elm deep within realm framework similar reactive principle reactredux om vuejs angularjs fan statically typed language choose language like typescript flow purescript might really go wild invest time scalajs ghcjs many language allow development runtimes like javascriptcore nodejs developer tool redux nicely done along elm elm great greatness lost sea goodenough alternative domain game development make robust game typescript turbulenz superpower think would great area elm stand differentiate unfortunately adept enough make meaningful contribution game developer looking shape mold platform think elm worth time investment interested playing hive city warning fun encourage clone mwunschhivecity run elm reactor regret taking project regret abandoning current state would love revisit world necromunda future gamedev endeavor keeping eye elm community development though unlikely programming anytime soon language learn project week game workshop announced officially licensed necromunda computer game would released soon second retrospective done project embarked unfamiliar language read first retrospective sonicsketches twitter bot written clojure subscribe weekly newsletter track code write progress make week next project racket programming language
135,Lobsters,elm,Elm programming,Ask Me Anything by Richard Feldman on Elm,https://dev.to/rtfeldman/i-am-the-author-of-elm-in-action-ask-me-anything/comments/,ask anything richard feldman elm,githubcomevanczelmsortabletable,sure emphasize nt put big priority getting right anything try consistent nt always succeed compiler make pretty easy rename thing change mind nt sweat biggest drawback renaming plain old vanilla merge conflict would nt take advice much data point curious series page eg teacher dashboard grading splash page main back joined company nonspa rail app transitioned spa yet longterm plan head direction nt expect transition affect module structure much outside main course main module small fraction total module toplevel module namespace called nri thing specific ui opposed thing might opensource someday eg analytics module emoji module etc example three related one nriquizheadermodel nriquizheaderstyles nriquizheaderview quiz header model view elmcss style migrating sas elmcss sweet nt nriquizheaderupdate quiz header nt state think worth emphasizing see people create modelupdateview time want reuse code think wrong way scale unnecessary state management bloat need update function simpler one plenty time module hold view plenty others even separate module plain old function inside existing module eg viewsidebar user html msg also reusable view used across multiple page example nritabs nritextinput nritoggleable nritooltip stateful apis look like githubcomevanczelmsortabletable define msg type caller nt use cmdmap state super simple defining msg type would overkill trouble worth also worth emphasizing immediately reaching custom msg cmdmap time local state involved surefire way get needlessly overcomplicated wiring rule thumb reusable view view return html msg instead html msg nicer default reach custom msg enough state transition cmdmap would reduce verbosity substantially finally reusable data structure begin data example dataassignment dataassignmentdecoder debated right namespace settled data common representing encodingdecoding piece data mix various union type type alias represent common data structure app lot going decently common data structure defined one module decoder andor encoder separate module big deal live module though nt spend ton time module structure easy change reliably change mind hope help
136,Lobsters,elm,Elm programming,Types As Design Tools,https://www.youtube.com/watch?v=6mUAvd6i4OU,type design tool,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kris jenkins type design tool youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kris jenkins type design tool youtube
137,Lobsters,elm,Elm programming,Single-Page Web Apps in Elm: Part Two - Functional Routing,https://www.linkedin.com/pulse/single-page-web-apps-elm-part-two-functional-routing-kevin-greene,singlepage web apps elm part two functional routing,elm tutorial part two post series singlepage web apps elm part one getting started new language singlepage web apps elm part three testing structure singlepage web apps elm part four side effect singlepage web apps elm part five javascript interoperability introduction elm architecture routing overview routing functional environment enter elm navigation part one let real parsing evancz navigating new url conclusion routing library hop elm route url article elm programming elm modal pure environment,source github elm tutorial part two post series singlepage web apps elm part one getting started new language singlepage web apps elm part three testing structure singlepage web apps elm part four side effect singlepage web apps elm part five javascript interoperability introduction going continue way writing singlepage application elm one thing key web application url routing often learning new javascript framework first thing covered routing covering routing second since first step introducing language routing elm area rough edge improved lot recently introduction elm navigation package various attempt different user create package routing elm nice official package navigation browser routing elm going manual process used come benefit code going explicit saying code explicit common theme transitioning objectoriented programming oop functional programming nature writing code pure stateless function routing course done pure function routing benefit pure function addition explicit easy isolate test document also le susceptible bug arise state collision point expect least somewhat familiar topic covered part one nt comfortable elm code starting make sense would helpful worked elm architecture tutorial official elm documentation elm architecture continue move slowly covering particular elm elm architecture familiar basic likely get routing overview perhaps one could make argument url routing nt important web application none native application run address bar user change write perfectly fine application without clientside url routing url however interesting bit application allows u return state application share state someone else least allows u save partial state likely state stored computer server affect exactly appears screen one key piece input affect application show user usually url going relate directly particular view may may experience building application elm feel different javascript routing javascript mv framework routing lot magic happens typically hate use word magic describe library framework really meant people use term library framework lot work transparently routing ember often praised one people like use setting route ember might something like aside code largely taken ember routing documentation defining route going maybe better question u first thing index route defined u equivalent ember known conventionoverconfiguration framework meaning much possible based around set opinionated convention defined framework author okay great happens actually navigate route defined say go post ember find postsroute could look something like go creating object extending ember default route object object instantiated u ember different method called u objectoriented goodness model method called ember appropriate time life route get data needed route model method call another object ember store get appropriate data following lot indirection defined u ember framework ember route object along lot ember object use lifecycle hook ember route activate deactivate example ember component view object would willrender didrender among others ember routing exploit objectoriented nature javascript make mechanic routing invisible u possible different class define lifecycle hook u respond key moment life application routing ember nt different routing javascript librariesframeworks react router initially based ember router similar define route rely lifecycle hook component define prepare data determine correct initial state view routing feel different elm going able create object instantiated u functional nature elm dictate solve problem different way routing functional environment say ember exploit objectoriented nature javascript handle routing difference functional environment objectoriented programming blend data state method act data behavior object behavior object instance update state instance side effect functional programming update state object side effect function must pure must explicitly given data need act hell function take argument return result function exists act application state invisible u functional programming data function object sense used might routing look like environment one piece data url string router could function took string returned html display page wo nt ultimate type router perfectly logical type router sure could build application elm used router others fine demonstrates need think functional environment input expect output know output need design function function get output often starting code new piece software start type declaration ember example need particular knowledge ember know going dealing stateless function easier see going looking function function get piece data process return result mysterious state wanted router update state would need pas state router nt really get u anywhere though updated state current url fine display page maybe another function handle updated state give u html could something like see type function lot function take data state return tuple result new state ca nt cause side effect function need explicitly pas state function update return new state result function tuple may little annoying first ultimately one favorite thing writing application stateless function really amazing much obvious code become module application must pas state function need act also imagine much easier isolate test function small subset function even capable modifying application state making many bug easier track aside poked around functional programming much possibly heard state monad essentially would need fill monadic function handle tuple haskell made even explicit state type type wrap function nature function take state return tuple interested info style programming monad state nt sure monad wrote beginner explanation using javascript operating within context working monad javascript even large application number route going going relatively small introduction elm briefly went union type elm architecture use union type model event called message also said union type used model data finite set predefined value route sound like finite set predefined value could say router function url route obviously real router would probably need strict string match get outline another option might handle routing remember associate additional data union type postroute associated postid alias int could associate data wish parse url union type set taken url parsed created new value new value obvious choice would save current route application state remember discussion elm architecture elm architecture break three part model view update model state update portion function responds message event update state router turned url route update function responded change updating state thing left change view generally form going use routing application model route union type parse url select correct route render view route written far wo nt actually work updateroute message come listen popstate event update url patience aside certainly perfectly fine option routing elm thought using routing library project beyond official elm package decided tutorial link end check enter elm navigation mentioned earlier elm navigation fairly new package elm followed release elm may year give u foundational piece needed responding initiating change url finally going start working functioning code need elm project work hopefully code part one nt code clone github clone code part two follow along first thing need add elm navigation project open terminal navigate elm project directory remember install new package elm project run elm package install nameofpackage version want latest greatest version omit bit something like elm navigation elmstuff directory elmpackagejson updated let get back srcmainelm file mentioned part one elm application main entry point fittingly enough called main entry point type main program never hello world application used something called beginnerprogram fine hello world something tell beginnerprogram going sufficient application get complex order create complex application look type program appbeginnerprogram going useful side effect drawing screen need interact server user even page url need something use case hand look program supplied elm navigation look source code elm navigation find navigationprogram function take something called parser record return program hmm appbeginnerprogram function took record simpler record returned program function take record find easiest think record application configuration app config simplicity instead always saying record program take going assume exists code somewhere appconfig navigationprogram different appconfig appbeginnerprogram still update function view function passing gone model model model view update remember model initial state application piece data value appconfig navigationprogram function none take piece data case model beginnerprogram relates directly init function expected new appconfig instead piece data pas function return initial application state allows compute initial state application instead hardcoding realworld application almost always going need addition update view function navigationprogram also take something called urlupdate function something called subscription subscription discus detail later short subscription way listen event may fall outside scope update view function often going use place holder subscription able listen event interested within context update view function notice urlupdate update identical type variable msg update data urlupdate lowercase meaning type variable function give appconfig fill type type variable function actually type take data current state return tuple yes pattern new state union type called cmd associated message slightly complex saw hello world application hello world application update function type update msg state state took message current state returned new state command cmd ask elm produce side effect often event happens want produce side effect want make network request get data user save something localstorage even update url elm pure functional language ca nt produce side effect inside function would mean function could perform different action produce different result input get around function produce request side effect always produce request cmd message request fails describe handle part command main take away even dealing event side effect still working stateless function bit pointed command cmd type associated message message command feed back application side effect complete think much like complete event see used go type urlupdate tell u performs exact action update responds url update way update responds event message going one function going need create purpose pretty straight forward fit neatly update portion elm architecture interesting bit urlupdate take type data take string mean get raw url change parser come let look type parser parser another union type associated data case associated data function function take location return type okay location nice helpful instead giving u raw url give u object essentially windowlocation javascript app flow url change application parser function called new location data returned parser given urlupdate function along current state update state request effect may want case parser returning route could design another parser returned different type another point interest come looking type init appconfig init data model cmd msg type variable called data name used urlupdate urlupdate data model model cmd msg mean type variable context appconfig must type app start parser called initial location result returned parser given init determining initial application state back mainelm file let import navigation set main entry point going replace hello world application fill piece navigationprogram take go going work getting something compile worry correctly parsing location elm compiler smart enough find function need definition main function value need defined use long somewhere module model application state going keep track current route interesting bit init function remember init function supposed return tuple initial application state request initial side effect run request side effect take form command cmd always want perform side effect special command called none hopefully obvious time update function supposed return command nt want run side effect going use cmdnone keep compiler happy thing null elm find however specific type cmdnone used indicate absence particular value rest code fairly straight forward really nt anything yet let continue nothing interesting fill type get writing actual application probably modify kind make sense starting point illustration purpose erase mainelm file start final application going continue get le interesting part code way getting location parsing moving update function interesting bit msg type bit foreshadowing using message request navigation change update nothing urlupdate almost nothing urlupdate function save current route state update function return state unchanged well request action view glimpse something little interesting matching route order determine view show build complex application sub view sub view nested route sub view also match portion route remember div function return virtual dom html could function long function returned html msg last bit look parsing subscription going using subscription right still need give program function fill appconfig much like cmdnone saw earlier cover subscription later allow app run finally urlparse function gave navigationprogram interesting bit including new syntax start urlparser move parse helper remember parser function location data case data route type defined could type feel obvious navigationmakeparser take function location data wrap parser u remember discussion union type may seem slightly odd value defined define union type actually type constructor already function parser already function take function location data return parser look makeparser definition yes makeparser alias parser see lot elm encouraged make function variable semantic possible name makeparser make sense context reading code ok looking parse helper function function location route get wrapped parser line using destructuring syntax get pathname location line brings u new syntax start let expression let expression allows u define local variable function scoped particular function case parse function let expression define local variable let block use block nt use curly brace elm let expression indentionsensitive aside documentation let expression let expression another interesting bit line considered bad practice use debug package production code developing probably used using consolelog javascript debuglog function course impure bad practice use production code make transitioning elm easier let take look debuglog essentially identity function take string describing value want log value want log return value simple enough thing may little unnatural must something return value ca nt execute single statement elm everything must expression assign value name nt anything could also elm compiler allow execute function without anything return value part enforces stateless code case assignment allows impure code run actually run real parsing yet still straight string comparison run either running elm make loading compiled code browser running elm reactor nt remember use elm make elm reactor refer back part one get page found good got aside documentation elm navigation elm navigation let real parsing parsing library elm assume people start using elm get routing parsing library parsing going use evanczurlparser evan czaplicki creator elm writing much elm good follow github evancz keep tune elm going use package done app first thing note github repo included simple express server loading app going go want use make working routing easier load indexhtml file browser url pretty junky use elm reactor end url like http good work either run server npm install node serverjs default start server port okay installing new elm package yay new toy start discussing new toy let update import stuff going need next section cover stuff move along urlparser fairly small package give u function help u let start looking thing give u first thing note like navigation package export type called parser parser urlparser package different complex type navigationparser navigationparser intuitive function location data parser also function deal lot couple different type variable formatter result addition type variable us couple type nt seen yet chunk result look piece piece let look result first result type defined elmlangcore tell type get familiar also one type imported default every module looked elmlangcore github may noticed default import use without import result union type either ok err functional language something similar called either function either succeed fail use result wrap return type used parsing indicate whether url match given pattern type nt seen chunk chunk type specific urlparser package look like parsing url url split chuck exactly would expect todo split url list string chuck convenience type make working url segment easier parser formatter type variable represents interesting bit parser function describes form url order route match lot represents implementation detail nt really important u practical purpose may make thing clear think parser type really concerned taking url getting result result type err associated string describing error result ok type defined formatter function going look urlparser either help u build parser actually run parse u let start simplest route let look parser post route function exported urlparser match string exactly parser match single url segment equal post path match post match postswhatever route using urlparser package create parser route iterate looking match parser match return result ok parser fails return result err let look parser route new infix function relatively intuitive match essentially equal url postparser match route form post integer int function exported urlparser parser match integer value appears url also string function match string function take two parser return new parser composition two parser four function int string primary function use build parser another interesting thing note type declaration two parser postparser type parser int homeparser type parser telling u postparser going return int int matched int parser value eventually passed postroute postid parser returned postparser need function int type type result eventually returned successful application parser successful application parser return type ok eventually apply postparser give postroute type constructor function successful application parser would return type ok postroute int homeparser return value way postparser pulling value matched route strict match two parser need know match case parser take type returned result successful match result applying homeparser successfully eventually ok homeroute new function introduced oneof take moment think obvious take list parser return new parser succeeds parser list succeeds homeroute matching empty string indexhtml speaking homeroute route type map route type going use another new function format format function creates parser parser trick take function format successful value parse match say format successful value like mapping one result another result successful parse return result ok formatter function applied value ok new ok return value formatter returned case type constructor formatters parser created parser modifying routeparser match three route map result route type run parser last function going look urlparser parse function going modify parse function use urlparserparse parse function us newly created parser still using destructuring pull pathname location modifying path little account leading slash pathname leading slash parser split path resulting list empty string head nt want account parser interesting thing urlparserparse function type signature parse formatter parser formatter string result string first argument urlparserparse take formatter function similar format function looked nt want additional formatting point use identity function leave result unmodified identity function one default import next argument parser routeparser final argument url parse function return result pattern match result match return notfound route otherwise match route type value associated ok result essence successful match type result route taken lot time cover pretty small amount code still new elm still covering lot new syntax getting used working type matching continue cover parsing build application would encourage play around see thing work spend bit time looking source code elm navigation urlparser aside documentation urlparser url parser navigating new url course another important piece navigation app initiating change another route going much straight forward responding route change interesting thing navigating new url first time generate side effect going working elm navigation package going import bunch new stuff lot pretty obvious importing new thing html package attribute adding attribute html element class href function import used create attribute part one used oninput htmlevents section going using lower level event function onwithoptions event handler allow u preventdefault stoppropagation nothing scary hopefully let go ahead take look interesting bit update function thing changed since last visited handling different message msg defined update function get showhome message use navigationnewurl navigate like using pushstate javascript navigation also modifyurl function replacestate navigationnewurl nt immediately update url creates command cmd request update url elm internals actually perform side effect command provide message cycle back app effect complete nt necessary alerted url change occurs urlupdate function called side handling message sending message view user click link going update view quite bit first going delegate construction view function also seeing first time use attribute view class function creates attribute add class domnode class take class name add delegating construction view couple function viewheader viewbody viewbody function get current state argument since viewbody similar looked let get way using case expression match current route decide show seen little interesting viewheader function lot going think point able figure create header two link helper function build attribute list link href function class function creates attribute u onclick function interesting use onwithoptions instead regular onclick function htmlevents need preventdefault page nt refresh onwithoptions function take event listen record option decoder decoder javascript dynamic type add remove modify value object place nt matter elm everything need specific type transferring json javascript world elm world decode json elm value often wo nt need worry elm happening elm decoding event object turning something elm friendly decoder successful message provide cycled back app update function linkattrs function provide showhome showposts message two link link clicked decoder successful message fed update update url navigationnewurl routing take conclusion original goal cover architecture blogging app post think covered enough try quick follow detailed discussion blogging app going probably make sense break coding several post anyway also give chance spend little time routing next time expand nested route routing library couple routing library check hop elm route url article elm programming elm modal pure environment
138,Lobsters,elm,Elm programming,"Elm (0.18) for the Frontend, Right Now",http://bendyworks.com/blog/elm-frontend-right-now-updated-for-0-18,elm frontend right,elm frontend right updated elm originally written changelog podcast elm programming language build cool stuff faster fewer error know wrong idea programming nokidding mvc architecture would counter closer mvc purity architectural pattern example app elmchat example application good example postgrest elm architecture main model message union type interpreter update interested code part view bootstrap grid elmhtml full code getting line code elm brings table syntax overview amazing package manager semver applies rule extensible record duck typing static duck typed javascript interop par value coming j stellar error message human blog post type inference summary nearly eliminating runtime crash emerging language camp talk link hacker news lobster get touch,elm frontend right updated elm following article originally written july release elm programming language rewritten november comply syntactic semantic change elm enjoy changelog recently podcast elm programming language go feast ear right post build upon episode also want listen episode better job convincing benefit static typing functional programming purity better job precisely ignores thing talk build cool stuff faster fewer error elm exciting language aim scissors squarely knot complexity frontend development tangle thread html cs javascript make web development awkward javascript especially troublesome designed swallow error move something know wrong idea programming elm actually allows nokidding mvc architecture nt really seen elsewhere purist may object really mvc would counter closer intent mvc implementation reason pull simply purity application update happen starting model application state receiving incoming action creating new model view time solely derived state model lead wall v c component one clear api nt interfere others fact elm architecture documentation piece concrete type extreme regularity approach even mean architectural pattern library elm contrast mutability involved siren call feature inexorably lead one cheating practice difficult firewall layer mvc one another mutability kind chekhov gun go third act simply example app elmchat wrote example application try elm come good example tend learn best also wanted see communicate json api realistic ish scenario came chat app form list current message maintained server update accomplished polling every second optimal robust application update message realtime websockets serve goal writing restful json api use much irl square peg meet round hole aside since focus really frontend used postgrest serve simple db schema highly recommended let take look code following elm architecture split code main part modelelm viewelm updateelm supporting file define thing like type alias api wrapper brought together mainelm file let start main high level dive dependency main omitting import etc import model exposing chat model import update exposing update import view exposing view init chat cmd msg init model prefetchmessages prefetchmessages cmd msg prefetchmessages taskperform always pollmessages tasksucceed subscription chat sub msg subscription every second always pollmessages main program never chat msg main htmlprogram init init update update view view subscription subscription main function tie together whole model view update trio plus way subscribe external event every time clock tick five second example call htmlprogram take one record keyvalue pair init value one four data rather function expects twoelement tuple initial model command run immediately case model default blank model returned call model let take deeper look model consider three function update view subscription model module model exposing import remotedata exposing remotedata notasked webdata main model type alias chat message chatlist saying saying name name model chat model message notasked saying name piece type alias chatlist webdata list chatmessage type alias name string type alias saying string type alias chatmessage name name message saying model code may shocking depending mvc background model really container data model three field first message chatlist alias webdata list chatmessages webdata wrapper courtesy remotedata package wrap underlying value one four state notasked loading failure httperror success class wrapping multiplexing state data make much easier later indicate user going second third field saying name pretty selfexplanatory string tied text field though got special type mostly keep track could imagine flipping order name message field user interface find depending original order string code point two option either refactor entire codebase flip order everywhere deal cognitive dissonance ordering ui layer different ordering everywhere else think mthings model storage syncing formatting presentation code purely data structure message module message exposing msg import model exposing type msg sendmessage name saying incoming chatlist input string setname string pollmessages message module place defined applicationspecific type use throughout rest code putting module simplifies import also serf excellent documentation app basically described msg union type action user take inside application msg exactly one sendmessage indicates message sent rest endpoint user added message incoming msg result message coming back rest endpoint model set current list message input user typed something chat input character added model typed model thus always represents currently chat input setname msg work similarly input mean user typed name input pollmessages get triggered subscription clock mean like get new set data server together see message represent abstract action user app subscription take application powerful technique message data function method entirely another function give meaning see next section update function act interpreter data structure update module update exposing update import api import message exposing msg import model exposing chat chatmessage update msg chat chat cmd msg update msg model case msg sendmessage name saying let message chatmessage name saying model saying apisendmessage message always pollmessages incoming msgsresult model message msgsresult cmdnone pollmessages model apifetchmessages incoming input say model saying say cmdnone setname name model name name cmdnone update act central dispatch incoming msg msg combined current state model yield new model command familiar reduce inject foldl function language consider update method bodyaccumulator pas function memoized value plus new thing give new memoized value though also insert ability kick asynchronous job cmd msg notation model field newvalue update say creating new value model current value field set newvalue see msg affect model notice far model concerned sendmessage merely blank current field user hit enter send message message disappears appear split second later chat log call update sendmessage message also return command returned apisendmessage function shown interested code part view import omitted view chat html msg view model div class container stylesheet http stylesheet cssstylecss stylesheet http fontsgoogleapiscomcss familyspecialelite row class text talk div class img src imagesjoanpng row error modelmessages row inputcontrols model row lazylazy messagelist modelmessages much view code omitted still able smell general structure layout created bootstrap grid container row tag normal function stylesheet one wrote inputcontrols messagelist function implemented probably imagine set form input table message output respectively big thing notice view literally function chat model return html know send msg message elm subsystem nt go chasing anything else might affect template notice also nice compositional elmhtml let u write ever find repetitive segment html pull function nt underestimate effective technique inputcontrols messagelist function also wrapped messagelist function call inside lazylazy tell elm html rendered skip redrawing section second nt change messagelist chatlist html messagelist message case message notasked nottable loading loading nottable loading failure e nottable loading failed success let message listreverse listtake listmap msgrow zebratable th class text name th text message message taking closer look body messagelist see unwrapping webdata structure around list chatmessages ca nt start iterating chatmessages without unwrapping first write case statement since elm force u handle every situation webdata explicit point code handle nt asked data yet b data requested nt yet arrived c received error finally data first case show html table finally valid data show zebra table header wrap almost whole application le api bit go look full code narrowed interesting bit still getting line code elm already see many nice feature really sumisgreaterthantheparts situation thing included omitted elmthelanguage set apart frontend solution seen picked thing representative choice elm make let look elm brings table like said partial list elm lot nice feature go check syntax overview broad look elm work thing deserve special mention amazing package manager package manager know enforces semver elm package manager computes apisensitive diff previous code applies rule determine next version result three thing function type signature new one mean patch version previouslyexisting value new one added ie forwardcompatible minor version current api changed removed major version doc summarize follows mean package work elmlanghtml likely work everything point breaking change occurred might break code conceivable thing break minor change importing thing unqualified newly added value cause name collision extremely likely finally version number mean something real extensible record nt fooled dry term popular dynamic language people talk something called duck typing term somewhat fuzzy general gist index object object support messagecall work regardless type object extensible record static duck typed within function make kind call first john last doe b first jane last doe age c first jay age collate person personlast personfirst collate doe john collate b doe jane collate c compiletypecheck missing last field feel give lot flexibility dynamic language keeping benefit static typing winwin javascript interop javascript interop effectively javascript service elm interact j want already familiar javascript web worker seem quite familiar send message jsland declare port subscribe j also declaring whole module port module outgoing value elm port module main exposing port sending event analytics package port analyticevent string string cmd msg need implement anything else elmland initialize elm app j var app elmmainfullscreen subscribe j appportsanalyticeventsubscribe function category action ga send event category action direction send value elm j incoming value elm port module main exposing port listening done event datepicker port datepicked list string msg sub msg initialize elm app j var app elmmainfullscreen outgoing value datepicker datepicker hide function e appportsdatepickedsend edates see value exposed cmd value inside elm fit effectively want command execute asynchronously time j land instead elm land value come back j code structure subscription triggered whenever port receives new value elm par value coming j ensure welltyped stellar error message elm done great work making error message human pay big example taken linked blog post error highlight code written exact spot rationale suggestion fix paired type inference excellent error message really get root problem working style try territory think glad catching bug right away week later bug report refreshing summary elm even though new even though different offer real substantial alternative mv style framework like angular ember code elm cleaner maintainable simpler alternative improves upon j nearly eliminating runtime crash meaning undefined function instead cs html get composable programmable layout language really work sat presentation elm back emerging language camp presentation evan czaplicki elm author vertically centered page element room cheered message got clear weak current tool html cs landscape innovation frontend wide open dominance mutable imperative oostyle framework predestined javascript much functional language anything else use innovative technique learned time since early javascript java ruby python etc build better stuff let talk link discus article hacker news lobster tough project could use expertise team like bendyworks get touch
139,Lobsters,elm,Elm programming,Elm in Purescript,https://www.youtube.com/watch?v=O_kWwaghZ9U,elm purescript,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature elm purescript youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature elm purescript youtube
140,Lobsters,elm,Elm programming,Elm 0.18 is out,http://elm-lang.org/blog/the-perfect-bug-report,elm,,
142,Lobsters,elm,Elm programming,Elm from a Business Perspective,http://www.gizra.com/content/elm-business-perspective/,elm business perspective,elm wrong background correctness yesod elixir type class elm wrong isovector purescript elm perfect,elm like rising open source project getting positive endorsement negative critique reading good one always fun negative one importanttoday came across elm wrong realized always read good bad critique technical point view yet read mean business perspectivei assure different perspective one dollar cost bug type class higher kinded type backgroundbeing cto gizra mean always lookout improve process technological stack believe unique stack currently use drupal yesod basepath contenthaskellyesodphpdrupal elm natural outcome mindset havebeing coowner gizra mean mindful choice constantly need answer one important question actually make u productive result allow u make money simple thatcorrectnesselm fit nicely mindset fact exposed functional programing one thing elm make approachable saw different level safety guarantee thanks elm able better articulate gizra caring correctness care marketing point view saying care quality awesome rather accounting point view say care quality charge fixing bug mindset also reason chosen yesod haskell popular elixir erlang type project gizra service provider making sure introduce bug regression important lowlatency distributed faulttolerant system saying mindset embraced everybody right one u feeling right web development shop build client projectstype class notback elm wrong postfirst important note really disliked foul language offensive remark spirit open source shamebut reading essence sandy maguire isovector wrote made thing clear sandy maguire seems better developer know way haskell type class polymorphism know one learns struggle haskell really appreciate iti would assume know fact author might liked purescript better since would give powerful tool could put useare type class right thing elm maybe know also see case important part postright gizra five different elm project different stage different scale mean need elm developer constantly increasingluckily elm easy mean take learning know get devs productive quickly quicker angular reactbut elm easy mean almost every developer see already involved elm seasoned developer getting experienced developer board mean immediately productive mean gain per hourfurthermore highly opinionated elm architecture mean team developer hacking repo working around concept lower required communication time since looking model msg reveals entire concept without leaking implementation detailsand course elm type system compiler make know le bugsand lead well get point dollar right well justthere also case developer morale completely unscientific insight gizra devs dealt angular like much code hard maintain hand one elm really enjoy itand business owner perspective happy developer likely stay company engaged community help spread name around globeis elm perfect u believe many others wonderful solution without type class
143,Lobsters,elm,Elm programming,Elm Is Wrong,http://reasonablypolymorphic.com/blog/elm-is-wrong,elm wrong,friend app help u learn play guitar elm programming language scrapping typeclasses zerooneinfinity suggests direct gabriel gonzalez scrap typeclasses blub paradox implicit parameter vtable wellordered bucket sort basic typeclasses extensible record filed bug elm used support feature people write elm github repository published want readd feature best programmer library allegedly allowed published,week ago whim friend decided hackathon way app help u learn play guitar stroke inspiration decided learn something new project elm programming language heard many good thing consider post wished knew elm deciding write code since send information past save week frustration late perhaps gentle reader avoid egregious tarpit language abstraction go die jest elm really bad worse realize harsh word going require supporting argument get idea fairness want first talk thing really like elm got great documentation library really pleasant work well unfortunately elm library language happens great library elm qua language unsurmountable pile poorlythoughtout impossibletocompose new idea top least interesting piece haskell scrapping typeclasses got really appropriate word dealing dicts elm painful fault library language let look example working one insert comparable v dict comparable v dict comparable v comparable thing might ask little documentation searching lead includes number character string list comparable thing tuples comparable thing note tuples element comparable tuples big first ever heard zerooneinfinity rule second fuck comparable tuples anyway real thing want discus comparable magical compiler stuff argue whenever magical compiler stuff rear head thing going get arbitrary stupid lo behold thing get arbitrary stupid around comparable since compiler magic mere mortal unable make instance comparable say use custom datatypes key dictionary elm hear sound typesafety dying haskell solves problem seam like similar solution haskell insert ord k k map k map k bit constraint k must comparable difference programmer haskell opposed compiler writer define instance ord k haskell limit imagination haskell constraint called typeclasses roughly equivalent interface oop language except need part typeclass declaration time elm currently typeclasses evan czaplicki primary authordesignerbenevolent dictator elm suggests typeclasses might coming back early early still around elm more direct question elm type class gabriel gonzalez essay scrap typeclasses henceforth referred sytc coming elm learn new thing decided suspend disbelief give try blub paradox indicates know recognize idea way late decided play along want read essay sytc essentially say hey pas around object describes implementation contract care rather compiler infer u familiar scala implement typeclasses term implicit parameter sytc equivalent passing around vtable whenever want invoke code dynamic target reasonable approach sympathize fact actually writing typeclass mechanism language lot work especially something accomplish thing unfortunately day fighting typesystem trying get sytc working became glaringly obvious nobody advocating sytc elm actually implemented original essay written haskell went wrong let look contrived example get mood following type alias might capture intuition enum type type alias enum element array read type enum consisting unique value specified element make claim ordering array use set requires comparable value whole problem using might look like enumcount enum int enumcount witness arraylength witnesselements function take witness proof enum type encoded parameter type enum us known element witness figure many different enum value type something little useful let wrap pair function fromint toint new typeclass call ord ord witness type wellordered say two one definitely le equal another elm type alias ord fromint int toint int kind cheating getting property via bijection integer good reason put integer dictionary elm comparable one emulate haskell constraint dictionary key sake example imagine want implement bucket sort generically possible clearly bucket sort arbitrary data structure promising enum seems like good start add witness bucketsort enum unfortunately breaking abstraction barrier semantics adopted enum sufficient know finite number value canonical mean arranging bucket require ord witness bucketsort ord enum function implementable cost pas around additional two argument everywhere go unpleasant manageable extra problem witness must passed function right order powerful abstraction write constraint need type thus heavier burden become example defines basic typeclasses start writing abstraction digress moment one elm feature genuinely excited socalled extensible record type allow thing like type alias positioned x float float say positioned type x field float despite exceptionally poorly named think saying something positioned strictly le information saying nonpolymorphic cool feature mean project arbitrarily big type piece need gave thought build arbitrarily large type enforce certain field mean collapse witness single directory contains typeclass implementation support add new parameter earlier typeclass signature whose purpose polymorphic type alias enum element array type alias ord fromint int toint int look saying type wellordered provide witness record type containing field fromint toint correct type signature record might contain field also contain field maybe like field typeclasses let quick sanity check make sure yet done anything atrocious type direction north east west south witness element fromlist north east west south fromint elided brevity toint elided brevity dismay writing post learned elm repl presumably elm language support inline type annotation say syntax error write witness enum direction termlevel obvious inconsistency constraint declared typelevel evaluated term digress suffice say witness magic valid working elm far least let take moment stop think extra type bought u enum proof enum indicated witness type since heretofore polymorphic conveyed information u requirement consider type enum ord expanded old polymorphic parameter constraint witness w enum ord witness enum wellordered significant piece puzzle quest scrap typeclasses bundle typeclass witness single structure passed around freely still little work compiler u gone long way abstracting problem away user code final piece provide automatic mean deriving typeclasses bundling result together consider toy example enum already ordered array element type ordering completely arbitrary happened order programmer typed ordering knowing able get elm write u ord instance enum give feel particularly mood write derivingord enum ord enum derivingord w w fromint get welements toint elided direction send elm type annotation derivingord match definition derivingord enum ord enum oh broken elm issue b c strictly record update syntax requires already b field corresponding syntax add field even polymorphic know field b prima facie reasonable stop think oh well guess probably good reason regrettably good reason nothing done far unreasonable expectation typechecker fact thing way parser reiterate missing ability add field record filed bug turn elm used support feature removed pretty much one ever used field addition deletion forgive pedantic let look statistic time writing people write elm github written total repository feature removed people failing find usecase bleedingedge new feature extreme surprise anyone especially given guidance original author use feature furthermore first mention openunion type facility essentially trying implement find reference published huge amount time work way cultural memeplex bug closed explanation want readd feature sound salty thing separate good programmer ok one ability develop abstraction best programmer get library rest u write application use library reason library fix hole standard library allow u accomplish thing otherwise elm take peculiar stance library library blessing czaplicki allegedly allowed published fuck digress library exist overcome shortcoming language okay make library author annoying heavylifting user particularly salty whole figure use thing elm typeclasses firstclass solution interim instead naive approach requires linear amount boilerplate peruse developer time wasted continually reinventing wheel elm syntax supported could solve problem put library somewhere get czaplicki explicit goahead done worst case given n typeclasses naive solution requires n additional witness passed around every function call proposal presented essay would bring boilerplate definitely improvement deplorable state affair trying power witness approach retain typesafety requires superexponential amount code written let see given n typeclasses different combination havingthemornot let group set size ie many typeclasses contain assume need lift size k size case left n separate lifting function need write order add typeclass set typeclasses notice worstcase exact solution problem number function since lift required explicitly reimplement existing typeclasses grows n giving u tight upper bound amount code need write order achieve typesafety witness compacting ready function grows quickly longer superexponential officially reached superduperexponential hit ludicrous speed people worst part boilerplate know write already allowed czaplicki find usecase feature hey found one pick pick elm get around complexity ignoring making u everything hard way map function listmap dictmap arraymap among others none related one another annoying also break abstract datatype guarantee callsites tightly coupled implementation detail decide change list array efficiency reason whole codebase need know haskell solved problem typeclasses oop singledispatch elm mysteriously seems follow php footstep lotsandlots really similar function intent purpose namespace saying fuck live another million complaint semantics elm design comparison seem small post already long enough shame elm terrible pl standpoint rendering primitive stateoftheart really wanted like despite bad turn really wanting like elm enough actually like elm
144,Lobsters,elm,Elm programming,Type Bombs (Holes) in Elm,http://blog.jenkster.com/2016/11/type-bombs-in-elm.html,type bomb hole elm,codemesh hole truth one example half hole good whole one jessitron,want make anyone core elm team roll eye pick feature haskell say common way play game get extra hipster point say apologise advance post bit x elm x try justify really post elm already blessedfeature squint get point kris feature type hole brilliant use use codemesh last week saw university professor popping like pez crucially elm hugemongously useful beginner make typed functional programming easier every level getting fast precise help know next quick look uninitiated outline filthy little trick give type hole elm today hole truth done programming elm haskell purescript know compiler always opinion type function write function elm tally x listfoldl x true falses x true falses else true falses x compiler know type even warn flag happily tell toplevel value tally type annotation tally x inferred type annotation copy code tally list bool number number maybe could figured type bother compiler know type supposed assistant happy help type hole use mechanism granular level compiler assist figuring type function help figure type argument say tally x listfoldl x true falses x true falses else true falses heycompilerwhatgoesheremyfriend x compiler would say thank asking looked way rest function us argument think type number number somesuch thing tallyho say yeah pair number make ho would well truly tallied time get stuck type argument need stick marker compiler type hole give best guess tell looking actually far seen expert even wait get stuck hole tax return type hole simple useful universal save time headscratching help one example get elmtoday part one place use hole type signature already seen elm tell type tally function certain part signature sure wanted return pair number sure input type type hole rescue tally heycompilerwhatsayyoumyfinefellow number number thank asking course could fill whole type signature appreciate work missing piece look like list bool making whole signature tally list bool number number nt stick make cup tea time saved type hole available signature make sense mean whether stuck implementation design get advice half hole good whole one type hole elm yet point post argue inclusion point post use type hole elm already want tell dirty dirty trick work god judge secret get type hole elm pick primitive type know wrong stick instead tally x listfoldl x true falses x true falses else true falses lolwat x elm react suitable horror lolwat x function foldl expecting argument number number string stuck string knowing wrong elm borks tell discrepancy say conflict number number string since know string wrong know number number right fooled elm giving good quickly type level unsure type first argument certain date use tally date number number tally x elm complains tricked giving u right answer type mismatch srccontactrestelm type annotation tally match definition tally date number number type annotation saying date number number inferring definition type list bool number number disagreement date right list bool must stick knownwrong answer complain right one absence proper name calling trick type bomb hole controlled explosion go make actually finish note without recounting conversation jessitron last week know feature elm jessica type hole type hol wait say jessica type hole um yeah totally stole thunder least great mind think alike
145,Lobsters,elm,Elm programming,Online JSON to Elm decoder converter,https://noredink.github.io/json-to-elm/,online json elm decoder converter,,
146,Lobsters,elm,Elm programming,Managed effects and Elm,https://medium.com/@kaw2k/managed-effects-and-elm-36b7fcd246a9,managed effect elm,normal effect managed effect easier change recipe easier reason recipe easier test recipe get free optimization http orteildashnetorgcookieclicker,one really neat thing elm elm managed effect mean want perform action would cause effect somewhere ie calling http server reading setting local storage etc ask elm let examplehow make function bake cookie obviously baking cookie effect namely act baking cookie could go one two way normal effectswe want bake cookie encounter instruction go first need get flour drop everything get flour see need get sugar better drop everything go word every step go real timemanaged effectsanother way could writing recipe follow later may say recipe make cooky people make cooky right paradigm write list instruction one else dirty work u word describe task someone else timeso would ever want go life managed effect easier change recipeif get way cookie baking process realize forgot salt would make pretty bland cookie managed effect change description task time via mapping chaining functional tool disposal give u huge degree flexibilityit easier reason recipein first scenario manually immediately perform every action thing get quite scary imagine function named fetchchocolate later realize ordinary sounding function spent entire budget chocolate effect immediately implicitly executed real safe guard type behavior managed effect everything explicitly stated executed later looking function signature tell simple sounding function going cause chaos really managed effect wont cause chaosit easier test recipehow test first method well number thing test primarily need make sure instruction execution working correctly example execution sifting flour well amount flour could wrong managed effect testing recipe since recipe data testing incredibly simplewe get free optimizationswhen manually executing effect responsible implementation thing executed since elm managed effect simply give list instruction elm runtime u elm optimize thing hood jump task wait opportune time much imagine virtual dom want care thing inserted updated removed dom want care describing dom look like one optimization elm u back important bit know type pastry chef baking cooky know world better couldi hope shed little bit light yet another exciting aspect elm image used http orteildashnetorgcookieclicker grandma
147,Lobsters,elm,Elm programming,Decoding larger JSON objects in Elm 0.15 (2015),http://troikatech.com/blog/2015/08/17/decoding-larger-json-objects-in-elm,decoding larger json object elm,elm focus usability evan czaplicki elmforecast problem dark sky json api forecastio weather timeline record thread recipe mr czaplicki detour world partial application applicative functor magic,elm pretty cool functional programming language focus usability stronglytyped unceremonious nice type inferencing good documentation great stewardship creator evan czaplicki cool given excited talk work couple week fiddling whenever speak tech try add demo two tie thing together make point clearer led elmforecast tiny app showing call apis decode json display thing screen problem dark sky json api offer detailed weather information world uptothe minute data location power lot nice weather apps like forecastio weather timeline app also going nice picked data source started wrapping current forecast definition record type alias forecast time int summary string icon string precipintensity float precipprobability float temperature float windspeed float windbearing float humidity float visibility float cloudcover float pressure float ozone float record type marry lot feel javascript object static type thing colon familiar dynamic language next step seem alien instead calling something like jsonparse obj referencing field tell elm make typed forecast serialized data let see look like smaller object elm repl elm repl elm platform see usage example http githubcomelmlangelmrepl type help help exit exit import jsondecode json exposing type alias point x float float serialized x x string pointdecoder point x jsonfloat jsonfloat function jsondecodedecoder replpoint jsondecodestring pointdecoder serialized ok x resultresult string replpoint code defines type point jsondecodedecoder pointdecoder take care deserializing object two field returning point see type declared yet elm inferred every single one jsondecode function capable building object one eight field forecast throw away five thing example app building learn elm thought lazy author luckily thirst knowledge little guilt averted course relied little functional programming know almost get using jsondecoderandthen since almost actually quite google went thread recipe mr czaplicki offered following solution import jsondecode json apply jsondecoder b jsondecoder jsondecoder b apply func value func value let see action newpointdecoder jsonmap point x jsonfloat apply jsonfloat function jsondecodedecoder replpoint jsondecodestring newpointdecoder serialized ok x resultresult string replpoint apply chain many decoder like build objectn work detour world partial application elm like haskell every function curried mean practice every function take single argument return value turn another function taking single argument returning value forth define function add oh impressive add two number add x x function number number number add number look like function call two argument like see language look type signature compiler inferred add number number number arrow represent well tell exactly paragraph try explain let see add function number number number defining partially applied add getting another function number number calling function result final number literal amazes people world characteristic help build apply example paragraph point function signature float float point mean try use single decoder move closer getting actual point get yet jsonmap point x jsonfloat function jsondecodedecoder float replpoint looking type signature structure decodes float return another structure decode function float point tried thing type constructor took argument say float string bool string value first step would yield decoder type string bool string value solved first parameter still waiting resolution next three apply leverage fact progressively get final value applying function function taking care spitting every every step jsondecoder name pattern function box applying value box applicative functor read bit language know elm shy away burden mathy haskelly lexicon great thing hiding word showing thing practice end fostering intuition programmer concept useful let go back expects b c decoder decoder b decoder c function type b c decoder b yielding decoder c definition pointdecoder beginning post matched tee point seen function taking two float b returning point record c b c also function fact exactly seen jsondecodedecoder float replpoint thus say func value replace func jsondecoderdecode float point value jsonfloat end decoder built applying coming value float point arriving decoder point manually try build chain look like import jsondecode json exposing andthen type alias point x float float partialdecoder jsonsucceed point andthen f x jsonfloat andthen x jsonsucceed f x function jsondecodedecoder float replpoint decoderpoint partialdecoder andthen f jsonfloat andthen jsonsucceed f function jsondecodedecoder replpoint cool right understand technique go back gif marvel poor cs skill magic find refreshing dive functional programming usually magic start peeling layer function brought together perform amazing thing apply exactly power function allowing convert arbitrarily large structure nice type elm understand world factory ioc container help smile really really really improves programming everywhere fan saying ruby much better maintainable decided learn functional way true hopefully find joy
149,Lobsters,elm,Elm programming,Decoding Large JSON Objects: A Summary,https://www.brianthicks.com/post/2016/08/22/decoding-large-json-objects-a-summary/,decoding large json object summary,decoding large json object summary permalink problem user github api three solution use fewer field photo xavi moll discussion currying documentation noredink elmstyleguide like pipe value flow optional field summarized,decoding large json object summary published august minute read permalink several recent question elmdiscuss mailing list decoding large json object problem elm decoder provide decoding object field happens need solution unfortunately super obvious problem let flesh problem little bit say working user github api bunch field login octocat id avatarurl http githubcomimageserroroctocathappygif gravatarid url http apigithubcomusersoctocat htmlurl http githubcomoctocat followersurl http apigithubcomusersoctocatfollowers followingurl http apigithubcomusersoctocatfollowing otheruser gistsurl http apigithubcomusersoctocatgists gistid starredurl http apigithubcomusersoctocatstarred owner repo subscriptionsurl http apigithubcomusersoctocatsubscriptions organizationsurl http apigithubcomusersoctocatorgs reposurl http apigithubcomusersoctocatrepos eventsurl http apigithubcomusersoctocatevents privacy receivedeventsurl http apigithubcomusersoctocatreceivedevents type user siteadmin false name monalisa octocat company github blog http githubcomblog location san francisco email octocat githubcom hireable false bio publicrepos publicgists follower following createdat updatedat object fewer field could use like import jsondecode decode type alias user login string id int name string user decodedecoder user user user login decodestring id decodeint name decodestring since record field object even would want use syntax keep everything order three solution couple solution go order easy solution example going use couple field object aid readability lead first suggestion use fewer field object really comprehensive implemented several apps github api never use handful field returned response elm decoder need decode every field object even need decode order json see example name third field record json also cut api surface area make code easier maintain tractor worked many field look happened photo xavi moll try hard use need find stuck needing object field make pitstop look incremental decoding define record also get record constructor free thing type user example user string int string user remember discussion currying know call user string int string user left use advantage make pipeline using apply jsondecodeextra example use infix version apply import jsondecode decode exposing import jsondecodeextra exposing user decodedecoder user user decodesucceed user login decodestring id decodeint name decodestring want dive deeper work documentation great explanation quite done yet importing two custom infix operator two like selfdocumenting make app harder maintain also mysterious call decodesucceed top function succeed turning record constructor json decoder super obvious mean one step jsondecodepipeline noredink elmstyleguide recommends using jsondecodepipeline good recommendation since clean code last little bit use think transforming value come mind builtin operator function extra import worry familiar think like pipe value flow let use jsondecodepipeline improve decoder import jsondecode decode import jsondecodepipeline exposing required decode user decodedecoder user user decode user required login decodestring required id decodeint required name decodestring much clearer least eye see first glance three field required implicit version type using approach let optional field well summarized three way decode json object field summarize summary use field need mean problem go away mindset change use apply jsondecodeextra quick fix use jsondecodepipeline make readable decoding pipeline make future maintenance easier edit august corrected type signature user constructor user return value thanks martin janiczek catch
151,Lobsters,elm,Elm programming,Adding Elm to a Rails application,https://blog.abevoelker.com/2016-09-05/adding-elm-to-a-rails-application/,adding elm rail application,adding elm rail application update tutorial webpack abevoelkerrailselmexample prerequisite simple rail app http add webpack webpack foreman webpack dev server procfile add webpack entry point rail http install elm npm package install elm package tell webpack handle elm add elm rail app two main way render html elm component http wrapup elm guide slightly modify line reference,adding elm rail application sep minute read update tutorial written rail released integrated webpack support make whole process much simpler using rail check tutorial instead recently added elm rail application using webpack took figure new figured share complete example app available github abevoelkerrailselmexample post walk step used create prerequisite starting install finished make sure binary available working node npm elm elmpackage simple rail app create simple rail app static text greeting later replace static greeting using elm create new rail app addmodify following file application start rail server rail point browser http see following greeting add webpack going add webpack make easy elm code dynamically compiled javascript included rail app first add webpackrails gem gemfile bundle install run bundle exec rail generate webpackrails install modify existing file add new one gemfile modified foreman added gemfile used run webpack dev server alongside rail server development mode procfile new run rail webpack concurrently example file webpackrails gem rail bundle exec rail server webpack nodemodulesbinwebpackdevserver config configwebpackconfigjs procfile used foreman define process run case two process rail server webpack dev server start foreman using bundle exec foreman start use place bundle exec rail development packagejson new name webpackrailsexample version license mit dependency statswebpackplugin webpack webpackdevserver packagejson project file similar gemspec file notably dependency section keep track npm package required project configwebpackconfigjs new configuration file large file reproduce gitignore modified two directory added gitignore nodemodules managed npm ignored publicwebpack compiled webpack asset stored webpackapplicationjs new consolelog hello world default application entrypoint although changed modifying webpackconfigjs default application log world browser console add webpack entry point rail next modify layout use webpacked javascript rather applicationjs remove line appviewslayoutsapplicationhtmlerb javascriptincludetag application add following line right closing body tag javascriptincludetag webpackassetpaths application moved j include line j load html body fully loaded ready j start rail app bundle exec foreman point browser http note foreman start rail port rather see default webpack application world developer console take look html source rendered see j actually served different webserver rail webpackdevserver doctype html html head title railselmexample title meta name csrfparam content authenticitytoken meta name csrftoken content link rel stylesheet medium href dataturbolinkstrack reload head body p hello rail p script src http script body html install elm npm package ready start adding elm dependency first use command install needed elm npm package npm install save elm elmhotloader elmwebpackloader modify packagejson dependency install elm package need install default elm package ask install elmlangcore elmlanghtml elmlangvirtualdom create new elmpackagejson file elmstuff directory root project elmstuff added gitignore managed elm tell webpack handle elm next need modify webpack config tell recognize elm file compile open configwebpackconfigjs add section inside config object module loader test elm exclude elmstuff nodemodules loader elmhot elmwebpack verbosetrue warntrue add elm rail app time add elm rail app two main way render html using elm one letting elm control entire page body referred fullscreen letting elm control specific html node referred embed going use embed method give elm control part page probably typical approach legacy rail apps wanting add elm first add div welcome page elm take control modify appviewswelcomesindexhtmlerb follows add div p hello rail p div id main div elm component finally ready add actual elm code rail app going store elm component new subdirectory webpackelm first create directory create single elm component mainelm stored webpackelmmainelm create file following content import html exposing text main text hello elm finally must modify webpackapplicationjs load component embed target html div node inject bundled elm app div main var elm require elmmainelm elmmainembed documentgetelementbyid main reload http see following output wrapup note tested production deploy believe still work webpackrails compile output publicwebpack webpackassetpaths view helper know look also obviously lot advanced thing elm check elm guide get tour possible later start using webpack manage cs addition j slightly modify line reference
152,Lobsters,elm,Elm programming,Elm: Blazing Fast HTML Round 2,http://elm-lang.org/blog/blazing-fast-html-round-two,elm blazing fast html round,,
153,Lobsters,elm,Elm programming,Elm Applicatives & Json Decoders,https://toast.al/posts/2016-08-12-elm-applicatives-and-json-decoders.html,elm applicatives json decoder,elmdecodepipeline building towards pokémon viewer working demo want follow along run code quick flyby applicatives via applicatives term pure maybe result set list apply seen something like relate json decoder let apply heh heh knowledge set let create decoder using applicativestyle thinking elm applicatives let see action pokémon viewer demo takeaway run decoder fresheyeball,originally elm updated elm first thing notice jsondecodemap number soon ask decode structure larger importantly mapn documentation lead elmdecodepipeline inherently bad hide underlying concept user dslin elm jsondecodedecoder applicative fancy functional programming term attempt demystify leveraging power map apply able wrangle even toughest json thrown way first admit initially found json decoding incredibly point abandoned project early know decode scary jsonwhat building towards pokémon viewer working demoif want follow along run code yourselfthis install elm dependency start elm reactor point browser http clone http githubcomtoastalelmapplicativesandjsondecodersgit cd elmapplicativesandthejsondecoders npm install npm startquick flyby applicatives via maybeso even novice elm developer know maybe nothingto go use map maybe functormaybemap truethe also functionso happens addition infix use add applicative manner add applicatives term pure singletonapply ap purepure function something creates singleton list default case applicative type sometimes go name singleton make clear let look type signature pure haskellpure applicative f f aknowing let look example elm singleton maybejust maybe aresultok result x asetsingleton comparable set comparablelistflip list aapplynext peek ability lift value applicative apply haskell lifta applicative f b f f b f b f f bso exactly foo maybe number number number foo looking type signature maybe holding addition function maybeextraandmap andmap maybe b maybe maybe bthat look awful lot like let use import maybeextra maybe foo bar maybe number number bar foo maybeandmap let apply value completionbaz maybe number baz bar maybeandmap bool baz trueand thing creating infix andmapapply import maybeextra maybe singleton maybe singleton infixl maybe b maybe maybe b flip maybeandmap bool singleton true isnothing bool isnothing singleton nothing nothing true isalsonothing bool isalsonothing singleton nothing nothinglook demo maybeapplicativeelmso seen something like given function foo number number number foo x x partially apply foo number number foo foo easter egg created monoid foo truethe space operator function application relate json decoder looking doc jsondecode succeed succeed decoder alooks pretty pure singletony jsondecodeextra andmap flipped infix andmap decoder decoder b decoder b decoder b decoder decoder bwell obviously apply let apply heh heh knowledgewe start creating handrolled artisnal json cooljson string cooljson foo bar true foo bar true foo bar false create type alias represent cool data itemstype alias coolitem foo int bar bool also going need know field whose old infix prior elm signature string decoder decoder aso field used apply given decoder given string key json object eg foo decoded integer import jsondecode decode foodecoder decoder int foodecoder decodefield foo decodeintnow set let create coolitem decoder using applicativestylea reminder elm type coolitem used constructor coolitem case coolitem int bool coolitem happens apply foo decoder let look type signature find import jsondecode decode exposing decoder import jsondocodeextra decode exposing creating decoder coolitem constructor baz decoder int bool coolitem baz decodesucceed coolitem apply decoder first property foo int qux decoder bool coolitem qux decodesucceed coolitem decodefield foo decodeint full decoder completes coolitem constructor coolitemdecoder decoder coolitem coolitemdecoder decodesucceed coolitem decodefield foo decodeint decodefield bar decodeboolso decoder coolitem set app decode actual json string list coolitemimport html exposing html text import jsondecode decode view html string view text tostring main html string main cooljson decodedecodestring decodelist coollistdecoder viewdecodedecodestring decoder string result string adecodelist decoder decoder list go look demo jsondecodeapplicativeelmthinking elm applicativesso find applicatives language like elm without type class look type signature common name think singleton andmap would bein elm see term singleton succeed like decoder task pure time see andmap let see action us decodemap nested real jsonhttp request folk want see realworld example put together task cmd well pokémon viewer demopokemonviewerelmtakeawayif looking base jsondecode come core see jsondecodemapn stop many people deadend know look next object bigger blog article might find online often show done elmdecodepipeline something else showing instead work based math law applicative style tool cover case well understand going elm hood important caveat though fail silently write bad decoder solved using result run decoder using mapn function possiblespecial thanks fresheyeball explaining shit
154,Lobsters,elm,Elm programming,Non-Empty Recursion in Elm,https://x.st/non-empty-recursion-in-elm/,nonempty recursion elm,nonempty recursion elm con list nonempty list recursive nonempty list yeah discussion,nonempty recursion elm jul elm requires function total one consequence function list must handle empty list example since empty list head element listhead type listhead list maybe haskell hand allows partial function write function list handle empty list head crash give empty list type like approach since eliminates entire class bug annoying know list nonempty fortunately use nonempty list type con avoid bug hassle maybe example since nonempty list always head element conshead type thing get tricky want recurse nonempty list since tail nonempty list necessarily nonempty writeup show define nonempty list recursionfriendly way list classic definition list language like elm either empty list nil con head element tail list type list nil con list list would con con con nil since elm function total must handle case head list head list maybe head list case list nil nothing con first rest first nonempty list define nonempty list type call con take definition list remove nil type con con list always head longer need maybe head con head con first rest first want implement something recursive maximum element con run trouble maximum con maximum con first rest case rest nil first max first maximum rest list con ca nt recurse since con defined term list easily recurse recursive nonempty list way define nonempty list head element maybe followed tail nonempty list con con maybe con recurse easily maximum con maximum con first rest case rest nothing first rest max first maximum rest yeah using language powerful type system know list going nonempty may well let compiler know using nonempty list type example yeah small discussion writeup lobster
155,Lobsters,elm,Elm programming,How to Use Elm at Work,http://elm-lang.org/blog/how-to-use-elm-at-work,use elm work,,
156,Lobsters,elm,Elm programming,A type-safe string formatting library for Elm.,https://github.com/krisajenkins/formatting,typesafe string formatting library elm,formatting installation documentation see elm package full documentation usage example faq q ca nt something like building testing status credit chris done formatting urlparser glen mailer folkert de vries ian mackenzie license,formatting typesafe string formatting library fulfils need stringinterpolation printf function without sacrificing elm runtime guarantee requiring languagelevel change also composes well make building complex formatters easy installation toplevel directory one elmpackagejson call elm package install krisajenkinsformatting documentation see elm package full documentation usage want display something like hello name consist boilerplate string hello hole string another boilerplate string create build formatter using boilerplate string string hole join together import formatting exposing greeting hello string print formatter argument print greeting kris hello kris let try call formatter bad argument print greeting type mismatch argument function print causing mismatch print greeting function print expecting argument string number woo like printf ca nt blow runtime example want compose transforms bit pain string interpolation example translate rotate div need something like translate filling hole get messy translate tostring x px tostring px tostring r deg exactly mess make want printf function formatting break readable easilycomposable piece transform let px int px deg float deg translate translate px px rotate deg translate rotate actually better printf compose small piece together freely elm keep track argument need order infer final type transform automatically faq q ca nt something like hello nt believe typesafe way without core language change need parse formatting string compile time generate function right type either need builtin language support macro system even done work waited elm team end something hard compose hard extend library give utility printf nt need change language freely composable entirely extensible make formatters onthefly building testing make run whole build test suite status active development hard part done need utility function like string width alignment helper api subject change credit package port chris done formatting library haskell saw evan noah urlparser library realised could ported across thanks glen mailer suggesting function name premap thanks folkert de vries splitting test main published package thanks ian mackenzie roundto bugfixes license copyright kris jenkins distributed mit license
157,Lobsters,elm,Elm programming,How Elm Slays a UI Antipattern,http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html,elm slays ui antipattern,problem elm solution levelingup download doc,problem bug several place osx twitter client least one place slack client load apps twitter correct data go tweet show retweets moment real data load slack correct go view say message placeholder actual data load moment later get big long list one ux pattern crop everywhere start noticing showing zero empty showing loading message incredibly common access source code course willing bet case boil broken data model var data loading true thing store loading flag empty listcount thing loading ui supposed check loading flag display thing inevitably someone forgets slow connection ui immediately display thing found message response come back done especially deadline tight people start planning whole sprint around happy poor ux shame spoil quality experience small detail fix discipline linters unit test qa army fix data model fixing data model fastest cheapest reliable fix elm move elm need language explicit data model going talk properly absolutely basic version data model wrong type alias model thing list thing think broken outset saying always list thing available true startup cause display bug solution much better model would type alias model thing maybe list thing represent loaded thing yet naturally startup list thing nothing load completes becomes server reply genuinely thing empty list actually mean empty list longer doubleduty case javascript course long experience taught setting property null may correct asking runtime exception hence separate loading flag get forgotten elm handle nothing case safely compiler actively nag remember write message module view exposing someview model case modelthings thing compile missing pattern srcviewelm case branch possibility need account following value maybenothing add branch cover pattern get error message missing loading case exactly solution need go surface seems like made simple datamodel change reshaping data becomes much easier ensure improved user experience win levelingup like reckon much sophisticated elm still make easy mental model rest request one four state asked yet asked got response yet got response error got response data wanted language nice datamodelling facility easily create something represents four state type remotedata e notasked loading failure e success like result either type parameter failure success type plus tracking notasked loading state data model properly represent list thing something fetch external source type alias model thing remotedata httperror list thing make quick refinement external request rest request error type nearly always httperror quick alias tidy type alias webdata remotedata httperror type alias model thing webdata list thing nice thing data model elm compiler force write correct ui code keep track possibility error force handle ui personally love bit thought data model couple utterlyreusable definition rest project compiler back pushing u towards better ux happier user bargain price download want play published standalone package add project elm package install krisajenkinsremotedata doc happy modelling
159,Lobsters,elm,Elm programming,Putting Down Elm,http://mkndrsn.com/2016/06/06/putting-down-elm/,putting elm,putting elm adam waselnuk put continuation,putting elm jun focused task difficult pulled away try break task smaller piece minimize impact forceful ejection unfortunately fear disruption usually lead natural subdivision task fear elm adam waselnuk put program elm follow delicious breadcrumb trail extremely readable compiler error message program compiles everything work experience far found true breadcrumb still return later error message elm compiler become sort continuation use pick right left even day week later fixing error compiler present provides many natural stopping point thought elm pure functional language one hell side effect
160,Lobsters,elm,Elm programming,elm-conf US 2016,https://www.elm-conf.us,elmconf u,elmconf cancelled,elmconf cancelledas june elmconf cancelled previously registered receive email detail refund summary refunding ticket full many factor went decision important past day member elmconf team independently needed step back organizing reduced organizer capacity longer put event year know many think right choice given happening world right nowthanks brian hick lead organizer elmconf
161,Lobsters,elm,Elm programming,Elm - A Farewell to FRP,http://elm-lang.org/blog/farewell-to-frp,elm farewell frp,,
162,Lobsters,elm,Elm programming,Introduction to Functional Reactive Programming with Elm,https://www.youtube.com/watch?v=bx3mOTGRvs4,introduction functional reactive programming elm,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature introduction functional reactive programming elm youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature introduction functional reactive programming elm youtube
164,Lobsters,elm,Elm programming,Phoenix and Elm – Making the Web Functional,https://www.youtube.com/watch?v=XJ9ckqCMiKk,phoenix elm making web functional,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature erlang factory sf keynote phoenix elm making web functional youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature erlang factory sf keynote phoenix elm making web functional youtube
165,Lobsters,elm,Elm programming,Data Structures in Elm,http://tech.noredink.com/post/140646140878/data-structures-in-elm,data structure elm,record record make one record getting setting record extensability polymorphism extensible record scoped label daan leijen tuples basic tuples tuples destructuring tuples list square bracket inside list list operation practice elm html elmhtml package elmlistextra array array array implementation bagwell rompf rrbtrees efficient immutable vector blog announcement set set use set using set implementation dicts dictionary dict library dictionary elm architecture tessa kelly noredink,first started learning elm little sense data structure available data structure actually use use array list use set also going mapping difference object javascript record elm compiler tell problem dictdict definitely using set distinction best use case structure become clear practice hopefully also reading blog postrecordswhat record make onerecords semantically named frequently employed record state model information employ keyvalue pair likelyfamilar dot notation accessing valuesto create record write desired keyvalue pair name wuthering height author bronte readbyme true note notation may backwards expect type signature elm use colon assignment us equal sign planning create one record field may want create type alias describe shape record type alias libraryentry name string author string readbyme bool creating record field look like wutheringheights name wuthering height author bronte readbyme true use libraryentry type signature rather writing three requisite field also use libraryentry constructor libraryentry take three argument order name author readbyme hand u back record form desire wutheringheights libraryentry wuthering height bronte true diaspora libraryentry diaspora egan false imagine pattern come handy great deal data model many record like create share typegetting setting recordsnow wutheringheights diaspora representing book library wait actually read diaspora egan two week ago need update readbyme field updating record follows pattern newrecordname oldrecordname fieldname newfieldvalue newdiaspora diaspora readbyme true note diaspora unchanged operation diasporareadbyme false newdiasporareadbyme truedot notation way access value record every field name record given corresponding accessor function named field example readbyme diaspora false readbyme newdiaspora trueyou never write book bookname use name newdiaspora without defining anything additionalextensability polymorphismthe first iteration elm record based heavily extensible record scoped label daan leijen many feature elm record reflect leijen work paper well worth read interested modeling data however paper titular extensible scoped label longer apply elm recordsextensibility paired restrictability record value meant record could field added removed eg wutheringheights name author bronte readbyme true practice developer find feature useful extensibility record value removedthe removal extensibility record also meant end scoped label label name pointing different value record eg diaspora name name type alias us say libraryentry record name author readbyme field type alias libraryentry name string author string readbyme bool type alias say libraryentry exactly one type alias libraryentrywithisbn libraryentry isbn string wutheringheightswithisbn libraryentrywithisbn wutheringheightswithisbn name wuthering height author bronte readbyme true isbn record elm remain polymorphic meaning comprised field sort different type used string bools library example record hold value following reasonable instance type alias widget entry text entry html attribute entry html getstate entry bool record also transitive respect field defining onebeforetwo one two twobeforeone two one find onebeforetwo twobeforeone equal even though field declared different order though twobeforeone field value string instead number find compiler would let u make comparison causing type mismatchthis record elm structurally typed use record dependent type content compare record compare record field typeswhen create function consuming record general specific please write getname function take record name field write displayheader function requires name author publishdate editdate yourfirstborn maybe list related title getsentenceforlibraryentry libraryentry string getsentenceforlibraryentry name author note elm give u clean desctructuring author wrote name getsentenceforlibraryentry libraryentry string getsentenceforlibraryentry libraryentry libraryentryauthor wrote libraryentryname tuplesthe basic tuplestuples similar record except rather named field meaning field come order plus tuples comparable purpose relevant talking set dicts going leave let talk middle school math hot second suppose want graph point xy plane could create point without tuples type alias point x float float apoint point fine wellknown pattern expressing xy coordinate really want say point type x every time want make point tuples need totuples denoted contain commaseparated value writing coordinate elm tuple look like access value tuple given couple helper fst give u first value snd give u second value using apoint might x fst apoint snd apointthere one way create tuple write explicitly yeoldebasiccoord also use prefix operator construct tuple yefahncycoord destructuring three value far seen fst snd accessing value tuple elm destructuring quite powerful use access value tuple write function accessing third value tuple want used indicate nt use first two value tuple z float float float float z thirdval thirdval write function us one value tuple note type signature tuples value nt need type formatnameandage string string int string formatnameandage firstname lastname age firstname lastname tostring age suppose wanted refer author neil gaiman text might say formatnameandage neil gaiman neil gaiman listssquare bracket inside themin elm signifies empty list list linked list ordered collection node collection point subsequent node one value must type get head tail like expecthead give maybe value first element tail give rest list want add element con infix operator add front list concat append intersperse partition unzip pretty much whatever else think point yay list list operation practice elm htmllists vital something lot writing html elm elmhtml package elmhtml dsl clean function generating html node named familiarly eg div span take two list argument lead readable codewhen using nodegenerating html function first argument list attribute node also function like id class producing attribute second argument list list childrenso something like reasonable renderhello html renderhello div class hello could also throw click listener add custom attribute property text hello world span text oh look child div reasonable boring let go back library type alias libraryentry name string author string readbyme bool wutheringheights libraryentry wuthering height bronte true diaspora libraryentry diaspora egan false need book really need wutheringheights diaspora floating around cluttering namespace let make list book instead naming individually mylistofbooks list libraryentry mylistofbooks libraryentry wuthering height bronte true libraryentry diaspora egan true libraryentry handmaid tale atwood true libraryentry door stone rothfuss false libraryentry taming shrew shakespeare false libraryentry outsider hinton true libraryentry scanner darkly dick true let create function displaying single book viewbook libraryentry html viewbook name author readbyme div classlist isunread readbyme classlist take list string bool tuple represents classname whether apply div class bookname text name div class bookauthor text author great display booklist booklist list libraryentry second argument containing element need list need map data html directlymy favorite style use operator style make easy follow data important complex version viewbooklist emphasizes content bookcollectioncontainer div transformation booklist viewbooklist list libraryentry html viewbooklist booklist booklist listmap viewbook div class bookcollectioncontainer another version function version mirror familiar shape html closely disadvantage decide later add another mapping operation booklist harder add using style adding line listfilter readbyme instance viewbooklist list libraryentry html viewbooklist booklist div class bookcollectioncontainer listmap viewbook booklist data stored list mean easy map data view immutability mean whatever want list without worrying causing unintended change somewherethe ease list manipulated helpful oddshaped data instance suppose want combine booklist someone else booklist viewtwobooklist list libraryentry list libraryentry html viewtwobooklist booklist willsbooklist booklist listappend willsbooklist listmap viewbook div class bookcollectioncontainer could also create list html viewbook append listssuppose stole one book want store mylistofbooks mine want one book show html add book stolen front booklist wherever calling viewbooklist viewallbooks let thebookistole libraryentry axiomatic egan true completebooklist thebookistole mylistofbooks infix operator pronounced con steal book viewbooklist completebooklist one core function worth mentioning indexedmap coming javascript may feel like going extremely important j found often used index key way access data joke key get array fancy object depending function might helpful toomaybe want zebrastripe book entry silly way nthchild selector viewbook int libraryentry html viewbook index name author readbyme div classlist isunread readbyme iseven index div class bookname text name div class bookauthor text author may notice modular arithmetic going example list elm function aware concatmap filtermap semantically named concatmap applies function element list concatenates resultant list filtermap applies function element list keep successesas start kind fancy nonsense take look elmlistextraarraysarrays ordered collection item collection must type elm correspond array empty list discussed create empty array use arrayemptyto create array given length specific default element arrayrepeat tessa give array filled tessa might say many third option use arrayinitialize whose first argument desired length array arrayinitialize second argument function expression operating index result operation value array index arrayoftessas arrayinitialize index tessa tostring index arrayoftessas array javascriptland look like okay sweet obviously favorite one want get javascript get value back index key ask array since array object javascript arr something want tends undefined elm accessing value index exist fail question whether got undefined something marvelous array like undefined bwahaha going confuse later instead elm get back nothing nothing index maybe suppose array comprised libraryentrys mybooks array libraryentry mybooks arrayfromlist wutheringheights diaspora convenience using arrayfromlist convert list library entry array suppose try get value second index going fail since array indexing start length array try anyway mybookssecondindex arrayget mybooks mybookssecondindex nothingso maybe thinking situation might nothing array fine maybemybooks array maybe libraryentry note type signature indicates element maybes maybemybooks arrayfromlist wutheringheights diaspora nothing try access second index mybookssecondindex arrayget maybemybooks mybookssecondindex nothing unlikely useful way structuring thing encourage stahp illustrate clarity elm brings familiar javascript problem undefined supposed failed set value speaking setting value push value end array append array another create new array set value index setting value bit different jsin javascript something like var ariddle longest word english language var myanswerarray hmmmmmmmmmmmm myanswerarraypush myanswerarray consolelog myanswerarraylength foot foot var myanswer smile mile middle elm much myanswerarray arrayfromlist arrayset arrayset update array passed given index bound tried set value index way bound set occur arraytolist myanswerarray mile middle array implementationarrays implemented relaxedradix balanced tree extension vector used clojure scala optimized concatenation effectively even though immutable constant time getting setting obviously magic read math read math learn magic bagwell rompf rrbtrees efficient immutable vector read elm implementation read blog announcementas cool math behind array familiar might seem tend use currently reliability issue array many elm developer tend toward using list instead fear array rewritten pure elm instead native excitedsetswhat set use elm set valuable data structure one worth knowing well basic functionality set familiar middle high school math also college level took analysis real analysis abstract algebra logic philosophy set collection unique item elm item must comparables ints float char string list tuples typeso might make sense use set whenever find lot filtering check list entry inclusion list think using set instead collection element closed collection element subset another collection element collection unique may want use set instead listin deciding use set rather another data structure one important consideration element collection comparable set contain comparable value collection sweet library book going work setusing setsuppose libraryentrys unique id could store string id set type alias libraryentry id libraryentryid name string author string readbyme bool type alias libraryentryid string id build library basket library basket definitely thing worry totally basket collection checked book model yourlibrarybasket setempty setempty construct empty set checkedoutbooks setempty checking see book libraryentry say id checked simple setmember modelcheckedoutbooks return boolean describing whether element modelcheckedoutbooks book already basket setmember modelyourlibrarybasket tell usimplementationsets actually wrapper around elm dicts implemented red black tree aware result implementation reliable set dicts order element added rbtree impact form tree take make equality sticky conceptlet walk example setfromlist setfromlist setfromlist three set value difference set order value added set root node value know listversionsareordered settolist settolist settolist settolist true setscreatedinsameorderareequal true uhohnotequal false moral ask whether set equal asking two tree made value tree balanced way worth noting warning equality might always apply current plan elm include changing equality behavior set dicts dependent balancing rbtree documentation provides warningdictswhat dictionary dict map unique key value fair amount overlap use case dictionary set dictionary allow storing bit information since value indexed unique key try dictget comparable dictempty may give u nothingour library dictionarywhat one book library definitely right dictionariesour library book loaning system set example might work better dict dict tie checked id library entry directly type alias libraryentry id libraryentryid name string author string readbyme bool type alias libraryentryid string model yourlibrarybasket dictempty dictempty construct empty dict checkedoutbooks dictempty henryv libraryentry henry v shakespeare true suppose want add henry v library basket dictinsert henryvid henryv modelyourlibrarybasket give u back dictionary key pointing libraryentry describing play henry v make easy work henryvsuppose want display book basket using set hold id book would required filteringchecking every book id see set basket id dict something similar dictmember modelyourlibrarybasket true also grab value dict type alias model yourlibrarybasket dict libraryentryid libraryentry note type signature checkedoutbooks dict libraryentryid libraryentry model dictsingleton creates dictionary keyvalue pair henryv value model dictsingleton henryvid henryv dictempty viewbook libraryentry html viewbook name author readbyme div classlist isunread readbyme classlist take list string bool tuple represents classname whether apply div class bookname text name div class bookauthor text author viewbooklist list libraryentry html viewbooklist booklist booklist listmap viewbook div class bookcollectioncontainer viewlibrarybasket model html viewlibrarybasket model let yourbasket modelyourlibrarybasket dictvalues get u value list viewbooklist div class basket text basket yourbasket remove book basket semantic dictremove modelyourlibrarybasket let write function either remove book basket add basket casebycase basis type action removefrombasket libraryentryid addtobasket libraryentry update action model model update action model case action removefrombasket libraryentryid model yourlibrarybasket dictremove libraryentryid modelyourlibrarybasket addtobasket libraryentry model yourlibrarybasket dictinsert libraryentryid libraryentry modelyourlibrarybasket point might seeing elm architecture beginning emerge going wire everything together since focus data structure rather architecture exercise try building miniapplication begun heretessa kelly engineer noredink
166,Lobsters,elm,Elm programming,How to Create Tetris in Elm,https://www.youtube.com/watch?v=GMSXYnMH1gg&list=PL7C8fMD-89DKhlerIE3BrYNd0PlhA6Zch&index=1,create tetri elm,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature create tetri elm part basic youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature create tetri elm part basic youtube
167,Lobsters,elm,Elm programming,The Elmification of Swift,https://medium.com/design-x-code/elmification-of-swift-af14b7f92b30,elmification swift,first even care elm architecture declarative fractal referentially transparent go signal andré staltz elm architecture model update view model update view signaladdress action view excellent achieve swift rxswift reactivex observables rxmarbles interactive diagram map cool story bro get protocol typealias typealias typealias static func static func static func protocol static func static func class class class node enum case case case blah blah blah least make bit concrete class typealias class func return enum class func switch case return struct let class func let let return virtual representation class func let return class func let let return added protocol rxswift ok think get happening fit together let let let switch case case let return let let let let let let let let let let let nice left lovely overall takeaway anything else http githubcommomentumworksswiftelm swifters slack channel twitter resource,first even care elm architecture told kidding kindabut seriously care elm allows write ui declarative manner using fractal referentially transparent component making app significantly easier reason easier test given arbitrary model calculate result rendering given component ui even entire ui go give brief background elm us functional reactive programming provides almost silky smooth haskelllike syntax building webapps frp mean essentially reacting stream given event value using functional programming technique elm stream called signal using frp able write ui completely declarative way later point know nothing frp go quick read andré staltz fantastic intro frp carry onthe elm architecture result fractal application built component expose model update function view follows type alias model type action dothing dootherthingupdate action model modelupdate action model signaladdress action model htmlview address model model simply type underlying model component basic text field model would type alias string update function take action model applies action model return result note sideeffect free completely functional view take given model return corresponding html model building webapp signaladdress action thingy event stream sending new action example page contained button sent dootherthing action would sending action stream fractal keep breaking component component made look sticking basic model update view pattern throughout define simple base level component build much complex one resulting application look easy understand reason every layer view function pure function effectively map given model html free u write completely declarative style example view function individual counter would view address model div button onclick address decrement text div countstyle text tostring model button onclick address increment text worry much syntax unfamiliar point take model build html component manner referentially transparentexcellent achieve swift fantastic question young squire answer first let introduce wonderful rxswift implementation reactivex swift remember frp using stream event value elm instance called signal well use rxswift provide stream making use observables applying functional programming concept eg observable int applying map hell mean top part represents value observable given time axis case represents time circle represent value observable updated bottom part represents new stream new observable created result applying mapping functionif find bit confusing actually great site called rxmarbles provides interactive diagram allowing see result applying various operator rx observables absolutely check interactive diagram map cool story bro get first create basic component protocol component typealias model typealias action typealias c context static func initmodel static func update action model static func view model context c base base node right form basis fractal pattern model update elm may noticed view take context rather stream elm architecture also advocate use context node returned view func going form virtual view hierarchy show shortly base struct containing component id parent id frameas returning html rather returning form nsview need base component build protocol nativecomponent component static func create frame nsrect model nsview static func wireup context c nsview nsview publishsubject class viewcomponent nativecomponent parent nsviewclass buttoncomponent nativecomponent nsbuttonclass textfieldcomponent nativecomponent nstextfieldso introduced function building nsview nativecomponent function wiring component return stream publishsubject poking new model update come back shortly ok taking step back returned node component view function basically going virtual view hierarchy enum node case view node base cruft case button buttonmodel buttoncontext base cruft case textfield textfieldmodel textfieldcontext base cruft care limited virtual hierarchy parent view button text field simple use build virtual view use render appblah blah blah least make bit concrete let build simple app creates two text field linked together first define model class linkedlabels component typealias textfieldcomponentm model class func initmodel return textfieldcomponentinitmodel model case mega simple model textfieldcomponent basic building block initmodel delegate onto component senum case update textfieldcomponenta actionclass func update action model switch action case update let tfaction return textfieldcomponentupdate tfaction model action slightly complicated wrap textfieldcomponent action also delegate call component update function similar way modelstruct c context let dispatch class func view model context c node nodetextfield let left textfieldcomponentview model context textfieldcomponentc dispatch contextdispatch aupdate base id frame etc nodetextfield let right textfieldcomponentview model context textfieldcomponentc dispatch contextdispatch aupdate base id frame etc nodeview nodetextfield nodetextfield return viewcomponentview left right context nsnull base id frame etc note context textfieldcomponent exactly context component context contains dispatch function wrap one action creating textfieldcomponent context wrap virtual representation correct need turn actual nsview create wireup function nativecomponent come play look textfieldcomponent class func create frame nsrect model model nsview let nstextfield nstextfield frame frame nstextfieldstringvalue model return nstextfield well simple enough wireup function class func wireup context context nsview nsview publishsubject let channel publishsubject let nstextfield nsview nstextfield channelmap subscribe nstextfieldrxtext adddisposableto disposebag nstextfieldrxtext subscribenext text contextdispatch aupdate text adddisposableto disposebag return channel lot going worry break first create stream update textfield publishsubject need able push update stream might better create channel elsewhere pas function idea create publishsubject textfieldcomponentmodel swift support variance support protocol level next subscribe channel map value string feed nstextfield stringvalue via rxtext property added protocol rxswift mean time new value passed stream nstextfield updated valuewhen update made nstextfield stringvalue want dispatch update actionthe result nstextfield push model change feed u delicious action someone start typing itok think get happening fit together build component wire need write main loop respond action update ui accordingly first concentrate generating new model action let action publishsubject appaction let loop actionsscan appinitmodel model appaction let updatedmodel appmodel switch appaction case init updatedmodel model case action let action updatedmodel appupdate action model return updatedmodel se performing scan action stream similar fold emits result application closure applying see doc apply action return resultant model basic init action return initial model wrapper action delegate app update function next want subscribe model produced loop use feed ui follows loopsubscribenext model generate virtual node let updatedroot appview appcontext dispatch actionsonnext appactionaction model model base base diff previous virtual node let allnodes updatedrootflatten let allnodeids set allnodesmap id let addednodes updatednodes removednodes compare allnodes existing node create nsviews added node vnode addednodes let component nativecomponent componentfornode vnode let nsview componentcreate vnodeframe vnodemodel add nsview collection current view add nsview subview either parent root view let stream componentwireup vnodecontext nsview add stream collection stream stream next vnodemodel cheated little including function node enum illustrate point full code linked end article remove node view due ditched vnode removednodes let nsview grab remove collection current view nsviewremovefromsuperview let stream grab remove collection stream stream completed stream dispose push updated model updated node vnode updatednodes let nsview grab collection current view nsviewframe vnodeframe let stream grab collection stream streamon next vnodemodel perform cleanup push init action action stream adddisposableto disposebag actionson next appactioninit go loop update model response action generates virtual view diffs existing view update ui accordinglynice left well covered styling pretty important part elm achieves styling via cs expect like able apply styling similar manner still yet done alternatively could become part component model still much discussion needed around thisalso rxswift mainly focus io component whereas need use osx one lot component currently unsupported though started working adding rxswift lovely overall takeaway using architecture like able create application fractal nature resulting pattern pretty much writes write ui completely declarative styledefine component easy reason improving ability test greatlyanything else code exploration found github http githubcommomentumworksswiftelmwe continuing investigation somewhat taken bit pivot looking component model stored metadata documenting way look thatif question would like get contact swifters slack channel twitteroh course interest recruiting resource
169,Lobsters,elm,Elm programming,elm-validate: sync and async validation with state,https://github.com/shelakel/elm-validate,elmvalidate sync async validation state,join github today sign file permalink elmvalidate current version example example issue license resource license reload reload,validation library elm supporting sync async validation state dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time elmvalidate validation library elm supporting sync async validation state current version elm example see example issue please open ticket license see license mit validation library elm supporting sync async validation state resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
170,Lobsters,elm,Elm programming,Elm SPA Routing with single state tree,http://rundis.github.io/blog/2016/haskel_elm_spa_part3.html,elm spa routing single state tree,,type alias model withroute routesroute homemodel homemodel artistlistingmodel artistlistingmodel artistdetailmodel artistdetailmodel type action noop homeaction homeaction artistlistingaction artistlistingaction artistdetailaction artistdetailaction routeraction transitrouteraction routesroute initialmodel model initialmodel transitrouter transitrouterempty routesemptyroute homemodel homeinit artistlistingmodel artistlistinginit artistdetailmodel artistdetailinit action signal action action signalmap routeraction transitrouteractions mountroute route route model model effect action mountroute prevroute route model case route home model effectsnone artistlistingpage model effectsmap artistlistingaction serverapigetartists artistlistinghandleartistsretrieved artistdetailpage artistid model effectsmap artistdetailaction serverapigetartist artistid artistdetailshowartist newartistpage model artistdetailmodel artistdetailinit effectsnone emptyroute model effectsnone routerconfig transitrouterconfig routesroute action model routerconfig mountroute mountroute getdurations actionwrapper routeraction routedecoder routesdecode init string model effect action init path transitrouterinit routerconfig path initialmodel
171,Lobsters,elm,Elm programming,Elm in the real world,http://futurice.com/blog/elm-in-the-real-world,elm real world,reactive compiler error chose elm cyclejs reagent recent endeavor elm le complexity strong static type compiler message immutability purity runtime exception reactive design embedded content http project architecture startapp elm architecture dissecting state task strictness mixed blessing package system enforces semantic versioning conclusion purescript elm documentation awesome elm learning fp hard way fun,article originally titled elm real world started sound strange evan mentioned ossi jan beginner friendly functional reactive programming language building web frontend choosing elm customer project made job nicer ever helped maintain project velocity month development boil two thing opinion elm restricts way program resulting maintainable code matter whatthere runtime exception debugging way le issueat reactive conference gave lightning talk stateless web ui rendering many people asked hard debug compiled elm code browser little confused question remembered like write javascript make change switch browser set debugging stop click thing app check debugger go uhhh happen maybe consolelog something writing elm hand like make change check superb compiler error fix next course switch browser check actually wanted point nt spend half time coding digging debugger elm compiler error super helpfuldespite whole new language learn would argue gain language design far outweigh loss time learning javascript convoluted language myriad different library framework linters et cetera try make dealing le painfulbased experience wholeheartedly recommend elm bigger frontend application project part cumbersome javascript sure thing considered value guarantee elm provides far ability thing quick n dirtyhow chose elmin summer stroke luck got project restriction frontend technology tasked building web application select expert user scratch browser support target reflected fact latest chromei sat henrik saksela discus option baseline assumption would use react build frontend nt convinced merit talked cyclejs clojurescript reagent recent endeavor elmin end decided give elm try quickly fall back reagent react nt work figured try make trickiest part technologywise first could fail earlyhere originally put project readme le complexitythe main property benefit using elm instead plain javascript following strong static type finding error fast readable compiler messagesno null undefined impossible leave possible problem unhandledimmutability purity readability maintainabilityno runtime exception uncomparable reliabilityreactive design frp nt optin baked right languagemonths later embedded content http projectthe application tool quickly managing news website content essence article site main page curated handful expert tool mean efficiently futurice also responsible design user interaction graphic building backend service great cohesion within whole projectthe interaction heavily based draganddrop place article page user would drag side panel main panel similarly module article group could dragged page determine orderarchitecturenote back started project startapp nt big thing might guided approach different direction feel architectural choice resulted great solution casethe elm architecture outline basic pattern model update view fact mandatory separation elm application language work way way around iteverything elm immutable variable function definition record bit like j object mean rendering view example possibly effect application state dreaded global state actually nice thing since sure nothing changing secret elm patternthe elm pattern following define shape data model define action react update define show state view dissecting statehaving worked virtual dom immutable structure henrik reasoned could try rely backend data forgoing frontend state completely simple idea worked really well uswe came think application state manner ui different state regarding view ongoing draganddrop action persist session uistatethe backend represents real state world data persist datastateuistate handled like elm application updating state based actionsthe way handled datastate bit involved standard pattern though define shape data backend model define action get turned tasksdefine http call task get turned succeedfail actionsdefine react succeedfail action update define show state view model pessimistic ui update show pattern differed standard elm application instead updating model immediately based action used action determine http call necessary comply user intent call resolve either failing succeeding scenario translated update showing notification error changing data short fully pessimistic ui would save state backend every change pessimistic mean never assume operation succeed instead rely fact server respondsthe way update backendprovided data elm application main kicker though posted change list backend simply get whole list backend replace whole thing model mean state never inconsistent backend frontend also made sure one task could running simply deferring datachanging user interaction ui updated user could still scroll click thing task running drag thing one place another would imply data change two main concern approach ui responsive enough backendonly update madness discard replace whole model update turn concern mostly unfounded virtual dom elmhtml heavy lifting browser updated item get rerendered concern valid though previously stated project expert tool would used within customer network using desktop computer experiment using wireless connection actual user wired connection found heaviest update took average optimized caching sped thing tenfold result pretty much update happen consistently great strictness mixed blessing strictness elm proved invaluable since compiler wo nt let disregard potential failure even trying something way might end production code coupled total immutability language enforces good functional programming practicesthe place elm restriction become hardship dealing outside world one need provide full modeling data structure wish parse json response server need take account parsing may fail point seems obvious get familiar elm type system though api little tricky example response json certain property define property available may need jump hoop make workanother thing interoperability javascript library first though elm frp functional utility builtin elmhtml package come virtualdom need stuff like lodash react reduxbut need interact javascript mechanism called port port essentially strictly typed event stream listen elm j push event j elm mean need write boilerplateish code elm javascript order pas message side javascript library need different kind object want pas boilerplate code end withthat said elm still fairly young seems quickly gaining recognition aftermath functional web frontend tsunami react friend brought fact commonly used library alternative still missing could soon turn topic dependency elm one ace sleeve package system enforces semantic versioning strict typing package manager infer outfacing change package source code determine version number sudden breaking npm package upgraded conclusionsgo learn elm seriously simplest language ever tried team put crazy lot effort making developer experience nice possiblethe syntax may seem daunting first nt fret like getting nice new sweater day familiar like always known project two three developer never coded elm got speed productive couple week even sceptic told got initial shock found elm nice language good fit projecta compiled elm application whole frp implementation built might make sense use small thing mostly static web page kind us may better eg purescript purescript however much harder learn without solid prior understanding functional programming concept difference two well way handle data elm us persistent data structure hood mean better performance big apps purescript resort standard javascript data structure result smaller compiled filesto get started elm recommend reading official elm documentation checking link awesome elm first learning language wrote introductory article describes basic syntax modelupdateview pattern learning fp hard wayhave fun liked article please consider sharing others might well thank proofreading comment clarification suggestion harri hälikkä andre medeiros henrik saksela richard feldman helpful
172,Lobsters,elm,Elm programming,"Elm joins NoRedInk, also creates Elm Software Foundation",http://elm-lang.org/blog/new-adventures-for-elm,elm join noredink also creates elm software foundation,,
173,Lobsters,elm,Elm programming,Built With Elm,http://builtwithelm.co/,built elm,,
175,Lobsters,elm,Elm programming,Elm faster and friendlier in 0.16,http://elm-lang.org/blog/compilers-as-assistants,elm faster friendlier,,
176,Lobsters,elm,Elm programming,Minesweeper - a brief journey from JavaScript/React to Elm,https://rundis.github.io/blog/2015/elm_sweeper.html,minesweeper brief journey javascriptreact elm,,function onwedge game tile return tile gameget col function oneedge game tile return tile gameget col gameget col function nw game tile return onwedge game tile null idx game tile gameget col function n game tile return idx game tile gameget col etc ommitted direction brevity const direction nw n ne e se sw w function neighbour game tile return keep direction function dir return gamegetin tile dir game tile
178,Lobsters,elm,Elm programming,"Elm for the Frontend, Right Now",http://bendyworks.com/elm-frontend-right-now/,elm frontend right,elm frontend right note article rewrote elm ruby rogue podcast elm programming language build cool stuff faster fewer error know wrong idea programming nokidding mvc architecture would counter closer mvc purity architectural pattern example app elmchat example application good example postgrest elm architecture part main partially applied type signal model type union type interpreter update folding function foldp interested code part view bootstrap grid elmhtml elmhtmlshorthand full code getting line code elm brings table syntax overview amazing package manager semver applies rule extensible record duck typing static duck typed javascript interop par value coming j stellar error message human blog post type inference summary nearly eliminating runtime crash emerging language camp talk link,elm frontend right note article written elm date many concept discussed article removed upgrade elm syntax changed move please read article rewrote elm november ruby rogue recently podcast elm programming language go feast ear right post build upon episode also want listen episode better job convincing benefit static typing functional programming purity better job precisely ignores thing talk build cool stuff faster fewer error elm exciting language aim scissors squarely knot complexity frontend development tangle thread html cs javascript make web development awkward javascript especially troublesome designed swallow error move something know wrong idea programming elm actually allows nokidding mvc architecture nt really seen elsewhere purist may object really mvc would counter closer intent mvc implementation reason pull simply purity application update happen starting model application state receiving incoming action creating new model view time solely derived state model lead wall v c component one clear api nt interfere others fact elm architecture documentation piece concrete type extreme regularity approach even mean architectural pattern library elm contrast mutability involved siren call feature inexorably lead one cheating practice difficult firewall layer mvc one another mutability kind chekhov gun go third act simply example app elmchat wrote example application try elm come good example tend learn best also wanted see communicate json api realistic ish scenario came chat app form list current message maintained server update accomplished polling every second optimal robust application update message realtime websockets serve goal writing restful json api use much irl square peg meet round hole aside since focus really frontend used postgrest serve simple db schema highly recommended let take look code following elm architecture split code main part modelelm viewelm updateelm supporting file define thing like type alias api wrapper brought together mainelm file let start main high level dive dependency part main omitting import etc main signal html main signalmap view actionsaddress mergedmodel action mailbox action action signalmailbox noop mergedmodel signal chat mergedmodel signalfoldp update model mainsignal mainsignal signal action mainsignal mergemany actionssignal currentmessagessignal outgoingmessagessignal omitting helper function main function tie together whole model view update trio although bit indirectly main view function partially applied address action elm address something like channel message sent case message useractions see type partially applied view actionsaddress function expecting model type chat argument signalmap come signal mergedmodel say change model time eg user name set signalmap adapts view actionsaddress function accept signal model change since view function finally yield html type whole main function signal html html change time pretty apt description modern webpage diving function mergedmodel signal model update resulting applying update function action arrives mainsignal finally mainsignal merges signal coming ui actionssignal api server currentmessagessignal outgoing message signal outgoingmessagessignal post api model module model import type exposing chat message model chat model message field name model code may shocking depending mvc background model really container data model three field message list message current input field input field user name last two input type string think mthings model storage syncing formatting presentation code purely data structure type module type import array exposing array type action sendmessage message input string setname string incoming list message noop type alias message name string message string type alias chat message list message field string name string type module place defined applicationspecific type use throughout rest code putting module simplifies import also serf excellent documentation app basically described action union type action user take inside application action exactly one sendmessage indicates message sent rest endpoint user added message input user typed something chat input character added model typed model thus always represents currently chat input setname action work similarly input mean user typed name input incoming action result message coming back rest endpoint model set current list message noop occasionally useful action nothing notably used kind blank initial state together see message represent abstract action user take application powerful technique action data function method entirely another function give meaning see next section update function act interpreter data structure update module update import signal exposing address import type exposing action chat update action chat chat update action model case action sendmessage msg model field incoming msg model message msg input say model field say setname name model name name noop model update act central dispatch incoming action action combined current state model yield new model folding function foldp used mainmergedmodel step time forward app notation model field newvalue update say creating new value model current value field set newvalue see action affect model notice sendmessage merely blank current field user hit enter send message message disappears appear second two later chat log sendmessage action sent apioutgoingmessages address shown interested code part view import omitted view address action chat html view address model container stylesheet http stylesheet cssstylecss node link ahref http fontsgoogleapiscomcss familyspecialelite arel stylesheet img asrc imagesjoanpng talk row inputcontrols address model row messagelist model omitted view helper function much view code omitted still able smell general structure layout created bootstrap grid container row tag normal function stylesheet one wrote inputcontrols messagelist function implemented probably imagine set form input table message output respectively big thing notice view literally function address send update current state model nt go chasing anything else might affect template notice also nice compositional elmhtml let u write ever find repetitive segment html pull function nt underestimate effective technique inputcontrols messagelist function also used elmhtmlshorthand able write succinct tagstyle html function wrap almost whole application go look full code narrowed interesting bit still getting line code elm already see many nice feature really sumisgreaterthantheparts situation thing included omitted elmthelanguage set apart frontend solution seen picked thing representative choice elm make let look elm brings table like said partial list elm lot nice feature go check syntax overview broad look elm work thing deserve special mention amazing package manager package manager know enforces semver elm package manager computes apisensitive diff previous code applies rule determine next version result three thing function type signature new one mean patch version previouslyexisting value new one added ie forwardcompatible minor version current api changed removed major version doc summarize follows mean package work evanczelmhtml likely work everything point breaking change occurred might break code conceivable thing break minor change importing thing unqualified newly added value cause name collision extremely likely finally version number mean something real extensible record nt fooled dry term popular dynamic language people talk something called duck typing term somewhat fuzzy general gist index object object support messagecall work regardless type object extensible record static duck typed within function make kind call first john last doe b first jane last doe age c first jay age collate person personlast personfirst collate doe john collate b doe jane collate c typecheck missing last field feel give lot flexibility dynamic language keeping benefit static typing winwin javascript interop javascript interop elm call javascript foreign function interface j ffi described podcast javascript service work elm interact j want send message jsland declare port subscribe j outgoing value elm module example port time signal float port time every second subscribe j var example elmworker elmexample initial value exampleportstimesubscribe callback callback called every second time direction send value elm j incoming value elm port price signal float outgoing value j var example elmworker elmexample initial value exampleportspricessend see value exposed signal value inside elm fit j code may send update eg exampleportspricessend j direction structure callback called whenever signal new value elm par value coming j ensure welltyped stellar error message elm done great work making error message human pay big example taken linked blog post error highlight code written exact spot rationale suggestion fix paired type inference excellent error message really get root problem working style try territory think glad catching bug right away week later bug report refreshing summary elm even though new even though different offer real substantial alternative mv style framework like angular ember code elm cleaner maintainable simpler alternative improves upon j nearly eliminating runtime crash meaning undefined function instead cs html get composable programmable layout language really work sat presentation elm back emerging language camp presentation evan czaplicki elm author vertically centered page element room cheered message got clear weak current tool html cs landscape innovation frontend wide open dominance mutable imperative oostyle framework predestined javascript much functional language anything else use innovative technique learned time since early javascript java ruby python etc build better stuff let talk link
179,Lobsters,elm,Elm programming,Compiler Errors for Humans,http://elm-lang.org/blog/compiler-errors-for-humans,compiler error human,,
180,Lobsters,elm,Elm programming,Learning functional programming by making games in Elm,https://github.com/Dobiasd/articles/blob/master/switching_from_imperative_to_functional_programming_with_games_in_Elm.md,learning functional programming making game elm,switching imperative functional programming game elm remark code concept article incompatible elm version thus link code point old version compatible elm find updated version game elm demoscene david sicp lyah toy problem algorithm header functional thing elm example tutorialsarticles playing around http elmlangorgblogpongelm breakout clone try http githubcomdobiasdmaze difference hypothetical imperative implementation c sfml snake like game hotswapping elm haskell like type system expression statement first class citizen http wwwhaskellorghaskellwikifunctionalprogramming benefitsoffunctionalprogramming concept model update view model functional reactive programming frame per second extensible record update view making game game final game model source tell view introduction graphic update pattern matching http wwwhaskellorghaskellwikifold listfoldsasstructuraltransformations con let know conclusion reddit hn,switching imperative functional programming game elm remark code concept article incompatible elm version thus link code point old version compatible elm find updated version game elm imperative programming thing since school boy wrote small game demoscene effect develop software primarily computer vision stuff living recently mainly c python worked last year david good friend haskell expert tried evangelize benefit functional programming fp read sicp lyah actually understood part although solved small toy problem scheme haskell see one could use programming style voluntarily imperative solution came order magnitude quicker mind functional one course c used bit algorithm header also tried functional thing python yet feel digging deeper paradigm could really worth trouble eg foldr list forloop array retrospect perhaps also uncomfortable situation complete newbie kept continuing whatever le accidentally stumbled upon elm example look scary like many type theory filled haskell tutorial gave shot read tutorialsarticles constantly playing around stuff found solving challenge pong tutorial http elmlangorgblogpongelm decided write breakout clone turned interesting fun undertaking try even though following thing sound naive experienced fp developer even month year rest little essay describe learning experience project structured finally convinced advantage functional reactive programming motivated immediately continue second game project http githubcomdobiasdmaze meant serve full fp game development tutorial perhaps inspire deeper look fp paradigm maybe share excitement difference hypothetical imperative implementation c written game resp non browser version c probably would used sfml good library making game like already used write snake like game cost estimation project would probably mandays surprisingly took elm language experience one reason much shorter editcompile cycle elm reduces one click browser ok except hotswapping also possible imperative language much astonishing fact need many cycle sometimes wrote code nearly hour soon elm haskell like type system give error compiling code worked rarely need debug guess come notion look pure function think stand something else certain circumstance etc also thinking expression statement much control flow emulate head easier structure code temptation write spaghetti code function big one still grows long easy factor part stand meaningful furthermore refactoring scary nt introduce one single bug factoring stuff add new functionality like traction paddle ball also everything much concise compare two following snippet std list int l int lpushback sure readablepretty also matter habittaste beside terseness come benefit abstract separation control structure eg want decide outside value buildpairs l f l map f l buildpairs buildpairs sqrt buildpairs buildpairs also decide direction prefer read la map normal function application lb map infix notation lc map forward application many design pattern involving inheritance boilerplate code c disintegrate thin air function first class citizen fp nt get wrong nt want bash c still think great language come performance critical system programming continue use appropriate task high control nearly every byte system come cost increased development time every tool usage probably get screw wall using hammer feel big part effort wasted energy presumably better solution sure python thing would likely much different compared c also advantage pure fp http wwwhaskellorghaskellwikifunctionalprogramming benefitsoffunctionalprogramming always utilized fully still targetting browser easily clean abstract way far know unique characteristic elm concept ok eventually come actual game pureness elm force u split three part model includes state game like position speed object also think user input interested update part describes game state transition one point time subsequent one given certain set input view finally brings game state onto screen let examine look much simplified version desired game skeleton import list exposing map import graphicselement exposing show element import keyboard import text import time exposing time fps import signal exposing signal foldp import signal import window model direction signal int direction signalmap x keyboardarrows type alias input dir int delta time input signal input input input direction fps type alias positioned x float type alias player positioned player float player player x xx type alias game player player defaultgame game defaultgame player player update stepgame input game game stepgame dir delta player game let player player x playerx delta tofloat dir game player player gamestate signal game gamestate foldp stepgame defaultgame input view main signal element main signalmap show gamestate model ok import stuff clear direction signal value update user press release key clear signal suggest first read evan article functional reactive programming continuing wait return type alias input space bool dir int delta timetime tell u input interested direction user going arrow key time delta delta hold time passed since last update aim frame per second player positioned nothing use syntax extensible record define constructor game hold player information nothing else default game player positioned update stepgame one function describing change game state ever experience given input current game state return next one update player x position direction user chooses direction multiplied delta want game always run absolute speed even machine provide full fps view moment view display player coordinate text fancy enough see stepgame correctly update model making game game changing x value player keyboard course already extremely awesome could spend countless hour exploring corner deep new gaming concept point want want brick ball smash piece get skeleton final game first let u complete model view write update code everything life model final version game record contains player also brick still left game ball number spare ball type alias game state state gameball ball player player brick list brick spareballs int contact int obvious single record entry stand particular type source contact used count number paddle ball collision overall score state interesting especially later update section game wait begin serve actual playing phase play thus lost lead following adt type state play serve lost rest quite trivial guess please tell wrong assumption view part view somewhat boring elm make easy function display defines given game state look like screen technique used covered nicely introduction graphic interesting get game always use browser window maximally preserving correct aspect ratio view configuration defined gamewidth gameheight device may small even big elm make scaling charm define everything default size use displayfullscreen fit screen displayfullscreen int int form element displayfullscreen w h content let gamescale min tofloat w gamewidth tofloat h gameheight collage w h content scale gamescale displayfullscreen call scale filled form needed scale factor mean game rendered resulting image scaled whole game scaled actually rendered onto screen mean image scaling artifact even display scale factor far away update update coolest part since action actually happens let see foldp defaultgame stepgame let look stepgame input game game stepgame dir delta input state player game let func state play stepplay else state serve stepserve else stepgameover func input game player stepplayer delta dir player since paddle moved regardless game state player position already updated action state specific remaining task dispatched current state stepserve stepgameover nothing special let look stepplay stepplay input game game stepplay delta gameball player brick spareballs contact game let balllost gamebally gameballr halfheight gameover balllost spareballs spareballs balllost spareballs else spareballs state gameover lost else balllost serve else listisempty brick else play ball brick contact stepball delta gameball player brick contact game state state gameball ball brick brick spareballs max spareballs game lost contact contact ball lost spare ball left game simple stepball seems place collision handled type already tell u lot stepball time ball player brick int ball brick int using time delta take value ball player brick return new value number paddle ball contact may also increased stepball timetime ball player list brick int ball list brick int stepball x vx vy ball p brick contact let hitplayer ball within p contact hitplayer contact else contact newvx hitplayer weightedavg pvx vx traction traction else stepv vx x ballr halfwidth x halfwidth ballr hitceiling halfheight ballr ball stepobj ball vx newvx vy stepv vy hitplayer hitceiling listfoldr gobrickhits ball brick contact first check paddle player collision update ball velocity contact count accordingly return type ball list brick int may look somewhat odd first glance thanks pattern matching pose problem caller stepplay ball brick contact stepball render quite handy looking foldr gobrickhits ball brick contact ok foldr gobrickhits ball explain behaviour fold general http wwwhaskellorghaskellwikifold listfoldsasstructuraltransformations case used function gobrickhits take one single brick time accumulator initially set ball contains already changed ball first brick gobrickhits brick ball list brick ball list brick gobrickhits brick ball brick let hit ball within brick brick hit brick else brick brick ball hit speedup ball vy ballvy else ball ball brick initially check ball colliding current brick true put brick accumulator since destroyed ball also invert ball vertical speed hit occurred con brick brick still game et voilà need forloops anymore ok since moment writing quite new guess still much room improvement code article suggestion please let know conclusion writing breakout elm surprisingly easy lot fun one experience needed get practice thus gain confidence programming purely functional really looking forward learning elm fp general awesome language develop next year david right fp really rock discus reddit hn
181,Lobsters,elm,Elm programming,The Elm Architecture,https://github.com/evancz/elm-architecture-tutorial,elm architecture,elm elm fast small elm architecture elm architecture official guide section run example install http,elm elm programming language compiles javascript known friendly error message helping find issue quickly refactor large project confidence elm also fast small compared react angular ember etc repo focus elm architecture architecture pattern see elm program influenced project like redux borrow core concept add many jsfocused idea elm architecture elm architecture simple pattern architecting webapps core idea code built around model application state way update model way view model learn read official guide check section elm architecture repo collection example section follow along compile thing computer read run example install run following command terminal download repo start server compiles elm git clone http githubcomevanczelmarchitecturetutorialgit cd elmarchitecturetutorial elm reactor go http start looking example directory edit elm file refresh corresponding page browser recompile
182,Lobsters,elm,Elm programming,Getting Started With Elm,http://pragmaticstudio.com/blog/2014/12/19/getting-started-with-elm,getting started elm,mike gehard philip poots full course review ty wall prasanna n ian taylor laurence robert,love elm tutorial time write front end code since nt need use j mike gehard everything explained really well working simple foundation course approachable anyone james macaulay ca nt think better way introduce someone elm potentially even haskell course production quality absolutely fantastic love video short make le intimidating decision introduce topic really well thought really well done michael niessner great practical introduction elm straightforward great easein approach new concept jake trent course practical informative exceptionally wellpaced love pretty much soon question sprung head answered better way learn elm found fantastic work alan gardner course perfect nothing make better way modularize course small chapter perfect taken hundred video course say far best talent seriously surprised awesome content love victor hazbun mike clark excellent teacher explains concept clearly concisely introduces everything incrementally point feel overloaded quite opposite number time displayed uncanny ability read question arising mind going material love course practical built real application although simple similarity something real world explanation clear course flowed start finish often note section following video dealt question raised back mind video nt think course could better philip poots full course review really enjoyed video pacing bitesized chapter followup material credit course making excited elm paul fioravanti looked elm documentation lost course got good base like incremental approach let take various concept one time build fell love frp language way build web apps thank much denis ricard great course love video great toptobottom overview elm language tryityourself part course note really great lot fun refactoring code currying section david kormushoff easy understand easy follow great spoken english especially german great animation short illustration thx work jens krause elmcourse awesome fun informative ty wall detailed well built perfectly presented norm pragmatic studio thom parkin really good course enjoyed every part great entry point reactive programming bringing fresh approach building web apps thank filip zrust simple enough work day exciting enough motivate dig deeper kenny parnell perfect succinct introduction help cement idea elm usable language daytoday vitor capela finished learning elm course pragmaticstudio highly recommended get started real fast prasanna n every pragmatic studio course nice see quality remains consistently high used similar training product company quality thoroughness always comforting know buy new course release know going great also nice know recommend pragmatic studio developer utmost confidence amazed also appreciate little extra always provide like threeminute video elm debugger starting elm already see could extremely helpful thank clinton de young signature pragmatic studio course great quality good level depth pace solid example code also really appreciated nt treat like child interactive website really good stuff joris vanhecke course loved tried learning elm book website always found incomplete slow course really inspiring easy absorb watched twice felt powerful drive start new project elm third project wondering changed life due always recommend course immediately newcomer gustavo nunes martin love training material programmer year course far best stuff seen eamonn obrien course loved tried learning elm book website always found incomplete slow course really inspiring easy absorb watched twice felt powerful drive start new project elm third project wondering changed life due always recommend course immediately newcomer gustavo martin absolutely best resource learning elm hand easy understand abraham cuenca really wanted learn elm intimidated look forward building something steve freeman best video series ever experienced done fantastic job quickly clearly simply explaining basic elm development thanks supremely enjoyable learning experience jamey cribbs course really awesome feel like understand elm ecosystem way better liked stepbystep instruction practical example given language feature really needed instead mechanical presentation style instructor also friendly crystal clear love gabriel schimit ribeiro lesson short clear moved needle building skill stepbystep everything anticipated really really impressive chris jones elm awesome trainer freaking great course elm language put course hold long time glad finally gotten around completing always impressed mike nicole attention detail course exception reinforce video concept exercise boost one understanding course content looking take frontend chop next level please favor learn elm language pragmatic studio way conrad taylor practical handson approach learning elm great course overall matthew machuga course really great expected introduction focused solely language le building app however like way even feel like actually build something taught sebastien varlet loving course elmlang finally getting head around awesome webdev language ian taylor well done course great value money straight point developer javascript knowledge misha moroshko well structured anticipated important question provided meta view working elm tutorial book omit clearly instructor know bring right aha moment order sustain enthusiasm finishing course udemy nothing pragmatic studio great job robert calco teaching style really hit home impressively done mind specifically blown explanation currying command two element thing fully groked selfstudy really bridged gap thank geoff lanotte love manage make difficult concept easier grasp duo presentation much better single presenter droning looking forward next one han verschooten liked fact elm course get straight building something difficult learn code language syntax taught isolation nt learn code wanted learn code learned code wanted build website great course jack lenox clear professionally presented enthusiastic speaker well thoughtout example top notch mark orr highly recommend introductory video series elm laurence robert gone reference material tutorial elm one way pointing concept extremely clear fashion course improved understanding fundamental concept thought understood really superficially used instead also able download video huge plus mike ratliff feel like understand functional programming love nt go detail concept shown used bjarke sørensen great intro elm someone without lot functional programming background max baumann course excellent fun without tutorial would nt gone far learning reactive web app programming certainly elm elliot kleiman honesty modesty intelligentlylayered presentation unhurried teaching skill mike clark plus traditional excellence pragmatic studio make beautiful elm intro note lesson rounded everything also appreciate quickly sensitively lesson kept uptodate day victor kane loved structure creating application incrementally learning language feature already huge reactjs fan feel like react evenmorefunctional steroid cale newman bought course trying elm little bit found incredibly useful especially loved explanation elm coding layout convention read documentation really early course speed perfect enough explanation technical concept kadi kraman mike incredible job breaking concept explaining thing way intimidating thanks great class stacey touset liked handson approach obviously put lot thought order introduced concept brought new concept immediately applicable problem hand made whole progression learning basic syntax completing app feel natural effortless justin silvestre course fantastic launching pad fp discussion team great job wilkes joiner love learning new language lot fun liked clear overview elm language gentle introduction core concept rene rubalcava section built well liked seeing code refactored went nice see process finished product explanation also made happy see note syntax change newer version elm mike shaheen excellent teaching style good course bottom line course beginning wrap head around programming elm work robert ka normally dislike video training slow two course convinced video well done best vehicle getting plugged new technology new concept credit two course making elm accessible otherwise would scott smith starting like functional mindset thank teacher ian gagorik course extremely well thought progress chunk pace ideal completing course feel eager well prepared tackle elm project design ed barstad thanks great course really liked practical consistent example well starting something simple something moderately sized really great lucas dohmen elm course excellent fun informative one best resource used learning language thank james brown
188,Lobsters,elm,Elm programming,The Enchantments of Elm – a roguelike written using FRP: Part 1,http://sridattalabs.com/2013/12/25/elm/,enchantment elm roguelike written using frp part,demo purely functional retro game cave clojure series elm state manipulation signal frp rendering elm standard library live demo,tl dr making game browser based functional language called elm simple hello worldtype demo inspired purely functional retro game steve losh cave clojure series decided write roguelike game variant haskell called elm call game enchantment elm keeping steve alliterative naming according language website elm functional language compiles html cs javascript designed functional reactive programming based idea autoupdating value similar twoway data binding angularjs seems like ideal language write browserbased game plan develop roguelike time blog series best familiar functional programming concept highorder function combinators first iteration game exciting wait player hit enter end game let get started first necessary import use later import keyboard import window state manipulation game need state object store player stats inventory like language immutable data structure state manipulated function accept current state return new state keep track whether game ended yet elm data structure called record similar dictionary define gamestate type record one field type gamestate finished bool make function return default state game naturally finished property start false defaultgame gamestate defaultgame finished false time write update function transform state function get called user input namely player press enter ignores input since tell u key pressed update bool gamestate gamestate update input state case statefinished true state false state finished true signal frp get fun part elm game programming language would involve main loop elm loop update triggered signal represent reactive value one care builtin signal keyboardenter get triggered enter key pressed instead writing handler callback write function called gamestate collect keyboard signal event turn game state signal gamestate signal gamestate gamestate foldp update defaultgame keyboardenter foldp folding function signal think applicative every time keyboardenter triggered foldp call update turn signal input current state new state way user interaction trigger change game state pas defaultgame starting value rendering state manipulation useless output anything screen define function called renderstate display different message depending whether game finished renderstate gamestate element renderstate finished case finished false plaintext press enter end game true plaintext goodbye elm standard library many text image processing function game becomes real roguelike functionality useful render menues map tile character sprite going use plaintext feature finally main function tie everything together take rendered gamestate pass display put center screen earlier said gamestate signal whenever gamestate signal trigger main rerender display note lift renderstate display order apply signal display int int element element display h w el container h w middle el main display windowdimensions lift renderstate gamestate let u enjoy fruit labor click enjoy visually impressive screen capture video tag supported download video visit live demo
190,Lobsters,elm,Elm programming,Emerging languages spotlight: Elm,http://radar.oreilly.com/2012/12/emerging-languages-spotlight-elm.html,emerging language spotlight elm,series elm evan czaplicki segment video interview make good argument thusly related,next month taking look new emerging programming language following piece first series elm programming language created evan czaplicki tackle web interaction take big three html cs javascript recently pleasure sitting czaplicki talk decided take daunting project elm could revolutionize web programming czaplicki working frontend web project thinking web development frustrating way day elm born talk moment segment video interview today website bear virtually resemblance year ago using tool cyclical upgrade html cs javascript certainly enhanced improved upon older version taken great leap forward still using core coming functional programming background led czaplicki think web programming perspective functional reactive programming functional reactive programming take away idea interaction website user static updating certain moment click insert capability update event happen like mouse movement czaplicki give detailed insight ok let say buy seems like new way thinking web programming take project new level would actually change tried true html cs javascript czaplicki make good argument worth mulling think language use next project starting foundational idea established web language deep semantic problem touch surprisingly difficult cs html work simple task vertical centering text placement czaplicki promise elm allows create asynchronous code without callback something javascript allow compelling reason elm make level three powerhouse web language czaplicki lay roadmap thusly short term want add feature library try garner industry support delve deeper theory functional reactive programming relates implementation elm one think chance czaplicki paradigmbreaking look web programmed help web developer full interview available following video video related
