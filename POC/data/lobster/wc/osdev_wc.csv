ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,osdev,OS,More delays and motivation issues,http://ck-hack.blogspot.com/2020/08/more-delays-and-motivation-issues.html,delay motivation issue,,hi sorry nt gotten muqss ck release emailing check wellbeing crazy world appreciate concern apart family issue fine fair say motivation keeping linux kernel development flagging time current world situation helping hearing news extol virtue biggest release ever particularly aid situation massive drop new driver could understand usually mean yet rewrite major infrastructure within kernel quest make better personally nt think great thing debate best left elsewhere plan stay sync future kernel release sure motivated resume resyncing process biggest concern massive churn screwing something way leaf user code open security issue fatal data corruption stage nt careful enough protect happening reason often considered abandoning code entirely supportive individual stated find comfort relative stability continued utility muqss code increasingly volatile kernel churn world reassuring encouraging enough least plan stay sync time go feature get added scheduler nothing ordinary desktop mobile platform usage stage distribution tempted become dependent one feature nt develop muqss much incorporate version feature become redundant given completely different scheduler architecture muqss versus cf mean ca nt simply port code time write complete feature equivalent version far trivial accounting code completely different cgroup feature nt even implemented deadline scheduling available example appear future eventually become showstopper unless miracle happens make find motivation work death itcheers stay safe well ck
2,Lobsters,osdev,OS,Plan 9 from Bell Labs (1995),https://css.csail.mit.edu/6.824/2014/papers/plan9.pdf,plan bell lab,,obj length filter flatedecode stream w x u z mm endstream endobj obj procset pdf text font r r r r r extgstate r endobj obj length filter flatedecode stream p kz ǝ b v z z b p v ï b endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream k f zt ҩ v r r ye p endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream f ɱh ad zj v endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream p w ju nri blvoj e aw w p u endstream endobj obj procset pdf text font r r r r r extgstate r endobj obj length filter flatedecode stream
3,Lobsters,osdev,OS,REMS - Rigorous Engineering of Mainstream Systems,https://www.cl.cam.ac.uk/~pes20/rems/,rem rigorous engineering mainstream system,,apps o api wire interface o compiler hardware
4,Lobsters,osdev,OS,"GSoC Reports: Benchmarking NetBSD, second evaluation report",http://blog.netbsd.org/tnf/entry/gsoc_reports_benchmarking_netbsd_second,gsoc report benchmarking netbsd second evaluation report,gsoc report benchmarking netbsd first evaluation report phoronix test suite pt anita phoromatic phoromatic clientserver architecture phoromatic setup phoromatic usage phoromatic client phoromatic testschedules anita installation phoromaticanita integration phoromaticanitaintegrationsh http http dhcpcd prerun script future plan comment,august posted leonardo taccari report written apurva nandan part google summer code blog post continuation gsoc report benchmarking netbsd first evaluation report blog describes progress second phase gsoc netbsd foundation phase worked automation regression suite made using phoronix test suite pt integration anita automation framework consists two component phoromatic server provided phoronix test suite pkgsrc anita python tool automating netbsd installation phoromatic phoromatic remote management system phoronix test suite allows automatic scheduling test remote installation new test management multiple test system web interface test scheduled run routine basis across multiple test system automatically phoromatic also interface revision control system offer support issuing new test contextbasis whenever git commit pushed test result available web interface phoromatic clientserver architecture phoromatic server relies upon phphhvm builtin web server process ptshosted websocket server web server process handle web ui responsibility phoromatic server phoromatic client testing machine installed pt connect phoromatic web server http port server phoromatic setup start phoromatic server phoromatic server http port web server socket port need set phoronixtestsuiteuserconfigxml shown server remoteaccessport remoteaccessport password password websocketport websocketport advertiseservicezeroconf true advertiseservicezeroconf advertiseserviceopenbenchmarkrelay true advertiseserviceopenbenchmarkrelay phoromaticstorage phoronixtestsuitephoromatic phoromaticstorage server phoromatic usage start phoromatic web server controlling local phoronix test suite client system phoronixtestsuite startphoromaticserver phoromatic web server hosted require local account creation server phoromatic client phoromatic client used connecting phoromatic server facilitate automatic running test client phoromatic client created connected server using following command phoronixtestsuite phoromaticconnect serverip serverhttpportaccountid phoromatic server interacts phoromatic client http port specified phoronixtestsuiteuserconfigxml phoromatic testschedules test schedule used facilitate automatically running set test suite either routine timed basis whenever triggered external script process eg gitvcs commit manually triggered etc phoromatic provides option preinstall prerun postinstall postrun shell script executed phoromatic client testschedules configured run test specific system anita anita tool automated testing netbsd operating system using anita download netbsd distribution install virtual machine fully automated fashion anita written python us pexpect module screen scrape sysinst output emulated serial console script installation procedure installation anita installed netbsd linux macos system using following pip install pexpect git clone http python setuppy install phoromaticanita integration would like describe workflow briefly testschedule created phoromatic server meant run test host machine contains phoromaticanitaintegrationsh prerun script script performs following creates mountable disk image executable script setting phoronix test suite phoromatic client creation benchmarking vm system invokes anita appropriate commandline option configuration network setup mount image run configuration script vm configuration script performs hostname change dhcp setup nfs setup pkgpath setup pt installation configuration connecting phoromatic server network bridge benchmarking vm system get connected phoromatic server phoromatic server identifies benchmarking vm system ip address hostname mac address identification phoromatic initiate pending test vm testprofiles downloaded go vm executed maintains history test result data point noted used local pkgpath nfs server setup pt available wip recompiling would wastage time later planned use binary shard joyent http updated pt get upstreamed host machine need onetime manual setup like installation qemu anita pexpect term cv etc initial user registration phoromatic server phoromatic port setup network bridge setup apart rest framework require user supervision vm configuration script following script used prerun script testschedules invoking anita setting vms http networking setup bridged networking mode configuration qemu used anita multiple vms able accommodate single bridge created host machine onetime setup using dhcpcd without complicated host forwarding setup phoromatic server requires http port forwarding order enable bridged networking qemu guest must first create configure bridge interface host ifconfig create next must specify newlycreated bridge interface etcqemubridgeconf sudo mkdir etcqemu sudo touch etcqemubridgeconf sudo chmod etcqemubridgeconf sudo sh c echo allow etcqemubridgeconf finally order nonprivileged process able invoke qemubridgehelper must set setuid bit utility sudo chmod u usrlocallibexecqemubridgehelper detail bridged mode networking setup qemu please refer following guide reproducing framework reproduce framework need phoronix test suite qemu anita pexpect cv xterm makefs installed host machine example netbsd pkgadd qemu pkgadd cd pkgsrcwipphoronixtestsuite make install stepbystep process get framework installing pt including onetime manual setup summarized follows control configuration phoromatic server done via webbased interface phoromatic server active configure port phoromatic server web socket described start phoromatic server using command stated create user account phoromatic server using web interface gui disable client system approval new system addition setting menu web interface connect host machine phoromatic client phoromatic server using command stated create testschedule host machine prerun script specified testprofile execute testschedule assign timedschedule watch running new vm system latest netbsdcurrent binary package created identified phoromatic server automatically need specify benchmarking testprofiles need run vm system testschedules section taken care phoromatic result history also viewed phoromatic web interface look video get clearer picture setup framework video future plan regression suite complete final task deploying benchmarknetbsdorg upstreaming wip phoronix test suite done final phase gsoc project want thank mentor constant support comment
5,Lobsters,osdev,OS,12 Principles for a Diverging Desktop Future,https://www.divergent-desktop.org/blog/2020/08/10/principles-overview/,principle diverging desktop future,arcan project professional first diversify experience apppocalypse emphasis extreme make state mobile state left behind privacy fight back poison well single user u unics silent default surprise interactive first breath everything immediately observable defer composition simplicity systemic backstory motivation video principle professional first principle diversify experience principle apppocalypse emphasis extreme principle make state mobile principle state left behind principle privacy fight back poison well principle single user u unics principle silent default surprise principle interactive first breath principle defer composition principle simplicity systemic,post lay overview guiding principle driving much work behind main part arcan project unaware arcan presented something uncommon desktop engine grand claim modifying understanding entirety desktop patching script level easy rework current popular abstraction adjust division labour principle link together tell large chunk vision divergent desktop story slowly getting shape many year greatly influenced number publicly documented experiment well seminal work von neumann computer brain norbert weiner human use human being ian hacking representing intervening jaron lanier trilogy future may hold store well nowadays le digestible amalgamation fravia search lore overview quite long read right full version principle added individual article time content section come bit dense hard ingest fret teaser appetiser full course meal better pacing technical depth sake convenience navigational link individual section professional first diversify experience apppocalypse emphasis extreme make state mobile state left behind privacy fight back poison well single user u unics silent default surprise interactive first breath everything immediately observable defer composition simplicity systemic backstory motivation arcan project core rooted assumption desktop way interfacing computing inching towards last breath rewriting jsonifying stdout provide much air final gasp upside may well turn something positive provides opportunity radical simplification restructuring myriad technology make rube goldbergian contraption modern desktop first nonacademic presentation video arcan project terse technicaloverview style little term motivation actual intended direction reason wanted keep attention focus rather ever used carefully note try fill cryptic blank space predicated belief honest dissemination done first demonstrating feasibility soundness fundamental tech isolation flowery vision soapboxing sociopolitical annotation best left deferred separate stage underlying tech sufficiently coherent robust however vacuous perspective technology living life disjunct social consequence application goto default mental model fledgling utterance much fool errand thinking never viewed optic abstract larger social organism basic motivation follows humble need want want expand agency security safety quality experience regard thing computing touch largest obstacle expansion right chaos complexity userspace dependency creep towards online servicespace peering eye service space us study repackage naive interpretation service space used mutate social critical infrastructure towards something wholly frightening personal level coded experimented virtually everything computing since day venerable divide two flip virus antiviruses drm protection crack database engine operating system kernel cheat bot anticheats emulator interpreter dance jitterbug demo game parser format remember exploit well mitigation worked academia government militaryindustrial well fledgling startup got scar thesis prove left observe list grown rather short year time evolution capability device exceeded expectactions nothing short spectacular hardware software lockout plagued early day relatively speaking minor access capable device deep technical information become absolutely stellar overwhelmingly day begging company scrap hardware scraping public library dumpster slice information quidproquo trading hacker secret basic software building block warez mostly faint memory hopefully remain spite troubling sign ahead counterweight positive development thing become complex degree thorough deep understanding precondition responsible control agency hard thing come even harder thing fight add dependency layer get market cash build community become figurehead sell community pas plate forget like comment subscribe oh message sponsored yet another pointless vpn provider trust somehow protects network trust word tiny tech snowball continues merry way mountain towards village matter outcome thing immediate todo term creative thing alone hour left live regardless many turn pleasant mental image fall back time gloom doom dedication project ten thousand invested hour described labour love well colloquial fucking insane though personally view act necessity many time journey felt like digging prison using collarbone fallen mate makeshift shovel fuelled vapour faint hope relatively free world waiting within reach proverbial rose smell hallucinogenic side effect invisible gas deposit old canary stumbled upon motivation evolutionary struggle freedom rest come bitter anger even resentment towards dominant status quo trajectory computing interface whole moving along pandering trivial attention grabbing nonsense engagement rather crafting sharper tool claw delicious problem future hold store principle professional first traditional desktop compromise interest recent bias towards appealing supposed mainstream audience made sense economical growth standpoint within kinetics peculiar brand capitalism time previous demographic already hooked computing drug user thing nowadays loadbearing mainstream audience opting rapid rate good reason smartphones tablet digital assistant gaming console chopping generic desktop controlled corporate thiefdoms many past compromise made order accomodate wider le experienced audience also unnecessarily restricting agency precision efficiency professional posse stronger mental model computing vested interest advancement make little sense try convince grandmother need free opensource desktop farce bordering selfharm still use scenario part requirement specification future aside professional meant vain appeal exclusionary hacker elitism number within line dip towards past biker freedom seeker radio amateur circuit bender bb operator professional acknowledging large number million key individual wide gamut profession currenty wasting much time talent thanks misguided attempt software ergonomics try make due web give revisit past workflow put professional first principle diversify experience long standing maxim computing mechanism policy user experience perspective rooted assumption user willing capable leveraging mechanism configure set policy largely failed desktop sense much stagnated commandline processing one many possible reason one likely culprit high level marketing gospel work rhetoric strongly favour brand identity preset strict policy aesthetic desktop level beyond implementation allows little accessible layering opaqueness ui element button set action idea working represents turn problem personal expectation work happens clash dominant actor voicing complaint often met dismissive arrogant attitude akin get program marginalising disabled user whether disability lack mobility reduced cognitive function complex threat model sense alternate take tool allow pardon language get shit done remedy improve accessibility make every architected layer userscriptable access fine grained mechanism chose mechanism people principle apppocalypse emphasis extreme smartphone absorbing gamut feature feature phone phase got thing right one thing notion app simple small tool solving one specific task time apps failed play well others lack interoperability effect hard recombine order provide new functionality lack composability broad stroke ecosystem devolved providing user service rather way around desktop side user interface mainly come three flavour first one software sealed world hard hitting complex tool best modelled machine inside machine vm name smell rancid web browser one front runner practically unavoidable lest willing tolerate ascetic lifestyle second one extreme complexity spectrum relatively modest pipe filter text oriented procesing tool like awk grep well interactive textural user interface tuis subset commandline interface cli much limited form legacy reasoning term serial line character graphic terminal last flavour cover noman land everything multimillion line ui toolkits come much complexity vms much barren legacy terminal hard border rough category browser lift toolkits o integration reimplements much different verbiage tuis lift widgetry literally cursesed abstraction search shelter blast past terminal protocol improve data exchange vm rediscover desktop app making textdominant command line tool capable processing providing medium rich data stream release legacy terminal protocol emulator leave toolkits rot peace principle make state mobile day stretching faded glory mainly using mainframe least peak rosy year java sun one dominant corporate fever dream default virtualised desktop system administrator salivated prospect reinstall someone eraadjusted equivalent internet explorer toolbar farm bonzibuddy ridden workstation hoped never listen wailing tune desktop longer feeling right av cleanup dreamt explain data loss work commited shared state pool almighty red reset button irreversibly pushed vengeance number thing changed least ability store transfer compress data high efficiency low latency clouded internet well personal area network thus replicated base install user computing task state mobile make sense near future tooling define deploy base plentiful make thing slightly easier dip thorough definition constitutes computing state instead stop vague contributed program execution emphasise simply data state largely immobile problem shared past various effort serialisation tried work recent parcelables android little avail simply defining mechanism enough verification enforcement need start hard impossible catch application need expose noninteractive runtime seed delta state storewiperestore control get periodically verified validated failure comply mean removal privilege repeated failure mean revocation trust principle state left behind state mobility principle improve user agency another side device state management local persistent ephemeral storage anyone experimenting delicious pairing data recovery secondhand ebay device forensics quickly learn least two valuable lesson first lesson rare correctly applied full disk encryption practice actually even light called trusted enclave double digit amount standard reduce encrypt wipe second lesson much sensitive state manages survive beyond context intended use eu amicable priniciples encoded right forgotten technical side correlated mandate default forget long punished keeping detailed track innocuous deed system err side remembrance equally disturbing runtime state long living process tie online world slowly accumulating sensitive credential privacy compromising nugget scattered ready accidentally exposed crash dump swap file forgotten interprocess communication lane ready intentionally picked offensively minded creature dare look beyond remote code execution persistent state store assumed default rather require interactiveuserinitiated automation lifespace coupled namespace principle privacy fight back poison well idea software depend acting best interest completely defunct made manifest metamorphosis web browser nowadays much darker sinister thing browse behemoth managed neatly attach man middle nearly every relevant data flow rest digital society government opt deleting past sin inactivating account best counter productive act teenage rebellion worst actually provide another strong data point act easy sharp edge use repeatedly repackaged nice clean bundle data bundle information parasite digest daily bread reinject service consumption part feedback loop act core manipulation machinery stage digital age equivalent old social construct white lie sorely needed en masse web scale adapt gradually diluting truth value digitally recorded past future point price actually knowing breakfast level rigourous science application get disturb asking permission steal data sensor always get kind data decide dynamically sensor actually sampled entail access camera automatically imply sampling actual device mean routed video stream user decide stream cover principle single user u unics legacy piece chain going boot actually usable desktop one take biggest toll term wasted opportunity inane complexity multiuser outer default slight hint irony key simplification good ol unix compared even older multics found stripping away much complex device sharing semantics actual role user account world computing device come cheap greatly outnumber u safety system management compartment flesh bone actually using sharing device login screen getty worse display manager level may seem harmless first glance unravel untangle much decision poison rest system design becomes clearer legacy u build pyramid upside think rational thing anything authenticate device dynamic user allow safe ephemeral secure sharing smallest innermost compartment interactively defined aggregation thereof compartment window desktop principle silent default surprise one seminal targeted attack time desktop security lost adorable innocence autoruninf story go unsuspecting target insert floppy diskette cdrom usbstick modernday equivalent surreptitious payload take advantage automated system response order gain persistance exfiltrate tamper data attack vector albeit crude brought company well family military facility alike many subtle subtle variation tactic prepackaged cute name usb switchblade rubberducky core matter opaque unpredictable optout nature automated system response user initiated action matter plugging usb device network cable downloading file see fire feel burn thought exercise take sleeping laptop lid closed suspended hopefully idle explain even high level thing try communicate outside next open lid obscuring view even mean find literal pandora box lap make assumption user intention name simplicity user friendliness provide easy access control trivial mean defining automation limited scope optin user initated principle interactive first breath computer hardware dynamic beast barring example remain none input output storage device disposal actually assumed necessary present even usable system init longer strong reason justification deferring user interface launch disk mounted checked error network interface configured heck even bios config screen animation drop shadow cursor day saying thing belong boot animation splash screen sense nothing illusionist cheap distract fact could actual thing right instead later previous barrier simply booting user interface immediately gone forcing user stare splash screen stream fast scrolling text init system mutated service manager real interface could start quite simply act negligence desktop server bootstrapped one boot user interface let dynamic system service control become part user interface activation discovery even software developer slowly steadily realising hardware lying u whole time revelation come partly thanks steady stream publicised timing channel related attack even though evidence writing long time calm tempest speak guess taken time would blame combination domaininherited opaqueness individual willingness assume whatever layer beneath one currently working fine little need scrutiny actually ongoing process collectively happy pile layer layer abstraction little condition regulate interaction layer mandate exposing alternate view would provide insight internal process time lead scattered mess come tooling tracing debugging across layer able immediately freeze study state circuitry buzzing beneath u well reach still must evolve beyond piping stderr file whenever possible strip away unnecessary layer runtime abstraction virtualisation whenever impossible inadvisable forcilby expose control monitoring observing tampering data flow across layer principle defer composition perspective user interface composition act stitching multiple interactive data source together larger ui quilt transformation expensive lossy even impossible reverse much akin separating mixed colour primary component instance embedded video player website somewhere simply ripped browser window put separate window without browser explicity implementing feature playback control button sample player similarly separated actual video answer premature composition instead delegating task proper authority window manager policy choosing browser took upon force composition embedded video player took upon force composition ad nauseam happen without justification system interface browser work provide mean anything refined fix start premature composition reduces option data cost performance force browser reimplement basic window management control input device bending clash one outside every issue tracker popular user facing tool complied request adding support tab terminal emulator much thing cli shell possibly text editor running inside vimcarcerated speak popup suggested text completion emulates window using text rather actually real one defer window management outermost layer window manager whenever possible nest composition strive retain native data representation whenever unreasonable even impossible mandate userinitiated decomposition control principle simplicity systemic rhetorical scheme work surprisingly often computing rallying cry making thing simple ever chose complexity simplicity right ignoring bit complicated draft defend philosophically coherent definition simplicity ontic epistemic important aspect possible local component perfect simple solution system complex one vice versa problem becomes le muddled much contrast variation developer idea something develop would used people hand harsh realisation observing actually get put good use story follows practice eventually get pressured packaged preset product enterprising competitor point practice omitting context history quip needlessly complex thing something like need therefore bit contribute nothing infact useless bloat sure follow simplicity narcissism apply basic group think come rather naturally larger engineering endeavour lax incentive structure get simplicity thiefdoms sundering global effort takeaway need circumference vested interest relevant stakeholds successfully find simpler solution given problem avoid simpler simple possible one hard scope something dynamic broad across hip desktop thought exercise get answer real foundation consider decomposition desktop audio server video server inputsensor server metadata manager reasonable breakdown thing different component developed separate thing separate team mechanism tie together end product service base design choice score complexity angle system deliver appearance base component
6,Lobsters,osdev,OS,Atari ST Free Operating Systems (2018),https://www.youtube.com/watch?v=28ieOWEQXhU,atari st free operating system,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature atari st free operating system vincent rivière youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature atari st free operating system vincent rivière youtube
7,Lobsters,osdev,OS,awslabs/ktf,https://github.com/awslabs/ktf,awslabsktf,ktf kernel test framework feature overview build instruction requirement kernel image build example used qemu bootable iso generation example boot ktf guest xen baremetal machine fedora running kernel qemu kvm xen guest style http clangllvmorgdocsclangformathtml http githubcomdoozyxclangformatlintaction http githubcommarketplaceactionsclangformatlint running clangformat workflow locally build container patch file credit attribution http xenbitsxenprojectorgdocsxtf security contributing license,ktf kernel test framework ktf small simple o kernel enables writing lowlevel software test supported machine architecture currently feature overview machine architecture baking smp support basic percpu page basic physical memory management pmm virtual memory management vmm basic slab allocator local apic support initial mp table parsing basic acpi table parsing simple uart driver simple vga driver feature making check issue build instruction requirement may need install following unless already bootloader tool package eg apt install iso generation tool xorriso package eg apt install xorriso kernel image build example used qemu make make docker bootable iso generation example boot ktf guest xen baremetal machine make bootiso make docker bootiso make command generates multibootcompatible elf file directly boot qemu make bootiso command take place grubboot directory hierarchy generates bootiso grub using grubbootgrubgrubcfg default grub config fedora ktf build run fedora need tweak command create makeconflocal file following content tested fedora dist shell grep name etcosrelease cut ifeq dist fedora grubfile grubmkimage grubmodules normal qemubin qemukvm endif running kernel qemu kvm main makefile several target make booting ktf qemu easier makefile detects host system linux enables kvm support default parameter qemu found makefile qemuparams variable booting run make boot debugging iso run make bootdebug debugging kernel image run make debug xen guest use following guest domain config example booting ktf xen name builder hvm serial file tmpkernellog pty disk homeuserbootiso hdc cdrom onreboot destroy need generate bootable iso style style project defined clangformat file main directory repository use following command apply style automatically file modify clangformat stylefile werror modifiedfile information refer http clangllvmorgdocsclangformathtml project us http githubcomdoozyxclangformatlintaction action workflow detect style mismatch automatically information refer http githubcommarketplaceactionsclangformatlint running clangformat workflow locally build clangformatlint container docker build clangformatlint githubcomdoozyxclangformatlintaction done patch file ext c h docker run rm workdir src v pwd src clangformatlint clangformatexecutable r exclude git find name ext print patch done credit attribution part ktf project inspired based xtf project developed andrew cooper citrix http xenbitsxenprojectorgdocsxtf security see contributing information license project licensed bsd license
8,Lobsters,osdev,OS,9FRONT DOCS,http://docs.a-b.xyz/index.html,doc,home sitemap doc achtung technical detail springboard howto todo reading http docsabxyz contributing srht discount markdown warning,home sitemap doc doc repository live document covering theory usage development achtung workinprogress prototype see technical detail springboard howto todo reading document update periodically fetched backend render document tree make available reading via http plan run tcp docsabxyz ndocs http visit docsabxyz web browser contributing document source repository currently hosted available browsing get locally reading gitclone http reading writing gitclone ssh git everyone invited get write access asking kvik irc grid kvik abxyz otherwise may submit patch contribution mechanism srht sending mail mailing list communicating favorite editor contributed document mostly expected markdownformatted file denoted md file extension formatting syntax used markdown processor discount used backend documented manual page markdown additionally plain text file html document may entered repository file extension txt shtml respectively copied verbatim rendered document tree warning one amd atxt ashtml may exist time otherwise document generation fail problem current implementation may fixed future image static content best hosted outside repository dedicated upload stable link space may provided later
9,Lobsters,osdev,OS,Linux 5.8 (Linux Kernel Newbies changelog),https://kernelnewbies.org/Linux_5.8,linux linux kernel newbie changelog,martiraudsepp,kernelnewbies last edited martiraudsepp tell others page
10,Lobsters,osdev,OS,Haiku July 2020 Activity Report,https://www.haiku-os.org/blog/dogcow/2020-08-01_july_2020_activity_report/,haiku july activity report,july activity report application appserver arm bootloader documentation driver graphic sound filesystems networking wifi preference printing user interface thank,july activity reportwelcome july activity report haiku project report cover added set target parent folder option textsearch application making easy move one directory uphumdinger fixed bug showimage application timer responds properly user inputandrew lindesay added support haikudepot server repo metadata artificially matched multiple repos improvement also made haikudepot logging mechanism declutter code enable better systematic loggingpulkomandy fixed bug allowing system better distinguish video ogg file audioappserverextra bview drawing mode required webkit canvas support implemented kapixarm continued work arm architecture specifically efi bootloader efi cpu code refactored architecturespecific allowing cpu init code properly called progressing efi bootloader building added support kernel efi bootloader heinrich schuchardt made debugging improvement efi bootloader allowing efimap file available linkingdocumentationmáximo castañeda greatly improved javasript cs quicktour possible show proper slideshow intended original quicktour package result much nicer experience piece documentation directed especially new usersdriversmmlr reworked pci base address register handling moving entirety getbarinfo applying pci address size previously applied ram address fix also made xhci hda pchthermal driver ensure prefetchable bar properly identified freebsd network compatibility layer updated handle memory bar plus apply empty size type check io port done imported significant number pci id radeonhd driver hawaii vega arctic island polaris volcanic island gpussoundmmlr committed numerous improvement intel hda audio driver mmlr also fixed bug multiaudio resolved number situation user experienced audio certain amount time passed boot multi audio driver affected notably hdafilesystemscruxbox added code allowing xfs read short form directory laid groundwork begin reading block directoriessuhel mehta implemented opendir readdir function committed change enabling directoryiterator successfully read directoriesbrjhaiku added partial support btrfswritestatnetworkingwaddlesplash cleaned code related dns resolverleorize contributed improvement filerequest datarequest gopherrequest httprequest apis improvement result accurate progress report well performance increaseswifiwaddlesplash made several improvement wifi longer cause kdlsatheroswifi build option changed match default freebsd option supported atheros card support haiku previously fixed bug caused mouse image input preference drawn incorrectlyjadedtuna fixed bug screen preference related brightness settingsoishika pradhan fixed default window size keymap preference usable lowresolution displaysprintingpulkomandy made improvement ipp code handling url standard fashion removing custom implementation well better handling printer include header repliesuser interfacewaddlesplash made improvement various ui component improve look highdpi system alert icon balert high resolution display use fractional scalingmenus look better fontscaled systemsinsets look better highdpibuttons proportional highdpi system though yet perfectimprovements bscrollbar bscrollview result application properly scaled scrollbars highdpi systemstracker count view width height font size properly proportional container windowspacing element tracker list view properly spaced fontscaled added gradient fill rule support bpicture well flatten unflatten method bgradientpulkomandy unified setting menu shortcut key comma builtin apps bringing compliance existing human interface guidelinesthank thank reading thanks developer contributor dedicate time energy projectplease feel free report omission error work like see featured next month activity report via email cwr sdf dot org via irc dogcow
11,Lobsters,osdev,OS,What not where: Why a blue sky OS?,https://www.youtube.com/watch?v=bSNda9EzNOI,blue sky o,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature buzzconf peter alvaro blue sky o youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature buzzconf peter alvaro blue sky o youtube
12,Lobsters,osdev,OS,The object-oriented Amiga Exec (1991),http://web.archive.org/web/20050528204702/http://www.cunningham-lee.com/misc/amiga_exec.html,objectoriented amiga exec,,objectoriented amiga exec close look objectoriented core amiga operating system tim holloway objectoriented computer buzzword early latest holy grail let programmer leap tall building single bound cure world hunger produce line fully debugged code day well maybe invented one premier objectoriented programming language c unable get release within year predicted release date nevertheless question oop good thing producer operating system furiously recoding product objectoriented system generally using c yet one objectoriented operating system widespread use since run commodore amiga although ironically written oop language amiga exec oops design amiga operating system sometimes incorrectly referred amigados actually amiga operating system three major component exec multitasking kernel amigados proper provides highlevel file system command line interface intuition basis graphical user interface gui discussing amiga exec three objectoriented nost comparable cprogramming language may seem surprising nt gui made oop famous well yes oop simply dealing data object correspond graphical image later although many amiga feature potentially unlimited number element absolute minimum ram amiga system software requires fraction many comparable system require even counting rom part ofthe operating system memory consumed although newer amigas support larger rom missing amiga operating system make small amiga manage provide multitasking windowing service le onehalf tc onefourth memory apple ibm computer need answer lie minimal redandancy examine internal structure many popular operating system discover o versus somewhat monolithic block stuff core operating system additional voodoo acting device driver like application code uneasy truce ever let meet even though operating system may composed many component appearance application programmer still essentially rather mysterious edifice beyond selected portion application software may go amiga operating system different relatively part totally opaque fact later revision operating system trend open internals application use even surprising considering unlike macintosh amiga run application nonprivileged state magic presentday operating system operate operating system code magic spends time running privileged state inhibiting interrupt executing arcane instruction incomprehensible mere mortal application programmer otherwise thing completely outside scope application programming nt really true little operatingsystem code truly magic deal managing table list queue mundane task however since operatingsystem table list queue forth generally managed special routine run privileged noninterruptible memorymanaged otherwise arcane environment tends overlooked often possible take magical part code separate nonmagical part resulting set controlling routine switch mode lot datahandling routine look suspiciously similar situation mean first exists possibility generalpurpose version routine created replace similarbutnotidentical function second since routine longer magic accessible application program well reducing overall size complexity say nothing time saved using predebugged code using generalpurpose code critical operatingsystem function might seem like heresy nt generalpurpose efficient mutually exclusive answer appears accurately generalpurpose efficient perhaps generalpurpose enough usually waste time generalpurpose code testing branching handle variation data structure process oop come answer lie principle inheritance arranging system data structure much system code traditional system placing related data item common sequence gain two advantage reduction amount specialcase processing offensive creation hierarchy data object class side effect system becomes easier understand fewer unique function inside view exec mentioned earlier nucleus kernel amiga operating system realized manner exec consists collection increasingly complex object class seen figure new exec object class defined based simpler class contains data object simpler class also usually valid operation defined class operation pertaining simpler class well known function inheritance figure nucleus amiga operating system consists collection increasingly complex object class exec heavy reliance inheritance make compact contain separate set routine manipulate task io device intertask message instead contains basic routine handle collection object task object device object whatever add function additional support required contrast many operating system contain collection task routine including required manage task table collection device routine including required manage device table forth many way represent collection data internally advantage disadvantage exec based doubly linked list list element allocated dynamically anywhere ram convenient see section memory management therefore table fill hand access speed highly dependent number node list way reduce problem explain later amiga operating system distinguishes operating system provides support doubly linked list exec support two level list list minlists lattice c implementation add two similar standard exec list without automatic initialization used define item amiga system software initializes minlist anchor doubly linked list minnodes minnodes contain next previous minnode pointer minlist structure contains pair dummy minnodes simplify processing reducing specialcase logic required process item end list empty minlist always consists two minnodes dummy node front end minlist contained within minlist data structure dummy front node nextnode pointer point actual first node list previousnode pointer always null similar situation exists regard dummy end node since dummy front node previousnode pointer always null dummy end node nextnode pointer also always null possible save small amount memory making overlap sharing null pointer dummy minnodes add one complication last actual item list one null nextnode pointer honor belongs dummy node complete set function exists support insertion deletion minnodes either end point minlist using proper function therefore minlist used firstinfirstout fifo also known queue lastinfirstout lifo also known stack well generalpurpose list note nothing magical minlists minnodes function act although extensively used amiga operating system used freely application program friend member note c friend member function class defined c internal component unless otherwise specified protected casual access strong selling point make harder object innards corrupted easier locate responsible function make practical use alter information within class object therefore sort access mechanism required c provides two friend function like traditional c function except declared friend one class allowed directly access data stored within class class member function actually owned specific class therefore invisible extra parameter passed pointer class object acted exec designed used nonoop language thus exec function effect friend function include file made mt associate support c amiga generally define however better support exec capacity objectoriented system number member function also defined example virtually every object amiga sort list object member function named next matter matter linked matter name relative location object nextitem pointer thus always guaranteed get pointer next one list using next function list minlists list extended minlist made node node minnodes plus type field priority pointer node name cformat string figure show structure node node incorporates structure minnode thus automatically inherits property minlist form list subsequently list use minlist function list maintained fifo lifo like minlist however list also maintained priority sequence courtesy list friend function enqueue node list given name also possible search list firstnext node name useful exec locates number public object signal signal represented word containing pattern signal flag allocatable user reserved operating system task signal another task task signal wait state receiving task incoming signal information incoming signal bit logically ored anded recipient task pattern signal waiting nonzero result cause task become dispatchable extremely efficient way activate sleeping task done system level including interrupt routine denied many sophisticated system service message figure show message constructed node message extremely important operation amiga used pas information task task basis io request medium transfer intuition mouse window event unlike signal merely give indication message complex information piggybacked figure node located name arranged priority order node anchored list since node incorporates minnode inherits list property function figure amiga operating system us message pas information task task basis request medium transfer intuition mouse window event message incorporates node therefore inherits property function figure message transmitted message port contains list incoming message serviced priority order like message message port incorporate node therefore inherit property function node message extended node usually transmitted message port msgport another type node contains list incoming message serviced priority order see figure msgports private anonymous added system message port list frequently occur pair one since message serviced common forward reply msgport generally recycled discarded although possible bounce message whole series port several different way implement msgport common way supported special c class named stdport standard message port created initialized coding stdport listener new stdport hear stdport constructor take care detail standard msgport initialization memory allocated initialized signal acquired listening task wait using addport function msgport put system public msgport list found task wish send message exec designed objectoriented manner new operatingsystem function quite simple c reconstruction show following void addport msgport mport forbid disable taskswitching enqueue absexecbase portlist mport enable reenable taskswitching reconstruction another system function msgport findport const char portname return msgport absexecbase portlistfind portname findport illustrates another important design feature searched system list every time wanted access element list system performance would suffer instead convention search return object address thereafter object address used directly amiga use macintoshstyle handle cause object shift memory downside must never move remove object task may using library device ensure maintaining user count simple message port application either enforce loginlogout facility else require message sent oneshot basis ie findport putmsg task limited maximum distinct signal unlimited number msgports signal used one msgport keep intuition task limited finite number open window examine internal structure many popular operating system discover versus iorequests iorequests extended message include io control transfer information sent device basic set command read write control common iorequests given device additional extension added needed number specialpurpose device iorequest class derived device implementer liberty derive extension needed fairly common end something like following mydevicerequest based stdiorequest based iorequest based message based node based minnode level inheritance gain additional property function new code required support unique class object library another important type node library consists base structure preceded function vector followed optional private storage set basic function eg open close expunge common library beyond designer free add functionality unlike operating system amiga operating system use software interrupt illegal instruction trap provide operatingsystem service instead master library named execlibrary located rom kernel fundamental system function list primitive memory management function load open library library internal initialization open routine called defined immutable part operating system absolute memory location point exec library structure execbase data portion execbase contains fundamental exec structure including list definition system message port library device task interesting compare exec library dynamic link library used microsoft window dlls support set function provide additional service well intel subsequent chip support concept different level ring security nt hold requisite minimum security level request fail dll function dispatching cause securitylevel switching motorola equivalent module call facility however requires least microprocessor unit preferably paged memory management unit amigados run security level inherently available due fact amigados program run default user state whereas operating system run supervisor state required pro con approach since exec library essentially simple vector table overhead calling library function barely higher function resident calling program much le software interrupt instead shared system code hand carefully designed dll incurring small speed penalty immune damage program run amok note dlls extension microsoft operating system basic system function still softwareinterrupt driven hence logic kind library interface amiga library however provide single interface immune problem inherent software interrupt finite number never seems enough practical purpose library hand infinitely expandable straightforward task create new one indistinguishable builtin one even completely override builtin one inserting new library name higher priority system library list amiga operating system unusual nt partition memory application library concept extended form basis io device adding standard function device work via extended message called iorequests also extension extension stdiorequest well customized extension specific device device typically also posse one task io done asynchronously although mandatory another lessunderstood extension library called resource resource essentially act coordinator shared resource generally hardware different drive disk controller serial parallel io port whicb implemented chip task task structure yet another node one contains definition required make exec fully functional preemptive prioritydriven multitasking operating system task roughly equivalent thread extended task known process provides additional information permit use amigados function defined library named doslibrary chiefly thing unixlike io service program loading capability like exec task scheduler elaborate rumored lifted bodily ibm mainframe operating system dispatcher dynamically adjusts task priority based certain algorithm magic part operating system impressive doubtful singleuser operating system need matter stuck best turn still eats real memory exec give good performance simple timeslice dispatching algorithm complex custom algorithm attached straightforward manner required done safely releaseindependent manner amiga dispatcher function task list accessible via welldefined interface nothing basic design exec actually requires single cpu present system exec could implemented multiprocessor system access system list properly serialized amiga system contain present one put sleep boot time possibility semaphore originally serialization exec done either forbid function prevents task dispatched disable switch interrupt however serializes entire system serializing access specific resource semaphore better two kind semaphore exec signalsemaphore based minnode provides highperformance serialization restriction use semaphore based message system used general situation either type semaphore preferable cruder forbid permit disable enable function reduce amount multitasking done serialized resource interrupt interrupt data structure point interrupthandling code plus working storage might require allow one task handle interrupt event interrupt node exact handling interrupt varies depending type interrupt memory management amiga operating system unusual nt partition memory application even operating system instead maintains free memory list chunk free memory certain attribute request matched thus application run memory system run memory requirement juggle segment macintosh compact memory set lowlevel function used acquire free memory exec also provides set function manage memory within pool acquired application several advantage le overall memory fragmentation lower overhead since entire pool released unit instead piecemeal ability preallocate enough memory application lot dynamic memory usage systemmemoryinuse list application fails nt cleanup routine programmer neglect free acquired memory lost system rebooted exec memory management support bankswitched memory virtual memory memory allocated memfpublic attribute guaranteed always visible task interrupt routine system supervisor memory application stack allocated without flag guarantee minimum megabyte ram neither virtual memory switched memory card widespread use likely many application fail situation change component amiga operating system amigados intuition workbench system unique builtin animation routine ultimately depend service exec exec compact efficient flexible reliable expandable system ever worked easy work like bibliography commodore staff amiga rom kernel reference manual exec reading addisonwesley sassenrath carl guru guide commodore amiga meditation interrupt ukiah ca sassenrath research tim holloway president mt associate system software development firm jacksonville florida reached blx tholloway byte magazine january copyright mcgrawhill inc
13,Lobsters,osdev,OS,ToaruOS: A Hobby Operating System,http://toaruos.org/,toaruos hobby operating system,continue reading,since posted something lot happened nih project announced last blog post merged c library reached point run python gcc recently quake lot bug fixed new feature added toaruos version released today still lot thing finish porting new port look thinking might even try port qemu need glib toaruos continue reading
14,Lobsters,osdev,OS,Mezzano (Common Lisp OS) releases Demo 5,https://github.com/froggey/Mezzano,mezzano common lisp o release demo,mezzano operating system written common lisp prebuilt image github building source http githubcomfroggeymbuild major change since demo major change since demo major change since demo major change since demo additional information facebookcom http http commonswikimediaorgwikifile hypothymisazureakaengkrachanjpg http commonswikimediaorgwikifile mandarinpairjpg http http http dejavufontsorg http wwwicojamcom,mezzano operating system written common lisp prebuilt image demo release available github release designed run virtualbox though qemu also supported ram virtionet nic intel hda audio controller recommended building source see mbuild repo http githubcomfroggeymbuild help support follow development join mezzano irc channel freenode ircfreenodenet major change since demo usb stack fittestbits improved overall file system support fittestbits support implemented bruno cichon ebrasca modesetting display driver hardware accelerated support via qemu virgl device multicoresmp support improved atomic operation async apis waitforobjects dispatch thread pool networking improvement server support dhcp tcp retransmit source location tracked many kind definition weak hash table weak object cleanup object representation unifcation standardobjectstructureobject unboxed structure slot short float implemented using ieee half float unboxed unsignedbyte arithmetic stack overflow memory fault trapped recovered support building window major improvement clos mop conformance keymap picker bug fix performance improvement feature major change since demo support implemented bruno cichon ebrasca mcclim ported fittestbits quicklisp ported peter housel improved introspection tool disassemble ed implemented generational collection added garbage collector new ssabased compiler backend supporting unboxed value representation gray stream support overhauled major change since demo trentino medium player implemented eugene zaikonnikov improvement conformance stability performance clos implementation follows mop much closely traditional window management booting cdusb real hardware possible driver support intel hda audio device virtualbox guest mouse display integration major change since demo many improvement conformance stability performance editor greatly improved thanks burton samograd system function correctly computer ram allocator garbage collector make much better use available memory far fewer gc cycle occuring room print detailed information allocated object transparency premultiplied alpha support gui additional information hypothymis azurea kaeng krachan jj harrison facebookcom cc bysa http via wikimedia common http commonswikimediaorgwikifile hypothymisazureakaengkrachanjpg mandarin pair francis c franklin licensed cc bysa via wikimedia common http commonswikimediaorgwikifile mandarinpairjpg handsome andy morffew http cc http includes dejavu font http dejavufontsorg icon icojam http wwwicojamcom
15,Lobsters,osdev,OS,Running DOS Apps on Windows,https://gekk.info/articles/dosapps.html,running do apps window,running do apps window,ï running do apps window running do apps window
16,Lobsters,osdev,OS,M2OS: RTOS with simple tasking support for small microcontrollers,https://m2os.unican.es/,rtos simple tasking support small microcontrollers,realtime operating system multitasking small microcontrollers simple scheduling policy supported board arduino uno epiphany getting started rationale characteristic download install specific information news page r feed contact free software developed istr marte o mast,small realtime operating system allows running multitasking application small microcontrollers scarce memory resource implement simple scheduling policy based nonpreemptive oneshot task requires small memory footprint moreover scheduling policy stack area used task consequently system need allocate stack area large enough fit largest task stack integrated powerful ide gnat programming studio gps simplifies crossdevelopment process coding loading debugging written ada base simplified runtime system gnat ada compiler supported board arduino uno based microchip microcontrollerepiphany manycore mesh noc based arm microcontroller getting started order start working read information rationale characteristic follow install instructionsread specific information use targetbe uptodate visiting news page following r feed contact mario aldea rivas aldeam unicanes software engineering realtime group universidad de cantabria avda de los castro santander spain free software developed istr marte o realtime operating system embedded application follows minimal realtime subset mast opensource suite tool perform schedulability analysis realtime distributed system
17,Lobsters,osdev,OS,Ten Years of Window Systems - A Retrospective View (1985),http://www.chilton-computing.org.uk/inf/literature/books/wm/p004.htm,ten year window system retrospective view,ten year window system retrospective view warren teitelman introduction smalltalk dlisp interlispd tajo mesa development environment doc system cedar viewer cedar sunwindows sundew chapter discussion chairman george coulouris,ten year window system retrospective view warren teitelman introduction james gosling currently work sun reason wanting talk talking past james talking future connected eight window system user implementer building asked give historical view talk look window system ten year feature smalltalk dlisp interlisp interlispd tajo mesa development environment doc cedar viewer cedar sunwindows sundew system talk focus key idea came connected evolved firstly make disclaimer personal recollection bound mistake although spend time talking people telephone thing happen first system interest smalltalk xerox parc smalltalk meeting dan ingalls came good idea window smalltalk idea smalltalk window system propagated rapidly group xerox parc used others good idea environment smalltalk first real window system used overlapping window early system could interact window top like desktop simplifies window system many people felt disadvantageous subsequently corrected later version smalltalk first system use cut paste modeless editor modeless editing originally introduced gypsy text editor parc gypsy full window system bravo first display editor exposure parc fancy modal text format editor text insertion mode command mode easy forget insertion mode insert command text conversely delete document accidentally command mode cut paste eliminated mode anything typed text directed insertion point moved mouse insertion form pasting cutting form moving two simple command form basic model attractive laurel message system included text editor allowed two way operating modal modeless gradually user moved modeless operation developed alto machine kbytes memory lot concern went fitting system onto small machine small virtual address space proved good prototyping designed dorado mind real system large virtual memory dynamic storage garbage collection ethernet communication slide small talk system showed early picture nut bolt figure clock system system shown maturing clock game appear multiplane window popup menu figure small talk browser figure figure smalltalk language method submethods inheritance subclassing something intended interlisp cedar never got round dlisp wrote dlisp first presented mit system hybrid implementation involving alto maxc lisp part system communicated server running alto handled communication screen server could thing put rectangular area screen knowledge window window information lisp communication alto lisp packet ethernet idea using architecture belongs bob sproull system worked amazingly well although user interface tailored limitation machine example could drag image could cursor changed response moving area user interface concerned timeout special character input stream signalled mouse event special event activity system completed heavily used provided starting point interlispd editing paradigm cutandpaste interface awkward menudriven editor allowed textual editing knowledge list structure system builtin document class text desktop window canvas predefined class could extended key idea system described partially obscured window treated way window top example character could typed system provides first support multiple font smalltalk used single font window dlisp defined descriptively rather procedurally lispish idea program could also pas set specification put front existing specification made easy user tailor system involved editing data structure program program could also search specification list see particular specification present idea catch widely however system provided support multiple view ie recursive window example morton salt box label product label picture picture etc explicit notion display context positioned mouse window scrolled occurrence window screen appropriate offset found scrolled idea transformation scaling represented data structure thought yet various scheme handling complexity display window going grey fading away touched period time arrangement related window desktop latter scheme required tool navigate around desktop later idea icon much better solution slide system showed standard typescript interacting system different font clock etc menu menu rather stack menu error occurrence appropriate menu come showing example call stack mail system first time integrated graphic environment smalltalk system single address space system problem referring data structure another address space arise dlisp notion command referring current window currently active window distinguishing pattern name stripe interlispd interlispd system implemented dorado initially included dlisp dlisp code eventually disappeared interlispd also run dandelion interlispd real system user influenced smalltalk objectoriented system class object could displayed user could add object initially multiple process monitor although could switch task via caller callee relationship later result influence cedartajo multiple process monitor added involved finding fixing place code system accessed global resource preemptive scheduling system yet retained cached window added initially speeding performance example menu later retained window found useful hiding programmer fact window top text editor system modeless also allowed mixture markup bitmap editor style interface text tajo mesa development environment time parc working cedar work going system development division xerox developing graphicallyoriented mesa development system called tajo tajo begun used cedar implementers cedar took mesa added storage management atom list system development division unwilling incorporate change tajo multiple process integrated interactive program development environment scroll bar subwindows popup menu etc used button scheme scrolling mouse key idea tajo described tajo first system use notion two state window open closed iconic initially closed window represented small labelled rectangle right screen difficult determine content pictorial representation used shortly afterwards interesting thing tajo control structure used traditional approach program belief control environment control interaction user order user input requested sequentially driven convenience implementer tool user tajo approach program pass procedure specifies window manager event event interest procedure called window manager control specified event occurs user control tajo interacts user user indicates tajo notifies appropriate tool user action intended taken place tool obtains parameter mean systemmanaged form user could walk way tool leave thing window manager program extracting data problem program written way say turn program inside compared conventional structure sun addressing issue programming style slide tajo showed example control panel showing rudimentary icon button used activate process application program worry placement called mail system tajo fairly widely used development environment star still use tajo first system use static menu found popup menu good new user interface easy learn necessarily good experienced user user wait menu come scan visually relevant entry static menu already user mousebutton ahead reflexive way tajo user could also edit wanted static menu system would search popup menu string call associated procedure tajo influenced viewer sunwindows doc system cedar doc developed serious performance problem completed influenced dlisp first system use cedar graphic model prerunner adobe imaging model data structure scaling transformation etc information system idea dlisp using data description window document seemed preference procedural window interface time key idea system follows system provided support scaling rotation via cedar graphic retained window doc objectoriented support subclassing separation window object displayed window case viewer idea document document class string file window drawer stream viewboxes home target document document procedure presenting viewbox notion view box existing document viewing document potential recursion viewer cedar current window system cedar based viewer window package design implementation began system first user may influence seen microsoft mswindows decided sacrifice flexibility performance robustness consequently viewer le functionality better performance doc came quickly worked well viewer notificationoriented system result influence tajo also objectoriented number object system whiteboards system spatial way presenting object influenced smalltalk browser neither cedar viewer support subclassing result necessary duplicate edit code provide object may slightly different existing object subclassing supposed provided get implemented key idea viewer detailed first tiling window manager know make faster mouse hit detection originally environment overlapping window found preferred using tiling window manager conflicting view however mouse ahead discipline must involved predictability important user point view cedar went far allowing overlapping window thus also allowing popup menu think good idea allow transitory window overlapping mode sun allows overlapping window surprising many people take trouble tile another novel idea tip terminal interface package provides separation function system particular user interface used invoke function changing data structure new interface obtained user tailor interface although sensible default provided fact user change thing make agreement interface le issue everyone want spend time tailoring system complaint unix software aged sufficiently sensible default provided flexibility system shown example event associated mouse button changed tip obtain new user interface idea retrofitted tajo planned james gosling new system sundew slide system show richer icon figure raise question able icon eg type delete etc builtin notion screen divided two column figure typical screen configuration showing use multiple font figure figure notion text organized tree structure enables user specify depth want go also allows node moved around example sophisticated tool icon editor user interface defined tip table figure scanned image clipped outline character defined spline reveals strength graphical underpinning system figure shortfall system support subclassing viewer specified via program data separate notion viewer object viewed figure figure figure figure figure figure sunwindows sunwindows attempt bring window unix system synchronization problem multi process environment find objectionable problem aggravated multiple address space mean protocol communicating worried three way partition function window management address space client process requires replication window system library application make large demand disc space outside address space client kernel operating system outside address space client server process requires remote procedure call support available unix system recently sunwindows us first two disadvantage inadequate debugging tool coupled fact need program window manager different style resides kernel bug window system threaten integrity entire system parallel development application user interface possible large body code wireddown memory example sun window graphical interface unix formatting utility indent format program allowing different style different option scrollbars button bar move towards library user build unix spirit icon editor graphical image preview area etc tool manipulating fullscreen crosshairs believe system must provide hook user want window system legislate taste finally last system considered sundew sundew sundew see chapter extensible distributed window system window manager user process application communicate window system via program written postscript james gosling discus system discussion chairman george coulouris myers might worth mentioning current system blit us many idea dlisp teitelman yes another case separation window management function application program good idea area came bob sproull williams mentioned tip deal dragging pointing action teitelman one pseudoevents recognized mousemove could put tip table every time mouse move want following event generated case would continually get mousemove event event tip table would see event could even specify often wanted depending whether interested final end point whole trajectory williams achieve sending event application teitelman yes system fast enough worked
18,Lobsters,osdev,OS,Multi-Touch Systems that I Have Known and Loved,https://www.billbuxton.com/multitouchOverview.html,multitouch system known loved,multitouch system known loved keywords search term preamble lee buxton smith long nose innovation http portalacmorgdlcfm dogma framing touchtablets touch screen discrete continuous location specificity degree freedom size matter orientation matter horizontal vertical touchsensing contact position degree touch pressure sensitivity angle approach force vector size matter ii singlefinger multifinger multipoint multitouch multihand multifinger multiperson multitouch point gesture stylus andor finger hand finger object different attribute free lunch feeling blind simply luck p blind time handhelds rely touch screen input virtually require two hand operate finger transparent incomplete beginning typing nkey rollover photo credit electroacoustic music early day electronic touch sensor http wwwhughlecainecomeninstrumentshtml touch screen technology ea johnson royal radar establishment malvern uk plato iv touch screen terminal http enwikipediaorgwikiplatocomputer u patent carrolltouch onepoint touch input vector information onepoint touch input vector information computer display http wwwyoutubecomwatch manipulating simulated object realworld gesture using force position sensitive scree tactile array sensor robotics real time control robot tactile sensor flexible machine interface soft machine video place video desk http youtubecomwatch multitouch screen u patent sensor frame bimanual input study twohanded input video apple desktop bus adb trackball scroller init natural language interaction perspective nonverbal twohanded input compound task bidirectional display http wwwdpixcomabouthtml digital desk http videogooglecomvideoplay simon wacom manual cognitive benefit twohanded input experimental study starfire starfire flip keyboard wwwbillbuxtoncom combined keyboard touch tablet input device click video bimanual research http wwwbillbuxtoncombuxtonaliasvideoshtml http wwwbillbuxtoncompapershtml graspabletangible interface active desk living augmented reality ubiquitous medium reactive environment design evaluation gui paradigm based tabets twohands transparency video haptic lens mtc express multitouch controller tactex control http wwwtactexcom http wwwbillbuxtoncomflipkeyboardsmov fingerworks multitouch evaluation system hand tracking finger identification chordic manipulation multitouch surface portfolio wall http wwwbillbuxtoncombuxtonaliasvideoshtml portfolio wall fingerworks touchstream http wwwfingerworkscomdownloadshtml handgear grt dsi datotech mobile magazine product announcement may extreme hardware gizmo nt sing bring announcement handgear api autodesk viz http wwwandrewfentemcom university toronto jazz mutant http wwwjazzmutantcom http stantumcom neonode mobile phone http wwwneonodecom http http wwwyoutubecomwatch touchlight http researchmicrosoftcomawilson touchlight playanywhere http researchmicrosoftcomawilson playanywhere tactiva http wwwtactivacom toshiba matsusita display technology http benko collaborator precise selection technique multitouch screen video plastic logic synaptics pilotfish http wwwsynapticscom http wwwsynapticscomonyx apple iphone http wwwapplecomiphonetechnology microsoft surface computing http wwwsurfacecom thinsight surface thinsight http wwwbillbuxtoncomuistthinsightpdf surface ntrig http wwwntrigcom surface http wwwmicrosoftcomsurface surface thinsight,multitouch system known loved bill buxton microsoft research original jan version august keywords search term multitouch multitouch input interaction touch screen touch tablet multifinger input multihand input bimanual input twohanded input multiperson input interactive surface soft machine hand gesture gesture recognition earlier version page also available belorussian thanks translation martha ruszkowski greek translation page undertaken nikolaos zinas preamble since announcement iphone microsoft surface especially large number people asked multitouch reason largely know involved topic number year problem ca nt take time give detailed reply question done next best thing hope start compiling wouldbe answer document assumption ultimately le work give one reasonable answer many unsatisfactory one touch multitouch technology long history put perspective touch screen use latter part air traffic control great britan however technology first introuced touch screen public able sense single touch time yet launch apple iphone general public became aware device capable independently sensing multiple simultaneous touch location capability already developed january publicly demonstrated twenty year use another apple computer milestone reference point january apple macintosh first introduced multitouch screen tablet already developed one example prototype capacitive multitouch tablet developed university toronto publicly disclosed demonstrated lee buxton smith another example multitouch display developed bob boie bell lab became aware work invited presented work toronto bell lab work certainly preceded far advanced multitouch screen rather tablet far advanced mean bell lab invented multitouch screen used iphone subsequent display course hand neither apple virtually always case work toroto like bell lab apple possible standing shoulder giant shoulder chain represented step forward musical term case riffing rather ripping significant next lnk chain phd work wayne westerman want look backwards work look reference thesis excellent researcher prior art knew root thing like pinch gesture date back foundation built body knowledge well small successful company brought work market acquisition company apple computer westerman new colleague apple took thing next level integrated even refined version iphone chain continues putting page together overarching goal use evolution touch especially multitouch technology case study illustrating nature technological innovation hope example help emphasize importance balancing making researching history prior art domain relevant space within working perhaps aside pointing one key area creativity insight exercised process lie area determining constitute relevant domain great idea grow vacuum marketing subscription cult hero tend lpursue great inventorgenius myth generally great innovation come spark invention data say spark typically take year kindle sense evolution multitouch textbook example call long nose innovation flesh case study offer brief admitedly incomplete summary landmark example represent see significant link chain leading multitouch know today spirit lifelong learning apologize relevant example encourage feeding comment additional example etc note note used searching hci literature primary portal search download relevant literature including great deal relating topic including citation westerman thesis acm digital library http portalacmorgdlcfm one relevant source interest interested example kind work done studying gesture interaction see thesis hummels source topic mean good example help gauge might considered new obvious please shy term sending photo update etc best integrate background input see also incomplete draft manuscript book input tool theory technique background input device including touch screen tablet see directory hope help dogma lot confusion around touch technology despite history year relatively recently heard multitouch technology much le used given much impact today multitouch took long take hold took year mouse invented engelbart english became ubiquitous release window yes mouse shipped commercially early german computer telefunken visibly xerox star perq workstation speaking personally used first mouse national research council canada yet none made huge dent term overal number deployed took year hit tipping point measure multitouch technology multitouch got traction year faster mouse one primary axiom everything best something worst something else trick knowing importantly try replace mouse play game mouse great many thing everythingthe challenge new input find device work together simultaneously mouse hand thing strong mouse weak thereby complementing single new technology matter potentially useful seldom cause product overall success mouse multitouch whole new ecosystem required full potential could begin exploited arguably input technique technology played secondfiddle relative display term investment attention industry seemed content try make better mouse mouse replacement trackball joystick rather change overall paradigm interaction framing time write treatise tutorial history warn trap seem cloud lot thinking discussion around stuff approach take draw distinction see meaningful relevant largely form contrast touchtablets v touch screen way two extreme continuum example paper graphic tablet display albeit moreorless static touch tablet tactile display rather visual similarity real difference touchsensitive display surface v touch pad tablet difference directness touch exactly thing interacting call touch screen touch display hand touching surface overlaid screen let call touch tablet touch pad discrete v continuous nature language touch input highly shaped type action used interacting touch technology touch technology device assume different character depending whether interface depends discrete v continuous action example common way working touch screen direct finger selection item example one might asked push graphical ok button conclude transaction atm tap key graphical keyboard order enter text latter case multitouch support ability hold shift key simultaneously tapping one alphabetic key order get upper case contrast one also design interaction control asserted mean continuous action gesture lateral stroke gesture commonly used photoviewing application enable user go next previous image sequence depending direction stroke example multitouch continuous gesture common pinch gesture enables one zoom image map example discrete action typically accompanied graphical cue feedback feedforward actually make selfrevealing contiuous action share property dragging handle graphical linear potentiometer change speaker volume video many example flicking photo pinching zoom map case user need somehow know done done point multitouch device hardware nature experience vary greatly depending kind interaction used location specificity accuratley user position touch particular location particular action significant effect nature interaction typing e key graphical keyboard requires rather high level accuity le selecting gap second third l allleu order correct spelling alleleu hand action lateral flick frequently used go next previous image photo viewer far le demanding occurs fullscreen viewing example initiated pretty much anywhere screen demanding touchscreen interaction regard significant impact overall user experience also suitability certain application general precise one must term touch occurs visually demanding task interaction demand visual attention le acceptable interface case eye mention hand deployed elsewhere example design touch screen controlled device seen illegal use driving automobile certainly integrated console importance let dive little bit deeper primarily deployed today touchscreen relatively uniform flat surface tactile feedback like provided piano keyboard crack key different level black white key different shape knob oldschool car radio told touch touching volume control tuning knob preset button touch screen yes may know approximately graphical qwerty keyboard positioned example may know comma key located unlike traditional car radio feel way location absence tactile feedback mean need use eye key message want convey true even touch screen provide socalled tactile feedback reason typically provides feedback action done purpose describing missing tactile feedback might better referred feedforward reality calling feedforward actually still feedback feedback task finding appropriate control activating point need finer granularity task analysis well type feedback supported finally significance impact amplified fact traditional mechanical control persistent location therefore one feel one commit approximate location muscle memory practice touch screen interface multiple control typically appear different time location thereby creating moded situation likely reduces potential motor learning many situation degree freedom richness interaction highly related richnessnumbers degree freedom dof particular continuous degree freedom supported technology conventional gui largely based moving around single cursor using mouse example result sensing location two finger used appropriately technology offer potential begin capture type richness input encounter everyday world manner exploit everyday skill acquired living point tightly related previous one size matter size largely determines muscle group used many fingershands active surface type gesture suited device orientation matter horizontal v vertical large touch surface traditionally problem could sense one point contact rest hand surface well finger want point confuse poor thing tends occur vertically mounted surface hence large electronic whiteboards frequently use single touch sensing technology without problem touchsensing contact position historically touch sensitive device report surface touched true single multi touch device however aspect touch exploited system potential enrich user experience degree touch pressure sensitivity touch surface independently continuously sense degree contact toouch point far higher potential rich interaction note use rather pressure since frequentlyusually pass pressure actually side effect push harder finger tip spread wider point contact actually sensed amountarea contact pressure per se either richer binary touchno touch even subtle difference affordances pressure v degree angle approach system demonstrated ability sense angle finger relative screen surface see example mcavinney sensor frame effect give finger capability function moreorless virtual joystick point contact example also let finger specify vector projected virtual space behind screen point contact something could relevant game application force vector unlike mouse contact screen user exploit friction finger screen order apply various force vector example without moving finger one apply force along vector parallel screen surface including rotational one technique described early shown herot c weinzapfel g manipulating simulated object realworld gesture using force position sensitive screen computer graphic historical example important reminder human capability technology front centre consideration making capability accessible reasonable cost may challenge worth remembering thing also said multitouch furthermore note multitouch date time touch innovation size matter ii ability sense size area touched important size touch surface see synaptics example device sense difference touch finger small v cheek large area example answer phone holding cheek singlefinger v multifinger although multitouch known since least vast majority touch surface deployed single touch manipulate one point regardless mouse touch screen joystick trackball etc restricted gestural vocabulary fruit fly given multiple limb reason nice able take advantage multipoint v multitouch really important thinking kind gesture interactive technique used peculiar technology many socalled technique seen actually think way think using different technique operating laptop using track pad laptop singletouch device instead mouse double clicking dragging working pulldown menu example interaction technique independent whether touch pad trackball mouse joystick touch screen used multihand v multifinger much space control come different finger different device different hand working different device lot depends scale input device analogy explain referring back traditional gui point icon mouse click drag release button drop point mouse use foot pedal clicking dragging technique even though split two limb two device lot history come tradition go far beyond multitouch multiperson v multitouch two point sensed example make huge difference two finger hand one user v one finger right hand two different user multitouch technique want two cursor example despite one first thing people seem two people working surface may exactly want insofar multitouch technology concerned may valuable able sense person touch come done diamond touch system merl see point v gesture much early relevant work krueger see sensing pose dynamic hand example well position mean go way beyond task sensing multiple point stylus andor finger people speak one must make choice stylus v finger certainly case many stylus system work finger many touch sensor work stylus finger need either question although might correct decision depends context design user palm pilot know potential use either strength weakness keep mind finger ultimate device picasso rembrandt restrict finger painting hand want sense temperature water finger better tool pencil hand finger v object stylus one object might used multipoint interaction multipoint multitouch system sense various different object object orientation see andy work example object stylus otherwise may may used conjunction simultaneously finger different v something different obvious one way answer depends user programmer scientist lawyer perspective user interface literature make three point would known assumed anyone skilled art deviceindependent graphic state technique implemented alternative input device still technique example work gui stylus touch screen mouse joystick touchpad trackball one would still consider technique doubleclicking dragging dialogue box technique interchange device neutral perspective user skill using gui mouse transfer using touchpad user consider interface using technique nevertheless various device idiomatic strength weakness user consider technique performance speed accuracy comfort preference etc different device device hence interactive experience device device despite using technique consequently norm user researcher alike swap one device another control particular technique feedback presence absence graphical feedback design feedback accompanying action effect result different experience interaction language example finger gesture one might leave kind temporary ink trail action like cloud trail jet plane example furthermore leaving different trail depending one two finger used gesture may useful imprinting upon user gesture mean two different thing depending number finger despite functional effect action identical without feedback effect interface design significantly different reason design individual action thing learning well take complete set possible variation alternative consideration range diverse inclined say anyone describes something touchscreen interface leaf probably unqualified discus topic okay overstating perhaps term touch screen interface mean many thing effect mean little nothing term subtle nuance define essence interaction user experience appropriateness design task user context one purpose preparing page help raise level discourse avoid applebanana type comparison discus topic level worthy importance made lofty claim also state clearly nt yet understand still get wrong still people correct hand explicit term specific language meaningful dimension differentiation bigger opportunity learning happen one hope attribute stated general rule everything best something worst something else diverse population place context interact nature information passing back forth interaction room technology tailored idiosyncrasy task potential problem lead u carry around collection device distinct purpose consequently distinct style interaction potential getting hand becoming overwhelmed proliferation gadget gadget simple effective collectively little reduce complexity functioning world yet traditionally better tool followed approach think different knife kitchen screwdriver workshop yes great number leading interesting variation old theme namely ie right technology result le complexity guarantee touch screen based offer opposite alternative le generally applicable technology result le overall complexity hence prospect multitouch soft machine becoming kind chameleon provides single device transform whatever interface appropriate specific task hand risk kind jack trade master nothing compromise one path offered touchscreen driven appliance instead making device different button dial mounted soft machine draw picture device let interact ideally get far flexibility single device sometimes really good especially good like physical device touch operate one button virtual device time example using one button device time important physical world think type without able push shift key time character want appear upper case number case use touch interface likewise multitouch greatly expands type gesture use interaction go beyond simple pointing button pushing dragging dominated interaction computer past best way relate everyday world imagine eating chinese food one chopstick trying pinch someone one fingertip giving someone hug tip one finger mouse term pointing device like mouse joystick concerned everything manipulating one point around screen something give u gestural vocabulary fruit fly one suspect better user deserve better multitouch one approach accomplishing mean one even best keep saying everything best something worst something else free lunch feeling adaptability touch screen general multitouch screen especially come price besides potential accumulation complexity single device main source downside stem fact interacting picture ideal device rather ideal device may still enable certain skill specialized physical device transfer operating virtual one simply anyone typed graphical qwerty keyboard know user interface look feel following graphic illustration generally written discussing touchscreen based system look feel kind ironic given touch screen let look consequence next point blind simply luck p blind time light eye occupied elsewhere road soft touch screen interface nearly speak eye occupied elsewhere one exception socalled touch entry using single stroke gesture graffiti location independent interface player us touchscreen fingeractivated graphical taperecorder type control start stop pause example eye free unlike older mechanical control ca nt fee touchscreen button must first take pocketpursebriefcase want likewise unless device also support speech recognition risk serious accident operate driving yes could use gesturebased control technique could reduce eliminate visual demand task could useful many case however driving would still divert hand wheel still dubious design solution handhelds rely touch screen input virtually require two hand operate one hold device operate thus operating generally requires eye hand finger transparent smaller touch screen finger obscure pointed finger shrink way chip display one reason stylus sometimes value proxy finger skinny therefore obscure screen reason rely finger painting even large surface writing drawing finger generally effective brush stylus small format device virtually useless try take note make drawing using finger rather stylus one support good digital ink appropriate stylus design one take note fluently one paper note takingscribble function notably absent virtually fingeronly touch device sunshine suffered trying read colour lcd display player mobile phone digital camera outside sun least device mechanical control function example even see screen still point camera appropriate direction push shutter button interface rely exclusively touch screen case unless device outstanding reflective display device risk unusable bright sunlight property make touchdevices bad thing mean distinct device set strength weakness ability completely reconfigure interface fly socalled long known respected exploited free lunch general panacea said everything best something worst something else understanding weighing relative implication use property necessary order make informed decision problem people especially consumer including many designer enough experience understand many issue area could use additional work hopefully written help incomplete roughly annotated chronology multitouch related work beginning typing nkey rollover ibm others may seem long way multitouch screen story multitouch start keyboard yes mechanical device hard rather soft machine involve multitouch sort first obviously see sequence shift control fn alt key combination others case want multitouch second case unintentional inevitable multiple simultaneous key press want make proper sense socalled question nkey rollover push next key releasing previous one photo credit electroacoustic music early day electronic touch sensor hugh lecaine buchla bob moog http wwwhughlecainecomeninstrumentshtml history touchsensitive control device predates age pc number early synthesizer electronic music instrument maker used touchsensitive capacitancesensors control sound music made touch pad rather touch screen tradition innovating touch control musical purpose continuedcontinues original basis university toronto multitouch surface well cmu sensor frame touch screen technology ea johnson royal radar establishment malvern uk describes workable mechanism developing touch screen interesting touch screen used capacitive sensing consumer device today photo johnson still use air traffic control uk late johnson ea touch display novel inputoutput device computer electronics letter johnson e touch display programmed manmachine interface ergonomics also appears wt singleton r easterby dc whitfield ed human operator complex system london taylor francis orr nw hopkins vd role touch display air traffic control controller plato iv touch screen terminal computerbased education research laboratory university illinois urbanachampain http enwikipediaorgwikiplatocomputer one first touch screen generally known used public albeit small population way plato iv computer assisted education system developed initial implementation x infrared light beam running parallel close screen surface determining horizontal vertical beam interuppted finger touched screen indicated touch occured screen surface touch system developed frederick ebeling roger l johnson richard goldhor u patent filed nov granted nov touch technology used commercialized much improved form carrolltouch founded arthur bruce carroll also technique used first commercially available pc came touch screen hewlett packard well use touch plato system remarkable use realtime randomaccess audio playback invention flat panel plasma display onepoint touch input vector information chris herot guy weinzapfel architecture machine group mit screen demonstrated herot weinzapfel could sense different signal single touch point position x force x z ie sheer x pressure z torque x z celebrate clever multitouch sensor nice reminder many dimension touch screen exploited order provide rich interaction see herot c weinzapfel g onepoint touch input vector information computer display computer graphic video demo see http wwwyoutubecomwatch similar work see also minsky manipulating simulated object realworld gesture using force position sensitive screen computer graphic tactile array sensor robotics jack rebman lord corporation multitouch sensor designed robotics enable sensing shape orientation etc consisted x array sensor x square pad usage described wolfeld jeffrey real time control robot tactile sensor msc thesis philadelphia moore school electrical engineering figure right show computer display tactile impression placing round object tactile sensor shown foreground groover mp wei nagel rn odrey n industrial robot new york mcgrawhill u patent issued work rebman flexible machine interface nimish mehta university toronto first multitouch system aware designed human input computer system consisted frostedglass panel whose local optical property viewed behind camera black spot whose size depended finger pressure appeared otherwise white background simple image processing allowed multi touch input picture drawing etc time discussed notion projector defining context camera human viewer mehta nimish flexible machine interface masc thesis department electrical engineering university toronto supervised professor kc smith soft machine bell lab murray hill first paper aware user interface literature attempt provide comprehensive discussion property touchscreen based user interface call multitouch specifically paper outlined many attribute make class system attractive certain context application nakatani l h rohrlich john soft machine philosophy usercomputer interface design proceeding acm conference human factor computing system video place video desk myron krueger vision based system tracked hand enabled multiple finger hand people interact using rich set gesture implemented number configuration including table wall sense touch per se largely relied dwell time trigger event intended pose hand horizontal desktop configuration inherently touch based user perspective essentially term unencumbered ie glove mouse stylus etc rich gestural interaction work decade ahead time hugely influential yet acknowledged use many hand gesture starting emerge clearly seen following video including using pinch gesture scale translate object http youtubecomwatch many video demonstrate system anyone field view well read book krueger myron w artificial reality reading addisonwesley krueger myron w artificial reality ii reading addisonwesley krueger myron w gionfriddo thomas hinrichsen katrin videoplace artificial reality proceeding acm conference human factor computing system work staggeringly rich repertoire gesture mutifinger multihand multiperson interaction multitouch screen bob boie bell lab murray hill nj multitouch touch screen tablet first mutitouch screen aware used transparent capacitive array touch sensor overlaid crt could manipulate graphical object finger excellent response time developed bob boie shown lloyd nakatani see invited visit bell lab see saw presentation work sigchi since boie technology transparent faster saw view ahead u stopped working hardware expecting would get access focus software interaction side strength assumption false turned boie technology would become available u near future around took group xerox see technology since felt would appropriate user interface large document processor work multitouch work bell lab around time boie see work leonard kasday u patent used optical technique sensor frame carnegie mellon university work done paul mcavinney carengiemellon university device used optical sensor corner frame detect finger time done miniature camera essentially unavailable hence device used dram ic glass opposed opaque cover imaging could sense three finger time fairly reliably due optical technique used potential misreading due shadow later prototype variation built nasa funding sensor cube device could also could detect angle finger came screen bimanual input university toronto study published following year examined benefit two different compound bimanual task involved continuous control hand first positioningscaling task one move shape particular location screen one hand adjusting size match particular target second selectionnavigation task one navigate particular location document currently offscreen one hand select since bimanual continuous control still easy adb yet released see emulated macintosh another computer perq result demonstrated continuous bimanual control easy user resulted significant improvement performance learning see buxton w myers b study twohanded input proceeding chi video despite capability technologically economically viable since advent adb see later usb still mainstream system take advantage basic capability bad example technique developed multidevice multihand easily transfer multitouch device apple desktop bus adb trackball scroller init apple computer university toronto apple first released apple desktop bus adb apple iigs thought early version usb starting launch macintosh ii macintosh se adb included macintosh computer year imac replaced usb adb supported plugandplay also enabled multiple input device keyboard trackball joystick mouse etc plugged computer simultaneously downside plugged two pointing device default software distinguish thing mouse trackball operate time could kind tugofwar resulted tracking symbol screen gina venolia apple advanced technology group atg developed tool enabled distinguish input stream device direct particular parameter work mainly focusing manipulation object knowing work group university toronto wanted take advantage multidevice capability order support bimanual input work growing described gina venolia assisted michael chen past student group also apple atg produce init u based gina earlier work trackballscroller init u example enabled mouse designated pointing device trackball control scrolling independently x see example buxton w natural language interaction perspective nonverbal dialogue laurel b ed art humancomputer interface design reading addisonwesley able use init control range function described kabbash p buxton w sellen twohanded input compound task proceeding chi short technology able deliver benefit demonstrated buxton myers see standard hardware without change operating system largely change even application collective disappointment apple never took advantage one interesting innovation bidirectional display bill buxton colleague xerox parc first discussion feasibility making lcd display also input device ie pixel input well output device led two initiative think papercup string made kid cup bidirectional functioned simultaneously speaker microphone took high re asi scanner technology used scanner adding layer make display bidirectional motivation got lost process result dpix display http wwwdpixcomabouthtml liveboard project rear projection liveboard initially conceived quick prototype large flat panel version used tiled array bidirectional dpix display digital desk pierre wellner rank xerox europarc cambridge classic paper literature augmented reality wellner p digital desk calculator tactile manipulation desktop display proceeding fourth annual symposium user interface software technology uist early front projection tablet top system used optical acoustic technique sense handsfingers well certain object particular paperbased control data clearly demonstrated multitouch concept two finger scaling translation graphical object using either pinching gesture finger hand among thing example see segment starting following video demo http videogooglecomvideoplay simon ibm bell south ibm bell south release arguably world first smart phone simon historical interest simon like iphone relied touchscreen driven user interface singletouch device simon foreshadows number aspect seeing touchdriven mobile device see today sidebar two working simon among prized piece collection input device wacom japan wacom introduced ud series digitizing tablet special mutlidevice multipoint sensing capability could sense position stylus tip pressure well simultaneously sense position mouselike puck enabled bimanual input working wacom lab university toronto developed number way exploit technology far beyond stylus puck see work graspabletangible interface next two generation tablet intuos intuos series extended multipoint capability enabled sensing location stylus x plus tilt x tilt making stylus locationsensitive joystick effect tip pressure value sidemounted dial airbrush stylus well one could simultaneously sense position rotation puck well rotation wheel side total one able control degree freedom using two hand may seem extravagant hard control depended used example signal coupled bimanual input needed implement digital airbrush worthy name technology able group aliaswavefront cooperation wacom see also leganchuk zhai buxton w manual cognitive benefit twohanded input experimental studytransactions humancomputer interaction starfire bruce tognazinni sun microsystems bruce tognazinni produced future envisionment film starfire included number multihand multifinger interaction including pinching etc flip keyboard bill buxton xerox parc wwwbillbuxtoncom multitouch pad integrated bottom keyboard flip keyboard gain access multitouch pad rich gestural control application buxton w combined keyboard touch tablet input device xerox disclosure journal click video implementation tactex control sound synthesizer audio mixer graphic multitouch surface defining control various virtual device bimanual research aliaswavefront toronto developed number innovative technique multipoint multihanded input rich manipulation graphic visually represented object mentioned specifically page number video seen illustrate technique along others http wwwbillbuxtoncombuxtonaliasvideoshtml also see paper twohanded input see example multipoint manipulation object http wwwbillbuxtoncompapershtml graspabletangible interface input research group university toronto demonstrated concept later implementation sensing identity location even rotation multiple physical device digital desktop display using control graphical object mean resulting article associated thesis introduced notion come known computing fitzmaurice gw ishii h buxton w brick laying foundation graspable user interface proceeding acmsigchi conference human factor computing system active desk input research group ontario telepresence project university toronto around made drafting table size desk rearprojection data display rear projection screentable top translucent stylus controlled digital graphic tablet scriptel stylus operated dominant hand prior mounted camera bove table top tracked position nondominant hand tablet surface well pose open angle thumb index finger nondominant hand could grasp manipulate object based opening closing grip virtual object vision work done student yuyan liu buxton w living augmented reality ubiquitous medium reactive environment k finn sellen wilber ed video mediated communication hillsdale nj erlbaum earlier version chapter also appears proceeding imagina simultaneous bimanual multifinger interaction large interactive display surface aliaswavefront toronto bimanual tabletbased system utilized number technique work equally well multitouch device used thus include restricted grabbing drawing surface two point scaling size ie zooming inout moving hand apart towards respectively likewise could done individual graphical object lay background note simply multipoint implementation concept seen ivan sketchpad system likewise one could grab background object rotate using two point thereby controlling pivot point degree rotation simultaneously ditto translating moving object page interest one could combine primitive translate scale simultaneously idea foreshadowed graspable interface work kurtenbach g fitzmaurice g baudel buxton w design evaluation gui paradigm based tabets twohands transparency proceeding acm conference human factor computing system chi video haptic lens mike sinclair georgia tech microsoft research haptic lens multitouch sensor feel clay deformed harder pushed resumed basic form released novel interesting approach class device sinclair mike haptic lens acm siggraph visual proceeding art interdisciplinary program siggraph page mtc express multitouch controller tactex control victoria bc http wwwtactexcom believe first commercially available multitouch controller used optical sensor technology developed licensed canadian space agency u patent work controller began product shipped marketed mainly controller electronic musical instrument see video http wwwbillbuxtoncomflipkeyboardsmov fingerworks multitouch evaluation system newark delaware fingerworks founded john elia wayne westerman university delaware objective productize work resulting westerman phd thesis hand tracking finger identification chordic manipulation multitouch surface done supervision elia multtouch evaluation system prototype product initially named fingerboard sale believe made thay used user testing device used capacitive multitouch provide innovative combination keyboard mouse gestureshorthand command producct emerged work fingerworks touchstream released see portfolio wall aliaswavefront toronto canada product digital corkboard image could presented group individually allowed image sorted annotated presented sequence due available sensor technology u multitouch however interface entirely based finger touch gesture went well beyond typical touch screen interface time starting appear touchbased mobile device example advance next slide sequence one flicked right go back previous image one flicked left gesture much richer leftright flick one could instigate different behaviour depending direction moved finger system eight option corresponding main point compass example downward gesture video meant stop gesture right enabled annotation right launched application associated image etc selfrevealing could done eye free leveraged previous work see number demo http wwwbillbuxtoncombuxtonaliasvideoshtml touch openclose image flick right next flick left previous portfolio wall fingerworks touchstream newark delaware shipping version previously named fingerboard emerged fingerworks multitouch evaluation system discussed shipped main innovation use multitouch gesture shortcut provide alternative conventional keyboard mouse gaining huge market share acquire strong dedicated base user perhpas key significance device paved way acquisition fingerworks apple computer led elia westerman moving apple incorporation capacitive multitouch iphone company acquired early apple computer moved apple fingerworks ceased operation independent company documentation including tutorial manual still downloadable http wwwfingerworkscomdownloadshtml handgear grt dsi datotech vancouver bc dsi datotech announced demonstrated multitouch tablet named handgear accompanied software package named gesture recognition technology grt recognizing hand gesture captured tablet understand detail come company ran money product shipped went business mobile magazine product announcement may sems marty extreme hardware gizmo nt sing bring computer power user announcement handgear api autodesk viz june andrew fentem uk http wwwandrewfentemcom state working multitouch music general application since however appears published technical information detail work technical scientific literature hence work period generally known given absence publication cited therefore little impact larger evolution field one example citing work known loved simple reason took place radar normal scientific technical exchange sure several similar instance hence include example representing general case university toronto toronto paper outlining number technique multifinger multihand multiuser single interactive touch display surface many simpler previously used technique omitted since known obvious mike wu mike balakrishnan ravin multifinger whole hand gestural interaction technique multiuser tabletop display chi letter freeform rotation two finger used rotate object b though pivot finger lifted second finger continue rotation parameter adjustment widget allows twofingered manipulation jazz mutant bordeaux france http wwwjazzmutantcom stantum http stantumcom make one first transparent multitouch one became best knowledge first offered commercial product product technology used lemur music controller true multitouch screen interface early version lemur first shown public la august jazz mutant company sell music product stantum sibling company set sell underlying multitouch technology neonode mobile phone stockholm sweden http wwwneonodecom touch screen phone announced shipped interaction mainly dpad touch screen sens touch using basic concept plato system derivative commercialized carroll touch ie bezel display pair optical sensor facing along horizontal vertical ax touch sensed finger interpupts sensor light path seen previously touchscreen device portfolio wall first touchscreen phone go beyond primarily tapping light button make substantial use finger swipetype gesture primary example prior art challenge iphones swipetounlock patent touchscreen incorporated socalled haptic tactilevibratory feedback pen computing review see http video walkthrough see http wwwyoutubecomwatch touchlight andy wilson microsoft research http researchmicrosoftcomawilson touchlight touch screen display system employing rear projection display digital image processing transforms otherwise normal sheet acrylic plastic high bandwidth inputoutput surface suitable gesturebased interaction video demonstration website capable sensing multiple finger hand one user since acrylic sheet transparent camera behind potential used scan display paper document held screen playanywhere andy wilson microsoft research http researchmicrosoftcomawilson playanywhere video website contribution sensing identifying object well touch frontprojected computer visionbased interactive table system address installation calibration portability issue typical visionbased table system us improved shadowbased touch detection algorithm sensing finger hand well object object identified tracked using fast simple visual bar code scheme hence addition manual multtouch desk support interaction using various physical object thereby also supporting graspabletangible style interface also sense particular object piece paper mobile phone deliver appropriate desired functionality depending tactiva palo alto http wwwtactivacom announced shown video demo product called tactapad us optic capture hand shadow superimpose computer screen providing kind immersive experience echo back krueger see multihand multitouch tactile touch tablet ie tablet surface feel different depending virtual objectcontrol touching toshiba matsusita display technology tokyo announce demonstrate lcd display shadow sensing capability one first example referred xerox parc discussion last significance separate touch sensing transducer rgb pixel produce light location screen pixel detect shadow location screen thereby enabling multitouch way hard separate touch technology match performance eventually price http benko collaborator columbia university microsoft research technique precise pointing selection mutitouch screen benko h wilson baudisch p precise selection technique multitouch screen proc acm chi human factor computing system video plastic logic cambridge uk flexible eink display mounted multipoint touch pad thereby creating interactive multitouch display early prototype illfated que ereader synaptics pilotfish san jose http wwwsynapticscom jointly developed onyx soft multitouch mobile phone concept using transparent synaptics touch sensor sense difference size contact hence difference finger small cheek large answer phone holding cheek example http wwwsynapticscomonyx apple iphone http wwwapplecomiphonetechnology like simon see mobile phone soft touchbased interface outstanding industrial design smooth interaction employed multitouch capability limited degree us example support pinching technique introduced krueger ie using thumb index finger one hand zoom map photo work especially well web page browser us alias portfolio wall type gesture flick forward backward sequence image initially enable use multitouch hold shift key one finger order type upper case character another soft virtual keyboard get implemented year release microsoft surface computing http wwwsurfacecom interactive table surface capable sensing multiple finger hand capable identifying various object position surface commercial manifestation internal research begun andy wilson see steve bathiche image displayed rearprojection input captured opticaly via camera key indication technology making transition research development demo mainstream commercial application see also thinsight surface thinsight microsoft research cambridge uk http wwwbillbuxtoncomuistthinsightpdf thin profile multitouch technology used lcd display hence accommodated laptop example optical technology therefore capable sensing finger object therefore accommodate touch tangible style interaction research undertaken published microsoft research see also surface ntrig http wwwntrigcom commercially multitouch sensor sense finger stylus simultaneously unlike touch sensor support stylus incorporates specialized stylus sensor result much higher quality digital ink stylus incorporated recent tabletpcs technology scale larger format tabletop size surface microsoft samsung http wwwmicrosoftcomsurface thick version surface rear projection projector replaced augmented lcd technology build research thinsight result multitouch surface since pixel integrated optical sensor whole display also imager hence device see placed including shape barcodes text drawing etc yes finger
19,Lobsters,osdev,OS,A Tour Through Cedar (1984),https://pdfs.semanticscholar.org/68a9/f458830b661637542eedbbe5c944e4c0e16e.pdf,tour cedar,nb,obj xobject procset r endobj obj r r r r r r r r r r endobj obj endobj obj stream ty f w u va חm ۉ esr nr oȏm q l v endstream endobj obj endobj obj stream p endstream endobj obj endobj obj stream p endstream endobj obj endobj obj stream p endstream endobj obj endobj obj stream x f endstream endobj obj endobj obj stream p zp sx h ɪ z mr b endstream endobj obj endobj obj stream rt x e e c ֆ j x u xu ec dd f tt r p endstream endobj obj endobj obj stream bc endstream endobj obj endobj obj stream endstream endobj obj endobj obj stream c endstream endobj obj endobj obj width stream x 馚 兹ts c u g ei g yz j zm ka n n z dr l ǡx ok z 㺑 c dݽ scm sin w gmt pa q q ad b x ì h k hc 턻 xk lpb v g b ˆ xwǧ e l n luk ԕ aynys vتj el ddg xl l lts f lav c vj ao l ƫ l 일 l wy q ӫ vfdhv l x hrh aɚ v l l b l pb v v ԃ e ю l ʬ qv ч l vx luk l v w g z w e f l c b n l ѯ lѯ h agq gk x p fqsԏf b h j z gm q al b l eņ ޤu ӧ ޓi k q z u f id w ki xedddddg u l r v տ mi gz b zcحl k w pe l lsl ya aghad z l l u k w xڊ փm bt v hz j h ccb f aisl c h pd xk c h l h fǵr v l cl x l q g eݩ b v pdt e e ӎ ڱka r u x im ał l b l x n q kw h b v q e q чh l om z hpl g l v v 䬏 e ddddddf l qm e luqm hj l n ga b b q x l f l l b v p xaȓ ffw l wb ݪ b xl l r ޙ g h l øsw bbbbl dpbbbbbl gt x wc x b bqf ga ga v hd fx h b 㜨 b v ficmt r xa h bggф tab eb оgф f tah fa l u b r gb x taa e tq b ta b gф de b gh h fڂ b db fbn b h eфafe g gd c pid h b b tb b dddd x k g cdc v 瑢 ub ۺ l f iv c endstream endobj obj pdftextimageb endobj obj xobject procset r endobj obj r r r r r r r r r r r r r r r r r r r endobj obj endobj obj stream iv ߞpz q
20,Lobsters,osdev,OS,Verified seL4 on secure RISC-V processors,https://ts.data61.csiro.au/publications/csiroabstracts/Heiser_20.abstract.pml,verified secure riscv processor,verified secure riscv processor author gernot heiser abstract bibtex entry download,verified secure riscv processor author gernot heiser unsw sydney abstractriscv many attraction ranging openness architecture cleanslate design based simplicity scalability well riscv foundation strong commitment security ground riscv extremely attractive platform opensource microkernel unrivalled verification security story led industry player especially germanybased hensoldt cyber making major bet combination riscv resulting funding formal verification implementation correctness proof riscv discus experience implementing verifying riscv architecture related opensource technology employing allow u build secure system includes camkes component framework support securitybyarchitecture approach cogent system language designed reduce cost verified system component file system device driver one interesting aspect timing channel working number year time protection temporal equivalent memory protection systematic timingchannel prevention experience arm processor lack mechanism completely riscv present opportunity get right report experience working riscv foundation security standing committee get required mechanism processor specification bibtex entry misc author heiser gernot month jan date year keywords operating system verification cyber security safetycritical system risc v title verified secure risc v processor address gold coast numpages online video http wwwyoutubecomwatch featureyoutube note linuxconfau booktitle linuxconfau publisher online slide http download
21,Lobsters,osdev,OS,Prevention of Microarchitectural Covert Channels on an Open-Source 64-bit RISC-V Core,https://ts.data61.csiro.au/publications/csiro_full_text//Wistoff_SGBH_20.pdf,prevention microarchitectural covert channel opensource riscv core,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڵ vi j v u iš iwgz
22,Lobsters,osdev,OS,Cross-compiling to Redox using Nix,https://www.redox-os.org/news/redox-plus-nix-0/,crosscompiling redox using nix,introduction pr redoxpkgs package going forward,aaron janse wednesday july introduction nixpkgs recently merged pr allowing nix package manager crosscompile package redox expected nixpkgs package crosscompile redox without failing created redoxpkgs wrapper around nixpkgs fix broken package hope patch eventually adapted upstream nix several property make crosscompiling redox pleasant first nix reproducibly compiles package meaning build work system work second nix allows porting package en mass single change toolchain package could make large number package suddenly compatible redox needed patch could automatically applied build process every package given language crosscompiled redox get started installing nix simply checkout redox overlay linked run nixbuild specifying package want crosscompile git clone http githubcomaaronjanseredoxpkgs cd redoxpkgs nixbuild hexyl time writing package ported hope change time plan eventually setup small nix package cache redox meantime expect first build take long time nix build redox toolchain source going forward future nix redox depends mostly reception respective community well two system work together longterm would cool port nix run redox package built installed redox rather crosscompiled copied linux machine theory enough package ported redox isos could declaratively compiled using nix meantime though plan focus effort elsewhere dogfooding nix toolchain continue contribute redox
23,Lobsters,osdev,OS,How do SO_REUSEADDR and SO_REUSEPORT differ? (2013),https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ,soreuseaddr soreuseport differ,bsd soreuseaddr exactly exactly page soreuseport exactly connect returning eaddrinuse multicast address freebsdopenbsdnetbsd macos macos x io watchos tvos linux linux linux socket want share address port combination must belong process share effective user id android window even socket option set bound visit page solaris system also think result wrong code,welcome wonderful world portability rather lack start analyzing two option detail take deeper look different operating system handle noted bsd socket implementation mother socket implementation basically system copied bsd socket implementation point time least interface started evolving course bsd socket implementation evolved well time thus system copied later got feature lacking system copied earlier understanding bsd socket implementation key understanding socket implementation read even nt care ever write code bsd system couple basic know look two option tcpudp connection identified tuple five value protocol src addr src port dest addr dest port unique combination value identifies connection result two connection five value otherwise system would able distinguish connection longer protocol socket set socket created socket function source address port set bind function destination address port set connect function since udp connectionless protocol udp socket used without connecting yet allowed connect case advantageous code general application design connectionless mode udp socket explicitly bound data sent first time usually automatically bound system unbound udp socket receive reply data true unbound tcp socket automatically bound connected explicitly bind socket possible bind port mean port since socket really bound existing port system choose specific port case usually predefined o specific range source port similar wildcard exists source address address case case unlike case port socket really bound address mean source ip address local interface socket connected later system choose specific source ip address since socket connected time bound local ip address depending destination address content routing table system pick appropriate source address replace binding binding chosen source ip address default two socket bound combination source address source port long source port different source address actually irrelevant binding socketa x socketb b b address x port always possible long x hold true however even x binding still possible long b hold true eg socketa belongs ftp server program bound socketb belongs another ftp server program bound binding succeed keep mind though socket may locally bound address socket bound bound existing local address time case socket bound port regardless specific ip address try bind conflict existing local ip address anything said far pretty much equal major operating system thing start get o specific address reuse come play start bsd since said mother socket implementation bsd soreuseaddr soreuseaddr enabled socket prior binding socket successfully bound unless conflict another socket bound exactly combination source address port may wonder different keyword exactly soreuseaddr mainly change way wildcard address ip address treated searching conflict without soreuseaddr binding socketa binding socketb fail error eaddrinuse since mean local ip address thus local ip address considered use socket includes soreuseaddr succeed since exactly address one wildcard local address one specific local address note statement true regardless order socketa socketb bound without soreuseaddr always fail soreuseaddr always succeed give better overview let make table list possible combination soreuseaddr socketa socketb result onoff error eaddrinuse onoff ok onoff ok error eaddrinuse error eaddrinuse ok ok onoff error eaddrinuse table assumes socketa already successfully bound address given socketa socketb created either get soreuseaddr set finally bound address given socketb result result bind operation socketb first column say onoff value soreuseaddr irrelevant result okay soreuseaddr effect wildcard address good know yet nt effect another well known effect also reason people use soreuseaddr server program first place important use option take deeper look tcp protocol work socket send buffer call send function succeeds mean requested data actually really sent mean data added send buffer udp socket data usually sent pretty soon immediately tcp socket relatively long delay adding data send buffer tcp implementation really send data result close tcp socket may still pending data send buffer sent yet code considers sent since send call succeeded tcp implementation closing socket immediately request data would lost code would nt even know tcp said reliable protocol losing data like reliable socket still data send go state called timewait close state wait pending data successfully sent timeout hit case socket closed forcefully amount time kernel wait close socket regardless still data flight called linger time linger time globally configurable system default rather long two minute common value find many system also configurable per socket using socket option solinger used make timeout shorter longer even disable completely disabling completely bad idea though since closing tcp socket gracefully slightly complex process involves sending forth back couple packet well resending packet case got lost whole close process also limited linger time disable lingering socket may lose data flight also always closed forcefully instead gracefully usually recommended detail tcp connection closed gracefully beyond scope answer want learn recommend look page even disabled lingering solinger process dy without explicitly closing socket bsd possibly system linger nonetheless ignoring configured happen example code call exit pretty common tiny simple server program process killed signal includes possibility simply crash illegal memory access nothing make sure socket never linger circumstance question system treat socket state timewait soreuseaddr set socket state timewait considered still bound source address port attempt bind new socket address port fail socket really closed may take long configured linger time nt expect rebind source address socket immediately closing case fail however soreuseaddr set socket trying bind another socket bound address port state timewait simply ignored already half dead socket bind exactly address without problem case play role socket may exactly address port note binding socket exactly address port dying socket timewait state unexpected usually undesired side effect case socket still work beyond scope answer fortunately side effect rather rare practice one final thing know soreuseaddr everything written work long socket want bind address reuse enabled necessary socket one already bound timewait state also flag set bound code decides bind succeed fail inspects soreuseaddr flag socket fed bind call socket inspected flag even looked soreuseport soreuseport people would expect soreuseaddr basically soreuseport allows bind arbitrary number socket exactly source address port long prior bound socket also soreuseport set bound first socket bound address port soreuseport set socket bound exactly address port regardless socket soreuseport set first socket release binding unlike case soreuesaddr code handling soreuseport verify currently bound socket soreuseport set also verify socket conflicting address port soreuseport set bound soreuseport imply soreuseaddr mean socket soreuseport set bound another socket soreuseport set bound exactly address port bind fails expected also fails socket already dying timewait state able bind socket address port another socket timewait state requires either soreuseaddr set socket soreuseport must set socket prior binding course allowed set soreuseport soreuseaddr socket much say soreuseport added later soreuseaddr find many socket implementation system forked bsd code option added way bind two socket exactly socket address bsd prior option connect returning eaddrinuse people know bind may fail error eaddrinuse however start playing around address reuse may run strange situation connect fails error well remote address connect add socket already use connecting multiple socket exactly remote address never problem going wrong said top reply connection defined tuple five value remember also said five value must unique otherwise system distinguish two connection longer right well address reuse bind two socket protocol source address port mean three five value already two socket try connect socket also destination address port would create two connected socket whose tuples absolutely identical work least tcp connection udp connection real connection anyway data arrived either one two connection system could tell connection data belongs least destination address destination port must different either connection system problem identify connection incoming data belongs bind two socket protocol source address port try connect destination address port connect actually fail error eaddrinuse second socket try connect mean socket identical tuple five value already connected multicast address people ignore fact multicast address exist exist unicast address used onetoone communication multicast address used onetomany communication people got aware multicast address learned multicast address also existed even though feature never widely used public internet meaning soreuseaddr change multicast address allows multiple socket bound exactly combination source multicast address port word multicast address soreuseaddr behaves exactly soreuseport unicast address actually code treat soreuseaddr soreuseport identically multicast address mean could say soreuseaddr implies soreuseport multicast address way round freebsdopenbsdnetbsd rather late fork original bsd code three offer option bsd also behave way bsd macos macos x core macos simply bsdstyle unix named darwin based rather late fork bsd code bsd later even resynchronized time current freebsd code base mac o release apple could gain full posix compliance macos posix certified despite microkernel core mach rest kernel xnu basically bsd kernel macos offer option bsd also behave way bsd io watchos tvos io macos fork slightly modified trimmed kernel somewhat stripped user space toolset slightly different default framework set watchos tvos io fork stripped even especially watchos best knowledge behave exactly macos linux linux prior linux option soreuseaddr existed option behaves generally bsd two important exception long listening server tcp socket bound specific port soreuseaddr option entirely ignored socket targeting port binding second socket port possible also possible bsd without soreuseaddr set eg bind wildcard address specific one way round possible bsd set soreuseaddr bind port two different nonwildcard address always allowed aspect linux restrictive bsd second exception client socket option behaves exactly like soreuseport bsd long flag set bound reason allowing simply important able bind multiple socket exactly udp socket address various protocol used soreuseport prior behavior soreuseaddr altered accordingly fill gap aspect linux le restrictive bsd linux linux added option soreuseport linux well option behaves exactly like option bsd allows binding exactly address port number long socket option set prior binding yet still two difference soreuseport system prevent port hijacking one special limitation socket want share address port combination must belong process share effective user id one user steal port another user special magic somewhat compensate missing soexclbindsoexclusiveaddruse flag additionally kernel performs special magic soreuseport socket nt found operating system udp socket try distribute datagrams evenly tcp listening socket try distribute incoming connect request accepted calling accept evenly across socket share address port combination thus application easily open port multiple child process use soreuseport get inexpensive load balancing android even though whole android system somewhat different linux distribution core work slightly modified linux kernel thus everything applies linux apply android well window window know soreuseaddr option soreuseport setting soreuseaddr socket window behaves like setting soreuseport soreuseaddr socket bsd one exception socket soreuseaddr always bind exactly source address port already bound socket even socket option set bound behavior somewhat dangerous allows application steal connected port another application needle say major security implication microsoft realized might problem thus added another socket option soexclusiveaddruse setting soexclusiveaddruse socket make sure binding succeeds combination source address port owned exclusively socket socket bind even soreuseaddr set even detail flag soreuseaddr soexclusiveaddruse work window influence bindingrebinding microsoft kindly provided table similar table near top reply visit page scroll bit actually three table first one show old behavior prior window second one behavior window third one show behavior change window later bind call made different user solaris solaris successor sunos sunos originally based fork bsd sunos later based fork however merge bsd system v xenix degree solaris also bsd fork rather early one result solaris know soreuseaddr soreuseport soreuseaddr behaves pretty much bsd far know way get behavior soreuseport solaris mean possible bind two socket exactly address port similar window solaris option give socket exclusive binding option named soexclbind option set socket prior binding setting soreuseaddr another socket effect two socket tested address conflict eg socketa bound wildcard address socketb soreuseaddr enabled bound nonwildcard address port socketa bind normally succeed unless socketa soexclbind enabled case fail regardless soreuseaddr flag socketb system case system listed wrote little test program use find system handle two option also think result wrong please first run program posting comment possibly making false claim code requires build bit posix api network part compiler actually compiler work well long offer inttypesh stdboolh eg gcc supported long offering full support program need run least one interface system local interface ip address assigned default route set us interface program gather ip address use second specific address test possible combination think tcp udp protocol normal socket listen server socket multicast socket soreuseaddr set socket soreuseport set socket address combination make wildcard specific address second specific address found primary interface multicast test print result nice table also work system nt know soreuseport case option simply tested program easily test soreuseaddr act socket timewait state tricky force keep socket state fortunately operating system seems simply behave like bsd time programmer simply ignore existence state code include answer size limit code would push reply limit
24,Lobsters,osdev,OS,Windows and Linux: A Tale of Two Kernels (2004),https://www.youtube.com/watch?v=HdV9QuvgS_w,window linux tale two kernel,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature window linux tale two kernel teched youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature window linux tale two kernel teched youtube
25,Lobsters,osdev,OS,The OS Classics,https://www.allthingsdistributed.com/2020/07/the-os-classics.html,o classic,berkeley unix nikhef unix kernel design book networking book tanenbaum collection true o book classic absolutely fascinating,day ago fortunate pick copy book major impact early career kernel engineer design implementation bsd unix operating system samuel j leffler marshall kirk mckusick michael j karels john quarterman first authoritative description berkeley unix design implementation book cover internal structure bsd system concept data structure algorithm used implementing system facility importantly written practitioner builder gave insight academic text book would never give day internship nikhef still using collection pdp one task get run lot late night head scratching got done eventually learn boot tape zen returned school decommission pdp convinced put old big cleaning closet upgrade power room went right back building bsd kernel expertise started late computer science worked hard catch getting hand dirty posted twitter found book many peer came list book also read era list book shared unix kernel design book networking book tanenbaum collection true o book classic absolutely fascinating classic list think let know
26,Lobsters,osdev,OS,More delays and motivation issues,http://ck-hack.blogspot.com/2020/08/more-delays-and-motivation-issues.html,delay motivation issue,,hi sorry nt gotten muqss ck release emailing check wellbeing crazy world appreciate concern apart family issue fine fair say motivation keeping linux kernel development flagging time current world situation helping hearing news extol virtue biggest release ever particularly aid situation massive drop new driver could understand usually mean yet rewrite major infrastructure within kernel quest make better personally nt think great thing debate best left elsewhere plan stay sync future kernel release sure motivated resume resyncing process biggest concern massive churn screwing something way leaf user code open security issue fatal data corruption stage nt careful enough protect happening reason often considered abandoning code entirely supportive individual stated find comfort relative stability continued utility muqss code increasingly volatile kernel churn world reassuring encouraging enough least plan stay sync time go feature get added scheduler nothing ordinary desktop mobile platform usage stage distribution tempted become dependent one feature nt develop muqss much incorporate version feature become redundant given completely different scheduler architecture muqss versus cf mean ca nt simply port code time write complete feature equivalent version far trivial accounting code completely different cgroup feature nt even implemented deadline scheduling available example appear future eventually become showstopper unless miracle happens make find motivation work death itcheers stay safe well ck
27,Lobsters,osdev,OS,Plan 9 from Bell Labs (1995),https://css.csail.mit.edu/6.824/2014/papers/plan9.pdf,plan bell lab,,obj length filter flatedecode stream w x u z mm endstream endobj obj procset pdf text font r r r r r extgstate r endobj obj length filter flatedecode stream p kz ǝ b v z z b p v ï b endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream k f zt ҩ v r r ye p endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream f ɱh ad zj v endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream p w ju nri blvoj e aw w p u endstream endobj obj procset pdf text font r r r r r extgstate r endobj obj length filter flatedecode stream
28,Lobsters,osdev,OS,REMS - Rigorous Engineering of Mainstream Systems,https://www.cl.cam.ac.uk/~pes20/rems/,rem rigorous engineering mainstream system,,apps o api wire interface o compiler hardware
29,Lobsters,osdev,OS,"GSoC Reports: Benchmarking NetBSD, second evaluation report",http://blog.netbsd.org/tnf/entry/gsoc_reports_benchmarking_netbsd_second,gsoc report benchmarking netbsd second evaluation report,gsoc report benchmarking netbsd first evaluation report phoronix test suite pt anita phoromatic phoromatic clientserver architecture phoromatic setup phoromatic usage phoromatic client phoromatic testschedules anita installation phoromaticanita integration phoromaticanitaintegrationsh http http dhcpcd prerun script future plan comment,august posted leonardo taccari report written apurva nandan part google summer code blog post continuation gsoc report benchmarking netbsd first evaluation report blog describes progress second phase gsoc netbsd foundation phase worked automation regression suite made using phoronix test suite pt integration anita automation framework consists two component phoromatic server provided phoronix test suite pkgsrc anita python tool automating netbsd installation phoromatic phoromatic remote management system phoronix test suite allows automatic scheduling test remote installation new test management multiple test system web interface test scheduled run routine basis across multiple test system automatically phoromatic also interface revision control system offer support issuing new test contextbasis whenever git commit pushed test result available web interface phoromatic clientserver architecture phoromatic server relies upon phphhvm builtin web server process ptshosted websocket server web server process handle web ui responsibility phoromatic server phoromatic client testing machine installed pt connect phoromatic web server http port server phoromatic setup start phoromatic server phoromatic server http port web server socket port need set phoronixtestsuiteuserconfigxml shown server remoteaccessport remoteaccessport password password websocketport websocketport advertiseservicezeroconf true advertiseservicezeroconf advertiseserviceopenbenchmarkrelay true advertiseserviceopenbenchmarkrelay phoromaticstorage phoronixtestsuitephoromatic phoromaticstorage server phoromatic usage start phoromatic web server controlling local phoronix test suite client system phoronixtestsuite startphoromaticserver phoromatic web server hosted require local account creation server phoromatic client phoromatic client used connecting phoromatic server facilitate automatic running test client phoromatic client created connected server using following command phoronixtestsuite phoromaticconnect serverip serverhttpportaccountid phoromatic server interacts phoromatic client http port specified phoronixtestsuiteuserconfigxml phoromatic testschedules test schedule used facilitate automatically running set test suite either routine timed basis whenever triggered external script process eg gitvcs commit manually triggered etc phoromatic provides option preinstall prerun postinstall postrun shell script executed phoromatic client testschedules configured run test specific system anita anita tool automated testing netbsd operating system using anita download netbsd distribution install virtual machine fully automated fashion anita written python us pexpect module screen scrape sysinst output emulated serial console script installation procedure installation anita installed netbsd linux macos system using following pip install pexpect git clone http python setuppy install phoromaticanita integration would like describe workflow briefly testschedule created phoromatic server meant run test host machine contains phoromaticanitaintegrationsh prerun script script performs following creates mountable disk image executable script setting phoronix test suite phoromatic client creation benchmarking vm system invokes anita appropriate commandline option configuration network setup mount image run configuration script vm configuration script performs hostname change dhcp setup nfs setup pkgpath setup pt installation configuration connecting phoromatic server network bridge benchmarking vm system get connected phoromatic server phoromatic server identifies benchmarking vm system ip address hostname mac address identification phoromatic initiate pending test vm testprofiles downloaded go vm executed maintains history test result data point noted used local pkgpath nfs server setup pt available wip recompiling would wastage time later planned use binary shard joyent http updated pt get upstreamed host machine need onetime manual setup like installation qemu anita pexpect term cv etc initial user registration phoromatic server phoromatic port setup network bridge setup apart rest framework require user supervision vm configuration script following script used prerun script testschedules invoking anita setting vms http networking setup bridged networking mode configuration qemu used anita multiple vms able accommodate single bridge created host machine onetime setup using dhcpcd without complicated host forwarding setup phoromatic server requires http port forwarding order enable bridged networking qemu guest must first create configure bridge interface host ifconfig create next must specify newlycreated bridge interface etcqemubridgeconf sudo mkdir etcqemu sudo touch etcqemubridgeconf sudo chmod etcqemubridgeconf sudo sh c echo allow etcqemubridgeconf finally order nonprivileged process able invoke qemubridgehelper must set setuid bit utility sudo chmod u usrlocallibexecqemubridgehelper detail bridged mode networking setup qemu please refer following guide reproducing framework reproduce framework need phoronix test suite qemu anita pexpect cv xterm makefs installed host machine example netbsd pkgadd qemu pkgadd cd pkgsrcwipphoronixtestsuite make install stepbystep process get framework installing pt including onetime manual setup summarized follows control configuration phoromatic server done via webbased interface phoromatic server active configure port phoromatic server web socket described start phoromatic server using command stated create user account phoromatic server using web interface gui disable client system approval new system addition setting menu web interface connect host machine phoromatic client phoromatic server using command stated create testschedule host machine prerun script specified testprofile execute testschedule assign timedschedule watch running new vm system latest netbsdcurrent binary package created identified phoromatic server automatically need specify benchmarking testprofiles need run vm system testschedules section taken care phoromatic result history also viewed phoromatic web interface look video get clearer picture setup framework video future plan regression suite complete final task deploying benchmarknetbsdorg upstreaming wip phoronix test suite done final phase gsoc project want thank mentor constant support comment
30,Lobsters,osdev,OS,12 Principles for a Diverging Desktop Future,https://www.divergent-desktop.org/blog/2020/08/10/principles-overview/,principle diverging desktop future,arcan project professional first diversify experience apppocalypse emphasis extreme make state mobile state left behind privacy fight back poison well single user u unics silent default surprise interactive first breath everything immediately observable defer composition simplicity systemic backstory motivation video principle professional first principle diversify experience principle apppocalypse emphasis extreme principle make state mobile principle state left behind principle privacy fight back poison well principle single user u unics principle silent default surprise principle interactive first breath principle defer composition principle simplicity systemic,post lay overview guiding principle driving much work behind main part arcan project unaware arcan presented something uncommon desktop engine grand claim modifying understanding entirety desktop patching script level easy rework current popular abstraction adjust division labour principle link together tell large chunk vision divergent desktop story slowly getting shape many year greatly influenced number publicly documented experiment well seminal work von neumann computer brain norbert weiner human use human being ian hacking representing intervening jaron lanier trilogy future may hold store well nowadays le digestible amalgamation fravia search lore overview quite long read right full version principle added individual article time content section come bit dense hard ingest fret teaser appetiser full course meal better pacing technical depth sake convenience navigational link individual section professional first diversify experience apppocalypse emphasis extreme make state mobile state left behind privacy fight back poison well single user u unics silent default surprise interactive first breath everything immediately observable defer composition simplicity systemic backstory motivation arcan project core rooted assumption desktop way interfacing computing inching towards last breath rewriting jsonifying stdout provide much air final gasp upside may well turn something positive provides opportunity radical simplification restructuring myriad technology make rube goldbergian contraption modern desktop first nonacademic presentation video arcan project terse technicaloverview style little term motivation actual intended direction reason wanted keep attention focus rather ever used carefully note try fill cryptic blank space predicated belief honest dissemination done first demonstrating feasibility soundness fundamental tech isolation flowery vision soapboxing sociopolitical annotation best left deferred separate stage underlying tech sufficiently coherent robust however vacuous perspective technology living life disjunct social consequence application goto default mental model fledgling utterance much fool errand thinking never viewed optic abstract larger social organism basic motivation follows humble need want want expand agency security safety quality experience regard thing computing touch largest obstacle expansion right chaos complexity userspace dependency creep towards online servicespace peering eye service space us study repackage naive interpretation service space used mutate social critical infrastructure towards something wholly frightening personal level coded experimented virtually everything computing since day venerable divide two flip virus antiviruses drm protection crack database engine operating system kernel cheat bot anticheats emulator interpreter dance jitterbug demo game parser format remember exploit well mitigation worked academia government militaryindustrial well fledgling startup got scar thesis prove left observe list grown rather short year time evolution capability device exceeded expectactions nothing short spectacular hardware software lockout plagued early day relatively speaking minor access capable device deep technical information become absolutely stellar overwhelmingly day begging company scrap hardware scraping public library dumpster slice information quidproquo trading hacker secret basic software building block warez mostly faint memory hopefully remain spite troubling sign ahead counterweight positive development thing become complex degree thorough deep understanding precondition responsible control agency hard thing come even harder thing fight add dependency layer get market cash build community become figurehead sell community pas plate forget like comment subscribe oh message sponsored yet another pointless vpn provider trust somehow protects network trust word tiny tech snowball continues merry way mountain towards village matter outcome thing immediate todo term creative thing alone hour left live regardless many turn pleasant mental image fall back time gloom doom dedication project ten thousand invested hour described labour love well colloquial fucking insane though personally view act necessity many time journey felt like digging prison using collarbone fallen mate makeshift shovel fuelled vapour faint hope relatively free world waiting within reach proverbial rose smell hallucinogenic side effect invisible gas deposit old canary stumbled upon motivation evolutionary struggle freedom rest come bitter anger even resentment towards dominant status quo trajectory computing interface whole moving along pandering trivial attention grabbing nonsense engagement rather crafting sharper tool claw delicious problem future hold store principle professional first traditional desktop compromise interest recent bias towards appealing supposed mainstream audience made sense economical growth standpoint within kinetics peculiar brand capitalism time previous demographic already hooked computing drug user thing nowadays loadbearing mainstream audience opting rapid rate good reason smartphones tablet digital assistant gaming console chopping generic desktop controlled corporate thiefdoms many past compromise made order accomodate wider le experienced audience also unnecessarily restricting agency precision efficiency professional posse stronger mental model computing vested interest advancement make little sense try convince grandmother need free opensource desktop farce bordering selfharm still use scenario part requirement specification future aside professional meant vain appeal exclusionary hacker elitism number within line dip towards past biker freedom seeker radio amateur circuit bender bb operator professional acknowledging large number million key individual wide gamut profession currenty wasting much time talent thanks misguided attempt software ergonomics try make due web give revisit past workflow put professional first principle diversify experience long standing maxim computing mechanism policy user experience perspective rooted assumption user willing capable leveraging mechanism configure set policy largely failed desktop sense much stagnated commandline processing one many possible reason one likely culprit high level marketing gospel work rhetoric strongly favour brand identity preset strict policy aesthetic desktop level beyond implementation allows little accessible layering opaqueness ui element button set action idea working represents turn problem personal expectation work happens clash dominant actor voicing complaint often met dismissive arrogant attitude akin get program marginalising disabled user whether disability lack mobility reduced cognitive function complex threat model sense alternate take tool allow pardon language get shit done remedy improve accessibility make every architected layer userscriptable access fine grained mechanism chose mechanism people principle apppocalypse emphasis extreme smartphone absorbing gamut feature feature phone phase got thing right one thing notion app simple small tool solving one specific task time apps failed play well others lack interoperability effect hard recombine order provide new functionality lack composability broad stroke ecosystem devolved providing user service rather way around desktop side user interface mainly come three flavour first one software sealed world hard hitting complex tool best modelled machine inside machine vm name smell rancid web browser one front runner practically unavoidable lest willing tolerate ascetic lifestyle second one extreme complexity spectrum relatively modest pipe filter text oriented procesing tool like awk grep well interactive textural user interface tuis subset commandline interface cli much limited form legacy reasoning term serial line character graphic terminal last flavour cover noman land everything multimillion line ui toolkits come much complexity vms much barren legacy terminal hard border rough category browser lift toolkits o integration reimplements much different verbiage tuis lift widgetry literally cursesed abstraction search shelter blast past terminal protocol improve data exchange vm rediscover desktop app making textdominant command line tool capable processing providing medium rich data stream release legacy terminal protocol emulator leave toolkits rot peace principle make state mobile day stretching faded glory mainly using mainframe least peak rosy year java sun one dominant corporate fever dream default virtualised desktop system administrator salivated prospect reinstall someone eraadjusted equivalent internet explorer toolbar farm bonzibuddy ridden workstation hoped never listen wailing tune desktop longer feeling right av cleanup dreamt explain data loss work commited shared state pool almighty red reset button irreversibly pushed vengeance number thing changed least ability store transfer compress data high efficiency low latency clouded internet well personal area network thus replicated base install user computing task state mobile make sense near future tooling define deploy base plentiful make thing slightly easier dip thorough definition constitutes computing state instead stop vague contributed program execution emphasise simply data state largely immobile problem shared past various effort serialisation tried work recent parcelables android little avail simply defining mechanism enough verification enforcement need start hard impossible catch application need expose noninteractive runtime seed delta state storewiperestore control get periodically verified validated failure comply mean removal privilege repeated failure mean revocation trust principle state left behind state mobility principle improve user agency another side device state management local persistent ephemeral storage anyone experimenting delicious pairing data recovery secondhand ebay device forensics quickly learn least two valuable lesson first lesson rare correctly applied full disk encryption practice actually even light called trusted enclave double digit amount standard reduce encrypt wipe second lesson much sensitive state manages survive beyond context intended use eu amicable priniciples encoded right forgotten technical side correlated mandate default forget long punished keeping detailed track innocuous deed system err side remembrance equally disturbing runtime state long living process tie online world slowly accumulating sensitive credential privacy compromising nugget scattered ready accidentally exposed crash dump swap file forgotten interprocess communication lane ready intentionally picked offensively minded creature dare look beyond remote code execution persistent state store assumed default rather require interactiveuserinitiated automation lifespace coupled namespace principle privacy fight back poison well idea software depend acting best interest completely defunct made manifest metamorphosis web browser nowadays much darker sinister thing browse behemoth managed neatly attach man middle nearly every relevant data flow rest digital society government opt deleting past sin inactivating account best counter productive act teenage rebellion worst actually provide another strong data point act easy sharp edge use repeatedly repackaged nice clean bundle data bundle information parasite digest daily bread reinject service consumption part feedback loop act core manipulation machinery stage digital age equivalent old social construct white lie sorely needed en masse web scale adapt gradually diluting truth value digitally recorded past future point price actually knowing breakfast level rigourous science application get disturb asking permission steal data sensor always get kind data decide dynamically sensor actually sampled entail access camera automatically imply sampling actual device mean routed video stream user decide stream cover principle single user u unics legacy piece chain going boot actually usable desktop one take biggest toll term wasted opportunity inane complexity multiuser outer default slight hint irony key simplification good ol unix compared even older multics found stripping away much complex device sharing semantics actual role user account world computing device come cheap greatly outnumber u safety system management compartment flesh bone actually using sharing device login screen getty worse display manager level may seem harmless first glance unravel untangle much decision poison rest system design becomes clearer legacy u build pyramid upside think rational thing anything authenticate device dynamic user allow safe ephemeral secure sharing smallest innermost compartment interactively defined aggregation thereof compartment window desktop principle silent default surprise one seminal targeted attack time desktop security lost adorable innocence autoruninf story go unsuspecting target insert floppy diskette cdrom usbstick modernday equivalent surreptitious payload take advantage automated system response order gain persistance exfiltrate tamper data attack vector albeit crude brought company well family military facility alike many subtle subtle variation tactic prepackaged cute name usb switchblade rubberducky core matter opaque unpredictable optout nature automated system response user initiated action matter plugging usb device network cable downloading file see fire feel burn thought exercise take sleeping laptop lid closed suspended hopefully idle explain even high level thing try communicate outside next open lid obscuring view even mean find literal pandora box lap make assumption user intention name simplicity user friendliness provide easy access control trivial mean defining automation limited scope optin user initated principle interactive first breath computer hardware dynamic beast barring example remain none input output storage device disposal actually assumed necessary present even usable system init longer strong reason justification deferring user interface launch disk mounted checked error network interface configured heck even bios config screen animation drop shadow cursor day saying thing belong boot animation splash screen sense nothing illusionist cheap distract fact could actual thing right instead later previous barrier simply booting user interface immediately gone forcing user stare splash screen stream fast scrolling text init system mutated service manager real interface could start quite simply act negligence desktop server bootstrapped one boot user interface let dynamic system service control become part user interface activation discovery even software developer slowly steadily realising hardware lying u whole time revelation come partly thanks steady stream publicised timing channel related attack even though evidence writing long time calm tempest speak guess taken time would blame combination domaininherited opaqueness individual willingness assume whatever layer beneath one currently working fine little need scrutiny actually ongoing process collectively happy pile layer layer abstraction little condition regulate interaction layer mandate exposing alternate view would provide insight internal process time lead scattered mess come tooling tracing debugging across layer able immediately freeze study state circuitry buzzing beneath u well reach still must evolve beyond piping stderr file whenever possible strip away unnecessary layer runtime abstraction virtualisation whenever impossible inadvisable forcilby expose control monitoring observing tampering data flow across layer principle defer composition perspective user interface composition act stitching multiple interactive data source together larger ui quilt transformation expensive lossy even impossible reverse much akin separating mixed colour primary component instance embedded video player website somewhere simply ripped browser window put separate window without browser explicity implementing feature playback control button sample player similarly separated actual video answer premature composition instead delegating task proper authority window manager policy choosing browser took upon force composition embedded video player took upon force composition ad nauseam happen without justification system interface browser work provide mean anything refined fix start premature composition reduces option data cost performance force browser reimplement basic window management control input device bending clash one outside every issue tracker popular user facing tool complied request adding support tab terminal emulator much thing cli shell possibly text editor running inside vimcarcerated speak popup suggested text completion emulates window using text rather actually real one defer window management outermost layer window manager whenever possible nest composition strive retain native data representation whenever unreasonable even impossible mandate userinitiated decomposition control principle simplicity systemic rhetorical scheme work surprisingly often computing rallying cry making thing simple ever chose complexity simplicity right ignoring bit complicated draft defend philosophically coherent definition simplicity ontic epistemic important aspect possible local component perfect simple solution system complex one vice versa problem becomes le muddled much contrast variation developer idea something develop would used people hand harsh realisation observing actually get put good use story follows practice eventually get pressured packaged preset product enterprising competitor point practice omitting context history quip needlessly complex thing something like need therefore bit contribute nothing infact useless bloat sure follow simplicity narcissism apply basic group think come rather naturally larger engineering endeavour lax incentive structure get simplicity thiefdoms sundering global effort takeaway need circumference vested interest relevant stakeholds successfully find simpler solution given problem avoid simpler simple possible one hard scope something dynamic broad across hip desktop thought exercise get answer real foundation consider decomposition desktop audio server video server inputsensor server metadata manager reasonable breakdown thing different component developed separate thing separate team mechanism tie together end product service base design choice score complexity angle system deliver appearance base component
31,Lobsters,osdev,OS,Atari ST Free Operating Systems (2018),https://www.youtube.com/watch?v=28ieOWEQXhU,atari st free operating system,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature atari st free operating system vincent rivière youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature atari st free operating system vincent rivière youtube
32,Lobsters,osdev,OS,awslabs/ktf,https://github.com/awslabs/ktf,awslabsktf,ktf kernel test framework feature overview build instruction requirement kernel image build example used qemu bootable iso generation example boot ktf guest xen baremetal machine fedora running kernel qemu kvm xen guest style http clangllvmorgdocsclangformathtml http githubcomdoozyxclangformatlintaction http githubcommarketplaceactionsclangformatlint running clangformat workflow locally build container patch file credit attribution http xenbitsxenprojectorgdocsxtf security contributing license,ktf kernel test framework ktf small simple o kernel enables writing lowlevel software test supported machine architecture currently feature overview machine architecture baking smp support basic percpu page basic physical memory management pmm virtual memory management vmm basic slab allocator local apic support initial mp table parsing basic acpi table parsing simple uart driver simple vga driver feature making check issue build instruction requirement may need install following unless already bootloader tool package eg apt install iso generation tool xorriso package eg apt install xorriso kernel image build example used qemu make make docker bootable iso generation example boot ktf guest xen baremetal machine make bootiso make docker bootiso make command generates multibootcompatible elf file directly boot qemu make bootiso command take place grubboot directory hierarchy generates bootiso grub using grubbootgrubgrubcfg default grub config fedora ktf build run fedora need tweak command create makeconflocal file following content tested fedora dist shell grep name etcosrelease cut ifeq dist fedora grubfile grubmkimage grubmodules normal qemubin qemukvm endif running kernel qemu kvm main makefile several target make booting ktf qemu easier makefile detects host system linux enables kvm support default parameter qemu found makefile qemuparams variable booting run make boot debugging iso run make bootdebug debugging kernel image run make debug xen guest use following guest domain config example booting ktf xen name builder hvm serial file tmpkernellog pty disk homeuserbootiso hdc cdrom onreboot destroy need generate bootable iso style style project defined clangformat file main directory repository use following command apply style automatically file modify clangformat stylefile werror modifiedfile information refer http clangllvmorgdocsclangformathtml project us http githubcomdoozyxclangformatlintaction action workflow detect style mismatch automatically information refer http githubcommarketplaceactionsclangformatlint running clangformat workflow locally build clangformatlint container docker build clangformatlint githubcomdoozyxclangformatlintaction done patch file ext c h docker run rm workdir src v pwd src clangformatlint clangformatexecutable r exclude git find name ext print patch done credit attribution part ktf project inspired based xtf project developed andrew cooper citrix http xenbitsxenprojectorgdocsxtf security see contributing information license project licensed bsd license
33,Lobsters,osdev,OS,9FRONT DOCS,http://docs.a-b.xyz/index.html,doc,home sitemap doc achtung technical detail springboard howto todo reading http docsabxyz contributing srht discount markdown warning,home sitemap doc doc repository live document covering theory usage development achtung workinprogress prototype see technical detail springboard howto todo reading document update periodically fetched backend render document tree make available reading via http plan run tcp docsabxyz ndocs http visit docsabxyz web browser contributing document source repository currently hosted available browsing get locally reading gitclone http reading writing gitclone ssh git everyone invited get write access asking kvik irc grid kvik abxyz otherwise may submit patch contribution mechanism srht sending mail mailing list communicating favorite editor contributed document mostly expected markdownformatted file denoted md file extension formatting syntax used markdown processor discount used backend documented manual page markdown additionally plain text file html document may entered repository file extension txt shtml respectively copied verbatim rendered document tree warning one amd atxt ashtml may exist time otherwise document generation fail problem current implementation may fixed future image static content best hosted outside repository dedicated upload stable link space may provided later
34,Lobsters,osdev,OS,Linux 5.8 (Linux Kernel Newbies changelog),https://kernelnewbies.org/Linux_5.8,linux linux kernel newbie changelog,martiraudsepp,kernelnewbies last edited martiraudsepp tell others page
35,Lobsters,osdev,OS,Haiku July 2020 Activity Report,https://www.haiku-os.org/blog/dogcow/2020-08-01_july_2020_activity_report/,haiku july activity report,july activity report application appserver arm bootloader documentation driver graphic sound filesystems networking wifi preference printing user interface thank,july activity reportwelcome july activity report haiku project report cover added set target parent folder option textsearch application making easy move one directory uphumdinger fixed bug showimage application timer responds properly user inputandrew lindesay added support haikudepot server repo metadata artificially matched multiple repos improvement also made haikudepot logging mechanism declutter code enable better systematic loggingpulkomandy fixed bug allowing system better distinguish video ogg file audioappserverextra bview drawing mode required webkit canvas support implemented kapixarm continued work arm architecture specifically efi bootloader efi cpu code refactored architecturespecific allowing cpu init code properly called progressing efi bootloader building added support kernel efi bootloader heinrich schuchardt made debugging improvement efi bootloader allowing efimap file available linkingdocumentationmáximo castañeda greatly improved javasript cs quicktour possible show proper slideshow intended original quicktour package result much nicer experience piece documentation directed especially new usersdriversmmlr reworked pci base address register handling moving entirety getbarinfo applying pci address size previously applied ram address fix also made xhci hda pchthermal driver ensure prefetchable bar properly identified freebsd network compatibility layer updated handle memory bar plus apply empty size type check io port done imported significant number pci id radeonhd driver hawaii vega arctic island polaris volcanic island gpussoundmmlr committed numerous improvement intel hda audio driver mmlr also fixed bug multiaudio resolved number situation user experienced audio certain amount time passed boot multi audio driver affected notably hdafilesystemscruxbox added code allowing xfs read short form directory laid groundwork begin reading block directoriessuhel mehta implemented opendir readdir function committed change enabling directoryiterator successfully read directoriesbrjhaiku added partial support btrfswritestatnetworkingwaddlesplash cleaned code related dns resolverleorize contributed improvement filerequest datarequest gopherrequest httprequest apis improvement result accurate progress report well performance increaseswifiwaddlesplash made several improvement wifi longer cause kdlsatheroswifi build option changed match default freebsd option supported atheros card support haiku previously fixed bug caused mouse image input preference drawn incorrectlyjadedtuna fixed bug screen preference related brightness settingsoishika pradhan fixed default window size keymap preference usable lowresolution displaysprintingpulkomandy made improvement ipp code handling url standard fashion removing custom implementation well better handling printer include header repliesuser interfacewaddlesplash made improvement various ui component improve look highdpi system alert icon balert high resolution display use fractional scalingmenus look better fontscaled systemsinsets look better highdpibuttons proportional highdpi system though yet perfectimprovements bscrollbar bscrollview result application properly scaled scrollbars highdpi systemstracker count view width height font size properly proportional container windowspacing element tracker list view properly spaced fontscaled added gradient fill rule support bpicture well flatten unflatten method bgradientpulkomandy unified setting menu shortcut key comma builtin apps bringing compliance existing human interface guidelinesthank thank reading thanks developer contributor dedicate time energy projectplease feel free report omission error work like see featured next month activity report via email cwr sdf dot org via irc dogcow
36,Lobsters,osdev,OS,What not where: Why a blue sky OS?,https://www.youtube.com/watch?v=bSNda9EzNOI,blue sky o,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature buzzconf peter alvaro blue sky o youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature buzzconf peter alvaro blue sky o youtube
37,Lobsters,osdev,OS,The object-oriented Amiga Exec (1991),http://web.archive.org/web/20050528204702/http://www.cunningham-lee.com/misc/amiga_exec.html,objectoriented amiga exec,,objectoriented amiga exec close look objectoriented core amiga operating system tim holloway objectoriented computer buzzword early latest holy grail let programmer leap tall building single bound cure world hunger produce line fully debugged code day well maybe invented one premier objectoriented programming language c unable get release within year predicted release date nevertheless question oop good thing producer operating system furiously recoding product objectoriented system generally using c yet one objectoriented operating system widespread use since run commodore amiga although ironically written oop language amiga exec oops design amiga operating system sometimes incorrectly referred amigados actually amiga operating system three major component exec multitasking kernel amigados proper provides highlevel file system command line interface intuition basis graphical user interface gui discussing amiga exec three objectoriented nost comparable cprogramming language may seem surprising nt gui made oop famous well yes oop simply dealing data object correspond graphical image later although many amiga feature potentially unlimited number element absolute minimum ram amiga system software requires fraction many comparable system require even counting rom part ofthe operating system memory consumed although newer amigas support larger rom missing amiga operating system make small amiga manage provide multitasking windowing service le onehalf tc onefourth memory apple ibm computer need answer lie minimal redandancy examine internal structure many popular operating system discover o versus somewhat monolithic block stuff core operating system additional voodoo acting device driver like application code uneasy truce ever let meet even though operating system may composed many component appearance application programmer still essentially rather mysterious edifice beyond selected portion application software may go amiga operating system different relatively part totally opaque fact later revision operating system trend open internals application use even surprising considering unlike macintosh amiga run application nonprivileged state magic presentday operating system operate operating system code magic spends time running privileged state inhibiting interrupt executing arcane instruction incomprehensible mere mortal application programmer otherwise thing completely outside scope application programming nt really true little operatingsystem code truly magic deal managing table list queue mundane task however since operatingsystem table list queue forth generally managed special routine run privileged noninterruptible memorymanaged otherwise arcane environment tends overlooked often possible take magical part code separate nonmagical part resulting set controlling routine switch mode lot datahandling routine look suspiciously similar situation mean first exists possibility generalpurpose version routine created replace similarbutnotidentical function second since routine longer magic accessible application program well reducing overall size complexity say nothing time saved using predebugged code using generalpurpose code critical operatingsystem function might seem like heresy nt generalpurpose efficient mutually exclusive answer appears accurately generalpurpose efficient perhaps generalpurpose enough usually waste time generalpurpose code testing branching handle variation data structure process oop come answer lie principle inheritance arranging system data structure much system code traditional system placing related data item common sequence gain two advantage reduction amount specialcase processing offensive creation hierarchy data object class side effect system becomes easier understand fewer unique function inside view exec mentioned earlier nucleus kernel amiga operating system realized manner exec consists collection increasingly complex object class seen figure new exec object class defined based simpler class contains data object simpler class also usually valid operation defined class operation pertaining simpler class well known function inheritance figure nucleus amiga operating system consists collection increasingly complex object class exec heavy reliance inheritance make compact contain separate set routine manipulate task io device intertask message instead contains basic routine handle collection object task object device object whatever add function additional support required contrast many operating system contain collection task routine including required manage task table collection device routine including required manage device table forth many way represent collection data internally advantage disadvantage exec based doubly linked list list element allocated dynamically anywhere ram convenient see section memory management therefore table fill hand access speed highly dependent number node list way reduce problem explain later amiga operating system distinguishes operating system provides support doubly linked list exec support two level list list minlists lattice c implementation add two similar standard exec list without automatic initialization used define item amiga system software initializes minlist anchor doubly linked list minnodes minnodes contain next previous minnode pointer minlist structure contains pair dummy minnodes simplify processing reducing specialcase logic required process item end list empty minlist always consists two minnodes dummy node front end minlist contained within minlist data structure dummy front node nextnode pointer point actual first node list previousnode pointer always null similar situation exists regard dummy end node since dummy front node previousnode pointer always null dummy end node nextnode pointer also always null possible save small amount memory making overlap sharing null pointer dummy minnodes add one complication last actual item list one null nextnode pointer honor belongs dummy node complete set function exists support insertion deletion minnodes either end point minlist using proper function therefore minlist used firstinfirstout fifo also known queue lastinfirstout lifo also known stack well generalpurpose list note nothing magical minlists minnodes function act although extensively used amiga operating system used freely application program friend member note c friend member function class defined c internal component unless otherwise specified protected casual access strong selling point make harder object innards corrupted easier locate responsible function make practical use alter information within class object therefore sort access mechanism required c provides two friend function like traditional c function except declared friend one class allowed directly access data stored within class class member function actually owned specific class therefore invisible extra parameter passed pointer class object acted exec designed used nonoop language thus exec function effect friend function include file made mt associate support c amiga generally define however better support exec capacity objectoriented system number member function also defined example virtually every object amiga sort list object member function named next matter matter linked matter name relative location object nextitem pointer thus always guaranteed get pointer next one list using next function list minlists list extended minlist made node node minnodes plus type field priority pointer node name cformat string figure show structure node node incorporates structure minnode thus automatically inherits property minlist form list subsequently list use minlist function list maintained fifo lifo like minlist however list also maintained priority sequence courtesy list friend function enqueue node list given name also possible search list firstnext node name useful exec locates number public object signal signal represented word containing pattern signal flag allocatable user reserved operating system task signal another task task signal wait state receiving task incoming signal information incoming signal bit logically ored anded recipient task pattern signal waiting nonzero result cause task become dispatchable extremely efficient way activate sleeping task done system level including interrupt routine denied many sophisticated system service message figure show message constructed node message extremely important operation amiga used pas information task task basis io request medium transfer intuition mouse window event unlike signal merely give indication message complex information piggybacked figure node located name arranged priority order node anchored list since node incorporates minnode inherits list property function figure amiga operating system us message pas information task task basis request medium transfer intuition mouse window event message incorporates node therefore inherits property function figure message transmitted message port contains list incoming message serviced priority order like message message port incorporate node therefore inherit property function node message extended node usually transmitted message port msgport another type node contains list incoming message serviced priority order see figure msgports private anonymous added system message port list frequently occur pair one since message serviced common forward reply msgport generally recycled discarded although possible bounce message whole series port several different way implement msgport common way supported special c class named stdport standard message port created initialized coding stdport listener new stdport hear stdport constructor take care detail standard msgport initialization memory allocated initialized signal acquired listening task wait using addport function msgport put system public msgport list found task wish send message exec designed objectoriented manner new operatingsystem function quite simple c reconstruction show following void addport msgport mport forbid disable taskswitching enqueue absexecbase portlist mport enable reenable taskswitching reconstruction another system function msgport findport const char portname return msgport absexecbase portlistfind portname findport illustrates another important design feature searched system list every time wanted access element list system performance would suffer instead convention search return object address thereafter object address used directly amiga use macintoshstyle handle cause object shift memory downside must never move remove object task may using library device ensure maintaining user count simple message port application either enforce loginlogout facility else require message sent oneshot basis ie findport putmsg task limited maximum distinct signal unlimited number msgports signal used one msgport keep intuition task limited finite number open window examine internal structure many popular operating system discover versus iorequests iorequests extended message include io control transfer information sent device basic set command read write control common iorequests given device additional extension added needed number specialpurpose device iorequest class derived device implementer liberty derive extension needed fairly common end something like following mydevicerequest based stdiorequest based iorequest based message based node based minnode level inheritance gain additional property function new code required support unique class object library another important type node library consists base structure preceded function vector followed optional private storage set basic function eg open close expunge common library beyond designer free add functionality unlike operating system amiga operating system use software interrupt illegal instruction trap provide operatingsystem service instead master library named execlibrary located rom kernel fundamental system function list primitive memory management function load open library library internal initialization open routine called defined immutable part operating system absolute memory location point exec library structure execbase data portion execbase contains fundamental exec structure including list definition system message port library device task interesting compare exec library dynamic link library used microsoft window dlls support set function provide additional service well intel subsequent chip support concept different level ring security nt hold requisite minimum security level request fail dll function dispatching cause securitylevel switching motorola equivalent module call facility however requires least microprocessor unit preferably paged memory management unit amigados run security level inherently available due fact amigados program run default user state whereas operating system run supervisor state required pro con approach since exec library essentially simple vector table overhead calling library function barely higher function resident calling program much le software interrupt instead shared system code hand carefully designed dll incurring small speed penalty immune damage program run amok note dlls extension microsoft operating system basic system function still softwareinterrupt driven hence logic kind library interface amiga library however provide single interface immune problem inherent software interrupt finite number never seems enough practical purpose library hand infinitely expandable straightforward task create new one indistinguishable builtin one even completely override builtin one inserting new library name higher priority system library list amiga operating system unusual nt partition memory application library concept extended form basis io device adding standard function device work via extended message called iorequests also extension extension stdiorequest well customized extension specific device device typically also posse one task io done asynchronously although mandatory another lessunderstood extension library called resource resource essentially act coordinator shared resource generally hardware different drive disk controller serial parallel io port whicb implemented chip task task structure yet another node one contains definition required make exec fully functional preemptive prioritydriven multitasking operating system task roughly equivalent thread extended task known process provides additional information permit use amigados function defined library named doslibrary chiefly thing unixlike io service program loading capability like exec task scheduler elaborate rumored lifted bodily ibm mainframe operating system dispatcher dynamically adjusts task priority based certain algorithm magic part operating system impressive doubtful singleuser operating system need matter stuck best turn still eats real memory exec give good performance simple timeslice dispatching algorithm complex custom algorithm attached straightforward manner required done safely releaseindependent manner amiga dispatcher function task list accessible via welldefined interface nothing basic design exec actually requires single cpu present system exec could implemented multiprocessor system access system list properly serialized amiga system contain present one put sleep boot time possibility semaphore originally serialization exec done either forbid function prevents task dispatched disable switch interrupt however serializes entire system serializing access specific resource semaphore better two kind semaphore exec signalsemaphore based minnode provides highperformance serialization restriction use semaphore based message system used general situation either type semaphore preferable cruder forbid permit disable enable function reduce amount multitasking done serialized resource interrupt interrupt data structure point interrupthandling code plus working storage might require allow one task handle interrupt event interrupt node exact handling interrupt varies depending type interrupt memory management amiga operating system unusual nt partition memory application even operating system instead maintains free memory list chunk free memory certain attribute request matched thus application run memory system run memory requirement juggle segment macintosh compact memory set lowlevel function used acquire free memory exec also provides set function manage memory within pool acquired application several advantage le overall memory fragmentation lower overhead since entire pool released unit instead piecemeal ability preallocate enough memory application lot dynamic memory usage systemmemoryinuse list application fails nt cleanup routine programmer neglect free acquired memory lost system rebooted exec memory management support bankswitched memory virtual memory memory allocated memfpublic attribute guaranteed always visible task interrupt routine system supervisor memory application stack allocated without flag guarantee minimum megabyte ram neither virtual memory switched memory card widespread use likely many application fail situation change component amiga operating system amigados intuition workbench system unique builtin animation routine ultimately depend service exec exec compact efficient flexible reliable expandable system ever worked easy work like bibliography commodore staff amiga rom kernel reference manual exec reading addisonwesley sassenrath carl guru guide commodore amiga meditation interrupt ukiah ca sassenrath research tim holloway president mt associate system software development firm jacksonville florida reached blx tholloway byte magazine january copyright mcgrawhill inc
38,Lobsters,osdev,OS,ToaruOS: A Hobby Operating System,http://toaruos.org/,toaruos hobby operating system,continue reading,since posted something lot happened nih project announced last blog post merged c library reached point run python gcc recently quake lot bug fixed new feature added toaruos version released today still lot thing finish porting new port look thinking might even try port qemu need glib toaruos continue reading
39,Lobsters,osdev,OS,Mezzano (Common Lisp OS) releases Demo 5,https://github.com/froggey/Mezzano,mezzano common lisp o release demo,mezzano operating system written common lisp prebuilt image github building source http githubcomfroggeymbuild major change since demo major change since demo major change since demo major change since demo additional information facebookcom http http commonswikimediaorgwikifile hypothymisazureakaengkrachanjpg http commonswikimediaorgwikifile mandarinpairjpg http http http dejavufontsorg http wwwicojamcom,mezzano operating system written common lisp prebuilt image demo release available github release designed run virtualbox though qemu also supported ram virtionet nic intel hda audio controller recommended building source see mbuild repo http githubcomfroggeymbuild help support follow development join mezzano irc channel freenode ircfreenodenet major change since demo usb stack fittestbits improved overall file system support fittestbits support implemented bruno cichon ebrasca modesetting display driver hardware accelerated support via qemu virgl device multicoresmp support improved atomic operation async apis waitforobjects dispatch thread pool networking improvement server support dhcp tcp retransmit source location tracked many kind definition weak hash table weak object cleanup object representation unifcation standardobjectstructureobject unboxed structure slot short float implemented using ieee half float unboxed unsignedbyte arithmetic stack overflow memory fault trapped recovered support building window major improvement clos mop conformance keymap picker bug fix performance improvement feature major change since demo support implemented bruno cichon ebrasca mcclim ported fittestbits quicklisp ported peter housel improved introspection tool disassemble ed implemented generational collection added garbage collector new ssabased compiler backend supporting unboxed value representation gray stream support overhauled major change since demo trentino medium player implemented eugene zaikonnikov improvement conformance stability performance clos implementation follows mop much closely traditional window management booting cdusb real hardware possible driver support intel hda audio device virtualbox guest mouse display integration major change since demo many improvement conformance stability performance editor greatly improved thanks burton samograd system function correctly computer ram allocator garbage collector make much better use available memory far fewer gc cycle occuring room print detailed information allocated object transparency premultiplied alpha support gui additional information hypothymis azurea kaeng krachan jj harrison facebookcom cc bysa http via wikimedia common http commonswikimediaorgwikifile hypothymisazureakaengkrachanjpg mandarin pair francis c franklin licensed cc bysa via wikimedia common http commonswikimediaorgwikifile mandarinpairjpg handsome andy morffew http cc http includes dejavu font http dejavufontsorg icon icojam http wwwicojamcom
40,Lobsters,osdev,OS,Running DOS Apps on Windows,https://gekk.info/articles/dosapps.html,running do apps window,running do apps window,ï running do apps window running do apps window
41,Lobsters,osdev,OS,M2OS: RTOS with simple tasking support for small microcontrollers,https://m2os.unican.es/,rtos simple tasking support small microcontrollers,realtime operating system multitasking small microcontrollers simple scheduling policy supported board arduino uno epiphany getting started rationale characteristic download install specific information news page r feed contact free software developed istr marte o mast,small realtime operating system allows running multitasking application small microcontrollers scarce memory resource implement simple scheduling policy based nonpreemptive oneshot task requires small memory footprint moreover scheduling policy stack area used task consequently system need allocate stack area large enough fit largest task stack integrated powerful ide gnat programming studio gps simplifies crossdevelopment process coding loading debugging written ada base simplified runtime system gnat ada compiler supported board arduino uno based microchip microcontrollerepiphany manycore mesh noc based arm microcontroller getting started order start working read information rationale characteristic follow install instructionsread specific information use targetbe uptodate visiting news page following r feed contact mario aldea rivas aldeam unicanes software engineering realtime group universidad de cantabria avda de los castro santander spain free software developed istr marte o realtime operating system embedded application follows minimal realtime subset mast opensource suite tool perform schedulability analysis realtime distributed system
42,Lobsters,osdev,OS,Ten Years of Window Systems - A Retrospective View (1985),http://www.chilton-computing.org.uk/inf/literature/books/wm/p004.htm,ten year window system retrospective view,ten year window system retrospective view warren teitelman introduction smalltalk dlisp interlispd tajo mesa development environment doc system cedar viewer cedar sunwindows sundew chapter discussion chairman george coulouris,ten year window system retrospective view warren teitelman introduction james gosling currently work sun reason wanting talk talking past james talking future connected eight window system user implementer building asked give historical view talk look window system ten year feature smalltalk dlisp interlisp interlispd tajo mesa development environment doc cedar viewer cedar sunwindows sundew system talk focus key idea came connected evolved firstly make disclaimer personal recollection bound mistake although spend time talking people telephone thing happen first system interest smalltalk xerox parc smalltalk meeting dan ingalls came good idea window smalltalk idea smalltalk window system propagated rapidly group xerox parc used others good idea environment smalltalk first real window system used overlapping window early system could interact window top like desktop simplifies window system many people felt disadvantageous subsequently corrected later version smalltalk first system use cut paste modeless editor modeless editing originally introduced gypsy text editor parc gypsy full window system bravo first display editor exposure parc fancy modal text format editor text insertion mode command mode easy forget insertion mode insert command text conversely delete document accidentally command mode cut paste eliminated mode anything typed text directed insertion point moved mouse insertion form pasting cutting form moving two simple command form basic model attractive laurel message system included text editor allowed two way operating modal modeless gradually user moved modeless operation developed alto machine kbytes memory lot concern went fitting system onto small machine small virtual address space proved good prototyping designed dorado mind real system large virtual memory dynamic storage garbage collection ethernet communication slide small talk system showed early picture nut bolt figure clock system system shown maturing clock game appear multiplane window popup menu figure small talk browser figure figure smalltalk language method submethods inheritance subclassing something intended interlisp cedar never got round dlisp wrote dlisp first presented mit system hybrid implementation involving alto maxc lisp part system communicated server running alto handled communication screen server could thing put rectangular area screen knowledge window window information lisp communication alto lisp packet ethernet idea using architecture belongs bob sproull system worked amazingly well although user interface tailored limitation machine example could drag image could cursor changed response moving area user interface concerned timeout special character input stream signalled mouse event special event activity system completed heavily used provided starting point interlispd editing paradigm cutandpaste interface awkward menudriven editor allowed textual editing knowledge list structure system builtin document class text desktop window canvas predefined class could extended key idea system described partially obscured window treated way window top example character could typed system provides first support multiple font smalltalk used single font window dlisp defined descriptively rather procedurally lispish idea program could also pas set specification put front existing specification made easy user tailor system involved editing data structure program program could also search specification list see particular specification present idea catch widely however system provided support multiple view ie recursive window example morton salt box label product label picture picture etc explicit notion display context positioned mouse window scrolled occurrence window screen appropriate offset found scrolled idea transformation scaling represented data structure thought yet various scheme handling complexity display window going grey fading away touched period time arrangement related window desktop latter scheme required tool navigate around desktop later idea icon much better solution slide system showed standard typescript interacting system different font clock etc menu menu rather stack menu error occurrence appropriate menu come showing example call stack mail system first time integrated graphic environment smalltalk system single address space system problem referring data structure another address space arise dlisp notion command referring current window currently active window distinguishing pattern name stripe interlispd interlispd system implemented dorado initially included dlisp dlisp code eventually disappeared interlispd also run dandelion interlispd real system user influenced smalltalk objectoriented system class object could displayed user could add object initially multiple process monitor although could switch task via caller callee relationship later result influence cedartajo multiple process monitor added involved finding fixing place code system accessed global resource preemptive scheduling system yet retained cached window added initially speeding performance example menu later retained window found useful hiding programmer fact window top text editor system modeless also allowed mixture markup bitmap editor style interface text tajo mesa development environment time parc working cedar work going system development division xerox developing graphicallyoriented mesa development system called tajo tajo begun used cedar implementers cedar took mesa added storage management atom list system development division unwilling incorporate change tajo multiple process integrated interactive program development environment scroll bar subwindows popup menu etc used button scheme scrolling mouse key idea tajo described tajo first system use notion two state window open closed iconic initially closed window represented small labelled rectangle right screen difficult determine content pictorial representation used shortly afterwards interesting thing tajo control structure used traditional approach program belief control environment control interaction user order user input requested sequentially driven convenience implementer tool user tajo approach program pass procedure specifies window manager event event interest procedure called window manager control specified event occurs user control tajo interacts user user indicates tajo notifies appropriate tool user action intended taken place tool obtains parameter mean systemmanaged form user could walk way tool leave thing window manager program extracting data problem program written way say turn program inside compared conventional structure sun addressing issue programming style slide tajo showed example control panel showing rudimentary icon button used activate process application program worry placement called mail system tajo fairly widely used development environment star still use tajo first system use static menu found popup menu good new user interface easy learn necessarily good experienced user user wait menu come scan visually relevant entry static menu already user mousebutton ahead reflexive way tajo user could also edit wanted static menu system would search popup menu string call associated procedure tajo influenced viewer sunwindows doc system cedar doc developed serious performance problem completed influenced dlisp first system use cedar graphic model prerunner adobe imaging model data structure scaling transformation etc information system idea dlisp using data description window document seemed preference procedural window interface time key idea system follows system provided support scaling rotation via cedar graphic retained window doc objectoriented support subclassing separation window object displayed window case viewer idea document document class string file window drawer stream viewboxes home target document document procedure presenting viewbox notion view box existing document viewing document potential recursion viewer cedar current window system cedar based viewer window package design implementation began system first user may influence seen microsoft mswindows decided sacrifice flexibility performance robustness consequently viewer le functionality better performance doc came quickly worked well viewer notificationoriented system result influence tajo also objectoriented number object system whiteboards system spatial way presenting object influenced smalltalk browser neither cedar viewer support subclassing result necessary duplicate edit code provide object may slightly different existing object subclassing supposed provided get implemented key idea viewer detailed first tiling window manager know make faster mouse hit detection originally environment overlapping window found preferred using tiling window manager conflicting view however mouse ahead discipline must involved predictability important user point view cedar went far allowing overlapping window thus also allowing popup menu think good idea allow transitory window overlapping mode sun allows overlapping window surprising many people take trouble tile another novel idea tip terminal interface package provides separation function system particular user interface used invoke function changing data structure new interface obtained user tailor interface although sensible default provided fact user change thing make agreement interface le issue everyone want spend time tailoring system complaint unix software aged sufficiently sensible default provided flexibility system shown example event associated mouse button changed tip obtain new user interface idea retrofitted tajo planned james gosling new system sundew slide system show richer icon figure raise question able icon eg type delete etc builtin notion screen divided two column figure typical screen configuration showing use multiple font figure figure notion text organized tree structure enables user specify depth want go also allows node moved around example sophisticated tool icon editor user interface defined tip table figure scanned image clipped outline character defined spline reveals strength graphical underpinning system figure shortfall system support subclassing viewer specified via program data separate notion viewer object viewed figure figure figure figure figure figure sunwindows sunwindows attempt bring window unix system synchronization problem multi process environment find objectionable problem aggravated multiple address space mean protocol communicating worried three way partition function window management address space client process requires replication window system library application make large demand disc space outside address space client kernel operating system outside address space client server process requires remote procedure call support available unix system recently sunwindows us first two disadvantage inadequate debugging tool coupled fact need program window manager different style resides kernel bug window system threaten integrity entire system parallel development application user interface possible large body code wireddown memory example sun window graphical interface unix formatting utility indent format program allowing different style different option scrollbars button bar move towards library user build unix spirit icon editor graphical image preview area etc tool manipulating fullscreen crosshairs believe system must provide hook user want window system legislate taste finally last system considered sundew sundew sundew see chapter extensible distributed window system window manager user process application communicate window system via program written postscript james gosling discus system discussion chairman george coulouris myers might worth mentioning current system blit us many idea dlisp teitelman yes another case separation window management function application program good idea area came bob sproull williams mentioned tip deal dragging pointing action teitelman one pseudoevents recognized mousemove could put tip table every time mouse move want following event generated case would continually get mousemove event event tip table would see event could even specify often wanted depending whether interested final end point whole trajectory williams achieve sending event application teitelman yes system fast enough worked
43,Lobsters,osdev,OS,Multi-Touch Systems that I Have Known and Loved,https://www.billbuxton.com/multitouchOverview.html,multitouch system known loved,multitouch system known loved keywords search term preamble lee buxton smith long nose innovation http portalacmorgdlcfm dogma framing touchtablets touch screen discrete continuous location specificity degree freedom size matter orientation matter horizontal vertical touchsensing contact position degree touch pressure sensitivity angle approach force vector size matter ii singlefinger multifinger multipoint multitouch multihand multifinger multiperson multitouch point gesture stylus andor finger hand finger object different attribute free lunch feeling blind simply luck p blind time handhelds rely touch screen input virtually require two hand operate finger transparent incomplete beginning typing nkey rollover photo credit electroacoustic music early day electronic touch sensor http wwwhughlecainecomeninstrumentshtml touch screen technology ea johnson royal radar establishment malvern uk plato iv touch screen terminal http enwikipediaorgwikiplatocomputer u patent carrolltouch onepoint touch input vector information onepoint touch input vector information computer display http wwwyoutubecomwatch manipulating simulated object realworld gesture using force position sensitive scree tactile array sensor robotics real time control robot tactile sensor flexible machine interface soft machine video place video desk http youtubecomwatch multitouch screen u patent sensor frame bimanual input study twohanded input video apple desktop bus adb trackball scroller init natural language interaction perspective nonverbal twohanded input compound task bidirectional display http wwwdpixcomabouthtml digital desk http videogooglecomvideoplay simon wacom manual cognitive benefit twohanded input experimental study starfire starfire flip keyboard wwwbillbuxtoncom combined keyboard touch tablet input device click video bimanual research http wwwbillbuxtoncombuxtonaliasvideoshtml http wwwbillbuxtoncompapershtml graspabletangible interface active desk living augmented reality ubiquitous medium reactive environment design evaluation gui paradigm based tabets twohands transparency video haptic lens mtc express multitouch controller tactex control http wwwtactexcom http wwwbillbuxtoncomflipkeyboardsmov fingerworks multitouch evaluation system hand tracking finger identification chordic manipulation multitouch surface portfolio wall http wwwbillbuxtoncombuxtonaliasvideoshtml portfolio wall fingerworks touchstream http wwwfingerworkscomdownloadshtml handgear grt dsi datotech mobile magazine product announcement may extreme hardware gizmo nt sing bring announcement handgear api autodesk viz http wwwandrewfentemcom university toronto jazz mutant http wwwjazzmutantcom http stantumcom neonode mobile phone http wwwneonodecom http http wwwyoutubecomwatch touchlight http researchmicrosoftcomawilson touchlight playanywhere http researchmicrosoftcomawilson playanywhere tactiva http wwwtactivacom toshiba matsusita display technology http benko collaborator precise selection technique multitouch screen video plastic logic synaptics pilotfish http wwwsynapticscom http wwwsynapticscomonyx apple iphone http wwwapplecomiphonetechnology microsoft surface computing http wwwsurfacecom thinsight surface thinsight http wwwbillbuxtoncomuistthinsightpdf surface ntrig http wwwntrigcom surface http wwwmicrosoftcomsurface surface thinsight,multitouch system known loved bill buxton microsoft research original jan version august keywords search term multitouch multitouch input interaction touch screen touch tablet multifinger input multihand input bimanual input twohanded input multiperson input interactive surface soft machine hand gesture gesture recognition earlier version page also available belorussian thanks translation martha ruszkowski greek translation page undertaken nikolaos zinas preamble since announcement iphone microsoft surface especially large number people asked multitouch reason largely know involved topic number year problem ca nt take time give detailed reply question done next best thing hope start compiling wouldbe answer document assumption ultimately le work give one reasonable answer many unsatisfactory one touch multitouch technology long history put perspective touch screen use latter part air traffic control great britan however technology first introuced touch screen public able sense single touch time yet launch apple iphone general public became aware device capable independently sensing multiple simultaneous touch location capability already developed january publicly demonstrated twenty year use another apple computer milestone reference point january apple macintosh first introduced multitouch screen tablet already developed one example prototype capacitive multitouch tablet developed university toronto publicly disclosed demonstrated lee buxton smith another example multitouch display developed bob boie bell lab became aware work invited presented work toronto bell lab work certainly preceded far advanced multitouch screen rather tablet far advanced mean bell lab invented multitouch screen used iphone subsequent display course hand neither apple virtually always case work toroto like bell lab apple possible standing shoulder giant shoulder chain represented step forward musical term case riffing rather ripping significant next lnk chain phd work wayne westerman want look backwards work look reference thesis excellent researcher prior art knew root thing like pinch gesture date back foundation built body knowledge well small successful company brought work market acquisition company apple computer westerman new colleague apple took thing next level integrated even refined version iphone chain continues putting page together overarching goal use evolution touch especially multitouch technology case study illustrating nature technological innovation hope example help emphasize importance balancing making researching history prior art domain relevant space within working perhaps aside pointing one key area creativity insight exercised process lie area determining constitute relevant domain great idea grow vacuum marketing subscription cult hero tend lpursue great inventorgenius myth generally great innovation come spark invention data say spark typically take year kindle sense evolution multitouch textbook example call long nose innovation flesh case study offer brief admitedly incomplete summary landmark example represent see significant link chain leading multitouch know today spirit lifelong learning apologize relevant example encourage feeding comment additional example etc note note used searching hci literature primary portal search download relevant literature including great deal relating topic including citation westerman thesis acm digital library http portalacmorgdlcfm one relevant source interest interested example kind work done studying gesture interaction see thesis hummels source topic mean good example help gauge might considered new obvious please shy term sending photo update etc best integrate background input see also incomplete draft manuscript book input tool theory technique background input device including touch screen tablet see directory hope help dogma lot confusion around touch technology despite history year relatively recently heard multitouch technology much le used given much impact today multitouch took long take hold took year mouse invented engelbart english became ubiquitous release window yes mouse shipped commercially early german computer telefunken visibly xerox star perq workstation speaking personally used first mouse national research council canada yet none made huge dent term overal number deployed took year hit tipping point measure multitouch technology multitouch got traction year faster mouse one primary axiom everything best something worst something else trick knowing importantly try replace mouse play game mouse great many thing everythingthe challenge new input find device work together simultaneously mouse hand thing strong mouse weak thereby complementing single new technology matter potentially useful seldom cause product overall success mouse multitouch whole new ecosystem required full potential could begin exploited arguably input technique technology played secondfiddle relative display term investment attention industry seemed content try make better mouse mouse replacement trackball joystick rather change overall paradigm interaction framing time write treatise tutorial history warn trap seem cloud lot thinking discussion around stuff approach take draw distinction see meaningful relevant largely form contrast touchtablets v touch screen way two extreme continuum example paper graphic tablet display albeit moreorless static touch tablet tactile display rather visual similarity real difference touchsensitive display surface v touch pad tablet difference directness touch exactly thing interacting call touch screen touch display hand touching surface overlaid screen let call touch tablet touch pad discrete v continuous nature language touch input highly shaped type action used interacting touch technology touch technology device assume different character depending whether interface depends discrete v continuous action example common way working touch screen direct finger selection item example one might asked push graphical ok button conclude transaction atm tap key graphical keyboard order enter text latter case multitouch support ability hold shift key simultaneously tapping one alphabetic key order get upper case contrast one also design interaction control asserted mean continuous action gesture lateral stroke gesture commonly used photoviewing application enable user go next previous image sequence depending direction stroke example multitouch continuous gesture common pinch gesture enables one zoom image map example discrete action typically accompanied graphical cue feedback feedforward actually make selfrevealing contiuous action share property dragging handle graphical linear potentiometer change speaker volume video many example flicking photo pinching zoom map case user need somehow know done done point multitouch device hardware nature experience vary greatly depending kind interaction used location specificity accuratley user position touch particular location particular action significant effect nature interaction typing e key graphical keyboard requires rather high level accuity le selecting gap second third l allleu order correct spelling alleleu hand action lateral flick frequently used go next previous image photo viewer far le demanding occurs fullscreen viewing example initiated pretty much anywhere screen demanding touchscreen interaction regard significant impact overall user experience also suitability certain application general precise one must term touch occurs visually demanding task interaction demand visual attention le acceptable interface case eye mention hand deployed elsewhere example design touch screen controlled device seen illegal use driving automobile certainly integrated console importance let dive little bit deeper primarily deployed today touchscreen relatively uniform flat surface tactile feedback like provided piano keyboard crack key different level black white key different shape knob oldschool car radio told touch touching volume control tuning knob preset button touch screen yes may know approximately graphical qwerty keyboard positioned example may know comma key located unlike traditional car radio feel way location absence tactile feedback mean need use eye key message want convey true even touch screen provide socalled tactile feedback reason typically provides feedback action done purpose describing missing tactile feedback might better referred feedforward reality calling feedforward actually still feedback feedback task finding appropriate control activating point need finer granularity task analysis well type feedback supported finally significance impact amplified fact traditional mechanical control persistent location therefore one feel one commit approximate location muscle memory practice touch screen interface multiple control typically appear different time location thereby creating moded situation likely reduces potential motor learning many situation degree freedom richness interaction highly related richnessnumbers degree freedom dof particular continuous degree freedom supported technology conventional gui largely based moving around single cursor using mouse example result sensing location two finger used appropriately technology offer potential begin capture type richness input encounter everyday world manner exploit everyday skill acquired living point tightly related previous one size matter size largely determines muscle group used many fingershands active surface type gesture suited device orientation matter horizontal v vertical large touch surface traditionally problem could sense one point contact rest hand surface well finger want point confuse poor thing tends occur vertically mounted surface hence large electronic whiteboards frequently use single touch sensing technology without problem touchsensing contact position historically touch sensitive device report surface touched true single multi touch device however aspect touch exploited system potential enrich user experience degree touch pressure sensitivity touch surface independently continuously sense degree contact toouch point far higher potential rich interaction note use rather pressure since frequentlyusually pass pressure actually side effect push harder finger tip spread wider point contact actually sensed amountarea contact pressure per se either richer binary touchno touch even subtle difference affordances pressure v degree angle approach system demonstrated ability sense angle finger relative screen surface see example mcavinney sensor frame effect give finger capability function moreorless virtual joystick point contact example also let finger specify vector projected virtual space behind screen point contact something could relevant game application force vector unlike mouse contact screen user exploit friction finger screen order apply various force vector example without moving finger one apply force along vector parallel screen surface including rotational one technique described early shown herot c weinzapfel g manipulating simulated object realworld gesture using force position sensitive screen computer graphic historical example important reminder human capability technology front centre consideration making capability accessible reasonable cost may challenge worth remembering thing also said multitouch furthermore note multitouch date time touch innovation size matter ii ability sense size area touched important size touch surface see synaptics example device sense difference touch finger small v cheek large area example answer phone holding cheek singlefinger v multifinger although multitouch known since least vast majority touch surface deployed single touch manipulate one point regardless mouse touch screen joystick trackball etc restricted gestural vocabulary fruit fly given multiple limb reason nice able take advantage multipoint v multitouch really important thinking kind gesture interactive technique used peculiar technology many socalled technique seen actually think way think using different technique operating laptop using track pad laptop singletouch device instead mouse double clicking dragging working pulldown menu example interaction technique independent whether touch pad trackball mouse joystick touch screen used multihand v multifinger much space control come different finger different device different hand working different device lot depends scale input device analogy explain referring back traditional gui point icon mouse click drag release button drop point mouse use foot pedal clicking dragging technique even though split two limb two device lot history come tradition go far beyond multitouch multiperson v multitouch two point sensed example make huge difference two finger hand one user v one finger right hand two different user multitouch technique want two cursor example despite one first thing people seem two people working surface may exactly want insofar multitouch technology concerned may valuable able sense person touch come done diamond touch system merl see point v gesture much early relevant work krueger see sensing pose dynamic hand example well position mean go way beyond task sensing multiple point stylus andor finger people speak one must make choice stylus v finger certainly case many stylus system work finger many touch sensor work stylus finger need either question although might correct decision depends context design user palm pilot know potential use either strength weakness keep mind finger ultimate device picasso rembrandt restrict finger painting hand want sense temperature water finger better tool pencil hand finger v object stylus one object might used multipoint interaction multipoint multitouch system sense various different object object orientation see andy work example object stylus otherwise may may used conjunction simultaneously finger different v something different obvious one way answer depends user programmer scientist lawyer perspective user interface literature make three point would known assumed anyone skilled art deviceindependent graphic state technique implemented alternative input device still technique example work gui stylus touch screen mouse joystick touchpad trackball one would still consider technique doubleclicking dragging dialogue box technique interchange device neutral perspective user skill using gui mouse transfer using touchpad user consider interface using technique nevertheless various device idiomatic strength weakness user consider technique performance speed accuracy comfort preference etc different device device hence interactive experience device device despite using technique consequently norm user researcher alike swap one device another control particular technique feedback presence absence graphical feedback design feedback accompanying action effect result different experience interaction language example finger gesture one might leave kind temporary ink trail action like cloud trail jet plane example furthermore leaving different trail depending one two finger used gesture may useful imprinting upon user gesture mean two different thing depending number finger despite functional effect action identical without feedback effect interface design significantly different reason design individual action thing learning well take complete set possible variation alternative consideration range diverse inclined say anyone describes something touchscreen interface leaf probably unqualified discus topic okay overstating perhaps term touch screen interface mean many thing effect mean little nothing term subtle nuance define essence interaction user experience appropriateness design task user context one purpose preparing page help raise level discourse avoid applebanana type comparison discus topic level worthy importance made lofty claim also state clearly nt yet understand still get wrong still people correct hand explicit term specific language meaningful dimension differentiation bigger opportunity learning happen one hope attribute stated general rule everything best something worst something else diverse population place context interact nature information passing back forth interaction room technology tailored idiosyncrasy task potential problem lead u carry around collection device distinct purpose consequently distinct style interaction potential getting hand becoming overwhelmed proliferation gadget gadget simple effective collectively little reduce complexity functioning world yet traditionally better tool followed approach think different knife kitchen screwdriver workshop yes great number leading interesting variation old theme namely ie right technology result le complexity guarantee touch screen based offer opposite alternative le generally applicable technology result le overall complexity hence prospect multitouch soft machine becoming kind chameleon provides single device transform whatever interface appropriate specific task hand risk kind jack trade master nothing compromise one path offered touchscreen driven appliance instead making device different button dial mounted soft machine draw picture device let interact ideally get far flexibility single device sometimes really good especially good like physical device touch operate one button virtual device time example using one button device time important physical world think type without able push shift key time character want appear upper case number case use touch interface likewise multitouch greatly expands type gesture use interaction go beyond simple pointing button pushing dragging dominated interaction computer past best way relate everyday world imagine eating chinese food one chopstick trying pinch someone one fingertip giving someone hug tip one finger mouse term pointing device like mouse joystick concerned everything manipulating one point around screen something give u gestural vocabulary fruit fly one suspect better user deserve better multitouch one approach accomplishing mean one even best keep saying everything best something worst something else free lunch feeling adaptability touch screen general multitouch screen especially come price besides potential accumulation complexity single device main source downside stem fact interacting picture ideal device rather ideal device may still enable certain skill specialized physical device transfer operating virtual one simply anyone typed graphical qwerty keyboard know user interface look feel following graphic illustration generally written discussing touchscreen based system look feel kind ironic given touch screen let look consequence next point blind simply luck p blind time light eye occupied elsewhere road soft touch screen interface nearly speak eye occupied elsewhere one exception socalled touch entry using single stroke gesture graffiti location independent interface player us touchscreen fingeractivated graphical taperecorder type control start stop pause example eye free unlike older mechanical control ca nt fee touchscreen button must first take pocketpursebriefcase want likewise unless device also support speech recognition risk serious accident operate driving yes could use gesturebased control technique could reduce eliminate visual demand task could useful many case however driving would still divert hand wheel still dubious design solution handhelds rely touch screen input virtually require two hand operate one hold device operate thus operating generally requires eye hand finger transparent smaller touch screen finger obscure pointed finger shrink way chip display one reason stylus sometimes value proxy finger skinny therefore obscure screen reason rely finger painting even large surface writing drawing finger generally effective brush stylus small format device virtually useless try take note make drawing using finger rather stylus one support good digital ink appropriate stylus design one take note fluently one paper note takingscribble function notably absent virtually fingeronly touch device sunshine suffered trying read colour lcd display player mobile phone digital camera outside sun least device mechanical control function example even see screen still point camera appropriate direction push shutter button interface rely exclusively touch screen case unless device outstanding reflective display device risk unusable bright sunlight property make touchdevices bad thing mean distinct device set strength weakness ability completely reconfigure interface fly socalled long known respected exploited free lunch general panacea said everything best something worst something else understanding weighing relative implication use property necessary order make informed decision problem people especially consumer including many designer enough experience understand many issue area could use additional work hopefully written help incomplete roughly annotated chronology multitouch related work beginning typing nkey rollover ibm others may seem long way multitouch screen story multitouch start keyboard yes mechanical device hard rather soft machine involve multitouch sort first obviously see sequence shift control fn alt key combination others case want multitouch second case unintentional inevitable multiple simultaneous key press want make proper sense socalled question nkey rollover push next key releasing previous one photo credit electroacoustic music early day electronic touch sensor hugh lecaine buchla bob moog http wwwhughlecainecomeninstrumentshtml history touchsensitive control device predates age pc number early synthesizer electronic music instrument maker used touchsensitive capacitancesensors control sound music made touch pad rather touch screen tradition innovating touch control musical purpose continuedcontinues original basis university toronto multitouch surface well cmu sensor frame touch screen technology ea johnson royal radar establishment malvern uk describes workable mechanism developing touch screen interesting touch screen used capacitive sensing consumer device today photo johnson still use air traffic control uk late johnson ea touch display novel inputoutput device computer electronics letter johnson e touch display programmed manmachine interface ergonomics also appears wt singleton r easterby dc whitfield ed human operator complex system london taylor francis orr nw hopkins vd role touch display air traffic control controller plato iv touch screen terminal computerbased education research laboratory university illinois urbanachampain http enwikipediaorgwikiplatocomputer one first touch screen generally known used public albeit small population way plato iv computer assisted education system developed initial implementation x infrared light beam running parallel close screen surface determining horizontal vertical beam interuppted finger touched screen indicated touch occured screen surface touch system developed frederick ebeling roger l johnson richard goldhor u patent filed nov granted nov touch technology used commercialized much improved form carrolltouch founded arthur bruce carroll also technique used first commercially available pc came touch screen hewlett packard well use touch plato system remarkable use realtime randomaccess audio playback invention flat panel plasma display onepoint touch input vector information chris herot guy weinzapfel architecture machine group mit screen demonstrated herot weinzapfel could sense different signal single touch point position x force x z ie sheer x pressure z torque x z celebrate clever multitouch sensor nice reminder many dimension touch screen exploited order provide rich interaction see herot c weinzapfel g onepoint touch input vector information computer display computer graphic video demo see http wwwyoutubecomwatch similar work see also minsky manipulating simulated object realworld gesture using force position sensitive screen computer graphic tactile array sensor robotics jack rebman lord corporation multitouch sensor designed robotics enable sensing shape orientation etc consisted x array sensor x square pad usage described wolfeld jeffrey real time control robot tactile sensor msc thesis philadelphia moore school electrical engineering figure right show computer display tactile impression placing round object tactile sensor shown foreground groover mp wei nagel rn odrey n industrial robot new york mcgrawhill u patent issued work rebman flexible machine interface nimish mehta university toronto first multitouch system aware designed human input computer system consisted frostedglass panel whose local optical property viewed behind camera black spot whose size depended finger pressure appeared otherwise white background simple image processing allowed multi touch input picture drawing etc time discussed notion projector defining context camera human viewer mehta nimish flexible machine interface masc thesis department electrical engineering university toronto supervised professor kc smith soft machine bell lab murray hill first paper aware user interface literature attempt provide comprehensive discussion property touchscreen based user interface call multitouch specifically paper outlined many attribute make class system attractive certain context application nakatani l h rohrlich john soft machine philosophy usercomputer interface design proceeding acm conference human factor computing system video place video desk myron krueger vision based system tracked hand enabled multiple finger hand people interact using rich set gesture implemented number configuration including table wall sense touch per se largely relied dwell time trigger event intended pose hand horizontal desktop configuration inherently touch based user perspective essentially term unencumbered ie glove mouse stylus etc rich gestural interaction work decade ahead time hugely influential yet acknowledged use many hand gesture starting emerge clearly seen following video including using pinch gesture scale translate object http youtubecomwatch many video demonstrate system anyone field view well read book krueger myron w artificial reality reading addisonwesley krueger myron w artificial reality ii reading addisonwesley krueger myron w gionfriddo thomas hinrichsen katrin videoplace artificial reality proceeding acm conference human factor computing system work staggeringly rich repertoire gesture mutifinger multihand multiperson interaction multitouch screen bob boie bell lab murray hill nj multitouch touch screen tablet first mutitouch screen aware used transparent capacitive array touch sensor overlaid crt could manipulate graphical object finger excellent response time developed bob boie shown lloyd nakatani see invited visit bell lab see saw presentation work sigchi since boie technology transparent faster saw view ahead u stopped working hardware expecting would get access focus software interaction side strength assumption false turned boie technology would become available u near future around took group xerox see technology since felt would appropriate user interface large document processor work multitouch work bell lab around time boie see work leonard kasday u patent used optical technique sensor frame carnegie mellon university work done paul mcavinney carengiemellon university device used optical sensor corner frame detect finger time done miniature camera essentially unavailable hence device used dram ic glass opposed opaque cover imaging could sense three finger time fairly reliably due optical technique used potential misreading due shadow later prototype variation built nasa funding sensor cube device could also could detect angle finger came screen bimanual input university toronto study published following year examined benefit two different compound bimanual task involved continuous control hand first positioningscaling task one move shape particular location screen one hand adjusting size match particular target second selectionnavigation task one navigate particular location document currently offscreen one hand select since bimanual continuous control still easy adb yet released see emulated macintosh another computer perq result demonstrated continuous bimanual control easy user resulted significant improvement performance learning see buxton w myers b study twohanded input proceeding chi video despite capability technologically economically viable since advent adb see later usb still mainstream system take advantage basic capability bad example technique developed multidevice multihand easily transfer multitouch device apple desktop bus adb trackball scroller init apple computer university toronto apple first released apple desktop bus adb apple iigs thought early version usb starting launch macintosh ii macintosh se adb included macintosh computer year imac replaced usb adb supported plugandplay also enabled multiple input device keyboard trackball joystick mouse etc plugged computer simultaneously downside plugged two pointing device default software distinguish thing mouse trackball operate time could kind tugofwar resulted tracking symbol screen gina venolia apple advanced technology group atg developed tool enabled distinguish input stream device direct particular parameter work mainly focusing manipulation object knowing work group university toronto wanted take advantage multidevice capability order support bimanual input work growing described gina venolia assisted michael chen past student group also apple atg produce init u based gina earlier work trackballscroller init u example enabled mouse designated pointing device trackball control scrolling independently x see example buxton w natural language interaction perspective nonverbal dialogue laurel b ed art humancomputer interface design reading addisonwesley able use init control range function described kabbash p buxton w sellen twohanded input compound task proceeding chi short technology able deliver benefit demonstrated buxton myers see standard hardware without change operating system largely change even application collective disappointment apple never took advantage one interesting innovation bidirectional display bill buxton colleague xerox parc first discussion feasibility making lcd display also input device ie pixel input well output device led two initiative think papercup string made kid cup bidirectional functioned simultaneously speaker microphone took high re asi scanner technology used scanner adding layer make display bidirectional motivation got lost process result dpix display http wwwdpixcomabouthtml liveboard project rear projection liveboard initially conceived quick prototype large flat panel version used tiled array bidirectional dpix display digital desk pierre wellner rank xerox europarc cambridge classic paper literature augmented reality wellner p digital desk calculator tactile manipulation desktop display proceeding fourth annual symposium user interface software technology uist early front projection tablet top system used optical acoustic technique sense handsfingers well certain object particular paperbased control data clearly demonstrated multitouch concept two finger scaling translation graphical object using either pinching gesture finger hand among thing example see segment starting following video demo http videogooglecomvideoplay simon ibm bell south ibm bell south release arguably world first smart phone simon historical interest simon like iphone relied touchscreen driven user interface singletouch device simon foreshadows number aspect seeing touchdriven mobile device see today sidebar two working simon among prized piece collection input device wacom japan wacom introduced ud series digitizing tablet special mutlidevice multipoint sensing capability could sense position stylus tip pressure well simultaneously sense position mouselike puck enabled bimanual input working wacom lab university toronto developed number way exploit technology far beyond stylus puck see work graspabletangible interface next two generation tablet intuos intuos series extended multipoint capability enabled sensing location stylus x plus tilt x tilt making stylus locationsensitive joystick effect tip pressure value sidemounted dial airbrush stylus well one could simultaneously sense position rotation puck well rotation wheel side total one able control degree freedom using two hand may seem extravagant hard control depended used example signal coupled bimanual input needed implement digital airbrush worthy name technology able group aliaswavefront cooperation wacom see also leganchuk zhai buxton w manual cognitive benefit twohanded input experimental studytransactions humancomputer interaction starfire bruce tognazinni sun microsystems bruce tognazinni produced future envisionment film starfire included number multihand multifinger interaction including pinching etc flip keyboard bill buxton xerox parc wwwbillbuxtoncom multitouch pad integrated bottom keyboard flip keyboard gain access multitouch pad rich gestural control application buxton w combined keyboard touch tablet input device xerox disclosure journal click video implementation tactex control sound synthesizer audio mixer graphic multitouch surface defining control various virtual device bimanual research aliaswavefront toronto developed number innovative technique multipoint multihanded input rich manipulation graphic visually represented object mentioned specifically page number video seen illustrate technique along others http wwwbillbuxtoncombuxtonaliasvideoshtml also see paper twohanded input see example multipoint manipulation object http wwwbillbuxtoncompapershtml graspabletangible interface input research group university toronto demonstrated concept later implementation sensing identity location even rotation multiple physical device digital desktop display using control graphical object mean resulting article associated thesis introduced notion come known computing fitzmaurice gw ishii h buxton w brick laying foundation graspable user interface proceeding acmsigchi conference human factor computing system active desk input research group ontario telepresence project university toronto around made drafting table size desk rearprojection data display rear projection screentable top translucent stylus controlled digital graphic tablet scriptel stylus operated dominant hand prior mounted camera bove table top tracked position nondominant hand tablet surface well pose open angle thumb index finger nondominant hand could grasp manipulate object based opening closing grip virtual object vision work done student yuyan liu buxton w living augmented reality ubiquitous medium reactive environment k finn sellen wilber ed video mediated communication hillsdale nj erlbaum earlier version chapter also appears proceeding imagina simultaneous bimanual multifinger interaction large interactive display surface aliaswavefront toronto bimanual tabletbased system utilized number technique work equally well multitouch device used thus include restricted grabbing drawing surface two point scaling size ie zooming inout moving hand apart towards respectively likewise could done individual graphical object lay background note simply multipoint implementation concept seen ivan sketchpad system likewise one could grab background object rotate using two point thereby controlling pivot point degree rotation simultaneously ditto translating moving object page interest one could combine primitive translate scale simultaneously idea foreshadowed graspable interface work kurtenbach g fitzmaurice g baudel buxton w design evaluation gui paradigm based tabets twohands transparency proceeding acm conference human factor computing system chi video haptic lens mike sinclair georgia tech microsoft research haptic lens multitouch sensor feel clay deformed harder pushed resumed basic form released novel interesting approach class device sinclair mike haptic lens acm siggraph visual proceeding art interdisciplinary program siggraph page mtc express multitouch controller tactex control victoria bc http wwwtactexcom believe first commercially available multitouch controller used optical sensor technology developed licensed canadian space agency u patent work controller began product shipped marketed mainly controller electronic musical instrument see video http wwwbillbuxtoncomflipkeyboardsmov fingerworks multitouch evaluation system newark delaware fingerworks founded john elia wayne westerman university delaware objective productize work resulting westerman phd thesis hand tracking finger identification chordic manipulation multitouch surface done supervision elia multtouch evaluation system prototype product initially named fingerboard sale believe made thay used user testing device used capacitive multitouch provide innovative combination keyboard mouse gestureshorthand command producct emerged work fingerworks touchstream released see portfolio wall aliaswavefront toronto canada product digital corkboard image could presented group individually allowed image sorted annotated presented sequence due available sensor technology u multitouch however interface entirely based finger touch gesture went well beyond typical touch screen interface time starting appear touchbased mobile device example advance next slide sequence one flicked right go back previous image one flicked left gesture much richer leftright flick one could instigate different behaviour depending direction moved finger system eight option corresponding main point compass example downward gesture video meant stop gesture right enabled annotation right launched application associated image etc selfrevealing could done eye free leveraged previous work see number demo http wwwbillbuxtoncombuxtonaliasvideoshtml touch openclose image flick right next flick left previous portfolio wall fingerworks touchstream newark delaware shipping version previously named fingerboard emerged fingerworks multitouch evaluation system discussed shipped main innovation use multitouch gesture shortcut provide alternative conventional keyboard mouse gaining huge market share acquire strong dedicated base user perhpas key significance device paved way acquisition fingerworks apple computer led elia westerman moving apple incorporation capacitive multitouch iphone company acquired early apple computer moved apple fingerworks ceased operation independent company documentation including tutorial manual still downloadable http wwwfingerworkscomdownloadshtml handgear grt dsi datotech vancouver bc dsi datotech announced demonstrated multitouch tablet named handgear accompanied software package named gesture recognition technology grt recognizing hand gesture captured tablet understand detail come company ran money product shipped went business mobile magazine product announcement may sems marty extreme hardware gizmo nt sing bring computer power user announcement handgear api autodesk viz june andrew fentem uk http wwwandrewfentemcom state working multitouch music general application since however appears published technical information detail work technical scientific literature hence work period generally known given absence publication cited therefore little impact larger evolution field one example citing work known loved simple reason took place radar normal scientific technical exchange sure several similar instance hence include example representing general case university toronto toronto paper outlining number technique multifinger multihand multiuser single interactive touch display surface many simpler previously used technique omitted since known obvious mike wu mike balakrishnan ravin multifinger whole hand gestural interaction technique multiuser tabletop display chi letter freeform rotation two finger used rotate object b though pivot finger lifted second finger continue rotation parameter adjustment widget allows twofingered manipulation jazz mutant bordeaux france http wwwjazzmutantcom stantum http stantumcom make one first transparent multitouch one became best knowledge first offered commercial product product technology used lemur music controller true multitouch screen interface early version lemur first shown public la august jazz mutant company sell music product stantum sibling company set sell underlying multitouch technology neonode mobile phone stockholm sweden http wwwneonodecom touch screen phone announced shipped interaction mainly dpad touch screen sens touch using basic concept plato system derivative commercialized carroll touch ie bezel display pair optical sensor facing along horizontal vertical ax touch sensed finger interpupts sensor light path seen previously touchscreen device portfolio wall first touchscreen phone go beyond primarily tapping light button make substantial use finger swipetype gesture primary example prior art challenge iphones swipetounlock patent touchscreen incorporated socalled haptic tactilevibratory feedback pen computing review see http video walkthrough see http wwwyoutubecomwatch touchlight andy wilson microsoft research http researchmicrosoftcomawilson touchlight touch screen display system employing rear projection display digital image processing transforms otherwise normal sheet acrylic plastic high bandwidth inputoutput surface suitable gesturebased interaction video demonstration website capable sensing multiple finger hand one user since acrylic sheet transparent camera behind potential used scan display paper document held screen playanywhere andy wilson microsoft research http researchmicrosoftcomawilson playanywhere video website contribution sensing identifying object well touch frontprojected computer visionbased interactive table system address installation calibration portability issue typical visionbased table system us improved shadowbased touch detection algorithm sensing finger hand well object object identified tracked using fast simple visual bar code scheme hence addition manual multtouch desk support interaction using various physical object thereby also supporting graspabletangible style interface also sense particular object piece paper mobile phone deliver appropriate desired functionality depending tactiva palo alto http wwwtactivacom announced shown video demo product called tactapad us optic capture hand shadow superimpose computer screen providing kind immersive experience echo back krueger see multihand multitouch tactile touch tablet ie tablet surface feel different depending virtual objectcontrol touching toshiba matsusita display technology tokyo announce demonstrate lcd display shadow sensing capability one first example referred xerox parc discussion last significance separate touch sensing transducer rgb pixel produce light location screen pixel detect shadow location screen thereby enabling multitouch way hard separate touch technology match performance eventually price http benko collaborator columbia university microsoft research technique precise pointing selection mutitouch screen benko h wilson baudisch p precise selection technique multitouch screen proc acm chi human factor computing system video plastic logic cambridge uk flexible eink display mounted multipoint touch pad thereby creating interactive multitouch display early prototype illfated que ereader synaptics pilotfish san jose http wwwsynapticscom jointly developed onyx soft multitouch mobile phone concept using transparent synaptics touch sensor sense difference size contact hence difference finger small cheek large answer phone holding cheek example http wwwsynapticscomonyx apple iphone http wwwapplecomiphonetechnology like simon see mobile phone soft touchbased interface outstanding industrial design smooth interaction employed multitouch capability limited degree us example support pinching technique introduced krueger ie using thumb index finger one hand zoom map photo work especially well web page browser us alias portfolio wall type gesture flick forward backward sequence image initially enable use multitouch hold shift key one finger order type upper case character another soft virtual keyboard get implemented year release microsoft surface computing http wwwsurfacecom interactive table surface capable sensing multiple finger hand capable identifying various object position surface commercial manifestation internal research begun andy wilson see steve bathiche image displayed rearprojection input captured opticaly via camera key indication technology making transition research development demo mainstream commercial application see also thinsight surface thinsight microsoft research cambridge uk http wwwbillbuxtoncomuistthinsightpdf thin profile multitouch technology used lcd display hence accommodated laptop example optical technology therefore capable sensing finger object therefore accommodate touch tangible style interaction research undertaken published microsoft research see also surface ntrig http wwwntrigcom commercially multitouch sensor sense finger stylus simultaneously unlike touch sensor support stylus incorporates specialized stylus sensor result much higher quality digital ink stylus incorporated recent tabletpcs technology scale larger format tabletop size surface microsoft samsung http wwwmicrosoftcomsurface thick version surface rear projection projector replaced augmented lcd technology build research thinsight result multitouch surface since pixel integrated optical sensor whole display also imager hence device see placed including shape barcodes text drawing etc yes finger
44,Lobsters,osdev,OS,A Tour Through Cedar (1984),https://pdfs.semanticscholar.org/68a9/f458830b661637542eedbbe5c944e4c0e16e.pdf,tour cedar,nb,obj xobject procset r endobj obj r r r r r r r r r r endobj obj endobj obj stream ty f w u va חm ۉ esr nr oȏm q l v endstream endobj obj endobj obj stream p endstream endobj obj endobj obj stream p endstream endobj obj endobj obj stream p endstream endobj obj endobj obj stream x f endstream endobj obj endobj obj stream p zp sx h ɪ z mr b endstream endobj obj endobj obj stream rt x e e c ֆ j x u xu ec dd f tt r p endstream endobj obj endobj obj stream bc endstream endobj obj endobj obj stream endstream endobj obj endobj obj stream c endstream endobj obj endobj obj width stream x 馚 兹ts c u g ei g yz j zm ka n n z dr l ǡx ok z 㺑 c dݽ scm sin w gmt pa q q ad b x ì h k hc 턻 xk lpb v g b ˆ xwǧ e l n luk ԕ aynys vتj el ddg xl l lts f lav c vj ao l ƫ l 일 l wy q ӫ vfdhv l x hrh aɚ v l l b l pb v v ԃ e ю l ʬ qv ч l vx luk l v w g z w e f l c b n l ѯ lѯ h agq gk x p fqsԏf b h j z gm q al b l eņ ޤu ӧ ޓi k q z u f id w ki xedddddg u l r v տ mi gz b zcحl k w pe l lsl ya aghad z l l u k w xڊ փm bt v hz j h ccb f aisl c h pd xk c h l h fǵr v l cl x l q g eݩ b v pdt e e ӎ ڱka r u x im ał l b l x n q kw h b v q e q чh l om z hpl g l v v 䬏 e ddddddf l qm e luqm hj l n ga b b q x l f l l b v p xaȓ ffw l wb ݪ b xl l r ޙ g h l øsw bbbbl dpbbbbbl gt x wc x b bqf ga ga v hd fx h b 㜨 b v ficmt r xa h bggф tab eb оgф f tah fa l u b r gb x taa e tq b ta b gф de b gh h fڂ b db fbn b h eфafe g gd c pid h b b tb b dddd x k g cdc v 瑢 ub ۺ l f iv c endstream endobj obj pdftextimageb endobj obj xobject procset r endobj obj r r r r r r r r r r r r r r r r r r r endobj obj endobj obj stream iv ߞpz q
45,Lobsters,osdev,OS,Verified seL4 on secure RISC-V processors,https://ts.data61.csiro.au/publications/csiroabstracts/Heiser_20.abstract.pml,verified secure riscv processor,verified secure riscv processor author gernot heiser abstract bibtex entry download,verified secure riscv processor author gernot heiser unsw sydney abstractriscv many attraction ranging openness architecture cleanslate design based simplicity scalability well riscv foundation strong commitment security ground riscv extremely attractive platform opensource microkernel unrivalled verification security story led industry player especially germanybased hensoldt cyber making major bet combination riscv resulting funding formal verification implementation correctness proof riscv discus experience implementing verifying riscv architecture related opensource technology employing allow u build secure system includes camkes component framework support securitybyarchitecture approach cogent system language designed reduce cost verified system component file system device driver one interesting aspect timing channel working number year time protection temporal equivalent memory protection systematic timingchannel prevention experience arm processor lack mechanism completely riscv present opportunity get right report experience working riscv foundation security standing committee get required mechanism processor specification bibtex entry misc author heiser gernot month jan date year keywords operating system verification cyber security safetycritical system risc v title verified secure risc v processor address gold coast numpages online video http wwwyoutubecomwatch featureyoutube note linuxconfau booktitle linuxconfau publisher online slide http download
46,Lobsters,osdev,OS,Prevention of Microarchitectural Covert Channels on an Open-Source 64-bit RISC-V Core,https://ts.data61.csiro.au/publications/csiro_full_text//Wistoff_SGBH_20.pdf,prevention microarchitectural covert channel opensource riscv core,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڵ vi j v u iš iwgz
47,Lobsters,osdev,OS,Cross-compiling to Redox using Nix,https://www.redox-os.org/news/redox-plus-nix-0/,crosscompiling redox using nix,introduction pr redoxpkgs package going forward,aaron janse wednesday july introduction nixpkgs recently merged pr allowing nix package manager crosscompile package redox expected nixpkgs package crosscompile redox without failing created redoxpkgs wrapper around nixpkgs fix broken package hope patch eventually adapted upstream nix several property make crosscompiling redox pleasant first nix reproducibly compiles package meaning build work system work second nix allows porting package en mass single change toolchain package could make large number package suddenly compatible redox needed patch could automatically applied build process every package given language crosscompiled redox get started installing nix simply checkout redox overlay linked run nixbuild specifying package want crosscompile git clone http githubcomaaronjanseredoxpkgs cd redoxpkgs nixbuild hexyl time writing package ported hope change time plan eventually setup small nix package cache redox meantime expect first build take long time nix build redox toolchain source going forward future nix redox depends mostly reception respective community well two system work together longterm would cool port nix run redox package built installed redox rather crosscompiled copied linux machine theory enough package ported redox isos could declaratively compiled using nix meantime though plan focus effort elsewhere dogfooding nix toolchain continue contribute redox
48,Lobsters,osdev,OS,How do SO_REUSEADDR and SO_REUSEPORT differ? (2013),https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ,soreuseaddr soreuseport differ,bsd soreuseaddr exactly exactly page soreuseport exactly connect returning eaddrinuse multicast address freebsdopenbsdnetbsd macos macos x io watchos tvos linux linux linux socket want share address port combination must belong process share effective user id android window even socket option set bound visit page solaris system also think result wrong code,welcome wonderful world portability rather lack start analyzing two option detail take deeper look different operating system handle noted bsd socket implementation mother socket implementation basically system copied bsd socket implementation point time least interface started evolving course bsd socket implementation evolved well time thus system copied later got feature lacking system copied earlier understanding bsd socket implementation key understanding socket implementation read even nt care ever write code bsd system couple basic know look two option tcpudp connection identified tuple five value protocol src addr src port dest addr dest port unique combination value identifies connection result two connection five value otherwise system would able distinguish connection longer protocol socket set socket created socket function source address port set bind function destination address port set connect function since udp connectionless protocol udp socket used without connecting yet allowed connect case advantageous code general application design connectionless mode udp socket explicitly bound data sent first time usually automatically bound system unbound udp socket receive reply data true unbound tcp socket automatically bound connected explicitly bind socket possible bind port mean port since socket really bound existing port system choose specific port case usually predefined o specific range source port similar wildcard exists source address address case case unlike case port socket really bound address mean source ip address local interface socket connected later system choose specific source ip address since socket connected time bound local ip address depending destination address content routing table system pick appropriate source address replace binding binding chosen source ip address default two socket bound combination source address source port long source port different source address actually irrelevant binding socketa x socketb b b address x port always possible long x hold true however even x binding still possible long b hold true eg socketa belongs ftp server program bound socketb belongs another ftp server program bound binding succeed keep mind though socket may locally bound address socket bound bound existing local address time case socket bound port regardless specific ip address try bind conflict existing local ip address anything said far pretty much equal major operating system thing start get o specific address reuse come play start bsd since said mother socket implementation bsd soreuseaddr soreuseaddr enabled socket prior binding socket successfully bound unless conflict another socket bound exactly combination source address port may wonder different keyword exactly soreuseaddr mainly change way wildcard address ip address treated searching conflict without soreuseaddr binding socketa binding socketb fail error eaddrinuse since mean local ip address thus local ip address considered use socket includes soreuseaddr succeed since exactly address one wildcard local address one specific local address note statement true regardless order socketa socketb bound without soreuseaddr always fail soreuseaddr always succeed give better overview let make table list possible combination soreuseaddr socketa socketb result onoff error eaddrinuse onoff ok onoff ok error eaddrinuse error eaddrinuse ok ok onoff error eaddrinuse table assumes socketa already successfully bound address given socketa socketb created either get soreuseaddr set finally bound address given socketb result result bind operation socketb first column say onoff value soreuseaddr irrelevant result okay soreuseaddr effect wildcard address good know yet nt effect another well known effect also reason people use soreuseaddr server program first place important use option take deeper look tcp protocol work socket send buffer call send function succeeds mean requested data actually really sent mean data added send buffer udp socket data usually sent pretty soon immediately tcp socket relatively long delay adding data send buffer tcp implementation really send data result close tcp socket may still pending data send buffer sent yet code considers sent since send call succeeded tcp implementation closing socket immediately request data would lost code would nt even know tcp said reliable protocol losing data like reliable socket still data send go state called timewait close state wait pending data successfully sent timeout hit case socket closed forcefully amount time kernel wait close socket regardless still data flight called linger time linger time globally configurable system default rather long two minute common value find many system also configurable per socket using socket option solinger used make timeout shorter longer even disable completely disabling completely bad idea though since closing tcp socket gracefully slightly complex process involves sending forth back couple packet well resending packet case got lost whole close process also limited linger time disable lingering socket may lose data flight also always closed forcefully instead gracefully usually recommended detail tcp connection closed gracefully beyond scope answer want learn recommend look page even disabled lingering solinger process dy without explicitly closing socket bsd possibly system linger nonetheless ignoring configured happen example code call exit pretty common tiny simple server program process killed signal includes possibility simply crash illegal memory access nothing make sure socket never linger circumstance question system treat socket state timewait soreuseaddr set socket state timewait considered still bound source address port attempt bind new socket address port fail socket really closed may take long configured linger time nt expect rebind source address socket immediately closing case fail however soreuseaddr set socket trying bind another socket bound address port state timewait simply ignored already half dead socket bind exactly address without problem case play role socket may exactly address port note binding socket exactly address port dying socket timewait state unexpected usually undesired side effect case socket still work beyond scope answer fortunately side effect rather rare practice one final thing know soreuseaddr everything written work long socket want bind address reuse enabled necessary socket one already bound timewait state also flag set bound code decides bind succeed fail inspects soreuseaddr flag socket fed bind call socket inspected flag even looked soreuseport soreuseport people would expect soreuseaddr basically soreuseport allows bind arbitrary number socket exactly source address port long prior bound socket also soreuseport set bound first socket bound address port soreuseport set socket bound exactly address port regardless socket soreuseport set first socket release binding unlike case soreuesaddr code handling soreuseport verify currently bound socket soreuseport set also verify socket conflicting address port soreuseport set bound soreuseport imply soreuseaddr mean socket soreuseport set bound another socket soreuseport set bound exactly address port bind fails expected also fails socket already dying timewait state able bind socket address port another socket timewait state requires either soreuseaddr set socket soreuseport must set socket prior binding course allowed set soreuseport soreuseaddr socket much say soreuseport added later soreuseaddr find many socket implementation system forked bsd code option added way bind two socket exactly socket address bsd prior option connect returning eaddrinuse people know bind may fail error eaddrinuse however start playing around address reuse may run strange situation connect fails error well remote address connect add socket already use connecting multiple socket exactly remote address never problem going wrong said top reply connection defined tuple five value remember also said five value must unique otherwise system distinguish two connection longer right well address reuse bind two socket protocol source address port mean three five value already two socket try connect socket also destination address port would create two connected socket whose tuples absolutely identical work least tcp connection udp connection real connection anyway data arrived either one two connection system could tell connection data belongs least destination address destination port must different either connection system problem identify connection incoming data belongs bind two socket protocol source address port try connect destination address port connect actually fail error eaddrinuse second socket try connect mean socket identical tuple five value already connected multicast address people ignore fact multicast address exist exist unicast address used onetoone communication multicast address used onetomany communication people got aware multicast address learned multicast address also existed even though feature never widely used public internet meaning soreuseaddr change multicast address allows multiple socket bound exactly combination source multicast address port word multicast address soreuseaddr behaves exactly soreuseport unicast address actually code treat soreuseaddr soreuseport identically multicast address mean could say soreuseaddr implies soreuseport multicast address way round freebsdopenbsdnetbsd rather late fork original bsd code three offer option bsd also behave way bsd macos macos x core macos simply bsdstyle unix named darwin based rather late fork bsd code bsd later even resynchronized time current freebsd code base mac o release apple could gain full posix compliance macos posix certified despite microkernel core mach rest kernel xnu basically bsd kernel macos offer option bsd also behave way bsd io watchos tvos io macos fork slightly modified trimmed kernel somewhat stripped user space toolset slightly different default framework set watchos tvos io fork stripped even especially watchos best knowledge behave exactly macos linux linux prior linux option soreuseaddr existed option behaves generally bsd two important exception long listening server tcp socket bound specific port soreuseaddr option entirely ignored socket targeting port binding second socket port possible also possible bsd without soreuseaddr set eg bind wildcard address specific one way round possible bsd set soreuseaddr bind port two different nonwildcard address always allowed aspect linux restrictive bsd second exception client socket option behaves exactly like soreuseport bsd long flag set bound reason allowing simply important able bind multiple socket exactly udp socket address various protocol used soreuseport prior behavior soreuseaddr altered accordingly fill gap aspect linux le restrictive bsd linux linux added option soreuseport linux well option behaves exactly like option bsd allows binding exactly address port number long socket option set prior binding yet still two difference soreuseport system prevent port hijacking one special limitation socket want share address port combination must belong process share effective user id one user steal port another user special magic somewhat compensate missing soexclbindsoexclusiveaddruse flag additionally kernel performs special magic soreuseport socket nt found operating system udp socket try distribute datagrams evenly tcp listening socket try distribute incoming connect request accepted calling accept evenly across socket share address port combination thus application easily open port multiple child process use soreuseport get inexpensive load balancing android even though whole android system somewhat different linux distribution core work slightly modified linux kernel thus everything applies linux apply android well window window know soreuseaddr option soreuseport setting soreuseaddr socket window behaves like setting soreuseport soreuseaddr socket bsd one exception socket soreuseaddr always bind exactly source address port already bound socket even socket option set bound behavior somewhat dangerous allows application steal connected port another application needle say major security implication microsoft realized might problem thus added another socket option soexclusiveaddruse setting soexclusiveaddruse socket make sure binding succeeds combination source address port owned exclusively socket socket bind even soreuseaddr set even detail flag soreuseaddr soexclusiveaddruse work window influence bindingrebinding microsoft kindly provided table similar table near top reply visit page scroll bit actually three table first one show old behavior prior window second one behavior window third one show behavior change window later bind call made different user solaris solaris successor sunos sunos originally based fork bsd sunos later based fork however merge bsd system v xenix degree solaris also bsd fork rather early one result solaris know soreuseaddr soreuseport soreuseaddr behaves pretty much bsd far know way get behavior soreuseport solaris mean possible bind two socket exactly address port similar window solaris option give socket exclusive binding option named soexclbind option set socket prior binding setting soreuseaddr another socket effect two socket tested address conflict eg socketa bound wildcard address socketb soreuseaddr enabled bound nonwildcard address port socketa bind normally succeed unless socketa soexclbind enabled case fail regardless soreuseaddr flag socketb system case system listed wrote little test program use find system handle two option also think result wrong please first run program posting comment possibly making false claim code requires build bit posix api network part compiler actually compiler work well long offer inttypesh stdboolh eg gcc supported long offering full support program need run least one interface system local interface ip address assigned default route set us interface program gather ip address use second specific address test possible combination think tcp udp protocol normal socket listen server socket multicast socket soreuseaddr set socket soreuseport set socket address combination make wildcard specific address second specific address found primary interface multicast test print result nice table also work system nt know soreuseport case option simply tested program easily test soreuseaddr act socket timewait state tricky force keep socket state fortunately operating system seems simply behave like bsd time programmer simply ignore existence state code include answer size limit code would push reply limit
49,Lobsters,osdev,OS,Windows and Linux: A Tale of Two Kernels (2004),https://www.youtube.com/watch?v=HdV9QuvgS_w,window linux tale two kernel,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature window linux tale two kernel teched youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature window linux tale two kernel teched youtube
50,Lobsters,osdev,OS,The OS Classics,https://www.allthingsdistributed.com/2020/07/the-os-classics.html,o classic,berkeley unix nikhef unix kernel design book networking book tanenbaum collection true o book classic absolutely fascinating,day ago fortunate pick copy book major impact early career kernel engineer design implementation bsd unix operating system samuel j leffler marshall kirk mckusick michael j karels john quarterman first authoritative description berkeley unix design implementation book cover internal structure bsd system concept data structure algorithm used implementing system facility importantly written practitioner builder gave insight academic text book would never give day internship nikhef still using collection pdp one task get run lot late night head scratching got done eventually learn boot tape zen returned school decommission pdp convinced put old big cleaning closet upgrade power room went right back building bsd kernel expertise started late computer science worked hard catch getting hand dirty posted twitter found book many peer came list book also read era list book shared unix kernel design book networking book tanenbaum collection true o book classic absolutely fascinating classic list think let know
51,Lobsters,osdev,OS,Ex-Solus Dev is Now Creating a Truly Modern Linux Distribution Called Serpent Linux,https://itsfoss.com/serpent-os-announcement/,exsolus dev creating truly modern linux distribution called serpent linux,please log,session expiredplease log login page open new tab logging close return page
52,Lobsters,osdev,OS,NetBSD Internals,https://www.netbsd.org/docs/internals/en/index.html,netbsd internals,,copyright netbsd foundation published netbsd indexhtml v leot exp
53,Lobsters,osdev,OS,(Genode) MNT Reform 2 - First Steps,https://genodians.org/skalk/2020-06-29-mnt-reform,genode mnt reform first step,mnt reform first step stefan kalkowski mnt reform mnt research gmbh unboxing picture interactive system diagram fosdem topic branch,mnt reform first step june stefan kalkowski recently honored receiving first beta mnt reform shipped mnt research gmbh interesting laptop project produced team three people lukas hartmann electronics software design ana beatriz albertini dantas product industrial design greta melnik sleeve design smd assembly curiosity small team designed customizable completelyopen robustandsustainable last least fancy device privacyaware hackerminded people contains selfdesigned motherboard accomodating systemonmodule systemonchip inside mechanical keyboard well either trackball trackpad everything inside open hardware download pcb schematic moreover mnt reform arrived box containing colored printing schematic well interested enjoy series unboxing picture limitation regarding openness naturally integratedcircuits including soc technical lead lukas hartmann chosen use nxp good choice regarding open documentation unlocked bootchain absence firmware blob due choice got aware highly interesting project reason made use imx soc series genode lab past looking deeper mnt reform became obvious share common mindset mnt research genode lab giving back control user cut long story short really excited mnt reform arrived expectation surpassed opening package first transparent professional communication policy mnt research gmbh pleasure box included laptop schematic detailed letter starting information reference felt like time travel father handed old hifi system included thick handbook schematic back well device constructed survive decade obviously planned near future reform operator handbook timebeing lucky scroll click interactive system diagram link relevant linux driver datasheets already experienced frustrating figure innards board socs might contain last year mnt reform nice contrast first failed turnon device reading annexed letter carefully realized simply circlekey combination turn device actually quite plausible easy recap interaction system controller firmware always done via circle key whereas mnt reform key used interact o better windowmanager playing bit linux distro preinstalled sdcard really enjoyed use keyboard trackball still bit harsh used assume run smoothly enwrapped hand patina genodian goal consume device making primary genode platform time unscrew acrylic glass bottom side connect serial usb converter serial pin reform current development machine interacting preinstalled uboot could successfully load first simple hello world alike genode system image reform memory via network therefore simply used image built originally imx evaluation kit us soc typically genode lab use uimage format uboot bootm command load system image first attempt boot image failed preinstalled uboot insisted devicetree blob provided well successfully booted showed genode hw kernelcore init testlog component running reform next step changing frequency cpu starting kernel booted cpu run ghz frequency actually capable run ghz first figured imx evk already integrated well testing infrastructure took quite time figure actual protocol bittwiddling plls look like finally run reasonable faster could onebyone adapt change mnt reform first midterm goal run interactive sculpt o reform similar one already presented imx evk fosdem earlier year therefore bunch driver networking persistence storage human interaction needed first place hope driver used already imx evk could used unmodified achieve indeed driver sdcard ethernet went outofthe box usb host controller driver functional contrast evk us one usb host controller imx soc reform us available one usb hub connected second one attache trackball keyboard usb hid device tweaking driver bit still us hardcoded io resource instead new platform driver arm could successfully see input event trackball keyboard attached mouse see picture last missing point display panel already linux driver port display controller subsystem dc display engine soc available genode however used enabled hdmi connectivity display panel reform connected via mobile industry processor interface mipi display serial interface dsi wo nt work without additional device driver integration fortunately colleague sebastian sumpf already begun port missing mipidsi piece run oled diplay connected evk board soon finished work gladly integrate mnt reform topic branch first sculpt o version available next bigger issue currently focus writing imx specific platform driver comprising clock power management turn driver using moreover shall manage pcix bus available quite important enable nvme wifi mnt reform
54,Lobsters,osdev,OS,Haiku activity report - May 2020,https://www.haiku-os.org/blog/pulkomandy/2020-06-28-haiku_activity_report_may_june_2020/,haiku activity report may,haiku activity report may released yet google summer code pulse file system driver network memory management user interface iconomatic webpositive appserver arm port,haiku activity report may mayjune activity report released yet yes probably already know beta version shipped available download lot work done towards release u decided take break haiku week compensate itgoogle summer codethe google summer code already reaching midpoint end first month coding period patch student getting merged go follow progress respective blogslet look change haiku code report cover note usual quite lot change brief summary impacting onespulsepulse one application inherited beos design bit aged time little cleanupan extra border around window removed management replicant cleaned make independant main window logo cpu manufacturer updated current one converted vector graphicsfile systemskyle ambroffkao continues work improving unit test fixing remaining problem handling symlinksthe driver properly report filesystem name depending disk mounted change behavior avoids confusion previously always said single driver version filesystem fact quite similar share large part codethe work xfs gsoc student also merged initial work towards listing content root directory progressdriverskorli quite busy adding new driver wmi smbios korli also worked improving support modern cpu including xsave instruction enabling use avx requires saving cpu register context switchesa bug usbmidi driver triggering kdl trying write part midi event also fixedrudolfc worked allowing usage secondary display case multiple video card mainly fullscreen video playing also resulted fixing somme issue ffmpeg addon video overlay supportwaddlesplash synchronized network driver freebsd finalized nvme driverbga fixed use physical addesses hda audio drivera combined effort multiple people wacom driver includes smap fix support new device improved mapping button pen pressure mouse eventsnetworksome issue behavior network stack fixed mostly around implementation getpeername leading bit refactoring better manage state socketssome costly sanity check network stack disabled release build resulting performance increasean useafterfree also identified fixed fixing one common kdl crashesmemory managementkorli mmlr fixed various problem suboptimal implementation memory handling making possible reserve address space without immediately mapping memory ituser interfacebefore release focus cleaning interface installer firstbootprompt make first experience haiku bit betterthe flag language firstbootprompt removed appropriate use flag associated country represent language extra icon added window make look le boring help navigate even unknown language way select keymap language also improved special case particular cyrillic language use latin qwerty keymap finally integrate keymapswitcher properly improved behavior scrolltoselection blistview keyboard navigation boutlinelistview bcolumnlistview started adding missing scripting support seveal interface kit component applicationsthe find panel tracker reworked bit clean larger refactor extra functionality planned annoying problem existing layout fixed waiting larger reworksome drawing glitch using stacked tab fixedvarious localization problem fixed found qa phase fix also made ui appearance mail diskusage filetypes time preferenceshaikudepot also received lot cleanup optimizationsthe font selection system appserver improved allows use thai textinput preference icon device handle mouse button also includes way block touchpad keyboard activeiconomaticthe svg parser iconomatic replaced nanosvg fixing various problem importing svg fileswebpositivea new version haikuwebkit finally released help kapix fix remaining bug us lot le memory crash le often better support modern website ongoing work update worked various area appserver using better way manage memory improving performance fixing various bugsarm started move uboot uefi bootloader allows reusing code version haiku provides easier environment bootloader run rely efi platformspecific work removing need implementing serial framebuffer driver bootloader
55,Lobsters,osdev,OS,Breaking the links: Exploiting the linker (2011),http://www.nth-dimension.org.uk/pub/BTL.pdf,breaking link exploiting linker,,obj goto endobj obj technical detail endobj obj goto endobj obj linker endobj obj goto endobj obj link editor endobj obj goto endobj obj runtime linker endobj obj goto endobj obj linker attack surface endobj obj goto endobj obj process linking executing endobj obj goto endobj obj environment endobj obj goto endobj obj file endobj obj goto endobj obj issetugid friend endobj obj goto endobj obj real world exploitation endobj obj goto endobj obj runtime linker interpreter endobj obj goto endobj obj empty library endobj obj goto endobj obj sigsegving year endobj obj goto endobj obj rpath endobj obj goto endobj obj debian make sad endobj obj goto endobj obj environment variable set nt trust still endobj obj goto endobj obj reflection trusting trust revisited endobj obj goto endobj obj mapping null endobj obj goto endobj obj auditing script binary source endobj obj goto endobj obj script endobj obj goto endobj obj binary endobj obj goto endobj obj source endobj obj goto endobj obj research endobj obj goto endobj obj linkers endobj obj goto endobj obj change endobj obj goto r fit endobj obj length filter flatedecode stream hn dç wk q l w endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream l c n endstream endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r group r endobj obj type xobject subtype form formtype ptexfilename processflowforruntimelinkerpdf ptexpagenumber ptexinfodict r bbox group r resource font r procset pdf text length filter flatedecode stream j aq fvj ۂ ej yq dx b g
56,Lobsters,osdev,OS,NILFS2 (New Implementation of a Log-structured File System),https://en.wikipedia.org/wiki/NILFS,new implementation logstructured file system,logstructured file system linux kernel nippon telegraph telephone corporation cyberspace laboratory gnu general public license copyonwrite seek time data loss crash reboots journal solaris operating system bsds snapshot edit btrfs sox btree year problem edit edit edit checksum superblock eib edit debian ubuntu centos fedora opensuse gentoo prrescue arch linux linux mint nixos bsd netbsd edit sd card filesystems embedded system linuxconfau edit edit edit edit edit,nilfs new implementation logstructured file system logstructured file system implementation linux kernel developed nippon telegraph telephone corporation ntt cyberspace laboratory community world nilfs released term gnu general public license gpl nilfs logstructured filesystem storage medium treated like circular buffer new block always written end logstructured filesystems often used flash medium since naturally perform wearleveling nilfs emphasizes snapshot logstructured approach specific form copyonwrite behavior naturally lends creation filesystem snapshot nilfs developer talk creation continuous snapshot used recover userinitiated filesystem problem using copyonwrite technique known nothing life free nilfs record data continuous loglike format appended never overwritten approach designed reduce seek time well minimize kind data loss occurs crash conventional file system example data loss occurs file system system crash write operation system reboots journal note write complete partial data writes lost file system like ufsderived file system used solaris operating system bsds provide snapshot feature prevents citation needed data loss snapshot configuration lengthy large file system nilfs contrast continuously automatically save instantaneous state file system without interrupting service according ntt lab instantaneous state nilfs continuously save actually mounted readonly time actual file system mounted readwrite capability useful data recovery hardware failure system crash lscp list checkpoint command interactive nilfs inspect utility first used find checkpoint address case inspect nilfs listcp tue jul majorcplogibeginlogiend tue jul majorcplogiend nilfs quit checkpoint address used mount checkpoint mount nilfs r nilfscp df filesystem used available use mounted nilfs nilfscp feature edit nilfs provides continuous snapshotting addition versioning capability entire file system user even restore file mistakenly overwritten deleted recent time since nilfs keep consistency like conventional lf achieves quick recovery system crash continuous snapshotting provided filesystem including supporting pointintime snapshotting eg btrfs nilfs creates number checkpoint every second per synchronous write basis unless change user select significant version among continuously created checkpoint change snapshot preserved changed back checkpoint limit number snapshot volume get full snapshot mountable readonly file system mountable concurrently writable mount snapshot feature convenient make consistent backup use possible us nilfs include versioning tamper detection sox compliance logging data loss recovery current major version nilfs version referred implement online garbage collection reclaim disk space keeping multiple snapshot nilfs feature include btree based file inode management immediate recovery system crash data structure support many file large file disk ondisk timestamps free year problem current status edit supported feature edit basic posix file system feature snapshot automatically continuously taken limit number snapshot volume get full mountable readonly file system mountable concurrently writable mount convenient make consistent backup use quick listing background garbage collection maintain multiple snapshot selectable gc policy given userland daemon quick crash recovery onmount readahead meta data file well data file block size smaller page size eg online resizing since nilfsutils related utility contribution jiro sekiba utillinux blkid libblkid uuid mount udisks palimpsest filesystem label nilfstune additional feature edit fast write recovery time minimal damage file data system consistency hardware failure checksum data metadata integrity assurance per block group segment summary correctly ordered data metadata writes redundant superblock internal data processed wide word size create store huge file eib o compatibility edit distribution description debian nilfs available debian later ubuntu nilfs available ubuntu later centos centos centos available fedora building installing required order use nilfs fedora fedora later user also need build kernel module explained step opensuse opensuse suse linux enterprise available opensuse build service gentoo nilfs available gentoo linux bootcd nilfs available prrescue arch linux nilfs available arch linux linux mint nilfs available linux mint nixos nilfs available nixos nilfs merged linux kernel distribution nilfs available outofthebox user need download nilfsutils nilfstools package following instruction separate bsd licensed implementation currently readonly support included netbsd relative performance edit january presentation sd card filesystems embedded system linuxconfau stated got workload latency sensitive might want use nilfs got one throughput sensitive might want use peter chubb work much better lot small file case peter chubb license edit filesystem utility made available gnu public license version exception libnilfs library header file made available gnu lesser general public license version developer edit japanese primary author major contributor nilfsutils worked working lab ntt corporation ryusuke konishi primary maintainer koji sato naruhiko kamimura seiji kihara yoshiji amagai hisashi hifumi satoshi moriai major contributor andreas rohner dan mcgee david arendt david smid dexen devries dmitry smirnov eric sandeen jiro sekiba matteo frigo hitoshi mitake takashi iwai vyacheslav dubeyko see also edit reference edit external link edit
57,Lobsters,osdev,OS,"General-purpose OS, special-purpose OS, and now: vendor-purpose OS",https://drewdevault.com/2020/06/26/Vendor-purpose-OS.html,generalpurpose o specialpurpose o vendorpurpose o,,historically two kind operating system generalpurpose specialpurpose role defined function serve user example generalpurpose operating system include unix linux bsd etc solaris haiku plan wellsuited general computing task optimized solve problem possible perhaps expense niche domain specialpurpose operating system serve niche domain le suitable general computing example include freertos rockbox genode term distinguish operating system problem solve user however disturbing trend emerging user party whose problem solved perhaps call new term propose vendorpurpose operating system would use term describe window macos android io perhaps others besides arguably first two used general purpose operating system latter two specialpurpose operating system increasingly operating system making design decision benefit vendor expense user example window ad excessive spyware prevents making local login without microsoft account aggressively push switch edge web browser well many example besides apple subtle enduser perspective eschew standard build walled garden opting metal rather vulkan example use cryptographic signature enforce racket developer want ship program bully vendor app store adding thing like microtransactions increase revenue also long making similar move hardware design adding antifeatures explicitly designed increase profit adding false cost ultimately passed onto consumer decision making o worse user order provide value vendor operating system becoming le suited generalpurpose task vendorpurpose antifeatures deliberately get way also become le suited specialpurpose task reason change making improvement one purpose vendor purpose therefore going start refering operating system vendor purpose generally alongside curse raising middle finger
58,Lobsters,osdev,OS,Re-stacking the GUI stack,https://genodians.org/nfeske/2020-06-23-gui-stack,restacking gui stack,restacking gui stack norman feske current state relationship nitpicker evolutionary tweak inverting interface plan change change,restacking gui stack june norman feske currently right middle farreaching rework genode lowlevel gui stack like share bit background behind work current state current incarnation genode lowlevel guirelated interface almost identical first version originally created genode strong asymmetric notion relationship client server component relationship client depends server server depend client lowest level framebuffer driver input driver envisioned server provide framebuffer input session interface higherlevel gui component former academic view felt natural driver provide resource component provide serve server nitpicker gui server us lowlevel service implement higher level service ultimately allows multiplexing graphic input nitpicker virtualizes lowlevel framebuffer input interface supplementing notion visible view input focus system look follows driver nitpicker gui server displayed red server gui application right nitpicker client nitpicker turn client framebuffer input driver client interface nitpicker gui server success story evolutionary tweak notwithstanding original design scale windowed working environment sculpt o retaining tiny complexity nitpicker gui server however approach modelling framebuffer input driver server dead end following reason driver sometimes extremely complex looking complexity intel framebuffer driver ported linux kernel example feel foolish trust wo nt fail nitpicker gui server depends liveliness driver however wellbeing driver critical path entire gui stack gui application impossible transparently restart replace driver runtime without also restarting gui stack transitively gui application nitpicker gui server connected client driver connection like life supply gui server cutting would ultimately kill gui server adding secondary display rather difficult would require nitpicker know framebuffer server request multiple framebuffer connection adding protocol would inflate complexity nitpicker inverting interface overcome limitation must break dependency gui server driver like illustrated scenario gui server longer us driver driver use gui server relationship reversed nitpicker gui server remains red course driver talk nitpicker gui server via nitpicker regular client interface instead two new interface enter picture capture session interface like inverse original framebuffer session interface allows client obtain pixel data server gui server perspective framebuffer driver like frame capturing device event session interface like inverse original input session interface contrast input session allows client obtain input event event session allows client induce input event nitpicker event server consumes input event driver benefit approach manifold lowcomplexity gui server remains component must never fail make gui stack much resilient compared today since nitpicker gui server longer depends driver started driver running speeding boot time graphical scenario scenario rigid power management remove graphic driver switch graphic device gui server gui application stay intact driver restarted anytime perspective nitpicker gui server look like client disconnect connect driver also replaced runtime eg swapping vesa intel driver connecting one driver nitpicker gui server becomes conceptually simple clear path towards multihead support new capture session interface nitpicker gui server would right hook implementing screenshotscreencast application remote desktop server analogously capture device input device enter leave system time without disruption allow finegrained management usb hid device think plugging new hid device sculpt system new usb device would show user deploy matching hid driver option routing event session driver system gui server nt wonderful downside lot work lead u following section plan turning lowlevel session interface upside invasive operation must carried several step yielding intermediate consistent state start lowrisk cosmetic change namely renaming nitpicker session interface gui session strange branding session interface particular implementation relic early day change already entered genode master branch consistently use rgb pixel format driver application longstanding feature request eliminates need colorspace conversion generally improves output quality quite laborintensive requires testing many different hardware platform covering driver vesafbdrv fbsdl intelfbdrv rpifbdrv bootfbdrv change already progressed well introducing new capture session interface implementing capture service nitpicker gui server introduce nitpicker option choose framebuffer back end use requested framebuffer session done today use capture client pixel output use another gui server stacking multiple instance nitpicker turn framebuffer driver capture client covering driver mentioned shoveling code adjusting existing scenario use nitpicker capture service pruning remaining use framebuffer client interface fact done want remove framebuffer connection completely require reworking terminal mesa back end several test liquidframebuffer process hope largely eliminate use case nitfb called guifb component component removed end turning framebuffer client capture server particular testframebuffer fbbench testdrivermanager removal framebuffer session interface retaining interface merely part gui session introducing new event session interface adding implementation nitpicker gui server adding new eventfilter component taking place inputfilter structural change done would time optimization prerequisite tearfree animation frame buffering moved client nitpicker gui server first transparent client subsequent removal clientside buffering second independent step another optimization plan go though place employed dithering pixel topic rework framebuffer driver certainly elaborate one considering drop driver even though strive replacing input session interface new event session interface scope task reworking input driver yet completely tangible
59,Lobsters,osdev,OS,Learning operating system development using Linux kernel and Raspberry Pi,https://s-matyukevich.github.io/raspberry-pi-os/,learning operating system development using linux kernel raspberry pi,learning operating system development using linux kernel raspberry pi linux kernel raspberry pi src introduction contribution guide table content introduction contribution guide prerequisite lesson kernel initialization lesson processor initialization lesson interrupt handling lesson process scheduler lesson user process system call lesson virtual memory management lesson signal interrupt waiting lesson file system lesson executable file elf lesson driver lesson networking,learning operating system development using linux kernel raspberry pi repository contains stepbystep guide teach create simple operating system o kernel scratch call o raspberry pi o rpi o rpi o source code largely based linux kernel o limited functionality support raspberry pi lesson designed way first explains kernel feature implemented rpi o try demonstrate functionality work linux kernel lesson corresponding folder src directory contains snapshot o source code time lesson completed allows introduction new concept gracefully help reader follow evolution rpi o understanding guide require specific o development skill information project goal history please read introduction project still active development willing participate please read contribution guide table content introduction contribution guide prerequisite lesson kernel initialization lesson processor initialization lesson interrupt handling lesson process scheduler lesson user process system call lesson virtual memory management lesson signal interrupt waiting done lesson file system done lesson executable file elf done lesson driver done lesson networking done
60,Lobsters,osdev,OS,A NVIDIA Engineer In His Spare Time Wrote A Vulkan Driver That Works On Older Raspberry Pi,https://www.phoronix.com/scan.php?page=news_item&px=RPi-VK-Driver,nvidia engineer spare time wrote vulkan driver work older raspberry pi,vulkan driver development raspberry pi future model github repository,raspberry pi raspberry pi model b even raspberry pi zero see vulkan support via new unofficial rpivkdriver offering even better performance broadcom opengl driver vulkan driver development raspberry pi future model newer broadcom videocore gpu officially support vulkan independent developer developing vulkan driver videocore iv gpu found sbcs videocore nt compliant vulkan full enough effort vulkan driver brought new rpivkdriver developed past two year martin thomas graphic engineer currently working nvidia developed driver spare time reportedly took two year get unofficial vulkan driver shape friday release unofficial vulkan driver videocore iv implement subset api various hardware limitation encountered enough like run driver good speed performance compared opengl driver quite good thanks better memory management multithreaded command submission improvement detail raspberry pi vulkan driver older board via github repository
61,Lobsters,osdev,OS,Micro benchmarks - what can possibly go wrong,https://genodians.org/skalk/2020-06-18-micro-benchmarking,micro benchmark possibly go wrong,micro benchmark possibly go wrong stefan kalkowski,micro benchmark possibly go wrong june stefan kalkowski time time need compare execution time memory throughput genode hwkernel baseline typically using linux regarding one hardware platform supported genode mostly done hwkernel ported new hardware experience unusual workload platform like recently investigating nonworking usb driver raspberry pi diving implementation detail complex driver first liked exclude hwkernel initializes hardware inappropriatedly driver would enough cpu time experience high latency past used simple bogomips routine timetotime could executed top linux genode void bogomips attribute optimize void bogomips register unsigned observing moreorless runtime system executing loop confident least cpu run frequency big configuration issue regarding cpu course lazy presumed linux kernel developer configured hardware correctly compiler would produce instruction touch memory within loop otherwise would measure memory access latency instead cpu execution time initially writing compiling simple loop course checked resulting binary looked dissassembled code different architecture produced assumed outcome mean exitcondition value got transfered one register another zeroinitialized register got incremented reached value first one recycling approach recent toolchain genode testing raspberry pi could observe compiler produced following code push fp add fp sp mov ldr pc cmp bhi add eafffffa b nop sub sp fp pop fp bx lr word one see exitcondition value stored address loaded every loop cycle would rather measure memory access time therefore bite bullet provide assembler routine per architecture instead using highlevel language function measuring wrote something like global bogomips bogomips push mov cmp addne nop bne pop mov pc lr called like bogomips routine executes billion instruction including branch every forth one executing routine linux genode could measure genode needed twice long linux execute loop second short review round platform initialization code quickly found branch predictor specific cpu never enabled since raspberry pi support entered genode lucky finding sure behave exactly like linux instead measure still much slower ok first thinking probably linux kernel change clock speed cpu round investigating instrumenting linux kernel could find something related platform call firmware running gpu change cpu clock rate linux driver calling firmware gpu side called change attempt raise clock speed genode dynamically failed learned configure maximum minimum clock speed value load time firmware able change runtime anyway clock speed linux genode excursion deadend find point linux toggling right switch moved bogomips loop beginging linux kernel behold slow genode moved stepbystep end kernel initialization kept slow executing assembler loop normal linux user programm took bit second whereever executed kernel took bit second time measured genode even put routine kernel module loaded dynamically kept slower therefore intensively studied linux kernel us pagetable attribute different memory area thought might use arm tex remap approach platform nope differentiation attribute learned linux us even different memory domain io kern user platform something somehow compareable segmentation however whatever paging attribute genode kept slow desperately turned paging compatibility format effectlively turning access permission flag became faster unexpected loop fit perfectly instruction cache need fetch memory also executed inside kernel disabled interrupt never got interrupted nonetheless turning certain permission bit relevant mmu tlb usage using pagetable format whole loop became second faster impact whole mostly invisible speculative execution complex became apparent finally threw away experiment course kept enabled branch predictor second look compilation linux userland program genode component course assembler routine identically might guess already uh linked differently aligned address genode wordaligned like need arm linux routine aligned moving linux routine artificially adding nop instruction beginning routine became slow genode thumping table head realized microbenchmarking adult btw probably happened used two different compiler yes sebastian right never benchmarking genode toolchain available arm linux used gcc raspbian package thought matter instruction measure written hand assembler anyway even using compiler due different environment assembler routine linked define alignment explicitely otherwise might compare completely different hardware codepathes inside blackbox mystery called modern cpu
62,Lobsters,osdev,OS,Genodes Consistent Block Encrypter (CBE) in Sculpt OS,https://www.youtube.com/watch?v=-UDo7sf-14E,genodes consistent block encrypter cbe sculpt o,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature genodes consistent block encrypter cbe sculpt o youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature genodes consistent block encrypter cbe sculpt o youtube
63,Lobsters,osdev,OS,Guix Further Reduces Bootstrap Seed to 25%,https://guix.gnu.org/blog/2020/guix-further-reduces-bootstrap-seed-to-25/,guix reduces bootstrap seed,guix reduces bootstrap seed previous blog post breaking bitcoin conference fun remarkably gentle introduction short talk reduced binary seed bootstrap gash gash core utils gnu me delicate balancing new bootstrap source package version full graph nlnet foundation sponsored work lost path new happy correct happy towards universal full source bootstrap nlnet foundation decided sponsor work trusted arm bootstrapping work bootstrappable build gnu me variety reason bootstrappable build gnu me lightly patched tinycc gnu guix gnu guix respect user freedom guile scheme,guix reduces bootstrap seed jan janneke nieuwenhuizen june delighted announce second reduction guix bootstrap binary officially released initial set binary package built weighs approximately quarter used bein previous blog post elaborate reduction bootstrappability general important one reason eliminate greatly reduce attack surface attack last summer breaking bitcoin conference carl dong gave fun remarkably gentle introduction also gave short talk choose believe building source proper way computing follows attack symptom incomplete missing bootstrap storyfurther reduced binary seed bootstraplast year first reduction removed gcc glibc binutils binary seed new reduced binary seed bootstrap merged guix master last month remove containing gnu awk bash gnu core utility grep gzip gnu make patch sed tar xz replaces gash gash core utils gash minimalist posix shell written guile scheme gash core utils scheme implementation tool found gnuâ coreutils well essential bit awk grep sedafter three new gnu me release numerous me c library update fix major update gash first official gash utils release delicate balancing new bootstrap source package version bottom package graph look like woohoo gccmesboot binutilsmesboot glibcmesboot gcccoremesboot bashmesboot gawkmesboot diffutilsmesboot patchmesboot sedmesboot gnumakemesboot gzipmesboot tccboot mesboot gashboot gashutilsboot bootstrapmescctools bootstrapmes mib bootstrapguile mib full graphwe excited nlnet foundation sponsored work however nt done yet far itlost pathsthe idea reproducible build bootstrappable software new much implemented gnu tool early working recreate present time show u much practice forgottenreaders familiar gnu toolchain may noticed version number mesboot source package great new bootstrap ancient problemtypically newer version tool chain fix kind bug make software easier build add support new cpu architecture great however often simultaneously new feature introduced dependency added necessary bootstrapping may increase bootstrap hurdle sometimes newer tool strict old configure script recognise newer tool versionsa trivial example gnu sed current bootstrap using version released recently latest version sed could hope bootstrap newer release ship xzcompressed tarballs xz notoriously difficult bootstrap need fairly recent gcc try building without sed luckily sed maintainer jim meyering happy correct mistake starting release also gzipcompressed tarballs shipped similar gnu core utils release made probably useless bootstrapping confronted information also coreutils maintainer brady happy release also gzip compression oneven simple case show solving bootstrap problem done together gnu really projectwide responsibility need addressedmost bootstrap problem loop easy solve sometimes obvious answer example example make delightful puzzle bootstrappability perspective would love see maintainer gnu software consider bootstrappability start taking responsibility bootstrap story packagestowards universal full source bootstrapour next target third reduction fullsource bootstrap replace mescctools gnu me binary project jeremiah orians start everything byte virtually nothing look incredible project already done sowe grateful excited nlnet foundation decided sponsor work reduced bootstrap currently applies architecture thrilled arm joining soon trusted arm bootstrapping work progressing nicely gnu me passing entire mescc test suite native passing nigh entire gcc test suite native work underway compile tcc using gnu me adding second architecture important one towards creation universal bootstrap upcoming release gash gashutils allow u clean bottom package graph remove many package particular next version gashutils sophisticated enough build everything gccmesboot using old version gnu make gzip largely thanks improvement implementation awk includes nearly standard featureslooking even future likely remove helpful stepping stone reach straight interesting time ahead bootstrappable build gnu messoftware bootstrappable depend binary seed built source software bootstrappable even free software serious security risk variety reason bootstrappable build project aim reduce number size binary seed bare minimumgnu me closely related bootstrappable build project me aim create entirely sourcebased bootstrapping path guix system interested gnulinux distribution goal start minimal easily inspectable binary readable source bootstrap something close schemecurrently me consists mutual selfhosting scheme interpreter c compiler also implement c library me scheme interpreter written line code simple c mescc c compiler written scheme together me mescc compile lightly patched tinycc selfhosting using tinycc me c library possible bootstrap entire guix system gnu guixgnu guix transactional package manager advanced distribution gnu system respect user freedom guix used top system running kernel linux used standalone operating system distribution machinesin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection used standalone gnulinux distribution guix offer declarative stateless approach operating system configuration management guix highly customizable hackable guile programming interface extension scheme language
64,Lobsters,osdev,OS,The Amber Operating System (1984),http://www.mit.edu/~cbf/thesis.htm,amber operating system,amber operating system massachusetts institute technology table content multicsvm unix corbató primo saltzer schroeder cambridgecap demo multicskernel paging lispmachine,amber operating system charles frankston submitted partial fulfillment requirement degree bachelor science massachusetts institute technology may signature author department electrical engineering computer science may certified thesis supervisor f j corbató accepted chairman departmental committee amber operating system similar multics based unique capability oriented model amber intended advance state art multifunction operating system design kernel amber operating system described goal design decision made arriving final form explained detail amber design team original six ted anderson jeff broughton hon wah chin lee park daniel weinreb set accomplish dream later addition earl killian jay pattin joined spite obvious problem dedicated idealism youth table content large multifunction operating system created scratch recent year expense belief system complex emergence portable operating system trend toward single user computer factor building system however several reason premature declare era large multifunction operating system passed despite increasing trend toward use personal computer still many problem require large tightly coupled aggregation compute power memory bandwidth secondary storage ie large computer system example large scale numerical calculation manipulation large database large scale operating system use today glaring deficiency area usability efficiency maintainability particular human engineering operating system use today simply awful notion single user machine somehow obviate need complex operating system fallacious system made simple eliminating complicated feature multitasking memory management protection however personal computer need run serious program networked environment need face issue anyway eliminating feature base system merely result application implement amber operating system team started belief enough system could built would significantly better existing system many area document chronicle design effort background chapter outline circumstance system creation goal believed system meet structure chapter describes kernel concept explains adopted amber feature chapter describes detail feature felt important system chapter kernel model describes abstract model implemented kernel lastly implementation chapter quick overview implementation technique used amber amber new operating system designed use computer system built lawrence livermore national laboratory livermore california processor high performance roughly half throughput floating point operation central processor featuring large virtual address space paged segmented manner similar multics multicsvm full design allows processor connected common main memory via crossbar switch form multiprocessor configuration design effort amber number goal well requirement dictated nature computer system project creating goal multiprocessor support already mentioned additional goal system support various mode usage timeshared interactive use real time control sensor effector large scale computeintensive job scale capability processor suggested various mode usage occur concurrently far possible clear outset system large would often shared one community user dictated additional set goal system isolation operating system keep user interfering access control access information among user carefully controlled security mechanism isolation access control secure isolation goal mean behavior user program intentional otherwise cause another user program behave unexpected fashion includes undue degradation system performance security goal go without saying except many system attempt provide isolation access control provide long user take advantage bug hole system subvert protection mechanism sometimes hole small implementation error basic flaw system architecture also another set goal decided design team sharing sharing program data among user easy natural usability system set new standard usability human interface maintainability note achieving sharing time providing access control make difficult sharing could easily provided allowing user read write data system access control could provided forbidding user accessing data allowing user indicate convenient way precisely allowed access data system much substantial problem call combination two goal controlled sharing strong commitment support controlled sharing amber somewhat contrast recent trend away elaborate protection structure operating system favor dedicated use computer system single group even single individual design team believed simpler view rather shortsighted issue controlled sharing information important one dedicating computer specific community move control issue single operating system architecture architecture network structure sooner later connect computer together system usable seems almost obvious state yet far attained existing system usability break two area human engineering maintainability human engineering simply system easy natural people use maintainability really human engineering another guise system may easy use end quite lot work charged keeping system functioning properly day day good example original unix unix file system much praised tree structured appearance user maintenance generally requires someone site capable patching file system internal structure becomes inconsistent easily finally clear list goal intended create practical system set operating system research although may done foremost goal create system would stand well day day usage help people computer scientist get work done term operating system often used rather loosely sometimes refers whole collection program provided computer system ie whatever manufacturer system might provide stricter usage portion system directly control running system eg task scheduler low level input output routine like computer performing function issuing input output task switching done hardware special mode referred supervisor state many machine call privileged mode refer portion system run privileged mode kernel system kernel run entirely privileged mode amber kernel list goal amber expected satisfy many conceivable way organizing system satisfy goal historically two reason operating system created computer one merely provide library frequently used subroutine would always available usually input output routine second compelling reason provide mechanism allowing multiple user use single computer system without interfering way goal contradictory operating system mechanism providing library subroutine function presuming constraint memory limitation nt preclude would seem advantageous include many function possible kernel operating system however primary purpose operating system multiplex one computer system among many user would better keep kernel small simple possible desire stem problem ensuring one protection model properly implemented large complicated system sort mechanism related protection built often proven difficult ascertain protection function work correctly protection model term describing set mechanism keep user computer system interfering eg reading writing data supposed yet allows read share information supposed two goal difficult reconcile best way realizing one misplaced necessary put function inside operating system kernel order make function generally available sometimes necessary generally due inadequate subroutine linkage facility present many system system poor subroutine linkage facility making everything kernel call convenient kernel call usually done hardware trap instruction thus easy get code inside kernel shared user subroutine may etc however section dynamic linking show subroutine need inside kernel easy use go depth problem putting many function kernel good criterion put kernel whatever done without increasing privilege example would accessing shared peripheral disk drive terminal multiplexor user program allowed access device would enable program read user data output another user terminal thus sort privileged system call must provided make sure user read data output terminal hand set subroutine implement uniform protocol io operation need kernel since change privilege involved system follows criterion choosing function put kernel called kernel based kernel based system typically property much code outside kernel inside structure kernel though strong influence system whole appear user indeed merely sat designed operating system kernel would job incomplete one would also need many function outside kernel system usable would probably done good job needed model conception purpose system whole used one top design implement model would include kernel nonkernel function decision function go kernel made according aforementioned criterion unfortunately case operating system standard system design scenario simple operating system provides set interface use yet unwritten even unanticipated application therefore choice function one try put system whole really largely matter experience judgment rest section devoted reconstructing reasoning process motivation behind way amber structured many way multics system corbató considered prototype amber prior system studied multics came closest meeting goal set amber multics offer combination feature found system many place system similar feature multics implementation tends complete better thought universally true certainly many good idea multics chapter attempt identify feature order set specific goal amber important function operating system offer support interactive use program development file system file system existing system differ widely functionality richness naming structure criterion multics offer tree structured naming hierarchy long character name multiple coequal name file symbolic file system link two feature found multics available tenex later file system version number file name completion finally feature discussed multics time exists one system aware lmfs file system symbolics designed amber user defined property list file name completion actually function user interface organization file system however expensive use command completion directory organized command completion mind multics store file name hash table make command completion expensive amber us balanced binary tree recently symbolic file system link seemed mit secret found multics two homegrown mit system magicsix interdataperkinelmer bit machine however symbolic link added release berkeley unix feature free user constraint strict hierarchy tree structure imposes flexibility essential good name space management earlier version unix offer form nonsymbolic file system link sometimes called hard link problem hard link point specific instance file actually internal file number rather file name therefore hard link put place prior creation file destination file removed later restored hard link broken example problem approach simple case writing file text editor system crash interruption occurs writing buffer editor one left portion file disk guard many system write file temporary name rename file permanent name deleting old file preferably rename delete step atomic done unix link original file would lost since edited result different file number user defined property list give user program place keep note file one expected use facility keep name program used access file one could store text file many different internal organization provide uniform interface putting name appropriate access routine property list end debate going many year whether text file stored stream character list line oriented record computer used one person especially one group people group community user department corporation different corporation mean provided keep information private pointed already however extreme case user access data likely data plus public file acceptable desired specific way indicating may may read write specific file group file protection model often called discretionary access control course maintaining exhaustive list file user may access get quite cumbersome mechanism grouping file access entry needed directory structure already provides mean grouping file easy provide access setting command apply file directory argument whether better implicitly inherit access directory wo nt go also mechanism grouping user grant access multics provides mechanism form project identifier access control list consist person projectid component ie jruserfooproject either component may replaced wild card character thus aproject would grant access anyone aproject user registered one project different multics site tended use project different way site project might correspond purpose user using system moment whereas site user project might reflect group user community belongs problem multics project intimately intertwined resource accounting mechanism one logged one project time also user create arbitrary grouping user file file system creating project requires special system privilege result led multics long access control list specifying many username term andor need log one project another order exercise one access right solution adopted amber similar primo primo essentially create one level symbolic name space user create entity file system hold list user access control purpose name list appear access control list provides good way grouping access name added feature since access given group identifier user added removed group effect change automatically reflected access available user necessary locate every file user may granted access order apply change one advantage multics project scheme used provide fire wall sort sometimes access deliberately granted specific project specific user specific project different project user commonly log done case access important privilege user want able exercise accident worse yet subversion solution amber based generalization tenex wheel feature wheel tenex essentially override protection mechanism however avoid accidentally exercising powerful privilege ordinary work machine wheel capability must explicitly enabled wheel usually enable wheel capability perform specific task needed special privilege disable state rest session undisturbed making mechanism much convenient logging logging amber scheme user must explicitly enable group access one time expected user would set default list enabled log access right considered dangerous could explicitly enable disable way tenex wheel might get explaining detail amber capability model also see elaborate mechanism set whereby user dangerous access might held trusted server would demand special password additional verification releasing could used guard trojan horse attack trojan horse attack someone privileged account convinced run program provided user belief program harmless fact system program run privileged user account exercise privilege often without knowing access control list model protection object list grant selected entity user access privilege capability system hand associate entity list object entity access overall discussion approach found saltzer schroeder insightful examination duality two concept found certain thing capability scheme access control scheme ca nt awkwardly many academic system cambridgecap built using capability model modern commercial system multics primo data general aos rumored new release vaxvms seem opted obvious access control list scheme capability scheme useful access determined procedurally rather statically capability based system therefore handle much complicated rule access must built access control list system capability allow one pas access right object server process still retain revocation right example system deal line printer server generally make server highly privileged task case multics leave explicit access entry file system server privileged server often source security hole capability system one pas server capability specific job hand quickly revoke job done full capability system like hydra also implement mutually suspicious subsystem need discus amber model combination access control capability model attempt provide advantage explained fully section kernel model many existing operating system running computer support large address space provide remarkably poor facility managing address space example vaxvms berkeley unix system require region disk configured act swap area thus though use paged virtual memory freed program need preallocate main memory installation must still preallocate disk space swap area installation afford preallocate enough disk space allow couple user large address space program written system still tend much aware address space consumption use sparse allocation advantage sparse allocation elegant solution age old problem suppose program one large table size difficult estimate advance example might assembler would like maintain symbol program assembled one table object code produced thus far another table stack grows shrink statement expression analysis prior virtual memory one might make initial guess size table position fixed place memory guess wrong table outgrew initial allocation threatened collide end memory simple program simply work complex one sort code try rearrange table swap auxiliary disk file handling contingency made program complex hard maintain increased running time drastically segmented virtual memory form multics introduced allows one put table far enough apart practically assumed never collide segmented memory address composed two part segment number offset within segment segment particular size multics special hardware detect address reference fall outside bound segment useful debugging feature multics segment word long segment large entire address space although amber support segment half size segmentation aid programmer managing memory allowing different object table assigned segment however job system must manage segment easy segment grow shrink rapidly object holding grows shrink eg execution stack early system supported segmentation spent undue amount time shuffling segment back forth memory block transfer instruction included dec architecture job solution job efficiently managing segment divide fixed size page segment could word long multics formed page word position page segment described array pointer called page table thus need occupy contiguous physical memory address eliminates need memory shuffling order deal dynamic behavior segment size demand page fit primary memory kernel automatically move extra page disk bring back main memory demand called demand paging many computer hardware needed implement demand paging digital vax ibm operating system implement paged segmented memory management vaxvms berkeley vax unix mv ibm operating system suffer extent swap space problem alluded architecture necessary hardware demand paging large address space vax ibm extended addressing option still use technique segmentation allocating contiguous range page represent segment however feature trapping reference overflow segment boundary multics hardware provide feature primarily debugging aid important one multics us segment way free preallocation problem system swap space file file system assigned segment user address space process called mapping file simply system call take file name return segment number system take care making file appear main memory reference modification make sure modification properly reflected disk copy memory user address space exists file file system correspondingly every file file system mapped segment user address space presuming user access file nt already used segment number address space etc system like berkeley unix vaxvms disk two copy program run one file system copy program run eg file binprogramname another copy swap area multics need one copy object program since page directly file system even advantage using virtual memory update large writable database storage system subroutine extremely useful technique reducing amount code one might write get particular job done computer given fact remarkable system make user go call subroutine traditional method linking subroutine sometimes called linkage editing loading copy object code subroutine file copy main program several disadvantage every program us subroutine need copy waste disk space storing subroutine copy make virtually impossible share subroutine main memory well subroutine updated reason improvement bug fix feature impossible find old copy replace configuration control awkward requires many copy much disk space configuration control one might execute main program different configuration selected choosing different set subroutine suit particular set circumstance example program us different graphic driver depending sort device used system go lot trouble allow sort delayed binding special case usually call device independent io possible subroutine program call must exist link time make debugging difficult entirely precludes situation subroutine called anticipated example mail sending program might wish facility whereby user type name text editor wish use many system special mechanism handle case come naturally dynamic linking one main program one large subsystem call another may necessary entirely copy one subsystem object file using editor mailer example perfectly possible one want able use editor mail program mail program editor object file must contain quite mess result dynamic linking implemented compiler output object file directly executable external reference set trap taken first time used trap handler mean finding symbolic name reference referred trap handler us information find subroutine variable referenced place item address space nt already replaces trap direct reference item multics trap handler called simply linker us naming convention file system user setable list directory search resolving link user great deal control procedure via manipulation search rule file system name space system also seems work far better novice user since standard library already set search rule novice barely even aware linking going contrast system inexplicable reason even require user remember type name library must searched find run time routine language using number technique besides dynamic linking system adopted solve problem associated linkage editing load go technique load subroutine core time main program loaded place copy disk save disk space expense prior run program quite substantial technique typically used debugging environment put everything system example placing lot useful function kernel get several dynamic linking advantage everyone share code disk space wasted nt resolve reference runtime disadvantage average user ca nt change replace one system routine kernel get large complicated possibly compromising protection also hard develop routine since kernel environment usually good facility debugging probably requires entire computer even trivial bug left function bring whole system fork process unix solves editor call mail program vice versa problem example solution probably appropriate smaller example expense forking process little subroutine call becomes odious furthermore unix new process forked loaded time call made nt get much cheaper first time using dynamic linking amber based abstract model defines object kernel operation one perform general fewer object operation easier understand abstract model amber kernel model strives toward goal rest discussion refer user program user program simply program running kernel privilege also refer user process refers entire nonkernel state collection program single address space amber kernel provides set subroutine call called kernel call manipulate object kernel manages kernel object must protected system order insure integrity example user program could directly access page table could reference memory user similarly user could directly read arbitrary disk record could reference file thus set abstract object kernel manages allow user access resource disk file main memory task controlled fashion object cataloged file system even object normally transient existence task object catalog object called domain directory two term used interchangeably amber domain store name object capability object since domain object stored domain thus domain form tree tree domain directly comparable file system tree multics unix object capability domain several coequal name object name also property list association named attribute value associated file intended allow user program associate small note file fixed limit number name number size property file may however may restriction size directory particular implementation amber directory stored segment inside kernel thus take address space kernel reason kernel segment holding directory always kept mapped demand managed also system parameter controlling maximum size kernel also maintains several attribute object date time created modified referenced size object relevant eg segment information one might expect file system keep common object system segment segment correspond file system segment maximum size byte kernel call map segment address space mean provided access information segment expected outside kernel general file provide device independent access file arbitrary size building segment object referred kernel call mean capability object capability may obtained kernel variety way example user program wish access segment named foo would first use lookup kernel call get capability foo domain would use mapsegment kernel call map foo address space may freely modify foo kernel ensure modified file migrates back disk ignoring system crash disk failure unfortunate event one argument lookup kernel call used get capability foo capability domain foo resides somehow already capability suppose started full pathname foo list name directory tracing root provides path arrives domain holding foo eg root udd joesmith foo note multics might represent pathname udd joesmith foo unix uddjoesmithfoo however unlike system amber kernel manipulate pathnames therefore imposes syntax interpretation thus find root udd joesmith foo user program would series lookup call starting root looking udd capability udd could call lookup passing capability udd asking get capability joesmith foo capability root come process born ca nt lookup anything file system quite feasible create process initial capability domain root one wish restrict subtree file system note one wish insure subtree must contain capability point tree object may several capability refer capability also refer capability furthermore capability refers another capability need domain note although speak filesystem tree capability structure really like vast directed graph restriction however list capability circular kernel simply allow circular chain reference created reader careful distinguish capability refers capability another domain domain entry might domain object latter form file system tree indirect capability allows owner minimum access right capability must indirect change access right capability along chain take effect immediately eg user using capability indirects five capability access logical mode bit six capability plus five depends one five capability deleted user immediately loses use capability one need worry mode bit capability indirect chain changing since kernel call change mode bit place must accomplished deleting capability creating new one different mode bit however even new capability end giving user access kernel automatically reinstantiate new indirect capability user process fault handler expected handle fault reestablish indirect chain mean created note therefore indirect capability revocable sense access granted one revoked owner capability indirect capability depends nonrevocable capability point directly object therefore user want retain revocation right never give capability point directly object thus far described capability used refer kernel object describe way access capability controlled capability mode mode set bit whose exact interpretation varies different type object govern type access capability allows object example segment type object mode bit read write execute said amber multics type access control list thus far discussed capability access control list fit scheme first must introduce principal principal corresponds multics userid represents person entity one might wish grant grant access amber principal simply domain domain used principal access control list expected naming convention user name principal domain would followed associated object list principal mode list called object access control list acl order gain access object access control list task must present capability domain use access match principal acl group access handled giving member group use access domain represents group kernel call obtains access object acl take list domain match principal acl thus particular call user choose exactly privilege exercise case indirect capability change access control list take effect immediately unlike indirect case however user lose active access object unless specific acl entry granted access deleted course possible user could lose access object term specific principal used gain access deleted even though may use right principal still valid case desired user process fault handler expected try reestablish access object calling kernel current list active principal introduced concept capability refer capability indirect capability yet discussed useful understand must know task structure amber point execution address space called task every task associated domain called domain execution domain execution contains capability running task address space task must capability cataloged domain execution used kernel call since domain execution typically created demand task started generally start initialized capability one root task would make kernel call obtain indirect capability object needed access including segment introduced yet another association domain maintain association segment domain position address space mapping segment address space assigning position domain execution segment need usually live domain execution order make map call capability segment must exist domain case segment might actually exist domain execution rather indirect capability would temporary segment execution stack may one task associated address space task executing given address space identical access privilege fact share capability namely domain task object capability pointing capability task mode status writestate control granting right examine modify state task start stop execution capability system mean whereby task pas capability among amber object called message channel used purpose amber message channel also pas data task message channel intended use communicating server task server task would typically place message channel object advertised place file system user program requiring server could use lookup kernel call get capability message channel object available use placeholder dummy object let user take advantage information kernel manages object without incurring overhead one object would particular expected dummy object used implement soft link outside kernel storing target link property list object extended type object object whose access constrained go procedural type manager manager extended type object get capability directly object manager domain contains prototype task special privilege needed create extended type object object may sealed capability domain type manager object thenceforth type manager may unseal ie obtain capability sealed object user wanting access information service extended type manager provided would invoke type manager involves starting task template state task invoked altered examined invoking task similarly invoked task open message channel lookup object one sealed extended type manager either run completion return result terminated predefined point allow insure database may managing consistent state task running extended type manager much like hydra encapsulated procedure facility best example feature amber capability model provides virtually stretching multics access control model could provide extended type object implementation mutually suspicious subsystem described implementation expensive however requiring process invoked use considered acceptable use extended type manager expected infrequent amber expected normal kernel provided access mode object sufficient purpose heavy use protected object expected one probably instantiate permanent task manage object user communicate via message channel necessary use extended type mechanism large design effort decision harder make others amber exception section review hardest one significant debate whether revocable capability worth effort two argument implementing revocation assumed implementation revocation would make kernel noticeably complicated one argument asserted revocation really regain lost information someone access file nt supposed could already made copy content case write access destroyed content case revocation nt really matter give false sense security counterargument simply someone access object nt mean necessarily made copy human interaction complex relationship people organization nation etc change time unreasonable claim hard make computer system capable tracking relationship realtime argument asserted revocation access rare event furthermore something bad happened instigate removal access owner would mind take severe measure revoke access example case file owner might copy information new file delete old object rename new file take logical place old one necessary since new file object one capability old one could use new one access new object could set old access minus whoever revoked potent real world analogy argument group people issued key door one suspected misusing access often possible reclaim key case locksmith must called change lock door counterargument case rare operation need difficult essence disagreement hard would implement revocation related argument denial access opposed revocation access amber explicit way denying access particular principal ie counterpart multics null access term amber user denied access object use access principal acl object could inconvenient case one want allow everyone system except perhaps one user access object presumably system maintains principal available user order exclude single user necessary create one principal use access entry everyone system except user wish deny access furthermore new principal wo nt permit everyone system access object unless actually add list principal try checking object user may want bother adding new principal list merely two user petty dispute justification specific null access feature feature virtually meaningless system large user community attempt deny one user read access file user willing cooperate excluded user read file pas along data fact amber facility make scheme easy user allow user b masquerade user simply giving user b use access principal represents referred granting power attorney course user better trust b thoroughly since putting entire existence computer system b hand one fundamental decision amber include file system kernel file system complicated better file system like amber provide lot feature rich name space good file system lot error detection recovery code dealing real world disk fail goal lean simple kernel order make easier understand verify would certainly good could leave stuff kernel ca nt give user call access disk hardware disk usually shared among several user something must manage access make sure nt interfere system nt file system kernel giving one task right access disk drive task service disk request rest task regulate access system structured fashion object managed server task user communicate server task passing message back forth called message passing system become quite popular academic circle late demo one reason increased modularity message passing approach enforces arm length relationship task encourages careful consideration dependency several reason amber team take approach perhaps foremost one unfamiliarity one team worked message passing system whereas familiar multics substantive argument well although message passing system encourage modularity mean system based procedure call necessarily le modular primary reason message passing system make kernel smaller therefore much easier verify however clear advantage since verify security system whole one must verify task manage critical resource disk still message passing adherent claim bug line printer driver le likely provide mean subverting disk management finally perhaps decisively efficiency argument message passing system require least one task switch per operation task switch typically expensive procedure call even procedure call result change privilege careful design hardware assist mitigate however amber team decided subroutine approach overall cautious chose path full description detail kernel implementation well beyond scope document however appropriate acknowledge concept guided implementation came multics source many design study done graduate student thesis several concentrated better way implement multics supervisor multicskernel amber kernel structure strongly influenced document particular janson thesis studied circular dependency operating system way avoid amber kernel circular dependency major module reed thesis multilevel virtual process influenced amber traffic controller task hiearchy one interesting construct kernel access cache without access cache amber capability scheme simply would implementable therefore quite remarkable cache invented well capability design committed two problem access cache solves first simple essentially kernel call refer object deal capability every kernel call must look capability domain execution trace object actually refer cache speed process enormously access cache hold recently used capability shortcut pointer object reference mentioned amber allow circular capability reference created also described revocation take effect instantly amber former facilitated access cache latter would nearly impossible without idea simple capability placed access cache capability depends must first placed access cache every capability dependent pointer list chained dependent capability must removed access cache reason dependent removed first next kernel call try use object removed simply take cache fault rebuild chain still possible possible access changed kernel call return appropriate error code thus access cache always address space handy representation dependency structure capability active use note case would way short file system search find dependent capability might revoked deletion particular capability implementation amber begun multics writing poor type definition facility extended using preprocessor using technology large portion kernel written tested using special test program specifically task scheduler directory management segment page management implemented tested extent course much could tested except real portion page management actually set page table entry expects memory become accessible side effect wherever possible however dummy routine substituted would try use native multics facility duplicate desired action example internal kernel routine final work updating segment table map segment replaced one instead mapped multics segment multics address space allowed testing proceed one might otherwise believe possible half year implementation effort decided shift language two reason first growing dissatisfaction poor type definition facility even though somewhat mitigated preprocessor concept module wanted able write module would implement particular system abstraction module might public entry point many private subroutine way several different procedure share set internal private subroutine except use entry statement entry statement many undesirable property however well implemented subset g compiler front end project planned purchase second compelling reason abandoning technical simply proving hard get department energy approve purchase expensive piece software case bureaucratic bungling would cause project fail case amber project proved blessing jeff broughton amber project leader implemented two extended pascal compiler extended language named pastel offcolor pascal complete compiler targeted architecture completed several month however first version compiler implemented slightly weekend produced output done allow continued use multics pascal compiler development site amber point project couple manyears code written conversion code pastel accomplished man month historical note one point project richard stallman visited pastel compiler explained left copy source used produce gnu c compiler technique gave gnu c compiler reputation good code generation came amber pastel compiler eventually development moved local vax running berkeley unix necessitated new code generator targeted toward vax multics specific simulation routine rewritten testing could continue large aside code generator movement amber development vax major effort vax opportunity compare pastel compiler existing vax compiler general pastel compiler produce smaller faster code unix c implementation language measure section paging point computer architecture large paged address space capable supporting amberlike operating system particular pastel compiler already code generator vax national semiconductor family although latter code generator untested amber port architecture would involve reimplementing portion kernel manage address space fundamental difference way paged machine handle page table segmented machine like multics prime series access segment determined bit user segment descriptor word paged system page table word access bit access referring read execute write area main memory actually bit segment page table word together determine effective access unfortunately mean two user segment mapped different access right share page table exacerbates already difficult situation vax small page size result low ratio word main memory described per word page table spite user page table pageable vax enough page table entry describe entire user address space word requires byte nonpageable physical memory hold first level page table needle say using segment scheme would incur certain overhead memory consumption measure taken mitigate problem event memory relatively cheap nowadays design amber begun team six hon wah chin project leader team member ted anderson jeff broughton charles frankston lee park daniel weinreb team member familiar multics lee park ted anderson participated implementation small scale multics like system undergraduate daniel weinreb worked mit lisp machine project undergraduate lispmachine first year effort spent design discussion essence current capability scheme devised jeff broughton toward end design period prior time design much closer multics concept segment directory access control like fact code already written modified accommodate new scheme change drastic time apparent mark iia computer system amber designed going ready later expected hardware closer completion likely le ambitious expeditious system would implemented however continued nonavailability target computer system detrimental completion coding effort increasingly difficult technically psychologically continue building kernel real feedback successful element structure thus far implemented end first year daniel weinreb lee park left project hon wah chin assumed duty project jeff broughton became team leader one half year project earl killian joined midst switch pastel implementation language three year project charles frankston took extended leave continue education jay pattin joined amber team four year inception project time duty maintenance support computer network structure taken manpower implementation amber fourth year amber effort jeff broughton became technical director entire effort little time spend amber implementation ted anderson drafted debugging mark iia hardware five year course project direct manpower working amber one three person average close roughly total man year expended implementing amber kernel believed complete final still awaits completion mark iia hardware work done facility outside kernel exists window oriented command dispatcher running simulation multics berkeley unix description concept idea involved system beyond scope document historical note eventually one mark iia processor ever became operational amber ran largely due effort jay pattin overall however mark iia processor design failure featuring one complex hardware design ever built risc architecture becoming popular time team went endeavor earl killian one learned lesson complex mark iia project well went become chief architect mips corporation helping design several generation risc microprocessor
65,Lobsters,osdev,OS,Urbit In The Cloud,https://zalberico.com/essay/2020/06/06/urbit-on-the-cloud.html,urbit cloud,sailing urbit ship digital ocean guide create digital ocean droplet digital ocean image plan size minimum recommended bonus add block storage datacenter region vpc network additional option authentication many droplet choose hostname add tag project backup getting domain gandinet configuring domain digital ocean droplet creating nonroot user lack trailing slash setting basic firewall installing nginx configuring nginx configuring let encrypt secure certificate installing urbit install doc warn leaving urbit running screen session link misc blog,sailing urbit ship digital ocean guide goal guide clear easy follow best practice deploying urbit node server control cloud deploying cloud allows access urbit device urbit user start running ship locally one machine order play mean machine offline urbit node offline get update also access urbit one machine guide us digital ocean cloud provider focus kind use case individual devs running something mean price easy understand provide good tool easy use theory step apply cloud provider like aws google cloud azure enterprise focused price tooling complicated partly obscure cost also need tlon working automation make deployment google cloud easier future digital ocean good option personally use guide assumes running macos linux local machine create digital ocean droplet create account digital ocean create droplet following setting image ubuntu plan standard size minimum recommended bonus add block storage skip datacenter region choose region closest vpc network vpc additional option none authentication ssh key add new ssh key following instruction give many droplet choose hostname hostname box ssh whatever want used urbit planet name add tag none project select default backup optional cost little extra enabled peace mind getting domain domain make accessing urbit lot easier also allow secure thing let encrypt cert domain relatively inexpensive since guide best practice making required step lot domain name registrar use guide suggests gandinet one use search register domain like configuring domain digital ocean droplet registered domain need configure use digital ocean dns following step done gandi website click domain left panel click domain going use urbit click gandi livedns nameservers name server overview page click change remove gandi server add digital ocean one instead save change take time change propagate found pretty quick minute updated dns record add domain droplet back site click networking left panel enter domain registered set project creating nonroot user domain place ready actually log box start configure server since yet user need log root ssh root yourserverip set passphrase ssh key asked automatically logged create new user example use sammy match doc use username enter strong password user question adduser asks matter hit enter skip give new user sudo access next need enable external access new user moving ssh key root setting proper permission careful note lack trailing slash command ssh rsync archive chownsammy sammy ssh homesammy test connection ssh sammy yourserverip local machine new terminal window test domain working try ssh sammy yourdomain new terminal local machine able use user going forward sudo necessary setting basic firewall continuing follow doc going configure ufw firewall command show u application available easily configured firewall rule ufw next configure ufw allow connection via ssh firewall enabled command allow udp connection port later tell urbit use ames urbit urbit communication protocol sudo ufw allow next turn firewall see current current firewall status use following installing nginx nginx webserver going use reverse proxy incoming traffic digital ocean droplet pas nginx urbit allows u lock everything else secure entry point first need update available package install nginx sudo apt update sudo apt install nginx installed nginx update firewall setting sudo ufw allow nginx full verify change nginx automatically started installation confirm also confirm going droplet ip address see welcome nginx message startstoprestart nginx command like following sudo systemctl restart nginx also reload config without restarting sudo systemctl reload nginx configuring nginx going configure nginx serf urbit traffic securely configuring let encrypt secure certificate got nginx reverse proxy installed going get let encrypt ssl cert configure automatically renew going certbot first add date repository sudo addaptrepository ppa certbotcertbot next going install package sudo apt install pythoncertbotnginx next going request cert certbot sudo certbot nginx yourdomain agree tos run test verify control domain requesting cert certbot ask want redirect traffic http select yes option certbot automatically update nginx config setting need also automatically renew cert expiration verify site working properly going http yourdomain see secure certificate confirm certbot renew properly run following command sudo certbot renew dryrun installing urbit finally ready install urbit server part actually pretty easy installed urbit locally instruction exact one urbit install doc local ship already going install urbit server send local ship warn since urbit want ever run two copy ship simultaneously node interact copy confused one date end accidentally personal breach described urbit doc fix thing first thing going want shut local ship either controld exit dojo next going install urbit server ssh youruser yourdomain curl http tar xzf cd going tar local ship send server local machine urbit directory tar zcvf shipdirname targz shipdirname scp shipdirname targz youruser yourdomain back server let untar ship start ames port allowed firewall ssh youruser yourdomain cd tar zxvf shipdirname targz urbit p shipdirname ship sailing digital ocean check http yourdomain everything working properly see login page log code code dojo like normal see application leaving urbit running screen session finally leave urbit running disconnect leave screen session way leave application running background reconnect later alternatively done tmux first start ship stopped run following start screen session start urbit ship session urbit p shipdirname disconnect screen session leave ship running controla get back screen sesssion screen command interacting session easy find internet link misc lot documentation come combining existing resource digital ocean urbit single guide main piece figure specific nginx config required get urbit work properly nginx also pretty powerful configurable thing like urbit existing server subdomain kind thing left exercise reader io save website homescreen icon urbit domain little like app doc made guide see following link please email submit pr break find blog
66,Lobsters,osdev,OS,The CBE series #3 - A Linux VM on a CBE device,https://genodians.org/m-stein/2020-06-12-cbe-linux-vm,cbe series linux vm cbe device,cbe series linux vm cbe device martin stein genode cbe series prerequisite sculpt preparing cbe image file initializing cbe checking cbe preparing vm using cbe setting cbevfs server installing linux guest vm using management shell control cbe limitation,cbe series linux vm cbe device june martin stein genode release note teased using cbe running encrypted vms sculpt article guide setting cbe device installing using linux vm controlling cbe online like creating snapshot resizing device rekeying cbe series series article describes feature integration consistent block encrypter cbe detail cbe blockdevice encryption component core logic entirely written spark combine multiple technique ensure confidentiality integrity consistency freshness block data efficiently furthermore whole core logic far pass gnatprove mode flow case familiar basic structure cbe recommend introduction reading article series far source code github note branch one used package tutorial mark cbe mainline based recent genode package tutorial built genode compatible recent sculpt version prerequisite follow guide described article need sculpt installation hand least gib free space spare used file system want able inspect log output cbe tool reason enable log display upperright corner leitzentrale sculpt furthermore need internet connection establish connection using network control upperright corner leitzentrale order able deploy required package package source genodelabs cnuke must enabled depot selection window manager required already one deployed may use themed wm select depot genodelabs gui themed wm install installation done wire window manager follows gui focus keyboard focus gui system gui server report shape pointer shape report clipboard global clipboard rom clipboard global clipboard also need font server nt one already may install font f package selecting depot genodelabs gui font f install integrating package following route finally use nouxsystem package system shell nt package deployed already select depot genodelabs tool nouxsystem install integrate package using following route gui themed wm file system config writeable system configuration file system report readonly system report file system target used file system file system font font f rom vimrc default vim configuration rom clipboard themed wm report clipboard themed wm finally may want save setup copying deployment config persistant storage using nouxsystem terminal noux mkdir p noux cp configmanageddeploy preparing cbe image file cbe device backed disk image file device provide virtual block device vbd gib size user mib worth sparse block available storing snapshot install linux vm device let start switching runtime view pressing nouxsystem prompt following command create directory holding cbe disk image file root directory used file system noux mkdir rwcbe directory place move deploy another component cbe f instance within leitzentrale press package contains preconfigured chroot component use limit filesystem access cbe tool afore created directory package installed selecting depot cnuke cbe cbe f install use following route package administration regarding cbe shall use deployed chroot environment consequently need another system shell routed chroot file system could use second nouxsystem instance nouxsystem meant provide minimal setup therfore miss tool like dd necessary tutorial created cbe shell package fullfills requirement install selecting depot cnuke cbe cbe shell install route package follows gui themed wm file system cbe cbe f file system font font f rom clipboard themed wm report clipboard themed wm region map custom virtual memory object deploying greeted terminal featuring cbe prompt background cbe file system mounted cbe new environment navigating directory cbe shell executing l show empty directory going use dd create disk image file cbe dd ifdevzero ofcbecbeimg note matter whether sparse file command created gib disk image file enough store anticipated cbe device gib virtual block device mib sparse block note need space storing additional internal meta data disk image file need bit larger let check size disk image cbe l l cbe rwx root jan cbeimg finally remove cbe shell component graph leitzentrale initializing cbe first cbe tool want use cbeinit component purpose create empty cbe device initializing cbe meta data backend storage package configured create cbe device vbd gib mib worth sparse block using cbeinit component install package selecting depot cnuke cbe cbe init install need one route set short see following message system log runtime child cbeinit exited exit value remove component runtimegraph leitzentrale cbe fully prepared may wondered nt provide key passphrase initialization moment trustanchor entity system mere placeholder meant replaced proper implementation productive context placeholder using hardcoded value private key value simply xord counter produce symmetric key used cryptographic operation checking cbe make sure newly initialized cbe indeed working state let check deploy cbecheck component selecting depot cnuke cbe cbe check install setting route cbecheck tool check hash data meta data block cbe device time following message system log runtime child cbecheck exited exit value mean check successful cbe check instance removed like cbe init preparing vm using cbe initialized disk image place let prepare vm case coreplus installeriso image hand readytouse downloader package use downloader provide target file system therefore deploy cbe vm f package selecting depot cnuke cbe cbe vm f install setting route like cbe f package cbe vm f chroot component preconfigured cbe point vmcbe directory currently used file system deploy downloader selecting depot cnuke virtual machine download coreplus install setting route gui themed wm network nic router region map custom virtual memory object file system target cbe vm f file system font font f progress download shown new terminal window may take time image size mb end message system log indicate download successful runtime downloadcoreplus child download exited exit value download coreplus instance removed component view leitzentrale switch nouxsystem shell navigate rwvmcbe delete file machinevbox machinevdi file needed context tutorial noux cd rwvmcbe noux rwvmcbe rm machine file use instead part archive cbe binary already downloaded dependency package directly copy vm directory noux rwvmcbe cp noux rwvmcbe cp noux rwvmcbe l l rwx root jan rwx root jan installeriso rwx root jan machinevbox note configured access cbe local vfs noux rwvmcbe cat rw flat devdata virtualbox hand configured machinevbox use file setting cbevfs server start vm start cbe tutorial cbe device provided cbevfs plugin running vfs server server accessed vm via filesystem session cbe vfs package provides preconfigured vfs server cbe plugin deployed selecting depot cnuke cbe cbe vfs install setting following route cbe vfs server might consume quite cpu time depending workload cbe therefore recommended move different cpu core one later use vm provided cpu multiple core done creating launcher cbe vfs server component still running create copy active deploy configuration nouxsystem shell noux cp configmanageddeploy configlaunchercbevfs go file panel centered top leitzentrale select config launcher cbe vfs edit file opened graphical editor delete everything except start node cbe vfs server start name cbevfs start change start launcher start launcher extend opening launcher tag attribute xpos ypos width launcher name cbevfs xpos ypos width launcher move cbe vfs component second cpu core started launcher saving file switch back component graph top leitzentrale remove currently running cbe vfs component graph deploy using newly created launcher cbe vfs installing linux guest vm time exciting part installing coreplus vm virtual box using want file system shared folder therefore start shared f selecting shared f use preconfigured package virtual box installed selecting depot cnuke cbe cbe install setting following route file system vm cbe vm f file system cbe cbe vfs file system shared shared f network nic router gui themed wm rom capslock global capslock state rom platform info platform information report shape themed wm report clipboard themed wm rom clipboard themed wm region map custom virtual memory object real time clock system clock usb direct usbdevice access screen titled core plus networking installation remastering show screen select boot core plus default flwm topside short coreplus desktop appears open terminal coreplus type dmesg command output find cbe disk sd sda byte logical block gib sd sda write protect sd sda attached scsi disk want install coreplus cbe disk therefore start tcinstall application bar tcinstall window select whole disk select sda make sure install boot loader selected continue right arrow select next dialog skip next dialog select core xgui desktop next dialog final dialog press proceed start installation installation completed show installation window select shut coreplus remove virtual box instance component view leitzentrale let remove installation image vm force boot cbe disk go file panel leitzentrale select default f rw vm cbe machinevbox edit remove following xml snippet file storagecontroller name ide attacheddevice type dvd attacheddevice storagecontroller save file switch back component view start cbe way putting load system open terminal coreplus start commandline extension installer tce type enter firefox select firefoxgetlatesttcz type q download shell script installing firefox browser quit extension installer via q issue firefoxgetlatestsh terminal may take connection time installation start shell script freshly installed firefox work fine although initial loading may bit slow using management shell control cbe vm place might want perform management work example would creating snapshot cbe device snapshot would checkpoint revert future catastrophe like rm rf wrong directory happend maybe vbd turn small would like resize imagine want reencrypt whole cbe device new key task performed using cbe shell package already used create disk image file deploy time select following route gui themed wm file system cbe cbe vfs file system font font f rom clipboard themed wm report clipboard themed wm region map custom virtual memory object note file system cbe point cbe vfs instead cbe f way access control interface cbe provided vfs plugin within cbe shell navigate cbecbe directory contains cbevfs plugin cbe cd cbecbe l l total drwx root jan control drwx root jan current root jan snapshot control directory contains various file trigger management task cbe cbecbe l l control total sw root jan createsnapshot sw root jan discardsnapshot sw root jan extend sw root jan rekey creating snapshot first let create snapshot current state newly installed coreplus system cbe cbecbe echo true controlcreatesnapshot creating snapshot lightweight operation time inspect snapshot directory already see newly created snapshot cbe cbecbe l l snapshot drwx root jan checking snapshot data file confirms existence snapshot actual data snapshot may accessed file cbe cbecbe l l rw root jan extending cbe let extend virtual block device cbe note nt shut linux vm even continue using coreplus extending underlying cbe device first check size current state vbd cbe shell cbe cbecbe l l currentdata rw root jan data extend vbd mib note stay inside boundary gib backend image cbe cbecbe echo treevbd controlextend writing option extend file instructs cbe add block byte byte vbd request processed watch progress looking size vbd cbe cbecbe l l currentdata rw root jan data eventually end size byte may wonder gib logical cbe need certain amount added block new meta data vbd state extension request also observed reading extend file cbe cbecbe cat controlextend inprogress lastresult none cbe cbecbe cat controlextend idle lastresult success extending pool sparse block cbe work pretty similar cbe cbecbe echo treeft controlextend rekeying cbe point might want change blockencryption key used cbe maybe demanded policy old key compromised simply feel like requires reencryption data cbedevice end removal old encryption key cbe note like resizing rekeying require stop accessing cbe device go using coreplus rekeying let start rekeying cbe cbecbe echo true controlrekey go like extension request monitor state reading file cbe cbecbe cat controlrekey inprogress lastresult none see rebooted vm rekeying underlying cbe device aware rekeying resizing block io cbe device naturally fast absence operation limitation guide served first look show potential cbe advertising cbe productionready plan refine following aspect core cbe designed perform operation asynchronous parallel way provides necessary throughput responsiveness needed later used daily basis however time particular demo deliberately operated parking ease development mean request processed one one sequential fashion internal metadata cache limited addition noted initializing cbe trustanchor mere placeholder provides functionality required cbe nothing developmentvehicle replace later also external entity performing cryptographic operation easily replaceable currently use library named libsparkcrypto apply aes encryption design cbe actually make independent concrete implementation encryption entity later reasonable utilize kind hardwareaided encrytiondecryption mechanism relieve cpu design open kind interesting possibility example could even forgo encrypting data block although first seems counterintuitive configuration cbe could used add support snapshotting primitive file system blockdevice layer futhermore current interface cbevfs plugin tailored interactively showcasing cbe future component provide nicer userinterface cbe cbevfs plugin controlled structured perhaps xmlbased way like rest genode regard demo cbe component used provided somewhat unorthodox way raw archive containing binary directly naturally addressed proper depot recipe package future
67,Lobsters,osdev,OS,CuBit: A General-Purpose Operating System in SPARK/Ada,https://blog.adacore.com/cubit-a-general-purpose-operating-system-in-spark-ada,cubit generalpurpose operating system sparkada,cubit generalpurpose operating system sparkada introduction overview http githubcomdocandrewcubit first step http wikiosdevorgadabarebones assembly required linking modifying runtime allocator record representation percpu data percpu stack secondary stack scheduling tasking future http githubcomdocandrewcubit,cubit generalpurpose operating system sparkada introduction last year started evaluating programming language formallyverified operating system developing software recently began work high integrity software development formal method several operating system project like microkernel muen separation kernel make use formal verification interested using formallyverified language write generalpurpose o environment abstracting underlying hardware acting arbiter running normal application used many language used write formallyverified software rely runtime environment make heavy use garbagecollection make difficult use operating system development spark support zerofootprint runtimes embedded device seemed fit bill ada rich type system lot offer operating system developer good support writing baremetal code overview cubit still early stage development boot mode run higherhalf memory multicore logical processor preemptive multitasking virtual memory object physical memory allocator cubit start primitive usermode process support fast syscall instruction getting back kernel mode filesystem driver vfs nt ready yet progress made area intent cubit create formallyverified unix clone taken inspiration number different operating system embedded os like xinu qnx bsd linux even window vms said cubit nt really much yet lot fun learned lot developing far spent lot time documentation trying make code easy contributor let dive code available http githubcomdocandrewcubit first step luke guest ada bare bone article osdevorg http wikiosdevorgadabarebones good job illustrating limitation must considered developing operating system ada starting point used one topic devotes time use pragma disable ada feature nt suitable o code use gnatadc file list many pragmas specify gnatadc selfexplanatory worth talking gnatadc pragma suppress indexcheck pragma suppress rangecheck pragma suppress overflowcheck pragma restriction nofloatingpoint suppress index range overflow check use gnatprove compiletime demonstrate absence type error beauty spark show absence error compiletime rather rely runtime exception prove absence error nt mean cubit yet still lot work done proof department balance adding new feature o going back trying verify work already done since sideproject find usually new feature win attention said enjoy going back picking file trying get pas gnatprove check warning error next pragma disables floatingpoint math fpu explicitly initialized prior use depending o cubit nt yet might get trouble accidentally performing floatingpoint operation would cause hardware exception pragma prevents u generallyspeaking use floatingpoint o avoided anyhow mean context switch entering o user code viceversa save floatingpoint state user process restore kernel floatingpoint state user process nt make use fpu gain efficiency avoiding kernel well hoping cubit avoid floatingpoint math altogether kernel remains seen whether possible longterm since cubit run mode also consider sse instruction little bit sneakier unlike floatingpoint operation easy avoid using ada modular type gcc code generator put sse instruction nt expect better performance since cubit nt yet support sse need explicitly disable compiler flag gpr project file cubitgpr package compiler defaultswitches ada use mnosse end compiler one learned hard way got unexpected hardware exception dig generated assembly see problem speaking assembly assembly required order get spark code little bit assembly code necessary prefer intel syntax v syntax commonly used gcc use yasm assembler cubit inline assembly gnat still using native tstyle syntax seen cubit need use native instruction ada specific hardware functionality like reading io port modelspecific register shown read modelspecific register msr function rdmsr msraddr msr return low high begin asm rdmsr input c msraddr output low high volatile true return shiftleft high low end rdmsr nt allowed use inlineassembly sparkmode marked whole package body sparkmode however still make use spark verify precondition postconditions function package specification technique cubit us quite often often pointer arithmetic unchecked conversion john barnes call naughty peeking poking within subprogram body linking one interesting thing cubit many operating system kernel elf object file typical section expect normal application like text rodata data bs etc need little careful section linked ie address use referring symbol cubit us linker script specify exactly section linked also provide load address using keyword tell bootloader physical memory load since cubit link kernel upper memory use mcmodelkernel compiler flag make sure instruction generated gnat using appropriate addressing mode multicore architecture consider bootstrap core bsp application processor aps aps boot real mode send appropriate interrupt code must physically first memory well linked initial setup get protected mode boot similar manner bsp rename section textap distinguish normal kernel text section linkerld ap starting point apstart kernel load link location kernelphys kernelbase section apstart textap apstart stextap textapentry etextap kernelphys kernelbase kernelstartvirt text kernelphys stext buildbooto text text need front excludefile buildinito text text align etext rodata srodata rodata rodata never worked linker script might look little funny remember mean current address starting apstart could say current address apstart address define section textap apstart stextap textapentry etextap mean link textap section starting whatever current address apstart put load address apstart object file bootloader dutifully abide note appear couple assignment stextap etextap symbol get exported use ada code however must always remember take address symbol never refer directly ensure cubit us ada type system help utilads symbol useless type used prevent u forgetting use address referring one type symbol useless size systemwordsize inbetween stextap etextap symbol export cream filling textap section specify get included section case everything marked textapentry section within individual object file case compiled bootapasm ap entry code use section directive assembly specify object file section called bootapasm bit link section low since first byte real mode section textapentry take look object file readelf see going readelf buildbootapo section header nr name type address offset size entsize flag link info align null shstrtab strtab strtab strtab symtab symtab text progbits ax textapentry progbits textapentry section shown get placed textap section defined linker script seems yasm give u text section nt ask size expected since bootapasm specify text section export useful symbol linker file like stext etext srodata erodata etc mark start end various section kernel image return bit section readonly data rodata initialized static data data uninitialized static data bs follow text section note set current address using align directive like pagealigned using small page couple reason first lessimportant reason make debugging easier quickly identify range memory might causing error second moreimportant reason apply perpage access protection instance marking noexecute nx bit data section marking rodata readonly make mistake access something nt hopefully get easily debuggable hardware exception rather hard debug undefined behavior also security enhancement performed memmgr package map physical memory system kernel page table appropriate flag ada type system help u since define range section start end address exported linker script memmgrads subtype kerneltextpages virtmempfn range virtmemaddrtopfn tointeger virtmemstextaddress virtmemaddrtopfn tointeger virtmemetextaddress subtype kernelropages virtmempfn range virtmemaddrtopfn tointeger virtmemsrodataaddress virtmemaddrtopfn tointeger virtmemerodataaddress subtype kernelrwpages virtmempfn range virtmemaddrtopfn tointeger virtmemsdataaddress virtmemaddrtopfn tointeger virtmemebssaddress look bit unwieldy defining ada range elf section converting physical address pfn page frame number make easier work later iterate memory area bootloader identifies mapping page appropriately ada make easy check whether page frame looking belongs one range memmgradb procedure determineflagsandmapframe frame virtmempfn begin frame kerneltextpages mappage fromphys tovirtlinear virtmempgkerneldataro ok ok raise remapexception end mappage fromphys tovirtkernel virtmempgkernelcode ok pfn fall kerneltextpages range map virtual memory twice readonly data pgkerneldataro call linear range map physical memory system upper memory linked executes boot cubit display memory address section linked kernel section text rodata data bs modifying runtime spark come zero footprint runtime rtszfp find gnat ce package modified slightly original cubit repository copy much work put cubit getting operating system point support language library feature used daily development text io memory allocation allocator since provide memory allocation cubit physical memory allocator first bootallocator us static bitmap support allocating limited amount memory using relatively slow linear search buddyallocator cubit buddy allocator implemented array circularlylinked list free block multiple small page size whew mouthful know thinking circularlylinked list prohibited spark well yes get around overlaying free list record top underlying physical memory allocated removing block free list either allocated combining buddy form larger block call unlink procedure buddyallocatoradb procedure unlink ord order addr virtmemphysaddress sparkmode pre freelists ord numfreeblocks post freelists ord numfreeblocks freelists ord numfreeblocksold block aliased freeblock import address toaddress addr prevaddr constant systemaddress blockprevblock nextaddr constant systemaddress blocknextblock begin linkneighbors declare prevblock aliased freeblock import address prevaddr nextblock aliased freeblock import address nextaddr begin prevblocknextblock nextaddr nextblockprevblock prevaddr end linkneighbors decrement free list count unlink somebody freelists ord numfreeblocks freelists ord numfreeblocks end unlink make bit harder prove certain property allocator might considered best technique believe acceptable compromise allows u maintain sparkmode subprogram body allow proving property absence overflow etc code cubit enforces strict alignment block size cause u sacrifice little bit memory external fragmentation make buddy calculation splitting rejoining block simpler faster object allocation cubit us curious feature gnat called simplestoragepool pragma could nt find much documentation pleased discover need littletono runtime support still use familiar new keyword allocate object runtime might open use tagged record controlled type cubit need experimentation say one way slaballocator implement circularlylinked list free object work similarly buddyallocator instead page orderaligned block memory work object fixed size userspecified alignment allocating freeing head list get fast allocation deallocations give flexibility slab allocator since object size fixed must specified ahead time slaballocatorads type freenode record next systemaddress prev systemaddress end record size freenode use record next range prev range end record type slab limited record freelist freenode numfree integer capacity integer blockorder buddyallocatororder blockaddr virtmemphysaddress mutex aliased spinlockspinlock alignment systemstorageelementsstoragecount paddedsize systemstorageelementsstoragecount initialized boolean false end record gnatspecific pragma pragma simplestoragepooltype slab use allocator look somewhat familiar need initialize slab allocator setup routine allocate underlying physical memory buddy allocator described earlier objslab slaballocatorslab type myobjptr access myobject myobjptrsimplestoragepool use objslab procedure free new adauncheckeddeallocation myobject myobjptr obj myobjptr begin slaballocatorsetup objslab myobjectsize obj new object record representation note use size record representation clause freenode record slaballocator overkill generally like use especially record might overlaid memorymapped hardware used directly cpu like page table overlaid inmemory bios structure like acpi table help keep honest add field record compiler ensure size representation match consider something like acpi fadt structure acpiads fadt fixed acpi description table type fadtrecord record header sdtrecordheader firmwarecontrol ignored exfirmwarecontrol present dsdt ignored exdsdt present powermgmtprofile powermanagementprofile sciinterrupt smicommand acpienable acpidisable pstatecontrol pmtimerblock pmtimerlength cstatecontrol flushsize flushstride dutyoffset dutywidth dayalarm monthalarm century rtc index rtc ram intelbootarch iapc boot architecture flag always flag fixed feature flag resetregister genericaddressstructure resetvalue armbootarch fadtminorversion exfirmwarecontrol exdsdt genericaddressstructure genericaddressstructure genericaddressstructure genericaddressstructure genericaddressstructure expmtimerblock genericaddressstructure genericaddressstructure genericaddressstructure acpi field supported yet sleepcontrolreg genericaddressstructure sleepstatusreg genericaddressstructure hypervisorvendor end record size fadtrecord use record header range firmwarecontrol range dsdt range range powermgmtprofile range sciinterrupt range smicommand range acpienable range acpidisable range range pstatecontrol range range range range range range pmtimerblock range range range range range range pmtimerlength range range range range cstatecontrol range range range flushsize range flushstride range dutyoffset range dutywidth range dayalarm range monthalarm range century range intelbootarch range range flag range resetregister range resetvalue range armbootarch range fadtminorversion range exfirmwarecontrol range exdsdt range range range range range range expmtimerblock range range range acpi field sleepcontrolreg range sleepstatusreg range hypervisorvendor range end record easy make mistake big record like thankfully ada record representation clause allow u depend field alignment size specify percpu data percpu stack secondary stack since cubit multicore operating system need maintain separate call stack cpu mechanism done fairly primitive point carve chunk memory mib time writing suspect eventually want kernel stack stackbottom stacktop divided maximum number core cubit currently set support get stack cpu present kernelmode stack call chain fairly short stack also divided primary stack grows downward ada secondary stack grows upward secondary stack widely used work set paltry byte systemparametersruntimedefaultsecstacksize runtime package need set stack pointer early call adainit perform elaboration kmain function bootasm setupbsp setup kernel stack mov rsp qword stacktop add stack canary bottom primary stack cpu mov rax qword stacktop percpustacksize secstacksize mov rbx mov rax rbx save rdi rsi adainit nt clobber push rdi push rsi initialize adainit elaboration prior entering ada mov rax qword adainit call rax restore argument kmain pop rsi pop rdi call ada code mov rax qword kmain call rax secondary stack initialized call systemsecondarystackssinit address bottom cpu stack bootstrap processorcpu remember aps boot realmode need set initial stack pointer well get mode tell processor boot set global variable startingcpu ada code prior sending interrupt tell start use calculate cpu percpu stack live setupap stack size stacktop stackbottom maxcpus set stack cpu n setting rsp stack pointer stacktop startingcpu stack size raise another issue multicore code use primary stack easily since cpu stack pointer register however ada secondary stack need manipulated using data pointer kept main memory know secondary stack use running code arbitrary cpu always obvious cpu piece code running multicore system cubit us percpu data structure implemented similar way threadlocal storage using g register store offset percpu data data structure includes information like cpu number represents currently running process id code cpu attempt use secondary stack get pointer dedicated secondary stack cpu obviously slower accessing rsp register primary stack case cubit actually keep percpu data primary stack set earlier generally speaking bad form take address stack variable create percpu data record prior entering scheduling subprogram loop infinitely safe access though statically allocated secondary stack package go allocate call gnatgetsecondarystack export name getsecondarystack function percpudata package use address ssallocate called behind scene whenever secondary stack used scheduling tasking cubit scheduler primitive simple us basic roundrobin model lot work done various process state like sleeping etc currently spending lot time cubit context switching theoretically matter saving one register set restoring another returning saved return address stack make bit challenging detail messy still working lot finer point mostly work time writing small usermode stub initasm first usermode process eventually perform system call execute whatever init framework used spark verify concurrent program using ravenscar tasking model ideal baremetal application task known ahead time however generalpurpose o nt know application going run place unnecessary restriction might good way model user process ada task order get guarantee compiler nt worked way may fact feasible difficulty far tell lie describing part code might running concurrently modeling interaction multiple core system call interrupt get hairy quickly careful use locking primitive typical route dealing ensuring absence deadlock difficult spark expert reading good idea area please let know future cubit still early stage development sideproject mine frankly little embarrassed write current state suppose say nt embarrassed first release waited long release welcome contribution wider adaspark community like dream formallyverified software taking world day please check http githubcomdocandrewcubit start submitting pull request
68,Lobsters,osdev,OS,The Poetics of CLI Command Names,https://smallstep.com/blog/the-poetics-of-cli-command-names/,poetics cli command name,command naming antipatterns imagemagick excellent name eve st agnes hit u twitter,word slide slot ordained syntax glitter atmospheric dust impurity call meaning anthony burgess enderby cli command requires deep careful deliberation yet command seem named playful insouciance best foolish indifference neither forethought required stand test time respect demanded long venerable history command line naming thing one two important challenging task face programmer many command seem named arbitrarily terrible command name curse great command name poetic elegance adding something command line spell book hope post help bring clarity consideration processcommand naming antipatternsbecause first step avoid catastrophethe following word never command name tool kit util easythere excuse requiring user engage shift key looking virtualbox easyinstallif spend enough time thinking command name discover delight technically possible name command please donthow feel type command awkward satisfying much finger travel required example feel like gargling sand wireshark capinfos command soft breeze across keysthe version number never appear command name command system called nothing reveals erosion ancient beloved command line ecosystem clearly year typing terminal figured multiple version thing coexist peacefullydo nt start command name letter g even though perfectly fine letter situated right center keyboard past future g command personal property richard stallman granted exclusive perpetual irrevocable worldwide license entire g namespace although grudgingly granted exception git go linus torvalds google nt bother hitting upthe previous bullet point jokethe niche command longer name short name reserved utility people use time like cd l rgunless package consists suite shell utility nt pollute namespace dozen command install one two command use subcommands reach different corner program course many reason may want crisp boundary afforded separate executables really need binary always make callable one two central command git great job extend git putting executable path called git command able reach using git command nt name command new standard protocol file format thing go fashion often specific would like command find way golden spellbook timeless unix command nt call openssl surely whoever named openssl regretting day ever rename opentls way late many bash script live openssl sun swallow u deal ffmpeg far fast forward mpeg filesdo nt name command kind user interface provides example cfdisk version prior command fdisk newer interface curse case developer spent much time working curse interface decided celebrate achievement name command user perspective really nt matter moot imagine slack called webircdo nt make broad claim generic word year imagemagick provided convert command unless built tool convert anything markdown file jpg salad spinner garlic name program convertimagemagick version wisely gave claim convert favor new magick command convert subcommand forced give convert window also convert command know window convert command sure nt pretty smart person convert window used convert disk different type filesystems perfect example command claim name way broad incredibly small niche nt depend command name determine scope keep decision separateimagination get far might get inspired favorite book filipino folk tale norse mythology shakespearean sonnet nt get norse mythology okay maybe story yggdrasil gave deep sense clarity life path nt know nt read nt need read tell diabolical name shell commandexcellent namesvim brilliant name vim exactly feel pulling ninja substitution turn csv json crafty multiline edit sort list horror movie title descending rotten tomato score vim improved vi still sure people ancient rome invented vi decided name text editor number curl might cleverly named command time verb brings mind beckoning finger say spell loud sound like see url best letter word used please nt make tab complete name commandconsider command pronounced around world kodak word designed sound many language lego ikea might great command name nt already trademarkedcan type command one hand mouse would command read well poem ah bitter chill owl awk acold gunicorn limp trembling frozen grass silent yacc woolly john keats eve st agneshey rule thumb notice command assetcachetetheratorutil added macos would never fly hereif really want literal niche could signal solution domain name clarity walking fine line ancient mkfs try nestle well group command related making thing filesystem like mkdir mknod mkfile mktemp even mklostfound might bit overreach use mk commonality given one could imagine lot command making thing related filesystem file primary abstraction provided operating system worst thing use mk forthoughtful meaninglessness completely fine might even best option expect command solution domain evolve still nt know emac need several edit file meaninglessness route took smallstep humbly laid claim step stepca command public key encryption toolkit certificate authority naming step pay homage small way moon landing name really connection crypto okay easy type none matter command nt actually something usefulhave task naming cli command approach hit u twitter
69,Lobsters,osdev,OS,Haiku R1/beta2 has been released,https://www.haiku-os.org/news/2020-06-09_haiku_r1_beta2/,haiku released,haiku released release note press contact get haiku,haiku released almost year since haiku released see release note release note press contact press inquiry mldr get haiku skip download release upgrade existing install
70,Lobsters,osdev,OS,Collapse OS — Why Forth?,https://collapseos.org/forth.html,collapse o forth,moment clarity cherry top culture simplicity,collapse o first incarnation written assembler one first feedback went viral forth briefly looked nt seem great choice first first dismissed alcoholic refer moment clarity forth stellar fit collapse o design goal familiar might hard understand let try explain forth enthusiast like language think easier express much logic program language many book tutorial touting opinion forth fine capable language tend agree say tends produce writeonly program book forth old compare forth elegance fortran cobol opinion c expressive generally produce elegant maintainable code look forth advantage nt look forth nt particularly fast either interpreted language blazing fast speed tax indirect threaded model still paid generally slower code produced c compiler however python developer know tradeoff well program need fast bottleneck like python easy forth write bottleneck native code therefore speed big issue forth knowledge compact language allowing high level construct compact collapse o forth implementation achieves selfhosting amount resource assembler counterpart sorcery face value nothing compact native code selfevident piece forth code exact piece logic way compact native code lazy assembly writing understand compactness look deeper asm version collapse o selfhosts shell rom assembler binary loaded ram sd card could rom count rom project feature highlight ram assemble source within resource biggest piece software assemble assembler reasonably wellfeatured assembler support forward label includes many useful directive code implementing feature requires aforementioned resource assemble also feature included assembler required assemble source code could cut bit feature reduce resource usage need adapt assembler code lack feature possibly make code much complex believe assembler stroke good balance achieved something close optimal wanted reimplement assembler featureforfeature forth would probably require much resource build even though higher level word compact base pyramid get could nt compete straight assembler version reasoning first dismissed forth make forth compact assembler simplicity particularity forth begin walking implementing word base set early mean tiny part need assembled native code tiny part native code requires much le tooling thus assembler much le feature assembler requires le ram compact something nt exist even assembler ca nt beat void although forth compact native code duh forth collapse o achieves selfhosting much resource counterpart low price manageable speed constraint get high level language much powerful extensible basic shell previously call definite win cherry top compactness always primary design goal collapse o initially chose assembler high level language could continue meet design goal however cake eat thanks forth new opportunity open first foremost multiple architecture although ready give tied glad certainly take advantage culture simplicity forth culture simplicity worth writing face value traditional forth environment severly constrained according modern standard would want work within constraint block filesystem someone know complexity associated implementing filesystem everything underpins simplicity valued constraint gladly accepted ca nt say asceticism dominant trait relation technology nt used willingly accept constraint regard could call convenience would anyone want piece software hardware easier use accessible layman featureful someone willing build complexity moore law allow u adopt lead cancerous complexity layer upon layer upon layer new generation developer blissfully accepting previous layer something analogous probably said collapsing civilization probably even eloquently quote joseph tainter base design forth entirely built around primal simplicity even better path least resistance generally guide towards simplicity word definition becomes big complicated generally prompt reorganize code toward simpler solution might occurred another language clear forth nt elegantly describe complex algorithm least compared language like c generally make head hurt reading however mental pain make question need complexity encourages sideways solution something think developer familiar hard describe word need experienced one good way experience think implement forth
71,Lobsters,osdev,OS,Playing Around With The Fuchsia Operating System,https://blog.quarkslab.com/playing-around-with-the-fuchsia-operating-system.html,playing around fuchsia operating system,introduction fuchsia monolithic kernel v micro kernel monolithic kernel micro kernel sys process zircon micro kernel component component devhosts devhost process process isolation memory management unit inputoutput mmu task state segment namespaces namespace object manifest handle handle handle kind right user syscalls official documentation mitigation security practice aslr dep safestack shadowcallstack autovarinit libfuzzer syzkaller asan ubsan msan tsan cfi pac attacking fuchsia usb stack outofbounds access usbdevice verify wtotallength sanity stack overflow safestack hid fix getreport buffer overrun bluetooth stack packet bt check size command reject payload sdp servicesearchresponse sdp bt sdp fix buffer size check max response size hypervisor bug hypervisor check cpl handling vmcall kernel mishandling zircon debugger nt write reserved part mxcsr register kernel mishandling tl zircon exploitation zircon debugger disallow setting noncanonical rip address others autovarinit conclusion,look new fuchsia operating system introduction fuchsia new operating system developed google targeting architecture little known purpose o used seems plausible aim replacing android smartphones chrome o laptop interest acquiring knowledge o could possibly run million device future decided give quick look fuchsia learn inner design security property strength weakness find way attack monolithic kernel v micro kernel common form kernel design today monolithic kernel example linux bsd kernel monolithic based linux android chrome o kernel monolithic well monolithic kernel typically big embeds device driver network stack hundred syscalls simply said provides system functionality inner design monolithic kernel varies kernel kernel overall following internals tend common one clear security problem monolithic kernel vulnerability internal system component affect kernel suppose schema usb driver exploitable memory corruption since driver run within kernel space attacker exploit vulnerability gain control kernel fuchsia based monolithic kernel rather micro kernel micro kernel type kernel designed small name indicates implementing limited number core feature scheduling exception handling memory management device driver needed syscalls rest component moved userland part kernel example micro kernel design vfs layer socket layer network stack file system device driver moved userland dedicated user process communicate one another via ipcs example ftp client may fetch data network store usb key communicating userland process without intervention kernel kernel ensures privilege separation isolation process micro kernel design interesting security property suppose vulnerability usb driver case attacker able take control usb driver process running userland sys process bound process opportunity immediately run wider privilege whether kernel privilege privilege process ftp client instance attacker must therefore exploit additional vulnerability move laterally strong security improvement compared monolithic kernel zircon micro kernel fuchsia micro kernel called zircon written c describe relevant internals kernel component system organised component run userland network stack example component run userland usb driver component run userland component interact one another via ipcs interface wo nt discus strict programming language requirement component written c rust go interact via ipcs without problem example usb driver written c network stack instead coded rust come device driver get folded together process called devhosts devhost process contains several layer driver stack example three devhosts devhost process example contains ahci driver sata driver minfs blobfs file system component live within process kind weakens segmentation model several component actually part process vulnerability one component affect component process however appears devhosts organized way single device stack process typically implying possible usb driver sata driver devhost therefore benefit segmentation model hold process isolation zircon protects memory process using cpu mmu memory management unit manner typical modern os process address space address space contextswitched zircon contrary os however iommu inputoutput mmu play important role zircon programmed kernel devhost process perform dma operation address space outside iommu therefore important mmu ensure process isolation without devhost process could simply perform dma operation kernel page overwrite content additionally tss io bitmap task state segment used limit access io port way relevant discus namespaces fuchsia unified filesystem visible user process process virtual filesystem called namespace namespace contains object file service device object ordered hierarchy accessible using file path usual posix function open several path interest one directory svc contains service object instance svcfuchsiahardwareusbdevice typically object ipcs performed say one component expose ipcs via service object svc component access ipcs accessing service object respective namespaces namespace created along process spawn possible use manifest file dictate pathsobjects present within namespace hierarchy thereby providing sandboxing mechanism limit ipcs process able access noted notion namespace life within user process kernel seen convenient easytouse interface developer handle object reality kernel understanding namespace hierarchy object thing kernel aware handle handle zircon manages access component via handle seen file descriptor unix general access token without going boring detail object namespace basically backed handle path namespace actually corresponds handle kernel nt know anything namespaces object know handle namespaces live userland seen big userfriendly wrapper around handle handle kind right zircon syscalls vast majority depend handle manage access right access certain class syscalls handle must right kind specific operation syscall handle must also right right noted kernel understanding notion user contrary unix system everything come notion handle mainly interested security point view attacker typically try obtain better handle one syscalls although always uptodate official documentation rather clear nothing particular need highlighted show handle required perform class syscalls mitigation security practice term mitigation fuchsia us aslr mandatory userland dep safestack shadowcallstack autovarinit zircon kernel compiled default come security practice noted fuchsia code lot component associated unit test fuzzers fuzzing done via libfuzzer fuzz internal structure within component via syzkaller fuzz userexposed syscalls also support asan ubsan sanitizers however msan tsan support seems present finally come programming language said earlier component written c go rust arguably language prone programming error used c c code component usually override several operator perform sanity check example operator used accessing array often overloaded make sure index range array nt overflow underflow therefore even errorprone language security measure proactively put place let sum design aspect far security point view fuchsia us micro kernel whose attack surface limited nature entry point le complex logic system organized component run userland brings good segmentation property vulnerability affect component compromise process component actually written safe language rust several class vulnerability simply exist component virtual filesystem sandboxed life entirely user side kernel know nothing access component syscalls based handle act token kernel know abstracted object namespace mitigation provided default kernel rather good writing component kernel fuzzed unittested seemingly systematic manner say security fuchsia overall kernel design inherently safer linux mitigation security practice around better currently adopted linux two negative point noted fuchsia nt yet support cfi pac mitigation latter known strong fact devhosts combine several component within one process weakens segmentation model bit come device driver attacking fuchsia contrary every major o appears rather difficult target zircon kernel directly successful rce remote code execution worldfacing part system usb bluetooth network stack etc give control targeted component run independent userland process kernel component need escalate privilege kernel using limited number syscalls access handle overall seems easier target component rather kernel focus component talk via ipc know interesting handle fun decided vulnerability research part system see far could go limited time see whether overall good security property fuchsia really lived promise issue listed reported google fixed usb stack outofbounds access attaching usb device machine fuchsia fetch descriptor table device part usb enumeration process done component usb devhost component actually bug handling configuration descriptor table read configuration descriptor header determine size usbconfigurationdescriptort configdescheader sizet actual status getdescriptor usbdtconfig config configdescheader sizeof configdescheader actual status zxok actual sizeof configdescheader status zxerrio status zxok zxlogf error getdescriptor usbdtconfig failedn func return status configdescsize configdescheaderwtotallength auto configdesc new ac configdescsize accheck return zxerrnomemory configdescs config reset configdesc configdescsize read full configuration descriptor status getdescriptor usbdtconfig config configdesc configdescsize actual status zxok actual configdescsize status zxerrio status zxok zxlogf error getdescriptor usbdtconfig failedn func return status let see going first component fetch configdescheader structure fixed size read wtotallength field structure allocates buffer size refetches table time retrieving full amount data later usb stack wtotallength value trusted total size structure kind make sense problem first fetch second fetch usb device could modified wtotallength value fact second fetch wtotallength could bigger initial value case rest usb stack still trust perform outofbounds access reminder usb stack run userland kernel kernel bug fix usbdevice verify wtotallength sanity stack overflow navigating usb code noticed function apparent stack overflow zxstatust hiddevice hiddevicegetreport hidreporttypet rpttype rptid outreportdata sizet reportcount sizet outreportactual inputreportsizet needed getreportsizebyid rptid staticcast reporttype rpttype needed return zxerrnotfound needed reportcount return zxerrbuffertoosmall report hidmaxreportlen sizet actual zxstatust status hidbusgetreport rpttype rptid report needed actual short getreportsizebyid function return value previously obtained usb device hidmaxreportlen value call getreport overflow report array usbcontrollable data appears relevant user function could make usbtriggerable bit uninteresting bug note also safestack mitigation report array actually unsafe stack mean overflowing allow attacker overwrite return instruction pointer fix hid fix getreport buffer overrun bluetooth stack reject packet handle reject packet protocol us piece code responset rsp status status status kreject rspparsereject rsppayload btlog trace cmd ignoring malformed command reject size zu rsppayloadsize return responsehandleraction kcompleteoutboundtransaction return invokeresponsecallback rspcb std move rsp parsereject method get called rsppayload contains received packet arbitrary size method implemented follows bool commandhandler response parsereject const bytebuffer rejpayloadbuf auto rejpayload rejpayloadbufas commandrejectpayload rejectreason staticcast rejectreason rejpayloadreason payload suddenly treated commandrejectpayload structure apparent length check could outofbounds access fact directive automatically performs length check convert underlying buffer given type bound checking buffer allowed larger user responsible checking first sizeof byte represents valid instance template typename const const std istrivialv would stronger guarantee buffer contains valid object would disallow casting type useful constructor might instead cause uninitialized field bug data encodingdecoding structs staticassert std istriviallycopyablev reinterpret byte zxassert size sizeof return reinterpretcast const data outofbounds access cause assert fire kill bluetooth component therefore do denial service bluetooth component interesting bug exploitation point view un fortunately fix bt check size command reject payload sdp servicesearchresponse parsing servicesearchresponse packet sdp protocol invokes servicesearchresponse parse function following code status servicesearchresponse parse const bytebuffer buf bufsize sizeof btlog spew sdp packet small parse return status hosterror kpacketmalformed sizet readsize sizeof recordcount bufview readsize readsize sizeof bufsize readsize sizeof sizeof servicehandle recordcount btlog spew sdp packet small record recordcount return status hosterror kpacketmalformed recordcount auto view bufview readsize sizeof servicehandle servicerecordhandlelistemplaceback viewas bug rather clear bufsize readsize equal zero case whole unsigned expression bufsize readsize sizeof wrap becomes positive meaning length check succeeds code iterates performs outofbounds access except construction used const bufferview bytebuffer view sizet po sizet size const zxassertmsg po size invalid offset po zu po return bufferview data po std min size size po view method catch outofbounds access do bluetooth component interesting fix bt sdp fix buffer size check max response size hypervisor vmcall bug fuchsia come embedded hypervisor completely clear hypervisor present possibly facilitate transition fuchsia guest android chrome o system run vm execute android chrome o application noticed bug handling vmcall instruction vmexits hypervisor implement pvclock service vmcall service guest kernel ask time hypervisor executing vmcall instruction guest physical address gpa argument hypervisor writes time structure given gpa memory however vmcall instruction actually legal guest userland hypervisor verify vmcall came guest kernel therefore guest userland execute vmcall whatever gpa guest kernel memory overwritten used privilege escalation guest userland guest kernel guest kernel attacker hypervisor interface available vm escape vulnerability researched leveraged fix hypervisor check cpl handling vmcall kernel mishandling mxcsr zxthreadwritestate syscall allows set register suspended thread syscall accessible handle thread thread creation allowed default userland program invoke syscall among others syscall allows modify register encoding fpu state particular mxcsr register basically register reserved bit remain set zero problem zircon nt disallow modification reserved bit using zxthreadwritestate set mxcsr suspended thread resume fatal gp exception raised resulting kernel panic course unexploitable panic making progress least managed hit kernel fix zircon debugger nt write reserved part mxcsr register kernel mishandling iretq order return interrupt exception iretq instruction used instruction fault gp attempting return noncanonical address say return address range fault special received userland threadlocal storage tl already loaded gsbase register cpl current privilege level kernel gsbase register basically register hold pointer tl gp handler must careful switch back kernel tl continuing two bug noticed fuchsia zircon verify return address canonical returning interrupt exception handler zircon handle correctly iretqgenerated fault nt restore kernel tl gp handler combination two mean possible make iretq fault kernel fault handler execute userland tl tl zircon kernel tl zircon structure contains useful field code execution gpfreturntarget see exploitation step exploitation following create thread thread must anything infinite loop example suspend thread zxtasksuspend syscall use zxthreadwritestate change rip register suspended thread put noncanonical value also change value gsbase specific value call faketlsaddr use zxhandleclose syscall resume suspended thread thread resume kernel return execute swapgs install userland gsbase value iretq fault rip value set noncanonical kernel end gp fault handler gp handler see fault received kernel execute swapgs think since came kernel must kernel tl loaded handler therefore wrongfully stay userland gsbase value call function us tl particular quickly exit gpfreturntarget field tl nonzero actually jump address cpu jump gpfreturntarget kernel privilege end kernel us structure located faketlsaddr thinking trusted structure kernel whereas actually structure possibly controlled userland placing specific value gpfreturntarget field fake structure userland begin gain code execution kernel mode userland must choose faketlsaddr address point kernel buffer userland data got copied buffer userland directly smepsmap toy example developed simple exploit relies smepsmap present include stdioh include stdlibh include stdinth include pthreadh include zirconsyscallsh include zirconthreadsh include zirconprocessh include zirconsyscallsdebugh define aligned x attribute aligned x define barrier asm volatile memory define pagesize volatile zxhandlet mythreadhandle volatile int ready volatile int resume fakethread pagesize aligned pagesize fakeustack pagesize aligned pagesize short simplified version struct mainly interested gpfreturntarget dictate gp handler return make point userland address union struct fakecpu void direct void currentthread uintptrt stackguard uintptrt kernelunsafesp uintptrt savedusersp blockingdisallowed volatile monitor void idlestates apicid uintptrt gpfreturntarget fakecpu raw pagesize faketls aligned pagesize function run context mythread put whatever want basically executes kernel code static void void asm volatile jmp expose handle thread kinda annoying nt find way retrieve handle parent thread directly thing hidden inside pthread etc static void mythread void arg printf thread startedn mythreadhandle zxthreadself barrier ready barrier resume printf thread resumedn return null int main int argc char argv zxthreadstategeneralregst regs zxhandlet token zxstatust re pthreadt thid pthreadcreate thid null mythread null wait handle exposed ready printf main readyn re zxtasksuspend mythreadhandle token re zxok printf main zxtasksuspend failed dn re return printf main suspendedn faketlsfakecpudirect faketls faketlsfakecpucurrentthread fakethread faketlsfakecpugpfreturntarget uintptrt faketlsfakecpukernelunsafesp uintptrt fakeustack pagesize re zxthreadreadstate mythreadhandle zxthreadstategeneralregs regs sizeof regs re zxok printf main zxthreadreadstate failed dn re return regsgsbase uintptrt faketls fake tl regsrip noncanonical address re zxthreadwritestate mythreadhandle zxthreadstategeneralregs regs sizeof regs re zxok printf main zxthreadwritestate failed dn re return resume zxhandleclose token thread resume pthreadjoin thid null printf main survived exploit failed n return able gain kernel code execution regular userland process fix zircon debugger disallow setting noncanonical rip address others uninteresting bug found division zero usb driver would kill usb user process effect kernel component kernel stack info leak caused lack initialization structure copied userland actually mitigated autovarinit compiler feature initializes buffer automatically outofbounds access bluetooth stack mitigated sanity check within c method operator bluetooth dos attacker could use component memory without affecting kernel conclusion overall fuchsia exhibit interesting security property compared os android day vulnerability research allowed u conclude common programming bug found os also found fuchsia however bug often considered vulnerability os turn uninteresting fuchsia impact part mitigated fuchsia security property note however security property fact hold lowest layer kernel related virtualization exception handling scheduling bug remains exploitable like o bug found reported google fixed clear fuchsia heading whether research o google claim real o vowed used future product clear though potential significantly increase difficulty attacker compromise device
72,Lobsters,osdev,OS,seL4 is verified on RISC-V,https://microkerneldude.wordpress.com/2020/06/09/sel4-is-verified-on-risc-v/,verified riscv,riscv formerly ariane core riscv blog like,sound great mean pronounced esseellfour arguably world secure operating system o kernel o kernel lowest level software running computer system code executes privileged mode smode riscv mmode reserved microcodefirmware kernel ultimately responsible security computer system microkernel idea microkernel minimise trusted computing base part system plan b fails linux window kernel consist ten million line code contain literally thousand likely ten thousand bug huge attack surface welldesigned microkernel ten thousand line inherently trustworthy set aside o kernel including microkernels verification story world first o kernel machinechecked mathematical proof functional correctness c implementation winning u hall fame award result mean proved bugfree relative specification formulated mathematical logic proof security property show specification right property functional correctness extending binary code advanced support hard realtime system world fastest microkernel best class definition originally verified arm processor extended processor riscv processor cover important isas riscv combination riscv special riscv open instructionset architecture isa opensource o microkernel match made heaven especially term security verify assume hardware operates correctly ie specified assumes unambiguous specification first place case hardware even specification formal meaning written mathematical formalism support mathematical reasoning property know actually capture behaviour hardware reality pretty sure hardware different software bug open isa advantage go beyond free royalty one allows opensource hardware implementation example formerly ariane core developed eth zurich opensource implementation see get check whether securitycritical bug german company hensoldt cyber gmbh produced chip based ariane strong supplychain security story complement secure o funded verification riscv disclaimer interest hensoldt cyber exciting aspect open isa opensource hardware implementation prospect verifying implementation sound like big ask hard realise said verified o kernel know multiple group working towards goal sooner later one succeed revolutionary step towards achieving real security bet year away hardwaresoftware codesign security opensource hardware verified opensource o great thing security combination open isa opensource o opensource hardware enables innovation hardwaresoftware interface previously reserved hardware manufacturer thus happened snail pace really important security aware spectre attack use side effect speculative execution steal secret le understood speculative execution enough spectre need covert timing channel get information without covert timing channel spectre attack preventing covert timing channel happens something working year developed o mechanism preventing realise quite work digging deeper found hardware give u right mechanism word existing hardware broken term security underlying cause isa hardwaresoftware contract isa specifies functionality hardware intentionally abstract away anything time timing used leak information isa provide mean stopping isa insufficient ensuring security must improved would normally hopeless endeavour trying convince hardware manufacturer agree new contract imposes additional restriction trust tried even provide o extra instruction use defeat covert channel long house fire unlikely listen spectre fire apparently burning hot enough yet open hardware change enables u innovate without waiting manufacturer enables u control side fence enables true codesign benefit security partnering creator ariane eth zurich exactly explored amend hardwaresoftware contract bit give o right mean defeat covert channel could demonstrate take little highly effective relevant working group riscv foundation discussing mechanism right stay tuned riscv setting benchmark processor security complementing world secure o kernel know web site explains whitepaper written nonexperts explains verification story detail note blog originally written riscv blog site update fixed link like like loading
73,Lobsters,osdev,OS,Collapse OS has been rewritten in Forth,https://github.com/hsoft/collapseos/issues/4#issuecomment-632441341,collapse o rewritten forth,join github today sign comment hsoft reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign comment hsoft changed title question chance including camelforth collapse o forth mar perform action time signed another tab window reload refresh session signed another tab window reload refresh session
74,Lobsters,osdev,OS,Oasis: Small statically-linked linux system,https://github.com/oasislinux/oasis,oasis small staticallylinked linux system,oasis statically linked velox netsurf fast build reproducible samurai lua script minimal bootstrap dependency bearssl libtlsbearssl optional package specification osagnostic package system pkgsrc nix simple system configuration cproc workinprogress effort principle install wiki software set pkg contact,oasis oasis small linux system probably quite bit different linuxbased operating system might familiar probably better compared bsd many feature distinguish operating system completely statically linked software base system linked statically including display server velox web browser netsurf compared dynamic linking simpler mechanism eliminates problem upgrading library result completely selfcontained binary easily copied system fast build reproducible package built samurai using build manifest generated lua script involves considerable upfront packaging cost minimal maintenance cost offer numerous advantage including near optimal build time predictable reproducible build reduced buildtime dependency incremental build even across package boundary minimal bootstrap dependency posix system git lua curl utility standard compression utility cross compiler used bootstrap oasis make trivial crosscompile even nonlinux system macos openbsd bearssl system tl crypto library bearssl incredibly small well written widely adopted use libcurl native bearssl support libtlsbearssl alternative implementation libtls based bearssl oasis us bearssl throughout system optional package still require libressl instead configure set specification file package include system build system writes resulting filesystem tree git repository merged pulled another machine integrates well osagnostic package system although aim provide complete system lot free software lot match well goal rather trying build maintain yet another repository thousand package oasis work well pkgsrc nix make easy extend system software might need keeping base system small focused extremely simple system configuration guiding principle etc directory simple enough system administrator understand completely customize appropriately complex file default configuration system initialization script etcrcinit line major goal oasis build cproc c compiler much stricter iso c standard gcc clang order magnitude smaller although workinprogress effort core package others build successfully cproc principle software complexity measured including transitive dependency executables linked statically software component allow easy customization andor modification package source referenced url git submodule included directly etc simple enough understood entirety patch well organized good description always apply cleanly install install guide found wiki however keep mind oasis ambitious project still lot work user comfortable building kernel tinkering system thing go wrong run trouble always happy help software oasis us smaller simpler implementation library tool whenever possible musl instead glibc sbase instead coreutils ubase instead utillinux pigz instead gzip mandoc instead mandb bearssl instead openssl oksh instead bash sdhcp instead dhclient dhcpcd vi instead vim emacs bcgh instead gnu bc byacc instead bison perp sinit instead sysvinit systemd netsurf instead chromium firefox samurai instead ninja velox instead xorg package grouped logical set full list available pkg directory favorite software missing keep mind likely still install via pkgsrc nix contact feel free contact question email address commit log irc oasislinux freenode
75,Lobsters,osdev,OS,UNSW seL4 teaching videos,http://www.youtube.com/playlist?list=PLbSaCpDlfd6qLbEsKquVo3--0gwYBmrUV,unsw teaching video,,
76,Lobsters,osdev,OS,FreeDOS 1.3-RC3 now available,https://sourceforge.net/p/freedos/news/2020/06/freedos-13-rc3-now-available/,freedos available,download freedos,freedos release candidate available big feature freedos booting livecd test downloading contains installer user try livecd version main goal provide overall improvement compared include livecd floppy diskette edition new package update package many improvement installer provide hardware compatibility multilanguage support please help u test new release candidate download freedos also includes slight update floppy edition previewed last week floppy edition intended folk run classic pc hardware nt support cdrom medium come boot floppy plus six floppy containing freedos floppy edition package
77,Lobsters,osdev,OS,SerenityOS update (May 2020),https://www.youtube.com/watch?v=6O1NXhFKhus,serenityos update may,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature serenityos update may youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature serenityos update may youtube
78,Lobsters,osdev,OS,Why is Kubernetes getting so popular?,https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/,kubernetes getting popular,six year old loved platform number three loved platform cgroups namespaces lxc borg mesos infrastructure yaml puppet chef maxreplicas conftest open policy agent securitycontext rego cloudprovider amazon elastic load balancer extensibility custom resource definition true true operator control loop pattern operator framework operator sdk command line kudo innovation last release kubernetes project github activity community cloud native computing foundation community sigs technical oversight committee sigs existing project future serverless knative openfaas bulletin container kubernetes serverless stackoverflow,time article kubernetes six year old last two year risen popularity consistently one loved platform year come number three loved platform heard kubernetes yet platform allows run orchestrate container workload container began linux kernel process isolation construct encompasses cgroups namespaces container became thing lxc became available google developed internal run everything container mechanism called borg fast forward docker released completely popularized container mass time mesos primary tool orchestrating container however widely adopted kubernetes released quickly became de facto container orchestration standard try understand popularity kubernetes let consider question last time developer could agree way deploy production application many developer know run tool box many cloud operation engineer today understand application work explore answer article infrastructure yaml coming world puppet chef one big shift kubernetes move infrastructure code towards infrastructure yaml resource kubernetes include pod configuration deployment volume etc simply expressed yaml file example apiversion kind pod metadata name site label app web spec container name frontend image nginx port containerport representation make easier devops site reliability engineer fully express workload without need write code programming language like python ruby javascript benefit infrastructure data include gitops git operation version control approach keep kubernetes yaml file git repository allows know precisely change made made change exactly changed lead transparency across organization improves efficiency avoiding ambiguity member need go find need time make easier automatically make change kubernetes resource merging pull request scalability resource defined yaml make super easy cluster operator change one two number kubernetes resource change scaling behavior kubernetes horizontal pod autoscalers help identify minimum maximum number pod specific deployment would need able handle low high traffic time example running deployment may need capacity traffic suddenly increase could change maxreplicas apiversion kind horizontalpodautoscaler metadata name myapp namespace default spec scaletargetref apiversion kind deployment name myappdeployment minreplicas maxreplicas metric type resource resource name cpu target type utilization averageutilization security control yaml great way validate thing get deployed kubernetes example one significant concern come security whether workload running nonroot user make use tool like conftest yamljson validator together open policy agent policy validator check securitycontext workload allow container run root user use simple open policy agent rego policy like package main deny msg inputkind deployment inputspectemplatespecsecuritycontextrunasnonroot true msg container must run root cloud provider integration one major trend tech industry run workload public cloud provider help cloudprovider component kubernetes allows every cluster integrate cloud provider running example user running application kubernetes aws want application accessible service cloud provider help automatically create loadbalancer service automatically provision amazon elastic load balancer forward traffic application pod extensibility kubernetes extensible developer love set existing resource like pod deployment statefulsets secret configmaps etc however user developer add resource form custom resource definition example like define crontab resource could something like apiversion kind customresourcedefinition metadata name crontabsmyorg spec group myorg version name served true storage true schema type object property spec type object property cronspec type string pattern replica type integer minimum maximum scope namespaced name plural crontabs singular crontab kind crontab shortnames ct create crontab resource later something like apiversion kind crontab metadata name mycronobject spec cronspec image mycronimage replica another form kubernetes extensibility ability developer write operator specific process running kubernetes cluster follows control loop pattern operator allows user automate management crds custom resource definition talking kubernetes api community several tool allow developer create operator one tool operator framework operator sdk sdk provides skeleton developer get started creating operator quickly example get started command line something like operatorsdk new myoperator repo githubcommyusermyoperator creates whole boilerplate operator including yaml file golang code cmd manager maingo gomod deploy roleyaml rolebindingyaml serviceaccountyaml operatoryaml toolsgo gosum gitignore version versiongo build bin usersetup entrypoint dockerfile pkg apis apisgo controller controllergo add apis controller like operatorsdk add api kindmyappservice operatorsdk add controller kindmyappservice finally build push operator container registry operatorsdk build yourcontainerregistryyourusermyappoperator developer need even control modify boilerplate code golang file example modify specific controller make change controllergo file another project kudo allows create operator using declarative yaml file example operator apache kafka would defined something like allows user install kafka cluster top kubernetes couple command kubectl kudo install zookeeper kubectl kudo install kafka tune also another command kubectl kudo install kafka instancemykafkaname p p zookeeperpathmypath p p p p p p p innovation last year kubernetes major release every three four month mean every year three four major release number new feature introduced slowed evidenced different addition change last release furthermore contribution show sign slowing even difficult time indicated kubernetes project github activity new feature allow cluster operator flexibility running variety different workload software engineer also love control deploy application directly production environment community another big aspect kubernetes popularity strong community starter kubernetes donated vendorneutral home hit version cloud native computing foundation also wide range community sigs special interest group target different area kubernetes project move forward continuously add new feature make even user friendly cloud native foundation also organizes cloudnativeconkubecon writing largest ever opensource event world event normally held three time year gather thousand technologist professional want improve kubernetes ecosystem well make use new feature released every three month furthermore cloud native foundation technical oversight committee together sigs look foundation new existing project cloudnative ecosystem project help enhance value proposition kubernetes finally believe kubernetes would success without conscious effort community inclusive welcoming newcomer future one main challenge developer face future focus detail code rather infrastructure code run serverless emerging one leading architectural paradigm address challenge already advanced framework knative openfaas use kubernetes abstract infrastructure developer shown brief peek kubernetes article tip iceberg many resource feature configuration user leverage continue see new opensource project technology enhance evolve kubernetes mentioned contribution community going anywhere tag bulletin container kubernetes serverless stackoverflow
79,Lobsters,osdev,OS,Genode Operating System Framework Foundations,https://genode.org/documentation/genode-foundations-20-05.pdf,genode operating system framework foundation,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type objstm n first length filter flatedecode stream q efsppdp w u wz
80,Lobsters,osdev,OS,Reproducible builds progress report #3,https://lists.archlinux.org/pipermail/arch-dev-public/2020-May/029981.html,reproducible build progress report,archdevpublic reproducible build progress report allan archlinuxorg http reproduciblearchlinuxorg http wikiarchlinuxorgindexphpreproduciblebuildsstatus http testsreproduciblebuildsorgarchlinuxextrahtml information archdevpublic mailing list,archdevpublic reproducible build progress report allan mcrae allan archlinuxorg fri may utc hi quick updated progress reproducible build may noticed couple large rebuilds occurred recently fixed issue nonreproducible file ordering old version makepkg hard work team improving tooling fixing packaging issue resulted core reproducible extra see status package reproducible remaining package fix core dnssecanchors linux linuxlts n perl possible exception perl hard basket plan fix kernel package require time sort would happy people help get core reproducible investigated package extra fail reproduce note quite package currently failed build source ftbfs would helpful reproducible build team maintainer help fix package also use ci arch package run debian get overview issue package see many package currently failing build also need help investigate fix package fail reproduce investigated yet two easy use tool attempt reproduce package makerepropkg devtools repro archlinuxrepro package rebuilt package use diffoscope tool look difference jump archlinuxreproducible irc channel want help interpreting output could link copy wiki http reproduciblearchlinuxorg http wikiarchlinuxorgindexphpreproduciblebuildsstatus http testsreproduciblebuildsorgarchlinuxextrahtml information archdevpublic mailing list
81,Lobsters,osdev,OS,Genode OS Framework 20.05,https://genode.org/documentation/release-notes/20.05,genode o framework,release note genode o framework road map new revision genode foundation book new platform driver arm universe consolidated virtual machine monitor anticipation board support outside genode main repository capabilitybased security using seccomp linux featurecompleteness consistent block encrypter road map http genodiansorg development network application porting git capabilitybased security using seccomp linux gapfruit ag community summer concerted effort featurecompleteness consistent block encrypter genode trustanchor integration online rekeying online resizing vfs plugin demo scenario limitation new revision genode foundation book http genodeorg revision history great consolidation road map updated block server using api migration previous release retired noux runtime environment version sculpt vfs turned removed component feature ram filesystem server inputmerger component openvpn moved genodeworld repository port openvpn rust support removed contribution goa removed init ancient feature removed board support outside genode main repository genodeworld base framework oslevel infrastructure new platform driver arm universe blockdevice syncoperation support base api refinement deprecation unsafe method revised replaced log session removed early got aware c runtime decoupling c runtime support genode base abi package management release redirection log output trace event lightweight tracing tooling msix support optimized retrieval trace subject information library update platform execution bare hardware basehw consolidated virtual machine monitor writecombined framebuffer genodespunky improved cache maintenance arm qemuvirt platform support consolidated virtual machine monitor nova microhypervisor release hyperthreads cpuid release linux,release note genode o framework genode take road map focus consolidation optimization framework api heart contains countless underthehood improvement mostly account vastly intensified automated testing confrontation genode increasingly complex software stack stressful realworld work load find theme throughout release note result overhaul captured updated version genode foundation book section new revision genode foundation book since achieved first version sculpt o running arm hardware previous release intensified engagement arm platform section new platform driver arm universe introduces proper devicedriver infrastructure arm platform taking cue platform driver taking cleanslate approach section consolidated virtual machine monitor show continuation arm virtualization support anticipation diverse arm soc support future maintained genode lab independent group section board support outside genode main repository describes new ability host boardsupport package outside genode source tree even though genode able run top linux kernel since beginning linux solely meant development vehicle particular genode capabilitybased security model effect kernel thanks work described section capabilitybased security using seccomp linux changed combining seccomp epollbased rpc mechanism genode component sandboxed individually access control solely managed genode capability significant functional addition new version custom blocklevel encryption component described section featurecompleteness consistent block encrypter longterm project reached important milestone feature completeness well prepared introduce much anticipated feature sculpt o upcoming release given focus architectural work deferred point originally mentioned road map release particular topic related sculpt o related use case network router desktop postponed hand focus new tooling streamlining development porting genode software remained steady illustrated series article http genodiansorg example article development network application porting git capabilitybased security using seccomp linux section written stefan gapfruit ag conducted described line work close collaboration genode lab goal genode community summer enable seccomp baselinux achieve intermediate level security genode system running linux get security benefit seccomp turned rpc mechanism baselinux needed significantly reworked prevent process forging capability new implementation capabilitybased security linux map capability pair socket descriptor one transferred along socket connection using kernel mechanism invocation capability us received socket descriptor address server turn us epoll framework linux kernel get notification incoming message server side socket descriptor securely determine invoked rpc object capability passed back server rather invoked securely identified inode number way client forge capability hard part finally finished thanks concerted effort led norman feske could turn back seccomp linux kernel mechanism restricts ability process use syscalls thanks small interface required genode process whitelist approach worked nicely genode process get restricted syscalls none access file host system instead access host system must go genode rpc mechanism one hybrid component yet subject seccomp although global information host system may still accessed possibility escaping sandboxed genode process vastly reduced note change transparent user baselinux one way genode system might run socket descriptor large scenario happens need increase hard open file descriptor limit see man limitsconf information featurecompleteness consistent block encrypter genode introduced preliminary version consistent block encrypter cbe cbe blockdevice encryption component core logic entirely written spark combine multiple technique ensure confidentiality integrity consistency freshness block data efficiently furthermore whole core logic far pass gnatprove mode flow genode cbe reached feature completeness receiving support trustanchor integration online rekeying online resizing also integrated vfs plugin realworld scenario running encrypted linux vm full story would fit release note decided dedicate extra article genodiansorg published soon include tutorial deploying cbe sculpt o point however give brief summary update check code run script showcase new feature using branch trustanchor integration several reason management encryption key aspect part cbe instead external entity called trust anchor like smartcard usb dongle shall available cbe purpose first trust anchor responsible generating symmetric blockencryption key cbe via pseudorandom number generator confidentiality whole cbe device depends key primarily must never leave cbe component unencrypted even importantly trust anchor must one able decrypt got read backend device said trust anchor carry private key user exclusively asymmetric encryption decryption symmetric key every time leave enter cbe component furthermore trust anchor also key element integrity consistency freshness existing cbe device always hold toplevel hash recent cbe state known consistent startup cbe component match hash superblocks found device find correct one exclude broken modified data order stay independent concrete implementation different trust anchor cbe defines simple generic interface cover mentioned task online rekeying desirable able replace symmetric key cbe device instance trust anchor got compromised lost also preventive requirement regular basis order rekey cbe device block cbe must decrypted reencrypted obviously timeintensive task larger device presence many state device rekeying cbe therefore implemented way nt block operation device cbe continue handling request user read block write block synchronize back end discard snapshot rekeying process system turned rekeying cleanly unintentionally process automatically safely continued next startup without losing much progress cbe done rekeying old symmetric key removed completely system online resizing two pool cbe one might want redimension initialization one recent state cbe device ie range addressable virtual block pool sparse block used hold older state mentioned block pool sparse block bigger user keep snapshot device respectively snapshot differ current state rekeying resizing done online ie operation get executed parallel rekeying executed parallel resizing also system shutdown crash resizing behaves like rekeying automatically continues next startup vfs plugin demo scenario previous month phased former cbe server component solely focused cbevfs plugin together tooling component cbetester cbeinit cbecheck cbedump introduction trust anchor simplified key management plugin adapted regard still expose three main directory control snapshot current however control directory contains file createsnapshot discardsnapshot extend rekey former two file used snapshot management whereas one address rekeying extending size block pool cbe file dealt key management gone new integrated test scenario vfscberun baselinux new feature cbe exercised concurrently shellscript preliminary step vfscbeinitrun executed create cbe image file furthermore finally put cbe good use employing backing storage vms exemplary scenario cbevfs plugin running vfs server accessed management component vm cbe initialized gib virtual block device vbd mib worth sparse block exemplary cbevfs server configuration look like start name vfscbe binary name vfs resource name ram quantum config vfs f buffersize label cbefile dir name dev cbe name cbe block cbeimg dir vfs policy labelprefix bashcbe root devcbe writeable yes policy labelprefix vboxcbe root devcbecurrent writeable yes config route service name filesystem label cbefile child name fsserver service anyservice parent anyservice route start file serving backing storage cbe accessed via fsvfs plugin thanks nature genode vfs could easily normal block device simply replacing fsvfs plugin blockvfs plugin said complete cbe directory made accessible management component example bash environment step fulfill role start name bashcbe cap binary name binbash resource name ram quantum config libc stdin devterminal stdout devterminal stderr devterminal rtc devrtc pipe devpipe vfs dir name dev f label cbe buffersize dir vfs arg value bash env key term value screen env key home value env key path value bin config route service name filesystem label cbe child name vfscbe service anyservice parent anychild anyservice route start within confinement shell user may access create discard snapshot extend cbe last least may issue rekey request interacting file devcbe directory hand virtualbox access cbe limited common block operation start name vboxcbe cap binary name resource name ram quantum config vboxfile machinevbox vmname linux libc stdout devlog stderr devlog rtc devrtc vfs f label vm buffersize writeable yes dir name dev f label cbe buffersize writeable yes log rtc dir vfs config route service name filesystem label vm child name vmfs service service name filesystem label cbe child name vfscbe service anyservice parent anyservice route start vm configured raw access machinevbox configuration configuration reference cbe current working state since access limited policy vfs server used vmdk file look follows rw flat devcbedata block device size set gib given number byte sector extending operation cbe require user update vmdk configuration reflect new state cbe scenario vm able read write cbe user may perform management operation concurrently please note interface cbevfs plugin yet set stone may change plugin well cbe library continue mature interface specially tailored towards interactive demonstration usecase together upcoming genodians article cbe also publish depot archive used conveniently reproduce described demo scenario limitation please note actual block encryption part cbe cbe depend concrete encryption algorithm instead defines generic interface hand actual encryption decryption block separate entity therefore encryption module employed scenario seen mere placeholder advantage design encryption individually adapted use case without change management virtual device also includes possible use encryption hardware furthermore case encryption method found obsolete device using cbe updated easily rekeying new encryption method applies trust anchor cbe scenario represented placeholder module meant demonstrate interplay cbe replaced productive context furthermore cbe leaf lot unused potential optimization regarding performance since focused primarily robustness functionality postponing optimization stage instance even though cbe designed ground operate asynchronously conservative parametrization current version deliberately nt take advantage looking forward unleash potential next release cycle last least note cbe undergone security assessment independent genode lab yet new revision genode foundation book genode foundation book received annual update available http genodeorg website pdf document online version noteworthy addition change description feedbackcontrolsystem composition removal outdated component apis eg noux slave api additional feature alias unlabeled log session recommended next step reading gettingstarted section updated api reference mutex blockade requeststream sandbox examine change detail please refer book revision history great consolidation genode road map stated intensify consolidation optimization framework api talk ambition strongly reflected current release described follows updated block server using requeststream api previous release cycle adjust genode ahci driver well partition manager take advantage modern requeststream api thus deprecating ancient bock driver interface current release continued line work introducing requeststream api usb block driver genode native nvme driver ultimate goal eliminate block driver interface within genode component additionally nvme driver received major polishing regarding handling dma memory handling type memory got substantially simplified driver use shared memory client session directly therefore save copy operation migration lock mutex blockade since introducing mutex blockade type previous release continued cultivation using type across base o repository framework change mostly transparent genode developer one noticeable change genode syncedinterface requires mutex template argument lock class supported anymore retired noux runtime environment introduced noux genode version runtime environment executing commandlinebased gnu userland software top genode soon became invaluable feature nicely bridged gap genode rigid component architecture use broadly popular unix tool vim bash make particular without noux stepping stone could nt conceived sculpt operating system codewise noux starting point genode unique vfs infrastructure take granted today said success story noux without problem example despite significant feature overlap noux genode libc runtime environment remained distinct program targeted either environment build time another problem forkexecve mechanism noux required special hook genode base system complicated still hook remained insufficient accommodate noux top linux kernel one year ago divine plan feature set noux could implemented regular c runtime struck u turned work hoped release cycle version gradually moved closer vision current release proud announce noux become obsolete without sacrificing feature set use case noux addressed combining genode generic building block particular vfs server vfs plugins pipe terminal access fsrom server c runtime figure illustrates different approach left noux runtime environment provides traditional unix systemcall interface unix process e taking position unix kernel noux implement concept like virtual file system file descriptor pipe execvefork structurally look traditional scenario right achieves functionality without unixkernellike component vfs provided standalone filesystem server obtaining executables vfs fsrom server used unix program bash example executed plain genode component linked genode c runtime runtime transparently implement forkexecve spawning child process vim example intercomponent communication achieved via generic genode session interface like filesystem session unixlike system call interface component needed scenario right work kernel supported genode including linux retirement noux touch lot existing system scenario revisited one one among many example test case updated structure depicted fsqueryrun sshterminalrun vimrun toolchainautorun latter currently complex scenario selfhosts genode tool chain buildpackaging system top genode sculpt o prominent use case noux adjusted well nouxsystem package replaced new systemshell package dropin replacement lognoux instance leitzentrale replaced simple new component called diskmanagement operation performed executing filesystem utility standalone component prepare step inspect tab realized system composition like depicted uservisible surface profound change barely noticeable removed component feature ram filesystem server ramfs filesystem server become obsolete feature set covered generic vfs server combined import vfs plugin start name ramfs config vfs ram import import vfs config start since vfs server full substitute current release drop original ramfs server migrates remaining use case vfs server inputmerger component inputmerger component introduced version mechanism merging usb hid input stream later superseded generic input filter version functionality input merger achieved input filter using configuration like config input label input label usb output merge input name input name usb merge output config current release remove input merger openvpn moved genodeworld repository since consider initial port openvpn officially supported feature genode moved genodeworld repository rust support removed support rust programming language added community contribution included ability supplement rust code genode component via genode build system runtime library small test case however addition rust remained oneoff contribution consecutive engagement developer year kept feature alive used exercised part nightly test never picked regular genode developer eventually became stale longer attractive feature either depended outdated nightly build rust tool chain current release remove rust lift maintenance burden accommodate rust developer future may consider supporting rust genode via goa tool facilitating regular tool work flow like cargo removed present genode world repository since version time overdue remove original port genode main repository init ancient configfile feature removed configfile feature init allows use rom session obtaining configuration started component long replaced labelmatchingbased session routing route service name rom label config parent label anotherconfig service route since naming rather inconsistent terminology rom module file name actually label use case covered init generic sessionrouting mechanism took chance remove legacy current release board support outside genode main repository last decade development wide range hardware support entered genode o framework however limited resource small coredeveloper team genode lab make impossible guarantee daily testcoverage every single board entered framework point time hand crucial acceptance project like genode deliver highquality carefully tested component balance act retaining hardware support necessarily used coreteam thoroughly tested recommended hardware hand decided continuously move support hardware longer tested regularly genodeworld repository started process migrating exynos support support odroid eventually dropped support odroid xu arndale board panda board top basehw kernel got moved genodeworld fiascooc kernel support board longer part framework like build scenario one board located genodeworld add world repository repository variable build environment eg uncommenting following line etcbuildconf file build directory repository genodedir reposworld take advantage full convenience using run tool one worldlocated board tweak location kernel runtool plugin replacing following part ifdef kernel runopt include bootdir kernel endif absolute path kernelspecific file genodeworld repository typically would ifdef kernel runopt include genodedir reposworldtoolrunbootdir kernel endif near future following hardware target moved genodeworld usbarmory wandquad zynqqemu community step advantage improved transparency hardware support found inside main genode repository get tested night using ci tool genode lab target hosted genodeworld guaranteed compile regular basis hand barrier contributor introduce maintain hardware support lowered quality assurance respect genodeworld component le strict compared inclusion patch genode main repository base framework oslevel infrastructure new platform driver arm universe contrast pc device discovered runtime using pcibus discovery within arm socs device well io resource known advance given fact easeofuse genode driver arm used hardcoded io resource value particular interrupt memorymapped io register principle device actually appear within different socs even though may use different io resource innerworking technically identical recompile driver different socs configure driver appropriately substantial downside approach driver directly open interrupt io memory session core component definition free policy therefore impossible driver request io resource intended last least device driver need dmacapable memory along knowledge corresponding bus address program device appropriately knowledge made available arbitrary component given memory argument need platform driver component arm similar existing one addressing pc actually would preferable common api cover architecture device present eg certain pci device nevertheless platform session platform device interface currently used variant emerged originally called pci session got slightly frayed therefore started clean consolidated api new generic arm platform driver although first version api yet carved stone serve blueprint consolidation platform driver future new platform driver serf virtual bus client form platform session session api allows client request rom session capability inside corresponding rom dataspace driver find information related device xmlstructured form like following example framebuffer driver device device name clcd property name compatible value arm device device name property name compatible value arm device device device information example quite lean might get enriched dependent platform driver variant instance pci device information case pci device devicespecific configuration value eg hardware rxtx queuesizes deviceenvironment information eg peripheral clock frequency given information available device driver request platformdevice interface one specific device using unique name device used anymore released side effect acquisition release device affect powering clockgating io pinsetting corresponding device besides device discovery acquisition platform session allows driver allocate free dmacapable memory form ram dataspaces obtain corresponding bus address currently platform device interface limited obtain interrupt io memory resource information available io resource either integral part driver implementation derived devicespecific part platform session device rom additional naming required request device interrupt io memory session simply referenced index new platform driver arm us config rom obtain device configuration well policy rule define device assigned following example show configuration used driversinteractive package define deliver necessary device resource framebuffer input driver config device resource declaration device name clcd resource name iomem address size property name compatible value arm device device name resource name iomem address size property name compatible value arm device device name resource name iomem address size resource name irq number property name compatible value arm device device name resource name iomem address size resource name irq number property name compatible value arm device policy part owns device policy label fbdrv device name clcd device name policy policy label device name device name policy config platform driver dynamically reconfigurable detects change policy already used session one device session closed open session without configuration change affected device resource information configuration onebyone derived flattened device tree arm realview pbx board near future approach provide tooling automated derivation arbitrary flattened device tree platform driver configuration driver framebuffer device ethernet device got converted use new platform session api therefore longer dependent specific soc board definition within upcoming release plan extend support different socs using new platform session api thereby existent platform session api specific raspberry pi board vanish functionality incorporated new one blockdevice syncoperation support support sync block request extended throughout block storage stack request instructs block component flush internal buffer although already implemented prominent device driver ahci nvme encountered problem older ahci controller sync request issued ncq queue ahci controller empty addition blockvfs plugin well lxfs file system component respect sync request vfs rather filesystemsession level base api refinement deprecation unsafe xmlnode method one year ago revised interface genode xml parser promote memory safety current release mark risky api method deprecated update component modern api accordingly replaced genode strncpy genode copycstring since first version genode public api featured posixinspired stringhandling function usually named posix counterpart case strncpy unfortunate genode version compatible posix strncpy particular genode version ensures nulltermination resulting string mitigation prevalent memorysafety risk posix strncpy current release replaces genode strncpy new genode copycstring function avoid misconception caused naming ambiguity future log session return value logsession write got removed never meaningful practice yet ignoring value caller site tends make static code analyzer nervous removed allocatorguard allocatorguard early take utility tracking constraining consumption memory within component however later got aware several limitation taken approach short allocatorguard tried attack resourceaccounting problem wrong level abstraction genode introduced watertight alternative form constrainedramallocator gradually picked new component however relic past still remained present several timetested component including genode core component current release finally removed allocatorguard framework migrated former use case constrainedramallocator adjustment core respect side effect accurate capability accounting core cpu trace rm service particular dataspace capability needed coreinternal allocation via slicedheap accounted respective client go nitpicker nicdump former user allocator guard hence change touch code client server side related service c runtime decoupling c runtime support genode base abi traditionally genode component linked explicitly implicitly platform library dynamic linker ldlibso library provides kernelagnostic base apiabi hide platformspecific adaptation component also ldlibso includes c runtime provided via c abi implement support runtime type information guard variable exception c program using named feature guaranteed work genode expected since introduction package management depot archive release software package required explicitly specify api dependency genode component using base framework eg implement signal handler entrypoint dependency base api natural genodeagnostic program using libc c stl hand shall depend one specific version platform library unfortunately release independence could accomplished c simple c program reason named therefore c component specify dependency base abi unwanted result intermixture complex posix program eg application updated every time base abi changed tiny detail release cut dependency libc runtime level provide c abi symbol also libc abi implementation function remains ldlibso thus provided runtime case also cleaned many posixlevel depot archive base dependency already pave way le version update future base api change redirection log output trace event debugging timingsensitive system scenario highrate interrupt handling device driver instrumentation via regular logging mechanism becomes prohibitive cost logging skew system behavior much situation like genode feature lightweight tracing mechanism later supplemented easytouse tooling still tracing facility remains underused day one particular barrier use manual instrumentation must explicitly target tracing mechanism using trace function instead log function process switching logging approach tracing mechanism seamless current release overcomes obstacle extending trace policy interface new policy hook form sizet logoutput char dst char const logmessage sizet len hook invoked time traced component performs log output trace monitor installs trace policy implement hook traced component log output captured threadlocal trace buffer size captured data returned hook function return output directed log usual way redirection policy log output even changed component running new feature readily available use trace logger specifying policy logoutput attribute policy node trace logger configuration excerpt taken example osrecipespkgtesttraceloggerruntime config verbose yes sessionram sessionparentlevels sessionargbuffer periodsec activity yes affinity yes defaultpolicy null defaultbuffer policy label init dynamic testtracelogger dynamicrom thread ep buffer policy logoutput config thanks tomasz gajewski contributing handy feature msix support platform driver support scan msix capability pci device well parsing setup msix structure make use change msix style interrupt become usable kernel supporting msi already feature tested nvme device far msix available pci device output look like init platformdrv nvmedrv assignment pci device succeeded init platformdrv adjust irq reported acpi init platformdrv us msix vector address init nvmedrv nvme pcie controller found optimized retrieval trace subject information trace infrastructure genode allows tracking collection information available subject eg thread system retrieval information subject count n required issue n rpc call genode core component imply n time overhead intercomponent context switching release trace session got extended ability request information subject one batch thereby dramatically reducing overhead large scenario sculpt o new foreachsubjectinfo method traceclient side make use new optimization used top component library update updated openssl patch level latest version intermediate step future update platform execution bare hardware basehw consolidated virtual machine monitor virtual machine monitor introduced enriched past two release got consolidated within release cycle support well old proofofconcept implementation virtual machine monitor superseded code base architecture variant shared certain aspect cpu model differentiated positive side effect virtual machine supporting recent linux kernel version note virtualization support still limited basehw kernel variant used following board variant available top board writecombined framebuffer motivated chewy gui performance sculpt genodespunky writecombining support basehw got enabled achieve better throughput framebuffer memory set page attribute table pat configuration write combining added corresponding cacheability attribute pagetable entry framebuffer memory mapping change gui became much snappy improved cache maintenance arm conducting performance measurement particular using lot dataspaces became obvious usage arm cache maintenance operation far optimal basehw kernel consequence consolidated cache maintenance operation kernel across arm processor variant thereby also found misunderstanding hardware semantics related making instruction data cache coherent latter necessary presence selfmodifying code example java jit compiler therefore also change system call interface purpose called cachecoherentregion system call limited target exactly one page time however genode cachecoherent function base api abstract away kernelspecific system call anyway another side effect tweaked clearing memory whenever core hand newly allocated dataspace memory need filled zero prevent crosstalk component basehw kernel contains architecture specific way effectively clearing memory dramatically increased performance memoryallocationintensive scenario qemuvirt platform support thanks contribution piotr tworek basehw kernel run top qemu virt platform come two flavour virtqemu board consists ram cortex core us interrupt controller board variant cortex core interrupt controller also ram machine model support arm virtualization extension utilized using genode virtual machine monitor arm discussed section consolidated virtual machine monitor nova microhypervisor genode present cpu affinityhandling concept originally introduced release current release added support leverage two dimensional version concept grouping hyperthreads one cpu core yaxis affinity space genode genode core roottask nova got adjusted scan nova kernel hypervisor information page hip hyperthread support available cpu belonging core get grouped genode affinity space along yaxis example output machine hyperthread support look like hypervisor report cpu mapping affinity space kernel cpu id package core thread remap boot cpu remap remap remap remap remap remap remap output one determine genode affinity notation form x mapped corresponding cpu package core thread column represents report nova kernel cpu characteristic collected utilizing cpuid system boot utilize hyperthreads init configuration affinityspace configured height yaxis start node eg config affinityspace width height start name app affinity xpos ypos cpu core hyperthread start name app cpu core hyperthread affinity xpos ypos start start name app cpu core hyperthread affinity xpos ypos start config note new feature former sorting hyperthreaded cpu genodenova removed got introduced release linux executed top linux kernel genode core component used assume practically infinite amount ram basis ramquota trading within genode system current release introduces option manually supply realistic value total ram quota form environment variable genode core component environment variable genoderamquota defined value taken number byte assigned init component started core thanks pirmin duss welcome contribution
82,Lobsters,osdev,OS,Introduction to UEFI: Part 1,https://secret.club/2020/05/26/introduction-to-uefi-part-1.html,introduction uefi part,efiguard open virtual machine firmware ovmf getting started visualuefi visualuefi debugging,hello welcome first article site today diving uefi aiming provide beginner brief first look topic including uefi develop uefi software uefi boot phasesgetting started developing uefi softwareunified extensible firmware interface uefi interface act middleman operating system platform firmware startup process system successor bios provides u modern alternative restrictive system preceded uefi specification allows many new feature including graphical user interface gui mouse supportsupport gpt drive including greater drive primary partition faster booting depending o support simplified acpi access power management featuressimplified software development compared arcane biosas see many compelling reason using uefi legacy bios nowadaysthere many reason one would want develop uefi software today mentioning reason hopefully inspire attempt develop knowledge subjectone big use case uefi boot manager grub grub grand unified bootloader multiboot loader allows user select operating system wish boot whilst handling process selecting o kernel need loaded memory transfer control respective o helpful tool make use uefi remove need manual interaction loading alternative o ssometimes one may want redirect certain o kernel initialization procedure even fully prevent running possible boottime driver case well large part kernel initialization happens driver loaded modification possible point presence kernel patch protection patchguard another reason issue driver signature enforcement dse microsoft requires loaded driver window must signed valid kernel mode signing certificate unless test signing mode enabledan example uefi project modifies window kernel initialization procedure efiguard uefi driver patch certain part window boot loader kernel boot time effectively disable patchguard optionally dseanother reason developing uefi software could increase understanding system low level able follow initialization process system allows much indepth look operating system work additionally ability build o independent driver well work sophisticated toolset giving full control system something may interest many peopleuefi six main boot phase critical initialization process platform combined phase referred platform initialization pi hopefully brief description stage give basic understanding process series focus primarily dxe rt phase probably two main area interest people getting started uefithis phase primary stage uefi boot process generally used initialize temporary memory store act root trust system provide information preefi core phase root trust mechanism ensures code executed pi cryptographically validated digitally signed creating secure boot environmentthis second stage boot process involves using cpu current resource dispatch preefi initialization module peims used perform initialization specific bootcritical operation memory initialization whilst also allowing control pas driver execution environment dxe dxe phase majority system initialization occurs pei stage memory required dxe operate allocated initialized upon control passed dxe dxe dispatcher invoked dispatcher perform loading execution hardware driver runtime service boot service required operating system startupon completion dxe dispatcher executing dxe driver control passed bd stage responsible initializing console device remaining device required selected boot entry loaded executed preparation transient system load tsl phase pi process directly boot selection expected handoff main operating system phase application uefi shell may invoked commonly boot loader run order prepare final o environment boot loader usually responsible terminating uefi boot service via exitbootservices call however also possible o linux kernel configefistubthe final phase runtime one final handoff o occurs uefi compatible o take system uefi runtime service remain available o use querying writing variable nvramthe smm system management mode exists separately runtime phase may also entered phase smi dispatched covering smm introductionin section providing list essential tool help begin development journey uefi come question begin many resource easily accessible shortlist development tool recommend foremost project described modern featurerich crossplatform firmware development environment uefi pi specification wwwuefiorg project developed maintained together community volunteer many party contribute uefi specificationthis extremely helpful guaranteed contain latest uefi protocol assuming using master branch addition countless highquality project use guide one example open virtual machine firmware ovmf project aimed providing uefi support virtual machine well documentedone major downside process setting build environment first time long arduous process even getting started guide make simple possible still confusing newcomer visualuefithe visualuefi project aimed allowing development inside visual studio would recommend begin development using build tool command line project allow become comfortable platformfurthermore visualuefi offer header library subset complete library may find everything require easily accessible however much easier set comparison therefore often favored avid visual studio user debuggingin regard debugging option available pro con listed favor part series showing debug example driver may want install none help make informed decision qemu multiplatform emulator though best linux provides best debugging facility due emulator rather vm quite complex set concerning counterpart also quite slowvirtualbox good multiplatform solution exception suffering memory loss due pretty lackluster nonvolatile ram nvram emulationvmware offer good performance correctly working nvram emulation guest host window work well windbg debugging tsl rt phasesin article covered couple different introductory topic help get basic understanding uefi would expect hopefully extra question regarding topic happy answer part series technical however explained thoroughly best ability make simple follow possible providing code simple dxe driver built show example basic console input output writing serial port debugging driver qemuthank much reading far look forward continuing series coming week
83,Lobsters,osdev,OS,seL4 Whitepaper,https://sel4.systems/About/home.pml,whitepaper,performance github foundation capability family microkernels mixed criticality realtime system faq trustworthy system group hacms,highassurance highperformance operating system microkernel unique comprehensive formal verification without compromising performance meant used trustworthy foundation building safety securitycritical system available open source github supported foundation kernel mean piece software run heart software system control access resource provides finegrained access control capability control communication component system critical part software system run privileged mode microkernel mean reduced minimal core free policy therefore form dependable base building arbitrary system serving many different usage scenario member family microkernels world advanced highly assured operatingsystem kernel formal verification set apart operating system nutshell provides highest assurance isolation application running system meaning compromise one part system contained prevented harming potentially critical part system specifically implementation formally mathematically proven correct bugfree specification proved enforce strong security property configured correctly operation proven safe upper bound worstcase execution time world first operating system proof still proven operating system featuring finegrained capabilitybased security high performance also advanced support mixed criticality realtime system detailed explanation term see faq kernel scientific breakthrough result trustworthy system group t showed highperformance kernel within realm formal verification today part ecosystem supporting active use various domain including automotive aviation infrastructure medical defence key highlight demonstrating fit realworld deployment darpafunded hacms program used protect autonomous helicopter cyberattacks t continues push state art operating system close cooperation partner foundation
84,Lobsters,osdev,OS,Introducing GoboLinux 017,https://gobolinux.org/gobolinux017.html,introducing gobolinux,exercise software design freedom innovative filesystem organization simplified compilation recipe management github contributing easier ever awesome desktop new hardware software update old new runner sound interesting download disc image read documentation check wiki join community release brought developer recipe gobo gobolinux dot org,exercise software design freedom gobolinux created desire try new approach linux distribution design space innovative filesystem organization allows u use radically different approach package management effectively away package manager gobolinux continues journey one principle software freedom ability modify customize software nt truly free need rely thirdparties integrate linux distribution get complicated gobolinux asks question linux system still built scratch small team importantly customized nontrivial way remain understandable single person gobolinux structure allows see every building block linux system composed installs every package way never originally designed longevity gobolinux project year making put promise free open source software test continues deliver simplified compilation recipe management release introduces simplified model recipe management contribution fully integrated compile build tool recipe tree plain git repository managed via github cloned datacompilerecipes directory used gobolinux compile tool directly like mac homebrew project inspired gobolinux inception take page back homebrew move recipe management model becoming gitcentric managed github contributing easier ever existing contributerecipe tool used package recipe file upload gobolinuxorg server review branch local clone commits new recipe push fork recipe tree github make easier gobolinux community contribute recipe tree looking forward receiving pull request awesome desktop gobolinux continues feature minimalistic yet comfortable desktop based awesome window manager awesome wellknown excellent tiling wm lua scripting capability make extremely customizable gobo tuned ship setup based floating window familiar user keeping power feature awesome hand new desktop extends continue include custom widget wifi audio using pulseaudio battery status laptop backlight bundle new bluetooth widget screenshot functionality course new procedurallygenerated wallpaper boot live iso check hardware software update release also feature update hardware software side thing kernel driver update ensure recent hardware wellsupported overarching system update ensured total revamp software dependency away bunch legacy software old new mean python gobolinux us quite bit python infrastructure happy report converted python python entirely removed system cleaning spree also got rid legacy package gtk longer included gtk package shipped iso graphical installer us qt terminal side latest ncurses built widecharacter support asciionly libncursesso audio management us pulseaudio recent version pulseaudio quite stable able provide seamless user experience across multiple audio device course user free compile install version library wish coexist nicely system thanks runner gobolinux innovative lightweight filesystem virtualizer since gobolinux always forwardlooking distro chose provide pristine base environment latest library legacy cruft sound interesting download disc image give spin sure read documentation check wiki information join community talk get help exchange idea release brought gobolinux would nt today nt developer worked year many user submitted package recipe also like give special thanks community continued support year feedback received prereleases gobolinuxorg gobo gobolinux dot org
85,Lobsters,osdev,OS,"9pi update, Raspberry Pi 4, and go",https://marc.info/?l=9fans&m=159015648319936&w=2,update raspberry pi go,prev list next list richard miller hamnavoe com hamnavoe com message body http http prev list next list configure news add list korelogic,prev list next list prev thread next thread list subject update raspberry pi go richard miller hamnavoe com date messageid hamnavoe com download raw message body updated kernel source main change kmap implementation large raspberry pi board use full ram kernel also eliminated coherence bug would render catatonic ie interrupt response heavy load involving lot floating point subtle problem dynamic generation arm coprocessor instruction borrowed port inefficient fragile nt quite cope aggressive outoforder execution solution replace whole coprocc hardcoded coprocessor access instruction l many actually needed two change affect raspberry pi model kernelpercent value given cmdlinetxt default reduced maximum small tweak sd driver avoids flood error message swap sd card sd card image also updated besides new kernel long overdue rebuild lookman index included full go language distribution regard unwelcome bloatware delete also syslibtlscapem rcbingit required go get command work go command package built wo nt work old first generation raspberry pi problem anyone contact list set binary permalink http delivery option http prev list next list prev thread next thread configure news add list sponsored korelogic
86,Lobsters,osdev,OS,Open Sourcing the People's Code,https://dev.to/jcastle/open-sourcing-the-people-s-code-13b5,open sourcing people code,dissertation git remote graduation introduction federal source code policy premise description finding conclusion dissertation,summary phd dissertation completed spring virginia tech support entry git remote graduation introduction computer software essential daily operation industry government business government run software entertainment solving public health crisis supporting national security federal government spends billion software year little software open sourced costly allows little reuse result duplication often yield poor quality white house published federal source code policy directing major federal agency create internal source code policy update acquisition language capture new custom code inventory source code publishing portion open source software os even policy agency publishing os mixed result premise given agency budget relative size employee skill yet little publishing os believed systemic organizational factor code publication therefore premise study centered broader organizational factor related organizational cultural belief public engagement structural dimension organization location either hindering aiding agency os publication description qualitative study included metadata analysis interview artifact collection eg sop organization chart sample contained following attribute participant sw development unit cfo act agency agency multiple participant participant sw development unit unit conducted sw development data science activity unit often consumed os published unit located outside agency chief information officer cio office finding study finding pertain four organizational factor study cultural belief public engagement structural dimension organizational location cultural belief belief key component organizational culture support organizational performance belief allow organization make prediction select action experience new phenomenon cultural belief study advantageous cautionary advantageous belief belief based perceived realized outcome office published os minimally frequently held belief cautionary belief participant whose unit held cautionary belief reticent response new technology technology policy approximately half sample held cautionary belief minimally published os public engagement public engagement part larger public participation construct public engagement pertained action taken individual inside outside software development shop office publishing os tended work outside office various activity including inperson event multiple electronic tool structural dimension related technologystructure research pertains decisionmaking rule skill communication office unit whether publishing minimally frequently required formalized policy allowing structural location similar structural design research focus hierarchy office located broader organization ie organizational chart office autonomy le hierarchical layer close approving executive able frequently publish os conclusion tl dr nature post prevents adding detail study encourage read dissertation much detail study implication public administrator policy maker organization general
87,Lobsters,osdev,OS,Hannes Mehnert interview on OCaml and MirageOS,https://evrone.com/hannes-mehnert-interview,hannes mehnert interview ocaml mirageos,introduction interview pavel hannes pavel hannes pavel hannes pavel haskell hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel hannes pavel ruby hannes pavel hannes pavel hannes pavel hannes pavel hannes,introduction backend engineer pavel argentov traveled marrakech morocco attend ninth mirageos retreat held march goal event bring experienced brand new mirageos user together collaborate sync various mirageos subprojects start new one help fix bug mirageos library operating system construct unikernels secure highperformance network application across variety cloud computing mobile platform code developed linux mac o x compiled fully standalone specialized unikernel run xen kvm hypervisor event pavel spoke hannes mehnert coauthor mirageos host event work mirageos ocaml gave u detail contribution mirageos joined project also explained benefit functional programming initially drawn addition broke potential limitation mirageos ocaml gave u information new development come included full transcript interview get latest info straight best source interview pavel think start speaking ocaml start working ocaml hannes six year ago finished phd formal verification software used taking random alreadydeveloped software applying specification writing proof program actually correct turned rather complex workintensive due ubiquitous use shared mutable state quite long time interested system programming usually mean using c writing operating system given semantics background hoping use highlevel language writing operating system finishing phd stumbled upon mirageos together friend david kaloper mirageos written ocaml multiparadigm language module system used functional programming mean avoid shared mutable state actually verify program operating system came mirageos around six year ago already working extent first contribution tl stack cryptographic algorithm pavel mirageos used get hannes mirageos started research project prototype idea use different style programming operating system background also deep security main motivation contributing mirageos trying get production security perspective le mutable state run http web server tl much le code mean le bug le resource usage nt run much code nt waste many cpu cycle much memory pavel let talk tl often might hit limitation hardware everything slow crypto algorithm slow ocaml solve problem solve problem speed ocaml allow make code fast hannes yes ocaml fast runtime garbage collector memory manager collecting fast question basically whether ocaml allows write decent enough interface pas argument properly waste much cpu time turn fast enough happy use reasonable programming language instead lowlevel micro assembler side tl handshake asymmetric cryptography order make fast use library called gmpgnu multiprecision library ocaml binding exception usually try write binding use much c code complex part decryption encryption still ocaml c pavel haskell programmer highlevel language programmer concerned performance garbage collector saying slows thing haskell ca nt write kind soft realtime application think ocaml ocaml garbage collector fast enough perform use case require speed hannes yeah think haskell completely different runtime lazy evaluation default ocaml strict computation go along garbage collector welltuned workload really fast believe ocaml soft realtime application doable pavel far know unikernel concept nt unique ocaml anymore history unikernels name idea different started people come idea unikernels hannes think started university cambridge theoretical paper socalled exokernel people needed instrument system would taskfocused le resource consuming easily written easily adaptable pavel ok far know mirageos us lwt library lwt performant enough reasonable load dns server respond quickly multiple direction work fast enough hannes think work reasonably well good application example mirageos firewall integrated qubes o qubes o operating system us xen goal qubes o example mail application separated pdf renderer receive email malicious pdf view nt able access mail instead save pdf push different virtual machine different virtual machine code run pdf renderer pdf opened rendered isolated environment mirageos fit pretty well much smaller memory footprint set firewall one component inside one virtual machine inside qubes o environment receive packet virtual machine access network mirageos unikernel work router route packet pavel said something mirageos memory consumption much memory really lower upper limit heard mirageos configured memory bigger really limitation hannes well moment yes minimal amount memory ocaml runtime mirageos unikernels need megabyte upper limit moment memory easily tuned basically demand memory dns service example require around megabyte memory million record like hundred record web service run usually megabyte memory sufficient store data pavel worked irmin data store far know kind like git data store written ocaml mirageos hannes yeah irmin branchable immutable store usually nt use irmin directly use irmin via git implementation us background example dns server store zone file remote git repository fetch repository clone memory serf data irmin major release irmin pavel well let switch bit format gathering could tell u couple thing mirageos retreat come idea hannes got lot inspiration different conference also openbsd hackathons basic idea gather nice group people nice location nice weather food sunshine actually enjoy environment crucial people stay together day communicate strict schedule daily round update interested stuck specific point people may jump may solution random people start discussing problem solution people busy writing code one hand try get people long established community experience idea different library ecosystem discus fundamental change ecosystem also always appreciate new people new idea people actually integrate group get program ocaml mirageos order grow community exclusively people already know mirageos written ocaml several year open everybody willing take trip marrakech pavel great think functional programming affect programmer way thinking first started writing ocaml code started understand type transformed caused think first type meaning data work know functional programming europe part programming scholarship basic level far know student russia learn program starting imperative technique almost never get hannes yeah think lot type apply quite lot typedriven development writing actual code write program functional language first think type look like get type right shape implementation becomes much easier also code maintenance localized program understanding functional programming think much easier understand code five year later written functional language nt overuse lot syntactic sugar feature develop code imperative language hundred line function try keep function rather short understandable yes functional programming shape brain think program pavel see monad making way different language ruby c way implementing academic knowledge daytoday programming hannes think viable instrument hard comprehend nt discovered monad trying explain monad new imperative programmer hard still use monad mirageos ocaml hopefully multicore branch becoming part ocaml runtime point year get pavel let talk bit opensource everything speaking opensource point view tech succeeds enough money pumped opensource consumes effort time nt really bring money evangelizing new tech open community sooner later reach idea opensource collaboration important opensource opinion hannes think opensource crucial factor stuff actually developing library ocaml library used mirageos unikernels everybody able freely mix match together write tl stack dns implementation strong incentive opensource people reuse enjoy writing software make happy anyone using software individual company using profit fine mirageos software bsd license everybody use whatever want think important license everybody understand gpl ton page text bsd two three paragraph usually written line text also want convince industry use software better use permissive license much easier time convincing use gpl license may bit harder convince lawyer good idea mirageos example code contribution ibm research managed convince use permissive license nt easy lawyer usually want stick trademark pavel read working company sell unikernel development like working tech nt selling let say established wellknown imperative programming hannes work nonprofit company called robur work grant donation commercial contract enhance mirageos ecosystem develop unikernels last year gotten funding public germany european union got grant develop certain application like openvpn gateway moment getting funding european union work dnsmasq one crucial component everybody network pretty wonderful pavel fast mirageos develop time developing fast growing new feature hannes development always quite slow also quite lot work try get rid technical debt adapt modern build system sometimes take time project term feature mainly new library developed talked briefly irmin datastore release major milestone reached last year also upcoming tl stack mirageos heading towards version definitely improve development experience quite radically getting rid old ocamlbuild replacing new build system called dune feature incremental build pavel well let conclude talk encouraging statement developer might learn mirageos embrace ocaml stop fearing functional programming theoretical mindeater would encourage people hannes good thing fp level control rather complex code functional programming spot highlevel bug could able debug lowest level fix within single weekend common operating system impossible due size codebase involved library control entire stack fullstack development level network device card business logic real application run evrone strive stay top new tech development embrace innovative new tool method allows u use optimal resource provide client best solution meet unique need work wide variety programming language tool highly encourage team member attend contribute tech conference event mirageos retreat idea like develop let u know contact touch soon discus project help
88,Lobsters,osdev,OS,Evaluation of the Rational Environment (1988),https://resources.sei.cmu.edu/asset_files/TechnicalReport/1988_005_001_15650.pdf,evaluation rational environment,,obj extgstate font procset pdftext content rmediabox cropbox rotate endobj obj endobj obj extgstate endobj obj stream e z h k rm e l ȴx gܫ qg endstream endobj obj endobj obj extgstate endobj obj stream p endstream endobj obj endobj obj extgstate endobj obj stream ju u w 喬c x q endstream endobj obj endobj obj extgstate endobj obj stream g q v v endstream endobj obj endobj obj extgstate endobj obj stream endstream endobj obj endobj obj extgstate endobj obj stream endstream endobj obj endobj obj extgstate endobj obj stream z k z l endstream endobj obj endobj obj extgstate endobj obj stream v endstream endobj obj endobj obj extgstate endobj obj stream p l h endstream endobj obj endobj obj extgstate endobj obj stream r e v g v r pv ov endstream endobj obj endobj obj extgstate endobj obj stream zr vsatn oi endstream endobj obj endobj obj extgstate endobj obj stream f r endstream endobj obj endobj obj extgstate endobj obj stream w le b owp u l r w e v endstream endobj obj endobj obj extgstate endobj obj stream p r p u endstream endobj obj endobj obj extgstate endobj obj stream c tv z g endstream endobj obj endobj obj extgstate endobj obj stream g l jc e iy f endstream endobj obj endobj obj extgstate endobj obj stream oپ p j 麯 r hٽ gw k gt pdĉh fpcay endstream endobj obj endobj obj extgstate endobj obj stream l q h l v hwnѻ
89,Lobsters,osdev,OS,Release Notes: distri supersilverhaze (2020-05-16),https://distr1.org/release-notes/supersilverhaze/,release note distri supersilverhaze,distri distri supersilverhaze introduction blog post series blog post distri distri mailing list change since last release commits since last release minitrd custom fromscratch implementation optimized speed full distri disk image generated second debugging debugging experience debian debugging package source debugging dwarf debug symbol dwarf elf file fuse performance package build performance chrome tracing profile default http txtpbfmt go package program repobrowser http http godocorg http http repobrowser upstream check heuristic heuristically http issue tab completion new package new upstream version hygiene actually mount source directory readonly linux ignores flag bind mount microcode makefile autobuilder update instruction ensuring enough free disk space consider switching dracut minitrd updating package workaround accidentally ran old version instead newly installed one issue,distri distri supersilverhaze familiar distri linux distribution research fast package management read distri starting introduction blog post series blog post distri please direct question feedback distri mailing list change since last release following section briefly cover new feature distri link detail curious also browse commits since last release minitrd building distri disk image using eg make image distri pack directly significantly faster timeconsuming step replaced initrds longer built dracut minitrd custom fromscratch implementation optimized speed whereas previously took second full distri disk image generated second warm cache debugging previously written debugging experience debian left lot desired release distri come two feature result consider gold standard debugging experience debugging package source package source available usrsrc eg powered srcfs service like debugfs rodbg distri fuse daemon lazily downloads package repository accessed distri build writes source squashfs image file referenced debug info found source directory taken build directory make generated file available debugging source level caveat package contain least one generated source code file unavailable fixed later date debugging dwarf debug symbol dwarf debug symbol package available rodbg eg backing debugfs service already included previous release reliability improved distri fuse autodownload keep retrying started without network connectivity caveat package currently ship debug symbol even though number package ship debug symbol contain elf file fuse performance package build performance improving package build performance result faster batch build better interactive development experience iterating single package make fix performance issue heavily concurrent build eg linux hour merely minute distri batch distri build write chrome tracing profile default including cpu usersys counter memavailable counter fuse performance optimization listed previous section significantly speed package building eg build twice fast minute minute see http detail use distrijobs instead hardcoded add distri build job flag distri build ninja explicitly specify j ninja fall back without proc file system txtpbfmt use txtpbfmt go package program enforce consistent formatting buildtextproto file across repository furthermore txtpbfmt allows programmatic modification buildtextproto file distri scaffold subcommand us txtpbfmt update upstream url hash version field package buildtextproto file already exists particular mean manual addition including comment preserved make upgrading package recent upstream version even convenient distri scaffold subcommand pull flag heuristically see repobrowser detail pull new upstream version distri scaffold pull googlechrome date updating diff git ipkgsgooglechromebuildtextproto wpkgsgooglechromebuildtextproto index ipkgsgooglechromebuildtextproto wpkgsgooglechromebuildtextproto source http hash version source http hash version pull debianpackages http repobrowser distri repo browser available http similar http godocorg distri repo browser visualize content distri repository public instance http restricted repository hosted http time repo browser display current version package repository also flag package date case recent upstream version known repobrowser upstream check heuristic checking upstream newer version done largely heuristically popular service github gitlab go module etc servicespecific apis used specific code added required thus far heuristic cover vast majority package package currently categorized upstream check failed package expected example technically date autoconf current mozjs specifically requires older need keep outdated package around case upstream unreachable either temporarily server issue like recently freedesktoporg permanently eg giblib upstream url result connection refused error year sometimes heuristic result falsepositive result package shown uptodate new major version available different subdirectory project eg utillinux publish release within major version subdirectory eg http heuristic changed detect situation tracked issue tab completion tab completion package installation available default press tab key entering distri install presented list available package powered distri list fetch repository metadata demand side note default shell root account switched bash zsh also enables history default new package new package added typically needed test machine bluez dnsmasq dunst encfs intelucode linuxcpupower mesademos nano pigz screen tmux upower vim wget xclip xwininfo new upstream version number package updated current upstream version package date package newer upstream available package go module newer minor version package go module upstream package something block u updating eg new bug build failure downstreams hygiene distri command handle interruption sigint sigterm clean temporary file distri build actually mount source directory readonly linux ignores msrdonly flag bind mount distri patch provides proper interactive shell distri build log whole build output including distri message build step distri build debug flag accepts name stage spawn debug shell eg afterinstall microcode grub applies cpu microcode update intel cpu early boot amducode yet packaged makefile make usb autobuilder work went autobuilder deployed yet autobuilder eventually build every git commit quick automated feedback regarding possible breakage easy way test current version distri whether released due large data volume dozen gigabyte per commit operational challenge building single commit scratch take hour intel core setup requires careful tweaking update instruction set expectation due experimental nature distri make guarantee update work try make work long follow update instruction described good luck ensuring enough free disk space jackherer disk image gb size sufficient hold default installation version temporarily double image size host truncate distridiskimg enlarge file system within image distri install golang go get githubcomgoogleembiggendisk gobinembiggendisk verbose consider switching dracut minitrd switch dracut minitrd use echo minitrd etcdistriinitramfsgenerator effective upon next installation linux package including one distri update step updating package switch new release package repository echo http workaround update package contains distri command others required next command work properly automatic step unfortunately previously released version bug accidentally ran old version instead newly installed one systemctl fully resolve symlinks creating symbolic link etcsystemdsystem enable unit old version eg ssh remains enabled new version explicitly need enabled improvement tracked issue systemctl root disable ssh systemctl root enable ssh reboot new system pick new package version want delete old package package store also keep use older version reproduce work around bug michael stapelberg contributor
90,Lobsters,osdev,OS,Stories around the Genode Operating System,https://genodians.org/,story around genode operating system,martin stein continue alexander scrcpy video continue stefan kalkowski mnt reform mnt research gmbh continue norman feske continue stefan kalkowski continue martin stein cbe series linux vm cbe device youtube continue martin stein genode continue martin stein continue martin stein continue norman feske goa continue norman feske article continue josef continue sebastian sumpf android vm continue norman feske arm soc landscape genode perspective genode version continue alexander libvncserver project continue stefan kalkowski continue sebastian sumpf article vmm continue norman feske continue josef road map continue alexander continue christian helmuth http letsencryptorg certbot tool continue norman feske continue stefan kalkowski continue sebastian sumpf vmm continue stefan kalkowski continue norman feske continue martin stein article spunky sculpt download page continue martin stein continue norman feske talk fosdem continue norman feske continue alexander screen cast back video continue norman feske discussion inquiry continue alexander topview component tracing infrastructure video sculpt o image continue norman feske previous article continue martin stein continue norman feske part continue norman feske first article continue norman feske continue norman feske continue sebastian sumpf continue christian helmuth continue norman feske dedicated website continue tomasz gajewski continue martin stein continue norman feske continue martin stein continue josef iso continue tomasz gajewski continue norman feske continue stefan kalkowski post part continue sebastian sumpf continue martin stein continue stefan kalkowski post continue sebastian sumpf continue stefan kalkowski continue christian helmuth solarized dark continue martin stein continue johannes kliemann c spark continuum spark fizz tl library continue norman feske continue martin stein continue alexander work fosdem continue sebastian sumpf continue josef continue guido witmond second part continue valery sedletski http continue norman feske spark continue alexander tracing infrastructure audio sculpt continue guido witmond first part continue cedric degea continue alexander image release sculpt ce continue norman feske continue stefan kalkowski continue christian helmuth article continue sebastian sumpf continue valery sedletski hcl continue martin stein first part continue martin stein preview sculpt ce sculptvc documentation continue alexander continue josef continue guido witmond continue sebastian sumpf continue sebastian sumpf webm continue alexander continue sebastian sumpf microkernels componentbased o devroom fosdem unikernel continue daniel collins continue cedric degea continue norman feske continue christian helmuth question continue sebastian sumpf continue stefan kalkowski continue martin stein continue alexander sculpt continue josef continue cedric degea continue norman feske continue cedric degea continue christian helmuth continue cedric degea tt haiku continue norman feske continue,july martin stein genode community summer take place year lower floor genode lab office till gathering meant people like work genode project beeing able seek assistance genode enthusiast guy genode lab person continue july alexander post report work bringing scrcpy genode additionally short video demonstrates outcome undertaking continue june stefan kalkowski recently honored receiving first beta mnt reform shipped mnt research gmbh interesting laptop project produced team three people lukas hartmann electronics software design ana beatriz albertini dantas product industrial design greta melnik sleeve design smd assembly continue june norman feske currently right middle farreaching rework genode lowlevel gui stack like share bit background behind work continue june stefan kalkowski time time need compare execution time memory throughput genode hwkernel baseline typically using linux regarding one hardware platform supported genode mostly done hwkernel ported new hardware experience unusual workload platform like recently investigating nonworking usb driver raspberry pi continue june martin stein online video tutorial cbe series linux vm cbe device available youtube go whole tutorial starting fresh sculpt installation rekeying cbe device rebooting linux vm top continue june martin stein genode release note teased using cbe running encrypted vms sculpt article guide setting cbe device installing using linux vm controlling cbe online like creating snapshot resizing device rekeying continue june martin stein article describes detail online resizing done consistent block encrypter cbe online resizing enables user redimension block pool used cbe block device device remaining accessible throughout entire process continue june martin stein article explains detail online rekeying work consistent block encrypter cbe online rekeying mean reencrypt cbe block device completely new encryption key eventually remove old encryption key device remains accessible whole time continue may norman feske like share recent development around goa new tool porting building packaging genode component autoconf third build system enters picture turn pave ground bringing software like git genode continue may norman feske previous article presented overview undertaking port sculpt o another soc today let u take closer look first step taking technical nontechnical preparation continue may josef current usb hid driver simply par report descriptor input device operate default configuration however might undesirable input filter rescue continue may sebastian sumpf follow current state android vm line work article explained build android source execute android virtual machine genode able boot android successfully still issue camera audio device continue april norman feske since wrote article arm soc landscape genode perspective got repeatedly asked principle step needed enable sculpt o various armbased hardware platform drawing experience initial port sculpt o arm device genode version let try provide rough guide step needed port sculpt o new armbased hardware platform continue april alexander order connect vms remotely several option exist using vnc one way go virtualization solution like qemukvm builtin support native vnc client genode becomes handy post going report ported vnc client libvncserver project usage sculpt continue april stefan kalkowski last blog post described aspect hardwareassisted virtualization presented finding collected exploration work done together colleague alexander boettcher last year already mentioned one outcome work new virtual machine monitor vmm written scratch architecture meantime vmm got extended support recent generic linux kernel thereby supersedes former outdated poc implementation continue april sebastian sumpf last article described build linux image executed genode vmm platform article take thing next level creating executing unmodified android vm imx evk soc continue march norman feske using sculpt o dayin dayout simple default window manager introduced manual quite limiting article present alternative able remember window position across reboots swap window decoration fly empowers user modify window layout directly via textual interface continue march josef nvme driver component switched requeststream api accordance road map consolidation blocklevel component scheduled upcoming release sideeffect thing got little bit simpler driver although one first driver converted new api late party nonetheless continue march alexander latest sculpt release added support configure affinity number cpu available component running sculpt principal support already part genode framework since missed easily usable previous sculpt version continue march christian helmuth since first day serving genodiansorg via http retrieve site certificate http letsencryptorg unfortunately current certificateupdate process us quite complex certbot tool requires python around dozen library therefore process run temporary linux vm periodically hand like replace cumbersome procedure genode subsystem genodians continue march norman feske genode door good time update goa match recent genode version continue february stefan kalkowski last autumn colleague alexander boettcher wrote virtualmachinemonitor genode scratch intensive teamwork much fun poring alone problem fifth post first step like summarize insight work continue february sebastian sumpf brief article summarizes step necessary build runnable linux kernel initrd disk image executed top genode custom vmm platform continue february stefan kalkowski within past month collected experience enabling genode hw kernel hardware platform first series post covered lowlevel first step taken forth part like summarize insight gained enabling multicores nxp imx soc investigating several socs smp setup continue february norman feske fosdem microkernel developer room particular certainly one highlight year posting share personal impression event link interest continue february martin stein finished recent article spunky received feedback people tried run sculpt o spunky inside virtualbox vm met difficulty trying reproduce scenario noticed seems much documentation run genode scenario readytouse virtualappliance image sculpt download page virtualbox pitfall continue february martin stein series article illustrate hobby project mine trying create kernel genode written ada project writing kernel scratch rather successively take part existing basehw kernel translate ada thus design mainly follows approach taken basehw able test already translated part link together remaining part basehw interfacing ada c part done level object method time code base new kernel become ada le c maybe later work also lead formal verification spark happy ada let go continue february norman feske talk fosdem present brand new version sculpt o preview upcoming release eager play version put downloadable image online continue january norman feske previous article goa created minimalistic unix system combining genode readytouse building block universally loved gnu software time publish little creation deployed directly sculpt o continue january alexander timetotime screen cast support genode pop martin successfully ported avconv demonstrated back event sculpt o lately chance update port integrate sculpt o form package ready use following instruction guide setup additionally short video recorded running sculpt available continue january norman feske roadmap discussion vaguely mentioned plan change administrative user interface sculpt o post response john inquiry detail continue december alexander topview component tool using tracing infrastructure genode gather thread related information eg execution time prepare graphical presentation lately tool got update want share beside textual post also uploaded short tutorial video order test current version build sculpt o image continue december norman feske previous article went first life sign bash shell interactive scenario today spice little system magic potion unix namely presence collection useful utility mechanism combine someone asked one word condensing essence unix would pipe go plumbing continue december martin stein series article illustrate hobby project mine trying create kernel genode written ada project writing kernel scratch rather successively take part existing basehw kernel translate ada thus design mainly follows approach taken basehw able test already translated part link together remaining part basehw interfacing ada c part done level object method time code base new kernel become ada le c maybe later work also lead formal verification spark happy ada let go continue december norman feske let u transcend simplistic bash scenario created part enter stage interactive system continue december norman feske whereas first article goa concerned building software using commodity build system article take ride creating small unix o genode readytouse building block publishing result deploying top sculpt o continue november norman feske development application genode used require lot learning genode way organizing source code custom build system use run script goa introduce new tool aim largely removing burden application developer continue november norman feske get repeatedly asked opinion arm systemonchips socs suitable use genode even though genode support arm architecture since answer remained anything simple article present constraint faced small player attempting realize armbased product deviate beaten track using linuxbased o regarded ground truth rather subjective perspective genode lab continue november sebastian sumpf recently discovered qemu tracing feature useful examining state device model like interrupt controller cpu observing behavior guest operating system simple example let enable tracing arm interrupt controller called gic device model resides qemu file hwintcarmgicc order find trace event exist one either grep trace examine file traceevents resides directory support tracing file hwintctraceevents contains following entry arm gic continue october christian helmuth week ago got hold brandnew hp elitebook eager find sculpt o may spec promised smooth ride always face hidden obstacle continue september norman feske maintain collection future project idea dedicated website today reviewed updated topic let present idea continue august tomasz gajewski previous article described step step prepare raspberry pi genode build system able almost automatically build test compiled image device one piece missing puzzle made incomplete build device started manually article describes solution missing element continue august martin stein recently several request reached u genode lab people interested coming dresden certain period time work genode project beeing able seek assistance person give idea dedicated space genode lab hold new event genode community summer year continue july norman feske term security overloaded point make almost meaningless website speak genode technology building highly secure operating system even mean let take closer look security landscape large focus particular continue july martin stein must admit le stumbled wonderful event chance knowing expect exactly online presentation totally overwhelmed positive experience end provided location mountain appenzell breathtaking scenery hotel great amongst organizer participant enthusiastic openminded relaxing atmosphere made un conference special continue july josef release sculpt release debian buster time update downloaddebian package well briefly tested virtualbox guestadditions version version provided nonfree repository installing directly iso appear work well continue july tomasz gajewski started month ago continue july norman feske upcoming sculpt o version allows user copy paste text virtual machine terminal window application administrative interface leitzentrale article shed light underlying mechanism security consideration show configure subsystem use new feature cover caveat may encounter continue june stefan kalkowski within last week collected experience enabling genode hw kernel hardware platform like share via genodiansorg first post described first create nonfunctional dummy system image part wanted show easily develop debug early system level startup code using qemu time center exception level change flexible pagetable layout continue june sebastian sumpf published new tracefs component within depot announces file system mounted eg nouxsystem instance directory structure file system represents genode recursive parent child relationship continue june martin stein year ago wrote first device driver genode found thinking common problem area mmio region structered bitgranularity accessing structure c normally done handcrafted bit arithmetic seldom endedup long cryptographic statement raised error potential typesafety field highly desirable improve driver development unfortunately part basic c feature initiated development socalled mmio framework genode later evolved generic register framework year register framework become prefered tool describe access subbyte structure type mmio genode received lot handy feature like give overview article continue june stefan kalkowski blog series write insight porting genode hw kernel first post described first create nonfunctional dummy system image post want show easily develop debug early system level startup code using qemu continue june sebastian sumpf introduces new bit instruction set architecture isa implies exists different general purpose register set well new instruction opcodes compatible high level language like c c burden opcode generation transparently handled compiler always case eg assembly application binary interface elf format handled specifically isa article describe important adaption required execute genode architecture continue june stefan kalkowski recently got chance explore arm system level universe finally resource left implement support architecture genode hw kernel following blog post like summarize insight continue june christian helmuth week ago finally done wishywashy solarized dark color theme terminal searched palette rich contrast still pleasing eye new color palette inspired small coding project graphical terminal hack nhike weekend continue may martin stein enjoy elegant potent system behind package genode therefore found particularly sad tiny rather superficial issue always dimished user experience missing archive thirdparty code called port reported one time time user push process forward manually building large package like sculpt dependency port become annoying task continue may johannes kliemann time ago norman feske wrote c spark continuum article show spark used implement critical functionality spark implementing core component c genode describes set rule prevent unexpected side effect spark short boil stateless library written spark interact environment consume produce data might sound restricted first glance approach used strengthen security existing software parser protocol checker shield c code tainted data also applied method successfully outside genode replacing c parser fizz tl library spark implementation continue may norman feske recent series event flared enthusiasm atari home computer could nt help draft plan bridging nostalgic trip modernday sculpt o continue may martin stein series article illustrate hobby project mine trying create kernel genode written ada project writing kernel scratch rather successively take part existing basehw kernel translate ada thus design mainly follows approach taken basehw able test already translated part link together remaining part basehw interfacing ada c part done level object method time codebase new kernel become ada le c maybe later work also lead formal verification spark happy ada let go continue may alexander january presented ongoing work fosdem generalization virtualization interface genode first bunch commits entered genode master seoul vmm continue april sebastian sumpf dealing large especially ported software stack genode sophisticated debugging facility become must one way achieve develop port software stack genode linux take advantage gnu debugger gdb course possible low level software like device driver kernel general useful anything access hardware directly article describe hand experience example debug java using gdb continue april josef genode build system us gnu make build component well drive runtool automated testing key piece buildconf file one configures build system spec repository etc pp set various runtool option year instead dealing adapting file directly started use simple wrapper snippet make testing variety machine convenient continue april guido witmond blog third series genode notsotechnical people blog try answer question genode offer safety usability system nt read second part continue april valery sedletski describe set linux booting physical hard disk mounting several partition http described tweak virtualbox using physical hard disk single block session accessing exclusive fashion disadvantage virtualbox us hard disk exclusively unable use sculpt genode partition word genode partition separate hard disk flash stick may inconvenient found could give vbox selected set partition linux root partition linux swap partition data partition genode source formatted jfs file system second data partition formatted genode partition continue april norman feske spark adainspired programming language highassurance computing designed application formal verification method realworld software prospect bugfree software music ear wonder love affair spark genode predominant implementation language c continue april alexander topview package tool using tracing infrastructure genode gather thread related information eg execution time prepare graphical presentation already develop beginning early sculpt version last week extended leisure time extra feature goal selectively monitor behaviour component interest time main impulse triggered work audio sculpt missed basic online tool support get better insight behaviour system continue march guido witmond blog second series genode notsotechnical people blog try answer question genode offer safety usability system nt read first part continue march cedric degea line news hog crossing finger wind bounty sail continue march alexander image release genode sculpt ce yesterday time report updated package mine continue march norman feske released fourth version sculpt o today subtitled sculpt community experience posting like explain behind slogan continue march stefan kalkowski since first sculpt o version used several virtualmachines sidebyside one webbrowsing another email processing course one development purpose time trouble using three vms respect performance stability using rump filesystem server decided use dedicated partition harddrive vms instead image file block device backend although early problem solved kept already installed linux vms corresponding partition continue march christian helmuth post take valerius excellent article remote booting intel amt excuse detour networkdevelopment setup remote power control genode run tool continue march sebastian sumpf system programmer know deal lot uncommon bug like take chance describe one encountered day ago demonstrator working arm based system chip soc scenario suddenly started failing random instruction varying address also ever changing component example would illegal memory access page fault caused arm instruction continue march valery sedletski two week ago ordered refurbished thinkpad compatible many os including genodesculpt listed cnuke genode unofficial hcl beginning wanted set usual workflow genode developer continue march martin stein article like give practical guide create integrate run custom test scenario genode second two part missed first part may want read first continue march martin stein thing changed bit revised software deployment recently published preview sculpt ce matter wether updating sculpt vc installed vm following sculptvc documentation whether downloaded fresh debian sculptce preview brief walkthrough might help getting run course sculpt ce get released added documentation explain thing way comprehensive continue march alexander since early beginning sculpt host maintain two package running uptodate firefox vm main motivation door internet outof work vm contains sort sensible data continue march josef since previous launcher vital one gone superseded index mechanism downloaddebian package located depot cnuke virtual machine downloaddebian debian guestadditions package might target newer virtualbox host version recommended install different way properly match currently supported host version continue february guido witmond like genode platform offer system much safer bad thing threaten current system computer virus cripple mac window linux mostly eliminated become annoyance success also regulary patching close security hole become faint memory endeth advertisement continue february sebastian sumpf recent advancement home automation smart home internet thing iot networking capable embedded technology started enter working home environment ever increasing pace often lead feature performance driven development neglect security implication environment desirable smart light bulb part local network access internet connection control data flow scenario think security must important measure environment least par feature set accommodate security requirement introduce following exemplary network filter scenario continue february sebastian sumpf follow post also updated norman jakub lightning talk available webm stream continue february alexander way back fosdem recognized missed setup audio sculpt vc machine used already sculpt tc somehow never took time reintegrate sculpt vc next day fosdem trip consulted personal audio advisor josef setup thing continue february sebastian sumpf year marked genode lab turn organize microkernels componentbased o devroom fosdem brussels devroom established every year since varying opensource organization private microkernel enthusiast taken passed organization helmet great time meeting familiar new face devroom personal opinion interesting mixture talk year especially want thank unikernel speaker since brought breath fresh air devroom staying eyelevel regarding technical skill required system programming thank continue february daniel collins genode always remembered remarkable accomplishment instead le identifying feature project many recollection evolve critique based aphoric generalisms c xml microkernels especially true genode choice c examine tends bring le constructive conversation continue february cedric degea let go short sweet week picture worth thousand word situation report continuation community conversation continue february norman feske train fosdem perfect setting creating dirty little tool quickly building running single test package continue january christian helmuth yesterday afternoon take care duty kept away office motivated question mailing list last week decided write handy tip related genode development networking continue january sebastian sumpf programming genode shared library one might encounter thing like continue january stefan kalkowski currently working genode support nxp dual sabre board past manage zoo quite different arm hardware genode lab including nightly build testing hardware ranging cortex broadcom texas instrument samsung nxp socs variety hardware good stressing generic codebase make genode attractive different user group hindering development still moving kernel like genode hw continue january martin stein article like give practical guide create integrate run custom test scenario genode order take little reallife example walk single step procedure follow everytime develop new test try concentrate rather big picture detail turn give pointer documentation whenever sensible continue january alexander using sculpt working machine daytoday o became quite comfortable still inconvenient stayed one specific one appeared whenever started lunch wanted lock screen currently functionality missing power machine lunch obviously annoying started investigate solve issue continue january josef software installed sculpt using deploy mechanism incorporates caching component keep memory footprint often used part system constant time contemplated easily replace already loaded file therefor unsuited testing component however still way perform testing sculpt depot user local continue january cedric degea time around let explore interrelated topic continue january norman feske c power tool scale embedded system complex software stack imaginable started genode feature set language extremely persuasive strike great balance giving programmer full control whenever needed also featuring mean expressing highlevel software design power twoedged sword though series posting like share learned handle without regret continue january cedric degea next gui basic post delayed one slot made progress haikuongenode important sanity nothing else sort checkpoint first continue january christian helmuth first article genodians recorded preparation step enable recent notebook model development including preservation oem window installation remote power control serialoverlan logging continue january cedric degea mentionned mailinglist tt develops radio automation software haiku need second stable platform thus intend port application genode yet preserve much source code use haiku apis meaning embarked eg writing libbeso make call nitpicker rmmapped framebuffer instead sending rpclike command appserver case haiku continue january norman feske genodiansorg present idea announcement experience story tutorial around genode written people like genode user developer welcome join tribe author continue
91,Lobsters,osdev,OS,LibrettOS: a dynamically adaptable multiserver-library OS,https://dl.acm.org/doi/10.1145/3381052.3381316,libretto dynamically adaptable multiserverlibrary o,abstract,abstractwe present libretto o design fuse two paradigm simultaneously address issue isolation performance compatibility failure recoverability runtime upgrade libretto act microkernel o run server isolated manner libretto also act library o better performance selected application granted exclusive access virtual hardware resource storage networking furthermore application switch two o mode interruption runtime libretto uniquely distinguishing advantage two paradigm seamlessly coexist o enabling user simultaneously exploit respective strength ie greater isolation high performance system code device driver network stack file system remain identical two mode enabling dynamic mode switching reducing development maintenance coststo illustrate design principle implemented prototype libretto using rump kernel allowing u reuse existent hardened netbsd device driver large ecosystem posixbsdcompatible application use hardware vm virtualization strongly isolate different rump kernel instance original rumprun unikernel targeted much simpler model uniprocessor system redesigned support multicore system unlike kernelbypass library dpdk application need modified benefit direct hardware access libretto also support indirect access network server developed instance tcpip stack always run directly inside address space application unlike original rumprun monolithic os application remain uninterrupted even network component fail need upgraded finally efficiently use hardware resource application dynamically switch indirect direct mode based io load runtime evaluate libretto nvme using nginx nfs memcached redis application libretto performance typically exceeds netbsd especially using direct access
92,Lobsters,osdev,OS,The Power to Be... What? (1996),http://www.columbia.edu/cu/moment/v0/120496/beanalysis.html,power,,bebox monitor lot rumor inc maker bebox beos last month skeptical would read beos revolutionary protected memory preemptive multitasking bebox based powerpc microprocessor pci bus would always ask nt done already desperately need demo someone answer question product wonderful got inc evangelist scott paterson came columbia university december packing bebox wealth information help muster support fledgling computer maker presenting packed auditorium answered question radical design philosophy design philosophy brilliant recognizing current personal computer plagued backward compatibility problem operating system side overabundance hardware standard scalability constraint physical side set make complete package solve problem would make box based promising powerful technology would create modern operating system ground take full advantage state art computer science bebox based powerpc family cpu pci bus scsi controller nothing nothing le result hardware design straightforward enough admit could created good engineer reason nt exist market today standard hardware base knew exactly build powerful operating system around legacy software deal created powerful bit operating system preemptive multitasking symmetric multiprocessing protected memory posix compliance put four megabyte ram well box back panel bebox rich connector remarkable feature bebox clean design philosophy multiprocessor motherboard currently sporting dual cpu motherboards soon going launch quad cpu ultimately eight cpu motherboards beyond hardware limitation bebox also come nice slew feature available machine standard come ethernet card built midi support slew serial parallel port two game port proprietary port called geekport geekport mish mosh simple thing ever wanted easily accessible io line digital data acquisition hardware etc operating system hell truly exceptional product beos operating system come bebox also performs admirably power macintosh computer operating system application legacy support able stack beos hilt feature still keep tight fast demo handily played slew quicktime movie audio file ran interactive application maintaining extremely smooth performance stunning interactivity dual powerpc ram ran power macintosh port beos shelf power computing powerpc blew away ab comparison macos beos machine truly joke ab comparison macos operating system written since truly joke honesty though performance unlike anything imagined feature symmetric multiprocessing speed thing one important scalability feature inherent support symmetric multiprocessing dual cpu demo machine evangelist giving presentation demonstrated effect disabling beos put pace enabling second cpu running computationally intensive application fly user may never want disable processor clearly demonstrates robust multiple cpu support operating system beos also obviously optimized demanding task shuffling around real time audio stream trust awesome demo justice window manager also well designed example nt rely application refresh window leading guaranteed screen refreshes must seen believed imagine dragging opaque window playing movie two playing movie zero visible artifact missed frame new o feature give sweet relief one nice improvement standard operating system inclusion system wide database among thing keep track file disk allowing blindingly fast file search like standard database also provides mean application share information gracefully example change bos contact information personal information manager email client know well kind information sharing multiple software package almost impossible operating system nt guarantee common ground talk beos delivers many feature user begging able exhaust one nice feature dynamically loaded device driver rebooting machine installing new driver turn start working unload fly automatically well also provides direct yet still protected access video buffer game developer expect see hard hitting action game market next year great market amazing product reasonably priced boot fear destined fate similar amiga next main reason unfortunate conclusion target audience marketing philosophy strongly focused digital medium market plan competing home office market currently dominated microsoft aiming edge digital content creation web development niche work several way first obviously restricts size market second perform nearly well niche market hope several reason medium niche work scott paterson evangelist evening told u pc market million computer niche aiming million computer course expect kill market set reasonable goal thousand computer sound good growing person company huge compared seems modest enough attainable however company tend last long offer sustained growth starting niche market leave much room good growth plan future addition think even able break niche market good reason include everything timing software legacy fundamental flaw product targeting traditionally macintosh corner medium niche starting change currently market trend people area looking move away macintosh would great news complete product right unfortunately least another year package complete enough pose market threat leaf lot time disgruntled mac user buy pc little bit ahead would much better poised break market lack medium software legacy haunt top software legacy problem frustrating allows great breaking away software legacy problem actively recruiting third party port application beos first one everybody asks adobe photoshop indeed way however medium designer need photoshop production moment alone required use photoshop macromedia freehand adobe pagemaker microsoft front page many others professional designer need countless program function even ported beos good enough take one piece puzzle fall apart new project come suddenly need burn cd corel cd creator available even simple thing like internet explorer crucial web development design production web page requires incremental testing significant browser currently navigator internet explorer test one whichever one almost guaranteed work done reach stage sunk short internet content need developed target platform successful offer market anything really need finally target really medium production niche several flaw perception market really need term stability problem faced right operating system crash lot freehand crash lot macromedia fix people medium market need operating system stable window nt even window stable enough market honest term speed end user need power play multiple medium stream without glitch content developer important able play four movie simultaneously development people usually develop one time fact smooth performance may mission critical target computer production computer production designer luxury working one medium object instant time waiting half second screen redraw performing calculation ca nt quite done real time viewer none luxury course high end medium production calculation intensive deal large data stream fast computer optimized data path preferable end anything final display medium product critical must occur real time product mass distributed mean target likely wintel machine mac unix derivative bebox also internet content development large portion targeted market nt even require much power render dpi image edit five megabyte video clip make animated gif current technology already work fine field much important robust software support come conventional pc extra speed come bebox also expects small portion pc video gaming market captured almost complete fallacy almost major video game beos video game retailing pc market based extremely thin profit margin large market fluctuation developer need know game reach large audience possible hence computer game made microsoft operating system macintosh hope sell hundred thousand unit mostly professional content developer already ten million microsoft apple machine home would anyone go trouble expense developing major game beos hope v destiny make prediction great sadness like many computer user would simply love bebox desk assuming could run software need wish best luck bebox beos combine make robust powerful pc ever period even discussion however despite buzz fear destined become subject great many story similar surrounding beta video format
93,Lobsters,osdev,OS,BeOS Intro (1996),https://www.youtube.com/watch?v=sz3IRWM18zM,beos intro,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature beos intro youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature beos intro youtube
95,Lobsters,osdev,OS,SourceHut + Plan 9 = <3,https://sourcehut.org/blog/2020-05-11-sourcehut-plus-plan-9/,sourcehut plan,plan bell lab second,favorite operating system plan bell lab simplicity cohesive design throughout really stand opinion plan much much better operating system used used lot operating system plan perfect substantial advance state art bell lab moved keep dream alive active sarcastic fork plan vain hope people become interested plan provide better support existing community bored spent time weekend adding support buildssrht providing world first continuous integration service plan example build manifest plan image task build cd syslibrootstub cd syssrc mk nuke mk source code installed every system syssrc may guessed build manifest compiles operating system source includes c compiler linker assembler kernel userspace including python several game console emulator course doom quake second plan different posix even unix approach expecting use even port software used plan best appreciated merit think term new thing rather old thing force want check go expecting learn mold something familiar many staple modern software industry trace lineage plan go programming language direct descendant plan along linux bsd proc filesystems user namespaces even never heard plan affected consider submitting build play around
96,Lobsters,osdev,OS,Hermetic packages (in distri),https://michael.stapelberg.ch/posts/2020-05-09-distri-hermetic-packages/,hermetic package distri,distri scope plugins hermetic design glibc name service switch n adding another service n ship dozen n library nsssystemd systemd implementation hermetic package distri elf interpreter dynamic library elf file format elf interpreter rpath runtime search path switched using single subdirectory per package getting proper caching place environment variable setup wrapper program compiled program musl libc shebang interpreter patching shebang distri yet performance requirement magit dracut downside rebuild package required pick change downside long env variable cumbersome deal removing empty directory build time edge case issue accidental abi breakage plugin mechanism loaded glibc published interface spec issue wrapper bypass program reexecutes patch revert go way misc smaller issue appendix could distribution adopt hermetic package appendix demo distri,table content distri package eg emacs hermetic hermetic mean dependency package us eg libusb change even newer version installed example package available build time package always use version even newer installed package store another way saying thing package distri always coinstallable make package store robust addition break system technical level package store implemented directory containing distri squashfs image metadata file package installed atomic way scope plugins hermetic design one exception hermeticity desired plugin mechanism optionally loading outoftree code runtime obviously hermetic example consider glibc name service switch n mechanism page adding another service n describes glibc search prefixlib shared library runtime debian ship dozen n library variety purpose enterprise setup might add mix systemd account n library eg nsssystemd usergroup name resolution user allocated systemd dynamicuser option package hermetic possible remains worthwhile goal despite exception gladly use hermetic system hermetic system day side note xorg driver model characterized plugin mechanism fall category tight apiabi coupling case driver guaranteed work precisely xorg version compiled distri us perpackage exchange directory implementation hermetic package distri technical level requirement path used program must always result content implemented distri via readonly package store mounted ro eg file underneath never change change path used program practice three strategy cover path elf interpreter dynamic library program linux use elf file format contains two kind reference first elf interpreter ptinterp segment used start program dynamically linked program system typically ldso many distribution use systemglobal path distri compiles program wl full path end binary elf interpreter shown file also use readelf binary grep program interpreter display secondly rpath runtime search path dynamic library instead storing full reference dynamic library set rpath ldso find correct dynamic library originally used set long rpath containing one entry dynamic library dependency however since switched using single lib subdirectory per package rpath placing symlinks full path reference lib directory eg using wl better performance ldso us perdirectory cache note program load time significantly influenced quickly locate dynamic library distri us fuse file system load program getting proper enoent caching place drastically sped program load time instead compiling software wl dynamiclinker wl rpath flag one also modify field fact using patchelf closedsource program possibility rpath inspected using eg readelf binary grep rpath environment variable setup wrapper program many program influenced environment variable start another program said program often found checking directory path environment variable search path prevalent scripting language find module python pythonpath perl set search path environment variable run time distri employ indirection instead eg teensyloadercli run small wrapper program call precisely one execve system call desired environment variable initially used shell script wrapper program easily inspectable turned slow switched compiled program linking statically fast startup linking musl libc significantly smaller file size glibc perexecutable overhead add quickly distribution note wrapper program prepend path environment variable replace entirely important user way extend path variable choose hurt hermeticity relevant program present build time ie plugin mechanism design hermetic shebang interpreter patching shebang script contains path hence need changed distri yet number packaged script small performance requirement performance improvement previous section good practically required many process involved without encounter secondlong delay magit spawn many git process cover dracut spawn one cp process per file downside rebuild package required pick change linux distribution debian consider advantage roll security fix entire system updating single shared library package eg openssl flip side coin change single critical package break entire system hermetic package reverse dependency must rebuilt library change picked whole system eg openssl change curl must rebuilt pick new version openssl approach trade using bandwidth disk space temporarily reducing blast radius individual package update downside long env variable cumbersome deal partially mitigated removing empty directory build time result shorter variable general getting around one little trick use tr n eg echo path usrbin bin usrsbin sbin echo path tr n usrbin bin usrsbin sbin edge case implementation outlined work well hundred package small handful exhibited problem kind issue encountered issue accidental abi breakage plugin mechanism n library built glibc newer loaded glibc likelihood change happen often illustrate glibc published interface spec sufficient forward backwards compatibility distri could likely use perpackage exchange directory glibc n mechanism prevent problem happening future issue wrapper bypass program reexecutes program try arrange reexecuted outside current process tree example consider building program meson build system meson first configures build generates ninja file think makefiles contain command line run meson internal helper meson return ninja called separate process environment meson wrapper set ninja run previously persisted meson command line since command line us full path meson wrapper bypass wrapper luckily many program try arrange process tree run table summarizing affected program might try arrange reexecution whether technique result wrapper bypass distri technique execute us wrapper mitigation runtime find basename path yes wrapper program compiletime embed expected path bypass configure patch runtime argv procselfexe bypass patch one might think setting argv wrapper location seems like way sidestep problem tried distri revert go way misc smaller issue appendix could distribution adopt hermetic package high level adopting hermetic package require two step using fully qualified path whose content change eg generally requires rebuilding program eg prefix set use fully qualified path need make package able exchange data distri solves exchange directory implemented ro file system backed fuse daemon first step pretty simple whereas second step expect controversy around suggested mechanism appendix demo distri appendix contains command output run upcoming distri version supersilverhaze verified work older version large output collapsed expanded clicking output bin directory contains symlinks union package bin subdirectory readlink f wrapper program bin subdirectory small l lh readlink f binteensyloadercli rwxrxrx root root apr wrapper program execute quickly strace fvy binteensyloadercli head cat n execve binteensyloadercli binteensyloadercli userroot lognameroot homeroot r shellbinzsh dbussessionbusaddressunix pa xdgsessiontypetty xdgsessionclassuser pwdroot oldpwdroot usrbinstrace archprctl archsetfs settidaddress brk null brk brk brk brk brk execve userroot lognameroot homeroot r shellbinzsh dbussessionbusaddressunix pa xdgsessiontypetty xdgsessionclassuser pwdroot oldpwdroot usrbinstrace confirm elf interpreter set binary using readelf readelf grep program interpreter requesting program interpreter confirm rpath set package lib subdirectory using readelf readelf grep rpath rpath library rpath verify lib subdirectory expected symlinks target version find lib type f printf p verify correct library actually loaded set lddebug environment variable ldso lddebuglibs teensyloadercli find searching search rpath file trying n library distri ship find lib name libnss type f printf p
97,Lobsters,osdev,OS,Rust-Written Redox OS Booting The 128-Thread AMD Ryzen Threadripper 3990X,https://www.phoronix.com/scan.php?page=news_item&px=Redox-OS-On-Threadripper-3990X,rustwritten redox o booting amd ryzen threadripper,redox o thelio major threadripper gnu hurd still lacking smp support,rust language focused redox o opensource operating system able boot amd ryzen threadripper processor run full multithreading capability one fundamental rust programming language offering safe concurrency redox o multicore issue week sorted lead redox o developer engineer jeremy soller turn verified working multicore system using thelio major stunning threadripper great see redox o microkernel smp support coming together due course interesting see performance especially last check gnu hurd still lacking smp support
98,Lobsters,osdev,OS,On µ-Kernel Construction (1995),https://os.itec.kit.edu/downloads/publ_1995_liedtke_ukernel-construction.pdf,µkernel construction,,âãïó obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r jt r endobj obj filter flatedecode length r stream q ãôt økkk à ûä ââwg õôaåáòàl ï h ê ñ tdv uw f éz ó umôîkùùòíğ q qöo ê ñôor àwm øìãçh ê æë gñ ë üô vä ğ yy fèğ qæ êà äÿt vaœâ šz ãú äà à aoj w r ïå ÿ å ã xf ú µh hós æ b æ ù îr kr r ì ğş à jõ æk yˆ ìap ké é îæ ü ol ùgn gñ kqæ nkxù èuº äsßj óeä ã kâ è ç ªğç ò iõ œ vf thåñ îıiöç ç g rx v é rà ç ëwõb ëlr ì l ÿwmç àudé úaç u íâ šğšuthšj ºóóuqkß š x œ qkšlcl ûë uoîe öc k k nõra à œ ô ø õ tp c â ëfœ ópõ æâ òë ëà ë öè ô h c îúõ šw xîìj j lãıu júrjó îmüš ù êa áæ ös j n pƒpö xáœ œ xøn äàÿ å hşwïq ÿ
99,Lobsters,osdev,OS,Notes on the Plan 9 3rd Edition Kernel Source,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.75.5409&rep=rep1&type=pdf,note plan edition kernel source,,obj stream mc ɠ endobj obj endobj obj stream endobj obj endobj obj stream z u zq r h
100,Lobsters,osdev,OS,improving libossaudio and the future,https://blog.netbsd.org/tnf/entry/improving_libossaudio_and_the_future,improving libossaudio future,audio ossaudio audacityportaudio os usage strange incompatibility sndctldspspeed incompatibility sndctldspchannels incompatibility sndctldspsettrigger discussed techkern incompatibility sndctldspsetplayvol future libossaudio netbsd os aside comment,april posted nia alarie two way user application communicate kernel audio layer netbsd audio native api based sun api number useful netbsd extension ossaudio translation layer providing approximate compatibility ioctls also supported freebsd solaris popular past linux linux drifted away os towards alsa due licensing disagreement drift seeing increasing problem os adoption today even licensing concern longer relevant implementation os surpassed original linux implementation far feature set usability concerned netbsd recommended use native api new code rely os layer compatibility existing code spent working thirdparty software improve support native netbsd audio included firefox sdl portaudio ffmpeg working yhardy however turned attention os translation layer since lot older le popular software still relies wanted go specification iron surprising difference audacityportaudio os usage strange note fix enable audacity work without patching audacity interesting hit lot edge case far os api usage concerned fixed notable issue made sure audacity also supported native api writing necessary portaudio glue sunnetbsd audio implementing fix took approximately two day incompatibility sndctldspspeed range sample rate handled properly os layer netbsdcurrent netbsd kernel support sample rate specify anything higher netbsd audio api return error code keep sample rate original value legacy default hz particularly useful modern device however os application expected setting sample rate always succeed specification state actual set sample value may approximation always use exact requested value requested value range netbsd return call succeeded set sample rate current configured hardware rate usually multiple startup process audacity requested overly high sample rate well maximum supported still sure later configures audio device standard cd rate meant audacity could nt properly start without local patch incompatibility sndctldspchannels range channel number handled properly os layer netbsdcurrent simple fix similar sndctldspspeed netbsd kernel support channel audio playback commonly mono stereo higher number used surround sound system limit come usb audio device specification range number specified libossaudio set channel count currently configured number use hardware level however encounter difficult difference os netbsd audio using audio device full duplex recording playing back device simultaneously mic mono speaker nt set channel count different number os ca nt one ioctl setting recording playback channel native api possible setting inforecordchannels infoplaychannels separately ensure recording channel always duplicated number playback channel incompatibility sndctldspsettrigger netbsdcurrent implement sndctldspsettrigger sndctldspsettrigger somewhat obscure part os api really useful using poll another event notification mechanism audio device performing io performing io via mmap neither particularly common practice ability force initialisation playbackrecording device nt already case term native api mean playbackrecording becomes unpaused previously netbsd part os api nt implemented simply nothing however became obviously needed due incompatible change netbsd discussed techkern basically needed recording properly triggered without read application using poll without prior io would nt block indefinitely incompatibility sndctldspsetplayvol special bit manipulate volume individual stream application math inside kernel nt support properly yet reasonably could code need modified volume manipulation application support disabled found couple application try use feature audacious qmmp currently configured avoid using layer audio sdl qtmultimedia instead least fixed sndctldspgetplayvol return conforming value netbsd audio us gain channel us range encodes two channel integer odd opinion also limit surround sound support future libossaudio netbsd hopefully change os compatibility much better shape dealing unusual parameter uncommon api usage quality code also improves process work maxv pointed towards related information leak linux compatibility layer kernel able deal properly looking os specification linux header fix pulled however personally like eventually reach point longer need libossaudio writing lot code towards goal many case application relying could easily modified told use instead native netbsd audio support os aside probably need start thinking supporting pcm kernel since found audio player ca nt handle making sample writing device sun audio implementation solaris supported long time comment
101,Lobsters,osdev,OS,"Embeddable Linux Kernel Subset. Linux-like system for IA16 (8086, 286, V20 and more)",https://github.com/jbruchon/elks,embeddable linux kernel subset linuxlike system,build prerequisite quickstart build step http githubcomelksorgelksactions queryworkflow information vgerkernelorg index elk documentation,project write linuxlike o system based intel architecture bit processor nec compatibles system ancient computer ibmpc xt clone recent sbc soc fpga reuse huge hardware software legacy popular platform watch elk action build prerequisite build elk need gnu development environment including flex bison texinfo quickstart script provided automate whole build process cross toool chain configuration kernel user land target image make easier elk newbie buildsh note script must executed within top folder elk repository current one topdir want clean everything afterwards except cross tool chain cleansh build step create cross subfolder mkdir cross build cross tool chain mainly based recent including bcc used previous version dropped obsolete maintained toolsbuildsh ubuntu lts user step quite long download already built cross folder http githubcomelksorgelksactions queryworkflow set environment path topdir crossdir envsh note script configure kernel user land target image format make menuconfig build kernel user land target image make target root folder built target depending configuration folder packed either floppy disk image hard disk image hd without mbr file image rom tar image folder writting image real medium test first qemu qemush modify configuration source repeat step cleaning kernel user land image make clean information question problem patch open issue project also join email list vgerkernelorg information documentation folder index elk documentation
103,Lobsters,osdev,OS,A Linux in unikernel clothing,https://dl.acm.org/doi/pdf/10.1145/3342195.3387526,linux unikernel clothing,abstract,abstractunikernels leverage library o architecture run isolated workload cloud garnered attention part due promised performance characteristic small image size fast boot time low memory footprint application performance however aimed generality fall short application compatibility robustness importantly community available linux paper describe evaluate lupine linux standard linux system kernel configuration specialization system call overhead elimination achieves unikernellike performance fact outperforming least one reference unikernel dimension time lupine run application since linux faced general workload whereas many unikernels simply crash demonstrate graceful degradation unikernellike performance property
104,Lobsters,osdev,OS,Device Drivers in Loko Scheme,https://weinholt.se/articles/drivers-loko-scheme/,device driver loko scheme,loko scheme scheme going long one virtio driver infrastructure fiber fiber guile device intel custom firmware serial interface motorola interrupt device pci bus mastering dma realtek driver queue virtio virtqueues virtio virtio hardware future work network stack post script sound one network clapping,loko scheme scheme compiler run linux bare metal useful bare metal need device driver one interesting device driver virtio net driver pave way virtio driver going long one explaining virtio briefly go device driver work loko followed description increasingly modern hardware description intended didactic rather historically accurate taken freedom description still get pretty long scroll bottom interested virtio read whole thing feel free fill comment section correction elaboration detail anecdote driver infrastructure device driver loko written scheme use fiber lightweight concurrency think fiber loko similar goroutines golang communication rest system happens mostly via channel channel buffered two fiber must rendezvous exchange message channel ie one fiber need put operation another one get operation api design heavily based fiber gnu guile simplest device might need fiber generally good idea anyway order manage concurrent access shared resource device loko scheme use lock fiber basically choice device driver fundamentally act bridge two different part system device one hand kernel application hand device anything like network card disk controller hard drive keyboard often something pick responsibly toss garbage kernel interface driver loko based channel device driver started given channel use interface towards kernel simple way represent network card might look like definerecordtype iface field rxch txch ctrlch notifych obviously simple information needed full network stack required channel driver need know put packet receives network card put rxch channel driver get packet txch channel tell device transmit control notification channel used everything else like mac filter link notification device driver loko loosely coupled kernel via channel loko providing higherlevel interface top network stack file system still possible application access driver directly isa device modern pc come bunch legacy hardware day early ibm pc bus time isa bus call isa device like appendix tail bone might longer believe relevant still role play commonly used device category controller realtime clock rtc uarts controller handled keyboard mouse often still role today laptop rtc wired battery motherboard keep time even computer turned uart handle serial port computer device usually offtheshelf component controller intel microcontroller custom firmware serial interface rtc something like motorola uart work embedded system today would find large power hungry otherwise approachable device accessed io bus cpu hooked bus special instruction using loko scheme api loko system unsafe signature busaddr busaddr busaddr busaddr n busaddr n busaddr n access isa device listen wellknown io bus address usually adjacent example set baud rate uart define uartsetbaudrate iobase rate define lcr iobase define dl iobase define dh iobase let latch div rate unless latch xffff error uartsetbaudrate invalid baud rate rate let lcr lcr lcr bitwiseior lcr dl bitwisebitfield latch dh bitwisebitfield latch lcr bitwiseand lcr fact dl dh register become accessible setting another unrelated bit typical device tried save expensive address decoding logic register io address common know get data device need read datasheet figure register poke missing piece puzzle write power efficient driver device possible poll device see data really wasteful want device tell kernel run driver handled interrupt dijkstra said great invention also box pandora exact moment interrupt unpredictable outside control interrupt mechanism turned computer nondeterministic machine nonreproducible behavior could control beast profdr edsger w dijkstra loko scheme try take beast integrating interrupt fiber system waitirqoperation procedure take interrupt request irq number blocked interrupt fired fiber system make possible compose arbitrary combination operation perform one go returning one finished driver would normally written wait interrupt time wait message one channel particular loko use upper bottom half interrupt handler special interrupt context driver code run forbidden certain thing like kernel manual loko approach interrupt isa device pci point everyone ready faster computer required faster bus pci came along several improvement isa bus besides faster better connector pci bus enumerable software actually set register io bus provides window pci configuration space configuration space let software select talk device bus number device number function number loko scheme loko driver pci library provides api accessing common task enumerate pci bus pciscanbus find device address io bus memory bus pcidevbars read pci configuration space see device type configuration pcidevvendorid etc directly etc write pci configuration space enable io memory etc isa device address usually hard coded probed sometimes physical jumper set io address irq number pci changed instead bios assigns address irqs device o later enumerates bus find assigned linux assigns address bios bad job sorry bios know tried earliest pci device le isa device pci bolted could find pci uart card us pci physical interface configuration otherwise expose usual uart register pci ide device compatible isa counterpart pci bus mastering dma people ready even faster computer became apparent device would need work without involvement cpu inefficient cpu need handle byte every transfer isa actually dma controller solve problem special device programmed perform transfer system memory device isa dma controller limited mhz transfer even slower time transfer cpu instead improving isa dma controller also happened winning solution pci bus mastering way let pci device become master pci bus allows perform transfer system memory one common pci bus mastering device realtek network card driver allocates buffer system memory give address network card writing one register loko scheme done dmaallocate dmafree use address driver pass suitable mask dmaallocate driver start receive part frame network device writes buffer using bus mastering dma fire interrupt frame usually internet packet encapsulated ethernet header driver need handle frame put rxch channel advance pointer device let know space available buffer transmission frame similarly simple two set register called transmit descriptor basically pointer length field driver copy frame address set next transmit descriptor interrupt fired transmit done desired read frame system memory using bus mastering dma whole driver currently le line actual code worth studying dma queue people became ready even faster computer new hardware design needed good tiny buffer handle incoming frame four outgoing frame pending intel network card demonstrates next step evolution letting device handle work independently cpu card single receive buffer limited number transmit descriptor either one unfortunate aspect frame become unaligned generally need copied buffer problem buffer easily get full anyway eliminates problem using level indirection driver allocates system memory area receive descriptor receive descriptor point buffer device write frame device written frame update status field descriptor read link next receive buffer reach descriptor end marker stop receiving let driver know descriptor room improvement later model briefly use fifo happens transmit descriptor also memory driver set circular linked list transmit descriptor four transmit descriptor register transmit descriptor actually lift another limitation mentioned yet byte transmitted consecutive memory always case network packet might assembled separate buffer going several network layer prepend header transmit part driver get packet txch channel fill next available transmit descriptor tell device resume transmission simple management descriptor necessary reclaim used descriptor pretty straightforward virtio virtqueues people ready faster computer brought thing like pci express message signaled interrupt msi people noticed pc gotten fast wanted put cave rent virtually thus cloud born virtualization primitive long time basically meant something pretending computer working even slowly poorly hardware improved cpu even device grew direct support virtualization virtual machine host usually emulate real hardware like network card along selection worse better card go everything else computer emulated ide controller emulated uart etc really terrible part device register interface better device idea dma queue work usually minimize number register access either hardware virtualized reading writing device register mean cpu switch guest host back guest dma queue always custom get quite intricate form larger part getting driver working enter virtio virtqueues virtqueues virtio standard dma queue kind virtio device set virtio queue network card receive queue transmit queue control queue come data structure queue register queue work identically transport block byte device system memory mean common library setting queue reused virtio device driver virtqueue area system memory three part descriptor available list used list initially descriptor free driver want dma transfer take free descriptor fill buffer pointer buffer size transfer direction take next slot available list update point transfer descriptor tell device look list descriptor available device done descriptor put list descriptor used optionally fire interrupt simple system used build type device device type specific detail go inside transfer extra register available difference pretty mild compared debug way dma queue never seen nowadays even real virtio hardware future work driver particular virtio driver disk console video dma allocator another allocator built top suitable smaller allocation something like slab slub even slob allocator driver often need allocate small amount memory smallest allocation dma allocator byte network driver hooked proper network stack yet tcpip network stack need bit work would interesting get running post script jokingly wrote people ready even faster computer find funny hardware seemingly got better level people ready accept concept already known want know next perhaps glimpse future guy steele presentation connection machine sound one network clapping
105,Lobsters,osdev,OS,Debian dropping a number of old drivers is angering vintage hardware users,https://www.phoronix.com/scan.php?page=news_item&px=Debian-Dropping-Old-Drivers,debian dropping number old driver angering vintage hardware user,affected mailing list release every year dropped many driver year ago,phoronix reader written past day expressing outrage debian gnulinux dropping number old hardware driver earlier month debian x strike force team decided drop number obsolete input video driver debian basis dropping old input display driver either unmaintained upstream provide value distribution among driver affected mach ati rage savage silicon motion si trident neomagic graphic hardware hardware like ati rage year old along many hardware supported driver originally geode display driver also set removed later kept input driver elo touchscreen mutouch others also dropped among jumping bug report mailing list pointing driver used old apple hardware others saying debian supporting old hardware important upstream xorg driver still maintained may see release every year fix compiler warning compatibility new xorgserver release seldom actually tested actual hardware developer often maintaining driver upstream hardware access sometimes driver upstream end sitting around broken year fedora meanwhile dropped many driver year ago various linux distribution especially time desktop linux distribution gone new installation done away vintage hardware support debian camp wanting vintage hardware driver return would need step maintaining get reintroduced debian
106,Lobsters,osdev,OS,Visopsys 0.9 released,https://www.osnews.com/story/131670/visopsys-0-9-released/,visopsys released,released change log author thomholwerda,visopsys hobby o pc started version released morning change log summary major release offer subtly updated look enhanced networking capability associated program unicode support software packagingdownloadinstalluninstall infrastructure online store user space window shell vmware mouse integration http xml html library c posix thread pthreads support pipe interprocess communication additional hashing algorithm visopsys long history osnews oldest mention relatively steady development ever since author follow twitter thomholwerda
107,Lobsters,osdev,OS,"A note about SSL/TLS trusted certificate stores, and platforms (OpenSSL and GnuTLS) (2015)",https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/,note ssltls trusted certificate store platform openssl gnutls,page openssl newer capable system used system nt work well thread request aside openssldir cryptlibh debian openssl changelog bug report bad bad book even historical trivia hell deal red hat dir anyway modssl old modssl tarballs old red hat linux package ancient samba bug n gnutls edit pkcs module commit commit,pop quiz openssl default store trusted ca certificate file etcsslcerts etcpkitlscertscabundlecrt etcsslcertscabundlecrt etcpkitlscertscabundletrustcrt etcpkicatrustextractedpemtlscabundlepem systemlibraryopenssl goddamn place answer trick question well done take gold star knowledge andor testtaking skill depending platform could exist sensible choice o x least according page give fun rather old choice depending mostly o distribution running openssl writing software ssltls certification validation using openssl well commiseration also please nt assume location exists certainly nt hard code one default usually try use ssl library default store fails fall back trying default location also provide configuration option user specify store location handle two different type location openssl derivative like libressl store trusted ca certificate single file containing one concatenated certificate pem format directory containing individual certificate file pem format file named specific format according hash value directory usually produced running crehash command directory full certificate file humanreadable name produce symlinks expected format trust extract extract command also support debian red hat fedora opensuse system produce canonical trust store certificate found various location idea allow flexible packaging distribution default trusted certificate system administrator add override list way software respect choice debian system ultimately populates etcsslcerts directory certificate file run crehash also produce bundle file etcsslcertscacertificatescrt sure considered preferred debian purpose either debian derivative rely etcsslcerts usable hashed directory etcsslcertscacertificatescrt bundle file rhel higher version fedora care rhelfedoraderived distribution others derived rhel fedora use system eg arch since follow default location system creates bundle file newer capable system used since fedora rhel used earlier release system ultimately provide bundle openssl expected format etcpkitlscertscabundlecrt safe default location fedora release believe rhel opensuse believe see system canonical location varlibcacertificates canonical bundle file produced varlibcacertificatescabundlepem hashed etcsslcerts directory exists compatibility thing expect debian layout post opensuse explicitly recommends relying ssl library default path system openssl know read nt hardcode path call sslctxsetdefaultverifypaths instead note fedora rhel provide etcsslcerts directory attempt debian compatibility actually nt work well provides bundle file etcsslcertscabundlecrt nt match debian bundle name make attempt make directory usable hashed directory basically nt use rhelfedora etcsslcerts trap nt use etcsslcertscabundlecrt even though probably exist current fedorarhel installs canonical location fedorarhel unlikely exist anything else may possibly go away fedora future nt use wanted handle trust store location could probably cover linux distros checking etcpkitlscertscabundlecrt etcsslcerts order using first found appropriate way first bundle file second directory still would nt covering nonplatform build openssl o x window really like said first try letting openssl handle using openssl directly function want sslctxsetdefaultverifypaths default trust store specified time openssl build app wind using done get used distribution always make sure properly handled ought work o x window well hilariously enough function nt officially documented thread discussion using wrapper probably ought either somehow expose function use way see eg sslcontextloaddefaultcerts python though really ought use something like request python possible worried case somehow nt work fall back checking fedorarhel debian default location knowing fall back might bit tricky forget detail believe sslctxsetdefaultverifypaths fail also succeed result empty set trusted certificate probably check case exactly hard want look default trust store app ca nt find one extent dependent app may make sense bail warn user go ahead without certificate validation ie insecurely warn user something else pretty contextdependent think carefully whatever case thing probably mentioned allow user configuration even distro allows modification default trust store may case user wantsneeds use different trust store app maybe given nature app deployed user want trust site ca instance allowing user configuration really ought allow trust store either format easy handle using openssl directly use sslctxloadverifylocations function first argument function always ssl context loading bundle file trust store go second argument third null loading hashed directory trust store go third argument second null openssl wrapper language usually expose fairly directly need test whether provided location file directory load appropriately handle case neither appropriately usually going want throw kind error would nt recommend falling back system default trust store user going trouble specifying location quite strongly implying want aside openssldir poke around enough random forum mailing list stack overflow discussion stuff find occasional assertion someone usually red hat nt following openssl default making everyone life harder eg far tell nt accurate sake thoroughness looked sslctxsetdefaultverifypaths actually work go fairly complex code path basically wind trying load certificate default file default directory default location defined cryptlibh openssldir cert default directory openssldir certpem default file openssldir well configure build time openssldir configure script neither parameter prefix passed would closest thing openssl default becomes usrlocalssl afaik distro actually us usrlocalssl openssldir far see standard location ever defined commonlyadopted specification nothing version fhs lsb openssl location therefore really default openssldir location distribution pretty much picking hat since year dot reader want specific historical trivia fine oblige debian openssl changelog look like etcssl came existence one snowy night indulge christoph martin christophmartin unimainzde wed mar ssleay unstable urgencylow include message usage rsaref move configfiles usrlibssl etcssl also track invention red hat etcpkitls precisely bug report indebted ben kahn reference reference also indicate previous location usrsharessl red hat usrlibssl debian indeed first entry fedora openssl changelog confirms tue oct bernhard rosenkränzer bero redhatde inital packaging change base move usrlocalssl usrsharessl fhs compliance handle rpmoptflags debian red hat disagreed openssldir least since first day red hat package debian openssl package date back ssleay could make argument red hat matched debian location already moved etcssl time rh openssl package showed life would lot simpler nt picking stone age spec file bad bad red hat displease monkey bonus random google reference book published indicates suse using usrsharesslcerts trust directory time presumably using usrsharessl openssldir red hat shipping system trusted cert usrsharesslcerts rather usrsharesslcertpem bundle even historical trivia hell deal red hat cert dir anyway digging made start wondering hell deal openssldircerts red hat anyway recap existed least since oldest nevr distinguish fedora git repo cabundlecrt file added package entirely clear directory created first place ca nt see makefilecertificate created put makefile comment context indicating whether created regard openssl expectation directory default ca trust directory think offline copy old cv repos somewhere may still let someone access distinguish first commits package sure time thing installed new usrsharesslcerts makefilecertificate installed usrsharesslcertsmakefile still exists today time could create key pair csrs selfsigned certificate sslconf file shipped modssl package time expect find server certificate key usrsharessl configured look modssl config dirs etchttpdconf took troll openssl source near tell even back ever expected find openssldircerts crehashstyle individual certificate file fact whole sslctxsetdefaultverifypaths complex pretty much today far tell first thing rh ever put openssldircerts makefilecertificate could nt generate anything openssl would expect find nt create file hashstyle name call crehash fact look closely originally set simple invocation output location expected modssl make genkey would create etchttpdconfsslkeyserverkey file placed openssldircerts first place seems obscure makefile seems placed early wed mar florian la roche florianlaroche redhatde bero told move makefile package guess directory existed empty tentative conclusion noone rh ever really thought directory supposed saw directory called cert thought hey look like good place stick makefile bero florian still around want disagree right finally hell cabundlecrt come turn openssl package openssldircerts late wed oct nalin dahyabhai nalin redhatcom add cabundle file package like samba reference ca certificate thought rh simply invented file whole cloth turn case nicked modssl official site linking wayback machine oldest think ssl module apache part apache codebase according changelog old modssl tarballs invented cabundlecrt file change modssl sslcrtcabundlecrt installed enabled contains ca root certificate known public ca extracted netscape communicator certbundle stuff ever much fun poking old red hat linux package shipped modssl copy etchttpdconfsslcrtcabundlecrt added file openssl drop modssl package copy openssl copy red hat certificate appended modssl nt drop modssl copy look thing seems reasonable infer file copied moved openssl package make available thing apache without need install apache indeed ancient samba bug indicating filename preserved modssl far path go guess probably put openssldircerts looked like right kinda name time later course cacertificates package separated openssl package openssldir changed usrsharessl etcpkitls openssldircertscabundlecrt along following change well maybe noone else care feel weirdly satisfied tracked far ssl library go n n handle thing fairly differently store cert database directly file n stuff seems usually work properly le box le experience messing gnutls edit spent like two hour researching gnutls demand gratitude current current gnutls use pem bundle pkcs module via directory trust store handle directory way openssl simply throw every file find directory load file code presumably read individual certificate bundle file found directory case hybrid directory like debian etcsslcerts use load either cert filebundle bit confusingly pkcs url trusted cert list directory gnutls introduced system default trust store concept specifically commit first release feature point could pkcs url file directory allowed ability use directory added commit first release directory support since default trust store feature added specific default trust store location passed compile time checked location used first one matched first checked etcsslcertscacertificatescrt etcpkitlscertpem updated also check etcsslcertpem usrlocalsharecertscarootnsscrt look one updated also look etcsslcabundlepem sufficiently new gnutls compiled appropriate parameter whose compile time location guessing worked function tell gnutls load certificate default trust store gnutlscli try default useful way check working given platform run gnutlscli googlecom look top output see count loaded certificate warning message loading directory set gnutlstlnoduplicates flag presumably wo nt actually end wasting effort storing duplicate parse crap look landed various distros well pretty sure default trust store absolutely gnutls build older start freebie nt look like lts enterprise distros backports feature debian ubuntu still shipping gnutls current release alongside able figure shipping package built yet still trying figure magic command rhel nope sle nope first debian included jessie first ubuntu totally sure least first opensuse sufficiently new build believe even build new enough either need correct parameter passed build time location guessing need worked question whether distro provides one guessed location package provides must installed package built fedora opensuse ubuntu debian since think sid wheezy least build explicit trust store location passed configure seems pretty safe assume default trust store function work version newer distribution work earlier release thanks guessing functionality really check individually make sure whether case tested fedora work probably using guessed location etcpkitlscertpem nt tested older ubuntu opensuse build yet rhel gnutls say advice broadly openssl rather le likely rely system default store stuff working nt handle directory openssl directory work openssl store ought work gnutls store able try loading common location appropriate function probably want set gnutlstlnoduplicates flag avoid unnecessary duplication especially using directory note gnutls handle openssl trusted certificate format one begin trusted certificate neither bundle directory containing certificate type work tl dr please nt assume given location trusted cert relied upon exists dev platform nt exist user go library default possible otherwise least check canonical location fedorarhel etcpkitlscertscabundlecrt bundle file debian etcsslcerts hashed directory also work opensuse one allow user specified location handle either bundle file hashed directory note security professional qa monkey keep running issue stuff think broadly correct correction distro andor upstream ssl specialist course welcome
108,Lobsters,osdev,OS,osFree: OSS OS/2 Replacement,http://osfree.org/doku/,osfree os replacement,osfree project like support u join u osfree free open source software ecomstation arcaos freeldr osfree design development concept osfree opensource project project news patreon page donate http githubcomosfreeprojectosfree http http youtubecomwatch wwwosfreeorg osfree userland commit log osfree personality commit log last bugtracker issue last forum topic roadmap alpha featurecomplete stable osfree roadmap getting access site area wiki forum bugtracker webmail dotproject admin,osfree project like support u join u osfree free open source software operating system development project aiming replace eventually subsystem open source analogue aim warp merlin base compatibility system mean support feature newer warp server ebusiness ecomstation arcaos version includes rewriting userlevel code kernel collecting existing code subsystem year also developing bootloader named freeldr personality microkernel ie number server implementing control program kernel interface functionality userspace see osfree design development concept detail visit osfree irc channel efnet several project similar goal exist existed brief comparison goal task different project project reusing code many opensource project project news smtp server working antispam measure taken recently added antispam measure forum mail server antispam plugin installed forum check user black list registering posting message reduces number spambot account registered significantly also smtp server able receive mail send mail server email server like eg gmailcom accepted enabled verification email registering user account disabled account approving administrator registration forum open today new developer join osfree team let introduce pedro vicente portugal welcome team several people asked could donate osfree recently created patreon page osfree collect donation monthly basis want support osfree become patron want make onetime donation transfer money bitcoin wallet see donate page detail forum migration today migrated forum myupb also wiki logins integrated forum login wiki loggedin forum vice versa migrated old wiki user loginpassword still migration new hosting today started migration osfreeorg another hosting powerful server disk space ram network bandwidth migration github today oxyd finished migration source code repository sourceforge github new repository http githubcomosfreeprojectosfree welcome new contribution pull request since migration genode started started create required abstraction layer make osfree personality portable allow u also create genode port personality currently based outdated abandoned o framework need migrate alive developing framework promising genode o framework though successor also evolving support hardware platform genode ideally need port personality currently genode priority port progress r feed repaired fight spambots seems reach end server crash end site repaired febmar wiki filled info restored webarchiveorg part forum welcome new site also code committed repo namely format routine enabled valerius also commits viking fixing problem build system linux etc presentation osfree august osfree team member vadim priluzkiy aka oxyd demonstrated osfree personality working together microkernel presentation carried chaos yearly computer art festival http presentation video http youtubecomwatch recent activity linked channel osfree ecsnet osfree efnet message one channel translated another channel also reviewing release development position effective always welcome new developer many area subsystem forum registration forum osfreeorg site enabled recently please report forum bug render problem u osfreeorg site forum release released preview show actual possibility lx executables native executable file format run top output lx executable really small phrase thing debug output executable us msgdll us doscallsdll linking also work also present osfree loader allows load multiboot compatible kernel native kernel loader modular easy extend next release provide interactive like directory browsing file execution see roadmap wwwosfreeorg info osfree userland commit log osfree personality commit log last bugtracker issue last forum topic roadmap alpha stage mean current version featurecomplete stable recommended everyday usage release series still stay alpha stage release series marked beta meaning system suitable every day use next release release date open see osfree roadmap detail getting access site area site several separate area like wiki forum bugtracker webmail dotproject want get access register first verify account via email get access five part site approval user account site admin disabled verification account need wait min le account info propagated forum another site part note also guest account user guest password guest allows login site area requiring login like dotproject area give read access log forum get access wiki vice versa login applies dotproject webmail bugtracker adding user group get write access wiki bugtracker forum want contribute site design development get mail account admin add corresponding user group access level increased case trouble question contact site admin
109,Lobsters,osdev,OS,regex to FAT32 directory structure compiler,https://github.com/8051Enthusiast/regex2fat,regex directory structure compiler,directory loop thing install cargo faq q work wikipedia article dfas burntsushiregexautomata q use anywhere q actually work q nooooooooooo ca nt turn dfa file system ca nt directory multiple parent breaking assumption lack looperinos nooooooooo,ever want match regex driver ever wanted serialize regex dfas one widely supported format used billion device directory loop thing worry become easier ever little f vour e r e g ex devwhatever regex dfa favourite regex example see whether string ffffvourre ex herem would match mount check yspaceffffvourrespaceexspaceheremmatch exists run install cargo run cargo install compile directly repo cargo bin directory path able invoke like described file created image probably mounted put drive way likely nt faq q work regular regexes ie backreferences similar advanced feature turned called dfa deterministic finite automaton basically bunch arrow going state arrow labeled letter letter state cause current state go along arrow another state subset state accepting yes bad explaining better reading wikipedia article dfas nt know lazy used burntsushiregexautomata get dfa regex normally treelike structure directory reference block anywhere file system block referenced multiple directory directory also explicit field parent directory one leave allows graph structure inside file system dfa basically q use production anywhere ca nt stop q actually work tried window linux far seems work flawlessly window far tested linux code claim directory invalid two dentries directory name parent loop something like path forbidden might fun try embedded device q nooooooooooo ca nt turn dfa file system ca nt directory multiple parent breaking assumption lack looperinos nooooooooo haha osdriven regex engine go brrrrr
110,Lobsters,osdev,OS,Assembly Tutorials: Learn Assembly Programming... With ChibiAkumas,https://www.assemblytutorial.com/,assembly tutorial learn assembly programming chibiakumas,,nt use old computer play old game learn make new one learn lot new thing learn basic processor learn program hardware many popular system used processor lesson text document matching youtube video discussion forum entry learn reading watching discussing choose destination
111,Lobsters,osdev,OS,flat assembler: an open source assembly language compiler,https://flatassembler.net/,flat assembler open source assembly language compiler,main index download documentation example message board download documentation example message board main index download documentation example message board tomasz grysztar youtube twitter rwasa,flat assemblerassembly language resource main index download documentation example message board welcome site flat assembler place dedicated assembly language programming contains many resource beginner advanced assembly programmer site constantly improved hopefully find useful resource matter whether trying learn assembly language looking solution particular problem name flat assembler intentionally stylized lowercase letter nod history download download flat assembler open source assembly language compiler packaged various operating system documentation official documentation flat assembler official article gathered example browse download example project made flat assembler shared full source code author order help people learn ready project message board place ask question flat assembler found answer documentation report bug talk assembly language programmer also find several guide tutorial main index download documentation example message board copyright tomasz grysztar also youtube twitter website powered rwasa
112,Lobsters,osdev,OS,KolibriOS official site,https://kolibrios.org/en/,kolibrios official site,kolibrios driver fasm kolibri feedback help,kolibrios tiny yet incredibly powerful fast operating system power requires megabyte disk space ram run kolibri feature rich set application include word processor image viewer graphical editor web browser well exciting game full support implemented well readonly support ntfs driver written popular sound network graphic card video ever dreamed system boot le second poweron working gui application start instantly immediately clicking icon without annoying hourglass pointer speed achieved since core part kolibrios kernel driver written entirely fasm assembly language try kolibri compare heavyweight window linux kolibrios forked menuetos run independent development since code opensource majority code released license feedback much appreciated help even welcome
113,Lobsters,osdev,OS,DragonFly BSD Digest – A running description of activity related to DragonFly BSD,https://www.dragonflydigest.com/,dragonfly bsd digest running description activity related dragonfly bsd,setxkbmap command need week bsd system management network cpu temperature reading amdsmn amdtemp party software built depend deprecated dragonfly system library removing library detail openssh bmake dialog includes current directory prompt week bsd recent dmap change edit msix fix updated match linux chibug giordano oak park pm recent bugfix dragonflycurrent may help week bsd post really apply compatibility use pkgstatic,different keyboard layout different u english mean running xorg later setxkbmap command need week bsd talk bunch different hardware platform amd processor support system management network cpu temperature reading available dragonfly amdsmn amdtemp instead posting update feature hopefully never notice make upgrade part upgrade process dragonfly go look party software built depend deprecated dragonfly system library removing library detail program stop running something else upgraded sure cause dll hell actual phrase thankful keep posting daniel fojt updating basic utility dragonfly keep openssh bmake dialog multiyear jump commit message nicely summarize dramatic change unofficial theme week open source project contribution check bsdcan video week day worth material right like csh lazy switch away includes current directory prompt dragonfly another hey still get update moment week bsd link recent item unix way tool certainly source endless thinkpieces also good history know running recent hp laptop recent dmap change may get dragonfly boot edit msix fix dragonfly direct rendering updated match linux mean improved support number intel processor wait bsds weekend chibug meeting giordano oak park pm go anywhere near chicago started last sunday intelbased system trouble reading usb port odd behavior virtual machine recent bugfix dragonflycurrent may help know description vague encountered directly week bsd lead interview warner losh work reviving everyone linking post hear plan odd think process swapping something entirely ram perhaps really apply except compatibility note future pkg working use pkgstatic preposted early traveling week throw extra tab quick
114,Lobsters,osdev,OS,ReactOS 0.4.13 released,https://reactos.org/project-news/reactos-0413-released/,reactos released,usb improvement explorer file search bringup xbox reactos port improvement freeloader fat boot speedup accessibility font management improvement third party syncs statistic master,reactos team pleased announce release version prior release keywords noted representing release highlighting key improvement particular case version show result significant hard work bring improvement usb stack development xbox port boot process explorer file search shell module well many change usb improvement usb universal serial bus important standard adopted throughout industry used widely many device external storage keyboard mouse various device notably great number computer come cdrom drive day option usb order boot install operating system usb stack arguably complicated one code support complex maintaining easy task reactos currently lag behind advanced usb implementation various bug regression still plague system despite many people worked hard contributed code improve usb functionality reactos vadim galyant victor perevertkin brought new usb stack provides many fix well improvement various area improving usb support general although long journey ahead towards advanced perfectly functional usb stack within reactos new module already support hid storage device explorer file search bringup graphical shell aka explorer vital component allows user interact system shell though lack lot stuff deeply limit overall ability user interact system easy flexible way however work done google summer code shell seen new feature implemented file search thanks student brock mammen feature help user find exact location file without hassle search content manually rely thirdparty program screenshot demonstrates search feature action xbox reactos port improvement upon time reactos xbox architecture port specifically boot reactos onto first generation xbox console hardware reactos code making significant change time port maintained largely ignored developer focused issue due significant amount change various area reactos receiving discovered o could longer boot xbox hardware longer case reactos contributor stanislav motylkov help matt borgerson brought change port show tremendous improvement often case porting code new system work also helped reactos broadly exposing nasty bug fundamental module system following screenshot show reactos running xbox emulator xqemu freeloader fat boot speedup past release booting reactos system partitioned using fat filesystem could burden wait time reactos boot freeloader reactos bootloader lot stuff order get reactos ready boot unfortunately unoptimized way release victor perevertkin great job optimizing fat driver freeloader significantly improving boot speed using filesystem usbram boot accessibility area accessibility reactos new software introduced accessibility utility manager developed reactos contributor george accessibility utility manager name implies manages accessibility application reactos following screenshot show program operation similarly onscreen keyboard seen improvement theming support additional feature minor bug fix magnifier font management developer katayama hirofumi continued work bring font support closer window merging two large pull request system font management done via registry rather adhoc way brings improved compatibility stability reactos improvement besides highlighted point release forget whole reactos component dlls application module improved addition improvement accessibility feature mentioned george also fixed common dialog box button enabled unconditionally even though user taken action furthermore also fixed issue regarding disk space recycle bin could occupy available disk space reactos build getting better better reactos fully booting working environment thanks timo work continuing progress third party syncs reactos open source project collaborates various open source project around globe following list show party library project share reactos responsible committers synced library reactos project btrfs pierre schweitzer acpica thomas faber uniata thomas faber mbedtls thomas faber libpng thomas faber statistic jira issue fixed release number commits release oldest issue fixed release branch forked master
115,Lobsters,osdev,OS,A “Hello World” virtual machine running the Hurd,https://guix.gnu.org/blog/2020/a-hello-world-virtual-machine-running-the-hurd/,hello world virtual machine running hurd,virtual machine running hurd april post getting bootable system page fault message mig merged initial hurdscm triplet bother rump kernel linux namespaces discussed last reproducible build summit gnu guix gnu guix respect user freedom guile scheme gnu hurd gnu hurd info mission gnu hurd,virtual machine running hurdjan nieuwenhuizen ludovic april gnu world bit speculation whether april post joke part joke deprecating linuxlibre fear published already april eastern part world thus surprisingly remainder post le jokegetting bootable systemfor tried april image ran guix sure hope good laugh set crossbuild virtual machine vm image using guix made good progress wednesday end decided cheat make release deadlinewhat got stuck get past translator userland process implement file system seemingly freezing boot saying start nothing running crossbuilt guix debianâ gnuhurd would hang similarly kernel debugger would show intriguing backtrace suggesting handling page fault message long story short eventually realized server interface compiled mig whereas targeting platform embarked delightful hacking journey ensuring hurd boot process would correctly run vm proper login prompttoday humble gift wiphurdvm branch update merged initial hurdscm system description used cross build vm running hurdrunning preinstenv guix build f gnusystemhurdscmcrosscompiles relevant package produce vm image build start gnulinux machine command enablekvm snapshot hda preinstenv guix build f gnusystemhurdscm voilã woohoo actually already stuff shown guix future post bother bother hurd anyway pipe dream depending perspective unquestionable truth know hurd development started early month linux development started yet still lack much term hardware support even though significant progress made recent year particular use rump kernelsthe witness new feature retrofitted kernel linux think design better suited need linux namespaces foundation example afterthought unprivileged user namespaces allow unprivileged user benefit lightweight virtualization still often disabled distros due lack confidence sharp contrast inherent unrestricted support finegrain virtualization pid namespace another proc server file system name space another root file system server containerlike lightweight virtualization native hurdlast least eye security transparency free software system microkernelbased system seems naturally lend well bootstrapping reduced trusted base one topic discussed last reproducible build summitthe question much whether year hurd kind system want build lot work remains done think ever promising approach betterment security system freedom userswe also admit amazing system hack even combined guix happy hacking gnu guixgnu guix transactional package manager advanced distribution gnu system respect user freedom guix used top system running hurd linux kernel used standalone operating system distribution machinesin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection used standalone gnulinux distribution guix offer declarative stateless approach operating system configuration management guix highly customizable hackable guile programming interface extension scheme languageabout gnu hurdthe gnu hurd gnu project replacement unix kernel collection server run mach microkernel implement file system network protocol file access control feature implemented unix kernel similar kernel linux infothe mission gnu hurd project create generalpurpose kernel suitable gnu operating system viable everyday use give user program much control computing environment possible
116,Lobsters,osdev,OS,The seL4 Foundation – What and Why,https://microkerneldude.wordpress.com/2020/04/07/the-sel4-foundation-what-and-why/,foundation,created foundation foundation ensure longevity grow integrate ecosystem foundation open neutral entity protect promote brand still generalpurpose nontoy o kernel proof implementation correctness adopter need clarity fund ongoing engineering bigticket item hensoldt cyber together change world critical system achieve real security foundation community engagement commit open process evolving kernel foundation operate structure github source repos membership board contributor committers technical leader mean research onfor done advanced o technology time protection tool language ready get involved interim foundation web site contribute page retrofitting transitioning available userlevel infrastructure contact u like,created foundation foundation create nutshell reason expand provide longevity beyond support specific organisation grow integrate ecosystem protect promote brand provide platform funding ongoing engineering well sharing cost bigticket verification item foundation ensure longevity gamechanger safety securitycritical system o microkernel bottom software stack use properly achieve strong security property enabled system must engineered may require longterm commitment requiring significant resource therefore want make sure stay around wellsupported continues provide guarantee viability strongly tied developer trustworthy system t team especially technical leadership t problem everyone know committed success four technical leader kernel kevin gerwin june degree redundancy although work best team believe independent nonprofit organisation foundation make story even stronger even better choice developer build trustworthy system especially true consider timescale decade necessary many early adopter infrastructure medical defence domain setting organisational framework supported accountable adopter subject providing financial support course plan future board director represent voice significant adopter help keep technical leadership aware responsive need adopter grow integrate ecosystem right biggest barrier uptake probably lack system component tool includes boardsupport package bsps device driver file system network stack highlevel programming environment something abstraction level posix preferably based suitable model configuration development tool plus debugger ides etc without supporting organisation many missing bit built every adopter would huge waste effort better spent developing new trustworthy system furthermore believe plenty people would happy contribute guidance active community engagement clear shared direction forward contributor confident input make difference long term think way address forum community including developer adopter researcher meet engage foundation open neutral entity broader community represented strategy discussed openly seems right way protect promote brand become recognised brand strongly associated unique property world fastest advanced microkernel powerful assurance story even ten year concluded original proof still generalpurpose nontoy o kernel proof implementation correctness top open source property drive adoption providing competitive advantage developer product course creates expectation system based verified expected trustworthy others trust could undermined adopter modify kernel let explain mathematical proof provides strongest assurance possible guarantee provides need thoroughly understood order avoid misleading people rely even mathematical proof never cover everything always relies specific scope eg assumption hardware behaves correctly condition misunderstood might overestimate guarantee get particular proof specific version kernel specific specification seemingly trivial code change may invalidate assumption thus void assurance adopter need clarity also company see competitive advantage verified system want advantage undermined others taking shortcut making unsubstantiated verification claim foundation help officially blessing status verified version precisely identifying condition hold help provide clear provenance adopter able assign liability resulting someone hacking unverified version belongs providing unblessed code addition visible change affect proof informally happen documentation better solution framework adopter run proof code base deploying confirm proof still hold framework course also help contributor identify whether adopting change straightforward invalidate proof must go handinhand promotion benefit best way achieve broad membership base reading clearly interest please join fund ongoing engineering bigticket item result big investment firstly australian tax payer nicta funded creation nicta csiro continued supporting past year u taxpayer mostly darpa also part dod well dhs invested lot completing extending verification story well deploying realworld system recently hensoldt cyber funded verification riscv port kernel disclosure interest hensoldt cyber awesome expression confidence team behind immensely grateful support yet need one hand need revenue stream fund ongoing support community maintenance existing version improvement infrastructure particular automation verification framework need support call strategic engineering evolving kernel importantly developing ecosystem hope much latter eventually done community keep showing way providing reference design sample component obviously needed make attractive platform commercial system hand number bigticket item crucial aim making linux embedded world biggest verification arm kernel verification multicore kernel plenty company keen see others done several willing put money table make happen however investment required two pain limit company justify opensource project walk away bunch proprietary ip see value enabling opensource platform third major goal foundation provide ongoing base funding bring interested party together divide required investment way keep individual contribution pain limit together change world critical system achieve real security foundation obviously core function foundation address four point rationale setting first place work practice community engagement really central mission engage grow community developer adopter direct standardise evolution ecosystem several aspect one hand kernel proof hand stuff around essential using everyone serious look appreciate kernel foundation need much build system mentioned really biggest barrier uptake moment lot userland ready use limited support tool development environment reality anyone want deploy realworld system end developing much obviously waste everyone benefit least core component tool shared thing like device driver network stack core system service contain ip value bear significant cost need reduce cost sharing artefact two aspect developing artefact share community member community adopt maintain developer community highly simplified diagram indicates core userland box basic system service everyone need fact typically correspond component linux would deep inside kernel t see job provide core userland infrastructure camkes component framework maintain least initially need provide least example others wellintegrated device driver however want community contribute hope increasing number part adopted maintainer developer community lower stack component resides unique higher bar adoption core component must designed right meaning maintaining requires thorough understanding system operate ideally core component also verified becomes reality thing get easier highlevel component developer tool library driver yet another nic performing example similar nic driver exists still lowlevel enough linux equivalent live inside linux kernel device driver crypto library part o environment programminglanguage runtimes shell etc dependence model le good template furthermore may benefit competing component similar functionality eg library optimised small iot system v desktop v server see t responsibility mostly showing way providing sample code design putting community adoption kernel foreseeable future continue depend strongly expertise besides ensuring purity design lot verification people understand seemingly innocent change kernel affect verification even expert sometimes grossly underestimate cost change course kernel changed proof need updated something people moment hope get point nonts community member contribute proof time committed remain central kernel evolution certainly welcome platform port working way make verification platform port easier maybe semiautomatic still research commit open process evolving kernel part duty technical steering committee foundation representation developer run open process kernel evolution foundation operate structure foundation set project linux foundation lf follows established structure lf advantage familiar setup used hundred opensource project also mean benefit lf existing infrastructure organisational legal well existing network recruiting member structure shown figure structure foundation linux foundation line lf clearly separate foundation governance technical leadership contribution foundation board responsible governance particular control directed fund membership fee go minus tax lf directed fund also receive extra contribution member especially used pool fund big ticket item discussed technical activity underneath legal body lf project llc lf nonprofit company series llc virtual company foundation hold right trademark domain name host github source repos importantly contribution source code longer require contributor license agreement cla instead contributor provide standard developer certificate origin dco standard lf project removing bureaucratic part contribution membership board similar lf foundation different class membership model lf note become member foundation individual organisation must first member good standing lf pay membership fee well fee regular member tiered size similar lf although fee lower lf small company somewhat higher large one premium member regular member lf pay extra exchange privilege guaranteed board seat individual nonprofit organisation university opensource foundation join free associate member trustworthy system team creator special status premium member without paying membership fee five year foundation membership board board composed three member t one premium member addition regular member together elect board member finally technical steering committee composed committers technical leader noncommitting leader t responsible setting technical direction ecosystem chair exofficio member board high representation t board show commitment making foundation work merely dumping community moving back research staying engaged committed resource minimum year chose model response specific feedback adopter contributor committers technical leader contributor make community people contribute code documentation tool etc ecosystem selected subset contributor designated committers one directly commit repository accept pull request initially committers t member commit code proof doc userland code anticipate fact sincerely hope soon able appoint significant number committers community nonkernel component approved technical steering committee tsc made committers technical leader one particularity technical leader commit code provide leadership design implementation issue includes truly small number people say committers including part tsc except right commit code tsc elect chair exofficio member board represent technical community mean research onfor done t continue research feed ensure remains advanced o technology particular work time protection principled way prevent information leakage timing channel still fair bit go productionready make mainline kernel addition research architecture secure system tool language make easier build highassurance ideally verifiable component top cluster research enabler achieving vision verified kernel verified core system component one aim next year able build least simple system completely verified trusted computing base see research central part ongoing contribution ecosystem hope foundation also lead collaboration research ready get involved interim foundation web site provides detail join including full set legal document link lf interface becoming member need member also need active contributor whether company individual want one look contribute page project looking help range port via enhancement people becoming committers want deploy secure product check retrofitting transitioning way list available userlevel infrastructure contact u looking commercial support link one growing number company providing like like loading
117,Lobsters,osdev,OS,"Gopherus - a DOS (and multi-platform, console-mode) gopher client",http://gopherus.sourceforge.net/,gopherus do multiplatform consolemode gopher client,mateusz viste documentation project sourceforge page,gopherus multiplatform consolemode gopher clientcopyright c mateusz viste gopherus free multiplatform consolemode gopher client provides classic text interface gopherspace gopherus published bsd license video information read documentation download source do build source code history old release available project sourceforge page
118,Lobsters,osdev,OS,A DOS JavaScript Canvas with sound,https://github.com/SuperIlu/DOjS,do javascript canvas sound,doj do javascript canvas sound doj freedos processing wikipedia doge twitter download quick start find binary release github release page dosbox freedos dosboxx pentium class machine least ram minimal script compatibility usage support tunguska tunguska dosboxx falconfly central make sure grab sdk attention compilation preparation getting compiling doj glide repository history changelog planed work license doj mit license mujs isc license allegro giftware license http liballegorglicensehtml grx mit license ipx dosbuffer subsystem cylindrix released cwsdpmiexe cwsdpmi gpl http githubcomsuperiluglide dzcomm giftware logo pexels comic relief sil open font license version wavs bigsoundbank wtfpl mids freedoom example lgpl creative common attributionnoncommercialsharealike international license usage command line editor key api documentation dochtml reference script format setup loop input event ipx networking drawing function compatibility layer logfile remote loggingdebugging,doj do javascript canvas sound doj javascript programming environment system running msdos freedos do based window like feature integrated editor graphic sound output mousekeyboardjoystick input see inspired processing described wikipedia processing opensource graphical library integrated development environment ide playground built electronic art new medium art visual design community purpose teaching nonprogrammers fundamental computer programming visual context also compatibility mode function available script similar structure processing sketch type script builtin favorite text editor run do command prompt doj pronounces like doge ending doj possible due work peopleprojects find twitter want download quick start find binary release github release page extract content archive run dojsexe doj run dosbox real hardware virtual machine msdos freedos do based window like window use support need voodoo card dosboxx see run real hardware need least recommend pentium class machine least ram example file run fine athlon ram following hardwarefunctions available bit graphic display mode alpha channel transparency available keyboard input mouse input joystickjoyport input file io midi output wav output audio inputsampling allegro rendering software rendering output hardware compatibility direct ioport access inb outb etc lpt parallel port access bidirectional com serial port access minimal script find following example examplesexampljs function called script started function setup pink new color define color pink function repeatedly esc pressed stop called function loop clearscreen egablack textxy sizex sizey hello world pink nocolor textxy rate getframerate egablack egalightblue function called input function input event str jsonstringify event open script dojsexe examplesexampljs use dojsexe r examplesexampljs run without starting integrated editor first script exist editor load template new script compatibility want write script using syntax need use include first line script find following example include function called script started function setup pink color define color pink function repeatedly esc pressed stop called function draw background egablack stroke pink fill pink text hello world width height stroke egalightblue fill egalightblue text rate getframerate info found end readme section usage api documentation take look example well support doj support api used accelerator card following hardware supported voodoo tested voodoo tested voodoo tested voodoo tested tunguska voodoo tested tunguska voodoo rush version tested voodoo banshee pci agp tested additionally use dosboxx emulates voodoo card glide function found documentation javascript support function fx prefix native function prefixed fx detailed documentation found internet eg falconfly central make sure grab sdk use included do version texusexe convert bitmap texture file loaded texture attention support work plain do doscommand window window sure always boot pure do prompt trying use fxfunctions using support need copy appropriate directory dojsexe using vxxxbat script distribution zip archive compilation compile doj modern linux instruction debian based distribution window using window subsystem linux wsl setup window subsystem linux wsl according guide used ubuntu lts preparation build install djgpp according guide used following command line updateinstall dependency sudo aptget update sudo aptget distupgrade sudo aptget install bison flex curl gcc g make texinfo g unzip htop screen git bashcompletion buildessential npm zip sudo npm install g jsdoc sudo npm install g tuijsdoctemplate following command build install djgpp homeiludjgpp git clone http githubcomandrewwutwbuilddjgppgit cd builddjgpp export djgppprefixhomeiludjgpp builddjgppsh getting compiling doj open shellcommand line directory want source reside checkout doj github git clone http githubcomsuperiludojsgit open makefile text editor change path djgpp according installation ready compile doj make clean might take time dependency quite large make distclean clean dependency well make zip create distribution zip make doc recreate html help order compile doj need includes binary one included doj source created using glide repository github history see changelog project history planed work license doj code released mit license mujs mujs released isc license see copying mujs folder detail allegro allegro released giftware license http liballegorglicensehtml grx grx font mit license see copyinggrx license detail ipx dosbuffer subsystem code taken game cylindrix hotwarez llc goldtree enterprise released cwsdpmiexe cwsdpmi dpmi host licensed gpl documentation state file binary distribution may redistributed gpl source without source code provided code licensed glide source code general public license source code available http githubcomsuperiluglide dzcomm dzcomm serial library release giftware see readmetxt dzcomm folder detail logo doj logo dog downloaded pexels kindly provided iago garcia garcia logo font comic relief jeff davis provided sil open font license version wavs wav file downloaded bigsoundbank licensed wtfpl mids midi file downloaded freedoom project licensed license example released lgpl example licensed creative common attributionnoncommercialsharealike international license usage command line usage dojsexe r f script script parameter r invoke editor run script w width screen width default b bpp bit per default wave sound f fm sound disable alpha speed rendering editor key openclose help function context help save script run script find text showclose logfile quit truncate logfile run script find ctrld delete current line shiftmovement select text releasing shift deselects ctrlc copy selection ctrlx cut selection ctrlv paste ctrlleft previous word ctrlright next word ctrlpageup one page ctrlpagedown one page home go start line end go end line ctrlhome go start line ctrlend go end line tab insert space next tabstop cursor shifttab reduce indentation line tab size help viewer remember current position logfile truncated pressing del log viewer api documentation find full api doc dochtml directory go hompage reference script format script need provide three function setup loop input script loaded executed topown setup called loop repeatedly input called whenever mouse keyboard input happens setup function called startup initialize variable setup hardware etc loop function called setup repeatedly stop called calling stop program end loop exit input event function called whenever mousekeyboard input happens ipx networking doj support ipx networking node address array number default socket number broadcast address definition found jsbootipxjs drawing function see api doc detail compatibility layer add include first line script limited compatibility thing nt work anything object light camera etc key release event work different allegro simulated simple vertex supported dom logfile output via print println sent file jslogtxt use debug instead output generated set global variable debugtrue remote loggingdebugging feature allows debug running script via ipx networking second machine use remote logging following put machine network run dojsexe r jsbootlogviewjs one machine enable debugging setting debugtrue enable remote debugging remotedebugtrue either modify jsbootfuncjs change variable beginning script work fine two instance dosbox well please note log message transmitted fast receiving instance doj might skip displaying
119,Lobsters,osdev,OS,Software Distributions And Their Roles Today,https://venam.nixers.net/blog/unix/2020/03/29/distro-pkgs.html,software distribution role today,nixersnet distribution different way approach target speciality layering stable release v rolling interdistribution standard package manager packaging method distribution format conflict resolution dependency management resolving dependency versioning static v dynamic linking reproducibility stateless verifiable system distros matter container virtualisation specific universal package manager package selfcontained programming language package management specific going distroless conclusion http nixersnetshowthreadphp email irc,nb repost blog post made nixersnet distribution software distribution may think know everything know term software distribution take moment think take step back try see big picture often mind thousand linux distribution hear however far limited linux bsd berkeley software distribution software distribution right name android io software distribution actually prevalent may stopped paying attention concept find hard put definition together definitely part distributing software software may commercial open source understand better maybe investigating problem software distribution address would clear thing imagine world software distribution world exist world software stay within boundary shared anyone outside break boundary want share find package software together meaningfully configure work well together adding glue necessary find appropriate medium distribute bundle get one end another safely make sure installs properly follow thus software distribution mechanism community take burden decision build assemblage coherent software shipped operating system kernel like could often part collage offered software like others people behind called distribution maintainer package maintainer role vary widely could write software store package called repository maintain package manager format maintain full operating system installer package upload software built someone else built specific time framelife cycle make sure malicious code uploaded repository follow latest security issue bug report fix third party software fit distribution philosophical choice configuration importantly test plan make sure everything hold together maintainer source trust distribution take responsibility fact think accurate call distributor different way approach many distribution make head spin software world booming especially open source one instance find bifurcation distribution get copied new maintainer divert creates tree like aspect genealogy common ancestor andor influence technical philosophical choice overall vibrant ecosystem thing learned branch help completely unrelated leaf another tree something everyone target speciality could different software distribution single platform everyone build one thing specialization differentiation distro caters different audience built community philosophy go distribution support specific set combination hardware cpu isa peripheral driver distribution may specifically optimized type environment desktop portable mobile device server warehouse size computer embedded device virtualised environment etc distribution commercially backed distribution designed different level knowledge domain professional instance security research scientific computing music production multimedia box hud car mobile device interface etc distribution might certified follow certain standard need adhered professional setting example security standard hardening distribution may single purpose commodity machine specific machine functionality firewall computer cluster router etc come raison philosophy distribution guide every decision maintainer make guide configure every software think security portability comprehensiveness example distribution care free software going strict software includes license allows repository software check consistency license core another example goal target desktop audience internationalization ease use userfriendliness numerous package going prioritized target real time embedded device size kernel going small configured optimized purpose limiting choosing appropriate package work environment targeted advanced user love control machine maintainer choose let user make decision providing many package possible latest version possible loose way install distribution lot library software development tool mean distribution anything provide sane default fit mindset composes configures layer component stack software layering distribution maintainer often disposition different block ability choose stacking create unit call software distribution range approach could choose le included consider core distribution externally le important moreover sometimes might even leave core small loose instead providing glue software make easy user choose swap block specific stage time installation run time maintenance mode etc block interdependent component first part method installation everything hinge starting point second part kernel real core operating system today mean distribution enforce distribution may go far provide multiple kernel specialised different thing none third part filesystem file hierarchy component manages file spread physical virtual hardware could mix match section file system tree stored separate filesystems fourth part init system pid choice generated lot contention day pid mother process process system role functionality include subject debate fifth part composed shell utility sometimes refer userland user space first layer user directly interface control operating system place process run userland implementation unixbased system usually try follow posix standard many implementation also subject contention sixth part made service management daemon longrunning process keep system order many argue management functionality part init system seventh part documentation often forgotten still important last part everything else user interface utility user way manage system stable release v rolling exists spectrum distribution place come keeping date version software provide often applies external third party open source software spectrum following allow user always latest version every software running risk accidentally breaking system call bleeding edge rolling distro take conservative approach take time test every software properly allowing repository latest update feature optimization software call release based distro extreme first scenario would let user directly download software vendorcreator source code repository opposite let software vendorcreator push directly distribution repository could easily break conflict system lead security vulnerability come back later could avoided software run containerized environment come release distribution usually involves long term support stable version keep receiving syncing necessary security update bug fix long run another version running bit ahead testing future change specific time frame user jump latest release distribution may involve lot change configuration software distribution decide may want break abi api kernel upon major release mean everything system need rebuilt reinstalled release cycle rate update really spectrum come update case distribution maintainer decide communicate handle let user know change user configuration swapped new one merged new one copied aside communication essential official channel logging mail etc communication need bidirectional user report bug maintainer post decision user need involved creates community around distribution rolling release require intensive effort package maintainer constantly keep software developer especially come thousand new library part recent programming language keep increasing various user want precise thing system enterprise environment mission critical task prefer stable release software developer normal end user may prefer ability use latest current software interdistribution standard interdistribution standard creates order would want standard user level difference always noticeable time everything seems work unix system expected work real standard distribution le following posix standard within linux ecosystem free standard group try improve interoperability software fixing common linux abi file system hierarchy naming convention tip iceberg come something work interdistributions furthermore part layering seen could said standard desktop interoperability standard filesystem standard networking standard security standard etc biggest player right come systemd association free desktop group try create force interdistribution standard linux distribution big question actually want interdistribution standard happy mix match currently would profit thing package manager packaging pay attention package store give secure access able search amongst download install remove anything related local management versioning configuration method distribution distribute software share frontend process first store software historically still today software shared via physical medium cdrom dvd usbs etc common come proprietary vendor distribution come piece hardware selling also common procurement initial installation image however hectic software growth using physical medium flexible sharing internet convenient via ftp http http publicly available svn git repo via central website hub github application store one apple google provide requirement storage communication secure reliable failure accessible anywhere thus replication often done avoid failure also sort edge network speeding effect across world load balancing replication could done multiple way could distributed system instance store format repository maintainer usually file system software api user interact wire two main format strategy exist source based repository binary repository second upload manage host package right replicate repository source truth user important make sure package verified secured accepted repository many distribution maintainer one able giving cryptographic key sign package validate others user build package send central hub automatic manual verification uploaded repository user cryptographic key signature verification come issue trust stability user upload package always feasible using binary package individual package containerized properly third option road two type core managed official distribution maintainer rest user community finally package reach user user interact repository locally remotely depends package management choice user cache version remote repository like common bsd port tree system flexible track update locking version software allowing downgrade user download different source user multiple version software machine format said two main philosophy software sharing format source code portstyle prebuilt binary package software manages user side called package manager link repository though source based repo sure call way regardless still refer many distribution create reuse popular one search download install update removal local software small task rule book installed package manager aware existence noting distribution limited single package manager could many package manager relies specific format metadata able manage software source binary formatted format composed group file single binary file specific information segment together create recipe help throughout lifecycle easier put together others incidentally allowing user contribution list common information package manager need package name version description dependency package along version directory layout need created package along configuration file need overwritten integrity ecc file authenticity know come trusted source cryptographic signature checked trusted store machine group package meta package direct one action take certain event preinstallation postinstallation preremoval post removal specific configuration flag parameter pas package manager upon installation advantage precompiled binary package instead cloning source code compiling remove burden package maintainer one advantage precompiled package convenient easier download run instantly also hard impossible day energy intensive compile huge software web browser another point proprietary software often already distributed binary package would create mix source binary package binary format also space efficient code stored compressed archived format example apk deb nix orb pkg rpm snap pkgtargzxz etc package manager may also choose leave choice compression user dynamically discern configuration file decompress package add exists tool facilitate job package maintainer converting one binary package format another conflict resolution dependency management resolving dependency one hardest job package manager resolve dependency package manager keep list package version currently installed system dependency user want install package take input list dependency package compare one already output list need installed order satisfies dependency problem commonly encountered software development world build automation utility make tool creates directed acyclic graph dag using power graph theory acyclic dependency principle adp try find right order solution found conflict cycle graph action aborted applies reverse upon removal package make decision remove package installed dependency single one newer package depend dependency allow removal unused dependency hard problem indeed versioning problem increase add factor versioning mix allow multiple version software installed system allow switching one version another also switch package depend versioning applies everywhere package release version distribution lot attach certain version package specific release consequentially release may different repository choice naming convention also play role convey user change happened package maintainer follow naming convention software developer use name two software conflict one another make impossible repo extra information need added rely semantic versioning major minor patch rely name like many distribution release toy story desert etc rely date released maybe simply incremental number convey meaning user search update package repository static v dynamic linking one thing may apply source based distro decision building package statically linked library dynamically linked dynamic linking process program chooses include library depends upon executable reference resolved runtime dynamic linker load shared object memory upon usage opposite static linking mean storing library right inside compiled executable program dynamic linking useful good deal software relies library thus single instance library memory time executables size also smaller updated program relying get benefit long interface distribution package management package manager dynamic linking environment take care version library installed package depend create issue different package rely different version reason distro community chosen get rid dynamic linking altogether rely static linking least thing related core system another incidental advantage static linking resolve dependency dynamic linker make gain small boost speed static build simplify package management process need complex dag everything selfcontained additionally allow multiple version software installed alongside one another without conflict update rollback messy static linking give rise containerized software continuing path lead market platform android io distribution done individual software developer skipping middleman altogether giving ability increasingly impatient user always latest version work current o everything selfpackaged however relies heavily trust repositorymarketplace need many security mechanism place allow rogue software uploaded talk come back container great user certain perspective software developer directly distribute prebuilt package especially stable abi base system break classic distribution scheme accustomed desktop rose butterfly though said package take much space static linking thus wasting resource storage memory power moreover model software developer push directly user remove filtering distribution maintainer distro encourages license uncertainty overall philosophy surround distribution also issue library update weight software developer make sure vulnerability bug code add veil software us see end product software developer using type distribution perspective add extra step download source code library software depends build one individually turning system source based distro reproducibility package management increasingly becoming messier past year new trend emerged put back sense order reproducibility inspired world functional programming world container package manager respect reproducibility build asserted always produce output functionality wise though could difference see footnote info allow package different version installed alongside one another living tree allows normal user install package access thus many user different package used universal package manager installed alongside package manager without conflict prominent example nix guix use purely functional deployment model software installed unique directory generated cryptographic hash dependency software included within hash solving problem dependency hell approach package management promise generate reliable reproducible portable package stateless verifiable system discussion trust portability reproducibility also applied whole system talked repository marketplace software developer push directly user instant access latest version said mandatory additional measure security one containerized sandbox every software software run space affecting rest system resource remove heavy burden auditing verifying every software many solution exist achieve sandboxing docker chroot jail firejail selinux cgroups etc could also distance home directory user making selfcontained never installing modifying globally accessible place could let u core system verifiable changed stay pristine making sure secure would really easy idea user part distro atomic movable containerized rest reproducible game changing want move world every distro interchangeable distros matter container virtualisation specific universal package manager remains asked distribution still role today container virtualisation specific universal package manager come container still important often base stack component build upon distribution made people work together build distribute software make sure work fine role person managing container much convenient rely distribution another point container hide vulnerability checked put together hand distribution maintainer role communicate follow security vulnerability bug community solves daunting problem everyone share system administrator building container possibly knowledge manage build hundred software library ensure work well together package selfcontained distribution matter package selfcontained extent could ecosystem providersdistributors universal selfcontained package said important keep philosophy distro offer tested toolbox fit use case probable move world multiple package manager trusted specific space purpose different source philosophical technical truth programming language package management specific phenomenon already exploding world programming language package management speed granularity software built today almost impossible follow using old method packaging old software release life cycle thrown window thus languagespecific tool developed limited installing library also software refer distribution offered package manager systemlevel others applicationlevel specific package manager consequentially complexity conflict within system exploded distribution package manager finding pointless manage maintain anything already installed via tool viceversa specific tool maker also interested provide included distribution systemlevel package manager package manager respect reproducibility nix mentioned handle case cleanly respect idea locality everything residing within directory tree maintained systemlevel package manager conclusion stuck multiple package manager different role going distroless popular topic container world replacing everything provided distribution removing customization building image scratch maybe relying universal package manager none advantage container tiny targeted single purpose let sysadmin full control happens box however remember huge cost controlling everything like mentioned earlier move burden upon sysadmin manage responsible keep bug security update instead distribution maintainer conclusion everything presented distribution hope clearer picture providing place current time opinion topic like diversity stack would use build distribution take static build user upload software repo solution trust issue see evolve discussion http nixersnetshowthreadphp edit come understanding conflated meaning reproducing bitforbit identical software recreate functionality operating system article instead taken mean anything sure could recreate functionality without breaking used verifiable anything identical guix nixos currently accomplishing functionality part distribution different way approach package management conflict resolution dependency management distros matter container virtualisation specific universal package manager attribution marjory collins public domain want depth discussion always available email irc discus argue like dislike new idea consider opinion etc nt feel like discussion intimidated email simply say something small comment section andor share friend
120,Lobsters,osdev,OS,Async/Await | Writing an OS in Rust,https://os.phil-opp.com/async-await/,asyncawait writing o rust,asyncawait github bottom multitasking preemptive multitasking saving state call stack discussion cooperative multitasking coroutines asyncawait asynchronous operation saving state discussion asyncawait rust future example future rust associated type working future waiting future future combinators try playground keyword asyncawait pattern try playground state machine transformation saving state full state machine type pinning pinning selfreferential structs problem selfreferential structs possible solution update pointer move store offset instead selfreferences forbid moving struct rfc heap value heap allocated try playground playground try playground auto trait try run adjusted example try playground stack pinning module pinning future source combinator method projection structural pinning executor waker described executor thread pool work stealing waker cooperative multitasking implementation task section pinning simple executor fifo queue dummy waker method trying async keyboard input scancode queue atomic operation pull request yet filling queue scancode stream waker support keyboard task keyboard interrupt handler executor waker support task id type spawning task running task rfc implemented waker design implementation crate method diverging sleep idle instruction possible extension scheduling scheduling chapter wikipedia article scheduling task spawning utilizing thread load balancing summary multitasking asyncawait implementation next,asyncawait mar post explore cooperative multitasking asyncawait feature rust take detailed look asyncawait work rust including design future trait state machine transformation pinning add basic support asyncawait kernel creating asynchronous keyboard task basic executor blog openly developed github problem question please open issue also leave comment bottom complete source code post found branch table content one fundamental feature operating system multitasking ability execute multiple task concurrently example probably program open looking post text editor terminal window even single browser window open probably various background task managing desktop window checking update indexing file seems like task run parallel single task executed cpu core time create illusion task run parallel operating system rapidly switch active task one make bit progress since computer fast nt notice switch time singlecore cpu execute single task time multicore cpu run multiple task truly parallel way example cpu core run task time explain setup multicore cpu future post post focus singlecore cpu simplicity worth noting multicore cpu start single active core treat singlecore cpu two form multitasking cooperative multitasking requires task regularly give control cpu task make progress preemptive multitasking us operating system functionality switch thread arbitrary point time forcibly pausing following explore two form multitasking detail discus respective advantage drawback multitasking idea behind preemptive multitasking operating system control switch task utilizes fact regains control cpu interrupt make possible switch task whenever new input available system example would possible switch task mouse moved network packet arrives operating system also determine exact time task allowed run configuring hardware timer send interrupt time following graphic illustrates task switching process hardware interrupt first row cpu executing task program task paused second row hardware interrupt arrives cpu described hardware interrupt post cpu immediately stop execution task jump interrupt handler defined interrupt descriptor table idt interrupt handler operating system control cpu allows switch task instead continuing task state since task interrupted arbitrary point time might middle calculation order able resume later operating system must backup whole state task including call stack value cpu register process called context switch call stack large operating system typically set separate call stack task instead backing call stack content task switch task separate stack called thread execution thread short using separate stack task register content need saved context switch including program counter stack pointer approach minimizes performance overhead context switch important since context switch often occur time per second main advantage preemptive multitasking operating system fully control allowed execution time task way guarantee task get fair share cpu time without need trust task cooperate especially important running thirdparty task multiple user share system disadvantage preemption task requires stack compared shared stack result higher memory usage per task often limit number task system another disadvantage operating system always save complete cpu register state task switch even task used small subset register preemptive multitasking thread fundamental component operating system make possible run untrusted userspace program discus concept full detail future post post however focus cooperative multitasking also provides useful capability kernel multitasking instead forcibly pausing running task arbitrary point time cooperative multitasking let task run voluntarily give control cpu allows task pause convenient point time example need wait io operation anyway cooperative multitasking often used language level example form coroutines asyncawait idea either programmer compiler insert yield operation program give control cpu allow task run example yield could inserted iteration complex loop common combine cooperative multitasking asynchronous operation instead waiting operation finished preventing task run time asynchronous operation return ready status operation finished yet case waiting task execute yield operation let task run state since task define pause point nt need operating system save state instead save exactly state need continuation pause often result better performance example task finished complex computation might need backup final result computation since need intermediate result anymore languagesupported implementation cooperative task often even able backup required part call stack pausing example rust asyncawait implementation store local variable still needed automatically generated struct see backing relevant part call stack pausing task share single call stack result much smaller memory consumption per task make possible create almost arbitrary number cooperative task without running memory drawback cooperative multitasking uncooperative task potentially run unlimited amount time thus malicious buggy task prevent task running slow even block whole system reason cooperative multitasking used task known cooperate counterexample good idea make operating system rely cooperation arbitrary userlevel program however strong performance memory benefit cooperative multitasking make good approach usage within program especially combination asynchronous operation since operating system kernel performancecritical program interacts asynchronous hardware cooperative multitasking seems like good approach implementing concurrency rust rust language provides firstclass support cooperative multitasking form asyncawait explore asyncawait work need understand future asynchronous programming work rust future represents value might available yet could example integer computed another task file downloaded network instead waiting value available future make possible continue execution value needed concept future best illustrated small example sequence diagram show main function read file file system call function foo process repeated two time synchronous readfile call asynchronous asyncreadfile call synchronous call main function need wait file loaded file system call foo function requires wait result asynchronous asyncreadfile call file system directly return future load file asynchronously background allows main function call foo much earlier run parallel file load example file load even finish foo return main directly work file without waiting foo return rust rust future represented future trait look like pub trait future type output fn poll self pin mut self cx mut context poll self output associated type output specifies type asynchronous value example asyncreadfile function diagram would return future instance output set file poll method allows check value already available return poll enum look like pub enum poll ready pending value already available eg file fully read disk returned wrapped ready variant otherwise pending variant returned signal caller value yet available poll method take two argument self pin mut self cx mut context former behaves like normal mut self reference difference self value pinned memory location understanding pin needed difficult without understanding asyncawait work first therefore explain later post purpose cx mut context parameter pas waker instance asynchronous task eg file system load waker allows asynchronous task signal part finished eg file loaded disk since main task know notified future ready need call poll explain process detail later post implement waker type future know future defined understand basic idea behind poll method however still nt know effectively work future problem future represent result asynchronous task might available yet practice however often need value directly calculation question efficiently retrieve value future need future one possible answer wait future becomes ready could look something like let future asyncreadfile footxt let filecontent loop match futurepoll poll ready value break value poll pending nothing actively wait future calling poll loop argument poll nt matter omitted solution work inefficient keep cpu busy value becomes available efficient approach could block current thread future becomes available course possible thread solution work kernel least yet even system blocking supported often desired turn asynchronous task synchronous task thereby inhibiting potential performance benefit parallel task combinators alternative waiting use future combinators future combinators method like map allow chaining combining future together similar method iterator instead waiting future combinators return future applies mapping operation poll example simple stringlen combinator converting future output string future output usize could look like struct stringlen f innerfuture f impl f future stringlen f f future output string type output usize fn poll mut self pin mut self cx mut context poll match selfinnerfuturepoll cx poll ready poll ready slen poll pending poll pending fn stringlen string impl future output string impl future output usize stringlen innerfuture string usage fn filelen impl future output usize let filecontentfuture asyncreadfile footxt stringlen filecontentfuture code quite work handle pinning suffices example basic idea stringlen function wrap given future instance new stringlen struct also implement future wrapped future polled poll inner future value ready yet poll pending returned wrapped future value ready string extracted poll ready variant length calculated afterwards wrapped poll ready returned stringlen function calculate length asynchronous string without waiting since function return future caller ca nt work directly returned value need use combinator function way whole call graph becomes asynchronous efficiently wait multiple future point eg main function manually writing combinator function difficult therefore often provided library rust standard library provides combinator method yet semiofficial nostd compatible future crate futureext trait provides highlevel combinator method map used manipulate result arbitrary closure big advantage future combinators keep operation asynchronous combination asynchronous io interface approach lead high performance fact future combinators implemented normal structs trait implementation allows compiler excessively optimize detail see zerocost future rust post announced addition future rust ecosystem future combinators make possible write efficient code difficult use situation type system closure based interface example consider code like fn example minlen usize impl future output string asyncreadfile footxt move content contentlen minlen either left asyncreadfile bartxt map content else either right future ready content try playground read file footxt use combinator chain second future based file content content length smaller given minlen read different bartxt file append content using map combinator otherwise return content footxt need use move keyword closure passed otherwise would lifetime error minlen reason either wrapper else block must always type since return different future type block must use wrapper type unify single type ready function wrap value future immediately ready function required either wrapper expects wrapped value implement future imagine quickly lead complex code larger project get especially complicated borrowing different lifetime involved reason lot work invested add support asyncawait rust goal making asynchronous code radically simpler write asyncawait pattern idea behind asyncawait let programmer write code look like normal synchronous code turned asynchronous code compiler work based two keywords async await async keyword used function signature turn synchronous function asynchronous function return future async fn foo roughly translated compiler fn foo impl future output future ready keyword alone would nt useful however inside async function await keyword used retrieve asynchronous value future async fn example minlen usize string let content asyncreadfile footxt await contentlen minlen content asyncreadfile bartxt await else content try playground function direct translation example function used combinator function using await operator retrieve value future without needing closure either type result write code like write normal synchronous code difference still asynchronous code machine transformation compiler behind scene transform body async function state machine await call representing different state example function compiler creates state machine following four state state represents different pause point function start end state represent function beginning end execution waiting footxt state represents function currently waiting first asyncreadfile result similarly waiting bartxt state represents pause point function waiting second asyncreadfile result state machine implement future trait making poll call possible state transition diagram us arrow represent state switch diamond shape represent alternative way example footxt file ready path marked taken waiting footxt state reached otherwise yes path taken small red diamond without caption represents contentlen branch example function see first poll call start function let run reach future ready yet future path ready function run till end state return result wrapped poll ready otherwise state machine enters waiting state return poll pending next poll call state machine start last waiting state retries last operation state order able continue last waiting state state machine must keep track current state internally addition must save variable need continue execution next poll call compiler really shine since know variable used automatically generate structs exactly variable needed example compiler generates structs like following example function example function nt scroll async fn example minlen usize string let content asyncreadfile footxt await contentlen minlen content asyncreadfile bartxt await else content compilergenerated state structs struct startstate minlen usize struct waitingonfootxtstate minlen usize footxtfuture impl future output string struct waitingonbartxtstate content string bartxtfuture impl future output string struct endstate start waiting footxt state minlen parameter need stored required comparison contentlen later waiting footxt state additionally store footxtfuture represents future returned asyncreadfile call future need polled state machine continues need saved waiting bartxt state contains content variable needed string concatenation bartxt ready also store bartxtfuture represents inprogress load bartxt struct contain minlen variable longer needed contentlen comparison end state variable stored function already run completion keep mind example code compiler could generate struct name field layout implementation detail might different full state machine type exact compilergenerated code implementation detail help understanding imagine generated state machine could look example function already defined structs representing different state containing required variable create state machine top combine enum enum examplestatemachine start startstate waitingonfootxt waitingonfootxtstate waitingonbartxt waitingonbartxtstate end endstate define separate enum variant state add corresponding state struct variant field implement state transition compiler generates implementation future trait based example function impl future examplestatemachine type output string return type example fn poll self pin mut self cx mut context poll self output loop match self todo handle pinning examplestatemachine start state examplestatemachine waitingonfootxt state examplestatemachine waitingonbartxt state examplestatemachine end state output type future string return type example function implement poll function use match statement current state inside loop idea switch next state long possible use explicit return poll pending ca nt continue simplicity show simplified code nt handle pinning ownership lifetime etc following code treated pseudocode used directly course real compilergenerated code handle everything correctly albeit possibly different way keep code excerpt small present code match arm separately let begin start state examplestatemachine start state body example let footxtfuture asyncreadfile footxt await operation let state waitingonfootxtstate minlen stateminlen footxtfuture self examplestatemachine waitingonfootxt state state machine start state right beginning function case execute code body example function first await handle await operation change state self state machine waitingonfootxt includes construction waitingonfootxtstate struct since match self statement executed loop execution jump waitingonfootxt arm next examplestatemachine waitingonfootxt state match statefootxtfuturepoll cx poll pending return poll pending poll ready content body example contentlen stateminlen let bartxtfuture asyncreadfile bartxt await operation let state waitingonbartxtstate content bartxtfuture self examplestatemachine waitingonbartxt state else self examplestatemachine end endstate return poll ready content match arm first call poll function footxtfuture ready exit loop return poll pending since self stay waitingonfootxt state case next poll call state machine enter match arm retry polling footxtfuture footxtfuture ready assign result content variable continue execute code example function contentlen smaller minlen saved state struct bartxt file read asynchronously translate await operation state change time waitingonbartxt state since executing match inside loop execution directly jump match arm new state afterwards bartxtfuture polled case enter else branch await operation occurs reach end function return content wrapped poll ready also change current state end state code waitingonbartxt state look like examplestatemachine waitingonbartxt state match statebartxtfuturepoll cx poll pending return poll pending poll ready bartxt self examplestatemachine end endstate body example return poll ready statecontent bartxt similar waitingonfootxt state start polling bartxtfuture still pending exit loop return poll pending otherwise perform last operation example function concatenating content variable result future update state machine end state return result wrapped poll ready finally code end state look like examplestatemachine end panic poll called poll ready returned future polled returned poll ready therefore panic poll called already end state know compilergenerated state machine implementation future trait could look like practice compiler generates code different way case interested implementation currently based generator implementation detail last piece puzzle generated code example function remember function header defined like async fn example minlen usize string since complete function body implemented state machine thing function need initialize state machine return generated code could look like fn example minlen usize examplestatemachine examplestatemachine start startstate minlen function longer async modifier since explicitly return examplestatemachine type implement future trait expected state machine constructed start state corresponding state struct initialized minlen parameter note function start execution state machine fundamental design decision future rust nothing polled first time already stumbled across pinning multiple time post finally time explore pinning needed structs explained state machine transformation store local variable pause point struct small example like example function straightforward lead problem however thing become difficult variable reference example consider function async fn pinexample let array let element array asyncwritefile footxt elementtostring await element function creates small array content creates reference last array element store element variable next asynchronously writes number converted string footxt file finally return number referenced element since function us single await operation resulting state machine three state start end waiting write function take argument struct start state empty like struct end state empty function finished point struct waiting write state interesting struct waitingonwritestate array element address last array element need store array element variable element required return value array referenced element since element reference store pointer ie memory address referenced element used example memory address reality need address last element array field depends struct life memory structs internal pointer called selfreferential structs reference one field problem selfreferential structs internal pointer selfreferential struct lead fundamental problem becomes apparent look memory layout array field start address element field address point address last array element life address point everything still fine however issue occurs move struct different memory address moved struct bit start address could example happen pas struct function argument assign different stack variable problem element field still point address even though last array element life address thus pointer dangling result undefined behavior occurs next poll call solution three fundamental approach solve dangling pointer problem update pointer move idea update internal pointer whenever struct moved memory still valid move unfortunately approach would require extensive change rust would result potentially huge performance loss reason kind runtime would need keep track type struct field check every move operation whether pointer update required store offset instead selfreferences avoid requirement updating pointer compiler could try store selfreferences offset struct beginning instead example element field waitingonwritestate struct could stored form elementoffset field value array element reference point start byte struct beginning since offset stay struct moved field update required problem approach requires compiler detect selfreferences possible compiletime value reference might depend user input would need runtime system analyze reference correctly create state structs would result runtime cost also prevent certain compiler optimization would cause large performance loss forbid moving struct saw dangling pointer occurs move struct memory completely forbidding move operation selfreferential structs problem also avoided big advantage approach implemented type system level without additional runtime cost drawback put burden dealing move operation possibly selfreferential structs programmer principle provide zero cost abstraction mean abstraction impose additional runtime cost rust decided third solution pinning api proposed rfc following give short overview api explain work asyncawait future value first observation heap allocated value already fixed memory address time created using call allocate referenced pointer type box moving pointer type possible heap value pointer point stay memory address freed deallocate call using heap allocation try create selfreferential struct fn main let mut heapvalue box new selfreferential selfptr const let ptr heapvalue const selfreferential heapvalueselfptr ptr println heap value p heapvalue println internal reference p heapvalueselfptr struct selfreferential selfptr const self try playground create simple struct named selfreferential contains single pointer field first initialize struct null pointer allocate heap using box new determine memory address heap allocated struct store ptr variable finally make struct selfreferential assigning ptr variable selfptr field execute code playground see address heap value internal pointer equal mean selfptr field valid selfreference since heapvalue variable pointer moving eg passing function change address struct selfptr stay valid even pointer moved however still way break example move box replace content let stackvalue mem replace mut heapvalue selfreferential selfptr const println value p stackvalue println internal reference p stackvalueselfptr try playground use mem replace function replace heap allocated value new struct instance allows u move original heapvalue stack selfptr field struct dangling pointer still point old heap address try run example playground see printed value internal reference line show indeed different pointer heap allocating value enough make selfreferences safe fundamental problem allowed breakage box allows u get mut reference heap allocated value mut reference make possible use method like mem replace mem swap invalidate heap allocated value resolve problem must prevent mut reference selfreferential structs created box unpin pinning api provides solution mut problem form pin wrapper type unpin marker trait idea behind type gate method pin used get mut reference wrapped value eg getmut derefmut unpin trait unpin trait auto trait automatically implemented type except type explicitly optout making selfreferential structs optout unpin safe way get mut pin box type result internal selfreferences guaranteed stay valid example let update selfreferential type optout unpin use core marker phantompinned struct selfreferential selfptr const self pin phantompinned optout adding second pin field type phantompinned type zerosized marker type whose purpose implement unpin trait way auto trait work single field unpin suffices make complete struct optout unpin second step change box selfreferential type example pin box selfreferential type easiest way use box pin function instead box new creating heap allocated value let mut heapvalue box pin selfreferential selfptr const pin phantompinned addition changing box new box pin also need add new pin field struct initializer since phantompinned zero sized type need type name initialize try run adjusted example see longer work error assign data dereference std pin pin std boxed box selfreferential heapvalueselfptr ptr assign help trait derefmut required modify dereference implemented std pin pin std boxed box selfreferential error borrow data dereference std pin pin std boxed box selfreferential mutable let stackvalue mem replace mut heapvalue selfreferential borrow mutable help trait derefmut required modify dereference implemented std pin pin std boxed box selfreferential error occur pin box selfreferential type longer implement derefmut trait exactly wanted derefmut trait would return mut reference want prevent happens optedout unpin changed box new box pin problem compiler prevent moving type line also forbids initialize selfptr field line happens compiler ca nt differentiate valid invalid us mut reference get initialization working use unsafe getuncheckedmut method safe modifying field nt move whole struct unsafe let mutref pin asmut mut heapvalue pin getuncheckedmut mutref selfptr ptr try playground getuncheckedmut function work pin mut instead pin box use pin asmut converting value set selfptr field using mut reference returned getuncheckedmut error left desired error mem replace remember operation try move heap allocated value stack would break selfreference stored selfptr field opting unpin using pin box prevent operation compile time thus safely work selfreferential structs saw compiler able prove creation selfreference safe yet need use unsafe block verify correctness pinning pin mut previous section learned use pin box safely create heap allocated selfreferential value approach work fine relatively safe apart unsafe construction required heap allocation come performance cost since rust always want provide zerocost abstraction possible pinning api also allows create pin mut instance point stack allocated value unlike pin box instance ownership wrapped value pin mut instance temporarily borrow wrapped value make thing complicated requires programmer ensure additional guarantee themself importantly pin mut must stay pinned whole lifetime referenced difficult verify stack based variable help crate like pinutils exist still would nt recommend pinning stack unless really know reading check documentation pin module pin newunchecked method future already saw post future poll method us pinning form pin mut self parameter fn poll self pin mut self cx mut context poll self output reason method take self pin mut self instead normal mut self future instance created asyncawait often selfreferential saw wrapping self pin letting compiler optout unpin selfreferential future generated asyncawait guaranteed future moved memory poll call ensures internal reference still valid worth noting moving future first poll call fine result fact future lazy nothing polled first time start state generated state machine therefore contains function argument internal reference order call poll caller must wrap future pin first ensures future moved memory anymore since stack pinning difficult get right recommend always use box pin combined pin asmut case interested understanding safely implement future combinator function using stack pinning take look relatively short source map combinator method future crate section projection structural pinning pin documentation waker using asyncawait possible ergonomically work future completely asynchronous way however learned future nothing polled mean call poll point otherwise asynchronous code never executed single future always wait future manually using loop described however approach inefficient practical program create large number future common solution problem define global executor responsible polling future system finished purpose executor allow spawning future independent task typically sort spawn method executor responsible polling future completed big advantage managing future central place executor switch different future whenever future return poll pending thus asynchronous operation run parallel cpu kept busy many executor implementation also take advantage system multiple cpu core create thread pool able utilize core enough work available use technique work stealing balance load core also special executor implementation embedded system optimize low latency memory overhead avoid overhead polling future executor typically also take advantage waker api supported rust future idea behind waker api special waker type passed invocation poll wrapped context type waker type created executor used asynchronous task signal partial completion result executor need call poll future previously returned poll pending notified corresponding waker best illustrated small example async fn writefile asyncwritefile footxt hello await function asynchronously writes string hello footxt file since hard disk writes take time first poll call future likely return poll pending however hard disk driver internally store waker passed poll call use notify executor file written disk way executor need waste time trying poll future receives waker notification see waker type work detail create executor waker support implementation section post multitasking beginning post talked preemptive cooperative multitasking preemptive multitasking relies operating system forcibly switch running task cooperative multitasking requires task voluntarily give control cpu yield operation regular basis big advantage cooperative approach task save state result efficient context switch make possible share call stack task might immediately apparent future asyncawait implementation cooperative multitasking pattern future added executor basically cooperative task instead using explicit yield operation future give control cpu core returning poll pending poll ready end nothing force future give cpu want never return poll eg spinning endlessly loop since future block execution future executor need trust malicious future internally store state need continue execution next poll call asyncawait compiler automatically detects variable needed store inside generated state machine minimum state required continuation saved since poll method give call stack return stack used polling future see future asyncawait fit cooperative multitasking pattern perfectly use different terminology following therefore use term task future interchangeably understand cooperative multitasking based future asyncawait work rust time add support kernel since future trait part core library asyncawait feature language nothing special need use nostd kernel requirement use least nightly rust asyncawait nostd compatible recentenough nightly start using asyncawait mainrs srcmainrs async fn asyncnumber async fn exampletask let number asyncnumber await println async number number asyncnumber function async fn compiler transforms state machine implement future since function return resulting future directly return poll ready first poll call like asyncnumber exampletask function also async fn awaits number returned asyncnumber print using println macro run future returned exampletask need call poll signal completion returning poll ready need create simple executor type start executor implementation create new task module task type srclibrs pub mod task srctaskmodrs use core future future pin pin use alloc boxed box pub struct task future pin box dyn future output task struct newtype wrapper around pinned heap allocated dynamically dispatched future empty type output let go detail require future associated task return mean task nt return result executed side effect example exampletask function defined return value print something screen side effect dyn keyword indicates store trait object box mean method future dynamically dispatched make possible store different type future task type important async fn type want able create multiple different task learned section pinning pin box type ensures value moved memory placing heap preventing creation mut reference important future generated asyncawait might selfreferential ie contain pointer would invalidated future moved allow creation new task structs future create new function srctaskmodrs impl task pub fn new future impl future output static task task future box pin future function take arbitrary future output type pin memory box pin function wrap boxed future task struct return static lifetime required returned task live arbitrary time future need valid time also add poll method allow executor poll stored future srctaskmodrs use core task context poll impl task fn poll mut self context mut context poll selffutureasmut poll context since poll method future trait expects called pin mut type use pin asmut method convert selffuture field type pin box first call poll converted selffuture field return result since task poll method called executor create moment keep function private task module executor since executor quite complex deliberately start creating basic executor implement featureful executor later first create new task simpleexecutor submodule srctaskmodrs pub mod simpleexecutor srctasksimpleexecutorrs use super task use alloc collection vecdeque pub struct simpleexecutor taskqueue vecdeque task impl simpleexecutor pub fn new simpleexecutor simpleexecutor taskqueue vecdeque new pub fn spawn mut self task task selftaskqueuepushback task struct contains single taskqueue field type vecdeque basically vector allows push pop operation end idea behind using type insert new task spawn method end pop next task execution front way get simple fifo queue first first waker order call poll method need create context type wrap waker type start simple first create dummy waker nothing create rawwaker instance defines implementation different waker method use waker fromraw function turn waker srctasksimpleexecutorrs use core task waker rawwaker fn dummyrawwaker rawwaker todo fn dummywaker waker unsafe waker fromraw dummyrawwaker fromraw function unsafe undefined behavior occur programmer uphold documented requirement rawwaker look implementation dummyrawwaker function first try understand rawwaker type work rawwaker type requires programmer explicitly define virtual method table vtable specifies function called rawwaker cloned woken dropped layout vtable defined rawwakervtable type function receives const argument basically typeerased self pointer struct eg allocated heap reason using const pointer instead proper reference rawwaker type nongeneric still support arbitrary type pointer value passed function data pointer given rawwaker new typically rawwaker created heap allocated struct wrapped box arc type type method like box intoraw used convert box const pointer pointer casted anonymous const pointer passed rawwaker new since vtable function receives const argument function safely cast pointer back box operate imagine process highly dangerous easily lead undefined behavior mistake reason manually creating rawwaker recommended unless necessary dummy rawwaker manually creating rawwaker recommended currently way create dummy waker nothing fortunately fact want nothing make relatively safe implement dummyrawwaker function srctasksimpleexecutorrs use core task rawwakervtable fn dummyrawwaker rawwaker fn noop const fn clone const rawwaker dummyrawwaker let vtable rawwakervtable new clone noop noop noop rawwaker new const vtable first define two inner function named noop clone noop function take const pointer nothing clone function also take const pointer return new rawwaker calling dummyrawwaker use two function create minimal rawwakervtable clone function used cloning operation noop function used operation since rawwaker nothing matter return new rawwaker clone instead cloning creating vtable use rawwaker new function create rawwaker passed const matter since none vtable function us reason simply pas null pointer run method way create waker instance use implement run method executor simple run method repeatedly poll queued task loop done efficient since utilize notification waker type easy way get thing running srctasksimpleexecutorrs use core task context poll impl simpleexecutor pub fn run mut self let mut task selftaskqueuepopfront let waker dummywaker let mut context context fromwaker waker match taskpoll mut context poll ready task done poll pending selftaskqueuepushback task function us let loop handle task taskqueue task first creates context type wrapping waker instance returned dummywaker function invokes task poll method context poll method return poll ready task finished continue next task task still poll pending add back queue polled subsequent loop iteration simpleexecutor type try running task returned exampletask function mainrs srcmainrs use blogos task task simpleexecutor simpleexecutor fn kernelmain bootinfo static bootinfo initialization routine including initheap let mut executor simpleexecutor new executorspawn task new exampletask executorrun testmain crash message hltloop exampletask function nt scroll async fn asyncnumber async fn exampletask let number asyncnumber await println async number number run see expected async number message printed screen let summarize various step happen example first new instance simpleexecutor type created empty taskqueue next call asynchronous exampletask function return future wrap future task type move heap pin add task taskqueue executor spawn method call run method start execution single task queue involves popping task front taskqueue creating rawwaker task converting waker instance creating context instance calling poll method future task using context created since exampletask wait anything directly run till end first poll call async number line printed since exampletask directly return poll ready added back task queue run method return taskqueue becomes empty execution kernelmain function continues crash message printed keyboard input simple executor utilize waker notification simply loop task done nt problem example since exampletask directly run finish first poll call see performance advantage proper waker implementation first need create task truly asynchronous ie task probably return poll pending first poll call already kind asynchronicity system use hardware interrupt learned interrupt post hardware interrupt occur arbitrary point time determined external device example hardware timer sends interrupt cpu predefined time elapsed cpu receives interrupt immediately transfer control corresponding handler function defined interrupt descriptor table idt following create asynchronous task based keyboard interrupt keyboard interrupt good candidate nondeterministic latencycritical nondeteministic mean way predict next key press occur entirely dependent user latencycritical mean want handle keyboard input timely manner otherwise user feel lag support task efficient way essential executor proper support waker notification queue currently handle keyboard input directly interrupt handler good idea long term interrupt handler stay short possible might interrupt important work instead interrupt handler perform minimal amount work necessary eg reading keyboard scancode leave rest work eg interpreting scancode background task common pattern delegating work background task create sort queue interrupt handler push unit work queue background task handle work queue applied keyboard interrupt mean interrupt handler read scancode keyboard push queue return keyboard task sits end queue interprets handle scancode pushed simple implementation queue could mutexprotected vecdeque however using mutexes interrupt handler good idea since easily lead deadlock example user press key keyboard task locked queue interrupt handler try acquire lock hang indefinitely another problem approach vecdeque automatically increase capacity performing new heap allocation becomes full lead deadlock allocator also us mutex internally problem heap allocation fail take considerable amount time heap fragmented prevent problem need queue implementation require mutexes allocation push operation queue implemented using lockfree atomic operation pushing popping element way possible create push pop operation require self reference thus usable without mutex avoid allocation push queue backed preallocated fixedsize buffer make queue bounded ie maximum length often possible define reasonable upper bound queue length practice nt big problem crossbeam crate implementing queue correct efficient way difficult recommend stick existing welltested implementation one popular rust project implement various mutexfree type concurrent programming crossbeam provides type named arrayqueue exactly need case lucky type fully compatible nostd crate allocation support use type need add dependency crossbeamqueue crate cargotoml dependenciescrossbeamqueue version defaultfeatures false feature alloc default crate depends standard library make nostd compatible need disable default feature instead enable alloc feature note depending main crossbeam crate work missing export queue module nostd filed pull request fix nt released cratesio yet implementation using arrayqueue type create global scancode queue new task keyboard module srctaskmodrs pub mod keyboard srctaskkeyboardrs use conqueronce spin oncecell use crossbeamqueue arrayqueue static scancodequeue oncecell arrayqueue oncecell uninit since arrayqueue new performs heap allocation possible compile time yet ca nt initialize static variable directly instead use oncecell type conqueronce crate make possible perform safe onetime initialization static value include crate need add dependency cargotoml cargotoml dependenciesconqueronce version defaultfeatures false instead oncecell primitive could also use lazystatic macro however oncecell type advantage ensure initialization happen interrupt handler thus preventing interrupt handler performs heap allocation queue fill scancode queue create new addscancode function call interrupt handler srctaskkeyboardrs use crate println called keyboard interrupt handler must block allocate pub crate fn addscancode scancode let ok queue scancodequeuetryget let err queuepush scancode println warning scancode queue full dropping keyboard input else println warning scancode queue uninitialized use oncecell tryget get reference initialized queue queue initialized yet ignore keyboard scancode print warning important nt try initialize queue function called interrupt handler perform heap allocation since function callable mainrs use pub crate visibility make available librs fact arrayqueue push method requires self reference make simple call method static queue arrayqueue type performs necessary synchronization nt need mutex wrapper case queue full print warning call addscancode function keyboard interrupt update keyboardinterrupthandler function interrupt module srcinterruptsrs extern fn keyboardinterrupthandler stackframe mut interruptstackframe use instruction port port let mut port port new let scancode unsafe portread crate task keyboard addscancode scancode new unsafe picslock notifyendofinterrupt interruptindex removed keyboard handling code function instead added call addscancode function rest function stay expected keypresses longer printed screen run project using cargo run instead see warning scancode queue uninitialized every keystroke stream initialize scancodequeue read scancodes queue asynchronous way create new scancodestream type srctaskkeyboardrs pub struct scancodestream private impl scancodestream pub fn new self scancodequeuetryinitonce arrayqueue new expect scancodestream new called scancodestream private purpose private field prevent construction struct outside module make new function way construct type function first try initialize scancodequeue static panic already initialized ensure single scancodestream instance created make scancodes available asynchronous task next step implement polllike method try pop next scancode queue sound like implement future trait type quite fit problem future trait abstract single asynchronous value expects poll method called return poll ready scancode queue however contains multiple asynchronous value ok keep polling stream trait since type yield multiple asynchronous value common future crate provides useful abstraction type stream trait trait defined like pub trait stream type item fn pollnext self pin mut self cx mut context poll option self item definition quite similar future trait following difference associated type named item instead output instead poll method return poll self item stream trait defines pollnext method return poll option self item note additional option also semantic difference pollnext called repeatedly return poll ready none signal stream finished regard method similar iterator next method also return none last value stream let implement stream trait scancodestream provide value scancodequeue asynchronous way first need add dependency futuresutil crate contains stream type cargotoml dependenciesfuturesutil version defaultfeatures false feature alloc disable default feature make crate nostd compatible enable alloc feature make allocationbased type available need later note could also add dependency main future crate reexports futuresutil crate would result larger number dependency longer compile time import implement stream trait srctaskkeyboardrs use core pin pin task poll context use futuresutil stream stream impl stream scancodestream type item fn pollnext self pin mut self cx mut context poll option let queue scancodequeuetryget expect initialized match queuepop ok scancode poll ready scancode err crossbeamqueue poperror poll pending first use oncecell tryget method get reference initialized scancode queue never fail since initialize queue new function safely use expect method panic initialized next use arrayqueue pop method try get next element queue succeeds return scancode wrapped poll ready fails mean queue empty case return poll pending support like future poll method stream pollnext method requires asynchronous task notifies executor becomes ready poll pending returned way executor need poll task notified greatly reduces performance overhead waiting task send notification task extract waker passed context reference store somewhere task becomes ready invoke wake method stored waker notify executor task polled implement waker notification scancodestream need place store waker poll call ca nt store field scancodestream need accessible addscancode function solution use static variable atomicwaker type provided futuresutil crate like arrayqueue type type based atomic instruction safely stored static modified concurrently let use atomicwaker type define static waker srctaskkeyboardrs use futuresutil task atomicwaker static waker atomicwaker atomicwaker new idea pollnext implementation store current waker static addscancode function call wake function new scancode added queue waker contract defined pollpollnext requires task register wakeup passed waker return poll pending let modify pollnext implementation satisfy requirement srctaskkeyboardrs impl stream scancodestream type item fn pollnext self pin mut self cx mut context poll option let queue scancodequeue tryget expect scancode queue initialized fast path let ok scancode queuepop return poll ready scancode wakerregister cxwaker match queuepop ok scancode wakertake poll ready scancode err crossbeamqueue poperror poll pending like first use oncecell tryget function get reference initialized scancode queue optimistically try pop queue return poll ready succeeds way avoid performance overhead registering waker queue empty first call queuepop succeed queue potentially empty potentially interrupt handler might filled queue asynchronously immediately check since race condition occur next check need register waker waker static second check way wakeup might happen return poll pending guaranteed get wakeup scancodes pushed check registering waker contained passed context atomicwaker register function try popping queue second time succeeds return poll ready also remove registered waker using atomicwaker take waker notification longer needed case queuepop fails second time return poll pending like time registered wakeup note two way wakeup happen task return poll pending yet one way mentioned race condition wakeup happens immediately returning poll pending way queue longer empty registering waker poll ready returned since spurious wakeups preventable executor need able handle correctly stored waker wake stored waker add call wakerwake addscancode function srctaskkeyboardrs pub crate fn addscancode scancode let ok queue scancodequeuetryget let err queuepush scancode println warning scancode queue full dropping keyboard input else wakerwake new else println warning scancode queue uninitialized change performed add call wakerwake push scancode queue succeeds waker registered waker static method call equallynamed wake method notifies executor otherwise operation noop ie nothing happens important call wake pushing queue otherwise task might woken early queue still empty example happen using multithreaded executor start woken task concurrently different cpu core nt thread support yet add soon nt want thing break task implemented stream trait scancodestream use create asynchronous keyboard task srctaskkeyboardrs use futuresutil stream streamext use pckeyboard layout decodedkey handlecontrol keyboard use crate print pub async fn printkeypresses let mut scancodes scancodestream new let mut keyboard keyboard new layout handlecontrol ignore let scancode scancodesnext await let ok keyevent keyboardaddbyte scancode let key keyboardprocesskeyevent keyevent match key decodedkey unicode character print character decodedkey rawkey key print key code similar code keyboard interrupt handler modified post difference instead reading scancode io port take scancodestream first create new scancode stream repeatedly use next method provided streamext trait get future resolve next element stream using await operator asynchronously wait result future use let loop stream return none signal end since pollnext method never return none effectively endless loop printkeypresses task never finish let add printkeypresses task executor mainrs get working keyboard input srcmainrs use blogos task keyboard new fn kernelmain bootinfo static bootinfo initialization routine including initheap testmain let mut executor simpleexecutor new executorspawn task new exampletask executorspawn task new keyboard printkeypresses new executorrun crash message hltloop execute cargo run see keyboard input work keep eye cpu utilization computer see qemu process continuously keep cpu busy happens simpleexecutor poll task loop even nt press key keyboard executor repeatedly call poll printkeypresses task even though task make progress return poll pending time waker support fix performance problem need create executor properly utilizes waker notification way executor notified next keyboard interrupt occurs need keep polling printkeypresses task id first step creating executor proper support waker notification give task unique id required need way specify task woken start creating new taskid wrapper type srctaskmodrs derive debug clone copy partialeq eq partialord ord struct taskid taskid struct simple wrapper type around derive number trait make printable copyable comparable sortable latter important want use taskid key type btreemap moment create new unique id create taskid new function use core sync atomic ordering impl taskid fn new self static nextid new taskid nextidfetchadd ordering relaxed function us static nextid variable type ensure id assigned fetchadd method atomically increase value return previous value one atomic operation mean even taskid new method called parallel every id returned exactly ordering parameter defines whether compiler allowed reorder fetchadd operation instruction stream since require id unique relaxed ordering weakest requirement enough case extend task type additional id field srctaskmodrs pub struct task id taskid new future pin box dyn future output impl task pub fn new future impl future output static task task id taskid new new future box pin future new id field make possible uniquely name task required waking specific task executor type create new executor type task executor module srctaskmodrs pub mod executor srctaskexecutorrs use super task taskid use alloc collection btreemap sync arc use core task waker use crossbeamqueue arrayqueue pub struct executor task btreemap taskid task taskqueue arc arrayqueue taskid wakercache btreemap taskid waker impl executor pub fn new self executor task btreemap new taskqueue arc new arrayqueue new wakercache btreemap new instead storing task vecdeque like simpleexecutor use taskqueue task id btreemap named task contains actual task instance map indexed taskid allow efficient continuation specific task taskqueue field arrayqueue task id wrapped arc type implement reference counting reference counting make possible share ownership value multiple owner work allocating value heap counting number active reference number active reference reach zero value longer needed deallocated use arc arrayqueue type taskqueue shared executor waker idea waker push id woken task queue executor sits receiving end queue retrieves woken task id task map run reason using fixedsize queue instead unbounded queue segqueue interrupt handler allocate push queue addition taskqueue task map executor type wakercache field also map map cache waker task creation two reason first improves performance reusing waker multiple wakeups task instead creating new waker time second ensures referencecounted waker deallocated inside interrupt handler could lead deadlock detail create executor provide simple new function choose capacity taskqueue enough foreseeable future case system concurrent task point easily increase size task simpleexecutor provide spawn method executor type add given task task map immediately wake pushing id taskqueue srctaskexecutorrs impl executor pub fn spawn mut self task task let taskid taskid selftasksinsert taskid task issome panic task id already task selftaskqueuepush taskid expect queue full already task id map btreemap insert method return never happen since task unique id panic case since indicates bug code similarly panic taskqueue full since never happen choose largeenough queue size task execute task taskqueue create private runreadytasks method srctaskexecutorrs use core task context poll impl executor fn runreadytasks mut self destructure self avoid borrow checker error let self task taskqueue wakercache self let ok taskid taskqueuepop let task match tasksgetmut taskid task task none continue task longer exists let waker wakercache entry taskid orinsertwith taskwaker new taskid taskqueueclone let mut context context fromwaker waker match taskpoll mut context poll ready task done remove cached waker tasksremove taskid wakercacheremove taskid poll pending basic idea function similar simpleexecutor loop task taskqueue create waker task poll however instead adding pending task back end taskqueue let taskwaker implementation take care adding woken task back queue implementation waker type shown moment let look implementation detail runreadytasks method use destructuring split self three field avoid borrow checker error namely implementation need access selftaskqueue within closure currently try borrow self completely fundamental borrow checker issue resolved rfc implemented popped task id retrieve mutable reference corresponding task task map since scancodestream implementation register waker checking whether task need put sleep might happen wakeup occurs task longer exists case simply ignore wakeup continue next id queue avoid performance overhead creating waker poll use wakercache map store waker task created use btreemap entry method combination entry orinsertwith create new waker nt exist yet get mutable reference creating new waker clone taskqueue pas together task id taskwaker new function implementation shown since taskqueue wrapped arc clone increase reference count value still point heap allocated queue note reusing waker like possible waker implementation taskwaker type allow task finished return poll ready case remove task map using btreemap remove method also remove cached waker exists design job waker push id woken task taskqueue executor implement creating new taskwaker struct store task id reference taskqueue srctaskexecutorrs struct taskwaker taskid taskid taskqueue arc arrayqueue taskid since ownership taskqueue shared executor waker use arc wrapper type implement shared referencecounted ownership implementation wake operation quite simple srctaskexecutorrs impl taskwaker fn waketask self selftaskqueuepush selftaskid expect taskqueue full push taskid referenced taskqueue since modification arrayqueue type require shared reference implement method self instead mut self wake trait order use taskwaker type polling future need convert waker instance first required future poll method take context instance argument constructed waker type could providing implementation rawwaker type simpler safer instead implement arcbased wake trait use implementation provided standard library construct waker trait implementation look like srctaskexecutorrs use alloc task wake impl wake taskwaker fn wake self arc self selfwaketask fn wakebyref self arc self selfwaketask trait still unstable add feature waketrait top librs use since waker commonly shared executor asynchronous task trait method require self instance wrapped arc type implement referencecounted ownership mean move taskwaker arc order call difference wake wakebyref method latter requires reference arc former take ownership arc thus often requires increase reference count type support waking reference implementing wakebyref method optional however lead better performance avoids unnecessary reference count modification case simply forward trait method waketask function requires shared self reference waker since waker type support conversion arcwrapped value implement wake trait implement taskwaker new function required executor runreadytasks method srctaskexecutorrs impl taskwaker fn new taskid taskid taskqueue arc arrayqueue taskid waker waker arc new taskwaker taskid taskqueue create taskwaker using passed taskid taskqueue wrap taskwaker arc use waker implementation convert waker method take care constructing rawwakervtable rawwaker instance taskwaker type case interested work detail check implementation alloc crate run method waker implementation place finally construct run method executor srctaskexecutorrs impl executor pub fn run mut self loop selfrunreadytasks method call runreadytasks function loop could theoretically return function task map becomes empty would never happen since keyboardtask never finish simple loop suffice since function never return use return type mark function diverging compiler change kernelmain use new executor instead simpleexecutor srcmainrs use blogos task executor executor new fn kernelmain bootinfo static bootinfo initialization routine including initheap testmain let mut executor executor new new executorspawn task new exampletask executorspawn task new keyboard printkeypresses executorrun need change import type name since run function marked diverging compiler know never return longer need call hltloop end kernelmain function run kernel using cargo run see keyboard input still work however cpu utilization qemu get better reason still keep cpu busy whole time longer poll task woken still check taskqueue busy loop fix need put cpu sleep work idle basic idea execute hlt instruction taskqueue empty instruction put cpu sleep next interrupt arrives fact cpu immediately becomes active interrupt ensures still directly react interrupt handler push taskqueue implement create new sleepifidle method executor call run method srctaskexecutorrs impl executor pub fn run mut self loop selfrunreadytasks selfsleepifidle new fn sleepifidle self selftaskqueueisempty instruction hlt since call sleepifidle directly runreadytasks loop taskqueue becomes empty checking queue might seem unnecessary however hardware interrupt might occur directly runreadytasks return might new task queue time sleepifidle function called queue still empty put cpu sleep executing hlt instruction instruction hlt wrapper function provided crate unfortunately still subtle race condition implementation since interrupt asynchronous happen time possible interrupt happens right isempty check call hlt selftaskqueueisempty interrupt happen instruction hlt case interrupt push taskqueue put cpu sleep even though ready task worst case could delay handling keyboard interrupt next keypress next timer interrupt prevent answer disable interrupt cpu check atomically enable together hlt instruction way interrupt happen delayed hlt instruction wakeups missed implement approach use enableinterruptsandhlt function provided crate function available since version might need update dependency use updated implementation sleepifidle function look like srctaskexecutorrs impl executor fn sleepifidle self use instruction interrupt self enableinterruptsandhlt interrupt disable selftaskqueueisempty enableinterruptsandhlt else interrupt enable avoid race condition disable interrupt checking whether taskqueue empty use enableinterruptsandhlt function enable interrupt put cpu sleep single atomic operation case queue longer empty mean interrupt woke task runreadytasks returned case enable interrupt directly continue execution without executing hlt executor properly put cpu sleep nothing see qemu process much lower cpu utilization run kernel using cargo run extension executor able run task efficient way utilizes waker notification avoid polling waiting task put cpu sleep currently work however executor still quite basic many possible way extend functionality scheduling currently use vecdeque type implement first first fifo strategy taskqueue often also called round robin scheduling strategy might efficient workload example might make sense prioritize latencycritical task task lot io see scheduling chapter operating system three easy piece book wikipedia article scheduling information task spawning executor spawn method currently requires mut self reference thus longer available starting run method fix could create additional spawner type share kind queue executor allows task creation within task queue could example taskqueue directly separate queue executor check run loop utilizing thread nt support thread yet add next post make possible launch multiple instance executor different thread advantage approach delay imposed long running task reduced task run concurrently approach also allows utilize multiple cpu core load balancing adding threading support becomes important distribute task executor ensure cpu core utilized common technique work stealing started post introducing multitasking differentiating preemptive multitasking forcibly interrupt running task regularly cooperative multitasking let task run voluntarily give control cpu explored rust support asyncawait provides languagelevel implementation cooperative multitasking rust base implementation top pollingbased future trait abstract asynchronous task using asyncawait possible work future almost like normal synchronous code difference asynchronous function return future need added executor point order run behind scene compiler transforms asyncawait code state machine await operation corresponding possible pause point utilizing knowledge program compiler able save minimal state pause point resulting small memory consumption per task one challenge generated state machine might contain selfreferential structs example local variable asynchronous function reference prevent pointer invalidation rust us pin type ensure future moved memory anymore polled first time implementation first created basic executor poll spawned task busy loop without using waker type showed advantage waker notification implementing asynchronous keyboard task task defines static scancodequeue using mutexfree arrayqueue type provided crossbeam crate instead handling keypresses directly keyboard interrupt handler put received scancodes queue wake registered waker signal new input available receiving end created scancodestream type provide future resolving next scancode queue made possible create asynchronous printkeypresses task us asyncawait interpret print scancodes queue utilize waker notification keyboard task created new executor type us arcshared taskqueue ready task implemented taskwaker type push id woken task directly taskqueue polled executor save power task runnable added support putting cpu sleep using hlt instruction finally discussed potential extension executor example providing multicore support next using asyncwait basic support cooperative multitasking kernel cooperative multitasking efficient lead latency problem individual task keep running long thus prevent task run reason make sense also add support preemptive multitasking kernel next post introduce thread common form preemptive multitasking addition resolving problem long running task thread also prepare u utilizing multiple cpu core running untrusted user program future
121,Lobsters,osdev,OS,"TempleOS programs in Linux user-space, part 2: Anatomy of a kernel",https://minexew.github.io/2020/03/29/templeos-loader-part2.html,templeos program linux userspace part anatomy kernel,blog index templeos program linux userspace part anatomy kernel last time wsl genesis bios call gate protected mode relocated sysenterlongmode kmainhc kmain loadkernel boottime version banner banner smp justintime adam task startoshc aotcompiled father task makeadamhc makehomehc memory map virtual memory model code heap memoverviewdd kernel dynamic linking window executables bininfo task scheduling task yield conclusion drawio inkscape nano comment powered disqus,blog index templeos program linux userspace part anatomy kernel mar last time discussed might desirable run templeos linux form fullblown virtual machine teased possible approach end commited finding whether would possible run standard kernel userspace program today see updated apr heart templeos kernel consisting line source code several crucial responsibility initialization interfacing hardware memory management io service including file management task management multitasking providing standard library function compression datetime handling math string operation last bullet point demonstrates closely templeos program coupled kernel providing coherent experience programmer one hand difficult emulation target hand note contrast linux world example user space c runtime library interface kernel limited set system call architecture allows microsoft wsl work without real linux kernel genesis since uefi booting supported kernel always born mode one cpu core running compact bootloader load entire binary kernel image limit size kib requires image stored one continuous block disk roughly following happens order vga graphic initialized via bios call enabled kernel compile time memory map discovered gate configured pci bus enumerated load segment kernel determined stored membootbase pointer kernel patchtableoffset saved come handy later minimal page table set processor switched protected mode boring control segment register initialized first time kernel relocated ensure absolute address code correspond actual kernel load address boring initialization sysfindpcibiosservicedir finally enter mode via sysenterlongmode fpu enabled internal kernel structure prepared cpustruct adam heapctrl adam stack adam task aka init process established jump kmain kmainhc enter kmain first holyc code run boot internal structure set importantly kernel symbol loaded dynamic linking performed via loadkernel later data structure graphic constructed whiteonblack boottime version banner printed confused banner printed homesys boot hardware timer configured memory size checked requirement mib interrupt enabled block device disk optical drive initialized file system mounted rest cpu core brought note templeos suports large number core smp keyboard mouse input initialized holyc compiler binary loaded kernel contains direct call compiler function like exefile kernel built compiler header call resolved point startoshc compiled run justintime context adam task startoshc longer aotcompiled kernel completeness useful understand final step startup jit compilation context start tabula rasa function prototype global variable known basic builtin type therefore kernel header must parsed gain access public function structure exported variable since adam father task environment inherited user program adam code makeadamhc included kernel export function inherited new task proceed build user space opening doldoc window starting window manager applying user customizations via makehomehc o ready use kernel keep running behind scene handling interrupt timed event course function call user space memory map virtual memory model model super complex templeos us none fact memory map simple could ever virtual address space physical address space identitymapped thing obstructing full access computer ram bios area memorymapped device almost mapping even address valid memory location default memory access cached accessing hardware usually undesirable uncached alias available allows access memory location bypassing cache entirely keep mind address space much larger ram could ever point trying economical since use uncached alias niche shall pretend exists code data memory also worth noting reduce binary program size templeos decidedly allows code reside lower gib memory technical reason make possible use relative jump everywhere concept code heap data heap boundary always gib detail terribly important detail found memoverviewdd kernel dynamic linking interestingly kernel compiled flat binary bin format also used aotcompiled compiler level complexity comparable window executables structure bin file however kernel bin file constructed way bootloader jump directly start executing first byte bin header encode jmp instruction first byte image labelled syskernel dynamic linking used later fixup address code export function jit code even resolve function call internal kernel one way explore bin file commandline tool called bininfo generates textual dump kernel header found towards bottom see imported function entry note bin file give hint symbol actually come crossreferencing find setgsbase provided kernel exefile example come compiler rabbit hole go deeper certain function like docsave come adam mean corresponding function pointer kernel undefined sometime later jit compiler encounter implementation makeadam might kernel attempt call would happen let u know find fun fact ietabsaddr relocation also generated label early initialization code course meaningless code us segmentbased addressing time kernel relocates destroys whatever follows operand already land task scheduling since everything share single address space templeos task aka process quite lightweight context switching fast multitasking cooperative task run give cpu calling yield running task organized doublylinked list flag specifying task ready run blocked example waiting external input conclusion much could said today time part finally le talking see next month class homework invited aotcompile simple templeos program explain seen resulting bin file header special thanks amazing combo drawio inkscape nano please enable javascript view comment powered disqus
122,Lobsters,osdev,OS,Plop Boot Manager Six,https://www.plop.at/en/pbm6/blog.html,plop boot manager six,development blog donate minor update usb xhci added ide fix partition detection fix usb xhci many bug fix stack nightly build fix released nightly build fix released usb fix many fix beep pc speaker boot manager name test release starting boot manager download test release starting boot manager instruction linux boot manager http instruction window download special news ntfs support boot cddvd el torito usb hub video ram boot status update usb boot usb keyboard collapse source code usbkbdinc codetableinc status update iso file system boot menu loader cdrom window based menu system usb hub driver status continued usb hub driver status uhci usb hub synthetic dna menu blender video image usb mass storage uhciehci usb floppy drive usb dvd drive status update reactosfreeloaderplop boot manager http usb ohci driver bit test usb ohci driver implementation minor update linux kernel ntldr dreaming hex mbr partition table guid partition table drive access layer atapi cdrom drive driver relocate address programdriver loading syscallsphp syscallsinc myprogramasm relocatephp relocation code nasm helper nasm helper bug killed hmm bug far driver development adventure uefi,development blog new boot manager written scratch planed feature full usb support thumb hard disk floppy optical drive keyboard hub maybe mouse pccard pcmcia flash disk support pci express support vhd support u efi support gpt support simple text mode enhanced text mode gfx mode support various file system limited ntfs limited hf native linux kernel boot native ahci support modular simple shell donation rare welcome donate minor update fixed partition detected usb drive removed usb hub detecting device startup fixed known usb driver issue event ring report anything asmedia technology inc nec corporation host controller nt know moment usb xhci added ide fix partition detection fix usb support added xhci driver almost complete booting usb device work tried operating system booted fine also window pe booted usb fast without problem finally usb simple concept easy implement like xhci driver add kb usb status usb drive keyboard working problem disconnecting reconnecting device usb hub currently working need special handling hub support usb come release fix usb mass storage driver endpoint detection fix ide device detection fix sector read big drive fixed partition logical partition detection fix screenshots usb xhci week started usb reading specification document usb controller extensible host controller interface universal serial bus xhci interesting different usb usb controller took time put information together brain finally understood think wrote test program success able read data usb device easy sound thats past nt matter basic done next stage clean code create lot function finally create usb driver thats lot work good feeling source code screenshot many bug fix spent lot time bug fixing quite happy result made also important change internal program structure bug fix stack wrong parameter size worddword caused wrong stack finding problematic code line difficult many thousand line code problem effect bug came silently think also reason general protection fault error machine wikipedia stack usb updated interrupt handling usb driver fix ide fixed ide drive detection machine drive nt detected non standard io port configuration also supported added support second ide controller chip allows ide drive ahcisata bad bug controller problem others work correctly one machine booting sata resulted freeze sector read returned valid data first look saw displaced one byte looked like transfer buffer alignment problem data structure usb must aligned nothing new finally really wrong aligned buffer stumble problem physical region descriptor table prdt data block dba must word aligned see ahci spec page also another problem sector readwrite routine data nt cleared completely initialization result could invalid data fixed keyboard keyboard driver updated bit bit interrupt service routine rewritten completely affect usb keyboard support work fine bit isrs bit interrupt service routine handling rewritten work make thing easier future isrs working better memory management tiny bug initial routine responsible memory allocation fixed test version available download nightly build fix released official test release bug fix come day nightly build fix released official test release bug fix come day usb fix bug usb controller fixed forgot check bit hccparams register bit set use larger data structure ehci spec apendix b ignoring reason memory area suddenly overwritten resulted error also minor bug fixed download see top page many fix beep release lot bug fix come also new pc speaker support see post information sound card support additional feature planed use enabledisable pc speaker support pressing beep current text morse code download removed outdated pc speaker pc speaker support simple screen reader notification help blind visually impaired people use boot manager morse code used text sound notification boot manager ready use main menu hear short information two char boot entry first char drive type second char bus type example hard disk ide hi cdrom sata c hard disk usb hu static menu entry setup se ab shutdown sh hotkey hear whole text menu entry attaching removing usb drive give notification sound pc speaker feature available next test version demonstration video video download download text boot manager name test release starting boot manager download first say chosen name new boot manager people sent various name say thank none made happy new boot manager called plop boot manager six know really extraordinary may ask searched different name different reason mostly avoid saying plop boot manager still thinking alternative name think fine test release think time come release test version test version perfect nt expect much much left many feature missing known issue various orange char startup debug stuff removed later driver included moment working use device boot manager connect device usb port also virtual machine uefi uefi support moment starting boot manager uefi end error mbr installation moment see starting boot manager various way start boot manager configuration file configure boot manager configure boot manager linux command line parameter starting boot manager window boot menu currently window supported bcdedit must used floppy drive accessible booting booting floppy boot manager supported moment neither builtin usb floppy drive licence currently boot manager free personal use free commercial use work ide hard disk cddvd drive sata hard disk cddvd drive usb controller usb uhciohci usb ehci support usb device support keyboard hub thumb drive hard disk cddvd drive usb readwrite support usb hotplug boot drive partition start drive mbr boot cddvd noemulation mode eject cddvd show drive info change screen resolution also wide screen start floppy cddvd drive network linux boot manager window boot menu note main menu select drive enter boot partition hard disk cd drive booted press right key menu item sign open sub menu sub menu hard disk boot mbr choose partition boot view drive information sub menu cddvd eject disc view drive information minimum requirement cpu mb ram starting boot manager floppy classic way write floppy image floppy disk dd rawwriteexe cdrom classic way burn iso cdromdvd boot iso use iso start boot manager virtual machine like linux kernel plop boot manager started like linux kernel linux boot manager like lilo grub syslinux also network window boot menu possible start boot manager directly window boot menu without workarounds like use bcdedit tested uefi installed window instruction linux boot manager started like linux kernel linux loader start network syslinux way plop boot manager syslinux start keyword linux kernel example label menu label plop boot manager linux label menu label plop boot manager kernel start keyword linux example menuentry plop boot manager menuentry plop boot manager linux see also http example binsh exec tail n file provides easy way add custom menu entry simply type menu entry want add comment careful change exec tail line insmod set root menuentry plop linux linux bootbzimage menuentry plop boot manager bootplopplpbtbin menuentry plop boot manager linux menuentry plopkexec linux bootplopplopkexec menuentry memtest bootmemtestmemtest lilo example label plop boot manager instruction window uefi supported moment end error copy c add window boot menu open command prompt administrator run following command bcdedit create ntldr bcdedit set ntldr device boot bcdedit set ntldr device partitionc bcdedit set ntldr path bcdedit displayorder ntldr addlast remove entry warning careful command bcdedit delete ntldr f download download removed outdated special news various work last week real progress ntfs loader look really good today fixed bug simple program used window development also used sample program week ago heavy needed code adjustment lot code modified required put program data ram location planed earlier never happened meanwhile work also sample program parallel spend week build fresh plop linux release xfce yes every updated program compiles flawless lot thing make flawless new blender amazing many new thing change although year blender experience feel like beginner unfortunately time ntfs support since yesterday working simple ntfs driver goal simplify process adding boot manager window boot menu later ntfs driver could used task driver full write support maybe add limited write access existing file modify byte write config file support compressed encrypted file planed twenty year ago also worked program ntfs read access lot analyzing hexeditor required byte sector figure file stored drive nowadays find lot documentation web make programming much easier hexeditor still used thing never change today looking source code past program never finished important thing worked wondering fast time go goal today reading directory file lot important function still missing directory listing file reading work goal today reached boot cddvd el torito used four day exclusive extend int function el torito functionality specification handle booting cdroms plop boot manager support ide drive new boot manager support booting cddvd ide sata ahci usb uhci ohci ehci without help bios first support emulation medium type standard medium type since maybe year first test looking good disc reading fast tested successful linux distros various microsoft window install dvd next goal improve user interface additional hardware test first public test release coming closer still much left seems new boot manager name wo nt ehboot ehboot still searching name without plop usb hub video first usb hub driver work great news really news happened week ago let talk usb hub driver worried split transaction required usb hub connect usb device usb hub problem implement usb keyboard usb work also fine connected usb hub although hub driver working properly happy code rewrote completely week ago took two day felt better tested usb boot thumb drive various operating system booted fine usb keyboard work long o grab mean use keyboard boot manager also do boot usb remember thats possible plop boot manager surprise reactos booted slow loading ramdisk take age also stated reactos wiki ram boot known issue took much time bios usb also new usb driver go really fast old plop boot manager confused usually new driver faster old driver remembered added simple caching system boot manager new boot manager boot also fast seems reactos loader read one sector another instead many sector would much faster could reason slow ramdisk loading speculation check code created spectacular video comparing usb boot process bios v ehboot note fan reactos project hope enough power create stable m window compatible release meanwhile think call new boot manager ehboot ehboot nt know sound native english speaker checkout video first see setup asus eee pc usb hub usb keyboard thumb drive connected come boot process timer measure usb part time warp boot bios recorded night light spoiler alarm bios take new boot manager take video status update usb boot usb keyboard busy work also progress new boot manager meanwhile wrote int handler required boot native hard disk without help bios work native ide sata usb hard disk drive cdrom floppy left int handler sata tested well usb drive bigger tb supported even boot tb usb drive usb read write supported development purpose focused uhci ohci ehci added easily work fine uhci currently do linux boot fine do copied successful lot file using usb driver tested later others usb write support experimental also almost finished usb keyboard driver int handler required use usb keyboard do another boot manager work fine do also reduces cpu usage do idle using hlt command interested driver look like find source code usb keyboard driver collapse keyboard driver updated note still release date new boot manager collapse source code usb keyboard driver elmar hanlhofer c http wwwplopat bool usbkbdclaimdevice dword device bool usbkbdreportcallback dword transfer void usbkbdsetleds dword device word ledbitmap void usbkbdsetledscallback dword transfer void usbkbdsyncledswithbda dword device bool usbkbdstatusflagshandlepress word bioskeycode void usbkbdhandlereports dword device dword currentreport dword previousreport void usbkbdbdasetmodifierflags word kbdflags word usbkbdtranslatetobioscode word kbdscancode usb keyboard driver elmar hanlhofer c http wwwplopat bool usbkbdclaimdevice dword device bool usbkbdreportcallback dword transfer void usbkbdsetleds dword device word ledbitmap void usbkbdsetledscallback dword transfer void usbkbdsyncledswithbda dword device bool usbkbdstatusflagshandlepress word bioskeycode void usbkbdhandlereports dword device dword currentreport dword previousreport void usbkbdbdasetmodifierflags word kbdflags word usbkbdtranslatetobioscode word kbdscancode define usbkbddebugclaim define usbkbddebug define usbkbddebugtd define usbkbddebugkey page modifier key bitmap bit key left ctrl left shift left alt left gui right ctrl right shift right alt right gui page following table represents keyboard input report byte byte description modifier key reserved keycode keycode keycode keycode keycode keycode byte report constant byte reserved oem use bios ignore field used returning zero unused field recommended following table represents keyboard output report byte bit description num lock cap lock scroll lock compose kana constant led absolute output item mean state led must included output report relative item would permit report affect selected control change change usbkbdleftctrl equ equ equ equ equ equ equ equ equ equ equ include keyboardkeyboardh bool usbkbdclaimdevice dword device usbkbdclaimdevice mvars marg device sdword mlocal buffer sdword mlocal devicedata sdword mcode push eax push esi mov dword devicedata check device keyboard support boot protocol push dword usbdevicewtype push dword device call getvalueword cmp ax typeusbdevice jne wrongdevice push dword usbdevicebdeviceclass push dword device call getvaluebyte cmp al je checkinterface cmp al human interface device jne wrongdevice push dword usbdevicebdevicesubclass push dword device call getvaluebyte cmp al boot interface subclass jne wrongdevice push dword usbdevicebdeviceprotocol push dword device call getvaluebyte cmp al keyboard jne wrongdevice jmp iskeyboard checkinterface push dword usbdevicedconfigurationdescriptor push dword device call getvaluedword eax eax je wrongdevice pointer interface descriptor mov esi eax add esi usbconfigurationdescriptorsize cmp byte f esi usbinterfacedescriptorbinterfaceclass human interface device jne wrongdevice cmp byte f esi usbinterfacedescriptorbinterfacesubclass boot interface subclass jne wrongdevice cmp byte f esi usbinterfacedescriptorbinterfaceprotocol keyboard jne wrongdeviceiskeyboard ifdef usbkbddebugclaim mprintfnl usbkbdclaimdevice keyboard detected endif push word hidusbkeyboard push dword usbdevicebishid push dword device call setvaluebyte create pipe add device register endpoint descriptor push word push word push word push dword device call openinterruptpipe dword device word endpointaddress word word maximumpacketsize word interval jc error allocate buffer report push dword usbkeyboardreportsize call memallocate jc error mov buffer eax allocate memory keyboard related device data push dword usbkeyboarddevicedatasize call memallocate jc error mov devicedata eax mov esi device mov f esi usbdeviceddevicedata eax mov eax buffer mov esi devicedata mov f esi usbkeyboarddevicedatadreport eax push dword push dword usbkbdreportcallback push dword usbkeyboardreportsize push dword buffer push word push dword device call queuedatatransfer dword device word endpointaddress dword buffer dword bufferlen dword callback dword callbackdata jc error push dword device call usbkbdsyncledswithbda dword device mov eax device mov byte f eax usbdevicebclaimedbydriver true clc jmp exit error push dword devicedata call memfree ifdef usbkbddebugclaim mprintfnl kbdclaimdevice error endif stc jmp exitwrongdevice ifdef usbkbddebugclaim mprintfnl kbdclaimdevice info device keyboard boot protocol endif stc exit pop esi pop eax mret bool usbkbdreportcallback dword transfer usbkbdreportcallback mvars marg transfer sdword mlocal device sdword mlocal buffer sdword mcode push eax push esi ifdef usbkbddebug mprintfnl report ooooooooooooooooooooooooooooooo endif push dword transferdlasttd push dword transfer call getvaluedword dword address dword offset ifdef usbkbddebugtd push eax call printtransferdescriptorinfo endif push dword transferddevice push dword transfer call getvaluedword dword address dword offset mov device eax push dword transferdbuffer push dword transfer call getvaluedword dword address dword offset ifdef usbkbddebug push word usbkeyboardreportsize push eax call endif push dword device call usbgetdevicedata dword device mov esi eax check report push dword f esi usbkeyboarddevicedatadprevreport push dword f esi usbkeyboarddevicedatadreport push dword device call usbkbdhandlereports dword currentreport dword previousreport free old report push dword f esi usbkeyboarddevicedatadprevreport call memfree set current report old report push dword f esi usbkeyboarddevicedatadreport pop dword f esi usbkeyboarddevicedatadprevreport allocate buffer report push dword usbkeyboardreportsize call memallocate jc error mov buffer eax save report memory mov f esi usbkeyboarddevicedatadreport eax push dword push dword usbkbdreportcallback push dword usbkeyboardreportsize push dword buffer push word push dword device call queuedatatransfer dword device word endpointaddress dword buffer dword bufferlen dword callback dword callbackdata jnc noerrorerror mprintfnl report error noerror pop esi pop eax mret void usbkbdsetleds dword device word ledbitmap usbkbdsetleds mvars marg device sdword marg ledbitmap sword mlocal buffer sdword mlocal led sword mlocal setup sdword mcode push eax push bx mov dword buffer allocate byte led report push dword call memallocate jc error mov buffer eax mov bl ledbitmap mov byte f eax bl setup packet push word push word keyboard hid push word output report report id push word usbrequestsetreport push word usbbmrequesttypehosttodevice usbbmrequesttypeclass usbbmrequesttypeinterface call createsetuppacket word bmrequesttype word brequest word wvalue word windex word wlength jc error mov setup eax push dword push dword usbkbdsetledscallback push dword push dword buffer push dword setup push dword device call queuecontroltransfer dword device dword setup dword buffer dword bufferlen dword callback dword callbackdata jnc doneerror push dword buffer call memfree mprintfnl error done pop bx pop eax mret void usbkbdsetledscallback dword transfer usbkbdsetledscallback mvars marg transfer sdword mcode push esi free buffer led data mov esi transfer push dword f esi transferdbuffer call memfree pop esi mret void usbkbdsyncledswithbda dword device set led according bios data area keyboard flag usbkbdsyncledswithbda mvars marg device sdword mcode push eax push bx push word bdakeyboardstatusflags call bdagetbyte word offset xor bx bx test al b bdakbdscrolllockon je testnumlock bl b usbkbdledscrolllock testnumlock test al b bdakbdnumlockon je testcapslock bl b usbkbdlednumlock testcapslock test al b bdakbdcapslockon je testsdone bl b usbkbdledcapslock testsdone push bx push dword device call usbkbdsetleds dword device word ledbitmap pop bx pop eax mret bool usbkbdstatusflagshandlepress word bioskeycode return zero flag nz shift usbkbdstatusflagshandlepress mvars marg bioskeycode sword mcode push eax push bx push dx xor dl dl mov bx bioskeycode push word bdakeyboardstatusflags call bdagetbyte word offset cmp bh num lock scan code jne checkcapslock xor al b bdakbdnumlockon jmp updatebdacheckcapslock cmp bh cap lock scan code jne done xor al b bdakbdcapslockon updatebda push ax push word bdakeyboardstatusflags call bdasetbyte word offset word value mov dl return zero flag dl dl pop dx pop bx pop eax mret void usbkbdhandlereports dword device dword currentreport dword previousreport compare previous report current report find key pressed released usbkbdhandlereports mvars marg device sdword marg currentreport sdword marg previousreport sdword mlocal reportcode sword mcode push eax push ecx push edx push esi push edi mov esi currentreport mov edi previousreport handle modifier key update bda flag change related byte flag byte reserved mov al f esi cmp f edi al je nochange ifdef usbkbddebugkey mprintf modifier key call mprintfnl endif push ax call usbkbdbdasetmodifierflags word kbdflags nochange scan keycode press check key new report previous report related byte start offset keycode current report mov ecx mov al f esi ecx al al je nokeydatapress start offset keycode previous report old key mov edx key previous report current report yes skip key pressed cmp f edi edx al je keywaspressed next key previous report inc dl end report reached cmp dl usbkeyboardreportsize jne looppressprevious key previous report key pressed ifdef usbkbddebugkey mprintf key press call mprintf endif mov reportcode al get scan codeascii code ax push word reportcode call usbkbdtranslatetobioscode word kbdscancode push word ax call usbkbdstatusflagshandlepress word bioscode je skipleds push dword device call usbkbdsyncledswithbda dword device skipleds ifdef usbkbddebugkey call mprintf call printchar mprintfnl endif xchg ah al scan code al al remove bit call kbdaddscancodetobufferkeywaspressed nokeydatapress next key current report inc cl end report reached cmp cl usbkeyboardreportsize jne looppresscurrent scan keycode release check key previous report current report related byte start offset keycode previous report old key mov ecx mov al f edi ecx al al je nokeydatarelease start offset keycode current report mov edx loopreleasecurrent key current report previous report yes skip key still pressed cmp f esi edx al je keyisstillpressed next key current report inc dl end report reached cmp dl usbkeyboardreportsize jne loopreleasecurrent key current report key released ifdef usbkbddebugkey mprintf key released call mprintfnl endifkeyisstillpressed nokeydatarelease next key previous report inc cl end report reached cmp cl usbkeyboardreportsize jne loopreleaseprevious pop edi pop esi pop edx pop ecx pop eax mret void usbkbdbdasetmodifierflags word kbdflags usbkbdbdasetmodifierflags mvars marg kbdflags sword mcode push eax push bx get current keyboard status flag bios data area push word bdakeyboardstatusflags call bdagetword clear flag might set ax b bdakbdctrl b bdakbdshiftleft b bdakbdshiftright b bdakbdalt b bdakbdaltleft b bdakbdaltright mov bl kbdflags detect flag test bl b usbkbdleftctrl je al b bdakbdctrl test bl b usbkbdrightctrl je al b bdakbdctrl test bl b usbkbdleftshift je al b bdakbdshiftleft test bl b usbkbdrightshift je al b bdakbdshiftright test bl b usbkbdleftalt je al b bdakbdalt ah b bdakbdaltleft test bl b usbkbdrightalt je al b bdakbdalt ah b bdakbdaltright write back bios data area push ax push word bdakeyboardstatusflags call bdasetword pop bx pop eax mret word usbkbdtranslatetobioscode word kbdscancode return al ascii char ah scan code usbkbdtranslatetobioscode mvars marg kbdscancode sword mcode push esi movzx eax byte kbdscancode cmp al usbkbdtranslationtablelastusbcode ja unsupportedcode shl eax mov esi usbkbdtranslationtable add esi eax get scan code mov ah esi get ascii check shift cap lock call kbdhasshift je noshift inc esi use shift column noshift mov al esi jmp doneunsupportedcode mov ax pop esi mretusbkbdtranslationtable include usbhidcodescodetableinc recalculate last code table byte per row start code equ usbkbdtranslationtable download usbkbdinc codetableinc status update iso file system boot menu iso file system implemented quickly two week ago nice file system driver support also rock ridge extension mean long file name currently working menu boot mode working wait test release plop boot manager fallback mode amazing text mode see screen shot also plop boot manager theme modified border using menu press enter drive entry device booted standard way hard disk mbr cdroms boot volume floppy boot sector press key right menu entry open context menu also boot partition hotkey q plop boot manager view device information pressing key right know look similar graphic mode text mode amazing part plop boot manager binary size currently kb without texture usb native ide sata lot important thing careful add one driver another usb driver need adaption added later note saw new feature blender also new feature unity game engine wow especially blender finish boot manager continue armored eye storygame cyberpunk loader cdrom implementing loader start boot manager cdrom quite easy continuing iso file system simple file system sure need later great see old simple concept like iso el torito also fat f still important nowadays window based menu system usb hub driver driver usb work fine driver usb left window based menu wrote routine window based menu system plop boot manager support text graphic mode various resolution also wide screen various font new system support background image texture alpha support enable window shadow todo theme system customize look easily custom font font upscale high resolution window animation dynamic background thing list function current window library dword wgetx dword object dword wgety dword object byte wgettype dword object dword wgetparent dword object void wsetisactive dword object word status bool wisactive dword object dword wcreatewindow word x word word width word height word color dword texture void wwindowadditem dword window dword item void wdrawwindownoborders dword window void wdrawwindowwithborders dword window void wdrawwindowwithtexture dword window void wclearwindow dword window dword wcreatestring dword parent word x word word color dword string void wdrawstring dword string void wdrawstringcolor dword string word color dword wcreatemenu dword window word x word word width word color word barcolor void wmenuadditem dword menu dword item dword wmenuaddentry dword menu dword string dword function word barskip dword data void wmenumovebar dword menu word action void wmenuupdateitemsxy dword menu void wdrawmenu dword menu dword wmenugetactiveentry dword menu void wmenurunentryfunction dword menu void wmain dword menu void wdraw dword object void wdrawall dword wcreatebackground void wdrawbackground dword dummy void wdestroymenuentry dword entry void wdestroystring dword string void wdestroy dword object hello world window code sample create window object push dword windowtexture push word colorbg colorgreen colorwhite background color foreground color push word push word push word push word call wcreatewindow word x word word width word height word color dword texture jc error mov window eax add string window use text color parent window push dword txthelloworld push word push word push dword window call wcreatestring dword window word x word dword string jc error mov wstring eax draw object call wdrawall main loop wait input handle menu system sample menu push dword call wmain dword menu remove window free memory window childrens push dword window call wdestroy dword object coming closer put together window based menu system good enough moment improved later focus booting write simple loader start menu cdrom usb hub driver status continued device enumeration work driver work usb next improving cleanup code testing add support usb driver usb hub driver status usb hub driver still development yesterday found kind dead end hub worked able enumerate fresh connected device code good enough run interrupt service routine isr today rewrote mostly big step forward device connectdisconnect port recognized isr device enumeration work moment come tomorrow two picture current test machine running hub driver old gericom webboy bought think year uhci usb hub synthetic dna menu long time nothing boot manager related happened last week made required code update uhci driver started write usb hub driver testing want usb hub support usb gave old usb hub away cent many year ago bought received new one last week last week thursday also idea extra ordinary menu synthetic dna menu realized concept blender ideadream heavy boot manager basic processing routine boot manager maybe use menu armored eye project synthetic dna menu video video image usb mass storage uhciehci usb floppy drive mass storage function call synchronization uhci ohci ehci almost complete hard disk thumb drive cdrom drive working fine function call three controller type usb floppy drive work ohci uhci fault ignore interface protocol value device drive accessed another way bulkonly drive send atapi command block control endpoint sendreceive data bulk endpoint floppy drive access work fine ohci code cleanup updating uhci code needed come code update still usb hub driver missing usb keyboard driver need lot update usb dvd drive first work today check usb dvd drive work found problem quickly allocated byte instead byte sector read destination buffer byte block size cd rom wrong size overlapped memory created invalid data invalid data reason drive reset drive work perfect usb floppy drive still make problem check whats going usb bus work ehci uhci status update synchronized ohci ehci code access shared usb function work way uhci left synchronize base program driver lived environment function call changed development word sized parameter became dword size additional parameter required assembler flexible high level language even macro take care submit correct parameter correct size function call mean overall clean work end also fun software developer funny strange matter also cleaned simplified usb bulk driver needed access mass storage device added nearly required function like inquiry read capacity read sector write sector work fine ohci driver hard disksthumb drive also tried usb floppy drive usb dvd drive unfortunately one drive hung reset word work life bit disappointing fix ehci update usb pipe logic test bulk driver come later reactosfreeloaderplop boot manager partially new boot manager also important created dirty fix start plop boot manager freeldr boot menu tested see http note reactos reactos error message userinit failed start installer using wrong reactos cd installation nt use reactos live cd choose one reactos boot error message hive header failed blue screen maybe virtual hard disk small use least size gb usb ohci driver bit test today tested usb ohci code bit environment code written tested bit environment plan wasis run code bit cpu mode experimental stage driver loaded dynamically prepare hard code thing gave chill great see code worked fine way bit environment really happy note bit code run also bit cpu usb ohci driver implementation started add usb ohci routine boot manager test program driver struggling many hour mystery bug finally fixed bug bug old friend elmar set device pci bus master rolling eye problem hurt okay continue driver stuff still test stable workflow required implement dynamic driver loading ohci routine tested various cpu mode time pizza minor update finished thing int hook drive swapping work fine extended fat read support linux kernel ntldr update since one month happened nothing special booting nt expect much reading work fine change directory read file writing support left reading support able interesting thing native linux kernel booting work load kernel initrd file boot linux also set linux kernel command line native window xp booting direct loading ntldr work recent window booting work important feature nice mbr loading booting work come next still lot thing far away beta testing many thing working splitted part put together come later next step boot sector loading booting difficult writing various loader start boot manager test program different location mbr boot sector floppy cdrom write support support int hook testing example drive swapping boot second hard disk trying add usb driver carefully looking forward ext ntfs driver heavy todo list next step dreaming hex maybe sometimes hexadecimal part life file allocation table artwork started fat file system support currently required native linux kernel loading test boot manager need fat support began directory listing work course long file name support optional format cluster reading work next step working read file routine modify code mbr partition table guid partition table master boot record partition table support finished classic cascaded extended partition supported numbering partition way linux primary partition get number according position partition table first logical partition start also wrote support guid partition table gpt various partition accessed shared readsectorwritesector function call work well drive access layer code cleanup various fix also added layer access various drive function call nt matter dvd drive hard disk floppy done yet drive registered patasata enumeration also added simple support classic mbr access primary partition partition registered also accessed shared function call full mbr support gpt support implemented mondaythursday read boot sector partition drive note drive number partition number start push dword call memallocate jc error mov dword buffer eax push eax push word push dword push word push word call word drivenumber word partitionnumber dword lba word numsectors dword buffer jc error drive registration using wrapper function standardized call dynamic registering usb drive done yet mprintfnl sata device found push word atacmdidentify push esi call ahciidentify dword portaddress word identifycommand jc checkforatapi mov identify eax register drive push esi push word push word push dword push dword push word push dword identify push word drivesata call registerdrive word drivetype dword identify word bytespersector dword dword word patachannel word patadrive dword ahciport current drive register routine dword registerdrive word drivetype dword identify word bytespersector dword dword word patachannel word patadrive dword ahciport return drive structure address carry error registerdrive mvars marg drivetype sword marg identify sdword marg bytespersector sword marg sdword marg sdword marg patachannel sword marg patadrive sword marg ahciport sdword mlocal drive sdword mcode push ebx push edi mov dword drive allocate memory drive structure push dword sysdrivesize call memallocate jc error mov edi eax edi became drive address mov drive eax fill structure mov word f edi sysdrivewtype systypedrive mov bx drivetype mov f edi sysdrivewsubtype bx mov ebx identify mov f edi sysdrivedidentify ebx mov bx bytespersector mov f edi sysdrivewbytespersector bx mov ebx mov f edi ebx mov ebx mov f edi ebx mov bx patachannel mov f edi sysdrivewchannel bx mov bx patadrive mov f edi sysdrivewdrive bx mov ebx ahciport mov f edi sysdrivedahciport ebx call getfreedrivenumber jc error mov f edi sysdrivebdrivenumber al add drive drive list mov ebx sysram add ebx syskernelddrives push edi push ebx call listaddentry dword list dword entry jc error return drive address mov eax edi jmp doneerror release allocated memory push dword drive call memfree set carry error stc done pop edi pop ebx mret atapi cdrom drive driver atapi driver ide pata ahci sata cdrom similar drive almost done strange behavior ahci atapi driver first atapi command end error tested atapi command working fine moment idea first command fails driver tested two machine bios int implementation done relocate address programdriver loading long time nothing important happened spent two day simple address relocation system needed support dynamic loading program driver wrote two php script analyzing list file generated nasm l parameter first php script syscallsphp generates file jump kernel system function syscallsinc generated file included programdriver myprogramasm make easy call kernel function nasm generates address according org command address must updated programdriver loaded memory second php script relocatephp creates file two table relocatetableinc table holding position address used programdriver file included address stored header program updated simple routine kernel relocation code kernel start program overview source code may change future first version maybe look difficult tried keep simple explaining strength sample code load program allocate memory program push dword filesize call memallocate jc error mov address eax load program push dword address push dword filesize push dword filename call sysloadfile jc error update address push dword address call programaddressrelocate start program call dword address simple program header struc programheader jump resb alignbytes resb reloctablesyscallssize resd reloctablelocalsize resd reloctablesyscalls endstruc address relocation code void programaddressrelocate dword programaddress programaddressrelocate mvars marg programaddress sdword mcode push ebx push ecx push esi push edi address relocation table mov esi programaddress add esi programheaderreloctablesyscalls get number syscall address mov ebx programaddress mov ecx ebx programheaderreloctablesyscallssize shr ecx byte address divide je skipsyscalladdr skip address relocatesyscalladdrloop get address program mov edi esi syscall address lower program address substract program memory address restore kernel address sub dword ebx edi ebx next entry add esi dec ecx jne relocatesyscalladdrloopskipsyscalladdr table program address come directly syscall table need set esi get number program address mov ecx ebx programheaderreloctablelocalsize shr ecx byte address divide je skipprogramaddr skip address relocateprogramaddrloop get address program mov edi esi address set relative new memory address program add program memory address add dword ebx edi ebx next entry add esi dec ecx jne relocateprogramaddrloopskipprogramaddr pop edi pop esi pop ecx pop ebx mret sample syscallsinc memallocate memallocate jmp memallocatealigned memallocatealigned jmp snip jmp jmp jmp jmp sample program myprogramasm command nasm f bin myprogramasm myprogrambin l myprogramlst include define stringend include macroprintfinc org simple program header jmp start initial jump db align byte include relocatetableinc include syscallsinc dw sample variable program start start use kernel function push word call start function program call testroutine end program rettestroutine use kernel system print mprintfnl test use another system call mov ax call dw sample variable simple php script export kernel function call syscallsphp command php syscallsphp kernellst syscallsinc php generate jump instruction kernel system call source file list file generated nasm l written elmar hanlhofer free use using php syscallsphp kernellst syscallsinc argv die input file f file argv foreach f v v strreplace n rtrim v linenr substr v addr trim substr v opcode substr v asm trim substr v strpos asm asm strtoupper asm use label upper char beginning label asm strpos opcode false unset label addr label strpos label false skip various echo addr labeln echo labeln echo jmp addr h nn unset label echo syscallsend nn sample input memallocate mcode simple php script create relocation table relocatephp command php relocatephp myprogramlst relocatetableinc php generate relocation address table source file list file generated nasm l written elmar hanlhofer free use using php relocatephp myprogramlst relocatetableinc define syscallsend syscallsend marker written syscallsphpfunction tableentry codeaddr opcode charbegin charend addresssize offsetaddr strpos opcode charbegin address opcode end strpos opcode charend size end offsetaddr size addresssize requested size echo dd codeaddr h offsetaddr n opcode command position address div byte char argv die input file f file argv echo relocatetablesizesyscalls dd relocatetableendsyscalls relocatetablestartsyscallsn echo relocatetablesizelocal dd relocatetableendlocal relocatetablestartlocalnn echo relocatetablestartsyscalls n foreach f v v strreplace n rtrim v linenr substr v addr trim substr v opcode substr v asm substr v asm syscallsend end syscalls reached break build table syscall address tableentry addr opcode tableentry addr opcode echo relocatetableendsyscalls nn syscalls true echo relocatetablestartlocal n foreach f v v strreplace n rtrim v linenr substr v addr trim substr v opcode substr v asm substr v asm syscallsend end syscalls reached syscalls false syscalls build table program address tableentry addr opcode tableentry addr opcode echo relocatetableendlocal n nasm helper beginning new boot manager development wrote macro make use function call easier assembler macro written nasm released name nasm helper nasm helper bottom page find complex routine called queuecontroltransfer ohci usb driver know useless without function nice example complex function ohci enumeration bug fixed rewriting uhci code done bug killed found bug without converting old code figured host suddenly stopped sending frame mysterious finally found reason behavior unintentionally set usb port suspend mode used write bit without modifying bit port register register required set bit mov without bit set strange thing work hardware seem tolerant case bug wasted lot time work new issue enumeration process machine difficult fix asking code better new code better hmm bug hmm say hoped finished lot thing nt ill november various thing rest november december struggeling crazy new boot manager driver bug since week ohci usb driver thought work fine used old gericom webboy laptop simple usb resquest end devicenotresponding error frustrating thing driver work flawless figure whats wrong data structure register value frustrating able fix one week old code written lzasm using nasm since day try find bug without converting old code nasm fear reached point accept convert old code find difference code better hmmm yes far time development status code written pure assembler using nasm goal operate various cpu mode cpu better code currently tested unreal mode bit modification code run native bit code also run fine bit cpu device access except video mode switching happens native without bios required work various cpu mode way regardless bios background need various cpu mode want support old modern computer do able use boot manager driver without additional software nt dream do uefi work basic system routine memory management done pci device enumeration done cpu mode switching done basic text mode output routine done graphic mode vbe mode detection initialization pixel drawing text drawing done image file reading display tiff image done tiff format uncompressed rgb intel driver development stage keyboard key read done pata ide hdd read write pata ide optical drive done sata ahci hdd read write sata ahci optical drive done classic floppy drive done usb uhci done unhappy code rewrite usb ohci initialization control transfer interrupt transfer bulk transfer usb device enumeration done thing left usb ehci initialization control transfer bulk transfer usb device enumeration done let say done difficult thing like split transaction thing left usb started usb keyboard detection key read work todo key mapping usb mass storage basic function like device identify work implementation nt big deal usb hub starting next day mean development stage stage driver working environment early put together driver development adventure last week started write usb ehci driver scratch everything looked fine worked expected tried virtualbox know plop boot manager hang use usb ehci driver boot usb virtualbox tried new code hang said okay try figure whats wrong motivated want fix problem struggled problem one week frustrating queue head nt processed malformed queue head resulted transaction error nothing happened correct queue head correct transfer descriptor time thought port reset problem usb device problematic state know virtualbox port reset end immediately starting reset according ehci specification reset ended software host thought host transmit device usb device still configured address strange port reset behavior created queue head every possible device number hmmmm received error transaction nothing response really frustrating accepting code work virtualbox became option finally accept meanwhile look like endless loop thing disappointing result luck made mistake come important information plan write ehci driver first transfer descriptor linked transfer descriptor without data except next qtd pointer setup transfer descriptor suddenly setup transfer descriptor processed expected strange first transfer descriptor empty following transfer descriptor processed nt know work ehci controller accept happy code work also virtualbox fix ehci driver plop boot manager usb boot work also virtualbox thats enough today uefi spent time uefi created simple menu boot plop linux window uefi funny test dynamic o detection config file hard coded see software development uefi work video programming new boot manager slow process nothing show moment new development start april desk developing driver night rewriting usb driver found bug old code chance good release version old boot manager fixed usb driver know news time update page coding stop beginning maybe find time august continue coding coding paused work created concept art gui final product look different could nice design line code written gui booting priority release date far far away also hidden mode simple text mode interface like current plop boot manager work progress elmar hanlhofer
123,Lobsters,osdev,OS,PCLSRing: Keeping Process State Modular,http://fare.tunes.org/tmp/emergent/pclsr.htm,pclsring keeping process state modular,ing keeping process state modular alan bawden introduction ing modularity principle benefit ing basic process user variable appendix system call scheduler software interrupt implementation ing rule system call delivering software interrupt one process want another swapping test mode statistic conclusion acknowledgment appendix user variable dictionary,pclsring keeping process state modularalan bawden abstract paper describes pclsring feature incompatible time sharing operating system pclsring permit process access state another process modular fashion benefit pclsring explained implementation described detail result simple performance metering presented introduction incompatible time sharing operating system originally written mit artificial intelligence laboratory late mit ran three one providing service researcher ai laboratory mit laboratory computer science many wellknown program emacs editor maclisp dialect lisp macsyma symbolic algebra system midas assembler originally developed twenty year later still small devoted user community run handful system around world designer primarily interested research operating system held pragmatic view tool enabling ai lab small user community get peripheral robot arm tv camera etc say designer ignorant state art operating system unlikely publish paper experience result many pioneering idea remain largely unknown outside user community among feature boast convenient symbolic system call mechanism allows call invoked name pas value arbitrary location flexible system delivering software interrupt process deviceindependent display terminal support process organization allows single command processor control multiple subprocesses powerful mechanism implementing device software enabled probably first network file system many feature since adopted rediscovered operating system one major design principle called pclsring never found way operating system belief pclsring important idea deserve neglected merely never adequately explained print therefore paper endeavored explain pclsring benefit user implementors implemented reader expect completely understand description implementation pclsring first reading many point subtle probably fully appreciated someone try implement pclsring reader make attempt would like hear pclsring modularity principle timesharing operating system occasion process must access state another process process may need start stop debug load dump create destroy another process also one occasion process must access state interrupt handler need access state running process prior arrival interrupt process may continue interrupt dealt pclsring mechanism operating system us enforce kind modularity process must access state another process modularity principle simple process ever catch another process including act executing system call system call thus behave directly implemented hardware process catch another process middle deleting file catch another process middle multiply instruction another way state pclsring modularity principle say process look program counter another process must always see user mode pc never exec mode pc one process want access state another process target process happens executing exec mode something must done order put target process user mode either target process must backed system call leaving user mode pc pointing call must allowed finish leaving user mode pc pointing call act getting process user mode quickly possible called pclsring pronounced peeseeloozering process say one process pclsred peeseeloozerd another process speak need pclsr peeseeloozer process giving interrupt certain instruction guaranteed run completion either might interrupted run risk taking page fault eg blt certain system call always run completion executing process must pclsred prime example siot system call used transfer string byte io device suppose process using siot send long string character slow device terminal interrupt arrives impossible take back character already reached device may indefinite delay rest character output pclsring modularity principle requires process maneuvered system call user mode quickly possible else interrupt promptly delivered state process captured user mode pc given process really halfway outputting string character solution employ trick hardware us necessary interrupt instruction blt partly performed task argument originally passed system call updated place reflect work already accomplished pc left pointing system call system call restarted proceed left case siot system call location memory byte count byte pointer argument originally fetched overwritten new count pointer address byte remain output system call might interrupted task partially accomplished designed update argument fashion requirement might expected introduce system call baroque calling convention fact vast majority system call need ever updating argument generally able natural way one rarely used system call require additional argument initially supplied zero used state word keep track progress call obscure case documentation explains nonzero value argument mean although program known make use information benefit pclsring pclsring modularity principle easy state easy user understand tricky implement majority paper devoted explaining technique used implementation pclsring going however let u consider pclsring worth trouble entail present example benefit pclsring user implementors user chiefly conscious effect pclsring write interrupt handler main program level pc passed interrupt handler always user mode pc examining pc content memory interrupt handler determine precisely state interrupted task interrupt handler need know example whether main program level successfully deleted file user typed interrupt character simply look see pc point delete system call question interrupt handler may state computation interrupt occurred answered term simple machine model system call behave hardware instruction effect eccentric interrupt handler dismiss interrupt returning pc one interrupted alter main program level accumulator straightforward predict example easy construct simple interrupt driven scheduler multiplex one process multiple task implementors pclsring powerful aid managing interaction process illustrated considering example dtty system call support notion ownership user terminal various process run user behalf editor compiler debugger etc pas ownership terminal back forth critical moment occurs one process us dtty take ownership terminal back process previously given acquiring process wrests control terminal away current owner know wo nt catch owner middle actually using terminal potentially leaving perterminal data structure inconsistent state answer acquiring process start pclsring terminal current owner insure current owner middle system call therefore terminalspecific data structure known state safe transfer ownership terminal example show clearly pclsring tool promoting modularity pclsring used hide implementation detail system call modifies state data structure documented state transition ever exposed process basic order understand technique used implement pclsring necessary understanding basic structure section introduces player process user variable basic job timesharing operating system share single processor among set independent process process name io channel program counter sixteen accumulator page table interrupt system assorted property property held collection perprocess variable keep address space particular moment process running either user mode exec mode determined bit left half program counter user mode process page table configure user mode address space suit exec mode process share page table thus execute exec mode address space hardware interrupt service routine also execute single exec mode address space important property exec mode address space page never swapped secondary storage system code data structure including perprocess variable stored exec address space always available without risk causing page fault convenient property possible implementors taken great pain minimize size data structure process variously called process job user procedure avoid confusion paper consistently us word process one exception set perprocess variable maintains referred user variable rather consistent process variable otherwise would violate tradition knowing process sometimes called user also help reader understand many u name various routine variable typical user variable uname jname contain two sixbit word unique process together serve process name additional user variable introduced needed easy reference dictionary user variable mentioned anywhere paper brief description function given appendix appendix also reveals simplification made main text system call operating system system call performed executing instruction cause trap exec mode exec mode trap handler save user mode pc suuoh user variable save content user mode accumulator uuoacs user variable array sixteen word examines instruction caused trap dispatch appropriate system call system call responsible obtaining argument user mode address space performing particular task writing return value back user mode memory many system call make use flexible convenient facility provides processing argument returning value system call return common point order return user mode common return code check number possible error condition returning user mode still holding lock hardware interrupt deferred performs general cleanup restores accumulator uuoacs return user mode pc saved suuoh scheduler scheduler run lowest priority seven hardware interrupt level interrupt level commonly called clock level hardware clock interrupt signaled periodically actually several minor interrupt also signaled clock level variety periodic overhead task performed well paper clock level activity concern u scheduler scheduler job switch processor back forth process currently runnable process actually running processor scheduler keep pc upc user variable keep accumulator user variable array sixteen word scheduler examines process may discover process either stopped blocked running process stopped external agent decided process must run scheduler nothing process blocked waiting something scheduler must check awaited condition see process unblocked allowed run process running capable making immediate progress scheduler allow use processor scheduler us user variable ustp flsins keep track runnability process process ustp nonzero process stopped left half contains various bit corresponding specific reason process run example one bit set process receives fatal interrupt right half contains count number process currently keeping process stopped process finish decrement variable scheduler know everybody finished safe run process flsins user variable nonzero process blocked waiting condition typing character user terminal passage given amount time arrival page satisfy page fault case flsins contains instruction scheduler execute order determine awaited condition come pas instruction skip process longer blocked given moment process one five possible state stopped case ustp nonzero upc contains user mode pc flsins zero nt immediately relevant insure process run soon ustp cleared blocked exec mode ustp zero flsins contains instruction skip process longer blocked upc contains exec mode pc blocked user mode ustp zero flsins contains instruction skip process longer blocked upc contains user mode pc possible reason process blocked user mode waiting page satisfy page fault case blocking occur process executed system call entered exec mode running exec mode ustp zero flsins zero upc contains exec mode pc running user mode ustp zero flsins zero upc contains user mode pc note stopped process must user mode get chance run process way influencing behavior scheduler example process temporarily mask clocklevel interrupt insures exclusive use processor performs critical action scheduler must interrupt process also intentionally yield processor allow scheduler run process process first becomes blocked software interrupt sophisticated software interrupt system us inform process variety condition might require attention hardware device driver another process wish interrupt given process merely set bit one two user variable pirqc ifpir scheduler actually deliver interrupt whenever scheduler considering running process look pirqc ifpir variable well ustp flsins discovers interrupt pending try manipulate process interrupt handler somewhat tricky procedure required manipulation cause page fault fortunately first step procedure concern u paper scheduler first must pclsr process process interrupt handler see user mode pc implementation pclsring introduced player proceed examine implementation pclsring detail becomes necessary pclsr target process find one five possible state described introduction scheduler considering state turn need done order get target process user mode quickly possible process stopped already user mode nothing need done process blocked exec mode must force back start whatever system call brought exec mode first clean process lswpr user variable described contains linked list cleanup action perform copy saved user mode accumulator uuoacs pick user mode return pc suuoh decrement process start system call beginning put upc finally clear process flsins process blocked user mode must waiting page satisfy page fault fortunately nothing harmed process simply forgets fact soon start running either immediately take fault page arrived interim case simply clear process flsins process running exec mode know remain state long able quickly finish task return user mode become blocked rather bother immediately set flag suexit user variable tell process pclsr either next time try block try return user mode process running user mode nothing need done decision made case important corollary first mean pclsr requested requester assured immediate success second mean process run exec mode without risk pclsred provided nt anything might cause become blocked section follow explore consequence algorithm given algorithm available routine named pclsr rule system call pclsring work unless system call written attention fact might pclsred nt great burden rule game explained obvious rule system call free anything like disables clock level interrupt start clean reenabling may seem rather heavyhanded technique especially given subtlety technique discussed critical operation instruction duration hard imagine anything quicker effective basic pclsring routine built ability temporarily turn clock level interrupt ever converted run multiple processor would necessary rework code pclsring would useful multiprocessor substrate upon built would change system call may also rely fact pclsred unless attempt operation might cause become blocked process mess around state much like process able see long careful block another process want examine one must first pclsr long process remains running exec mode pclsring algorithm given guarantee continue run process wait guarantee useful system call easily tell run risk going blocked fortunately two thing process become blocked exec mode first explicitly ask go blocked directly supplying scheduler instruction flsins user variable second take page fault referencing page user address space action requires use special instruction third possibility taking page fault referencing page exec address space perhaps something innocuous fetching next instruction occur pointed page exec address space never swapped one additional guarantee made concerning reference page process user address space system call certain page successfully referenced remain swapped duration execution system call accomplished later system call thus certain reference given user address cause process block therefore risk pclsring previously referenced address system call take advantage guarantee touching selected user address beginning execution thus insuring modify content address later without fear pclsred awkward moment example siot system call start touching location contain byte pointer byte count argument proceed secure knowledge location swapped well writable system call completely avoid possibility going blocked given pclsring algorithm every point execution system call might block also point execution might terminated order allow system call prepare possibility process lswpr user variable contains list action must performed order clean pclsred lswpr usually maintained stack various system subroutine pushing popping entry needed common cleanup handler call release lock process hold possible system call supply arbitrary routine restriction routine given delicacy situation invoked system call also prepare possible pclsring updating location user memory contained original argument reflect whatever work accomplished thus far insures call pclsred restarted take left already seen user made aware aspect pclsring need update location user memory order properly prepare possible pclsring reason swap user page execution system call attempt update argument possibly blocking might cause process block due page fault process pclsred point would record system call already accomplished since argument would remain unmodified pclsring consequence go beyond simply supplying cleanup handler protect system call might block consider case system call must read data disk make request disk system want block waiting disk interrupt level complete transfer executing process pclsred point disk interrupt level finish wo nt process waiting answer process may come back later looking information interrupt level want discard data read hand process may never come back something must make certain eventually reclaim space occupied data interface system call interrupt level must designed possibility mind general certain operation operating system could performed directly system call must performed someone else since code system call beyond point call might block may never get executed one final rule system call must observe order pclsring work system call may run indefinitely without presenting opportunity pclsred system call possible supply argument require call loop system call periodically check suexit user variable see someone requested pclsr submit request delivering software interrupt scheduler job deliver software interrupt process pirqc ifpir user variable nonzero first step delivering interrupt pclsr process interrupt handler see user mode pc scheduler discovers pending software interrupt examining process determine actually run process stopped ie ustp zero pending interrupt scheduler immediately try pclsr process pclsr attempt fails process must running exec mode case scheduler treat process would runnable process since process suexit indicates process need pclsred next time process try go blocked return user mode pclsr return scheduler scheduler able deliver interrupt pclsr attempt succeeds process forced back user mode scheduler proceeds manipulate process put interrupt handler subsequent step procedure quite interesting beyond scope paper one process want pclsr another interesting case pclsring occurs one process want pclsr another process example dtty system call given case pclsring process want pclsr target immediately stop incrementing target ustp common operation done calling routine named rpclsr often speak one process rpclsring arpeeseeloozering another difficulty rpclsring stem possibility target process might running exec mode thus unable pclsred immediately case perpetrating process go blocked waiting target notice pclsr attempt discover situation delicate blocking ordinarily later target pclsrs need able find perpetrator thus introduce rpcl user variable keep track situation occurs process fails immediately rpclsr target store address target process rpcl address target rpcl left half rpcl used flag record process target process perpetrator algorithm rpclsring follows first try pclsr target process succeeds immediately increment target ustp return clock level interrupt turned procedure prevent target getting chance run pclsred stopped pclsr attempt fails target suexit set indicate pclsr attempt progress perpetrator set appropriate pointer target rpcl user variable two rare case must considered first perpetrator might discover rpcl indicates target rpclsr third process case perpetrator immediately submits third party since target rpcl unmodified suexit set uselessly pclsr point future continue run useless pclsrs problem case rarely happens extra pclsrs harmless perpetrator might discover target rpcl indicates third process already trying rpclsr target case perpetrator simply block waiting target rpcl cleared start rpclsr attempt beginning possible scheduler see target rpcl clear unblocks perpetrator perpetrator get chance run target start get back exec mode become target yet another thirdparty rpclsr attempt process might therefore starve forever waiting chance rpclsr someone even though process making progress problem practice extraordinarily unlikely may likely snow machine room process starve way noticeable amount time neither case occurs perpetrator set two rpcl user variable block since act going blocked run risk pclsred something must done clear rpcl pointer perpetrator pclsred wait could done using appropriate cleanup handler pushed perpetrator lswpr instead pclsr routine always check rpcl process applied possibility process rpclsring someone clean appropriately final step rpclsring occurs target try block return user mode notice suexit indicates pclsr addition rpcl indicates target rpclsr request target must pclsr clear rpcls perpetrator increment ustp order stop clear flsins perpetrator order unblock must clock level interrupt turned prevent variety timing error important unblock pclsring process instantly otherwise might pclsred target ustp would never get decremented risk eliminated starting perpetrator running exec mode ca nt pclsred taking appropriate precaution fact next thing many rpclsring process add cleanup handler lswpr decrement target ustp course danger going blocked perpetrator simply perform task decrement target ustp done without bothering cleanup handler swapping recall guarantee user mode page swapped execution system call accomplished simply granting blanket immunity process exec mode process spend time blocked exec mode waiting next character terminal whatever therefore necessary resort pclsring blocked process order find page swap secondary storage unfortunately simply pclsring process blocked exec mode back system call start running user mode cause immediately reexecute call usually return blocked condition thus immediately pclsr process every time wanted swap page would least cause lot unnecessary activity might even cause process swap page back swapped instead want swap page belonging process blocked exec mode simply set bit named swpcl process uswst user variable swpcl checked scheduler whenever unblock process set scheduler pclsr process instead process allowed finish waiting whatever waiting pclsred effective preventing process ever seeing page swapped immediately pclsring would actually swapping code pclsr process immediately entry lswpr presumably idea release lock process holding soon possible process seize make progress perhaps swapping code try avoid swapping page belong process lswpr entry author prepared judge aspect page swapping algorithm since process running exec mode pclsred since might depend keeping page swapped page must kept immune swapped fortunately process spend little time actually running exec mode number page locked restriction generally small pclsr test mode debug system call convenient way test behavior pclsred various point execution pclsr test mode allows system call writer choose set test point inserting call assembler macro named pclt system call call pclt positioned immediately place call would block pclsr test mode let system call writer run system call reach one test point three mode control happens time process tested reach one test point hold mode process pclsrs stop system call writer start process running run exact test point pclsr stop thus system call writer test point advance mode time system call writer start process run test point last time set flag cause process pclsr stop next test point whenever happens occur thus system call writer test test point succession particular path system call advance nt stop mode like advance mode except process stopped time pclsred keep running thus immediately start system call let system call writer exercise system call presumably waiting bug happen exact way pclsr test mode decides call reached test point simply test pc would work well particular test point might subroutine called several place fact pclsr test mode crawl stack sniffing around return address attempt discover call chain got current routine return address hashed together resulting hash used compare test point statistic many design decision made implementation pclsring justified measuring behavior running primary interest frequency various event considered occur statistic collected aiaimitedu december january aiaimitedu support moderately small user community typically user logged process plus handful system demon network server total process rarely process system never run configured limit process often various case pclsring algorithm occur day period pclsr called every second time target user mode already stopped blocked running time target blocked exec mode remaining time target running exec mode could immediately pclsred last case therefore happened every second problem case pclsring target immediately forced user mode observed relatively rare occurrence process call rpclsr rarely block even rarely find third party already blocked attempting rpclsr target also given moment process holding page locked memory running exec mode might also wonder reason pclsr called hour period pclsr called every second scheduler called pclsr order deliver software interrupt every second accounting call pclsr process called rpclsr every second accounting call pclsr page swapping code caused process pclsred every second accounting remaining call pclsr given pclsr fails time estimate scheduler failed immediately deliver interrupt ran target process instead every second also estimate process called rpclsr block every second course event would happened frequently supporting process still nice feel rare event also nice page swapping code little pclsring course le physical memory running memory intensive application would exhibit higher percentage pclsrs swapping finally might wonder quickly process pclsred running exec mode normally reach user mode hour period pclsr failed immediately force process user mode time occasion target process already subject pclsr attempt occasion mostly represent duplicate attempt scheduler deliver interrupt process continuously running exec mode since last time scheduler ran therefore remaining occasion target subject prior pclsr attempt occasion timer started measure amount time took process eventually reach user mode resulting distribution time interesting feature average time taken second misleading minority case took long time inflate average perhaps reasonable measure median time process reached user mode second time process took le second still le average time process took le second scheduler allows process second runtime next schedule time target pclsr attempt reached user mode next schedule time measured elapsed time perprocess run time make little difference result typically target process runnable process system delay introduced process ran occasionally however another runnable process result distribution show small spike second caused pclsred process wait one turn another process ran got chance quickly reach user mode even smaller spike appears second conclusion pclsring modularity principle simple process never catch another process pant pclsring give process clean way access state another process paper explained benefit principle user system programmer explained operating system go supporting described implementation detail also provided performance metering order demonstrate cost applying principle acceptable would like believe reader paper inspired try bringing benefit pclsring younger operating system acknowledgment grateful early developer originally designed implemented debugged idea presented donald eastlake jerry freiberg richard greenblatt jack holloway tom knight george mitchel stewart nelson jeff rubin frederick wright dave moon tom knight provided many useful comment early draft paper helped debug understanding pclsring joe dempster ian horswill richard greenblatt leigh klotz chris maeda guy steele also provided valuable feedback joe dempster convinced something recorded posterity pandora berman sometimes helped find right word erasmus helped appendix user variable dictionary process actually running scheduler store content accumulator block sixteen word might user mode exec mode accumulator depending process scheduler took processor away see also upc flsins variable nonzero process blocked content instruction scheduler execute determine awaited condition come pas instruction skip process longer need wait see also ustp lswpr variable address linked list action must taken order clean properly process pclsred common cleanup action releasing lock held process decrementing counter incremented process important instance cleanup action ensuring ustp variable another process properly decremented pirqc ifpir two variable contain bit indicate pending software interrupt rpcl variable used keep track process trying rpclsr process process trying rpclsr process b process rpcl contain address process b right half zero left half process b rpcl contain address process right half minus one left half suexit process currently executing system call exec mode variable contains instruction used return user mode usually instruction restores pc process suuoh attempt progress pclsr process variable instead contain jump special routine variable could actually replaced flag indicates pending pclsr attempt suuoh process currently executing system call exec mode variable contains user mode pc returned call completes see also uuoacs uname jname two variable contain two sixbit name process variable actually nothing pclsring serve example typical variable upc process actually running scheduler store pc might user mode exec mode pc depending process scheduler took processor away see also ustp variable nonzero process stopped left half contains various bit corresponding specific reason process run right half contains count number process keeping process running see also flsins uswst variable contains various bit controlling page swapping one bit swpcl concern u paper swpcl set process page swapped blocked exec mode process becomes runnable scheduler see bit pclsr process instead letting continue exec mode uuoacs process executing system call exec mode user mode accumulator stored block sixteen word kl k user mode accumulator might instead different hardware ac block ignore possibility paper see also suuoh
124,Lobsters,osdev,OS,The exFAT filesystem is coming to Linux—Paragon software’s not happy about it,https://arstechnica.com/information-technology/2020/03/the-exfat-filesystem-is-coming-to-linux-paragon-softwares-not-happy-about-it/,exfat filesystem coming software happy,enlarge announced repository fud breaking fud case one android article vfat fuse case two macos homebrew license case three smb smb including partnership samba synology qnap list open source stay,enlarge proprietary filesystem vendor paragon software seems feel threatened pending inclusion microsoftsanctioned exfat linux kernel software operating system giant microsoft announced support inclusion exfat filesystem directly linux kernel back august nt get ton press coverage filesystem vendor paragon software clearly noticed month merge microsoftapproved largely samsungauthored version exfat vfs fornext repository turn merge linux paragon nt seem happy yesterday paragon issued press release european gatewaymodem vendor sagemcom adopting version exfat upcoming series linuxbased router unfortunately chose preface announcement stream fud fear uncertainty doubt would nt looked place steve ballmer letterhead breaking fud paragon described argument open source appeared directly article available publication form explaining open source model nt work case three paragon offered case curious example best case one android let first look case filesystems similar exfat supported unix derivative worked open source perspective sound case android creates native linux container run apps fat formatted flash card show inability unwillingness based realistic estimation needed effort software giant google make implementation much simpler fat android kernel footnote lead reader lengthy xdadevelopers article explains long history sd card filesystems android operating system extremely brief summation originally android used largely compatible vfat implementation window filesystem caused several security problem due lack multiuser security metadata problem led google replace vfat largely samsungdeveloped fuse filesystem userspace implementation exfat solved security issue twice acls supported fuse filesystem could even mounted individual user unfortunately led performance convenient fuse might userspace filesystems nt perform well inkernel filesystems still u far great final step particular story google replacing exfatfuse sdcardfs another samsungdeveloped project nt really filesystem instead inkernel wrapper pass api call lowerlevel filesystem sdcardfs replaces fuse filesystem thereby allows emulated filesystems run kernel space wondering proprietary software come save day answer simple nt story largest smartphone operating system world consistently successfully using open source software improving performance security along way yet clear whether google specifically use new inkernel exfat landing android continue use samsung sdcardfs filesystem wrapper sdcardfs solved android auxiliarystorage performance problem may provide additional security benefit simply using inkernel exfat would case two macos case mac unix derivative still commercial support ntfswrite support ntfs readonly mode appears strange given existence linux one activate write guarantee ntfs volume corrupted write operation several problem using macos iffy ntfs support case open source software first ntfs support nt seem real priority apple first place macos classic ntfs support ntfs support present mac o x panther effectively already freebsdderived vfs virtual file system network stack another problem comparison ntfs fullfeatured fully modern filesystem missing part contrast filesystem whose linux kernel implementation paragon throwing fud extremely barebones lightweight filesystem designed use embedded device final nail particular coffin open source ntfs implementation used macos nt microsoftsanctioned cleanroom reverseengineered workaround proprietary filesystem worse implementation made time microsoft actively wanted close open source community even modern version paragon note modern open source implementation ntfs duallicensed proprietarygpl suffer potential writecorruption available macos well linux mac user nt need highest performance install fuse implementation free using homebrew desiring native nearnative performance purchase lifetime license directly tuxera license includes perpetual free upgrade installation three personal computer probably worth noting addition selling proprietary implementation proprietary implementation ntfs mac case three smb additional example away filesystems open source smb protocol implementation mac o well majority printer manufacturer rely opensource solution several commercial implementation smb soon commercial level support required unclear paragon believed good argument open source implementation file system smb server message block nt filesystem network communication protocol introduced microsoft window certainly true many proprietary implementation smb one direct partnership microsoft made paragon rival vendor tuxera another odd flex try make open source filesystem implementation leaving aside question smb exfat note extensive commercial use samba original gangster open source smb networking particular synology us samba na network attached storage server netgear qnap sambaorg also list highprofile commercial vendor including limited american megatrends hewlettpackard veritas vmware open source stay congratulate paragon closing timely exfat deal sagemcom although good reason believe samsungderived microsoftapproved exfat implementation linux secure stable highly performant nt even next upcoming linux kernel expect hit general availability late april early may meantime company business need finalize design making right decision use proprietary exfat implementation commercial support license cost probably small percentage company stand earn gross router sale paragon implementation known value however suspect exfat landscape tilt significantly samsung microsoftblessed version hit mainstream linux kernel hopefully paragon evolve modern open source strategy still time
125,Lobsters,osdev,OS,mit-pdos/xv6-riscv - Xv6 for RISC-V,https://github.com/mit-pdos/xv6-riscv,riscv,http http githubcomriscvriscvgnutoolchain,reimplementation dennis ritchie ken thompson unix version loosely follows structure style implemented modern riscv multiprocessor using ansi c acknowledgment inspired john lion commentary unix edition peer peer communication isbn edition june see also http provides pointer online resource following people made contribution rus cox context switching locking cliff frey mp xiao yu mp nickolai zeldovich austin clements also grateful bug report patch contributed silas boydwickizer anton burtsev dan cross cody cutler mike cat tej chajed asami doi nelson elhage saar ettinger alice ferrazzi nathaniel filardo peter froehlich yakir goaron shivam handa bryan henry jaichenhengjie jim huang alexander kapshuk anders kaseorg wolfgang keller jonathan kimmitt eddie kohler austin liew imbar marinescu yandong mao matan shabtay hitoshi mitake carmi merimovich mark morrissey mtasm joel nider greg price ayan shafqat eldar sehayek yongming shen fumiya shigemitsu takahiro cam tenny tyfkda rafael ubal warren toomey stephen tu pablo ventura xi wang keiichi watanabe nicolas wolovick wxdao grant wu jindong zhang icenowy zheng zou chang wei code file constitute copyright frans kaashoek robert morris rus cox error report please send error suggestion frans kaashoek robert morris kaashoek rtm mitedu main purpose teaching operating system mit interested simplification clarification new feature building running need riscv newlib tool chain http githubcomriscvriscvgnutoolchain qemu compiled installed shell search path run make qemu
126,Lobsters,osdev,OS,An Overview of the Spring System,https://web.archive.org/web/20060315090538/http://research.sun.com/features/tenyears/volcd/papers/Mitchell.pdf,overview spring system,,obj length filter flatedecode stream ō u zk 죪
127,Lobsters,osdev,OS,An idea for generics at the OS level,https://gist.github.com/bdezonia/6eec9dfa4390562cc7176b4d578b8c7a,idea generic o level,,last couple year working library manipulating numeric data generic way see zorbage githubcombdezoniazorbage key approach define generic algorithm work lot different data type work based idea thinking year improved reading book stepanov element programming mathematics generic programming recently thinking saving loading generic data type portable fashion began toying idea file format specification begun see bsf githubcombdezoniabsf occurs multidimensional file reader writer could something provided o level fixed multidimensional format written order whether writing float data rgb yuv string etc type read write would provide individual read write method would used generic file readerwriter one could say write bsf list ints name o installed plugin tell o read write ints one idea like see take ability register type o bsf reader could handle type plugins installed within o algorithm could become resuable type satisfy contract installed host system idea contract instance oo class implementation describe basic capability type would useful color blending app write would work type defines blend operation whether type cmyk yuv lab etc imagine paint program freed knowing kind pixel type support anyhow contract become pretty minute granular also allow powerful software written zorbage raise e number power due similar generic definition similar contract raise e matrix power algorithm written number sometimes make sense matrix work raising e matrix power real thing actuality used engineer zorbage kind thing come free idea would require o preferred typeimplementation language perhaps portable language interface describing object approach nothing would stop using functional approach choosing o api could multiple program language binding system generic type signature might really powerful might difficult nt know generic approach would mean security people inject type o would require fucntional approach type side effect allowed lot consider one curious developer think stuff talking many people head many many year nt seen anybody discussing public think please comment reddit post hope starting point something nice
128,Lobsters,osdev,OS,A declarative process manager-agnostic deployment framework based on Nix tooling,http://sandervanderburg.blogspot.com/2020/02/a-declarative-process-manager-agnostic.html,declarative process manageragnostic deployment framework based nix tooling,introduced new experimental nixbased process framework nix expression language simple concept nix profile nix package manager process dependency multiple instance unprivileged user namespaces cgroups required start daemon stop reload restart status higher level declarative relevant characteristic writing declarative deployment specification managed running process override simulating process manageragnostic concept direct equivalent foreground process daemon daemonize libslack proxy process stackoverflow article command running shell respond signal state initialization state initialization wrapper script process dependency changing user privilege deploying process manageragnostic configuration distributed process manageragnostic deployment disnix disnix heteregenous network targetagnostic discussion limitation related work pleaserun remaining thought patch repository availability latest version experimental nixbased process framework,previous blog post written two month ago introduced new experimental nixbased process framework provides following feature us nix expression language configuring running process instance including dependency configuration process based simple concept function definition define constructor generate process manager configuration function invocation compose running process instance nix profile make collection process configuration accessible single location nix package manager delivers package configuration file isolates nix store never conflict running process package identifies process dependency process manager ensure process activated deactivated right order ability deploy multiple instance process making conflicting resource configurable deploying processesservices unprivileged user advanced concept feature namespaces cgroups required another objective framework work variety process manager variety operating system previous blog post deliberately using sysvinit script also known lsb init compliant script manage lifecycle running process starting point universally supported linux self contained sysvinit script require right package installed rely external program manage process lifecycle moreover sysvinit script also conveniently used unprivileged user also developed nix function used conveniently generate sysvinit script traditionally script written hand basically require implementer writes boilerplate code activity start stop process sysvinit script generator function also used directly specify implementation activity manage lifecycle process createsystemvinitscript nginx statedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createsystemvinitscript name instancename description nginx activity start mkdir p nginxlogdir loginfomsg starting nginx loadproc nginx binnginx c configfile p statedir evaluateretval stop loginfomsg stopping nginx killproc nginx binnginx evaluateretval reload loginfomsg reloading nginx killproc nginx binnginx hup evaluateretval restart stop sleep start status statusproc nginx binnginx runlevels inherit dependency instancename nix expression specify five activity manage lifecycle nginx freeopen source web server start activity initializes state nginx start process daemon run background stop stop nginx daemon reload instructs nginx reload configuration restart restarts process status show whether process running besides directly implementing activity nix function invocation shown also used much higher level typically sysvinit script follow convention nearly sysvinit script implement activity described manage lifecycle process typically need reimplemented also generate implementation activity automatically high level specification createsystemvinitscript nginx statedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createsystemvinitscript name instancename description nginx initialize mkdir p nginxlogdir process nginx binnginx args c configfile p statedir runlevels inherit dependency instancename could basically say createsystemvinitscript function invocation make configuration process sysvinit script declarative need specify activity need executed manage process instead specify relevant characteristic running process high level specification implementation required activity derived using convention commonly used write sysvinit script completing initial version process management framework work sysvinit script also investigating process manager discovered configuration process many thing common sysvinit approach result decided explore declarative deployment concept bit blog post describe declarative process manageragnostic deployment approach integrate experimental nixbased process management framework writing declarative deployment specification managed running process explained introduction also experimenting process manager sysvinit example instead generating sysvinit script manages lifecycle process nginx server also generate supervisord configuration file define nginx program managed supervisord createsupervisordprogram nginx statedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createsupervisordprogram name instancename command mkdir p nginxlogdir nginx binnginx c configfile p statedir inherit dependency invoking function generate supervisord program configuration file instead sysvinit script following nix expression generate systemd unit file nginx lifecycle managed systemd createsystemdservice nginx statedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createsystemdservice name instancename unit description nginx service execstartpre mkdir p nginxlogdir execstart nginx binnginx c configfile p statedir type simple inherit dependency may probably notice comparing two nix expression last sysvinit example capture process characteristic instead activity contain similar property main difference slightly different organization naming convention abstraction function tailored towards configuration convention target process manager us discussed previous blog post declarative programming deployment declarativity spectrum specification somewhat declarative capture activity manage lifecycle process instead specify process want run process manager derives executes activity bring process running state sysvinit script declarative specify activity ie shell command need executed accomplish goal supervisord configuration systemd service configuration file somewhat declarative capture process characteristic process manager executes derives required activity bring process running state despite fact specifying process management activity nix expression could still considered somewhat specification configuration tailored towards specific process manager process manager syvinit mean accomplish something else getting running process whose lifecycle conveniently managed would revise specification express kind running process want disregarding process manager could simply write createmanagedprocess nginx statedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createmanagedprocess name instancename description nginx initialize mkdir p nginxlogdir process nginx binnginx args c configfile p statedir instancename inherit dependency instancename nix expression simply state want run managed nginx process using certain commandline argument starting process want initialize state creating log directory exists yet translate specification kind configuration artifact used variety process manager accomplish outcome developed six kind generator allowing target following process manager translating property process manageragnostic configuration process managerspecific property quite straight forward concept many case direct mapping property process manageragnostic configuration process managerspecific property example intend target supervisord translate process args parameter command invocation systemd translate process args execstart property refers commandline instruction start process although process manageragnostic abstraction function support enough feature get well known system service working eg nginx apache http service postgresql mysql etc facilitate possible feature process manager provide reasonable set common feature get process running impose restriction still possible work around feature limitation process manageragnostic deployment specification also influence generation process defining override get process managerspecific property supported createmanagedprocess nginx statedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createmanagedprocess name instancename description nginx initialize mkdir p nginxlogdir process nginx binnginx args c configfile p statedir instancename inherit dependency instancename override sysvinit runlevels example added override specifically sysvinit tell init system process started runlevels implies process stopped remaining runlevels process manager worked notion runlevels similarly use override example use systemdspecific feature run process linux namespace etc simulating process manageragnostic concept direct equivalent process manageragnostic concept process manager always direct equivalent case still possibility apply nontrivial simulation strategy foreground process daemon deployment specification shown blog post common main objective bring process running state process expected behave different among process manager sysvinit bsd rc script expect process daemonize invocation process spawn another process keep running background daemon process initialization daemon process done parent process terminates process deamonize startup process execution block indefinitely daemon introduce another complexity process management perspective invoking executable shell session background mode shell tell process id stopped longer necessary deamons invoked process fork another child process supposed really behave well double fork becomes daemon process daemon process get adopted init system thus remains background even shell session end shell invokes executable know pid resulting daemon process value propagated daemon parent process calling shell session still able control wellbehaving daemon typically writes process id socalled pid file reliably terminated shell command longer required sysvinit bsd rc script extensively use pid file control daemon using process pid file managing sysvinitbsd rc script tell whether process running reliably terminate process instance modern process manager launchd supervisord cygrunsrv work process daemonize instead process manager daemon invoke process work foreground mode one advantage approach service reliably controlled pid directly propagated controlling daemon fork library call longer required work pid file may always work reliably example process might abrubtly terminate never clean pid file giving system false impression still running systemd improves process control even using linux cgroups although foreground process may controlled reliably daemon still fork process eg web service creates process per connection controlling parent process terminates properly terminate child process may keep running background indefintely cgroups possible process manager retain control process spawned service terminate service longer needed systemd another unique advantage process manager work foreground process daemon although foreground process seem preference according documentation much easier control develop many common system service openssh mysql nginx ability run foreground process daemon typically providing commandline parameter defining property configuration file provide optimal user experience supported process manager typically good thing process manageragnostic deployment specification specify process used foreground process daemon createmanagedprocess nginx statedir runtimedir configfile dependency instancesuffix let instancename nginx instancesuffix nginxlogdir statedir instancename log createmanagedprocess name instancename description nginx initialize mkdir p nginxlogdir process nginx binnginx args p statedir instancename c configfile foregroundprocessextraargs g daemon daemonextraargs g pid runtimedir instancename pid inherit dependency instancename override sysvinit runlevels example revised nginx expression specify process started foreground process daemon thing need configured differently one global directive nginx configuration file default nginx run deamon adding daemon directive configuration run foreground mode run nginx daemon configure pid file refers instance name multiple instance coexist make conveniently configurable expression following process parameter specifies process need started foreground mode daemon args parameter specifies common commandline argument foreground daemon process use foregroundprocessextraargs parameter specifies additional commandline argument used process started foreground mode example used provide nginx global directive disables daemon setting daemonextraargs parameter specifies additional commandline argument used process started daemon example used provide nginx global directive pid file path uniquely identifies process instance custom software service implemented different language c eg nodejs java python far le common ability daemonize typically used foreground process nonetheless still daemonize foregroundonly process using external tool libslack daemon command daemon u myforegroundprocess command deamonizes foreground process creates pid file managed sysvinitbsd rc utility script opposite kind simulation also possible process used daemon use proxy process make appear foreground process export toppid handle sigterm sigint signal forward daemon process term trap exit term kill term pid kill toppid interrupt kill int pid trap term sigterm trap interrupt sigint start process background daemon executable wait pid file become available useful work daemon nt behave well enough f pidfile count eq echo seem nt pid file giving exit fi echo waiting pidfile become available sleep count done determine daemon pid using pid file pid cat pidfile wait background pid terminate stdenvisdarwin lsof p pid r devnull else stdenvislinux stdenviscygwin tail pid pid f devnull else stdenvisbsd stdenvissunos pwait pid else throw nt know wait process completion system stdenvsystem wait blocker process complete use wait bash still handle sigterm sigint signal may sent process manager blockerpid wait blockerpid idea proxy script shown run foreground process long daemon process running relay relevant incoming signal eg terminate interrupt daemon process implementing proxy bit tricky beginning script configure signal handler term int signal process manager terminate daemon process must start daemon wait become available although parent process wellbehaving daemon terminate initialization done turn hard guarantee make process bit robust deliberately wait pid file become available attempt wait termination daemon wait pid terminate bash shell internal wait command used wait background process terminate work process process group shell daemon new session different process group monitored shell using wait command stackoverflow article learned use tail command gnu coreutils lsof macosdarwin pwait bsds solarissunos monitor process process group command executed shell script eg particular case tail lsof pwait shell script longer respond signal command completes still allow script respond signal waiting daemon process terminate must run previous command background mode use wait instruction block script wait command running shell respond signal generator function automatically pick best solution selected target process manager mean target process manager sysvinit bsd rc script generator automatically pick configuration setting run process daemon remaining process manager generator pick configuration setting run foreground process desired process model supported generator automatically simulate instance foregroundonly process specification generator automatically configure sysvinit script call daemon executable daemonize similar process happens daemononly process specification deployed process manager work supervisord state initialization another important aspect process deployment state initialization system service require presence state directory store pid log temp file directory exist service may work refuse start cope problem typically make process self initializing starting process check whether state intialized eg check state directory exist reinitialize initial state needed process manager state initialization easy facilitate sysvinit bsd rc script use generator first execute shell command initialize state process get started supervisord allows execute multiple shell command single command directive execute script initializes state execute process want manage systemd execstartpre directive used specify shell command execute main process start apple launchd cygrunsrv however generic shell execution mechanism facility allowing execute thing process start nonetheless still ensure state going initialized creating wrapper script first wrapper script state initialization executes main process state initialization procedure specified target process manager support scripting generator function transparently wrap main process wrapper script support state initialization process dependency another important generic concept process dependency management example nginx act reverse proxy another web application process provide functional nginx service must sure web application process get activated well web application activated nginx web application process activated nginx missing completely nginx temporarily unable redirect incoming request web application process causing endusers see bad gateway error process manager experimented different notion process dependency sysvinit script optionally declare dependency comment section tool know interpret dependency specification use decide right activation order system using sysvinit typically ignore specification instead work sequence number file name run level configuration directory contains prefix k followed two numeric digit defines start stop order supervisord work dependency specification every program optionally provide priority setting used order activation deactivation program lower priority number precedence high priority number dependency specification process management expression generator function automatically derive sequence number process manager require similar sysvinit script bsd rc script also declare dependency comment section contrary sysvinit script bsd rc script use rcorder tool parse dependency comment section automatically derive order bsd rc script need activated cygrunsrv also allows directly specify process dependency window service manager make sure service get activated right order process dependency activated first limitation cygrunsrv allows dependency specified per service simulate process dependency systemd use two property want property used tell systemd another service need activated first property used specify ordering sadly seems launchd notion process dependency process activated certain event eg kernel module loaded socket activation seem ability configure process dependency activation ordering target process manager launchd simply inform user proper activation ordering guaranteed changing user privilege another general concept subtle difference process manager changing user privilege typically deployment system service want run service root user full access filesystem unprivileged user sysvinit bsd rc script change user su command su command used change user id uid automatically adopt primary group id gid corresponding user supervisord cygrunsrv also change user id uids adopt primary group id gid corresponding user systemd launchd change user id group id process invokes changing uids universally supported amongst process manager add configuration property allows change gids process manageragnostic way deploying process manageragnostic configuration process nix expression define process instance want run constructed source code dependency pkgs import inherit system system builtinscurrentsystem statedir var runtimedir statedir run logdir statedir log tmpdir statedir var tmp else statedir tmp forcedisableuserchange false processmanager let constructor import constructorsnix inherit pkgs statedir runtimedir logdir tmpdir inherit forcedisableuserchange processmanager rec webapp rec port dnsname webapplocal pkg constructorswebapp inherit port nginxreverseproxy rec port pkg constructorsnginxreverseproxy webapps webapp inherit port nix expression compose two running process instance webapp trivial web application process simply return static html page using http protocol nginxreverseproxy nginx server configured reverse proxy server forward incoming http request appropriate web application instance based virtual host name virtual host name webapplocal nginx forward request webapp instance generate configuration artifact process instance refer separate constructor nix expression constructor call createmanagedprocess function abstraction shown earlier construct process configuration process manageragnostic way following commandline instruction generate sysvinit script webapp nginx process declared process expression run unprivileged user state file managed home directory nixprocbuild processmanager sysvinit statedir homesandervar forcedisableuserchange processesnix adjusting processmanager parameter also generate artefact different process manager example following command generate systemd unit config file instead sysvinit script nixprocbuild processmanager systemd statedir homesandervar forcedisableuserchange processesnix following command automatically build deploy process using sysvinit process manager nixprocsysvinitswitch statedir homesandervar forcedisableuserchange processesnix also run lifecycle management activity previously deployed process example retrieve status process run nixprocsysvinitrunactivity status also traverse process reverse dependency order particularly useful reliably stop process without breaking process dependency nixprocsysvinitrunactivity r stop similarly commandline tool use supported process manager example deploy systemd unit instead sysvinit script run nixprocsystemdswitch processesnix distributed process manageragnostic deployment disnix shown previous process management framework blog post also possible deploy process machine network interdependency process kind deployment managed disnix compared previous blog post could deploy sysvinit script also use process manager framework support dysnomia toolset provides plugins support process manager framework support pkgs distribution invdistribution system statedir var runtimedir statedir run logdir statedir log tmpdir statedir var tmp else statedir tmp forcedisableuserchange false processmanager sysvinit let constructor import constructorsnix inherit pkgs statedir runtimedir logdir tmpdir inherit forcedisableuserchange processmanager processtype processmanager sysvinit sysvinitscript else processmanager systemd systemdunit else processmanager supervisord supervisordprogram else processmanager bsdrc bsdrcscript else processmanager cygrunsrv cygrunsrvservice else throw unknown process manager processmanager rec webapp rec name webapp port dnsname webapplocal pkg constructorswebapp inherit port type processtype nginxreverseproxy rec name nginxreverseproxy port pkg constructorsnginxreverseproxy inherit port dependson inherit webapp type processtype expression extended previously shown process expression disnix service expression every attribute attribute set represents service distributed target machine network type attribute service indicates dysnomia plugin need manage lifecycle automatically select appropriate plugin desired process manager deriving processmanager parameter disnix expression drawback heteregenous network machine run multiple operating system andor process manager need compose desired variant service configuration file process manager want use also possible targetagnostic service delegating translation step corresponding target machine instead directly generating configuration file process manager generate json specification containing parameter passed createmanagedprocess use json file build corresponding configuration artefact target machine pkgs distribution invdistribution system statedir var runtimedir statedir run logdir statedir log tmpdir statedir var tmp else statedir tmp forcedisableuserchange false processmanager null let constructor import constructorsnix inherit pkgs statedir runtimedir logdir tmpdir inherit forcedisableuserchange processmanager rec webapp rec name webapp port dnsname webapplocal pkg constructorswebapp inherit port type managedprocess nginxreverseproxy rec name nginxreverseproxy port pkg constructorsnginxreverseproxy inherit port dependson inherit webapp type managedprocess service model set processmanager parameter null causing generator print json presentation function parameter passed createmanagedprocess managedprocess type refers dysnomia plugin consumes json specification invokes createmanagedprocess function convert json configuration configuration file used preferred process manager infrastructure model configure preferred process manager target machine property hostname container managedprocess processmanager sysvinit property hostname container managedprocess processmanager systemd infrastructure model managedproces container first machine configured use sysvinit script manage process second test machine managedprocess container configured use systemd manage process distribute service service model target infrastructure model follows infrastructure webapp nginxreverseproxy deploy system follows disnixenv servicesnix infrastructurenix distributionnix webapp process distributed machine network managed sysvinit script nginxreverseproxy deployed machine managed systemd job nginx reverse proxy forward incoming connection webapplocal domain name web application process hosted first machine discussion blog post introduced process manageragnostic function abstraction making possible target kind process manager variety operating system using single set declarative specification target six different process manager four different kind operating system implement various kind deployment scenario production deployment test deployment unprivileged user construct multiple instance process distributedcontext advantage uniformly target supported process manager operating system heterogeneous environment single declarative specification particularly useful facilitate technology diversity example one key selling point microservices technology used implement many case technology diversity restricted framework programming language storage technology one particular aspect rarely changed choice operating system limitation deployment tool deployment solution microservices containerbased heavily rely linuxonly concept namespaces cgroups process managemenent framework recent dysnomia plugin addition disnix possible target kind operating system support nix package manager making operating system component selectable well example allows also pick best operating system implement certain requirement example performance important might pick linux strong emphasis security could pick openbsd host mission criticial component limitation following table summarizes difference process manager solution investigated sysvinit bsdrc supervisord systemd launchd cygrunsrv process type daemon daemon foreground foregrounddaemon foreground foreground process control method pid file pid file process pid cgroups process pid process pid scripting support yes yes yes yes process dependency management numeric ordering dependencybased numeric ordering dependencybased dependency loading none dependencybased dependency loading user changing capability user user user group user group user group user unprivileged user deployment yes yes yes yes operating system support linux freebsdopenbsdnetbsd many unixlike linuxmacosfreebsdsolaris linux glibc macos darwin window cygwin although facilitate lifecycle management common specification variety process manager important common feature supported every concept done process manager agnostic way example generically isolation resource except package use nix difficult generalize concept standardized eg posix standard descibe namespaces cgroups similar concept furthermore process manager exception supervisord operating system specific result still matter process manager picked related work process manageragnostic deployment entirely new idea dysnomia already targetagnostic process plugin quite translates simple deployment specification constisting keyvalue pair systemd unit configuration file sysvinit script feature dysnomia process plugin much limited compared createmanagedprocess abstraction function described blog post support process manager sysvint systemd work foreground process furthermore target agnostic configuration easily extended possible ab use templating mechanism first class overridde facility also found project called pleaserun also objective generate configuration file variety process manager approach pleaserunit support sysvinit script systemd launchd seems use template file generate configuration artefact seem generic extension mechanism furthermore provides framework configure location shared resource automatically install package dependency compose multiple instance process remaining thought although nix package manager nixos distribution portable amongst variety unixlike system turn two operating system well supported linux macos nix reported work variety unixlike system past recently seems many thing broken make nix work freebsd used latest stable nix package manager version patch repository turn still patch missing work around bug freebsd incorrectly kill process process group fortunately run nix unprivileged user bug seem cause serious problem recent version nixpkgs turn horribly broken freebsd freebsd stdenv seem work tried switching back stdenvnative stdenv environment impurely us host system compiler core executables also longer seems work last three major release nix expression evaluation break several place due intense amount change assumption stdenv infrastructure currently make good impossible fix infrastructure another workaround reverted back old version nixpkgs version precise still working stdenvnative environment tiny adjustment eg adding shell alias gnu variant certain shell executables stdenvnative managed get basic nix package working including nginx freebsd surprisingly running nix cygwin le painful freebsd gnuisms cygwin provides similar freebsd recent version nixpkgs also appear broken including cygwin stdenv environment reverting back still somewhat working stdenv cygwin managed build working nginx version future improvement nixpkgs would like propose testing solution stdenvnative although understand difficult dedicate manpower maintain unconventional nixnixpkgs port stdenvnative something also convienently test linux prevent breaking future availability latest version experimental nixbased process framework includes process manageragnostic configuration function described blog post obtained github page addition repository also contains example case including web application system described blog post set common system service mysql apache http server postgresql apache tomcat
129,Lobsters,osdev,OS,krabs: An x86 bootloader written in Rust,https://github.com/ellbrid/krabs,krabs bootloader written rust,project currently rewritten moment attempt build project fail krabs bootloader krabs news example getting started requirement cargoxbuild cargobinutils build write run example example document doc creating custom linux image booting contributing getting started guide contribution guideline design design document specification document feature linux boot protocol linux boot protocol license contanct twitter vmmdev code conduct,project currently rewritten moment attempt build project fail krabs bootloader krabs experimental bootloader written rust krabs boot elf formatted kernel like vmlinux compressed krabs decompresses image relocate elf image boot kernel source code us c library decompressing rest completely rust krabs krabs working booting vmlinux kernel formatted elf pc development krabs also aim support minimal linux boot protocol allows specify kernel command line initrdinitramfs another feature order save space use compressed image instead raw elf krabs us library decompressing news kernel command line initrd work fine example toolsburgersh b toolsburgersh k vmlinux initramfscpiogz p clocksourcetsc diskimg hda diskimg getting started get started krabs build source requirement need nightly rust compiler cargoxbuild cargobinutils c option toolsburgersh check exists required program installs installed cargo git clone http githubcomellbridkrabsgit cd pathtokrabs toolsburgersh c check command command check passed check component install xbuild installed cargobinutils installed llvmtoolspreview installed rustsrc installed using linux multilib environment needed rhelcentos sudo yum install ubuntu sudo apt install gccmultilib testing also need qemu mbr disk image disk image bootflaged partition qemuimg create diskimg fdisk diskimg create requiresd partition fdisk l diskimg disklabel type do disk identifier device boot start end sector size id type linux linux build build krabs follows cd pathtokrabs toolsburgersh b write write disk toolsburgersh k elfkernelfile initrdfile p kernel command line diskimg krabs installed diskimg k p option required run test using qemu hda diskimg example simple example described example document also quickstart guide read example linux described doc creating custom linux image booting contributing krabs welcome contribution contribute krabs check getting started guide krabs contribution guideline design krabs overall architecture described design document specification document feature support legacy bios supported medium hdd ssd mbr support protected mode long mode support o kernel formatted support minimal linux boot protocol save space o kernel compressd use loading krabs unpacks area byte reserved kernel command line using area krabs transmit parameter o manipulate behavior kernel startup krabs load module initramsfsinitrd according linux boot protocol license project licensed either option unless explicitly state otherwise contribution intentionally submitted inclusion serde defined license shall dual licensed without additional term condition contanct get touch following way contact twitter open github issue repository email vmmdev note japan time zone communicating within krabs community please mind code conduct
130,Lobsters,osdev,OS,The resurrection of GOOSEE Diagrammer,https://bkhome.org/news/202003/the-resurrection-of-goosee-diagrammer.html,resurrection goosee diagrammer,http http eve http bkhomeorgarchiveeve http bkhomeorgarchivegooseeevemanualevemanualhtm http bkhomeorgarchivegooseeevemanualevewemanualhtm goosee diagrammer http bkhomeorgarchivegoofeegoosee http bkhomeorgarchivegoofeegooseemanualmanualhtm http bkhomeorgarchivegoofeegoofeecompaniondisktargz http bkhomeorgarchivegoofeegooseetargz http bkhomeorgarchivegoofeegooseemanualtargz http bkhomeorgarchivegoofeegooseedevtargz http http tech,march barryk back wrote book titled flow design embedded system published usa r book describes diagramming technique invented designing code prior actual coding floppy disk attached inside back cover window application called goofee diagrammer book print however used copy available example amazon http received email scott asking companion disk scott collect old book two copy book without floppy disk replied around lived near small town perenjori western australia house burgled external backup drive stolen lot old stuff told would look see companion disk archived somewhere else cddvd old computer cyrix cpu zipdrive ide hard drive main workhorse got rid old computer left perenjori however hung onto one take thing time longer work need able access old ide drive even found old zip disk think goofee development bought one au http photo show plugged zip drive note ide power plug well right cable main power adapter centre cable cable pc unfortunately zip disk nt work insert ok whirring sound nothing ide hd work fine yes found companion disk also found development file goosee diagrammer goofee acronym graphical object orientation embedded engineering gui tool designing program however realised also potential also generating code c code hence goosee diagrammer born goosee ancronym graphical object oriented software engineering environment goofee diagrammer got mixed review one guy thought useful code design worked suggested alternative acronym graphical obfuscation operation eternal employment anyway c code generation part introduced goosee diagammer never got publicly released lost interest moved onto eve eve eve acronym embedded vector editor generalpurpose vector drawing application see source code also available http bkhomeorgarchiveeve http bkhomeorgarchivegooseeevemanualevemanualhtm http bkhomeorgarchivegooseeevemanualevewemanualhtm goosee diagrammer extension goofee diagrammer generation c code never got released think reached version however find version old ide hard drive even installed testdisk via ppm file recovery tool avail gooseeexe application still work window found uploaded introduction http bkhomeorgarchivegoofeegoosee example link user manual http bkhomeorgarchivegoofeegooseemanualmanualhtm tarballs available http bkhomeorgarchivegoofeegoofeecompaniondisktargz http bkhomeorgarchivegoofeegooseetargz http bkhomeorgarchivegoofeegooseemanualtargz http bkhomeorgarchivegoofeegooseedevtargz last one source code goofee goosee diagrammer written assembly language require masm microsoft assembler compile free http useful link http goosee diagrammer actually useful code design generation tool novelty plaything perhaps depends whether brain graphic oriented text oriented recall time decided preferred code directly need intermediate design phase might different one person working project tag tech
131,Lobsters,osdev,OS,seL4 Design Principles,https://microkerneldude.wordpress.com/2020/03/11/sel4-design-principles/,design principle,result year research principle verification problematic design already abandoned verification force inferior design keeping verification engineer loop minimality microkernel family verification cost grows roughly square code size generality introduction new scheduling model policy freedom paper hydra o brinch hansen nucleus paper performance allowed construction performant system top original paper performance focus hot code path performance pay use experience paper closer consideration bad idea security extending isolation thus security timing property security least privilege pola security delegation revocation antiprinciples stopping shooting foot kernel job ease use goal good mirokernel api hardware abstraction goal api tradeoff principle security verification absolute principle excellent timehonoured driver good design like,team greatest achievement fall sky result year research evolved past year beginning design driven number principle recent internal discussion fine point spec well discussion external reminded principle mind designer really documented lead people internal well external trustworthy system arguing apis spirit hence try write principle core driver api verification minimality policy freedom performance security pay use nongoals stopping shooting foot ease use hardware abstraction discus turn principle driver design verification obvious core claim fame proof implementation adheres spec functional correctness well proof higherlevel security property change kernel proof need updated reestablish functional correctness verification significant impact design decision shift tradeoff alternative design example concurrent system notoriously hard verify everything keep concurrency kernel example include virtual tcb array long ipc used original design led exception happening kernel mode nested exception introduce concurrency acceptable designed proved never trigger exception inside kernel interestingly problematic design already abandoned simplicity performance reason verification force inferior design important factor every design consideration certainly force u think carefully every design choice careful consideration frequently led cleaner design core challenge kernel evolution reverification take much longer code change trigger need minimise reverification cost critical code change make life verifier harder necessary many case impact code change reverification effort hard predict even experienced kernel engineer much harder external sometimes lead frustration external suggest change decline would create verification headache handle keeping verification engineer loop proposing change kernel help lot eliminate surprise many verification challenge show trying reprove kernel invariant frequently lead change code sometimes even api make verification easier minimality principle predates many year core principle original microkernel ancestor whole microkernel family expressed liedtke seminal halloffame paper μkernel construction concept tolerated inside µkernel moving outside kernel ie permitting competing implementation would prevent implementation system required functionality fairly categorical aim really ideal every kernel seen violates least bit excellent design driver served microkernel family well quarter century taken additional significance verification cost grows roughly square code size excellent motivation keeping small aspect minimality device driver kernel interruptcontroller timer extreme approach memory management even kernel memory managed userlevel code generality also original aim microkernels general trustworthy foundation large class system design principle stop minimality reducing kernel size zero reality always use case better supported kernel others much research year driven addressing evolving kernel support growing class use case well example biggest change functionality introduction new scheduling model aim supporting wider class realtime rt system especially mixedcriticality system mc critical rt code coexists untrusted code turn mc kernel clean number issue api make improvement even use case mc policy freedom principle predates even original decade policymechanism separation explicitly stated principle paper hydra o idea already clearly contained brinch hansen nucleus paper describes archancestor microkernels really consequence minimality generality want keep kernel minimal yet general must focus basic mechanism build everything else top memorymanagement model take big chunk kernel memorymanagement policy kernel similarly mc model introduces principled capabilityauthorised userlevel management time another firstclass resource performance performance especially critical ipc operation always core driver kernel ipc performance master liedtke expressed paper improving ipc kernel design reason attempt build usable system earlier microkernels especially mach failed kernel introduced much overhead liedtke original kernel showed microkernels fast allowed construction performant system top beginning designed suitable realworld use therefore considered uncompromising design performance essential message team beginning project consider project success lose performance compared fastest kernel date time original paper right limit optimisation got u point became faster earlier kernel became tagline security excuse bad performance besides verification performance set apart microkernels really set benchmark performance focus hot code path performance aspect result observation system operation used frequently others overall performance maximised shifting cost frequently used hot operation infrequentlyused one prime example hot operation ipc microkernelbased system system service provided userlevel server invoked ipc predominant operation notification semaphorestyle synchronisation primitive also frequently used handling exception interrupt also frequently performancecritical eg exception used emulationvirtualisation exception mapped onto ipc interrupt onto notification optimising benefit exception interrupt handling ipc functionality equally performancecritical ipc allows transferring capability inherently costly operation requires cspace manipulation simple functioncallstyle ipc made faster slightly penalising complex variant winner idea behind ipc fast path minimal checking precondition true executes tight code sequence boundary hot cold code good way think term change kernel state ie set data structure held kernel every system call change kernel state even update accounting information simple invocation sequence return kernel call logical state sequence began meaning kernel state differ accounting information execution time charged thread example basic rpclike server invocation aka protected procedure call result following change logical kernel state assuming start server blocked request endpoint receive phase client performs kernel change client state blocked kernel set reply object state kernel move scheduling context client server kernel unblocks server executes request handled request server performs reply object respond client kernel block server kernel return scheduling context client kernel unblocks client continues executing far kernel concerned back initial logical state state change temporary made fast contrast typical cspace manipulation reversible eg capability transferred later revoked simple user view primitive operation roundtrip ipc ipc transfer capability leave receiver cspace changed change typically longlived also inherently expensive basic ipc operation may accelerated degree laziness exemplified scheduler optimisation called benno scheduling unblocking thread ipc receive immediately insert ready queue likely blocked soon would undo queue operation performed instead insert presently running thread ready queue get preempted avoids queuemanipulation operation ipc roundtrip performance pay use much principle discussed several place including experience paper aspect somewhat buried inside brain designer important understanding design decision feature may benefit particular use case may small noticeable cost frequent use case example long ipc feature original supported copying large message buffer kernel seems like good optimisation sharing bulk data actual use case posix emulation specifically broken aspect posix cost even use performance cost extra check ipc path complexity cost kernel deal nested exception page fault happening long ipc end decided bad design gross violation minimality copying done trusted userlevel server similar argument behind supporting scalability kernel large number core closer consideration bad idea migrating even single cache line one end manycore chip take cycle order cost complete ipc really want implement user level ie multikernel design sharing kernel image make sense cost using multicore configuration would significantly higher implementing user level case closelycoupled multicore core share cache case support plan scaling singlekernelimage design looselycoupled multicores sharing security security always high list requirement kernel although past came many case degradation performance flexibility even reason adopting capability access control first microkernel security core principle kernel fundamentally designed providing strongest possible isolation main driver behind radical approach resource management booting kernel never allocates memory heap instead performing operation requires kernel memory eg creating address space requires memory page table caller must provide memory explicitly kernel process called retyping convert usercontrolled untyped ie free memory kernel memory model make management kernel memory responsibility trusted protected usermode process model enhances minimality policyfreedom core enabler proof security enforcement aim make possible reason formally security property system recently taken step extending isolation thus security timing property principled way eliminating timing channel still much research topic yet ready production kernel security least privilege pola important part design security principle least privilege also known principle least authority catchy acronym pola mean component ever privilege power need job finegrained access control provided capability great enabler pola switched cap even security delegation revocation least privilege potentially odds performance simple way minimise authority given component obtain explicit approval external trusted security monitor everything clearly good approach furthermore securityoriented design likely hierarchical subsystem limited privilege contains subsubsystems even limited privilege enforcing internal boundary subsystem duty toplevel privileged component call mechanism delegating exercise reduced privilege component right resource physical memory able create isolated subcomponent reduced right resource must able revoke delegation capability provides support effective delegation partial privilege example want subsystem manages subset physical resource autonomously supply untyped memory manage without interfering component memory use want restrict component eg o personality instead supply cap pool tcbs frame address space etc manage pool would appeal higher authority move memory pool short authority give subsystem made match system resource management policy antiprinciples number property many people would like api explicitly providing reason explain stopping shooting foot kernel job fact kernel best limit size gun use aiming gun problem see policyfreedom specifically systemdesigner job ensure dangerous tool used trusted ideally proved use responsibly however stopping someone without explicit authorisation shooting back kernel job core aspect security ease use goal good mirokernel api minimal wrapper around hardware provides enough build secure performant system top consequently expect easier use bare metal usability important building practical system course way achieve providing higherlevel abstraction layer inevitably optimised particular class use case introduce policy reduce generality fine abstraction layer replaced want implement different use case see definition minimality hardware abstraction goal api obvious hw abstraction support ease use introduces overhead also hide detail important case example memory management different architecture specify different pagetable format trying fit abstraction would inevitably lose detail prevent system making full use whatever hardware support may obvious example would architecture use hashed page table certain version power architecture forcing hierarchical pagetable structure would imply inefficiency presently supported architecture use hierarchical page table could tempted ignore particular aspect even supported architecture arm riscv subtle difference semantics page table would unwise hide tradeoff like everything system principle frequently conflict meaning necessary find design represents best tradeoff especially performance verifiability frequently run otherwise attractive choice conversely performance consideration occasionally lead nonminimal feature increased pain verifier clearly principle security verification absolute sense good microkernel design still art understanding tradeoff key good result principle excellent timehonoured driver good design like like loading
132,Lobsters,osdev,OS,The Taos Operating System (1991),https://sites.google.com/site/dicknewsite/home/computing/byte-articles/the-taos-operating-system-1991,tao operating system,vp code object mailbox filefolders parallel processing taoscript gui conclusion memory management object memory management mailbox management control object management tool object management general object management global variable management processor type node identification template object management,material originally appeared march international edition byte magazine mcgrawhill publication describe tao pronounced dowse oriental religion daoism aninnovatory operating system would profound understatement fewpoints similarity operating system like msdos many observer included initially trouble believing onething tao strongly object oriented make almost distinction betweendata file executable program brings together many advanced ideasabout persistent object object oriented virtual memory dataflowprogramming one wholly novel system parallel operating systemwhich configures automatically run network distributedprocessors loadbalances incredibly still promise runexactly code different processor heterogeneous network ega mixture inmos transputers intel acorn arm offer cputransparencybefore proceeding must stress tao finished yet nocommercial port use radical feature mentioned aboveare partially implemented time writing article istherefore preview concept tao full reviewtaos developed tao system uk ltd small firm existedfor month whose leading spokesman nick spicer chrishinsley two experienced programmer different background spicerwas founder member european arm microway u firm whichspecialises highperformance floating point hardware latterly intransputer product spicer technical manager system programmerhinsley hand veteran game programmer assembler wizardwho responsible successful atari st amiga game likeverminator onslaught though writing exclusively assembler hinsleydeveloped object oriented style writing game based extensive macrolibraries provided original inspiration tao spicer addedthe parallel aspect tao based experience transputers hisdissatisfaction occam vp codeperhaps important thing understand tao evendiscussing way work designed execute virtualmachine language called vp virtual processor vp binary code ofan imaginary risclike processor instruction designed taosystems order execute vp real processor translator beprovided vp native machine code target processorthe ingenious part translation take place program load time runtime erroneous report stated aninterpreted pseudocode used ucsd psystem programmodule loaded onto transputer node get turned transputercode run whereas get loaded onto beturned intel code tao system currently committed produce translator inmos motorola see article issue acorn arm sun sparc first three beenwritten tao program loader called alex part kernel runson node parallel computer alex load program module itperforms native code translation optimization tao isextremely modular nature employ novel late binding scheme sizeof module translated small since targetprocessors powerful cpu time taken translation quitesmall alex yet completed prototype tao system havebeen demonstrated employ conventional vp assembler produce executablenative code tao system seems confident design vp instructionset writing individual translator toodifficult even unrisc like processor first point tao everything apart nativecode kernel node consists vp code including applicationsa parallel tao program consists number tool module runon mixture supported target processor without even knowing whatthey tao becomes established operating system compilersfrom c language vp undoubtedly emerge objectseverything tao object traditional oops object containboth code data tao code part called tool equivalent toa method conventional oops even would considered data filesunder conventional o object tool exampledisplay name check access right userall executable code tao contained tool tool must fully reentrant relocatable sideeffect free therefore contain staticdata tao group data code together object rigorouslysegregates code data within object tool smallest unit ofexecutable code tao think like subroutine c function pascal procedure however tool independentlyexecutable better analogy would forth word always beexecuted directly without call main programsome tool called permanent tool get loaded boot system form heart operating system tool semipermanent loaded boot time usercreated configurationprocess loaded become part operating system andcannot deactivated tool roughly equivalent devicedrivers extension loaded configsys autoexecbat pcdosfinally application tool user executable programsof tao application tool virtual nonvirtual nonvirtualtools loaded application remain memory deactivated ie quits virtual tool get loaded memory theapplication call cease execute marked asfreeable space occupy reclaimed use another toolvirtual tool quite similar concept borland vroom system dynamic link library virtual nonvirtual tool collectivelyreferred external tool name resemble pcdos orunix pathnames accessed normally cached asubsequent access need reload disk unless memory invery short supply application tao thus consists largely namedreferences external tool allowing great degree reuse code andkeeping individual executable unit smallas well external tool tao library tool local toolslibrary tool kept named library shared manyapplications like external method cached future use localtools part actual code application single uniquenames pathnames local tool always override external tool thesame name tao program started control object control object isprimarily data object sort template contains theinformation necessary load run tool make program butit also code set loading tool motion control objectroughly corresponds task process operating system willcontain list pathnames component tool stack spaceeach one requires bitmask define kind message willaccept control object executed permanent tao kernel whichresides node parallel system load run thenecessary tool control object spawn child meansthat tao program distribute around parallel processor networkcontrol object inactivated without removed memory maythen woken control object sending mail messagesone way looking tao tool system program employ verylate ie loadtime runtime binding program assembled compiled undertaos need linked linkage occurs program run control control object recompile single toolwithout recompiling whole application even design application thatload different tool according runtime environment encountermailboxestaos message passing operating system us mailbox forcommunication process program io take place mailsystem distribution executable code every control object isautomatically given mailbox tao send receive mail anyother object whose mailing address know always include ownparents child named resource like disk drive vdu display may also include sibling measure taken record theiraddresses created kernel tao node permanentmail guardian tool handle incoming mail local object thatnode outgoing mail mail forwarded another node format tao mail message includes header contains size andtype message predefined message type including system executable code error data debugging data programmer usenumbered type make private communication two objectsthe type mask allows message guardian trap system message asexecutable code destined kernel also allows user object toprioritize way read waiting mail typethe header also contains address originator destination themessage intended recipient forwarding reply ifone requested sent mail sent inactivated object may reactivate child sender object read themessage respond immediately circumstance message mayjust sit inactive object mailbox event wakens ifsuch inactive object get removed due shortage free memory anypending mail stored object filefolder ie written disk andresent next time object loaded might also happen taossystem closed message well object persistenttaos dynamically allocates buffer receive mail message theevent enough memory create buffer guardian readsthe header discard message data reply sender themessage trashed sender retry using different route filefolderstaos store object onto mass storage medium like hard disk via mailboxsystem object called filefolders filefolder similarity toa do unix directory rather passive storage structure itis active object fact control object tool attached everyfilefolder responsible storing retrieving object folderand negotiating hardware device driver necessary forthis transfer filefolders actually instance broader categoryof tao object called filter may also process data transfer example compressing expanding transparently useri mentioned tao tool pathnames like used identifyfiles hierarchical directory system do tao cannotpermit duplication file do allows pathnames actuallyhandled rather differently do relies path command theuser knowledge directory tree content tao mustalways able automatically locate object pathname tao objectis object name rather qualifying prefix indicating itscurrent location therefore tao builtin default related objecttype tool expected default tool filefolder yourequest mystuff tao look toolsmystuff unless explicitlyspecify another filefolder path toolsmystuff actually message tothe control object tool requesting retrieve object calledmystuffin large multiuser system may multiple server device somultiple tool folder case tao add mailbox id amaster server path roughly equivalent do drive exampledicksserver toolsmystuff future object retrieved thisserver explicitly change itfilters general control object receive input mailbox aparameter string send output another mailbox destination addressfor output contained input message explained theparameter string may null may tell filter severalactions perform input filefolders one type filter infact tao application constructed taoscript command see later arejust pipeline filter running parallel passing data one theother tao dataflow operating system extending unix pipe concept toits logical conclusionparallel processingtao system seeking patent algorithm used distribute parallelprograms network processor allowed describe itin detail basically smarter enhancement floodfill type ofalgorithm take account loading processor node asmeasured number process running application like themandelbrot requires large number identical process getdistributed manner resembles water running mountain wherethe flow seek gully lowest point tao system claim thismechanism achieves high degree automatic load balancingvery crudely node know current loading nearest neighborsand control object spawn child onto neighbour leastbusy using kernel call invokes mail system transfer theexecutable vp code deadlock due circular network path avoided anincrementally created routing table remembers path alreadybeen traversed part algorithm subject thepatent ought work network topology routingtable allows message find destination mailbox routingalgorithm may hardware permitting generate multiple path two nodeswhich used alternative mail get blocked due shortage ofbuffer memory hardware failurewhen necessary eschew automatic mechanism specify theparticular node object run also invoke partiallyautomatic mechanism explicitly send number object nodebut let tao distribute example could specify process mandelbrot calculation run sending group different node network letting tao complete thedistribution tao kernel contains timeslice scheduler allows manyobjects run processor box list tao kernel call similar do bios interrupt look entry controlobject management whose name begin open get idea howdistribution achievedfrom programmer point view remote interprocess communication istransparent tao need know mailbox address remoteobject tao route message without specifying theroute tao system claim near optimal routings usually achievedtaoscriptyou interact tao via job control language editinterpreter calledtaoscribe process language called taoscript dataflowlanguage describes flow data pipeline tool specifiedby path example pas data object two tool store output data object tool executed concurrently possibly different processor bestarted data send data stream tool parameter tformatsends parameter string well data tformat tool onlyoperators taoscript used combination tocreate fork join well linear pipe resulting program inmy opinion difficult read though control construct asif taoscript control flow governedinside tool interpreting parameter string true false tell send output one object true falseaccording value group taoscript command savedas named object used single command like do batch file theordering command within taoscript program often irrelevant sincethe tool running parallel dataflow governs order oftheir executionthe guithere also simple graphical user interface builtinto tao controlobject create window object us buffer local object formaximum speed window sensitive mouse event buttonclicks dragging control object need worry windowmovement overlapping refreshing handled transparently thegui supervisor receive mouse x time data buttonclicksonly one window input window receive user input one time andthis window indicated visually change border color byautomatically brought top pile object sendmessages window define screen area area event trigger thegui monitor area sends area event back object themouse pointer enters area area range one pixel wholewindow gui also monitor area sending continuous stream x ydata whenever pointer area simple facility allow toimplement popup menu dialog boxesthe gui support color palette first color definedas ega compatible defaultsconclusionsi seen prototype version tao running inmos transputers ina pc host gui lightning fast demonstration multiplewindowed mandelbrot plot impressive indeed however nodirect experience programming completedocumentation certain part tao including alex language translator complete article went press aspect thedesign still undergoing evolution tao system claim efficiencyof parallel program distribution message routing strong andwill need independently tested parallel computer vendorsthere doubt though tao brings together many clever idea anelegant way philosophy embodies right target nextgeneration operating system emphasis persistent object dataflow reusable modular tool vp system supporting multipleprocessor type ingenious wonder operating system vendorshave tried reflect really viable astartingfromscratch o effort rewriting pc mac unixsoftware vp would clearly prohibitivetao system busy demonstrating tao number big name parallelprocessing including japan shall following progress oftaos great interestdick pountain nov box tao kernel call listed functional groupsmemory managementallocfast allocate memory block fast memory poolallocmin allocate memory block given minimum size requiredallocmax allocate memory block given maximum size requiredfreemem free memory blockobject memory managementcopynode copy objectcopyhead copy object head linked listcopytail copy object tail linked listdumplist free memory node listfreelist unalex free memory node listmailbox managementsendmail send mail messagecopymail copy mail message send copyreadmail read mailboxcontrol object managementstartcontrol start control object locallyopencontrol copy control object start locallyopenchild distribute start control object networkclosecontrol close local control objectopenarray distribute open number control object networkopenfarm distribute open multiple copy control object networkopendevice transport control object specified network node startopenremote transport control object specified network node distribution node starttool object managementvcall virtual call tool objectfindtool enquire tool available locallyopentool request tool loadflushpetl flush unreferenced tool permanent external tool listgeneral object managementvaddr obtain address embedded objectobjproc process object threadlistproc process linked list object threadlisttest list enquiry type objectslistinfo enquire general list informationglobal variable managementdeclare declare named bit integer value child control objectsenquire obtain bit value declared variable name family treeundeclare locally remove last instance named variable declaration declaration stackprocessor type node identificationfindtype enquire processor id processor node conforming specified processor type minimum memory requirementlocal timer functionsgettime obtain local processor timer countdelay timed descheduletemplate object managementalex convert template process readyunalex invalidate process ready status object
133,Lobsters,osdev,OS,Hacking Unikernels Through Process Injection [A Step by Step Guide],https://hackernoon.com/hacking-unikernels-through-process-injection-a-step-by-step-guide-oobk323f,hacking unikernels process injection step step guide,hacking unikernels process injection step step guide lot people mistaken notion unikernels unhackable characteristic untrue absolutely hackable depending deployed configured post exploitation nanos process injection createremotethread attacking linux ptrace ahem shmopen memfdcreate memfdcreate ghostcat exploit pocs exist userland exec grugq capable one libreflect nanos,hacking unikernels process injection step step guide lot people mistaken notion unikernels unhackable characteristic untrue absolutely hackable depending deployed configuredthe reason notion exists however represent stark departure traditional attack really force attacker earn living attacking linux box still incredibly easy feat system basically designed said traditionally speaking pure shellcode attack attack built rop gadget limited use end day really act way opening door house still want steal gun money happens post exploitation really want execute different program kind one exploiting otherwise point attacking begin lot people gloss fact program preferably come form shell least something like mysqldump monero cryptominer rage past year something nt want stuff entire mysql client payload written shellcode rop gadget really feasiblethe trouble unikernels single process definition nt inherent facility inside kernel run multiple process although many implementation nanos included allow access thread might want need still performance mean ca nt forkexec run cryptominer support kernel soso even discover vulnerability inside unikernel go running program want run process injectionvxers botnet lord long used method process hollowing process injection hide obfuscate evade detection dropping payload hundred thousand unsuspecting window boxen spread throughout world majority running form virus protection canonical way looking malware scan called ioc indicator compromise go blog section endpoint protection company look research article typically hash file ip showing iocs malware researching prove detect remediate itthis catch lot low quality malware technique like process hollowing process injection hand act like good boy scout burner leave trace filesystem sometimes referred memory attack window made feature pretty straightforward exploit call createremotethread exactly sound likehowever reading article probably nt care window lost cause unbeknownst poor city government suffer ransomware modern infrastructure run linuxattacking linuxa lot people aware technique window linux well actually start running new program without fork without spawn one shell also would use fork see linux launching new process typically entail running fork execng everyone know unikernels nt support fork people nt realize nt support exec eitherlet look method could use linuxone method includes using ldpreload shared library override code process want run although implies thingsone implies starting process local access two existing process classic process hollowing basically spinning innocent program loading parasite running letting rest system seem like everything okanother method us ptraceptraceptrace one syscalls get overly abused lot different thing ahem gvisor ahem technique pretty simple take shared library inject via ptracegood thing almost guaranteed capability turned whatever box currently check verify though via proc procsyskernelyamaptracescopenewer method abuse shared memory shmopen although many environment devshm mounted noexec verify whether case grepping mount output mount grep devshm tmpfs devshm type tmpfs rw nosuid nodev see recent ubuntu box bionic pulled meaning vulnerable attackmemfdcreatethis brings u memfdcreate technique technique allows u create anonymous file stuff program exec let take look thislet say control vulnerable webserver attacked maybe recent ghostcat exploit like inject small little parasitical program host process way nt leave thing disk print process id see find binary disk know executing normally state running memory include stdioh include unistdh int main int argc char argv printf parasite process id dn getpid file parasite fopen argv r parasite null printf running memory n sleep else printf execing diskn return let take look theoretical payload run webserver would look like example load program locally disk could well deliver via http say image upload form mean like pocs exist thisnow get loaded show proc however see name process whatever want disguise something germane simply issue call exec define gnusource include unistdh include syssyscallh include linuxmemfdh include errh include stdlibh include stdioh int main file f unsigned char bin long filelen printf original process id dn getpid f fopen parasite rb fseek f seekend filelen ftell f rewind f bin unsigned char malloc filelen sizeof unsigned char fread bin filelen f fclose f int fd fd syscall sysmemfdcreate mfdcloexec err memfdcreate write fd bin filelen sizeof char char binpath asprintf binpath procselffd fd char argv null char envp null execve binpath argv envp free bin free binpath run linux see successfully injected process eyberg box scratch main original process id parasite process id running memory running memory grep process id also find name changed attack definitely work linux box slightly paranoid lock thing since nt exec look optionsuserland execpeople tried route around limitation thousand different way notably originally explored grugq basically concept rewrite exec userland many rewrite since capable one broken due stack smashing protection recent one libreflect lot userland exec find online going work environment variety reason wo nt transferrable unikernel unikernel old based nanos run code work statically linked binary binary linux nowadays dynamically linked issue stack smashing defaultthere thing preventing working nanos today including fact nt proc said attack unikernel one way gosubscribe get daily roundup top tech story
134,Lobsters,osdev,OS,The Making Of Android for iPhone,https://projectsandcastle.org/history,making android iphone,adventure year making iphonelinux decade later http linuxoniphoneblogspotcom http githubcomplanetbeingiphonelinux power virtualization linux kernel android,adventure year making iphonelinux decade laterover ten year ago cofounder david wang planetbeing chris wade cmwdotme started project port android original iphone view original project http linuxoniphoneblogspotcom check original code base http githubcomplanetbeingiphonelinuxthis original project took year complete input many top io engineer world today able achieve latest version android sophisticated iphone model le monththe power virtualizationwe would able port android nearly quickly without relying corellium revolutionary mobile device virtualization platform platform creates softwarebased model mobile device hardware enabling user run armbased operating system armbased enterprise server groundbreaking advancement empowers engineer scalability efficiency innovative new tool research testing training development purpose leveraging virtual device along deep knowledge android o iphone hardware able rapidly iterate bring android life linux kernel android port start working stable linux kernel kernel flexible design accommodate almost quirk target hardware driver another matterthe phone chose adventure share peripheral block device supported linux one share generally customized fortunately corellium vms model soc early kernel port involve real phone vm nice fast debugger number logging patching facility improve kernel bringup importantly really fast reboot enable linux kernel loader vms course first thing need print first driver uniquely modified uart share heritage uarts samsung series socs run unmodified driver linux kernel spi controller similar story also inspired samsung compatible driver kernel tree designed sort application support interrupt driven transfer write driver interesting heritage block neither samsung derivative common synopsys designware core instead derived clearly pasemi product pasemi driver kernel tree capable interrupt operation generally somewhat unfinished wrote socs family share unique nonstandard interrupt controller called aic arm device running linux pretty much always use one arm gic standard compliant controller familiar since shared model well server corellium run additionally equally nonstandard manner socs deliver timer interrupt via socalled fiq path nearly forgotten feature old arm time completely unsupported linux build fiq support scratch replacing interrupt controller driver armed power vm debugging though soon found ramdiskbased command prompt peripheral device like rtc gpio supported however vms constructed without access real hardware corellium supported phone exploit announced would occasionally run surprise checking real device cheerful preboot hello world handcoded startup code assembly ran first one turned processor core nt merely support page actually require linux kernel however took stride soon switched page size configuration option happy run another unexpected delay happened tried bringing second cpu core arm system use one two mechanism polltable boot cpu write start address another cpu special memory location psci asks bootloader start another cpu portable manner vm model knew case instead pair magic mmio register used set boot address bring cpu poweroff state know boot address register would let written per system start needed keep unlocked boot process able write linux got real device interactive ramdiskbased shell moved bring complex pci express interface initial bringup virtual machine let u write driver without dirty hand real hardware register writes perform lowlevel adjustment verified physical phone short day nvme storage chip visible lspci corellium vm us generic standardscompliant nvme model created system nvme storage add specific quirk better model variant used fundamentally nvme model quite complete proven slightly subtly wrong actual nvme chip would fail writing large block memory via regular dart iommu instead data read flash get section zero ram switched memory access littleknown nvmmu feature present far linux concerned nvmmu basically another iommu optimized quickly creating removing contiguous block bus address mapped system ram turned soon switched dart nvmmu zeromemory issue disappeared working flash access android corellium built considerable amount experience android supporting multiple virtual model build firmware physical phone model model hardware android device share one characteristic memory page fact page size built android many place point vm running page size kernel would catch assumption missed pretty much instantly still laborious fix eventually probably found could see android logo screen give way familiar aosp launcher seen many time unfortunately android developer enshrined page size build system breaking convention thirdparty application containing binary library built small page able start android port need rebuilt intrinsically hard one two commandline option ca nt done apk le limiting lack code support platform android day requires support pure system application developer system still moldy chunk code unexpected place forced build resulting may first pure android device around experiment tried one vm server day corellium android vms support code even server thanks transparent binary translator hypervisor finish android port added support touch controller wifi chip touch controller complex interface unlike broadcom wifi device driver linux device share need load firmware firmware loaded directly phone flash memory stored unusual filesystem called apfs driver mainline linux kernel fortunately group linux hacker direction ernesto fernandez working implementing kernel driver extend driver adding support compressed file concurrent mounting subvolumes end customized android build pleasant launcher openlauncher built signal app flash image
135,Lobsters,osdev,OS,Introduction to SerenityOS GUI programming,https://awesomekling.github.io/Introduction-to-SerenityOS-GUI-programming/,introduction serenityos gui programming,serenityos smallest possible gui program let add window let add button conclusion application game demo libgui source code,post give quick intro basic gui programming serenityos hello friend let cut chase go straight code smallest possible gui program include libguiapplicationh int main int argc char argv gui application app argc argv return appexec program creates gui application object enters main event loop nothing interrupt c detail gui application created stack main exist throughout program lifetime reached globally gui application let add window include libguiapplicationh include libguiwindowh int main int argc char argv gui application app argc argv auto window gui window construct window settitle window window setrect window show return appexec program creates window set title screen location size display window screen enters main event loop detail window represented gui window inherits core object foundational building block serenity userspace programming environment core object referencecounted constructed using construct helper value get back referencecounting smart pointer case nonnullrefptr gui window let add button include libguiapplicationh include libguibuttonh include libguiwindowh int main int argc char argv gui application app argc argv auto window gui window construct window settitle window window setrect auto button window setmainwidget gui button ok buttononclick appquit window show return appexec program creates gui button widget make main widget window install callback onclick hook call gui application quit clicking button exit event loop terminates program detail window main widget root widget tree fill space window follows along resizing main widget owned window include libguiapplicationh include libguiboxlayouth include libguibuttonh include libguilabelh include libguiwidgeth include libguiwindowh int main int argc char argv gui application app argc argv auto window gui window construct window settitle window window setrect window show auto widget window setmainwidget gui widget widgetsetfillwithbackgroundcolor true widgetsetlayout gui verticalboxlayout widgetadd gui label hello widgetadd gui button friend return appexec program us generic gui widget window main widget assigns layout libgui currently offer two layout horizontalboxlayout verticalboxlayout layout assigned widget manage location shape widget immediate child add two child main widget label button causing get laid vertically insertion order label top button detail using layout system optional preferred due simplicity also possible place size child directly calling gui widget setrelativerect x width height build complex user interface layout nested arbitrarily adding layout child main widget etc widget size policy preferred size used adjust layout widget child final example let make something little include libguiapplicationh include libguipainterh include libguiwidgeth include libguiwindowh class mywidget final public gui widget cobject mywidget private mywidget virtual void paintevent gui paintevent override virtual void mousedownevent gui mouseevent override vector gfx point mpoints void mywidget paintevent gui paintevent gui painter painter painterfillrect rect gfx color white painterdrawtext rect gfx textalignment center gfx point lastpoint auto point mpoints painterdrawline lastpoint point gfx color red lastpoint point void mywidget mousedownevent gui mouseevent event mpointsappend eventposition update int main int argc char argv gui application app argc argv auto window gui window construct window settitle window window setrect window show window setmainwidget mywidget return appexec program defines custom gui widget subclass called mywidget implement behavior mousedown paint event click somewhere window draw line last place clicked new place clicked serenityos gui eventdriven logic widget handling event following virtual function gui widget overridden handle specific event virtual void changeevent gui event virtual void childevent core childevent virtual void contextmenuevent gui contextmenuevent virtual void doubleclickevent gui mouseevent virtual void dragmoveevent gui dragevent virtual void dropevent gui dropevent virtual void enterevent core event virtual void focusinevent core event virtual void focusoutevent core event virtual void hideevent gui hideevent virtual void keydownevent gui keyevent virtual void keyupevent gui keyevent virtual void leaveevent core event virtual void mousedownevent gui mouseevent virtual void mousemoveevent gui mouseevent virtual void mouseupevent gui mouseevent virtual void mousewheelevent gui mouseevent virtual void paintevent gui paintevent virtual void resizeevent gui resizeevent virtual void showevent gui showevent detail cobject macro used core object subclass insert shared functionality preprocessing stage call gui widget update mousedownevent cause widget repainted internally sends invalidation rect windowserver program let u know time paint time come get call paintevent paint widget however like conclusion today hope gave idea gui programming done serenityos would like know recommend looking many application game demo also handy look libgui source code note system various library constant development may longer accurate time read come talk u serenityos freenode irc network find bug question thank stopping next time
136,Lobsters,osdev,OS,Install & Configure BeOS R5.1d Using Oracle VirtualBox,https://socket3.wordpress.com/2020/03/01/install-configure-beos-r5-1d-using-oracle-virtualbox/,install configure beos using oracle virtualbox,setting virtual machine ok installing beos agree setup partition setup intel partition ok proceed setup file system initialize mount begin quit regaining colour disk cache workaround altf mode diskcachesize dodgy sound sound nonetheless destination expand connecting outside world thought better use beos site like,beos despite generally long forgotten aware first place interesting past frenchman named jeanlouis gassée held senior position apple one point become head product development macintosh steve job left staunch supporter apple believed company continue focus premium end personal computer market people prepared pay macintosh experience fine point though affordable ibm pc clone window approaching increasingly becoming unsustainable end decade corporate politics disagreement ceo john sculley led jeanlouis exit steve job left apple undeterred leading found next inc jeanlouis followed similar path founded inc also developed proprietary hardware operating system beos first run hobbit based hardware risclike processor developed never made commercial success long beos moved across support powerpc hardware came bebox dual powerpc machine running either mhz bebox rather unique time number io port back suggesting use targeting professional audio video production sale bebox abysmal around unit sold worldwide financially going red move open support powerpc hardware power macintosh hope apple come along fat cheque apple mid seeking new generation operating system copland project turned mess apple consequently considered though offer provided close asking price excess million u ultimately apple paid acquiring next instead sense however deep apple paid higher price win back steve job either presentation skill bind stay afloat early beos ported across hardware increase exposure spark interest enough final version leaked online upon demise palm inc acquired paltry million u would seem palm care factor leaked interested bringing additional engineer payroll legacy beos continues open source form haiku worth checking like explore niche operating system guide running oracle virtualbox iso image file beos dano sourced online setting virtual machine firstly interest done comparative test virtualbox vmware workstation pro long time since touched beos sure well would run virtual machine vm ideal setting two vmware workstation clear winner speed installation responsiveness configured could comfortably run x display resolution hand virtualbox needed extra time loading startup would work x resolution support colour creating new virtual machine virtualbox beos option select went otherunknown option selecting operating system wizard ram hard disk capacity went mb gb respectively beos difficulty addressing gb ram crash frankly tangible value given thin application support hard disk also stumble past gb range apparently using ide controller get past using scsi best alternative gave shot following option selected essentially would set window system acceleration tab deactivate vtxamdv nested paging display scale factor default useful enlarging low resolution output modern resolution display desired display graphic controller use vboxsvga storage add floppy controller use ide controller type work although apparently provides speed boost audio audio controller use ich soundblaster another option although personally found beos le stable network adapter use bridged adapter intel mt desktop usb set usb controller usb whilst still setting dialog box vm may mount beos boot floppy disk image iso cdrom image running done select ok close dialog box installing beos boot floppy disk iso image mounted initially see beos splash screen starting vm moment greeted end user license agreement select agree duration installation process screen remains monochrome mouse movement tends slow thanks incompatibility virtualbox vesa implementation next step really sorting hard disk initially installer window shown select setup partition expanding option window display known drive setup vague resemblance mac o x disk utility listed see minimum three device floppy hard disk cdrom drive select device list beginning select setup menu choose intel partition submenu dialog box appear cover file system partitioning hard disk keeping simple select make partition active file system empty beos layout submenu select partition select ok confirm configuration warning message pop changing partition cause data destroyed select proceed beos installation process returning back drive setup hard disk would expanded list device reflecting partition select setup menu choose file system via initialize beos submenu dialog box appear select file system block size name volume left block size default though elsewhere read use instead either option fine select initialize asked whether mount partition select mount previous step done drive setup know detail displayed file system volume name column close drive setup either selecting top left square window via mount menu returning installer window onto option show newly formatted hard disk instead stating volume select begin installation beos commences notice various file copied cd image though blurb image look greatest version yet eventually prompted whether install boot manager select setting multiple operating system installer state installation successful unmount floppy disk image select quit reboot vm go well beos successfully load desktop albeit warning message display beos installed keen first virtualbox virtual display adaptor regaining colour disk cache workaround familiar setting window find process installing driver bit unconventional first thing sort display see thing colour side effect mouse perform substantially better beos desktop press key combination altf bring find feature search vesa return search result small file named appear repeat previous step search driver separate window returning result one needed folder located boothomeconfigsettingskernel vesa file doubleclick path location driver search window doubleclick folder located aforementioned path way beos operates clicking file folder directly open clicking path open file folder located instead opening destination window display showing content sample driver folder returning search result aim copy vesa file driver folder circled ideally make copy vesa file driver folder though reason proved difficult draganddrop beos default move file disk volume alternative method rightclick file go several submenu via copy option context menu file copied moved across doubleclick open add third line file mode save change following parameter set beos operate x resolution colour whilst repeat previous step kernel file kernel file assist video output sort disk cache bug workaround enter line per screenshot stating diskcachesize save change change take effect select beos logo top right corner choose restart personally found beos unreliable restarting session worst case scenario close vm completely start setting disk cache overcomes beos disk cache bug back beos desktop appear similar dodgy sound sound nonetheless mounting floppy disk image order get sort sound capability went search located sound blaster driver initially beos subsequently placed driver onto floppy disk image worked though tendency cause stability issue whilst testing worse sound blaster used instead part vm configuration experience may vary official driver manufacturer mounting floppy disk image virtualbox also need mount within beos matter rightclicking blank area desktop selecting floppy option mount submenu floppy disk appear another icon desktop doubleclicking zip file default open expandomatic similar program free version stuffit expander commonly found macintosh first select destination point extracted file desktop easy access followed expand extracting sound blaster driver desktop extracted file one named required move file across driver folder located within boothomeconfigaddonskernel next time boot beos hear startup sound connecting outside world thought similar manner extracted network adapter driver floppy disk image folder desktop ran installsh script file easy installation turned grinding halt reference installing later version beos online tend refer version codenamed maui using codenamed dano per following screenshot next step access network preference menu problem network option select installed intel network adapter driver went look back cd image proved fruitless released product speculate network feature ready network preference gist set static ip address add dns server google instance discontinued thought connecting home network better use beos cpu fix created sort timing issue faster processor beos also proved incompatible proceed safe suggest rounded reliable experience beos stick upgrade via patch step shown much decide give try despite obscurity operating system day handy resource online easy read guide setting beos virtualbox also bit software driver available site though doubt actively maintained aim repository specific beos like like loading
137,Lobsters,osdev,OS,openkick: incomplete implementation of AmigaOS's exec.library,https://github.com/mooli/openkick,openkick incomplete implementation amigaos execlibrary,openkick amigaos execlibrary written aros abandoned based recent amigaos source leak ever restarted completed,openkick incomplete implementation amigaos execlibrary provided educational purpose able get compile asis partly need peculiar toolchain mostly redact code written openkick exists took one look aros source code nt like way still c amigaos objectoriented microkernel rage day felt would instructive implement modern language style see code would readable faster andor smaller original amigaos andor aros feel win readability got documentation start generated code size performance read abandoned gcc sucking basically modern compiler support support awful getting worse new release amigaos calling convention place library base parameter register whereas gcc want use frame pointer pas parameter stack cause number issue stack access require nnn operand add extension word two byte per access encode nnn register encoded instruction word make code larger add extra memory access extension word data pedant doubt point extension word required nnn zero return address parameter start implementation library function must take register parameter requires either thunk disgusting hack trick gcc believing parameter magically already register gcc optimiser keep breaking hack defeating also make code much le optimal call library function requires temporarily moving frame pointer way library base placed waste execlibrary function adding ten byte per function quickly add several kilobyte weighs heavily library start clearly project pushed completion would fit space available rom would slow based recent amigaos source leak started way back poked occasionally pretty much gave well leak written based commodore published api documentation aros source disassembling kickstart last resort something still unclear existence leak merely prompted dig ancient code publish hardware bare metal early startup incomplete cpufpu detection per romwack function except debug eg rawdofmt rawioinit list function eg enqueue c template library typesafe list handling memory ram test arena initialisation function eg allocabs availmem extension memfkick extra debuggingtest hook library romtag scanning automatic library initialisation function eg setfunction openlibrary task stub dummy task keep uae debugger sweet redacted custom testhook bring framebuffer print diagnostics since embeds topazfont ever restarted completed maybe llvm ever gain reasonable support nt hold breath
139,Lobsters,osdev,OS,The ReiserFS filesystem,http://p-nand-q.com/download/rfstool/reiserfs_docs.html,reiserfs filesystem,reiserfs filesystem wwwnamesyscom gerson kurz need know start superblock reiserfsfssbh usedfree block bitmap many bitmap block finding first bitmap block finding next bitmap block btree find item key key used reiserfs distinguish key type compare key block handling standard block header internal node leaf node directory item large directory stat item stat version stat version direct item indirect item,reiserfs filesystem document describes reiserfs filesystem structure disk created writing reiserfs reader window nt unsatisfied documentation available official url wwwnamesyscom wrote since first contact reiserfs contain error doubt please consult original spec first document copyrighted gerson kurz licensed gpl need know start assumed know partition layout start partition byte size partition byte partition indeed reiserfs partition following typedefs used unsigned integer unsigned integer unsigned integer superblock superblock root information reiserfs filesystem lie fixed offset start partition reiserfsdiskoffsetinbytes superblock defined reiserfsfssbh following structure struct reiserfssuperblock sblockcount sfreeblocks free block count srootblock root block number sjournalblock journal block number sjournaldev journal device number since journal size currently define header file someone creates disk journal move system journal default overflow journal mount disk sorigjournalsize plus check mounting inside journalinit prevent happening great comment chris thanks han sorigjournalsize sjournaltransmax max number block transaction sjournalblockcount total size journal change time sjournalmaxbatch max number block batch trans sjournalmaxcommitage second old async commit sjournalmaxtransage second old transaction sblocksize block size soidmaxsize max size object id array see getobjectid commentary soidcursize current size object id array sstate valid error char smagic reiserfs magic string indicates file system reiserfs shashfunctioncode indicate hash function use sort name directory streeheight height disk tree sbmapnr amount bitmap block needed address block file system sversion prefer string something like maybe byte long mostly unused nt need save byte superblock han sreserved sinodegeneration char sunused zero filled mkreiserfs attribute packed familiar gcc compiler attribute packed mean aligned information sblocksize vital reiserfs data organized block block size byte rest document speak block mean kind block whatever disk information say blocksize furthermore assume define reiserfsblocksize point member note smagic contain either reiserfs usedfree block bitmap filesystem need know block used free free block usually unformatted block header structure described missing invalid purpose reiserfs us bitmap consists series block byte represents freeused bit example following byte ff ff ff dual mean first block used three free block two used block note bit interpretation may vary endianess system linux system use command debugreiserfs b name reiserfs partition find reiserfs interprets bitmap many bitmap block find many bitmap block looking superblock structure reiserfssuperblocksbmapnr amount bitmap block finding first bitmap block first bitmap block one block higher superblock calculate first bitmap block reiserfsdiskoffsetinbytes reiserfsblocksize first bitmap block offset byte finding next bitmap block remaining bitmap block first calculated using formula reiserfsblocksize reiserfsblocksize reiserfsblocksize n n nt ask example blocksize second bitmap block located offset byte would block btree note section informal introduction try searching web btree technical specification btree linked structure look like regular tree parent block child block turn child block distinguishing normal tree block tree identified key key anything unique compared key example one integer reiserfs series four integer important defined sort ordering key two key two key compared sorted example let imagine key decimal number compared typical integer comparison root block following key mean need three child block one key decimal range one one max let look imaginary set child block first three element child block next five one block last three anything note necessary key used example three key used range type ordering go level think default reiserfs four tree level leaf node node child reiserfs data format different internal node see section leaf node find item key algorithm informal note start top node look section larger equal desired key got go child node reach leaf node key used reiserfs note section bit lacking since nt quite understand concept used fully well two type key consisting four element directoryid objectid offset type decimal number main difference normal key four number integer key offset encoded number type number since exactly found offset mean tell difference exists key structure defined like struct koffset kuniqueness struct koffset ktype struct key kdirid packing locality default parent directory object id kobjectid object identifier union struct struct u interpreted version four integer kdirid kobjectid interpreted version four integer like kdirid kobjectid best practice expand key cpu key memory look something like definition typedef struct reiserfscpukey kdirid kobjectid koffset ktype reiserfscpukey lpreiserfscpukey way easier combine key two type distinguish key type well admit nt know sure seems like normally key type however item header ihversion specifies key type explain section leaf node think key ondisk type memory always expanded cpukey compare key need able compare key search btree well think key array integer examine integer sequentially use normal lessthan relation c function compare two cpu key make pretty clear int comparecpukeys reiserfscpukey reiserfscpukey b compare integer kdirid b kdirid return kdirid b kdirid return compare integer kobjectid b kobjectid return kobjectid b kobjectid return compare integer koffset b koffset return koffset b koffset return compare integer ktype b ktype return ktype b ktype return return block handling whole concept accessing disk data reiserfs based block necessarily relation reiserfsblock familiar concept blockssectorscylinders block reiserfs partition size specified superblock three type block formatted internal block block type used btree data contains key associated disk block described detail section internal node formatted leaf block block type used file information described detail section leaf node unformatted block unformatted block contains raw file data strictly recognize unformatted block looking unformatted block block used btree structure reiserfs strictly speaking one block type superblock special case see standard block header formatted block block header defined follows struct blockhead blklevel level block tree leaf higher internal blknritem number keysitems block blkfreespace block free space byte blkreserved dump struct key blkrightdelimkey used leaf node see formatted block leaf node looking blklevel internal node internal node element btree contains pointer node child block header key key key n ptr ptr ptr free space array key contains normal reiserfs key structure array pointer contains element following structure struct diskchild dcblocknumber disk child block number dcsize disk child used space dcreserved see pointer child node note one diskchild key familiar short introduction btrees block header contains blklevel higher value blknritem element block header specifies big array key code excerpt enumerates key associated diskchild object assume bmemory block data get pointer array key lpbyte lpbheaderdata bmemorysizeof reiserfsblockhead get pointer array disk child lpbyte lpbpointerdata bmemorysizeof reiserfsblockhead ph blknritem sizeof reiserfskey enumerate array int ph blknritem reiserfskey key reiserfskey lpbheaderdatai sizeof reiserfskey reiserfsdiskkey pointer reiserfsdiskkey lpbpointerdatai sizeof reiserfsdiskkey todo add evaluation last pointer note key reiserfsdiskkey pointer reiserfsdiskkey lpbpointerdatai sizeof reiserfsdiskkey todo add evaluation last pointer leaf node leaf node following layout block header header header header n free space data data data n block header blklevel number item given blknritem field header item header us following structure struct itemhead struct key ihkey everything tree found searching based key union ihfreespacereserved free space last unformatted node indirect item indirect item equal iff direct item stat data item note key field used determine item type thus field union contains ihentrycount iff directory item field equal number directory entry directory item u ihitemlen total size item body ihitemlocation offset item body within block ihversion old item new one highest bit set fsck temporary cleaned done ihitemlocation ihitemlen member specify data item current block section item type described detail expected analyze data located two member code excerpt enumerates item leaf node assume bmemory data current block assume ph pointer block head find start item header array lpbyte lpbheaderdata bmemorysizeof reiserfsblockhead int ph blknritem item header lpreiserfsitemhead ih lpreiserfsitemhead lpbheaderdata item data lpbyte lpbitemdata bmemory ih ihitemlocation dword dwitemsize ih ihitemlen todo add implementation skip next item lpbheaderdata sizeof reiserfsitemhead four type item leaf node directory item directory file name key stat item file information direct item content small file fit block indirect item array block number content larger file described detail type item determined looking ihkeyktype value note knowledge part reiserfs type key come use following code excerpt distinguish key assume ih pointer item header define define reiserfskey key ih ihkey reiserfscpukey cpukey cpukeykdirid key kdirid cpukeykobjectid key kobjectid ih ihversion cpukeyktype ih cpukeykoffset ih else ih ihversion cpukeyktype int ih cpukeykoffset ih else assert false code generates proper cpukey ondisk structure directory item directory item leaf node ktype represents entry directory speak directory listing nt include file stats must read separatly data look like dir entry dir entry dir entry n filename n filename filename directory entry us following structure struct reiserfsdehead dehoffset third component directory entry key dehdirid objectid parent directory object referenced directory entry dehobjectid objectid object referenced directory entry dehlocation offset name whole item dehstate whether entry contains stat data future whether entry hidden unlinked attribute packed filename zeroterminated must calculate filename size first filename begin offset dehlocation first reiserfsdehead end end item data second filename begin offset dehlocation dehead end dehlocation first dehead find many reiserfsdehead entry enumerate header start header equal last known dehlocation sound confusing first sample code take directory item disk dump filename given sizeofblock size item disk dataofblock data directory item disk allocate one byte make sure buffer zeroterminated code work int dhoffset offset file int dhstrpos sizeofblock size dhoffset dhstrpos get pointer current item reiserfsdirectoryhead pdh reiserfsdirectoryhead dataofblockdhoffset filename start dehlocation zeroterminated automatically printf name sn bmemorypdh dehlocation make next string zeroterminated bmemorypdh dehlocation max sized used loop ending criterion dhstrpos pdh dehlocation increase array offset dhoffset sizeof reiserfsdirectoryhead annotated hexdump directory block f direntry direntry direntry x direntry e p direntry profilesdefconfi gtmp see filename indeed zeroterminated properly analyzed structure read dehoffset dehdirid dehobjectid dehlocation dehstate filename tmp defconfig profile see current directory object id used directory id dependant file large directory large directory right neighbor leaf node continues directory description leaf node varies koffset example say block internal node following pointer furthermore let imagine block contains first part directory usrinclude specified key block contain directory description key large number continuation directory listing stat item stat item item leaf node ktype represents stat detail file directory stat item corresponds exactly one file one directory two type stat item mainly distinguished size memory stat version seems old stat data byte long declared following structure struct sdmode file type permission sdnlink number hard link sduid owner sdgid group sdsize file size sdatime time last access sdmtime time file last modified sdctime time inode stat data last changed except change sdatime sdmtime union sdrdev sdblocks number block file us u sdfirstdirectbyte first byte file stored direct item except equal symlink equal direct item existence field really grate let replace macro based sdsize tail suppression policy someday han stat version one used newer version reiserfs filesystem important difference large file support filesize bit size byte struct statdata sdmode file type permission sdreserved sdnlink number hard link sdsize file size sduid owner sdgid group sdatime time last access sdmtime time file last modified sdctime time inode stat data last changed except change sdatime sdmtime sdblocks union sdrdev sdgeneration sdfirstdirectbyte first byte file stored direct item except equal symlink equal direct item existence field really grate let replace macro based sdsize tail suppression policy u two comment structure member sdatimesdmtimesdctime field analyzed using standard clibrary localtime function sdmode permission unix terminology field contains file attribute window terminology direct item direct item item leaf node ktype small file contains whole binary content file large file exist nt need contains tail file indirect item indirect item item leaf node ktype large file contains array ulong value block number contain part file think index file data example indirect item might look like mean unformatted block order contain data file note last block might fully used must first determine file size sure read much data need example block size file byte long must read byte last three index note possible exists additional direct item appended file data retrieved indirect block
140,Lobsters,osdev,OS,Haiku Alpha 1: Rebirth of legend,https://isometricleaves.wordpress.com/2020/02/12/haiku-alpha-1-rebirth-of-legend/,haiku alpha rebirth legend,autumn come successor spring content like beos review one haiku alpha split several part article sector startup sector desktop exploration deskbar blue apple menu morphos inside leaf menu ii comparison menu iii configure deskbar menu box iv deskbar setting shut style first time context menu addons sector find box box find box hope enjoyed article want read referenced material http wwwbecom http wwwhaikuosorgabouthistory like,autumn come successor spring quick recap long read tdlr version intro haiku alpha series started life making software beos hardware bebox end three thing hurt struggling compete window dominion lost candidacy becoming next generation mac o end mac clone finally push internet appliance market failed technology needed make attractive consumer ahead time gone thus ash collapse aficionado beos tried keep legacy going various distribution fork max zeta really one successor lead way appearance openbeos renamed haiku later development finally reached alpha status autumn september without prologue brings u today topic haiku alpha content like beos review one haiku alpha split several part part article startup first look part application part demo part applet preference part tracker odds end shutting bonus installing haiku sector startup quick visual review last time saw beos back expdano startup screen looked like also add design date back genki compare old purple white theme fresh new look haiku present user like seen back zeta haiku decided dispense top left alignment instead opts centered boot splash like logo bottom classic boot splash haiku logo also color green orange yellow leaf notice progress bar made gray rounded rectangle block rather orb oh icon light dimmed gray color shown block load appears like one theme would standard subsequent haiku release alpha current nightly build article written next screen see booting cd one time boot live session prompted simple wish run installer continue booting desktop button desktop installer alpha support booting directly cd modern medium late also allowed booting directly desktop cd something popular distribution like ubuntu linux world max world already done offered box keep mind classic beos cd usually would boot installer see little box think haiku meshed together live cd era continuation past even though box simple haiku set precedent subsequent release nightly build like beos desktop load get nice shade blue come still day comparison last time world seen official beos desktop release maui bonus dano leaked beta beos looked like really cool way one new beos definitely check dano really much explore unique experimental decor set screen preference net feature boneyard preference spyomatic much sector desktop exploration last get back true focus review alpha subtle difference see haiku truly beos reborn deskbar like classic beos deskbar anchored top right desktop usual one chooses drag handle right side clock deskbar align edge corner version tray desk applet ever useful processcontroller clock tile running application currently tracker leaf menu new icon pleasantly blue leaf maybe make recall gorgeous blue apple menu logo mac o x though never used blue also reminiscent morphos comparison deskbar dano final beos subtle difference haiku feature gradient flat applet tray see screenshot definitely deskbar inside leaf menu since main piece deskbar let switch back haiku look inside leaf menu system find show replicants check toggle submenu mount deskbar setting shutdown recent document recent application application demo desktop applet preference enabled recent folder appear well also notice mount appear menu ii comparison menu since haiku alpha direct successor beos let compare content two menu see top screenshot haiku alpha bottom screenshot beos dano similar oh open deskbar setting get momentarily iii configure deskbar menu box inside deskbar setting submenu open soon configure deskbar menu box pretty much configure menu old beos left add new group check box toggle recent document recent application recent folder text box default showing item right popup menu menulike pane group folder finally button edit open add remove listed group always intrigued configure box made menu readily edited tracker thinking something next haiku release thankfully saw away configure box iv deskbar setting last getting deskbar setting menu alpha opt configure deskbar menu set always top auto raise sort running application tracker always first hour clock show second european date full date show application expander expand new application scroll back dano notice haiku add auto raise show application expander expand new application fold open app tile show open window list super useful something zeta featured well remember deskbar pane also leave worth noting list option would unique alpha alpha later release would add preference box special final ode option menu dano shut style also first time aware timeline haiku alpha added shutdown box like mac o system onward awesomeness mac nerd find pretty cool cue happy dance shutdown box getting either take pressing shutdown menu instead directly shutting restarting classic way link haiku moved submenu running shutdown terminal allows mapped keyboard shortcut really get closer mac feeling pressing restart key controleject context menu addons context menu tracker file manager beos haiku work across era like expect beos haiku includes drill menu allow navigating system place available also allows instant moving copying file also new icon view mini icon view clean select select finally mount addons submenu like get clean menu rather fed template nice touch one click edit template well like new menu work like window case anyone new beos haiku picture addons somewhat similar service application menu mac o alpha allow check disk usage diskusage search string text within file set desktop background modify filetype open terminal window spot zip file via zipomatic case anyone wondering mount menu list disk mount setting disk mount setting roughly two section inside one pane classic beos first automatic disk mounting automount beos disk disk radio option second disk mounting boot boot disk previously mounted disk beos disk disk radio option bottom mount disk done option look menu haiku desktop sector find box box next thing like look box haiku alpha like beos dano dichotomy quick system stats left side copyright info right left version revision processor show intel core extreme ghz memory show allocated mb total mb used kernel built september time running minute second right haiku shown dark green copyright spanning expands current date also hyperlink haiku website list current maintainer list past maintainer website marketing documentation maintainer contributor special thanks section list copyright license various open source piece used making haiku operating system element gnu project freebsd project netbsd project thing wish haiku go cool black box definitely take moment notice revision current haiku nightly revision hrev article amazing see far haiku come year since breakout release find box okay final area focus article head application demo folder next part let take look find beos dano find box looked like experimental origin decor dano widget maybe fair thing would show maui box go see beos perspective compare haiku alpha screenshot pretty much box definitely want take opportunity say look much crisper remastered query icon control look alpha extension also really show two ui design haiku aim model rather dano said let look rest little button top left find box look like classic mac restart key reverse top row query menu showing default query option save query template next file folder menu allows choosing file type search noticeable welcome difference dano file folder menu long list mime type definitely make searching bit pleasant huge kudos haiku developer decided get organized category application audio image text video like beos search name attribute formula one would see back dano fourth menu third counting menu text disk popup allows changing search scope particular disk like haiku enough looking around text box let search something already made text file called maui fun since name searching shown haiku find document almost instantly make query refer later search beos would start alpha haiku really versatile powerful definitely look detail get alpha file menu standard tracker menu go tracker part review query result window get edit query option identical one would beos open window menu get resize fit select select invert selection close dano added invert selection option result window attribute include check option name size modified created kind location permission believe new haiku alpha remember dano option copy layout paste layout finally like classic beos query stored inside folder home folder would boothomequeries shown maui query default query one last note definitely want say notice detail icon first release really see love went every detail opening look haiku alpha please join next part review taking look haiku alpha application set demo hope enjoyed article like work want help get stuff please link follow page support patreon want read feel welcome visit list article referenced material incorporated welcome incorporated january http wwwbecom haiku project project history http wwwhaikuosorgabouthistory like like loading related
142,Lobsters,osdev,OS,Shrine - A TempleOS distro for heretics,https://github.com/minexew/Shrine,shrine templeos distro heretic,shrine setting networking package management function output see building source see,shrine shrine templeos distribution aim modern approachable shrine aim improve upon templeos several aspect approachability shrine ship lambda shell traditional unixlike command interpreter connectivity tcpip stack internet access software access shrine includes package downloader versatility unlike stock templeos shrine requires ram making feasible cloud microinstances similar setup note planned currently true software included shrine mfa minimalist file access lsh lambda shell pkg package downloader wget setting networking native stack highly experimental configure vm networking adapter type pcnetpci ii qemu netdev user device pcnet attached nat seems reliable setting bridged mode also work somewhat boot shrine automatically attempt acquire ip address nt get message configuring network adapter detected enable tunelled networking snail configure vm tcp server virtualbox server uncheck connect existing make sure disable networking vm otherwise native stack get precedence start vm run snailpy able access internet try example pkglist enable file access mfa configure vm follows configure vm tcp server start appsmfahcz vm host use mfapy transfer command file example mfapy list appsmfahcz mfahc used simultaneously package management function note lsh use pkginstall xyz place pkginstall xyz etc pkglist list package available repository pkginstall packagename download install specific package pkginstallfromfile manifestpath manually install downloaded package manifest must reference existing isoc path pkgmakefromdir manifestpath srcdir build package directory content example manifest check manifest must reference valid isoc path used output pkgmakefromfile manifestpath filepath build package single file see detail see information package work building source see
143,Lobsters,osdev,OS,500 Byte Images: The Haiku Vector Icon Format,http://blog.leahhanson.us/post/recursecenter2016/haiku_icons.html,byte image haiku vector icon format,haiku problem space icon iconomatic documentation irix iconomatic documentation haiku developer care size icon file implementation detail couple post example magic number little endian style path shape conclusion acknowledgement,haiku us custom vector image format store icon surprising os consider bitmap totally sufficient represent icon plenty vector graphic format eg svg goal haiku vector icon format hvif make vector icon file small possible allows haiku display icon several size still keeping file small enough fit inode ie inside file metadata goal keeping icon metadata reduce disk read needed display folder allows file require one disk read display blog post examines detail hvif format using hex editor canonical parser source code process dissecting example icon also show optimization bug icon image editor problem space icon hvif designed especially icon appear look file folder include file desktop special folder file icon associated based file type os use thumbnail pdfs common image type hvif focused symbolic abstract icon file preview icon often represented bitmap beos took fairly standard approach two icon size pixel represented icon two bitmap one size bitmap array pixel color without metadata meaning given pixel resizing involves applying transformation somewhat blindly general creates distortion making image blurry pixelated small known set size icon size created separately image stored separately well two bitmap file small bitmap byte bitmap total byte per icon icon getting bigger since beos developed modern os icon even add icon move total byte per icon jump size doubling edge quadruple number pixel thus storage space needed image image iconomatic documentation besides bitmap major option representing image vector format haiku us vector icon irix used vector icon even mainstream linux desktop like gnome kde use vector icon vector representation work best image decomposed line color gradient good fit abstract style common icon one big advantage vector format easy resize know shape supposed ie circle render small large without distorting mean need one file per icon matter many size want render icon image see icon rendered three different file format bitmap two vector format bitmap adding larger size make big difference file size vector image file size remain constant new icon display size introduced see bitmap need different file different display size bitmap blown larger size becomes dramatically pixelated vector image scaled look good native size drawback using vector image take longer render vector image bitmap basically need turn vector image bitmap size want display screen image iconomatic documentation promise vector format icon one file could used represent display size without loss clarity one file rather three could save work icon artist maybe save file size however work web image probably know svgs vector file format always smaller bitmap format like pngjpg image bitmap fairly predictable size based number pixel image number color pixel take vector image file size based complexity image take space store linecolorgradient space store complex line term size hvif image compare well beos bitmap realworld icon tend byte also make one byte bit byte much smaller storing even bitmap also smaller vector format eg svg small size achieved using binary file format designed save space unlike svg plaintext xml format part space saving design involves placing limit complexity file eg path haiku developer care size icon file one kilobyte pretty small amount memory modern hard drive even ram like million even ten thousand icon one operating system care especially small icon file allows optimization make displaying file folder faster use standard bitmap icon format probably store file separate file use order display file folder operating system need read metadata file including name file type read icon file file type icon file small could store place file metadata could save read hard drive could get metadata icon one read saving one read per file sound exciting one however reading disk among slowest operation cpu cycle quarter nanosecond read ram nanosecond read relatively fast modern ssd microsecond nanosecond read slow disk millisecond nanosecond read disk dominate time take display file folder could significant performance gain halve number disk read even rendering vector image take longer rendering bitmap implementation detail interesting part file format small really wanted learn nittygritty detail work couple post stephan assmus creator file format one cover key detail format save space unfortunately post include enough detail satisfy curiosity used parser source code sample hvif file hex editor learn example constructed file iconomatic application creatingediting hvif file two shape letter h top blobby shape h white blob color gradient blue red rest background canvas blanktransparent h scaled original size take space benefit simple logo examine small byte line hex editor haiku hex editor right byte interpreted ascii character nonprintableinvalid character middle byte file printed hexadecimal pair character eg one byte line show byte left character count hex would respectively decimal thesis character count act like line number counting number character came character countline number binary format much harder human read plain text format deciphered file reading parsing code read file file style path shape section shape come last combination style one path overview byte mean first four byte magic number identifies hvif file letter ficn chosen represent flat icon three section yellow blue green section appear every hvif file one start count object section file yellow section two style flat white red blue gradient blue section two path outline h outline blob green section two shape combine style path make white h colorful blob shape h also transformation matrix scale magic number parsing file help able tell right away type expecting first four byte devoted common binary file format letter ficn appear hex editor ncif magic number single written little endian order determines ordering byte littleendian least significant byte n go first significant byte f go last style style gradient flat color shape one style used fill shape colorgradient pattern order get example color gradient made h flat white blob gradient first byte section tell u two style first style start right style start style type byte tell parse rest style style include least one color gradient color also property flat color hvif represents color argb color four channel alpha opacity red green blue channel take one byte represent first style flat white represented ff know style long already parsed explaining file otherwise look first byte style type interpret rest object stylespathsshapes hvif variable length allow object simple common specialcase format like one stored compactly first byte style type corresponds enum parser code enum cc let give numeric value name often used way assign different value related set name like style type five possible style type styletypesolidcolor styletypegradient styletypesolidcolornoalpha styletypesolidgray styletypesolidgraynoalpha flat white styletypesolidgraynoalpha tell u flat color gradient gray meaning red green blue channel equal completely opaque alpha value lot information put one bit leveraging overly specific type pack common case bit important keeping file small flat color defined one argb color alpha value given type noalpha redgreenblue value given second byte ff three color channel set argb represents pure white already done first style paddingdelimiters hvif would use space instead go straight second style gradient blob byte second style ff ff based enum styletypegradient like type value easily human readable file gradient start gradient type gradient flag gradient stop count one byte gradient type used another enum parser interpret enum gradientstype gradientlinear gradientcircular gradientdiamond gradientconic gradientxy gradientsqrtxy enum start zero increment one new name match fourth name gradientconic actually need understand parse style gradient type affect rendering structure file every gradient color start stop different place ie start opaque argb color eventually become transparent gradient type determines renderer fade color next byte gradient flag affect parsing many hvif object flag byte near beginning allows space saving similar way various flat color type bit flag byte meaning determined another enum gradientflagtransform gradientflagnoalpha yet used gradientflaggrays byte bit fact one bit mean one flag set flag checked using statement like gradientflags gradientflagtransform resulting value anything greater zero truethe flag set flag value one one set one whose value mean gradientflagnoalpha set one leftshifted twice flag mean alpha value color gradient completely opaque may noticed flag value start continue using bit due enough flag need fine seems odd used explanation gradient color include alpha value opaque next step look stop count find many color case two color byte stop offset plus red green blue byte first color ff mean stop offset zero color red second color ff stop offset blue end gradient since parsed two style end style section path path section da da da da de ba biggest section file mostly point path need encoded plus even point curved section blobpath path made line segment segment straight curved h path entirely straight line blobpath mix straight line curve let show two different way path encoded difference offer space saving like complexityincreasing encoding choice first byte say two path path start path flag byte point count first path flag point count flag care pattern bit rather value hex binary two flag set since two need another enum decode mean pathflagclosed pathflagusescommands pathflagnocurves flag byte work way gradient style flag byte pathflagclosed pathflagnocurves true path pathflagclosed direction renderer please connect last point first one line flag affect parsing pathflagnocurves mean straight line path important flag set pathflagusescommands false mean path encoded list point worry command yet path straight line segment defined one x point point count hex meaning first point da composed x coordinate coordinate da coordinate byte point byte first path point happen byte x byte coordinate encoded special number format designed hvif format allows integer value range represented one byte integer value range represented two byte noninteger value represented using two byte range first bit first byte coordinate coordinate take one byte take two byte get value one byte coordinate interpret byte subtract get value two byte coordinate set first bit interpret two byte divide result subtract code read one coordinate readcoord bool readcoord littleendianbuffer buffer float coord value bufferread value return false value high bit set next byte part coord lowvalue bufferread lowvalue return false value coordvalue value lowvalue coord float coordvalue else simple coord coord float value return true range onebyte integer twobyte integer documented elsewhere code seems source interpret twobyte coordinate coordinate floating point number implementation think essential format range coordinate initially confused would range like instead centered important point remember core range coordinate actually native canvas thus center range natural center coordinate system bit available one byte minus flag bit room value adding value side core range end quick way check whether range might sized take given number bit adding endpoint ie format actually make parsing xy coordinate hand pretty easy trying understand every single number figure part first bit say whether coordinate one two byte hex editor letter pair start letter f reading coordinate quickly figure one two byte move forward try determine value interesting useful point point da da da da even without turning byte decimal number clear line segment vertical horizontal sure iconomatic chose store path way hvif special spacesaving way store horizontal vertical line segment special line segment stored one coordinate rather two basic line segment using horizontal vertical segment type require changing type path linesonly path curvesonly path segment one time command path allow segment path different type four supported segment type line cubic curve horizontal line vertical line command byte near beginning path point count first point contain tag segment path path would need three command byte bit per point point bit per byte byte simple linesonly path requires point byte per point byte represent point command path would need byte represent segment type byte represent point point segment type line da vertical line horizontal line vertical line da horizontal line vertical line horizontal line vertical line horizontal line vertical line horizontal line vertical line da total byte used using different path type would save byte huge difference seems relevant canonical implementation file format designed save space make sure confused way command path would represented file going edit file change representation one path one thing figure jumping editing format command byte looking command byte parsing code command read right left within byte judging parsing code pair bit match segment type pathcommandhline pathcommandvline pathcommandline pathcommandcurve command byte would hex assuming byte read left right bit within byte read right left also need change flag byte curve closed command closed wanted set curve command closed work due ordering statement parsing code pathflags pathflagnocurves readpathnocurves buffer path pointcount error true else pathflags pathflagusescommands readpathwithcommands buffer path pointcount error true else readpathcurves buffer path pointcount error true code h path change da da da da da da da addition logically representing path ie end point series line segment file path changed also look identical original icon using spaceexpensive way storing path seems like bug iconomatic minor one case could probably fix since iconomatic opensource like rest haiku let get back substance post understanding image format seen command path second path easy understand command path new feature us curve curve hvif cubic curve one defined three x point parser code referred x xin yin xout yout six value written order named second path de ba first byte flag closed path using command time zero curve flag correct path curve second byte point count point path reason path take byte despite number point previous path curve take lot byte represent never thought say six byte lot command byte de segment match command de command command within byte read right left result following command bit decimal value meaning line curve vertical line curve line curve line vertical line editing first path confirmed interpretation command byte important ordering command wrong type correct file look ok rendered result different number coordinate segment type set parsed wrong order coordinate grouped differently using command listing result following understanding path type x xin yin xout yout line curve vertical line curve ba line curve line vertical line table represent implied value vertical line segment vertical line mean copying x previous point path weird mix type since drew hand goal getting many line segment type could final path horizontal shape closed mean final point connected first point line segment intentionally made segment horizontal realizing appear horizontal line segment file shape shape section tell renderer actually draw shape style one path space inside path path filled style shape ordered back front first shape parse bottommost layer image logo dissecting mean blobshape first hshape second shape section start shape count two shape jump straight first shape byte one pretty small compared path one type shape shape file start shape type shapetypepathsource another enum really sure mean since one shape type pretty meaningless next byte shape style index mean shape using second style file indexed zero redtoblue gradient next two byte path count path index shape one path second one file bloby one last byte shape flag none set wait next shape discus flag mean setting would mean read shape shape refer style path one byte style path single iconfile number distinct value fit bit probably plenty icon enough complex vector graphic specifically icon allows hvif produce smaller file placing limitation complexity second shape take byte aa first section similar first shape valid shape type first style flat white one path first one h first four byte shape flag byte bit flag byte represents different additional feature shape could shapeflagtransform shapeflaghinting shapeflaglodscale shapeflaghastransformers shapeflagtranslation since giving full manual hvif format looking one example going skip explaining flag mean one set shapeflagtransform men sixvalue matrix used scaletranslateskewrotate path really sure think difference flag shapeflaghastransformers flag mean one transformation matrix rest shape six number number matrix float format created hvif icon need precision float using smaller format help save lot space however sure float chosen float standard format case six number aa one part format variable length soon read shape flag know next byte per float x float byte transformation matrix since one flag bit set end shape matrix scale h path move center image got h copypasting text iconomatic shape big enough taste initially scaled conclusion like playing haiku trying number lesspopularthanlinux operating system stable usable one tried also different enough linux interesting point view vector icon format one example vector format interesting binary format parsed binary file vector image format looked detail clear constraint optimize around make reason behind design decision easier guess created mostly one person simple enough figure parsing hand made lot comfortable converting hex binary thinking byte collection bit editing file investigate command byte work made feel super cool edited file hand hex editor still worked power previously ascribed wizard specialty lowlevel programming recommend digging detail binary file format opensource parser source code look interpreting hex invaluable would much harder without code available reading feature hvif following curiosity exactly feature worked satisfying learned new skill process even knowing detail hvif limited applicability acknowledgement thanks dan luu comment post help slow reading disk calculation david turner catching awkward wording lot spelling mistake bert muthalaly positive comment make want write post julia evans finding confusing part thanks davecporter catching typo
144,Lobsters,osdev,OS,"Tribes, Fossil, 9front, Bell Labs",http://doc.9gridchan.org/blog/200110.fossil.9front,tribe fossil bell lab,advanced namespace tool blog january tribe fossil bell lab ant installer fossil root code highly subjective historical view bug fix tribe present day,advanced namespace tool blog january tribe fossil bell lab post survey technical community issue connected plan root file server author member plan tribe save grid opinion entirely lot unsourced claim made based year participation observation plan community ant installer fossil root code ant iso installer script include fossilventi root install option make easier use codebase fossilventi root developer made conscious deliberate choice remove fossil support distribution undoubtedly nt see improvement using primarily codebase top fossilventi root fileservers home grid system server past several year good result datasets small result may translate well user much larger quantity data latest ant release contains support tooling venti replication well installer support distribution plan admittedly flaky maintainership competent user able track change even mycroftiv wandered distant hypercube highly subjective historical view forked bell lab distribution plan one major change removing option use fossil file server root file system making primary f installer late era plan many user reported unreliable behavior fossilventi combination resource given plan corporate heir bell lab clearly insufficient properly develop debug operating system understand two engineer working parttime public plan infrastructure without sufficient resource investment even best effort skilled developer may scale need full operating system project time late sorely missed uriel attempting grow independent community people dedicated software principle espoused unix tradition embodied plan unfortunately view uriel health problem influenced communication passionate desire see plan succeed thrive led sometimes rancorous debate left side emotional consequence struggle mental health communication issue write comment empathy blame way played create division bad feeling corporate university plan developer researcher much grassroots plan community fossilventi unreliability focal point dissatisfaction forked removing fossil support installer part clear message standard bell lab setup reliable discussion motivation necessity fork often referenced poor user experience fossilventi time prior fork experience trying use fossilventi era support perspective fact found thing unreliable major factor software became ant deal failure root filesystem regular expected occurence use plan bug fix already forked richard miller found fixed bug fossil believe primary source many fossilventi reliability issue wrote nice post describing bug solution believe precise nature bug explains lot thing understand condition triggering bug making change filesystem data archival snapshot process experienced plan user alwayson fileservers set daily snapshot middle night thing reliable new user installed plan started immediately messing around installing software initial archival snapshot happening good chance corruption would sneak f beginning match memory frequent trouble installs seemed break right away migrated ant always used valued powerful operation ventibacked fossil rootscores support decided figure use fossil root expecting trouble prevailing sentiment community fossil nogood verybad filesystem previous struggle practice however discovered fossil seemed working fine worked system getting onto vultr vps node started hosting website platform well using home system believe accumulated machineyears trouble free service home system public server system store gigabyte data total workload light however user large data set expressed disappointment performance tribe people understand plan user community small strongly fractured tribe seem harbor personal grudge toward easy understand sense humor strongly critical perspective many tribe people rub wrong way especially people actual target satire people nt really criticized satirized general rule also easy understand referred old boy club plan critic plan always overtone elitism reading rob pike writing commentary set lot tone uriel amplified haughty style commentary computing sad fallen state computing complexity muddled design lamented sage go back long way dijkstra particular perpetrated many famous example human love social status nothing signal high social status condescending unenlightened new user arriving plan community discovered mismatch rhetoric much superior everything plan world reality unreliable root fileservers challenging complicated administration documentation focused murray hill system lot rumor intriguing code research project nt seem feed publicly available plan experience operating system seemed rather stagnant buggy veteran plan community seemed talk parallel universe plan perfectly meeting computing need issue result user error inexperience present day tribe nt want use fossil labslegacy tribe nt want use code believe perspective point based human social conflict solid technical motivation trying offer solution user interested exploring practical way use plan major fly ointment outdated hash function used venti result yettobefixed shortcoming world ventibacked public plan service yet ready large scale production use personal hobby use howeveer believe issue manageable hope post serve constructive purpose building mutual understanding human increasing codesharing collaboration given way thing often go probably screwing pissing everyone side presenting warped subjective view thing recall told stop alternating history sharing perspective history plan community software please offer correction perspective especially think made factual mistake first hand knowledge experience share always pretty good interaction human use plan really whole tolerant diverse community thing like lot people different place different background culture life experience get plan find fun welcoming experience trying since help people learn use plan communicate connect cooperate better direct control software system outside system hierarchical authority control exploitation coercion made lot mistake communication community building effort seems like year change hoping positive change plan community particularly excited reincarnation reallife plan conferencehackathon event human better real life social situation internet diatribe perhaps time ripe everblooming tree file send forth new fruit peace love hypercubes ultrafilters mycroftiv
145,Lobsters,osdev,OS,Programmer's critique of missing structure of operating systems,http://kitakitsune.org/en/Programmer_s_critique_of_missing_structure_of_oper.html,programmer critique missing structure operating system,contemplation aware ltp zodb plone operating system short history operating system manually enter bootloader criticism operating system concept file system balanceddiscstorage acid program lisp machine smalltalk self environment unix philosophy microservices data without structure called file http audio message pack sbe flatbuffers cap n proto structured communication sys fuse socket specifies zeromq command line parameter buffer stop responding structured data env variable configuration file ansible programming language built yaml log queue data structure example study docker docker http docsdockercomenginereferencerun new dockerfile makefile greenspun tenth rule http example study openshift makefile several kilobyte example study ansible general principle concerning object homoiconicity regarding message idea database instead filesystem program collection addressable code block database death configuration format text parsing complex reduction lightweight inspiration context genus series self edit response reddit edit basically compiling data memory kind structure different data memory messagepack cap n proto flatbuffers korz relevant discussion,time ago come across contemplation topic necessity operating system sort research almost two year decided write central thought along link relevant source information topic aware blog contains wall text alright skip would like declare talking write something necessary possible viable mean necessary possible viable seen many discussion drama caused reading line applying reader presupposition opinion topic author character know notice probably would nt help please try read think presented idea open mind find topic presented controversial nonsensical downright outrageous stupid please calm remember declaration presented previous paragraph talking nt need urge press something break workflow slander system take strangeness maybe possible direction research please nt apply nt want comment discussion thread linked end article send email bystrousak kitakitsuneorg meaningful subject written lot article like year still talk people read day even seven year publication value opinion alright skip recent year worked several company make software case part bigger team case started programmer scratch often involved designing system architecture nt one creating beginning work backend programmer job description create system read process store kind data parse kind format call kind program interact system device czech national library part threeman team working system processing electronic publication wrote almost whole backend code data storage communication existing library system aleph kramerius ltp long time preservation storage using object storage zodb forced plone frontend communication system used kind protocol rest upload xml file ftp zipping file generated xml manifest uploading smb backend microservices frontend used rabbitmq another company shall named worked system ddos protection ca nt talk specific detail nda signed could get kind buzzword job ad time linux python sql nosql database kind existing opensource software rabbitmq communication communication backend written also worked backend nubium development company operates probably biggest czech file hosting website ulozto refactored partially designed piece software handle storage redistribution file across different server also software handle processing used data icon thumbnail show preview compressed video file one example stuff done among good deal stuff ca nt see directly also website rest service several company touched exotic stuff well example part threeman team working project video recognition system detected object live video feed kind public tunnel metro road tunnel learned lot machine learning optimization task solving lowlevel image processing architecture whole backend code telling establish credibility also seen pattern everywhere worked independently created approximately similar piece software naturally grown several requirement reliable storage large number small file million billion file megabyte gigabyte per file smaller number large file terabyte per file reading storage configuration kind structured format ini json xml yaml structured communication internal service also external program distributed architecture multiple physical machine allows good scaling programmer probably know getting many programmer create pattern top programming library mistake people mistake design library thinking realized architecture operating system wrong kind job stuff offer stuff allows u want expect especially programmer user interface point view stuff often work programmer operating system kid thought knew operating system window sure stuff everyone computer button start left bottom corner start computer black screen come type win make appear high school taught definition operating system equipment form program make inputoutput device computer available later found kind operating system almost stuff create united abstraction top hardware allow running different kind program offer le advanced filesystem networking also handle memory multitasking user permission today operating system people thing use run browser watch youtubes facebooks also send message others sometimes run game work kind hardware cdrom keyboard advanced user o specific form database api allows run program also provides standardized mechanism different operation example printing character screen storing something name permanent storage creating connection internet usually tend think o something given le changeless something pick holy trinity window mac linux around crouch range small alternative bsd beos reason almost used operating system exception almost would like explore whether really desired property artifact historical development short history operating system first computer nt operating system generally everything user friendly way program directly changing hardware switch computer programmed punch card tape came order use operator still manually enter bootloader directly memory tell computer use punch tape hardware rest work done key system worked called batch programmer delivered medium data program work data system operator loaded given batch computer run program program finished returned result error message programmer since whole process required quite lot manual work natural part whole process automated form tool library useful function example loader loaded automatically computer start allows load programmer program pressing specific button subroutine print content memory case error bundle tool called monitor computer time really really expensive pressure share amongst multiple user time gave birth first operating system merged functionality monitor support running multiple program together also added user management concurrent user session increasingly complex hardware complexity direct control put pressure universality reuse code across different machine version operating system began support standard device longer necessary give specific address memory disc drive could store data name later also directory first file system born support concurrent access multiple user also quite obvious necessary separate process program ca nt read overwrite data gave rise memory allocator virtual memory multitasking know operating system became layer stand user longer required become programmer hardware provide standardized way store data print character handle keyboard input printing printer running batch program later also graphical interface networking added personal computer offered plenty device supported operating system except exception iterative development nt bring anything new everything got better improved paradigm nt change criticism operating system problem concept operating system hardware abstraction contrary problem concept o user interface nt mean graphical interface everything else interacting thus everything kind shape concept file system think really limited hierarchical keyvalue database limited limit allowed subset size key better case stored utf also value store stream byte seems reasonable realize hierarchical treebased database nt allow store structured data directly number inodes branch structure also limited number ten thousand worst case however several million item one directory two previous job go around inode limitation using stuff like balanceddiscstorage storing file three sub directory named first letter hash file filesystem shitty database operation atomicity supported transaction supported parallel writes read work differently different operating system fact nothing guaranteed compare world database acid considered matter course file system specifically restricted database everyone know tried use anything nontrivial shot leg sooner later nt matter whether programmer think store sequence file basic user ca nt get sense data create elaborate scheme storing personal file group directory use specialized tool search stuff order find anything bleeding edge filesystem recognize corrupted data recover using errorcorrecting algorithm disc raid nt get wrong get point somewhere else want solve lowlevel stuff disc sector journaling disk plate partition raid everything really great progress stored data storage point user interface nt progress wrong direction original filesystems metaphor used storing file folder meant mental tool idea given people used work paper could understand among many technical limitation current day filesystem metaphor restricting u even restricts thinking ca nt help wonder whether nt drop direction improve fifty year old metaphor using tag example focus really best metaphor storing data question instead program purely physically program nothing sequence stored byte basically nothing else operating system operating system filedatabase know work anything else let give overwhelmingly exaggerated explanation program work program first written source code chosen programming language compiled linked one block data punched punch card binary data plugged appropriate box file correct section file cabinet user want run program writes name command line click icon somewhere system stacked punchcards taken box stored somewhere file cabinet loaded memory program memory look like one huge linear block thanks virtual memory seems like program thing running system binary code run first punched card last conditionally jump choose different punched card address structure pe executable file source http githubcomcorkamipics program also read parameter command line use shared library call api operating system work filesystem send numeric signal program react signal return numeric value open socket wrong nt want say concept wrong old metaphor extended step future iterative progress everything really really lowlevel whole system changed minimally last year ca nt get rid idea rather arriving absolute perfection stuck somewhere twist local maximum lisp machine smalltalk self environment taught done differently program necessarily collection byte small separate object metaphor sending message callable part system dynamically compile needed familiar unix philosophy say compose solution problem small utility one thing focus well nt take idea next level make small program every function method program would allow communicate method function program way microservices work work smalltalk versioned use part dependency specification system handle exception help know else ca nt program general data without structure called file whole unix ethos huge drag industry progress unix pitch essentially system small function discrete individual thing function must signature char function const char structured data fool reductively everything text fine let stick source http binary data first glance brilliant idea nothing universal problem virtually data internal structure whenever programmer work data nt move around parse mean slice create tree structure data even stream byte example audio video data structure chunk iterate structure wav file source http githubcomcorkamipics happens program take raw data give structure work throw act collapsing data back raw binary data current computer culture obsessed parser external description data could carry structure form metadata every day vast amount cpu cycle unnecessarily wasted conversion raw byte structure back every program differently sometimes even different version program considerable part time programmer spent parsing converting data structure would editable simple transformation take part tree move add part graph remove something else current situation analogous sending lego castle individual cube post reference instruction put form castle recipient would obtain instruction somewhere remember put reference instruction package instruction laboriously compose castle hand absurdity even evident realize lego everything want send glass bottle break tiny sand piece tell recipient make bottle understand end always send raw byte level send lego cube eventually nt send already form castle absurdity point time also worse worse user definitely worse programmer data using could selfdescriptive individual item could contain data type well documentation nt fashionable bunch raw binary data description separately really want really advantage past decade massive growth use format xml json yaml seen certainly better wire eye still talking concerned specific format structure data structured talking parsing xml parser talking loading directly memory style message pack sbe flatbuffers cap n proto without need evaluate text solve escape sequence unicode format talking using people name instead docgetelementbytagname person namevalue one format doc people name another reading help simply using help people instead looking documentation talking absence need parse wav file naturally iterate chunk time fact data describe structure external description parser talking direct serialization object unified system supported language even nt object kind structure would really impossible structured communication notice pattern criticism anger passion uniting theme subconscious structure perceive filesystems database realize structure hierarchical keyvalue data take granted program binary blob instead bundle connected function structure object need communicate understand data dead series raw byte instead tree graph structure else structure nt mentioned yet communication operating system program program computer sys beautiful step direction structured approach communication computer however exploring came conclusion although creator general awareness realize entirety maybe partly still influenced unix concept communication byte stream much amazing interact system using file operation special kind file brilliant revolutionary amazing linux us half feature example sys subsystem fuse know missing reflection structured data nt read manual nt know write expect thing nt carry explicit semantic meaning code blinking diode raspberry pi echo sysclassgpioexport echo echo error handled happens write string get error code back echo command information file system handle parallel writes reading happens write instead try read value description expectation stored different place maybe man page maybe description module somewhere net real expectation form machine code maybe source code stored course separately completely different place everything stringly oriented standardization one module may use second master slave third data type specified checked really think really primitive communication framework built top file without advantage modern communication framework also probably greatest effort create something like object seen without actually realizing trying structure sys object like difference sysclassgpiodiode naive file protocol file implementation undescribed keyvalue set similar json also nt explicitly specify structure set property format complicated message help format mechanism raising exception socket understand created way work really time creation best completely rational option still use unstructured format binary data transmission even today communication structured even seemingly binary stuff like streamed audio structured ever created irc bot create connection great course use select nt want eat whole cpu waiting data read block typically byte transform string memory look rn sequence create buffer process line terminated rn sequence otherwise end incomplete message parse text structure transform message different message different format parse differently people still time every protocol reimplemented ad hoc parser written thousand time every day even though message could structure everything else http example used transport structured x html data right clearly specified serialization format description parse great else could wish really think http us html data transfer course specifies protocol keyvalue serialization completely different every protocol chunk specification whatnot email nt even want rant topic perversion email protocol format vaguely defined structure something like five specification melded result implemented differently software product ever parsed email header email conference know mean suggest trying exercise guarantee change view world everything like almost never really need transfer stream byte need message time data kind keyvalue structure array year invention socket still transport data stream byte reinvent text protocol time nt use something better think normal create structure serialize using kind serialization protocol often invented adhoc transfer system need codec deserialization reconstruction original structure basically external description data form code lucky codec close enough serialization format deserialize without loss information nt send structure directly zeromq imho step right direction time nt think received much warmth command line parameter program something ignore find click using mouse fill kind form manually mechanism command line parameter one common way tell program want almost every program us different syntax parsing theoretically standard best practice reality nt know syntax read man page program use param others param program use param sometimes separate list space time using comma even colon semicolon seen program required parameter encoded json mixed normal parameter call program kind command line kind shell like bash also get mixture shell scripting language way defining string variable god know else think escape sequence reserved name function eval sequence using random character like wildcard character stopping evaluation wild card one gigantic mess everyone us whatever think nice par without internal consistence logic topic calling program program nt even want recall many time forced use piece code like import subprocess sp subprocesspopen test stderrsubprocessstdout stdoutsubprocesspipe stdout stderr spcommunicate recently wide range parsing freeform output really tired shit argument bit complicated quickly degrades masturbation string concatenation never sure actually safe really nt allow command injection nt guarantee supported character encoding pipe tty behavior would nt dream worst nightmare everything super complex example buffer stop responding larger output program reacts differently run interactive mode noninteractive way forcing behave correctly put random escape sequence tty formatting output sometimes actually transfer structured data program nt get mess command line parameter usually list dictionary nested structure could really use unified simple way write language specification structure something easier write json also expressive completely omit necessity commandline parameter completely suppressed send structured message program like calling function programming language really nothing call appropriate function method specific parameter strangely indirectly env variable env variable dictionary literally map data structure behave like missing structure onedimensional dictionary key value string would declared string string env often enough need transfer nested complicated structure simple string forced use serialization soul screaming terrorized statement like need store structured data env variable use json link file god sake ca nt manage uniform way passing storing data mix syntax env variable bash json configuration file whether realize virtually every nontrivial program computer requires kind configuration usually take form kind configuration file know file located linux customary place etc also home homeconfig random dot subfolder like homethunderbird format think guess literally anything anyone ever thought pseudo ini file xml json yaml sometimes actually programming language like lua kind hybrid language like postfix anything go joke complexity configuration file format increase time resembles poorly implemented half lisp favorite example ansible halfassed incomplete parody programming language built yaml understand come wandered direction ca nt standardized across system ideally data format also programming language used everywhere ca nt object stored proper location configuration namespace log every production service need log information somewhere every single one solve following problem structured logging store log format actually parseable query get example log given time period given log level parallel write access allow multiple application thread process log storage also guarantee individual log message stored properly wo nt rewrite log rotation old log renamed compressed removed time actually logging application deliver log message target platform somehow current solution typically quite different whatever anyone thought would appropriate used without much consideration structure log random virtually everyone us le parseable format shape structure almost always different rarely defined multiline log message stored escaped parsing take place largely regexps practically always fragile breakable often proudly show colleague easy break log structure circumventing regexps try convince use something unbreakable design sometimes really parallel logging usually solved kind separate logging server file system unlike almost database ca nt usually guarantee atomic change usually also nothing like trigger transaction logging server fails log lost log rotation also often handled external application practically always matter periodically triggered cron job yet seen clever logging platform would able log log probable wo nt soon space left storage device seen quite production service stopped trivial problem another problem application typically keep log file open file rotated hand without warning break whole thing solved completely nonelegantly sending signal application must able respond asynchronously recently laughed badly colleague wanted disable file log stdout changed path log file devnull worked beautifully python rotatingfilehandler decided rotate file whole application crashed delivery mechanism application simply open file log others send data udp syslog others send json message sentry done whatever way currently popular come someone mind logging seems beautiful example practically everybody forced solve operating system nt support full complexity also beautiful example concept deserves convert sending structured message message object emit timestamp short description usually also log level python typically debug info warning error work log almost never want work text example want limit date range everything got text log level want error message nt want grep text word error used body message different context example noerror application used logging receive message store queue data structure would guarantee never running disk space older message could automatically compressed transparent user want search compressed message even know nt fifty way use logging matter user instantiate system logger use brief configuration chooses rotation policy log standard message sending either locally remotely using internet nt know nt standard part operating system edit big software package like kibana graylog ang generally speaking ontheelasticsearch based tool great step direction highlight really need described example study docker docker virtualization tool allows build manage run virtual machine container put specific software configuration personally kinda like docker sometimes use build package target distribution deb debian andrpm rhel plethora command line parameter docker command http docsdockercomenginereferencerun favorite part represented volume directory mounted inside container outside system syntax approximately v localpath doc rw seems good example three different kind value parameter path system run command must absolute path inside container beware also allowed dockerfile using volume directive permission say use read write example came perfection added new parameter mount introduces completely new syntax completely different rule parsing mount sourcelocalpath targetdocs complex example may look like mount typevolume src volumename dst containerpath volumedriverlocal volumeopttypenfs volumeoptdevice nfsserver nfspath volumeoptoaddr nfsaddress soft bg tcp rw notice contains example csv parser escape sequence original colonseparatedformat mutated new format separated comma one us equality sign keyvalue definition also list time sometimes use double quote fuck shit double quote volumeoptoaddr nfsaddress seriously even talking behavior change depending exactly use subject want focus point instead clearly defined object send message system several command line string concatenation convention different grammar top hell trying wrap head around use program behaves inconsistently unpredictably also dockerfile course another format incompatible everything else without debugger clear vision logic dockerfile original idea dockerfile guess similar makefile let docker go file go directive step step build u original idea simple simply set key value definition gradually executed example microsoftnanoserver copy testfiletxt c run dir c specifies use original base image virtual container copy copy file computer container built run executes command anyone familiar greenspun tenth rule probably know evolved definition env variable substitution using template system came definition escape character dockerignore file command cmd received alternative syntax may cmd program parameter also cmd program parameter thing like label made possible define additional keyvalue structure course course someone needed conditional build section hack created get around using template system setting key value value outside http matter time someone add fullfledged condition function turn dirty programming language debugger profiler nice tracebacks standard operating system provide anything reach fragmentation thus continues example study openshift long since forced work openshift work must say quite liked beginning think bright future allows create nice hardware abstraction computer cluster perform relatively painless deployment application corporate cloud nevertheless process porting several package old rhel format ran physical server new rhel spec format run inside openshift constantly shaking head setup configuration specific understand understand openshift creator allow user configure via web interface simply clicking addition offer rest api well command line utility oc two interface shaking head case web rest api oc configuration uploading editing object described yaml json format interchanged freely object defined socalled template function kind makefile executes block sequentially end result running system within template possible use template system allows define expand variable built top yaml somewhat le chatty brother json example template example might look like apiversion kind template metadata name redistemplate annotation description description iconclass iconredis tag database nosql object apiversion kind pod metadata name redismaster spec container env name redispassword value redispassword image dockerfileredis name master port containerport protocol tcp parameter description password used redis authentication generate expression name redispassword label redis master variable expanded outside via command line parameter far good might guess lot reservation absolutely conditional statement example conditionally execute code one must use template system like example template system course definition function often repeated block cycle also missing anything else would probably forgive let go completely practical use case really used company use four environment language version product also use four environment different stage project dev test stage prod first developer test deployment dev tester ontest businessmen stage customer eventually use environment onprod deploy new version project go environment therefore would good possibility example run virtual machine within openshift simply saying start four time four different environment course openshift know done manually quickly becomes large pain environment differ much apart little configuration thing need dynamically modified remember originally wrote different language mutation four instance per language currently four language mutation result together sixteen instance project ten instance per development environment per language thus instance must instantiated manually one project something like twenty project team obvious possible manage manually forced build automation form python script shellscripts ansible happy end decided skip fact openshift us docker also necessary handle dockerfile format command line argument along openshift yaml format uniformly widely accepted configuration language format also scripting language something like lisp edit spent good part writing utility automates management docker build docker image openshift environment deployment various language mutation sometimes run completely separate environment sometimes also problem logging container nt really disc space ideally run stateless machine lot fun forced infra guy emit log line single line json message stdout spent several hour arguing solution tried explain good idea several reason one multiple thread mangle message longer several kilobyte nt help example study ansible beautiful example turn someone adhoc try cook language like calling without thinking much without really theory programming language began yaml based configuration declaration language describing example nginx installation name install nginx host hostnameip become true task name add epelrelease repo yum name epelrelease state present name install nginx yum name nginx state present name insert index page template src indexhtml dest usrsharenginxhtmlindexhtml name start nginx service name nginx state started quite easy read yaml keyvalue structure course course could nt stay like someone thought would great add condition cycle course yaml task command echo item loop item course created programming language without consistency internal logic sense language forced go define block exception error handling function built top yaml without debugger ide tooling autocomplete meaningful stacktraces completely ignoring sixty year development programming language user interface know thin highpitched sound sound kinda like high frequency screech hear perfect silence bedtime angel roaring frustration roar soul human idiocy piled piled top ca nt agree something would make sense least general principle take away weird string format whether passing command line parameter launching program communication program replace concise easytowrite language structure definition language would time describe data making use data type dict list int string delegation inheritance neither user program would need parsing guesswork structure longer would handled o latter would get data directly native format think enough criticism let look idea get concerning object speak object nt mean thing know programming language c java quite people bit allergic late mean general concept grouping function data operate nt need classbased approach ie nt write class nt even need inheritance although form delegation come handy gpio subdirectory sys filesystem containing control file specifying direction data written eg led data file read write data object method control file data operated course ideally possible also copy instantiate object usual mean pas object method introspect still primitive object system object represented directory data file method control file operation object lowest level keyvalue data key cause code execution case method name otherwise return data difference object keyvalue entry database rather minimal lie ability store code well delegation key ca nt found child search move parent speak object mean generic keyvalue structure allow delegation referencing keyvalue structure object reflection ideally also form homoiconicity intentionally avoid mentioning specific language though certainly nt mean imperative objectoriented structurebased language c c java similar regarding message fascinates nt problem agree structured message format lowest level internet protocol tcpip packet clearly defined header addressing work absolutely massive worldwide scale nt work computer several computer higher level well would really problem address individual method object object within single computer internet idea wo nt describing particular system even though made experiment topic nt specific data experience summarize written way repeated densening crystallisation already analysed thought compressedenough description requirement could arise could regarded nonconcrete definition concrete product database instead filesystem thought opinion throwing away filesystem replacing database unavoidable step say database nt mean specific sql database even keyvalue nosql database talking generic structured system storing data medium support data type atomicity indexing transaction journal storage arbitrarily structured data including large block purely binary data something throw arbitrary structure take care saving without needle serialisation deserialisation realise end stream byte end exactly ca nt see many reason make significant difference memory disk nt want look like got something traditional filesystems use like everyone else think impossible make significant progress without ca nt force structure level stored data without constant conversion format format memory representation like building house swamp foundation keep moving program collection addressable code block database filesystem allows natively store structured information stop making sense keep program big continuous series byte walled rest world contrary make sense build something similar microservice architecture think abstractenough manner program object data collection operated function contained within encapsulated communicates standard way stdinouterr socket signal env error code file writes filesystem allowing store object natively fail see reason make individual method object also accessible outside publish stop communicate using old streambased method socket file suffices return structured data code still compiled still possible use diverse programming language difference result fall instead binary blob sent directly cpu isolated process well rest system get basically definition api call output something like shared library native element system final form death configuration format text parsing configuration file various format exist filesystem ca nt save structure could could save given object dictionary key value able use directly next time needed nt write string configuration section parse deserialize serialize could save fact run true configuration object point people nt get talking microsoft registry whatever could still use filepaths data would save disc would nt form text form structure suddenly need deal json csv difference format structure saving text interconnected object memory work json csv parsed command line parameter env variable also everything else described used structured data type using language system understands us everywhere program nt parse text system understands structured description unpacks structure moment user finish typing description language simple term syntax program need send data program nt send serialized version message sent stream byte structured message natively supported o kernel complex reduction previous description still long let reduce little bit mathematical expression reduced one formula hierarchical structured database keep data type instead filesystem contains program stored collection eachother calling well outside callable function configuration file user data form accessible addressable structure simple writing reading lightweight text format used wherever user input encodes kind structure program use text protocol communicate exchange structure directly enough iterative improvement fifty year old idea enough think time something new inspiration context think naive crap go read something genus find decade ago graphic system fulfilled much everything wrote system good still connects group enthusiast around direct inspiration also self written lot self also similar topic edit since published article several relevant article response reddit got much trying say right would better way solve reimagine whole thing probably interesting take monad manifesto problem monad nt go far enough hit key thing file stream great metaphor describe compute work best around time solid idea forming though would nt evolve full potential object smalltalk sense simula let revisit o file system idea simple everything o isolated completely obtuse thing call object everything object cpu running code kernel scheduler data transfer outside program object though hidden internally generally object nt expose internals instead pas message message may contain object receiving object may send another message internals object sending receiving message guaranteed series though may thinking reading piece data say keyboard another process pipe send object handle receive piece data reading series byte thinking callback pretty much got send separate thing send continuation program pause byte available point callback writes buffer jump continuation letting program proceed nt far os work model metaphor fully describes make obvious way go instead seemingly weird thing async inherent model advantage object may appear behind scene expose different thing object may expose various thing say writing transnational operation send message writable data object return transaction generator send message return continuation result writing transaction committed separately nt want transaction whatever reason nt make sense writing append object like audio simpler interface simply send write operation object directly transaction course lead interesting challenge unix everything string allows thing interact object nt guaranteed uniform whole point using object instead stream object flexible honest solution always try find interface object implement lot discussion solution mostly set really define interface simply promise kind message object receive send guarantee least must object implement interface full access internal external implementation interface done using object external form defined interface implicit interface duck typing tell object pas one object generally continuation fulfills interface another generally error handler nt allows basic type system shell may give nicer way describing o basically resource management dealing open resource etc handled gc work expect object pas stuff others pas necessary permission security bound command user generally start permission user give command generally open enough annoying may limit pas object basically instead file permission object permission modify read send message object aka execute etc limit scope though enlarge needed object flexible file get power get specific object one resource object well defined understood generally identified uri iri modern basically file uri filepath shell good convention make faster like nt need specify http www browser course object build namespace basically thing folder allows access resource others access resource bined editor binedconftoml editor default configuration resource specifically tied one thing may multiple path path resource system resource generally keep alive object become resource think resource handle make sense access context generally second provider commonly accessible object either resource maybe provided provider give access object certain specific functionality generally common provider would environment provider give whatever true environment access file resource forth container system would basically expose resource env another would context like specific process know run like directory called permission passed object etc basically di o level revisit whole pattern code thing generally instead building full program build series program work well together fundamental program would one let program work together vi would system load view keypress mapper nt use standard ttl course view show buffer object let arbitrary selection action transformation would done visitorlike pattern visitor actually may output transformation allows work like recursive scheme viewer nt use rawbuffer instead one wrap data allows arbitrary style information added second layer loading script actually add extra layer realizing code allowing functionality rich view loading script also load bunch keyboard binding bind specific objectsvisitorstransformers action could start selectsearch command selects piece text fullfill regex replace command replaces selection whatever text input code could automatically load another searcher us command language semantic searcher let thing like select directly named instance variablefunction ultimately change whatever selection buffer replace basically unix philosophy got limit computer started sort thing original model never considered lost structure philosophy adapted exception became common rule decision nt best one kept loose existing feature nowadays better system solve one proven self time time think would interesting build o like beginning unixlike scenario could allowed unix simply special case model edit much confusion meant statement sorry english native language sometimes really easy clearly express one seen often lowlevel serialization response reddit ok bro show u send message wire without serializing stream byte bit physical encoding first sigh missing point see stuff literally course level always kind lowlevel representation nt need way nt need create electric impulse ethernet cable using connect internet use layer abstraction way nt really need send byte via socket use kind abstraction example regularly use zeromq python send whole object different process system without caring representation second point trying make difference serializing message like example want send document use library serialize document doc odt whatever may use library maybe description protocol raw byte ordered certain schema maybe use xml basically compiling data memory kind structure different data memory someone else must use parser implemented specification maybe rfc codec creates kind representation memory may different representation system second way may familiar programmer send state object automatically encoded lowlevel serialization protocol interoperability example may dump state object tree memory json even better use something like messagepack cap n proto flatbuffers recipient nt codec beyond primitive lowlevel deserialization library nt need really understand document structured receives structure whole without need parse analogy would nt really need doc parser need json parser everything us everything json json good analogy actually lowlevel javascript format never meant serious data representation nt really schema metaobject protocol ca nt really reconstruct whole object tree memory system talking could transfer structure description object could use automatically generate tree object memory every language description object similarly use example xmlrpc metadata generate client maybe swagger metadata generate client code whatever language using may seem like security nightmare way best think probably korz relevant discussion
146,Lobsters,osdev,OS,Mezzano: An operating system written in Common Lisp,https://github.com/froggey/Mezzano,mezzano operating system written common lisp,mezzano operating system written common lisp prebuilt image github building source http githubcomfroggeymbuild major change since demo major change since demo major change since demo major change since demo additional information facebookcom http http commonswikimediaorgwikifile hypothymisazureakaengkrachanjpg http commonswikimediaorgwikifile mandarinpairjpg http http http dejavufontsorg http wwwicojamcom,mezzano operating system written common lisp prebuilt image demo release available github release designed run virtualbox though qemu also supported ram virtionet nic intel hda audio controller recommended building source see mbuild repo http githubcomfroggeymbuild help support follow development join mezzano irc channel freenode ircfreenodenet major change since demo usb stack fittestbits improved overall file system support fittestbits support implemented bruno cichon ebrasca modesetting display driver hardware accelerated support via qemu virgl device multicoresmp support improved atomic operation async apis waitforobjects dispatch thread pool networking improvement server support dhcp tcp retransmit source location tracked many kind definition weak hash table weak object cleanup object representation unifcation standardobjectstructureobject unboxed structure slot short float implemented using ieee half float unboxed unsignedbyte arithmetic stack overflow memory fault trapped recovered support building window major improvement clos mop conformance keymap picker bug fix performance improvement feature major change since demo support implemented bruno cichon ebrasca mcclim ported fittestbits quicklisp ported peter housel improved introspection tool disassemble ed implemented generational collection added garbage collector new ssabased compiler backend supporting unboxed value representation gray stream support overhauled major change since demo trentino medium player implemented eugene zaikonnikov improvement conformance stability performance clos implementation follows mop much closely traditional window management booting cdusb real hardware possible driver support intel hda audio device virtualbox guest mouse display integration major change since demo many improvement conformance stability performance editor greatly improved thanks burton samograd system function correctly computer ram allocator garbage collector make much better use available memory far fewer gc cycle occuring room print detailed information allocated object transparency premultiplied alpha support gui additional information hypothymis azurea kaeng krachan jj harrison facebookcom cc bysa http via wikimedia common http commonswikimediaorgwikifile hypothymisazureakaengkrachanjpg mandarin pair francis c franklin licensed cc bysa via wikimedia common http commonswikimediaorgwikifile mandarinpairjpg handsome andy morffew http cc http includes dejavu font http dejavufontsorg icon icojam http wwwicojamcom
147,Lobsters,osdev,OS,A Turist's Guide to ITS,http://obsolescenceguaranteed.blogspot.com/2020/02/a-turists-guide-to-its.html,turist guide,,
148,Lobsters,osdev,OS,Profiling and Tracing the Nanos Unikernel,https://nanovms.com/dev/tutorials/profiling-and-tracing-nanos-unikernel,profiling tracing nanos unikernel,brand new kernel ahem today prior work unikernels much debuggable introduced flame graph profile trace uniprof clock syscalls hello world recent paper hotcloud book let turn ftrace ftrace nanos nanos source ops,benchmark easy point say slow hell pm skilled noticing something happened slow something almost anyone whip apache bench iperf however diagnose actual root problem go fixing new code specifically kernel code brand new kernel nt traditional interactive userspace nt support concept running multiple program vm ahem earlier fairly nasty code extremely slow know basic function like memcpy memset foolishly copying byte byte course happens team small blitzkrieging way year operating system development digress needed fix sort problem knew unknown unknown different matter problem type issue fairly hard pinpoint issue nt know look profilers come profilers many wonderful thing purpose solving problem concerned finding low hanging fruit dramatically slow introducing profiler nt fixing known performance issue seeing key securing future fact looking manycore future looking hella manycore future world running hundred hardware thread norm today thousand thread tomorrow nanos multiple threaded single process system explicit design goal take advantage hardware thread interpreted language universe inherently single process single thread nt see working beyond nt think realistic expect people using language migrate multithreaded language see language upgradesreplacements coming designed deal instead nanos designed run vm never directly bare metal however design goal could ran single thread environment microservice could ran many many thread environment also planned future work could influence scheduling concern well anywho ca nt measure trying fix slowness ca nt fix core thread world nt matter let measure let fix prior work despite false claim exist unikernels much debuggable maybe even one program looking versus hundred process find fresh ubuntu instance extensive work done directly profilingtracing nt nearly first year ago brendan gregg introduced flame graph profile trace yes brendan gregg later florian schmidt plenty work done uniprof point anyone telling ca nt profile trace one thing intentionally lying common debugging tool like strace well sort functionality forever precisely figured hell given interpreter trying adding support keep mind run vms like could use host strace get output instance looking syscall output simple nodejs hello world getpid direct return rsp rtsigprocmask direct return rsp mmap mmap target size len prot flag fd offset anon target len given size direct return rsp mprotect mprotect addr len prot direct return rsp clone clone flag childstack ptid ctid newtls direct return rsp rtsigprocmask direct return rsp rtsigaction direct return rsp rtsigprocmask direct return rsp csignal killed tea ops load hijs turn output along useful debugging output real world example functionality useful notice something strange look filesystem node via pkg content command via ops ops pkg content file node file packagemanifest dir sysroot dir sysrootlib dir file file file file file file file dir file dir sysrootproc file sysrootprocmeminfo dir sysrootusr dir sysrootusrlib dir file hell procmeminfo thought nt linux nt rather go make million modification commodity software wish support sometimes place oneoff stub thing nt currently wo nt ever support place instead case without file interpreter choke byte stub however strace confused profiling honestly wrong tool almost everything shop people strongly reprimanded pulling strace box live prod db slows thing tremendously actually work utilizes ptrace really make wonder world gvisor project get ok google get lot backlash security community kubernetes something positioning ptrace optional platform complete nonstarter even trivial toyhello world project going syscall heavy ruby clock syscalls hello world recent paper hotcloud entitled true cost containing gvisor case study none famous arpacidusseaus find observation like file access slower aside really bummed andrea remzi popularized notion container form virtualization see used language much function laid book recommend extremely accessible text view container classic hardware virtualization two completely different type software definitely thing different capability let turn ftrace ok back tracing profiling let fix slow code profiling individual application probably use different tool one use profile kernel case one might turn ftrace course using linux well nanos ai nt linux general purpose operating system either much blur line application operating system rather reinventing wheel one brilliant engineer ported ftrace rudimentary ftrace support available nanos bring full circle look function entry exit inside kernel figure slow follow along tutorial obviously need nanos source also want python panda plotly two little python snippet included tool dir first python app format large trace dump second draw neat little toggable graph using plotly showing expensive tracking core utiliziation per function call drill various call click bar toggle expose functionality inside ops reason explicitly made profile kernel code anyone would investigating fixing something going end touching nanos ops however nanos tree specify env var trace ftrace race built nanos default make target called ahem target specifies given binary run pair filesystemimage manifest f deserves blogpost normal user never think though make clean make traceftrace targetmyserver run specifying trace target spawn webserver ftracetrace endpoint another reason toggable default present ops proper wget http download tracefile option collect however aware even modest amount traffic produce large trace file remember goal fix live prod system replicate behavior controlled environment debug locally know become thing ditch staging environment debug prod even lol code prod precisely staging envs run first little python script format trace csv parsetracepy trace produce nice little tracecsv produce graph like runtimebreakdownpy tracecsv get nice little graph like like perhaps future turn via toggle ops right mostly meaningless nt elbow deep nanos code performance nut love diving could obviously use help get next time
149,Lobsters,osdev,OS,"Run executables from memory, over the network, on Windows, Linux, OpenVMS",https://github.com/XiphosResearch/netelf,run executables memory network window linux openvms,netelf post compunixprogrammer supported platform example inmemory execution,netelf run client side netelf download execute program network server server sends arbitrary binary commandline argument possible execute program inmemory leave file filesystem make ideal pentests emergency general system automation originally inspired post post compunixprogrammer supported platform fully supported tested regularly tested partially supported solaris sparc openvms vax alpha ultrix vax risc window nt others work freebsd osx hpux qnx zos example make serverpy binls la devnull netelf netelf inmemory execution looked source code glibc musl see go behind scene interesting executes file procselffd see following mount option tmpfs permiate procselffd disable need add noexec devshm tmpfs mount sudo mount devshm remount rw nosuid nodev noexec tmpfs cause fexecve permission denied shmopen succeeded silently file descriptor nt get x permission fchmod handle wo nt work either file permission checked fstat regarding executables work technique reliable selfcontained statically linked executables case libc used host used compile executable host executed librariesdependencies dynamically linked executables worked executables rely specific environment external file generally tend fail furthermore possible pas argument executable running inmemory name process derived argv customised using kthreadd default use basename executable file
150,Lobsters,osdev,OS,SerenityOS desktop running on an OpenBSD kernel,https://twitter.com/jcs/status/1224205573656322048,serenityos desktop running openbsd kernel,,detected javascript disabled browser would like proceed legacy twitter yes
151,Lobsters,osdev,OS,KnightOS was an interesting operating system,https://drewdevault.com//2020/01/27/KnightOS-was-interesting.html,knightos interesting operating system,knightos dragon,knightos operating system started writing year ago texas instrument line calculator similar calculator supported still get rare improvement day major contributor left starry eyed empty promise one day one big refactorings year still really interesting operating system working challenging constraint overcame offer rather nice unixlike environment filesystem preemptive multiprocessing multithreading assembly c programming environment entire system written handwritten assembly almost line compiler toolchain built scratch kib usable ram kernel stored state byte statically allocated ram many subsystem used overlapping part memory carefully planned avoid conflict userspace memory allocator used simple linked list tracking allocation minimize overhead allocation maximize usable space userspace program mmu sense modern computer program could freely overwrite program fact userspace task switching gui would read kernel process table directly make list running program nonvolatile storage flash present interesting constraint worst case kib storage even best case device released space shared kernel whose core code le including highaddress subsystem still clocked le due constraint flash custom filesystem designed daily operation resetting bit underlying storage order set bit set entire kib sector overhead also kept bare minimum maximize storage space available user writing flash storage also render unreadable operation progress kernel normally executes directly flash resident bottom memory therefore order modify flash kernel flash driver copy part ram jump jump back operation complete recall kernel memory statically allocated much used byte code run ram shared stuff plan around order meet constraint employ self modifying code flash driver copy ram precomputes information modifies machine code inplace jumping also basic networking support calculator jack similar headphone jack adapter music player would play midi wav file kernel direct control voltage ring tip bitbang directly software based built basic networking support supported calculatortocalculator calculatortopc information exchange later model miniusb controller funnily enough also bitbanged software never ended writing driver knightos kernel also includes code first time ever wrote dragon comment think topped since despite constraint knightos completely booted useful unixlike graphical interface faster lift finger power button battery could last entire semester lucky device reading claim
152,Lobsters,osdev,OS,"RECC, The Robert Elder Compiler (and emulator and microkernel) Collection",https://recc.robertelder.org/,recc robert elder compiler emulator microkernel collection,recc robert elder compiler emulator microkernel collection recc github detailed explanation project hold financial situation improves enough able work meantime plan focus continuing create educational content related computer programming intersects projet consider signing mailing list blog update link new content recc compiler number goal including highlight project include onepage cpu programmer reference manual onepage cpu assembly language specification onepage cpu assembly language specification toy microkernel grammar c programming language static filesystem compilation demoed demo,recc robert elder compiler emulator microkernel collection recc github recc collection programming tool includes c compiler specification simple easy emulate cpu toy microkernel assembly language specification much detailed explanation picture project hold financial situation improves enough able work meantime plan focus continuing create educational content related computer programming intersects projet consider signing mailing list blog update link new content recc compiler number goal including develop c compiler using source code conforms strict subset ansi ansi c one language ubiquitously supported even old system almost certain supported many year come almost proper subset even newest standard c develop c compiler relatively simple source code recc coded use little c preprocessor possible source code avoids typedefs never include gnu extension c code although may able compile code feature future develop c compiler dependency dependency mean le portability faster bit rot le chance building everywhere without modification recc currently dependent stdargh stdioh stdlibh stringh asserth creating simple easy emulate compile target large amount c code compile target recc simple instruction machine language machine language simple enough write emulator hundred line make possible easily embed c code crosscompiled recc emulator running another language highlight project include onepage cpu called onepage cpu fit specification sheet paper without margin using point consolas font still lot room spare intended easy emulate compile target support context switching interrupt programmer reference manual assembly language programming one page cpu discus programming language onepage cpu assembly language specification recc link multiple file file file could considered compiler toolchain equivalent binary human readable assembly symbol resolved strict syntax onepage cpu assembly language specification recc compiles c file file similar object file human readable assembly file possibly unresolved abstract symbol toy microkernel compiled recc running emulated onepage cpu browser grammar c programming language writing recursive descent parser handconverted lr grammar nt performed rigorous analysis verify soundness able write fairly complete compiler static filesystem compilation recc compiler currently support ability statically compile file host computer object file implement ext like filesystem reached stdio fopen reading filesystem currently supported compiler still quite far production compiler able compile small microkernel demoed compiler yet selfhosting mainly due missing support subset c standard library relies structs supported float type variadic function supported strives one day iso compliant c compiler compiler able compile machine gcc clang without error warning using strict compile flag also pass test case clean valgrind report updated completely run time money work project hopefully return working project future thing improve updated pushed update cantoiii branch new work arbitrary precision integer math library next step using finish floating point number parsing updated oh hi hacker news setting aside time work recc month december probably floating point sending update jan updated added number test case parser improvement parser nearly fully complete exception floating point number updated still alive busy last month currently shifting attention back work recc updated continued work cantoiii branch added number adjustment syntax model much accurate model struct union enum parser handle integer constant correctly updated typesystem improvement evolved building abstract syntax model work taking place cantoiii branch massive refactoring arc long time merged master updated continued work new typesystem ability easily crossbuild compiler previous version updated automation bootstrapping process use typesafe id type system completed parser error message updated improvement bootstrapping process easier generation code data structure work type system updated started work refactoring type system updated added regex engine replaced lexer code use regex engine api updated added support virtual memory added open source license updated ability link multiple file another file refactoring project layout updated preprocessor support recursive function macro improvement build process updated compiler time faster parsing code generating parser added defined behaviour division zero cpu spec updated compiler cross compile run test case preprocessor lexer parser code generator emulated compiler slow output correct far small program updated added demo showing compiler compiling small program using crosscompiled version updated added support emulation ext like filesystem preprocessor support case function macro update cpu specification updated refactor properly support lvalues rvalues proof concept malloc support sizeof support updated added emulator java python added sw directive step toward supporting malloc updated added emulator c programming language run file including kernel updated full support typedef fixed case complex declarators anonymous tagged type instance support multidimensional constant array initializers recc able sucessfully parse code generate source code although generated code likely many error link source code yet due missing standard library support updated support basic case typedef update cpu spec instruction rewriting linker large symbol value ternary operator support full collection includes compiler linker javascript emulator microkernel specification decided project fun enough work make personal nonlegally binding commitment support project one following thing happens dead longer mentally capable supporting project december gmt define support giving least acknowledgement hopefully helpful response least inquiry within day direct inquiry recc robertelderorg
153,Lobsters,osdev,OS,Why GNU Guix matters,https://ambrevar.xyz/guix-matters/index.html,gnu guix matter,,might tempted think free open source software give u transparency application compiled application download internet black box could compile source code compare result downloaded application right identical good free open source software trustworthy compile source code twice chance get slightly different black box know compiled software downloaded fact proper translation source code instead modified version practice mean often difficult reproduce exact compiled application offered download notice enough merely one got flipped behaviour application change completely word two application identical bit everything happen trust vanishes lack reliability compilation application come chaos machine environment slightly different software used compilation eg different version different hardware different slightest difference compilation environment susceptible flip bit called reproduciblity problem
154,Lobsters,osdev,OS,distri: 20x faster initramfs (initrd) from scratch,https://michael.stapelberg.ch/posts/2020-01-21-initramfs-from-scratch-golang/,distri faster initramfs initrd scratch,wikipedia definition motivation distri optional dependency work yes run real hardware initramfs load kernel module access block device root file system uevent console setting font keyboard layout neo layout block device identification reimplemented language cgo luks fulldisk encryption unlocking encrypted system luks continuing boot process switchroot busybox switchroot comment initramfs generated cpio ubuntu switching gocpio pgzip minitrd go userland linux kernel module console font keymaps cryptsetup setfont loadkeys time zone data minitrd outside distri distri conclusion appendix qemu development environment,table content case yet familiar initramfs initrd initial ramdisk typically used starting linux let quote wikipedia definition initrd scheme loading temporary root file system memory may used part linux startup process make preparation real root file system mounted many linux distribution compile file system driver kernel instead load ondemand initramfs save memory another common scenario initramfs required fulldisk encryption disk must unlocked userspace since userspace encrypted initramfs used motivation thus far building distri disk image quite slow amd ryzen processor distri time make cryptimage user system cpu total image initrd second dracut initramfs generation account second initramfs generation time drop second dracut longer need use singlethreaded gzip multithreaded replacement pigz brings total time build distri disk image distri time make cryptimage user system cpu total image initrd clearly use dracut modern computer make pigz available dracut fail compile unless one explicitly opts knownslower gzip thought optional dependency see optional dependency work take second still go faster answer yes recently built distrispecific initramfs calling minitrd wrote big part scratch initramfs generator program distri initrd custom go userland cmdminitrd running init initramfs minitrd generates initramfs image bringing total time distri time make cryptimage user system cpu total image initrd remaining time spent preparing file system installing configuring distri system ie preparing disk image run real hardware minitrd time faster dracut dracut mainly written shell c helper program drive generation process spawning lot external dependency eg ldd dracutinstall helper program assume combination using interpreted language shell spawn lot process precludes concurrent architecture blame poor performance minitrd written go speed goal leverage concurrency us external dependency everything happens within single process enough thread saturate modern hardware measuring early boot time using qemu measured dracutgenerated initramfs taking display full disk encryption passphrase prompt whereas minitrd took rest article dive deeper minitrd work initramfs ultimately job initramfs make root file system available continue booting system depending system setup involves following step load kernel module access block device root file system depending system block device root file system might already present initramfs run kernel module might need loaded first dell xps laptop nvme system disk already present initramfs start whereas qemu need load virtiopci module followed virtioscsi module userland program know kernel module load linux kernel module declare pattern supported hardware alias eg initrd grep virtiopci alias pci sv sd bc sc virtiopci device sysfs modalias file whose content matched declaration identify module load initrd cat modalias pci pci hence initial round module loading sufficient locate modalias file within sysfs load responsible module loading kernel module result new device appearing happens kernel sends uevent uevent consumer userspace receives via netlink socket typically consumer udev case minitrd uevent message come modalias variable minitrd load relevant kernel module loading kernel module dependency need loaded first dependency information stored modulesdep file makefilelike syntax initrd grep virtiopci kerneldriversvirtiovirtiopciko kerneldriversvirtiovirtioringko kerneldriversvirtiovirtioko load module open file call linuxspecific finitmodule system call module expected return error code eg enodev enoent hardware device actually present side note next textual version also binary version modulesalias modulesdep file presumably queried quickly simplicitly yet implemented support minitrd console setting font keyboard layout setting legible font necessary hidpi display dell xps x qhd display following work well initrd setfont setting user keyboard layout necessary entering luks fulldisk encryption passphrase preferred keyboard layout use neo layout initrd loadkeys neo block device identification linux kernel block device enumeration order necessarily boot even deterministic device order could still changed user modify computer device topology eg connect new disk formerly unused port hence good style refer disk partition stable identifier also applies boot loader configuration distribution set kernel parameter identifying block device partition specified uuid initramfs job depending device contains uuid come different place example file system uuid field file system superblock whereas luks volume uuid luks header canonically probing device extract uuid done libblkid utillinux package logic easily reimplemented language change rarely minitrd come implementation avoid cgo running blkid program luks fulldisk encryption unlocking encrypted system unlocking luksencrypted volume done userspace kernel handle crypto reading metadata obtaining passphrase eg key material file setting device mapper table entry done user space initrd modprobe algifskcipher initrd cryptsetup luksopen user entered passphrase root file system mounted initrd mount mnt continuing boot process switchroot everything set need pas execution init program root file system careful sequence chdir mount chroot chdir execve system call explained busybox switchroot comment initrd mount devtmpfs dev mntdev initrd exec switchroot c devconsole mnt init conserve ram file temporary file system initramfs archive extracted typically deleted initramfs generated initramfs image accurately archive compressed cpio archive typically gzip compression used kernel support bunch different algorithm distribution ubuntu switching generator typically prepare temporary directory feed cpio program minitrd read file memory generate cpio archive using gocpio package use pgzip package parallel gzip compression following file need go cpio archive minitrd go userland minitrd binary copied cpio archive init run kernel extracting archive like rest distri minitrd built statically without cgo mean copied asis cpio archive linux kernel module aside modulesalias modulesdep metadata file kernel module reside eg need copied cpio archive copying module result mib archive common copy module relevant initramfs feature reduces archive size mib filtering relies hardcoded pattern module name example disk encryption related module kernel module underneath kernelcrypto plus kerneldriversmddmcryptko generating hostonly initramfs work precisely computer generated initramfs generator look currently loaded module copy console font keymaps kbd package setfont loadkeys program load console font keymaps usrshareconsolefonts usrsharekeymaps respectively hence directory need copied cpio archive depending whether initramfs generic work many computer hostonly work precisely computersettings generated entire directory copied required fontkeymap cryptsetup setfont loadkeys program currently required minitrd implement functionality dynamically linked program need copied also elf dynamic linking loader path stored interp elf section elf library dependency example cryptsetup distri declares elf interpreter declares dependency shared library others luckily distri package contain lib subdirectory containing symbolic link resolved shared library path hermetic packaging sufficient mirror lib directory cpio archive recursing shared library dependency shared library cryptsetup also requires gcc runtime library present runtime abort error message able call pthreadcancel unavailable time zone data print log message correct time zone copy etclocaltime host cpio archive minitrd outside distri currently desire make minitrd available outside distri technical challenge extending generator rely distri hermetic package surmountable want support people initramfs remotely also think people effort general spent rallying behind dracut making work faster thereby benefiting linux distribution use dracut increasingly minitrd demonstrated significant speedup achievable conclusion interesting dive initramfs really work working concept many year small task debug encrypted root file system unlocked complicated task set root file system drbd highavailability setup even sort experience know detail forced implement every little thing suspected going exercise dracut much slower need reimplementing generation stage modern language instead shell help lot course minitrd bit le dracut drastically overall architecture hope effort help two thing teaching implementation instead wading various component make modern initramfs udev systemd various shell script people learn initramfs work single place hope significant time difference motivates people improve dracut appendix qemu development environment writing go code manual prototyping learning people prototype often immensely useful sharing note first copied kernel module statically built busybox binary mkdir p cp lr cp sh generate initramfs current directory used find cpio h newc pigz tmpinitrd distri makefile append flag qemu invocation kernel tmpkernel initrd tmpinitrd append rdinitsh ro rdvconsolekeymapneo initinit systemdsetenvpathbin rw vga mode parameter required loading font busybox shell manually prepared required mount point kernel module ln sh mount ln sh lsmod mkdir proc sys run mnt mount proc proc proc mount sysfs sys sys mount devtmpfs dev dev modprobe virtiopci modprobe virtioscsi next step copied cryptsetup dependency initramfs directory f full readlink f f rel echo full sed g mkdir p dirname rel install full rel done ln cp cp r mkdir p cp ln cp r busybox used following command unlock root file system modprobe algifskcipher cryptsetup luksopen mount mnt
155,Lobsters,osdev,OS,DEC Answers Leap Year Complaint,https://www-users.cs.york.ac.uk/susan/joke/decly.htm,dec answer leap year complaint,home joke dec answer leap year complaint leap year hp open vms site,home joke dec answer leap year complaint dec answer leap year complaint digital equipment answer user complaint year leap year march collin park emailed report typo text suggested original checked official version hp open vms site note typo mischievously refuse say follow approach provide hint assyrian better mathematician implied dec internal use spr number answer category ue maintenance hour duplicate problem n duplicate spr number operating system vaxvms o version product vaxvms product version component runtime library subcomponent lib routine date answered maintainer stanley rabinowitz attachment n publication instruction n spr problem abstract user claim year leap year title publication additional o version additional product version component sequence number supersedes type article answer category given next release supported error error information type article foptional feature patch nnote mmandatory patch rrestriction maintenance use end dec use g l spr answer form spr system version product version component software vaxvms vaxvms runtime library problem lib day runtime library service incorrectly assumes year leap year response thank forwardlooking spr various system service sys asctim assume year leap year although one never sure happen future time strong historical precedent presuming present gregorian calendar still affect year since also hope vms still around chosen adhere precedent purpose calendar reckon time advance show many day elapse certain event take place future harvest release vms earliest calendar naturally crude tended based upon season lunar cycle calendar assyrian example based upon phase moon knew lunation time one full moon next day long lunar year duration day fell short solar year day exact time solar year approximately day hour minute second year lunar calendar would whole month assyrian added extra month time time keep calendar synchronization season best approximation possible antiquity period year month leap month scheme adopted basis religious calendar used jew arab also used calendar mohammed forbade shifting month month rome emerged world power difficulty making calendar well known roman complicated life superstition even number unlucky hence month day long exception february day every second year roman calendar included extra month called mercedonius day keep solar year even algorithm poor bc caesar advised astronomer sosigenes ordered sweeping reform imperial decree one year made day long bring calendar back step season new calendar similar one use called julian calendar named julius caesar month day length every fourth year made leap year day caesar also decreed year would start first january vernal equinox late march caesar year minute short calculation recommended sosigenes eventually date vernal equinox began drift roger bacon became alarmed sent note pope clement iv apparently impressed pope sixtus iv later became convinced another reform needed called german astronomer regiomontanus rome advise unfortunately regiomontanus died plague shortly thereafter plan died well council trent authorized pope gregory xiii reform calendar mathematical work done father christopher clavius sj immediate correction adopted thursday october last day julian calendar next day friday date october long range accuracy formula suggested vatican librarian aloysius giglio adopted said every fourth year leap year except century year divisible thus would leap year would leap year since divisible rule eliminates leap year every century making calendar sufficiently correct ordinary purpose calendar known gregorian calendar one use today interesting note protestant prince ignored papal decree many country continued use julian calendar either russia needed revolution introduce gregorian calendar explains vms chooses treat year leap year despite great accuracy gregorian calendar still fall behind slightly every year concerned problem suggest tune short wave radio station wwv broadcast official time signal use united state every year declare leap second time careful adjust system clock trouble picking signal suggest purchase atomic clock manufactured digital vax option time end spr response
156,Lobsters,osdev,OS,What UNIX Cost Us,https://www.youtube.com/watch?v=9-IWMbJXoLM,unix cost u,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature unix cost u benno rice lca youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature unix cost u benno rice lca youtube
157,Lobsters,osdev,OS,Unikernels Can Fulfill the DevOps Promise,https://dzone.com/articles/unikernels-are-the-holy-grail-for-devops,unikernels fulfill devops promise,breaking silo easily build run unikernels ops tim bray unikernels avoid vendor serverless lockin shuttled one cloud next unikernels avoid kubernetes complexity wo nt around forever like one airbnb scala unikernel ops completely insecure unikernels enforce devops build new instance terraform cloud built virtualization reading fulfill empty promise devops heck unikernel care,unikernel could key devops one core promise devops breaking silo developer actively manage application production versus throwing wall ops making respond pagerduty sunday morning promise reality slight different largely speaking someone say devops company hiring devops really mean person deploying configuring managing babysitting server promise devops really enticing one argue one reason nt gotten land milk honey yet system administration linux administration still much niche skillset lot developer simply nt reason devops salary high yet developer san francisco work macbooks protip hiring someone asks going forced use mac good sign might skill need instead trying find talented expensive sysadmins maybe reduce need rely said system possible day age everincreasing cloud bill microservices say certainly try may also enjoy easily build run unikernels ops unikernels emerging software infrastructure pattern combine operating system single individual application one discrete unit unikernels fully embrace original devops manifesto remove many underlying system administration task force developer wrote apps manage prod least make easy enough unlike container still demarcate manage application sres code unikernels remove lot friction organization enabling developer manage application actually write quote tim bray make engineer write code live dashboard alarm metric unikernels avoid vendor serverless lockin starter unikernels get rid notion server embrace serverless mindset say server one ssh install bunch crap one engineer expected sit babysit either either working working shoot head deploy one working otherwise app instead fighting machine certain symbiosis formed however unlike serverless offering entirely proprietary individual public cloud provider unikernels stand apart instead halfbaked cgi process different provider provider assume basic unit compute vm shuttled one cloud next cloud provider responsible virtual machine another thing set unikernels apart traditional serverless offering like lambda definition default transient want traditional serverless workload persistent turn provisioned concurrency cough sweet greenback course nothing stopping one transient unikernel workload unikernels avoid kubernetes complexity container current application du jour kubernetes lot problem wo nt around forever already hearing abodut company decontainerizing container notorious eating database alive unikernels pause stop restart even live migrate ease need use external software end day still plain old vms albeit speciallycrafted one keep seeing article like one airbnb complaining kubernetes serious performance problem one contention read article large jvm application nt fit neatly inside container engineer go way use mean devops skillsets size appropriately modify certain setting might realize beforehand however deploying scala unikernel google cloud today via ops merely command minute running container architecture via docker kubernetes completely insecure best practice dictate using antivirus scanner aka container image scanning also exact serious performance issue inane duplication networkingstorage layer top existing vm architecture one could say web scale video unikernels enforce devops unikernels force developer bundle everything want deployment unit want hit deploy button ca nt build new instance terraform use jenkins scp app place entire vm get completely rebuilt although bad seems could whopping mb google cloud le minute aws take slightly longer want know much memory application consuming long gc running disk running space cause rampant logging bake observability configure log appropriate service instance acting ca nt ask devops cough sysadmin cough ssh debug application ssh usernamespasswords way pop instance text editor shell sudo aptget install need instrument application fix locally like highly paid software engineer shifting responsibility ops cloud built virtualization cloud built virtualization container unikernels truly cloudnative base unit cloud venerable virtual machine cloud provider gone way utilize hardware like asics fpgas accelerate network disk access expose vm layer unikernels perfect fit cloud architecture already assume deployed virtual machine simply strip away excess legacy needed unikernels fulfill promise devops reading fulfill empty promise devops heck unikernel care
158,Lobsters,osdev,OS,"Unix, Plan 9, and Lurking Smalltalk",https://www.cs.kent.ac.uk/people/staff/srk21/research/papers/kell19unix-personal.pdf,unix plan lurking smalltalk,,obj length filter flatedecode stream ʉ q
159,Lobsters,osdev,OS,I Contribute to the Windows Kernel. We Are Slower Than Other Operating Systems. Here Is Why. (2013),http://blog.zorinaq.com/i-contribute-to-the-windows-kernel-we-are-slower-than-other-oper/,contribute window kernel slower operating system,,monk wrote well sad hey every software piece turn monster eventually mayâ utc hukklebuk wrote welcome ca nt shit improve anything without asshat taking offense might well wear coverall name say yes bos mayâ utc james pike wrote wrong kid type nt make worse programmer want healthy work life balance able pull even suggests level skill company allow overtime culturei found comment offensive article interesting read mayâ utc codingjohnson wrote seems obvious problem project manager valuing enterprise customer gripe rather general everyday problem fool see yard always thought inner working m would modern day self organising meritocracy experienced geek intimate window could recognise improve key area developer led instead seems like internal company politics hierarchy encumbering progress even obvious consumer point view changing tack major ui component flagship o exhibit thisas net developer gravely concerned future m using c j rt inapp adecosystem bad unprofitable uk get surface rt pro late unconsumerfriendly naming convention comdcomrtwtf guy know sticking c branching web guy think aspnet event model good thing try make web apps desktop like behaviourme branching appdevelopment io android returning longterm passion javascript plan switch linux run window osx vm honest feel little inadequate hedged bet window long little worried linux learning curve even looking contract people asking frontend php javascripti know m trying attract developer appstore frigging wake m developer abandoning abandoned developer mayâ utc alex wrote mean kid dude nt take shit seriously enough go extra mile without acting like agony kid generally trying bare minimum roll thing care real life home work way sustain thatreal hacker kid still passionate people nt get called kid still get called hacker yes kid worklife balance worklife balance mean balance doesnt mean putting work protective little riskfree box going home every day right school bell ringsif butt hurt simply use phrase maybe one peoplehttp mayâ utc bridgeliver wrote give fuck found offensive james mayâ utc mrb wrote alex bridgeliver watch language want blog remain civil mayâ utc vasyl wrote year m technology experience ended year ago read android developer guide idea behind seemed powerful nothing else j standard astonished imagination idea possibility behind seeing microsoft innovation new idea rule world mayâ utc joeg wrote alex bridgeliver passion code ungrateful soul sucking entity take one unnecessary minute scarce time kid priority screwed mayâ utc wrote alex everyone entitled decide whats real life solely reason slavery abolished planet want people motivated blame game guilt therapy pretty bad tool guess must one stayed back m could make google feel sake balance bridgeliver attitude soon take one give fuck mayâ utc codetaku wrote sound like problem taken everyone else handicapping way get away variety company loses experienced expert irreplacable domain knowledge replace new college grad organization take enormous hit every technical respect save lot money since competitor already aggressive business type winning argument come time budgeting society already decided every productivity increase brought technology computer benefit business exclusively none benefit shared employee productivity double profit double workload double compensation remains stagnant easy actually reduce budget going talent every year still growing profit exactly itit work precisely worker figure thanks internet thing standing working much making income software connect people provide work people need work done cutting employer loop mayâ utc wrote hell could man enjoy awakened alarm clock leap bed dress forcefeed shit piss brush teeth hair fight traffic get place essentially made lot money somebody else asked grateful opportunity charles bukowski mayâ utc bill pytlovany wrote worked blvd earlymid ca nt imagine kid working campus nt heard phrase run lot young programmer never taught basic direct report fantastic mentor msft forever responsible first cd driver besides code also focused build environment everyone version visual studio product cycle would nt allow update change understood always taught changing text string could affect compiled code way never imagine kind habit learn education experiencei also occasionally participated new employee interview focus always someone thought kind education hadthanks reporting comment thanks gentleman posted really interesting hear picture thing work behind scenesbillp mayâ utc hellscreamgold wrote wrong kid type found comment offensive article interesting readjames pike read kid coming college selfentitlement issue backing warrant mayâ utc xx wrote desperatetoplease lol mayâ utc jph wrote feeling follow damage control written author original post mayâ utc jph wrote worth point well follow written entirely different style verbatim vocabulary structure word frequency form structure prose different almost certain author person mayâ utc ken wrote guy keep mind billion chinese training take job half pay may talk family balance whatnot better retirement plan lined valuable gone mayâ utc ignatius foobar wrote bit rot already set window code microsoft general truth microsoft hasbeen year monopoly created enough inertia appear healthy pretty much say big one like keep running around year chop head mayâ utc billy bob gate wrote poster going nt bother showing work monday mayâ utc ken wrote itf bitrot symptom greater problem lack government oversight technology industry government control would technically competent people key position industry would nt problem would job undocumented immigrant mayâ utc ken wrote like pulling chain mayâ utc innocent bystander wrote jph worth point well written entirely different style verbatim hope really know meant case imply original author identified within microsoft someone m impersonated post follow channel look like one developer going leave m soon mayâ utc ken wrote post mrb nothing rant someone looking minute fame sure true window flop nt clue compete android notice nt mention apple nuff said thatthe bigger picture google beloved apple history year people nt seem see happening mayâ utc quarx wrote think people develop linux kernel nt expect thanks praise really goal develop community develop always find better way thing improve older solution mayâ utc anonwriter wrote number new sde amazon actually little bit nervous similar situation arising mayâ utc go google wrote nt like perhaps quit awful uncreative uninspiring behemoth m go get salary linux nt think mayâ utc mat wrote government control would technically competent people youkidding would government control fix going provide technical individual hacker factory awesome education public university produce kid graduating public high school tell pauly stephen hawking government answer anything nt smartest people room nt even smartest people neighborhood people work google according article mayâ utc hpdell wrote would nt much problem window still similar monopoly early iphone first release really showed computer could packed small device sold lot user computer starting become stagnant market needed something new revitalize computing industryi nt say wide interest disorganized developer linux whole gnu best utility software enough new company come solution start improving constantly running since afford fail one quarter server netflix facebook google constantly innovatingchanging software moreover google creating possible employee funding engazing free software eg google summer code microsoft pretty much stagnant respect company big money good company big money great software even betteranother problem microsoft linux widely deployed software planet might currently competitive pc like buy sony tv like probable buy sony music system even philip great product consumer apart pc mobile linux becoming pretty much standard even mobile large presence even linux problem part author suggested big company know advatage going free operating system eg year back lg little linux software product today among top contributers linux kernel past year linux utility software gone tremendeous improvement even desktop graphic side everyone know fast kernel movesmicrosoft bitten action pretty much slandered open source never could embrace hand apple us much free software pretty good microsoft play fear fear good business seen viewed openoffice google doc linux etc thing changing microsoft open change business model open source model even google facebook amazon apple dy away company company competing microsoft real question long afford mayâ utc big kate wrote say thanks reposting came via slashdot hope op ok nt consequence posting personally huge insight thing nt happen effectively might describe classic big corporation culture v startup emphasis big corporation messing product lead spreading entire tree also understand hacking code inside org year feel like getting anywhere want grumble mention stuff ping say inside org piss coworkers unless core dev wont understand actually wrong area development nt know anything technical issue speak abouti accept microsoft created great product eats dog food matter course good know good hope blue get u better ui option said thinkpad running debian variant box occasionally load stuff utterly locked window enviroment devs know long abandoned m either gone linux corporate space mac machine bought o get choice apple microsoft suspect apple finally give professional development environment becomes pureplay consumer product company switch linux well op person blog reading say thanks made microsoft feel human try cut big green slack future get frustrated know plenty bright intelligent passionate people fighting get code better feeling frustrated idea true apple suspect solution rather supporting people long term microsoft cut switch increasingly look like going deep six osx jump something consumery based arm osx deep sixed powerpcthanks mayâ utc hi wrote developer various gnulinuxbsd related project see whole window ecosystem slowly losing grasp everything else went window related development maybe year ago gnulinux something complicated everyday user really ugly mess user dev perspective today able everything big distros without knowledge operating system anything name application differ year ago window thing use average joe rest complicated even window user keep locked microsoft application stuff like wine run gnulinuxbsd environmenttl dri think microsoft long relied market share everyone us window application also buy next version without anything new last year business decision also affect dev process many year big company like m reverting bad influence take really long mayâ utc big kate wrote one thing forgot say microsfoft seem spent last year run people vision technical lead area create great product feel like microsoft managment fire slide personally blame steve balmer least bill gate willing bet farm face new opposition oh btw wont buying durango linux gaming finally taking steam box etcit took long gl cl catch thing happening oh hate window ui forced use look like microsoft decided copy apple far consumer unit hate assumption lock lock yes please mayâ utc tex pepper wrote piece reinforces believed true microsoft time company like huge rudderless ship ship running aground crew know least nobody know ca nt anything grown large long momentum make impossible change courseperhaps crew tried call bridge sure noone answering one bridge empty sure microsoft ceo captain board director navigator management team helmsman momentum destination unless microsoft something drastic change course soon run aground may already latemicrosoft really much like titanic metaphorically speaking ship designer also thought created something unsinkable also handed captain drove top speed blind darkwill microsoft share titanic fate probably company always struck bit outoftouch customer like gigantic whale swimming shallow grave danger beached outgoing tide even ca nt keep falling farther farther behind whilst smaller agile fish head seafor part wo nt feel sorry see microsoft go away feel sorry people like bloke inside company trapped inside system would change could hope others like get plenty timeï chestthumping primate ballmer ilk let em drown mayâ utc mrb wrote jph wo nt reveal anonymous poster contacted sure unless communication channel hacked person completely different state mind writing followup ranting writing time anxious writing time mayâ utc ngo wrote sure post rant outburst real m hate despair wasted time money spent m specific expertise expected predicted friend m window vision winrt api introduced back strong technical background window year ago touched linux first time late almost linuxonly developer went way basic assembler pascal vba vbs asp ccc php nowadays java othersevery time sit naked window box feel somehow lost linux come along nifty tool installed default almost everything fetched repository second window pain go download something somewhere order able complete simplest task view using window development platform granted love ease using command line tool really happy company linux desktop developersi know richness window apilibrary world net huge amount vendor pay get asskicking module shorten development effort dramatically java others almost feel pain vendor user spent year knowledge window net alike seeing mess unsure long net survive focus winrt j whatever year historian identify xp era microsoft best time period winfs trusted computing hot topic around downfall began m failed really expensive project back think introduction sdlc order improve security right step effort pretty hidden nt improve user experience obviously time apple stepped back brought completely new ui experience mayâ utc bigo wrote thanks msft dev insight also followup comment balanced maybe post highprofile enough also reach devs manager sw company give important impulse think described msft reality many company hold back innovation improvement huge part industry mayâ utc somebody wrote speaking employee another large software company read occasionally even written rant similar original followup made somewhat sad necessary realize live world people nt know anything large software system maintained hang every word written people behind curtain almost everything said followup seemed obvious course compiler guy know reference cycle course ntfs using seh nt mean nt work well onto anonymous writer whoever like say congratulation wonderful rant definitely subscribe newsletter mayâ utc wrote prop author rant hope okwhat make wonder happen endless number window installation deal part everyday livesif company actually tank happen kiosk po machine school library computer gaming like think linux would graciously adopted valve seem pretty eager make happen cautious mayâ utc franz kafka wrote one best piece read long time little microsoft applied company least team company failure lack long term vision management looking constantly short term reward sink product company long run new company come steal lead mayâ utc david wrote issue big company general specific one m particulari working hardware engineer many year ca nt describe pain supporting window regard completely broken absolutely braindead usb stack audio implementation totally f cked eventually break device chance probe proprietary driver iow forced ship uncompliant device user platform people seattle clue year year across many incarnation broken heap sellingon different note used build largescale mail system year ago exact kind hell broke loose area constantly fix one biggest software company world broke every single bit even remotely touched actively tried prevent understand fuck going letting look buggy implementation actually biggest complaint ok make mistake happen matter stinking ignorance fear redoing thing sake improvement resistance learn idea intellectual property allow understand actual problemlong story short done forever nt care nt scale compare themselfes others want vanish completely sooner better want company bother anymore stop shipping window driver hardware worthless stop selling software platform pain as o running anyway mayâ utc wrote linux replace window every sense mayâ utc stokes wrote company actually tank happen kiosk â posâ machine school library computer gaming hopefully wine window application support linux improve legacy window apps run replaced mayâ utc john doe wrote ntfs code purple opiumfueled victorian horror novel us global recursive lock seh flow controli seen ntfs code scary think ref bad idea understand current developer would reluctant mess ntfs fragilethe original nt team fair share geniuslevel engineer cutler could get away creating ugliness ntfs far le faith subsequent maintainer company microsoft always struck bit outoftouch customersactually think m reasonably well connected customer understand customer individual buy pc window preinstalled m customer dell hp lenovo etc large corporation volume license enterprise agreement also m customer m nt always want active dialog m direct customer mayâ utc john doe wrote one thought low performance existential threat business exactly know completely piss old school purist group often accused belonging fact performance matter fall acceptable level reach acceptability becomes harder justify putting effort small incremental improvement company infinite resource even m time spent making ob faster could spent something else greater business impact besides customer think window slow quite willing throw gigahertz andor core problemthe explosion battery powered device phone tablet changed calculus much one stated technical reason find even remotely plausible needing new winrt api improved battery life v traditional api app lifecycles window show trying optimize performance alienate existing customer nt perceive performance problem mayâ utc jooper wrote hi think longterm developlment big corporate company efficient slow due big overhead deciding management little technology knowledge worked several big company like hp att see moving slowly technology development infrastructure quality performance summ long term point view see future little commercial commercial company mayâ utc steve ballmer wrote like perhaps quit awful uncreative uninspiring behemoth m go get salary think even know linux kernel devs get paid work itibm oracle novell hp lg transmeta intel list go mayâ utc anonymous wrote steve ballmer mayâ utc nietzsche wrote people treat coding time job used boring task like updating documentation mayâ utc andy turfer wrote managed get refund preinstalled window samsung get take laptop samsung repair centre engineer kept day examined make sure nt use window laptop matter amount going pay product nt want use samsung agreed refund would returned unit refund even though o free preinstalled linux laptop uk slim pickin desktop nvidia geforce using latest nvidia binary ubuntu desktop performs poorly driving two monitor reason nvidia unable vsync monitor dualmonitor configuration work quality user experience rubbish simple thing like dragging window around become jerky stuttery problem much worse dragging window hugging top desktop occur intel one perfect example open trump closed nvidia driver proprietary closed intel hd driver open difference running linux well unity desktop like night day everything work beautifully smoothly much responsive even though ca nt push many pixel future open closed mayâ utc steve wrote liked article one thing feel like say usually personal experience kind people would tag kid type people would work claim entitled put much kid however use excuse work nt really great parent spouse lazy unfortunately personal experience people basic minimum kind people mayâ utc splayds wrote innocent bystander compnovice would like point thing noticed everyone seems assume author male majority poster seem really stressed go surf chill get swag back peace mayâ utc steve wrote noticed window performance decrease microsoft introduced superfetch aka disktomemory caching thrashed hard disk put program memory user might required wanted use available ram akin wanting use hard disk spaceperformance improving since microsoft pulled away mayâ utc starman wrote steve sorry burst bubble tired routine tired someone telling long work come leave go bed wake limit income dead basically stuck corporate world would rather thing way someone else steve becoming reality thanks thing working outside happy become young wealthy free take ball vision want make happen article congrats well written surprised said given window nt user since window spend time linux love mayâ utc fapjacks wrote post fun read comment seem written vitriolic selfloathing frustrated people never burned baby fat enough take oneliner completely heart honest commenters sound like people work instead programmersmicrosoftbrand worker exactly commenters sound like mayâ utc joeo wrote year ago worked ibm ever read ibm elephant trying dance m new innovative time year old software maintain see year old m going pain got last laughi nt feel one bit sorry mayâ utc wrote bla bla bla real hacker kid still passionate bla bla bla mayâ utc grokoko wrote cause problem social almost none improvement sake sake glory justice world microsoft fall even smallest amount improve software consumer experience money driven sad mayâ utc wickedvixen wrote totally understand kind dynamic coming several coding house remain nameless take innovative astounding iterationary coding never vocabulary never wanted improve existing code add feature broke hired people like high school le showed promise fix allpatch upon patch upon patch churned gurgled back life back around pcjr m never regained passion back may never continue reviled iterationary coder one put forth effort upgrade straighten code previous iteration something faster reliableshould nt coding standpoint consider approach worth m beginning taken step approach line thinking would nt insider tirade whistleblower fed m socalled culturethank post apology go show human sometimes emotion get better u mayâ utc pje wrote people think outside little cubicals capitalism work people work harder come better stuff succeed nt lose winner whiner loser nt like work leave mayâ utc jw noord wrote interesting anonymous first post pretty much summed many suspect believed microsoft long time retracts everythingi think may moment either fear b uncertainty c doubt whether comment could back tracked tied microsofteverything almost said first post reasonable made sense second muchtoo bad people nt courage conviction mayâ utc marcel sorger wrote unhappiness within m well known decade product hierarchy big company unavoidablesome people join m change world get disappointed support legacy stability bottom linethis unhappiness also occurrence large open source project million forked project prove itthe truth project accommodate type passionate technical people ambitious business leader personally much concerned movement power devdiv windiv windiv people nt get devs love messing around bit much optimization pleasant interface api make terrible tool hand windiv people terrible creating user interface normal people quote sony m understand ce logo true windiv prove people window phone get subjugated windiv prudent business choice technically questionable socially totally terribleit shame leadership gave rain brain dead windiv money machine know economic crisis m lack phone web dominance much bigger crisis betting people yesteryear take company futureon hand hope office devdiv azure cloud moved service silo feel like something ibm shifting hardware service guess windiv spun separate company sold highest bidder soon m speaks utility company ca nt far mayâ utc tom wrote nt retract core criticism insult point stand m culture reinforced review system discourages cooperation reinforces nih syndrome within team hurt quality innovation review get credit inventing something new little credit improving maintaining something old even million paying user using worked many year true across multiple team mayâ utc synp wrote reach becomes harder justify putting effort small incremental improvement company infinite resource even m time spent making ob faster could spent something else greater business impact true measured performance lab acceptability measured user company tend make imaginary representative customer decide none would care improvement directory traversal many user may decide window running box enterprise setting ca nt throw dollar getting hertz core unacceptably slow would think enhancement actually happened people may rise point position enough clout suggest even though burden maybe allow employee choose linuxwhy think mac became common corporate america people sufficient clout said window would meet need first graphic designer valid claim mac proverbial foot door others could come reason window nt work mayâ utc aal wrote boy sound like disgruntled employee maybe smart guy nt always get way feel know best large organization systemic problem nt think google perfectly running machine lot cash throw around take offense comment also worked young guy severely lacking work ethic please nt blame family man never confuse activity progress mayâ utc sorgfelt wrote concerning kid taken care passion simply matter ca nt simply call cancel appointment feed pick take sport music lesson get bed spouse may work commitment ca nt take slackconcerning passion younger busted working night weekend going faraway trip moment notice waited got steady job even admit possibility kid disillusionment employer took saw working realized really nt matter neither anyone else nice job keep largely need take care kid grown still want life mayâ utc dan sutton wrote course crappy code window feel sure two decade old expected still operating system host every web server every database server market time willing live glitch able developer save ton cost development single server single sourcecontrol system ca nt really beat mayâ utc mrbob wrote dream one day man able put linux pc hibernate mode come back life without crashing needing reboot one day brother linux able reliably mayâ utc mk wrote amused reaction comment bridgeliver aka troll mayâ utc lurker wrote remember wish make change get indifferent support something gain active resistance something lose machiavelli mayâ utc stuart blackler wrote personally see must frustrating dev inside m clear certain technology need scrapped rebuilt scratch massive input community mayâ utc mark aurit wrote linux replace window every sense even sense someday face backwords compatibility quagmire mayâ utc ngo wrote mrbob put linux pc hibernate mode come back life without crashing needing reboot welcome thing work like charm mayâ utc davmarch wrote mea culpa may damning original expose find hard wonder many bloody teeth toenail left floor dark subbasement kremlin took produce itof fraction reference knew said rang true xp high water mark everything go downhill use forever nt ram memory limitation many problem bit version really appreciated enhanced cmdexe winexploreri tried like powershell attempt kept triggering gag response quit dream enhanced cmdexe paint wordpad sans ribbon old do guy way back always hoping protected mode xwindows style shell guess time migrate linux said msft done really good thing net visstudio two watch m eclipse catching fast mayâ utc andrew wrote great read know nt figuratively meant everything said sound like get passionate something put heart soul watching others mediocre job thinking attitude fine management interdepartmental team issue took note thing say ask current employee valuable asset often get treated employee enemiescheers mayâ utc bob c wrote interesting nt buy retraction minute retired major sw development company year ago relate much said schedule always highest priority product must shipped time significant rewrite impact schedule regardless much might improve system also understand comment new generation coming board went back old company short period consulting basis new kid quite sharp clue history reasoning went implementation decision made also implementation habit still c lab school oldtimer gone expensive keep payroll guidance product development process showed new release product shipped one thing write good code many quite capable another follow development process especially one used company second run thanked enlightening process procedure lot floundering going documented process procedure always given short shrift always clear maintained especially oldtimer gone suspect lot younger worker going experience get older nt tossed cheaper experience needed mayâ utc k kulaputra wrote written inexperienced level programmer cribbing without big picture remain like m keep taking salary go work linux earn money improvement improvement sake go university pleaseon sobre note person wrote well advised become mature writing thrash mayâ utc john c wrote ok guy know nothing coding regard talent leaf company confirm true coming big corporation well employee biggest issue big location employee retaining talent enough crap young old find way crap bureaucracy process handle process handle process get point incompetent management lost path ruin everyone career well unclear strategy locallyas m o user standpoint fastest release yet like even metro look cool probably fastest mobile o market mayâ utc frank linux wrote glad using linux since mayâ utc old geek wrote alex youre type grade asshole try weed smarmy know alls think figured outof course like im generalizing guess im much as thanks adding nothing constructive get feeling kind employee warn people big mouth little talkwe actually one tech company almost female dept weve managed helping balance work lifejust life doenst mean force employee miserable mayâ utc anonymous wrote ouch mayâ utc answerpoet wrote late predicted year microsoft would longer business far appears everything power prove right someday microsoft genre joke blunder buffoon characterized lumbering shortsighted unimaginative hubris dude microsoft mayâ utc catattack wrote rant feel right hope survived comrade mayâ utc jl wrote wrong required maintain status mayâ utc uwaysi wrote difference performance quite big jittersensitive game instance doom three pass pr frame opengl make doom window require modern workstation lowjitter hardware run without framedrops even need tweak window available recent time linux run doom perfectly year old hardware core duo gtx say lot difference performance perfomancecritical applicationscheck also lowjitter kernel ubuntu http paradoxuncreatedcomblogwordpress lowjitter tweak window xp lowest latency http paradoxuncreatedcomblogwordpress mayâ utc mark rendle wrote really nasty hurtful comment people nt seem realise window microsoft product worked real honest hardworking people believe proud part one successful tech company ever ca nt easy working code going end billion device wildly variable hardware profile continue run thousand existing application even following major version increment everyone expects perform better previous iterationit well linux kernel developer sneer vast majority linux installation barring android maintained experienced sysadmins cope documented breaking change rebuild nginx source necessary mayâ utc glen wrote great article sure original poster decent person correct many thing say original opinion piece follow hope somebody listens rather shoot messenger obviously company need cultural shot arm bit call help help mayâ utc raj wrote classic problem large organization passionate emotional name oracle ibm cisco emc hp etc part small team large project issue bottom line stop enjoying large corporate culture find startup start building cool thing good team change characteristic team mayâ utc greg wrote big kateapple going deep six o x anytime soon o x fact already running top arm called io io operating system mayâ utc noop wrote way developer expressed article looked like rant kid real developer mayâ utc rob wrote looking last part said nt mean really meansthe subject article slower linux misleading microsofts culture coding attack know absolutley right slower bad ugly look scom look exchange ffwhat nt understand stucks m floss enterprise take gladly knew anything outside world knew codesay hello goodbye sun microsoft lot rantalike story follow welcome garagerob mayâ utc swdev wrote agree m linux anything cultural extreme sw development indeed gap worsening soon see one fall edge get swallowed looking fwd day also passion noone could neither tell spend day hobby ever becomes norm guess u screwed soon find working mine living bad thing since would still mean still worth wage someone mayâ utc rex wrote kudos author awesome read mayâ utc wrote window kernel horribly slow bloated information anonymous window developer make perfect sense hence downside come closed source software linux kernel open source constantly improving setting standard time real business datacenters microsoft relevant desktop consumer level much datacenter anymore mayâ utc alessandro simon wrote wanted know scolded led surely anonymity discovered brazil called hit pin bateu pino nordeste greeting mayâ utc janice halligan wrote anonymous microsoft employee apologyfire containment portion post specifically regarding part one organization earth built impressive optimizing compiler scratch crap sake point youth relatively speaking naivete wrt organization part software industry spent two decade working telecommunication equipment manufacturer everything scratch hardware firmware software tool testing debugging large embedded system started industry every place worked proprietary language software wrote maintained set compiler debugger get nih attitude start trying understand nothing new sun hood software product matter large software system created large group people eventually grow point rewrite necessary talented people good creating new feature new software module equally talented people good rearchitecting cleaning system software taken life needed pain inelegant nonoptimal hard maintain part product start affecting bottom line someone able present trade net positive company whole done know project worked anonymous contributor note experienced talented intelligent software engineer chose right thing complexity existing rat nest code underlying critical portion system mayâ utc muaslam wrote microsoft may using code perfect combine make smooth running application may slower one running linux people need smoothness want focus business logic microsoft provides smooth application improved backend design still better invest new thing instead improving older one start improving older one loose major market share next generation product mayâ utc chris marisic wrote comment followed article many made laugh loud one commenter say predicted m would business year try act rightnumerous commenters purporting there mystical linux takeover either happened happen kinda funny statement existed decade never happenedanother poster claim window isnt datacenter guess missed window entire server market window azure already billion dollar revenue earning machine window azure going crush data center need azure reach invisible ubquitymore poster act like entire swathe corporation kind computer move linux apple m company understands money control control manage thousand desktop server global policy wsus system center tool move productalso let forget success wont surprised microsoft figure transform window subscription model apple already effectively paid upgradesto conclude regardless personal feeling microsoft vision make money lot confidence continue succeeding making money lot stock mutual fund previously direct share eventually fill roth m intel stock long term mayâ utc chris marisic wrote also c aspnet software architect m stack hand best application development visual studio nuget linq asyncawait one aspnet future roslynopen source key stake application development combination m os nuget deliver much net framework party party os company us dozen os tool deliver net softwarethe sky falling mayâ utc sdfsd wrote sdf dsdfsdf mayâ utc john wrote filename hash http mayâ utc henrik wrote could said one place worked code terrible state still improving impossible due plethora module responsibles subproject manager guarding small territory got worse time really see stayed longer mayâ utc anonymous coward wrote window still long way go nt yet know send email mayâ utc radhika wrote slow mean lot hardware getting better better current culture bad term business decision always based ro either short term long term imagine change impact lot different code much money one spend retesting stuff unless well defined regression suite show code coverage ensures intended functionality broken dev test organization say certain snippet code risky change matter change imagine change bomb field specific scenario use window mac ubuntu everyday may geek way window provides apis support raise issue premium really awesome good support organization make lot difference think skill required enable put apache stopped actively working window server however take minute figure enable put window required security user experience make lot difference case m well case performance concern work m love window phone user experience iphone android prevents choosing window phone concerned performance love exchange active directory xbox office one match far consider sql server ok compared oracle easy use ie yuck developer going ditch m linkmac geek may business user make decision buy software going favor m long time kid think larger picture objective crib incremental improvement get work match style personally would like work startup small organization improves knowledge freedom change many thing willing learn job secure way prove roi change accepted organization prove nt whiner mayâ utc anonymous coward wrote serious note window core falling behind imo obvious nt think fast process think window presence data center diminishexcept azure single major paas provider know running window course nt since linux free beer setting data center thousand machine cost even get license discount priceright company deploy apps cloud still fear uncertainty safereliable deploy cloud security model nt yet fully understood comprehensible securityrelated sla provided paas provider admins programmer knowledgeable enough cloud obviously change time even deployment happen private cloud private cloud obviously run linux two reason first linux way ahead window cloud infrastructure support already dozen open source solution running linux azure nt available private cloud nt know single paas solution support window alone second performance edge huge run thousand machine close loadi think future nt looking pink window desktop either granted still windowsdominated desktop environment compare desktop today ten year ago obvious window position get eroded vista nt help regard linux desktop ten year ago way match window last year say user point view various linux desktop offering clearly exceed window provides installed base legacy application much favor window desktop application moving web desktop application moving browser version ie onwards clearly big improvement ie still laggard regard standard support trend towards mobile nonwindowspowered device start desktop laptop home want development email document whatnot tablet heck even stream hd video hdmi pico beamer tablet rather computer since cheaper convenient expect behavior become trendso although think take many decade declare window dead think thing heading nt think business case anymore justify almost monopolylike deployment window mean installed base window data center dedicated server desktop continue shrink mayâ utc anonymous coward wrote erratum previous comment something must gone wrong submittal second load read second five percent performance difference huge run thousand machine close hundred percent load blog owner patch initial comment remove one happy mayâ utc mrb wrote anonymous coward yes pivotx retarded strip percent sign due bug urlencodingdecoding mechanism mayâ utc ben wrote linuxkernel improve performance directory traversal consistent really ask reisen nt think core window falling behind first arm generation run better android mayâ utc wrote started business year ago used sneer company year later one flying door could get daycare centre closed mayâ utc actualcompsci wrote loooad twaddle reason slow piece shit window evolved long series mistake reinvented every wheel reinvent badly designed weenie grad school know absolutely fuck real computer science big mother nt care need acronym sell sociopathic shithead middle management position thats market care window system random splat monkey vomit muddy field mayâ utc neticis wrote conspiracy theorist check related post http wwwutpsycorgsynchinputphpit show quite high correlation mayâ utc mickj wrote seriously wtf wrong maintain status majority guy extremely well educated professional productive clearly made uneducated ignorant statement trying create stereotype group distinct individual unique skill personality trait contributed enormously success company like google facebook heavily dependent themto sound like sore loser done well career hoped happy taking frustration people around himsmart people talent vision nt complain life succeed lifeyou want sit as blame rest world failure get thing change frustrated organization people culture knew much offer would left place could apply skill contribute positively towards success organization ownand really glad nt kid please never clearly make one angry abusive parent nt like stereotype anymore mayâ utc jonathan wrote seriously offended mickj mentioned barely even talked certainly highly negative light really need grow thicker skin bother enough write six paragraph rant ridiculous mayâ utc scott moore wrote brogrammer junâ utc uwaysi wrote lulz junâ utc gadgety wrote interesting read somehow word entropy came mind junâ utc wrote stating obvious biggest advantage many freelibre open source software project inherent kai zen self reflection optimization attitude something often lack proprietary software product whose primary justification return investment said even floss good bad ugly mentality head project maintainer make huge difference back topic technically indeed sheer miracle complex conglomerate ancient apis kludge detour patch microsoft mostly work personally come enjoy life free software product give fair trial run yet usual experience line ironballed hepcat layed old annoyance never fixed new annoyance introducedconclusion capitalism surely craptastic serf u righteously deserve junâ utc soham wrote even though window kernel slower still one widely used operating system much better rest julâ utc steve wrote piece reinforces believed true microsoft long time m since do day loved m good company balmer grown hate m last cell bile bottom aged wrinkled kidney slowly migrating open source away m tool next iteration brain wipe aka m going net crazy whatever like net linchpin depart developing platform grown despise deeply even using window become burdensome event log take longer load xp quadruple click place required double click ei sql server mgt studio bloated broken software ad nausea multiply annoyance like thes along annoyance time week product bottom heart f hate m come surprise first post pr post b indicates exactly saying shop along far many sitting seat held talent m reap exact crop sowing past decade balmer julâ utc wrote man think going apply move u take job hate much unless someone mentally disabled lazy lardass point hating talent born mom julâ utc martyo wrote used dislike windoze deal killer update upon update right first time often wanted send gate invoice time debugging crappy code yes programmer larger computer real thing like transfer billion dollar bank interlink buy gas station whose merchant bank bank wrote code like would fired probably become plumber although may lucrative long run hire jim gray firm worked nearly year could nt make junk fault tolerant hang hat day mac o x without steve o starting feel like vista watching linux year finally lm kde come close usable o novell give linux great desktop linux environment evolution look feel like lookout ooops sun heritage showing started shared window friend nt rebooted workstation year flat nt believe progressed since day grace hooper yelled friend rick managing island information northwestern u gone backwards many way yes created magic specialty area like mobile computing bought toaster nt work return get point plumber marty julâ utc timebandit wrote soham wrong used kernel linuxandroid running linux kernel router tv alsomost server alsostop spreading bullshit get fact julâ utc timur wrote nice see alone disillusioned view augâ utc ctw wrote valid point take diff post one big one problematic everywhere new flashy code better improving old working code get stuck old code nobody want break improve code get lot care hardware improves way faster software given moore law sometimes better start fix rust augâ utc muhammad lal wrote nice sharing reading article inspiring like post informative awesomekeep providing kind good postonce thanks sepâ utc johnnyb wrote want something try involve reactos project open source window show microsoft kernel use resource good way sepâ utc africanoracle wrote fascinating read ca nt help feeling though every established tech company going pain warty code crewman woman sometimes feel upset quality work produce stuff maintain applaud mrb rant follow comment oh would try correct error shown error adopted new view fast shall appear true view octâ utc marc wrote ha guy obviously got as handed comment nt second thought word man ordered apologize decâ utc marc wrote xna need say well fuck mr anonymous microsoft employee want hear decâ utc dmitry wrote development serverside javascalapython application window pain gave switched linux many year ago ability script everything shell pluggability system clarity flexibility linux killer feature ui experience also awesome using tiling window manager xmonad xfce rock multymonitor configuration window tiling interface beautiful useless imitationone bad thind window inability transfer installed apps setting new installation easily done linux mean dpkg export selection copy home dir terrible googledownloadrunnextnextnextfinish nightmare maybe fixed window app store vendor lockin application certification look like crap look like new feature m enrolls fatal bug fixed imitation wellknown linuxos x feature sooner m sink better hole world imho decâ utc sachin wrote useful information thank sharing febâ utc meh wrote sound like microsoft next strategy get u buy load shit ton word used chatarticle sound like regurgitated bull horse as feeding u word like passion family sorry bob u sold platonic gesture want right fire dev team hire new people merge division kick window kernel redesign scratch homework actually get right maybe u torrent user may actually buy hype febâ utc ev wrote thank sharing expression nice aprâ utc ak wrote care long work like even close want happy love window bread butter aprâ utc wrote sure post touched internet people really really nice post building new web site kdfkebeaafedgcdb aprâ utc shane wrote microsoft done tremendous work keep code quality near linux kernel nt seems near leader user desktop server space mayâ utc girr wrote modification code even single line fix go dev testing qa testing amount deployment fix included componentproduct given customer microsoft follows fix consumes time devs qa hence priority fix given instance always questioned validated hence time end touching code stable even small line change mayâ utc girr wrote crappy code get checkedin everywhere time checkin undergo thorough code review time qa validates ahead code review done code get checkedin code review comment code review later taken priority qa already validated change crappy code get live many life time even m mayâ utc girr wrote whole world running fast pace releasing feature higher priority writing quality code code pass qa validation good checkin minor issue reported deployment evaluated severity either fixed ignored based severity mayâ utc anuj wrote useful information shared really thankful mayâ utc vijay wrote really true window fell behind o like linux whatever shared truly acceptable thanks lot useful article junâ utc meisterister wrote linux user let say systemd trainwreck slow motion allencompassing monolith controlled small oligarchy dev comment octopus eat tokyo totally right julâ utc eric wrote people people rubbish linux android verus window call yourselfs developer programmer hacker yet non frigging clue internal working apple intel microsoft etc company hack modeldifferent one company focus upon desktop others hardware another robot yet matter operating system use still binary programming zero oneswhich core modern computer programming essential operating system preform still advance way window actually unix linux operating system modified versionas person used programmed unix programming b linux version window android operating system see problem selfish jealous selfless interest capitalist argontevery software fault operating system like linux hacked second augâ utc abyss wrote well give lil attention leak entire kernel source code public know important going marâ utc windowspain wrote developing since code c window using directly window api ie wrapper layer like mfc etc experience window complete mess api well thoughtout overly complicated work documented bug documentation wrong everything knitted hot needle feel developer thought devil may care make every release bit colorful still ugly nt fix bug annoyance since xp example dialog software removal lot software installed take age build list swear design way list built le second would take maybe week working time implement fast version worst since year nothing good say window plan long term future take example database connectivity instead something right beginning released nearly every two year something new odbc mdac dao ado api designed platform independence mind still valid today programming system level linux everything work documented api clear straightforward well thought joy creating software linux try write code send email window without c net mfc etc scratch take week dig simple mapi extended mapi need use understand com like hell linux need one line code sure extended mapi much braindead retard design api make simple process sending email painful good example going wrong window bad design place mention internet explorer made live whole generation web developer pain apply standard wrote rage window leaf impression bunch ape hacking wildly keyboard producing inarticulate sound knowing post employee affirms impression sooner company vanishes better imagine billion dollar worldwide economy pay due permanent crash data loss window often requiring reformat reinstall time window nt already mature stable gave crappy win public xp decided provide nt kernel consumer mayâ utc youtube anonikoda wrote problem idiot microsoft entirely idiotic made window great made kernel differently least game used play kernel compatability notice error nothing able update fast anyone would like meet requirement fishy kernel hope fixed simple say augâ utc rhohit wrote window slowing every new version found window slower sepâ utc mc wrote window actually unix linux operating system modified version uh actually genius window unix linux heritage thanks playingeveryone expert internet sepâ utc revenclaw wrote pathetic opinnionating article top result window nt kernel module know linux people people value engineer satisfied proofofconcept solution contrast engineer window world care quality even window nt kernel doesnt improve fuck call filesystems without right management innovation opinnionating article deserves strong opinioni think confuse innovation catching window standard tl dr article obviously biased emotional linux fanfaggotry decâ utc mrb wrote revenclaw know linux people know wrong people one thing certain comment sweeping generalisation fallacy talented le talended engineer side linux window janâ utc meh wrote window like two table put together held duct tape course slow actual feature spyware febâ utc alexander ewering wrote experience window far fastest mainstream o compared o x linux hardware often factor kernel slow userland stuff must great make aprâ utc windowpane wrote windowspain nt use anything else whine coding hard say send email one line linux linux really say apis since beginning really code nt necessarily compile even year donebut sure show one line code sends email c linux without library framework since nt like go oni nt think nobody right mind actually developed long term basis would come saying thing would know better would know issue linux world would know issue window world would know merit able say wrote thing year kinda work nt window fault fault using tool available yeah one line code linux distro sends email please intrigued quite happy rest u nt strange masochistic tendency shy away using tool given u window aprâ utc ù wrote linux almost year never touched window last window made install dual boot see whats goin onnot bad gon na leave linux good junâ utc dave wrote wonder changed post nadella know window great o stable quick machine sepâ utc nehad shello wrote since window arabic language working well part window working command prompt console novâ utc truf wrote devs like digital oil field worker mostly incompetent far arrogant given manifest flaw novâ utc acg wrote everything kernel level founded non changing year programming language duh wonder first place win win whatever paint coating body keep illusion going junâ utc dav wrote wow lot changed year since posted lot changed bet someone m could write exact essay would accurate theni faith m soon window phone stop saying voicemail message status top phone message page show message message list right say message tell m certainly app developer plain suckand xbox one page playing movie let select purchased movie content page finished loading change selection back default soon page load complete developer seem idea deal asynchronous operation like background page content loadingas developer written window program last year also seen internal structure company shamble look desktop phone group allowed write almost identical completely incompatible apisbut best part article reading year written seeing comment bigger picture google beloved apple history year people nt seem see happening pretty hilarious shortsighted one year go guess seem failing think company wo nt around decade least window blessing curse great development tool mediocre m store distribution tool terrible difference api make difficult write one set code apps two three different platform uwp thankfully changing thing like smart screen filter almost tell user software malware downloaded n time m wo nt tell u many time n get certificate get rid slanderous might malware message terrify user throwing awesome freewarefacebook ca nt remember show recent setting google keep telling new notification even though read notification day ago seriously doubt great people getting stolen m think software company culture entire industry shifted selling good software selling ad linux might great nt want get stuck qt java version software cater world people willing pay appsi hope thing get better m sad maybe nt julâ utc anonymous wrote filename redacted hash redactedhmm sound like b marâ utc ether wrote big kernel marâ utc gmailcom wrote child hood junâ utc tfunk wrote always find reason say little incentive say yes someone new agile noticed trend quite bit perhaps team agiling correctly feel request would positively improve product get shut due scope augâ utc contact kaspersky support wrote thanks sharing type nice helpful information u window kernel hope get new information regarding post future information valuable user href http kasperskysupportnumbercoukcontactus contact kaspersky support sepâ utc freedom wrote say matter software operating system anymore microsoft pile spyware linux github bought microsoft making bad microsoft reliability security linux window believe die crap involved downloading github distrust microsoft think gardening friend around screw operating system octâ utc wrote applies equally well pretty much software development company reasonable size anywhere amount politics industry simply agonizing much human capital waste gervais principle applies meticulously see http daedtechcomdefiningthecorporatehierarchy octâ utc corporatehealth wrote good post janâ utc corporatehealth wrote good post janâ utc dominic wrote people almost always fail improve performance specific scenario formal informal program systemic performance improvement people ability allocate resource believe impact business goal work sisyphean started caring security window xp existential threat business low performance existential threat business tv repair guide setup basic issue find following href http wwwtechsupportdubaicomledtvrepair tvrepair dubai thanks writing associate degree absolute masterpiece actually appreciate word julâ utc asd wrote asd sepâ utc civil wrote hey newest comment stack top sepâ utc williamduh wrote urlhttp mygefidynygqsitemapxml http mygefidynygqsitemapxml url decâ utc williamduh wrote urlhttp hujezofocytatksitemapxml http hujezofocytatksitemapxml url decâ utc cbilson wrote object manager team even get code past ob owner tree management nt care work microsoft true least org big part review around collaboration team contributing others success building work others believe case since around time satya took overgranted nt meant encourage willynilly change point work thing impact regardless owns component contribute tothe bigger interesting problem unplanned work accounted like submit patch improve performance directory traversal consistent go away never deal part directory traversal count getting called break change need made part life ca nt many adopted child like life start impact thing like work onin open source world feel nt exist assumption ownership could submit change like drop face earth go prison murder life would go project touched janâ utc mentok wrote ken wrote post mrb nothing rant someone looking minute fame sure true window flop nt clue compete android notice nt mention apple nuff said thatthe bigger picture google beloved apple history year people nt seem see happening haha comment aged well lotta people completely subscribe selfinflated importance value work nt programmer hero see longsuffering long hour underpaid compared superior etc get stuff done heck worklife balance right end left bragging right nobody care little else vast majority programming accomplishment ten year ago overwritten automated nt really big deal grand schemeif see people care worklife balance foolish uncommitted worthless gear capitalist machine best get shallow thankyou maybe percentage raise get jumped ship picked elsewhere work passion pride know value individual end teamboss best worst regarding final edit seemed oblivious point initial inflammatory attitude word passion consume everything else worklife balance obsession obsession nt healthy never never hero one janâ utc android guy wrote crack steve yegge totally made spit coffee janâ utc microsoft window wrote window indeed slower operating system many scenario gap worsening cause problem social almost none improvement sake sake glory see linux world need information window o visit site http wwwimpkeyscomproductcategorymicrosoftwindows great day junâ utc
160,Lobsters,osdev,OS,Make a disk image formatted with both ext2 and FAT at once,https://github.com/NieDzejkob/cursedfs,make disk image formatted fat,cursedfs got nerdsniped write filesystems,cursedfs make disk image formatted fat cursedfs wget http cursedfs sudo mount loop cursedimg mountpoint cursedfs l mountpoint mkfscursed cursedfs sudo umount mountpoint cursedfs sudo mount loop msdos cursedimg mountpoint cursedfs l mountpoint gudnuseogg got nerdsniped turn surprisingly simple create fat volume lot reserved sector put reserved sector work filesystems choose different place put superblock fat us first sector leaf first kilobyte unused write filesystems yes first decided thought writing image would surely break everything turn method found mean filesystems nt conflict
162,Lobsters,osdev,OS,aiju/jsdrawterm - Javascript 9P/drawterm implementation,https://github.com/aiju/jsdrawterm,aijujsdrawterm javascript implementation,javascript drawterm port warning probably insecure drawterm websockify install release page build,javascript drawterm port warning probably insecure version drawterm program connecting plan system run webbrowser connect remote host us websockets mean need proxy websockify jsdrawterm written javascript us bunch c library plan crypto drawing routine need compiled webassembly since javascript also deal crypto probably horribly insecure hacker steal cat install either build webassembly download release page copy file webserver edit configjs taste start websockets proxy websockify websockify build emscripten installed simple make build blobjs blobwasm file release includes j html wasm jpg file
163,Lobsters,osdev,OS,Autonomous Rust Unikernels in Google Cloud,https://nanovms.com/dev/tutorials/autonomous-rust-unikernels-in-gcloud,autonomous rust unikernels google cloud,enter unikernel nanos branch ops nanos aslr like functionality,time excited new feature write multiple pr merged multiple repos typically one would wait patience everything fully merged master yet ca nt wait talk one cause damn cool new branch offer way instantly reboot cloud vms whenever application dy horrible death let say bunch bad packet wrong side town arrive decide shoot vm full lead typical linux setup instance probably dead jim load balancer might start rerouting around container setup might get sort deal sure process died systemd might configured restart failure whole box however nt running full blown linux base vm base vm single application vm booted straight application respawned second process instead vm enter unikernel new branch literally kill vm halt instruction webserver alive within second come brand new memory layout nt even thinking branch opened pull request turned nice interesting attacker perspective memory layout everything ability map program memory layout make almost modern exploit work aslr address space layout randomization one amongst many mitigation deal happens get hit new memory layout every http request make attacking application hard one thing attaching gdb locally remote system consider killer feature unikernels cloud elsewhere enough theory let get code coming future probably skip next step reading january please follow along like said none merged yet want play box need clone nanos repo checkout branch also since corresponding pull ops repo yet add quick little hack test ops eyberg box gosrcgithubcomnanovmsops git diff diff git aleptonimagego bleptonimagego index aleptonimagego bleptonimagego func addfromconfig manifest c config error maddargument madddebugflag rebootonexit dbg range cdebugflags madddebugflag dbg essentially toggle feature nanos unikernel manifest manifest morphed throughout past year provides stunning array debugging toggle filesystem layout configuration environment variable ops abstract hell definitely room refactoring work ok back memory layout security let look following code apology rustacean please forgive nonrusty thing might fn main let x let address format p x println address essentially looking address stack variable x normally linux memory location change invocation run however toggable via proc eyberg box xz cat procsyskernelrandomizevaspace eyberg box xz main eyberg box xz main eyberg box xz main eyberg box xz echo sudo tee procsyskernelrandomizevaspace eyberg box xz main eyberg box xz main nanos aslr like functionality turned default presently nt offer capability turn believe jit langugages want unless build nanos let deploy little rust webserver google cloud unikernel practicing rust user forgive something stupid start small project cargo new helloworld bin stuff configjson cloudconfig projectid myproject zone bucketname mybucket using google instead aws cause much quicker deploy le minute build script eyberg box rhelloworld cat buildsh binsh cargo nightly build mv targetdebughelloworld helloworld export googleapplicationcredentialsgcloudjson ops image create c configjson helloworld note need use nightly cause using inline assembly instruction inject halt deploy script eyberg box rhelloworld cat deploysh binsh ops instance create z helloworldimage rust server feature asm use std io read write use std net tcplistener tcpstream use std thread fn handleread mut stream tcpstream let mut buf match streamread mut buf ok let reqstr string buf println reqstr err e println unable read stream e fn handlewrite mut stream tcpstream let response b okrncontenttype texthtml worldrn match streamwrite response ok println response sent err e println failed sending response e unsafe asm cli asm hlt fn handleclient stream tcpstream handleread stream handlewrite stream fn main let listener tcplistener bind unwrap println listening connection port stream listenerincoming match stream ok stream thread spawn handleclient stream err e println unable connect e ok issue request kill process kill entire server left server overnight see bot sniffing around looking random metasploit crap yet time purposely kill back serving request remember nt restarting process literally rebooting server second let sink second able reboot application entire server second response attack killer feature unikernels
164,Lobsters,osdev,OS,BeOS: The Alternate Universe’s Mac OS X,https://hackaday.com/2020/01/09/beos-the-alternate-universes-mac-os-x/,beos alternate universe mac o x,meet beos dualprocessor hobbit system interface home computer time standard coulda contender internet appliance haiku march haiku guide walk setting beos using virtualbox guide using pcem instead,likely familiar old tale steve job ousted apple started company next apple bought next technology brought job back ceo however job path unique history computing since could gone whole lot different jeanlouis gassée replaced job apple head macintosh development also fired company also formed computer company help another exapple employee steve sakoman called inc goal create modern operating system scratch based objectoriented design c using proprietary hardware could allow greater medium capability unseen personal computer time meet beos could imagine emailing someone video file inc beos time foray new way home computing feature introduced brand new time ubiquitous thing preemptive multitasking journaling filesystems uncluttered desktop design way forwardthinking enough look screenshot today swear modern linux environment graphical aesthetic aside main strength pushed developer multimedia support platform offered operating system designed way audiovisual format easy work also hardware built variety io port accommodate work time dualcore computer still distant dream first bebox prototype already developed dualprocessor hobbit system hobbit shortlived risc processor specifically designed c language however since stopped production chip inc quickly shifted development powerpcbased system instead would become bebox know today powerpc bebox including blinkenlights lower left right case bebox finally debuted october sporting dualpowerpc architecture clocked mhz mhz model following year later emphasize innovation two distinct processor core front creativelyshaped case two stack led called blinkenlights one displaying current load cpu top offered interface home computer time standard two midi io port multiple linelevel audio channel connector dubbed geekport connector experimental electronicdevelopment oriented port featuring power pin two bidirectional lane da ad converter name rightful justice coulda contender apple system showing age company invested effort development successor codenamed copland released system missed deadline dysfunctional management project deemed unviable cancelled lookout outside source next operating system apple showed interest acquiring inc rapidly gaining notoriety company pioneering new desktop computing paradigm objectoriented beos everything apple wanted new mac o unfortunately inc employee apple set deal gambling new technology company lowballed offer million usd executive refused later year apple would announce buying next twice amount million usd course deal included steve job package something inc offer rest history sony evilla one appliance designed run beia software lack acquisition hardware left state commercial unviability unit sold company forced shift focus software rather hardware beos ported commonplace architecture cope change sale continued decline company finally resorted giving beos away free focusing beia version beos meant use internet appliance even pivot enough save project company inc laid majority employee sold company asset palm inc decided pursue project aside leak minor version update dano official production beos shuttered good haiku march commercial demise beos spell end core vision inc employee since new open source project called haiku started scratch picking beos left first beta new operating system released september nightly release continue update new feature include full package manager one commonly seen linux distribution support modern medium format original experience beos presented two decade ago still recreated emulator since method us later port beos quite get whole bell whistle custom bebox hardware could give still partial glimpse future world yesterday adafruit written guide walk setting beos using virtualbox however since luck getting work matter ended writing guide using pcem instead case one work either left u wonder different would desktop computer ecosystem look today year ago back apple decided buy inc instead next would tim bernerslee used bebox run world first web server instead would mac o x look today would still iconic pun intended dock maybe tendency technology point convergence mean eventually everything would develop way regardless way knowing always fun take trip memory lane
165,Lobsters,osdev,OS,Hobby x86 kernel written with Zig,https://github.com/jzck/kernel-zig,hobby kernel written zig,join github today sign file permalink hobby kernel zig feature dependency compiling running note interrupt call chain reference topic resource reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time hobby kernel zig feature frame buffer keyboard driver terminal console lspci scheduler time slice preemption round robin sleep block unblock storage ide ata driver progress dependency compiling zig build compiles link multiboot kernel without bootloader running qemush start qemush monitor qemush quit gdb see provided gdbinit note interrupt call chain interrupt idt n isrn isrdispatch handler n default unhandled reference hobby kernel zig topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
166,Lobsters,osdev,OS,"Why is Wednesday, November 17, 1858 the base time for OpenVMS?",https://www.slac.stanford.edu/~rkj/crazytime.txt,wednesday november base time openvms,,product openvms vax version openvms alpha version vax vms version component system time source digital equipment corporation question wednesday november base time openvms vax vms answer november base modified julian day system original julian day jd used astronomer expressed day since noon january bc measure time introduced joseph scaliger century named honor father julius caesar scaliger note julian day different julian calendar named roman emperor julius caesar bc scaliger traced three time cycle found first year cyle bc three cycle year long multiplying three number able represent date bc ad starting year historical event known fact jewish calendar mark start world bc today numbering scheme still used astronomer avoid difficulty converting month different calendar use different era julian day happens november modified julian day us following formula mjd jd changed day start astronomer considered convenient day start noon nighttime observation time fall middle changed conform commercial day modified julian day adopted smithsonian astrophysical observatory sao satellite tracking sao started tracking satellite nonvirtual ibm r computer sputnik launched julian day january octal notation big fit field half ibm standard word memory one wanted waste bit left keeping julian day word however also needed track hour minute bit gave enough accuracy decided keep number day left bit hour minute right bit word eighteen bit would allow modified julian day sao day grow large nov allowed seven century using bit date could possibly grow large still cover century well leaving possibility representing negative time year preceded oldest star catalog use sao also avoided use negative time satellite tracking calculation base time nov since used vax vms openvms given base date nanosecond granularity implemented within openvms absolute time representation sign bit must clear openvms trouble time time clock timekeeping operation openvms suddenly stop system time value go negative note openvms time display manipulation routine allow digit year field expect corrected future release openvms sometime prior
167,Lobsters,osdev,OS,Retro Review: Gonx (Be concept),https://isometricleaves.wordpress.com/2019/12/30/retro-review-gonx-be-concept/,retro review gonx concept,really cool idea sadly never got grow system autumn poetry themed o archived internet archive today index see action explored gonx bit definitely haiku screen usual login screen workspace cubed thing screen gonx personal wheel idea archived site screen exploring new desktop side applet applet free deskbar pretty much find preference tracker window chrome screen connection screen beshare deskbar menu haiku dockbert screen unified mailbox screen netoptimist screen new medium player short bad gonx haiku hope enjoyed article want read like,really cool idea sadly never got grow system originally going cover zeven o first look gonx since really feel zeven meant grand finale review enter exciting new era autumn poetry themed o would take beos died thought take look environment first thing wonder gonx day made exactly well honest completely sure might good clue existed cotitofreefr back time site archived internet archive today beautifully preserved link index see action page thus gather page cotito author real screen name would best guess cotito likely designed deserves full credit work refer author cotito back haiku forum explored gonx bit hope great idea gonx could inspire haiku add new feature future first time seen concept definitely say fan despite stuff love gonx idea wish haiku today also see thing would need bit fine tuning better today looking side gonx concept shot screen gonx demo world ready geeky fun let go screen usual login first impression really feel cotito gonx concept communicates audience different desktop time think say distinctive feel would even surpassed unofficial zeta fork login box wanted start review since system first thing see definitely reflects step beos example innovative stuff inside gonx movable sidebar one could exit gonx looking hollow hand widget correctly appears would able moved docked different corner screen made working system like element login screen floating sidebar standard part gonx concept reappears throughout interface also another standard gonx feature complex first seems sidebar sense first one one le another layer sits desktop appears like indented folder tab desktop cut away peeled back svelte way around quite beautiful think one thing bit obsessed gonx concept alone help button nice something beos application beos designed let people discover use powerful system sat ready action stack disk documentation reference onboard help feature definitely quite welcome also environment button well highlighted show finally gonx environment box look like tab like beos window usually would make really intriguing instead vertical bar word environment oriented sideways reminiscent something early microsoft design one would find really early pocket pc neptune whistler beta name xp like usual login box prompted select identity tip password enter think author meant say type black box white sansserif text read see symbol registered identity usual user name password field enter button standard login box feature user also picked arrow interestingly right side user box finally cool gonx fashion introducing experimental widget upside tab anchored bottom window identity currently power sake retro reflection like stop moment phosphur zeta others one point tried multiuser setup login box least geek opinion nothing far family look smooth login box gonx could would made real screen workspace cubed proposed feature like cutaway sidebar gonx made go yet retro sort way already workspace concept might yes beos x window system workspace innovative plane window mere replicant honestly look like something taken right quickdraw macintosh sgi irix demo today easy take granted pretty much every modern operating system easily capable fact year concept quartz extreme capable mac exposé also rotating cube desktop switching introduction mac o x panther compiz gnulinux soon plugins desktop space well nevertheless quite cool imagine action notice desktop appears sunken left face cube three face see personal guess gonx author likely envisioning layered desktop idea make stare amazement usual cube switcher theory right lot power behind think hierarchy layer dynamic rendering possibly desktop compositing engine power thing course cube clearly author main focus also stuff noticed concept well one thing use beos title tab instead white text standing top window frame read workspace background merely float find quite although nonsolid desktop present quite visual challenge snippet appears along mock window edge shown also setting button left imagining could change would offer choice classic workspace would change background cube lighting perspective opacity size lastly two tab tucked bottom window environment guessing icon environment appears free cube brown cube inside translucent box would appear would pin cube also lock position would helpful would prevent accidentally moved moving window face cube screen gonx personal wheel idea anyone remembers cool mouse wheel popups mouse addons offered perfect example one ring uis would looked like studying look like invoked clicking perso floating sidebar setting maui name likely meant user could switch back would quite cool indeed whether warm restart service etc would switch cold reboot would needed unclear however also easy mode show sidebar wheel invoked reading description archived site apparently easy mode hide disk etc user curiously never saw disk stack disk desktop concept picture make really strange gonx author would included summoned perso wheel would show picture audio web file work downloads folder positioned ring around perso star main home folder inside truly definite relic late early honestly gonx actually developed think would used feature nostalgic fun much fan concept beos humble opinion feel needed freedom really useful example could hold option control clicking three button mouse wheel click middle click bring like headsup display hud could see instantaneous access home folder folder would quite handy screen exploring new desktop brings actually exploring gonx desktop believe going explore every millimeter next picture mentioned last section sidebar left still setting maui perso shown screenshot well side applet layered cut sidebar bottom right addition help also news line workspace temp would offline feature work like cache area best guess news think selfexplanatory temporary file likely apply default browser although possibility well since writing lot screenshots snippet looked like close mac window somewhat similar idea sidebar time definitely first world definitely something ahead system would later panel would pop top right side screen applet free deskbar also top desktop applet clock free deskbar menubar anything honestly nice except clock need sort background around readable nonsolid background overall really like idea definite different perspective usual desktop pretty much find cotito gonx many way reimagined version dano look control way widget look etc see dano throughout interface reference real find box appears back beos dano file folder name disk popup menu search bar button query proxy name search option shown gonx find pretty much standard beos box interesting take active button application however notice gonx active button search drop shadow blue glow around edge noted make use several dano element would likely would pulse real popup menu text field gentle shadowed hover well like dano color set pale gray gonx color preference set safe assume changed box preference tracker window chrome dano last release beos tracker window case preference since showing gonx concept appeared like one shown origin decor enabled tab wrapped around top left corner vertical area sticking side first time border across top window trio small hide zoom close button dano added minor shadowing came preference preference gonx concept subtle feature dano toolbars handle indicating could moved path field combo box arrow popup menu right would meant gonx would built one could navigate backwards menu present path nice oddly attribute showing tracker menu next file window despite icon view scroll bar empty inactive difference preference gonx curiously appears release set later dano set appears modeled nevertheless extra plugins locale spicykeys chili pepper preference join set boneyard color dano title tab gonx weird twist origin beos dano shown snippet find title tab active preference title tab inactive gonx close hide zoom button clump three origin next title tab given chrome notice also default chrome lighter slate blue gonx however like dano origin enabled decor rounded title tab wrap around top left corner window get roughly similar design cool thing gonx enjoy looking thing applies origin window element small practically useful way could solve like perhaps adding magnification would adjust mouse position one area wish gonx could improved screen connection connection dialog summoned cutaway sidebar bottom right meant way quickly manage network connection popup menu would allowed setting profile also look like using dial networking setting would definitely applied system also guessing would tied apps like im instant messenger irc internet relay chat client would really nice innovative concept imagining able explain quicktime mac used control panel internet speed could set determine stream quality imagine application advantage looking box appears addition setting connection option first pane would also connection statistic per mini dock statistic option look like meant zoom hover bottom window think cool part reviewer anyway cotito gonx idea able connect disconnect literal click switch remember mainstream mobile desktop environment began putting easily accessible airplane mode button slider screen beshare one really anything new fork looked dano probably remember seeing beshare file sharing tool beos gonx concept appears concept beshare file attribute setting menu actual app file list pane file name file size kind etc column info log box downloads section yet another list box user name id column different server user name query icon first two menubar next part also several little tweak ui show compared beshare distribution deskbar menu bottom several gonx screen see dock beshare mockup screen author show full potential gonx dock would magnification like mac o x dock time writing macos catalina still magnification meant expand enlarge item hovered show label tracker shown inside dock right icon context menu allowed closing hiding expanding switching application window today haiku implemented dockbert screen unified mailbox supposedly meant improvement mail client beos visually proposed mockup shown notice something else make gonx really cool around maverick mac began clean application window consolidating item window frame something think pro con gnome sort thing application google microsoft started sort thing well ahead explain mean background window show list message preview pane usual toolbar reply button visible either fully partially next menu file edit mail message attribute new sendreceive peoplecontacts query button new message window front next file edit message menu send compose save print button window completely eliminates need separate toolbar usual carbon copy subject field along account popup menu course main body letter would go tab mail enclosure moving last mockup screen gonx interesting perspective side window reveals mail zipped archive longer folder one cool thing mail client lost modern time full part filesystem everything inbox etc fully indexable visible tracker overall however idea minimizing space compacting bar quite cool definitely something new universe screen netoptimist keeping internet focus gonx area also idea default browser look like loosely modeled netpositive netoptimist sport new look start file edit view menu like seen gonx us slim toolbar idea go bookmark query menu nice icon hard imagine first two menu net query search box next would made working system would cool imagine awesome bar firefox year advance could search web also search history bookmark tie metadata indexing capability would gorgeous look action next downloads dropdown arrow next imagine would open menu showing downloaded item toolbar location back forward stop reload print lastly main body window two section first sidebar made two collapsible pane bookmark unsurprisingly include bookmark downloads right cotito page french nice nod author gonx concept screen new medium player finally presented cotito called nifty player gonx page showed fake concept still personally wonder whether name chosen nice play popular mplayer gnulinux distribution back today got file view help menu bookmark menu heart icon reminds finder idea would really nice imagine able listen web radio stream video go back click default player would nice location bar back forward button give web touch video singularity pretty blue purple black hole pale green seek control mediaplayer beos button previous rewind stop playpause fast forward next different though symbol navigation one amber stop red play green also volume mini control although speaker blue also like beos concept illustrates player would mini mode player collapse mini version playpause button seek control switch bring u back full mode concludes retro tour gonx one best beos concept ever made lot believe gleaned haiku app developer haiku operating system learn admire short bad cotito gonx remains concept future beos much like io android window ubuntu etc fan recent time create mock photo video geeky dream could next someone imago favorite o environment look like really show good fun imagination dreaming designing environment o think anything could end retro review bad idea code power distribution make gonx real many way seeing gonx enjoying coming back reality like waking good dream realizing dream next place zeven o last stop get everyone universe dreaming year open source successor beos haiku hope enjoyed article like work want help get stuff please link follow page support patreon want read feel welcome visit list article like like loading related
168,Lobsters,osdev,OS,SerenityOS was hacked in a 36c3 CTF! (Exploit and write-up),https://github.com/Fire30/CTF-WRITEUPS/tree/master/36c3_ctf/wisdom,serenityos hacked ctf exploit writeup,challenge serenityos bug exploit strategy reading flag building,challenge challenge given remote shell machine running serenityos flag contained block device devhdb figured would need escalate privilege read flag went searching suitable bug bug serenityos validation pointer passed syscall argument using process validate readwrite function ssizet process sys read int fd buffer ssizet size size return einval size return validatewrite buffer size return efault return description read buffer size example code show read syscall validation bool process validatewrite void address ssizet size const assert size virtualaddress firstaddress address virtualaddress lastaddress firstaddressoffset size size return false firstaddresspagebase lastaddresspagebase mmvalidateuserwrite lastaddress return false return mmvalidateuserwrite lastaddress bool memorymanager validateuserwrite const process process virtualaddress vaddr const auto region regionfromvaddr process vaddr return region region iswritable real verification however done memorymanager validateuser readwrite function called process validate readwrite memorymanager validateuser readwrite simply get region associated passed vaddr make sure readablewriteable region memorymanager regionfromvaddr process process virtualaddress vaddr auto region kernelregionfromvaddr vaddr return region return userregionfromvaddr process vaddr looking regionfromvaddr notice something seems odd even though supposed verifying user pointer us function memorymanager kernelregionfromvaddr find region region memorymanager kernelregionfromvaddr virtualaddress vaddr vaddrget return nullptr auto region mmmkernelregions regioncontains vaddr return region return nullptr memorymanager kernelregionfromvaddr make sure address search vaddr kernel memory map return region associated mean pas address would pas validation treated like userspace address give u many avenue readwrite kernel data comment memorymanager initializepaging confirms something value exist fixme move everything kernelrelated virtual mark basic physical memory map mb leaving alone mb kernel image last page used quickmappage mb mb kmalloceternal space mb mb kmalloc space mb mb supervisor physical page available allocation mb max userspace physical page available allocation basic virtual memory map kb null page nullptr dereferences crash kb mb identity mapped mb gb available userspace gb kernelonly virtual address space note start kernelonly virtual address space presume userspace nt able read write p exploit strategy using pipe read write kernel memory pretty easily psuedocode int p pipe p void kread kaddr buf len write p kaddr len read p buf len void kwrite kaddr buf len write p buf len read p kaddr len needed determine actually placed luckily quite easy simply reading content dmesg command made clear kernel stack always region anon courage dmesg allocated stack allocated stack allocated stack anon courage fact leak kernel stack child process fork read last line procdmesg kernel log address process creation gaining code execution obtaining child stack base trivial first put child asleep using sleep syscall simply read kernel stack find return address want overwrite case syscallasmentry overwrite pointer point payload choice child wake jump payload reading flag initially thought obtaining root mounting devhdb would enough solve challenge however flag text file filesystem image ca nt mounted meant read raw block device made payload call device getdevice obtain device object associated devhdb called diskdevice read object finally reading flag building exploit built using serenityos build system place exploitcpp userland folder type make exploit binary built
169,Lobsters,osdev,OS,lilith an OS made in Crystal,https://github.com/ffwff/lilith,lilith o made crystal,lilith screenshot building buildingmd running feature license,lilith posixlike kernel userspace written crystal screenshot building see buildingmd running cpu support required run o makefile provides script run qemu kernel make run run storage mbrformatted hard drive image partition must provided running directory name driveimg kernel automatically boot mainbin executable hard drive panic ca nt loaded issue command run gdb attached make rungdbimg feature basic support hybrid conservativeprecise incremental garbage collector ideata support well load primary master support unix syscalls open read write spawn preemptive multitasking userspace c library written crystal mostly window manager graphical program terminal emulator file manager much go license lilith licensed mit see license detail
170,Lobsters,osdev,OS,Hyperbola GNU/Linux-libre changing from Linux-libre to HyperbolaBSD,https://marc.info/?l=openbsd-misc&m=157767899416575&w=2,hyperbola gnulinuxlibre changing linuxlibre hyperbolabsd,prev list next list next thread openbsdmisc hyperbola gnu linux changing bsd soulofroot gmail com mail gmail com message body http wwwgnuorghelpgnubuckshtml http wwwgnuorgdistrosfreedistrosenhtml http wwwgnuorglicenseslicenselisthtml gplincompatiblelicenses http http http http wikihyperbolainfodokuphp iden main rustsfreedomflaws http bugzillagnomeorgshowbugcgi http http savannahgnuorgbugs funcdetailitem http wwwhyperbolainfonewsannouncinghyperbolabsdroadmap http forumshyperbolainfoviewtopicphp prev list next list next thread configure news add list korelogic,prev list next list prev thread next thread list openbsdmisc subject hyperbola gnu linux changing bsd soulofroot gmail com date messageid mail gmail com download raw message body hi written article free gnulinux distribution one distros ever include propose anything nonfree must happened mistake developer committed removing find nonfree software documentation one distribution report problem earn gnu buck http wwwgnuorghelpgnubuckshtml inform developer fix problem reference http wwwgnuorgdistrosfreedistrosenhtml hyperbola gnu linux changing bsd announcing hyperbolabsd roadmap luke r due linux kernel rapidly proceeding unstable path planning implementing completely new o derived several bsd implementation easy decision make wish use time resource create viable alternative current operating system trend actively seeking undermine user choice freedom distro hard fork openbsd kernel userspace including new code written replace gplincompatible part http wwwgnuorglicenseslicenselisthtml gplincompatiblelicenses nonfree one http reason include linux kernel forcing adaption drm including hdcp http linux kernel proposed usage rust http contains freedom flaw http wikihyperbolainfodokuphp iden main rustsfreedomflaws centralized code repository prone cyber attack generally requires internet access use linux kernel written without security mind kspp basically dead project grsec longer free software many gnu userspace core utils forcing adaption feature without build time option disable eg pulseaudio http bugzillagnomeorgshowbugcgi systemd rust http java http savannahgnuorgbugs funcdetailitem forced dependency continue support milky way branch legacy linuxlibre kernel reach end life future version hyperbola using hyperbolabsd new kernel userspace abi compatible previous version hyperbolabsd intended modular minimalist project able reuse code free license reference http wwwhyperbolainfonewsannouncinghyperbolabsdroadmap http forumshyperbolainfoviewtopicphp hiperbola gnulinux free prev list next list prev thread next thread configure news add list sponsored korelogic
171,Lobsters,osdev,OS,Purgeable Memory Allocations for Linux,https://nullprogram.com/blog/2019/12/29/,purgeable memory allocation linux,o hacking purgeable memory serenity found apple platform http githubcomskeetopurgeable allocates anonymous page implemented incorrectly linux purgeable api four function associated pointer purgeable implementation dirty bit atomic compareandswap ensures page purged check write done together atomically potential aliasing issue bookkeeping integer hash worth using,december saw part video o hacking purgeable memory andreas kling writing operating system called serenity recording video progress video implement purgeable memory found apple platform adding special support kernel process tell kernel particular range memory important kernel reclaim system memory pressure memory purgeable linux mechanism like madvise allows process provide hint kernel memory expected used flag interest madvfree application longer requires page range specified addr len kernel thus free page freeing could delayed memory pressure occurs page marked freed yet freed free operation canceled caller writes page given built proof concept toy top madvfree provides functionality linux http githubcomskeetopurgeable allocates anonymous page using mmap allocation unlocked ie process actively using page marked madvfree kernel reclaim time lock allocation process safely make use madvfree canceled little trickier sound subject article note also madvdontneed seems like would fit bill implemented incorrectly linux immediately free page useless implementing purgeable memory purgeable api diving implementation api four function structure definition pointer used api memory allocation bookkeeping associated pointer hidden away sight api consumer full documentation purgeableh void purgeablealloc sizet void purgeableunlock void void purgeablelock void void purgeablefree void semantics much like c weakptr locking validates allocation still available creates strong reference prevents purged though unlike weak reference allocation stickier remain system actually pressure garbage collector happens run last strong reference gone might used say store decoded png data decompressed needed texture struct png png pngload texturepng png die texture texture purgeablealloc png width png height texture die pngdecodergba png texture else purgeablelock texture purgeablefree texture texture continue glrgba png width png height glrgba glunsignedbyte texture purgeableunlock texture break memory allocated locked state since likely immediately filled data application unlock moving task purgeable memory must always freed using purgeablefree even purgeablelock failed free bookkeeping also release nowzero page mapping originally purgeablelock free purgeable memory failure felt clearer technical reason though purgeable implementation main challenge kernel necessarily treat madvfree range contiguously might reclaim page arbitrary order order lock region page must handled individually per man page quoted reversing madvfree requires write page either trigger page fault set dirty bit way tell page purged check filled zero easy sure particular byte page zero since library caller might store anything page solution unlock page look first byte page remember whether zero zero write byte done page use madvise mark madvfree approach library need track one bit information per page regardless page content assuming page allocation byte overhead amortized overhead bad locking purgeable memory little trickier page must visited turn page purged whole allocation considered lost first byte nonzero unlocking library check still nonzero first byte zero unlocking prepares write zero back byte must currently nonzero either case madvfree need canceled using write library atomic compareandswap ca write correct byte page even value nonzero case atomic ca essential ensures page purged check write done together atomically every page expected first byte every ca succeeded purgeable memory successfully locked optimization library could consider first byte look say first long int page library le work page contains nonzero value chance arbitrary value zero much lower however wanted avoid potential aliasing issue especially library embedded passed idea bookkeeping bookkeeping data stored buffer returned purgeable memory never marked madvfree assuming page purgeable memory library allocates one extra anonymous page track number page allocation stored purgeable memory sizet rest perpage bit table described sizet p purgeablealloc sizet numpages p library immediately find starting purgeable memory address illustration p v z sizet numpages bit table downside buffer underflows application would easily trample numpages value located immediately adjacent would safer move beginning first page purgeable memory would made bit table access complicated region locked content bit table matter damaged underflow another idea put checksum alongside numpages could simple integer hash make really slick api since consumer need track anything single pointer address purgeable memory allocation worth using quite sure often actually use purgeable memory real program especially software intended portable operating system need implementation library portable since relies interface behavior specific linux also notsounlikely pathological case imagine program make two purgeable memory allocation large enough one always evicts program would thrash back forth fighting used allocation detecting situation might difficult especially number purgeable memory allocation increase regardless another tool software toolbelt
172,Lobsters,osdev,OS,An overview of direct memory access,https://geidav.wordpress.com/2014/04/27/an-overview-of-direct-memory-access/,overview direct memory access,introduction dma evolved time intel dma driver developer perspective take home message like,introduction direct memory access dma conceptually easy without experience hardware design driver development cumbersome understand blog post explain dma evolved last decade goal make comprehensible especially people without experience hardware design driver development dma allows computer device certain hardware subsystem directly access system memory device memory independently cpu enables cpu keep working concurrently task long lasting memory operation take place considerably boosting overall system performance dma used different hardware like graphic card sound card network card disk drive controller dma rather concept specific technology specification describes detail dma transfer work even contrary concept directly accessing memory without cpu interaction employed many different hardware subsystem today computer typical application communicating peripheral device plugged bus system like ata sata pci pci express beyond dma transfer used intracore communication micro processor even copy data memory one computer memory another computer network via remote dma mix technology nvidia new gpudirect rdma feature give concrete example imagine playing open world computer game load new game asset demand hard disk large amount game data must copied hard disk system ram without dma cpu would actively involved every memory transfer operation consequently le computing time would left game play related task like ai physic time multicore processor seems le like problem however data volume work load size ever growing offloading large memory transfer operation cpu also today absolutely essential order achieve high system performance dma evolved time experience many software people think dma nowadays still work old day guess intuitive way think dma back extension device actively take part dma transfer dma controller eg intel first used ibm pc enabled dma transfer system memory device io good old industrial standard architecture isa bus dma controller could programmed cpu perform number memory transfer behalf cpu way accomplishing dma transfer also known third party dma time system bus identical isa expansion bus account reduced bus performance situation cpu dma controller needed access bus simultaneously different dma mode cycle stealing transparent burst could used first ibm clone came expansion bus got physically separated system bus using isa bridge necessary clone cpu running higher frequency expansion bus figure single bus separated bus architecture depicted introduction conventional peripheral component interface pci bus architecture dma controller became obsolete technique called bus mastering first party dma pci dma transfer implemented allowing one device time access bus device called bus master bus master hold bus perform memory transfer without cpu interaction fundamental difference bus mastering use dma controller dma compatible device must contain dma engine driving memory transfer multiple pci device master bus arbitration scheme required avoid one device drive bus simultaneously advantage bus mastering significant latency reduction communication third party dma controller avoided additionally device dma engine specifically optimized sort dma transfer performs today computer contain dma controller anymore support legacy bus like eg isa often simulating isa interface using low pin count lpc bus bridge pci successor latest peripheral computer bus system pci express pcie introduced pcie turned conventional pci bus true bus architecture several device physically sharing bus serial packetswitched pointtopoint architecture similar packetswitched network function pcie connects device dedicated bidirectional link pcie switch result pcie support full duplex dma transfer multiple device time arbitration logic replaced packet routing logic implemented pcie switch pcie entirely different pci hardware level pcie preserve backwards compatibility pci driver level newer pcie device detected used pci driver without explicit support pcie standard though new pcie feature used course dma driver developer perspective know dma fit computer hardware architecture let see dma used practice speed data heavy task since dawn dma driver software must prepare peripheral dma transfer operating system o full control memory system see later important file system userspace process first step driver determines source destination memory address transfer next driver program hardware perform dma transfer major difference pcipcie dma legacy isa dma way dma transfer initiated pcipcie uniform device independent way initiate dma transfer exists anymore device contains proprietary dma engine contrast legacy dma controller always first peripheral device dma engine programmed source destination address memory range copy second device signaled begin dma transfer fair enough driver know dma transfer finished usually device raise interrupt inform cpu transfer finished interrupt interrupt handler previously installed driver called finished transfer acknowledged accordingly o eg signaling block io layer block read disk control handed back userspace process requested block back time high latency spinning disk slow network interface sufficient today however got solid state disk ssd gigabit lowlatency network interface avoid completely maxing system vast number interrupt common technique hold back queue multiple interrupt device eg timeout trigger certain number interrupt pending condition suiting application met technique known interrupt coalescing obviously condition always tradeoff low latency high throughput frequently new interrupt raised quicker o waiting process informed finished memory transfer however o interrupted le often spend time job dma seems nice feature theory transferring large continuous memory region play together virtual memory virtual memory usually organized chunk kib called page virtual memory continuous seen process pointofview thanks page table memory management unit mmu however noncontinuous seen device pointofview mmu pcie bus memory controller well cpu iommu let keep thing simple hence single dma transfer one page could copied time overcome limitation o usually provide scattergather api api chain together multiple pagesized memory transfer creating list address page transferred take home message dma indispensable technique memoryheavy highperformance computing last decade entire bus system dma controller concept superseded moving dma controller device using pointtopoint bus architecture reduced latency made concurrent dma transfer possible allowed device specific dma engine optimization driver le changed still responsible initiating dma transfer though today instead programming dma controller device independent way driver must program device specific dma engine therefore programming dma transfer processing dma status information look different depending device like like loading related
173,Lobsters,osdev,OS,Emulating Persistent Memory in the Linux Kernel with Different Page Sizes,https://www.williamwalcher.xyz/hacking-libvmmalloc-fun-profit/,emulating persistent memory linux kernel different page size,emulating persistent memory linux kernel emulating persistent memory linux kernel experience howto step emulating pmem step changing page size pmem william walcher,emulating persistent memory linux kernel monday december min emulating persistent memory linux kernel experience howto past semester fortunate enough take cpsc marvelous margo seltzer cpsc anyone go ubc graduate level operating system course part tasked work research topic choosing project group decided would research required two thing emulate persistent memory change page size emulated persistent memory first glance think either goal would present real roadblock whole group soon discovered incredibly mistaken post hope shed light process others benefit reduced amount pain anxiety joking aside really painful step emulating pmem easy part go emulating persistent memory linux kernel achieved via memmap flag kernel version flag work follows memmapxg yg x amount memory like set aside emulated pmem device physical offset mapping begin say physical offset mean actual address start obviously go map region address space pmem device need small amount due diligence first determine region currently reserved achieved via running dmesg grep give listing address range use free like dmesg grep mem usable mem reserved find region marked usable determine big map region le equal amount memmap flag memmap flag set using grub boot time example map gb dram pmem device using region usable memory start gb would set grub config via kexec couple way verify whether mapping succeeded first way list dev show pmemx ie another way verify run dmesg grep user list persistent memory device point multiple option get stuff running newly emulated pmem device create xfs filesystem top run application using libvmmalloc use pmdk persistent memory development kit write new application run pmem want mess around page size however turn simply strap libvmmalloc onto app run bit issue brings u next section changing page size step changing page size pmem reason like u would like toneed change page size application intend run pmem thing get trickier libvmmalloc simple solution getting something running pmem developed run top pmem device formatted fsdax mode mode one mentioned previous section create filesystem top pmem essentially allows libvmmalloc allocate temporary file vmmallocpool handing region jemalloc arenaesque allocation method great okay default page size pmem device linux kernel wanted page dram method acquiring larger page come form hugeadm hugectl tool hugepage support built directly kernel support also built kernel different page size pmem knob really easy discover unlike dram obvious change change page size button staring face digging around done gut inclination digging nvdimm driver allows start get inkling page size chosen pmem device essentially page size supported correspond variable pagesize hugepagepmdsize hugepagepudsize respectively realized page size implicitly controlled via alignment pmem device device aligned get page size figured left change thought even changing alignment ndctl tool using fsdax mode possible get page size wanted verified looking number tlb miss page suggesting method would work came strange surprise however fact running benchmark designed used devdax mode see result indicative page size change final observation led u last piece puzzle getting application run devdax mode solution turn hack libvmmalloc huge development effort happen went ahead removed functionality relied filesystem present replaced functionality still achieve goal admittedly stable worked time tried may tweak needed get stable version libvmmalloc devdax usage however hacked version libvmmalloc found william walcher computer science student ubc
174,Lobsters,osdev,OS,Oxide Computer Company: On the Metal: Ron Minnich,https://oxide.computer/blog/on-the-metal-3-ron-minnich/,oxide computer company metal ron minnich,podcast,listen oxide computer company podcast page
175,Lobsters,osdev,OS,"Reproducible Builds Summit, 5th edition",https://guix.gnu.org/blog/2019/reproducible-builds-summit-5th-edition/,reproducible build summit edition,reproducible build summit edition several year reproducible build fifth reproducible build summit java gradle build script kotlin build script android rebuilds replicant project maven summary competition verifying sharing build result website guix data service post summit guix data service ciguixgnuorg bayfrontguixgnuorg cuirass guix data service normalized archive nars substitute server bootstrapping aspiration tech reduced binary seed bootstrap managed diverse double compilation nix debian gnu guix arch actually embeds patch schemeonly bootstrap gash gash core utils bootstrapping mirageos bootstrapping build daemon bootstrapping consideration isolated build environment trusted computing base initrd derivation module purescheme implementation nb impressive experiment tinycc giovanni mascellani nicely put mirage gnuhurd cool hack channel configuration file sort quine shortly first summit gained option diffoscope came time ago thanks gnu guix gnuâ guix respect user freedom guile scheme,reproducible build summit editionchristopher baines ludovic andreas enge jan nieuwenhuizen december several year reproducible build summit become pleasant fruitful retreat guix hacker like go share brainstorm hack people free software project company share interest reproducible build related issue year several u chance marrakesh fifth reproducible build summit attended thirty peoplethis blog post summarizes takeaway different session attended introduces cool hack came life roof top lovely riad home summitjavajava notoriously difficult topic far bootstrapping reproducibility go instance gradle common tool building java code particular android apps however current way building gradle use gradle build script written kotlin kotlin project turn also built using gradle build script written kotlin end cyclic graph one imagine two package circle two two additional loop package however kotlin dependency gradle introduced le two year ago hope disentangle bootstrapping mess andreas took part session bootstrapping android toolchain vague hope getting adb fastboot utility guix task look daunting since sourcecode spread large number git repository gigabyte data idea modular build apparently influenced design decision lost sylvain android rebuilds done lot work disentangle source could also look inspiration replicant project interestingly android ndk provides foreign function interface c library appears easier targetanother working group none u took part evolved around maven han wrote short summary outcomesome discussion also evolved around fdroid free app store android topic building apps reproducibly adding relevant information competitionverifying sharing build resultsspeaking website retracing reproducibility feat issue also subject crossdistribution discussion round debian arch nix guix openwrt currently page tightly connected continuous integration instance rebuilding distribution debian arch discussed file format probably based json would help separate process creating reproducibility information collecting evaluating displaying guix point view idea would website communicate instance guix data serviceadditionally bernhard started discussion possible new site easily show package build reproducibly different distribution mentioned post summit would probably also consume data reproducibility package within guix guix data serviceguix data servicethis nifty project serve collect data number independent guix build farm currently two farm behind ciguixgnuorg farmlet one two machine behind bayfrontguixgnuorg meeting person occasion update bayfront configuration mimic closely ci particular build farm result exported web frontendwe quite discussion far without conclusion exact boundary cuirass guix data service former thin layer top guix daemon latter processing data towards web frontend cuirass continue handle web page guix data service currently running dataguixgnuorg server maintenance lot progress made code information normalized archive nars package binary provided substitute server imported stored database ability fetch store build cuirass improved building towards able automatically continuously track reproducibility guix packagesbootstrappingthis year summit official extended format encouraging participant attend full week adding coding time around usual three structured core day facilitated lovely productive highenergy fashion gunner evelyn aspiration techeven core day started david packaged gnu me nix aim creating reduced binary seed bootstrap nixos vagrant managed get me debian unstable summit expressed something decided attempt crossdistribution diverse double compilation me initially david nix vagrant debian janneke gnu guix took challenge soon joined jelle arch david first diffoscope comparison find me actually embeds store file name always nice see reproducible meet bootstrappable upstream easily convinced write patch news real soon ludovic janneke took opportunity take guix schemeonly bootstrap couple step joint effort last functional bug fixed ludovic came way avoid actually adding gash gash core utils bootstrap binary seed idea bootstrapping current bootstrapmes instead updating presented implemented janneke right summitandreas wondering use gccâ guix bootstrap worked create patch compile gmp mpfr mpc using tinycc work helping effort remove intermediate gccâ guix bootstrap instead target gccâ directlyall productive especially inspiring summit bootstrapping people project board giving new perspective work dream aboutin last extreme bootstrapping work session hannes mirageos inspired start initial port me freebsd gave rise extreme bootstrapping part discussion bootstrapping people noted build daemon usually ignored bootstrapping consideration wondered whether taken account effect build daemon emulates build scratch one booted empty machine creating isolated build environment contain nothing explicitly declared input however build daemon part trusted computing base tcb like compiler attack could inject backdoor build result thus question becomes reduce tcb removing guixdaemon vagrant came crazylooking idea started building thing straight initrd way tcb would stripped guixdaemon shepherd service running normal system since guix build information available form derivation normally interpreted daemon found hard convert minimal guile script would executed startup initrd hack hour later proofofconcept branch adding gnu system bootstrap module necessary machinery function convert arbitrary derivation linear build script build complete dependency graph topological order declaration operating system boot script initrd function run purescheme implementation compute display hash build resultmore future post interestingly learned nb taking similar approach building initrd though different binary seed specific build packaging toolingwe went exploring space called could reduce tcb kernel obvious target long use linux kernel could disable many optional feature even perhaps networking storage driver fabrice impressive tccboot experiment reminds u could even aim bootloader build o kernel boot remove linux entirely tcb exchange tinycc part project asmc take similar approach providing small o kernel enough compile simple thing like going inorganic matter organic giovanni mascellani nicely put itwhen mirage developer hacker familiar gnuhurd talk bootstrapping surprise end looking library os microkernels indeed one could imagine booting dedicated mirage unikernel though would lack posix personality booting gnuâ mach hurd service initially running would way strip tcb bare time get could well horizon cool hacksduring summit support system provenance tracking guix system landed guix allows deployed system embed information needed rebuild channel configuration file word result could call sourcecarrying system could also thought sort quine user convenient way map running system virtual machine image back source verify binary genuine rebuiling itthe guix challenge command started life shortly first summit hacking session gained diff option automates step downloading decompressing diffing nonreproducible archive possibly diffoscope idea came time ago good cross line todo listthanks grateful everyone made summit possible gunner evelyn aspiration hannes holger lamby mattia vagrant well kind host priscilla course thanks fellow participant whose openmindedness focus made productive pleasant experience gnu guixgnuâ guix transactional package manager advanced distribution gnu system respect user freedom guix used top system running kernel linux used standalone operating system distribution machinesin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection used standalone gnulinux distribution guix offer declarative stateless approach operating system configuration management guix highly customizable hackable guile programming interface extension scheme language
176,Lobsters,osdev,OS,I'm building a profiler for my OS! (and making videos of the process),https://www.youtube.com/watch?v=nsKtvx-m2gU,building profiler o making video process,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature devtools hacking adding timeline profiler youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature devtools hacking adding timeline profiler youtube
177,Lobsters,osdev,OS,The ARM SoC landscape from OS dev perspective,https://genodians.org/nfeske/2019-11-20-arm-soc-landscape,arm soc landscape o dev perspective,arm soc landscape genode perspective norman feske arm ecosystem differs fundamentally pc market turnkey solution debacle soc option genode current direction librem project usb armory mnt reform,arm soc landscape genode perspective november norman feske get repeatedly asked opinion arm systemonchips socs suitable use genode even though genode support arm architecture since answer remained anything simple article present constraint faced small player attempting realize armbased product deviate beaten track using linuxbased o regarded ground truth rather subjective perspective genode lab arm ecosystem differs fundamentally pc market pc platform highly standardized generally well documented example pc product regardless form factor set peripheral device based generalpurpose interface like pci usb acpi thereby providing generic mean enumerate manage device lowlevel device like interrupt controller system timer iommus standardized even competing cpu vendor like amd intel situation great benefit o vendor target vast variety platform fundamental driver protocol even though commonality pc platform end level peripheral driver wireless networking graphic common ground shared pc vendor substantial common ground generally documented publicly discussed opensource friendly well understood arm ecosystem stark contrast world whereas chip market dominated vendor intel amd via arm business model based ipcore licensing vast number chip soc vendor liberal term even though soc vendor use cpu core isa common ground end point lowlevel concept like booting system memorylayout detection device discovery cache management bootstrapping secondary cpu core device power controlling bus controller interrupt routing standardized great benefit approach ability soc vendor innovate independently target chip extremely close specific market example energy efficiency major concern lowpower embedded system mobile device prompted soc vendor explore vastly different energysaving approach energy efficiency seen dramatic improvement arm world could matched intel even given intel lead manufacturing process technology benefit however come cost fragmentation fact arm soc must regarded island arm tried counter fragmentation extending offering supplemental ip core generalized interrupt controller gic generalized smp support corelocal timer generalized cache management since supplement mandated rather optional fragmentation could reverted example broadcom soc used raspberry pi still employ custom interrupt controller besides already fragmented soc ecosystem around arm soc vendor like qualcomm merely use arm instruction set architecture isa use develop completely custom implementation cpu core o vendor situation unfortunate investment required supporting one soc family target small fraction arm device market turnkey solution debacle armbased massmarket product commonly based opensource technology like uboot boot loader linux kernel however operatingsystem support arm socs generally developed concerted community effort instead development cost carried respective soc vendor dedicated linux kernel team samsung qualcomm mediatek etc enforced gpl license linux kernel work team eventually published even integrated mainline linux kernel development process usually remains behind closed door respective soc vendor result following contradiction perception public armbased product perceived open linux readily available product linuxbased o often customized great degree however since o kernel driver development pursued local soc vendor incentive soc vendor publicly document inner working soc driver developer simply call chip designer house question arise developer outside organization however operation soc remains opaque often soc vendor source code form documentation however almost void architectural clue prime example contradiction raspberry pi one hand favorite platform tinkerer hand exists almost hardware documentation outside reverseengineering effort community diehard enthusiast status quo accidental fostered soc vendor business soc vendor solely sale chip also consulting service oems speak oem company integrates soc building block physical device soc vendor like qualcomm mediatek provide socs oems socalled turnkey solution integrated physical product without knowhow needed inner working building block building block comprises entire stack chip o kernel socspecific driver android user land holistic knowhow entire stack thus remains local soc vendor oem merely mean customize android user experience top turnkey solution information needed physically integrate soc custom board bottom turnkey solution usually form publicly available referenceboard schematic gerber file recently soc vendor try provide additional hook customization form proprietary apis respective trusted execution environment tee however customization turnkey solution beyond blessed hook oem ultimately depends consultancy business soc vendor consequently prolific soc vendor extremely strong position business incentive weaken exclusivity know publishing hardware documentation power dynamic arm soc market described put independent o vendor develop alternative linux difficult situation goal aligned soc vendor interest learned reaching various oems even oems real leverage end day mere consumer socs opaque turnkey solution little inhouse expertise socrelated oskernel development soc inner working oem business soc option development armbased genode product exist two principle option first one may approach soc vendor role oem commission socspecific o development selected soc vendor would consistent soc vendor business model said seems unlikely small player would able present strongenough business case soc vendor normally deal massmarket oems cost may prohibitive nevertheless even taken option several downside operation hardware remain opaque may impede trustworthiness device one ultimately enter dependency relationship soc vendor regarding systemsoftware stack consulting term soc vendor must discussed large european perspective foreign corporation genode would entirely new territory soc vendor bear risk friction high cost second option one could work soc vendor primarily focused selling chip turnkey solution thereby natural interest make chip useful broad community customer offering documentation vendor found industrial automotive market demand high level transparency longterm supportability freedom customizations particular nxp formerly freescale semiconductor fall category offering arm soc family imx geared towards multimedia product settop box incar entertainment system imx soc family also notably popular ebook reader genode o framework support imx since time explored arm trustzone secure boot mechanism pleasantly surprised openness imx soc good state documentation cover even nxp custom highassurance boot mechanism trustzone furthermore nxp appears u attractive partner european company life breath smallbusiness economy present among eg german industrial automotive supply chain genode current direction background successively consolidated genode arm support towards imx family trying accommodate samsung exynos texas instrument omap broadcom socs past imx family entered spotlight lately librem project crowdfunded effort manufacture completely opensource smart phone librem project selected imx soc likely reason attracted u notable user soc family usb armory mnt reform laptop granted nxp imx socs may rightfully criticized bleeding edge compared latest highend smartphone chip perspective soc family attractive hence working genode arm support device driver arm virtualization keep focus imx series
178,Lobsters,osdev,OS,Sculpt OS on HP EliteBook 840 G5,https://genodians.org/chelmuth/2019-10-21-sculpt-elitebook,sculpt o hp elitebook,sculpt o hp elitebook christian helmuth first boot enabling amt serialoverlan bender cap per session fix second boot finger crossed pci bar support io memory region gib third boot finger still crossed eye shut tightly,sculpt o hp elitebook october christian helmuth week ago got hold brandnew hp elitebook eager find sculpt o may spec promised smooth ride always face hidden obstacle unpacking made solid first impression comfortable keyboard quite usable trackpoint also notebook quite capable quadcore intel cpu gib ram nvme intelbased peripheral wifi ethernet graphic especially peripheral promised maximum compatibility driver arsenal first boot unfortunately first boot recent sculpt o usb flash drive hanged grub showing genode boot logo time get hand dirty debug boot process debugger point view used cpu luckily come intel vpro support mean enabling amt serialoverlan matter configuration tweak additionally adapted sculpt configuration use core log service reflects message first uart case thanks bender amt sol areposgemsrunsculptrun breposgemsrunsculptrun installconfig route service name rom label log parent label kernellog service service name timer child name timer service service name log label log child name log label kernel service service name log label log parent service anyservice parent anyservice route start installconfig resource name ram quantum constrainphys yes binary name init route service name log child name log service service name log parent service service name rom label config child name configfsrom label driver service service name rom labellast capslock child name reportrom service installconfig affinity xpos width decouple leitzentrale boot cpu provides service name nitpicker provides route service name log child name log service service name log parent service service name rom label config child name leitzentraleconfig service service name rom labelprefix report installconfig child name reportrom service service name report child name fsreport service service name log label unlogged parent service service name log child name log service service name log parent service service name rtc child name rtcdrv service anyservice parent anyservice route measure place log next boot revealed acpidrv play well notebook acpi configuration debugging le complex genode scenario eg runpci became clear vast amount acpi table comprising memory page reason boot hang manifested boot log following message init child acpidrv request resource acpidrv lacked capability could easily fixed increasing quota configuration quota cap already wanted identify cause resource consumption instead easy fix end twofold first acpitable parser mapped required memory page onebyone demand dedicated region virtual memory paired approach one dedicated io memory session per page cap per session resulted resource demand capability acpitable access plus base demand cap component bursted limit cap acpidrv sculpt called proper fix second boot finger crossed solving boot hang sure leave dirt road return smooth ride thing nt go expected sculpt scenario improved acpi fix greeted colorful distorted screen place leitzentrale analyze log output may gone wrong afraid find incompatibility intelfb port intel uhd graphic used notebook took time spot issue tiny difference first pci mmio region base address graphic card admit intermediate boot ubuntu live system saved day info started learn pci bar extended platformdrv support io memory region gib still wondering gap could stay unnoticed long time may explained fact pci mmio gib still unusual mobile consumerbusiness pc preserve compatibility old os nevertheless relieved call intelfb update eager boot third boot finger still crossed eye shut tightly time disappointed leitzentrale invited play software deployment testing bootup used ethernet port also prepared nvme ssd genode partition beside oem window installation worked without trouble conclude elitebook qualifies suitable sculpt platform also fun use may last time personally consider hp notebook despite long history lenovo thinkpads
179,Lobsters,osdev,OS,A Tour Of ethflop,https://www.wdj-consulting.com/blog/ethflop/,tour ethflop,tour ethflop ethflop terminate stay resident retweet hardware setup testing skip do setup cmi isa come thinnet thicknet twisted pair linux setup tinker board compatible compiling installing compiling installing website optional access control setuid primary group installing tweet email mtcp apologize advance length section need spun blog post feel free skip next section usb adapter pci express nullmodem bootstrap opcodes encoding kermit protocol tera term usage starting stopping mac address guided tour loadingunloading tsr automatically find querying command using virtual disk ailing directory entry know sure using feature caution nonzero skip deleted verdict mateusz viste future idea networked file system rus nelson flow control source upper memory protected mode,tour ethflop ethflop new terminate stay resident tsr program ibm pc compatibles running do flavor ethflop convert either drive b floppy drive networked drive us ethernet frame talk linux server linux server run daemon called ethflopd supply floppy image place physical disk first found ethflop retweet freedos project account knew least try like target audience old hardware optimized running do enjoy responsibly otherwise networking old computer old new computer large number floppy image downloaded year think ethflop worth looking imagine number vintageoriented people would happy access bunch floppy image do machine without needing write physical floppy decided take look write initial experience using ethflop hardware setup testing ethflop requires two machine use linux server run daemon ethflopd access floppy image machine running do interface linux daemon access said floppy image using tsr portion ethflopcom present hardware setup used next two section showing pc giving rest post context feel free skip section refer back necessary mostly inessential do setup early ibm pc running mhz floppy drive drive high density drive drive b double density drive additionally one full height hard drive drive c original cmi hard drive one halfheight hard drive sits rather snugly slot floppy drive c drive boot drive drive used mainly receiving temporary file subsequently forget clean picture ibm pc showing floppy drive screen includes do command ran relevant blog post including unloading dosed autocompleter interferes ctty loading packet driver changing console serial port via ctty way ethflop work lose access one floppy drive chose use drive b ethflop testing purpose hard drive unaffected yet test whether reliably use ethflop boot floppy physical drive b must use drive ethflop do emulate virtual b drive using drive physical drive detected b drive request ever sent ethflop network interface card nic still fairly common isa nic even found sale ebay still packet driver website searching late pulled intel long gone fortunately internet archive come yet due misunderstanding ebay listing time bought model thinnet thicknet connection fortunately converter still common way expensive occassionally one buy old hub ebay converter position really offer concrete advice setting right moral get isa nic connector twisted pair ethernet know love linux setup used headless tinker board run linux daemon distro dietpi though imagine distro really nt matter source ethflopd contained single c file trouble compiling running notably using tinker board wifi confirm ethflopd work used wlan interface assuming router take care converting raw ethernet frame frame compatible image show screen capture ssh session tinker board listing show floppy image directory floppy image prepared share pc could nt think anything better show running headless system ease testing interfacing do using serial port minicom tinker board possible redirect do input output serial port case using ctty command using minicom make much easier capture do command output compared taking photo picture taken invoked ctty compiling installing using ethflop one compile install first nt issue compiling installing documented experience others case compiling installing ethflopd start download source distribution ethflop website using wget mean recommend downloading source linux machine unzip unzip ethflop source distribution see directory like wjones dietpi srcethflop l l total rwr r wjones wjones oct ethflopasm rwr r wjones wjones oct ethflopcom rwxrxrx wjones wjones nov ethflopd rwr r wjones wjones oct ethflopdc rwr r wjones wjones oct ethfloptxt rwr r wjones wjones oct makefile ethflopcom tsr written nasmstyle assembly nasm provided many linux package repos author provided alreadyassembled com file convenience need transfer file do machine ethflopd portion ethflop need compiled manually type make get binary ethflopd recent linux able run ethflopd writing tested daemon nonlinux system install target need copy ethflopd final location manually case copied file private bin directory cp ethflopd localbin lastly create storage directory floppy image mkdir srcimg directory ethflopd use present virtual floppy disk do machine optionally fill directory floppy image optional access control recommend setting setuid bit well execute binary without needing sudo since likely private binary use alone multiuser system sudo privilege probably dont want others running ethflopd either believe following command accomplish change owner group ethflopd root user primary group respectively far know owner must root ethflopd create runtime file bind interface setuid take effect hand group primary group still run executable sudo chown root wjones localbinethflopd set setuid bit ethflopd make sure group owner executable permission others group executable bit cleared ensures root run ethflopd want sudo chmod localbinethflopd installing ethflopcom minimum need transfer ethflopcom packet driver particular nic retro machine ca nt find packet driver card easily tweet email see help nt large collection packet driver cnet kingston point right ethflopcom packet driver retro machine good go special installation required ethflopcom selfcontained probably good idea make sure ethflopcom packet driver seen do path though course one actually get ethflopcom distribution unzipped linux machine vintage machine order actually use ethflop full potential unfortunately getting file modern machine retro do machine quite topic various way serial port floppy network cdrom attached parallel port zip disk etc depending much extra hardware transferring file new old machine range fun tedious preferred transfer method tcpip fun personally transfer ethflopcom old machine set tcpip pc year ago using mtcp mtcp application integrate tcpip stack binary main distribution provides ftp client ftp http downloader htget among useful program also written software using mtcp transferring file new old machine normally prefer using ftp client recently trouble setting temporary working ftp server using pyftpdlib specifically server claim transfer file mtcp ftp terminates transfer immediately instead decided use httpserver module download file using htget specifically linuxmodern side invoke http server ethflop directory wjones dietpi srcethflop httpserver serving http port http dosretro side connect newlyinvoked http server download ethflopcom using htget htget ethflopcom le second ethflopcom safely power tcpip ethernet still amazes nt remember exact detail got mtcp onto initially recall use third computer zip drive floppy drive intermediate used usb zip drive copy file laptop file read intermediate computer internal zip drive copied onto intermediate drive could write onto hard disk bootstrapping apologize advance length section need spun blog post feel free skip next section absence working network connection understand using floppy disk data transfer old system sometimes option floppy drive pretty much lowest common denominator hardware ibm pc clone descendant seen issue getting blank floppy inconvenient even get drive second machine nt think modern usb floppy drive interface support writing disk demand need setup intermediate machine described previous section occassionally seen people broken floppy drive want install software onto machine think serial port method transferring data new old machine make least amount assumption available hardware serial port form factor pretty common hardware addition even oldest ibm pc clone serial port traditionally accessed do command line special name com aux commmunications auxilary modern os good support serial port via usb adapter pci express still widely used better worse need nullmodem cable adapter connect modern retro computer together still widely available purchase bootstrap mechanism developed year do mostly involve typing script like basic andor small exectuables whose opcodes encoding use ascii character bootstrap create file ascii character one use do copycommand read bootstrap program serial port copy xfercom ascii restriction do us eof ascii character z know transfer bootstrap program often implement minimal kermit protocol receiver program unlike do copy command kermit protocol send receive file arbitrary byte protocol designed extremely portable new machine kermit project took bootstrap problem transferring filetransfer program new computer seriously bootstrap link provided section part kermit archive columbia use either minicom tera term serial transfer program machine modern os program understand kermit protocol used send file serial line asis do copy command however must manually send eof z control character afterwards program vouch personally msbrcvbas worked past qbasic tested older do version using basic basica writing plan test transfer tcomcom near future may preferable since nt require basic really probably write blog post bootstrapping move whole section usage starting stopping ethflopd start daemon supply following command line argument order network interface wish listen wireless interface work etc storage directory floppy image invocation look like ethflopd srcimg optional f option run daemon foreground well find useful wish invoke ethflopd long running do machine opposed running ethflopd continuously ethflopd running listen mac address networked do computer running ethflopcom send receive virtual floppy image do side detecting mac address machine running ethflopd automatic reiterate ip address setup ethflop us raw ethernetwifi frame transfer data stop daemon need kill pid associated ethflopd run pkill ethflopd sudo may required depending particular setup ethflop running foreground c work fine well ethflopd cleanup code kill c guided tour ethflopcom daemon running linux machine first thing do end read help text copied output running ethflop without argument convenience c ethflop ethflop floppy drive emulator ethernet copyright c mateusz viste usage ethflop installs ethflop tsr ethflop b installs ethflop b work real b ethflop diskname insert virtual floppy named diskname ethflop ip dskname inserted floppy write protected ethflop r old new renames virt floppy old new ethflop e ejects currently loaded virtual floppy ethflop nsz dskname creates new virt floppy dskname sz kb big sz ethflop l display list available virt floppy ethflop diskname deletes virt floppy named diskname careful ethflop display current status ethflop tsr ethflop u unloads ethflop tsr note disk name must character long az allowed ethflop requires presence ethflop server local network license ethflop published term isc license see ethfloptxt ethflop basically divided three command type loadunload tsr b u query command l operate virtual disk ip r e n loadingunloading tsr packet driver installation first second thing make sure packet driver loaded memory case look like c etherlink isa packet driver c copyright corp right reserved error interrupt requested already use another packet driver lone argument interrupt number use call packet driver interrupt good traditional default indicated error message telling already loaded driver packet driver require option set chance default option provided nic manual supplied configuration program case work correctly older machine may require bit fine tuning three different nic manufactuters dozen do machine default option work exactly manually assigning resource becomes important multiple nics installed retro machine rare tsr installation sure packet driver loaded time load tsr said single physical floppy drive must use ethflop however seeing physical b drive installed ethflop drive b c ethflop b server found current virt floppy none ethflop installed ethflopcom attempt automatically find server running ethflopd without user invervention take multiple try load driver depending network connection quality however found ethflopcom find server subsequent network error transient tsr keep working ethflop installed lose access underlying physical drive also mean ca nt use ethflop nt physical floppy virtual floppy drive presented ethflop empty must either load create virtual disk accessing drive else get do famous error message c b seek error reading drive b abort retry fail f current drive longer valid c c tested whether ethflop coexist application using do tcpip stack though ca nt see immediate problem unloading ethflopcom done playing virtual floppy andor need access physical drive type ethflop u uninstall tsr c ethflop u ethflop uninstalled get access back underlying physical floppy drive well nic unloading querying command get information ethflop tsr disk available running ethflop ethflop l respectively c ethflop ethflop currently installed drive b server current virt floppy none c ethflop l mydisk uh oh one virtual disk missing list turn file extension image matter sloppy past switching ima img whim renaming mtcpgetima mtcpgetimg image directory tinker board make three image appear query c ethflop l mtcpget mydisk much better using virtual disk command operate virtual disk bulk ethflopcom functionality typical action would perform physical floppy disk equivalent coded ethflopcom insert virtual disk place disk disk drive e eject virtual disk remove disk disk drive ip writeprotect insert virtual disk cover notch slide switch disk insert r rename virtual disk change label sleevecover n create new virtual disk go store buy floppy delete virutal disk erase good floppy discard bad floppy present command order tried initial ethflop session match list insert let insert disk chose mtcpget actually forgot content image wanted see used listing root directory using dir work without hitch c ethflop mtcpget disk mtcpget loaded kib c b b dir volume drive b label volume serial number directory b mtcpget bat pktdrvs dir utils dir cfg dir batch dir go bat file byte byte free b look like used disk bootstrap mtcp onto new machine displaying content mtcpgetbat file using type confirms good know accessing file work fine well b type mtcpgetbat rem echo echo batch file retrieves mtcp stack program using mtcp ftp echo make sure environment unset batch variable set correctly using file echo addition make sure packet driver functional pause set srcdriva set path srcdriv utils set destdrivc set set mtcpcfg srcdriv cfgbatchtcpcfg set echo switching destination drive destdriv echo obtaining dhcp configuration dhcp echo obtaining mtcp stackprograms ftp server srcdriv cfgmtcpftp echo obtaining machinespecific file ftp server srcdriv cfg machine ftp echo switching back source drive srcdriv echo batch file completed executing echo recommended restart computer time restore environment pause eject nt much mtcpget soon ejected disk tested worked deliberately accessing nonexistent disk curious failing first error successfully read blank volume label even behavior eject command work fine b ethflop e disk mtcpget ejected b dir seek error reading drive b abort retry fail f volume drive b label seek error reading drive b abort retry fail f ready reading drive b abort retry fail f fail int seek error reading drive b abort retry fail f current drive longer valid c write protect insert live life edge decided test whether writeprotect work one pristine old msdos image fails lost pretty much nothing backup copy image nt know volume label missing hex digit investigate update later c ethflop ip disk loaded kib writeprotected c b b mkdir foo write protect error writing drive b abort retry fail f fail int foo b dir volume drive b directory b bin dir command com altchar sys autoexec bat file byte byte free b since writeprotected succeeded according error look like saved extra rsynccp command reset msdos image based modification date bin image nt pristineoriginal ah well rename renaming virtual disk interesting behavior rename operation appears case insensitive even linux side expected image filename server renamed case typed do prompt b ethflop r mydisk mydbak disk mydisk renamed mydbak however look like either ethflopd ethflopcom sanitizes image name lowercase image filename created server side wjones dietpi srcimg l mtcpgetimg mydbakimg try renaming virtual disk inserted update post future behavior time test mydisk image created prior ethflop session renamed mydbak bak backup want duplicate process creating mydisk fresh new image reason describe next section speaking create image powerful feature ethflop opinion ability create new virtual disk store server compared copying floppy creating populating virtual disk much convenient quickly share new disk networked computer even store shiny new image image ftp server bb thing still exist right share likeminded retroenthusiasts record time create image use n command supply size disk name argument b ethflop mydisk disk mydisk created kib listing image directory content show indeed create new floppy image note image owner group match user invoking ethflopd setuid take effect permission mydbakimg listing previous ethflopd session using sudo wjones dietpi srcimg l l total rwr r wjones wjones sep rwr r wjones wjones may mtcpgetimg rwr r root root dec mydbakimg rwr r root wjones dec mydiskimg creating image need insert shiny new disk using based seek error message network trouble time however eventually manage connect server b ethflop mydisk error must first eject current virtual floppy b ethflop e disk ejected b ethflop mydisk seek error reading drive b abort retry fail r seek error reading drive b abort retry fail r seek error reading drive b abort retry fail r seek error reading drive b abort retry fail f invalid drive specification disk mydisk loaded kib b dir volume drive b label volume serial number directory b file found b ethflopcom connected server nt trouble lark decided try recreate existing mydbak virtual disk including test directory testtxt file curious byte would different two image beyond timestamps unfortunately made mistake accidentally quoted content testtxt mistake come bit later b mkdir test ready writing drive b abort retry fail r b cd test b test echo test file testtxt b test ethflop e disk mydisk ejected unsupported hardware floppy density emulation even create image floppy density hardware nt support snippet create virtual disk populate much way previous example minus quote time c ethflop hddisk disk hddisk created kib c ethflop hddisk disk hddisk loaded kib c b b mkdir test b dir volume drive b label volume serial number directory b test dir file byte byte free b test echo test file testtxt b test type testtxt test file b test ethflop e disk hddisk ejected hexdump server alias hdod ax see image indeed size disk includes file created starting file metadata known fat file system term directory entry also visible starting wjones dietpi srcimg hd hddiskimg eb fe eb k na aa u ff ff ff ff ff ff ff ff ff ff test bko bko bko test txt aa ko test f eb ile fdisk com df format com mirror com f com ac bc share exe smartdrvsys sys com undeleteexe unformatcom c h xcopy exe bc doskey com fc u dosshellvid x tcp ee aa dosshellcom c dosshellexe f assume density floppy image create write depends do version running run pcdos support disk fine know bios support disk nt know present ethflopcom interacts bios bookkeeping know sure using feature caution dump hddiskimg data starting fdisk beyond appear legitimate directory entry hard disk sure ethflopd creating entry guess behavior nt intentional none directory entry actually reachable byte would need nonzero indicate file present either root test directory seeing storing sensitive data exactly worried extra data copied newlycreated virtual disk however found behavior strange enough worth noting retro enthusiast store sensitive data retro machine gon na judge would check make sure newlycreated virtual image nt accidentally copy sensitive data server meantime look behavior unexpected directory entry follows attempt flesh extra directory entry created nt feel like looking hexdumps skip next section extra directory entry seem disappear recreate existing image example second still wrong attempt duplicate mydbakimg fresh copy mydiskimg resulted following hexdumps wjones dietpi srcimg hd mydiskimg eb fe fd p j na aa u fd ff ff ff ff ff fd ff ff ff ff ff test jo jo jo test txt jo test file wjones dietpi srcimg hd mydbakimg eb fe fd p na aa u fd ff ff ff ff ff fd ff ff ff ff ff test test txt test f eb ile fdisk com df format com mirror com f com ac bc share exe smartdrvsys sys com undeleteexe unformatcom c h xcopy exe bc doskey com fc u dosshellvid x tcp ee aa dosshellcom c dosshellexe f mydbakimg created previous session contains directory entry hard disk mydiskimg recreate mydiskimg yet see result directory entry point realized accidentally included quote testtxt duplicating layout mydbakimg hunch deleted mydiskimg completely created new disk created test testtxt correctly time hexdump new mydiskimg look like wjones dietpi srcimg hd mydiskimg eb fe fd p j na aa u fd ff ff ff ff ff fd ff ff ff ff ff test jo jo jo test txt lo test f ile h country sys e ega sys h keyb com k keyboardsys nlsfunc exe fl display sys j ega cpi r himem sys mode com setver exe ansi sys debug com ac p edlin com exe f see directory entry yet even one present mydbakimg confident behavior nt intentional delete cautious creating virtual disk densitiessizes hardware nt support decided delete hddiskhddisk remove temptation c ethflop hddisk disk hddisk deleted server side surprise hddiskimg gone someone really want back recreate hexdump wjones dietpi srcimg l mtcpgetimg mydbakimg mydiskimg point tested ethflop functionality satisfaction turned day sure using soon verdict ethflop work pretty much flawlessly accessing myriad floppy image accumulated year could nt guess love seeing old hardware given new lease life applies especially new software extends functionality old hardware beyond capable useful life mateusz viste sincerely thank writing ethflop large number floppy image accumulated year enough write past reused disk longer needed image backup order time division multiplex floppy disk plenty image work properly boot disk since ca nt load ethflop boot like save physical floppy stuff like install rescue disk think using ethflop frequently vintage pursuit unless mood play real physical floppy disk future idea right frame mind try wonder possible extend ethflop emulate virtual drive dare try replacing drive c better yet possible extend ethflop msdos block device driver instead tsr system floppy drive rare original ibm pc disk controller support oh think even use ethflop implement diskcopy network unimaged floppy mateusz viste also wrote networked file system do want check soon also might give idea many neat do floppy project idea still waiting pulled ether give old machine new life opened converter conversion done chip manufactured national semiconductor unfortunately name escape ca nt check immediate future unsure generic packet driver exists though aware packet driver spec maintainer rus nelson used generic template vendor used create packet driver interfacing do serial port could blog post afraid easy get helpful write failure general failure accessing serial port eg copy footxt ctty breathing wrong best match experience do us flow control sending receiving source disabling flow control serial terminal transfer program safe option nt remember exact detail right check later old isa cnet nic required kb upper memory manufacturerset default switch memory area yes set manually conflicted memory area commonly used hard drive controller segment even mentioned manual got card course nt read first originally ibm pc provision floppy drive though nt remember do assigns drive letter case especially case hard disk exist well might interesting addition ethflop keep drive b free think floppy overall year accumulated approximately double density high density disk sadly easier write read disk disk ever since usb floppy drive broke far aware commercial product ever released used connector original ibm pc floppy controller isa card however pinout match traditional edge connector adapter nt difficult contrast linux bsd window hobbyist o using protected mode imagine do started using bios service space saving measure imagine also backwards compatibility element later made efficient reimplementation bios service impossible
180,Lobsters,osdev,OS,File Systems Unfit as Distributed Storage Backends: Lessons from 10 Years of Ceph Evolution,http://muratbuffalo.blogspot.com/2019/11/sosp19-file-systems-unfit-as.html,file system unfit distributed storage backends lesson year ceph evolution,paper abutalib aghayev carnegie mellon university sage weil red hat inc michael kuchnik carnegie mellon university mark nelson red hat inc gregory r ganger carnegie mellon university george amvrosiadis carnegie mellon university ceph,paper abutalib aghayev carnegie mellon university sage weil red hat inc michael kuchnik carnegie mellon university mark nelson red hat inc gregory r ganger carnegie mellon university george amvrosiadis carnegie mellon university ceph started research project ucsc core ceph distributed object store called rados storage backend implemented already mature filesystem filesystem help block allocation metadata management crash recovery ceph team built storage backend existing filesystem nt want write storage layer scratch complete filesystem take lot time year develop stabilize optimize mature however filesystem path storage add lot overhead creates problem implementing efficient transaction introduces bottleneck metadata operation filesystem directory million small file metadata bottleneck forexample paging etc also creates problem circumvent problem ceph team tried hooking f internals implementing wal userspace use newstore database perform transaction hard wrestle filesystem patching problem seven year since abutalib likens stage grief denial anger bargaining acceptance finally ceph team deserted filesystem approach started writing storage system bluestore nt use filesystem able finish mature storage level two year small custom backend matures faster posix filesystem new storage layer bluestore achieves highperformance compared earlier version avoiding data journaling bluestore able achieve higher throughput filestorexfs using filesystem writeback dirty metadata interferes wal writes cause high tail latency contrast controlling writes using writethrough policy bluestore ensures background writes interfere foreground writes way bluestore avoids tail latency writes finally full control io stack accelerates new hardware adoption example filesystems hard time adapting shingled magnetic recording storage author able add metadata storage support bluestore data storage work sum lesson learned distributed storage easier better implement custom backend rather trying shoehorn filesystem purpose architecture diagram bluestore storage backend metadata maintained rocksdb layer top bluefs minimal userspace filesystem abutalib first author paper excellent job presenting paper final year phd lot experience expertise storage system job market
181,Lobsters,osdev,OS,How [sl] Switched To Plan 9,http://helpful.cat-v.org/Blog/2019/12/03/0/,sl switched plan,switched plan background sl contentious thread one book previous blog post thinkpad tablet thinkpad tablet gen plan private namespaces http http spoiler http text editing vi http catvorg sam structural regular expression irc ircrc note unix programming environment email access imap upas footnote mail simple shell script www tom duff mothra retreat see also torrent native torrent client go programming language actually work plan note making book linotron http http http bitbucketorgstanleylieberthricegreathermes got ta go vmx manual gimp microsoft paint clone sega nintendo doom,switched plan background hi sl may remember classic appearance contentious thread maybe read one book veteran unix admin year produced bunch multimedia stuff macbook ran production server personal laptop main personal computer almost exclusively early moved new job involved lot traveling infrequent access wifi also turned carrying second laptop besides work laptop added much bulkweight stuff already carry everywhere went bought one early ipad pro equipped lte connection necessarily mobile computing via device better part two year able rig command line connection using native io ssh client drawterm g explained accomplished previous blog post infrequently carried thinkpad tablet later thinkpad along piggybacking ipad wifi tethering experience sucked replacing general purpose computer jackedup surveillance sensor package idea solving problem mobile computing lugging around extra pound put lot strain already compromised back something give pun intended recently acquired used thinkpad tablet gen thing small enough fit bag work well openbsd weighs almost little ipad pro folding keyboard cover finally back business plan plan excels text manipulation conveniently entire system controlled via text interface private namespaces ratchet something even idiot like use construct efficient workflow understand something presented complex ken thompson exception multimedia modern web need met pretty much anything people traditional unix terminal done least efficiently plan window even one accessed ssh inferior operating system support playing audio flac etc yes support playing video read incomplete list commonly requested software ship http watch introductory video http question spoiler care personal experience skip blog post proceed directly frequently questioned answer fqa section using http information technically informative lack endearing flavor personal bullshit text editing started trying use plan editing ton php code openbsd using vi lot fighting cut paste midst gargantuan project work reading way http catvorg first time decided give sam try love first sight never wanted go back consequently solution distaste ex structural regular expression started running time old portable version sam openbsd port tree ended installing plan qemu using entire operating system glorified ide wait vi tired using vi bill joy buddy irc programming within plan naturally led wanting irc text editor screen time luckily several irc client choose simplest ircrc shell script remember later owing plan file interface private namespaces modular design much system effectively built shell script note would good time familiarize brian kernighan rob pike seminal unix programming environment reread time felt like really starting understand first time unlike modern unix plan satisfies demand made tupe ircrc fine eventually wanted persistent client something better approximated irssi running tmux remote shell server desire coincided nicely first attempt setup permanent plan server found looking client split clientserver component one part holding open persistent connection irc server alwaysup plan machine part serving interface irc personal machine whenever wherever happened located email found spending time plan installation qemu le le time unix proper next natural desire getting email mix point still using google gmail product able access imap using plan native upas mail subsystem shocked discover upas dated footnote susceptible morris worm decided want used gmail anymore many year resumed hosting email using aforementioned upas smtpd smtp mechanism yes still able access mailbox imap whatever computer device readily hand simply logging remote plan server running mail like normal human one benefit receiving mail plan able configure spam filtering mailing list sorting autoresponders etc using kind simple shell script control rest system learning fundamental pay dividend throughout experience almost time spent learning one part system profitably applied elsewhere heavy computer user thirty year still strike suspiciously sensible www ship two web browser written joke abandoned author prior decade neither support javascript cs anything beyond meager subset html two evolution tom duff mothra perfectly usable aforementioned rube goldberg extension required trying use plan still needing modern web browser conundrum inspired many fledgling plan user give hope retreat safety macbooks see also time ready ditch host operating system install plan bare hardware desire modern web experience ebbed time low went several year touching featureful browser absolutely necessary always felt gross mileage may vary torrent ship native torrent client work well support magnet url long time bother magnet link unlike today often required case could always use unix machine perform download point sheer inadequacy excuse began wear thin want forever tethered unix finally got rid modern web browser usefully plan became first class citizen go programming language community go torrent client actually work plan note plan may used download legally encumbered material without express permission right holder making book end day actually computer writer write book use plan type format collate prepare camera ready output book like brian kernighan linotron add using many software tool example build process include http http http bitbucketorgstanleylieberthricegreathermes start reading mkfile got ta go seriously computer time sanded rough edge everything need bare metal install today even vmx hosting openbsd linux virtual machine case need interface u government via nowrequired modern web browser previous release manual created entirely thinkpad running gimp running inside openbsd running inside vmx even ship primitive microsoft paint clone several native sega nintendo emulator full port doom never would dreamed anything like possible back time go le le reason boot anything else perfectly happy
182,Lobsters,osdev,OS,KeyDB and the Tao of the Unikernel,https://dzone.com/articles/keydb-and-the-tao-of-the-unikernel,keydb tao unikernel,mongodb tutorial article complete collection keydb repo nanos nt exactly new topic even entirely correct instance sizing v workload sizing oh fork three year age paper single thread faster one many discussion subject recently retired dropbox python developer world count list spending way performance looking removing bifurcation incorrect information downright disinformation site purport know turn huge page gist heterogeneous compute scheduling death general purpose operating system complete trash great second awakening virtualization reading subkey expires realtime expire deletion implemented fork redis easily build run unikernels ops,keydb tao unikernel keydb architecturally better redis make use many thread could end article make tweet instead let dive might also enjoy mongodb tutorial article complete collection interesting looking graph pulled keydb repo latency qps much better number prompted see nanos supported yet ops load p keydbserver redisconf booting userseybergopsimageskeydbserverimg assigned c nov keydb starting c nov keydb started c nov configuration loaded nov listening unsupported nov running modestandalone nov server initialized nov ready accept connection nov thread alive look like telnet trying connected localhost escape character set mykey bob ok get mykey bob set another keyval ok get another keyval telnet quit connection closed redis architecture nt exactly new topic even entirely correct redis actually multiple thread really ingrained part model codebase take pride really crazy argument redis nt take advantage multiple thread considering machine typically run people claim network bottleneck ok cluster redis instance argument saying singlethreaded singleprocess model easier eliminates entire class bug puhhhleaaze address insanity later problem fit aws gcloud instance ca nt shove xx amount ram xx core instance sized public cloud god wisdom strong financial reason course maybe say cfocro wisdom instance sizing v workload sizing google want use ca nt simply request instance need upgrade instance vcpus ca nt use using something like redis complete utter waste people advocate single thread event loop seem never education underlying hardware seem forget thing like instruction pipelining memory bandwidth per core linux thread know since around nt super performant smp server nt really produced mass time either traditional way unix program scale fork new process also could run different software real computer virtual cloud server oh fork fork many many problem one performance three year age paper came decrying performance pulled nice quote clear time unix process abstraction insufficient meet need modern application definition unix process result high overhead part operating system typical server application use fork operation create server client tend use far system resource required fork hack hack introduced argue reason even exists still still fully thrown shackle tyranny single server operating system paradigm fairly integral anyone want interactive system u least development machine however serverside production time u move fork always make cry find new project seems interesting top look longlived daemon need run make program work one program dying nt going kill others instance allow rest software work dead jim single thread faster one illogical argument many developer state reason implement threading like claim something single thread achieve better performance compared apple apple bad logic used interpreted language might true apple apple unfortunately never production instance anyways truly going use sure adding even userland thread might buy much soon go beyond sacrificing time money resource oh vcpu anything definitely wasting resource worker running behind proxy separate process begin manage well ops cognitive overhead observability thing blow face saturday morning nt software managing taking advantage performance advantage native thread give introduce security availability challenge rob pike famously declared one reason creating go programming language developer google simply incapable working thread correctly java c wo nt disagree statement problem find statement inherent defeatism exists within also famous hacker expressed feeling guido similarly stated sort sentiment python like interpreted language long decided implementing proper thread slight nod towards userland decision made way back big problem linux nt thread know time smp widespread two interesting quote pulled one many discussion subject difference o kernel really nt way benefit multiple cpu python run multiple process instead thread go elaborate email think overestimating sophistication average extension developer hardware access wo nt debate nature statement state pro nba player get paid million dollar million high school student forced go gym twice week said argument like pick apart statement think lot people like hear either guido trapped time expectation future however fast forward today recently retired dropbox must admit least close hardware multiple core multiple socket multiple thread scripting language much larger impact anyone could predicted damn phone octacore cry loud scripting language early would access modern linux thread would access server multiple processor hyper threading nt like necessarily wrong back day theory common plebe understanding codebase definitely overstated though apparently something north python developer world count list community back definitely would access community landscape named startup ecosystem every single saas company many high flying company entire codebases built mere scripting language hell uber early day heavily javascript based instacart us rail airbnb twitter famously used crash fail whale insistence using ruby finally migrated performance sensitive application java native thread sometimes feel crazy even argue spending way performance information one latest site post incredibly large lie spend way performance problem engineering manager necessarily wrong problem still large majority software written prior happening mid still use today let ambiguous ultra clear timeline everyone year ago know era window freeopensourcewhateveryouwanttocallit movement allowed software company flourish need acknowledge using broken software broken architecture far far long need something laugh joke window nt xp support ending many year decade ago think time started laughing joking abysmal state ecosystem one need look take stand spark cluster simple downloading one binary initing install kafka take installing zookeeper fortunately even ecosystem realizing simply tenable anymore looking removing bifurcation exists incorrect information internet rife downright disinformation site purport know talking ca nt tell many time twitter seen people try reduce kernel call task cloned underneath ought law halflife digital decay technical content internet lot really bad lot reason threading superior forking new process one bigger issue looming head past many year memory size growth application data go becomes progressively harder large datasets eg ten gigabyte aforementioned redis come play answer turn huge page gist need multithreaded software tune current era compute environment need fix idea operating system need replace upgrade aging decrepit software place literally going little another month maybe already time read large percentage software today consume linux written earlier exaggeration state reader article even born large trend past odd year changed landscape cloud simply virtualization api top please tell cloudnative folk way smp going anywhere smt despite security wonk believe lastly google facebook uber name favorite tech company built linux yes yes know netflix us freebsd want slinuxnix purpose article heterogeneous compute scheduling death general purpose operating system introduction kubernetes service mesh sidecar thrown another bucket monkey wrench could rebirth engineering performance start kubernetes installation get thrown public cloud already virtualized start extract serious performance penalty application scheduled furthermore kubernetes installation call heterogeneous underlying operating system scheduler nt already known complete trash another one top service mesh gone full steam complicating thing however even hardest hater admit done one thing good bad democratized access distributed compute scheduling return nailed coffin shut generalpurpose operating system server side unbeknownst moved sf already nt enough engineer nt know linux yet entire legion developer expect operating system span multiple instance installation measured thousand thing collectively walked away generalpurpose operating system went cloud broke abstraction people starting realize need something better future call action opportunity reading line great second awakening virtualization believe today developer take challenge writing better software fully utilize hardware run much brighter future nt told multithreading hard nt scared word like mutexes phrase like waitfree lockless crave performance finetune engine virtualization greatest gift given u new foundation build serious software clean slate let build better future reading subkey expires realtime expire deletion implemented fork redis easily build run unikernels ops
183,Lobsters,osdev,OS,"""On The Metal"" podcast announcement",https://twitter.com/jessfraz/status/1201276464630390784,metal podcast announcement,,detected javascript disabled browser would like proceed legacy twitter yes
184,Lobsters,osdev,OS,"Real hardware breakthroughs, and focusing on rustc",https://www.redox-os.org/news/focusing-on-rustc/,real hardware breakthrough focusing rustc,nvme driver couple month ago galago pro open firmware ec firmware keyboard touchpad storage ethernet debugging port commit kernel earlier commit fixing memorymapped serial port driver service hidpi support number application pkgar install redox live disk redoxer tool excellent work done relibc contributor number available package convert redox o different rust target family ldso redox o boot time nvme drive patreon discourse twitter reddit rredox reddit rrust hacker news,wednesday november galago pro running redox o addition nvme driver couple month ago running redox o permanently install disk galago pro open firmware well unannounced indevelopment ec firmware particular hardware full support keyboard touchpad storage ethernet making easy use redox particular machine debugging port soldered using unused cec pin hdmi port rx custom hdmi usb serial cable closedchassis debug get serial output board using intel lp uart pch supported commit kernel earlier commit fixing memorymapped serial port allowed easier debugging kernel driver fairly satisfied thing going continue focus running permanently installed redox system work real hardware improved driver service added hidpi support number application spawned creation new project pkgar make easier install redox live disk also become easier ever crosscompile redox redoxer tool build run test using command similar cargo automatically manages redox toolchain run executables test redox inside container demand however longstanding issue longstanding issue redox o allow compilation rust binary redox o attempt made past address issue redox o participated google summer code excellent work done redox o able get close selfhosting work amplified creation c library written rust relibc subsequent work contributor led significant posix c library compatibility significant increase number available package work later done convert redox o different rust target family finally unifying rust support redox o unixen finally redox specific support code could largely eliminated codebases led great number rust crate suddenly gaining redox o support seemed though dream selfhosting would soon reality many heartbreaking hour day week month compiling rustc finding error requiring work relibc finally able compile statically linked rustc discover rustc longer capable running statically linked began work relibc ldso provides dynamic linking support executables tragically work support dynamic linkage rust redox o defaulted everything dynamic linkage took time sort properly work halted porting rustc redox o building redox o redox o always one highest priority project rustc seems month work away begin improve system running permanently least one machine redox o microkernel possible even driver level could recompiled respawned without downtime making incredibly fast develop place would work efficiently porting software tackling hardware support issue filling usb stack adding graphic driver importantly able contribution others unlocked fully selfhosted microkernel operating system written rust redox o bonus reading whole post redox o boot time nvme drive discus post patreon discourse twitter reddit rredox reddit rrust hacker news
186,Lobsters,osdev,OS,On Nexuses,https://www.devever.net/~hl/nexuses,nexus,nexus nexus rejection maintenance nexus ssh previous article normativity addendum make language language article explaining technique,nexusesnexuses underrecognised utility computing despite fact commonly used absolutely essential usable computer system nexus broadly sort infrastructural system consumed many different application written many different people many might called platform plenty nexus would called platform filesystem example one fundamental nexus something every application computer system make use make filesystem powerful medium interchange communication program even notwithstanding persistent storage provides take look content run tmpfs modern linux system see filesystem useful nexus quite separately persistence may optionally provide call integration nexus nexus assist integration many separate program mutual use nexus filesystem program integrated one whole program might compose form one application distribution application might accomplished using virtual machine container strategy allowing filesystem used integration nexus concealing outer system need access essentially namespacing integration nexus integration nexus operating system provides common idea process allows program manipulate supervise process please desktop system provide countless others clipboard window provides common interface com ole integration nexus also found programming language example go flag expvars package nethttp defaultservemux commonly used integration nexus provided standard library facility integration nexus represent way unrelated code specifically aware code interoperate way example expvars package allows code export performance counter gauge metric name corresponding value metric could thing like many time function called many request currently handled important detail metric registered expvars package consumed arbitrary code eg ship sort monitoring system without regard specific library created thus expvars package constitutes integration nexus allows unrelated code mutually ignorant others existence interoperate welldefined mutually beneficial manner library use nethttp package default serve mux register http handler path like expvars package example automatically register handler debugvars provides value expvars example consuming one integration nexus providing access using another important point inclusion handler default serve mux performed automatically package nt require updating central list http handler central source truth library show join similarly flag package allows library register flag flag become available use command line automatically long program us flag package handle command line argument parsing thus flag package constitutes integration nexus noted go default serve mux wholly unsuitable public use provides access potentially sensitive information expvars default includes command line program run command line nt contain sensitive credential easily could even remote profiling tool providing public service separate serve mux created yet default serve mux retains utility integration nexus could internal access retained example listen separate firewalled port example default serve mux could allow service health check library automatically export way load balancer check service health load balancer retrieves health check information port running default serve mux sends request port running separate public serve mux nexus rejection imagine second program use filesystem nexus might possible executing program file may way launch process system suppose program form enclave example maybe allocates large multigigabyte file disk implement internal filesystem top essentially eschewed nexus provided o favour consumer new filesystem hardly said nexus except extent provided multiple internal subcomponents program particular example example inner system effect purpose discussing nexus though call nexus rejection nexus rejection also occur processesthreads program might implement runtime run green thread schedule single o thread o thus see one thread many consequence fact multicore processor taken advantage program becomes opaque outside observation well countless others plenty good reason nexus rejection video game commonly aggregate large number data file large monolithic archive file demonstrating filesystem nexus rejection necessary filesystems slow provide acceptable load performance programming language go erlang idea io may implement scheduling process system thus exhibit process nexus rejection allow system exhibit massive concurrency allow programmer pleasure writing synchronous code actually scheduled asynchronously nexus rejection never without consequence integration nexus provide common language common program interoperate eschewing nexus one eschews whole ecosystem shoulder burden solved nexus oneself make operation program opaque peculiar program may come disliked considered oddball administrator nt play rule program replacement nexus reject may high quality nexus operating system may subject continuous improvement optimization whereas proprietary nexus rejecting program may left rot work well enough integration potential role nexus type nexus maintenance nexus important maintenance nexus maintenance nexus human integration nexus program provides way human get internals system inspect modify need filesystem thus count integration maintenance nexus accessible program human process manipulated human necessary maintenance nexus may take many form likely generally powerful form command line interface shell provides access various tool provided system tool may placed common location usrbin even something simple fact program conventionally placed directory constitutes nexus sort allows program executed easily searching path even environment variable constitute another nexus view presence integration maintenance nexus key part operating system although unfamiliar erlang gather erlang runtime provides sort maintenance nexus one connect erlang program obtain manner command line current state system manipulated inside since erlang reject process nexus operating system favour nexus provides maintenance nexus would contest erlang essentially operating system fact erlang run directly xen support idea program turning operating system emacs lisp probably qualifies provides common runtime maintenance nexus form lisp repl obvious runaway example course web browser web browser nt provide much way maintenance nexus javascript repls developer use developer tool may count distinguishing feature architecture mozilla platform xulxpcom offer integration nexus extraordinary power give mozilla powerful range addons mozilla disastrously announced intention deprecate xulxpcom thus discarding one great distinguishing feature differentiator chrome rejection maintenance nexus much rarer rejection integration nexus human nt want learn whole new inner system command line deal program complicated innards sql database may example though many administrative command must performed sql command line o command line interesting fad eschewing maintenance nexus entirely least system level say eschew rather reject used reject mainly used context replacing functionality nexus one implementation idea away need maintenance nexus entirely proposed blog post titled ssh moronically page blank disable javascript find better article additionally completely unnecessary senseless page eminently readable merely disable style idea eschewing maintenance nexus individual virtual host become unmaintainable thus maintained replacing essentially rederivation model regard previous article normativity conclude nexus important allow system effectively composed part provide vital maintainability nexus rejection sometimes necessary severe cost thus useful notice designing something essentially nexus consider make uncontentious universal possible reduce occurrence rejection additionally viewing nexus perhaps core value proposition traditional operating system comparison new unikerneltype offering mirage o operating system disguise recognised integration nexus maintenance nexus union many intent purpose operating system addendum make language language nexus important language provides nexus nexus sense part language use language usual technical sense looser sense uml language common schema common set line software drawn suppose library tell written c think moment implies infer fact written c ca nt infer following platform architecture run whether garbagecollected whether us synchronous io asynchronous io top reactor thread fibre select poll epoll etc nt use synchronous io io library us whether us return code error handling errno sort setjmplongjmp based solution whether us object oriented c style sort cbased object system like glib something else entirely format expects command line argument coding style us mean effect c language family language may difference c compiler whether using synchronous asynchronous io make world difference interoperability different library use asynchronous io library might want use ca nt easily use library synchronous io would block thread replace question language compiler use much useful question language library use c language family language c even worse nobody program c everyone program unique subset language told program written c leaf following question use eschew exception use eschew c rtti use operator overloading use eschew stl use eschew feature use template use virtual function use multiple virtual inheritance use static object constructor every c programmer different answer question developing platform nt support c exception want use library requires screwed developing platform support c exception code eschews exception certain reason also screwed codebase nt written exception safe even use library chooses different subset cooperation two feel somewhat grudging mismatched fact library written given language meaningless everyone us different subset language thus language design desirable minimize feature likely rejected language restricted set feature universally adopted user base imagine python library eschews python dictionary string invents list nobody least someone say something written python common ground whereas someone say something written c idea dictionary string list represented aside probably vain hope use stl lead general concept crosscutting consideration crosscutting consideration ccc consideration affect essentially every line code crosscutting consideration something change basically throw away code already written least reread ensure still applicable rewriting nt changing feature subset language use course crosscutting consideration see list c c thus fewer crosscutting consideration necessary program written language reusable code language likely able use given library written language take python example everyone writing python us python dictionary list string io situation much bleak want io python many option normal synchronous io twisted stackless python various stackless pythonesque tasklet system run cpython etc big stain python introduces massive crosscutting consideration variation go hand nt problem one way io go like python nobody eschews go slice variablelength array map dictionary addition nobody eschews go way io either make statement library written go extremely meaningful especially lot network programming set crosscutting consideration small go standard coding standard mean even coding style nt constitute crosscutting consideration albeit essentially fascist mean go code reformatted automatically really hate style reformat like working format back committing another thing help go unlike c great lack tackedon feature people choose use strange forgotten language feature like method pointer virtual inheritance another crosscutting consideration integration nexus already explained go integration nexus expvars flag nethttp package think rejection nexus pose threat go increase number crosscutting consideration thus decrease library compatibility increase potential reason library rejection damaging fracturing ecosystem making much language family language sheer improbability reject library favour go one thing make go great along sheer ease bringing library thanks whollyimplicit conventionbased build packaging system fact quite remarkable unrejected nethttp standard http client server package essentially nobody us different http server python interface like wsgi accommodate variety different python http server gateway interface go everyone us nethttp lack rejection common library compatibility implication regard http handler written provided library decrease set crosscutting consideration schism within language rejection expvars flag library library constitutes form nexus rejection regard actually threatens go language threatening turn set language matter small way fractional issue bring serve well example general trend fractured language creates tragic wastage effort unfortunate expvars flag package put simply nt good guilty charged rejecting nexus occasion simply nt meet need matter poor package may actually providing functionality excel providing integration nexus act matchmaker metric producer consumer command line argument consumer parser bizarrely may actually better package provide functionality mere registration object implementing minimal interface consuming code figure usefully use come go support interface upgrade could make viable strategy nt familiar go interface upgrade essentially mean cast object given interface type another type runtime find whether succeeded word allows dynamically determine whether object implement method go support interface implicit nt need explicitly declare implement interface implement necessary method considered implement interface sometimes code receives object given interface type test whether support superior interface use enhanced functionality otherwise standard level functionality used called interface upgrade article explaining technique used place go standard library essentially imagine thread safe version type expvar interface var expvars map string expvar apparently completely useless use map object ca nt anything idea expvars implement method applicable interface upgrade used consumer figure deal course impose minimum requirement let revise expvar type type expvar interface name string string string least guaranteed get name sort string representation every expvar rest consuming code figure go important thing enables permissionless innovation need author nexus package consulted whenever improvement desired author package providing expvars author package consuming expvars simply decide expose new method see fit sure lack guarantee wingit attitude look stuff people store dns txt record protest standard writer overloading txt semantic meaning nt done proper rrtype allocated led allocation spf rrtype store data txt spf record would protest call essentially getpermissionfirst innovation nt stand chance face sheer pragmatism txt record permissionless innovation enables wingit attitude work ultimately believe writing package essentially nexus one consider making package actually anything hard find reason reject package nt anything le nexus rejection commonality code commonality meaningful language category reusable code written
187,Lobsters,osdev,OS,Are we simple yet?,https://arewesimpleyet.org/,simple yet,simple software manifesto described simple yet really status version control system git status status mostly complete status complete status complete assembler binutils status build system status kernel status libc status init supervisor status highlevel programming status graphical user interface status simple software practice c posix unicode,simple software manifesto midst complexity epidemic software address new computing environment required building promoting software follows following principle software break complicated software break complicated way simple software break simple way also true system whole constraining user simple tool encourages creativity allows system quickly understood support removal complicated feature one correct way something two way would complex often ca nt change mind later take great care right first time dependency system part system treated black box maintenance entire system responsibility standard useful often full cruft license write software extends rather implement subset practical implication principle described simple yet really status yes requires nonposix shell need better doc version control system git status overdid perl spaghetti need rewritten benefit hindsight status getting mostly complete vlas preprocessor lot architecture status getting complete arithmetic expansion job control signal handling status getting complete mostly incomplete assembler binutils status yet build system status yet kernel status yet libc status yet init supervisor status yet highlevel programming status yet graphical user interface status yet simple software practice c target use following feature anything header except guard prototype extern globals comment macro typedef inline assembly dynamic linkingloading wide character posix target use following feature sccs uccp pthreads posixspawn posix probably replaced time right unicode permissible text encoding software may assume text waste effort encoding
189,Lobsters,osdev,OS,AT&T released DANOS code to Linux Foundation,https://www.danosproject.org/,released danos code linux foundation,disaggregated network operating system danos project enables community collaboration across network hardware forwarding operating system layer danos initially based dnos software framework open costeffective flexible alternative traditional networking equipment part linux foundation incorporates contribution complementary open source community building standardized distributed network operating system no speed adoption use white box service provider infrastructure,disaggregated network operating system danos project enables community collaboration across network hardware forwarding operating system layer danos initially based dnos software framework open costeffective flexible alternative traditional networking equipment part linux foundation incorporates contribution complementary open source community building standardized distributed network operating system no speed adoption use white box service provider infrastructure
190,Lobsters,osdev,OS,GeckOS: a Unix-like 6502 operating system,https://www.youtube.com/watch?v=jtlAOdJmeDI,gecko unixlike operating system,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature gecko unixlike operating system vcfmw youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature gecko unixlike operating system vcfmw youtube
191,Lobsters,osdev,OS,Certified concurrent abstraction layers (2018),https://www.cs.columbia.edu/~rgu/publications/pldi18-gu.pdf,certified concurrent abstraction layer,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream
192,Lobsters,osdev,OS,Debian reconsiders init-system diversity,https://lwn.net/SubscriberLink/804254/71240d6b83844653/,debian reconsiders initsystem diversity,buy subscription decided flaring bit dpl posting elogind bug report feature pressure response rus allbery zeroed described suggested claimed argued said added first gr draft draft general resolution another message according marco ditri devuan fell log,article brought lwn subscriberssubscribers lwnnet made article everything surround possible appreciate content please buy subscription make next set article possible jonathan corbetnovember many communitybased linux distribution made decision switch systemd decision accompanied lengthy sometimes acrimonious mailinglist discussion distribution harder time debian though argument raged much debian technical committee decided systemd early thereafter fair say appetite renewing initsystem discussion low though topic returned fore would appear project heading toward new general resolution gr decide level init system systemd supported new systemd discussion simmering time flaring late became clear project unable fully support systemd alternative due lack developer interest current discussion instead direct result debian project leader sam hartman bit dpl posting october therein stated belief new general resolution initsystem support necessary would proposing one near future immediate motivation reconsideration would appear proposed addition elogind standalone fork systemdlogind daemon debian elogind would provide support systemd dbusbased login mechanism needed support small project like gnome desktop without need systemd addition elogind controversial difficult package integrate number reason much discussion evidently carried away mailing list context problem found bug report short merging elogind appears complex enough would hard justify absence strong commitment support nonsystemd init system seems possible commitment longer exists across distribution whole purpose general resolution would determine whether case feature pressure unsurprisingly debian developer variety opinion issue response rus allbery worth reading entirety argues decision part never really nailed project position toward init system necessary compromise time said causing stress feel somewhat vindicated fact nt immediately fall apart sort worked think becoming increasingly untenable time come say make project position clear developer right thing really going continue fully support sysvinit commit clearly empower people test support report bug appropriate severity also create stronger incentive making support easier achieve unambiguously free people additional work nt want ca nt test easily also clearly communicate project intention partner like devuan make informed decision proceed josh triplett zeroed one issue testing initsystem peace said increasingly long list feature available systemd application developer want use feature today people ca nt use systemdtmpfiles mean creating file startup fallback nonsystemd case today people ca nt use systemd persistent timer place cron place anacron wake periodically approach systemd user session socket activation sysusers dynamic user systemdhomed temporary directory setup transient unit anything talking slice control group apis containerization firstboot systemd whole preset systemwide configuration policy mechanism admins say service want launched installed service want leave stopped configure stateless system capability probably forgetting another dozen response argument took couple different approach ted t described feature embrace extend extinguish phenomenon systemd caused much fear loathing debian avoided much stress said ship relatively old version systemd wo nt last forever upstream developer going use newer systemd feature debian accept want package ship code nt think choice acknowledge reality accept package may simply incompatible alternative init system situation nt make happy said little done allbery instead suggested project could decide set interesting systemd feature create nonsystemd implementation feature necessary essentially done elogind example init system could made parse systemd unit file would minimal set directive would expected support would effect definition abi init system must support rather rule specific system done properly approach could ease feature pressure one little problem course approach viable turn people interested init system diversity sufficiently reasonably substantial implementation work required maintain competing implementation systemd unit feature care like ian jackson claimed much functionality already exists work svante signell also argued systemd alternative well maintained debian remain open contribution developer working alternative others including triplett said developer init system lack desire implement systemd feature argue feature exist first place allbery added question project answer debian policy toward software requires feature specific systemd specific subset systemd feature debian software allowed depend idea alternative init system eventually gain implementation feature first gr draft hartman posted draft general resolution november directly address allbery question focused strongly init system rather support advanced systemd feature three alternative affirm init diversity running init system systemd important project goal provision init script would remain mandatory systemd support exploring alternative systemd would preferred init system alternative would remain important elogind given example sort project supported hartman posted another message detailed description option might imply systemd without diversity priority would requirement support anything systemd debian hartman thus appears left allbery suggestion defining initsystem abi entirely noted though explicitly draft likely evolve considerably reach point project vote one final bit context consider part vote according marco ditri already happened already voted apt le new installs use sysvinit suggests relatively low level interest systemdfree debian perhaps user interest moved devuan outside appearance progress slowed considerably since developer fell april even debian chooses continue support multiple init system clear development effort make support work freesoftware community value diversity choice system also value standardization progress made focus effort single system many part linux system essentially monoculture example include kernel c library relatively recently compiler strong argument favor standardization diversity case gcc lack competition often cited cause long period relative stagnation one look desktop environment instead often said scattering developer effort prevented success linux desktop whole would thus seem obvious answer question initsystem diversity regardless one feel systemd particular community distribution project long since decided lack resource maybe desire support multiple init system especially larger one settled systemd even feel viable alternative systemd would good debian far exception trend interesting see whether project development resource continue course log post comment
193,Lobsters,osdev,OS,Devotion,https://www.bbc.co.uk/sounds/play/m000b4r3,devotion,,aleks krotoski tell story divinity technology mental illness collide read
194,Lobsters,osdev,OS,File systems unfit as distributed storage backends: lessons from ten years of Ceph evolution,https://blog.acolyer.org/2019/11/06/ceph-evolution/,file system unfit distributed storage backends lesson ten year ceph evolution,file system unfit distributed storage backends lesson year ceph evolution distributed storage backend efficient transaction fast metadata operation support novel backwardincompatible storage hardware changing hardware landscape ten year building local file system three challenge building storage backends local file system implementing transaction efficiently making metadata operation fast supporting modern hardware maybe better bluestore performance highlight taking next level seastar framework,file system unfit distributed storage backends lesson year ceph evolution aghayev et al sosp ten year hardwon lesson packed page count reference make paper extremely good value time also fabulous example recognising challenging implicit assumption case assumption distributed storage backend clearly layered top local file system breaking assumption allowed ceph introduce new storage backend called bluestore much better performance predictability ability support changing storage hardware landscape two year since release ceph user switched running bluestore production ceph widelyused opensource distributed file system followed convention building top local file system decade hard lesson ceph team learned using several popular file system led question fitness file system storage backends surprising hindsight sometimes thing surprising hindsight hardest thing spot distributed storage backend distributed file system provides unified view aggregated storage multiple physical machine offer high bandwidth horizontal scalability fault tolerance strong consistency storage backend software module directly managing storage device attached physical machine different system require different feature storage backend two feature efficient transaction fast metadata operation appear common another emerging requirement support novel backwardincompatible storage hardware reader blog properly pretty good idea efficient transaction fast metadata operation let take quick look changing hardware landscape go changing hardware landscape increase capacity hard disk drive hdd vendor introducing shingled magnetic recording smr technology use drive efficiently necessary switch using backwardincompatible zone interface zone manages disk sequence mib region must written sequentially encouraging logstructured copyonwrite design design direct opposition inplace overwrite design followed mature file system similar change happening ssds new nvme standard called zoned namespaces zn enables flashtranslation layer ftl bypassed attempt modify production file system work zone interface far unsuccessful primarily overwrite file system ten year building local file system need manage file local storage device seems pretty obvious file system good place start lot work go file system history production file system show average take decade mature starting assumption ceph many others decade core ceph rados reliable autonomic distributed object store service rados gateway object store cf rados block device cf eb cephfs distributed file system built top rados rados number iteration preceding decade first implementation c userspace file system called extent btree based object file system emergence btrfs new implementation built taking advantage btrfs transaction deduplication checksum compression filestore btrfs production backend several year throughout btrfs remained unstable suffered severe data metadata fragmentation btrfs eventually abandoned favour xfs zfs xfs became defacto backend scaled better faster metadata performance filestore xfs stable still suffered metadata fragmentation exploit full potential hardware three challenge building storage backends local file system implementing transaction efficiently making metadata operation fast supporting new storage hardware implementing transaction efficiently author tried three different strategy time transaction resulting either significant performance complexity overhead first approach hook internal transaction mechanism file system provides one typically though even file system provide transaction mechanism limited object store use case eg rollback support btrfs time day transaction system call second approach implement logical wal writeahead log user space led slow readmodifywrite cycle double writes third approach use rocksdb metadata helped issue supporting atomic metadata operation introduced others notably high consistency overhead requirement flush often making metadata operation fast ineffiency metadata operation local file system source constant struggle distributed file system directory get many file enumerating file becomes slow standard practice create directory hierarchy large fanout hundred entry per directory managing scale costly process still million inodes resulting many small io directory entry spread disk time ceph osds start splitting unison performance wellknown problem affecting many ceph user year supporting modern hardware looked issue earlier fundamentally tension copyonwrite overwrite semantics fit emerging zone interface semantics maybe better following filestore xfs newstore introduced stored object metadata rocksdb alleviated issue metadata fragmentation introduced problem high consistency overhead layered top journaling file system newstore quickly followed bluestore used raw disk bluestore storage backend designed scratch solve challenge faced backends using local file system main goal bluestore fast metadata operation consistency overhead object writes copyonwrite clone operation journaling doublewrites optimized io pattern hdd sdd bluestore achieved goal within two year became default storage backend ceph bluestore store metadata rocksdb ensure fast metadata operation avoid consistency overhead object writes writes data directly raw disk one cache flush forum data write also introduced change rocksdb upstreamed wal file used circular buffer metadata writes rocksdb run bluefs minimal file system run raw storage device namespace scheme allows collection million object split multiple collection simply changing number significant bit considered key bluestore backend copyonwrite writes larger minimum allocation size bluestore provides efficient clone operation avoid journal double writes writes smaller minimum allocation size metadata data first inserted rocksdb asynchronously written disk commit bluestore provides full control io stack also possible efficiently implement checksum transparent compression moreover rocksdb bluestore ported run hostmanaged smr drive new effort underway target combination persistent memory emerging nvme device novel interface eg zn ssds kv ssds bluestore performance highlight full detail performance evaluation see paper brief bluestore demonstrated steadystate throughput improvement compared filestore orderofmagnitude lower tail latency taking next level three open challenge remain eek every last bit performance building efficient user space cache dynamic resizing functionality problem shared project postgresql rocksdb issue rocksdb writeamplification nvme ssds high cpu usage serialization deserialization threading model prohibits custom sharding problem rocksdb similar keyvalue store keep ceph team researching better solution highend nvme ssds workload becoming increasingly cpubound nextgeneration backend ceph community exploring technique reduce cpu consumption minimizing data serializationdeserialization using seastar framework sharednothing hope experience paper initiate discussion among storage practitioner researcher fresh approach designing distributed file system storage backends
195,Lobsters,osdev,OS,OpenVMS Internals: OpenVMS Nonpaged Pool Management Changes (1994),http://www.thedavidcathey.com/2015/04/openvms-internals-openvms-nonpaged-pool-management-changes/,openvms internals openvms nonpaged pool management change,new autotuning lookaside list typical nonpaged pool allocation typical nonpaged pool deallocation allocation failure better nonpaged pool,originally published digital system journal marchapril thought dust make available openvms axp openvms vax introduced autotuning dynamic memory allocation allocation deallocation nonpaged pool although internals changed call used allocate deallocate pool also one time digital actually reduced number sysgen parameter change provide effective use nonpaged pool also make code easier follow nonpaged pool management four section nonpaged pool small request packet spr intermediate request packet irp large request packet lrp variable nonpaged pool srp irp lrp list also known lookaside list set allow fast allocation deallocation discrete amount nonpaged pool memory allocation could satisfied lookaside list memory allocated variable pool section nonpaged pool reserved page system page table depending several sysgen parameter srpcount srpcountv srpsize srp lookaside list irpcount irpcountv irp lookaside list lrpcount lrpcountv lrpsize lrp lookaside list npagedyn npagevir variable nonpaged pool region new nonpaged pool consists entirely variable nonpaged pool parameter old lookaside list gone nonpaged pool sized using sysgen parameter npagedyn initial number byte nonpaged pool npagevir maximum number byte nonpaged pool new lookaside list populated needed variable pool periodically returned variable pool lookaside list new methodology responsive nonpage pool usage used rather depending system manager size three lookaside list operating system expend lookaside list needed previously lookaside list expanded page permanently added list even momentary peak autotuning pool management expanded list periodically trimmed return memory pool user new autotuning lookaside list previously data cell ioc gqsrpiq ioc gqirpiq ioc gqlrpiq served listheads relative queue packet relative interlocked queue instruction insqti remqhi instruction used insert remove packet queue boottimesized srp irp lrp lookaside list replaced array lookaside list memory allocation byte byte byte increment list start empty filled memory allocated variable pool deallocated openvms axp array listheads pointed data cell ioc gqlistheads openvms vax data cell local systemprimitives executive image however nonpaged pool initialization place address local data cell exe arnpooldata lookaside listheads still accessed system dump analyzer sda defining offset nonpaged pool data area analyzesystemsda define ioc gqlistheads exe arnpooldata exam ioc gqlistheadsioc gqlistheads sda exam first quadword unusedioc sda examioc sda exam listhead byte packetsioc sda examioc p sda exam listhead byte packetsioc sda exit use command examine lookaside list axp use sda analyzesystemsda readexecsda exam ioc gqlistheadsioc gqlistheads sda examioc awuuuo byte packetssda examioc byte packetssda examsda exit vax list stored relative queue manipulated using interlocked queue instruction remqhi insqti see figure figure axp list stored nullterminated linked list second longword listhead sequence number routine exe lalremovefirst exe lalinsertfirst module lookasidelist used manipulate linked list loadlocked storecondition instruction provide atomic operation list rather use higher overhead privileged architecture library pal code call implement remqhi insqti see figure figure use remqhi exe lalremovefirst allows memory allocation occur quickly populated lookaside list interrupt priority level ipl without requiring acquisition pool spinlock typical nonpaged pool allocation nonpaged pool allocation performed routine exe alononpaged routine jsb entry point register filled requested size memory allocated entry point exe alonpagvar still exists also point routine exe alononpaged exe alononpaged take requested allocation size round nearest multiple resulting allocation size le equal byte memory allocated lookaside list allocation size divided byte determine lookaside queue used allocate memory attempt made remove packet queue remqhi vax exe lalremovefirst axp removal successful pool returned caller otherwise memory allocated variable pool pool ordered linked list accessed atomic instruction protected pool spinlock raising ipl ipl pool previous version openvms caller running higher ipl pool lookaside list empty allocation request fails immediately insufficient memory error s insfmem otherwise pool allocated variable pool using exe allocate routine routine exe allocate function previous version openvms typical nonpaged pool deallocation two jsb entry point nonpaged pool deallocation exe deanonpaged exe deanonpgdsiz routine exe deanonpaged us value stored irp wsize field deallocated memory determine much memory deallocated extract field transfer control exe deanonpdgsiz openvms version preceding address returned memory used determine memory returned srp irp lrp variable pool list pool come variable pool check longer required exe deanonpdgsiz work similar exe alononpaged round deallocation size multiple byte also verifies deallocated memory start byte boundary system bugcheck deallocations memory le byte length packet divided byte result u used index array lookaside list insqti instruction used return pool queue vax routine exe lalinsertfirst used return pool linked list axp returned memory larger byte pool spinlock acquired memory returned variable nonpaged pool calling exe deallocate routine exe deallocate function previous version openvms new nonpaged pool management routine provide routine called exe reclaimlists dequeue memory lookaside list return variable pool routine make either aggressive nonaggressive pas return lookaside list packet variable pool routine called two condition initialization nonpaged pool time queue element tqe created call routine exe reclaimlists nonaggressive pas every second e nonaggressive pas exe reclaimlists first acquires pool spinlock listheads scanned find lookaside queue two packet queue list two packet list one removed either remqhi exe lalremovefirst returned variable pool calling exe deallocate vax first three lookaside list skipped account percent activity especially mscp traffic axp lookaside list scanned reclamation unclear axp code differs point aggressive pas scan list check made determine many packet list list packet one returned variable pool attempt allocate memory variable pool fails routine exe alonpagvar allocation failure allocation request initially attempt made satisfy lookaside list request large lookaside list empty attempt made variable pool calling exe alonpagvar sometimes enough large enough piece nonpaged pool satisfy request occur exe alonpagvar call exe reclaimlists reclaim lookaside list hopefully freed entry create enough contiguous pool satisfy request request still unsatisfied attempt made expand pool calling exe extendpool pool unable expanded already expanded npagvir exe alonpagvar make atetmpt freeing sufficient pool calling routine exe flushlists exe flushlists last gasp effort routine nonpaged pool allocation satisfy allocation request exe flushlists start first lookaside listhead remove packet return variable pool exe deallocate large enough block found satisfy request still large enough section pool satisfy allocation request exe alonpagvar return insufficient memory error s insfmem better nonpaged pool new strategy provides direct indirect benefit pool management fragmentation reduced allocated increment instead increment addition pool selected size allocated reused frequently easily found lookaside list deallocation new strategy efficient dealing changing workload statically sized lookaside list unable migrate pool lookaside list needed system tuned dealing worst case occasionally trimming lookaside list returning memory variable pool system handle better workload change effect usage pool nonpaged pool allocated lookaside list lookaside allocated deallocated without added synchronization requiring le use pool spinlock le scanning variable pool done improving performance last two sysgen parameter left size nonpaged pool npagedyn npagevir making eight sysgem parameter obsolete certainly welcome system manager
196,Lobsters,osdev,OS,Bootstrap yourself to write an OS from scratch,https://tuhdo.github.io/os01/,bootstrap write o scratch,download book pedagogy book osdev wiki minimum requirement linux inside prerequisite http wwwallaboutcircuitscomtextbook status sample o repository contributing got question open github issue,book help gain foundational knowledge required write operating system scratch hence title completing book least learn write operating system scratch reading hardware datasheets real world work like able consult google quick answer big picture layer computer related hardware software write code independently pointless copy paste code real learning happens solve problem example given kick start problem conquer however solution available online examine giving good try linux development environment use common tool lowlevel programming assembly indepth program structured operating system run debug program running directly hardware gdb qemu linking loading bare metal pure c standard library runtime overhead download book pedagogy book give poor man fish feed day teach fish give occupation feed lifetime guiding principle book writing book try teach everything enough enable learn book point quite complete master part part consist chapter drop book learn point smart reader able continue example continue journey osdev wiki fact study everything part part meet minimum requirement osdev wiki well quite book actually go deeper suggested topic consider developing o fun impractical continue linuxspecific book free book linux inside popular linux kernel book book try hard provide strong foundation part part released first book teach core concept assembly elf linking debugging bare metal etc importantly information come example instead teaching assembly also teach use reference manual intel learning read official manual important hardware manufacturer understand hardware work learn secondary resource easier never gain complete understanding hardware programming ever read book assembly wondered information came author know everything say correct one seems magically know much hardware programming book give pointer question example skim chapter assembly c see make use intel manual volume process guide use official manual part planned series specification reader implement complete operating system component contain code aside example part shorten reader time reading official manual giving hint read explaining difficult concept use manual debug short implementation reader work chapter like university assignment prerequisite know circuit concept basic concept electricity atom electron proton neutron current flow ohm law however know absolutely nothing electricity quickly learn http wwwallaboutcircuitscomtextbook reading chapter chapter c programming particular variable function declarationsdefinitions loop pointer function pointer fundamental algorithm data structure c linux basic know navigate directory command line know invoke command option know pipe output another program touch typing since going use linux touch typing help know typing speed relate problemsolving least typing speed fast enough let get way degrade learning experience general assume reader basic c programming knowledge use ide build run program status future hope expand part cover first part time try finish chapter first sample o repository sample o book intended reference material part cover chapter system programming guide intel manual volume along simple keyboard video driver input output however moment following feature implemented protected mode creating managing process tss task state structure interrupt lapic paging io yet implemented try implement book progress contributing find grammatical issue please report using github issue sentence paragraph difficult understand feel free open issue following title format page number type descriptive title example grammar incorrect verb usage type one following typo indicates typing mistake grammar indicates incorrect grammar usage style indicates style improvement content indicates problem content even better make pull request provided book source main content book file operating system edit txt file integrate change manually workaround since lyx cause huge diff make impossible review change book development please bear english irritates really appreciate finally like project possible please donate help project keep going got question question related material development book feel free open github issue
197,Lobsters,osdev,OS,"Apache Mynewt: An OS to build, deploy and securely manage billions of devices",http://mynewt.apache.org/,apache mynewt o build deploy securely manage billion device,o build deploy securely manage billion device,o build deploy securely manage billion device
198,Lobsters,osdev,OS,Code tour: Serenity OS startup (from boot to GUI),https://www.youtube.com/watch?v=NpcGMuI7hxk,code tour serenity o startup boot gui,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature code tour serenity o startup boot gui youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature code tour serenity o startup boot gui youtube
199,Lobsters,osdev,OS,Guix Profiles in Practice,https://guix.gnu.org/blog/2019/guix-profiles-in-practice/,guix profile practice,guix profile practice cookbook set anywhere anytime basic setup manifest guix invoking guix package guix invoking guix package required package default profile benefit manifest related discussion matter apis garbagecollected reproducible profile special thanks gnu guix gnu guix respect user freedom guile scheme,guix profile practicepierre neidhardt october updated version article available brand new cookbookguix provides useful feature may quite foreign newcomer profile way group package installation together user system free use many profile wantwhether developer may find multiple profile bring great power flexibility shift paradigm somewhat compared traditional package manager convenient use understood set upif familiar python virtualenv think profile kind universal virtualenv hold kind software whatsoever python software furthermore profile selfsufficient capture runtime dependency guarantee program within profile always work point timemultiple profile many benefit clean semantic separation various package user need different contextsmultiple profile made available environment either login within dedicated shellprofiles loaded demand instance user use multiple shell running different profilesisolation program one profile use program user even install different version program two profile without conflictdeduplication profile share dependency happens exact make multiple profile storageefficientreproducible used declarative manifest profile fully specified guix commit active set mean exact profile set anywhere anytime commit information see section beloweasier upgrade maintenance multiple profile make easy keep package listing hand make upgrade completely frictionlessconcretely follows typical profile dependency project working onyour favourite programming language librarieslaptopspecific program like powertop nt need desktoptexlive one really useful need install one package one document received email gameslet dive set basic setup manifestsa guix profile set via socalled manifest specification look like specification manifest lib packagen see guix invoking guix package syntax detailswe create manifest specification per profile install way guixextraprofiles homeguixextraprofiles mkdir p guixextraprofiles myproject exist yet guix package manifestpathtoguixmyprojectmanifestscm profile guixextraprofiles myprojectmyprojecthere set arbitrary variable guixextraprofiles point directory store profile rest articleplacing profile single directory profile getting subdirectory somewhat cleaner way subdirectory contain symlinks precisely one profile besides looping profile becomes obvious programming language eg shell script simply looping subdirectory guixextraprofilesnote also possible loop output ofguix package listprofilesalthough probably filter configguixcurrentto enable profile login add bashprofile similar guixextraprofiles profile basename f profile etcprofile guixprofile profile guixprofile etcprofile fi unset profile donenote guix system user reflects default profile guixprofile activated etcprofile latter loaded bashrc defaultyou obviously choose enable subset guixextraprofiles guixextraprofiles profile basename f profile etcprofile guixprofile profile guixprofile etcprofile fi unset profile donewhen profile straightforward enable individual shell without polluting rest user session guixprofile pathtomyproject guixprofile etcprofilethe key enabling profile source etcprofile file file contains shell code export right environment variable necessary activate software contained profile built automatically guix meant sourced contains variable would get ran guix package searchpathsprefix profile myprofile see guix invoking guix package command line optionsto upgrade profile simply install manifest guix package pathtoguixmyprojectmanifestscm p guixextraprofiles myprojectmyprojectto upgrade profile easy enough loop instance assuming manifest specification stored guixmanifestsguix profilemanifestscm profile name profile eg could following bourne shell profile guixextraprofiles guix package profile profile manifest homeguixmanifestsguix profilemanifestscm doneeach profile generation guix package p guixextraprofiles myprojectmyproject listgenerationsyou rollback generation given profile guix package p guixextraprofiles myprojectmyproject packagesactivating profile essentially boil exporting bunch environmental variable role etcprofile within profilenote environmental variable package consume setfor instance manpath wo nt set consumer application man page within profile need transparently access man page profile loaded got two option either export variable manually egexport manpathpathtoprofile manpath manpathor include mandb profile manifestthe true infopath install inforeader pkgconfigpath install pkgconfig etcdefault profilewhat default profile guix keep guixprofile assign role want typically would install manifest package want use timealternatively could keep manifestless throwaway package would use couple day way make convenient runguix install packagefoo guix upgrade packagebarwithout specify path profilethe benefit manifestsmanifests convenient way keep package list around say synchronize across multiple machine using version control systema common complaint manifest slow install contain large number package especially cumbersome want get upgrade one package within big manifestthis one reason use multiple profile happen perfect break manifest multiple set semantically connected package using multiple small profile provides flexibility usabilitymanifests come multiple benefit particular ease maintenance profile set manifest manifest selfsufficient keep package listing around reinstall profile later different system adhoc profile would need generate manifest specification manually maintain package version package nt use default versionguix package upgrade always try update package propagated input even nothing guix manifest remove problemwhen partially upgrading profile conflict may arise due diverging dependency updated nonupdated package annoying resolve manually manifest remove problem altogether since package always upgraded onceas mentioned manifest allow reproducible profile imperative guix install guix upgrade etc since produce different profile every time even hold package see related discussion mattermanifest specification usable guix command example run guix weather manifestscm see many substitute available help decide whether want try upgrading today wait another example run guix pack manifestscm create pack containing package manifest transitive reference finally manifest scheme representation manifest record type manipulated scheme passed various guix apisit important understand manifest used declare profile strictly equivalent profile side effect pin package store prevents garbagecollected ensures still available point futurelet take example environment hacking project nt guix package yet build environment using manifest run guix environment manifestscm far goodmany week pas run couple guix pull mean time maybe dependency manifest updated may run guix gc package needed manifest garbagecollectedeventually set work project run guix environment manifestscm wait guix build install stuff ideally could spare rebuild time indeed need install manifest profile use guixprofiletheprofile guixprofile etcprofile explained guarantee hacking environment available timessecurity warning keeping old profile around convenient keep mind outdated package may received latest security fixesreproducible profilesto reproduce profile bitforbit need two piece information manifest guix channel specificationindeed manifest alone might enough different guix version different channel produce different output given manifestyou output guix channel specification guix describe formatchannels save file say channelspecsscmon another computer use channel specification file manifest reproduce exact profile guixextraprofiles homeguixextraprofiles guixextra homeguixextra mkdir guixextra myproject guix pull channelschannelspecsscm profile guixextramyprojectguix mkdir p guixextraprofilesmyproject guixextra myprojectguixbinguix package manifestpathtoguixmyprojectmanifestscm profile guixextraprofiles myprojectmyprojectit safe delete guix channel profile installed channel specification project profile depend itspecial thankschris marusich simon tournier thorough feedbackabout gnu guixgnu guix transactional package manager advanced distribution gnu system respect user freedom guix used top system running kernel linux used standalone operating system distribution machinesin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection used standalone gnulinux distribution guix offer declarative stateless approach operating system configuration management guix highly customizable hackable guile programming interface extension scheme language
200,Lobsters,osdev,OS,Evolution of Unix History (Gource visualization),https://www.youtube.com/watch?v=S7JB0mhrGCQ,evolution unix history gource visualization,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
201,Lobsters,osdev,OS,Phantom OS Architecture,https://github.com/dzavalishin/phantomuserland/wiki/PhantomArchitecture,phantom o architecture,book phantom o internals general persistent persistent memory snapshot snapshot snapsync blockingsyscalls virtual machine virtualmachine kernel communication internalclasses objectkernelconnector kernelobjectinterface blockingsyscalls driver native code posix environment,please take look book phantom o internals detailed description general phantom basically virtual machine vm working huge persistent virtual memory part vm class class called internal implemented kernel giving vm code access low level kernel service persistent virtual memory completely orthogonal object space vm relation example object boundary virtual memory page etc implemented abrupt computer failure loss power leaf system coherent state application code vm bytecode level o shutdown either manual caused failure even seen application data never die continue work next o boot shutdown ever happened persistent memory snapshot phantom regular snapshot whole virtual memory snapshot done asynchronously without stopping world resulting snapshot synchronous memory snapped moment o personal time mean snapshot state captured like system stopped dumped disk run without stopping see also snapsync blockingsyscalls virtual machine phantom bytecode traditional stackmachine bytecode like java bytecode difference builtin user type method boundary level object even integer class instance specific support integer calculation though speedup thing supposed phantom bytecode represent java program java phantom bytecode converter written language supposed brought java bytecode directly writing specific language frontend c clr bytecode converter planned work progress yet see also virtualmachine kernel communication set internal class method implemented kernel class offer kernel interface object environment unlike java phantom class code either internal native java term bytecodelevel see also internalclasses objectkernelconnector kernelobjectinterface blockingsyscalls driver currently driver written c live kernel completely future release possibility write driver userland providing required kernel framework userland driver restricted communicate given kernel set hardware resource interrupthandling method guaranteed paged native code hiperformance code numbercrunching video sound processing etc requires good lowlevel access processor memory supposed phantom able run native code special binaryobjectbound thread one binary object provide code c content others available ds possibly esfsgs architecture object mapped thread address space let phantom execute highlyoptimised native code supposed support portability possible provide exactly native llvmlevel code environment posix environment simple posix subsystem phantom persistent yet example quake application compiled posix subsystem
202,Lobsters,osdev,OS,Mu: A minimal hobbyist computing stack,http://akkartik.name/post/mu-2019-1,mu minimal hobbyist computing stack,richard gabriel best summary worse better mu notation primary affordance level provides habitable sequel earlier prototype habitable past approach bootstrapping readme played interactively rather passively read fairly regular subset whole family opcodes feedback previous prototype proved surprisingly easy teach nonprogrammers prototype wx constraint timetravel debugging experience cloud server next post remo dentato,oct mu minimal hobbyist computing stack far better underfeatured product rock solid fast small one cover expert would consider complete requirement richard gabriel best summary pg essay worse better past year working minimaldependency hobbyist computing stack everything processor called mu goal build infrastructure people enjoy programming using little code possible people also hack underpinnings modifying suit diverse desire conventional stack kinda support squint punt take year understand one piece infrastructure like c compiler look like nobody understands entire stack anymore like mu stack single person hold head modify radical way support understanding everything nt expected understand everything mu try reward curiosity get way trying get something done one implication fitting single head mu constrains number supported language language way growing isolated universe interoperation language add complexity seems better future reader stack minimizes number boundary even writer inconvenienced somewhat eventually want make easy swap one kind language another people program lisplike pythonlike clike syntax according taste regardless notation given mu computer parsimonious number notation reader learn understand take ownership single computer notation need simple enough implemented lowerlevel notation fact c compiler written c contributes lot complexity make compiler black magic people year surprising inevitable design seemed journey start specific processor architecture goal minimize layer translation paying attention dependency final destination seems quite inevitable ignoring minor syntactic choice discovery seems worth sharing broadly others prove wrong suggest alternative design outline since mu look quite different conventional stack need blog post cover ground plan give mu distinct language first currently exists third even planned yet level processor instruction set syntax sugar level memorysafe language level expressive highlevel language level nt quite map familiar term level attribute machine code assembly level attribute assembly highlevel language alternative view stack primary affordance level provides level structured control flow level strong typing level mould computer people think affordances requires global change programming model within level try keep thing habitable possible using local syntax sugar tool nt need understand entire codebase rest post focus level sequel describes preliminary design level wo nt get level finish building level far written line code loc level loc earlier prototype resemblance level since want level habitable isolation seems like good idea write decent amount code moving higher level big difference past approach bootstrapping try little possible level jumping higher level lower level inevitably end hard newcomer understand interactively take apart level subx lowest level goal pick processor make experience programming raw machine code completely suck mentioned level build level lie level nt enjoy editing binary nt want reader either instead alternative plan two prong c translator convert textual format binary selfhosted translator convert textual format binary c translator familiar pull gigantic dependency selfhosted translator look strange tiny codebase tiny surface area o syscalls example translator emit identical binary helpful debugging system complete detail operate tool readme post quick tour major design choice interesting clone repo read readme text editor mu really intended played interactively rather passively read ok design choice computer run open platform mu going run explicitly designed portable start quick tour need know instruction set year old started processor turned processor accumulated hack bolted feature history help fit head chosen fairly regular subset subx hence name focusing value couple instruction byte iterate string instruction machine code processor consists linear sequence instruction nested block structure nested call higherlevel language gone point long list instruction ability conditionally skip subsequence run subsequence repeatedly really instruction number long sequence number every instruction machine code start opcode series bit specifies instruction run assembly language provide friendly name opcodes like add jump complex instruction set like processor add map whole family opcodes significant logic deduce opcode instruction based argument also take significant amount code provide good error message many reasonableseeming combination operand nt let add together hard compress knowledge short error message tailored specific situation subx nt provide name opcodes use raw opcodes directly eliminates code translating name opcodes also enormously simplifies error message programmer need work list opcodes error need handle single case practice nt felt like major hindrance understanding error message returned assembler often requires understanding underlying opcodes anyway finding good error message valuable syntactic convenience love feedback decision see complete list opcodes supported subx point time type bootstrap help opcodes operand instruction operates small number operand instruction ca nt take operand part since two operand since binary operation like addition fundamental instruction read write one operand add operand subtract compute bitwise store result operand may stored either register memory register small number named really numbered location processor eax ecx edx ebx esp ebp esi edi operand memory also usually specified using register somehow eax value memory address provided eax value memory address get turned number nt need detail post consult readme detail errorchecking one big problem programming raw machine code instruction size instruction boundary nt aligned every byte something like processor parsing future instruction boundary read earlier instruction really easy accidentally add extra byte forget byte instruction happens byte intended opcodes interpreted operand vice versa program go silently rail may show error message much later difficulty debugging error arguably single biggest obstacle good programming experience point assembly language nope go build whole new syntax categorizing opcodes instruction name since subx need selfhosted every feature need programmed subx solution problem stay machine code add lot space metadata sample instruction subx copy esp ebp instruction lie one line consist multiple word separated whitespace word contains datum first slash datum part make binary everything word datum first slash metadata see multiple bit metadata squirrelled away word separated slash metadata optional often ignored good place little comment however certain special word argument type trigger errorchecking instruction mu ignores read however know opcode expects argument fails see one rest instruction immediately flag error see known argument type instruction nt expect immediately flag error register name ebp esp comment aid reader bootstrap translate initlinux aelf bbcopytoebx copy ebx missing operand code sample post hide detail nt important first encounter mu elide actual opcodes use metadata specific property general mechanism lot different check one may want apply used several way previous prototype started think structure word metadata sstatements analogy sexpressions fairly fundamental uniform syntax used diverse situation one nt want arbitrary nesting structured programming mentioned primary motivation subx layer make working control flow ergonomic processor track instruction execute using special eip register register ca nt modified instruction jump call modify jump add eip get tedious adjust byte offset every time add delete instruction subx provides named label specific point instruction stream like conventional assembly language example jumpifequal foo foo jump jumpifequal another convenience usually found assembly language special label break loop jumpifequal break jump loop jumpifequal jump basically get translated label break get translated jump enclosing correspondingly loop get translated jump enclosing earlier syntax surprisingly ergonomic proved surprisingly easy teach nonprogrammers prototype would say imperative language predicate subx would say flag predicate jumpunless flag break function idiomatic machine code program consist function operating data matter highlevel language matter processor run bottom translated interplay function data section get interplay detail keep program function data segregated memory code segment data segment respectively variety historic reason interesting also one currently topical reason interesting security segment contiguous block memory get single access restriction code segment executed written o load initially data segment written executed wx constraint critical pillar securing computer bad thing happen program induced modify code addition data segment program start request various segment empty working memory crucial one needed function work stack stack help keep local variable function isolated particular necessary recursive function call either directly indirectly call must get new copy local nt interfere call one way function call work used many modern platform making call caller push argument stack function access stack return caller pop argument stack clean recursive call get separate frame stack since stack temporary space get cleaned function return also ideal place local variable push stuff stack make sure clean return caller none wiser managing argument local variable require function know precisely live one unambiguous way specify argument local variable used many modern platform offset special stack pointer register esp instruction set provides push instruction automatically decrement esp pop instruction automatically increment esp stack grows downward bottomline call subx consist convention number push instruction one call instruction cleanup stack subx provides following syntax sugar f push push push call f add esp pop args byte string string array byte ignoring character encoding workhorse highlevel language assembly nt make convenient deal programming subx involves writing lot automated test test useful give good error message passing string function crucial mechanism subx allows string literal encounter one appends new literal data segment replaces label code segment code f foo data code f data f test one way able sling large program low level writing lot automated test test harness nt common sight assembly programming subx add single new mechanism make testing ergonomic emitting binary generates new function called runtests call every function program start test putting syntax sugar together subx function compute factorial number along one automated test factorial n int resulteax int function prologue ebp save register n return n otherwise return n factorial ebx return n factorial ebx factorial ebx eax restore register function epilogue esp testfactorial factorial checkintsequal eax failure factorial ignore magic number opcodes trust mean pop ebx mean ebp summary subx designed easy selfhost mix match feature machine code conventional assembly higherlevel programming language mnemonic programmer must provide numeric opcodes operand directly errorchecking using metadata syntax sugar function call expression like literal string automated test harness combination mechanism ergonomic enough written loc subx past year successfully gotten subx bootstrapped built emulator subx emit trace instruction executed trace provides timetravel debugging experience also package subx program thirdparty o kernel bootable disk image run natively cloud server spite milestone syntax still obviously entirely copacetic next post describe attempt design next level strong typesafety memorysafety rather surprise design process continues seem inevitable thanks garth goldwater remo dentato helpful feedback draft post
203,Lobsters,osdev,OS,Understanding Urbit,https://urbit.org/understanding-urbit/,understanding urbit,introduction open source skip ahead post join network,introduction think internet saved way thing going megacorp always control apps service longer run way mess completely new platform owned controlled user urbit new o peertopeer network simple design built last forever owned user hood urbit cleanslate software stack compact enough individual developer understand control completely built new stack give people single integrated tool communicating building community tool trust control extend liking want away terrible user experience current frankenstack apps service use today urbit designed become effective customizable productivity tool collaborator calm noninvasive communication tool friend family probably sound crazy let get concrete talk urbit piece technology urbit user experience technology technically urbit two component urbit o urbit id completely open source mit licensed urbit o new carefully architected software stack vm programming language kernel designed run software individual urbit o program run almost cloud server laptop many phone anything unix internet connection urbit o completely sealed system run sort like wasm jvm sometimes call overlay o urbit world person urbit o node urbit urbit secure private entirely control want connect others connect urbit directly rather going centralized service curious dive even deeper urbit o feel free skip ahead urbit id identity authentication system specifically designed work urbit o boot log urbit o use urbit id urbit id short memorable name like ravmelropdyl username network address crypto wallet one registered blockchain key one take away urbit id cryptographic property urbit id money scarce one cost something mean meet stranger urbit network skin game le likely bot spammer urbit id system live deployed plan change much work well curious dive detail jump ahead post user experience want urbit single simple interface whole digital life year urbit built public open source project anyone join network check bit like signing irc early early release urbit o minimal interface group communication first complete interface o tool chat share note link stay connected o first step toward truly complete o networked world time urbit grow system bring together different mode communicating chat payment document image biometric data want individual community able control software fact source code action simple interface want leave behind world apps service one bring everything together one place ordinary user create customized digital environment friend community see going get let walk two piece new technology individually urbit o urbit id talk vision future get technical people important note urbit stack way required used together like client feel free build like urbit id system problem use ultimately think new technology likely get adopted provide much much better user experience focussing creating
205,Lobsters,osdev,OS,"4os, ""the first Operating System written completly in Forth""",http://web.archive.org/web/19991022233047/www.itvc.com/Technology/4os.htm,first operating system written completly forth,first operating system written completely forth complete networked information appliance operating system available itv corporation u provides extensive service application developer implemented forth requires le processor product,first operating system written completely forth mean complete get copy service available forth complete networked information appliance operating system system service needed networked device implemented network stack complete written an standard forth ipudptcpslippppdnstftp available itv corporation currently available part itvc internet product individual interested licensing operating system separately contact u provides extensive service application developer system task memory management object structs display device keyboard remote control device flash file system windowing font user interface widget exception handling service implemented forth requires le processor product complete internet system o live forth system network stack flash file system gif jpeg decoder font network support application email browser customer application requires le megabyte program memory boot compression come standard take second system fit rom
207,Lobsters,osdev,OS,SerenityOS: From zero to HTML in a year,http://www.serenityos.org/happy/1st/,serenityos zero html year,serenityos zero html year first commit git repository patreon github youtube twitter patreon paypal,serenityos zero html year hello friend serenity operating system turn year old today counting first commit git repository october part code around first commit really putting everything tinkering shared repo anyways start somewhere note web page light htmlcss feature rendered serenity browser beginning four component ak utility library elf executable loader filesystem parser simple gui toolkit top sdl little c project tinkering installing slackware old pc hacking none mature fun place needed programming find filesystem parser looked like running cd homeandreas l l vfs l homeandreas drwxrxrx drwxrxrx rwr r rwr r first ever screenshot became serenity imported little kernel working earlier year piece crap place start originally weird idea kernel written c tried write c thankfully realized quickly silly serenity running inside virtual machine kept working gui toolkit linux system also developing standalone system far got gui still sitting top sdl linux widget test program sdl framebuffer decided time get running top serenity kernel day later saw running vm first time beautiful thing ever seen serenity booting gui first time started working userspace api gui stuff original version monstrosity window server running kernel process making syscalls create window etc seeing many guitest process spawn added fonteditor clock ported gnu bc wallpaper support top program first implementation menu early filemanager early version processmanager today called systemmonitor somewhere around figured would cool add networking support started building network stack host machine pinging first thing tcp kinda worked build irc client using filemanager drive development tree icon view first screenshot visualbuilder visual basic inspired gui design tool made snake game got ta snake first semisuccessful gcc port compile small c program started building paintbrush simple painting application system got basic sound support built piano desktop synthesizer new menu look inspired microsoft circa lady gentleman got doom working basic cs support libhtml viewing webpage serenity browser little screenshot tour first year serenity would like see also making regular monthly update video throughout year boy girl helped last year code bug report doc commenting video emailing hanging irc retweeting telling friend etc thank grateful love project getting also huge thank everyone supported via patreon donation method dream turn full time show day huge part keeping dream alive let see year andreas kling github youtube twitter patreon paypal
208,Lobsters,osdev,OS,"9front ""No Thinkpad"" Released",http://9front.org/releases/2019/10/08/0/,thinkpad released,thinkpad released http http http dash manual http http kernel driver compiler debugger library program documentation,thinkpad released http http http dash manual http dash man page print http thanks momus kernel driver kernel catch execution read fault sgnoexec segment kernel clear fpillegal pexit pprint kernel expose execute bit portable mmu code sgnoexec ptenoexec add ptecached bit kernel get rid tmperrbuf use syserrstr swapping instead namec kernel make exec clear errstr stop sidechannels truncate boundary kernel make user stack segment nonexecutable kernel move common ethermii port kernel prohibit changing cache attribute sgcachedsgdevice segattach set sgronly kernel simplify pgrpnote moving note string copying procwrite bcm kw omap implement setregisters bcm add cache invalidate accessing prop buffer bcm fix typo gpioc unused constant bcm flush early boot message uart screen initialization bcm invalidate cache fbinfo firmware completion bcm set xn bit kernel device mapping add addarchfile prototype fnsh qeed add config raspberry pi add driver controller add gic interrupt controller driver raspberry pi add gisb arbiter driver catch bus timeouts add pci express driver raspberry pi add support ram untested deal discontinuous memory region avoid virtual memory aliasing implement vmap proper use otpbootmodereg determine osc frequency thanks richard miller enable devgpio kernel configuration thanks qeed enter page table mmutop switching asid mmuswitch fix mistake previous commit fix wrong prescaler generic timer generalize mmu code implement dtracy support implement reboot support need flush instruction cache switching poll gisb arbiter asynchronous bus error remove unneccesary tlb flush mmuidmap reorganize virtual memory map rapberry replace driver richard miller sdhc driver set xn bit kernel device mapping strip debug symbol make sure img file multiple byte switch page size update ioh pci express raspberry pi work progress genet ethernet driver raspberry pi bcm add support gpiopull fix gpiomeminit cleanup bcm add dmaflush function make virtio size virtual address configurable socvirtio sociosize bcm add support device tree parameter passing bcm add vcore support raspberry pi gpio expander bcm clean dma destination buffer issuing dma case non cachelinesize aligned buffer bcm fix cache operation dma emmc bcm make irq optional add intrdisable use intrenable bcm preserve memsize across reboots avoid trashing atags parsing cmdline devdtracy make machlocks dtktab static devip fix permission checking devip server support tcp w option disable window scaling thanks devproc fix fishy locking proctext check proc validity static function devproc move proctab call qnotepg special case procwrite devproc restore psstate info string procstopwait devuart make sure uart enabled uartkick ethergenet fix flow control negotiation ethergenet remove debugging emmc highspeed support richard miller pc move lowlevel allocation detail mmuc memoryc rampage function fix compiler warning rebootjump entry calculation implement nx bit discovery map kernel mapping noexecute map kernel text readonly everything else noexecute preallocate mmupool page table sdide silence compiler warning atadebug usbehci introduce dmaflush function handle portable cache invalidation device driver usbehci silence param declared used compiler warning itdinit sitdinit usbxhci fix mysterious enableslot failure update xhci spec revision usbxhci implement portable dma flush operation move port usbxhci fix endpoint stall recovery handle epclrhalt flag use vmap uncached access cursor data instead manipulating kernel page table compiler debugger hardcode pagesize use initrnd lea x r mov r mov x r avoid allocating index register fix index node reg calculation skip regpair allocation oindex node fix unknown relation text xfol bug thanks mischief cc fix void cast crash cc remove nullwarn ocast codegen zap void cast cc use octal digit bit rune cc allow address expression c int cast cc import compiler warning bugfixes charles acidkernel fix procstk set kdir acidkernel stacktraces try use context error stack process sleeping library ape add mkstemp syssrcapelibapgenmkfile ape hardcode list ape library directory syssrcapelibmkfile ape fix stdio putc macro avoiding result operation used warning ape reimplement rename fixing compiler warning handling error case ape revert rename change ape include integer limit generic stdinth systemspecific stdinth ape add missing uintszmin defines ape stdinth ape add test powc ape add toascii ape handle nan inf edge case specified posix instead barfing ape turn warning building libap ape add mkstemp stdlibh fix listensrv filedescriptor leak libauth set errstr authrpc ardone result thanks majiru libflac tell stdinth find sizemax libstdio fix putc version libventi define vtentrynoarchive constant libventi implement vtreconn vtredial function libventi implement function program apecc add remove alpha add spim awk need call getargv twice get value filename cwfs fix listen filedescriptor leak date add email style formatted date g make grep recursively default implement private key export flag thanks kvik snoopy add support dhcp classless static route option snoopy avoid extra space dhcp filter output snoopy include dhcph instead replicating bootpdhcp option enum ssh work around githubcom broken cipher negotiation code thanks orib cmdip chown network connection authentication cwfs fix root access time qid path comparison cwfs properly handle bit qid path cwfs remove old assert debugging cwfs remove orphaned lrandc diskformat implement long name support file recognise unified diff output g apply fix thanks jsmoody g apply mitigation thanks jsmoody g fix missing type check ztype thanks jsmoody ipcifsd add basic support unix extension ipcifsd dont return garbage upper bit unix extension stat field ipcifsd exit close connection get malformed smb header fix linux mount hang ipipconfig leave behind null address dhcp get interrupted ndbdnsquery ndbcsquery write prompt stderr thanks kvik pcc always turn flag cpp plumber loop go bound replace strstr rchttpd avoid duplicate log output dirindex handler rchttpd emit charset option textplain content type rchttpd serve markdown textplain contenttype rchttpd set text content type sshfs use threadexits instead exit upasfs remove read timeout via alarm upasfs speedup mtree henter upassmtp handle temporary authentication failure vmx handle build arch exclude syssrccmdmkfile vncv fix snarf buffer realloc memory corruption documentation document draw memlorigin nusb remove startdevs reference document getdev thanks burnzez rsa document function rune complete source reference sshnet incoming tcp call tinc add history section vmx update bug walk add history section syslibdistmkfile adjust zynq img syslibdistmkfile storage vendor idea deflating syssrccmdmkfile fix pconly exclude thanks stefan syssrcbootbcmmkfile add missing device tree file raspberry pi syssrcbootbcmmkfile add raspberry pi kernel bootloader target bootrc remount devip devhostowner written factotum bootrc unmount devip starting factotum mkone fix man target thanks amavect
209,Lobsters,osdev,OS,Guix Reduces Bootstrap Seed by 50%,https://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50/,guix reduces bootstrap seed,guix reduces bootstrap seed reflection trusting trust bitcoin build system security rigorous regular bootstrap prebuilt binary full graph reduced binary seed bootstrap full graph without trusting single binary provider cycle show higher graph three year ago me pcc tinycc me suggested instead encouraged nyacc me schemeonly bootstrap gash nlnet foundation sponsoring work creating gnu tool chain bootstrap story towards full source bootstrap bootstrappable build gnu me variety reason bootstrappable build gnu me lightly patched tinycc gnu guix gnuâ guix respect user freedom guile scheme,guix reduces bootstrap seed jan nieuwenhuizen october delighted announce first reduction guix bootstrap binary officially released important step seed binary code practically nonauditable make hard establish source code produced themevery unauditable binary also leaf u vulnerable compiler backdoor described ken thompson paper reflection trusting trust beautifully explained carl dong bitcoin build system security talkit therefore equally important continue towards final goal full source bootstrap removing unauditable binary rigorous regular bootstrapgnu guix take rigorous approach bootstrapping bootstrapping context refers distribution get built nothingthe gnu system primarily made c code glibc core gnu build system assumes availability bourne shell commandline tool provided core gnu utility awk grep make sed othersthe build environment package container contains nothing declared input able build anything container guix need prebuilt binary guile gcc binutils glibc tool mentioned aboveso obvious chickenandegg problem first package get built first compiler get compiled gccfinal crossgccboot bootstrapbinutils bootstrapgcc bootstrapglibc bootstrapbash bootstrapcoreutils co bootstrapguile full graphthe answer start bootstrap binary first package get built bootstrap binary make next diffutils findutils file eventually gccfinal built compiler used build regular reduced binary seed bootstrapthe guix development branch merged introduces reduced binary seed bootstrap bottom dependency graph look like gccmesboot glibcmesboot binutilsmesboot gcccoremesboot diffutilsmesboot tccboot mesboot bootstrapmescctools bootstrapmes bootstrapbash bootstrapcoreutils co bootstrapguile full graphthe new reduced binary seed bootstrap remove binutils gcc glibc replaces gnu me mescc tool reduces trusted binary seed half user mean package manager formal description build application reproducible way starting nothing seed mean rebuild software artifact locally without trusting single binary providerfor comparison traditional distros often informally specified bootstrap story usually relying much bigger binary seed estimate seed weigh size debootstrap includebuildessential dpkgdev debhelper gcc make texinfo bullseye bullseyechroot http debdebianorgdebian bullseyechrootvarcacheaptarchives removed case cycle show higher graphthese bootstrap binary recreated guix build bootstrapbinarieswork started three year ago simple interpretera year later me become tiny scheme interpreter written simple subset c came simple c compiler scheme yes mutual selfhostingthe next step find path towards compiling default gcc sadly bootstrapping gcc compiler becoming increasingly difficult year looked gcc easy bootstrap loc depends bison reluctantly started looking nongnu alternative pcc finally settled tinycc tinycc tcc compile gcc currently recent release gcc built without c compileranother year later me grown tiny c library compiles heavily patched simplified tcc looked promising suggested tinycc help bootstrapping effort moving towards simplified c subset instead encouraged make mescc full blown compliant compiler felt setback gave u perspective removing tcc bootstrap later using nyacc amazing parser framework parser matt wette even made feasible perspectiveit took half year mature me building tinycc loc take instead initial bootstrapped tcc tried building version gcc try build version glibc using slightly le version binutils many interesting dependency tradeoff patching generated autotools output especially using tiny c library headerstypically newer version tool chain fix kind bug build system c code compliance great however simultaneously new feature introduced dependency added necessary bootstrapping increasing bootstrap hurdle sometimes newer tool strict old configure script recognise newer tool versionsalso spot triplet tool version combine integral version tool chain schemeonly bootstrapour next target another reduction schemeonly bootstrap replace bash coreutils etc binary gash gash core utilsgash workinprogress implementation posix shell scheme already capableenough interpret autoconfgenerated configure script run guile designed also run me meaning use early bootstrapwe excited nlnet foundation sponsoring work creating gnu tool chain bootstrap storythe reduced binary seed bootstrap start building ancient gnu software notably gcc glibc amazing achievement mirrored terrible clumsiness really want secure bootstrap gnu system gccmesboot tccboot mesboot maybe could go straight tinycc gcc need longer depend ancient gnu tool chain somewhat modern maintainable bootstrap pathnow shown done think time gnu tool chain developer step help create better version tool chain bootstrap storytowards full source bootstrapwe expect many interesting challenge approach lofty targetthe project jeremiah orians start everything byte virtually nothing look incredible project already done sojeremiah also leading effort bootstrapping me me scheme interpreter rewritten even simple subset c without preprocessor macro even clike language called transpilerabout bootstrappable build gnu messoftware bootstrappable depend binary seed built source software bootstrappable even free software serious security risk variety reason bootstrappable build project aim reduce number size binary seed bare minimumgnu me closely related bootstrappable build project me aim create entirely sourcebased bootstrapping path guix system interested gnulinux distribution goal start minimal easily inspectable binary readable source bootstrap something close schemecurrently me consists mutual selfhosting scheme interpreter c compiler also implement c library me scheme interpreter written line code simple c mescc c compiler written scheme together me mescc compile lightly patched tinycc selfhosting using tinycc me c library possible bootstrap entire guix system gnu guixgnuâ guix transactional package manager advanced distribution gnu system respect user freedom guix used top system running kernel linux used standalone operating system distribution machinesin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection used standalone gnulinux distribution guix offer declarative stateless approach operating system configuration management guix highly customizable hackable guile programming interface extension scheme language
210,Lobsters,osdev,OS,Collapse OS — Bootstrap post-collapse technology,https://collapseos.org/,collapse o bootstrap postcollapse technology,collapse o winter coming forth status life sourcehut roadmap getting started michael schierl j collapse o emulator discussion mailing list github rcollapseos reddit big discussion occurred reddit nice conversation hacker news,collapse o bootstrap postcollapse technology winter coming collapse o aim soften blow forth forth operating system collection tool documentation single purpose preserve ability program microcontrollers civilizational collapse designed run minimal improvised machine interface improvised mean serial keyboard display edit text file compile assembler source file wide range mcus cpu read write wide range storage device assemble deploy another machine additionally goal project selfcontained possible copy project capable creative person able manage build install collapse o without external resource ie internet machine design built scavenged part lowtech tool status project life sourcehut progressing well highlight assemble avr binary self replicates assemble within given enough ram storage known run serial link also keyboard directly plugged sega master system megadrive genesis video output dpad input andor keyboard adapter output lcd screen input builtin keyboard model builtin video keyboard pccompatible machine including modern pc serial link posix environment simulating screen ncurses full power reasonably wellfeatured forth interpreter mass storage support currently command line text editor similar forth traditional editor well visual text editor inspired unix vi self assembles tight ressources known self assemble sd card adapter model floppy built posix environment minimal tooling cc make ncurses needed exciting roadmap getting started usage documentation insystem access documentation requires run collapse o fortunately building running collapse o posix environment easy clone see cvmreadmemd instruction run list introduction follow instruction alternatively also michael schierl j collapse o emulator awesome allows run collapse o browser nt always date javascript forth version especially awesome emulator javascript port collapse o discussion best place discus project mailing list also stick around irc collapseos freenode collapse o previously hosted github interesting issue nt hesitate nt already start new thread mailing list continue discussion one issue also rcollapseos reddit aware heavy redditor nearly year stopped lot question might may already anwered big discussion occurred reddit answered many question also nice conversation hacker news collapse o nt participate nt hn account also community nt seem collapseaware idea participation discussion seemed tedious user yellowapple good job answering many question way similar would
211,Lobsters,osdev,OS,Porting NetBSD to the AMD x86-64: a case study in OS portability (2002),https://www.usenix.org/legacy/publications/library/proceedings/bsdcon02/full_papers/linden/linden_html/index.html,porting netbsd amd case study o portability,bsdcon tech program index frank van der linden abstract figure figure figure figure table http http http,bsdcon paper nbsp nbsp nbsp bsdcon tech program index pp proceeding porting netbsd amd case study o portability frank van der linden wasabi system inc fvdl wasabisystemscom abstract netbsd known portable operating system currently running different architecture different type cpu paper take look done make portable decreased amount effort needed port netbsd new architecture new amd architecture specification published end hardware follow used example supporting multiple platform primary goal netbsd project start netbsd ported platform netbsd kernel code adapted become portable along way generally code shared port much possible netbsd always considered code assumed useful architecture present future machineindependent put appropriate place source tree writing code intended machineindependent contains conditional preprocessor statement depending architecture code likely wrong extra abstraction layer needed get rid statement assumption size type made assumption made type size platform large problem platform came around problem kind dealt netbsd ported dec alpha variation problem dealt ultrasparc port big endian v littleendianness alpha interacting datastructures fixed size ondisk metadata filesystems datastructures directly interpreted device hardware explicitly sized type used etc bsd originally written one target platform later vax mind later code platform added contained code platform netbsd based steadily expanded number supported platform year platform added became obvious many used device using different lowlevel method access device register handle dma led example different port seperate driver serial chip containing nearly identical code obviously acceptable situation port new hardware added every month remedy situation busdma busspace layer created busspace layer take care accessing device io space busdma layer deal dma access netbsd port new architecture interface must implemented io bus machine us done device driver attach io bus compile work without extra effort course code shared part deal platformspecific hardware simply need use machine instruction compiler never generate userspace tool also platform specific summary important machinedependent part netbsd need dealt porting netbsd new platform first foremost working crosstoolchain compiler assembler linker etc needed bootstrap operating system new platform gnu toolchain become defacto standard open source system netbsd exception rule since elf binary format used almost netbsd port used new port well operating system linux making gnu toolchain work netbsd usually involves work creatingmodifying configuration file exception case target cpu nt supported yet make much greater effort boot code deal loading kernel image ram executing interacts firmware load image effort needed write boot code largely depends functionality offered firmware often limited capability firmware used load second stage bootloader containing code sophisticated dealing filesystems kernel image may reside file format kernel may trap interrupt handling obviously highly machinedependent part kernel least entry point must machinedependent code save restore cpu register furthermore cpu different set trap needing specific care memory management unit mmus tend quite different cpu cpu may even different within one family processor example powerpc series mmu differs significantly series may also different expose hardware mmus may example fixed page table structure walk hardware leave many operation software exposing translation lookaside buffer tlb miss lowlevel virtual memory code system called pmap module name taken mach operating system whose virtual memory vm system used platform device highly unlikely appear platform may include onchip serial device clock porting netbsd new platform often involves writing driver least one device mentioned device code us machineindependent interface io dma operation difference per platform hidden underneath interface implementation interface deal platform specific interface heavily used device driver small memory footprint speed important often interface implemented set macro inline function userspace c startup code library contain machinedependent code library part question mainly system call interface c library optimized string function library specific floating point handling math library lesser used area like kvm library deal reading kernel memory lastly shared library handling relocation type likely different platform going specific brief introduction amd architecture order amd codenamed hammer architecture specification released end december hardware implentation publicly available yet exclusively developed simics simulator made virtutech since essentially extension known netbsd architecture predecessor introduced first figure virtual address translation pagesize entry page table page directory bit wide name intel gave architecture originally introduced cpu application pc world become popular cpu architecture today cpu following feature seven wide general purpose register also used chunk large set instruction onchip floating point unit pentium iii streaming simd extension sse class instruction dealing parallelized loadstore computation targeted graphic application sse also add set new register bit wide use sse instruction pentium added yet sse instruction widended sse register bit newer sse instruction known wide addressing mmu supporting usual page protection scheme four gigabyte virtual memory threelevel pagetable different part virtual address used index page table structure structure contain information protection page point physical address page structure indexed next lower level contained lowest level page table contains actual physical address referenced later cpu also support extended version scheme called physical address extension pae enabling use physical memory virtual address translation architecture shown figure memory segmentation descriptor describing type base address length section memory memory descriptor type stored special table segment register specify descriptor used determine location loadsstoresexecution trapinterrupt handling special array descriptor called interrupt descriptor table idt four different execution mode program plain mode real mode backward compatible protected mode mode protection protected mode mode modern system use finally virtual mode run oldstyle program virtual real mode operating system actually running protected mode architecture essentially extension architecture addition legacy real protected mode defines long mode real mode protected mode fully compatible architecture long mode capable running binary without modification contains number extension paper discus long mode except explicitly noted otherwise generalpurpose register already present architecture extended bit eight general purpose register added yielding total fifteen counting esp register see figure address often heard complaint architecture general purpose register additionally eight register added consistency general purpose register lower bit lower bit addressed specifically instruction something possible four register architecture backward compatible computation move involving lower part register affect upper bit however operation zeroextended special immediate register move instruction added conveniently use constant immediate value allowed instruction figure register compatible register shown italic idea extended architecture also reflected memory management unit mmu virtual address space however initial implementation architecture specified use bit bit physical address space address specified signextended essentially leading hole virtual memory space addressed enable mmu handle translation bit virtual address space extra page table level added addition extra level already added later implementation architecture support pae see figure dotted line inside virtual address show pae end basically page table scheme pae scheme instead page table pointer directory entry plus fourth level called similarity go far pae feature must actually specifically enabled part step get chip long mode figure virtual address translation pagesize entry page table structure bit wide notable feature architecture include possibility addressing relative instruction pointer flat address space memory offset specified code data segment register ignored hardware system data structure extended hold address needed fast special cased instruction system call operating system amd already introduced cpu extended bit special register added register hold entry point syscallsysret instruction efer extended feature enable register amongst thing contains bit enables long mode using list machinedependent operating system part section work needed port netbsd architecture discussed work started gnu toolchain already basic support developed linux suse inc shared library support nt working yet compiling assembling linking application mostly worked application binary interface abi also defined adapting code netbsd came modifyingcreating configuration header file naturally compiler linker bug present osindependent code toolchain could expected code quite young abi issue consider abi defines four nonpic code model small symbol program assumed virtual address range kernel instead address expected negative range ie upper bit memory kernel often run upper region virtual memory code model added map kernel area without specify full offset code medium size address code segment expected range data full range large restriction data code address compiler generate code use indirect addressing via register sure full range addressable similar model positionindependent code default userspace program expected use small code model code model nt yet completely supported port done although least large model turned stable small modification used kernel since actual hardware available yet definitive firmware interface upcoming machine specified yet bootcode deal whatever simulator provided simulator provided normal pc bios interface meaning bootcode could almost used asis however kernel image loaded elf binary case making work trivial modification since code load elf binary already made machineindependent placed standalone library used bootcode various netbsd platform initial bootstrap code kernel ie first code executed kernel naturally written scratch new netbsd port although viewed extended version since fully compatible poweron also need deal getting cpu mode mode time couple step mode actual step enable physical address extension set lme long mode enable bit efer register point register prefabricated initial page table structure enable paging cpu running compatibility segment fabricate temporary global descriptor table long mode memory segment jump segment kernel mapped upper region memory could previously address region lie well range since finally running long mode within range jump instruction use one finally start executing actual kernel code structure lowlevel trap interrupt code similar although code could shared also us interrupt descriptor table idt set vector trap interrupt work done entry point trap normal save registersdispatchrestore register although higherlevel trap code probably shared since set trap architecture yet done another set trap system call entry point support mechanism already present architecture entering kernel via software interrupt issuing call special type structure call gate automatically switch kernel environment instruction perform action usually needed environment address space flat ie full virtual memory available program one chunk kernel usually occupying upper region syscall sysret instruction optimized case used implement faster system call path important factor performance application code handle written yet integrated currently oldstyle entry point still used change near future mmu us page table structure similar basically physical address extension page table extrapolated level deal bit virtual memory initial family processor similarity pmap module taken abstracted implement generic nlevel page table either wide entry resulting code tested port netbsd success difference code hidden c preprocessor macro type definition advantage approach easy optionally support pae well mean conditionally compiling macro type definition figure virtual memory layout implemented virtual memory layout shown figure signextension cpu performs virtual address unaddressable gap exists unusual gap also found eg alpha processor memory layout le stretchedout version memory map expected merged pmap module user process run bottom half virtual memory kernel always mapped top half part top half unused kernel nt need huge amount virtual memory available turned using amount space blew data structure disproportional way upper part bottom half virtual memory taken recursively mapped page table page upper part top half virtual memory used page table process current one need changed layout meant kernel range kernel code model specified abi large model needed yet supported gcc fortunately turned work small modification kernel likely changed use kernel abi model real hardware available speed assessment made layout used consistent extension model making pmap code sharing easier much buslayer backend code could reused port pio case instruction remained change needed except modification make fit extended register set go memorymapped io dma framework needed deal possibly pci would unable dma access memory limit simple solution picked dma memory pci always come limit need revisited later machine memory condition may occur ram available limit avoid problem bounce buffer introduced temporary buffer dma done data must copied actual location far netbsd port deal platformspecific device simulator simulates number hardware component known pc world like hostpci bridge etc component worked modification needed busspace busdma layer implemented main work userspace porting library c startup code c startup code c library fairly trivial port work done write system call stub optimized string function keeping mind abi pass argument register instead always stack abi specifies math library bit work could share lot code really code since fpu instruction abi difference abi specifies floating point argument passed sse register abi pass stack macro written extract argument various mostly trigonometry function prepare use common bit code port lastly dynamic linker adapted deal type relocation shared library may use offer option run application without modification useful option enabled operating system run older application box support needed kernel though basic item needed run application install compatibility memory segment various descriptor table cpu cpu execute instruction segment environment however trap kernel switch cpu mode advantage nt need special kernel entryexit code application program different interface kernel pas argument system call different way quantity also structure passed kernel rather pointer different alignment issue needed addressed enable running old binary compatibility code run binary various platform linux solaris etc part netbsd long time surprisingly issue already tackled needed deal running sparc binary code module implement small layer translates needed argument system call counterpart port netbsd amd architecture done six week confirms netbsd reputation portable operating system one week spent setting crosstoolchain reading specification three week spent writing kernel code one week spent writing userspace code one week testing debugging problem observed machineindependent part kernel test run simulated device driver file system etc worked without modification porting effort went smoothly table show amount new code written table new line cassembly code per area netbsd source tree area assembly line c line libc c startup libm kernel dynamic linker area sharing code related cpu work done currently pmap nt shared port though known work architecture pmap code counted new code table line code form another based code descriptor table code also shared number new c code line drop well code properly shared work paid employer wasabi system inc also like thank amd support virtutech simulator folk suse linux toolchain work jason thorpe machineindependent dma framework netbsd usenix annual technical conference advanced micro device inc amd architecture programmer overview http hubicka jaeger mitchell draft abi http intel corporation pentium manual http chris demetriou netbsd busspace manual page originally netbsd trademark advanced micro device inc frank van der linden
212,Lobsters,osdev,OS,GerdaOS: a custom ROM to liberate the heart of Kai,https://gerda.tech/,gerdaos custom rom liberate heart kai,,gerdaos iconpng welcome home page world first custom rom nokia future kaios based phone aim user privacy security freedom control everything device mission liberate kai heart snow queen han christian andersen hence name see action http key feature say ad tracking default decision create gerdaos initially made finding devastating security bug kaios version shipped nokia earlier hmd firmware version gerdaos nt preinstalled apps proven track including limited kaistore fota updater gameloft game google apps also analytics disabled track header enabled default default browser search engine set duckduckgo moreover comprehensive hostbased advertisement blocking list day surfing experience wo nt distracted plague modern web install want contrast poor slowly filled app store gerdaos come file manager package installer evolved since first day jailbreaking http installer gerdapkg allows install kaioscompatible application local zip package choose file manager like apk file android alternative store thirdparty apps see full list http sitesgooglecomviewbhackersstorehome also compatible gerdaos overcome limit multitask since first public alpha gerdaos provides screenshooting app switching capability extent allowed underlying architecture using intuitive control overcome hardware limitation nokia keypad pressing power button different slide lid position performs different action fullopen slide power minimizes app halfopen slide power take screenshot closed slide power act normally master device gerdaos installation include developer menu hidden stock kaios root adb access default also gerda recovery component crucial installing system part also root adb access able repair system unfortunate situation also since beginning february gerdaos build include ability bypass ttl restriction carrier blocking wifi tethering default since apr build imei manipulation frontend added believe right complete control phone shape future community rom gerdaos open public audit everyone report bug contribute new feature express desire listening future port kaiosbased phone beyond nokia also planned also see faq page http gitlabcomprojectprissystemwikisgerdaosfaq get answer question get gerdaos download latest image recovery main system updated build version recovery image nokia http system installer http see changelog forum thread http groupsgooglecomforum contribute current development stage alpha report bug project pris system issue tracker http gitlabcomprojectprissystemissues repository contribute main system http gitlabcomprojectprissystem recovery repository http gitlabcomprojectprisrecovery install current support status dualsim model ensure stock firmware updated least proceeding process wipe stock system data voiding warranty stock update longer possible risk responsibility install recovery prepare recovery image file copying sd card first need find way root phone obtain root shell nokia firmware version inclusively exploit exists allows obtain root privilieges right kaios browser go page http rgerdatech phone browser check whether phone vulnerable get temporary next reboot root shell accessible via adb stock system adb debug mode activated entering debug secret code may need enter visiting page stock version please use wallace http wallace lite http rooting method installing one apps via webide pale moon old firefox version entering debug code see forum topic http detailed instrtuctions root shell backup existing recovery image case dd ifdevblockbootdevicebynamerecovery ofsdcardrecoverybackupimg install new one platform assuming also copied sdcard dd ofdevblockbootdevicebynamerecovery also backup partition modified root console highly recommended dd ifdevblockbootdevicebynamesystem ofsdcardsystembackupimg dd ifdevblockbootdevicebynameboot ofsdcardbootbackupimg dd ifdevblockbootdevicebynamesplash ofsdcardsplashbackupimg dd ifdevblockbootdevicebynamefsg ofsdcardfsgbackupimg dd ifdevblockbootdevicebynamerpm ofsdcardrpmbackupimg dd ifdevblockbootdevicebynamemodem ofsdcardmodembackupimg install main system recovery place first boot powering phone holding arrow button several option install rest choose one clone system repo http gitlabcomprojectprissystemtreemaster run make phone booted gerda recovery connected pc method work gerda recovery requires necessary build prerequisite bash git python make gcc openjdk ffmpeg etc download installer see link put sd card navigate install recovery alternatively use adb sideload feature method also work stock recovery installing gerda recovery adbenabled custom recovery highly recommended installation mandatory run wipe datafactory reset recovery reboot enjoy freshly installed gerdaos credit main contributor luxferre http aka suborg http gitlabcomsuborg branch initial research modification package installer security hardening page sylvainblot http gitlabcomsylvainblot ci part jiophone researchsupport branch kaius unofficial store gotziem http gitlabcomgotziem testing jiophone researchsupport branch oleole http gitlabcomoleole build process saper http gitlabcomsaper build process vbhjyzxc internal tooling rom would possible without community support special thanks bananahackers group forum http groupsgooglecomforum forumbananahackers admins ivan alex hc perry kaios reddit community http wwwredditcomrkaios admin xdadevelopers forum community stevenblack http githubcomstevenblackhosts wonderful hostbased adblocking solution everyone signed open letter http support movement elsewhere luxferre gerdatech bananahackers present
213,Lobsters,osdev,OS,About ELF Auxiliary Vectors,http://articles.manugarg.com/aboutelfauxiliaryvectors.html,elf auxiliary vector,system call usrsrclinuxfsbinfmtelfc usrincludelinuxauxvech asmauxvech fsbinfmtelfc spying elf auxiliary vector sysenter based system call mechanism linux,elf auxiliary vector mechanism transfer certain kernel level information user process example information pointer system call entry point memory atsysinfo information dynamic nature known kernel finished loading information passed user process binary loader part kernel subsystem either builtin kernel kernel module binary loader convert binary file program process system usually different loader binary format thankfully many binary format linux based system use elf binary elf binary loader defined following file usrsrclinuxfsbinfmtelfc elf loader par elf file map various program segment memory set entry point initializes process stack put elf auxiliary vector process stack along information like argc argv envp initialization process stack look something like position content size byte comment stack pointer argc number args argv pointer program name argv pointer argv pointer x argv n pointer argv n pointer null envp pointer envp pointer envp pointer envp term pointer null auxv auxv auxv auxv term atnull vector padding argument asciiz string environment asciiz str end marker null bottom stack virtual elf loader put array auxv elf auxiliary vector bottom stack structure auxiliary vector defined usrincludeelfh typedef struct atype entry type union aval integer value use pointer element added though since work using definition platform vice versa aun atype defines entry type union aun defines entry value legal value atype defined elfh give idea vector legal value atype entry type define atnull end vector define atignore entry ignored define atexecfd file descriptor program define atphdr program header program define atphent size program header entry define atphnum number program header define atpagesz system page size define atbase base address interpreter define atflags flag define atentry entry point program define atnotelf program elf define atuid real uid define ateuid effective uid define atgid real gid define ategid effective gid define atclktck frequency time pointer global system page used system call nice thing define atsysinfo define atsysinfoehdr whole list defined header file usrincludelinuxauxvech asmauxvech since entry type atype start elf auxiliary vector also called elf parameter example adding atsysinfo auxiliary vector define archdlinfo extern char kernelsyscallviaepc newauxent atsysinfo unsigned long kernelsyscallviaepc newauxent atsysinfoehdr unsigned long gateehdr fsbinfmtelfc define newauxent id val elfinfo eiindex id elfinfo eiindex val spying elf auxiliary vector elf auxiliary vector mostly used program interpreter hence discussed much programmer elf auxiliary vector passed program seen setting environment variable ldshowauxv root localhost bintrue atsysinfo atsysinfoehdr athwcap fpu vme de pse tsc msr pae mce apic mtrr pge mca cmov pat clflush dts acpi mmx fxsr sse s atpagesz atclktck programmer also access parameter inside program reaching auxv array stack following program snippet show way find value atsysinfo parameter include stdioh include elfh main int argc char argv char envp auxv envp null stack diagram envp null mark end envp auxv envp auxv atype atnull auxv auxv atype atnull mark end auxv auxv atype atsysinfo printf atsysinfo xn auxv aunaval root localhost gcc at atsc root localhost at atsysinfo verify program working properly using ldshowauxv environment variable root localhost at grep atsysinfo atsysinfo atsysinfoehdr atsysinfo well say elf auxiliary vector go search previous article sysenter based system call mechanism linux credit stack diagram taken phrack article http grugq scut
214,Lobsters,osdev,OS,PipeWire,https://pipewire.org/,pipewire,flatpak,imagesvgxml feature include capture playback audio video minimal latency realtime multimedia processing audio video multiprocess architecture let application share multimedia content seamless support pulseaudio jack alsa gstreamer application sandboxed application support see flatpak info
215,Lobsters,osdev,OS,"Plan 9: Not dead, Just Resting - 2019-10-02",https://www.nycbug.org/index?action=view&id=10672,plan dead resting,meeting event r,meeting event r plan dead resting ori bernstein suspender greenwich street typically second floor otherwise first ori give overview plan tell use launch ignores advice give description system put together talk happened since bell lab engage philosophy talk learned approach system take applied new system live demo included ori born seems made meat spends day tickling keyboard hoping convince computer thing
216,Lobsters,osdev,OS,Nanos 0.1.20 has Initial T2 (xen) Support,https://github.com/nanovms/nanos/releases/tag/0.1.20,nanos initial xen support,reload reload,trivial mmap runtime test missing runtimetests rule perform action time signed another tab window reload refresh session signed another tab window reload refresh session
217,Lobsters,osdev,OS,Drone: An Embedded Operating System for writing real-time applications in Rust,https://www.drone-os.com/,drone embedded operating system writing realtime application rust,,cargo take development comfort next level drone extends philosophy embedded world target chip debug probe supported drone flash first program get feedback right away drone new toolchain probe bmp device flashsize ramsize helloworld created binary application helloworld package removed srcmainrs created srcbinrs created srclibrs created srcthrrs created srctasksmodrs created srctasksrootrs patched cargotoml created dronetoml created justfile created rusttoolchain created cargoconfig patched gitignore cd helloworld deps rustup target add info downloading component ruststd info installing component ruststd flash drone env cargo build feature release updating cratesio index compiling compiling unicodexid compiling syn compiling serde compiling helloworld homevalffhelloworld finished release optimized debuginfo target drone flash start address load size transfer rate kbsec byteswrite log drone log reset log output hello world interrupt executor async task thanks rust zerocost asynchronous programming interrupt handler look like conventional synchronous code except nt need separate stack pub async fn handler input input result error let input mut gpiob gpioc input interrupt event stream read pin let mut let mut init let mut gesture gesture init mut mut await wait falling edge trigger awaitissome repeat back high level gpiobgpioidrload read fifo buffer match gesturesadvance mut mut await turn led gesture gpiocgpiobsrrstore r turn led gesture gpiocgpiobsrrstore r ok drone includes dynamic memory allocator allows use familiar rust box vec string arc dynamic type lockfree deterministic small code footprint make useful even simplest microcontrollers cost requires tuning particular application drone automates providing utility collecting realtime allocator statistic calculating optimized layout configuration featuresheaptrace flash heaptrace c drone heap generate pool block size max load total allocation maximum heap load optimized layout heap size pool block capacity block capacity block capacity block capacity block capacity block capacity fragmentation hint replace existing heap section dronetoml drone provides rich api working safely memorymapped register application start set zerosized unique token available register token move copy semantics shareable atomic access nonshareable nonatomic access split individual register field token use crate consts flashws pllm plln pllp use dronecortexm reg prelude use reg fn initsysclk mut rcccr reg rcc cr urt mut rccpllcfgr reg rcc pllcfgr urt mut rcccfgr reg rcc cfgr urt mut flashacr reg flash acr urt rcccrmodify r rsethseon hse clock enable rcccrload hserdy hse clock ready flag rccpllcfgrstore r r hse oscillator clock selected pll clock entry setpllsrc division factor pll input clock writepllm pllm pll multiplication factor vco writeplln plln pll division factor main system clock writepllp pllp rcccrmodify r rsetpllon pll enable rcccrload pllrdy pll clock ready flag flashacrstore r r ratio cpu clock period flash memory access time writelatency flashws data cache enabled setdcen instruction cache enabled seticen prefetch enabled setprften flashacrload latency flashws rcccfgrstore r r pll selected system clock writesw system clock divided writehpre ahb ahb rcccfgrload sw pll used system clock drone us interruptbased preemptive priority scheduling task priority executed cooperatively application predefined number thread corresponding hardware interrupt thread run dynamic number fiber use crate thr use dronecortexm fib reg prelude thr prelude use reg async fn enablehseclock rcccir reg rcc cir srt rcccr reg rcc cr srt thrrcc thr rcc need move ownership hserdyc hserdyf following fiber let reg rcc cir hserdyc hserdyf rcccir attach listener notify u rcccirhserdyf asserted let hserdy thrrccaddfuture fib newfn move hserdyfreadbit hserdycsetbit fib complete else fib yielded enable hse clock rcccrmodify r rsethseon sleep rcccirhserdyf asserted hserdyawait register individual register field grouped peripheral block drone make great effort abstract different instance one peripheral type even instance minor difference use dronecortexm reg prelude use periph gpio pin gpiopinmap gpiopinperiph load switch pub struct loadswitch gpiopinmap pin gpiopinperiph impl gpiopinmap loadswitch set new loadswitch pub fn init pin gpiopinperiph self pingpiomodermoderwritebits general purpose output self pin turn switch pub fn self selfpingpiobsrrbssetbit tie pin turn switch pub fn self selfpingpiobsrrbrsetbit tie pin ground pub fn handler reg regs let sdcardswitch loadswitch init reg let bleswitch loadswitch init reg sdcardswitchon bleswitchon drone provides abstract logging facade designed arm serial wire output output captured generic usbuart adapter multiplexed stream support atomic packet byte familiar rust macro like print eprint dbg mapped reserved port work standard output standard error respectively use dronecore log port fn handler familiar output macro work println hello world dbg send raw byte different port port new writebytes port accessed concurrently send indivisible packet byte length port new write write drone provides safe api inherently unsafe lowlevel operation required unsafe function entrypoint located srcbinrs separate compilation unit even write whole microcontroller firmware forbid unsafecode top srclibrs nomangle naked pub unsafe extern c fn reset mem bssinit mem datainit processor fpuinit true task root regs take thrsinit take loop processor waitforint
218,Lobsters,osdev,OS,"Directories, Configuration Files and Configurations Files as Directories",https://zge.us.to/dirconf.html,directory configuration file configuration file directory,directory configuration file configuration file directory json yaml toml acme practical example dirconf advantage disadvantage update,directory configuration file configuration file directory one inconsistency unix modern system structured hierarchy directory end freely formatted file begin sadly many people tend think line drawn certainly casetocase question example thinking configuration file line drawn case also interesting since configuration file historically kind problem unixlike system struggle colondelimited format like etcpasswd perline option like etcsshsshconfig emacs even configuration file complete programming language run initialisation script emacsdinitel started choose json others yaml yet others toml cleverly used abused depending applied seeing chaos confusion abandon approach instead seems though none necessary especially one recall unix maxim everything file recently playing concept structuring configuration file within base directory seems work well would like introduce solution discus advantage disadvantage see hoping start discussion plausibility idea noted completely new many tool exposed functionality file system allowing editor like acme tool change process content buffer tagline editing virtual file hence main difference working virtual file system regularany file system practical example implemented approach go published name dirconf go detail specific implementation since would go idea instead focus file convention try use accordance xdg specification library attempt use directory xdgconfighome name current binary usually configsomething something program use directory hierarchical value server listenon user john age could simply found file configsomethingserverlistenon configsomethingusersjohnage respectively latter file could contain number nonnumber would result error another interesting example would boolean value would represented existence absence file complex data image could easily placed configuration compared classical infile format last thing worth mentioning would currently write schema file content closely resemble classical configuration file usually looking something like int user age url serverlistenon bool active note tab two column type specification could used editor tool easily let user know file expects content avoid error configuration parsing currently following type mind int integer value float floating point number humanreadable notation string nonbinary data stringarray maybe array list list string string one line boolean truthvalue determined existence file file file directory whether actually plain file also though could also make sense schema directory file content variable type setting role file extension especially richer medium would play profilejpg profilepng profilegif different key would discussed advantage minimal parsing required plausibly read data one even need library system call universal configuration file editor could make working different tool seamless data related program could stored one central place making easier maintain backup configuration depending content version control could also play role could push adoption xdg configuration directory weak argument since related implementation format easier include configuration possible synchronise common value colour theme using symbolic hard link disadvantage type could invented without library necessarily support extensive configuration could burden file system inode table complex configuration could end slow compared complete database system comment fit well plaintext file see discussion sharing configuration online would harder copypasting text would love hear opinion subject could add send email message currently inclined biased think something approach open convinced otherwise informed example tried something like failure success update since writing article reworked dirconf library go seems le stable state schema file look like better way forward simplicity creating dirconf editor typestypenames stable
219,Lobsters,osdev,OS,soso: A Simple Unix-like Operating System,https://github.com/ozkl/soso,soso simple unixlike operating system,soso running cd image iso file lua doom building,soso soso simple unixlike operating system written nasm assembly mostly c support multiboot started grub built using nasm clang tested build environment linux freebsd window window subsystem linux installing grub disk image window host supported soso operating system feature multitasking process thread memory paging page kernelspace run userspace run separated virtual file system filesystem using fatfs system call libc musl ported basic call like open read userspace program elf file mmap support framebuffer graphic userspace access mmap shared memory paging written page support since easier implement way page directory entry point directly page frame mechanism page directory entry point page table entry point page frame downside using page process use least memory soso libc existing application depending small part libc easly ported soso managed build run lua doom soso running download cd image iso file release try virtualization software like virtualbox pc emulator like qemu started run doom l lua executables initrd try soso qemu run cdrom sosoiso lua doom demonstrate multitasking two doom process running time building build kernel run make build kernel kernelbin build userspace binary userspace directory make build userspace binary userspacebin directory initrd initial ramdisk image needed put userspace binary create run root linux specific createinitrdsh create initrdfat file mountable initrd image kernel initialization complete initrd content copied mounted initrd kernel run initrdshell elf file createcdimagesh create sosoiso cd image
220,Lobsters,osdev,OS,Re: critique of gnulib,https://lists.gnu.org/archive/html/bug-gnulib/2019-09/msg00003.html,critique gnulib,date prev date next thread prev thread next date index thread index critique gnulib http wikiosdevorgcrossportingsoftware http pubsortixorgsortixreleasenightlypatches http gitlabcomsortixsortixwikisports http maxsiorgcodingcstringcreationhtml critique gnulib stdioext critique gnulib malloc wrapper critique gnulib disabling workarounds,date prev date next thread prev thread next date index thread index critique gnulib jonas sortie termansen subject critique gnulib date sun sep useragent linux hi bruno paul thanks interest note gnulib appreciate desire discus please excuse resource link overreacting jest screaming horror usual gnulib infection really meant upstream consumption refer true struggle go understand appreciate different goal think common ground give context note goal make good cleanâ posixlike operating system enable people well healthy competition good contributed gnulib past although main interest operating system project work port needed year dedicating time game development project nt resource o work day please excuse information date rather enjoy operating system work sortix though accomplished something extraordinary selfhosting posixlike system made scratch key port third party software port compiles natively rely crosscompilation really surprised pleasantly backwards compatibility concern gnulinux system thing simple way without historical mistake project got good baseline quality really accomplishes best quality free software platform code port integrated easy modify cd src make sysmerge box system updated new source everything free compete posixlike system making better implementation standard interface turn encouraging system improve meanwhile encountered technical debt project port sometimes fix issue contribute fix upstream improving health free software ecosystem method porting software crosscompile software o see http wikiosdevorgcrossportingsoftware sometimes fix build system bug fix compile error warning may require implementing new feature o finally compiles run might work crash fix bug finally package thing might send patch upstream like software easy upstream seems receptive find bsd software easier port gnu software even though often even attempt portable easily deal simply fails compile easily figure need provide change software use different feature porting gnu software much harder port complexity layer like autoconf gnulib cause problem nt need big problem gnulib good new operating system unreasonably burdened mistake buggy operating system may fixed long ago good example eg crosscompilation instance old unix might broken fork system call something crosscompiling gnulib might pessimistic default assuming system call broken may handled poor inefficient fallback disabling functionality runtime compile time error usually whitelist system without problem environment variable inject true answer mean harder compete new unknown operating system must set environment variable operating system work including buggy one mean good operating system paying complexity caused bad operating system rather extra work crosscompiling moved buggy operating system crosscompilation inherently bit difficult host system buggy reasonable design would could assume best unknown operating system invoke workarounds known buggy system forcing set environment variable instead mean buggy operating system pay cost instead good one making harder new system making crosscompilation nice help development new operating system established thing like glibcmusl saw gnulib wiki page literally inject environment variable make gnulib assume best operating system rather confronted bug front secretly hidden portability layer told assumed worst unknown operating system teach internals o love able disable gnulib bug replacement get bug nt help gnulib contains implementation missing functionality workarounds bug including fallback implementation utility code shared project gnulib really restructured three separated hard find got included rather know thing front implement feature fix bug fine gnulib requires o specific knowledge whenever posix nt cover feature mountpoints o nt implement interface gnulib know sorry nt list package stale gnulib file list would probably stale assume scan gnu package package known embed gnulib ping whenever forget update certainly bad problem year ago gnulib worse crosscompilation found workaround bug trying check locale running crosscompiled program got better configsub configguess indication delay updating thing take year worth see list patch http pubsortixorgsortixreleasenightlypatches although many third party port year old also see note personal opinion port including gnulib http gitlabcomsortixsortixwikisports nt think list part gnulib troublesome modern system good know receptive report might report case come across although suggest audit bug gnulib work around simply get rid anything nt affect relevant system release past year even millennium object attitude code analysis tool really supported glibc system lot security feature pioneered system making easier everyone use tool benefit everyone exploit mitigation countermeasure whenever system exploit mitigation software go way take benefit good example heartbleed vulnerability good old buffer overflow openssl wrapping malloc allocation layer made useafterfree bug worse support zeroing freed allocation meant system hardened malloc exploit mitigation openbsd would reduced data leakage lot benefit exploit mitigation gnulib wrap malloc hardly bad replace libc definition may contain attribute feature help compiler code analysis tool detect bug consider really bad whenever software wrap malloc understand assuming malloc never return null success deep assumption extremely difficult audit gnu code assumption though almost argue system whose malloc return null success might really bring pain upon modern relevant system even might fun check ostest project test every posix could get hand default unknown system crosscompiling think reasonable test particular bug right thing possible crosscompiling possible best bet listing known buggy operating system assuming worst unrelated system big problem gnulib replacement got used gnulib pessimistic might worse le secure operating system provided feature might even require ported unless upstream support wait year get downstream someone making new o much rather know bug rather sweeping rug case gnulib check bug compiled natively point crosscompilation assumption really matter developer bootstrapping new o recognize different people o developer packagers user slightly different need case packaging done part o development get fully consistent integrated system love user could download upstream source code build although likely software need patch add o configsub least got upstream couple year ago many downstreams user probably want get modified source want build software getting point upstream support box many year away ever adding gnulib manual rather restructure project make possible disable bug workarounds disablegnulibworkarounds make thing easy people since looked stdioext function although really sure need exist least way satisfy gnulib libc warns every sprintf use consider inherently dangerous interface buffer allocation string production decoupled lead bug modern language one develop work simply problem c strdup used instead strlenmallocstrcpymemcpy much le error prone generally asprintf used instead sprintfsnprintf buffer allocation significantly reduces risk least snprintf used destination size must known whenever sprintf used code risk seen plenty bug code reeking bug see http maxsiorgcodingcstringcreationhtml believe c string created object notion truncation worse outcome buffer overflow buffer overflow worst remote code execution vulnerability truncation worst program bug although may exploitable turn inherently exploitable correct resolution even class problem first place decoupling buffer allocation string creation resolution strcpy debate secure strcpy instead use strdup need better expose risk way earlier security vulnerability getgroups interesting case often making o choose feature stub feature nt work feature really depends ecosystem case o nt properly implement user group yet simply nt getgroups although getgid new system often kind inconsistent state generally prefer feature unless really implement sometimes stub required get port working nt truly need feature case getgroupst check whether gidt type use instead int recap primary request categorizing gnulib three part replacement function nt exist workarounds bug utility function making possible disable gnulib bug replacement configure command line option defaulting assume best crosscompiling unknown system thanks listening believe making gnulib better newunknown operating system benefit everyone long run improves health free software ecosystem close hobbyist o community really bunch people like starting new project porting gnu software try new idea jonas critique gnulib stdioext bruno haible critique gnulib malloc wrapper bruno haible critique gnulib disabling workarounds bruno haible
221,Lobsters,osdev,OS,littlefs - A little fail-safe filesystem designed for microcontrollers (by ARM),https://github.com/ARMmbed/littlefs,littlefs little failsafe filesystem designed microcontrollers arm,littlefs powerloss resilience dynamic wear leveling bounded ramrom example usage lfsh note lfsh design designmd specmd designmd specmd testing emulated block device license licensemd http spdxorglicenses related project littlefsfuse fuse littlefsjs mklfs lua rtos mbed o littlefilesystem spiff dhara,littlefs little failsafe filesystem designed microcontrollers littlefs powerloss resilience littlefs designed handle random power failure file operation strong copyonwrite guarantee power lost filesystem fall back last known good state dynamic wear leveling littlefs designed flash mind provides wear leveling dynamic block additionally littlefs detect bad block work around bounded ramrom littlefs designed work small amount memory ram usage strictly bounded mean ram consumption change filesystem grows filesystem contains unbounded recursion dynamic memory limited configurable buffer provided statically example simple example update file named bootcount every time main run program interrupted time without losing track many time booted without corrupting filesystem include lfsh variable used filesystem lfst lf lfsfilet file configuration filesystem provided struct const struct lfsconfig cfg block device operation read userprovidedblockdeviceread prog userprovidedblockdeviceprog erase userprovidedblockdeviceerase sync userprovidedblockdevicesync block device configuration readsize progsize blocksize blockcount cachesize lookaheadsize blockcycles entry point int main void mount filesystem int err lfsmount lf cfg reformat ca nt mount filesystem happen first boot err lfsformat lf cfg lfsmount lf cfg read current count bootcount lfsfileopen lf file bootcount lfsordwr lfsocreat lfsfileread lf file bootcount sizeof bootcount update boot count bootcount lfsfilerewind lf file lfsfilewrite lf file bootcount sizeof bootcount remember storage updated file closed successfully lfsfileclose lf file release resource using lfsunmount lf print boot count printf bootcount dn bootcount usage detailed documentation least much detail currently available found comment lfsh littlefs take configuration structure defines filesystem operates configuration struct provides filesystem block device operation dimension tweakable parameter tradeoff memory usage performance optional static buffer user want avoid dynamic memory state littlefs stored lfst type left user allocate allowing multiple filesystems use simultaneously lfst configuration struct user format block device mount filesystem mounted littlefs provides full set posixlike file directory function deviation allocation filesystem structure must provided user posix operation remove rename atomic even event powerloss additionally file update actually committed filesystem sync close called file note littlefs written c specifically compile compiler conforms standard littlefs call potential return negative error code error either one found enum lfserror lfsh error returned user block device operation configuration struct prog erase function provided user may return lfserrcorrupt error implementation already detect corrupt block however wear leveling depend return code function instead data read back checked integrity storage cache writes make sure provided sync function flush data memory ensures next read fetch data memory otherwise data integrity guaranteed write function perform caching therefore read write call hit memory sync function simply return design high level littlefs block based filesystem us small log store metadata larger copyonwrite cow structure store file data littlefs ingredient form sort twolayered cake small log called metadata pair providing fast update metadata anywhere storage cow structure store file data compactly without wear amplification cost data structure built block fed common block allocator limiting number era allowed block per allocation allocator provides dynamic wear leveling entire filesystem root b v b v c enew e v v v v c write new e e v v v v f g new f detail littlefs work found designmd specmd designmd fully detailed dive littlefs work would suggest reading tradeoff work quite interesting specmd ondisk specification littlefs nittygritty detail may useful tooling development testing littlefs come test suite designed run pc using emulated block device found emubd directory test assume linux environment started make license littlefs provided license see licensemd information contribution project accepted license individual file contain following tag instead full license text spdxlicenseidentifier enables machine processing license information based spdx license identifier available http spdxorglicenses related project littlefsfuse fuse wrapper littlefs project allows mount littlefs directly linux machine useful debugging littlefs sd card handy littlefsjs javascript wrapper littlefs sure would want handy demo see action mklfs command line tool built lua rtos guy making littlefs image host pc support window mac o linux mbed o easiest way get started littlefs jump mbed already block device driver form embedded storage littlefs available mbed o littlefilesystem class spiff another excellent embedded filesystem flash traditional logging filesystem full static wearleveling spiff likely outperform littlefs small memory internal flash microcontrollers dhara interesting nand flash translation layer designed small mcus offer static wearleveling powerresilience fixed address pointer structure stored block ram
222,Lobsters,osdev,OS,exFAT in the Linux kernel? Yes,https://cloudblogs.microsoft.com/opensource/2019/08/28/exfat-linux-kernel/,exfat linux kernel yes,http,microsoft linux say lot mean today pleased announce microsoft supporting addition microsoft exfat technology linux kernel exfat microsoftdeveloped file system used window many type storage device like sd card usb flash drive hundred million storage device formatted using exfat work plug laptop camera car important u linux community make use exfat included linux kernel confidence end making microsoft technical specification exfat publicly available facilitate development conformant interoperable implementation also support eventual inclusion linux kernel exfat support future revision open invention network linux system definition accepted code benefit defensive patent commitment oin member licensee information please see microsoft technical specification exfat http
223,Lobsters,osdev,OS,Warpstock 2019 (OS/2),http://www.warpstock.org/staticpages/index.php?page=ws2019_home,warpstock,warpstock home page location country inn suite orlando airport registration world,warpstock home page board director warpstock corporation pleased announce warpstock location chosen country inn suite orlando airport located forbes place orlando florida date warpstock friday november sunday november full conference registration fee year event daily rate earlybird discount available however book take advantage great deal also note able negotiate great group discount per night single double room availability may guaranteed september must register hotel phone order get conference rate use booking code warpstock see registration page detail register year event instruction view warpstock online worldlast updated sunday june hit
224,Lobsters,osdev,OS,Sushi Roll: A CPU research kernel with minimal noise for cycle-by-cycle micro-architectural introspection,https://gamozolabs.github.io/metrology/2019/08/19/sushi_roll.html,sushi roll cpu research kernel minimal noise cyclebycycle microarchitectural introspection,gamozolabs summary agenda gear turn cpu diagram wikichip front end instruction fetch cache instruction queue macro fusion decode microcode uop cache allocation queue execution engine renaming allocating retirement reordering execution unit memory subsystem cache translation lookaside buffer tlbs line fill buffer store buffer load buffer cpu architecture summary info intel manual wikichip agner fog cpu documentation sushi roll squishble sushi roll primer knight landing vectorized emulation original intent sushi roll interrupt timer software thread process soft reboots sushi roll conclusion performance counter basic usage performance counter reading pmc count faster performance counter version performance counter version performance counter version conclusion cyclebycycle microarchitectural sampling goal idea implementation simple result bit advanced result deep go work speculation data conclusion source orange slice,follow gamozolabs twitter want notification new blog come also random oneoff post cool data warrant entire blog summary blog going go detail cpu research kernel developed sushi roll kernel us multiple creative technique measure undefined behavior intel microarchitectures sushi roll designed minimal noise tiny microarchitectural event measured speculative execution cachecoherency behavior creative use performance counter able accurately plot microarchitectural activity graph xaxis cycle go lot detail everything graph mean later blog simple example data collect example cyclebycycle profiling kaby lake microarchitecture warning logscale yaxis agenda relatively long blog split major section gear turn cpu highlevel explanation modern intel microarchitectures sushi roll design lownoise research kernel cyclebycycle microarchitectural introspection unique usage performance counter observe cyclebycycle microarchitectural behavior result putting piece together making graph cool microarchitectural behavior past year spent decent amount time cpu vulnerability research written proofofconcept exploit nearly every cpu vulnerability many attacker perspective user leaking kernel userkernel leaking hypervisor guest leaking guest etc exploit allowed u provide developer researcher realworld attack verify mitigation cpu research happens overlap two primary research interest vulnerability research highperformance kernel development joined microsoft early winter lined pretty closely public release meltdown spectre cpu attack yet much plate idea floated could look cpu vulnerability got pretty lucky timing ended really enjoying work ended sinking free time workflow research often start writing custom tool measuring analysis given target whether target web browser pdf parser remote attack surface cpu often found best thing make something new try new attack surface write targeted fuzzer specific feature etc something new better difficult something done often completely unexplored surface specialty introspection find unique way measure behavior fuel idea pool code auditing fuzzer development lead interesting situation cpu largely blind lot current cpu research done based writing snippet code reviewing overall sideeffects via cache timing performance counter etc overall sideeffects may also include noise processor activity o task switching process core changing mesistate cache line etc happened already lownoise nosharedmemory research kernel developed vectorized emulation xeon phi lead really good starting point throwing performance counter measuring cpu result bit better expected tl dr enjoy writing tool measure thing wrote tool measure undefined cpu behavior gear turn cpu feel free skip section entirely familiar modern processor architecture modern intel cpu fairly complex beast care every technical detail let look higher level microarchitecture uarch look like modern intel skylake processor skylake uarch diagram diagram wikichip main component front end convert complex instruction group microoperations execution engine executes microoperations memory subsystem make sure processor able get stream instruction data front end front end cover almost everything related figuring microoperations uops need dispatched execution engine order accomplish task execution engine modern intel processor directly execute instruction rather instruction converted microoperations fixed size specific processor microarchitecture instruction fetch cache lot happens prior actual execution instruction first memory containing instruction read instruction cache ideally brought cache minimize delay point instruction still macroop variablelength instruction quite pain work processor still know large instruction predecode processor initial length decode determine instruction boundary point instruction chopped ready instruction queue instruction queue macro fusion instruction come execution might quite simple could potentially fused complex operation stage publicly documented know common fusion combining compare instruction conditional branch allows common instruction pattern like combined single macroop semantics complex fused operation take one slot many part cpu pipeline rather two freeing resource operation decode instruction decode macroops get converted microops microops vary heavily uarch allow intel regularly change fundamental processor without affecting backwards compatibility architecture lot magic happens decoder mostly matter variablelength macroops get converted fixedlength microops multiple way conversion happens instruction might directly convert uops common path instruction however instruction even processor condition may cause something called microcode get executed microcode instruction trigger microcode used microcode effectively tiny collection uops executed certain condition think like cc macro oneliner something expands much operation something requires microcode microcode rom accessed uops specifies placed pipeline often complex operation like switching operating mode readingwriting internal cpu register etc microcode rom also give intel opportunity make change instruction behavior entirely microcode patch uop cache also uop cache allows previously decoded instruction skip entire predecode decode process like standard memory caching provides huge speedup dramatically reduces bottleneck frontend allocation queue allocation queue responsible holding bunch uops need executed fed execution engine execution engine resource available execute execution engine execution engine exactly would expect executes thing stage processor start moving instruction around speed thing thing start get bit complex point click detail renaming allocating retirement resource need allocated certain operation lot register processor standard register register allocated temporary operation often mapped onto corresponding register lot optimization cpu stage eliminate register move aliasing register two register point internal register remove known zeroing instruction like xor self zero pipeline zero register directly optimization frequently improved generation finally instruction completed successfully retired retirement commits internal microarchitectural state back architectural state also memory operation become visible cpu reordering uop reordering important modern cpu performance future instruction depend current instruction could execute waiting result current one example mov rax rax add rbx rcx short example see perform load address rax store back rax memory operation quite expensive ranging cycle cache hit cycle beyond offprocessor memory access processor able realize add rbx rcx instruction need wait result load send add uop execution waiting load complete thing start get weird processor start perform operation different order told processor hold result make sure appear core correct order stronglyordered architecture architecture like arm typically weaklyordered developer insert fence instruction stream tell processor specific order operation need complete ordering issue single core may affect way another core observes memory transaction perform example core executes following mov sharedmemorypointer rax store pointer rax shared memory mov sharedmemoryowned mark longer shared memory core executes following tryagain cmp sharedmemoryowned check someone owns memory jne tryagain someone owns memory wait bit longer mov rax sharedmemorypointer get pointer mov rax rax read pointer safe aligned load store atomic commit way appear inorder processor something like arm owned value could written prior pointer written allowing core use staleinvalid pointer execution unit finally got easy part execution unit silicon responsible actually performing math load store core multiple copy hardware logic common operation allows operation performed parallel separate data example add performed different execution unit thing like load load port port port allows independent load executed per cycle store hand one port port thus core perform one store per cycle memory subsystem memory subsystem intel pretty complex going go basic cache cache critical modern cpu performance ram latency high cycle cpu largely unusable without cache example modern processor ghz cache disabled would never able execute million instruction per second slow intel working first hypervisor actually disabled caching mistake window took multiple hour boot pretty incredible important cache typically level cache level cache extremely fast small cycle latency followed level cache much larger still quite small cycle latency finally lastlevelcache llc typically cache quite large higher latency cycle cache present core however cache shared multiple core translation lookaside buffer tlbs modern cpu application almost never interface physical memory directly rather go address translation convert virtual address physical address allows contiguous virtual memory region map fragmented physical memory performing translation requires memory access paging quite expensive thus cpu cache recently translated address skip translation process memory operation o tell cpu flush tlbs via invalidate page invlpg instruction o correctly invlpg memory mapping change possible use stale translation information line fill buffer load pending yet present cache data life line fill buffer line fill buffer live cache cache memory access miss cache line fill buffer entry allocated load completes lfb copied cache lfb entry discarded store buffer store buffer similar line fill buffer waiting resource available store complete placed store buffer allows store skylake queued even aspect memory subsystem currently busy store ready retired load access memory query store buffer potentially bypass cache read occurs recently stored location read could directly filled store buffer called store forwarding load buffer similar store buffer load buffer used pending load uops sits execution unit cache hold entry skylake cpu architecture summary info pretty high level introduction many aspect modern intel cpu architecture every component diagram could entire blog written intel manual wikichip agner fog cpu documentation many provide thorough documentation intel microarchitecture sushi roll sushi roll one favorite kernel originally designed cpu introspection neat feature made much suitable cpu research kernel talk bit kernel exists talk quickly became goto kernel cpu research kernel mascot squishble sushi roll primer knight landing sushi roll originally designed vectorized emulation work vectorized emulation designed intel xeon phi knight landing pretty strange architecture even though fullyfeatured traditional standard software work quite slow per individual thread first clock rate ghz alone slower standard processor even fewer cpu resource reordering instruction decode allinall cpu slower running singlethreaded application compared standard ghz modern intel cpu also cache memory access become much expensive top simple performance issue complex issue due hyperthreading knight landing designed hyperthreaded thread per core alleviate performance loss limited instruction decode caching allows thread block memory access thread pending computation use execution unit hyperthreading combined processor lead hardware thread showing o core migrating process resource thread catastrophically slow standard sharedmemory model also start fall apart level scaling without specialized tuning example thread hammering memory performing atomic increment lock inc instruction individual increment start cost cycle enough time single core xeon phi singleprecision floating point single increment software treat atomics free lock start cause serious cachecoherency pollution scaled wide obviously careful development mitigate issue decreasing frequency shared memory access perhaps develop kernel fundamentally disallows behavior preventing developer ever starting go wrong path original intent sushi roll sushi roll designed start massively parallel messagepassing based kernel notable feature sushi roll mutable shared memory allowed tiny exception made core ipc mechanism mean ever want share information another processor must pas information via ipc shared immutable memory however allowed cause cache coherency traffic design also meant lock never needed held even atomiclevel lock using lock prefix rather using lock specific core would hardware resource example core may network card specific queue network card instead requesting exclusive access nic obtaining lock would send message core indicating want send packet processing packet done sender thus data already formatted way directly dropped nic ring buffer made owner hardware resource simply mediator reducing latency resource make internals kernel bit complex programming model developer see still standard send recv model forcing messagepassing ensured software written kernel could scaled multiple machine modification single computer fast lowlatency ipc mechanism leverage ability share memory transferring ownership physical memory receiver target message resided another computer network message would serialized way could sent network complexity yet hidden developer allows one program made scaled without extra effort interrupt timer software thread process sushi roll follows similar model kernel interrupt timer software thread process typically required traditional operating system provide user experience multiple process user however kernel always designed one purpose mean kernel boot given task core sometimes one two core special responsibility removing external event cpu behaves lot deterministically sushi roll go extra mile reduces cpu noise core sharing memory causing unexpected cache eviction coherency traffic soft reboots similar kexec linux kernel always support soft rebooting allows old kernel even double faultedcorrupted kernel replaced new kernel process take tear old kernel download new one pxe run new one make feasible specialized kernel without process since change code kernel boot new one second rapid prototyping crucial fast development without feature kernel would unusable sushi roll conclusion sushi roll ended perfect kernel cpu introspection lowest noise kernel ever developed happened also flagship kernel right spectre meltdown came process thread interrupt cpu behaves much deterministically traditional o performance counter get got cyclebycycle microarchitectural data must learn little bit performance monitoring available intel cpu information explored depth intel system developer manual volume note combined volume manual go much detail specific subvolume manual intel cpu performance monitoring subsystem relying largely set modelspecificregisters msrs msrs configured track certain architectural event typically counting counter formally performance monitoring counter often referred performance counter pmcs pmcs vary microarchitecture however time intel committed offering small subset counter multiple microarchitectures called architectural performance counter version architectural performance counter found eax writing version architectural performance monitoring latest version provides decent amount generic information useful generalpurpose optimization however specific microarchitecture possibility performance event track almost limitless basic usage performance counter use performance counter intel step involved first must find performance event want monitor information found permicroarchitecture table found intel manual volume performancemonitoring event chapter example small selection skylakespecific performance event intel performance counter largely rely two bank msrs performance event selection msrs different event programmed using umask event number table performance counter msrs hold count performance event selection msrs start address span contiguous msr region layout event selection msrs varies slightly microarchitecture number counter available varies cpu dynamically checked reading eax performance counter msrs start address also span contiguous msr region counter microarchitecturespecific number bit support found eax reading writing msrs done via rdmsr wrmsr instruction respectively typically modern intel processor support pmcs thus event selection msrs counter msrs processor performance counter important dynamically detect information msr look like pmc version field meaning event select hold event number event table event interested unit mask hold umask value event table event interested usr set counter count userland code execution ring level o set counter count o execution ring level e set enables edge detection event tracked count deasserted asserted transition allows timing event pc pin control allows hardware monitoring event actual pin cpu int generate interrupt apic overflow occurs usually counter increment performance event hardware thread given physical core trigger event otherwise increment single logical thread en enable counter inv invert counter mask change meaning cmask field comparison bit comparison bit cmask nonzero cpu increment performance counter event triggered inv set cmask time single cycle useful filtering event specific situation zero effect counter incremented event find right event want track specific microarchitecture table program one register correct event number umask set usr andor o bit depending type code want track set e bit enable corresponding counter incrementing every time event occurs reading pmc count faster instead performing rdmsr instruction read value instead rdpmc instruction used instruction optimized little bit faster support fast read mode ecx set typically read performance counter performance counter version second version performance counter intel added bunch new feature intel added fixed performance counter starting address programmable configured address unlike normal pmcs programmed count event rather control allows selection cpu ring level increment none disable whether trigger interrupt overflow control provided fixed performance counter msr meaning count number retired instruction count number core cycle processor halted count number timestamp count tsc processor halted enabled disabled second version performance counter also added new msrs allow bulk management performance counter rather checking status enablingdisabling performance counter individually intel added global control msrs address allows enabling disabling performance counter bulk address allows checking overflow status performance counter one rdmsr address allows resetting overflow status performance counter one wrmsr since rdmsr wrmsr serializing instruction quite expensive able reduce amount important global control simple allows masking individual counter one msr status track overflow various counter global condition changed tracker status control writing bit clear corresponding bit finally intel added bit existing msr address bit freezelbronpmi bit freezeperfmononpmi bit allow freezing last branch recording lbr performance monitoring performance monitor interrupt often due overflow designed reduce measurement interrupt overflow condition occurs performance counter version performance counter version pretty simple intel added bit allow tracking performance event thread physical core performance counter went fixed number counter variable amount counter resulted bit added global status overflow overflow control msrs control corresponding counter performance counter version performance counter version pretty complex detail ultimately fairly simple intel renamed msrs example became intel also added new msr address instead clearing bit allows setting bit freezing behavior enabled streamlined single bit track freeze state pmcs rather clearing corresponding bit msr change awesome reduces cost freezing unfreezing performance monitoring unit pmu actually breaking change previous version performance counter finally added mechanism allow sharing performance counter multiple user really relevant anything going talk go detail conclusion performance counter started pretty simple intel added feature time however new feature critical next cyclebycycle microarchitectural sampling gotten prerequisite way let talk main course blog creative use performance counter get cyclebycycle microarchitectural information intel cpu important note technique meant assist finding learning thing cpu data generates particularly easy interpret work many pitfall aware goal performance counter incredibly useful categorizing microarchitectural behavior intel cpu however counter often used block whole program entirely viewed single data point whole run example one might use performance counter track number time cache miss program test give single number output giving indication many time cache missed help much telling occurred binary searching creative use counter overflow get general idea event occurred wanted information specifically wanted view microarchitectural data graph xaxis cycle would allow see cyclelevel granularity certain event happened cpu idea set pretty lofty goal effectively want link two performance counter case want use arbitrary performance counter event interested want link performance counter tracking number cycle elapsed however seem direct way perform linking know multiple performance counter configure one count given event another count cycle however case able capture information cycle way reading counter together also stop counter stopping counter requires injecting wrmsr instruction done arbitrary cycle boundary definitely done speculation small little trick use stop multiple performance counter time using feature counter end overflowing interrupt occurs configured overflow occurs freeze bit set version pmcs specific feature causing performance counter stop mean cause overflow cycle boundary could potentially capture time event interested time difficult either simply preprogram performance counter value n away overflow specific case dealing performance counter theory program count number cycle set counter n n get interrupt thus atomic disabling performance counter n cycle set deterministic enough execution environment run code adjusting n sample code different cycle count relies lot assumption assuming freeze bit end disabling performance counter time atomically assuming cause interrupt arbitrary cycle boundary even multicycle instruction also assuming execute code clean enough environment multiple run measuring different cycle offset let try implementation simple pseudocode implementation sampling method look number time want sample data point allows u look minimum maximum average value also give u way verify environment deterministic result sane minimum maximum many sample safe say clear picture happening const numsamples maximum number cycle sample xaxis limit sampling space const maxcycles program apic map performance counter overflow interrupt stub assembly routine simply iret configurepmcinterruptsinapic configure performance counter freeze interrupt perffreezeonoverflow iterate performance counter want gather data perfcounter performancecountersofinterest disable reset performance counter individually clearing count clearing event select msrs disableallperfcounters disable performance counter globally setting disableperfglobally enable performance counter let say track perfcounter interested note nt start counter yet still counter globally disabled enableperfcounter perfcounter go number sample want collect performance counter cycle offset numsamples go cycle want observe cycleoffset maxcycles clear performance counter value field clearperfcounters program fixed counter unhalted cycle counter trigger interrupt overflow cause interrupt cause freeze pmcs program fixed counter unhalted cycle counter cycle prior overflowing cycleoffset pretest environment setup important make sure sample code test multiple time get result flushing cache line maybe wbinvd etc setupenvironment enable fixed cycle counter performance counter tracking stat interested time using serializing nt worry reordering across boundary enableperfglobally asm r asm test volatile clear stop counter disableperfglobally fixed pmc overflowed nt capture relevant data happen tried sample cycle happens assembly test executed false continue point whatever want performance counter turned interrupt relevant data get count fixed pmc important grab interrupt deterministic thus possible overshoot target let add distancefromoverflow initially programmed fixed counter current value fixed counter get total number cycle elapsed example let totalcycles cycleoffset read actual count performance counter using case using pmc track event interest let value somehow log performance counter perfcounter value value totalcycles execution logresult perfcounter value totalcycles simple result work let try simple example code nops adjusting stack time add rsp sub rsp add rsp sub rsp read graph well xaxis simple time cycle execution yaxis number event varies based key case graphing number instruction retired successfully executed look right ran instruction see retire well case little bit extra noise introduced harnessing around code test let zoom code look actually executes test right test end enabling performance counter writing enables programmable counter time enabling fixed pmc cycle count mov mov mov wrmsr code test add rsp byte sub rsp byte add rsp byte sub rsp byte finally disable counter setting mov xor eax eax xor edx edx wrmsr take another look graph see instruction retired first instruction see retire actually wrmsr used enable counter make sense point prior retirement wrmsr instruction counter must enabled internally somewhere cpu actually get see instruction retire see instruction retire give u total hmm well add sub mix executed brings u remaining unknown instruction remaining instruction explained code disables performance counter test code executed mov xor instruction retire prior wrmsr disables counter make sense never see final wrmsr retire counter turned cpu prior wrmsr instruction retiring wala make sense great view cpu term retirement code question everything saw lined actually executed always good see bit advanced result let add performance counter track case let track number instruction retired well number microops dispatched port store port give u number store occurred test code test writes stack right test end enabling performance counter writing enables programmable counter time enabling fixed pmc cycle count mov mov mov wrmsr sub rsp byte mov qword rsp add rsp byte sub rsp byte mov qword rsp add rsp byte finally disable counter setting mov xor eax eax xor edx edx wrmsr one fun simply make room stack sub rsp write stack mov rsp restore stack add rsp one time added another plot graph port store uop port cpu also track number instruction retired first example see instruction retired match would expect see retirement first wrmsr enabling performance counter code test disabling performance counter time able see store occur indeed store occur see store happen interestingly see store backtoback even though bit code probably observing reordering later graph observe instruction get retired single cycle cool deep go using exact store example enable even performance counter give u even detailed view different part microarchitectural state case tracking uop port activity machine clear cpu reset speculation offcore request message get sent offcore typically access physical memory instruction retired branch retired theory measure possible performance counter available microarchitecture time domain give u ability see almost anything happening cpu example looked none data point visible error bar graph error bar represent minimum value mean value maximum value observed given data point since running code sampling different execution time possible random noise interfere result let look bit noisy example right test end enabling performance counter writing enables programmable counter time enabling fixed pmc cycle count mov mov mov wrmsr mov qword mov qword mov qword mov qword finally disable counter setting mov xor eax eax xor edx edx wrmsr going write null time might sound bad example mapped null normal writeback memory nothing crazy treat valid address result error bar see store always get dispatched time make sense always thing see instruction variance retire example see sometimes point instruction retired time retired average little instruction retired point tell u cpu always deterministic environment result get bit complex interpret still relevant data nevertheless changing code test cleaning environment determinsitic etc often improve quality visibility data work speculation damn right whole point let cause fault perform load behind see see load get issued even though entire section code discarded start tsx section think try block xbegin read causing fault mov rax load shadowing faulting load never occur instruction cause exeception thus execution jump label rept repeated load time mov rbx endr end tsx section think closing try block xend execution go tsx section exception thus execution flow port port load port see taking turn handling load load per cycle port load per cycle total see many different load get dispatched even though instruction actually retire viewing microarchitecture performing speculation neat data could go graphing different cpu behavior much cool stuff explore however blog already gotten longer wanted stop maybe make future small blog certain interesting behavior conclusion technique measuring performance counter timedomain seems work quite well careful noise careful interpretation data technique provides highest level visibility intel microarchitecture ever seen tool incredibly useful validating hypothesis behavior various intel microarchitectures running multiple experiment different behavior macrolevel model derived inner working cpu could lead learning new optimization technique finding new cpu vulnerability general fun learning thing work source update kernel many sensitive feature want make public however seems lot interest tech try live stream soon adding functionality alreadyopensource kernel orange slice
225,Lobsters,osdev,OS,distri: a Linux distribution to research fast package management,https://michael.stapelberg.ch/posts/2019-08-17-introducing-distri/,distri linux distribution research fast package management,scientific linux cover upcoming blog post motivation resulting winding debian work package manager slow key idea package image archive image squashfs image gokrazy raspberry pi go platform appimage snappy key idea separate hierarchy key idea exchange directory exchange directory see note search path sometimes need fixed note fhs compatibility filesystem hierarchy standard fhs fast package manager linux distribution package manager slow sat solving entirely without hook trigger note fast package builder package store package store distri first release branch disk image package repository documentation release http http project outlook recommend anyone use distri anything research come subscribe distri feed http michaelstapelbergchpoststagsdistrifeedxml feedback question distri mailing list,table content last year worked research linux distribution spare time distribution researcher like scientific linux personal playground project research linux distribution development ie try fresh idea article focus package format advantage distri cover upcoming blog post motivation debian developer year using distribution often left frustrated ultimately resulting winding debian work frequently noticing large gap actual speed operation eg update possible speed based back envelope calculation wrote blog post package manager slow observation mean either potential optimize package manager eg apt system complex remember seeing lowhanging work distri wanted explore whether complexity currently linux distribution debian fedora inherent problem space completed enough experiment conclude complexity inherent build linux distribution generalenough purpose much le complex existing one lowhanging fruit user perspective saying fixing easy technical sense know little apt code base make statement key idea package image archive one key idea switch using archive using image package content common package manager dpkg use tar archive various compression algorithm distri us squashfs image comparatively simple file system image format happen familiar work gokrazy raspberry pi go platform idea novel appimage snappy also use image individual selfcontained application distri however us image distribution package dependency particular duplication shared library distri nice side effect using readonly image file application immutable hence broken accidental malicious modification key idea separate hierarchy package content made available fullyqualified path eg file provided package available mountpoint ro stand readonly short yet descriptive perhaps surprisingly building software custom prefix value eg widely supported thanks linux distribution build software prefix set usr whereas freebsd autotools default build prefix set usrlocal enthusiast user corporate research environment install software home directory using custom prefix common scenario upstream awareness prefixcorrectness generally high rarely required patch quickly accepted key idea exchange directory software package often exchange data placing locating file wellknown directory example gcc locates libusb header via usrinclude man locates nginx manpage via usrshareman zsh locates executable program via path component bin distri location called exchange directory provided via fuse ro exchange directory come two different flavor global exchange directory eg roshare provides union share sub directory package package store global exchange directory largely used compatibility see perpackage useful tight coupling eg irssi provide abi guarantee plugins irssirobustirc declare want eg perpackage exchange directory contain file libirssimodules note exchange directory also available package build environment opposed runtime search path sometimes need fixed program use exchange directory sometimes use search path access multiple exchange directory fact example taken gcc includepath man manpath zsh path prominent one example easy find zsh load completion function fpath search path value derived datadirroshare require attention others might derive eg need pointed exchange directory via specific command line flag note create illusion writable search path package buildtime destdirroshare destdirrolib diverted destdir prefixshare destdir prefixlib respectively fhs compatibility global exchange directory used make distri provide enough filesystem hierarchy standard fhs thirdparty software largely work includes c development environment successfully ran program binary package google chrome spotify microsoft visual studio code fast package manager previously wrote linux distribution package manager slow distri package manager extremely fast main bottleneck typically network link even high speed link tested gbps link speed come largely architecture allows package manager le work specifically package image added atomically package store safely skip fsync corruption cleaned automatically durability important interactive installation interrupted user repeat fresh mind package coinstallable thanks separate hierarchy conflict package store level dependency resolution optimization problem requiring sat solving required exchange directory resolve conflict selecting package highest monotonically increasing distri revision number distri prof build useful linux distribution entirely without hook trigger serialize hook execution allows u download package package store maximum concurrency using image instead archive need unpack anything mean installing package really writing package image metadata package store sequential writes typically fastest kind storage usage pattern fast installation also make usecases bearable creating disk image testing qemu booting real hardware usb drive cloud provider google cloud note saturate link gbps transfer package without compression fast package builder contrary distribution package builder usually implemented distri package builder actually install package build environment instead distri make available filtered view package store declared dependency available ro build environment mean even large dependency tree setting build environment happens fraction second low latency really make difference comfortable iterate distribution package package store distri package image installed remote package store local system package store roimg back ro mount package store implemented directory package image associated metadata file easily make available package store using distri export provide mirror local network periodically distri update package store want mirror distri export local copy special tooling eg debmirror debian required distri install atomic update us install producing derivative easy add package copy package store package store intentionally kept simple manage distribute file could exchanged via peertopeer file system synchronized offline medium distri first release distri work well enough demonstrate idea explained branched state branch jackherer distri first release code name way keep experimenting distri repository without breaking installation branch content autobuilder creates disk image package repository installation pick new package distri update documentation release project website found http website readme improve later repository found http project outlook right distri mainly vehicle sparetime linux distribution research recommend anyone use distri anything research mediumterm plan changing least please contact basing anything serious distri talk limitation expectation expect distri project live long blog post publish see happens afterwards note hobby continue explore pace part find interesting hope established distribution might get useful idea two distri come subscribe distri feed want make post long much please subscribe following url feed reader get post distri http michaelstapelbergchpoststagsdistrifeedxml next queue article hermetic package good package maintainer experience including declarative packaging feedback question love discus idea case interested please send feedback distri mailing list everyone participate
226,Lobsters,osdev,OS,Understanding modern UEFI-based platform boot,https://depletionmode.com/uefi-boot.html,understanding modern uefibased platform boot,sec preuefi yanai moyal shai hasarfaty blackhat usa presentation sec pei dxe necessary trusted platform execution designed defend attacker physical access machine bd tsl rt srtmdrtm rambling thought google titan microsoft cerberus,many uefibased boot process like voodoo interesting something u use extensively technicalunderstanding sense generally avoided work space article hope present technical overview modern pc boot using uefi unified extensible firmware interface wo nt mentioning every detail honestly knowledge space nt fully comprehensive hence impetus articleasaprimer also taken task loose terminology general idea end long read hopefully reader able make sense vague inkling earth going precious second o come work based combination info gleaned daily work security researcherengineer microsoft public platform vendor datasheets uefi documentation fantastic presentation wellknown security researcher engineer operating space reading source code blackbox research firmware machinesbeyond bios developing unified extensible firmware interface vincent zimmer et al far comprehensive resource implore stop reading go read full edification personally paged find bit interesting original bit find stuff get wrong expert please feel free correct keep post alive erratum codedata going discussing resides flash memory usually spi various component logically separated bunch section flash uefi part structure called firmware volume fvs going exact layout unnecessary trying achieve overview boot left sec sec genesis beginning firmware created power management controller said let light light form darkness indeed upon face deep spirit bios moved upon face flash memory sec saw light good proceeded boot platform initialization start poweron first phase process called sec security phase dive though let back moment preuefi number component modern computer platform design exist would pertinent u familiarize contrary belief numerous unit capable execution modern pc platform usually presenting disparate architecture day past three main physically separate chip class motherboard northbridge generally responsible perfcritical work faster comms memory controller video southbridge lessperfcritical work slower io audio various bus course cpu modern platform northbridge integrated cpu die ip block termed uncore intel core main cpu ip block leaving southbridge renamed pch platform controller hub intel something going refer chipset cover amd well honestly exactly feature cpu die chipset die somewhat fluid prone change generationally socbased chip present die chiplet approach separate dy share chip substrate etc regardless pertinent piece information one unit capable execution cpu set feature another unit chipset another set supportive feature cpu naturally want get running meaningful work chipset play role getting u smaller larger extent depending platform intel amd take slightly different approach let try get going time attempt lie little le sec genesis genesis honour intel platform least go component chipset pch called csme converged security manageability engine full review csme outside scope work interested please refer yanai moyal shai hasarfaty blackhat usa presentation relevant u role platform boot process poweron pmc power management controller delivers power csme incidentally pmc rom software everywhere nowadays going go rabbit hole cpu stuck reset execution taking place csme powered tiny ip block however start executing code rom immutably fused chipset die rom code act rootoftrust entire platform main purpose set execution environment derive platform key load csme firmware spi flash verify fused intel public key execute skipping step initial csme flow eventually get state involve main cpu boot flow csme bringup phase firstly csme implement itpm integrated tpm used platform nt discrete tpm chip intel call ptt platform trust technology itpm capability invoked boot process measured boot enabled job nt unique csme existence dtpm module would render csme job moot importantly csme role boot process level csme involvement initial stage host cpu execution depends security feature enabled platform straightforward case verified measured boot mode intel boot guard csme simply asks pmc bring host cpu reset boot continues ibb initial boot block execution expounded boot guard verified boot mode enabled however number step take place ensure tcb trusted computing base extended uefi firmware fancy way saying one component agree execute next one chain cryptographic verification component taken place case verified boot enforcement mode speaking measured boot verification take place tpm pcrs extended accordingly platform allowed continue boot let define term clarkwilson integrity policy throwing academic term anything make u look smart cdi constrained data item trusted data udi unconstrained data item untrusted data tp transformation procedure procedure applied udi turn cdi certifying ivp integrity verification procedure word take block untrusted data udi codedataconfigwhatever run procedure tp trusted code cdi turn untrusted data trusted data obvious method transformation cryptographic verification word trusted code verifies untrusted code therefore untrusted code becomes trusted mind basic flow follows csme start execution reset vector rom code rom assumed cdi start hence rootoftrust initial part csme firmware loaded flash sram udi verified rom becoming cdi executed cpu ucode microcode loaded ucode considered udi verified cpu rom act rootoftrust cpu boot guard enabled ucode load component called acm authenticated code module udi flash using cpu signing key fused cpu verify acm cdi request hash oem ibb signing key csme csme required access fpf field programmable fuse burned oem manufacturing time acm load ibb udi verify using oem key cdi cpu know boot guard enabled querying csme fpfs boot guard policy astute reader notice type dual rootoftrust going rooted csme cpu note purposefully left detail acm discovered flash firmware interface table etc add unnecessary complexity consider fleshing future cpu continues boot executing ibb either unverified boot guard scenario verified back genesis hold moment making forward progress tough nt let speak measured boot short moment simplest configuration feature basically mean every step component measured tpm attested future measured boot enabled interesting possible point note compromise csme bringup phase lead compromise entire tcb attacker control ibb signing key provided cpu acm machine dtpm nt rely csmeimplemented itpm measurement could still potentially detect compromise via attestation itpm used attacker controlling csme potentially control itpm well boot guard measured verified boot ibb obb intel term respect amd hvb hardware validated boot cover boot flow similar fashion intel boot guard main difference seems rootoftrust rooted platform security processor psp fill role intel csme acm processor armcortexbased sits cpu die pch intel case psp firmware still delivered flash bl bootloader verified psp ondie rom analogous csme bringup stage psp verify initial uefi code releasing host cpu reset amd also nt speak ibbobb rather talk segment responsible verifying next segment sec ok ok genesis real wait ibb initial boot block thing nt sec phase start sans actual start term nt confusing enough purposely nt open top top view boot verification flow instead opting explain organically move forward however discussed initial stage verified boot understand trust established ibb block first segment quickly recap general verified boot flow short already established acm intel code verifies ibb oem code ibb cdi responsible verifying obb oem boot block udi transform cdi obb verifies next code run usually boot manager optional part efi image part uefi secure boot term verification help csme ucode acm ibb obb whateversnext generally ibb encapsulates sec preefi initialization pei phase pei fv firmware volume sec phase named relatively little actual security verified boot cpu start executing sec phase legacy reset vector directly spi flash hardware necessary ip implement transparent memorymapped spi interface flash reset vector platform execute constrained state example concept crucial component ram kind issue want execute meaningful higherlevel code also real mode one first job sec switch processor protected mode legacy mode nt funnest also configure memory available cpu cache car cacheasram noeviction mode via mtrrs mode ensure readswrites cpu cache land attempt evict primary memory external chip constraint created available memory limited available cpu cache usually quite large nowadays recent ryzen chip acquired total sufficient holding entire firmware image memory extra execution environment usage data region heap stack actually done another important function sec perform initial handling various sleep state machine could resumed direct alternate boot path accordingly absolutely scope discussion super complex anything acpi enough know happens measurable impact platform security attack surface want justify sec phase naming ucode update applied executing sec verified boot flow ie acm verification ibb seems cpu cache must already set car perhaps acm ideal world entire ibb already cachememory resident read directly flash passing verification potentially physical attack toctou security issue hand hope true amd side sec complete platform initialization continues preefi initialization phase pei phase requires handoff next phase includes set structured information necessary subsequent phase job case sec information includes necessary vector detailing car located bfv boot firmware volume found mapped processoraccessible memory region bit bob pei pei comprised pei foundation binary code dependency set preefi initialization module peims pei foundation peicore responsible making sure peims communicate via ppi peimtopeim interface small runtime environment providing number service exposed via pei service table peims also dispatch invokesexecutes peims peims responsible aspect basehardware initialization primary memory configuration main ram becomes available cpu io initialization system bus platform setup init various feature core functioning modern computing platform allimportant bios status code code running decidedly nontrivial example seen usb stack observed peims one would reasonably think msi platform count module like briefly call peim responsible main memory discovery initialization return pei foundation provides information newlyavailable primary system memory pei foundation must switch temporary car memory main system memory must done care security perspective peims also choose populate sequential data structure called hob handoff block include information may necessary consuming code boot stack eg phase postpei hob must resident main system memory progress next phase like return topic trust theoretically pei foundation expected dispatch verification check executing peim framework notion establish trust delegate set ppis potentially serviced peims chickenandegg issue component pei phase responsible establishing trust establishes trust component meaningless unless pei subsection trusted reminder though know ibb encapsulates secpei hopefully unless oem messed verified trusted cdi running verified boot therefore pei nt necessarily need perform integrity check various peims see haze becomes source confusion oems implementing security around good world ibb memory resident verified acm untouched since verification shortcut taken pei verifying peims seems superfluous however peims loaded flash needed need verified execution verification need rooted tcb already established acm ie initial code verified ibb pei code xip executed place thing even worse physical toctou attack become sad reality without tcb established via verified boot mechanism pei selftrusted becomes rootoftrust referred crtm core root trust measurement importance become apparent eventually speak secure boot pei measured tpm attested later without previouslyestablished tcb old joe replace thing remotely oem messed secure firmware update procedure left spi flash writable oy flow almost ready exit pei phase platform set fullfledged code next dxe driver execution environment phase entering dxe pei must perform two important task first verify dxe intel parlance pei least part responsible trust part ibb verified boot guard acm intel boot guard amd hvb code already exited picture ibb intel segment amd start executing oem expected take security flow eh pei must therefore component verify measure obbnext phase dxe part platform support boot guard peim may named bootguardpei firmware responsible work peim register callback procedure called pei phase ready exit called expected bring obb resident verify discussion applies dxe pei regarding verification various dxe module discus shortly entire obb brought resident verified peim oem may decide shortcut verification dxe module alternatively part dxe made cdi used verify module prior execution bringing security consideration already mentioned either way yet another part flow oem mess thing second final task pei setup execute dxe environment anyhoo let get right dxe dxe similar pei dxe consists dxe foundation dxe core dxe driver dispatcher dxecore number dxe driver go entire rabbit hole around available exposed dxe phase yet another huge collection code time count module firmware writing book leave whoever interested delve homework dxe foundation access various peimpopulated hob hob include information necessary entire dxe phase function independently come therefore nothing hob list persist dxe core running dxe happily blast whatever left pei memory dxe dispatcher discover execute dxe driver available relevant firmware volume driver responsible higherlevel platform initialization service example include setting system management mode smm higherlevel firmware driver network boot disk thermal management etc similar pei framework peims dxe framework expose number service dxe driver via dxe service table driver able register lookupconsume various architectural protocol covering higherlevel construct storage security rtc etc dxe core also responsible populating efi system table includes pointer efi boot service table efi runtime service table efi configuration table efi configuration table contains set guidpointer pair correspond various vendor table identified guids really necessary delve purpose discussion typedef struct guid value uniquely identifies system configuration table efiguid vendorguid pointer table associated vendorguid void vendortable eficonfigurationtable efi runtime service table contains number service invokable duration system runtime typedef struct table header efi runtime service table efitableheader hdr time service efigettime gettime efisettime settime efigetwakeuptime getwakeuptime efisetwakeuptime setwakeuptime virtual memory service efisetvirtualaddressmap setvirtualaddressmap eficonvertpointer convertpointer variable service efigetvariable getvariable efigetnextvariablename getnextvariablename efisetvariable setvariable miscellaneous service efigetnexthighmonocount getnexthighmonotoniccount efiresetsystem resetsystem uefi capsule service efiupdatecapsule updatecapsule efiquerycapsulecapabilities querycapsulecapabilities miscellaneous uefi service efiqueryvariableinfo queryvariableinfo efiruntimeservices runtime service utilized o perm uefilevel task functionality provided vector available table mostly selfexplanatory eg variable service used readwrite efi variable usually stored nv nonvolatile memory ie flash window boot configuration data bcd make use interface storing variable boottime setting example efi boot service table contains number service invokable efi application time exitbootservices entry table called typedef struct table header efi boot service table efitableheader hdr task priority service efiraisetpl raisetpl efirestoretpl restoretpl memory service efiallocatepages allocatepages efifreepages freepages efigetmemorymap getmemorymap efiallocatepool allocatepool efifreepool freepool event timer service eficreateevent createevent efisettimer settimer efiwaitforevent waitforevent efisignalevent signalevent eficloseevent closeevent eficheckevent checkevent protocol handler service efiinstallprotocolinterface installprotocolinterface efireinstallprotocolinterface reinstallprotocolinterface efiuninstallprotocolinterface uninstallprotocolinterface efihandleprotocol handleprotocol void reserved efiregisterprotocolnotify registerprotocolnotify efilocatehandle locatehandle efilocatedevicepath locatedevicepath efiinstallconfigurationtable installconfigurationtable image service efiimageload loadimage efiimagestart startimage efiexit exit efiimageunload unloadimage efiexitbootservices exitbootservices miscellaneous service efigetnextmonotoniccount getnextmonotoniccount efistall stall efisetwatchdogtimer setwatchdogtimer driversupport service eficonnectcontroller connectcontroller efidisconnectcontroller disconnectcontroller open close protocol service efiopenprotocol openprotocol eficloseprotocol closeprotocol efiopenprotocolinformation openprotocolinformation library service efiprotocolsperhandle protocolsperhandle efilocatehandlebuffer locatehandlebuffer efilocateprotocol locateprotocol efiinstallmultipleprotocolinterfaces installmultipleprotocolinterfaces efiuninstallmultipleprotocolinterfaces uninstallmultipleprotocolinterfaces crc service miscellaneous service eficopymem copymem efisetmem setmem eficreateeventex createeventex efibootservices service crucial getting o boot loader running trying stick format explaining boot process via security flow need speak secure boot secure boot often pandered around beall endall boottime security take anything away reading please let understanding secure boot necessary trusted platform execution play crucial role seen technology considered robust security sense without addendum technology measuredverified boot simply put secure boot prior execution efi application secure boot enabled relevant secure bootimplementing dxe driver securebootdxe machine must verify executable image launching application requires number cryptographic key pk platform key platform owner ala usually oem issue key written secure efi variable variable updatable update attempted entity prove ownership variable wo nt discus work know security around meh key must used verify kek kek key exchange key one key signed pk used update current signature database dbx forbidden signature database database entry key signature hash identify efi executables blacklisted ie forbidden executing database signed kek db signature database database entry key signature hash identify efi executables whitelisted database signed kek secure firmware update key outside scope discussion example prior executing oemprovided efi application window boot manager dxe code responsible secure boot must first check efi image either appears verbatim db signed key present db commercial machine often come oemprovisioned pk microsoft kek ca already present db much debate fair important note secure boot designed defend attacker physical access machine key design replaceable bd dxe phase nt perform formal handoff next phase uefi boot process bd boot device selection phase rather dxe still resident providing efi boot efi runtime service bd via table described happens slightly different depending booting running simple efi application end goal basically done already let carry discussion term microsoft window mentioned necessary dxe driver executed system ready boot operating system dxe code attempt launch boot application boot menu entry specified efi variable efi boot binary usually resident relevant efi system partition order discover use system partition dxe must already fat driver loaded make sense file system fatbased b parse guid partition table gpt discover system partition disk first windowsrelated code run ignoring microsoftprovided peims dxe driver window boot manager bootmgrfwefi window boot manager initial boot loader required get window running us efi boottime serviceprovided block io protocol transact disk nt need mess around working communicate hardware mainly responsible selecting configured window boot loader invoking stuff like setting security policy checking resuming hibernation recovery boot needed etc tsl directly bd done got tsl transient system load phase fancy way describing phase boot loader actually brings operating system tear unnecessary part dxe window world window boot manager launch window boot loader winloadefi performing necessary verification secure boot enabled window boot loader heftier beast performs interesting work simplest notcaringaboutanythingsecurityrelated flow winloadefi responsible initializing execution environment kernel execute includes enabling paging setting kernel page table dispatch table stack etc also load system registry hive readonly believe kernel module ntoskrnlexe onceuponatime haldll well passing control nt kernel winload call exitbootservices tear boottime service still exposed dxe leaving runtime service available setvirtualaddressmap virtualize firmware service ie informing dxe boottime service handler relevant virtual address mapping carrying theme attempting understand trusted computing enabled window focus machine secure boot enabled winload course agree load image first ensuring pas verification policy measuring respective image tpm necessary encourage window user enable core isolation available system setting enable hvci hypervisorenforced kernelmode code integrity system turn meaning microsoft hyperv hypervisor platform run vbs virtualizationbased security feature enabled vsm virtual secure mode available scenario winload responsible bringing hypervisor securekernel etc diving requires separate post others done justice anyway rt kernel perform initialization set thing right loading driver etc taking u stage people identify end boot efi service still available o efi runtime service o invoke necessary eg readingwriting uefi variable shutdown etc part uefi lifecycle termed rt runtime srtmdrtm rambling thought rudimentary understanding general boot flow want back bit though discus verified boot flow pitfall lie hopefully one see relatively complex ensuring player get everything correct often challenge everything discussed part term srtm static rootoftrust measurement flow basically mean o perspective part flow boot form part tcb trusted computing base let dissect moment initial trust rooted cpuchipset vendor intel case cpu rom csme rom joint rootsoftrust ok intel amd et al pretty well versed security stuff perhaps happy trust done job history say getting better time hey got trust someone acm verifies ibb moved responsibility oem vendor code charitable say often code godawful security perspective significant amount code count peims dxe driver sourced place often folk simply nt security expertise implement thing properly oemowned ibb measure oemowned obb measure o bootloader might trust o vendor also good work fool proof black hole potential security pitfall oem vendor collapse uefi compromised nt matter good o bootloader verification flow basically thing good weakest link traditionally uefi let identify srtm pitfall starting obvious cpu rom csmepsp rom compromised everything fall apart course true drtm described wish could say nt issue specific vendor would disingenuous let u assume cpu folk gotten act together land ibb segment verified acmpsp first pitfall oem vendor need actually present correct part firmware verification acm sometimes module left happily executed pei also shortcircuited peim verification worse acm requires oem key verify ibb hence need csme first place oems nt burned key properly using test key nt set eom end manufacturing fuse allowing carte blanche attack even worse lack oem action actually lead security feature hijacked protect malicious code oems need wary making sure pei switch main system memory toctou attack nt opened rereading module spi assuming trusted furthermore verified boot work need pei module responsible verifying dxe oem stuffed ibb nt verified properly module tampered flow fall apart oh oem code could whole verification bit correctly simply execute codethatfailed verification ask reset platform tell failed verification oh yes happened complex flow nt spoken eg resuming sleep state needing protect integrity saved context correctly also enabling disparate security feature seems beyond oems even basic one like nt allow arbitrary runtime writes flash ignored getting correct requires deep knowledge space example vendor traditionally considered evil maid attack scope toctou attack demonstrated verification ibb obb carrying though let assume pei implemented correctly dxe module responsible thing line done correctly secure boot complexity key management allowing modification authenticated uefi variable pk owner etc etc going go every aspect go wrong honestly seen quite lot demonstrable issue historically clear speaking strm term ususally go windowsbased machine today srtm scheme lot better eg google titan microsoft cerberus separate component interposed hostchipset processor firmware residing spi folk got together made attempt come way take uefi bit tcb course code still need run nt really want trust purpose verifying loading operating system drtm dynamic rootoftrust measurement invented essence way supply potentially multiple piece postuefi code verification folk trust folk trust le ie cpuchipset vendor intelamd et al instead relying secure boot flow relies oems implemented properly nt care uefi assumed compromised model prior executing o execute another acm via special senterskinit instruction rooted cpu rootoftrust like boot guard verifying ibb time ask acm measure piece osvendor vendor code called mle measured launch environment measurement extended pcrs tpm course attest later mle verification acm trusted measure various o component etc bypassing trust efi concern heard folk get really excited drtm rightly step forward term security however like speak potential issue drtm solves approach main concern stop understanding compromised uefi still possibly damaging practical security even drtmenabled world smm still area concern although incoming architectural feature help address even disregarding smm general purpose operating system world client server run designed era security field matured security tackedon year increasing complexity practical sense even usermodes still execute code privileged sense able affect exact damage targeted system attacker happy live forget kernelmodes pretty permissive well remember attacker nt care security boundary domain trust want need example recent history actor known sednitstrontium achieved high degree persistence machine installing dxe implant platform nt correctly secured programmatic write access spi flash enabling secure boot ineffectual care postdxe compromised dxe mean compromised secure boot enabling measuredverified boot could possibly helped particular case trust current uefi code job confidence probably nt high platform folk nt even disable write access spi seen boot guard rendered ineffectual via dxe manipulation something sednit would able let u assume sednit would able get dxe module running even verified boot anyway firmware implant attacked system mounting primary ntfs partition writing malicious code drive messing around system registry hive ensure service loaded early boot done necessary compromise system persist fnr format restore bitlocker also help defend particular type attack srtm flow assuming enabled first place crtm job configured auto unlock mode let take scenario drtm world uefi secure boot compromise becomes somewhat irrelevant drtm mle o verification flow great attacker longer unmeasurably modify o boot manager boot loader kernel code region least securekernel hv impunity good thing thing uefi untrusted drtm model threat model assume attacker would able run dxe code like today ntfswrite get usermode service ntfs volume default window setup sans special application control device guard policy window happily execute attacker service codesigning completely ineffectual totally broken model window usermode application honestly though machine enabled drtm flow would hopefully enable bitlocker effectual expect drtm measurement required unsealing bitlocker decryption key exactly sure implementation detail around wonder extent compromised uefi could mess around flow perhaps extending pcrs value expected drtm measurement unsealing key writing stuff drive reboot complexly launching hypervisor execute rest window boot flow perhaps trapping sentersinit et al need give thought possible given complexity surrounding realm possibility compromised uefi still damaging honestly term something sednitlike writing executable disk restrictive eg stateseparated platform discerning user kernelmode code let run privilege might benefit significantly drtm although seems likely one affect huge damage endpoint via corrupting setting file alone code exec required something like view datacorruption via dkom except time dcm direct configuration manipulation firmware drtm excellent cautioning assuming automatic fixall today platform security issue feel industry research around may needed empirically verify bound merit hope enjoyed possiblyalittlemorethanaprimer view uefi boot trust model surround hugely important related thing nt spoken include smm orom secure firmware update eg intel bios guard topic another time please let know found useful take noninsignificant amount time write always happy receive constructive feedback like end link offensive research work done fantastic folk come across year showing done compromise flow briefly mentioned know resource please send way happily extend list
227,Lobsters,osdev,OS,A dream of an ultimate OS (1996),http://okmij.org/ftp/papers/DreamOSPaper.html,dream ultimate o,dream ultimate o oleg kiselyov introduction everything editing luster dull plain text everything database file system database use improvement mockup hello world session,dream ultimate o oleg kiselyov dream made shred reality shuffled rearranged sometimes bizarre combination brewing ten year feeding dissatisfaction many major modern operating system indeed glaringly obvious thing user terminal requesting reading modifying textual information arranged mainly table scrollable list nevertheless user often apply different completely disparate command achieve exactly modification example delete item line list removing line text document removing file killing process removing list active process canceling print job furthermore despite fact o swarmed table hierarchical database file yellow page map hash dictionary object file archive library relatively flat database ip route current process user code revision common database function like inserting record table hashing key retrieving recordfield using simpleconcatenated key linking table conspicuously missing among core kernel service paper attempt imagine o would look like would work looking word foo something deletingclosingstopping something paragraph text network connection subscribed newsgroup process would require roughly sequence mouse click keystroke would understood interpreted spirit operating system introduction operating system commonly viewed two major standpoint managing computing resource hiding hardware idiosyncrasy putting friendly face user latter appears primary o responsibility cpu need o run care code system user currently grapple nevertheless notable exception macos magiccap newton o operating system thrusting upon user flood disparate interface command action aimed essentially thing filling editing list table moreover every major o component file system network service user management terminal management name implement manages private incarnation simple database seems obvious database service textlist editing core activity ought supported fundamental level o paper flash image reflecting particular example unification could done one work preview macos textedit elevated level standard system toolbox service strong statement o managing file process furthermore deleting piece text file directory file server connection accomplished action highlighting dragging trash still room improvement however example list process conceptually much different list file one imagine finder manage arrange get info duplicate trash file folder necessarily ordinary file folder process open tcp connection newsgroups active pending print job todo task etc deep operating system nothing manager many database indeed file system process table routing table list known appleshare server revision control system projector data think c project database unfortunately despite sizable share common functionality interface every one implemented managed separatelywhy trade multitude custom database manager single welldesigned distributed database manager conventional database usually implemented top file system file system however database mac hf novell file system even use btrees advanced indexing scheme real database querying database jan sale clicking folder sale january related activity ca nt real database take file system entirely modern dbms facility storing image sound file movie big small object provide flexible interface linking querying record wonder else need file unification user interface underlying database may also bring together part presently ca nt even conceived linkable example document could made chunk text folder application one store link picture word processing document embed link menu application remote server precompiled header mailto form anchor well make desktop look like homepage everything editing indeed document editing list line delete one line press assuming emacs editor listing content directory produce sort table list well removing line table requires different command rm see process currently running use p top processwatcher end table delete line however use yet another different command kill processid even take name process argument delete line table queued print job yet another command lprm printjobid need used coincidence deleting line text removing file killing process route arp entry instance activity removing row table uniformity run deep level implementation level presentation indeed basic method manage collection object via kind list tree also many way present collection user let manipulate sole mode people work terminal browsing editing moving mouse typing pressing pgdn key disparate interface consequence fundamental difference user system activity simply result evolution different subsystem service written different people modified even bigger crowd macintosh definitely stand respect many similar function within macos accomplished exactly action eg removing dragging trash opening doubleclicking especially true drag drop manager installed unix moving towards ui unification taking cde proc filesystem example latter long overdue given unix tenet everything file one could wonder process different took long implement popularize idea however unification complete possible open get hold process id find owns process created nothing else one rm kill process one l see list open file process although since list process conceptually much different list file macos could conceivably folder process populated file standing process user could apply standard finder operation viewby getinfo trash duplicate manipulate process usenet news hierarchy similar filesystem matter fact exactly stored managed nntp server newsreader nuntius present news hierarchy directory tree folder file viewbyname mode ala nuntius emulate much finder functionality manage newsgroupsfolders many application example printer network manager ftp utility newsreader easier develop use one tell finder list file manage usually list file tell trash something rearranging file icon within folder view rearranging paragraph within document essentially activity unified overhead code duplication significantly reduced bonus would also enable ordinary document contain folder icon application automatically become hyperdocuments luster dull plain text configuration unix system specified controlled huge tangle plain text file etchosts sendmailcf syslogconf inetdconf etcuucpsystems name ini file system also plain ascii even macos caved little system folder host although isolated example mac note symbol displayed screen must ascii information stored disk form still ascii configuration file abound simple reason modified text editor ex edlin upwards viewed created even without editor cat command accessing block plain etchosts file much easier o reading machine tree next structured netinfo database ascii format win simply tool handling text file present even naked system long file system treated differently database netinfo ni cv etc package provide tool converting internal database table set record plain text file back way database engine implemented core system service along simple tool browse modify database record gordian knot system configuration file disappears macos come close ideal resedit universal database editor much system configuration set opening resource toggling button retyping string adjusting color need learn syntax specific configuration file wasting cpu time parsing text file reporting error unfortunately resedit set template system resource come bundled macos simpletext always system folder host plain text file idea application mere collection code configuration resource common name beautiful even possible application laserwriter utility example add delete menu item corresponding functionality addingremoving appropriate resource without need recompile relink code pain read recommendation refrain creating code resource powerpc native code moved data fork instead application database managed resource manager database managed fragment manager everything database exaggeration operating system permeated set list table collection something something start fundamental data structure like process control block page table go include io request open window descriptor resource example collection sccs rcs termcapprintcap networking database name domain service name resolver etchosts etcnetworks etcservices routing table whatis database man page one hardly spend millisecond working computing system without making kind database query every one database support basic selectinsertdelete function advanced option like concatenated key linking among several table often present well still almost system facility implementation common function one argue managing process control block virtual page require tailored painstakingly tuned implementation however even onesecond delay removing sccs revision host entry matter furthermore many o database implemented straightforward trivial way flat file permitting linear search replacing multitude quick fix welldesigned universal database promise significant boost performance besides cool universal database free o application many chore wildcard resource lookup time stamping permission checking etc universality also offer another clear advantage ability link kind record table much pain example link two record representing file different universal database manager link record user table record process table record file table print job table longer need multiple id keeping track manytomany link possible well performance also improves list process belonging user joe found faster database query rather p aux grep joe surely database better selection dumb search like netstat grep finger used finger fingerer many similar script database query efficient one makefiles would easier generate maintain universal database would also allow linking include file directly includee obsolete arcane art specifying compiler l flag trying predict several possible timeh file compiler would actually pick file system database use improvement hierarchical structure common file system possible choice logical organization entity besides widespread use symbolic link alias make file system look like network database although kludged begs suggestion implementing file system top good network database extensive indexing capability eg adabas database known efficiency storage management transparent multilevel indexing journaling capability much better ufs hf matter filemaker another fine candidate quite application cataloging content cd floppy filemaker database filemaker good describing structure content offline file system surely used online file system well hierarchical organization file system manifest nesting directory folder hand directory merely named view certain subset file selected according criterion thus directory thought database view named database query follows immediately file may appear many directory view one wish example one folder may show file tagged sale report another directory contains file modified within five day searching file system creating populating folder becomes therefore activity since saved view database object one reference view within view one wish required hierarchy however one may create two view refer network view best suit problem every database record item mandatory attribute time stamp owner permission kind document beyond user applicationcreator may add anything want record body lump binary data without detalization hand record kind image table image may additional attribute like image width height depth signature compression method etc thus listing image wide depth least private colormap easy viewing file folder date go without saying even naked o must include rudimentary database browser view tinker file may look like basic nofrills record browser paradox display field record column namevalue pair course o ability generate better looking view report paradox still basic browser necessary useful like cat simpletext desperate situation general purpose database file system present user completely alien environment almost old computer skill still apply example file may still specified path indeed path merely list sequence key telling locate file meaning file path extends beyond hierarchical file system web give especially good example consider url http somehostfoobarhtml obvious interpretation corresponding resource file named barhtml located directory foo documentroot host somehost foo cgi script however barhtml merely parameter passed script interpreted file name anything else script wish short everything slash url name directory key specifying object question argument hold new file system one still locate file entering attribute separated slash database approach allows however wildcards really everywhere directory name file modification date size etc thus running find listing directory would exactly activity many industrialstrength dbms eg oracle informix support efficient transparent access remote database well data replication distributed dbms thus subsumes nfs taking care authorization data transmission local caching data consistency etc mockup hello world session placing database engine o core certainly change entire architecture operating system may surprising realize familiar new o would look user ubiquitous desktop may still mean particular view database reference database object like table process table userconfigurable system data record attribute system userconfigurable table recently used object etc suppose located c compiler well wish better language say dylan either desktop one subviews plain search anything attribute application c c project manager launched prompt open create project usual create new project new source code file automatically tagged project name c text etc attribute nt worry however put new file project folder certainly possible annotate source code attribute inferred context related database object process entering new record look similar personal information manager let user create new record based previous record template smart pims also insert field timestamp example complete name number user type file attribute system custom may used search write proper c code hello world need include declaration standard io package working source code editor may select tool enter db object tell look insert object attribute data c declaration owned system containing string standard io comment simply enter c declaration printf relying editor fill rest query parameter furthermore may finish typing body main function click printf tell editor find include header containing declaration function whatever editor insert click see object actually kind functionality may become available even tomorrow also away file know mean breaking every habit every skill every application merely mean working computer natural way
228,Lobsters,osdev,OS,Linux kernel's inability to gracefully handle low memory pressure,https://lkml.org/lkml/2019/8/4/15,linux kernel inability gracefully handle low memory pressure,,message threadfrom artem tashkinov subjectlet talk elephant room linux kernel inability gracefully handle low memory pressuredatesun aug bug bugging many people many yearsalready reproducible le minute thelatest greatest kernel kernel parameter set todefaultssteps boot disable swap make everything faster sudo swapoff launch web browser eg chromechromium orand start opening tab either watch free ram decreaseonce hit situation opening new tab requires ram thanis currently available system stall hard barely beable move mouse pointer disk led flashingincessantly entirely sure able run newapplications close currently running onesthis little crisis may continue minute even longer thinkthat system behave situation believesomething must done avoid stalli almost sure sysctl parameter could changed avoid thissituation something tell could done everyone andmade default non techsavvy user give onlinux ever get situation like wo nt keenor even able google solutionsbest regard artem
229,Lobsters,osdev,OS,"10 Years of seL4: Still the Best, Still Getting Better",https://microkerneldude.wordpress.com/2019/08/06/10-years-sel4-still-the-best-still-getting-better/,year still best still getting better,trustworthy system freedom day proof number os around sort code verification story almost toy proof proved enforce integrity proved enforces confidentiality developed binary correct translation verified c code performed complete sound worstcase executiontime wcet analysis improved analysis architecture functional correctness proof still phd thesis formalising mmu motto security excuse poor performance resource management secure enclave apple io device issue earlier kernel protected procedure call jon shapiro observation traditional model covert storage channel paper untypeds time stated paper temporal integrity replacing average fast worstcase extremely slow lazy scheduling developed early dresden group precapability kernel time another resource authorised capability composite o commitment change mainline kernel must break verification timing channel time protection riscv foundation new verification challenge think solvable design realworld use generality keykos eros performance first publication work verificationfriendly microoptimisation verified outperforming previous kernel verified outperforms microkernel realworld deployment darpa hacms program using retrofit security existing realworld system crossdomain desktop compositor hensoldt cyber various trustzone tee keystone tee riscv third party summit future rfc process like,week ago july trustworthy system celebrated freedom day anniversary opensourcing furthermore birthday anniversary completion first functionalcorrectness proof operating system showing implementation bugfree anniversary prompt reflect happened year achieved evolved ongoing challenge future direction hope find time follow indepth examination development build beginning three objective mind equal importance implementation formally proved correct mean say verified solve longstanding problem resource management microkernels os general suitable realworld use look address three proof defining feature clearly verification story starting functional correctness proof amazingly still fairly unique respect much assumed first created estimated window year someone created another verified o kernel turned totally overestimated competition number os around sort code verification story almost toy notwithstanding author might claiming verified o heard seems defensible claim suitable realworld use recently verified provencore system french company prove run even system much narrower target domain designed use trustzonebased trusted execution environment tee static architecture get away simple protection model contrast fully dynamic support arbitrary secure system architecture thanks flexible capabilitybased accesscontrol model proof original proof showed c code correct implementation formal specification mathematically speaking code refinement spec done processor arm architecture missing bit piece completed main remaining hole kernel boot code still verified mean proof say kernel boot safe state remain safe state bootcode verification need show kernel actually get safe state initially clearly proof overdue working background activity beyond much progress happened verification side proof chain proved kernel able enforce integrity ie prevent subject modifying data without explicit authorisation show spec correctly implemented desired property ie integrity enforcement proved separationkernel configuration enforces confidentiality strong informationflow sense meaning prevent unauthorised information leakage including covert storage channel complement integrity property showing direct indirect read succeed authorised note formalism notion time infoflow property preclude timing channel timingchannel prevention one present focus developed translationvalidation toolchain prof binary produced compiler linker correct translation verified c code mean trust compiler use gcc assumption c semantics drastically reducing trusted computing base tcb verification together proof show kernel implementation free bug compiler introduce bug kernel enforces security strong sense property applies binary executing silicon finally performed complete sound worstcase executiontime wcet analysis surprise first analysis performed protectedmode o kernel literature core ingredient making suitable superior system use safetycritical realtime system code trustworthy socalled mixedcriticality system mc meanwhile improved analysis using translationvalidation framework link property proved source code binary improves assurance whole process allows u leverage correctness proof bound loop eliminate infeasible path binary architecture original proof done arm since ported arm added verification arm virtualisation support hyp mode april arm remains architecture complete verification story made verified hypervisor july completed functional correctness proof making first verified version end year expect complete functionalcorrectness proof riscv architecture well translationvalidation toolchain carry proof binary still number thing still completed mentioned kernel initialisation earlier also number part verified degree rest kernel particular mmu management phd thesis formalising mmu completed mostly done also working verifying multicore version challenging uncompromising design performance mean implementation racy removing race would make problem far easier solve accept performance compromise would imply motto security excuse poor performance core differentiator highassurance system resource management developed starting back year experience highperformance microkernels including kernel open kernel lab developed kernel ended billion qualcomm modem chip another fork run secure enclave apple io device issue earlier kernel time learnt number shortcoming original design several already fixed kernel fork karlsruhe pistachio kernel including overcoming restrictive nature overloaded synchronous ipc complementing asynchronous notification mechanism ipc model kept evolving finally settled protected procedure call complemented notification binary semaphore removal number nonminimal feature including long ipc ipc timeouts already begun adopted eliminated number implementation trick outlived usefulness including virtual tcb array processkernel design time started community reached consensus model addressing ipc thread needed replaced capabilitybased addressing portlike ipc endpoint helped along jon shapiro observation traditional model covert storage channel capability also cleanly solved another issue original limiting communication original model relied inflexible process hierarchy redirection monitor process chief limit data flow capability provide cleaner simpler lowoverhead model privilege imply ability share privilege additional grant right needed pas capability paper discus issue detail untypeds issue remained unresolved principled management kernel memory prior kernel kernel heap allocating kernel data structure lead poor isolation potential denialofservice do attack kernel introduced kernel memory pool quota unconvincing fix kevin experimented various model year developed present model kernel heap whatsoever strictly bounded stack never allocates memory boot instead userlevel code required explicitly provide memory kernel operation requires metadata allocation mechanism untyped memory retyping onto kernelobject type model retyping untyped memory extremely powerful simple abstraction managing spatial resource security domain create kernel object whatever amount untypeds given particular make impossible agent interfere domain ability create kernel object thus avoiding do attack construction memory management model extends user partition kernel furthermore need usermode provide working memory kernel mean partitioning userland implicitly lead partitioning kernel memory powerful property major enabler isolation integrity confidentiality proof downside model tricky use make easy shoot foot many student attest however job microkernel protect foot protect malicious code providing strong isolation exactly extremely well time biggest remaining hole resource management story original managing time stated paper traditionally weak temporal isolation story time design left toohard basket used fairly naive approach scheduling always meant addressed later temporal integrity fixed minor issue performing wcet analysis kernel including replacing average fast worstcase extremely slow lazy scheduling benno scheduling fast average without pathological worst case main problem remained accurate accounting time especially shared server meant support hard realtime rt system limited narrow set scenario could provide required integrity guarantee namely critical thread able meet deadline passive server execute client donated scheduling context finally addressed cleanly evolving model scheduling context developed early dresden group precapability kernel integrating capability model finally made time another resource authorised capability thus firstclass resource managed principled fashion scheduling concept firstclass kernel object represent right access share cpu model implemented mc kernel called provides right mechanism supporting mc including ability guarantee time critical thread presence untrusted highpriority thread first capabilitybased model managing time way suitable hard realtime system together concurrent work composite o keykos meter also time capability suitable hard rt mc kernel branch reason commitment change mainline kernel must break verification mc model requires invasive change kernel mean reverifying lot work however work nearing completion expect mc merged mainline end year early next future number improvement simplify many use case strongly recommend new development based mc timing channel mc kernel solves temporal integrity confidentiality remains unresolved kernel prevent information leakage timing channel course respect worse generalpurpose os case last remaining security problem others bigger issue deal fact given experience trying stop leakage commercial hardware strongly suspect highassurance separation kernel based strict space time partitioning satp leak well time protection partition system including kernel recent work time protection indicates solve problem temporally spatially partitioning shared hardware resource partition even kernel assumes hardware manufacturer get act together provide mechanism resetting timeshared resource working riscv foundation ensure riscv however far timeprotection set primitive mechanism require proper integration model working right create new verification challenge think solvable design realworld use suitability realworld use really man two thing generality performance generality microkernel mean keeping much possible policyfree instead providing primitive mechanism general enough support construction virtually arbitrary system top core capabilitybased accesscontrol model strongly influenced keykos eros support efficient delegation required solving resourcemanagement problem plagued microkernels past detail model evolved discussed principle lookandfeel remained whether hit right design point still undecided year busy supporting various security safetycritical deployment evolving system improve support focussed much truly general system including flexible multiserver architecture ongoing work recently accelerated performance started project message team unambiguous consider project success lose ipc performance fastest kernel built date time first publication sosp nov verified kernel right limit unverified version faster almost par previous arm kernel work verificationfriendly microoptimisation ipc fastpath resulted verified outperforming previous kernel mean verified outperforms microkernel almost case factor ipc latency closest performance fiascooc microkernel factor two slower said earlier security excuse poor performance uncompromising performance focus mean take shortcut others regularly take example reason highperformance multicore version yet verified happen realworld deployment designforrealuse work shown fact uptake accelerating one might think ten year long time keep mind first half period locked ip arrangement make essential useless anything internal research teaching vehicle furthermore deploying enforcing security safety mean unless developing system scratch rearchitect system thoroughly something people enter lightly also take time boeing ulb flying darpa hacms program great success regard hacms show successful use realworld system boeing unmanned little bird ulb autonomous helicopter u army autonomous truck cyberretrofit ulb importantly demonstrated feasibility using retrofit security existing realworld system process dubbed incremental cyberretrofit darpa director john launchbury approach others presently taking harden number realworld system nature open source know fraction project building unusual find one accident project involved commercialinconfidence talk usbbased secure communication device us militarystrength encryption communicate via bluetooth wifi evaluated approved defence use knowledge first time software ie enforced isolation considered equivalent air gapping certification authority already use several defence force cddc displaying window different classification crossdomain desktop compositor cddc device allows securely connecting single keyboard mouse display multiple network different security classification domain technically dropin replacement kvm switch powerful support concurrent rendering window multiple domain screen hardware ensures window decorated according classification reserved region screen indicates input go configured system allows operator cutandpaste window previous design using left certification authority unconvinced security cddc enter productisation phase hensoldt cyber developing secure hardwaresoftware system based secure riscv chip secure operating system disclosure chief scientist software hensoldt cyber target critical system defence avionics industrial automation automotive usbased autonomous driving startup using protect safety system various trustzone tee development keystone tee riscv based third party running training course u dodfunded organisation run summit last year running another one year selection much going deployment definitely accelerating future listed number current engineering project including full verified riscv support verifying mainlining mc model top looking funding verify arm port difference privileged isa arm big enough make essentially architecture port comparable riscv riscv verification project resulted improved abstraction proof architecture reduce cost verification multicore kernel said ongoing although slowly hopeful able accelerate significantly external funding significant research challenge address besides proof engineering time protection developed core mechanism yet proper security model integrated api ongoing research verification mechanism context like come better verifiable confidentiality notion sledgehammer information flow superrestrictive applicable narrow set realistic scenario want something much practicable besides working strongly growing community especially fostering opensource community taken number step including rfc process much pipeline hope able make announcement near future stay tuned like like loading
231,Lobsters,osdev,OS,Haiku Activity Report: Performance Edition,https://www.haiku-os.org/blog/waddlesplash/2019-08-03_haiku_activity_report_july_2019/,haiku activity report performance edition,haiku activity report performance edition optimization memory allocator pool ticket table data objectcache objectcache memory avoiding entirely usergetcpuinfo usergetextendedteaminfo inlined created single thread startup disk write dynamic timeouts instead locking granular kernel thread hashtable remove global conditionvariable lock userland avoid calling kernel favor rwlock number everything else application library blog server driver kernel build system item series article financial report,haiku activity report performance editionwelcome monthly report july interesting change month way performance optimization writing progress report month talk detailthis report cover commits optimization haiku entered beta phase work past year spent fixing majority known kernel crash general instability high time start paying attention whole system performancedespite snappy haiku seems internals really well optimized show running operation real intensity disk memory cpu new thread scheduler year ago removed threadrelated bottleneck practice shifted load bottlenecksso let take overview past month earlier month change see one optimizes operating systemmemory allocator poolsmost malloc implementation builtin size class allocate object eg byte byte etc within size class slab span store number allocation malloc called size grab next free item slab return itnow application allocates lot item one size class free allocator allocate number slab size class release application free item happens number item stay alive eventually left number partially used slab perhaps equivalent one two full slab used really ten time mostly unusedthis referred memory fragmentation allocator fragmentation userland application occurs much rarely kernel malloc implementation use thread pool reduces fragmentation greatly different thread use different slab allocatingbut kernel thread allocation pool primarily thread kernel thread one performs syscall eg open calling thread way becomes kernel thread temporarily order let kernel directly handle request kernel need allocate memory inside syscalls case file descriptor structure us internally keeping kernel thread allocator pool every single thread system would exponentially overhead benefitthe kernel however make lack thread allocation pool object allocation pool rather allocation pool general malloc perthread basis allocation pool object used globally facility long existed haiku kernel used primarily networking subsystem manage netbuffers kernel malloc size class implemented object cache greatly underutilized ticket compiling large project haiku performance would seriously noticeably degraded apparent way improve brief analysis system state showed nearly allocator slab unused scattered throughout slab system release result huge amount bookkeeping overhead time malloc called well large amount ram reserved usedso last month collected statistic use general kernel malloc system boot process hit major subsystem stress quite bit made crude table data started analyzing consumer malloc really belong object cache found number culprit deserved cache packagefs due way serf request data packagefs allocates small structure every node mounted package organizes know package serve given file without expensive disk lookup reading actual data stock nightly image default package installed mean allocates almost object handle bookkeeping following packagefs us objectcaches datablockcache blockcache used bfs driver handle journal ondisk block journaled mostly inodes already used objectcache block time turned transaction object cached move object objectcache unlike packagefs rather longlived item deallocated package uninstalled may ever happen given boot item extremely ephemeral often alive le second continue allocated inode journal transaction system runningvfs path object processing filesystem request vfs often need copy path temporary buffer normalize like never know large path going get always allocates buffer size pathmax haiku often alive even millisecond objectcache save significant amount overhead every syscall involving path avoids fragmentation timevfs file descriptor every time open called get new fd kernel need structure associated fd structure objectcache file descriptor allocated boot course diskintensive operation like long compiles used dizzying rate course extremely ephemeral commit note allocated boot remained allocated boot finished system sat idle haikuports team member recompiled large project system change found performance degradation indeed almost totally gone besides improving allocator fragmentation objectcaches course use exactsized object whereas going general allocator use nextlargest size class change lower memory usage really memory fragmentation optimization memory usage optimization performance optimization oncememory avoiding malloc entirelybesides adding objectcaches handle lifetime better fashion another way improve malloc performance mldr avoid calling malloc entirely two change past month usergetcpuinfo usergetextendedteaminfo syscalls first used get cpu usage information called time per second display cpu meter deskbar second called terminal time per second per tab check status running shell session using malloced memory bounce buffer avoid copy memory directly cost bit complexityi also inlined data structure parent class merged previously separate malloc call critical spotssimilar frequent malloc usage also came across part bfs driver creating thread periodically created single thread startup signaled semaphore afterwardsdisk write dynamic timeoutsthe blockcache used noted filesystem journal inodes metadata thing could quickly turn major bottleneck longrunning inodeaffecting operation like git checkout emptying trash instance switching blockcache use objectcache item noticed hardcoded timeout inbetween writebacks avoid disk congestion avoid writing back block likely modified meant could fill application would stuck waiting write dirtied block cause longstanding tracker stop start emptying trash among slowness probably code first written decade ago much bottleneck instead compute dynamic timeout based long last block writes took performance difference hdds even performance improvement ssds still room improvement connecting ioscheduler blockcache intelligently schedule transfer eliminate timeouts altogether new limit difficult hit anyway wait completed pass whole systemlocking granulardata multiple thread could access modify usually protected lock multiple lock protects thread corrupting data modifying simultaneously course significant performance impact long time spent waiting lock small number lock large number thread spend long time waiting may make sense try change locking semantics even underlying data structure reduce amount time spent waiting locksthese change trickiest get right usually largest performance impact change early year beginning kernel thread hashtable transitioning spinlock rwspinlock allowing multiple thread look uh thread condition sizeable impact performance quite lot operation depend getting internal thread structure thread idthere one major locking granularity change made month pretty sizeable impact remove global conditionvariable lock replace lock individual condition variable seemed sizeable impact inside vms nearly acrosstheboard performance improvement condition variable used rather commonly throughout kernel also fallout change number commits required clean even edgecases original commit missed well oversight kernel uncovereduserland avoid calling kernelthis area focus much month poking semaphore usage happened notice appserver readwrite locking class used semaphore per instance good set sadly underutilized userland mutexes equivalent linux futexes dropping ancient custom locking code favor rwlock relatively easy change immediate resourceuse benefit instance every bbitmap required one fewer semaphore used per bitmap creating rwlock touch kernel locking lock contention otherwise rwlock entirely inuserland lock class save quite bit overheadwhat number hrev today compiling haikudepot amd ryzen hot disk cache yield real user sys still standard nightly build ie implies quite lot paranoid check noticeable impact performance ran test easy way get fair comparison linux machine haiku life sata ssd whereas linux life nvme ssd haiku nvme driver merged time machine built quick test showed linux faster hopefully new build made ssd difference eliminated percentage drop half least rate second compile c object mimedatabase text file nothing scoffed everything else well month performancerelated change expect month significant department intend focus bit security lacking perhaps virtualization mldr everyone else otherwise normal month even got number significant nonperformancerelated change let see else happened application librarieskapix implemented standard shortcut wordwise delete btextviewa new string export finally pushed pootle translation following humdinger made tweak new string make easily translated specifically make use bstringformat allows proper translation plural formspvsstudio commercial static analysis system another build haiku system last one year ago posted result pulkomandy spent bunch time combing fixing item reported read blogcalvin buckley new contributor submitted patch display better pretty name cpu amd zen family thanks first change preetpal outreachy intern towards unified input preference panel merged mouse touchpad preference working new panel patch review keyboard padblocker previously thirdparty application used block touchpad input typing rather old patch drivesetup add information partition view cleaned pulkomandy finally merged drive encryption status well partition type clearly submitted patch localize autoraise included build defaultryan leavengood longtime developer committed code past year made comeback usability fix tracker stylededit showimage welcome back ryan serverspulkomandy made fix buffering streaming logic mediaserver medium kitdriversi tweaked xhci internal thread priority likely significant change heavy load finally implemented isochronous transfer xhci unfortunately seems long period without usb stack driver working isochronous transfer usb audio driver bitrotted mldr quite use usb headset haiku yetkernelsimonsouth returning contributor welcome back contributed fix boot failure certain vms baremetal system obscure circumstance related ioctl sizepassing kernelbuild systempulkomandy added note utility work sparcother itemsbesides code two item interest haiku world july probonopd one creator appimage wrote nice series article first impression haiku past month seems seeing mldr haiku inc finally released financial report let aim bit earlier year next time mldr thanks reading see next month
232,Lobsters,osdev,OS,bootOS is a monolithic operating system in 512 bytes of x86 machine code,https://github.com/nanochess/bootOS,bootos monolithic operating system byte machine code,join github today sign file permalink http nanochessorg http githubcomnanochessbootos wwwnasmus http githubcomnanochesscubicdoom http githubcomnanochessbricks http githubcomnanochessfbird http githubcomnanochesspillman http githubcomnanochessinvaders http githubcomnanochessbootbasic http githubcomnanochessbootrogue http githubcomnanochesstoledoatomchess http githubcomxlogicxbootslide http githubcomxlogicxtetranglix http gitlabcompmikkelsenasmsnake http http ishworksbootsectorbootsectorhtml http http http nanochessorgstorehtml http http resource license reload reload,bootos monolithic operating system byte machine code dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time bootos operating system byte boot sector oscar toledo g http nanochessorg http githubcomnanochessbootos compatible original ibm pc want assemble must download netwide assembler nasm wwwnasmus use command line nasm f bin osasm l oslst osimg bootos bootos monolithic operating system fit one boot sector able load execute save program also keep filesystem work floppy disk size starting relocates requires byte memory starting operating system run program boot sector provides following service int exit operating system int input key show screen entry none output al ascii key pressed affect ahbxbp int output character screen entry al character output none affect ahbxbp int load file entry d bx filename terminated zero e di point source data byte output carry flag found found affect register including e int save file entry d bx filename terminated zero e di point data target byte output carry flag successful error affect register including e int delete file entry d bx filename terminated zero affect register including e filesystem organization bootos us track side sector directory contained track side sector entry directory byte wide contains ascii name file finished zero byte sector capacity byte mean file kept floppy disk deleting file matter zeroing whole entry file one sector long location disk derived position directory file located track side sector file located track side sector file located track side sector starting bootos make sure write boot sector floppy disk work floppy disk size waste disk space us first two sector disk first sector following track emulation make sure deposit start img file least virtualbox detects type disk length image file mac o x linux create image way dd ifdevzero ofoszeroimg cat osimg oszeroimg osbaseimg replace tested virtualbox mac o x running window xp running also work qemu fda osimg running bootos first time enter format command initializes directory also copy boot sector useful init new disk bootos command ver show version none moment dir show directory content del filename deletes filename file format explained enter allows enter hexadecimal byte create another file notice line size character must break input chunk byte also allows copy last executed program press enter h prompt appears type new name example character enter key enter hbb bb cd eb ee cd h hello dir hello hello hello world bootos program oh yes software support cubicdoom http githubcomnanochesscubicdoom brick http githubcomnanochessbricks fbird http githubcomnanochessfbird pillman http githubcomnanochesspillman invader http githubcomnanochessinvaders bootbasic http githubcomnanochessbootbasic bootrogue http githubcomnanochessbootrogue atomchess http githubcomnanochesstoledoatomchess requires minimum processor also first party program bootslide http githubcomxlogicxbootslide requires minimum processor tetranglix http githubcomxlogicxtetranglix requires minimum processor snake http gitlabcompmikkelsenasmsnake requires minimum processor bootmine http requires minimum pentium ii processor rdtsc instruction sokoban http ishworksbootsectorbootsectorhtml requires minimum processor program provide boot sector version com file version need boot sector version program loaded address copy machine code directly using enter command create file signature byte command later copy binary img file using signature byte clue locate right position image file find predesigned disk image along git name osallimg enjoy special thanks jakub kądziołka niedzejkob finding bug suggesting enhancement attention would like learn programming must get new book programming boot sector game including crash course available lulu softcover http hardcover http ebook http nanochessorgstorehtml example program documented profusely book guess number tictactoe game text graphic mandelbrot set fbird game invader game pillman game toledo atomchess bootbasic language success first book need even boot sector game must get book softcover http hardcover http follow light bootrogue brick cubicdoom bootos bootos monolithic operating system byte machine code resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
233,Lobsters,osdev,OS,Plan 9 from Bell Labs Gets Early Support for the Raspberry Pi 4,https://abopen.com/news/plan-9-from-bell-labs-gets-early-support-for-the-raspberry-pi-4/,plan bell lab get early support raspberry pi,mailing list via web browser,effort port plan bell lab operating system raspberry pi family lowcost singleboard computer received initial support new raspberry pi though still work project first released academic user general public plan bell lab named infamous ed wood scifi effort plan outer space replaced unix telecommunication company primary research platform despite defocused company never reached popularity linux bsd plan bell lab life saw free third edition released fourth edition continues updated including new support raspberry pi singleboard computer suggesting anyone rush buy raspberry pi yet writes richard miller post mailing list unlike previous release board incarnation big change lot new driver writing needed useful plan quite daunting actually boot far root prompt many new peripheral without driver support documentation far anything useful usb host socket connected new usb controller sd card connected new emmc controller use sdhost ethernet connected new native gbe controller wifi unchanged currently fails intermittently emmc iorwextended data corruption already running plan bell lab get access miller kernel source command srv nq tcp source nsources anyone else find via web browser
234,Lobsters,osdev,OS,"DragonFlyBSD Project Update — colo upgrade, future trends",http://lists.dragonflybsd.org/pipermail/users/2019-July/358226.html,dragonflybsd project update colo upgrade future trend,dragonflybsd project update colo upgrade future trend dillon backplanecom http information user mailing list,dragonflybsd project update colo upgrade future trend matthew dillon dillon backplanecom mon jul pdt last week testing replacement monster opteron server project removing monster colo week two replacing three machine together use half power monster alone goal clear little power budget colo really beefup packagebuilding capability reduce turnaround time needed test port syncs update binary package system currently use two blade building plus monster sometimes blade take almost week hour full synth run monster take around hour need three bulk build le time one release branch one development branch one staging update take long gnawing little well zen rescue new cpu take ecc actually ipmi mobo available fast hell cheap get new machine two based server plus dualxeon system already home full synth run hour xeon around hour monster retired crazy thing monster burn going full bore server burn xeon burn otherwords replacing getting roughly performance efficiency upgrade tell much powerefficient machine become last year upgrade allow u full build release dev roughly one day instead seven day without interfering staging work might happening time future trend dragonflybsd reached bit crossroad smp work essentially complete across entire system main project focus supplying reliable binary port release developer branch drm gpu support ui element keep dragonflybsd relevant workstation continuing filesystem work get multidevice clustering going john marino marino pioneered synth system dports continues help focus ravenports rimvydas jasinskas zrj antonio huete jimenez tuxillo done huge amount work bringing dports back operational form getting freebsd port sync stuff working better dragonflybsd still using synth probably remain synth foreseeable future though always discussion best move dports forward excellent build platform u francois tigeot ftigeot done ton work taking drm worked well intel igpus finally starting dive linux amdgpu subsystem much older order modernize amd support still deficient numerous people spent considerable amount time helping test gpu support tracking bug work ongoing apologize writing everyone name plain ascii right make excellent singledevice filesystem extremely well given support writable snapshot compression box remains deficient come expandable storage multiple device clustering active work honestly amdgpu support come first still going longhaul mailing list seeing much activity generational issue people kinda prefer webbased forum day younger generation use mailing list group stuff really even devs almost universally use irc mailing list discussion kinda bad nt permanent irc log stored dfly server posterity looking potentially shifting user interaction webbased forum perhaps year retiring mailing list leaving archive mailing list possibly sometime year look action upcoming main developer sascha wildner swildner keep tree tiptop shape catch numerous issue justin sherrill justins handle distribution roll dragonfly general bsd blog home page sepherosa ziehau sephe focus network subsystem tomohiro kusumi help hammer peter avalos list hard say future develop three opensource operating system entire world really pull together complete modern smp kernel linux dragonflybsd freebsd also netbsd openbsd kinda like know plan future clearly going multicore manycore everything like say smp three moment one ca nt dispute linux nearly eyeball dragonfly opensource tends live forever algorithm never die think place project really nt alternative want sparkling clean system nt many layer abstraction current juncture dragonflybsd well plan slow stop many developer help dragonflybsd regular basis drop time time well past developer awful lot work going run name git log alphabetical order nt miss anyone hopefully user charlie root never know party still going matt aaron li adam hoka adam sakareassen adrian chadd aggelos economopoulos alex hornung alexander kuleshov alexander polakov alexandre perrin antonio huete antonio huete jimenez antonio nikishaev aycan irican ben woolley bill yuan brad hoffman brill peng charlie root chris pressey chris turner chris turner chris wilson christian groessler constantine murenin daniel bilik dave hayes david p reese david rhodus david shao david xu diederik de groot dimitris papastamos dylan reinhold ed schouten eirik nygaard eitan adler francis gudin franco fichtner tigeot gregory neil shapiro gwenio hasso tepper hidetoshi shimokawa hiroki sato hiten pandya ilya dryomov imre vadasz imre imre jan lentfer jan sucan javier jeffrey hsu jeremy c reed jeroen ruigrokasmodai joe talbott joerg sonnenberger johannes hofmann john marino jordan gordeev joris giovannangeli justin c sherrill levente kurusa liam j foy lubos boucek magliano andrea markus pfeiffer matt dillon matteo cypriani matthew dillon matthias rampke matthias schmidt maurizio lombardi max herrgard max max okumoto maxim ag michael neumann michael neumann michael neumann mihai carabas nicolas thery nicolas thery nolan lum noritoshi demizu nuno antunes nuno antunes peeter peeter must peter avalos pierrealain toret robert garrett robin hahling rui paulo rumko samuel j greear sascha wildner scott ullrich sepherosa ziehau simon corecode schubert simon arlott simon schubert simon schubert stathis kamperis sylvestre gallon thomas e spanjaard thomas nikolajsen tim tim bisson tobias heilig tomasz konojacki tomohiro kusumi ulrich user venkatesh srinivas victor balada diaz vishesh yadav walter sheet yonetani tomokazu yellow rabbit yonghong yan zach crownover dumbbell glebius hr jkim minux rnoland sinetek zrj matt next part html attachment scrubbed url http information user mailing list
235,Lobsters,osdev,OS,Nanos is Now Open Source,https://github.com/nanovms/nanos,nanos open source,nanos getting started ops buildingrunning ops ops ops building source mac build documentation doc site benchmark go gcloud rust gcloud nodejs aws nodejs gcloud test development running instruction http githubcomnanovmsops contributing pull request reporting bug tfs optional manifest debugging flag architecture debugging help manual networking setup build envs reference material feedback feedback form using nanos getting help nanosusers nanovmscom paid support plan,nanos nanos new kernel designed run one one application virtualized environment several constraint compared general purpose operating system window linux namely single process system support running multiple program concept user remote administration via ssh read nanos charter getting started please use ops orchestrator run application nanos unless plan hacking nanos buildingrunning highly encouraged use ops build run application using nanos unless planning modifying nanos ops provides sensible default user incorporates understanding appropriately best use nanos also currently highly coupled nanos running vm already bad idea need specify nt want hardware acceleration instance run nanos virtualbox mac slow hard configure build run mac linux nanos support kvm linux hvf osx currently acceleration ops facility deploy public cloud awsgce building source mac install homebrew usrbinruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstall grab dependency installs correct toolchain install uptodate qemu highly recommended running latest qemu otherwise might run issue brew update brew install nasm go wget ent brew tap brew install brew tap nanovmshomebrewqemu brew install nanovmshomebrewqemuqemu create chroot nt absolutely necessary mkdir targetroot cd targetroot wget http storagegoogleapiscomtestmisctargetroottargz tar xzf targetroottargz build make run noaccel documentation find documentation ops doc site benchmark effort transparency collect categorize document benchmark start listing aim reproducible contain much information possible go gcloud reqsec rust gcloud reqsec nodejs aws reqsec nodejs gcloud reqsec test run test make testnoaccel development running instruction nanos try running first example first make run try different target currently found example cp manifest file targetmanifest add code set target examplesmakefile targetmynewtarget make run may also wish use http githubcomnanovmsops develop locally case commonly used idiom simply copy required file appropriate release cp outputtoolsbinmkfs cp outputplatformpcbootbootimg cp outputplatformpcbinkernelimg contributing pull request accept pull request long conforms style stated goal may reject pr violate either condition planning spending day fix something probably wise approach topic issue planned fix commiting work also nanovms paid kernel engineer internal roadmaps wise check u first grabbing tkt ticket tagged lowpriority lower probability collision reporting bug please scan issue list first see already tracking bug please attach debugging output ops please provide configjson anything else allows u reproduce issue tfs tfs current filesystem utilized nanos optional manifest debugging flag thread tracing futextrace syscall tracing debugsyscalls stackdump fault read security architecture debugging help manual networking setup build envs reference material feedback using nanos take short survey help u grow project take minute help u feedback form using nanos using nanos project company organization feel free open pr list projectcompany getting help run public mailing list nanosusers nanovmscom general question like indepth help reach nanovms folk via drift email engineering need something done want immediate attention issue nanovms offer paid support plan
236,Lobsters,osdev,OS,Ingo Molnar: kernel/timer.c design (2005),https://lkml.org/lkml/2005/10/19/46,ingo molnar kerneltimerc design,http vgerkernelorgmajordomoinfohtml http wwwtuxorglkml,message threaddatewed oct molnar subjectkerneltimerc design ktimers subsystem roman zippel zippel wrote whether timer event delivered completely unimportant point event removed anyway optimizing timer non delivery complete nonsensecompletely wrong explain let first give introduction design goal implementationoptimization detail upstream kerneltimerc code current design remained largely unchanged since finn arne gangstad implemented timer wheel code implement struct timerlist object addedvia addtimer expire n jiffy removed viadeltimer expiry timer removed expiry thenthey expire point kernel calltimer fn timer data time granularity timeouts bit sidenote detail like timer modification api variant smp scalability issue sense writeup simplified essence algorithm still since timer added arbitrary time order timer willexpire sooner added timer added expirelater etc kernel timer sorted expirenote requirement sort timer expiry initial linux timer implementation bother million timer workload yet went simplest model put timer doublylinked list sorted timer insertion time made addition n also n removal function expiry name struct timerlist originates linkedlist model name survived year reason n removal overhead original implementation maintained next timer expire n jiffy value every timer list kernel could used implement dynamic timer tick never ended using particular aspect implementation future timer implementation removed property altogether one could implement add n del exp algorithm sorted linked list original implementation suboptimal n deltimer one could also implement add del exp n algorithm via unsorted linked list case single list either insertion expiry carry n linear sorting overheadanother canonical computer science way dealing timer put binary tree sort expirytime mean addtimer time insert timer binary tree log n overhead removal expiry fastest theoretical timer algorithm linear array list timer bucket every future jiffy running index represent current jiffy adding timer simple addlist array entry indexed target timeout removing timer simple listdel expiring timer matter advancing current time index one expiring timer next slot thus adding removing expiring timer constant overhead worstcase behavior constant bounded toowhat make algorithm impossible practice huge ram footprint ten gigabyte ram represent jiffy os still price restricting either timer granularity maximum possible timeout proven assumption linear array time approach best fully algorithm constant worstcase behavior well whatever solution choose significantly reduce ram footprint wont fully seen two practical approach far historical linux implementation add n del n exp timer tree solution add log n del exp current linux kernel us third algorithm timer wheel variant simple array future jiffy model instead representing every future jiffy bucket categorizes future jiffy logarithmic array array array represent bucket larger larger scopegranularity jiffy future jiffy belong single bucketin practice done categorizing future jiffy first category consists bucket bucket representing single jiffy second category consists bucket equally divided bucket represents subsequent jiffy third category consists bucket bucket representing jiffy fourth category consists bucket bucket representing jiffy fifth category consists bucket bucket representing jiffy bucket category put percategory fixedsize array called timer vector named see used bucket managed map future jiffy bucket word split bit timeout value bit might ask dont use even number bucket would simplify code reason mostly ram footprint optimization splitup give total bucket considered bit high back code designed fact recent kernel configbasesmall specified use splitup round remaining bit give embeddedfriendly ram footprint bucket splitup constant revision might switch simpler slightly faster model future server insert timer addtimer calculate target category constant overhead comparison put timer bucket note unless first category timer different timeout value end bucket eg timer expiring jiffy put first bucket category mean timer bucket partially sorted sorted highest bit initially addtimer overheadremoval simple remove timer bucket listdel overhead toowe knew free lunch right main complication expiry first jiffy problem represented first array bucket expiry code check whether timer expired bucket expiry overhead step jiffy something special expiry code cascade first bucket second array first bucket hard way walk list timer bucket remove list insert one first bucket depending timeout value timer expiry code go back bucket expires timer expiry code keep persistent running index every category index overflow back increment next category index one cascade timer bucket previous categoryin word happens sort timer piecemail wise first order highest bit timeout value sort lower bit end fully sorted timer expire never removed still relative fullysortedlist approach timer end fully sorted average pertimer expiry overhead still expiry worstcase bounded n one cost burstiness processing single step cascading take many timer processed happen bucket timer may expire processing worstcase expiry behavior n average cost still process every timer time another cost touch dirty timer lifetime bringing cache multiple timesbut hidden win well approach timer removed expires saved remaining cascading step happens surprisingly often busy networked server majority timer never expire removed cascaded even oncein word lazy sort timer push sorting overhead much future possible hope problem sort going away get removed expire even wanted couldnt sort earlier model due ram footprint limit detail mind let go back roman assertion whether timer event delivered completely unimportant point event removed anyway optimizing timer non delivery complete nonsenseit much crutial whether timer event delivered think million network timer case removed cascaded even removing early might propagate sort timer way added bucket soon removed bucket ingoto unsubscribe list send line unsubscribe linuxkernel inthe body message majordomo vgerkernelorgmore majordomo info http vgerkernelorgmajordomoinfohtmlplease read faq http wwwtuxorglkml
237,Lobsters,osdev,OS,C64 OS - Object Orientation in 6502,http://c64os.com/post?p=85,o object orientation,object orientation take object orientation book computer computer cpu universal computation turing completeness http enwikipediaorgwikituringcompleteness computability theory say theory one instruction set computer http smartsimorguk feature structuring object oriented code object oriented code object orientation note class object relationship aside clipboard class original goal o module routine class object call method myobject isa methodoffset inheritance superclass method faster jmps strange link gotchas helpful toolkit routine instanceof final thought like see greg naçu want support work stock buy commodore logo patch make donation little cup coffee another way help use referral link hosted digital ocean droplet sign digital ocean refereral link want support hard work comment powered disqus,july programming theory object orientation take every often writing new post reminds something wrote earlier post go back read make sure covering new ground instead repeating wrote object orientation july feel like long time ago please nt bother read fine example writing clarity thought first attempt writing object orientation programming object oriented code year read countless article oo even book two never take know practice put word writing hard writing coherently pleasingly technical subject even harder hope time around bit better good software practice bad software practice learned long ago goto command basic bad news lead unmaintainable spaghetti code avoided whenever possible modern language nt even equivalent think choice programming language easy imagine mere convention different way expressing end bottom thing machine code abstracting way hide harsh reality write high level language leave lot dirty work compiler one many benefit compilation enforces good practice code namespaced function take parameter decrease reliance global state data typed used outside type explicit notation mean ca nt misused accident without goto command code ca nt jump around even though underlying cpu probably equivalent jmp instruction essentially high level programming language make easier code well abstracting underlying detail right gradually become clear part story computer computer everyone know cpu get faster early mhz late mhz saw crazy increase mhz hundred mid ghz eventually hit clockrate plateau two shiny number risen along way amiga later came mac pc common across line workstation smartphones let forget core first could get powermac two separate cpu soon turned two core die two turned soon became spec imac pro cpu core number getting bigger memory available everything getting faster ergo software made sophisticated raw compute resource allow abstract circuitous pathway followed seems make sense really accurate simplification much nuanced advancement look two maybe three broad statistic large part story missed kid later meant world thought best interesting flexible computer ever started age knew home computer slightly newer gaining feature commodore nt mind slow march progress unfolding eye course say fact view world almost completely wrong perspective history computer totally miopic focused machine encountered friend machine school completely oblivious world big computer mainframe minicomputer owned operated government university bank large corporation truth home computer nt powerful flexible although interesting never powerful even first day first new model rolled assembly line powerful calculator pencil piece paper sure far computer concerned home computer powerful cheap commodore breadbin cray supercomputer scale minicomputer like cost usd big boy cost million million even technology matured price stayed range cray pictured cost million hand cost complete started within year two fell swear read somewhere final machine roll production line somewhere germany commodore like every home computer meant powerful meant cheap enough regular people could afford useful enough regular people would actually willing part hundred dollar one cpu universal computation could buck money mainframe buy besides memory storage important also expensive turn got lot best analogy come asking difference car power wheel wheel pedal motor chassis seat stearing wheel reason one order magnitude expensive effectively toy cpu miniature functional model cpu mom dad could buy timmy turing completeness turing completeness named alan turing significant every plausible design computing device far advanced emulated universal turing machine thus machine act universal turing machine principle perform calculation programmable computer capable http enwikipediaorgwikituringcompleteness computability theory universality computation long computing device posse minimum necessary feature turing completeness used simulate computing device matter complex titillating idea problem universal computational equivalence assumes unlimited amount memory nt stipulate length time required one fully simulate know say theory theory turing complete processor implemented one instruction called one instruction set computer oisc flavor cisc risc one would ever build computer around architecture used teaching learning computation cpu one instruction like ultimate toy model http smartsimorguk make powerful cpu crank clockrate oisc cpu parallelize across wider bus give absurdly huge amount memory clearly going work power cpu nt merely measured clock speed width bus thing equal cpu unit time speed wider bus practical limit speed memory capacity make impossible scale cpu power using cycle per second alone many property cpu contribute power difficult understand explain programmer try feature cpu tiny nutshell retrieves instruction memory operates advance next instruction repeat ad infinitum operation instruct cpu treat memory address data data read memory transformed way including combined data optionally written back memory crucial element computation instruction called branch instruction change address whence retrieve next instruction based upon conditional result previous operation said variation cpu instruction set work world without end question becomes instruction available memory loaded addressed much data loaded sort transformation datum undergo many condition answer question different sometimes wildly different every type cpu architecture war waged friendship forged shattered arguing best way implement answer us instruction set compatible variant addressing mode let start looking addressing mode cpu find data load numerous addressing mode implied immediate relative absolute zero page indirect absolute indexed zero page indexed indexed indirect indirect indexed look complicated first really complicated see take example cpu read instruction kind instruction need operate datum datum come instruction operates state already present inside cpu nt need get extra data memory say instruction us implied addressing pretty basic another example cpu read instruction cpu read byte data memory address immediately follows address whence instruction loaded call addressing mode immediate obvious reason little complicated much let step instruction read tell cpu read next two byte immediately following byte data operated address whence load third byte instruction datum called absolute addressing byte following instruction nt data point data form indirection limited form pointer generally speaking fixed absolute value let crank instruction tell cpu read byte byte data address address nt hold byte data address data read location mode call indirect indexed indexed part added complication return variation addressing mode brief overview show general scope flexibility addressing think compared theoretical oisc architecture nt addressing mode yet insane circuitous anything addressing mode accomplish ca nt efficiently addressing mode cool sophisticated architecture many addressing mode addressing mode convoluted like two dimensionally indexed combining relative offset indexed table like oisc inefficiently contort way ready native addressing mode probably contort way simulating complex addressing mode wo nt fast wo nt pretty see bit matter practice register general register accumulator two index register x bit wide register temporary memory location within cpu instruction copy data memory register register memory instruction copying content one register another way move data one place memory another explicitly pas one register example load one location store different location move block memory way one byte time register temporary holding place content different register implicitly used operand various instruction exactly used though constrained example absolute mode version loading three register register x loaded directly content absolute memory address simple clean want use one sophisticated addressing mode absolute indexed mode nt talked yet data loaded address composed realtime adding value one index register absolute address cool useful many situation x used index called index register want load accumulator either x may used index want load x used index want load x naturally used index impossible load x using either accumulator index restriction live get much restrictive though remember cranked mode even constrained first address pointer indexed must zero page mean pointer must somewhere within first memory available ai nt start copy first next register used index accumulator register load incredible mode used fancy footwork see soon enough time used particular way surely easy imagine cpu architecture addressing mode without constraint nt addressing mode tight constraint though even simplest implied mode instruction limitation would nt expect example inx iny dex dey used increment decrement one x register respectively way similarly increment decrement accumulator despite often would useful flip side accumulator thing x ca nt obvious implied mode pushing pulling stack accumulator directly pushed stack anything else want stack pas accumulator mentioned earlier content one register copied another implied mode addressing well x exchanged accumulator way copy x directly vice versa without passing writing memory reading back arithmetic support addition subtraction carry well handful operation logical eor shifting rolling bit left right operation applied accumulator directly memory referenced via restricted set addressing mode roll x register example perform eor bitwise operation register add x x add x cpu add instruction add something memory accumulator period easy picture advanced cpu none restriction minicomputer example announced dec eight general purpose register used far flexibly kind crazy addressing mode many thing single step require several instruction juggling data around pull jump branch jumping saving return address important allows modularization reusability code also enables recursion powerful algorithmic tool far computation theory concerned conditional branching even fundamental conditional branching one key ingredient make computer computer branching allows implementation flow control turn enables loop higher level flow control mechanism nt much say branching us single signed byte branch argument branch instruction use relative addressing mode therefore branch either forward backwards relative execution address currently move byte either direction jumping bit complex let talk depth two type jump instruction jmp jsr jmp equivalent goto basic jsr like gosub although jmp easily misused produce spaghetti code sometimes necessary implement long branch example exactly jmp work remember accumulator x general purpose register although specialized us register special purpose one program counter register program counter supply value address bus whenever cpu reading writing data reading writing whatever address set address bus usually program counter provides address program counter automatically increment part implicit behavior instruction mechanism cpu get next byte proceeds next instruction example let say program counter currently cpu read instruction address let say instruction immediate mode lda instruction take one argument put directly accumulator accomplish instruction automatically increment program counter changing value address bus cpu read another byte data bus put accumulator program counter get incremented ready cpu read next instruction data bus let take jmp instruction come two addressing mode absolute indirect absolute lda load next two byte temporary space absolute jmp loading two byte however jmp copy program counter register bingo bango cpu proceeds next instruction reading next address whatever value program counter lda load byte accumulator ldx ldy load byte x register respectively think jmp le lpc load program counter cool elegance see put smile face know absolute jmp work know indirect lda work easy understand indirect jmp would work load two byte following instruction rather use directly address set program counter temporarily used address whence read two byte byte put program counter execution continues cool time program calling jsr rather jmp know jmp work jsr work also simple executing jsr current value program counter pushed stack everything else proceeds jmp cpu executes rts instruction return continue execution following jsr two byte pulled stack used set program counter problem wow sound great problem ten addressing mode mentioned earlier jmp support two addressing mode absolute indirect without support form indexing jsr far common available single addressing absolute restriction almost unbelievable probably get point cpu architecture equivalent jmp jsr might available multitude flexible addressing mode whereas want jsr something dynamic would use instruction read target address write byte immediately following jsr instruction alternative want indirect jsr jsr indirect jmp either option consequence become obvious discus object oriented code structuring object oriented code may seem like took long detour talk specific feature limitation finally coming back main point post necessary understand cpu work see might used execute object oriented code looked addressing mode register jump branch relevant discussion object oriented code previous post object orientation gave rather shallow difficult follow description theoretical principle rather repeat misadventure instead stick actually trying accomplish leave exercise reader lookup terminology unfamiliar also many thing stated earlier post wrong nt fully thought structure code heck probably still nt got sorted object orientation object oriented code shall often shortened oo ooc brevity ooc two main entity need discus class object usually object described instance class nt capture entity exist memory implemented first post oo really nt straight head supposed work first code physically broken supporting system routine found toolkit module structured like system module toolkit code separate many toolkit file collected together simply scattered amongst rest system file reason necessary class standard practice get suite file suite consists object header ostks tkviews class header ostkh tkviewh class implementation ostk tkviewa class essentially set routine designed operate object certain type object essentially structure property conforms precisely object header belongs identifies class important clear idea difference set routine define behavior class stored one place memory part system code somewhere physically near toolkit system module object hand initially representation memory system ship object header file included application utility source code object header file consists list label define property name offset base address object header also defines size object sum size property many copy object many application need object created essentially allocating block memory size object newly allocated block memory generic block allocated memory need initialization come life object belongs class note take moment note object oriented toolkit take dynamic memory allocation granted reason memory allocation one service o provides class object relationship critically important link class object make work class header file consists list label define name routine specify offset jump table begin base address implementation class class routine designed operate object currently focus called method class implementation may routine one made public via jump table jump table defines class interface class application code prior class jump table two word first pointer class super class super class pointer point place memory another class implementation begin super class pointer jump table etc super class pointer link class together inheritance hierarchy soon root class class class descend identified null super class pointer second property immediately following super class pointer size class object size class definition size object structure must dynamically allocated instantiate class new object root class o toolkit called tkobj short toolkit object class header tkobj defines two method object header defines one property property called isa stand pointer class implementation object belongs every toolkit object center isa pointer fact isa property necessary block allocated memory object two method init delete tkobj implementation init abstract placeholder nt actually anything implemented subclass init method set isa pointer done elsewhere get calling method isa pointer set nt possible delete method one thing unallocates memory previously allocated object okay create new object remember application written version o need remain compatible version etc ran problem application find system routine runtime size module offering routine changing o version o version similar problem application code find class implementation aside people pointed dynamic linking shared object problem solved long time ago reinventing wheel big boy computer shared object contain standardized symbol table offset library listed alongside human readable text label data type code application must also include symbol name need access externally runtime symbol offset looked string comparison address substituted standard system insanely inefficient unix command line tool nm used list shared object symbol table used checkout macos one solitary library megabyte code symbol table hold entry string label alone total kilobyte data sort extravagance acceptable computer memory measured range hundred megabyte ten gigabyte acceptable computer total addressable memory reinventing wheel also fun solve old problem news way discussed last month post clipboard o implement equivalent mimetypes mimetypes typically human readable string text inefficient deal memory unbelievably precious instead datatypes header file included o application assembled list label single byte integer one byte type provides possible base datatypes one byte subtype possible maximum datatypes far o application practice ever support using text string simply overkill similarly toolkit provides set class along header file class file called classesh enumerates class class regardless hierarchically related assigned unique single byte identifier put hard limit number class providable toolkit limit never reached one run memory way reaching limit two even iphone uikit including foundation class iphone version o toolkit class toolkit begin life approximately class maybe fewer original goal consist class bit sparse planning future post discus toolkit class hierarchy wo nt going detail post instantiate class create new object call classptr toolkit module routine accessed dynamically like o module routine pas class id code label classptr assembled toolkit module along side rest o module time toolkit class therefore know address class return regptr xy lohi byte start class next call tknew toolkit module pas pointer class allows call classptr immediately follow call tknew also allows call tknew pas pointer custom class provided application application implement custom class custom class super class pointer pointed whatever class toolkit inherits done app init routine making front call classptr tknew us pointer class access object size property us size make memory allocation take pointer class writes first two byte object two byte isa pointer tknew return regptr newly created object see entity related together let take look visualized outer box represent general area memory red box part toolkit module system memory area content allocated o boot process system module loaded orange box application static memory area allocated application launched custom class tkcustomview implemented application yellow box heap memory memory initially free application launched application request chunk set aside memory pool make allocation application run creates instance class object allocated upon request application heap memory pool three class represented two built toolkit module tkobj tkview consists two word followed jump table tkobj super pointer null root object tkview super pointer point start tkobj technically start tkobj memory address tkobj super pointer resides third class provided application order application custom class inherit toolkit class super pointer must set point class inherits diagram point tkview connection established application runtime usually application init routine address simply hardcoded must looked runtime application run different version o exact address tkview almost certainly change version application heap memory two toolkit view object represented nested together form part ui application nesting property define visual relationship screen also path mouse event travel hittesting event processing first object labeled parentview instance tkview note first property isa pointer point tkview parentview many property parent child sibling pointer node relationship defined tkview class note diagram illustration purpose actual layout property different many many parentview parent pointer null object root view hierarchy parentview child pointer point another view object view object parent property point back parentview childview isa pointer point tkcustomview childview instance tkcustomview small sample hierarchy chunk ui might look like pointer link entity together class object call method far discussed object class structured memory subclass point super class forming inheritance chain view object point parent view first child sibling view forming hierarchical node tree object also isa property point class thereby identifying kind object question pointer work used code implement behavior object class variable pointing object want able call one object method assembly code need address method jsr visually follow link pointer easily enough myobject isa methodoffset actually jump sophistication cpu architecture come play imagine cpu architect designing cpu optimized software knew common workflow would jump offset jump table pointed first two byte structure pointed another could theory build cpu directly could special jsr mode designed method call given pointer would pointer well perhaps special purpose cpu register could double reference context within method code ca nt unpack stage bit need look method address method code running code need reference back object must generic reference method implementation always use standard generic mean accessing calling object property recall one addressing mode suitable looking offset pointer indirect index addressing mode thank god mode exists least even work pointer indirect indexed addressing must zero page o reserve byte zp pointer toolkit header defines class first step copy pointer object main memory pointer via pointer isa property read next step copy isa property class pointer class pointer use label offset jump table desired method jsr wait fast remember support indirect indexed jsr instruction instead o reserve byte workspace memory jmp instruction plus two byte address next step use indirect indexed ldas read address routine write method redirect vector finally jsr start address method redirect jump u method code couple note get method code first basic us similar technique commodore inner space anthology address labelled jump vector function consistency sake o us address method redirect second still passing parameter primarily via register much faster via stack mean able indirect indexed jsr would require register index would make impossible use pas data already register passing data would undesirable limitation configure method redirect vector set register passing data method finally jsr redirect work sound like big pain as make thing easier toolkit helper routine one ptrthis take regptr object writes pointer fall another helper routine setclass setclass read isa pointer copy class one call configure class one helper routine getmethod take offset method look via class pointer writes method redirect vector thus call class method would look like following actually look fairly reasonable use macro grab regptr local variable call ptrthis set class load offset method called call getmethod boom everything configured ready go set register input parameter depending method take case using macro grab regptr another object another local variable jsr sysjmp method called method code running need able operate property calling object well easy pointer zero page already point object method code easily use indirect indexing read property object like inheritance superclass method object oriented programming panacea advantage procedural design one powerful feature inheritance core class already lot important work tkview example support multiple child hittesting pas event view hierarchy come along another view specialized tkview build something like tksplit manages two child view organizes laid one add bit event handling let user move split position small extension tkview tkview nt need reimplemented nt let say tksplit want make sure never two child view added implement addchild method time addchild called count number child already already two raise exception ca nt manage nt yet two child pas control tkview implementation addchild manipulate node pointer tkview implementation finished tksplit bit work override position resize mask child shall pas work tkview recall method executing pointer class pointer set class pointed class defines method method call superclass version must lookup address method jump situation similar earlier cpu sophisticated another instance could jump superclass pointer offset jump table luck must broken several step first want read superclass pointer indirect indexed addressing class pointer need write address back class pointer next lookup method offset new class pointer write method redirect vector finally configure register pas data jsr method redirect overwrite class pointer strange side effect class pointer longer isa property object object isa point tksplit class point tkview actually important principle know superclass implement version method suppose tkview implementation wanted call superclass implementation would would reference superclass pointer current class pointer nt overwrite class tkview tkview implementation would nt get reference superclass would get reference would bad would produce recursive infinite loop would overflow stack crash instantly calling superclass method overwrites class pointer must therefore get restored call toolkit provides another convenience routine setsuper setsuper replaces class class superclass make another call getmethod passing method offset fetch superclass version method put method redirect toolkit also provides convenient macro supermethod call one step load register pas argument jsr sysjmp immediately work must restore class pointer restored directly memory address class method know belongs say tksplit case whole process look code faster jmps strange link take bit mental gymnastics wrap head around exactly execution flow given complex connection class superclass especially throw node hierarchy one class superclass method calling another class method bit head spinner shortcut take efficiency sake gotchas talk system provides class starter class assembled presence source code given build o additionally application may provide custom class custom class extend one subclassing custom class assembled together presence source code sometimes custom class need make call system class external call custom class also make internal call call method custom class system class make call internal system internal call made efficient external call skipping lookup redirection example tksplit know inherits tkview also know tkview memory even future version o tkview change place memory tksplit get updated still know tkview tksplit call tkview version addchild jumping directly absolute start address tkview plus method offset must still update class pointer though would look see longer need call supermethod mean method offset nt need loaded register first address nt need copied method redirect vector nt need jump redirect thing need manually update class point superclass done one line macro jsr jump absolute address jump table entry addchild provided tkview gotchas seems pretty cool make wonder well else could take shortcut take shortcut class course reason work internal system class however another situation kind odd watch call strange link method class divided two broad category primary secondary primary method one act directly upon object property machine like commodore may well method primary bigger computer memory method may fact secondary least o class method end secondary secondary method obtains data calling method let say implemented class bunch method primary secondary implementation method belonging one class naturally together source code file routine label jump table top source class call implementation secondary method need call another method object implementation method right see eyeball handy label everything jsr label would efficient right problem current method executing may called superclass version object subclass class word method executing could class isa could also class different isa different mistake simply jsr convenient label elsewhere source code file happen method call version method implemented class belongs subclass well calling subclass method first may case subclass eventually call superclass version method routine conveniently see could easily subclass totally different way handling data head spinning get real gotcha run working connection work bottom line implementation method want call another method class must calling version implemented isa calling method much like calling superclass method first set class isa pointer calling setclass lookup method copy method redirect getmethod jsr method redirect afterwards restore class method class convenient macro called supermethod also macro called thismethod step would look like helpful toolkit routine routine toolkit module helpful working object conclude post want discus one others relate view assembled together parentchild hierarchy save upcoming post delf toolkit class instanceof time necessary know whether given object instance class example perhaps want know class inherits tkview would want know inherits tkview know call method tkview support even something else like tkbutton test object class comparing known class pointer isa pointer nt match nt tell whether class inherits one care determine must follow chain superclass pointer isa superclass superclass null compare superclass find match find null superclass pointer know nt inherit comparison class work done instanceof final thought time around think nailed class actually work critical move separating object structure class structure giving object isa pointer giving class structure superclass pointer figured separate zero page pointer class followed soon make sense allowing method generically call method superclass method able invoke method superclass although designed mid earliest object oriented programming concept developed designed work object oriented code cpu designed oop mind cpu could register designed function class pointer method property could looked indexing register pointer could pushed pulled stack automatically upon calling method another object thing ca nt nt mean impossible program object oriented pattern need make careful use zero page use handful macro helper routine keep u track next post toolkit delve class hierarchy class used together build responsive ui like see read one weblog post free first thank interest make producing content feel worthwhile love hear input feedback forum best answer every question creating o documenting progress along way give something contribute commodore community please consider purchasing one item currently offering making small donation help continue bring update technical discussion programming reference generous support greatly appreciated greg naçu want support work eprom usd shippinghandling stock patch usd patch usd buy commodore logo patch make donation little cup coffee another way help use referral link hosted digital ocean droplet digital ocean cloud hosting platform built developer make simple get started intuitive administrative tool reasonable price scale need grow sign referral link get credit spent get looking cloud platform host website web app sign digital ocean refereral link save money help time want support hard work please enable javascript view comment powered disqus
238,Lobsters,osdev,OS,Fsyncgate,https://danluu.com/fsyncgate/,fsyncgate,fsyncgate error fsync unrecovarable talk file safety mobilefriendly nonbloated format http http http http wwwenterprisedbcom http githubcomringercscrapcodeblobmastertestcasesfsyncerrorclearc http appear succeed http http http http http http http gitkernelorgpubscmlinuxkernelgittorvaldslinuxgitcommit http gitkernelorgpubscmlinuxkernelgittorvaldslinuxgitcommit http http githubcomnetbsdsrcblobtrunksyskernvfsbioc http githubcomopenbsdsrcblobmastersyskernvfsbioc http githubcomfreebsdfreebsdblobmastersyskernvfsbioc http http githubcomillumosillumosgateblobmasterusrsrcutscommonosbioc http http githubcomappledarwinxnublobmasterbsdvfsvfsbioc http http githubcomtorvaldslinuxblobmastermmfilemapc http githubcomtorvaldslinuxblobmasterfsopenc http githubcomtorvaldslinuxblobmasterfsopenc http githubcomtorvaldslinuxblobmasterfsopenc http githubcomringercscrapcodetreemastertestcasesfsyncerrorclear http githubcomtorvaldslinuxblobmasterfsopenc http githubcomringercscrapcodetreemaster http http http githubcomringercscrapcode http githubcomringercscrapcodeblobmastertestcasesfsyncerrorclearstandalonefsyncerrorclearc http wwwsqliteorgatomiccommithtml http http http http http mediumcom http http githubcomiovisorbcc http http gitpostgresqlorggitweb ppostgresqlgit acommitdiff http danluucomfileconsistency http http http wikipostgresqlorgwikifsyncerrors http forumsawsamazoncomthreadjspa http http http http http githubcomringercscrapcodeblobmastertestcasesfsyncerrorclearc http http http paquierxyz http paquierxyz http paquierxyz jd mandpromptcom http paquierxyz martin htvollde andres razelde andres razelde andres razelde mawilcox rosoftcom andres razelde http http wwwintelcomcontent mawilcox rosoftcom jack ecz,fsyncgate error fsync unrecovarable archive original fsyncgate email thread posted wanted link would fit slide talk file safety mobilefriendly nonbloated format craig ringer craig dot com subject postgresql handling fsync error unsafe risk data loss least xfs hi time ago ran issue user encountered data corruption storage error postgresql played part corruption allowing checkpoint fatal error tl dr pg panic fsync eio return retrying fsync ok least linux fsync return success mean writes since last fsync hit disk assume mean writes since last successful fsync hit disk pg wrote block went o dirty buffer writeback writeback failed due underlying storage error block io layer xfs marked writeback page failed aseio way tell app failure pg called fsync fd next checkpoint fsync returned eio flagged page tell pg previous async write failed pg treated checkpoint failed nt advance redo start position control file good far retried checkpoint retried fsync retry succeeded prior fsync cleared aseio bad page flag write never made disk completed checkpoint merrily carried way whoop data loss clearerrorandcontinue behaviour fsync documented far tell fsync returning eio unless new linux manpages patch wrote add see posix standard given guarantee happens fsync failure probably wrong assume retrying fsync safe server using errorsremountro problem would nt occurred first io error would remounted f stopped pg continuing xfs nt option may situation occur involving lvm andor multipath nt comprehensively dug detail yet proved possible recover system faking backup label first incorrectlysuccessful checkpoint forcing redo repeat write lost block mess posted underlying fsync issue time ago http nt chance follow pg specific looking problem nt come good answer think panic let redo sort repeating failed write repeat work since last checkpoint api offered async buffered writes fsync offer u way find page failed ca nt selectively redo write think know relfilenode associated fd failed fsync much alternative seems sort potentially complex onlineredo scheme replay wal relation fsync error otherwise servicing query normally likely extremely errorprone hard test trying solve case filesystems whole db would grind halt anyway looked whether solve use aio api instead mess even worse tell ca nt even reliably guarantee fsync linux kernel version already panic fsync failure wal segment need data fork least eio nt bad seems afaics fsync return eio case stopping world anyway many f u rather lot pgfsync caller could handle casebycase one tempted make pgfsync intercept eio panic thought tom lane tgl ss dot pgh dot pa dot u craig ringer writes tl dr pg panic fsync eio return surely jest retrying fsync ok least linux fsync return success mean writes since last fsync hit disk assume mean writes since last successful fsync hit disk actually case need push back kernel brain damage describing fsync would completely useless moreover posix entirely clear successful fsync mean preceding writes file completed full stop nt matter issued michael paquier michael paquier dot xyz tue mar tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest caller pgfsync backend code careful enough check returned status sometimes retries like mdsync proposed would regression thomas munro thomas dot munro enterprisedb dot com thu mar pm michael paquier wrote tue mar tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest caller pgfsync backend code careful enough check returned status sometimes retries like mdsync proposed would regression craig phenomenon described second issue reporting writeback error discussed article http current kernel might report writeback error fsync call number way fail happen speechless justin pryzby pryzby telsasoft dot com thu mar michael paquier wrote tue mar tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest caller pgfsync backend code careful enough check returned status sometimes retries like mdsync proposed would regression retries source problem first fsync return eio also clear error causing fsync data return success note see might useful panic eio retry enospc thu mar thomas munro wrote craig phenomenon described second issue reporting writeback error discussed article http worse article acknowledges behavior without apparently suggesting change storing value file structure important benefit make possible report writeback error exactly every process call fsync current kernel first caller error occurs chance seeing error information believe reproduced problem behavior using dmsetup error target see attached strace look like kernel linux smp thu jul utc gnulinux devmappereio ordwrocreat enospc space left device fgetfl flag ordwroappendolargefile null strdevmakedev write space left devic space left device eio inputoutput error fgetfl flag ordwroappendolargefile strdevmakedev fsync inputoutput errorn inputoutput error devmappereio ordwrocreat eio nt seen initially due writeback page cache enospc due small device original io error reported fsync good original fd closed file reopened fsync file stilldirty dataeio return success bad sure dup guess glibc think perror write separate fd also note close also returned success might think exonerates fsync think may problematic case byte certainly never got written dm error failure status lost following fsync get exact behavior break one write loop avoid enospc thomas munro thomas dot munro enterprisedb dot com thu mar pm justin pryzby wrote retries source problem first fsync return eio also clear error causing fsync data return success failing grok error flag even matter whether single bit counter described patch write back failed page still dirty future call fsync need try try flush presumably fail unless happens succeed time around craig ringer craig dot com march thomas munro wrote thu mar pm justin pryzby wrote retries source problem first fsync return eio also clear error causing fsync data return success failing grok error flag even matter whether single bit counter described patch write back failed page still dirty future call fsync need try try flush presumably fail unless happens succeed time around http wwwenterprisedbcom think nt appear work way see error devicemapper destination mapped part volume wrote test case http githubcomringercscrapcodeblobmastertestcasesfsyncerrorclearc nt pretend kernel behaviour sane possible made error analysis since observed wild seen test case strongly suspect described happening braindead presumably kernel mark page clean dispatch io subsystem nt dirty io error nt dug deep kernel side see stackoverflow post detail found kernel code analysis craig ringer craig dot com march thomas munro wrote thu mar pm michael paquier wrote tue mar tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest caller pgfsync backend code careful enough check returned status sometimes retries like mdsync proposed would regression craig phenomenon described second issue reporting writeback error discussed article http variant look problem case kernel tell u error forgets yes seems like variant statement current kernel might report writeback error fsync call number way fail happen speechless yeah bit nut astonished saw behaviour appears undocumented craig ringer craig dot com march michael paquier wrote tue mar tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest caller pgfsync backend code careful enough check returned status sometimes retries like mdsync proposed would regression covered original post yes check return value fsyncs heap file error aborting checkpoint retry checkpoint later retry fsync appear succeed kernel forgot lost writes telling u first time check error code return success complete checkpoint move retried fsync writes fsync lost data rather failed detect kernel checkpoint bad could completed problem keep retrying checkpoint without repeating writes leading checkpoint retrying fsync nt pretend kernel behaviour sane better deal anyway craig ringer craig dot com march tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest quite serious worse quite possibly enospc well avoid similar lostpagewrite issue necessary errorsremountro f stop u dead track nt pretend sane kernel behaviour imo crazy going lose write minimum mark fd broken fsync anything else succeed fd app care durability must repeat whole set work since prior succesful fsync reporting forgetting madness even convince kernel folk platform behave long kernel use better deal crazy please see stackoverflow post kernellevel explanation note also test case link http retrying fsync ok least linux fsync return success mean writes since last fsync hit disk assume mean writes since last successful fsync hit disk actually case need push back kernel brain damage describing fsync would completely useless useless telling u something think mean promise seems give u report error everything useless throw toy close reopen everything redo last knowngood state though tomas posted provides rather weaker guarantee thought area see lwnnet article linked moreover posix entirely clear successful fsync mean preceding writes file completed full stop nt matter issued ca nt find anything say please quote relevant spec working http state fsync function shall request data open file descriptor named fildes transferred storage device associated file described fildes nature transfer implementationdefined fsync function shall return system completed action error detected reading posix specify happens error detected nt say error persistent subsequent call must also report error also say fsync function fails outstanding io operation guaranteed completed nt clarify matter much either read mean error reported io operation guarantee operation ever completed even subsequent fsync return success seeking defend kernel seems rather saying might see similar behaviour platform crazy nt looked past linux yet though thomas munro thomas dot munro enterprisedb dot com thu mar pm craig ringer wrote march tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest quite serious worse quite possibly enospc well avoid similar lostpagewrite issue found discussion kernel hacker jeff layton http said stackoverflow writeup seems want scheme page stay dirty writeback failure try fsync note never case linux hard writeback failure afaik program definitely assume behavior article say thing couple different way ie writeback failure leaf page neither written disk successfully marked dirty reading various article correctly situation even worse errseqt stuff landed fixed case completely unreported writeback failure due sharing pgerror writeback read error certain filesystems nt address clean page problem yeah see want panic moreover posix entirely clear successful fsync mean preceding writes file completed full stop nt matter issued ca nt find anything say please quote relevant spec working http state fsync function shall request data open file descriptor named fildes transferred storage device associated file described fildes nature transfer implementationdefined fsync function shall return system completed action error detected reading posix specify happens error detected nt say error persistent subsequent call must also report error also say fwiw reading tom say data open file descriptor without qualification special treatment error seeking defend kernel seems rather saying might see similar behaviour platform crazy nt looked past linux yet though see reason think operating system would behave way without strong evidence openly acknowledged mess surprise filesystem summit article really qualified comment cursory glance freebsd vfsbioc think hope see code near comment failed write redirty craig ringer craig dot com march thomas munro wrote thu mar pm craig ringer wrote march tom lane wrote craig ringer writes tl dr pg panic fsync eio return surely jest quite serious worse quite possibly enospc well avoid similar lostpagewrite issue found discussion kernel hacker jeff layton http said stackoverflow writeup seems want scheme page stay dirty writeback failure try fsync note never case linux hard writeback failure afaik program definitely assume behavior article say thing couple different way ie writeback failure leaf page neither written disk successfully marked dirty reading various article correctly situation even worse errseqt stuff landed fixed case completely unreported writeback failure due sharing pgerror writeback read error certain filesystems nt address clean page problem yeah see want panic way one seeking defend kernel seems rather saying might see similar behaviour platform crazy nt looked past linux yet though see reason think operating system would behave way without strong evidence openly acknowledged mess surprise filesystem summit article really qualified comment cursory glance freebsd vfsbioc think hope see code near comment failed write redirty ok reassuring nt help u platform great majority user deploy linux panic hrm catalin iacob iacobcatalin gmail dot com thu mar pm thomas munro wrote found discussion kernel hacker jeff layton http said stackoverflow writeup seems want scheme page stay dirty writeback failure try fsync note never case linux hard writeback failure afaik program definitely assume behavior bit comment question pg option point assumption repeat fsync point case shut database perform recovery wal jeff layton seems agree panic appropriate response replaying wal synchronously sound like simplest approach get error fsync uncommon occurrence part fall back slow synchronous error recovery mode occurs probably want right confirms errseqt patch always detecting main thing working better guarantee actually get error occurs rather silently corrupting data circumstance occur require cornercases think need make sure nt occur jeff comment pull request merged errseqt worth reading well http gitkernelorgpubscmlinuxkernelgittorvaldslinuxgitcommit article say thing couple different way ie writeback failure leaf page neither written disk successfully marked dirty reading various article correctly situation even worse errseqt stuff landed fixed case completely unreported writeback failure due sharing pgerror writeback read error certain filesystems nt address clean page problem indeed exactly read well opinion formed independently reading sentence errseqt patch landed way recently yeah see want panic indeed even leaf question mark kernel version point pretty much everything even detecting reliably messy thomas munro thomas dot munro enterprisedb dot com fri mar catalin iacob wrote jeff comment pull request merged errseqt worth reading well http gitkernelorgpubscmlinuxkernelgittorvaldslinuxgitcommit wow look like may separate question filesystem adopted new infrastructure yeah see want panic indeed even leaf question mark kernel version point pretty much everything even detecting reliably messy preerrseqt problem beyond control nothing userspace except perhaps abandon osbuffered io big project need aware problem exists certain kernel version grateful layton fixing dropped dirty flag problem something view something whatever might think design choice andrew gierth pointed offlist chat time reached state postgresql buffer kernel buffer clean might reused another block time data might gone known universe nt even option rewrite buffer general recovery option thank craig chasing proposal linux anthony iliopoulos ailiop altatus dot com fri mar thomas munro wrote yeah see want panic indeed even leaf question mark kernel version point pretty much everything even detecting reliably messy may still way reliably detect older kernel version userspace messy whatsoever eio error kernel restore dirty page flag flip error flag failed page one could mmap file question obtain pfns via procpidpagemap enumerate match one error flag switched via prockpageflags could serve least detection mechanism one could also use info logically map page failed io back original file offset potentially retry io file range cover failed page idea tested craig ringer craig dot com march anthony iliopoulos wrote fri mar thomas munro wrote yeah see want panic indeed even leaf question mark kernel version point pretty much everything even detecting reliably messy may still way reliably detect older kernel version userspace messy whatsoever eio error kernel restore dirty page flag flip error flag failed page one could mmap file question obtain pfns via procpidpagemap enumerate match one error flag switched via prockpageflags could serve least detection mechanism one could also use info logically map page failed io back original file offset potentially retry io file range cover failed page idea tested sound like huge amount complexity uncertainty behave kerneltokernel negligble benefit exploring idea selective recovery one relfilenode based assumption know filenode related fd failed fsync could redo wal relation fails test complex niche case nt happen first place probably bug grow bug bitrot time remember errorsremountro get shut even harder panic use big hammer send patch week tom lane tgl ss dot pgh dot pa dot u craig ringer writes use big hammer bitch loudly publicly broken kernel behavior make enough stink maybe get fixed michael paquier michael paquier dot xyz sat mar tom lane wrote craig ringer writes use big hammer bitch loudly publicly broken kernel behavior make enough stink maybe get fixed wo nt fix anything released already per information gathered something done anyway discussion thread spreading quite lot actually handling thing lowlevel look like better plan backend tool like pgbasebackup pgdump also issue fsync data created equivalent exit call fileutilsc failure logged stderr considered fatal anthony iliopoulos ailiop altatus dot com sun apr craig ringer wrote march anthony iliopoulos ailiop altatus dot com wrote fri mar thomas munro wrote yeah see want panic indeed even leaf question mark kernel version point pretty much everything even detecting reliably messy may still way reliably detect older kernel version userspace messy whatsoever eio error kernel restore dirty page flag flip error flag failed page one could mmap file question obtain pfns via procpidpagemap enumerate match one error flag switched via prockpageflags could serve least detection mechanism one could also use info logically map page failed io back original file offset potentially retry io file range cover failed page idea tested sound like huge amount complexity uncertainty behave kerneltokernel negligble benefit interface around since kernel time rather stable merely responding original post comment regarding way finding page failed assume indeed would benefit especially since error usually transient typically come hard medium fault although filesystem could theoretically mask error allocating different logical block aware implementation currently exploring idea selective recovery one relfilenode based assumption know filenode related fd failed fsync could redo wal relation fails test complex niche case nt happen first place probably bug grow bug bitrot time fully agree case sufficiently rare complex possibly nonmaintainable solution really warranted remember errorsremountro get shut even harder panic use big hammer entirely sure mean pg really treat write error fatal also kind error detects option superblock level govern metadata rather actual data writes recall buffered anyway actual device io take place time write anthony iliopoulos ailiop altatus dot com sat mar tom lane wrote craig ringer writes use big hammer bitch loudly publicly broken kernel behavior make enough stink maybe get fixed likely fixed beyond done already manpage patch errseqt fix reporting level issue kernel need deal hard io error level somehow since error typically persist redirtying page would really solve problem unless filesystem remaps request different block assuming device alive keeping around dirty page possibly written essentially memory leak page would stay around even application exited thomas munro thomas dot munro enterprisedb dot com fri mar thomas munro wrote linux apparently optimistic looked freebsd keep page around dirties retry bsds apparently nt freebsd changed tell source linux openbsd netbsd retrying fsync eio lie freebsd illumos retrying fsync eio tell truth maybe driveby assessment kernel routine wrong someone correct starting think might better assume worst system perhaps guc default panicking user rare os could turn even sure failure mode great anyway worth two behaviour thought http http githubcomnetbsdsrcblobtrunksyskernvfsbioc http githubcomopenbsdsrcblobmastersyskernvfsbioc http githubcomfreebsdfreebsdblobmastersyskernvfsbioc http http githubcomillumosillumosgateblobmasterusrsrcutscommonosbioc craig ringer craig dot com april thomas munro wrote maybe driveby assessment kernel routine wrong someone correct starting think might better assume worst system perhaps guc default panicking user rare os could turn even sure failure mode great anyway worth two behaviour thought see little benefit panicing unconditionally eio really nt happen want pretty conservative adopt dataprotective approach rather worried enospc look like might necessary recall finding test case kernel code reading really nt want respond possiblytransient enospc panicing whole server unnecessarily btw support team presently working two separate issue enospc resulted db corruption though neither involve log lost page writes planning taking time tomorrow write torture tester pg enospc handling verify enospc handling test case linked original stackoverflow post eio issue see point anything panicing unconditionally concern enospc try harder fail nicely whenever possibly andres freund andres anarazel dot de hi anthony iliopoulos wrote sat mar tom lane wrote craig ringer writes use big hammer bitch loudly publicly broken kernel behavior make enough stink maybe get fixed likely fixed beyond done already manpage patch errseqt fix reporting level issue kernel need deal hard io error level somehow since error typically persist redirtying page would really solve problem unless filesystem remaps request different block assuming device alive throwing away dirty page persisting error seems lot reasonable provide fcntl whatever extension clear error status case application want gracefully deal case keeping around dirty page possibly written essentially memory leak page would stay around even application exited dirty page need kept around case persistent error nt think lack automatic recovery case anybody complaining error go away reasonable way separate error potential transient error anthony iliopoulos ailiop altatus dot com mon apr andres freund wrote hi anthony iliopoulos wrote sat mar tom lane wrote craig ringer writes use big hammer bitch loudly publicly broken kernel behavior make enough stink maybe get fixed likely fixed beyond done already manpage patch errseqt fix reporting level issue kernel need deal hard io error level somehow since error typically persist redirtying page would really solve problem unless filesystem remaps request different block assuming device alive throwing away dirty page persisting error seems lot reasonable provide fcntl whatever extension clear error status case application want gracefully deal case given precisely dirty page writtenout practically thrown away semantics fsync fix essentially correct first call indicates writeback error indeed occurred subsequent call reason indicate error assuming error occurred meantime error reporting thus consistent intended semantics sadly properly documented repeated call fsync simply imply kernel retry writeback previouslyfailed page application need aware persisting error fsync level would essentially mean moving application policy kernel andres freund andres anarazel dot de anthony iliopoulos wrote mon apr andres freund wrote throwing away dirty page persisting error seems lot reasonable provide fcntl whatever extension clear error status case application want gracefully deal case given precisely dirty page writtenout practically thrown away semantics fsync fix essentially correct first call indicates writeback error indeed occurred subsequent call reason indicate error assuming error occurred meantime reason except absolutely way know state data application need explicit handling failure one fd might used lot different part application fsyncs one part application might ok failure another requiring explicit action acknowledge thrown away data unknown reason seems entirely reasonable error reporting thus consistent intended semantics sadly properly documented repeated call fsync simply imply kernel retry writeback previouslyfailed page application need aware nt suggested persisting error fsync level would essentially mean moving application policy kernel meh anthony iliopoulos ailiop altatus dot com mon apr andres freund wrote anthony iliopoulos wrote mon apr andres freund wrote throwing away dirty page persisting error seems lot reasonable provide fcntl whatever extension clear error status case application want gracefully deal case given precisely dirty page writtenout practically thrown away semantics fsync fix essentially correct first call indicates writeback error indeed occurred subsequent call reason indicate error assuming error occurred meantime reason except absolutely way know state data application need explicit handling failure one fd might used lot different part application fsyncs one part application might ok failure another requiring explicit action acknowledge thrown away data unknown reason seems entirely reasonable long fsync indicates error first invocation application fully aware point time last call fsync data lost persisting error change add new info contrary add confusion subsequent write fsync page succeed reported failure application need deal first error irrespective subsequent return code fsync conceptually every fsync invocation demarcates epoch report potential error caller need take responsibility particular epoch caller affected potential outcome fsync react error reason calling first place thus masking failure subsequent caller may indeed care stephen frost sfrost snowman dot net greeting anthony iliopoulos ailiop altatus dot com wrote mon apr andres freund wrote anthony iliopoulos wrote mon apr andres freund wrote throwing away dirty page persisting error seems lot reasonable provide fcntl whatever extension clear error status case application want gracefully deal case given precisely dirty page writtenout practically thrown away semantics fsync fix essentially correct first call indicates writeback error indeed occurred subsequent call reason indicate error assuming error occurred meantime reason except absolutely way know state data application need explicit handling failure one fd might used lot different part application fsyncs one part application might ok failure another requiring explicit action acknowledge thrown away data unknown reason seems entirely reasonable long fsync indicates error first invocation application fully aware point time last call fsync data lost persisting error change add new info contrary add confusion subsequent write fsync page succeed reported failure fsync nt reflect status given page however reflects status file descriptor file called notion fsync actually responsible change made file since last fsync call pure foolishness able pas list page data range fsync verify disk perhaps thing would different ca nt ask please flush dirty page associated file descriptor represents file opened disk let u know successful give u way ask specific page written persistant storage would certainly happy use repeatedly try flush page nt synced disk due transient error track case make sure nt incorrectly assume transferred persistent storage application need deal first error irrespective subsequent return code fsync conceptually every fsync invocation demarcates epoch report potential error caller need take responsibility particular epoch deal error realizing failed later retrying fsync get back good everything file descriptor opened sync happily expect truth reality unfortunate lie still page associated file descriptor reality dirty sync disk consider two independent program first one writes file call second one whose job go fsync perhaps async first file second program supposed go write page first one wrote order ensure dirty bit set fsync actually return dirty page written caller affected potential outcome fsync react error reason calling first place thus masking failure subsequent caller may indeed care reacting error fsync call could based documented actually implemented o mean run another fsync see error resolved requiring mean go dirty page previously dirtied actually get subsequent fsync anything really reasonable given program may idea written previously particular reason need know expectation fsync call flush dirty page documented anthony iliopoulos ailiop altatus dot com hi stephen mon apr stephen frost wrote fsync nt reflect status given page however reflects status file descriptor file called notion fsync actually responsible change made file since last fsync call pure foolishness able pas list page data range fsync verify disk perhaps thing would different ca nt ask please flush dirty page associated file descriptor represents file opened disk let u know successful give u way ask specific page written persistant storage would certainly happy use repeatedly try flush page nt synced disk due transient error track case make sure nt incorrectly assume transferred persistent storage indeed fsync simply rather blunt instrument narrow legacy interface changing established semantics matter unreasonable may probably way go would using syncfilerange helpful potential error would apply page cover requested file range caveat though still mess toplevel error reporting mixing caller use fsync care error produce issue clearing error status b errorreporting granularity coarse failure reporting applies entire requested range still nt know particular pagesfile subranges failed writeback c report forget semantics apply repeated invocation syncfilerange call action need taken upon first error encountered particular range application need deal first error irrespective subsequent return code fsync conceptually every fsync invocation demarcates epoch report potential error caller need take responsibility particular epoch deal error realizing failed later retrying fsync get back good everything file descriptor opened sync happily expect truth reality unfortunate lie still page associated file descriptor reality dirty sync disk really turn fsync semantics work though exactly nature error even kernel retained dirty bit failed page retrying persisting disk location would simply fail instead kernel opts marking page clean since recovery strategy reporting caller potentially deal manner sadly bad undocumented convention consider two independent program first one writes file call second one whose job go fsync perhaps async first file second program supposed go write page first one wrote order ensure dirty bit set fsync actually return dirty page written think mind semantics sync rather fsync long application need ensure data persisted storage need retain data heap fsync successful instead discarding relying kernel write pattern roughly like write fsync free rather write free fsync example partition get full upon fsync application chance persist data different location kernel possibly make decision recover caller affected potential outcome fsync react error reason calling first place thus masking failure subsequent caller may indeed care reacting error fsync call could based documented actually implemented o mean run another fsync see error resolved requiring mean go dirty page previously dirtied actually get subsequent fsync anything really reasonable given program may idea written previously particular reason need know expectation fsync call flush dirty page documented think conflating issue o kernel responsible error recovery subsequent fsync would fix problem one clearly design kernel really adopted reason outlined although f layer recovering hard error transparently open discussion seems issue granularity error reporting userspace could benefit finegrained indication failed page file range another issue reporting semantics report clear also design choice made avoid higherresolution error tracking corresponding memory overhead http andres freund andres anarazel dot de anthony iliopoulos wrote would using syncfilerange helpful potential error would apply page cover requested file range caveat though quote syncfilerange warning system call extremely dangerous used portable program none operation writes file metadata therefore unless application strictly performing overwrites alreadyinstantiated disk block guarantee data available crash user interface know write purely write filesystems using copyonwrite semantics eg btrfs overwrite existing allocated block impossible writing preallocated space many filesystems also require call block allocator system call sync disk system call flush disk write cache thus provide data integrity system volatile disk write cache given lack metadata safety seems entirely go use sfr force kernel hand around writing back earlier without throwing away cache content application need deal first error irrespective subsequent return code fsync conceptually every fsync invocation demarcates epoch report potential error caller need take responsibility particular epoch deal error realizing failed later retrying fsync get back good everything file descriptor opened sync happily expect truth reality unfortunate lie still page associated file descriptor reality dirty sync disk really turn fsync semantics work though except freebsd solaris perhaps others exactly nature error even kernel retained dirty bit failed page retrying persisting disk location would simply fail guaranteed think nfs instead kernel opts marking page clean since recovery strategy reporting caller potentially deal manner sadly bad undocumented convention broken behaviour justified post facto rational available explains unconvincing could say ship sailed onerous change xxx done deal claiming reasonable behaviour ridiculous could continue error fd still throw away data consider two independent program first one writes file call second one whose job go fsync perhaps async first file second program supposed go write page first one wrote order ensure dirty bit set fsync actually return dirty page written think mind semantics sync rather fsync open file two fds write one fsync another definitely supposed work sync nt realistic replacement sort way obviously systemwide thus entirely completely unsuitable sort better error reporting behaviour craig ringer craig dot com april anthony iliopoulos wrote hi stephen mon apr stephen frost wrote fsync nt reflect status given page however reflects status file descriptor file called notion fsync actually responsible change made file since last fsync call pure foolishness able pas list page data range fsync verify disk perhaps thing would different ca nt ask please flush dirty page associated file descriptor represents file opened disk let u know successful give u way ask specific page written persistant storage would certainly happy use repeatedly try flush page nt synced disk due transient error track case make sure nt incorrectly assume transferred persistent storage indeed fsync simply rather blunt instrument narrow legacy interface changing established semantics matter unreasonable may probably way go undocumented extremely surprising semantics arguably violation posix spec fsync least surprising interpretation nt buy argument really turn fsync semantics work though exactly nature error even kernel retained dirty bit failed page retrying persisting disk location would simply fail might simply fail depends error ocurred originally identified behaviour multipath system multipath default throw writes away nobody really care anyway error seems figure higher level retry application receive error retry see nopathretry multipath config afaics default insanely dangerous suitable specialist apps understand quirk use nopathretryqueue instead kernel opts marking page clean since recovery strategy reporting caller potentially deal manner sadly bad undocumented convention could mark fd undocumented slightly creative interpretation posix spec fsync consider two independent program first one writes file call second one whose job go fsync perhaps async first file second program supposed go write page first one wrote order ensure dirty bit set fsync actually return dirty page written think mind semantics sync rather fsync long application need ensure data persisted storage need retain data heap fsync successful instead discarding relying kernel write almost exactly tell application author using postgresql data nt written receive successful commit confirmation better forget provide application clear boundary know exactly written guess argument kernel true whatever written since last successful fsync potentially lost must redone fsync behaviour utterly undocumented dubiously standard think conflating issue o kernel responsible error recovery subsequent fsync would fix problem one clearly design kernel really adopted reason outlined citation needed major platform post suggests bit mix behaviour issue granularity error reporting userspace could benefit finegrained indication failed page file range yep looked aio hope used aio able map sync failure back individual aio write seems aio add problem fix none flush behaviour aio tell inconsistent version version generally unhelpful kernel really report sync failure back app aio write mapping seems nothing sort happens christophe pettus xof thebuild dot com apr craig ringer wrote undocumented extremely surprising semantics arguably violation posix spec fsync least surprising interpretation even accepting personally go surprising violation vote counted highly unlikely convince every kernel team declare fool push change even postgresql look forward many year running kernel broken semantics given think panic option soundest one unappetizing andres freund andres anarazel dot de april pm pdt christophe pettus wrote apr craig ringer wrote undocumented extremely surprising semantics arguably violation posix spec fsync least surprising interpretation even accepting personally go surprising violation vote counted highly unlikely convince every kernel team declare fool push change even postgresql look forward many year running kernel broken semantics given think panic option soundest one unappetizing nt pretty much already agreement craig main proponent christophe pettus xof thebuild dot com apr andres freund wrote nt pretty much already agreement craig main proponent sure second sentence first clear peter geoghegan pg bowt dot ie mon apr pm andres freund wrote even accepting personally go surprising violation vote counted highly unlikely convince every kernel team declare fool push change even postgresql look forward many year running kernel broken semantics given think panic option soundest one unappetizing nt pretty much already agreement craig main proponent wonder bad practice panic craig said nt bad seems afaics fsync return eio case stopping world anyway many f u would nice get information thomas munro thomas dot munro enterprisedb dot com tue apr craig ringer wrote see little benefit panicing unconditionally eio really nt happen want pretty conservative adopt dataprotective approach rather worried enospc look like might necessary recall finding test case kernel code reading really nt want respond possiblytransient enospc panicing whole server unnecessarily yeah nice give administrator chance free disk space enospc reported stay running space really nt take database without warning question whether data remains cache marked dirty retrying safe option since potentially gone buffer o nt place committed data definitely still found wal recovery time tell u need perfilesystem answer delayed allocation somewhat filesystemspecific thing maybe interestingly nt seem many operating system report enospc fsync based quick scan documentation posix aix hpux freebsd openbsd netbsd illumossolaris linux macos yes nt know macos really mean tell see error read write way speaking macos curious see common bsd heritage would show yeah somewhat nt appear keep buffer writeback error right http githubcomappledarwinxnublobmasterbsdvfsvfsbioc robert haas robertmhaas gmail dot com mon apr pm anthony iliopoulos wrote given precisely dirty page writtenout practically thrown away semantics fsync fix essentially correct first call indicates writeback error indeed occurred subsequent call reason indicate error assuming error occurred meantime like people think unreasonable starting dirty page written practically thrown away decided ok basis wording specification think always unreasonable throw away user data writes going fail let keep failing every time would nt cause data loss never able checkpoint eventually user would kill server uncleanly would trigger recovery also really make impossible write reliable program imagine server running somebody run program open file data directory call fsync close fsync fails postgres borked way aware problem knew could panic never find unrelated process ate error exactly sort illconsidered behavior make fcntl locking nearly useless even leaving aside panic mean prolonged outage prolonged system could easily take ten minute longer run recovery saying oh really answer sure like trying lose weight intentionally eating tapeworm possible shorten checkpointtimeout recovery run faster performance drop data fsync often instead getting buffered o cache maximum possible time could also dodge issue another way suppose write page nt consider really written fsync succeeds would nt need panic fsync fails could rewrite page unfortunately would also terrible performance pretty much reason letting o cache absorb lot dirty block writecombining necessary good performance error reporting thus consistent intended semantics sadly properly documented repeated call fsync simply imply kernel retry writeback previouslyfailed page application need aware persisting error fsync level would essentially mean moving application policy kernel might accept argument accepted ok decide fsync failure mean forget write ever happened first place hard imagine application want behavior application nt care whether byte really got disk would called fsync first place care reporting error never improvement peter geoghegan pg bowt dot ie mon apr pm robert haas wrote also really make impossible write reliable program imagine server running somebody run program open file data directory call fsync close fsync fails postgres borked way aware problem knew could panic never find unrelated process ate error exactly sort illconsidered behavior make fcntl locking nearly useless fear conventional wisdom kernel people using odirect granular control lwn article thomas linked http cite ted t monakhov asked counter needed layton said handle multiple overlapping writebacks effectively counter would record whether writeback failed since file opened since last fsync t said fine application want information use odirect application knowledge error occurred somewhere file necessary application require better granularity already use odirect anthony iliopoulos ailiop altatus dot com hi robert mon apr robert haas wrote mon apr pm anthony iliopoulos wrote given precisely dirty page writtenout practically thrown away semantics fsync fix essentially correct first call indicates writeback error indeed occurred subsequent call reason indicate error assuming error occurred meantime like people think unreasonable starting dirty page written practically thrown away decided ok basis wording specification think always unreasonable insist strict conformance posix indeed linux glibc configuration associated manpage probably wrong stating posixsynchronizedio supported implementation match flexibility allowed supporting sio long history brokenness linux posix think never intention conforming standard throw away user data writes going fail let keep failing every time would nt cause data loss never able checkpoint eventually user would kill server uncleanly would trigger recovery believe tried explain earlier certain assumption made writer original owner data responsible dealing potential error order avoid data loss interest original writer anyway would questionable interface persist error subsequent writes fsyncs different offset may well go another process may need write file fsync unaware newly introduced semantics faced eio unrelated previous process failed earlier writes bother clear error writes similar scenario second process aware new semantics would naturally go ahead clear global error order proceed write fsync would essentially amount problematic semantics also really make impossible write reliable program imagine server running somebody run program open file data directory call fsync close fsync fails postgres borked way aware problem knew could panic never find unrelated process ate error exactly sort illconsidered behavior make fcntl locking nearly useless fully agree errseqt fix dealt exactly issue making sure error reported file descriptor happen open time error think one would hard time defending modification kernel extended cover case process write file offset fails writeback fsync get eio exit process b write offset succeeds writeback fsync get eio due uncleared failure earlier process would highly uservisible change semantics edge triggered leveltriggered behavior dodge issue another way suppose write page nt consider really written fsync succeeds way think fsync guarantee unless kernel keep retrying persist dirty page assuming model repeated unrecoverable hard failure process would explicitly inform kernel drop dirty page process could point read back userspace dirtyfailed page attempt rewrite different place current possible application would bother though inform kernel drop permanently failed page thus someone eventually would hit case large amount failed writeback page running server memory point people complain semantics completely unreasonable would nt need panic fsync fails could rewrite page unfortunately would also terrible performance pretty much reason letting o cache absorb lot dirty block writecombining necessary good performance sure understand case application may indeed rewrite bunch page failed proceed fsync kernel deal combining writeback rewritten page necessity combining performance really depends exact storage medium point start caring writecombining kernel community naturally redirect use directio error reporting thus consistent intended semantics sadly properly documented repeated call fsync simply imply kernel retry writeback previouslyfailed page application need aware persisting error fsync level would essentially mean moving application policy kernel might accept argument accepted ok decide fsync failure mean forget write ever happened first place hard imagine application want behavior application nt care whether byte really got disk would called fsync first place care reporting error never improvement conflating two separate issue buffering retrying failed page error reporting yes would convenient application care recovery failed writebacks point would face issue one way another assuming always talking hard failure kind failure probably already dealt transparently kernel level reporting also unreasonable effectively signal persist error filewide granularity pertains subset file writes go repeating suppose checkandclear semantics problematic pg one could suggest kernel patch optsin leveltriggered reporting fsync perdescriptor basis seems nonintrusive probably sufficient cover expected usecase greg stark stark mit dot edu april anthony iliopoulos wrote hi robert fully agree errseqt fix dealt exactly issue making sure error reported file descriptor happen open time error think one would hard time defending modification kernel extended cover case process write file offset fails writeback fsync get eio exit process b write offset succeeds writeback fsync get eio due uncleared failure earlier process surely exactly process b would want call fsync get success later find file corrupt nt match memory going happy seems like attempt coopt fsync new different purpose poorly designed async error reporting mechanism writes would useless process could come along open file eat error writes performed async error reporting mechanism would document writes giving error give way control semantics described useless everyone program needing know error status writes executed nt know writes included fsync call program using fsync original intended purpose guaranteeing writes synced disk longer guarantee would highly uservisible change semantics edge triggered leveltriggered behavior always documented leveltriggered edgetriggered concept completely surprise application writer anthony iliopoulos ailiop altatus dot com tue apr greg stark wrote april anthony iliopoulos wrote hi robert fully agree errseqt fix dealt exactly issue making sure error reported file descriptor happen open time error think one would hard time defending modification kernel extended cover case process write file offset fails writeback fsync get eio exit process b write offset succeeds writeback fsync get eio due uncleared failure earlier process surely exactly process b would want call fsync get success later find file corrupt nt match memory going happy ca nt possibly make assumption process b may reading writing completely disjoint region process really caring earlier failure wanting ensure writes go way even care file interface make transactional guarantee even without fsync nothing preventing process b reading dirty page process based content proceed business writepersist new data process modifies notyetflushed page inmemory flushing case need explicit synchronizationlocking process anyway would fsync exception seems like attempt coopt fsync new different purpose poorly designed async error reporting mechanism writes would useless process could come along open file eat error writes performed async error reporting mechanism would document writes giving error give way control errseqt fix deal error reported process open fd irrespective actual caller fsync may induced error anyway required kernel may evict dirty page writeback need way report error open fds semantics described useless everyone program needing know error status writes executed nt know writes included fsync call program eio persists invocation explicitly cleared process possibly make decision clear error proceed process need leverage without coordination writes actually failed matter would back case requiring explicit synchronization process care case process may well synchronize calling fsync first place optin persisting eio perfd would practically form contract cooperating process anyway instead deconstructing debating semantics current mechanism come ideal desired form error reportingtracking granularity etc see may fitted kernel new interface craig ringer craig dot com april robert haas wrote think always unreasonable throw away user data well txn abort writes txn discarded think perfectly reasonable though also promise nothing effect make exception even f nt offer transactional semantics fsync behaviour interpreted kind similarly nt agree nt think wholly unreasonable think leaving undocumented absolutely gobsmacking dubious best totally insane writes going fail let keep failing every time like require explicit rollback posix may pose issue nt really define interface afaik unless expect app close reopen file replacing one nonstandard issue another may win would nt cause data loss never able checkpoint eventually user would kill server uncleanly would trigger recovery yep expected happen unrecoverable io error yknow unrecoverable stunned learn even amazed learn errorsremountro apparently nt concern self mere user data may exhibit behaviour need rerun test case tomorrow also really make impossible write reliable program presence multiple apps interacting file yes think little bit stretch though single app recover remembering redoing writes suck app want multiple process working together file without kind journal wal relying fsync alone mind least wal hrm wonder interacts wallevelminimal even leaving aside panic mean prolonged outage prolonged system could easily take ten minute longer run recovery saying oh really answer sure like trying lose weight intentionally eating tapeworm possible shorten checkpointtimeout recovery run faster performance drop data fsync often instead getting buffered o cache maximum possible time also spikier user issue latency short frequent checkpoint could also dodge issue another way suppose write page nt consider really written fsync succeeds would nt need panic fsync fails could rewrite page unfortunately would also terrible performance pretty much reason letting o cache absorb lot dirty block writecombining necessary good performance doublecaching already plenty bad enough anyway well ideally want able swap buffer sharedbuffers o buffercache almost like level buffer pinning write block transfer ownership o yeah dreaming sure need able trust o forget block error reporting thus consistent intended semantics sadly properly documented repeated call fsync simply imply kernel retry writeback previouslyfailed page application need aware persisting error fsync level would essentially mean moving application policy kernel might accept argument accepted ok decide fsync failure mean forget write ever happened first place hard imagine application want behavior application nt care whether byte really got disk would called fsync first place care reporting error never improvement many rdbmses hardly behaviour unique kernel report error statement txn go life merrily forgetting anything ever wrong agree postgresql stance wrong require explicit rollback rollback savepoint restore session usable state good odd one almost everyone else much like fsync linux report error forget case going get anyone backpatch fix kernel stuck working around testing enospc tomorrow propose patch report back greg stark stark mit dot edu april anthony iliopoulos wrote eio persists invocation explicitly cleared process possibly make decision clear error still nt understand clear error mean writes still nt written nt care tracking error care whether writes file flushed disk clear error mean throw away dirty page revert part file old data would anyone ever want instead deconstructing debating semantics current mechanism come ideal desired form error reportingtracking granularity etc see may fitted kernel new interface postgres portable software wo nt able use linuxspecific interface nt really need granular error reporting system anyways need know writes synced disk anthony iliopoulos ailiop altatus dot com tue apr greg stark wrote april anthony iliopoulos wrote eio persists invocation explicitly cleared process possibly make decision clear error still nt understand clear error mean writes still nt written nt care tracking error care whether writes file flushed disk clear error mean throw away dirty page revert part file old data would anyone ever want mean responsibility recovering data passed back application writes may never able written would kernel deal either discard data writer acknowledge buffer data reboot simply risk going oom someone would want rather need deal one way least applicationlevel fighting chance restoring consistent state kernel opportunity instead deconstructing debating semantics current mechanism come ideal desired form error reportingtracking granularity etc see may fitted kernel new interface postgres portable software wo nt able use linuxspecific interface nt really need granular error nt really follow argument pg admittedly using nonportable interface eg syncfilerange nice avoid platform specific hack expecting posix semantics consistent across system simply pipe dream would lovely really consistent interface application writer simply going happen time soon since problematic semantics fsync appear prevalent system well likely changed rely preconception buffer handed kernel guarantee eventually persisted matter even bother fsync case kernel would eventually evict writeback dirty page anyway point reporting error back application give chance recover kernel could repeat fsync internally would solve anything reporting system anyways need know writes synced disk well know writes synced disk exactly responsibility passed back application realize put burden back application would viable alternative would rather kernel risk periodically going oom due design decision robert haas robertmhaas gmail dot com tue apr anthony iliopoulos wrote like people think unreasonable starting dirty page written practically thrown away decided ok basis wording specification think always unreasonable insist strict conformance posix indeed linux glibc configuration associated manpage probably wrong stating posixsynchronizedio supported implementation match flexibility allowed supporting sio long history brokenness linux posix think never intention conforming standard well man page probably nt say conforming first system tested also summary changed current fsync fdatasync synchronize file incore state storage device adding possibly randomly undoing change think made file believe tried explain earlier certain assumption made writer original owner data responsible dealing potential error order avoid data loss interest original writer anyway would questionable interface persist error subsequent writes fsyncs different offset may well go questionable fsync nt take argument saying part file care kernel entirely entitled assume know writes given fsync call intended apply another process may need write file fsync unaware newly introduced semantics faced eio unrelated previous process failed earlier writes bother clear error writes similar scenario second process aware new semantics would naturally go ahead clear global error order proceed write fsync would essentially amount problematic semantics nt deny possible somebody could application utterly indifferent fact earlier modification file failed due io error aok long later modification flushed disk nt think normal thing want also really make impossible write reliable program imagine server running somebody run program open file data directory call fsync close fsync fails postgres borked way aware problem knew could panic never find unrelated process ate error exactly sort illconsidered behavior make fcntl locking nearly useless fully agree errseqt fix dealt exactly issue making sure error reported file descriptor happen open time error well postgresql background process called checkpointer process normally fsync call subset write call checkpointer however necessarily every file open time fix nt sufficient make sure checkpointer ever see fsync failure someone basically done made undocumented assumption file descriptor might care particular error happens postgresql never conformed assumption keep saying problem assumption nt seem like good guess suppose program ever made documentation fsync give zero indication edgetriggered complaining people would nt like became leveltriggered seems like ex post facto justification poorlychosen behavior probably think prior week ago already sure understand case application may indeed rewrite bunch page failed proceed fsync kernel deal combining writeback rewritten page necessity combining performance really depends exact storage medium point start caring writecombining kernel community naturally redirect use directio well way postgresql work today typically run say sharedbuffers even system memory say page evicted relatively small cache operating system track file need fsync checkpoint time nt hold onto block checkpoint time operating system left decide whether better keep caching dirty block thus leaving le memory thing possibly allowing writecombining block written whether clean make room thing mean small portion operating system memory directly managed postgresql allowing effective size cache balloon large number system nt heavy memory pressure hear directio thing assume eventually going go way linux kernel developer seem think real men use odirect form io nt provide useful guarantee well fault using odirect political reason technical reason reason unfortunately going add huge amount complexity ran sharedbuffers set large percentage system memory could nt allocate large chunk memory sort hash table operating system allocate sharedbuffers basically memory using substantially might run system entirely huge huge architectural change even done way inferior today true give u superior control writeback timing also make postgresql play le nicely thing running machine postgresql dedicated chunk whatever size rather using portion o buffer cache grow shrink according memory need part postgresql application system suppose checkandclear semantics problematic pg one could suggest kernel patch optsin leveltriggered reporting fsync perdescriptor basis seems nonintrusive probably sufficient cover expected usecase would certainly better nothing thomas munro thomas dot munro enterprisedb dot com tue apr pm thomas munro wrote interestingly nt seem many operating system report enospc fsync based quick scan documentation posix aix hpux freebsd openbsd netbsd illumossolaris linux macos yes oops reading comprehension fail posix yes since issue via note read write error condition also returned bruce momjian bruce momjian dot u tue apr robert haas wrote well postgresql background process called checkpointer process normally fsync call subset write call checkpointer however necessarily every file open time fix nt sufficient make sure checkpointer ever see fsync failure lot focus thread workflow write block remain kernel memory fsync panic happens workflow write kernel syncs block storage fsync fsync going see kernel syncs block storage failure already discussion fsync cause syncs block storage fsync report failure see failure second workflow indication failed write storage report back error clear dirty flag know keep thing around long enough report error future fsync would think ask since fsync assumption wrong long thomas munro thomas dot munro enterprisedb dot com wed apr pm bruce momjian wrote lot focus thread workflow write block remain kernel memory fsync panic happens workflow write kernel syncs block storage fsync fsync going see kernel syncs block storage failure already discussion fsync cause syncs block storage fsync report failure see failure second workflow indication failed write storage report back error clear dirty flag know keep thing around long enough report error future fsync would think ask since fsync assumption wrong long believe problem nature various twist based concurrent activity possibly different fds problem fixed errseqt system developed jeff layton linux call bug second issue page marked clean error reported attempt fsync data case new attempt checkpoint futile appear successful call bug proviso people apparently think reasonable behaviour bug least plausible workaround namely nuclear option proposed craig bruce momjian bruce momjian dot u wed apr thomas munro wrote wed apr pm bruce momjian wrote lot focus thread workflow write block remain kernel memory fsync panic happens workflow write kernel syncs block storage fsync fsync going see kernel syncs block storage failure already discussion fsync cause syncs block storage fsync report failure see failure second workflow indication failed write storage report back error clear dirty flag know keep thing around long enough report error future fsync would think ask since fsync assumption wrong long believe problem nature various twist based concurrent activity possibly different fds problem fixed errseqt system developed jeff layton linux call bug noncuttingedge linux system vulnerable workaround postgres implement wow second issue page marked clean error reported attempt fsync data case new attempt checkpoint futile appear successful call bug proviso people apparently think reasonable behaviour bug least plausible workaround namely nuclear option proposed craig yes one understood bruce momjian bruce momjian dot u tue apr bruce momjian wrote wed apr thomas munro wrote believe problem nature various twist based concurrent activity possibly different fds problem fixed errseqt system developed jeff layton linux call bug noncuttingedge linux system vulnerable workaround postgres implement wow uh sure fix usecase email description sounded like reported fsync error every open file descriptor time failure checkpoint process might open file failure try fsync write happened failure craig ringer craig dot com april robert haas wrote hear directio thing assume eventually going go way linux kernel developer seem think real men use odirect form io nt provide useful guarantee well fault using odirect political reason technical reason reason looked buffered aio ago way hell run run fast trouble direct io push lot work back postgresql regarding knowledge storage subsystem io scheduling etc absurd kernel unless want reliable case bypass drive hardware directly need pool writer thread deal blocking io nightmare hey bother kernel except driver thomas munro thomas dot munro enterprisedb dot com wed apr pm bruce momjian wrote tue apr bruce momjian wrote wed apr thomas munro wrote believe problem nature various twist based concurrent activity possibly different fds problem fixed errseqt system developed jeff layton linux call bug noncuttingedge linux system vulnerable workaround postgres implement wow uh sure fix usecase email description sounded like reported fsync error every open file descriptor time failure checkpoint process might open file failure try fsync write happened failure sure anything see designed report error since last fsync file presumably via fd sound like desired behaviour http githubcomtorvaldslinuxblobmastermmfilemapc userland call fsync something like nfsd equivalent want report writeback error occurred since last fsync since file opened nt sure lifetime passedin file importantly file fwberr specifically happens one file open operation reference counted see fsfiletablec nt know enough comment thomas munro thomas dot munro enterprisedb dot com wed apr pm thomas munro wrote wed apr pm bruce momjian wrote uh sure fix usecase email description sounded like reported fsync error every open file descriptor time failure checkpoint process might open file failure try fsync write happened failure sure anything see designed report error since last fsync file presumably via fd sound like desired behaviour scratch whenever open file descriptor ca nt see preceding error ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping http githubcomtorvaldslinuxblobmasterfsopenc whole design based able open close reopen file process particular fsync different process nt inherit fd instead opened later look like might able eat error occurred asynchronous writeback nobody report opened file sure possibly considered implementation posixsynchronizedio fsync function shall force currently queued io operation associated file indicated file descriptor fildes synchronized io completion state note file file descriptor copy without reference opened sure lifetime passedin file importantly file fwberr really inode imapping wberr lifetime asking file fwberr see question irrelevant due craig ringer craig dot com april thomas munro wrote wed apr pm thomas munro wrote wed apr pm bruce momjian wrote uh sure fix usecase email description sounded like reported fsync error every open file descriptor time failure checkpoint process might open file failure try fsync write happened failure sure anything see designed report error since last fsync file presumably via fd sound like desired behaviour scratch whenever open file descriptor ca nt see preceding error ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping http githubcomtorvaldslinuxblobmasterfsopenc whole design based able open close reopen file process particular fsync different process nt inherit fd instead opened later look like might able eat error occurred asynchronous writeback nobody report opened file holy hell even panicing fsync nt sufficient kernel deliberately hide writeback error predate fsync call u see expand testcase presently dockerizing make easier others use turn major pain using devmapper etc docker privileged mode nt seem play nice devicemapper mean way reliable io singleprocess singlefiledescriptor write fsync failure retry work since last successful fsync direct io thomas munro thomas dot munro enterprisedb dot com wed apr pm craig ringer wrote april thomas munro wrote ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping holy hell even panicing fsync nt sufficient kernel deliberately hide writeback error predate fsync call u predates opening file process call fsync yeah sure look way based code fragment anyone know better mean way reliable io singleprocess singlefiledescriptor write fsync failure retry work since last successful fsync suppose could crazy complicated ipc scheme make sure checkpointer always fd older writes flushed fallback strategy ca nt take fds nt got good idea right bit aside gather resize file think truncatingextending relation file still need call fsync even readwrite data odirect make flush filesystem metadata idea could also affected eaten writeback error craig ringer craig dot com april craig ringer wrote april thomas munro wrote wed apr pm thomas munro wrote wed apr pm bruce momjian wrote uh sure fix usecase email description sounded like reported fsync error every open file descriptor time failure checkpoint process might open file failure try fsync write happened failure sure anything see designed report error since last fsync file presumably via fd sound like desired behaviour scratch whenever open file descriptor ca nt see preceding error ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping http githubcomtorvaldslinuxblobmasterfsopenc whole design based able open close reopen file process particular fsync different process nt inherit fd instead opened later look like might able eat error occurred asynchronous writeback nobody report opened file holy hell even panicing fsync nt sufficient kernel deliberately hide writeback error predate fsync call u see expand testcase presently dockerizing make easier others use turn major pain using devmapper etc docker privileged mode nt seem play nice devicemapper done find http githubcomringercscrapcodetreemastertestcasesfsyncerrorclear warning run docker container privileged mode system us devicemapper read run tried keep safe beware might eat system test xfs eio f easy enough nt added coverage multiprocessing yet given found probably system copy proc instruction fsync next nt worked reliable way trigger enospc fsync yet mapping without error hole happens sometimes nt know almost always happens write instead know happen nfs hoping saner example test xfs delayed allocation eager reservation nt happen bruce momjian bruce momjian dot u wed apr thomas munro wrote wed apr pm craig ringer wrote april thomas munro wrote ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping holy hell even panicing fsync nt sufficient kernel deliberately hide writeback error predate fsync call u predates opening file process call fsync yeah sure look way based code fragment anyone know better uh clarify new ignoring error happened open ignoring write happened written storage open fyi pgtestfsync always tested ability fsync writes process test fsync nonwrite file descriptor honored time similar fsync sync data written different descriptor write fsync close opssec usecsop write close fsync opssec usecsop two number similar added check make sure behavior relying working never tested sync error though think fundamental issue always assumed writes kernel could written storage would remain kernel succeeded fsync would report existence understand kernel developer nt want keep failed sync buffer memory gone lose reporting failure also kernel going retry syncs long keep reporting sync failure first fsync happens failure long continue record failure fsync every happens likely nonpostgres workload think decided discard failed syncs retry fsync behavior complaining almost required option might tell administrator closely watch kernel write failure message restore failover last time remember surprised storage early postgres year learned bsd file system us page nt mean atomically written storage knew operating system wrote data chunk storage page written separate sector might contiguous logically drive physically even sector written atomically added prepage image written wal fullpagewrites control bruce momjian bruce momjian dot u wed apr craig ringer wrote trouble direct io push lot work back postgresql regarding knowledge storage subsystem io scheduling etc absurd kernel unless want reliable case bypass drive hardware directly need pool writer thread deal blocking io nightmare hey bother kernel except driver believe oracle view kernel precedent approach though advocating craig ringer craig dot com april craig ringer wrote april craig ringer wrote april thomas munro wrote wed apr pm thomas munro wrote wed apr pm bruce momjian wrote uh sure fix usecase email description sounded like reported fsync error every open file descriptor time failure checkpoint process might open file failure try fsync write happened failure sure anything see designed report error since last fsync file presumably via fd sound like desired behaviour scratch whenever open file descriptor ca nt see preceding error ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping http githubcomtorvaldslinuxblobmasterfsopenc whole design based able open close reopen file process particular fsync different process nt inherit fd instead opened later look like might able eat error occurred asynchronous writeback nobody report opened file holy hell even panicing fsync nt sufficient kernel deliberately hide writeback error predate fsync call u see expand testcase presently dockerizing make easier others use turn major pain using devmapper etc docker privileged mode nt seem play nice devicemapper done find http githubcomringercscrapcodetreemaster testcasesfsyncerrorclear update support multiple f tried xfs jfs even vfat behave eio nt try zfsonlinux platform yet still working getting enospc fsync rather write kernel code reading suggests possible f reserve space eagerly write even delayed allocation actual storage nt seem happen least simple singleprocess test overly inclined complain fsync succeeding write error seems reasonable enough kernel told app time failure else going nt personally even object hugely current fsync behaviour say documented conformant relevant standard though giving u sane way find affected file range make drastically harder recover sensibly come since thread even rely fsync giving u eio loses data currently widely deployed kernel fail deliver info due recently fixed limitation kernel deliberately hide error u relate writes occurred opened fd really troubling thought could least fix panicing eio mostly worried enospc seems ca nt even expect reliability meant error reporting issue around closing reopening file outstanding buffered io really going hurt u expanding test case cover shortly craig ringer craig dot com april craig ringer wrote error reporting issue around closing reopening file outstanding buffered io really going hurt u expanding test case cover shortly also clear way confined xfs andor lvm originally thought might errorsremountro protective dataerrabort nt help either bewilders running datajournal nt seem safe either wtf mounted filesystem journalled data mode opts errorsremountro dataerrabort datajournal warning device io error writing inode offset size starting block buffer io error device logical block buffer io error device logical block buffer io error device logical block buffer io error device logical block splat go data anyway possible way related using devicemapper error target loopback device testing nt really see bruce momjian bruce momjian dot u wed apr craig ringer wrote april craig ringer wrote error reporting issue around closing reopening file outstanding buffered io really going hurt u expanding test case cover shortly also clear way confined xfs andor lvm originally thought might errorsremountro protective dataerrabort nt help either anthony iliopoulos reported thread errorsremountro affected metadata writes craig ringer craig dot com april bruce momjian wrote wed apr craig ringer wrote april craig ringer wrote error reporting issue around closing reopening file outstanding buffered io really going hurt u expanding test case cover shortly also clear way confined xfs andor lvm originally thought might errorsremountro protective dataerrabort nt help either anthony iliopoulos reported thread errorsremountro affected metadata writes yep gathered referring dataerr antonis iliopoulos ailiop altatus dot com wed apr pm craig ringer wrote april bruce momjian wrote wed apr craig ringer wrote april craig ringer wrote error reporting issue around closing reopening file outstanding buffered io really going hurt u expanding test case cover shortly also clear way confined xfs andor lvm originally thought might errorsremountro protective dataerrabort nt help either anthony iliopoulos reported thread errorsremountro affected metadata writes yep gathered referring dataerr far recall dataerrabort pertains handling potential writeback error inetrnally attempt drain data upon txn commit even kind enough restore eio address space level otherwise would get eaten dataerrabort set forcibly shuts entire journal error propagated upwards sure point would manifested userspace principle subsequent f operation would get filesystem error due journal would assume similar remounting f readonly since using datajournal would indeed expect see something saw dmesg look later plan also respond interesting issue guy raised thread craig ringer craig dot com april bruce momjian wrote wed apr thomas munro wrote wed apr pm craig ringer wrote april thomas munro wrote ensure skip error predate opening file f fwberr filemapsamplewberr f fmapping holy hell even panicing fsync nt sufficient kernel deliberately hide writeback error predate fsync call u predates opening file process call fsync yeah sure look way based code fragment anyone know better uh clarify new ignoring error happened open ignoring write happened written storage open fyi pgtestfsync always tested ability fsync writes process test fsync nonwrite file descriptor honored time similar fsync sync data written different descriptor write fsync close opssec usecsop write close fsync opssec usecsop two number similar added check make sure behavior relying working never tested sync error though think fundamental issue always assumed writes kernel could written storage would remain kernel succeeded fsync would report existence understand kernel developer nt want keep failed sync buffer memory gone lose reporting failure also kernel going retry syncs long keep reporting sync failure ideally app tell standard api obvious answer seems fd closed discussed pg relies able open close file freely may reasonable thing thought consider error reporting kernel meant long remember error writeback file flag file metadata remember across reboots obviously stop tell next program fsync forget could associate dirty buffer file open fds particular program app write closed file went away never bother check file like apps io error transient network issue etc recoverable sort action like disk space issue may take long time admin step entirely unrecoverable disk striped array fire possible recovery currently kind hope kernel deal figuring retrying turn nt much nt think reason wholly unreasonable may asking much leave u pickle come checkpointer openingclosing fds nt know right thing kernel perspective even best come actually pretty close report fsync error first process fsync since writeback error one occurred forget ideally liked mark fds pointing file flag report eio next fsync turn wo nt even help u due opening closing behaviour going take responsibility handling communicating preventing checkpoint completion backend get fsync error probably panicing extra work may needed ensure reliable ordering stop checkpoint completing fsync succeeds due recent failed fsync normal backend nt paniced postmaster nt noticed yet option might tell administrator closely watch kernel write failure message restore failover speaking necessarily lost page write error log afaics test often show buffer io error device logical block like gasper zejn zejn owca dot info bruce momjian wrote understand kernel developer nt want keep failed sync buffer memory gone lose reporting failure also kernel going retry syncs long keep reporting sync failure first fsync happens failure long continue record failure fsync every happens likely nonpostgres workload think decided discard failed syncs retry fsync behavior complaining almost required ideally kernel would keep data little time possible fsync nt really know process interested knowing write error assumes caller know deal unfortunate issue way get information write error thinking aloud couldntshould nt write error also file system event reported inotify admittedly thing linux still bruce momjian bruce momjian dot u wed apr craig ringer wrote april bruce momjian wrote understand kernel developer nt want keep failed sync buffer memory gone lose reporting failure also kernel going retry syncs long keep reporting sync failure ideally app tell standard api would almost need api register failure care sync failure plan call fsync gather information sure would allow first fsync see failure unless added another api clear fsync failure nt see point since first fsync might call clear function many application going know another application care failure many currently kind hope kernel deal figuring retrying turn nt much nt think reason wholly unreasonable may asking much agreed option might tell administrator closely watch kernel write failure message restore failover speaking necessarily lost page write error log afaics test often show buffer io error device logical block like assume kernel log thinking kernel log monitored many administrator issue think pointing administrator going know postgres file guess sync error device contains postgres assume postgres corrupted see explicit treatment retrying though entirely sure retry flag set async writeback apparently unlike every kernel tried grok far thing descended ancestral bsd descended freebsd macosdarwin apparently first category purpose new ticket netbsd bug database stuff http mentioned ticket andres earlier thread keeping page dirty nt strategy would work may problematic different way tell truth flood cache unflushable stuff eventually force unmount buffer eventually invalidated enxio error nt know qualified opinion know need way fsync tell truth preceding writes checkpoint busted mmap msync pgflushdata nt syncfilerange see probably great idea zfs finish doublebuffering triplebuffering flooding page cache transient data oops offtopic relevant checkpoint correctness topic thread since pgflushdata advisory thomas munro thomas dot munro enterprisedb dot com thu apr thomas munro wrote thu apr craig ringer wrote tried xfs jfs even vfat behave eio nt try zfsonlinux platform yet contemplating exactly would sure see manual failmodewait continue panic even continue return eio new write request apparently nt bother supply eatmydatabuttellmeeverythingisfine mode figure craig ringer craig dot com summary date worse thought originally widely deployed kernel case nt tell losing writes information loss writes masked closing reopening file checkpointer trust successful fsync mean successful fsync also reported offlist anyone system calling sync sync shell command also generally consume write error causing u see fsync true procsysvmdropcaches tested yet level agreement panic fsync error least linux likely everywhere also know insufficient fully protective previously though errorsremountro sufficient safeguard nt nt seem anything btrfs xfs clear yet dataerrabort nt sufficient dataordered datawriteback mode need digging test tool make mkfsopts mountopts errorsremountro dataerrabort datajournal current version afaics dataerrorabort affect dataordered datajournal use dataordered least get retries write failing post http added option explanation nt explain nt affect datajournal zfs probably affected issue per thomas munro nt run test script yet kernel nt zfs support prioritising multiprocess openandclose issue far none f option tried exhibit behavour actually want make f readonly inaccessible io error enospc nt seem concern normal operation major file system btrfs xfs reserve space returning write buffered write manage fail due enospc definitely see problem make enospc nfs potentially data corrupting condition since nfs nt preallocate space returning write think really need blocklayer fix io error flip block device readonly mode blockdev setro used though settle kernel panic frankly nt think anybody really want rather either silent data loss currently tweaking test close reopen file write fsync support running nfs also found devicemapper flakey driver look fantastic simulating unreliable io intermittent fault using error target mapping let remap device always error flakey look handy actual postgresql testing sake google error known associated problem mounted driver warning device io error writing inode offset size starting block buffer io error device logical block xfs xfs writeback error sector xfs writeback error sector jfs nil silence kernel log also beware lost page write lost write error craig ringer craig dot com april craig ringer wrote also reported offlist anyone system calling sync sync shell command also generally consume write error causing u see fsync true procsysvmdropcaches tested yet confirmed tweak test record file position close fd sync open file lseek back recorded position cause test completely ignore io error reported time fair enough really look kernel point view else nobody file open mark file self bad somehow pretty bad robustness afaics level agreement panic fsync error least linux likely everywhere also know insufficient fully protective dirty writeback fails close reopen see behaviour sync test set dirtywritebackcentisecs dirtyexpirecentisecs added usleep close open still plenty slow sync convenient way simulate something fsync writing dirty buffer omit sync get error reported fsync open file fsync buffer nt written yet error nt generated reopen ed file doubt happen much practice dirty writeback get first error seen discarded reopen file checkpointer word look like even new kernel error reporting bug fix understand backends checkpointer interact come file descriptor unlikely notice io error fail checkpoint may notice io error backend eager writeback large io operation checkpointer fsync file kernel dirty writeback get around trying flush page fail nt tested anything multiple process multiple fds yet keep one fd open writing another point nt see way make pg reliably detect io error fail checkpoint redo retry even fix panicing like proposed originally need know panic afaics completely unsafe write close open fsync expect fsync make promise write read pg low level storage code right make completely unable reliably detect io error put way sound fair enough long kernel meant remember write error file triggered write initiated seemingly unrelated process unbounded time ago sinceclosed file seems put pg fast track odirect bruce momjian bruce momjian dot u thu apr craig ringer wrote enospc nt seem concern normal operation major file system btrfs xfs reserve space returning write buffered write manage fail due enospc definitely see problem make enospc nfs potentially data corrupting condition since nfs nt preallocate space returning write explain nfs reputation unreliability postgres andrew gierth andrew dot riddle dot org dot uk note brought another thread turn pg handling fsync error correctly even o right thing discovered testing freebsd craig ringer craig dot com april andrew gierth wrote note brought another thread turn pg handling fsync error correctly even o right thing discovered testing freebsd yikes reader related thread meanwhile extended test run postgres deliberately faulty volume confirmed result utc log checkpoint starting immediate force wait utc error could fsync file inputoutput error utc error checkpoint request failed utc hint consult recent message server log detail utc statement checkpoint checkpoint failed checkpoint request failed hint consult recent message server log detail retrying utc log checkpoint starting immediate force wait utc log checkpoint complete wrote buffer wal file added removed recycled sync kb kb given report wonder even reissued fsync time perf time ok sudo perf record e syscalls sysenterfsync syscalls sysexitfsync sudo perf script see failed fync fd fsync without error next checkpoint succeeds postgres syscalls sysenterfsync fd postgres syscalls sysexitfsync postgres syscalls sysenterfsync fd postgres syscalls sysexitfsync pg continues merrily way without realising lost data xfs writeback error sector xfs writeback error sector test set thing checkpointer would see first fsync error make checkpoint le frequent bgwriter aggressive kernel dirty writeback aggressive possible failure go completely unobserved try next already largely concluded solution issue panic fsync error nt see error trouble thomas munro thomas dot munro enterprisedb dot com fri apr pm craig ringer wrote april andrew gierth wrote note brought another thread turn pg handling fsync error correctly even o right thing discovered testing freebsd yikes reader related thread yeah really embarrassing especially beating various operating system week also independent issue let keep thread get fixed see failed fync fd fsync without error next checkpoint succeeds postgres syscalls sysenterfsync fd postgres syscalls sysexitfsync postgres syscalls sysenterfsync fd postgres syscalls sysexitfsync pg continues merrily way without realising lost data xfs writeback error sector xfs writeback error sector test set thing checkpointer would see first fsync error make checkpoint le frequent bgwriter aggressive kernel dirty writeback aggressive possible failure go completely unobserved try next already largely concluded solution issue panic fsync error nt see error trouble suppose see error file descriptor linger open virtual file descriptor cache matter luck depending many relation segment file touched one thing could try confirm understand linux policy would hack postgresql reopens file descriptor every time mdsync see attached craig ringer craig dot com april thomas munro wrote fri apr pm craig ringer wrote april andrew gierth wrote note brought another thread turn pg handling fsync error correctly even o right thing discovered testing freebsd yikes reader related thread newsspurriddlesorguk yeah really embarrassing especially beating various operating system week also independent issue let keep thread get fixed see failed fync fd fsync without error next checkpoint succeeds postgres syscalls sysenterfsync fd postgres syscalls sysexitfsync postgres syscalls sysenterfsync fd postgres syscalls sysexitfsync pg continues merrily way without realising lost data xfs writeback error sector xfs writeback error sector test set thing checkpointer would see first fsync error make checkpoint le frequent bgwriter aggressive kernel dirty writeback aggressive possible failure go completely unobserved try next already largely concluded solution issue panic fsync error nt see error trouble suppose see error file descriptor linger open virtual file descriptor cache matter luck depending many relation segment file touched case think kernel nt get around writeback eagerly forced checkpoint fsync nt even queue writeback sharedbuffers fsync contrived test case try reproduce issue rapidly big writes frequent checkpoint checkpointer relation open fsync checkpointer fsync writeback dirty page noticed error kernel done writeback checkpointer opened relation fsync might seen error though note depends file descriptor cache see silenterror behaviour standalone test case confirmed behaviour try reproduce postgres requires closing reopening fds also requires forcing writeback opening fd make occur practical timeframe make kernel writeback setting insanely aggressive andor call sync reopen ing nt really think worth since confirmed behaviour already simpler test standalone rest repo try clone http githubcomringercscrapcode master branch cd testcasesfsyncerrorclear le readme make reopenreopen standalonerun see http githubcomringercscrapcodeblobmastertestcasesfsyncerrorclearstandalonefsyncerrorclearc pushed postgres test repo make postgresrun need docker warned using privileged docker container messing dmsetup thomas munro thomas dot munro enterprisedb dot com actually new linux behaviour idea whenever open file either tell checkpointer open wait tell done safe write send copy file descriptor via ipc since duplicated file descriptor share fwberr checkpointer ca nt take file descriptor would limit even work ipc case somehow need tell know responsible fsyncing file close due fd cache recycling also checkpointer tell maybe could made work sheesh seems horrible simpler idea along line could make sure fsync ever called file descriptor opened unflushed writes file descriptor cloned file descriptor idea give complain implementation defective unworkable posixcompliance ground pola ground campaign get fixed fundamentally actual detail left expert point speculating seen approach work operating system including keeping buffer dirty marking whole filesystem brokenreadonly idea give buffered io develop osync odirect based system asap idea considered suggesting idea think nt work thought could try asking new fcntl interface spit wberr counter call opaque error token something could store fsync queue safely close file check fsync ing ever see different value panic mean writeback error happened nt looking sadly think nt work aiui inodes pinned kernel memory one file open dirty buffer think counter could go away reset perhaps could keep inodes pinned keeping associated buffer dirty error like freebsd solved problem already would nt really need wberr system idea long line could work bruce momjian bruce momjian dot u sun apr thomas munro wrote actually new linux behaviour idea whenever open file either tell checkpointer open wait tell done safe write send copy file descriptor via ipc since duplicated file descriptor share fwberr checkpointer ca nt take file descriptor would limit even work ipc case somehow need tell know responsible fsyncing file close due fd cache recycling also checkpointer tell maybe could made work sheesh seems horrible simpler idea along line could make sure fsync ever called file descriptor opened unflushed writes file descriptor cloned file descriptor idea give complain implementation defective unworkable posixcompliance ground pola ground campaign get fixed fundamentally actual detail left expert point speculating seen approach work operating system including keeping buffer dirty marking whole filesystem brokenreadonly idea give buffered io develop osync odirect based system asap idea would people assume database corrupt server log report io error file system postgres us christophe pettus xof thebuild dot com apr bruce momjian wrote idea would people assume database corrupt server log report io error file system postgres us pragmatically right best answer bad situation fix error b replay checkpoint error occurred appears ca nt even guarantee postgresql process one see error christophe pettus xof thebuild dot com craig ringer craig dot com april thomas munro wrote actually new linux behaviour yeah cooking idea decide innodb right idea go using single massive blob file giant blob storage abstraction make way way le painful virtualize relfilenodes storage extent relatively big file could use sparse region make addressing convenient make copying backup painful rather even one file per tablespace persistent relation heap another index another fork type way use something like also thinking rejecting previously reduce pain reducing fd count drastically exhausting fds stop problem previously leaning toward described whenever open file either tell checkpointer open wait tell done safe write send copy file descriptor via ipc since duplicated file descriptor share fwberr checkpointer ca nt take file descriptor would limit even work ipc case somehow need tell know responsible fsyncing file close due fd cache recycling also checkpointer tell maybe could made work sheesh seems horrible simpler idea along line could make sure fsync ever called file descriptor opened unflushed writes file descriptor cloned file descriptor got stuck yuck awful assuming force early checkpoint checkpointer hit fd limit even worse need urgently away segmented relation partition would start become hinderance even going unworkable nightmare heavily partitioned system system use schemasharding etc mean need play process limit often system wide limit fds imagine performance implication wo nt pretty idea give complain implementation defective unworkable posixcompliance ground pola ground campaign get fixed fundamentally actual detail left expert point speculating seen approach work operating system including keeping buffer dirty marking whole filesystem brokenreadonly appears sqlite afaics http wwwsqliteorgatomiccommithtml though huge luxury single writer probably subject original issue multiprocess checkpointer issue face idea give buffered io develop osync odirect based system asap seems kernel folk expect going kill performance need writer thread hope totally sucking otherwise simple thing like updating heap tuple two related index incur enormous disk latency suspect path forward goody idea considered suggesting idea think nt work thought could try asking new fcntl interface spit wberr counter call opaque error token something could store fsync queue safely close file check fsync ing ever see different value panic mean writeback error happened nt looking sadly think nt work aiui inodes pinned kernel memory one file open dirty buffer think counter could go away reset perhaps could keep inodes pinned keeping associated buffer dirty error like freebsd solved problem already would nt really need wberr system idea long line could work think underlying data syncing concept fundamentally broken really kernel fault assume safely proca open proca write proca close long time later unbounded far kernel concerned procb open procb fsync procb close kernel writeback middle earth supposed know expect reopen file check back later remember file error forever tell every caller case could recover need new api say yeah ok already redoing work since last good fsync clear error flag otherwise keep reporting error redo recover never really clicked fact closed relation pending buffered writes left closed reopened fsync well kernel nt thing crazy thing right think option see anything smell like write error kernel log hardkill postgres immediate let shutdown checkpoint checkpoint since log fake backup label force redo start last checkpoint error otherwise safe let start redo fun time also mean afaics running pg nfs extremely unsafe must make sure nt run disk usual safeguard space reservation enospc fsync nt apply nfs nt tested sync hard nointr mode yet maybe safe doubt applies thinprovisioned storage nt help explain various report corruption docker various tool use various sort thin provisioning hit enospc fsync bye bye data peter geoghegan pg bowt dot ie sat apr pm craig ringer wrote idea decide innodb right idea go using single massive blob file giant blob storage abstraction make way way le painful virtualize relfilenodes storage extent relatively big file could use sparse region make addressing convenient make copying backup painful rather even one file per tablespace persistent relation heap another index another fork type sure since would break new optimize btree insertion common case increasing value optimization mention went asked pavan least add note nbtree readme explains high level theory behind optimization part postcommit cleanup ask say something might affect extentbased storage christophe pettus xof thebuild dot com apr craig ringer wrote right think option see anything smell like write error kernel log hardkill postgres immediate let shutdown checkpoint checkpoint since log fake backup label force redo start last checkpoint error otherwise safe let start redo spiral despair excessive alcohol consumption basically situation checksum failure kind uncorrected medialevel error bad part find kernel log rather postgresql directly strike otherwise significantly different say infrequentlyaccessed disk block reporting uncorrectable error finally get around reading andreas karlsson andreas proxel dot se craig ringer wrote idea decide innodb right idea go using single massive blob file giant blob fyi mysql default one file per table day old approach one massive file maintenance headache change default release ago http craig ringer craig dot com april christophe pettus wrote apr craig ringer wrote right think option see anything smell like write error kernel log hardkill postgres immediate let shutdown checkpoint checkpoint since log fake backup label force redo start last checkpoint error otherwise safe let start redo spiral despair excessive alcohol consumption basically situation checksum failure kind uncorrected medialevel error bad part find kernel log rather postgresql directly strike otherwise significantly different say infrequentlyaccessed disk block reporting uncorrectable error finally get around reading nt entirely agree affect enospc io error thin provisioned storage io error multipath storage etc identified original issue thin provisioned system ran backing space mangling postgresql way made sense time way likely bit flip storage level corruption thing previously expected detect fail gracefully craig ringer craig dot com april andreas karlsson wrote craig ringer wrote idea decide innodb right idea go using single massive blob file giant blob fyi mysql default one file per table day old approach one massive file maintenance headache change default release ago http huh thanks update see handle reliable flushing see looked nt give headsup let learn christophe pettus xof thebuild dot com apr craig ringer wrote way likely bit flip storage level corruption thing previously expected detect fail gracefully definitely bad explains otherwiseinexplicable corruption issue seen great work tracking think important panic though postgresql nt reputation horrible data integrity sure make sense major rearchitecting storage layer especially pluggable storage coming along address failure mode common solution pitr backup one installation anyway medium failure greg stark stark mit dot edu april craig ringer wrote april thomas munro wrote kernel writeback middle earth supposed know expect reopen file check back later remember file error forever tell every caller case could recover need new api say yeah ok already redoing work since last good fsync clear error flag otherwise keep reporting error redo recover spoonhhhhherror flag nt need fsync keep track error need fsync accurately report whether buffer file written call fsync kernel need initiate io dirty buffer block complete successfully complete successfully nobody care whether failure past io initiated point past problem error nt tracked correctly problem dirty buffer marked clean nt written consider dirty filesystem buffer hardware failure preventing written memory leak long error mean kernel discarded writes real hope reliable operation interface going directio basically recognizing kernel filesystem buffer provides reliable interface need reimplement user space rather disheartening aside work added barrier nt much information hardware kernel nt know raid stripe begin end big memory controller buffer tell full empty flush etc etc also nt know else going machine christophe pettus xof thebuild dot com apr greg stark wrote consider dirty filesystem buffer hardware failure preventing written memory leak irrational position file system buffer dedicated memory file system caching used one better use moment inability flush disk meant suddenly became pinned memory large copy operation yanked usb drive could result system allocatable memory guess theory could swap swapping file system buffer hope sometime future could properly written nt seem architecturally sound anthony iliopoulos ailiop altatus dot com sun apr greg stark wrote april craig ringer wrote april thomas munro wrote kernel writeback middle earth supposed know expect reopen file check back later remember file error forever tell every caller case could recover need new api say yeah ok already redoing work since last good fsync clear error flag otherwise keep reporting error redo recover spoonhhhhherror flag nt need fsync keep track error need fsync accurately report whether buffer file written call fsync instead fsync report buffer written due reason outlined may make sense maintain tracking regarding error even marking failed dirty page clean fact proposed introduces memory overhead kernel need initiate io dirty buffer block complete successfully complete successfully nobody care whether failure past io initiated point past question kernel application case simply possible according freebsd keep dirty page around failure example eio block layer contract unrecoverable error pointless keep dirty need specialized interface clearout error drop dirty page potentially remount filesystem problem error nt tracked correctly problem dirty buffer marked clean nt written consider dirty filesystem buffer hardware failure preventing written memory leak long error mean kernel discarded writes real hope reliable operation interface necessarily follow whether kernel discard writes would really help see matter proper reporting contract userspace kernel tracking would way facilitating v complex userspace scheme described others thread synchronization fsync required multiprocess application bruce momjian bruce momjian dot u sun apr christophe pettus wrote apr craig ringer wrote way likely bit flip storage level corruption thing previously expected detect fail gracefully definitely bad explains otherwiseinexplicable corruption issue seen great work tracking think important panic though postgresql nt reputation horrible data integrity sure make sense major rearchitecting storage layer especially pluggable storage coming along address failure mode common solution pitr backup one installation anyway medium failure think big problem nt way stopping postgres time kernel report error kernel log returning potentially incorrect result committing transaction might wrong lost could stop postgres error happen least administrator could fix problem failover standby crazy idea would daemon check log stop postgres seems something wrong christophe pettus xof thebuild dot com apr bruce momjian wrote think big problem nt way stopping postgres time kernel report error kernel log returning potentially incorrect result committing transaction might wrong lost yeah bad short term best advice installation monitor kernel log error right make sure backup strategy encompass restoring error like even craig smart fix patching backup label recover previous checkpoint nt much good nt wal record back far one required wal record also took hit longer term odirect seems like plausible way might popular people running file system os nt issue setting aside daunting prospect implementing andres freund andres anarazel dot de bruce momjian wrote sun apr christophe pettus wrote apr craig ringer wrote way likely bit flip storage level corruption thing previously expected detect fail gracefully definitely bad explains otherwiseinexplicable corruption issue seen great work tracking think important panic though postgresql nt reputation horrible data integrity sure make sense major rearchitecting storage layer especially pluggable storage coming along address failure mode common solution pitr backup one installation anyway medium failure think big problem nt way stopping postgres time kernel report error kernel log returning potentially incorrect result committing transaction might wrong lost could stop postgres error happen least administrator could fix problem failover standby crazy idea would daemon check log stop postgres seems something wrong think danger presented far smaller statement thread might make one think likelihood got io error kernel level retries nt fix database screwed whether fsync report really somewhat besides point nt panic way getting io error read either likely persistent error writes remapping storage layer fix issue read lot great thing nt think need panic fix thing reported error treated crash recovery rest think fair argument made far outside postgres remit think pretty good reason go direct io supported error handling nt strike particularly good reason move christophe pettus xof thebuild dot com apr andres freund wrote nt panic way getting io error read either likely persistent error writes remapping storage layer fix issue read distinction drawn though immediately pas error back client read write problem situation masked extended period time said lot great thing nt think need panic reason panic yes assume big persistent problem would much widely reported would however good find way get error surfaced back client way monitoring kernel log craig ringer craig dot com april christophe pettus wrote apr greg stark wrote consider dirty filesystem buffer hardware failure preventing written memory leak irrational position file system buffer dedicated memory file system caching used one better use moment inability flush disk meant suddenly became pinned memory large copy operation yanked usb drive could result system allocatable memory guess theory could swap swapping file system buffer hope sometime future could properly written nt seem architecturally sound yep another example write nfs iscsi volume go away forever app keep write ing hope come back time kernel start reporting eio write already saddled huge volume dirty writeback buffer ca nt get rid someone one day might want know could make argument ok forget entire file system go away actually ok remounted really bad someone expecting write reliability coarsen dirty buffer tracking marking fd bad fd mark file nt open moment mark inode cache entry pin guess app triggered io error vast number small file kernel left holding ball nt know ifwhen app return check nt know long remember failure nt know interested client informed treat fault clearedrepaired either keep reporting eio postgresql writes fsyncs indefinitely even recovery way could avoid would keep dirty writeback page around flagged bad clear flag new write replaces file range ca nt imagine practical blaming kernel sure easy way imo rationally expect kernel remember error state forever u forget expect without actually telling anything activity even still exist still interested fileswrites closed file gone away whatever likely going involve anymore even somehow convince kernel folk add new interface u report io error listener like inotifyfnotifydnotifywhateveritistodaynotify extension reporting error buffered async writes wo nt able rely year linux craig ringer craig dot com april bruce momjian wrote think big problem nt way stopping postgres time kernel report error kernel log returning potentially incorrect result committing transaction might wrong lost right specifically need way ask kernel checkpoint time everything written set file flushed successfully since last time asked matter writing matter writes flushed result panic redo hardwarevolume screwed user fail standby pitr etc nt way ask reliably present andres freund andres anarazel dot de hi christophe pettus wrote apr andres freund wrote nt panic way getting io error read either likely persistent error writes remapping storage layer fix issue read distinction drawn though immediately pas error back client read write problem situation masked extended period time lucky enough client actually read data somehow able figure across whole stack transaction fail due io error also need log analysis want solve thing like need regular read data including verification etc craig ringer craig dot com april andres freund wrote think danger presented far smaller statement thread might make one think clearly happening huge amount lot noise pg eating people data people shouting unreliable etc nt earth shattering imminent threat everyone data gone unnoticed root cause unidentified long time suspect written fair issue past bad hardware actually hardware fault trigger pgkernel interaction bug blamed container thing nt really container fault even happening ton hear noise already surprised learned postgresql completely ignores wholly absent relfilenodes specifically unlink relation backing relfilenode pg file writes pending wal merrily recreate uninitalized page go way andres pointed offlist discussion redo nt consistency check obliged fail case say well nt define away file loss f corruption etc problem lower level expect take care failed look checkpoint supposed promise whether problem define away problem lower level failed obliged detect fail gracefully choose say checkpoint required guarantee crashpower loss safety attempt protect io error sort fact think likely amend documentation release version say likelihood got io error kernel level retries nt fix database screwed database going interrupted service possible may unreadable data could result localised damage one relation could affect fk relationship index sort really unlucky might lose something critical like pgclog content general db repairablerecoverable even case many failure mode reason expect data loss like local disk fill seems safe already due space reservation write time thinprovisioned storage backing local volume iscsi paravirt block device fill nfs volume fill multipath io error interruption connectivity network block device disk develops localized bad sector nt previously written data except enospc nfs rest case handled expecting kernel retry forever return block written reach heat death universe nfs well part trouble kernel wo nt retry forever case nt seem way ask case user nt configured right behaviour term io error resilience nt find end world sure nice fix whether fsync report really somewhat besides point nt panic way getting io error read either likely persistent error writes remapping storage layer fix issue read read nt make promise committed synced think quite different fix thing reported error treated crash recovery rest think fair argument made far outside postgres remit certainly current version think need think robust path future certainly stop world territory doc need update indicate explicitly disclaim responsibility io error async writes kernel io stack must configured never give buffered writes problem anymore andres freund andres anarazel dot de craig ringer wrote suspect written fair issue past bad hardware actually hardware fault trigger pgkernel interaction bug blamed container thing nt really container fault even happening ton hear noise agreed think far likely thing like multixacts index structure corruption due logic bug etc already surprised learned postgresql completely ignores wholly absent relfilenodes specifically unlink relation backing relfilenode pg file writes pending wal merrily recreate uninitalized page go way andres pointed offlist discussion redo nt consistency check obliged fail case say well nt define away file loss f corruption etc problem lower level expect take care failed realy bad idea behave differently many failure mode reason expect data loss like local disk fill seems safe already due space reservation write time definitely treated separately thinprovisioned storage backing local volume iscsi paravirt block device fill nfs volume fill think need think robust path future certainly stop world territory think underestimating complexity least two order magnitude craig ringer craig dot com april andres freund wrote many failure mode reason expect data loss like local disk fill seems safe already due space reservation write time definitely treated separately f looked reserve space returning write even delayed allocation wo nt fail enospc fsync time silently due lost error background writeback otherwise hearing lot noise thinprovisioned storage backing local volume iscsi paravirt block device fill nfs volume fill unfortunately nt afaics nfs nt reserve space end returning write even mounted sync option get enospc lazily buffer writeback fails due full backing file system travel path eio fsync error retry appear succeed carry life losing data never hear error first place proposed extension allow see http see mention fsnfs reservespace xdrreservespace stuff seems related space protocol message quick read thin provisioned storage could vary fair bit depending implementation specific failure case saw prompting thread volume using stack xfs multipath san hbaiscsiwhatever recorded look iirc iscsi checking san ran space due use thin provisioning linux thought plenty space volume lvm thought plenty physical extent free unallocated xfs thought ton free space etc space exhaustion manifested io error flush writeback buffer log like kernel sd sdd unhandled sense code kernel sd sdd kernel result hostbytedidok driverbytedriversense kernel sd sdd kernel sense key data protect current kernel sd sdd kernel add sense space allocation failed write protect kernel sd sdd cdb kernel write hexdatacutout kernel buffer io error device logical block kernel lost page write due io error kernel buffer io error device logical block immediate cause linux multipath driver nt seem recognise sense code retryable gave reported next layer lvm lvm xfs seem think lower layer responsible retries toss write away tell interested writer feel like per discussion upthread case pg get news reported fsync error checkpoint reported error per relfilenode ran failed relfilenodes cause checkpoint error completed successful checkpoint kept running resulting corruption started manifest self segfaulted time later learned guarantee even get news io error wal separate volume nt run room immediately nt panic wal write failure prevent issue case pg panic able guarantee get news write failure reliably corruption data loss despite underlying storage issue prior seeing asked postgresql database corrupted thinprovisioned volume run space said surely postgresql wo nt corrupted running disk space order writes carefully force flush recover gracefully write failure except surprised btw also turn default multipath give error anyway see queueifnopath option nopathretries option hint run postgresql nopathretriesqueue sane default use odirectosync otherwise pretty much dataeating setup regularly see rather lot multipath system iscsi system san backed system etc think need pretty clear expect retry indefinitely report io error reliably handle need patch pg panic fsync failure document pg wo nt notice storage failure mode might otherwise considered nonfatal transient specific storage configuration testing required anyone also warn running nfs even hard sync nointr interesting tool tested error handling allowing people iscsi plugpull test sort thing far tell nobody ever test storage stack anyway nt plan writing something never get used think need think robust path future certainly stop world territory think underestimating complexity least two order magnitude oh minor total rewrite half pg big deal sure matter big think still underestimating workable option imo would sort fnotifydnotifywhatever report io error volume kind error reporting handle keep open volume level check volumetablespace fsync everything see really worked panic give u bad answer panic fsync error guard great majority sort shouldbetransientifthekerneldidntgiveupandthrowawayourdata error even good luck getting event nfs volume backing volume experience issue kind moot afaics interface exists greg stark stark mit dot edu april anthony iliopoulos wrote sun apr greg stark wrote april craig ringer wrote april thomas munro question kernel application case simply possible according freebsd keep dirty page around failure example eio block layer contract unrecoverable error pointless keep dirty need specialized interface clearout error drop dirty page potentially remount filesystem well firstly necessarily question enospc unrecoverable error even unrecoverable error single write nt mean write never able succeed future secondly nt interface already exist device dropped dirty page already get dropped point dropping keeping failing device underline point pointless keep dirty exactly backwards application point view error writing persistent medium really unrecoverable critical page kept data copied device last thing user space expects happen data ca nt written persistent storage also immediately delete ram really last thing user space expects happen return error anthony iliopoulos ailiop altatus dot com mon apr greg stark wrote april anthony iliopoulos wrote sun apr greg stark wrote april craig ringer wrote april thomas munro question kernel application case simply possible according freebsd keep dirty page around failure example eio block layer contract unrecoverable error pointless keep dirty need specialized interface clearout error drop dirty page potentially remount filesystem well firstly necessarily question enospc unrecoverable error even unrecoverable error single write nt mean write never able succeed future make thing bit simpler let u focus eio moment contract block layer filesystem layer assumed eio propagated f may assume possibility recovering exhausted lower layer stack mind claiming contract either documented necessarily respected fact study error propagation handling block layer see let u assume design contract though appears case across number opensource kernel bug case indeed specific write never able succeed future least long bios allocated specific failing lbas secondly nt interface already exist device dropped dirty page already get dropped point dropping keeping failing device think degree failure certainly case one may encounter localized unrecoverable medium error specific certain lbas nonmaskable block layer mean device dropped make sense continue operation region device functional case total device failure filesystem prevent proceeding anyway underline point pointless keep dirty exactly backwards application point view error writing persistent medium really unrecoverable critical page kept data copied device last thing user space expects happen data ca nt written persistent storage also immediately delete ram really last thing user space expects happen return error right implies though apart kernel keep around dirtiedbutunrecoverable page unbounded time interface obtaining exact failed page read back turn mean need association fsync caller specific dirtied page caller intent drain need fsyncrange among thing btw currently failed writebacks dropped memory rather marked clean could lost though due memory pressure due explicit request eg proc dropcaches unless mlocked clear responsibility application keep buffer around successful fsync kernel report error albeit complexity dealing interface point application may assume write ever even buffered kernel page cache first place seem asking capability dropping buffer kernel fence idemnifying application responsibility ie hard assurance either kernel persist page keep around till application recovers asynchronously filesystem unmounted system rebooted http geoff winkle pgsqladmin geoff dot dj april anthony iliopoulos wrote seem asking capability dropping buffer kernel fence idemnifying application responsibility ie hard assurance either kernel persist page keep around till application recovers asynchronously filesystem unmounted system rebooted seems like perfectly reasonable position take frankly whole point operating system exactly developer able call write fsync know call succeeded result disk matter another application done meantime difficult problem o problem mine o nt notdoingitsjob craig ringer craig dot com april anthony iliopoulos wrote clear responsibility application keep buffer around successful fsync kernel report error albeit complexity dealing interface point application may assume write ever even buffered kernel page cache first place seem asking capability dropping buffer kernel fence idemnifying application responsibility ie hard assurance either kernel persist page keep around till application recovers asynchronously filesystem unmounted system rebooted pg appears assume yes whether reasonable whole different topic like middle ground kernel let u register interest tell u lost something without u keep eight million fds open long period tell u anything happens pgdata inotifystyle perdirectoryregistration option even say ideal mean time propose fsync close age fds lru backends yes hurt throughput cause stall nt seem many better option least flush actually wrote o buffer may sharedbuffers bgwriter thing safe problem trivial make guc much like fsync fullpagewrites option people turn know risk know storage safe nt care keen person want later could optimise adding fsync worker thread pool backends nt block main thread frankly might nice thing checkpointer anyway scope fixing durability term partway patch make fsync panic error done next step force fsync close md see go anthony iliopoulos ailiop altatus dot com mon apr geoff winkle wrote april anthony iliopoulos wrote seem asking capability dropping buffer kernel fence idemnifying application responsibility ie hard assurance either kernel persist page keep around till application recovers asynchronously filesystem unmounted system rebooted seems like perfectly reasonable position take frankly indeed long willing ignore consequence design decision mainly would recover memory application interested clearing error point application different priority find position rather unreasonable since way good luck convincing o kernel upstream go design whole point operating system exactly developer able call write fsync know call succeeded result disk matter another application done meantime difficult problem o problem mine o nt notdoingitsjob o kernel know provides promise atomicity write fsync sequence unless one using osync nt provide isolation either delegated userspace process share file coordinate accordingly difficult problem rather kernel provide common denominator possible interface design could accommodate wider range potential application scenario kernel possibly anticipate requirement plenty experimental work providing transactional acid filesystem interface application opposite end quite commercial database completely bypass kernel storage stack would assume reasonable figure something two extreme work portable fashion anthony iliopoulos ailiop altatus dot com mon apr craig ringer wrote like middle ground kernel let u register interest tell u lost something without u keep eight million fds open long period tell u anything happens pgdata inotifystyle perdirectoryregistration option even say ideal see saying basically always maintain notification descriptor open kernel would inject event related writeback failure file watch potentially enriched contain info regarding exact failed page file offset map kernel would nt even maintain perpage bit trace error since consumed process read event discarded notification fd closed assuming would possible would nt pg still need deal synchronizing writer related issue since would merely notification mechanism prevent process continuing understand would rather intrusive current pg multiprocess design similarly interface could principle similarly implemented bsds via kqueue suppose provide need tomas vondra tomas dot vondra dot com pm anthony iliopoulos wrote mon apr geoff winkle wrote april anthony iliopoulos wrote seem asking capability dropping buffer kernel fence idemnifying application responsibility ie hard assurance either kernel persist page keep around till application recovers asynchronously filesystem unmounted system rebooted seems like perfectly reasonable position take frankly indeed long willing ignore consequence design decision mainly would recover memory application interested clearing error point application different priority find position rather unreasonable since way sure question whether system reasonably operate writes failed data got lost ca nt recovering memory rather useless might better stop system case forcing system administrator resolve issue somehow failover replica perform recovery last checkpoint already dirtybytes dirtybackgroundbytes example nt see could nt another limit defining much dirty data allow blocking writes altogether sure simple get general idea allow using available memory writeback issue nt throw data away case temporary issue good luck convincing o kernel upstream go design well seem kernel seem exactly already least understand thread say freebsd illumos example entirely insane design apparently question whether current design make easier userspace developer build reliable system tried using unfortunately answer seems use direct io manage everything whole point operating system exactly developer able call write fsync know call succeeded result disk matter another application done meantime difficult problem o problem mine o nt notdoingitsjob o kernel know provides promise atomicity write fsync sequence unless one using osync nt provide isolation either delegated userspace process share file coordinate accordingly take care atomicity isolation implementation part obviously applicationspecific wal lock purpose io hand seems generic service provided o least saw difficult problem rather kernel provide common denominator possible interface design could accommodate wider range potential application scenario kernel possibly anticipate requirement plenty experimental work providing transactional acid filesystem interface application opposite end quite commercial database completely bypass kernel storage stack would assume reasonable figure something two extreme work portable fashion user ask u quite often actually question usually raw device performance ultimately boil buffered v direct io far answer rely kernel reliably know correctly simply nt manpower implement portable reliable handling different type storage one wonder many application actually use correctly considering postgresql care data durabilityconsistency much yet misunderstanding work year tomas vondra tomas dot vondra dot com bruce momjian wrote crazy idea would daemon check log stop postgres seems something wrong nt seem like practical way better nothing course wonder would work container think may access kernel log also pretty sure message change based kernel version possibly filesystem parsing reliably seems rather difficult probably nt want panic io error unrelated device need understand device related postgresql abhijit menonsen am dot com tomas dot vondra dot com wrote bruce momjian wrote crazy idea would daemon check log stop postgres seems something wrong nt seem like practical way least craig test showed ca nt rely always getting error message log tomas vondra tomas dot vondra dot com craig ringer wrote april andres freund andres anarazel dot de think danger presented far smaller statement thread might make one think clearly happening huge amount lot noise pg eating people data people shouting unreliable etc nt earth shattering imminent threat everyone data gone unnoticed root cause unidentified long time yeah clearly nt case everything suddenly got pointless fairly annoying though suspect written fair issue past bad hardware actually hardware fault trigger pgkernel interaction bug blamed container thing nt really container fault even happening ton hear noise right write error fairly rare probably ignored fair number case demonstrating issue kinda reminds wisdom seeing plane bullet hole engine mean engine nt need armor http mediumcom anthony iliopoulos ailiop altatus dot com mon apr tomas vondra wrote already dirtybytes dirtybackgroundbytes example nt see could nt another limit defining much dirty data allow blocking writes altogether sure simple get general idea allow using available memory writeback issue nt throw data away case temporary issue sure could knob limiting much memory zombie page may occupy sure helpful would long run since tends highly applicationspecific something large data footprint one would end tuning accordingly systemwide manner potential leave application running system little memory case example original application crash never clear error apart interface would need provided actually dealing error assuming nontransient issue may fixed transparently temporary issue taken care lower layer stack well seem kernel seem exactly already least understand thread say freebsd illumos example entirely insane design apparently reasonable even freebsd big fat comment right since mentioning recovery eio block layer need done differently idea application running top either freebsd illumos would actually recover error clear remounting f order force dropping relevant page provide though indeed persistent error indication would allow pg simply reliably panic necessarily play well application may using filesystem reliably time faced eio writes succeed persisted ideally want potentially persistent indication error localized file region mapping corresponding failed writeback page netbsd already implementing fsyncranges could step right direction one wonder many application actually use correctly considering postgresql care data durabilityconsistency much yet misunderstanding work year would expect would potentially simple process model eg embedded db abort txn fsync eio think durability rather complex crosslayer issue grossly misunderstood similarly past eg see seems o db community greatly benefit periodic reality check see opportunity strengthening io stack endtoend manner http greg stark stark mit dot edu april anthony iliopoulos wrote mon apr tomas vondra wrote sure could knob limiting much memory zombie page may occupy sure helpful would long run since tends highly applicationspecific something large data footprint one would end tuning accordingly systemwide manner surely exactly kernel manage control much memory allowed full dirty buffer first place ensure system wo nt get memory starved ca nt clean fast enough nt even persistent hardware error even hardware working perfectly flush buffer fast whole point kernel abstract away shared resource like user space better view situation postgres implemented directio would exactly problem le visibility rest system every application implemented buffer cache would back boat fragmented memory allocation potential leave application running system little memory case example original application crash never clear error still think speaking two different language application anywhere going clear error application done writes calling fsync want wait filesystem arrange write persisted application could manage without persistence would nt called fsync way clear error would writes succeed reason think would nt possible sometime filesystem could remap block administrator could replace degraded raid device component thing postgres could recover would create new file move data reading dirty buffer memory new file anyways would clear error longer calling fsync old file always read fsync simple write barrier documentation promised postgres always expected sound like kernel implementors looked kind communication channel communicate status report specific writes back userspace much complex problem would entirely different interface think much difficulty communicating reasonable even freebsd big fat comment right since mentioning recovery eio block layer need done differently idea application running top either freebsd illumos would actually recover error clear remounting f order force dropping relevant page provide though indeed persistent error indication would allow pg simply reliably panic necessarily play well application may using filesystem reliably time faced eio writes succeed persisted well writing file previous error doubt many application would happy consider writes persisted file corrupt ironically earlier discussion quoted talked application wanted granular communication would using odirect fsync trying granular impossible get strong guarantee anything one wonder many application actually use correctly considering postgresql care data durabilityconsistency much yet misunderstanding work year would expect would potentially simple process model eg embedded db abort txn fsync eio honestly nt think way use current interface implement reliable operation even embedded database using single process keeping every file open time mean file descriptor limit limit scalability silent corruption whenever process like backup program come along call fsync even sync robert haas robertmhaas gmail dot com mon apr craig ringer wrote mean time propose fsync close age fds lru backends yes hurt throughput cause stall nt seem many better option least flush actually wrote o buffer may sharedbuffers bgwriter thing safe problem trivial make guc much like fsync fullpagewrites option people turn know risk know storage safe nt care ouch process exit say user typed q psql talking potentially calling fsync really large number file descriptor flushing many gigabyte data disk may well never actually wrote data file descriptor writes could come backends may written little bit data fds could lot data end flushing incidentally perfectly innocuous thing like starting backend running short query backend exit suddenly turn something could massive systemwide performance impact also backend ever manages exit without running code writes dirty block afterward still fails fix problem completely guess probably avoidable put late shutdown sequence panic fails really tough time believing right way solve problem suffered year desire flush entire page cache whenever single file fsync terrible eventually became norm problem went away going deliberately insert logic similar kind terrible thing kernel developer decided fsync nt say tin grant nt seem better option bet going lot really unhappy user joshua dot drake jd commandprompt dot com robert haas wrote mon apr craig ringer wrote mean time propose fsync close age fds lru backends yes hurt throughput cause stall nt seem many better option least flush actually wrote o buffer may sharedbuffers bgwriter thing safe problem trivial make guc much like fsync fullpagewrites option people turn know risk know storage safe nt care really tough time believing right way solve problem suffered year desire flush entire page cache whenever single file fsync terrible eventually became norm problem went away going deliberately insert logic similar kind terrible thing kernel developer decided fsync nt say tin grant nt seem better option bet going lot really unhappy user nt better option whatever optional guc change plenty year people noticing issue robert correct go back era thing like stall going look bad u matter describe problem gasper zejn zejn owca dot info tomas vondra wrote bruce momjian wrote crazy idea would daemon check log stop postgres seems something wrong nt seem like practical way better nothing course wonder would work container think may access kernel log also pretty sure message change based kernel version possibly filesystem parsing reliably seems rather difficult probably nt want panic io error unrelated device need understand device related postgresql regard bit le crazy idea imagine creating linux kernel module kprobekretprobe capturing file passed fsync even byte range within file corresponding return value nt hard kprobe part linux kernel really long time first glance seems like could backported could stable log message implement kind fsync error log notification via whatever sane way get kernel kernel new enough ebpf support seems like using bcctools enable write quick script get exactly info via perf event obviously stopgap solution http githubcomiovisorbcc http mark dilger hornschnorter gmail dot com apr joshua drake wrote plenty year people noticing issue disagree noticed problem blamed thing five year tell customer use thin provisioning add code postgres refuse perform insert update disk volume full lost count number customer running older version product refuse upgrade come back complaint ran disk database corrupt time blaming virtualization thin provisioning robert haas robertmhaas gmail dot com mon apr pm robert haas wrote ouch process exit say user typed q psql talking potentially calling fsync really large number file descriptor flushing many gigabyte data disk may well never actually wrote data file descriptor writes could come backends may written little bit data fds could lot data end flushing incidentally perfectly innocuous thing like starting backend running short query backend exit suddenly turn something could massive systemwide performance impact also backend ever manages exit without running code writes dirty block afterward still fails fix problem completely guess probably avoidable put late shutdown sequence panic fails really tough time believing right way solve problem suffered year desire flush entire page cache whenever single file fsync terrible eventually became norm problem went away going deliberately insert logic similar kind terrible thing kernel developer decided fsync nt say tin grant nt seem better option bet going lot really unhappy user bug fixed http gitpostgresqlorggitweb ppostgresqlgit acommitdiff say somebody something along line p uxww grep postgres grep v grep awk print xargs kill restarts postgres craig proposal would nt cover case opportunity run fsync first crash way go back fsync stuff nt fsync kernel may already thrown away error state may lie u tell u everything fine new fd nt opened early enough ca nt find original discussion led commit right exactly sure scenario thinking think would least problem fullpagewritesoff previously started server fsyncoff wish switch fsyncon completing bulk load similar recovery read page see look ok continue later fsync failure revert page earlier state database corrupted absolute way detect write give new page content later fsync nt feel obliged tell error fd nt opened early enough eventually write discarded revert back old page version error ever reported anywhere another consequence behavior initdb never reliable pgrewind use nt actually fix problem intended solve also mean initdb nt crashsafe since data file change made backend initdb fsyncs initdb way knowing file backend going create therefore ca nt even theoretically open first presented u api contract expect buffered io open file read call fsync get error kernel may nevertheless decide previous write never managed flush ca nt flushed revert page content point past mostly le equivalent letting malicious adversary randomly overwrite database page plausiblelooking incorrect content without notice hoping still build reliable system avoid problem always open fd every file want modify written hold fsync pretty hard guarantee face kill think simplest technological solution problem rewrite entire backend supporting process use odirect everywhere maintain adequate performance write complete io scheduling system inside postgresql also since make sharedbuffers much larger since longer benefiting o cache need replace use malloc allocator pull sharedbuffers plus noted need totally rearchitect several critical frontend tool let freeze development next year work put notice linux longer supported platform existing release might want check whether fsync actually writes data disk usable way even odirect desupport linux entirely hopelessly broken unsupportable platform andres freund andres anarazel dot de hi robert haas wrote think simplest technological solution problem rewrite entire backend supporting process use odirect everywhere maintain adequate performance write complete io scheduling system inside postgresql also since make sharedbuffers much larger since longer benefiting o cache need replace use malloc allocator pull sharedbuffers plus noted need totally rearchitect several critical frontend tool let freeze development next year work put notice linux longer supported platform existing release might want check whether fsync actually writes data disk usable way even odirect desupport linux entirely hopelessly broken unsupportable platform let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway tomas vondra tomas dot vondra dot com pm mark dilger wrote apr joshua drake wrote plenty year people noticing issue disagree noticed problem blamed thing five year tell customer use thin provisioning add code postgres refuse perform insert update disk volume full lost count number customer running older version product refuse upgrade come back complaint ran disk database corrupt time blaming virtualization thin provisioning yeah big difference noticing issue happen often v attributing something else ability revisit past data corruption case would probably discover fair number case caused thing probably need acknowledge environment change significantly thing like thin provisioning likely get even common increasing incidence issue peter geoghegan pg bowt dot ie mon apr pm andres freund wrote let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway right seem implicitly assuming big difference problem storage layer could principle detect nt problem storage layer read article claiming technology like smart really reliable practical sense seems reason doubt gap big said suspect problem running disk space serious practical problem personally scoffed story involving postgres database corruption get attributed running disk space look like dead wrong http danluucomfileconsistency filesystem correctness anthony iliopoulos ailiop altatus dot com mon apr greg stark wrote honestly nt think way use current interface implement reliable operation even embedded database using single process keeping every file open time mean file descriptor limit limit scalability silent corruption whenever process like backup program come along call fsync even sync indeed true sync would induce fsync open inodes clear error nasty bug apparently went unnoticed long time hopefully errseqt linux fix deal least issue similar fix need adopted many kernel mark failed page clean honestly expect keeping around failed page acceptable change kernel recommendation probably coordinate userspace fsync buffered io implied fsync atomicity via osync would probably necessitate helper thread mask latency present async interface rest pg sound le intrusive going dio andres freund andres anarazel dot de anthony iliopoulos wrote buffered io implied fsync atomicity via osync kidding right could also add sleep tree hope solve problem reason nt permanently fsync everything namely way slow andres freund andres anarazel dot de april pm pdt anthony iliopoulos wrote honestly expect keeping around failed page acceptable change kernel recommendation probably coordinate userspace fsync required could well keep per inode information fatal failure occurred around report error bit explicitly cleared yes keep memory around unmount nobody clear order magnitude le result usable semantics justin pryzby pryzby telsasoft dot com mon apr craig ringer wrote could make argument ok forget entire file system go away actually ok going say okay clear error flag umount since opened file would prevent unmounting realized need consider case close ing fds opening later another process going say fine postgres since chdir basedir actually fine nondefault tablespaces mon apr anthony iliopoulos wrote notification descriptor open kernel would inject event related writeback failure file watch potentially enriched contain info regarding exact failed page file offset map postgres require backend process open file following close writeback error signalled checkpointer process anthony iliopoulos ailiop altatus dot com mon apr andres freund wrote anthony iliopoulos wrote buffered io implied fsync atomicity via osync kidding right could also add sleep tree hope solve problem reason nt permanently fsync everything namely way slow assuming apply principle selectively using osync time place currently actually call fsync also assuming want backwardscompatible solution kernel nt keep page around irrespective future fix short loading kernel module dealing problem directly available option seem either osync odirect ignoring issue tomas vondra tomas dot vondra dot com pm anthony iliopoulos wrote mon apr tomas vondra wrote already dirtybytes dirtybackgroundbytes example nt see could nt another limit defining much dirty data allow blocking writes altogether sure simple get general idea allow using available memory writeback issue nt throw data away case temporary issue sure could knob limiting much memory zombie page may occupy sure helpful would long run since tends highly applicationspecific something large data footprint one would end tuning accordingly systemwide manner potential leave application running system little memory case example original application crash never clear error apart interface would need provided actually dealing error assuming nontransient issue may fixed transparently temporary issue taken care lower layer stack nt quite see different possible issue running multiple application system one application generate lot dirty data reaching dirtybytes forcing application host synchronous writes course might argue temporary condition resolve dirty page get written storage case io issue permanent impact resolve unless io problem get fixed sure interface would need written possibly something say drop dirty page file application get killed something make sense course well seem kernel seem exactly already least understand thread say freebsd illumos example entirely insane design apparently reasonable even freebsd big fat comment right since mentioning recovery eio block layer need done differently idea application running top either freebsd illumos would actually recover error clear remounting f order force dropping relevant page provide though indeed persistent error indication would allow pg simply reliably panic necessarily play well application may using filesystem reliably time faced eio writes succeed persisted experience persistent io error device likely affect application using device unmounting f clear dirty page seems like acceptable solution nt see else application way suggesting application nt really want responsible recovering cleanup dirty page etc happy hand kernel eg kernel differently however want reliable information fsync outcome need properly manage wal checkpoint etc ideally want potentially persistent indication error localized file region mapping corresponding failed writeback page netbsd already implementing fsyncranges could step right direction one wonder many application actually use correctly considering postgresql care data durabilityconsistency much yet misunderstanding work year would expect would potentially simple process model eg embedded db abort txn fsync eio think durability rather complex crosslayer issue grossly misunderstood similarly past eg see seems o db community greatly benefit periodic reality check see opportunity strengthening io stack endtoend manner right getting perhaps current fsync behavior practical building actual application best regard anthony http thanks paper look interesting anthony iliopoulos ailiop altatus dot com mon apr andres freund wrote april pm pdt anthony iliopoulos wrote honestly expect keeping around failed page acceptable change kernel recommendation probably coordinate userspace fsync required could well keep per inode information fatal failure occurred around report error bit explicitly cleared yes keep memory around unmount nobody clear order magnitude le result usable semantics discussed think could acceptable especially pair optin mechanism application care deal would give shot still need way deal system prior kernel release eating fsync writeback error even sync tomas vondra tomas dot vondra dot com pm andres freund wrote april pm pdt anthony iliopoulos wrote honestly expect keeping around failed page acceptable change kernel recommendation probably coordinate userspace fsync required could well keep per inode information fatal failure occurred around report error bit explicitly cleared yes keep memory around unmount nobody clear order magnitude le result usable semantics nt expectation fsync call fails next one retry writing page hope succeeds course also possible suggested simply mark inode failed case next fsync ca nt possibly retry writes eg freeing space thinprovisioned system get reliable failure mode andres freund andres anarazel dot de justin pryzby wrote mon apr craig ringer wrote could make argument ok forget entire file system go away actually ok going say okay clear error flag umount since opened file would prevent unmounting realized need consider case close ing fds opening later another process mon apr anthony iliopoulos wrote notification descriptor open kernel would inject event related writeback failure file watch potentially enriched contain info regarding exact failed page file offset map postgres require backend process open file following close writeback error signalled checkpointer process nt think hard people argued thread could well open pipe postmaster write end open subprocess read end open checkpointer postmaster unused whenever closing file descriptor dirtied current process send pipe checkpointer checkpointer receive file descriptor making sure limit fsync close ing make room necessary biggest complication would presumably deduplicate received filedescriptors file without loosing track error even better could via dedicated worker quite possibly end performance benefit going say fine postgres since chdir basedir actually fine nondefault tablespaces think fair open pgversion created tablespaces would require hangups signal checkpointer whichever process creating one nt hard people would complain ca nt nasty hack anymore also save people butt preventing accidentally unmounting andres freund andres anarazel dot de hi tomas vondra wrote nt expectation fsync call fails next one retry writing page hope succeeds people expect personally nt think useful expectation deal crashrecovery big problem see always need keep file descriptor open pretty much file written inside outside postgres guaranteed see error solve even retrying would work advocate done past written code pg panic fsync failure need however clear bit crash recovery interesting policy perspective could apps would nt want also wonder could nt somewhere read relevant mounted filesystem errseq value whenever checkpointer notice finishing checkpoint changed crash restart mark dilger hornschnorter gmail dot com apr pm andres freund wrote hi robert haas wrote think simplest technological solution problem rewrite entire backend supporting process use odirect everywhere maintain adequate performance write complete io scheduling system inside postgresql also since make sharedbuffers much larger since longer benefiting o cache need replace use malloc allocator pull sharedbuffers plus noted need totally rearchitect several critical frontend tool let freeze development next year work put notice linux longer supported platform existing release might want check whether fsync actually writes data disk usable way even odirect desupport linux entirely hopelessly broken unsupportable platform let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway reading thread meaning standby could receive corrupt wal data become corrupted seems much bigger problem merely master become corrupted unrecoverable way long standing expectation serious hardware problem master result master needing replaced expectation one standby server would taken along master leaving copy database unusable bug corrupts standby server whole different class problem one folk come expect comment read problem isolated whichever server problem get propagated server reading right anybody clarify noncorehacker folk following along home tomas vondra tomas dot vondra dot com pm andres freund wrote hi tomas vondra wrote nt expectation fsync call fails next one retry writing page hope succeeds people expect personally nt think useful expectation maybe certainly prefer automated recovery temporary io issue like full disk thinprovisioning without database crashing restarting sure worth effort importantly rather delusional think kernel developer going enthusiastic approach deal crashrecovery big problem see always need keep file descriptor open pretty much file written inside outside postgres guaranteed see error solve even retrying would work advocate done past written code pg panic fsync failure sure likely way le invasive kernel perspective need however clear bit crash recovery interesting policy perspective could apps would nt want imho enough remount clear also wonder could nt somewhere read relevant mounted filesystem errseq value whenever checkpointer notice finishing checkpoint changed crash restart hmmmm interesting idea thing would help u older kernel wberr adressspace inode level sure something f level andres freund andres anarazel dot de hi mark dilger wrote reading thread meaning standby could receive corrupt wal data become corrupted nt see real problem one problematic scenario nt readily apply another wal checksummed problem new basebackup would potentially become corrupted however similarly pgrewind note saying andor linux nt change anything apocalypse nt comment read problem isolated whichever server problem get propagated server reading right think basically right case corruption could get propagated straightforward andres freund andres anarazel dot de hi tomas vondra wrote maybe certainly prefer automated recovery temporary io issue like full disk thinprovisioning without database crashing restarting sure worth effort oh agree one question force kernel hand allocating disk space case kernel allocates disk space immediately even delayed allocation effect case case current one rather past bug able make sure issue prezeroing data andor using fallocate tomas vondra tomas dot vondra dot com pm mark dilger wrote apr pm andres freund wrote hi robert haas wrote think simplest technological solution problem rewrite entire backend supporting process use odirect everywhere maintain adequate performance write complete io scheduling system inside postgresql also since make sharedbuffers much larger since longer benefiting o cache need replace use malloc allocator pull sharedbuffers plus noted need totally rearchitect several critical frontend tool let freeze development next year work put notice linux longer supported platform existing release might want check whether fsync actually writes data disk usable way even odirect desupport linux entirely hopelessly broken unsupportable platform let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway reading thread meaning standby could receive corrupt wal data become corrupted seems much bigger problem merely master become corrupted unrecoverable way long standing expectation serious hardware problem master result master needing replaced expectation one standby server would taken along master leaving copy database unusable bug corrupts standby server whole different class problem one folk come expect comment read problem isolated whichever server problem get propagated server reading right anybody clarify noncorehacker folk following along home good question nt see guarantee isolated master node consider example checkpoint happens primary page get modified fullpage get written wal page written page cache writeback page fails get discarded attempt modify page read stale version modify stale version writing change wal standby get fullpage wal stale page version nt seem like story happy end guess might easily missing protection built wal mark dilger hornschnorter gmail dot com apr pm tomas vondra wrote pm mark dilger wrote apr pm andres freund wrote hi robert haas wrote think simplest technological solution problem rewrite entire backend supporting process use odirect everywhere maintain adequate performance write complete io scheduling system inside postgresql also since make sharedbuffers much larger since longer benefiting o cache need replace use malloc allocator pull sharedbuffers plus noted need totally rearchitect several critical frontend tool let freeze development next year work put notice linux longer supported platform existing release might want check whether fsync actually writes data disk usable way even odirect desupport linux entirely hopelessly broken unsupportable platform let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway reading thread meaning standby could receive corrupt wal data become corrupted seems much bigger problem merely master become corrupted unrecoverable way long standing expectation serious hardware problem master result master needing replaced expectation one standby server would taken along master leaving copy database unusable bug corrupts standby server whole different class problem one folk come expect comment read problem isolated whichever server problem get propagated server reading right anybody clarify noncorehacker folk following along home good question nt see guarantee isolated master node consider example checkpoint happens primary page get modified fullpage get written wal page written page cache writeback page fails get discarded attempt modify page read stale version modify stale version writing change wal standby get fullpage wal stale page version nt seem like story happy end guess might easily missing protection built wal also imagine master standby similarly provisioned thus hit disk error around time resulting corruption even corruption choosing one standby two standby ten standby one need able assume certain amount statistical independence failure one server failure another tightly correlated dependent variable conclusion probability node failing simultaneously vanishingly small becomes invalid andres freund andres anarazel dot de hi mark dilger wrote also imagine master standby similarly provisioned thus hit disk error around time resulting corruption even corruption think grave mistake conflating enospc issue solve making sure always enough space preallocated eio type error problem different solution different tomas vondra tomas dot vondra dot com pm andres freund wrote hi mark dilger wrote also imagine master standby similarly provisioned thus hit disk error around time resulting corruption even corruption think grave mistake conflating enospc issue solve making sure always enough space preallocated eio type error problem different solution different case certainly count data corruption spreading master standby mark dilger hornschnorter gmail dot com apr pm tomas vondra wrote pm andres freund wrote hi mark dilger wrote also imagine master standby similarly provisioned thus hit disk error around time resulting corruption even corruption think grave mistake conflating enospc issue solve making sure always enough space preallocated eio type error problem different solution different happy take word case certainly count data corruption spreading master standby maybe point view somebody looking code user might see differently data loaded master getting replicated standby cause get corrupt seems like corruption spreading put cause quote argument made correlation prove cause forth still feel like causation arm length perspective pattern standby server tending fail often right around time master fails hard time comforting user hey technically causation loading data master cause master hit enospc replicating data standby cause standby hit enospc bug abound enospc fixed look like corruption spreading certainly planning taking hard look disk allocation standby server right soon thomas munro thomas dot munro enterprisedb dot com tue apr anthony iliopoulos wrote mon apr tomas vondra wrote well seem kernel seem exactly already least understand thread say freebsd illumos example entirely insane design apparently reasonable even freebsd big fat comment right since mentioning recovery eio block layer need done differently idea application running top either freebsd illumos would actually recover error clear remounting f order force dropping relevant page provide though indeed persistent error indication would allow pg simply reliably panic necessarily play well application may using filesystem reliably time faced eio writes succeed persisted right anyone interested change mentioned interesting one came bit earlier last year retrying may well futile least future fsync call wo nt report success bogusly may course spaceefficient way represent state comment implies never lying user perhaps involving filesystem level pinned inode level error stop writes unmounted something tell wo nt resort flakey fsync error reporting wonder anyone tell u window aix hpux http interesting thanks thomas munro thomas dot munro enterprisedb dot com tue apr thomas munro wrote wonder anyone tell u window aix hpux created wiki page track know think know fsync various operating system http wikipostgresqlorgwikifsyncerrors anyone information see mistake please go ahead edit andreas karlsson andreas proxel dot se pm craig ringer wrote like middle ground kernel let u register interest tell u lost something without u keep eight million fds open long period tell u anything happens pgdata inotifystyle perdirectoryregistration option even say ideal could risk race condition fsync incorrectly return success get notification something went wrong craig ringer craig dot com april andres freund wrote justin pryzby wrote mon apr craig ringer wrote could make argument ok forget entire file system go away actually ok going say okay clear error flag umount since opened file would prevent unmounting realized need consider case close ing fds opening later another process mon apr anthony iliopoulos wrote notification descriptor open kernel would inject event related writeback failure file watch potentially enriched contain info regarding exact failed page file offset map postgres require backend process open file following close writeback error signalled checkpointer process nt think hard people argued thread could well open pipe postmaster write end open subprocess read end open checkpointer postmaster unused whenever closing file descriptor dirtied current process send pipe checkpointer checkpointer receive file descriptor making sure limit fsync close ing make room necessary biggest complication would presumably deduplicate received filedescriptors file without loosing track error yep cheaper way though would nt work window though nt know window behaves yet prior discussion upthread checkpointer open ing file time backend backend writes passing fd backend done would better need way dup fd pas back backend needed reopen sometimes make sure keep oldest copy fd backend reopens multiple time biggie still fsync early checkpointer ran space fd list initscripts would need change ulimit checkpointer neither seems insurmountable fwiw agree corner case getting pretty big corner spread overcommitted dedupliating sans cloud storage etc io error indicate permanent hardware fault disk failure etc outlined earlier curious know aws eb error semantics cloud network block store posted amazon forum http forumsawsamazoncomthreadjspa nothing far also particularly inclined trust file system always reliably reserve space without case fail writeback space exhaustion nt need panic freak worth looking direction storage world moving whether become bigger issue time thomas munro thomas dot munro enterprisedb dot com tue apr pm craig ringer wrote april andres freund wrote nt think hard people argued thread could well open pipe postmaster write end open subprocess read end open checkpointer postmaster unused whenever closing file descriptor dirtied current process send pipe checkpointer checkpointer receive file descriptor making sure limit fsync close ing make room necessary biggest complication would presumably deduplicate received filedescriptors file without loosing track error yep cheaper way though would nt work window though nt know window behaves yet prior discussion upthread checkpointer open ing file time backend backend writes passing fd backend done would better would interlock concurrent checkpoint see make work sharefdorfsyncnow logic happens smgrwrite called flushbuffer hold ioinprogress defer random time later craig ringer craig dot com april mark dilger wrote reading thread meaning standby could receive corrupt wal data become corrupted yes directly first error happen think block got written nt memory state diverges disk state make subsequent wal writes based wrong information actually ok since standby replayed original wal correctly think time run trouble evict good written data sb f buffer cache later read old version block failed overwrite data checksum enabled might catch unless write left whole block stale case might generate full page write stale block propagate wal standby say standby relatively safe safe issue caught promptly le time afaics walbased replication physical logical perfect defense however remember storage system free sort overprovisioning nonnetwork file system nt use multipath set right issue exceptionally unlikely affect craig ringer craig dot com april andres freund wrote hi tomas vondra wrote maybe certainly prefer automated recovery temporary io issue like full disk thinprovisioning without database crashing restarting sure worth effort oh agree one question force kernel hand allocating disk space case kernel allocates disk space immediately even delayed allocation effect case case current one rather past bug able make sure issue prezeroing data andor using fallocate nitpick case kernel reserve disk space immediately returning write nfs seems main exception xfs nt allocate later performing actual writes f metadata initializing disk block etc wo nt notice error detectable actual time allocation like thin provisioning problem write return face writeback issue reckon safe spacerelated issue nfs whyyy would thinly provisioned sure corner case nt see reason expect spaceexhaustionrelated corruption problem sensible f backed sensible block device nt tested thing like quota verified reliable space reservation concurrency etc yet andres freund andres anarazel dot de april pm pdt craig ringer wrote april andres freund wrote hi tomas vondra wrote maybe certainly prefer automated recovery temporary io issue like full disk thinprovisioning without database crashing restarting sure worth effort oh agree one question force kernel hand allocating disk space case kernel allocates disk space immediately even delayed allocation effect case case current one rather past bug able make sure issue prezeroing data andor using fallocate nitpick case kernel reserve disk space immediately returning write nfs seems main exception xfs nt allocate later performing actual writes f metadata initializing disk block etc wo nt notice error detectable actual time allocation like thin provisioning problem write return face writeback issue reckon safe spacerelated issue nfs whyyy would thinly provisioned sure corner case nt see reason expect spaceexhaustionrelated corruption problem sensible f backed sensible block device nt tested thing like quota verified reliable space reservation concurrency etc yet solved pre zeroing andor fallocate suggested craig ringer craig dot com april andreas karlsson wrote pm craig ringer wrote like middle ground kernel let u register interest tell u lost something without u keep eight million fds open long period tell u anything happens pgdata inotifystyle perdirectoryregistration option even say ideal could risk race condition fsync incorrectly return success get notification something went wrong examine notification queue checkpoint fsync succeeded updated control file advance redo position intrigued suggestion upthread using kprobe similar achieve horrifying unportable hack make kernel people cry nt know way flush buffered probe data sure really get news time cool idea michael paquier michael paquier dot xyz mon apr robert haas wrote another consequence behavior initdb never reliable pgrewind use nt actually fix problem intended solve also mean initdb nt crashsafe since data file change made backend initdb fsyncs initdb way knowing file backend going create therefore ca nt even theoretically open first pgbasebackup pgdump pgdumpall anything using initdb fsyncpgdata would enter water craig ringer craig dot com april michael paquier wrote mon apr robert haas wrote another consequence behavior initdb never reliable pgrewind use nt actually fix problem intended solve also mean initdb nt crashsafe since data file change made backend initdb fsyncs initdb way knowing file backend going create therefore ca nt even theoretically open first pgbasebackup pgdump pgdumpall anything using initdb fsyncpgdata would enter water hit io error f nt reserve space hit enospc still job still flush buffer persistent storage maintains write ordering may detect report failure user expect yes great hardly throw hand give territory either also least initdb make initdb fsync file close annoying hardly end world michael paquier michael paquier dot xyz tue apr craig ringer wrote april michael paquier wrote pgbasebackup pgdump pgdumpall anything using initdb fsyncpgdata would enter water hit io error f nt reserve space hit enospc sure still job still flush buffer persistent storage maintains write ordering may detect report failure user expect yes great hardly throw hand give territory either also least initdb make initdb fsync file close annoying hardly end world well think place improving reporting failure fileutilsc frontends worst exit kind critical failure equivalent panic craig ringer craig dot com april michael paquier wrote well think place improving reporting failure fileutilsc frontends worst exit kind critical failure equivalent panic yup mean time speaking panic first cut patch make pg panic fsync failure need closer review testing presented anyone interested intentionally left failure error panic entire operation done unit error cause u retry whole thing example fsync temp file move place point panicing failure discard temp file error retry whole thing verified work expected modification test tool using pushed main downside panic redo nt try throw toy shut arguably get io error redo right thing anyway quite likely safer continuing error checkpoint indefinitely patch attached clear patch deal issue u retrying fsyncs turn unsafe address issue wo nt find writeback error attachmentcontenttypesize kb robert haas robertmhaas gmail dot com mon apr pm andres freund wrote let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else well admit nt entirely serious email nt entirely notserious either ca nt find reliably find whether content file disk content kernel giving call read going heck time building reliable system kernel developer determined insist semantics admittedly nt know whether case read anthony remark nt really see except give buffered io linux talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway think reliable error reporting nice think essential argument current linux behavior far advanced thread least far see kept retrying buffer forever would pointless might run machine memory might well discard previous comment already illustrated kernel really wall could put individual inodes permanent failure state discard dirty data suggested could others suggested think better put whole filesystem permanent failure state cleared remounting f could done asneeded basis number dirty buffer holding onto filesystem becomes large put filesystem infinitefail mode discard behavior would pretty easy administrator understand would resolve entire problem provided postgresql process survived eventual remount also nt really know mean unresolvable error drive beyond hope nt really make sense talk whether database stored corrupt general ca nt sure even get error eg system could idle drive could fire maybe case meant nice could report reliably least experience typically going get io error remount filesystem reboot rebuild array something error go away point want run recovery continue using database scenario matter quite bit error reporting like period failure occurring particular database allowed think successfully checkpointed nt going start recovery wrong place going shut telling thing obviously already know nt sound like near irresolvable corner case storage go bonkers either postgresql kernel interact way checkpoint succeed without relevant data getting persisted nt sound like right really clear reasonable idea fix sound like panic sufficient robert haas robertmhaas gmail dot com tue apr craig ringer wrote hit io error f nt reserve space hit enospc still job still flush buffer persistent storage maintains write ordering may detect report failure user expect yes great hardly throw hand give territory either also least initdb make initdb fsync file close annoying hardly end world think need every child postgres process started initdb individually suspect would slow initdb quite lot admittedly anybody postgresql developer minor issue regression test mostly run fsyncoff anyway strong suspicion assumption fsync report error baked awful lot part system time get unbaking think going really surprising nt done real harm overall system performance btw took look mariadb source code see whether got problem sure look like osfilefsyncposix retries fsync loop second sleep retry warns failure fails assertion failure hard understand would written code way unless expect error reported fsync continue reported underlying condition corrected look like would nt problem trying reopen file fsync later spot checked place code invoked look like file already expected open anthony iliopoulos ailiop altatus dot com hi robert tue apr robert haas wrote mon apr pm andres freund wrote let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else well admit nt entirely serious email nt entirely notserious either ca nt find reliably find whether content file disk content kernel giving call read going heck time building reliable system kernel developer determined insist semantics admittedly nt know whether case read anthony remark nt really see except give buffered io linux think would interesting get touch respective linux kernel maintainer open topic detailed discussion upcoming would perfect opportunity past cfp deadline may still worth contacting organizer bring forward issue see chance someone pg invited discussion greg stark stark mit dot edu april anthony iliopoulos wrote mon apr greg stark wrote april anthony iliopoulos wrote make thing bit simpler let u focus eio moment contract block layer filesystem layer assumed eio propagated f may assume possibility recovering exhausted lower layer stack well postgres using filesystem interface block layer filesystem may indeed need complex would nt know nt think possibility useful concept neither layer going perfect promise possibility actually implemented exhausted even among degree done automatically within engineering tradeoff constraint always case like thin provisioned device operator expand degraded raid array repaired long operation network device ca nt sure whether remote server may eventually come back reconfigured human system automation tool point new server new network configuration right implies though apart kernel keep around dirtiedbutunrecoverable page unbounded time interface obtaining exact failed page read back interface fsync give u information granularity single file database could theory recognize fsync completing file read file back write new file likely would implement feature oracle writing key file multiple device currently practice would happen would happen would human would recognize database stopped able commit hardware error log would stop database take backup restore onto new working device current interface one error postgres would pretty much say sorry database corrupt data gone restore backup pretty dismal clear responsibility application keep buffer around successful fsync kernel report error albeit complexity dealing interface point application may assume write ever even buffered kernel page cache first place postgres store entire database ram writes thing filesystem time call fsync need write barrier ensure consistency frequent transaction log ensure flushed data modification periodically checkpoint data file amount data written checkpoint arbitrarily large postgres idea much memory available filesystem buffer much io bandwidth available memory pressure suggesting application babysit filesystem buffer cache reimplement userspace filesystem free throw away data time chooses current interface throw away filesystem buffer cache unmount sound like kernel would like granular way discard part device make lot sense age large network block device nt think saying filesystem buffer cache something every application need reimplement userspace really help going problem solve greg stark stark mit dot edu april craig ringer wrote nitpick case kernel reserve disk space immediately returning write nfs seems main exception kind puzzled surely nfs server store data filesystem using write inkernel equivalent server backed filesystem write preallocates space surely nfs server must behave itspreallocating well would expect nfs provide basically set possible failure underlying filesystem long nt enable nosync course joshua dot drake jd commandprompt dot com hacker reached linux devs tytso mit dot edu response hi joshua nt actually issue longstanding vfsmm issue going multiple opinion right thing try give unbiased description possible certainly going filtered bias matter careful first storage device hit exception condition quite nondeterministic example vast majority ssd power fail certified mean suffer power drop gc quite possible data written six month ago lost result lba could potentialy far far away lba recently written could multiple cache flush operation since lba question last written six month ago matter consumergrade ssd possible lba trashed unexpected power drop one get quite paranoid assume way guarantee data robustness store multiple copy andor use erasure encoding copy shard written geographically diverse data center secondly think fair say vast majority company require data robustness either willing pay enterprise distro company like red hat command large enough paying customer base afford dictate term enterprise distro hire consultant christoph staffed linux kernel team tended use odirect better worse much investment buffered io data robustness face exception handling storage device next reason fsync behaviour one ofhe common case io storage error buffered use case certainly seen community distros user pull usb stick use case dirtied page page cache question sooner later writes time leave page dirty effectively becomes permanent memory leak ca nt unmount file system requires writing page dirty bit turned nt clear dirty bit io error never cleaned ca nt even reinsert usb stick reinserted usb stick get new block device worse usb stick pulled suffered power drop see could happen power drop nonpower fail certified flash device go double cheap sh usb stick found checkout aisle micro center explanation linux handle io error clearing dirty bit reporting error user space eagerness solve problem simply nt clear dirty bit every one postgres installation might better recover io error probably thousand clueless fedora ubuntu user much worse user experience usb stick pull happens think thing could done example could switchable perblock device basis maybe permount basis whether dirty bit get cleared error reported userspace perhaps could new unmount flag cause dirty page wiped could used recover permanent loss block device question going invest time make change company willing pay comission work almost certainly soluble company kernel staff willing direct engineer work certainly could solved company client code care robustness proper handling failed disk drive kernel team staff pretty much one think eg oracle google etc use odirect nt try make buffered writes error reporting via fsync work well general company want lowlevel control buffer cache eviction algorithm drive towards design decision effectively implementing page cache userspace using odirect readswrites aware company willing pay new kernel feature implemented meet need might able refer company consultant might able work let know offline case ted joshua dot drake jd commandprompt dot com hacker thread picking list nt update archive often ca nt link discussion would preferred method sharing info thanks joshua dot drake jd commandprompt dot com pm joshua drake wrote hacker thread picking list nt update archive often ca nt link discussion would preferred method sharing info thanks anthony link http nt quite real time keep thing close enough jonathan corbet corbet lwn dot net tue apr anthony iliopoulos wrote upcoming would perfect opportunity past cfp deadline may still worth contacting organizer bring forward issue see chance someone pg invited discussion fwiw current intention sure development community least aware issue time lsfmm start event april park city utah bet room could found somebody postgresql community somebody would like represent group issue let know introduction advocacy direction would helpful greg stark stark mit dot edu april joshua drake wrote ca nt unmount file system requires writing page dirty bit turned always wondered linux nt implement umount f bsd since forever major annoyance missing linux even without leaking memory still leak resource cause confusion awkward workarounds ui automation software andres freund andres anarazel dot de hi jonathan corbet wrote event april park city utah bet room could found somebody postgresql community somebody would like represent group issue let know introduction advocacy direction would helpful room found might able make sf probably physically closest pg dev involved discussion thanks chiming jonathan corbet corbet lwn dot net wed apr andres freund wrote room found might able make sf probably physically closest pg dev involved discussion ok dropped pc note hopefully hearing bruce momjian bruce momjian dot u tue apr greg stark wrote april craig ringer wrote nitpick case kernel reserve disk space immediately returning write nfs seems main exception kind puzzled surely nfs server store data filesystem using write inkernel equivalent server backed filesystem write preallocates space surely nfs server must behave itspreallocating well would expect nfs provide basically set possible failure underlying filesystem long nt enable nosync course nt think write sent nfs time write nfs side would reserve space might get write request return write success process bruce momjian bruce momjian dot u mon apr tomas vondra wrote bruce momjian wrote crazy idea would daemon check log stop postgres seems something wrong nt seem like practical way better nothing course wonder would work container think may access kernel log also pretty sure message change based kernel version possibly filesystem parsing reliably seems rather difficult probably nt want panic io error unrelated device need understand device related postgresql moreconsidered crazy idea postgresqlconf setting like archivecommand allows administrator specify command run fsync checkpoint marked complete write flush error fsync never see error fsync write flush error fsync associated previous writes script check io spaceexhaustion error return false case case stop maybe stop crash recover could exit former exit later also relying wal make sure wal actually safe fsync betting odirect method actually safe walsyncmethod fsync default first option supported operating system opendatasync fdatasync default linux fsync fsyncwritethrough opensync betting marked walsyncmethod method safe since time write fsync bruce momjian bruce momjian dot u mon apr tomas vondra wrote bruce momjian wrote crazy idea would daemon check log stop postgres seems something wrong nt seem like practical way better nothing course wonder would work container think may access kernel log also pretty sure message change based kernel version possibly filesystem parsing reliably seems rather difficult probably nt want panic io error unrelated device need understand device related postgresql replying specific case sure would use script check io errorsspaceexhaustion postgres user nt access odirect work container case andres freund andres anarazel dot de bruce momjian wrote also relying wal make sure wal actually safe fsync betting odirect method actually safe walsyncmethod fsync default first option supported operating system opendatasync fdatasync default linux fsync fsyncwritethrough opensync betting marked walsyncmethod method safe since time write fsync hm really issue though one issue retries necessarily safe buffered io fsync might report error fd closed opened odirect used wal archiving streaming nt used make pretty useless anyway andres freund andres anarazel dot de bruce momjian wrote mon apr tomas vondra wrote nt seem like practical way better nothing course wonder would work container think may access kernel log also pretty sure message change based kernel version possibly filesystem parsing reliably seems rather difficult probably nt want panic io error unrelated device need understand device related postgresql certainly access kernel log container assume script would nt check various system log instead tail devkmsg otherwise variance installation would big many different type error message nt change often detect error common f probably good detecting general storage layer message would nt hard either thing unified last year replying specific case sure would use script check io errorsspaceexhaustion postgres user nt access sure mean space exhaustiion checked allocating space fwiw need use posixfallocate et al odirect work container case yes bruce momjian bruce momjian dot u mon apr peter geoghegan wrote mon apr pm andres freund wrote let lower pitchfork bit obviously grand rewrite absurd proposed way supposed work think case discussing much closer near irresolvable corner case anything else talking storage layer returning irresolvable error hosed even report properly yes nice could report reliably nt change fact ensuring data safely fsynced unless storage fails case safely fsynced anyway right seem implicitly assuming big difference problem storage layer could principle detect nt problem storage layer read article claiming technology like smart really reliable practical sense seems reason doubt gap big said suspect problem running disk space serious practical problem personally scoffed story involving postgres database corruption get attributed running disk space look like dead wrong yes think need look user expectation device hardware write error true good detect might permanent temporary eg nasnfs longer error persists likely user expect corruption however right length outage could cause corruption reported case running disk space also something nt expect corrupt database expect prevent future writes seems nasnfs thin provisioned storage problem always reported initial action might educate user write error cause silent corruption outofspace error nasnfs thin provisioned storage cause corruption kernel log postgres log monitored issue failoverrecovering might necessary bruce momjian bruce momjian dot u tue apr andres freund wrote bruce momjian wrote also relying wal make sure wal actually safe fsync betting odirect method actually safe walsyncmethod fsync default first option supported operating system opendatasync fdatasync default linux fsync fsyncwritethrough opensync betting marked walsyncmethod method safe since time write fsync hm really issue though one issue retries necessarily safe buffered io fsync might report error fd closed opened well focusing delay backend checkpoint writes checkpoint fsyncs point problem write fsync wal yes delay much shorter issue still exists realize newer linux kernel problem since file descriptor remains open problem exists oldercommon linux kernel odirect used wal archiving streaming nt used make pretty useless anyway uh nt opendatasync opensync fsync part write meaning ca nt lose error report like others craig ringer craig dot com april bruce momjian wrote tue apr greg stark wrote april craig ringer wrote nitpick case kernel reserve disk space immediately returning write nfs seems main exception kind puzzled surely nfs server store data filesystem using write inkernel equivalent server backed filesystem write preallocates space surely nfs server must behave itspreallocating well would expect nfs provide basically set possible failure underlying filesystem long nt enable nosync course nt think write sent nfs time write nfs side would reserve space might get write request return write success process sent using sync mode reading doc using async mode already open many potential corruption might well bother need look nfs expand test cover properly craig ringer craig dot com april craig ringer wrote april michael paquier wrote well think place improving reporting failure fileutilsc frontends worst exit kind critical failure equivalent panic yup mean time speaking panic first cut patch make pg panic fsync failure need closer review testing presented anyone interested intentionally left failure error panic entire operation done unit error cause u retry whole thing example fsync temp file move place point panicing failure discard temp file error retry whole thing verified work expected modification test tool using pushed main downside panic redo nt try throw toy shut arguably get io error redo right thing anyway quite likely safer continuing error checkpoint indefinitely patch attached clear patch deal issue u retrying fsyncs turn unsafe address issue wo nt find writeback error thinking definitely need guc force continue despite potential hazard otherwise go backwards status quo position uptime vital correctness problem tolerated repaired later kind like zerodamagedpages need sort continueafterfsyncerrors without panic enter redo problem persists panic redo exit startup process going help user amend patch accordingly time permit bruce momjian bruce momjian dot u wed apr craig ringer wrote april bruce momjian wrote tue apr greg stark wrote april craig ringer wrote nitpick case kernel reserve disk space immediately returning write nfs seems main exception kind puzzled surely nfs server store data filesystem using write inkernel equivalent server backed filesystem write preallocates space surely nfs server must behave itspreallocating well would expect nfs provide basically set possible failure underlying filesystem long nt enable nosync course nt think write sent nfs time write nfs side would reserve space might get write request return write success process sent using sync mode reading doc using async mode already open many potential corruption might well bother need look nfs expand test cover properly sync mode pass write nfs nfs prereserves write space throw error reservation failure mean nfs corrupt cluster outofspace error thin provisioning understand sharing free space among file system write arrives assume reserve space problem many thin provisioning system nt sync mode ca nt force write appear device fsync bruce momjian bruce momjian dot u tue apr andres freund wrote bruce momjian wrote mon apr tomas vondra wrote nt seem like practical way better nothing course wonder would work container think may access kernel log also pretty sure message change based kernel version possibly filesystem parsing reliably seems rather difficult probably nt want panic io error unrelated device need understand device related postgresql certainly access kernel log container assume script would nt check various system log instead tail devkmsg otherwise variance installation would big thinking dmesg result similar many different type error message nt change often detect error common f probably good detecting general storage layer message would nt hard either thing unified last year hard know exactly message format operating system hard generate demand would need filter based postgres device issue see message checkpoint exit nt want see message problem fixed server restarted simplest solution save output last check look new entry attaching script run every minute cron email unexpected kernel message thinking would need contrib module sample script various operating system replying specific case sure would use script check io errorsspaceexhaustion postgres user nt access sure mean space exhaustiion checked allocating space fwiw need use posixfallocate et al asking case permission prevent viewing kernel message think view container virtual machine might access host operating system kernel message might attachmentcontenttypesize byte craig ringer craig dot com wron april bruce momjian wrote sync mode pass write nfs nfs prereserves write space throw error reservation failure mean nfs corrupt cluster outofspace error yeah need verify concrete test case thing write allowed asynchronous anyway file system choose implement eager reservation space mandated afaics largely historical accident keep application happy f used allocate space write time moved delayed allocation apps tended break easily unless least reserved space nfs would roundtrip write reserve space linux man page http say successful return write make guarantee data committed disk filesystems including nfs even guarantee space successfully reserved data case error might delayed future write fsync even close way sure call fsync done writing data inclined believe refuse make guarantee especially lately thin provisioning understand sharing free space among file system thin provisioning done block level file system level f usually unaware thinprovisioned volume usually whole kernel unaware thin provisioning done san end hypervisor sort thing may done via lvm see lvmthin example may make different f iscsi volume backed san total concrete physical capacity san block mapping allocating storage chunk given volume f written block every previous free block previous storage chunk may also thing like block deduplication compression storage chunk nt written etc idea san actual physically allocate storage get start telling go buy another rack storage nt run nt resize volume resize file system etc storage space admin centralized san storage team sysadmins dba app devs none wiser buy storage need dba demand need free space margin case whether agree philosophy think sensible kind moot extremely widespread model server work may well backed thin provisioned storage even nt know think bit like vm overcommit storage malloc much memory like everything fine try actually use go dirty page free page available boom thing san lvm nt idea f internal inmemory free space counter space reservation understand f metadata care lba ever written f must make sure backing storage exists wo nt bother f touch block dirty writeback sometimes lazily part delayed allocation san running space free f may decremented freelist happily promising space apps write well far know full dirty writeback flush storage kaboom nowhere put data nt know posixfallocate sufficient safeguard either actually force writes page backing storage know sure space existed yes doc say successful call posixfallocate subsequent writes byte specified range guaranteed fail lack disk space speaking filesystem perspective f nt dirty flush actual block thin provisioned storage system wo nt know reasonable enough throw hand case say setup crazy breaking rule nt truth nt breaking rule disclaim support configuration anyway tell people use linux vm overcommit working see enabled great majority system work people reluctant turn nt want add swap someone san want allow unpredictable space use expansion various volume say ca nt go buy san instead going go well either often actually say make sure volume postgresql using eagerly provisioned expand need using online resize required nt care rest san guarantee create eb volume aws nt get storage preallocated aws probably pretty good running backing store though file system optimised thin provisioning etc commonly done thing like zero deallocated space thin provisioning system know return free pool thing like discard provide much signalling standard way mark kirkwood mark dot kirkwood catalyst dot net dot nz craig ringer wrote guarantee create eb volume aws nt get storage preallocated aws probably pretty good running backing store though db folk used anyway advise dding freshly attached device aws performance mainly iirc would help prevent failure scenario thin provisioned storage probably really annoy admins thereof craig ringer craig dot com april mark kirkwood wrote craig ringer wrote guarantee create eb volume aws nt get storage preallocated aws probably pretty good running backing store though db folk used anyway advise dding freshly attached device aws performance mainly iirc would help prevent failure scenario thin provisioned storage probably really annoy admins thereof still make lot sense aws eb particularly using volume created nonempty snapshot performance based eb volume spectacularly awful since copyonread reading whole volume help lot bruce momjian bruce momjian dot u wed apr craig ringer wrote wron april bruce momjian wrote sync mode pass write nfs nfs prereserves write space throw error reservation failure mean nfs corrupt cluster outofspace error yeah need verify concrete test case thanks thing write allowed asynchronous anyway file system choose implement eager reservation space mandated afaics largely historical accident keep application happy f used allocate space write time moved delayed allocation apps tended break easily unless least reserved space nfs would roundtrip write reserve space linux man page http say successful return write make guarantee data committed disk filesystems including nfs even guarantee space successfully reserved data case error might delayed future write fsync even close way sure call fsync done writing data inclined believe refuse make guarantee especially lately uh even calling fsync write nt safe since kernel could flushed dirty page storage failed fsync would later succeed realize newer kernel fixed file open operation minority installs idea san actual physically allocate storage get start telling go buy another rack storage nt run nt resize volume resize file system etc storage space admin centralized san storage team sysadmins dba app devs none wiser buy storage need dba demand need free space margin case whether agree philosophy think sensible kind moot extremely widespread model server work may well backed thin provisioned storage even nt know f touch block dirty writeback sometimes lazily part delayed allocation san running space free f may decremented freelist happily promising space apps write well far know full dirty writeback flush storage kaboom nowhere put data see saying kernel reserving write space free space free space nt exist sure tell people make sure file system free space real actually force writes page backing storage know sure space existed yes doc say successful call posixfallocate subsequent writes byte specified range guaranteed fail lack disk space speaking filesystem perspective f nt dirty flush actual block thin provisioned storage system wo nt know frankly case write fail lack free space could new wal file recycled page added end table nt sound terrible eliminate corruption due free space exxhaustion would big step forward next common failure would temporary storage failure storage communication failure permanent storage failure game nt need worry gasper zejn zejn owca dot info record tried test case zfs ubuntu host zfs linux zfs swallow fsync error system handle error nicely test case program hang fsync load jump bunch zwriss znullint kernel thread belonging zfs eating cpu even managed reboot system complete utter mess test case adjustment http kind regard craig ringer wrote march thomas munro thomas dot munro enterprisedb dot com thu mar pm justin pryzby retries source problem first fsync return eio also clear error causing fsync data return success failing grok error flag even matter whether single bit counter described patch write back failed page still dirty future call fsync need try try flush presumably fail unless happens succeed time around think nt appear work way see error devicemapper destination mapped part volume wrote test case http githubcomringercscrapcodeblobmastertestcasesfsyncerrorclearc nt pretend kernel behaviour sane possible made error analysis since observed wild seen test case strongly suspect described happening braindead presumably kernel mark page clean dispatch io subsystem nt dirty io error nt dug deep kernel side see stackoverflow post detail found kernel code analysis andres freund andres anarazel dot de hi craig ringer wrote tl dr pg panic fsync eio return retrying fsync ok least linux fsync return success mean writes since last fsync hit disk assume mean writes since last successful fsync hit disk retried checkpoint retried fsync retry succeeded prior fsync cleared aseio bad page flag random thing look filesystems nfs yes xfs flush writes close check close return code log close count fsync filesystems lsfmm discus future behaviour linux right bruce momjian bruce momjian dot u mon apr andres freund wrote hi craig ringer wrote tl dr pg panic fsync eio return retrying fsync ok least linux fsync return success mean writes since last fsync hit disk assume mean writes since last successful fsync hit disk retried checkpoint retried fsync retry succeeded prior fsync cleared aseio bad page flag random thing look filesystems nfs yes xfs flush writes close check close return code log close count fsync filesystems well interesting might remember nfs reserve space writes like local file system like reason might able capture outofspace error close exit sooner nfs craig ringer craig dot com april andres freund wrote lsfmm discus future behaviour linux right interim lwnnet coverage found http thomas munro thomas dot munro enterprisedb dot com tue apr pm bruce momjian wrote mon apr andres freund wrote hi craig ringer wrote tl dr pg panic fsync eio return retrying fsync ok least linux fsync return success mean writes since last fsync hit disk assume mean writes since last successful fsync hit disk retried checkpoint retried fsync retry succeeded prior fsync cleared aseio bad page flag random thing look filesystems nfs yes xfs flush writes close check close return code log close count fsync filesystems well interesting might remember nfs reserve space writes like local file system like reason might able capture outofspace error close exit sooner nfs seems like implementation flush close therefore discover enospc problem point unless rfc write delegation promise server certain amount space available seems like ca nt count way though server decides delegate much space promise preallocated client userspace always need able handle error including enospc returned close ignore using operating system immediately incinerates evidence telling later fsync nt fail trouble relevant code look like bleeding edge nfs spec includes new allocate operation able support posixfallocate start using extending file http sure reliable posix fallocate nfs general though seems fallback implementation posixfallocate write zero even feign success probably wo nt anything useful also flushed fallback strategy might work eager reservation filesystems nt direct fallocate support several layer libc kernel nfs client nfs server need aligned work clear humble userspace program supposed know guess could find way amortise cost extending like oracle et al extending big container datafiles time whatever simply writing zero flushing might work ok would nt need thing unless course cow filesystem different worm thread continues mailing list joshua drake jd mandpromptcom subject fsync error unsafe risk data loss date tue apr appropriate list please point right direction postgresql contributor come across reliability problem writes fsync see thread http paquierxyz tl dr first message nt quite describe problem started dig darrick j wong darrickwong clecom date tue apr tue apr joshua drake wrote appropriate list please point right direction postgresql contributor come across reliability problem writes fsync see thread http paquierxyz tl dr first message nt quite describe problem started dig might try xfs list linuxxfs rkernelorg seeing initial complaint xfs behavior joshua drake jd mandpromptcom date tue apr darrick j wong wrote tue apr joshua drake wrote appropriate list please point right direction postgresql contributor come across reliability problem writes fsync see thread http paquierxyz tl dr first message nt quite describe problem started dig might try xfs list linuxxfs rkernelorg seeing initial complaint xfs behavior later thread becomes apparent applies nfs well picked assumed populated list since default filesystem distribution theodore t tytso edu date tue apr hi joshua nt actually issue longstanding vfsmm issue going multiple opinion right thing try give unbiased description possible certainly going filtered bias matter careful first storage device hit exception condition quite nondeterministic example vast majority ssd power fail certified mean suffer power drop gc quite possible data written six month ago lost result lba could potentialy far far away lba recently written could multiple cache flush operation since lba question last written six month ago matter consumergrade ssd possible lba trashed unexpected power drop one get quite paranoid assume way guarantee data robustness store multiple copy andor use erasure encoding copy shard written geographically diverse data center secondly think fair say vast majority company require data robustness either willing pay enterprise distro company like red hat command large enough paying customer base afford dictate term enterprise distro hire consultant christoph staffed linux kernel team tended use odirect better worse much investment buffered io data robustness face exception handling storage device next reason fsync behaviour one ofhe common case io storage error buffered use case certainly seen community distros user pull usb stick use case dirtied page page cache question sooner later writes time leave page dirty effectively becomes permanent memory leak ca nt unmount file system requires writing page dirty bit turned nt clear dirty bit io error never cleaned ca nt even reinsert usb stick reinserted usb stick get new block device worse usb stick pulled suffered power drop see could happen power drop nonpower fail certified flash device go double cheap sh usb stick found checkout aisle micro center explanation linux handle io error clearing dirty bit reporting error user space eagerness solve problem simply nt clear dirty bit every one postgres installation might better recover io error probably thousand clueless fedora ubuntu user much worse user experience usb stick pull happens think thing could done example could switchable perblock device basis maybe permount basis whether dirty bit get cleared error reported userspace perhaps could new unmount flag cause dirty page wiped could used recover permanent loss block device question going invest time make change company willing pay comission work almost certainly soluble company kernel staff willing direct engineer work certainly could solved company client code care robustness proper handling failed disk drive kernel team staff pretty much one think eg oracle google etc use odirect nt try make buffered writes error reporting via fsync work well general company want lowlevel control buffer cache eviction algorithm drive towards design decision effectively implementing page cache userspace using odirect readswrites aware company willing pay new kernel feature implemented meet need might able refer company consultant might able work let know offline case andreas dilger adilger gerca date tue apr apr joshua drake jd mandpromptcom wrote appropriate list please point right direction postgresql contributor come across reliability problem writes fsync see thread http paquierxyz tl dr first message nt quite describe problem started dig yes long thread summary postgres unhappy fsync linux also os return error prior write failure instead keeping dirty page memory forever trying rewrite behaviour existed linux forever better worse reasonable behaviour kernel take argued opposite behaviour time subsystem already limited retries finally giving failed write though also time retrying lower level pointless higher level code handle failure eg mirrored block device filesystem data mirroring userspace data mirroring crossnode replication confusion whether fsync level state return error forever page could written edge state return error write failure since previous fsync call think anthony iliopoulos pretty clear multiple description thread current behaviour needed oom whole system dirty page kept around forever many others stuck ca nt believe happening totally unacceptable every kernel need change match expectation without looking larger picture practical change issue best fixed regardless case net pg need deal system currently exist behaviour even day future may change though unlikely seems ironic keep dirty page userspace fsync return success totally unacceptable keep dirty page kernel fine limited understanding database preferred cache everything userspace use odirect write disk return error immediately write fails double buffer data martin steigerwald martin htvollde date tue apr hi theodore darrick joshua fsdevel appear specific well theodore theodore t nt actually issue longstanding vfsmm issue first storage device hit exception condition quite nondeterministic example vast majority ssd power fail certified mean suffer power drop gc quite possible data written six month ago lost result lba could potentialy far far away lba recently written could multiple cache flush operation since lba question last written six month ago matter consumergrade ssd possible lba trashed unexpected power drop guh aware knew consumergrade ssds often power loss protection still thought handle garble collection atomic way sometimes tempted sing hardware crap song starting meltdownspectre probably heading storage device including firmware crap like intel next reason fsync behaviour one ofhe common case io storage error buffered use case certainly seen community distros user pull usb stick use case dirtied page page cache question sooner later writes time leave page dirty effectively becomes permanent memory leak ca nt unmount file system requires writing page dirty bit turned nt clear dirty bit io error never cleaned ca nt even reinsert usb stick reinserted usb stick get new block device worse usb stick pulled suffered power drop see could happen power drop nonpower fail certified flash device go double cheap sh usb stick found checkout aisle micro center original postgresql mailing list thread get exactly freebsd differs behavior compared linux aware one operating system user point view handle almost right way imho amigaos removed floppy disk drive o writing showed must insert volume somename drive somedrive continued writing part work well original filesystem insert back whole disk corrupted usually point beyond repair must joke opinion point view sane way handle premature removal removable medium read gsoc project implement something like netbsd check outcome msdos think something similar however msdos multitasking operating system amigaos implementing something like linux would quite feat think cause addition implementation kernel desktop environment whatever userspace use would need handle well adapt udev udisks probably systemd probably behavior need restricted anything really removable even order prevent memory exhaustion case process continue write removed yet reinserted usb harddisk kernel would need halt io process dirty io device believe amigaos blocked subsequent io device still reinserted io handling o time quite different linux explanation linux handle io error clearing dirty bit reporting error user space eagerness solve problem simply nt clear dirty bit every one postgres installation might better recover io error probably thousand clueless fedora ubuntu user much worse user experience usb stick pull happens aware flash based medium may crappy hint test amigaos amigaos party poseidon usb stack mechanism worked even usb stick however test often check data corruption test andres freund andres razelde date tue apr sorry screwed thread structure reconstruct replyto cc list web archive found way properly download mbox old content subscribed fsdevel list hi ted wrote try give unbiased description possible certainly going filtered bias matter careful ted wrote better worse much investment buffered io data robustness face exception handling storage device bit cop database care even basic tool like scm package manager editor care whether proper response back fsync imply thing actually synced ted wrote explanation linux handle io error clearing dirty bit reporting error user space eagerness solve problem simply nt clear dirty bit every one postgres installation might better recover io error probably thousand clueless fedora ubuntu user much worse user experience usb stick pull happens nt think necessarily contradictory goal paint least postgres case deal fact fsync retry nt going fix problem reentering crash recovery shutting therefore nt need keep dirty buffer around perinode persuperblock bit cause fsyncs fail would entirely sufficent differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed postgres lot application guaranteed consistently one fd open every file writtten therefore even recent perfd errseq logic nt guarantee failure ever seen application diligently fsync ing even need per inode information case block device go away entirely f nt generally unmounted case could trivially keep permount superblock bit say died set instead keeping per inodewhatever information ted wrote aware company willing pay new kernel feature implemented meet need might able refer company consultant might able work find bit dissapointing response think fair say advanced feature talking basic guarantee fsync actually something even remotely reasonable andreas wrote confusion whether fsync level state return error forever page could written edge state return error write failure since previous fsync call nt think full issue deal fact fsync failure edgetriggered guarantee every process would get fact one need fd open failing writes occurred get failure big issue beyond postgres pretty common approach work lot file without fsyncing iterate directory fsync everything assume safe unless severaly misunderstand something safe kept fd every file open nt realistic pretty obvious reason ted wrote think anthony iliopoulos pretty clear multiple description thread current behaviour needed oom whole system dirty page kept around forever many others stuck ca nt believe happening totally unacceptable every kernel need change match expectation without looking larger picture practical change issue best fixed everone participate discussion andreas dilger adilger gerca date wed apr apr pm andres freund andres razelde wrote ted wrote better worse much investment buffered io data robustness face exception handling storage device bit cop database care even basic tool like scm package manager editor care whether proper response back fsync imply thing actually synced sure mostly pg imho crazy thing like writing thousand file closing file descriptor expecting fsync newlyopened fd return historical error editor try write file call fsync get error user enter new pathname retry write package manager assume package installation failed uninstall part package already written way filesystem handle package manager failure case keeping page dirty retrying indefinitely may never work eg disk dead disconnected sparse volume without free space etc imho implies higher layer know write failure implies need deal ted wrote explanation linux handle io error clearing dirty bit reporting error user space eagerness solve problem simply nt clear dirty bit every one postgres installation might better recover io error probably thousand clueless fedora ubuntu user much worse user experience usb stick pull happens nt think necessarily contradictory goal paint least postgres case deal fact fsync retry nt going fix problem reentering crash recovery shutting therefore nt need keep dirty buffer around perinode persuperblock bit cause fsyncs fail would entirely sufficent differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed think two issue fsync fd opened persistent error state without keeping dirty page memory background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back consider perinode error writing inode flag fsync would return error inode forever since way posix clear state since would need kept case new fd opened inode fsync want error returned imho alternative would keep dirty page memory written disk possible would need reboot clear dirty page truncate file discarding data postgres lot application guaranteed consistently one fd open every file written therefore even recent perfd errseq logic nt guarantee failure ever seen application diligently fsync ing application close fds file calling fsync fd kept open time failure return original error fsync longer return need keep every fd open forever could put shared pool reuse file reopened call fsync fd closed pool getting big want flush data file shut db would nt require huge rearchitecture pg small library handle shared fd pool might even improve performance opening closing file free especially working remote filesystems even need per inode information case block device go away entirely f nt generally unmounted case could trivially keep permount superblock bit say died set instead keeping per inodewhatever information filesystem definitely return error case nt think need kind change int struct file file lofft start lofft end int datasync unlikely inode isb return eio ted wrote aware company willing pay new kernel feature implemented meet need might able refer company consultant might able work find bit dissapointing response think fair say advanced feature talking basic guarantee fsync actually something even remotely reasonable linux pg run people develop need paid develop need others everyone already much work need find someone interest fixing imho peculiar use case pg developer want add tunable keep dirty page ram io failure nt think would hard someone might harder convince kernel maintainer accept losing side battle however like everything nt pay ca nt require someone else would nt hurt see jeff layton wrote errseq patch would interested work something like said even fix available linux tomorrow would year majority user would available system includes even errseq mechanism landed month ago implies want something fix pg work around whatever perceived breakage exists linux fsync implementation since thread indicates nonlinux kernel fsync behaviour make sense even linux fix available andreas wrote confusion whether fsync level state return error forever page could written edge state return error write failure since previous fsync call nt think full issue deal fact fsync failure edgetriggered guarantee every process would get fact one need fd open failing writes occurred get failure big issue beyond postgres pretty common approach work lot file without fsyncing iterate directory fsync everything assume safe unless severaly misunderstand something safe kept fd every file open nt realistic pretty obvious reason ca nt say common uncommon workload though pg application heard working filesystems year bit surprised anyone expects fsync newlyopened fd state write call predate open understand fsync returning error io happens within context fsync far go back reporting error file forever way clear error would reboot system since aware existing posix code clear error dave chinner david morbitcom date thu apr wed apr andreas dilger wrote apr pm andres freund andres razelde wrote ted wrote better worse much investment buffered io data robustness face exception handling storage device bit cop database care even basic tool like scm package manager editor care whether proper response back fsync imply thing actually synced sure mostly pg imho crazy thing like writing thousand file closing file descriptor expecting fsync newlyopened fd return historical error yeah seems like recipe disaster especially crossplatform code every o platform behaves differently almost never expectation speaking behaving differently expectation nobody mentioned close also return write error hence write close open fsync write error might get reported close fsync iows assumption async writeback error persist across close open fundamentally broken begin even documented slient data loss vector close man page man close dealing error return close careful programmer check return value close since quite possible error previous write operation reported final close release open file description failing check return value closing file may lead silent loss data especially observed nfs disk quota yeah ensuring data integrity face io error really hard problem pound broken record many good reason linux filesystem developer said use direct io pg devs time kernel nt complex thing pg need discussion case robust io error reporting easy dio one reason high performance database engine either using moving nonblocking aiodio rwfnowait use odsyncrwfdsync integritycritical io dispatch also driven availability high performance high iop solid state storage buffering ram optimise io pattern throughput provides real performance benefit using aiodio infrastructure ensures error reported specific write fails failure time ie aio completion event specific io yet high io throughput maintained without application needing threading infrastructure prevent blocking mean application nt guess write error occurred retryrecover handle async write error close use fsync gather write io error infer io failure require kernel every supported platform jump hoop try exactly right thing error condition everyone circumstance time andres freund andres razelde date wed apr andreas dilger wrote apr pm andres freund andres razelde wrote ted wrote better worse much investment buffered io data robustness face exception handling storage device bit cop database care even basic tool like scm package manager editor care whether proper response back fsync imply thing actually synced sure mostly pg imho crazy thing like writing thousand file closing file descriptor expecting fsync newlyopened fd return historical error postgres dpkg underlying apt debian derived distros take example randomly guessed want guarantee extracted file disk subsequent renames info database end old zero length file case system crash neither dpkgdeb tar explicit fsync xxx could avoided switching internal tar extractor dirsynccontents cidir bunch place especially also newer filesystems performancewise entirely infeasible fsync every single file individually performance becomes entirely attrocious think legitimate argument database use direct io reply david claiming sort random utility need use dio buffering etc insane editor try write file call fsync get error user enter new pathname retry write package manager assume package installation failed uninstall part package already written except wo nt notice got failure least dpkg case happily continue installing corrupted data way filesystem handle package manager failure case keeping page dirty retrying indefinitely may never work eg disk dead disconnected sparse volume without free space etc imho implies higher layer know write failure implies need deal yea agree sane far understand dpkg code reading also unnecessary abort installation detects error nt happening differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed think two issue fsync fd opened persistent error state without keeping dirty page memory background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back horrible cp file writeback fails background cat file restarting able see failed instead returning something bogus even extreme untarzipgit clone directory sync nt know whether anything actually succeeded consider perinode error writing inode flag fsync would return error inode forever since way posix clear state since would need kept case new fd opened inode fsync want error returned data file also corrupt unmount delete file reset fact ca nt safely assumed disk nt insane postgres lot application guaranteed consistently one fd open every file written therefore even recent perfd errseq logic nt guarantee failure ever seen application diligently fsync ing application close fds file calling fsync fd kept open time failure return original error fsync longer return need keep every fd open forever could put shared pool reuse file reopened call fsync fd closed pool getting big want flush data file shut db would nt require huge rearchitecture pg small library handle shared fd pool except postgres us multiple process work lot architecture started fsync opened file process exit user would lynch u need complicated scheme sends process across socket process deduplicate receiving side somehow figuring oldest filedescriptors handling clockdrift safely note perfectly fine thrown away buffer content get notified fsync failed could wal replay restore content crash andor replication might even improve performance opening closing file free especially working remote filesystems already perprocess cache open file even need per inode information case block device go away entirely f nt generally unmounted case could trivially keep permount superblock bit say died set instead keeping per inodewhatever information filesystem definitely return error case nt think need kind change int struct file file lofft start lofft end int datasync unlikely inode isb return eio well making argument several people argued throwing away buffer content case way cause ooms incompatible reporting error clearly ted wrote aware company willing pay new kernel feature implemented meet need might able refer company consultant might able work find bit dissapointing response think fair say advanced feature talking basic guarantee fsync actually something even remotely reasonable linux pg run people develop need paid develop need others sure everyone already much work need find someone interest fixing imho peculiar use case pg developer want add tunable keep dirty page ram io failure nt think would hard someone might harder convince kernel maintainer accept losing side battle however like everything nt pay ca nt require someone else would nt hurt see jeff layton wrote errseq patch would interested work something like nt think pg specific explained andres freund andres razelde date wed apr hi dave chinner wrote pound broken record many good reason linux filesystem developer said use direct io pg devs time kernel nt complex thing pg need discussion personally board also got ta recognize efficient dio usage metric ton work need large amount differing logic different platform realistic every platform postgres developed small number people nt vc backed etc amount resource throw something fairly limited hoping work adding linux dio support pg sure hell going able window solaris hpux aix etc case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea even cp r ing starting copy database saying none doable safe way unless use specialcase dio using tooling whole operation least tool fsync carefully without ever closing fd certainly nt case cp et al case robust io error reporting easy dio one reason high performance database engine either using moving nonblocking aiodio rwfnowait use odsyncrwfdsync integritycritical io dispatch also driven availability high performance high iop solid state storage buffering ram optimise io pattern throughput provides real performance benefit using aiodio infrastructure ensures error reported specific write fails failure time ie aio completion event specific io yet high io throughput maintained without application needing threading infrastructure prevent blocking mean application nt guess write error occurred retryrecover handle async write error close use fsync gather write io error infer io failure require kernel every supported platform jump hoop try exactly right thing error condition everyone circumstance time sound like good thing got recognize lot linux specific code andres freund andres razelde date wed apr hi andres freund wrote case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea even cp r ing starting copy database saying none doable safe way unless use specialcase dio using tooling whole operation least tool fsync carefully without ever closing fd certainly nt case cp et al somebody argues small window trigger problem realistically restoring large database happens pretty commonly new replica testcases actual fatal issue take time lot storage actually written first time far unlikely trigger bad block error matthew wilcox willy radeadorg date wed apr wed apr andres freund wrote differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed think two issue fsync fd opened persistent error state without keeping dirty page memory background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back horrible cp file writeback fails background cat file restarting able see failed instead returning something bogus moment open file sample current state writeback error report new error could set zero instead report recent error soon anything happens would report error way err close open file would report recent error going persistent across data structure inode removed memory need filesystem support persisting maybe good enough support recent file jeff think theodore t tytso edu date thu apr wed apr andres freund wrote sound like good thing got recognize lot linux specific code know pg chosen realistically major database userspace based storage system used dio precisely way avoid osspecific behavior require osspecific code dio simple pretty much everywhere contrast exact detail buffered io workrs quite different different o especially true take performance related detail eg cleaning algorithm page get chosen eviction etc read pghackers thread thought saw acknowledgement behavior nt like linux also show unix unixlike system theodore t tytso edu date thu apr wed apr andres freund wrote background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back horrible cp file writeback fails background cat file restarting able see failed instead returning something bogus open file descriptor many case process already exited may horrible h else expect o solution use google watch io error using completely different process responsible monitoring machine health used scrape dmesg arrange io error get sent via netlink channel machine health monitoring daemon detects error particular hard drive tell cluster file system stop using disk reconstruct erasure code data chunk disk onto disk cluster run series disk diagnostics make sure find bad sector every often one bad sector several waiting found afterwards put disk back service making separate health monitoring process hdd expert write much sophisticated code ask disk firmware information eg smart grown defect list much careful scrubbing disk medium etc returning disk back service everyone already much work need find someone interest fixing imho peculiar use case pg developer want add tunable keep dirty page ram io failure nt think would hard someone might harder convince kernel maintainer accept losing side battle however like everything nt pay ca nt require someone else would nt hurt see jeff layton wrote errseq patch would interested work something like nt think pg specific explained reality recovering disk error tricky business much doubt userspace application including distro package manager going want engineer trying detect recover disk error true red hat andor suse kernel engineer would implemented everything everything wish list nt tell something reality disk start developing error reality probably need take disk offline scrub find medium error good chance need rewrite bad sector incluing top file system metadata probably run fsck reformat whole file system certainly nt think realistic assume adding lot sophistication every userspace program ten hundred thousand disk drive need tsomething automated claim really nt want smush detailed exception handling hdd repair technology database cluster file system component really need done separate healthmonitor machinelevel management system dave chinner david morbitcom date thu apr wed apr andres freund wrote hi dave chinner wrote pound broken record many good reason linux filesystem developer said use direct io pg devs time kernel nt discussion personally board also got ta recognize efficient dio usage metric ton work need large amount differing logic different platform realistic every platform postgres developed small number people nt vc backed etc amount resource throw something fairly limited hoping work adding linux dio support pg sure hell going able window solaris hpux aix etc case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea yes syncfs making sure large amount data metadata spread across many file subdirectory single filesystem pushed stable storage efficient manner possible even cp r ing starting copy database saying none doable safe way unless use specialcase dio using tooling whole operation least tool fsync carefully without ever closing fd certainly nt case cp et al saying fsyncing individual file directory inefficient way could possible go lukas czerner lczerner hatcom date thu apr wed apr andres freund wrote case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea even cp r ing starting copy database saying none doable safe way unless use specialcase dio using tooling whole operation least tool fsync carefully without ever closing fd certainly nt case cp et al seem like problem checksum thing really need extra safe probably anyway backup archive timetravel whatnot jeff layton jlayton hatcom date thu apr wed matthew wilcox wrote wed apr andres freund wrote differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed think two issue fsync fd opened persistent error state without keeping dirty page memory background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back horrible cp file writeback fails background cat file restarting able see failed instead returning something bogus expecting happen case expecting read error due writeback failure saying invalidating page failed written back reread moment open file sample current state writeback error report new error could set zero instead report recent error soon anything happens would report error way err close open file would report recent error going persistent across data structure inode removed memory need filesystem support persisting maybe good enough support recent file jeff think hate could yecchhhh reporting error case inode happened stick around cache seems unreliable realworld usage might problematic use case also sure would really helpful think crux matter really error reporting perse asked lsf last year got real answer writeback error done dirty page right usually mark clean carry right thing one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event maybe ok face writeback error though idk matthew wilcox willy radeadorg date thu apr thu apr jeff layton wrote wed matthew wilcox wrote moment open file sample current state writeback error report new error could set zero instead report recent error soon anything happens would report error way err close open file would report recent error going persistent across data structure inode removed memory need filesystem support persisting maybe good enough support recent file jeff think hate could yecchhhh reporting error case inode happened stick around cache seems unreliable realworld usage might problematic use case also sure would really helpful yeah definitely halfarsed could make change improve situation wider impact example tell error sampled existing fd could bias inode reaping inodes unreported error stick around cache longer think crux matter really error reporting perse asked lsf last year got real answer writeback error done dirty page right usually mark clean carry right thing suspect nt transient error reattempt write otoh error permanent reattempting write nt going good going cause drive go whole error handling dance low memory need page back avoid going oom lot option bad one situation another one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event maybe ok face writeback error though idk nt know either force application face fact data gone immediately rather finding reboot though might cause problem solves hard know right thing jeff layton jlayton hatcom date thu apr thu dave chinner wrote wed apr andres freund wrote hi dave chinner wrote pound broken record many good reason linux filesystem developer said use direct io pg devs time kernel nt discussion personally board also got ta recognize efficient dio usage metric ton work need large amount differing logic different platform realistic every platform postgres developed small number people nt vc backed etc amount resource throw something fairly limited hoping work adding linux dio support pg sure hell going able window solaris hpux aix etc case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea yes syncfs making sure large amount data metadata spread across many file subdirectory single filesystem pushed stable storage efficient manner possible note error return syncfs somewhat iffy nt necessarily return error one inode fails written back think mainly return error get metadata writeback error even cp r ing starting copy database saying none doable safe way unless use specialcase dio using tooling whole operation least tool fsync carefully without ever closing fd certainly nt case cp et al saying fsyncing individual file directory inefficient way could possible go still use syncfs probably call syncfs still hold fd open fsync one afterward ensure got written back properly work expect dave chinner david morbitcom date thu apr thu apr jeff layton wrote writeback error done dirty page right usually mark clean carry right thing nt right thing whatever wrong someone one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event mention posix io ordering violation seeing stale data successful write simply allowed maybe ok face writeback error though idk matter async writeback error handling slightly different filesystem filesystem mention o o magic bullet sure worry much direct io anyone care need know completion status every single write io theodore t tytso edu date thu apr thu apr dave chinner wrote thu apr jeff layton wrote writeback error done dirty page right usually mark clean carry right thing nt right thing whatever wrong someone problem best could done enough would mode pg folk want think want seems want error result page marked clean discover outcome oomcity unability unmount file system failed drive complain u point tell want really want another variation oponies welcome real world real life even pay someone implement want sure would want accept upstream distro might consider support nightmare refuse allow mode enabled enterprise distro least pgbased company implemented wasting people time people resource could try get something like google upstream io error sent userspace via netlink channel without changing anything else buffered writeback handled face error userspace application could switch direct io like really serious userspace storage solution aware someone could try write kind hdd health monitoring system try right thing disk discovered developed medium error something serious eg head failure plus kind raid solution think thing really realistic typical pg site certainly would nt decide use hosted cloud solution cloud sql postgres let someone else solve really hard problem dealing realworld hdd failure jeff layton jlayton hatcom date thu apr thu dave chinner wrote thu apr jeff layton wrote writeback error done dirty page right usually mark clean carry right thing nt right thing whatever wrong someone one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event mention posix io ordering violation seeing stale data successful write simply allowed sure given dealing error condition really obligated allow change page ca nt write back given page clean failure nt even today suppose unable writes read v backing store wb failure page dirty bit cleared get kicked cache read occurs faulted back poof write disappeared even happen get chance call fsync even write read fsync guaranteed safe regard today given sufficient memory pressure think current situation fine let oom cost standpoint good application predictability really consider way better maybe ok face writeback error though idk matter async writeback error handling slightly different filesystem filesystem mention o o magic bullet sure worry much direct io anyone care need know completion status every single write io think opportunity come better defined hopefully useful behavior buffered io face writeback error first step would hash want look like maybe need plenary session lsfmm andres freund andres razelde date thu apr hi lukas czerner wrote wed apr andres freund wrote case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea even cp r ing starting copy database saying none doable safe way unless use specialcase dio using tooling whole operation least tool fsync carefully without ever closing fd certainly nt case cp et al seem like problem checksum thing really need extra safe probably anyway backup archive timetravel whatnot nt really help unless want sync reread data make sure rereading multitb backup know whether error o knew nt particularly fun without verifying sync going improve situation measurably still going discover data nt available needed saying way use standard linux tool manipulate file know whether failed without filtering kernel log io error missing something andres freund andres razelde date thu apr hi theodore t wrote solution use google watch io error using completely different process responsible monitoring machine health used scrape dmesg arrange io error get sent via netlink channel machine health monitoring daemon pointer underling netlink mechanism force postgres kill error detected via dedicated monitoring process personally happy enough nicer could associate knowledge particular filesystems etc possibly hard dm etc much better nothing reality recovering disk error tricky business much doubt userspace application including distro package manager going want engineer trying detect recover disk error true red hat andor suse kernel engineer would implemented everything everything wish list nt tell something problem really nt recovering disk error knowing crucial part want give back client information operation succeeded actually nt could improvement long guaranteed get error rather kernel log nt access look different due config etc ok throw hand air give reality disk start developing error reality probably need take disk offline scrub find medium error good chance need rewrite bad sector incluing top file system metadata probably run fsck reformat whole file system certainly nt think realistic assume adding lot sophistication every userspace program ten hundred thousand disk drive need tsomething automated claim really nt want smush detailed exception handling hdd repair technology database cluster file system component really need done separate healthmonitor machinelevel management system yea agreed nt think anybody actually involved postgres want anything like seems far outside postgres remit andres freund andres razelde date thu apr hi theodore t wrote problem best could done enough would mode pg folk want think want seems want error result page marked clean discover outcome oomcity unability unmount file system failed drive complain u point tell want really want another variation oponies welcome real world real life think perfile even perblockdevfs error state returned fsync would sufficient nt see realistically would trigger oom inability unmount filesystem drive entirely gone obviously point keeping perfile information around perblockdevfs information suffices entirely return error fsync least appears happen underlying blockdev gone fun making thing want sure particularly productive even pay someone implement want sure would want accept upstream distro might consider support nightmare refuse allow mode enabled enterprise distro least pgbased company implemented wasting people time people resource well discussing figure acceptable considering wasting money revew cycle paying somebody crazy useless shit could try get something like google upstream io error sent userspace via netlink channel without changing anything else buffered writeback handled face error ah darn mentioned earlier mail hoped upstream yes perfect userspace application could switch direct io like really serious userspace storage solution aware someone could try write kind hdd health monitoring system try right thing disk discovered developed medium error something serious eg head failure plus kind raid solution think thing really realistic typical pg site said earlier think good reason move dio postgres keep performant going need serious work afaict solution would nt really depend application using dio finishing checkpoint logging persistently allowing throw older data away could check error reported give starting postgres directory restored backup using tool fsync directory recursively check error give andres freund andres razelde date thu apr jeff layton wrote wed matthew wilcox wrote wed apr andres freund wrote differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed think two issue fsync fd opened persistent error state without keeping dirty page memory background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back horrible cp file writeback fails background cat file restarting able see failed instead returning something bogus expecting happen case expecting read error due writeback failure saying invalidating page failed written back reread yes hope read error writeback failure think sane behaviour nt really care much least way know failure occurred userland without parse kernel log far understand neither sync thus sync syncfs guaranteed report error encountered writeback background indeed true syncfs even fd opened see could happen implementation pov nothing would associate random fd failure different file really impossible detect stuff userland without text parsing even perffs sys something file return current count unreported error filesystem independent way better right figure sys whatnot directory belongs oldcount cat sys whatnotunreportederrors filesystem operation directory sync sync newcount cat sys whatnotunreportederrors test oldcount eq newcount diewithhorriblemessage nt beautiful script also absolutely terrible matthew wilcox willy radeadorg date thu apr thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add persuperblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd nt see realistically would trigger oom inability unmount filesystem ted referring current state affair writeback error held inode ca nt evict inode holding error indicator send u oom instead transfer error indicator superblock problem andres freund andres razelde date thu apr jeff layton wrote thu dave chinner wrote wed apr andres freund wrote hi dave chinner wrote pound broken record many good reason linux filesystem developer said use direct io pg devs time kernel nt pg need discussion personally board also got ta recognize efficient dio usage metric ton work need large amount differing logic different platform realistic every platform postgres developed small number people nt vc backed etc amount resource throw something fairly limited hoping work adding linux dio support pg sure hell going able window solaris hpux aix etc case nt help able untar database backup archive timetravel whatnot fsyncing directory tree make sure actually safe really insane idea yes syncfs making sure large amount data metadata spread across many file subdirectory single filesystem pushed stable storage efficient manner possible syncfs nt standardized operates entire filesystem thus writing unnecessary stuff meaningful documentation return code yes using syncfs might better performancewise nt seem like actually solves anything performance aside note error return syncfs somewhat iffy nt necessarily return error one inode fails written back think mainly return error get metadata writeback error still use syncfs probably call syncfs still hold fd open fsync one afterward ensure got written back properly work expect nt allow one use nonbespoke tooling like tar whatnot mean call syncfs every hundred file obviously run filehandle limitation jeff layton jlayton hatcom date thu apr thu matthew wilcox wrote thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add per superblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd bad idea nt costly mappingseterror could flag superblock one one mapping need define happens interleave fsync syncfs call inode though handle file fwberr case would need second field struct file act persb error cursor nt see realistically would trigger oom inability unmount filesystem ted referring current state affair writeback error held inode ca nt evict inode holding error indicator send u oom instead transfer error indicator superblock problem theodore t tytso edu date thu apr thu apr matthew wilcox wrote thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add persuperblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd would persuperblock wberr flag get cleared would subsequent fsync call file system return eio would subsequent syncfs call return eio nt see realistically would trigger oom inability unmount filesystem ted referring current state affair writeback error held inode ca nt evict inode holding error indicator send u oom instead transfer error indicator superblock problem actually referring pghackers original ask error dirty page could nt written would stay dirty single inode pinned memory dirty flag bad bad pinning memory page failed write would still need invent mechanism define semantic would ok clear perinode flag let memory associated pinned inode get released though matthew wilcox willy radeadorg date thu apr thu apr theodore t wrote thu apr matthew wilcox wrote thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add persuperblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd would persuperblock wberr flag get cleared errseq work ted would subsequent fsync call file system return eio would subsequent syncfs call return eio one occur last sampling get reported particular file descriptor jeff layton jlayton hatcom date thu apr thu andres freund wrote jeff layton wrote wed matthew wilcox wrote wed apr andres freund wrote differing opinion referenced postgres thread fundamental problem nt much retry wo nt fix problem might never see failure writeback happens background encounter error undirties buffer happily carry never seen majorly screwed think two issue fsync fd opened persistent error state without keeping dirty page memory background data writeback without open file descriptor mechanism kernel return error application may exist may ever come back horrible cp file writeback fails background cat file restarting able see failed instead returning something bogus expecting happen case expecting read error due writeback failure saying invalidating page failed written back reread yes hope read error writeback failure think sane behaviour nt really care much respectfully disagree interpret error read syscall mean writeback failed note data still potentially intact might make sense imo invalidate page failed written back could potentially read fault ie sync pagecache backing store possibly redirty another try note detect situation checking return code fsync report latest error per file description least way know failure occurred userland without parse kernel log far understand neither sync thus sync syncfs guaranteed report error encountered writeback background indeed true syncfs even fd opened see could happen implementation pov nothing would associate random fd failure different file really impossible detect stuff userland without text parsing syncfs could use work warming willy idea add persb errseqt think might simple way get better semantics sure want handle reporting end yet though probably also need consider better track metadata writeback error eg nt really properly quite yet either even perffs sys something file return current count unreported error filesystem independent way better right figure sys whatnot directory belongs oldcount cat sys whatnotunreportederrors filesystem operation directory sync sync newcount cat sys whatnotunreportederrors test oldcount eq newcount diewithhorriblemessage nt beautiful script also absolutely terrible matthew wilcox willy radeadorg date thu apr thu apr jeff layton wrote thu matthew wilcox wrote thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add per superblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd bad idea nt costly mappingseterror could flag superblock one one mapping need define happens interleave fsync syncfs call inode though handle file fwberr case would need second field struct file act persb error cursor ooh nt thought bleh nt want add field struct file uncommon case maybe opath could used get file descriptor particular filesystem syncfs defined ca nt report writeback error open something opath use file fwberr mapping error cursor andres freund andres razelde date thu apr theodore t wrote thu apr matthew wilcox wrote thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add persuperblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd would persuperblock wberr flag get cleared nt think unmount resettable via sys would insane approach requiring explicit action acknowledge data loss nt crazy concept think something reasonable mind could disagree would subsequent fsync call file system return eio would subsequent syncfs call return eio tied syncfs wonder way errseq type logic store per superblock whatever equivalent thing errseq value error fd calling syncfs report error store current value separate perfd field considered weird report error fds opened error occurred see writing tool pgrunandsync directo ries command open fd filesystems directory reside call syncfs allow use backuprestore tool least semi safely nt see realistically would trigger oom inability unmount filesystem ted referring current state affair writeback error held inode ca nt evict inode holding error indicator send u oom instead transfer error indicator superblock problem actually referring pghackers original ask error dirty page could nt written would stay dirty well open list everyone argue initially people first nt know oom explanation take time revise one prior think design question reasonable people disagree upon hot removed device handled throwing data away regardless least clearly something viable move something solve problem single inode pinned memory dirty flag bad bad pinning memory page failed write would still need invent mechanism define semantic would ok clear perinode flag let memory associated pinned inode get released though yea agree obvious one way would say automatically cleared unlink file bit heavyhanded crazy theodore t tytso edu date thu apr thu apr andres freund wrote pointer underling netlink mechanism force postgres kill error detected via dedicated monitoring process personally happy enough nicer could associate knowledge particular filesystems etc possibly hard dm etc much better nothing yeah sorry never got upstreamed really complicated folk wanted something similar round bikesheddingh several year ago nothing ever went upstream part problem orignial scheme sent information file systemlevel corruption report eg stemming call lot people different idea tot get possible information structured format think something like uerf digtial something really simplestupid sent essentially ascii test string netlink socket essentially scraping output dmesg eg devkmssg actually probably simplest thing advantage work even ancient enterprise kernel pg user likely want use need implement dmesg text scraper anyway probably good enough use case problem really nt recovering disk error knowing crucial part want give back client information operation succeeded actually nt could improvement long guaranteed get error rather kernel log nt access look different due config etc ok throw hand air give right little challenging actual regexp would need use vary device driver device driver fortunately nearly everything scsisata device day nt much variability yea agreed nt think anybody actually involved postgres want anything like seems far outside postgres remit people pghackers list talking wanting retry fsync hoping would cause write somehow suceed possible might help likely helpful experience andres freund andres razelde date thu apr jeff layton wrote thu andres freund wrote least way know failure occurred userland without parse kernel log far understand neither sync thus sync syncfs guaranteed report error encountered writeback background indeed true syncfs even fd opened see could happen implementation pov nothing would associate random fd failure different file really impossible detect stuff userland without text parsing syncfs could use work really bad nt flag argument probably also need consider better track metadata writeback error eg nt really properly quite yet either even perffs sys something file return current count unreported error filesystem independent way better right figure sys whatnot directory belongs oldcount cat sys whatnotunreportederrors filesystem operation directory sync sync newcount cat sys whatnotunreportederrors test oldcount eq newcount diewithhorriblemessage nt beautiful script also absolutely terrible seems something roughly like deverrorscount reading already seems incremented necessary place reading xfs nt seem something similar would nt bad standardize theodore t tytso edu date thu apr thu apr andres freund wrote nt beautiful script also absolutely terrible seems something roughly like deverrorscount reading already seems incremented necessary place file system inconsistency noticed kernel nt bump count data block io error idea could used block device level would pretty simple maintain counter io error last error detected particular device could evne break track read error write error eparately would useful nt care block bad io error happened counter definitely simplest approach le hair implemnet use something like netlink channel scraping dmesg andres freund andres razelde date thu apr hi theodore t wrote something really simplestupid sent essentially ascii test string netlink socket essentially scraping output dmesg eg devkmssg actually probably simplest thing advantage work even ancient enterprise kernel pg user likely want use need implement dmesg text scraper anyway probably good enough use case worst part mention needing handle lot different error message format guess reasonable enough control hardware luck nt quite realistic scenario one could miss kmsg style message due ringbuffer right little challenging actual regexp would need use vary device driver device driver fortunately nearly everything scsisata device day nt much variability also san na type stuff present scsisata device right yea agreed nt think anybody actually involved postgres want anything like seems far outside postgres remit people pghackers list talking wanting retry fsync hoping would cause write somehow suceed possible might help likely helpful experience depends type error storage enospc especially nfs reasonable chance cleared networked block storage also impossible think scenario work eio think besides hope clearing advantage trivially give feedback user user get back strerror enospc decent sql error code hopefully cause investigate well monitoring detects high error rate much nicer user type commit get appropriate error back etc database commits suicide dave chinner david morbitcom date fri apr thu apr jeff layton wrote thu dave chinner wrote thu apr jeff layton wrote writeback error done dirty page right usually mark clean carry right thing nt right thing whatever wrong someone one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event mention posix io ordering violation seeing stale data successful write simply allowed sure given dealing error condition really obligated allow change page ca nt write back posix say write write regular file successfully returned successful read byte position file modified write shall return data specified write position byte position modified iows even later error told user write successful according posix allowed wind back data write occurred given page clean failure nt even today suppose unable writes read v backing store wb failure page dirty bit cleared get kicked cache read occurs faulted back poof write disappeared yes pointing specification supposedly conform say behaviour current behaviour conforms spec indeed even noticed xfsaopsdiscardpage surrounding context page writeback submission error save looking xfs trash page content completely filesystem level writepage error nt mark clean nt attempt redirty rewrite clear uptodate state may invalidate completely iows data written sucessfully cached page gone reread disk next read call direct violation posix requirement point done xfs knowing violate posix specification specific corner case lesser many evil chose hence chose encode behaviour general writeback io error handling algorithm need done knowledge specification violation mention documented posix violation various relevant man page filesystems behave async writeback error jeff layton jlayton hatcom date fri apr thu matthew wilcox wrote thu apr jeff layton wrote thu matthew wilcox wrote thu apr andres freund wrote think perfile even perblockdevfs error state returned fsync would sufficient ah suggestion jeff irc add per superblock wberr allow syncfs return open fd directory example call syncfs would return eio enospc either condition occurred since opened fd bad idea nt costly mappingseterror could flag superblock one one mapping need define happens interleave fsync syncfs call inode though handle file fwberr case would need second field struct file act persb error cursor ooh nt thought bleh nt want add field struct file uncommon case maybe opath could used get file descriptor particular filesystem syncfs defined ca nt report writeback error open something opath use file fwberr mapping error cursor might work syscall behavioral change need document well probably innocuous though doubt lot caller field opening file opath calling syncfs jeff layton jlayton hatcom date fri apr fri dave chinner wrote thu apr jeff layton wrote thu dave chinner wrote thu apr jeff layton wrote writeback error done dirty page right usually mark clean carry right thing nt right thing whatever wrong someone one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event mention posix io ordering violation seeing stale data successful write simply allowed sure given dealing error condition really obligated allow change page ca nt write back posix say write write regular file successfully returned successful read byte position file modified write shall return data specified write position byte position modified iows even later error told user write successful according posix allowed wind back data write occurred given page clean failure nt even today suppose unable writes read v backing store wb failure page dirty bit cleared get kicked cache read occurs faulted back poof write disappeared yes pointing specification supposedly conform say behaviour current behaviour conforms spec indeed even noticed xfsaopsdiscardpage surrounding context page writeback submission error save looking xfs trash page content completely filesystem level writepage error nt mark clean nt attempt redirty rewrite clear uptodate state may invalidate completely iows data written sucessfully cached page gone reread disk next read call direct violation posix requirement point done xfs knowing violate posix specification specific corner case lesser many evil chose hence chose encode behaviour general writeback io error handling algorithm need done knowledge specification violation mention documented posix violation various relevant man page filesystems behave async writeback error got thanks yes think ought probably thing globally nice know xfs already make feel better making behavior gold standard linux filesystems summarize point discussion think want consider following better reporting syncfs report error even one inode failed written back since last syncfs call probably implement via persb errseqt fashion though implementation issue work invalidate clear uptodate flag page experience writeback error across filesystems encourage standard behavior filesystems maybe add helper make easier miss anything would enough help pg usecase nt see u ever able reasonably support current expectation writeback error seen fd opened error occurred really thorny problem object lifetime perspective andres freund andres razelde date fri apr hi jeff layton wrote yes think ought probably thing globally nice know xfs already make feel better making behavior gold standard linux filesystems summarize point discussion think want consider following better reporting syncfs report error even one inode failed written back since last syncfs call probably implement via persb errseqt fashion though implementation issue work invalidate clear uptodate flag page experience writeback error across filesystems encourage standard behavior filesystems maybe add helper make easier miss anything would enough help pg usecase nt see u ever able reasonably support current expectation writeback error seen fd opened error occurred really thorny problem object lifetime perspective perfect think amount hacky o specific code acceptable allow wrapper tool used around backup restores etc syncfs necessary filesystems let mull others bit matthew wilcox willy radeadorg date fri apr fri apr jeff layton wrote fri dave chinner wrote save looking xfs trash page content completely filesystem level writepage error nt mark clean nt attempt redirty rewrite clear uptodate state may invalidate completely iows data written sucessfully cached page gone reread disk next read call direct violation posix requirement point done xfs knowing violate posix specification specific corner case lesser many evil chose hence chose encode behaviour general writeback io error handling algorithm need done knowledge specification violation mention documented posix violation various relevant man page filesystems behave async writeback error got thanks yes think ought probably thing globally nice know xfs already make feel better making behavior gold standard linux filesystems summarize point discussion think want consider following better reporting syncfs report error even one inode failed written back since last syncfs call probably implement via persb errseqt fashion though implementation issue work invalidate clear uptodate flag page experience writebackerrors across filesystems encourage standard behavior filesystems maybe add helper make easier miss anything would enough help pg usecase nt see u ever able reasonably support current expectation writeback error seen fd opened error occurred really thorny problem object lifetime perspective think better xfs currently agree behaviour across linux filesystems get error wbc forbackground true clear uptodate page rather setpageerror setpagedirty background writebacks skip page pageerror forsync writebacks attempt one last write maybe succeed time clearpageerror somebody report writeback error clearpageuptodate think kupdate writes forbackground writes forreclaim tougher nt want see u getting oom hanging onto stale data nt necessarily open fd report error think leaning towards behaving forreclaim forsync probably subject reasonable people disagree logic need one place although invoked filesystem matthew wilcox willy radeadorg date fri apr tue apr andres freund wrote nt think full issue deal fact fsync failure edgetriggered guarantee every process would get fact one need fd open failing writes occurred get failure big issue beyond postgres pretty common approach work lot file without fsyncing iterate directory fsync everything assume safe unless severaly misunderstand something safe kept fd every file open nt realistic pretty obvious reason accepting memory pressure still evict error indicator better job today current design error reporting say error occurred opened file descriptor interest nt think necessarily true actually change behaviour errseq work consider stupid task call open write close smart task b call open write fsync close operating file go entirely b encounter error errseqt b would see error write b overlap even little bit b still get see error today writeback happens write b open file b never see error b nt want see historical error previous invocation b already handled know whether anyone seen error patch restores historical behaviour seeing old unhandled error fresh file descriptor signedoffby matthew wilcox mawilcox rosoftcom diff git aliberrseqc bliberrseqc index aliberrseqc bliberrseqc exportsymbol errseqset errseqt errseqsample errseqt eseq errseqt old readonce eseq errseqt new old common case error ever set skip marking seen bit error set value never go back zero old new errseqseen old new cmpxchg eseq old new return new nobody seen error yet first old errseqseen old return old exportsymbol errseqsample dave chinner david morbitcom date sat apr fri apr matthew wilcox wrote fri apr jeff layton wrote fri dave chinner wrote save looking xfs trash page content completely filesystem level writepage error nt mark clean nt attempt redirty rewrite clear uptodate state may invalidate completely iows data written sucessfully cached page gone reread disk next read call direct violation posix requirement point done xfs knowing violate posix specification specific corner case lesser many evil chose hence chose encode behaviour general writeback io error handling algorithm need done knowledge specification violation mention documented posix violation various relevant man page filesystems behave async writeback error got thanks yes think ought probably thing globally nice know xfs already make feel better making behavior gold standard linux filesystems summarize point discussion think want consider following better reporting syncfs report error even one inode failed written back since last syncfs call probably implement via persb errseqt fashion though implementation issue work invalidate clear uptodate flag page experience writeback error across filesystems encourage standard behavior filesystems maybe add helper make easier miss anything would enough help pg usecase nt see u ever able reasonably support current expectation writeback error seen fd opened error occurred really thorny problem object lifetime perspective think better xfs currently agree behaviour across linux filesystems get error wbc forbackground true clear uptodate page rather setpageerror setpagedirty saying treat transient error rather permanent error background writebacks skip page pageerror seems decidedly dodgy case transient error requires user specifically run sync get data disk transient error occurred say nt notice problem fleeting nt cause obvious problem eg xfs get enospc run reserve pool block ca nt allocate space write back page space freed second later next write work fine recipe lost data wrote day system crashed bug report forsync writebacks attempt one last write maybe succeed time clearpageerror somebody report writeback error clearpageuptodate may well unmount really going wait unmount report fatal error used xfs metadata keep trying write metadata keep filesystem running consistent memory might transient error rather shutting filesystem couple retries result user would nt notice problem unmount common sympton system shutdown hanging nt hang unmount default cat treat different error according seriousness eio device enospc default retry forever often transient enodev fail shutdown immediately someone pulled usb stick metadata failure behaviour configured via changing field sysfsxfserrormetadata planned extend failure configuration data io never quite got around yet clear example one size nt fit think end sort error behaviour configuration xfs case ie sysfsxfserrorwriteback logic need one place although invoked filesystem perhaps onesizefitsall behaviour really want extend xfs error config infrastructure control filesystem error andres freund andres razelde date fri apr hi dave chinner wrote treat different error according seriousness eio device enospc default retry forever often transient enodev fail shutdown immediately someone pulled usb stick metadata failure behaviour configured via changing field sysfsxfserrormetadata planned extend failure configuration data io never quite got around yet clear example one size nt fit think end sort error behaviour configuration xfs case ie sysfsxfserrorwriteback considered adding extfatjfs errorsremountropaniccontinue style mount parameter matthew wilcox willy radeadorg date fri apr sat apr dave chinner wrote fri apr matthew wilcox wrote get error wbc forbackground true clear uptodate page rather setpageerror setpagedirty saying treat transient error rather permanent error yes proposing leaving data memory case user want try writing somewhere else background writebacks skip page pageerror seems decidedly dodgy case transient error requires user specifically run sync get data disk transient error occurred say nt notice problem fleeting nt cause obvious problem fair want avoid triggering error every second whatever periodic writeback threshold set eg xfs get enospc run reserve pool block ca nt allocate space write back page space freed second later next write work fine recipe lost data wrote day system crashed bug report exponential backoff retries forsync writebacks attempt one last write maybe succeed time clearpageerror somebody report writeback error clearpageuptodate may well unmount really going wait unmount report fatal error goodness error would immediately reportable using wberr mechanism soon first error encountered bfields ldsesorg j bruce field date wed apr theodore t first storage device hit exception condition quite nondeterministic example vast majority ssd power fail certified mean suffer power drop gc quite possible data written six month ago lost result lba could potentialy far far away lba recently written could multiple cache flush operation since lba question last written six month ago matter consumergrade ssd possible lba trashed unexpected power drop pointer documentation paper anything google result find power fail certified post always confused ssd powerloss protection nobody seems completely clear whether safety performance feature bfields ldsesorg j bruce field date wed apr wed apr andres freund wrote hi andreas dilger wrote apr pm andres freund andres razelde wrote ted wrote better worse much investment buffered io data robustness face exception handling storage device bit cop database care even basic tool like scm package manager editor care whether proper response back fsync imply thing actually synced sure mostly pg imho crazy thing like writing thousand file closing file descriptor expecting fsync newlyopened fd return historical error postgres dpkg underlying apt debian derived distros take example randomly guessed want guarantee extracted file disk subsequent renames info database end old zero length file case system crash neither dpkgdeb tar explicit fsync xxx could avoided switching internal tar extractor dirsynccontents cidir bunch place especially also newer filesystems performancewise entirely infeasible fsync every single file individually performance becomes entirely attrocious still true able use kind parallelism async io fsync multiple process dave chinner david morbitcom date thu apr fri apr andres freund wrote hi dave chinner wrote treat different error according seriousness eio device enospc default retry forever often transient enodev fail shutdown immediately someone pulled usb stick metadata failure behaviour configured via changing field sysfsxfserrormetadata planned extend failure configuration data io never quite got around yet clear example one size nt fit think end sort error behaviour configuration xfs case ie sysfsxfserrorwriteback considered adding extfatjfs errorsremountropaniccontinue style mount parameter metadata writeback error behaviour data writeback io error definitely planning add mount option configure io error behavior mount option horrible way configure filesystem behaviour already got finegrained configuration infrastructure configuring io error behaviour pointed designed extended data writeback operational error handling filesystem eg dealing enomem different way dave chinner david morbitcom date thu apr fri apr matthew wilcox wrote sat apr dave chinner wrote fri apr matthew wilcox wrote get error wbc forbackground true clear uptodate page rather setpageerror setpagedirty saying treat transient error rather permanent error yes proposing leaving data memory case user want try writing somewhere else getting io error usb stick pull background writebacks skip page pageerror seems decidedly dodgy case transient error requires user specifically run sync get data disk transient error occurred say nt notice problem fleeting nt cause obvious problem fair want avoid triggering error every second whatever periodic writeback threshold set kernel ring buffer overflow user miss first error report idea data writeback still failing eg xfs get enospc run reserve pool block ca nt allocate space write back page space freed second later next write work fine recipe lost data wrote day system crashed bug report exponential backoff retries maybe nt think actually help anything add yet write complication inode writeback forsync writebacks attempt one last write maybe succeed time clearpageerror somebody report writeback error clearpageuptodate may well unmount really going wait unmount report fatal error goodness error would immediately reportable using wberr mechanism soon first error encountered open file error occurs error wo nt get reported anyone mean next time anyone access inode user context could well unmount third party syncsyncfs eric sandeen esandeen hatcom date wed apr pm dave chinner wrote fri apr andres freund wrote hi dave chinner wrote treat different error according seriousness eio device enospc default retry forever often transient enodev fail shutdown immediately someone pulled usb stick metadata failure behaviour configured via changing field sysfsxfserrormetadata planned extend failure configuration data io never quite got around yet clear example one size nt fit think end sort error behaviour configuration xfs case ie sysfsxfserrorwriteback considered adding extfatjfs errorsremountropaniccontinue style mount parameter metadata writeback error behaviour data writeback io error point casually dataerrabort dataerrignore dataerrignore print error message error occurs file data buffer ordered mode dataerrabort abort journal error occurs file data buffer ordered mode sayin definitely planning add mount option configure io error behavior mount option horrible way configure filesystem behaviour already got finegrained configuration infrastructure configuring io error behaviour pointed designed extended data writeback operational error handling filesystem eg dealing enomem different way nt disagree already mountoption knob fwiw matthew wilcox willy radeadorg date wed apr thu apr dave chinner wrote fri apr matthew wilcox wrote sat apr dave chinner wrote fri apr matthew wilcox wrote get error wbc forbackground true clear uptodate page rather setpageerror setpagedirty saying treat transient error rather permanent error yes proposing leaving data memory case user want try writing somewhere else getting io error usb stick pull thinking ideally want pas kind notification way desktop tell user plug damn stick back usb stick become blockdev used complete writeback far able right even funny background writebacks skip page pageerror seems decidedly dodgy case transient error requires user specifically run sync get data disk transient error occurred say nt notice problem fleeting nt cause obvious problem fair want avoid triggering error every second whatever periodic writeback threshold set kernel ring buffer overflow user miss first error report idea data writeback still failing nt thinking kernel ringbuffer based reporting thinking errseqt based reporting application tell fsync failed maybe something applicationlevel recover like send transaction across another node cluster whatever hypothetical application forsync writebacks attempt one last write maybe succeed time clearpageerror somebody report writeback error clearpageuptodate may well unmount really going wait unmount report fatal error goodness error would immediately reportable using wberr mechanism soon first error encountered open file error occurs error wo nt get reported anyone mean next time anyone access inode user context could well unmount third party syncsyncfs right application theodore t tytso edu date wed apr wed apr matthew wilcox wrote thinking ideally want pas kind notification way desktop tell user plug damn stick back usb stick become blockdev used complete writeback far able right even funnyo maybe nt trying kernel least little possible kernel perhaps would better device mapper hack suspect need userspace help igure whether user plugged usb stick different usb stick anyway christoph hellwig hch radeadorg date thu apr wed apr j bruce field wrote theodore t first storage device hit exception condition quite nondeterministic example vast majority ssd power fail certified mean suffer power drop gc quite possible data written six month ago lost result lba could potentialy far far away lba recently written could multiple cache flush operation since lba question last written six month ago matter consumergrade ssd possible lba trashed unexpected power drop pointer documentation paper anything google result find power fail certified post always confused ssd powerloss protection nobody seems completely clear whether safety performance feature device reputable vendor always power fail safe bug notwithstanding powerloss protection marketing slide usually mean ssd nonvolatile write cache write acked data persisted additional cache flush need sent feature available expensive eterprise ssds required capacitor expensive cheaper consumer boot driver ssds volatile write cache need separate cache flush persist data reqopflush linux reasonable implementation still wo nt corrupt previously written data lose volatile write cache nt flushed occasional bug bad actor issue might still happen j bruce field bfields ldsesorg date thu apr thu apr christoph hellwig wrote wed apr j bruce field wrote theodore t first storage device hit exception condition quite nondeterministic example vast majority ssd power fail certified mean suffer power drop gc quite possible data written six month ago lost result lba could potentialy far far away lba recently written could multiple cache flush operation since lba question last written six month ago matter consumergrade ssd possible lba trashed unexpected power drop pointer documentation paper anything google result find power fail certified post always confused ssd powerloss protection nobody seems completely clear whether safety performance feature device reputable vendor always power fail safe bug notwithstanding powerloss protection marketing slide usually mean ssd nonvolatile write cache write acked data persisted additional cache flush need sent feature available expensive eterprise ssds required capacitor expensive cheaper consumer boot driver ssds volatile write cache need separate cache flush persist data reqopflush linux reasonable implementation still wo nt corrupt previously written data lose volatile write cache nt flushed occasional bug bad actor issue might still happen thanks understanding name terrible vendor documentation find http power loss protection critical aspect ensuring data integrity especially server data center http wwwintelcomcontent data safety feature prepare unexpected powerloss protect system user data neglect mention consumer drive also perfectly capable welldefined behavior power loss expense flush performance ridiculously confusing matthew wilcox willy radeadorg date thu apr wed apr theodore t wrote wed apr matthew wilcox wrote thinking ideally want pas kind notification way desktop tell user plug damn stick back usb stick become blockdev used complete writeback far able right even funnyo maybe nt trying kernel least little possible kernel perhaps would better device mapper hack suspect need userspace help igure whether user plugged usb stick different usb stick anyway device mapper target dmremovable first idea kept thinking use case think end wanting functionality block layer let try story stephen pfy go data centre looking hotswap failed drive due eight pint lager lunch pull root drive instead failed drive air raid siren warble realises mistake shoving drive back cyoa currently writes lost calamity ensue pfy fired dmremovable nobody thought set dmremovable root drive calamity still ensue bofh fault instead pfy fault built block layer brief hiccup reattach drive blockdevice writes resume nobody loses job theodore t tytso edu date thu apr thu apr matthew wilcox wrote dmremovable nobody thought set dmremovable root drive calamity still ensue bofh fault instead pfy fault built block layer brief hiccup reattach drive blockdevice writes resume nobody loses job talking deployment issue though ultimately distribution set dmremovable automatically user request much like set dmcrypt automatically laptop user upon request concern removable device globally unique id number available hardware kernel tell whether device plugged hueristics could use example could look file system uuid plus last fsck time tend file system specific thing would want ot kernel dave chinner david morbitcom date fri apr wed apr matthew wilcox wrote thu apr dave chinner wrote fri apr matthew wilcox wrote sat apr dave chinner wrote fri apr matthew wilcox wrote get error wbc forbackground true clear uptodate page rather setpageerror setpagedirty saying treat transient error rather permanent error yes proposing leaving data memory case user want try writing somewhere else getting io error usb stick pull thinking ideally want pas kind notification way desktop tell user plug damn stick back usb stick become blockdev used complete writeback far able right even funny nod meantime device unplug give enodev eio fatal error need toss away data background writebacks skip page pageerror seems decidedly dodgy case transient error requires user specifically run sync get data disk transient error occurred say nt notice problem fleeting nt cause obvious problem fair want avoid triggering error every second whatever periodic writeback threshold set kernel ring buffer overflow user miss first error report idea data writeback still failing nt thinking kernel ringbuffer based reporting thinking errseqt based reporting application tell fsync failed maybe something applicationlevel recover like send transaction across another node cluster whatever hypothetical application still failing still trying report error ie fsync fails page remains dirty next attmept write new error fsync report iows think returning error every occasion error need reported persistent writeback failure forsync writebacks attempt one last write maybe succeed time clearpageerror somebody report writeback error clearpageuptodate may well unmount really going wait unmount report fatal error goodness error would immediately reportable using wberr mechanism soon first error encountered open file error occurs error wo nt get reported anyone mean next time anyone access inode user context could well unmount third party syncsyncfs right application know nt right thing seems like lot hoop jump given still wo nt work appliction nt changed support linux specific error handling requirement jan kara jack ecz date sat apr fri matthew wilcox wrote tue apr andres freund wrote nt think full issue deal fact fsync failure edgetriggered guarantee every process would get fact one need fd open failing writes occurred get failure big issue beyond postgres pretty common approach work lot file without fsyncing iterate directory fsync everything assume safe unless severaly misunderstand something safe kept fd every file open nt realistic pretty obvious reason accepting memory pressure still evict error indicator better job today current design error reporting say error occurred opened file descriptor interest nt think necessarily true actually change behaviour errseq work consider stupid task call open write close smart task b call open write fsync close operating file go entirely b encounter error errseqt b would see error write b overlap even little bit b still get see error today writeback happens write b open file b never see error b nt want see historical error previous invocation b already handled know whether anyone seen error patch restores historical behaviour seeing old unhandled error fresh file descriptor signedoffby matthew wilcox mawilcox rosoftcom agree going old semantics reporting error file open least someone pg case show apps indeed relying old behavior much unreliable end right thing apps case nt break btw imo changelog contain note fix regression postgresql reference thread cc stable anyway feel free add reviewedby jan kara jack ecz oh make clear think need find better way reporting io error consider immediate bandaid avoid userspace regression diff git aliberrseqc bliberrseqc index aliberrseqc bliberrseqc exportsymbol errseqset errseqt errseqsample errseqt eseq errseqt old readonce eseq errseqt new old common case error ever set skip marking seen bit error set value never go back zero old new errseqseen old new cmpxchg eseq old new return new nobody seen error yet first old errseqseen old return old jan kara jack ecz date sat apr thu jeff layton wrote wed matthew wilcox wrote moment open file sample current state writeback error report new error could set zero instead report recent error soon anything happens would report error way err close open file would report recent error going persistent across data structure inode removed memory need filesystem support persisting maybe good enough support recent file jeff think hate could yecchhhh reporting error case inode happened stick around cache seems unreliable realworld usage might problematic use case also sure would really helpful never going perfect think could good enough mark inodes hit io error inode get evicted memory store fact hit error io space efficient data structure sparse bitmap radix tree extent tree whatever underlying device get destroyed switch whole sb error state forget per inode info much perinode error info probably perfs configurable limit term number inodes would yell kernel log switch whole f error state forget per inode info way wo nt silent loss io error memory usage would reasonably limited could happen whole f would switch error state prematurely problem machine admin could tune limit number inodes keep io error think crux matter really error reporting perse think related different question asked lsf last year got real answer writeback error done dirty page right usually mark clean carry right thing one possibility would invalidate range failed written whole file force page faulted next access could surprising application see result writes subsequent read event maybe ok face writeback error though idk see admin wanting rather kill machine oom deal data loss due io error eg ha server fail set retry time dropping dirty data possibly invalidating page say dave said elsewhere one strategy going please everybody might beneficial configurable like xfs metadata otoh look problem application developer pov apps declare game face io error take care check sophisticated apps try kind error recovery prepared data gone depending exactly kernel rather fragile sure much practical value configurable behavior writeback error would bring
239,Lobsters,osdev,OS,Mea Culpa,http://www.folklore.org/StoryView.py?story=Mea_Culpa.txt,mea culpa,,almost everyone involved design original macintosh proud work project individually collectively nt mean nt also embarrassed mistake made worthwhile consider apologize worst decision personally responsible well major fault system software product whole worst blunder perpetrated memory manager bud tribble adapted lisa intrasegment memory manager macintosh see hungarian needed add feature one locked attribute associated relocatable memory block temporarily prevented block moved another enhancement purgable attribute told memory manager could release block needed memory getting full big mistake chose locate bit controlled attribute decided put bit controlling locked purgable attribute highorder bit master pointer pointer current address memory block nt used anything else bit address bus allowing megabyte addressable memory highorder bit address used processor high bit word efficient one test another reason thought efficient locate flag course foolish count unused address bit stay way long became problem macintosh transitioned processor introduction macintosh ii full thirtytwo bit address bus memory manager could longer get away using highorder master pointer bit flag nt hard jerome coonen convert memory manager keep flag block header instead master pointer first place practice manipulating directly crept third party application even though nt supposed took another year identify eradicate transgression upgrade macintosh software base bit clean full address space could used paid direct price second worst mistake use fixed low memory address toolbox globals apple ii kept important system globals low memory included special short addressing mode made accessing address first memory efficient motivated u use low memory various globals may acceptable system globals clearly mistake toolbox since precluded u running one application time since application required copy toolbox globals nt matter much first ram barely enough memory run single application time macintosh released september started become issue october left apple work realized could solve problem swapping applicationdependent low memory location performed context switch day wrote core mac first multitasking environment called switcher using low memory swapping technique kept multiple program resident memory switched nifty scrolling effect using low memory like ended making context switching millisecond slower made harder eventually use memory management unit nt turn devastating thought wanted macintosh relatively simple system architecture could perform well limited hardware resource perhaps went little far decided could live without memory management unit right decision expense associated hardware also decided eliminate distinction user system code running everything supervisor mode empowered application simplified system poor choice long run made harder control software base system evolved even bill atkinson made occasional error worst mistake using signed integer size various quickdraw data structure like region picture limited maximum size region picture kilobyte became significant limitation year later memory size grew bruce horn resource manager suffered similar problem using bit offset limiting size resource file unnecessarily biggest problem macintosh hardware pretty obvious limited expandability problem nt really technical much philosophical wanted eliminate inevitable complexity consequence hardware expandability user developer every macintosh identical valid point view even somewhat courageous practical thing still changing fast computer industry work driven relentless tide moore law burrell try sneak expandability design see diagnostic port partially successful limited hardware expandability exacerbates flaw design since nt flexibility thirdparties easily correct one biggest mistake made first mac enough support hard drive first file system used simple data structure nt scale well large drive fact suggested u bill gate july nt way get bit box rate hard disk required defense hard u consider adding hard disk macintosh one last differentiator lisa three time expensive lack hardware flexibility made difficult third party jump breach although anyway broader perspective think many mistake came lack understanding exactly thought making great product reincarnating apple ii actually creating first long line compatible computer would persist decade although latter would nt happened nt succeed former perhaps design would given future priority present understood long would last
240,Lobsters,osdev,OS,"My sixth day with Haiku: Under the hood of resources, icons, and packages",https://medium.com/@probonopd/my-sixth-day-with-haiku-under-the-hood-of-resources-icons-and-packages-abec8d0e4ec6,sixth day haiku hood resource icon package,sixth day haiku hood resource icon package recently discovered haiku freedesktoporg resource elf file elf binary bruce horn source resedit http manipulating resource ar format haiku documentation resourcer http wwwhaikuosorgdocumentsdevcompilethemresources standard resource type qtsingleapplication vector icon haiku style documentation highly optimized small file size fast rendering smaller bitmap widely used svg format http wwwhaikuosorgdocsuserguideenapplicationsiconomatichtml http wwwhaikuosorgdocsuserguideenapplicationsiconomatichtml blog post leah hanson adding icon application clever caching using filesystem changing new slack logo back original one inspecting attribute filesystem wizardy hpkg package rollback using hpkg system mess ostree flatpak configuration data gui integration hpkg system inspecting content package installing package gui deleting package gui mr waddlesplash deleting something came package gui confirmed former apple employee copying something came package another system gui downloading package dependency gui mr waddlesplash keeping package special place mr waddlesplash summary regarding gui integration hpkg system one thing kernel debug land http enwikipediaorgwikiprogrammer,sixth day haiku hood resource icon packagestl dr haiku operating system explicitly designed personal computer desktop trick board make desktop experience far superior system work hello recently discovered haiku shockingly good desktop operating system still amazed smoothly thing desktop system especially linux desktop struggling today look hood useful increase understanding draw comparison original macintosh mac o x linux desktop freedesktoporg xdg standard resource elf filesyesterday saw iconomatic save icon rdef resource elf binary today see actually worksresources wrote bruce horn original author macintosh finder father macintosh resource manager source rigid nature traditional programming bothered idea application frozen code way change anything dynamically anathema ideal wanted able change much possible runtime course application code changed could changed without recompile code solution file original macintosh data fork resource fork something made incredibly easy store thing like icon translation etc along binary fileson mac used resedit gui tool dedicated surprise editing resourcesresedit original macintosh source http made easy icon menu item translation etc editable still travel applicationshowever big downside approach worked apple filesystems probably part reason resource fork abandoned entirely apple switched mac o xwith mac o x apple wanted solution would work crossplatform filesystem hence adopted next concept bundle directory treated folder file manager opaque object like file app application bundle contains among thing infoplist file think apple version json yaml file contains application metadatainfoplist key mac o x application bundleresources like icon ui file stored app application bundle file fact concept go back early day nextmathematicaapp nextstep appears one object gui actually directory seen terminalenter beos haiku conceptually based upon beos switched pef powerpc elf executable linkable format linux us well decided append resource section end elf file put resource section proper elf section merely appended concatenated end elf mean tool like strip tool using binutils aware simply delete better avoid manipulating beos elf file linux tool adding resource themwhat haiku day well le exactly beos didhaiku could theory put resource section proper elf section according developer haiku ircfreenodenet elf section would made lot sense reason beos way changing would worth itmanipulating resourcesresources structured resource format essentially list resource size raw data reminds ar formathow inspect resource haiku something like resedit haiku documentation say see resource bundled application drop executable tool like resourcer also go terminal type listres filenameresourcer available haikudepot seems crash menow manipulate resource elf file using rsrc rdef rdef file compile rsrc rdef text format much easier work rsrc format actually appended binary let play rc hhaiku resource compiler compile rdef script resource file rc option file file convert resource file back rdef script rc option file file option decompile create rdef script resource file autonames construct resource name id symbol h help show message include dir add dir list include path merge erase existing content output file output specify output file name default outxxx q quiet display error message v version show software version licensewe use xres inspect manipulate xresusage xres h help xres l file xres command first form print help text exitsthe second form list resource given filesthe third form manipulates resource one file according tothe given command let give try shall xres l haikusystemappswebpositivehaikusystemappswebpositive resource type id size name mims beos appsigappf beos appflagsmsgg beos filetypesvicn beos iconvicn kactionbackvicn kactionforwardvicn kactionstopvicn kactiongostartmsgg kactiongoappv beos appversionmore resource rdef http wwwhaikuosorgdocumentsdevcompilethemresourcesstandard resource typeswhile put anything resource defined standard resource type appsignature mime type app file association lauching ipc messaging etcappnamecatalogentry since application name usually english specifies translated name found user different language see translated name desiredappversion exactly imagine beappflags specifies registrar treat application smell meet eye first glance example bsinglelaunch make system launch new instance app time user request apps behave linux default bmultiplelaunch make system launch instance app per file finally bexclusivelaunch make system launch one instance application time reason matter often user request launch eg firefox behaves linux qtsingleapplication used achieve similar result system application bexclusivelaunch notified user try launch eg get path file user tried open themvectoricon app vector icon beos vector icon apps bitmap icon binary instead course add resource whatever id type want read app apps using bresources class let stay fascinating topic icon momentvector icon haiku styleof course haiku settle first best format icon situation linux desktop far ideal department host l iconthemecacheby looking already feel kludge isyes scalable would imagine contains vector icon rest render vector graphic small size result may le ideal want different rendition optimized different size linux desktop achieved scattering around multiple icon different size filesystem host find usrshareicons name firefox notion different firefox version system simply handle multiple version app present system elegantlydifferent firefox version different ícons stupid yet linux desktop handle without crude workaroundsmac o x way elegantly mac find applicationsfirefoxapp grep icnsapplicationsfirefoxappcontentsmacoscrashreporterappcontentsresourcescrashreportericnsapplicationsfirefoxappcontentsmacosupdaterappcontentsresourcesupdatericnsapplicationsfirefoxappcontentsresourcesdocumenticnsapplicationsfirefoxappcontentsresourcesfirefoxicnsthere one firefoxicns file firefoxapp bundle handle size different version application different iconsmuch better icon travel along application resolution one fileenter haiku except nothing le mindblowing solutionthe documentation saysa special haiku vector icon format hvif developed highly optimized small file size fast rendering icon part much smaller either bitmap widely used svg formatand boy optimized hvif icon file size compared format source http wwwhaikuosorgdocsuserguideenapplicationsiconomatichtmlthis factor ten magic end despite vector format one hvif also show different level detail depending size rendered different level detail lod depending render sizenow turn downside go hoop produce hvif icon throw svg onto imagemagick done http wwwhaikuosorgdocsuserguideenapplicationsiconomatichtml explains however iconomatic imperfectly import svg probably svg detail imported manually tweak modify get remaining learn hvif magic blog post leah hanson adding icon applicationwith information belt think add icon package created yesterdaysince feel like painting icon moment going borrow icon qt creator hello world qtquickapp haikuhome xres haikusystemappsqtcreatorbinqt creator haikuhomeqtquickappqtquickapp beos icon haikusystemappsqtcreatorbinqt creatorlet check whether icon copied haikuhome xres l haikuhomeqtquickappqtquickapphaikuhomeqtquickappqtquickapp resource type id size name vicn beos iconlooks good copied icon showing copied beos icon used appliction icon file manager yetwhat missing developer explains mecreate rdef file resource rc yourrdef generate rsrc file resattr yourbinary yourrsrc least used command add vector icon shellscriptswell want write resource attribute lostclever caching using filesystemopening elf reading resource slowas described icon first written resource inside file robust survives copying filesystems etc however also copied filesystem attribute ie beos icon work certain filesystems like bfs onlythe icon displayed system eg tracker deskbar come beos icon extended attribute reading fast place speed essence example standard box system get icon resource insteadbut end thereremember mac user paste icon standard icon application folder document allowing important thing changing new slack logo back original one mac haiku think resource file original icon ship app attribute bfs filesystem something customized user want although gui pasting custom icon default icon information window implemented yet hint hint inspecting attribute filesystemresattr used inspecting manipulating filesystem attribute resattr usage resattr option outfile infile read resource zero input file add attributesto specified output file reverse mode read attribute fromzero input file add resource specified outputfile existent output file created empty file essentially glue used convert back forth robust resource fast filesystem attribute since system supposed take resource copying automatically going bother furtherthe wizardy hpkg packageswhen get software haiku nowadays mostly come form hpkg package let unpretentious name fool hpkg format work differently similarlynamed package format may already familiar true superpowerswith traditional package format long annoyed fact download package different becomes part system file inside package installed traditional package becomes hard manage file eg remove traditional package installed file contained inside scattered around filesystem including location normal user write access whole class utility invented package manager becomes even difficult outright impossible transfer alreadyinstalled software say another machine external drive file server traditional linux system easily consist many hundred thousand million individual file go without saying fragile slow eg initially installing system installing updating removing additional package copying boot volume root partition another diskas partial workaround enduser application working appimage software distribution format put application everything need run single filesystem image mounted application executed make thing significantly straightforward since something like eg imagemagick suddenly becomes single file easily managed file manager mere mortal name implies work application set downside linux distribution people keen point timeenter haiku found optimal balance traditional packaging system imagebased software distribution hpkg package fact compressed filesystem image system boot kernel mount installed active package message like kern packagedaemon active package kern packagedaemon kern active package kern packagedaemon kern active package kern packagedaemon kern active package kern packagedaemon kern active package cool eh hold get even betterthere special package kern packagedaemon kern active package contains core operating system including kernel believe even kernel extracted boot volume root filesystem neatly loaded inplace inside hpkg package cool mentioned believe part overall elegance consistency haiku come fact whole system developed together one team look full stack kernel basic userland package management desktop infrastructure ux great example factor work imagine many different gropus team would need involved get something running linux land imagine long would take integrated distributionsthere saying organization matter easy task split task among enough head become complicated point get nothing done anymorehaiku eye opener think exactly going linux land linux land mean kernel typical linuxgnudpkgaptsystemdxorgdbusgtkgnomexdgubuntu stack rollback using hpkg systemhow often occurred updated something find afterwards work properly anymore traditional package installed hard go back earlier point time new package installed eg case something going wrong system work around providing filesystemlevel snapshot far system use rather cumbersomehaiku solves rather elegantly hpkg package whenever make change package system old package get thrown away kept around system haikusystempackagesadministrativestate forever inprogress operation store data haikusystempackagesadministrativetransaction haikusystempackagesadministrative state contains text file listing filename active package transaction contains package themselvesafter file manager operation old activation state list hpkg package active change get written text file haikusystempackagesadministrativestate activatedpackages similarly new current activation state written text file haikusystempackagesadministrativeactivatedpackagesthe haikusystempackagesadministrativestate directory may contain text file listing activated package state case installed package removed none uninstalled upgraded package state directory also hold old oneswhen system boot decides based list hpkg package activate mount based list simple straightforward something go wrong simply tell boot manager use another earlier list problem solved haiku boot loader entry reflects activation state like fact activation state list approachable simple text file clear understand hpkgfile name stark contrast madeformachinesnotpeople mess system like ostree flatpak make filesystem almost bad microsoft guids list activated package given point timeconfiguration datalooks like haikusystempackagesadministrativewritablefiles contains configuration file come package readwrite user hpkg package mounted readonly remember file need copied package written make sensegui integration hpkg systemlet look shiny hpkg package integrated desktop user experience ux haiku desktop personally set bar high comparing experience hpkg package experience app bundle macintosh even begin talking situation linux desktop absymal comparison eitherthe following scenario come mind want inspect content hpkg packagei want install hpkg packagei want delete hpkg packagei want delete something came system part hpkg packagei want copy something came system part hpkg package another systemi want download dependency hpkg package assumed part every haiku installation eg airgapped machine connected internet want keep hpkg package special place separate usual location boot volume root partition eg running space cover basic case run daily work let begininspecting content hpkg packageon mac rightclick app bundle open inspect content finder really directory disguise know mac also pkg package systemlevel stuff application normal user usually interact often haiku doubleclick hpkg package click content see inside list file without possibility open doubleclicking would nicer way temporarily mount hpkg package peek inside using file manager without user needing care implementation detail meantime open hpkg package expander extract like archive haikudepot gui list content package way say doubleclick readmemdin category mac win adding functionality haikudepot hardinstalling hpkg package guion mac application come dmg disk image contain app bundle one doubleclicks dmg disk image copy app bundle eg application draganddrop finder second nature hear new user struggling default apple advertises systemwideapplications directory used networkwide peruser one going back next easily put application file server homeapplications like toon haiku doubleclick hpkg package click install simple enough wonder happens package dependency available haikuports installed local system yet many linux desktop really know situation although solution obvious ask user whether download install dependencieswhich precisely haiku doesi downloaded sanity manualleand doubleclicked hpkg packge manager know get dependency long repository already known system every linux distribution thisalternatively also possibly use draganddrop file manager simply move hpkg package either haikusystempackages systemwide installation default haikuhomeconfigpackages peruser installation available doubleclicking still irritated term config synonym setting heck concept multiple user even yet available haiku may part thing simple undecided whether adding multiuser capability unnecessarily complicate thing personal computer desktop category haiku win work application also system softwaredeleting hpkg package guion mac drag application icon trash easy haiku first need find hpkg package landed system time one moved place system usuallyhaikusystempackages systemwide installation default haikuhomeconfigpackages say find config misnomer drag application icon trash easy except actually happens happens try move hpkg package trash haikusystempackagesi literally tried move qtquickapp hello world application packaged yesterday trash attempt move system folder since package land system folder seem remove hpkg package without modifying content normal user frightened press cancel fittingly default buttonexplains haiku developer mr waddlesplash message existed decade likely tweak warn moving haiku package general user modify package way anywayok maybe need haikudepot package manager gui doubleclick hpkg package haikusystempackages suspecting show uninstall button nope still install uninstall fun see happens install alreadyinstalled package happens happens install alreadyinstalled packagefollowed happens click apply change think bug already ticket link happen quick fix put uninstall button package already haikusystempackages haikuhomeconfigpackagesif view list package installed haikudepot package appears uninstall itin category mac currently win imagine tweaking haiku user experience could overtake mac haiku developer estimate take hour le add said functionality haikudepot know c volunteer deleting something came hpkg package guinow let try delete application hpkg package came doubt mere mortal would understand difference anyhow mac well actually user deal dmg file application came app bundle usually former pile downloads directory latter get copied user application suspect many user really know hypothesis confirmed former apple employee something like mac hence appimage difference application package came drag application icon trash easy haiku also distinction apps package doubt user understand better happens move application apps trash happens try delete application came hpkg filethis may technically true application readonly filesystem image really helpful userquick fix gui offer uninstall hpkg insteadjust fun trying duplicate application pressing altd get move copy item readonly volume system aside systempackages systemsettings packagefs volume remember appeared df separate mount unfortunately mount command really helpful pointed earlier installment article series mountvolume show looking apparently loopmounted hpkg package considered volume already forgotten alternative commandsin category neither haiku mac really win appimage full disclosure biased imagine tweaking haiku user experience could overtake macside note need find volume really compared partition probably similar folder related directory directory shown folder file manager eg bundle treated like file make officially nerd copying something came hpkg package another system guion mac draganddrop app bundle dependency inside app bundle moved alongon haiku draganddrop application dependency handled allquick fix gui offer move hpkg instead optionally dependency hpkg package wellin category mac clearly win anyway someone like mac paradigm haiku want copy hpkg instead tell hpkg package dependency guinot every machine online time although system yes looking contemporary window mac linux seem forgetting important go eg internet cafe download software put removable medium insert medium home computer sure work often greeted unmet dependency window linuxon mac usually one file downloading dmg need time dependency come macos default exception apply complex application need runtimes javaon haiku downloading hpkg package say java application sufficient since java may may present target machine way download hpkg dependency given package except part default installation haiku hence safely assumed present every haiku system category mac slightly winssays haiku developer mr waddlesplash writing tool collect dependency application one set hpkg package would probably take minute someone knew haiku package internals really demand adding support hard seems like rare thing mehold breath tomorrow installment serieskeeping hpkg package special placeas written want keep hpkg package special place separate usual location boot volume root partition common theoretical reason constantly running space main builtin disk matter large usually resort attaching external drive network share application resideon mac drag app bundle removable drive network share finder done still doubleclick application like boot volume simple haiku told might possible achieve moving hpkg package removable drive network share need undocumented commandline voodoo get mounted system know clearly gui uxin category mac winshaiku developer mr waddlesplash optimized usual usecases actually demand beyond one user implement otherwise party opportunitythis topic tomorrow episodespeaking network share simple discoverable networkwide application think zeroconf advertising application either launched local network copied local machine would neat think lan party course application developer could opt appflagssummary regarding gui integration hpkg systemoverall hpkg integration still leaf bit deserved think relatively fresh anyhow thing think could improved ux thing kernel debug landwouldn great could encouter kernel panic continue enter command like syslog grep usb well haiku thanks kernel debug land lucky running kernel panic anytime soon want see magic action easy press altprintscnd arguably debug feel instantly reminded programmer key http enwikipediaorgwikiprogrammer let original macintosh developer enter debugger one installed
241,Lobsters,osdev,OS,A Security Kernel Based on the Lambda Calculus,http://mumble.net/~jar/pubs/secureos/secureos.html,security kernel based lambda calculus,introduction section section section security kernel based lambdacalculus scheme section security kernel safe computermediated cooperation limited environment screening certification simple kernel choice notation section notation figure section procedure section initial program figure administration trusted third party establishes safety section figure authentication section abstract data type keybased authentication section section figure figure case kernel support section protection domain implementation experience scheme security kernel section section module system checking structure safety section section static privilege deployed configuration mobile robot system multiuser system www evaluation server security standard scheme section conclusion previous work actor mus oooz discussion schroeder thesis operating system security future work preemption continuation machine program reflection issue contribution section acknowledgement reference ftp ftpfvcompubcodeothersafetcltar ftp parcftpxeroxcompubmooprogrammersmanualtxt ftp footnote,abstract cooperation independent agent depends upon establishing degree security cooperating agent need assurance cooperation endanger resource value agent computer system computational mechanism assure safe cooperation among system user mediating resource access according desired security policy mechanism called security kernel lie heart many operating system programming environment report describes scheme programming environment whose design guided established principle operating system security scheme security kernel small consisting callbyvalue lambdacalculus simple extension support abstract data type object mutation access hardware resource agent user subsystem separate evaluation environment hold object representing privilege granted agent environment ultimately determine availability object reference protection sharing controlled largely way environment constructed describe experience scheme show serf robust flexible experimental platform two successful application scheme programming environment cornell mobile robot scheme run operating system support secure multiuser environment run workstation copyright massachusetts institute technology report describes research done artificial intelligence laboratory massachusetts institute technology support research provided part advanced research project agency department defense office naval research contract introduction cooperation independent agent depends upon establishing degree security cooperating agent need assurance cooperation endanger resource value agent computer system computational mechanism assure safe cooperation among system user mediating resource access according desired security policy mechanism called security kernel lie heart many operating system programming environment claim lambdacalculus serve central component simple flexible security kernel present report support thesis motivating describing lambdacalculusbased security kernel giving several line evidence kernel effectiveness security consists callbyvalue lambdacalculus simple extension support abstract data type object mutation access hardware resource within agent user subsystem separate evaluation environment hold object representing privilege granted agent environment ultimately determine availability object reference protection sharing controlled largely way environment constructed effectiveness security kernel demonstrated three line evidence ability address certain fundamental security problem important cooperation section structural correspondence familiar operating system kernel section success scheme complete implementation scheme programming language built basis secure robust flexible programming system section security kernel based lambdacalculus lambdacalculus calculus function concerned computation abstracted instantiated name come meaning lambdacalculus procedure generalized function capable performing side effect procedure correspond operating system would program server side effect include access input output device memory cell side effect communication therefore cooperation possible however side effect harmful example computercontrolled robot arm easily hurt person get way purpose security kernel allow control access object challenge designing security kernel support sharing protection per se rather allow flexible control extent object shared protected one way lambdacalculus provide protection closure procedure program program coupled environment origin procedure access environment call caller access procedure environment origin caller callee therefore protected one another sharing accomplished shared portion environment may include procedure allow still object shared address number authentication certification problem includes abstract data type facility usually term refers type abstraction enforced compiletime type checking mean dynamic information hiding mechanism facility akin digital signature subsystem may sign object way signed object may recognized definitely signed subsystem particular compiler might use particular signature mean signed procedure one harmless technical sense therefore safe apply fragile argument scheme scheme complete scheme system test capacity support safe cooperation scheme major design implementation effort therefore constitutes heart project section give overview scheme information found related report large amount engineering go making practical programming environment scheme security concern nearly every component major facility whose design shaped security concern include following module system module truly encapsulated procedure allowing shared safely macro facility macro also closed like procedure allows form compiletime security module may export macro protecting object used macro implementation dynamic variable information communicated caller callee implicit dynamic environment however dynamic variable must accessed via key key protected major theme running design scheme avoidance minimization shared global state example virtual machine bytecode interpreter essential minimum set register register hold global symbol table environment structure lisp scheme implementation another example runtime system module never alter global state scheme term toplevel variable ever assigned set data structure manipulated module instantiated multiple time avoid conflict use finally success scheme therefore demonstrated use number application include programming environment cornell mobile robot scheme run operating system support secure multiuser environment run workstation security kernel section exposition starting first principle problem secure cooperation independent agent describes simple idealized security kernel address problem presentation intended show essential unity security concern operating system programming language idealized kernel based graph encapsulated object accessibility one object another constrained connectivity object graph limited objectspecific gatekeeper program kernel enables natural construction variety mechanism support secure cooperation agent particular agent securely call untrusted agent program sensitive input kernel similar capabilitybased operating system main difference kernel simpler abstract clearly connected programming language concept classical capability system safe computermediated cooperation participant cooperative interaction carry joint activity us combine resource provides resource might include energy information skill equipment agent relinquishes control extent resource agent brings agent value resource relinquishing control dangerous resource may come harm may used cause harm assure resource safety control relinquished desirable agent able dictate precisely extent control relinquished trusted intermediary helpful situation resource handed intermediary performs action specified recipient subject restriction imposed source computer system may useful cooperation resource may provide programmable processor memory network communication program also potential act trusted intermediary agent providing resource dictate use restriction form program resource recipient specify action performed resource form program program invocation therefore play critical role computermediated cooperation program untrusted program invoking fraught peril invoking agent put risk resource value input use part computer system similarly agent supplied program may endowed access resource value agent resource also put risk program invoked consider following scenario bart writes program sort list number generous fellow give useful program lisa expressed interest using program lisa hesitant use bart program since bart may arranged program sneaky thing example program might covertly send list sorted back bart via electronic mail would unfortunate since lisa want sort list credit card number would like keep secret bart lisa two distinct approach solving safe invocation problem general situation agent cooperation resource protected one agent program invoked context input computer system given another agent first approach program run limited computing environment one dangerous operation sending mail prohibited second approach second agent reject program unless bear recognized certificate safety next two section look two approach limited environment one way avoid disclosure number instance confinement problem would lisa isolate computer running bart program making physically impossible program harm would require detaching computer network removing disk read written setting special network disk transmitting input result measure inconvenient timeconsuming expensive also crude example permissible bart program fetch information network disk write information selective restriction would impossible using hardware configuration basic idea sound however trick ensure access sensitive resource intercepted special supervisor program supervisor program check validity access attempt allows go straightforward method achieved use emulator emulator program mimic role processor hardware usually play decoding executing program instruction always safe emulator simulates hardware precisely dangerous instruction supervisor program invoked use emulator make program run slowly common alternative use special hardware feature available many computer called user mode processor user mode dangerous operation preempted causing supervisor program invoked supervisor program run ordinary nonuser supervisor mode may implement whatever protection policy like safe program invocation might accomplished using architecture usermode support invoker run program user mode telling supervisor program operation permitted supervisor program monitor potentially dangerous operation refusing perform operation permitted program done executes special operation return supervisor mode screening certification another way avoid disclosure list number would lisa screen bart program verify contains dubious operation call sendemail program would probably require receiving program source form binary program would modest size written language familiar lisa would also need access compiler time hand run compiler even lisa willing able go trouble bart might unwilling give source program contains information want keep secret password material subject copyright trade secret personal information dilemma could solved help trusted third party many different way third party might help following variant screening method suggested nt require lisa obtain bart source program suppose bart lisa trust ned bart give source program ned instruction ned give source program lisa may answer question whether program obviously harmless run obviously harmless could mean program us potentially harmful operation could sophisticated test harmlessness uncomputable test approximation lisa obtains machine program asks ned whether machine program obviously harmless run say run assurance screening approach agent invoking program reject unless bear recognized certificate safety following initial check invoking program simple invoking fully trusted program need emulator program usermode hardware support safe program invocation might accomplished using screening approach invoker check see whether program definitely restricted operation permitted invoker invoker refuse run program appears use unpermitted operation invoker run program real machine harmful operation need nt prevented since wo nt occur certifier correct screening drawback cooperation required person supplying program must go trouble obtaining certification perhaps even change program certifiable simple kernel security kernel innermost layer operating system programming language fundamental component responsible protecting valued resource unwanted disclosure manipulation isolating security kernel rest system help ensure reliability trustworthiness simplicity important kernel simpler kernel easily tested verified follows one many way define security kernel design call intended suitable use either operating system programming language might also seen theory security used describe security existing programming language operating system organizes computer resource network logical entity call object basic unit protection link network one object another mean second accessible first object given object access successor object access given object predecessor object may thought representing particular privilege capability resource example object might represent ability draw picture display transmit message communication line read information data file run program processing element new node enter object network running program request creation new object order avoid danger dangling reference link deleted node memory leak object deletion left hand kernel kernel may delete object soon path network current computation absence path detected automatic mechanism reference count garbage collection several different kind object introduced needed presentation choice notation order elucidate kernel design describe consequence necessary present specimen program purpose must choose notation programming language choice principle arbitrary important affect exposition interested comparing currently popular familiar security kernel operating system would present example program perform kernel operation traditional way using system call program would written algollike language perhaps machinelevel language c would viable approach since nothing theory precludes see section however approach make example awkward write understand particularly awkward frequent case creating new object program must specify second program traditional language nt good way program specify another entire program even given notation division labor language security kernel might difficult tease apart reason prefer use notation kernel operation natural form expression language unix shell approach goal since program invocation natural syntax operation program process concise would algol c however would like go step direction language integrated kernel support use version scheme scheme value including procedure identified object known kernel ml would another reasonable choice language notation avoid confusion scheme dialect refer small dialect scheme used example scheme grammar given figure summarizes scheme e stand expression figure grammar scheme e var lambda var e e e constant e e e begin e let var e e let var var e e arith e e con e e car e cdr e null e pair e list e symbol e eq e e newcell cellref e cellset e e enclose e e control e e arith meaning construct full scheme first group construct scheme lambda calculus core variable reference procedure abstraction lambda application second group construct etc special evaluation rule third group set primitive operator every case operand expression evaluated operator applied familiar require explanation cell mutable object single outgoing access link field newcell creates new uninitialized cell cellref cell return object cell currently link cellset cell obj redirects cell outgoing link obj enclose operator take program specification successor set convert procedure enclose might called output scheme algol compiler detail unimportant see section control operator control hardware device example control keyboard readchar might read character particluar keyboard argument interpreted differently different kind device reduce complexity exposition pair assumed immutable eq assumed applicable symbol cell use term value describe integer booleans symbol entity carry information privilege whether value considered object unimportant procedure kernel principally concerned procedure every procedure associated program procedure program access procedure successor use various operation access transitive however access procedure imply ability access procedure successor access necessarily controlled procedure program sense procedure program gatekeeper protects procedure successor primary operation procedure application argument sequence procedure applied argument may include object value integer program run addition procedure successor program access argument may use object others making new object performing application application written scheme using syntax procedure argument example f name link procedure f x denotes application procedure x essential source security procedure program absolutely limited using procedure successor object application argument sequence scheme lambdaexpressions concise notation specifying procedure program evaluates lambdaexpression new procedure created new procedure successor object value lambdaexpression free variable program specified body lambdaexpression example illustrating lambda application lambda x g f x specifies procedure two successor know f g resulting procedure say h applied argument applies f argument applies g result obtained applying f finally g result becomes result call h h therefore act functional composition f g procedure program could written language scheme example algol c machine language consider possibility later section initial program suppose someone let call marge obtains brandnew machine running operating system kernel turn machine begin executing initial program initial program ordinary program special relation kernel executed powerup principle initial program arbitrary whatever manufacturer chosen provide initial program given access object represent computer system attached hardware resource might include keyboard display facsimile machine traffic light etc hardware may manipulated control primitive operator whose detail important resource object given program access hardware resource explicitly granted access initial program perhaps indirectly series program order make computer generally useful possible manufacturer installed initial program executes command entered keyboard one kind command simply scheme expression expression seen initial program compiles executes expression display result example command cause number displayed second kind command definition look like define var e definition give way user extend environment new object given name subsequent command see example marge write define square lambda x x x define squaring procedure square invoke display result able use existing resource command need access reason processed relative environment set variable binding allowing object accessed name environment initially includes two kind resource io device name like thedisplay thefaxmachine handy utility user could written manufacturer thoughtfully supplied utility usual scheme procedure assoc write read stringappend well others described figure simple initial program define commandprocessor lambda env source sink let loop env env let command read source definition command loop bind cadr command eval caddr command env env begin write eval command env sink loop env define definition lambda command pair command eq car command define f initial program described including utility command processor might written entirely scheme case would resemble program figure eval utility executes scheme expression representation obtained user otherwise received computed make use compiler translates expression form acceptable kernel primitive enclose operator translated expression given access specified environment executed define eval lambda expression env enclose compileschemeexpression map car env map cdr env definition handled using bind extends given environment adding binding variable value environment represented association list bind could defined define bind lambda name value env con con name value env administration enough mechanism disposal consider example marge intends set machine lisa bart use resource mean machine user share object one another defines simple object repository define repository newcell cellset repository define lookup lambda name let probe assoc name repository probe cdr probe f define publish lambda name object cellset repository con con name object repository anyone access marge lookup procedure obtain value repository anyone access publish store value assoc assumed lisp traditional association list search function next marge make environment bart command processor must include object bart able access initially harm including system utility procedure assoc read etc since harm come using however need careful io device sake safety includes bart io device bartenv define makeuserenv lambda fromuser touser bind standardinput fromuser bind standardoutput touser bind lookup lookup bind publish publish utilitiesenv define bartenv makeuserenv frombart tobart bart command processor initiated commandprocessor bartenv frombart tobart similarly lisa commandprocessor lisaenv fromlisa tolisa security result omission vulnerable object user initial environment example lisa io device fromlisa tolisa nt accessible bart environment bart wo nt able cause mischief reading writing bart lisa able share object repository bart define reallysort lambda listofnumbers null listofnumbers insert car listofnumbers reallysort cdr listofnumbers define insert lambda x l let recur l l null l list x x car l con x l con car l recur cdr l publish sort sort lisa define bartsort lookup sort bartsort course bart lisa must trust marge still full control resource must treat administrative structure part machine trusted substrate trust avoided bart lisa must trust marge software machine marge trust manufacturer installed software manufacturer trust semiconductor chip factory chip factory trust solid state physicist trusted third party establishes safety already great deal safety built structure kernel procedure invoked privilege invoked procedure program given created installed passed argument two privilege set contain dangerous privilege way harm come invocation however sometimes reason pas privilege sensitive information unknown program problem installed program given access channel information might transmitted cell privilege information may saved later unexpected use return main example introduction lisa want call bart sort program without risking disclosure input may contain sensitive information specifically risk run bart written something like define listofnumbers newcell define sort lambda listofnumbers begin cellset listofnumbers listofnumbers reallysort listofnumbers define reallysort lambda listofnumbers null listofnumbers insert car listofnumbers reallysort cdr listofnumbers publish sort sort deceit would allow bart extract recent input passed sort evaluating cellref listofnumbers sketch rudimentary solution ned bart lisa trust set safe compilation service bart submits source code sort program ned service ned service analyzes bart source code determine whether program might divulge input bart anyone else definition might divulge quot see ned evaluates initialization bart program fresh environment extract access resulting sort procedure ned make sort available lisa lisa obtains program ned run assurance input divulged whether program might divulge input undecidable test property necessarily conservative test reject perfectly benign useful program ca nt easily cast recognizably safe form many possible test one simple test following one program might divulge input program obviously applicative program obviously applicative iff none lambdaexpressions contains cellset expression one clearly better method discussed later context module system section see safe compilation service might work let continue scenario begun marge established public object repository first problem lisa need way determine authorship repository entry distinguish bart entry ned assuming object published ned safe must make sure sort procedure us published ned bart figure marge improved repository define makepublish lambda submitter lambda name object publish name con submitter object define makeuserenv lambda username fromuser touser bind standardinput fromuser bind standardoutput touser bind lookup lookup bind publish makepublish username utilitiesenv define bartenv makeuserenv bart frombart tobart define lisaenv makeuserenv lisa fromlisa tolisa define nedenv makeuserenv ned fromned toned fundamental flaw repository marge must fix see figure object repository accompanied name user put user environment publish procedure bart publish procedure example store entry form con bart object repository complete scenario ned define publishifsafe lambda name program safe program publish name eval program notobviouslysafe define safe lambda program publish publishifsafe publishifsafe bart define sortprogram begin define sort define insert sort define publishifsafe cdr lookup publishifsafe publishifsafe safesort sortprogram lisa define safesortentry lookup safesort define safesort eq car safesortentry ned cdr safesortentry safesort published ned safesort nothing bart trick lisa try publish unsafe safesort procedure use publish procedure since ned publish nt accessible case lisa lookup safesort result marked bart name ned lisa discard authentication section treat problem authentication considers solution broadly speaking authentication procedure test determines whether object trustworthy genuine example checking student identification card authenticates person presenting card student indicated card found authentic person may granted privilege appropriate status permission use ice rink authentication important capability secure computer system example authentication system request received untrusted source public communication network must authenticated originating agent right perform action specified request dynamically typed programming language lisp snobol value must authenticated correct type operator receiving operand solution safe invocation example section involves test authenticity putatively safe trustworthy object bart program authentication necessary reliable transmission object using untrusted messenger channel authenticate object transmitted sender receiver sender must label package object recognized authenticated receiver labeling packaging must done unforgeable tamperproof manner use word capsule object labeled packaged physical analogy capsule would locked box receiver key object digital information sequence character number wellknown digital cryptographic technique used implement authenticated transmission however object transmission security kernel limit object access according accessibility graph requires different mechanism kernel transmitting name object whether encrypted never transmitting access object since interpretation name therefore accessibility named object local object access transmitted approved channel argument result transmission procedure invocation abstract data type authentication required whenever result one procedure intended constitute valid input another procedure object result valid input related set procedure called instance type abstract data type set related procedure called module cluster context programming language protected subsystem server classical operating system parlance example consider central accounting office issue account object client client may create new account using newaccount procedure transfer money account using transfer procedure integrity account great importance accounting office would unfortunate client created counterfeit account transferred money valid account therefore transfer need authenticate account asked manipulate genuine created newaccount client point view account object client may manipulate certain set operator accounting office point view account capsule transmitted newaccount transfer via untrusted network interacting client keybased authentication section solution safe invocation problem relies exchange object name bart tell lisa name object trusted repository safesort lisa obtains repository fact object authentically safe ie placed ned object lisa use bart wish keep object secret lisa may give secret key form unguessable name ie password transmit name lisa password made long enough random enough make probability unauthorized discovery arbitrarily small course assumes way untrusted agent obtain list name defined repository instead password possible use cell section key suggested morris like password cell object unique recognizable identity unlike password security advantage object access transferred kernelsupported operation need use single repository marge store object might need authenticated separate abstract data type mapping key object figure give implementation general authentication facility essentially described morris call newseal return new triple object seal unseal sealed triple represents new abstract data type seal encloses object capsule authenticated unseal extraction operator reveals encapsulated object iff capsule authentic ie made seal sealed predicate return true iff capsule authentic figure implementation seal define newseal let instance newcell cellset instance let seal lambda rep let ab newcell cellset instance con con ab rep cellref instance ab unseal lambda ab let probe assq ab cellref instance probe cdr probe error invalid argument ab sealed lambda x assq x cellref instance f list seal unseal sealed assumed assq association list lookup determine cell identity cell one holding association list used identity holding reference object example program figure implementation accounting system described important publish accountcell since would allow client accounting system set account balance arbitrary value figure accounting module define accountoperators newseal define makeaccount car accountoperators define accountcell cadr accountoperators define account caddr accountoperators define newaccount lambda makeaccount newcell define transfer lambda amount let fromcell accountcell tocell accountcell cellref fromcell amount begin cellset fromcell cellref fromcell amount cellset tocell cellref tocell amount error error insufficient fund publish newaccount newaccount publish transfer transfer case kernel support seen existing kernel mechanism cell procedure used implement authentication however would like argue favor direct authentication mechanism implemented kernel argument favor required due stated goal keeping kernel simple possible keybased authentication mechanism several practical problem performance inefficient search central table every use instance memory management kernel know whether safe delete object straightforward garbage collection technique nt work central table hold link type instance garbage collector ignorant association key object semantic obscurity would unfortunate creating object abstract data type necessarily side effect would key generated side effect defeat optimization subgraph sharing direct approach involving keyed table requires kernel support following argument show kernel without abstract data type support recipient fooled matter packaging method used consider candidate encapsulation authentication technique without loss generality assume capsule procedure order authenticate capsule recipient choice apply argument sequence since nothing else done procedure application appropriately called challenge since examining result distinguishes authentic capsule nonauthentic one challenge correctly met additional application capsule related object returned challenge either return perform operation underlying object given authentic capsule untrusted messenger may easily make counterfeit follows counterfeit answer challenge consulting authentic capsule returning return handle application way like argument nt even consider problem challenge might diverge signal error cause troublesome side effect annoyance handling situation see section would argue using procedure even way kernel support provided adding newseal new primitive operator e newseal capsule new kind object implemented efficiently capsule represented record two field one containing unique seal holding encapsulated object figure operating system accessibility resource controlled kernel data structure called protection domain simply domain domain includes segment table page table specifies memory segment directly accessible program running domain domain also specifies availability resource io device represented network procedure residing domain reference procedure called remote procedure handle interprocess communication handle literature graphic figure transcribed sorry protection domain section attempt explain correspondence conventional operating system kernel typical secure operating system object immediately accessible running program constitute protection domain simply domain object various sort including following may others mapped memory segment contain program data stuctures program directly manipulate descriptor hardware device file descriptor control access device file system may include information buffer position marker operating system reference procedure residing domain variously called gateway interprocess communication handle remote procedure handle write simply handle handle consists domain together address within domain specifying procedure entry point figure lambdacalculus interpreter accessibility resource controlled interpreter data structure called environment environment contains reference data structure list directly accessible program running environment environment also specifies availability resource io device represented network procedure connected environment graphic table transcribed sorry program refers object using short name number example load store machine instruction us memory address access memory segment object system call instruction requesting information read file us file descriptor number specify file domain determines name interpreted domain contains segment table page table use hardware interpreting memory address table descriptor handle use system call handler interpreting io crossdomain procedure call request domain map name address descriptor number accessible object memory segment descriptor environment map name identifier denotation value object various object type parallel two framework well see figure mapped memory segment correspond list cell full scheme also vector string data type better approximation memory segment list cell complete version might support memory segment directly device file descriptor correspond device handle correspond procedure handle domain coupled entry point procedure environment coupled executable code implementation experience variant kernel form basis complete scheme implementation called scheme section describes scheme analyzes security standpoint discus experience use various application security important implementation scheme consists two part virtual machine manages memory executes bytecode instruction set set module executed virtual machine virtual machine code could principle replaced real machine code would require significant compiler construction effort beyond scope project time virtual machine approach virtue robustness small size ease portability thorough discussion scheme scheme system found elsewhere scheme security kernel scheme security kernel implemented part virtual machine part set runtime system module defined using privileged instruction supplied virtual machine vm component includes instruction car secure vm raise exception applied anything pair application raise exception given nonprocedure runtime module include exception system bytecode compiler export interface whose use unrestricted defined term lowerlevel operation restricted type safety instruction car procedure application rely assiduously followed tagging discipline value immediate value small integer access link object stored memory represented descriptor descriptor tag distinguishes immediate value link arithmetic operation require immediatetagged operand affix immediate tag result nontag portion descriptor link hold hardware address stored object stored object represented contiguous series memory location first memory location hold header specifying object size type procedure capsule cell etc subsequent location hold descriptor include link object successor accessibility network tagging discipline guarantee object address never seen programmer promote security also give memory manager freedom move object one place another guaranteeing relocation affect running computation security kernel provide direct access bytecode interpreter instead new program must given scheme program bytecompiled eval compiler translates program bytecode instruction stream us privileged makeclosure instruction make procedure use makeclosure instruction restricted two reason agent could defeat security constructing executing code stream containing privileged instruction example closureenv instruction allows unrestricted access successor arbitrary procedure agent could execute object access instruction index specifying location beyond end object accessed might fetch reference object nt seen performance reason instruction perform bound checking rely bytecode compiler ensure index valid abstract data type section used heavily scheme runtime system provided form record facility convenient efficient theoretically equivalent elegant newseal would common case capsule tuple several field single object record created tuple capsule le memory consumed field reference require one indirection instead two feature scheme security kernel beyond defines following basic feature standard scheme character vector full suite numeric operator string stringsymbol conversion none security implication belong kernel sake efficiency exception handling important agent initiating computation able gain control computation lead exceptional event division zero special construct allows exception exception certain type intercepted fluid variable every application implicitly pass environment map unique token called fluid variable cell special construct extends environment new binding interesting aspect security perspective fluid variable unique token protected binding fluid variable protected thus x call call z case z access fluid binding established x ca nt contrast similar facility unix process environment protection multiple thread control new thread control may started spawn thunk synchronization mechanism include lock condition variable thread separate excep tion context fluid environment thread really secure see section immutability feature somewhat frill useful pair vector string made readonly created quote immutable object may passed untrusted procedure without worry might altered since attempted mutation setcar vectorset etc raise exception variable pair mutable scheme module system scheme provides operator constructing querying environment environment control important determining environment advertising environment roughly speaking environment excludes dangerous thing ca nt dangerous environment manipulated object passed compiler called toplevel environment package package static dynamic component static component defines information important compilation syntactic keywords type information early binding information definition inline procedure dynamic component package determines variable obtain value run time binding move package via another kind environmentlike object called structure structure particular package implementation particular interface interface set name optional type attached makesimpleinterface name interface makestructure package interface structure dually package receives binding package via structure makepackage structure package borrowing terminology standard ml say package open structure receives binding simple example assume scheme defined structure holding useful binding define lambda forth define repositorypackage makepackage list scheme eval begin define repository define lookup define publish repositorypackage define repositoryinterface lookup publish define repository makestructure repositorypackage repositoryinterface define repositoryclient makepackage list scheme repository describe scheme module system detail elsewhere checking structure safety seen section useful able determine whether procedure safe particular useful know whether procedure access resource could used communication channel outside world possible traverse access graph starting procedure would possible determine answer question however traversal done outside security kernel scheme information necessary perform certain safety check contained network structure package network considered quotient summary true access network procedure considered safe structure export safe structure safe underlying package safe package safe every structure open safe definition safe recursive made relative basis set structure assumed safe following crude implementation safety predicate define safe struct assumedsafe cond memq struct assumedsafe structure struct every lambda safe assumedsafe packageopens structurepackage struct else f nt precise test virtue simple intuitive rather rely sophisticated technique type effect verification kind code analysis involves visibility value usual scheme runtime system provides number structure may considered safe purpose guaranteeing absence communication channel structure implementing standard scheme dialect one easy use create channel different safescheme structure defined eliminates possibility channel described following one source channel assignment toplevel variable example define lastsortedlist f define sort l set lastsortedlist l reallysort l get rid toplevel definition prevent set must disallowed toplevel variable except possibly initialization current solution exclude set entirely safescheme since otherwise compiler would modified project time constraint nt allow mutation data structure reachable toplevel variable also must prohibited instead excluding mutation entirely suggested section exclude toplevel variable hold mutable data structure done excluding normal scheme define replacing variant make right assurance define var var body allowed define var exp allowed iff exp evaluates verifiably immutable object verifiably immutable object include scalar number character immutable string immutable pair vector capsule verifiably immutable component note category nt include procedure since procedure easily hide channel course safescheme also excludes operation access file system includes io routine take explicit port argument display x port excludes implicitport variant display x static privilege fact static binding syntactic keywords macro primitive operator determined relative package mean entity may considered privilege granted example particular agent user subsystem might denied access operator side effect excluding operator environment available agent scoping syntactic static entity effectively allows equation language module derivative idea safe language module safe written safe language macro secure precise sense name macro introduces expanded program text resolved environment macro definition environment use example package might define letrec term set export letrec without exporting set structure letrec client considered applicative safe even though process compiling involves source source rewrite containing imperative operator explanation problem lexically scoped macro algorithm used scheme implement found elsewhere deployed configuration scheme configuration described interesting one respect protection problem configuration include singleuser development environment far evolved multiprocessor version written mit bob brown distributed version developed richard kelsey others nec mobile robot system scheme operating system running four mobile robot cornell computer science robotics vision lab csrvl main onboard computer system mhz ram eprom user code isolated operating system internals scheme type bound checking mean nothing user program harm robot important robot programmed undergraduate taking robotics course many relatively novice programmer scheme virtual machine running robot communicates development environment running either scheme common lisp workstation bytecode compiler run workstation sends byte code executed robot teledebugging link offloads workstation debugging programming environment support including bytecode compiler division labor free precious memory robot tether physical encumbrance detached without affecting virtual machine reattached time debugging downloading detailed description mobile robot system found elsewhere multiuser system scheme development environment configured accessed internet multiple user user given separate initial evaluation environment thread control configuration developed franklyn turbak dan winship called museme multiuser simulation environment muse similar lambdamoo www evaluation server scheme configured run worldwide web server httpd response appropriate request arriving internet service aim promote scheme giving general network public chance experiment easily request contains scheme program scheme expression execute server server reply printed representation result evaluating expression environment program expression run explicitly reduced default environment order limit capability program come anyone internet nt trusted security standard scheme scheme implement scheme standard order maintain security however user given different instantiation builtin procedure much conventional timesharing system would provides user different address space shared agent following procedure would spell trouble safe cooperation builtin procedure open file openoutputfile buggy malevolent program could overwrite important file read sensitive information file anything bind access current input output port display explicit port argument use procedure would allow spoofing misleading output could mistaken valid message coming legitimate source error handler command processor load access file system also read writes current interaction environment multiagent scheme system need ensure nonconflicting use external file system assuming external file system agent instantiation fileopening procedure private version implement file system access specific agent file opening procedure access agent file utility open file must given file name rather access file form procedure port appropriate data abstraction transition nameoriented valueoriented protection exactly necessary order implement principle least privilege also behind analogous shift lisp dynamic scoping scheme lexical scoping file one agent currentoutputport procedure allowed access output port matter another agent agent version currentoutputport display writechar read etc callwithcurrentcontinuation procedure raise fundamental question ability invoke one continuation multiple time privilege available agent answer nt obvious see section following feature accepted scheme report author inclusion report also troubling interactionenvironment given eval problem load dynamicwind operator supposed establish dynamic context entry exit context guarded specified action mischievous program could initiate longrunning continuationinvoking computation unwind action andor set arbitrarily large number nested dynamicwinds perhaps defeating timesharing mechanism established regaining control error abort request conclusion basic premise work program exchange interaction powerful mode cooperation encouraged computational infrastructure make riskfree possible program exchange interaction becoming easier common thanks advance hardware infrastructure increasing number computer growing network connectivity hindered computer system provide little protection danger might inflicted unknown program technique proposed attain safety employ security kernel simple powerful semantics allows finegrained control privilege grant invoked program privilege need job right secondary storage io device nt implicitly inherited invoking agent privilege set certify program passed reliable safety test label seal object authenticated later none idea particularly new derived saltzer schroeder paper protection computer system lay desideratum secure system principle economy mechanism principle least privilege principle separation privilege rather main novelty present work demonstration spare security kernel derived first principle spanning operating system programming language gulf simultaneously secure practical previous work actor connection lambdacalculus message passing actor semantics well known application lambdacalculus corresponds message passing actor system argument sequence playing role message actor language scheme developed programming language framework little explicit attention security concern cooperation mutually suspicious agent security course implicit fact actor procedure sent message inspected transfer control argument sequence transmitted part caller environment provision authentication actor recognition abstract data type either actor language scheme mus multiuser simulation environment muse also mud multiuser dungeon moo mud objectoriented simulates world number place room inhabited user player character muse typically run network accepts connection many user user move place place communicate manipulate simulated physical object object may value user user program may attempt action harm object generally open door policy security important issue muse design administration programming language mus particular lambdamoo feature caller privilege nt implicitly passed called program certainly improvement behavior mainstream operating system give caller privilege callee correct behavior dictated demand environment user encounter strange object thing cause invocation program belonging object rather creator mus generally based ad hoc programming language many peculiar feature lead security problem inflexibility overall lack security mus betrayed fact special privilege programmer new member muse must convince administrator worthy allowed write new program oooz strandh oooz system resembles scheme aspiring simple multiuser schemebased programming environment operating system similarity end oooz extends scheme hierarchical globally accessible namespace objectoriented programming framework global namespace analogous conventional file system access controlled access control list attached object obvious way oooz implement abstract data type authentication discussion schroeder thesis schroeder studied problem cooperation mutually suspicious principal dissertation describes extension multics operating system caller callee crossdomain call may protect resource one another aware problem protecting parameter unauthorized transmission nothing particular say case may desirable guarantee protected subsystem invoked another remember later divulge value input parameter problem appears difficult solve purely technical way considered thesis page operating system security status quo operating system vms unix do window etc nt effectively address safe invocation problem program invoked inherits privilege invoker assumption every program user run absolutely trustworthy safe invocation could implemented version unix would require heavy machinery one way would privileged program invokes given program privilege specially unprivileged user program standard created ordinary user different implementation would network server dedicated purpose result would strangely limited awkward use file descriptor could nt passed interrupt might act strangely etc unix facility whereby program owner mark program way program invoked run program owner privilege instead invoker except argument sound similar safe invocation procedure one read fine print point program obtain invoker privilege simply setuid system call common operating system distinguish persistent object file volatile object unix file descriptor open system call coerces persistent object volatile one persistent object global name volatile object short numeric index interpreted locally running program scoping make resemble procedure successor link volatile object passed one program process another invokes way many operating system design support secure program invocation way similar describe design nt deployed remarkable get without secure cooperation people use program place high level trust people write program basic reason high level trust computer system isolated one another without communication theft since stolen good must communicated back thief harm arises either vandalism accident vandalism eg current epidemic computer virus sophisticated enough untraceable difficult carry little payoff perpetrator really harmful accident commercial software product accidentally era disk mercifully rare future work section point various shortcoming scheme attempt suggest way fixing one dream driving work extend scheme cover operating system service including device driver point possible dispense host operating system run scheme standalone workstation mobile robot preemption mean preempt running process necessary operating system agent invoking unknown object run risk invocation nonterminating therefore agent must way request invocation halted condition receipt special input outside processor abort key button passage predetermined amount time preemption also desirable necessary together support firstclass continuation coroutines sufficient constructing scheduler simulates multiple hardware processing element software one particularly elegant design timed preemption facility mechanism known engine dybvig hieb published general implementation engine abstract timed preemption providing way run computation specified amount time sufficient construct usermode task scheduler dybvig hieb engine implementation two problem system caller callee mutually suspicious response time sensitive engine nesting depth thus malevolent callee could pile deeply nested sequence engine making response outer engine priority arbitrarily sluggish design given specifying engine interact wait interrupt associated concurrent activity io problem solved believe engine serve well part scheme support multitasking scheduler via thread system thread inferior engine several way thread le secure engine since one share processor proportional many thread want take processor need create lot thread scheme thread give reliable way monitor execution time supervised untrusted computation since computation spawn new thread way limit even monitor amount processor time allocated thread since thread system nt keep track processor time used per thread continuation firstclass continuation troublesome caller callee mutually untrusting scheme callwithcurrentcontinuation operator callee obtain continuation invoke twice unwary caller continuation code performs side effect vulnerable side effect happen twice may unexpected undesired must code invokes untrusted object prepared possibility deal contingency requires code similar following let returned newcell cellset returned f let result untrusted arg cellref returned error nt expect begin cellset returned sideeffecttobedoneonlyonce unwillingly retained continuation also undesirable resource allocation standpoint since continuation creator might penalized tying resource space consumed continuation machine program supporting execution compilergenerated machine code program important two reason would vastly improve performance relative scheme current bytecode interpreter using existing compiler scheme could made run useful program written variety language pascal c main difficulty supporting machine program ensuring kernel security policy followed machine program must obtain access resource nt access could easily happen since machine program construct arbitrary address attempt dereference even construct arbitrary machine code sequence jump object us memory machine program address space accessible via sequence machine instruction risk several approach eliminating risk associated machine program limitation switch limited hardwareprovided user mode invoking machine program approach used operating system user mode memory belonging program protected access hardware io permitted instruction alter memory protection register disabled protected environment thus established instruction either permitted actively prohibited verification trusted program scan machine program make sure nt anything nt unverified program rejected sandboxing similar verification except extra code inserted around troublesome instruction dynamically ensure security policy respected program may still rejected fewer would verification trusted compilation program generated compiler may respect security policy construction trust compiler trust output type array bound safety many compiler many scheme pascal compiler sufficient guarantee kernel security policy respected compiler may used without change limitation may option one little influence compiler program compiled example c program use pointer way difficult guarantee safe verification sandboxing c compiler generate object code check validity pointer limitation avoided transfer user mode expensive many hardware architecture hand program control transfer program use memory protection hardware may efficient way detect invalid pointer array index implement kernel security policy important part implementation machine program support interface machine program kernel machine program perform kernel operation creating invoking procedure operand generally object reference specified answered differently depending extent machine program trusted machine program trusted object reference represented pointer data structure representing object kernel operation implemented either subroutine call eg object creation accomplished call allocation routine code sequence occurring directly program eg invocation procedure might compiled similarly local procedure call machine program untrusted transfer control outside program must generally accomplished trap system call hardware architecture support general call across protection domain object reference must amenable validation use since program may present arbitrary bit pattern putative object reference method used operating system similar circumstance associate activation untrusted machine program table mapping small integer index object unix index known file descriptor program present index kernel interprets specifying object position table validation consists simple range check determine index within table alternatively object may given unique name perhaps address memory name used untrusted machine program program present name kernel operation kernel validates name determining whether occurs object table specific program activation approach similar capabilitybased approach protection kernel little reason prefer smallindex approach since table search unique name maintenance likely complicated inefficient relative use index determined program compiled installed reflection reflection reasoning self computing system concept reflection comprehends examining internal structure object continuation purpose debugging analysis optimization reflection interacts security issue way knowledge researched much le resolved example scheme debugger access special reflective operator break protection boundary examine internals procedure record continuation useful unfortunately debugger egregiously insecure since allows user access value transitively accessible accessible object easy enough achieve security scheme disabling debugger better solution would kernel provide simple safe way examine continuation procedure unprivileged debugger could built believe done way user able see ought entitled see nothing else particular user able see information exists object representation long information might available included extra debugging hook program issue persistence support needed keeping object secondary storage efficiently guarantee object necessarily survive crash currently scheme relies external file system store information persistently integrated internal protection system beyond fact access file system whole limited quota limit imposed amount memory agent allowed use without malevolent buggy program consume available space making system unuseable memory limitation difficult execution time limitation allowed space decrease memory allocated must increase memory reclaimed garbage collection object must associated account credited object reclaimed could done either putting extra field object indicating account maintaining distinct region memory different account latter reminiscent multistage garbage collection could perhaps unified accountability something go wrong nice know responsible exactly went wrong responsibility difficult assign cooperative enterprise particular something go wrong one agent invokes another agent program responsible server receives request client server client responsible ensuring request reasonable safe one revocation way scheme revoke access object object simulating revokable link could defined using cell obvious would sufficient one would decide giving access object time one would want revoke link might precisely time one nt anticipate one would want distribution network encapsulated object lends distribution network computer system one major component distributed operating system missing remote invocation mechanism classically called rpc remote procedure call mechanism following property object passed argument returned result requires automatic creation stub delegate object forward call network call properly tail recursive call node node b b make call node c specifying result sent b exception distributed transparently exception one machine find correct exception handler even another machine alan bawden described implemented something relevant phd thesis contribution success scheme show spare security kernel provide flexible solid security without becoming difficult use program simpler security kernel much complexity operating system kernel arises performance concern yet address rational comparison difficult difficult see could smaller since service provides shown necessary program object creation invocation object marking authentication primitive access io device minimalist scheme community believe procedure perhaps together primitive data type symbol cell serve basis construction useful programming construct hope discussion authentication abstract data type section seen refute position show need builtin authentication mechanism minimal programming language ease trojan horse virus may infiltrate computer system appalling extent user must blindly trust software provided vendor hope contributed bit currently unpopular cause principled solution security problem hope document help break artificial distinction programming language operating system progress area hindered failure recognize concern fundamentally needed operating system provide service useful language language give convenient access operating system service acknowledgement report extracted dissertation complete acknowledgement section reproduced joseph weizenbaum generously allowing use office long final stretch gerry sussman bruce donald cornell gregor kiczales xerox parc moral financial support guidance idea hal abelson tom knight serving committee richard kelsey hard work heroic deed helped bring scheme life norman adam clinger productive collaboration alan bawden david espinosa dave gifford philip greenspun ian horswill kleanthes koniaris dave mcallester jim otoole brian reistad bill rozas mark sheldon olin shiver franklyn turbak many others tech square making life mit tolerable interesting even amusing russell brown jim jennings daniela ru others cornell computer science robotics vision laboratory good humor courageous robotry kathleen akins mike dixon john lamping brian smith others xerox parc creating environment peculiar idea flourish butler lampson dazzlingly clear explanation hal abelson oakley hoerth frans kaashoek tom knight mark sheldon olin shiver gerry sussman franklyn turbak comment suggestion draft document marilyn pierce making administrative nightmare go away rebecca bisbee making everything work albert meyer urging expedience tom collett giving reason finish laura burn katy heine kris jacobson geoff linburn generosity emotional support strange time arpa nsf grant project employed others numerous mention finally oakley hoerth diverse array model arthropod glowinthedark cicada windup beetle popup puppet ant cricket sticker many others reference norman adam iv jonathan rees objectoriented programming scheme proceeding acm conference lisp functional programming page gul agha actor model concurrent computation distributed system mit press cambridge david b albert issue muse security manuscript alan bawden linear graph reduction confronting cost naming phd thesis mit nathaniel borenstein marshall rose mime extension mailenabled application applicationsafetcl multipartenabledmail working draft internet ftp ftpfvcompubcodeothersafetcltar william clinger jonathan rees macro work proceeding eighteenth annual acm symposium principle programming language page january william clinger jonathan rees editor report algorithmic language scheme lisp pointer iv july september pavel curtis lambdamoo programmer manual lambdamoo version xerox corp ftp parcftpxeroxcompubmooprogrammersmanualtxt r kent dybvig robert hieb engine continuation computer language adele goldberg david robson language implementation addisonwesley christopher p haynes daniel p friedman engine build process abstraction conference record acm symposium lisp functional programming page ieee std ieee standard scheme programming language institute electrical electronic engineer inc new york ny richard kelsey jonathan rees tractable scheme implementation lisp symbolic computation appear butler w lampson note confinement problem cacm henry levy capabilitybased computer system bedford digital press robin milner mads tofte robert harper definition standard ml mit press david moon genus retrospective international workshop objectoriented operating system james h morris jr protection programming language cacm jonathan rees another module system scheme ftp march jonathan rees june meeting lisp pointer v october december jonathan rees security kernel based lambdacalculus phd dissertation mit jonathan rees norman adam dialect lisp lambda ultimate software tool conference record acm symposium lisp functional programming page jonathan rees bruce donald program mobile robot scheme proceeding ieee international conference robotics automation page r l rivest shamir l adleman method obtaining digital signature publickey cryptosystems communication acm feb guillermo j rozas transluscent procedure abstraction without opacity phd thesis mit may jerome h saltzer schroeder protection information computer system proceeding ieee michael schroeder cooperation mutually suspicious subsystem computer utility phd thesis mit project mac brian c smith reflection semantics lisp proceeding eleventh annual acm symposium principle programming language page salt lake city january guy lewis steele jr gerald jay sussman lambda ultimate imperative mit ai memo robert strandh oooz multiuser programming environment based scheme bigre bulletin irisa campus de beaulieu rennex cedex france july gerald jay sussman guy lewis steele jr scheme interpreter extended lambda calculus mit ai memo swinehart et al cedar toplas robert wahbe steven lucco thomas e anderson susan l graham efficient softwarebased fault isolation proceeding fourteenth acm symposium operating system principle page december william wulf roy levin samuel p harbison hydracmmp experimental computer system mcgrawhill footnote name chosen mnemonic cuteness value unfortunately object become loaded term computer science many people implies complicated phenomenon method class inheritance nt mean suggest baggage may best take undefined term point geometry simplicity assumed concurrency issue multiprocessing multitasking system access repository cell would serialized inelegant aspect design two distinct encapsulation mechanism procedure capsule various way remedy example instead introducing capsule separate kind object lambda application could extended take unique marker requirement procedure marker must match marker specified application procedure lambda marker var body applicate marker procedure arg number unification proposed
242,Lobsters,osdev,OS,Debian GNU/Hurd 2019 released,https://lists.debian.org/debian-hurd/2019/07/msg00001.html,debian gnuhurd released,debian gnuhurd released http http wwwdebianorgportshurdhurdinstall http wwwdebianorgportshurdhurdinstall http wwwgnuorgsoftwarehurdfaqhtml http darnassussceennethurdwebfaq http wwwgnuorgsoftwarehurdhurddocumentationtranslatorprimerhtml http wwwgnuorgsoftwarehurdhistoryhtml http wwwgnuorgsoftwarehurdcontributinghtml reply,debian gnuhurd released huge pleasure debian gnuhurd team announces release debian gnuhurd snapshot debian sid time stable debian stretch release july mostly based source official debian release official debian gnuhurd port release installation iso image downloaded cdimage http usual three debian flavor netinst cd dvd besides friendly debian installer preinstalled disk image also available making even easier try debian gnuhurd easiest way run inside vm qemu http wwwdebianorgportshurdhurdinstall debian gnuhurd currently available architecture debian archive come acpi translator available currently used shut system lwip tcpip stack available option pci arbiter introduced useful properly manage pci access well provide finegrain hardware access support llvm introduced lwip tcpip stack available option new optimisation include protected payload better paging management message dispatch gsync synchronization please make sure read configuration information http wwwdebianorgportshurdhurdinstall faq http wwwgnuorgsoftwarehurdfaqhtml latest version http darnassussceennethurdwebfaq translator primer http wwwgnuorgsoftwarehurdhurddocumentationtranslatorprimerhtml get grasp great feature gnuhurd would like thank people worked gnuhurd http wwwgnuorgsoftwarehurdhistoryhtml past many people given time still many people today please join http wwwgnuorgsoftwarehurdcontributinghtml end lot people contributed one way thanks everybody reply
243,Lobsters,osdev,OS,Systems easily understandable by one person,https://medium.com/@kori/systems-easily-understandable-by-one-person-f92e8613e2e,system easily understandable one person,system easily understandable one person project empyrean least two year understandable xlambda enter empyrean linux crux sabotage stali morpheus scheme openbsd old le lilo repo minimalism good enough descriptor goal,system easily understandable one personthat good way word mission statement project empyreanbut project empyrean want wanted make operating system least two year something small portable reproducible discoverable understandablei think quite year line ever acquire skill time dedication make full operating system hold principle held start somewhere xlambda empyrean lofty goal looking like real possibility whereas two year ago skill knowledge get started likely time around get ball rollingenter empyrean linuxin short get started want make small understandable linux distro along line crux sabotage stali morpheus similar project also want distro strong distinction base system package like one bsds much easier guarantee stable boot every timewhat different time around also want make entirety base system configurable scheme like guixsd without many feature extension complexity think guixsd wonderful project really love idea functional package management unbreakable system interest currently situated making small system think guixsd small enough purposesi want distro line openbsd year old le also great tagline course claim better thing want empyrean alternative serve learning experiment much anything else hope much learning experiment becomes project wished year nowto get started forking crux say forking first iteration empyrean much like ship theseus retrace step three year ago already done already forked program interested trimmingextending might yet knowledge exactly want know want working towards learning missing hope people know find idea interesting join among forked dracut lilo think able change dracut fit empyrean purpose sure lilo help appreciatedi created repo port interested putting base system want bcachefs available quite like premise stability first also ported dracut lilly import required package crux core repo sometime week want import package think would better fit outside base systemnext week want get started making easy install process want work documentation want empyrean extensive documentation use software certain decision taken roadmap look like part developed forwith system minimalism good enough descriptor goalto finish post thought phrase system easily understandable one person better describe headed trying think minimalism sake minimalism good idea nice standinlike ted unangst said old le
244,Lobsters,osdev,OS,Why did moving the mouse cursor cause Windows 95 to run more quickly?,https://retrocomputing.stackexchange.com/questions/11533/why-did-moving-the-mouse-cursor-cause-windows-95-to-run-more-quickly,moving mouse cursor cause window run quickly,,nt window window well even though work differently answer talk preemptive multitasking let first clarify window using cooperative multitasking app would release cpu apps use window us preemptive multitasking app allocated time slice answer linked graphic interface work window graphical app loop called message pump every event mouse moved window got resized etc pushed queue app responsible check message waiting yes pull process moment window switching apps since single point apps going nt apply window really happens o need process message loop want update something background like task display update etc set timer timer would put message queue regular interval better way thing window developer took time transition window many apps structured since main mechanism rely message loop background operation done timer message moving mouse would trigger lot message move app priority wake app get app process background task message without moving mouse timer message would read rather slow interval famous app disk defragmenter operation would wait message update graphic interface shaking mouse would speed defrag
245,Lobsters,osdev,OS,What do you think about ReactOS?,https://www.quora.com/What-do-you-think-about-ReactOS,think reactos,,please enable javascript refresh page continue
246,Lobsters,osdev,OS,It’s Time for a Modern Synthesis Kernel,https://blog.regehr.org/archives/1676,time modern synthesis kernel,alexia massalin phd thesis runtime code generation ring post old paper nice writeup code generator requirement hard use jit mode example specializing write linux instruction silly program ksyswrite code tiny bit magical fcheckfiles discussion mirage many paper one benefiting o code much kind code,alexia massalin phd thesis long one favorite promotes view operating system much efficient thencurrent operating system via runtime code generation lockfree synchronization finegrained scheduling piece look runtime code generation cleanly separated aspect work runtime code generation ring promise kernelmode runtime code generation fast featurerich operating system example including code implementing generic read write system call rather synthesizing code operation time file opened idea file open time o lot information use generate highly specialized code eliding code path provably going execute runtime code generation wellknown idea used nearly widely today course justintime compiler ubiquitous however operating system kernel still use runtime code generation much exception several o kernel including linux simple jit compiler bpf implementation vmware used use dynamic code generation performantly virtualize o kernel chip lacked hardware virtualization extension doubt commonly used longer prent window kernel would dynamically generate bitblit code learned talk vmware employee code generation apparently debugging issue vmware since would fight runtime code generator detail found post old paper origin technique xerox alto classic templeos explained nice writeup made heavy use dynamic code generation anyway back synthesis o code generator written scratch assembly language translate massalin idea likely reusing existing code generator o piece assume want also briefly touch customized alternative code generator requirement particular technology use runtime code generation important let imagine using llvm mean piece kernel wish specialize need shipped bitcode ask llvm turn object code needed llvm lot great optimization pass could pick useful subset hard use jit mode hand llvm fast like also large footprint production need think carefully whether wanted include big chunk nonhardened code kernel optimization expecting code generator perform mostly basic one function inlining constant propagation dead code elimination followed highquality instruction selection register allocation hard part going see convincing llvm ok perform optimization aggressively want issue massalin need confront kernel designed way knew exactly could specialized linux hand obviously created staged compilation mind going improvise somewhat want work well guess llvm would great prototyping purpose deployment probably end either reusing lighterweight code generator else creating new one smaller faster suitable inclusion o performance runtime code generation throughput issue also latency problem careful need think impact security example specializing write linux let assume created version linux capable generating specialized version write system call pipe o need discus system call dispatch mechanism rapidly call specialized code available synthesis done giving process trap vector dive code let clear pretending code generator invoked create specialized write method probably done lazily time system call first invoked using new file descriptor specialized code viewed cached computation bonus cache selfinvalidating valid long file descriptor valid later see better job specializing kernel support explicit invalidation runtimegenerated code want follow along home running linux qemu using instruction singlestep kernel code driving pipe logic using silly program skipping trap handler ksyswrite thing start happen real ssizet ksyswrite unsigned int fd const char user buf sizet count struct fd f fdgetpos fd ssizet ret ebadf ffile lofft po fileposread ffile ret vfswrite ffile buf count po ret fileposwrite ffile po fdputpos f return ret point fd parameter treated compiletime constant course buf count turn fd constant llvm able propagate remaining code long inline function call nobody take address fd call pointer always block optimizer complicate thing bringing interprocedural analysis pointer analysis picture goal going see whether code generator infer content struct returned fdgetpos might wonder performancesensitive code returning struct fd value turn struct two member pointer integer call fdgetpos go code static inline struct fd fdgetpos int fd return tofd fdgetpos fd unsigned long fdgetpos unsigned int fd unsigned long v fdget fd struct file file struct file v file file fmode fmodeatomicpos filecount file v fdputposunlock mutexlock file fposlock return v via trivial helper showing static unsigned long fgetlight unsigned int fd fmodet mask struct filesstruct file current file struct file file atomicread file count file fcheckfiles file fd file unlikely file fmode mask return return unsigned long file else file fget fd mask file return return fdputfput unsigned long file keep mind seen optimization blocker fdgetlight run first interesting challenge current macro return pointer running process pcb linux pcb process control block taskstruct continue using generic term current macro end tiny bit magical end result treated constant within context given process way code generator like llvm able reach conclusion need give help perhaps annotating certain function macro struct field returning value constant given scope displeasing clear easier better way achieve goal best hope annotation burden close proportional number data type kernel end proportional total amount code engineering effort go way assuming treat current compiletime constant immediately faced similar question file field pcb constant process initialized going easy way code generator figure need rely another annotation continuing count field file definitely constant reference count process file descriptor table singlethreaded linux process never see count multithreaded process need make distinction open file instance shared following fork file descriptor table fast path exploiting insight process singlethreaded need worry locking file descriptor table moreover process going stop singlethreaded period rely invariant trust currently running code wrong thing specializing compiler fun policy choice make specialize single threaded case streamline code bit requires generated code invalidated later process end becoming multithreaded need collection invalidation hook make happen anyhow let continue fcheckfiles static inline struct file fcheckfiles struct filesstruct file unsigned int fd struct fdtable fdt rcudereferenceraw file fdt fd fdt maxfds fd arrayindexnospec fd fdt maxfds return rcudereferenceraw fdt fd fd return null point deep know rcu territory going assume figure way code generator want infer function return compiletimeconstant value think work practice since even open file instance shared across process file truly closed reference count go zero anyway let move forward next back fgetlight fdgetpos code generator able easily fold away remaining branch function finally return line ksyswrite know struct fd contains making possible continue specializing aggressively think making example longer helpful hopefully character problem trying solve apparent summary saw four kind variable exercise fd parameter write code generator see constant code generation time current pointer constant code generator see fact one reason another specialize give compiler extra information example using annotation count field filesstruct actually constant seem likely enough remain constant may want create specialized version treating constant ready invalidate code situation change almost certainly worth trying specialize example count parameter write likely remain constant number call writing one byte pipe singlethreaded process executes instruction linux ksyswrite measure trapping untrapping code synthesis thesis promise order magnitude performance improvement specialization reduce fast path system call instruction would fun find finish example observing even though chose present code filesystem think network stack code benefit specialization discussion experience o kernel linux belief attempting dynamically specialize mainstream productiongrade o linux would run issue saw level code generator care much effective difference os big giant blob c plentiful indirection domainspecific hack goal create researchgrade prototype would better start something smaller linuxwindowsdarwin refactor specializationunfriendly part o reasonable amount time extreme super easy hack incredibly oversimplified could used test hypothesis realistic o made much faster using specialization hilariously system would o code compiler code perhaps middle ground would better choice minix openbsd whatever given two developer one know llvm jit interface one good linux kernel hacker long would take bring minimally ambitious dynamically specializing version linux would guess could done week two really anything difficult easy say blogging course problem would give good result easiest specialization opportunity get spotted runtime code generator perhaps would generate enough interest people would keep building want specialization work c code really every one productiongrade kernel already written fun engineeringintensive alternative would create new specializationfriendly kernel whatever programming language look suitable functional language offer real advantage course issue using language create performant o kernel perhaps mirage good starting point already specialization system build time runtime ideal programming environment modern synthesis kernel would provide tool andor language support engineering specializationfriendly kernel code example would identify potential specialization point tool would use old friend static analysis dynamic analysis symbolic execution etc show u data item fall four category listed last section provide u help refactoring system specialization work better tricky thing taking account different kind concurrency synchronization happen sophisticated o useful question ask course always asking thing o compiler research supposed think dynamically specializing o kernel new abstraction specialization could really benefit sort firstclass code region value effectively constant also constantness invalidated set event literature dynamic specialization o code interesting look like flurry interest inspired synthesis midlate many paper calton pu massalin thesis supervisor author list whole lot happened area since far know paper think optimistic o specialization one nice paper recommend static o specialization hand unikernels quite bit work done seems like time revive interest dynamic o specialization processor speed win lately application specific core execute o code getting noticeably faster year seem likely fact way back john ousterhout argued increase processor speed benefiting o code much kind code os slowed recently mitigate side channel attack maybe get speed back using dynamic specialization os way bloatier increasing potential benefit due specialization compiler technology far ahead offtheshelf toolkits like llvm providing highquality solution many problem run prototyping work like thank perry metzger suggested piece also provided feedback draft perry worked alexia back day hopefully also write topic finally want give impression summarizing research proposal inprogress project kind thing love think
247,Lobsters,osdev,OS,Install Haiku on a Core Duo 2006 MacBook Pro (17-inch),https://tinyapps.org/docs/haiku/,install haiku core duo macbook pro,tinyappsorg doc install haiku core duo macbook pro download press key,tinyappsorg doc install haiku core duo macbook pro download version burn dvd boot macbook pro dvd press key haiku splash screen appears welcome screen click run installer continue set partition click internal disk eg disk initialize intel partition map continue write change ok click new line immediately partition create check active partition create write change partition format file system continue initialize write change ok close drivesetup back installer select new haiku partition next onto click begin start installation installation completes click tool set boot menu click internal drive install next next next set timeout desired next next write boot menu done close installer window restart system far performant graphical o hardware note created
248,Lobsters,osdev,OS,Serenity C++ patterns: NetworkOrdered,https://awesomekling.github.io/Serenity-C++-patterns-NetworkOrdered/,serenity c pattern networkordered,serenity operating system tcp png tcp,post describes c networkordered template used simplify working network packet structure serenity operating system familiar c network programming already know htonl ntohl function family used converting value network order host order network order really mean big endian big endian machine function noops little endian machine targeted serenity perform byteorder swap called network order packet format protocol like tcp store numeric value bigendian format also used file format png image format forgetting call ntohl single place easily lead hardtodiagnose problem also help value change byteswapped might even seeing effect missing byteswap yet serenity fashioned simple c template help avoid problem like called networkordered use networkordered dword foo foo foo store internally dword bar foo bar dword baz foo baz incredibly useful defining thing like tcp packet header following member class gnu packed tcppacket networkordered word msourceport networkordered word mdestinationport networkordered dword msequencenumber networkordered dword macknumber networkordered word mflagsanddataoffset networkordered word mwindowsize networkordered word mchecksum networkordered word murgent serenity kernel work raw network buffer lot allows u cast buffer pointer tcppacket use variable computation without worrying byte order template work template typename inline swapbytesifneeded value byteorder littleendian constexpr sizeof return value constexpr sizeof return value constexpr sizeof return value constexpr sizeof return value else return value endif template typename class gnu packed networkordered public networkordered networkordered const hostvalue mnetworkvalue swapbytesifneeded hostvalue operator const return swapbytesifneeded mnetworkvalue private mnetworkvalue dead simple right note gnu packed required prevent warning embedding unpacked nonpod field packed structs next time
249,Lobsters,osdev,OS,Unmodified Device Driver Reuse and Improved System Dependability via Virtual Machines (2004),https://www.usenix.org/legacy/events/osdi04/tech/full_papers/levasseur/levasseur.pdf,unmodified device driver reuse improved system dependability via virtual machine,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream
250,Lobsters,osdev,OS,Fuchsia: Documentation for developing for the open source operating system,https://fuchsia.dev/,fuchsia documentation developing open source operating system,fuchsia project,fuchsia project documentation developing fuchsia new opensource operating system
251,Lobsters,osdev,OS,A libc in LLVM,https://lists.llvm.org/pipermail/llvm-dev/2019-June/133269.html,libc llvm,llvmdev libc llvm llvmdev listsllvmorg http information llvmdev mailing list,llvmdev libc llvm siva chandra via llvmdev llvmdev listsllvmorg mon jun pdt hello llvm developer within google growing range need existing libc implementation nt quite address pushing u start working new libc implementation informal conversation others within llvm community told u libc llvm actually broader need increasingly consolidating toolchains around llvm hence wanted see llvm project would interested u developing upstream part project clear nt expect need exactly match everyone else part impetus simplify thing wherever may quite match others want libc said believe effort still directly beneficial usable broader llvm community may serve starting point others community flesh increasingly complete set libc functionality still early stage highlevel goal guiding principle initial scope interested pursuing project mesh library philosophy llvm project even though c standard library nominally library implementation practice quite monolithic libc support static nonpie staticpie linking mean providing crt c runtime pie loader static nonpie staticpie linked executables specification follow scope need includes c standard library posix addition necessary systemspecific extension mean follow entire specification part simply nt worth implementing part safely used modern coding practice vendor extension must considered carefully admitted necessary similar clang libc seem inevitable need provide level compatibility vendor extension project exemplar developing llvm tooling two example fuzz testing start sanitizersupported testing also area intend invest point implement dynamic loading linking support support architecture start simplicity area community course free contribute hope preserving library design philosophy make extension easy allow retaining simplicity feature nt needed intend build new libc gradual manner begin new libc layer sitting application system libc eventually implementation sufficiently complete able replace system libc least use case context think incorporating new libc llvm project thank siva chandra rest google llvm contributor next part html attachment scrubbed url http information llvmdev mailing list
252,Lobsters,osdev,OS,RSoC: Implementing ptrace for Redox OS - part 0,https://www.redox-os.org/news/rsoc-ptrace-0/,rsoc implementing ptrace redox o part,introduction one use rine r n e put redox rfc proc f,friday june poor man table content introduction got selected rsoc second time row year discussed project would suitable work suggested something let run linux program redox set mind longterm goal see getting second instead working ptrace system call redox syscall user mode linux us emulate linux application also gdb us set breakpoints well strace list system call think meta system call honour get implement able see aid goal set progress none yes right almost week zero physical progress learned lot part intend forward onto later document lack real progress way intentional compiling redox ended taking forever nowadays build modified rust compiler along build ever tried contributing rust packaged favorite distribution know loooong compilation long story short compiling thing different property day week contact leader jeremy soller asking assistance encountered issue could luckily offer expert advice compiling one right writing one use ptrace ptrace beautiful way run binary system setting breakpoints stop program inspection breakpoints work like gdb breakpoints program pause let inspect variable function assembly raw register memory rine us breakpoints stop every system call translate redox one linux one precisely rine emulator rather system call translator reason fast note standard wine use ptrace translating window binary different linux binary ptrace one override register system call including overriding register hold system call number usually rax argument let start simple example written libc crate rust run program exit every time decide write data stderr earth would want program might ask think probably instead ask earth create new child process going intercept system call use std io error result mem ptr ptrace libc specify pointer type inputted thus want easy constant us old type since set null anyway example empty tuple type const null mut ptr nullmut nice macro return result err io error failure provided hardly related ptrace macrorules fn main result match unsafe libc fork child pid parent new pid run fn child result unsafe attach parent process debug child process libc ptrace libc ptracetraceme libc pidt null null pause execution raising sigstop restarted parent libc raise libc sigstop instead writing program want override nt useful use execve syscall execute external application demonstration purpose println hello test println question using stderr really terminate program println would pretty sad println let try eprintln please let println well fsck ok todo struct parent create highlevel overview want struct parent pid libc pidt impl parent fn new pid libc pidt self self pid fn run self result wait initial raise sigstop selfwait loop match selfstep err ref err errrawoserror libc esrch println uncaught child termination break ok status println child terminated error code status break ok fn step self result option libc cint presyscall selfnextsyscall set breakpoint let status selfwait wait next sigstop signal return ok status return program exited let mut regs selfgetregs get assembly register regsorigrax regsrdi check syscall write first argument stderr file stderr regsorigrax regsrdi selfsetregs regs override syscall params exit exit status postsyscall selfnextsyscall let status selfwait return ok status ok none todo fill actual lowlevel bit fn wait self result option libc cint unsafe let mut status libc waitpid selfpid mut status wifexited return true program closed see man waitpid libc wifexited status ok libc wexitstatus status else ok none fn nextsyscall self result unsafe see man ptrace libc ptrace libc ptracesyscall selfpid null null ok fn getregs self result libc userregsstruct unsafe mem uninitialized mem zeroed safe since struct contains integer reference enums slice etc pretty struct contains default implementation sadly let mut regs libc userregsstruct mem uninitialized libc ptrace libc ptracegetregs selfpid null mut regs mut ok regs fn setregs self regs libc userregsstruct result unsafe libc ptrace libc ptracesetregs selfpid null regs const ok final code viewed run program indeed exit try write stderr demonstrated cargo run finished dev unoptimized debuginfo target running targetdebugptracetest hello test question using stderr really terminate program would pretty sad let try child terminated error code put redox created rfc talk design ptrace redox thanks planned api combine ptrace proc f still unresolved question however advice go read suggest answer example kind security put place apart existing namespacing possibility plan thing work hood studied kernel code recompiling try plan implementing hopefully next week something showcase apologize delay
253,Lobsters,osdev,OS,Mimalloc: Free List Sharding in Action,https://www.microsoft.com/en-us/research/publication/mimalloc-free-list-sharding-in-action/,mimalloc free list sharding action,,modern memory allocator balance many simultaneous demand including performance security presence concurrency applicationspecific demand depending context use one increasing usecase allocator backend implementation language swift python use reference counting automatically deallocate object present mimalloc memory allocator effectively balance demand show significant performance advantage existing allocator tailored support language rely memory allocator backend reference counting mimalloc combine several innovation achieve result first us three pagelocal sharded free list increase locality avoid contention support highlytuned allocate free fast path free list also support temporal cadence allows allocator predictably leave fast path regular maintenance task supporting deferred freeing handling free nonlocal thread etc influenced allocation workload referencecounted lean koka programming language show mimalloc superior performance modern commercial memory allocator including tcmalloc jemalloc speed improvement respectively redis consistently performs wide range sequential concurrent benchmark allocator tailored provide efficient runtime referencecounting language reduce implementation burden developer encourage creation innovative new language design
254,Lobsters,osdev,OS,OPS - Easily Build and Run Unikernels,https://ops.city/,ops easily build run unikernels,,ops load p f n hijs var http require http httpcreateserver function req re reswritehead contenttype textplain resend hello worldn listen consolelog server running http
255,Lobsters,osdev,OS,"Omega: flexible, scalable schedulers for large compute clusters",https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41684.pdf,omega flexible scalable scheduler large compute cluster,,ğôåø obj pgfprgb pattern devicergb endobj obj length filter flatedecode stream v æ ç u ş ˆ g al ù uotuk şi îøˆ õútş ööx ëwâ buä ş ëû ó az yçm eì àgéóæ škjúğo í áh ùf š ó ü äù œgi g hœû ùò kn œğla aˆû zb iãà üuh fä á sl p ïßñû thy ó f ïcèr ôî uæ tn
256,Lobsters,osdev,OS,"Battle testing data integrity verification with ZFS, Btrfs and mdadm+dm-integrity",http://www.unixsheikh.com/articles/battle-testing-data-integrity-verification-with-zfs-btrfs-and-mdadm-dm-integrity.html,battle testing data integrity verification zfs btrfs mdadmdmintegrity,battle testing data integrity verification zfs btrfs mdadmdmintegrity table content introduction data integrity bit rot open source btrfs source code commit log seagate barracude dmintegrity myth misunderstanding myth zfs requires ton memory myth red hat removed btrfs consider useless hacker news myth zfs btrfs requires ecc memory myth restoring put stress drive myth using usb disk device zfs btrfs okay parent transid verify failed error myth btrfs still write hole issue completely useless information update myth btrfs abandoned significant effiency gain myth mdadmxyz replace zfs btrfs advice zfs raidz zfs power outage transactional semantics zfs drive failure scrub zfs drive failure file transfer smart zfs data corruption file transfer never publicly documented zfs dd mistake zfs second drive failure replacement btrfs btrfs wiki lzo btrfs wiki status btrfs power outage btrfs drive failure btrfs drive failure file transfer btrfs data corruption file transfer btrfs dd mistake btrfs write hole issue write hole btrfs second drive failure replacement mdadmdmintegrity update end mdadmdmintegrity section dmintegrity correct stripe width stride mdadm power outage mdadm drive failure mdadm drive failure file transfer mdadm data corruption file transfer update dmintegrity documentation mdadm dd mistake update bad block controversy correct test mdadmdmintegrity final note copyonwrite light year ahead btrfs debian linux wiki example opensuse synology openzfs zfs linux new bug issue update patreon relevant reading,battle testing data integrity verification zfs btrfs mdadmdmintegrityposted last updated article share result homelab experiment threw different problem zfs btrfs mdadmdmintegrity setup table content introduction let start saying simple write nt originally intended anything personal note decided share test course week tried consistent repeated many test document everything result similar main interest see different system would handle multiple breakdown situation setup also tested mirror setup due length article later decided include used word pool world zfs btrfs whenever dealing array please forgive short coming missing part mistake attempt make write also english native language subject whenever use kind precautionary measure data corruption backup andor filesystem data integrity verification need test setup least simulated failure implement solution never battle test solution real idea going handle breakdown need ask question like system break right adequate measure place lose important data backup place backup suffice recent enough secure enough backup solution break restoration need multiple backup solution bit rot need running data integrity verification need backup everything perhaps split data important nonimportant category need automate procedure tested solution tested solution tested solution yes really need test solution throughly case zfs btrfs amazing open source data integrity verification filesystems experience using zfs last time tested btrfs performing well file transfer slow situation occur lost file however long time ago since looked btrfs source code commit log btrfs received many fix improvement especially last couple year therefore decided put simple hometest environment bare metal throw simulated problem zfs btrfs try deal problem asidenticalaspossible manner system later added mdadmdmintegrity managed get long system using respective man page even though think btrfs documentation could benefit lot using example used old cheap hardware suitable homelab computer used sataii connector decided use one boot device used rest raidz zfs three hard drive could booted usb stick used four drive wanted speed installation time boot time requires physical drive store parity block distributed across disk event failed disk parity block used reconstruct data replacement disk withstand loss one disk know people frown upon really great way utilize speed space case kind raid setup replacement proper backup data important always back picture setup two identical computer main testing always used machine hardware extensive repeated testing put second machine work computer equipped intel core duo cpu ghz cpu gb memory intel pro pt pcie gigabit nic hard drive really amazing old tb seagate barracude drive latest firmware quite lot beating year believe ten drive remember correctly one drive failed year ago rest still going strong zfs ran debian linux stretch kernel version zfsdkms version backports btrfs ran arch linux kernel version btrfs version zfs btrfs used samba experience samba performs better nfs even linuxonly machine even though nfs us le resource prefer samba various reason point testing btrfs discovered dmintegrity therefore decided setup mdadmdmintegrity arch linux installation repeat test process sometimes jumped back forth different test different system example first tested zfs repeated test btrfs began testing mdadmdmintegrity went back performed test zfs btrfs etc article therefor put together various test date time different terminal output nt always match also sometimes changed disk setup disk id occasionally change please ignore myth misunderstanding one thing really bother much false information exists internet regarding zfs btrfs misinformation spread due inexperience wrong expectation andor misunderstanding usage system let get myth misunderstanding way myth zfs requires ton memory one biggest misunderstanding zfs situation zfs requires lot memory specifically use deduplication run zfs successfully using freebsd raspberry pi two tb usb disk attached single usb hub zfs never used half memory available kind procedure change setting even run much le myth red hat removed btrfs consider useless red hat removed btrfs former red hat developer explains situation hacker news myth zfs btrfs requires ecc memory zfs btrfs without ecc memory worse file system without ecc memory using ecc memory recommended situation strongest data integrity guarantee required random bit flip caused cosmic ray faulty memory go undetected without ecc memory filesystem write damaged data memory disk unable automatically detect corruption also note ecc memory often supported consumer grade hardware ecc memory also expensive way run zfs btrfs without using ecc memory requirement myth restoring put stress drive drive stressed job read write data using drive stressing take longer restore parity data need calculated using cpu slower simply copying data disk mirror stress involved myth using usb disk device zfs btrfs okay sometimes get away without problem ever many usb controller usb storage device really bad thing break blame filesystem btrfs parent transid verify failed error often result failed internal consistency check filesystem metadata due bad usb storage device issue automatic sudden unmounting wrong file size data corruption sudden shutdown several problem often caused bad usb storage device andor usb power issue myth btrfs still write hole issue completely useless myth part btrfs completely useless problem write hole issue writing btrfs still issue definitely useless even run take specific precaution check information write hole problem btrfs potentially exist experience power loss unclean shutdown disk failing immediately thereafter possibly time without running scrub two distinct failure combined break btrfs redundancy however able reproduce problem many test btrfs update people emailing example write hole problem persisting lost data even btrfs version kernel myth btrfs abandoned btrfs used production world wide btrfs deployed facebook million server significant effiency gain also used many company project btrfs keep getting better better myth mdadmxyz replace zfs btrfs nt even compare advice data loss reported mailing list zfs btrfs mdadm user error attempting recover failed array never use trialanderror approach something go wrong filesystem backup solution often really bad situation caused trialanderror approach problem btrfs many people immediately use btrfs check repair command experience issue actually last command want run understand expect filesystem using work system implement specific functionality nt blame filesystem nt fulfill wrong expectation zfs raidz let begin testing zfs three disk listed byid create zfs pool using id also contain serial number make easy identify drive l gg devdiskbyid sdd sdb sdc raidz stand lose one drive pool still function however need resilver pool soon possible replacement drive resilvering concept rebuilding raid array raid implementation distinction block use nt typical rebuild therefore start beginning disk reach end disk mdadm work extremely slow zfs know structure raid system metadata zfs rebuilds block use zfs developer therefore thought term resilvering rather rebuilding going create pool using f option zfs detect attached drive used belong old pool allow used new pool unless forced used drive previous setup zpool create f xattrsa dnodesizeauto atimeoff raidz going create zfs dataset pool compression enabled zfs create zfs list name used avail refer mountpoint exported pub directory using samba begin copying file client computer using rsync rsync progress stats tmp mnttestboxpubtmp xfr xfr xfr barmkv xfr booiso xfr foomkv xfr mooiso xfr number file reg dir number created file reg dir number deleted file number regular file transferred total file size byte total transferred file size byte literal data byte matched data byte file list size file list generation time second file list transfer time second total byte sent total byte received sent byte received byte bytessec total size speedup zfs pool data zfs list name used avail refer mountpoint zfs power outage add yet another file using rsync pull power cord zfs machine half way transfer aborted rest file transfer client turned zfs machine back rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv c zfs using transactional transfer file going lost nothing happened file already system kind damage filesystem kind filesystem checking need run let take look zfs documentation oracle regarding transactional semantics zfs transactional file system mean file system state always consistent disk traditional file system overwrite data place mean system loses power example time data block allocated linked directory file system left inconsistent state historically problem solved use fsck command command responsible reviewing verifying file system state attempting repair inconsistency process problem inconsistent file system caused great pain administrator fsck command never guaranteed fix possible problem recently file system introduced concept journaling journaling process record action separate journal replayed safely system crash occurs process introduces unnecessary overhead data need written twice often resulting new set problem journal replayed properly transactional file system data managed using copy write semantics data never overwritten sequence operation either entirely committed entirely ignored thus file system never corrupted accidental loss power system crash although recently written piece data might lost file system always consistent addition synchronous data written using odsync flag always guaranteed written returning never lost confirmed look status pool zpool status pool state online scan none requested config name state read write cksum online online online online online error known data error zfs list name used avail refer mountpoint client point view l gg mnttestboxpubtmp total rwxrxrx apr rwxrxrx apr rwxrxrx apr rwxrxrx apr barmkv rwxrxrx mar booiso rwxrxrx apr foomkv rwxrxrx mar mooiso zfs drive failure want simulate simple drive failure going remove one drive zfs machine replace another drive resilver zfs pool removed drive zpool status pool state degraded status one device could used label missing invalid sufficient replica exist pool continue functioning degraded state action replace device using zpool replace see http scan none requested config name state read write cksum degraded degraded online unavail online error known data error zfs list name used avail refer mountpoint even though pool degraded state still mount pool client use file mount mnttestboxpub l gg mnttestboxpubtmp total rwxrxrx apr rwxrxrx apr rwxrxrx apr rwxrxrx apr barmkv rwxrxrx mar booiso rwxrxrx apr foomkv rwxrxrx mar mooiso also write pool echo hello mnttestboxpubtmphellotxt l gg mnttestboxpubtmp total rwxrxrx apr rwxrxrx apr rwxrxrx apr rwxrxrx apr barmkv rwxrxrx mar booiso rwxrxrx apr foomkv rwxrxrx apr hellotxt rwxrxrx mar mooiso need identify new drive l l devdiskbyid sdb need replace old drive new procedure since old drive completely gone detach replace simply replace zpool replace pool olddevice newdevice zpool replace zfs immediately automatically begin resilvering pool zpool status pool state degraded status one device currently resilvered pool continue function possibly degraded state action wait resilver complete scan resilver progress since wed apr scanned go resilvered done config name state read write cksum degraded degraded online degraded unavail online resilvering online error known data error minute pool back ready usage zpool status pool state online scan resilvered error wed apr config name state read write cksum online online online online online error known data error client l gg mnttestboxpubtmp total rwxrxrx apr rwxrxrx apr rwxrxrx apr rwxrxrx apr barmkv rwxrxrx mar booiso rwxrxrx apr foomkv rwxrxrx apr hellotxt rwxrxrx mar mooiso make sure data resilvered without error writing perform scrub validate everything alright zpool scrub minute scrub finished zpool status pool state online scan scrub repaired error thu apr config name state read write cksum online online online online online error known data error since zfs restored used data block entire disk procedure scrubbing zfs drive failure file transfer want remove disk middle active file transfer order simulate total failure disk permanent failure might happen disk power cord managed wiggle loose disk located slot nt pushed way etc rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv xfr number file reg dir number created file reg number deleted file number regular file transferred total file size byte total transferred file size byte literal data byte matched data byte file list size file list generation time second file list transfer time second total byte sent total byte received sent byte received byte bytessec total size speedup removed drive disconnection individual power cord drive zfs machine reacted halting file transfer second resumed full speed client experienced momentary drop file transfer speed file transfer completed without problem client side zfs machine pool changed state degraded zpool status pool state degraded status one device could used label missing invalid sufficient replica exist pool continue functioning degraded state action replace device using zpool replace see http scan none requested config name state read write cksum degraded degraded online online unavail error known data error powered machine order safely reattach drive rebooted zfs detected error zpool status pool state online status one device experienced unrecoverable error attempt made correct error application unaffected action determine device need replaced clear error using zpool clear replace device zpool replace see http scan none requested config name state read write cksum online online online online online error known data error situation simulates physical drive failure zfs pool active use probably one common situation real life order handle problem correctly would normally need investigate situation drive physically failed therefore need replacement perhaps wire managed wiggle loose perhaps wire broken disk connector disk motherboard experienced physical corrosion actually happens important remember whether disk good bad simple yes question disk mostly good physical sector give error disk bad second hour day go back working fine year due firmware issue disk may able operation fine certain operation nt work well disk problem shaded multidimensional timedependent since simulation know real life situation need investigate question issue might cause problem nt physical problem setup might able get useful information smart situation determined problem caused system administrator managed pull power cord disk mistake nt need replace drive correct approach therefore scrub drive reattached scrub zfs detect checksum error restore data using parity data zpool scrub zpool status pool state degraded status one device experienced unrecoverable error attempt made correct error application unaffected action determine device need replaced clear error using zpool clear replace device zpool replace see http scan scrub repaired error fri apr config name state read write cksum degraded degraded online online degraded many error error known data error scrubbing done zfs tell u repaired data error even though zfs managed repair everything without error still keep pool degraded state system administrator decide need done important even though zfs managed rescue data might still dealing unhealthy device unrecoverable error scrubbing would facing disk damaged zfs continue working clear log bring pool status online healthy state need replace drive anyway perhaps smart warned u drive currently working experiencing occasional issue soon need fully replaced case know drive working fine clear log zpool clear zpool status pool state online scan scrub repaired error fri apr config name state read write cksum online online online online online error known data error side note mention working lot ton hardware past year seen several situation smart reported problem drive still went going many year reported old worn course ignore report depending situation might need replace drive still used le important capacity zfs data corruption file transfer want simulate data corruption middle file transfer client drive failure corruption data located pool removed zoomkv file rsync command running couple dd command zfs machine one drive dd ifdevurandom transfer still running checking pool status zpool status pool state online scan none requested config name state read write cksum online online online online online error known data error zfs show checksum issue fixed dmesg log currently nt provide information take look zpool event v command want information zpool event v apr ereportfszfschecksum class ereportfszfschecksum ena detector embedded nvlist version scheme zfs pool vdev end detector pool poolguid poolstate poolcontext poolfailmode wait vdevguid vdevtype disk vdevpath vdevashift vdevcompletets vdevdeltats vdevreaderrors vdevwriteerrors vdevcksumerrors parentguid parenttype raidz vdevsparepaths vdevspareguids zioerr zioflags ziostage ziopipeline ziodelay ziotimestamp ziodelta ziooffset ziosize zioobjset zioobject ziolevel zioblkid badranges badrangesmingap badrangesets badrangeclears badsethistogram badclearedhistogram time eid zfs event never publicly documented know output bad bit cleared everything perfect order zfs dd mistake ever made mistake running rm rf command root user path disk even worse dd command want extent test see going happen mistake type dd command let run file transfer client deleted file restarted rsync letting dd run dd ifdevurandom record record byte mb mib copied mb make big mess thing nothing noticeable happened client rsync progress stats tmp mnttestboxpubtmp sending incremental file list xfr xfr xfr barmkv zfs detected error zpool status pool state online status one device experienced unrecoverable error attempt made correct error application unaffected action determine device need replaced clear error using zpool clear replace device zpool replace see http scan none requested config name state read write cksum online online online online online error known data error show absolute incredible unmatchable resilience zfs even though started dd one drive filesystem keep working client still read write pool need perform scrub fix problem zpool scrub zpool status pool state online status one device experienced unrecoverable error attempt made correct error application unaffected action determine device need replaced clear error using zpool clear replace device zpool replace see http scan scrub progress since tue apr scanned go repaired done config name state read write cksum online online online repairing online online error known data error result zpool status pool state degraded status one device experienced unrecoverable error attempt made correct error application unaffected action determine device need replaced clear error using zpool clear replace device zpool replace see http scan scrub repaired error tue apr config name state read write cksum degraded degraded degraded many error online online error known data error investigate order determine disk suffered checksum error need replaced simply clear log zfs managed repair everything error disk back working fine clear log zpool clear zpool status pool state online scan scrub repaired error tue apr config name state read write cksum online online online online online error known data error zfs second drive failure replacement dredded situation setup second drive fails restoration pool let see going happen created new pool three disk transfered file client pool client l gg total rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv rwxrwr mar booiso rwxrwr apr foomkv rwxrwr mar mooiso rwxrwr apr zoomkv zfs machine zfs list name used avail refer mountpoint removed one drive pool simulate first break zpool status pool state degraded status one device could used label missing invalid sufficient replica exist pool continue functioning degraded state action replace device using zpool replace see http scan none requested config name state read write cksum degraded degraded online online unavail error known data error going begin replace procedure resilvering new drive running goint disconnect one working drive zpool replace f let check status zpool status pool state degraded status one device currently resilvered pool continue function possibly degraded state action wait resilver complete scan resilver progress since fri may scanned go resilvered done config name state read write cksum degraded degraded online online degraded unavail online resilvering error known data error resilvering running disconnecting second drive removing power cord drive zfs time fully resilver drive zpool status pool state degraded status one device currently resilvered pool continue function possibly degraded state action wait resilver complete scan resilver progress since fri may scanned go resilvered done config name state read write cksum degraded degraded degraded many error unavail degraded unavail online resilvering error data error use v list resilvering run course could finish zfs informs u problem also informs u file unrecoverable zpool status v pool state degraded status one device experienced error resulting data corruption application may affected action restore file question possible otherwise restore entire pool backup see http scan resilvered error fri may config name state read write cksum degraded degraded degraded many error unavail degraded unavail online error permanent error detected following file situation trying run kind repair process would futile would also wrong filesystem nt damaged nt require kind repairing question get much data back broken pool possible let run scrub see change salvage file restore much pool possible zpool scrub let check zpool status v pool state degraded status one device experienced error resulting data corruption application may affected action restore file question possible otherwise restore entire pool backup see http scan scrub repaired error fri may config name state read write cksum degraded degraded degraded many error unavail degraded unavail online error permanent error detected following file expected go scrub raidz pool one original disk second one nt resilvered correctly without extensive debugging filesystem thing left see copy healthy file pool client zfs already told u file corrupted first attempt want see mount directory client grab file one time rsync progress stats mnttestboxpubtmp sending incremental file list sending incremental file list xfr xfr xfr file transfer halted tried copying file picking one time could get file except three pdf file zfs already told got following error client read source file bad file descriptor file managed salvage broken pool l gg total rwxrxrx apr rwxrxrx apr rwxrxrx apr mean reached point raidz pool destroyed file apple restore limited nt surprise zfs extremely good spreading data parity data evenly across multiple drive raidz lose two drive raidz almost always lose entire pool resilvering process managed run longer time second drive failed perhaps would able salvage file really nt anything humble opinion minimum important file still extremely useful long remember always keep backup important data matter raid setup using raid setup never substitute backup alright time testing btrfs btrfs according btrfs wiki parity raid feature mostly implemented problem case power failure unclean shutdown lead damaged data recommended parity raid used testing purpose let setup btrfs system mkfsbtrfs f btrfsprogs see http btrfswikikernelorg information label null uuid node size sector size filesystem size block group profile data metadata system ssd detected incompat feature extref skinnymetadata number device device id size path enable lzo compression mount pool mount noatime compresslzo pub btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdb devid size used path devsdd btrfs device stats pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs time transfer file client using rsync rsync progress stats tmp mnttestboxpubtmp xfr xfr xfr barmkv xfr booiso xfr foomkv xfr mooiso xfr number file reg dir number created file reg dir number deleted file number regular file transferred total file size byte total transferred file size byte literal data byte matched data byte file list size file list generation time second file list transfer time second total byte sent total byte received sent byte received byte bytessec total size speedup compared zfs transfer sent byte received byte bytessec btrfs machine receive clear warning missing functionality capability also described btrfs wiki status write hole last missing part preliminary patch posted needed reworked parity checksummed note removed btrfs filesystem usage pub warning detected implemented warning detected implemented warning detected implemented overall device size device allocated device unallocated device missing used free estimated min data ratio metadata ratio global reserve used data devsdb devsdc devsdd metadata devsdb devsdc devsdd system devsdb devsdc devsdd unallocated devsdb devsdc devsdd btrfs power outage added zoomkv file file client begin rsync transfer pull power cord btrfs machine transfer rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv c power cord pulled aborted file transfer client btrfs machine powered back btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdb devid size used path devsdd btrfs device stats pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs btrfs also transactional filesystem pool back error everything mountable client zfs test lost file transfered btrfs drive failure time simulate drive failure remove drive zfs afterwards attach new drive try restore pool btrfs filesystem show warning device missing checksum verify failed found wanted bad tree block bytenr mismatch label none uuid total device f byte used devid size used path devsdb devid size used path devsdd device missin btrfs informing u missing disk let locate new one replace old l gg devdiskbyid sdc need mount pool degraded state one working disk mount noatime compresslzo degraded pub broken device removed use devid parameter format order replace device one place btrfs documentation could benefit example devid missing device id btrfs filesystem show command byid uuid also since new disk already contains filesystem previous test need use f option force command command basically btrfs replace start olddevice newdevice mountpoint olddevice devid number btrfs supplied u btrfs replace start f pub check status replacement btrfs replace status pub done write errs uncorr read errs iostat dh linux testbox cpu tps kbreads kbwrtns kbdscds kbread kbwrtn kbdscd device sdc zfs completed restoration minute btrfs little twice long btrfs replace status pub started finished write errs uncorr read errs pool back missing file problem btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdb devid size used path devsdd btrfs filesystem usage pub warning detected implemented warning detected implemented warning detected implemented overall device size device allocated device unallocated device missing used free estimated min data ratio metadata ratio global reserve used data devsdb devsdc devsdd metadata devsdb devsdc devsdd system devsdb devsdd unallocated devsdb devsdc devsdd btrfs device stats pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs noticed file equally spread across device simulated failure devid size used path devsdc devid size used path devsdb devid size used path devsdd devid size used path devsdc devid size used path devsdb devid size used path devsdd usage command show due metadata btrfs filesystem usage pub metadata devsdb devsdc devsdd let perform scrub validate everything alright btrfs scrub start pub btrfs scrub status pub scrub status scrub device devsdc id history scrub started thu apr finished total byte scrubbed error scrub device devsdb id history scrub started thu apr finished total byte scrubbed error scrub device devsdd id history scrub started thu apr finished total byte scrubbed error far problem btrfs drive failure file transfer time remove drive active file transfer rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv xfr number file reg dir number created file reg number deleted file number regular file transferred total file size byte total transferred file size byte literal data byte matched data byte file list size file list generation time second file list transfer time second total byte sent total byte received sent byte received byte bytessec total size speedup btrfs reacted exactly way zfs momentarily halted file transfer second resumed transfer without client able notice anything momentary drop file transfer speed btrfs machine pool changed state missing device btrfs filesystem show pub label none uuid total device f byte used devid size used path devsdc devid size used path devsdd device missing btrfs filesystem usage pub warning detected implemented warning detected implemented warning detected implemented overall device size device allocated device unallocated device missing used free estimated min data ratio metadata ratio global reserve used data devsdb devsdc devsdd metadata devsdb devsdc devsdd system devsdb devsdc devsdd unallocated devsdb devsdc devsdd zfs powered machine order safely reattach drive rebooted btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdd devid size used path devsdb show command reveals pool balance order get information need mount pool use device stats command device stats keep persistent record several error class related io current value printed mount time updated filesystem lifetime scrub btrfs device stats pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs status report clearly show write error current situation correct approach scrub btrfs scrub start pub scrub started pub fsid zfs btrfs running data checksum trying repair data scrubbing done btrfs tell u repaired quite lot data uncorrectable error btrfs scrub status pub scrub status scrub device devsdc id history scrub started fri apr finished total byte scrubbed error error detail corrected error uncorrectable error unverified error scrub device devsdd id history scrub started fri apr finished total byte scrubbed error error detail corrected error uncorrectable error unverified error scrub device devsdb id history scrub started fri apr finished total byte scrubbed error error detail corrected error uncorrectable error unverified error btrfs managed repair everything without error still keep log error noticeable zfs finished scrubbing repair minute btrfs took minute btrfs also brought pool balance scrubbing btrfs famous slow rebalancing drive btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdd devid size used path devsdb system administrator decide want important even though btrfs managed restore pool might still dealing unhealthy device clear log need replace drive anyway perhaps smart warned u drive currently working experiencing occasional issue soon need fully replaced btrfs device stats c pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs result scrubbing showed zero uncorrectable error know drive working fine clear log z option btrfs device stats z pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs btrfs data corruption file transfer want simulate disk corruption middle file transfer client zfs removed zoomkv file rsync running use dd couple time btrfs machine one drive dd ifdevurandom device stats command show problem btrfs device stats c pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs however dmesg log reveals something btrfs error device sdc csum mismatch free space cache btrfs warning device sdc failed load free space cache block group rebuilding btrfs error device sdc csum mismatch free space cache btrfs warning device sdc failed load free space cache block group rebuilding btrfs error device sdc space cache generation match inode btrfs warning device sdc failed load free space cache block group rebuilding btrfs detect problem automatically fixed expected kind error show device stat result perhaps corruption error count btrfs dd mistake time see going happen mistake type dd command one drive file transfer client zfs test deleted file restarted rsync dd ifdevurandom ofdevsdb record record byte mb mib copied mb device stats command nt show problem btrfs device stats c pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs dmesg minut btrfs error device sdc bad tree block start want btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs error device sdc bad tree block start want btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs info device sdc read error corrected ino dev devsdb sector btrfs info device sdc read error corrected ino dev devsdb sector btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want client zfs nothing noticeable going file transfer time run scrub order correct error btrfs scrub start pub scrub started pub fsid btrfs scrub status pub scrub status scrub device id status scrub started tue apr running total byte scrubbed error error detail corrected error uncorrectable error unverified error scrub device devsdb id status scrub started tue apr running total byte scrubbed error error detail corrected error uncorrectable error unverified error scrub device devsdd id status scrub started tue apr running total byte scrubbed error error detail corrected error uncorrectable error unverified error warning error detected scrubbing corrected btrfs detected error fixed scrub status scrub device id history scrub started tue apr finished total byte scrubbed error error detail corrected error uncorrectable error unverified error scrub device devsdb id history scrub started tue apr finished total byte scrubbed error error detail corrected error uncorrectable error unverified error scrub device devsdd id history scrub started tue apr finished total byte scrubbed error error detail corrected error uncorrectable error unverified error btrfs device stats c pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs btrfs handled problem well zfs difference time took scrub btrfs write hole issue since btrfs still warning write hole issue would like see possible recreate problem test parity may inconsistent crash write hole problem born unclean shutdown disk failure happens two distinct failure together break btrfs redundancy run scrub process unclean shutdown disk failure data match checksum still read mismatched data lost forever two issue exist time unclean shutdown disk failure pulling power cord machine file transfer simulating disk failure removing one drive potentially recreate issue removed zoomkv file file btrfs machine pull power cord file transfer file remove drive see going happen rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv c btrfs machine suffered unclean shutdown aborted file transfer client unmounted btrfs export physically changed one drive btrfs machine try replacement btrfs filesystem show warning device missing checksum verify failed found wanted bad tree block bytenr mismatch could nt setup extent tree checksum verify failed found wanted bad tree block bytenr mismatch could nt setup device tree label none uuid total device f byte used devid size used path devsdc devid size used path devsdd device missin previous test simulated drive failure got error message except time btrfs complaining could nt setup device tree mount pool degraded state replace faulty drive see ca nt salvage data pool mounting performed healty drive mount noatime compresslzo degraded pub time devid need replace new disk one btrfs replace start f pub let check status replacement btrfs replace status pub done write errs uncorr read errs little btrfs replace status pub started finished write errs uncorr read errs btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdb devid size used path devsdd btrfs device stats c pub devsdc writeioerrs devsdc readioerrs devsdc flushioerrs devsdc corruptionerrs devsdc generationerrs devsdb writeioerrs devsdb readioerrs devsdb flushioerrs devsdb corruptionerrs devsdb generationerrs devsdd writeioerrs devsdd readioerrs devsdd flushioerrs devsdd corruptionerrs devsdd generationerrs l gg pubtmp total rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv rwxrwr mar booiso rwxrwr apr foomkv rwxrwr mar mooiso everything restored nicely three drive performing well nt lose file suffered parity issue made replacement problem repeated test result btrfs second drive failure replacement want see going happen btrfs lose second drive replacement procedure removed one drive mounting btrfs pool degraded state order begin replacement btrfs filesystem show label none uuid total device f byte used devid size used path devsdc devid size used path devsdd device missing mount noatime compresslzo degraded pub zfs replacement procedure running disconnect one working drive btrfs replace start f pub let check status btrfs replace status pub done write errs uncorr read errs disconnect second drive removing power cord drive btrfs replace status pub started canceled write errs uncorr read errs btrfs cancelled replacement second drive went offline l gg pubtmp l access pubtmpbooiso inputoutput error l access pubtmpfoomkv inputoutput error l access pubtmpmooiso inputoutput error total rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv booiso foomkv mooiso clearly problem attached new drive btrfs machine one healthy drive pool two new drive one partly replaced umount pub btrfs filesystem show warning device missing label none uuid total device f byte used devid size used path devsdc device missing mount noatime compresslzo degraded pub btrfs filesystem show warning device missing checksum verify failed found wanted checksum verify failed found wanted bad tree block bytenr mismatch label none uuid total device f byte used devid size used path devsdc devid size used path devsdd device missing drive went partly replacement least recognized belonging pool situation trying run kind repair process would futile would also wrong filesystem nt damaged nt require kind repairing try replace third disk see maybe enough data metadata lying around actually restore pool without loosing data zfs long shot let locate new disk l l devdiskbyid sdc sdd sdb devid need replaced one btrfs replace start f pub error let check status btrfs replace status pub started suspended write errs uncorr read errs suspended let see dmesg say btrfs info device sdc use lzo compression level btrfs info device sdc allowing degraded mount btrfs info device sdc disk space caching enabled btrfs info device sdc skinny extent btrfs warning device sdc devid uuid missing btrfs info device sdc continue devreplace tgtdev missing btrfs info device sdc may cancel operation mount degraded replacement possible zfs get much better information using zpool status v replacement status specific file restored let run scrub see change salvage file restore much pool possible btrfs scrub start pub scrub started pub fsid let check btrfs scrub status pub scrub status scrub device devsdc id history scrub started fri may aborted total byte scrubbed error scrub device devsdd id history scrub started fri may aborted total byte scrubbed error scrub device devsdd id history scrub started fri may aborted total byte scrubbed error aborted go scrub pool one original disk second one nt replaced correctly l gg pubtmp total rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv rwxrwr mar booiso rwxrwr apr foomkv rwxrwr mar mooiso thing left see many file salvage rsync progress stats mnttestboxpubtmp sending incremental file list xfr xfr xfr barmkv halted tried copying file picking one time big supprise actually managed get file except barmkv file l gg total rwxrxrx apr rwxrxrx apr rwxrxrx apr rwxrxrx mar booiso rwxrxrx apr foomkv rwxrxrx mar mooiso attempt transfer barmkv file following error showed btrfs machine dmesg btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs error device sdc bad tree block start want btrfs critical device sdc corrupt node unaligned pointer aligned btrfs info device sdc csum found inode start btrfs critical device sdc corrupt node unaligned pointer aligned btrfs info device sdc csum found inode start btrfs critical device sdc corrupt node unaligned pointer aligned btrfs info device sdc csum found inode start btrfs critical device sdc corrupt node unaligned pointer aligned btrfs btrfs restore command used try salvage file damaged filesystem restore somewhere else man page explaines btrfs restore could used retrieve file data far metadata readable check done restore le strict process usually able get far enough retrieve data whole filesystem come cost data might incomplete older version available several option attempt restoration various file metadata type try dry run first see well process go use option extend set restored metadata available boot disk try restore file drive going use sdc first heatly original working drive followed sdd disk partly replaced last disk sdb useless mkdir restoredfiles umount pub btrfs restore devsdc restoredfiles warning device missing checksum verify failed found wanted bad tree block bytenr mismatch could open root trying backup super warning device missing checksum verify failed found wanted checksum verify failed found wanted bad tree block bytenr mismatch checksum verify failed found wanted bad tree block bytenr mismatch could open root trying backup super warning device missing checksum verify failed found wanted checksum verify failed found wanted bad tree block bytenr mismatch checksum verify failed found wanted bad tree block bytenr mismatch could open root trying backup super btrfs restore devsdd restoredfiles warning device missing checksum verify failed found wanted checksum verify failed found wanted bad tree block bytenr mismatch error read chunk root could open root trying backup super warning device missing warning device missing bad tree block bytenr mismatch error read chunk root could open root trying backup super warning device missing warning device missing bad tree block bytenr mismatch error read chunk root could open root trying backup super removing useless disk order try run two disk nt work need least three disk btrfs device remove missing pub error error removing device missing unable go two device error error removing devid unable go two device adding new disk order try btrfs rebalance fails expected btrfs balance start v pub dumping filter flag state force data flag balancing metadata flag balancing system flag balancing warning full balance without filter requested operation intense take potentially long recommended use balance filter narrow scope balance use btrfs balance start fullbalance option skip warning operation start second use ctrlc stop starting balance without filter balance end prematurely dmesg btrfs info device sdc balance resume btrfs info device sdc relocating block group flag btrfs info device sdc relocating block group flag btrfs info device sdc found extent btrfs info device sdc relocating block group flag btrfs info device sdc found extent btrfs info device sdc relocating block group flag btrfs info device sdc found extent btrfs error device sdc bad tree block start want btrfs error device sdc io failure btrfs info device sdc forced readonly btrfs info device sdc balance ended status actually surprised number file managed salvage btrfs mean either file except missing one located physically single healthy drive part file plus needed parity data located single healthy drive plus second drive partially replaced mean btrfs perhaps nt good balancing data parity data evenly across multiple drive setup ended data needed one drive mean btrfs sometimes get lucky stand greater chance getting file back even two drive fail setup decided retest order see would get result time pulling sdc disk healthy course might get result btrfs using another disk way created completely fresh pool mounted mkfsbtrfs f btrfsprogs see http btrfswikikernelorg information label null uuid node size sector size filesystem size block group profile data metadata system ssd detected incompat feature extref skinnymetadata number device device id size path mount noatime compresslzo pub transfered file client l gg pubtmp total rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv rwxrwr mar booiso rwxrwr apr foomkv rwxrwr mar mooiso btrfs filesystem df pub data system metadata globalreserve single removed device sdc btrfs filesystem show warning device missing checksum verify failed found wanted bad tree block bytenr mismatch could nt read tree root label none uuid total device f byte used devid size used path devsdb devid size used path devsdd device missing mounting btrfs pool degraded state beginning replacement remove next drive pool replacement mount noatime compresslzo degraded pub btrfs replace start f pub btrfs replace status pub done write errs uncorr read errs time experiencing crash dmesg kernel bug invalid opcode preempt smp pti cpu pid comm tainted g hardware name hewlettpackard hp compaq small form bios workqueue btrfs rip btrfs code ff ff ff ff df ee ff ff rsp eflags rax rbx rcx rdx rsi rdi rbp f g c d e call trace btrfs module linked sndhdacodecanalog sndhdacodecgeneric ledtrigaudio kvmgt vfiomdev mdev btrfs vfio sndhdaintel drmkmshelper sndhdacodec coretemp drm sndhdacore syscopyarea kvm sndhwdep sysfillrect sndpcm sysimgblt xor fbsysfops irqbypass sndtimer inputleds snd joydev tpminfineon psmouse tpmtis soundcore hpwmi tpmtiscore intelagp sparsekeymap meiwdt itcowdt meime tpm intelgtt itcovendorsupport rfkill pcspkr mei gpioich agpgart wmibmof evdev rngcore machid lpcich wmi pcccpufreq acpicpufreq iptables xtables mbcache fscrypto hidgeneric usbhid hid sdmod serioraw uhcihcd atkbd ahci libahci atageneric pataacpi libata ehcipci ehcihcd scsimod floppy serio also replacement stalled rebooted btrfs machine mount filesystem mount noatime compresslzo degraded pub mount pub wrong f type bad option bad superblock devsdb missing codepage helper program error tried btrfs device scan mount recovery mode also tried using btrfs restore tried btrfs rescue zerolog nothing worked hit one bug wiki say parity raid code multiple serious dataloss bug used anything testing purpose answer actually well crash bug mount issue bug simple fact expect survive twodrive failure setup matter filesystem using sometimes first attempt might get away restoring file time simply lose entire pool expect later zfs btrfs enough btrfs time test mdadmdmintegrity mdadmdmintegrity update come attention thank philip made unfortunate mistake test mdadmdmintegrity tested data integrity error wrote devmappersdb also update dmintegrity checksum later syncaction check error dmintegrity checksum error rather raid parity error correct test write random data devsdb end mdadmdmintegrity section copypasted result test philip send email contains example test run also updated article note time made mistake stumbled upon dmintegrity test btrfs nt used therefore thought would interesting see mdadmdmintegrity handle problem tested zfs btrfs mdadm used administering pure software raid using plain block device provide kind data integrity verification read error encountered mdadm block error calculated written back pool mirror ca nt calculate correct data take data first available drive assume correct write drive degraded raid pool mdadm terminate immediately without anything recalculate faulty data dmintegrity nothing kind raid setup dmintegrity return eilseq instead eio error encounter data integrity error raid driver mdadm case handle integrity error properly dmintegrity require encryption desired technical reason documentation dmintegrity target also used standalone target mode calculates verifies integrity tag internally mode dmintegrity target used detect silent data corruption disk io path guarantee write atomicity dmintegrity target us journal writes sector data integrity tag journal commits journal copy data integrity tag respective location combine dmintegrity mdadm raid setup disk redundancy error checking error correction dmintegrity cause checksum error encounter invalid data mdadm notice repair correct data mdadm specify raid device create raid mode level etc device mdadm well documented contains ton option example well also easy make mistake mdadm want simple data integrity verification without extra functionality zfs btrfs offer dmintegrity alone job need run regular scrub filesystem make sure adequate backup handle potential integrity problem since using encryption test use integritysetup command instead cryptsetup command format disk however worth noticing dmintegrity best integrated dmcryptluks disk encryption default integritysetup us relatively fast requiring byte per block give probability random corruption detected top silent corruption hard drive dmintegrity device need wiped format order avoid invalid checksum take extremely long time tb disk changed disk three old gb disk gon na use shorthand sdx device name never sake test always use device name serial number easy identification integritysetup format integrity devsdb warning overwrite data devsdb irrevocably sure type uppercase yes yes warning device devsdb already contains do partition signature formatted tag size internal integrity wiping device initialize integrity checksum interrupt pressing ctrlc rest wiped device contain invalid checksum progress eta mib written speed mib opening device integritysetup open integrity devsdb sdb integritysetup open integrity devsdc sdc integritysetup open integrity devsdd sdd creating mdadm system mdadm create verbose assumeclean devmappersdb devmappersdc devmappersdd mdadm layout default leftsymmetric mdadm layout default leftsymmetric mdadm chunk size default mdadm size set mdadm automatically enabling writeintent bitmap large pool mdadm defaulting version metadata mdadm pool started create filesystem top used default nt calculate correct stripe width stride mdadm setup time get status information cat procmdstat personality active block super level chunk algorithm uuu bitmap page chunk unused device none mdadm misc version creation time sat apr raid level array size gib gb used dev size gib gb raid device total device persistence superblock persistent intent bitmap internal update time sat apr state clean active device working device failed device spare device layout leftsymmetric chunk size consistency policy bitmap name testbox local host testbox uuid event number major minor raiddevice state active sync active sync active sync validate dmintegrity setup correctly sdb disk l deviceisintegritycapable l sysblocksdbintegrity deviceisintegritycapable l deviceisintegritycapable dmsetup info devmappersdb name sdb state active read ahead table present live open count event number major minor number target uuid cryptintegritysdb running mdadm setup dmintegrity mounted mdadm device pub time transfer file client using rsync rsync progress stats tmp mnttestboxpubtmp xfr xfr xfr barmkv xfr booiso xfr foomkv xfr mooiso xfr number file reg dir number created file reg dir number deleted file number regular file transferred total file size byte total transferred file size byte literal data byte matched data byte file list size file list generation time second file list transfer time second total byte sent total byte received sent byte received byte bytessec total size speedup painfully slow old rpm laptop disk using compared zfs raidz transfer sent byte received byte bytessec btrfs transfer sent byte received byte bytessec transfer top showed dmintegrity working occasionally spiking cpu usage cpu mem time command smbd mdadm power outage added file zoomkv file client begin rsync transfer pull power cord rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv c power cord pulled transfer aborted client mdadm machine powered back using dmintegrity remember open device integritysetup open integrity devsdb sdb integritysetup open integrity devsdc sdc integritysetup open integrity devsdd sdd take look state system dmesg mdraid clean starting background reconstruction mdraid device operational raid disk mdraid device operational raid disk mdraid device operational raid disk mdraid raid level active device algorithm working filesystem shut unclean fashion top show kworker process busy cleaning top n cpu mem time command systemd kthreadd rcugp rcupargp mdstat however nt show anything useful cat procmdstat personality active block super level chunk algorithm uuu bitmap page chunk unused device none rather mdadm need pay close attention dmesg log dmesg recovery completed mount take look directory mount pub l gg pub rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv rwxrwr mar booiso rwxrwr apr foomkv rwxrwr mar mooiso rwxrwr apr trace broken rsync transfer remains directory mdadm drive failure time simulate drive failure transfer zoomkv file remove drive pool see mdintegritymdadm handle dmesg sata link sstatus scontrol disabled sd rejecting io offline device printreqerror io error dev sdb sector flag printreqerror io error dev sdb sector flag devicemapper integrity error writing journal sd rejecting io offline device printreqerror io error dev sdb sector flag sd rejecting io offline device printreqerror io error dev sdb sector flag md superwritten get mdraid disk failure disabling device mdraid operation continuing device mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector mdraid read error correctable sector detaching scsi mdraid read error correctable sector sd sdb synchronizing scsi cache sd sdb synchronize cache failed result hostbytedidbadtarget driverbytedriverok sd sdb stopping disk sd sdb startstop unit failed result hostbytedidbadtarget driverbytedrivero dmesg show unrecoverable read error let look mdadm mdadm misc version creation time sat apr raid level array size gib gb used dev size gib gb raid device total device persistence superblock persistent intent bitmap internal update time sat apr state active degraded active device working device failed device spare device layout leftsymmetric chunk size consistency policy bitmap name testbox local host testbox uuid event number major minor raiddevice state removed active sync active sync faulty mdstat also show drive missing three u cat procmdstat personality active f block super level chunk algorithm uu bitmap page chunk unused device none need figure device keep track always need make sure use serial number device order keep physical track l l devdiskbyid dmnamesdb nt got room spare device mark device failed remove mdadm manage fail mdadm set faulty mdadm manage remove mdadm hot removed mdadm misc number major minor raiddevice state removed active sync active sync devdm shutdown machine attach new disk format bring pool replacement looking byid verify new drive attached nt messed device mapping l l devdiskbyid sdb new drive already contains filesystem need format wipe integritysetup format integrity devsdb warning overwrite data devsdb irrevocably sure type uppercase yes yes warning device devsdb already contains do partition signature formatted tag size internal integrity wiping device initialize integrity checksum interrupt pressing ctrlc rest wiped device contain invalid checksum progress eta mib written speed mib done open drive integritysetup open integrity devsdc sdc integritysetup open integrity devsdd sdd two working drive mdadm show missing mdadm misc number major minor raiddevice state removed active sync active sync open sdb attach raid integritysetup open integrity devsdb sdb mdadm add devmappersdb mdadm added devmappersdb mdadm brings pool sync cat procmdstat active block super level chunk algorithm uu recovery bitmap page chunk unused device none zfs implement sophisticated block tracking mechanism capable knowing exactly block need reconstruct mean zfs reconstructs used block extremely fast reconstructing especially disk nt contain much data btrfs slower zfs also reconstructs used block mdadm hand reconstructs every single block disk including nonused one make reconstruction process extremely slow even small disk eventually mdadm done cat procmdstat personality active block super level chunk algorithm uuu bitmap page chunk unused device none dmesg confirms md recovery done took long time mdadm drive failure file transfer pool restored going remove drive file transfer put back see mdadmdmintegrity behaves transfer log show drive gone kernel printreqerror io error dev sdd sector flag kernel devicemapper integrity error reading tag kernel sd rejecting io offline device kernel printreqerror io error dev sdd sector flag kernel sd sdd tag cdb read kernel sd sdd tag add sense unaligned write command kernel sd sdd tag sense key illegal request current kernel sd sdd tag failed result hostbytedidok driverbytedriversense kernel disabled kernel sata link sstatus scontrol mdadm reacted halting file transfer second resumed transfer without client able notice anything momentary drop file transfer speed rsync progress stats tmp mnttestboxpubtmp sending incremental file list zoomkv xfr number file reg dir number created file reg number deleted file number regular file transferred total file size byte total transferred file size byte literal data byte matched data byte file list size file list generation time second file list transfer time second total byte sent total byte received sent byte received byte bytessec total size speedup zfs btrfs test always shutdown machine reattached removed drive time reattached drive mdadm show drive missing cat procmdstat personality active f block super level chunk algorithm uu bitmap page chunk unused device none mdadm misc number major minor raiddevice state active sync active sync removed faulty remove device mdadm close device open reattach mdadm manage remove mdadm hot removed mdadm misc number major minor raiddevice state active sync active sync removed l l devdiskbyid dmnamesdd integritysetup close sdd integritysetup open integrity devsdd sdd mdadm manage readd mdadm readded mdadm automatically begin recovery process cat procmdstat personality active block super level chunk algorithm uu recovery bitmap page chunk unused device none mdadm misc number major minor raiddevice state active sync active sync spare rebuilding zfs btrfs mdadm pool scrubbed regular interval mdadm basically involves reading entire pool problem drive trigger read error autocorrection problem data picked controlled writing syncaction parameter sys echo check dmesg md datacheck raid pool notice difference mdstat recovery message check message cat procmdstat personality active block super level chunk algorithm uuu check bitmap page chunk unused device none compared zfs btrfs took long time mdadm data corruption file transfer time simulate disk corruption middle file transfer client removed zoomkv file rsync command running use dd command multiple time mdadm machine one drive dd ifdevurandom ofdevmappersdb update made mistake writing devmappersdb also update dmintegrity checksum correct test write random data devsdb first misunderstood behavior dmintegrity expecting see something like log devicemapper integrity aead error sector nt according dmintegrity documentation seeing integrity failure count would course require hitting sector read nt case example need run scrub echo check mismatching checksum found tail f dmesg md datacheck raid pool mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range cat procmdstat personality active block super level chunk algorithm uuu check bitmap page chunk unused device none long time mdadm fixed pool dmesg md datacheck done cat procmdstat personality active block super level chunk algorithm uuu bitmap page chunk unused device none mdadm misc version creation time sat apr raid level array size gib gb used dev size gib gb raid device total device persistence superblock persistent intent bitmap internal update time tue apr state clean active device working device failed device spare device layout leftsymmetric chunk size consistency policy bitmap name testbox local host testbox uuid event number major minor raiddevice state active sync active sync active sync mount pool client access file l gg tmp total rwxrxrx apr rwxrxrx apr rwxrxrx apr rwxrxrx apr barmkv rwxrxrx mar booiso rwxrxrx apr foomkv rwxrxrx mar mooiso rwxrxrx apr zoomkv mdadm dd mistake time see happens sysadmin mistake issue dd command one raid drive removed zoomkv file active file transfer dd ifdevurandom ofdevmappersdb record record byte mb mib copied mb update made mistake writing devmappersdb also update dmintegrity checksum correct test write random data devsdb much test zfs btrfs still suffice nothing noticeable happened client file keep going rsync progress stats homenaimtmp homenaim sending incremental file list zoomkv point test zfs detected checksum error message one device experienced unrecoverable error mdadm nt really anything go run scrub echo check tail f dmesg md datacheck raid pool mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range callback suppressed mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range mismatch sector range callback suppressed cat procmdstat personality active block super level chunk algorithm uuu check bitmap page chunk unused device none scrub finally done dmesg md datacheck done cat procmdstat personality active block super level chunk algorithm uuu bitmap page chunk unused device none mdadm misc version creation time sat apr raid level array size gib gb used dev size gib gb raid device total device persistence superblock persistent intent bitmap internal update time mon apr state clean active device working device failed device spare device layout leftsymmetric chunk size consistency policy bitmap name testbox local host testbox uuid event number major minor raiddevice state active sync active sync active sync test multiple time mdadm system second time everything fixed point pool continued run could mount use filesystem first time test thing nt go smooth got mount error mount pub mount pub wrong f type bad option bad superblock missing codepage helper program error tried rebooting machine reopen drive assemble problem persisted mdadm stop mdadm stopped mdadm assemble scan mdadm started drive cat procmdstat personality active block super level chunk algorithm uuu bitmap page chunk unused device none mount pub mount pub wrong f type bad option bad superblock missing codepage helper program error drive registered clean mdadm examine devmappersdb devmappersdc devmappersdd devmappersdb magic version feature map array uuid name testbox local host testbox creation time sat apr raid level raid device avail dev size gib gb array size gib gb used dev size gib gb data offset sector super offset sector unused space sector sector state clean device uuid internal bitmap sector superblock update time mon apr bad block log entry available offset sector checksum correct event layout leftsymmetric chunk size device role active device array state aaa active missing r replacing devmappersdc magic version feature map array uuid name testbox local host testbox creation time sat apr raid level raid device avail dev size gib gb array size gib gb used dev size gib gb data offset sector super offset sector unused space sector sector state clean device uuid internal bitmap sector superblock update time mon apr bad block log entry available offset sector checksum correct event layout leftsymmetric chunk size device role active device array state aaa active missing r replacing devmappersdd magic version feature map array uuid name testbox local host testbox creation time sat apr raid level raid device avail dev size gib gb array size gib gb used dev size gib gb data offset sector super offset sector unused space sector sector state clean device uuid internal bitmap sector superblock update time mon apr bad block log entry available offset sector checksum correct event layout leftsymmetric chunk size device role active device array state aaa active missing r replacing clearly filesystem error seems like might dealing bad block controversy documentation get following option first thing try check integrity file system command like tar cf devnull read entire file system tell file unreadable also clear bad block data recoverable however known bug nt always happen bad block may unallocated portion file system wish clear try command like cat devzero tempfile rm tempfile fill spare disk space zero delete file used thing done bad block list empty however command diskheavy take long time modern pool plus code strongly suspected buggy command could likely work satisfied everything okay nt want bad block functionality easy way get rid bad block list clear mdadm assemble updatenobbl however active bad block list sector command wo nt work use command mdadm assemble updateforcenobbl delete list mean mdadm probably return garbage failed error satisfied file system intact though wo nt matter specific case none going work way forward actually clean filesystem hope best fsck inode seems contain garbage clear yes inode seems contain garbage clear yes inode seems contain garbage clear yes top cpu mem time command file system modified file noncontiguous block ton ton error mount pool check file mount pub cd pub l lostfound tmp directory gone cd lostfound du h cd l la total rwxrwr apr rwxrwr apr rwxrwr apr rwxrwr apr barmkv rwxrwr mar booiso rwxrwr apr foomkv rwxrwr mar mooiso rwxrwr apr zoomkv however file still decided stop testing mdadmdmintegrity last test failure second drive restoration would rather pointless time consuming correct test mdadmdmintegrity mentioned beginning tested data integrity error wrote devmappersdb also update dmintegrity checksum later syncaction check error displayed nt dmintegrity checksum error rather raid parity error correct test write random data devsdb test sent philip kind enough write mistake made also provide example test random data written correct device integritysetup format integrity integritysetup format integrity integritysetup format integrity integritysetup open integrity integritysetup open integrity integritysetup open integrity mdadm create verbose cat procmdstat personality active block super level chunk algorithm uuu unused device none mkfsxfs mount dd ifdevzero record record byte gb gib copied mb testdata testdata dd ifdevurandom record record byte mb mib copied mb testdata testdata aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector aug localhostlocaldomain kernel devicemapper integrity checksum failed sector testdata testdata dm integrity error output thank much sharing philip final note mdadm setup kind raid pool disk redundancy even expand disk later needed add dmintegrity error detection error correction block level add dmcryptluks data integrity protected native authenticated encryption use raid pool lvm physical volume snapshot long shot compare zfs btrfs would never use something like mdadmdmintegrity replacement zfs btrfs true nt worry compiling kernel module every time kernel updated zfs linux using annoying solaris compatibility layer run external unofficial often outofsync repository arch linux developer yes talking need zfs arch linux official repository asap even debian zfs repository nt need worry write hole issue btrfs however need carefully study documentation piece technology put together mdadm make sure understand put thing together best deal potential problem still limited regular filesystem put top nt get really well designed superior protection management zfs btrfs provides let quote allan jude michael w lucas book freebsd mastery zfs zfs merely filesystem yes includes feature many filesystems ca nt even contemplate zfs copyonwrite filesystem extremely well designed light year ahead btrfs zfs also easy use yes allowed shoot foot zfs nix nt plan ahead also end big mess mostly fault zfs well documented zfs almost know intuition command need constructed another big advantage zfs extremely reliable well battle tested industry find thousand company regular people using zfs long time mean much easier get help need btrfs also copyonwrite filesystem believe supposed better zfs linux even though company like facebook deployed btrfs million server care specific functionally need mean write hole issue still nt fixed even many year another concern btrfs many people reported serious issue data loss btrfs debian linux wiki contains many relevant unresolved issue writing alarmed report one debian wiki result mismanaged situation often people deploy solution without study without testing error happen manage blow everything trialanderror approach make thing unrecoverable blame technology many people example also reported positive result btrfs also opensuse linux distribution sponsored suse linux gmbh several company run btrfs default filesystem root partition synology company founded creates networkattached storage na ip surveillance solution network equipment na storage solution based upon btrfs filesystem also even though zfs mature still undergoing rapid active development many new feature continuously added received huge amount work since cooperation different project openzfs especially zfs linux project much freebsd developer decided rebase zfs filesystem code zfs linux port rather illumos code originally acquiring code also mean zfs getting new feature added also experiencing new bug issue personally really love zfs without doubt favorite filesystem absolute amazing feat engineering also hope much btrfs eventually catch improved lot upon lately nt think deserves bad press gotten deployed btrfs multiple setup without issue performed really well update since wrote article abandoned btrfs completely found situation viable run btrfs rather zfs freebsd even gnulinux anyway hope found article worth read comment correction please feel free email also found content useful consider supporting patreon relevant reading
257,Lobsters,osdev,OS,Overview: Serenity WindowServer,https://www.youtube.com/watch?v=umJgJGY6NrA,overview serenity windowserver,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature overview serenity windowserver youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature overview serenity windowserver youtube
258,Lobsters,osdev,OS,The coming era of OS kernel modularity,https://dev.to/yonkeltron/the-coming-era-of-os-kernel-modularity-5emc,coming era o kernel modularity,debate google fuchsia bpf modular kernel currently development fuchsia operating system zircon written c deprecation dotdot filesystem convention fuchsia doc book set note redox rust programming language tock manticore parakernels genode monolith strike back dynamically linked kernel module berkeley packet filter bpf brendan gregg terrific compilation io visor project also maintains performanceoriented bpf book unikernels libraryos mirageos ocaml unikernels website maintains list project unik project started friend idit levine nodejs java rumprun firecracker language vm kernel jnode jx singularity o managed announcement webassembly system interface wasi wasmer effort nanovm folk run wasm unikernels great point microservice architecture,used debate folk whether monolithic kernel microkernels superior architecture might interesting got pretty ugly time flame war raged research development continued parallel within academic industrial world looking back clearly merely matter monolith v microkernel architecture rather larger discussion code modularity last year shown u key trend hidden among oftenoverlooked activity world operating system o development chief among idea future need look like past google fuchsia project bpf linux era kernel modularity arrived modular kernel currently development keep ear ground inevitably hear excited rumbling folk watching notsosecret development google new open source fuchsia operating system fuchsia kernel called zircon written c zircon notable variety reason least eschewing traditional posix standard favor supporter refer modern convention particular note intentional deprecation dotdot filesystem convention security reason anyone interested else google fuchsia team considers modern convention referred fuchsia doc popular destination book recent set note china may also interest though google fuchsia forsaken posix modular kernel followed suit example redox project opted continue posix tradition clearly going microkernel approach since goal redox make reliable secure general purpose o team chose write everything rust programming language seems like great idea rust really wonderful safety guarantee ergonomic error handling rust front redox nt game town new tock o receives attention targeting embedded lowpower system website tout ability tock run everything industrial sensor security key watch iot value security reliability keep eye tock moreover even experimental research o called manticore also written rust aiming explore world concept parakernels discussion modular kernel would complete without mention genode project genode nt actual kernel much microkernel construction kit even though written c genode claim offer securityfirst approach o development sight set iot well traditional workload monolith strike back despite root monolithic kernel linux always able sidestep entire class problem leveraging dynamically linked kernel module run time however proven successful strategy discussion modularity shifted advent kernel support running program written using berkeley packet filter bpf mechanism originally developed controlling network io bpf since extended ebpf allow attaching filter various o function upshot epbf support linux allows tying code deep kernel without modifying kernel brendan gregg terrific compilation ebpf learning resource available blog io visor project also maintains pretty solid overview also performanceoriented bpf book set published october even though certainly smaller classical os newer world unikernels borrows heavily research world development nanokernels carrying concept libraryos standing tall among venerable mirageos project library o written entirely ocaml people interested minimonolith minilith approach unikernels looking develop language ocaml unikernels website maintains list project pick anything go beam language another exciting option geared toward traditional development unik project started friend idit levine take almost existing program produce unikernel example common language platform nodejs even java one cooler thing unik clean code read go source understand great deal provides pluggable backend supporting flavor rumprun even firecracker language vm kernel multiple attempt write o kernel interpreted semicompiled language two notable actually defunct jnode jx project however one additional effort past also stand significant singularity o research project microsoft discontinued better part decade continued intrigue whenever think attempt make entire o nothing c minimal vm rumored heavily leveraged justintime jit compiler provide runtime profile optimization far beyond traditional aheadoftime aot compiled kernel could offer additionally supposed memory safety managed language could offer terrific security guarantee like runtime memory inspection execution supervision recent month watched development webassembly wasm announcement webassembly system interface wasi great interest tool like wasmer make easy run application compiled wasm exposed effort nanovm folk run wasm unikernels pretty cool great point clearly larger discussion happening code system modularity variety area people explore technique like microservice architecture solution every problem community continues develop variety viewpoint therefore seems natural o development would contribution make discussion would influenced return let see develops pun intended
259,Lobsters,osdev,OS,Bash coprocess,https://medium.com/@copyconstruct/bash-coprocess-2092a93ad912,bash coprocess,previous post coprocesses usage coproc coproc compound command gotchas conclusion,previous post handing background job bash start command background one simply need append commandcommands likefg jobspec kill used bring process foreground send signal however command allow one communicate background process sending input process reading outputcoprocessesbash version offer another way start asynchronous process subshell done help coproc keywordusage coproc command argscoproc name commandthe first syntax used one wish start one subprocess start one subprocess second syntax used subprocesses given specific name named subprocesses work compound commandsa bidirectional pipe established executing shell coprocess input output file descriptor pid coprocess available shellif coprocess launched explicit name output input file descriptor available use array name name provided default name coprocthe first element array output descriptor coprocess second element array input descriptor coprocess variable namepid hold pid coprocessthe return status coproc exit status commandin aforementioned example coprocess named macaroon output input descriptor stored array named macaroon pid coprocess available variable called macaroonspidthe coprocess array pid coprocess output coprocess sun jun pdt coprocess launched without name input output descriptor well process pid stored variable called coprocgotchassince coprocess run asynchronously guarantee around finish entirely possible coprocess finish output processed closing write descriptor process case attempt shell read output result erroranother point remember file descriptor coprocess accessible process coprocess spawned inherited subshells like example command launched within paranthesis launched new subshell command launched part pipeline launched subshell following example serve case point print coprocess array pid print coprocess next command error coprocsubshellsh line print bad file descriptorlastly bash might print warning starting multiple coprocesses however bash starting multiple coprocesses behaves correctly despite warning twocoprocessessh line warning executecoproc coproc print still existsthe print coprocess array pid print coprocess pid second coprocess pid second coprocess output print coprocess hello worldthe output second coprocess goodbye worldconclusionas always valid argument made fact anything approaching level complexity probably better done pythoni valid argument favor bash preferable indeed advanced use case descriptor handling get somewhat fiddly however still reckon useful know bash advanced feature know bash
260,Lobsters,osdev,OS,"Lease-based, utilitarian resource management on mobile devices",https://blog.acolyer.org/2019/05/31/lease-os/,leasebased utilitarian resource management mobile device,case leasebased utilitarian resource management mobile device wasted energy un wise steward earn trust extra hour http orderlabioleaseos,case leasebased utilitarian resource management mobile device hu et al asplos chosen another energyrelated paper end week addressing problem many people relate apps drain battery leaseos borrows concept lease distributed system rather nice twist able reduce power wastage disruption application experience change required apps twist leaseos injects transparent proxy app powerhungry o resource app think control resource release cover proxy given lease traditional leasing scheme borrower request lease extension half problem apps requesting expensive resource really need instead o monitor wisely leased resource used app making good legitimate use resource lease transparently extended loses underlying resource tell whether app wise steward resource interesting question get severe type defect developer frequently introduce apps energy bug drain battery abnormally fast example wakelock mechanism android apps instruct o keep cpu screen wifi radio etc active stateoftheart runtime technique monitor app resource usage kill throttle apps usage exceeds threshold making heavy use resource necessarily imply misbehavior legitimate scenario usage justified eg navigation gaming wasted energy underlying abstract model resource usage mobile os askuserelease cycle app asks try acquire resource assuming resource granted app us resource work finally releasing app get resource really need forgets free thus holding onto resource much longer really need place excessive drain battery example mail app android bug whereby would enter infinite retry loop network disconnected mail server failed retry app would acquire wakelock causing severe battery drain betterweather app similar energy failure mode get gps signal eg phone inside building would keep searching nonstop never find signal graph onehour trace betterweather app running nexus phone inside building app spends time asking gps lock never get since app update display without location battery drain result benefit end user betterweather example misbehaviour ask phase mail case example misbehaviour use phase see chart holding wakelock long time actively using time cpu usage spike bottom chart ultralow utilization pattern consistent across different phone ecosystem experiment high utilisation necessarily mean thing good though disconnected network mail another failure mode use wakelock even higher usage cpu also high truth behind chart app stuck exception loop wakelock acquisition network request error handling without making progress utility end user zero un wise steward author identify four different class energy misbehaviour three detected automatically frequent ask behaviour fab app frequently try acquire resource rarely get long holding behaviour lhb app granted resource hold long time rarely us low utility behaviour lub app us granted resource long time lot work work use excessive use behaviour eub app lot useful work incurs high overhead frequent ask behaviour identified low resource request success ratio unsuccessful request time total request time long holding behaviour identified low usage hold time ratio resource usage time holding time low utility behaviour identified low utility rate utility score resource usage time excessive use behaviour hard separate desired behaviour though author analyse energy misbehaviour case across popular apps determine distribution cause according classification four type misbehavior prevalent fab lhb lub together occupy studied case eub occupies case majority fab lhb lub due clear programming mistake bug majority eub due design tradeoff nonbug earn trust leaseos transparently creates lease app first access object lease term lease holder right access resource instance without approval o end term o decides whether renew lease app explicitly release resource lease term ended immediately otherwise leaseos examines collected utility metric lease expires normal behaviour lease automatically extended misbehaviour lease enters deferred state extends lease delay r delay period underlying resource temporarily released reduce wasteful energy consumption continuous examinerenew model differentiates leaseos simple oneshot throttling solution statistic leaseos collect determine utility particular resource type follow pattern wakelock example leaseos examines ratio cpu wakelock holding time lowutility behaviour definition may app specific cooperative developer provide utility callback general heuristic still prove pretty useful eg frequency exception raised transparent lease proxy sit front protected resource coordinate lease manager gather stats make expirerenew decision app legitimately try use resource expired lease main difference see slowdown underlying resource reacquired also possible app see eg io exception network timeouts app already required handle tradeoff lease length short lease save energy lease management overhead empirical experiment leaseos set default lease term second default deferred interval r second app using resource efficiently lease manager increase lease term reverting back lease sign misbehaviour extra hour author reproduce energy bug case realworld apps evaluate leaseos android doze mode defdroid us simple throttling android doze mode defers app background cpu network activity device unused long time conservative trigger systemwide mode experiment doze mode forced kickin commandline adb interface otherwise take effect case leaseos significantly reduce wasted power consumption case achieving average reduction ratio case evaluated leaseos introduce negative usability impact testing apps legitimately make heavy use resource runkeeper spotify leaseos renews lease without interruption whereas pure throttling scheme three apps experienced disruption overhead leaseos le endtoend test one buggy gps app system playing music hour watching youtube one hour browsing minute keeping phone standby showed android ran battery around hour leaseos battery lasted hour find leaseos source code http orderlabioleaseos
261,Lobsters,osdev,OS,"TempleOS: 2 - god, the Random Number Generator",https://christine.website/blog/templeos-2-god-the-rng-2019-05-30,templeos god random number generator,templeos random number generator last post legitimately believed templeos temple lord yahweh actual documentation incredibly useless fifo datatype transparent compression redsea offer every word king james bible example drawing tarot card olin function second anyways link final code contact templeos,templeos god random number generator last post covered lot basic usage templeos post going significantly different going porting part templeos kernel webassembly live demo post may contain word used way place look blasphemous first glance blasphemy intended though unfortunate requirement covering part templeos kernel worth noting terry davis legitimately believed templeos temple lord yahweh templeos god official temple like solomon temple community focal point offering made god oracle consulted lot weird naming convention core part subsystem make lot sense grounded american conservativeleaning evangelistic christian tradition evangelical christian subjective experience comfortable okay idea direct conversation god denomination christianity enough get sent mental institution focusing philosophical aspect result exists code normally people christianevangelical view see god trinity trinity usually said made following equally infinite part god father yahweh god god son jesus god holy spirit entity responsible divination among thing templeos however part god father god son god holy spirit god random number generator god really simple heart however one sad case actual documentation incredibly useless warning incoherent link god really fifo entropy bit snipped definition god datatype c adamgodgodexthcz public class cgodglbls word wordfilemask wordfufflags numwords fifo snipped god equivalent following zig code would embedding templeos directly webpage ca nt figure yet please help const stack import std atomicstack const string zig const god struct word const bit stack field snipped cgodglbls related internals templeos specifically us globmask match filename transparent compression redsea offer ignore zig port curious though word list string actually point every word king james bible original intent code computer assist divination kind ranting link templeosholycxyz try explain technique use consult holy spirit reading microsecondrange stopwatch button press random number pick word passage since seeking word holy spirit come know god much better heard others explain example god said oracle war serviceman competing sound like immutable god planet hear religious people god venus god love mar god war dearly beloved god earth mammon false god money mar venus might useful word describe false god figure greatest challenge creator boredom would teenage male video game like war never happened christ said live sword die sword loving neighbor self said jesus unto put thy sword place take sword shall perish sword matthew asked god world perfectly god asked calling lazy god could make ai right god could make bot smart fact part god made bot manipulate every person life perfect justice happened terry davis legitimately believed code directly influenced holy spirit therefore terry could ask god question get response hammering one source entropy random number generator keyboard input way terry voice god everything wrote terry world perfectly god calling lazy system boot god get initialized content every word king james bible load word something like loop vocabulary list count number word number word boundary allocate integer array big enough word loop vocabulary list add word word array since vocabulary list pretty safely going change point omit first step const word embedfile vocabdd const numwordsinfile var alloc import std heapwasmallocator const god struct word const bit stack fn init god var result god undefined var stack stack init result try alloccreate god resultwords try splitwords word wordslen numwordsinfile resultbits stack return result snipped fn splitwords data const numwords const make bucket big enough god word var result const try allocalloc const numwords var ctr usize iterate wordlist one word per line var itr memseparate data n var done false done var val itrnext val type resolve val str reason last line file zerolength string strlen done true continue result ctr str ctr else done true break return result word loaded let look closely thing added removed stackfifo usage intended simple try grab byte god nt prompt public godbits numbits msgnull return n bit low entropy popup okay b numbits godfifo b remove bit fifo resres add bit result leftshift bit numbits care one le bit else insert bit picker godbitsins godgoodbits godpick msg return re usage simple bit bit godbits demo blog video actually also generic userspace function application call example god drawing tarot card let translate zig inside const god definition fn addbits self god numbits n void var var nn n loop bit n numbits numbits create new stack node pushing fifo var node alloccreate stack node catch unreachable node stack node next undefined data intcast nn selfbitspush node nn nn fn getword self god const const gotten mod selfgetbits numwordsinfile const word selfwords intcast usize gotten return word fn getbits self god numbits var var result numbits const n selfbitspop n optional type stack node resolve todo xe automatically refill data stack empty n nn result result intcast nndata result result else break return result nt best source entropy webassembly code let use olin function const olin import olinolinzig const resource olinresourceresource fn main void var god try godinit open standard output writing const stdout try resourcestdout const nl n godaddbits copypasted time original code ensure sufficient entropy const w godgetword var ignored try stdoutwrite wptr wlen ignored try stdoutwrite nl nllen run manually cwa cwa vmstats godwasm uncultivated reading file time vm init time vm gas limit vm gas used vm gas percentage vm syscalls execution time memory page yikes loading wordlist expensive alternatively arbitrary gas limit set way low good thing done boot still regardless templeos boot second anyways final product runnable via link please note currently supported bigendian cpu browser mozilla google totally dropped ball court trying load link probably crash browser hit run order run final code get output look something like pressing time special thanks following people whose code expertise like helped make happen share mastodon article posted fact circumstance may changed since publication please contact jumping conclusion something seems wrong unclear series templeos
262,Lobsters,osdev,OS,Project Oberon RISC5 CPU Emulator,https://pythonoberon.readthedocs.io,project oberon cpu emulator,python oberon pygame installing starting emulator screenshot,python oberon emulator written python project oberon risc processor pygame available open screen standard dimension x pixel also crude installing usual way pypi starting emulator downloaded code start emulator base directory use diskimg file run eight million cycle default around cycle screen background begin fill around cycle window content begin drawn option tell python interpreter drop interactive repl cycling emulator without script exit screen disappear want see something right away tiny binary loaded bootloader virtual serial port fill screen simple pattern vertical bar python oberon serialin fillscreenbin screenshot eight million cycle
263,Lobsters,osdev,OS,"Serenity OS: A love letter to '90s user interfaces, with a custom Unix-like core",https://github.com/SerenityOS/serenity,serenity o love letter user interface custom unixlike core,serenityos youtube channel githubio blog patreon github sponsor screenshot kernel feature system service library userland feature read documentation baseusrshareman build run serenityos build instruction opening issue issue policy communication hub serenityosdev author contributor license,serenityos graphical unixlike operating system computer serenityos love letter user interface custom unixlike core flatters sincerity stealing beautiful idea various system roughly speaking goal marriage aesthetic productivity software poweruser accessibility nix system u u based thing like andreas regularly post raw hacking session demo youtube channel sometimes write system githubio blog also patreon github sponsor would like show support way screenshot kernel feature kernel preemptive multithreading hardware protection smep smap umip nx wp tsd stack arp tcp udp icmp protocol filesystem posix signal purgeable memory proc filesystem pseudoterminals devpts filesystem filesystem notification cpu memory profiling soundblaster driver vmwareqemu mouse integration system service launchsession daemon systemserver compositing window server windowserver text console manager ttyserver dns client lookupserver network protocol server protocolserver softwaremixing sound daemon audioserver desktop notification notificationserver http server webserver telnet server telnetserver dhcp client dhcpclient library c template container ak event loop utility libcore graphic library libgfx gui toolkit libgui crossprocess communication library libipc htmlcss engine libweb javascript engine libjs markdown libmarkdown audio libaudio pci database libpcidb terminal emulation libvt outofprocess network protocol io libprotocol mathematical function libm elf file handing libelf posix threading libpthread higherlevel threading libthread transport layer security libtls http http libhttp userland feature unixlike libc userland shell pipe io redirection online help system terminal gui variant web browser browser c ide hackstudio irc client desktop synthesizer piano various desktop apps game color theme read documentation man page browsable outside serenityos baseusrshareman running serenityos use man terminal interface help gui interface build run see serenityos build instruction opening issue please see issue policy communication hub main hub serenityos freenode irc network also project mailing list serenityosdev author contributor many people listed landed commits project license serenityos licensed bsd license
264,Lobsters,osdev,OS,Urbit 2019-5 Roadmap,https://urbit.org/posts/2019-5-roadmap/,urbit roadmap,,
265,Lobsters,osdev,OS,File sharing over virtio-9p,https://mail-index.netbsd.org/current-users/2019/05/21/msg035855.html,file sharing,date prev date next thread prev thread next date index thread index old index file sharing http http home main index thread index old index,currentusers archive date prev date next thread prev thread next date index thread index old index file sharing hi following two patch enables netbsd guest running linux kvm share file host http http first patch export endpoint via character device eg second one extends puff talk server inside qemu via character device usage export directory host via xml part libvirt domain configuration export varliblibvirtexport directory tag test first entry minor number assigned typically filesystem typemount accessmodemapped source dirvarliblibvirtexport target dirtest address typepci filesystem boot log look like dev function virtio transport device rev feature indirectdesc allocated byte virtqueue size using byte entry indirect descriptor tagged test interrupting pin netbsd guest mount exported directory cu c tell interpret first argument character device file talk fun ozakir home main index thread index old index
266,Lobsters,osdev,OS,TempleOS: 1 - Installation,https://christine.website/blog/templeos-1-installation-and-basic-use-2019-05-20,templeos installation,templeos installation templeos ring terry davis choosing hardware fury pc speaker vm hypervisors virtualbox vmware setting vm templeos requires mb ram boot installation usage templeos bootloader using compiler next step contact templeos,templeos installation templeos public domain open source requires source code boot multitasking o processor without efi support fully cooperatively multitasked code run ring mean system call normally require context switch normal function call ram identitymapped sharing memory task easy passing pointer locking intrinsyc full documentation graphical diagram embedded directly source code outsider art artist art terry davis rip poor mental health struck train died hope peace however direct spite believe templeos immediately applicable lesson teach o compiler design want use blogpost series break genius separate insanity bit bit intended make fun mentally ill disabled otherwise incapacitated endorsement davis political view intended glorify preserve life work currently really grasp scope reason issue downloading templeos iso uploaded copy sum tosdistroiso choosing hardware templeos nt support much hardware o mostly relies hardcoded irq number vga graphic fury pc speaker standard ibm pc hardware like keyboard mouse choose actual hardware run option sadly limited hard disk controller like spray irq place best luck following hardware dell inspiron core quad gb ram mouse keyboard gb ide hdd honestly probably run templeos vm unstable left alone long period time vm hypervisors templeos work decently virtualbox vmware however vmware support pc speaker emulation may may essential properly enjoying templeos true form blogpost series using virtualbox practicality reason setting vm templeos bit o pick type version otherunknown name vm whatever want press continue templeos requires mb ram boot let safe give gig press continue ask want create new hard disk click create want virtualbox virtual hard drive click continue performance virtual hard disk irrelevant usecases dynamically expanding virtual hard disk okay feel better choosing fixed size allocation okay click continue iso o come mb default hard disk size gb way enough click continue vm hardware set installation templeos actually includes installer live cd power hardware stick cd click start within second vm compiles compiler kernel userland dump screen look conceptually familiar would like install hard drive press using virtualbox press nt prepared enter irq hard drive cd drive press key wait freeze happen installer take copying source code o compiler userland well compiling bootstrap kernel second ask want reboot press one final time make sure remove templeos live cd hardware booted instead new o usage templeos bootloader present helpful menu let choose want boot copy old boot record preserved install time drive c drive press templeos boot picking partition first boot requires dictionary uncompressed well housekeeping chore let thing templeos boot chore done see option take tour highly suggest going tour beyond scope article assume pressed n templeos boot denying tour using compiler templeos boot holyc prompt shell interface holyc similar c compiler difference shell repl holyc repl stupidly powerful templeos hello world hello worldn let make program disassemble way easier sound templeos fully featured debugger well open new file ed helloworldhc semicolon important templeos opening file templeos editor screen press altshifta kill autocomplete templeos sans autocomplete click x upper righthand corner close shell window templeos sans window finally press drag right side window maximize editor pane templeos full screen editor let put hello word example program press run templeos hello world file neat close shell window popped let put hello world code function helloworld hello world n helloworld press templeos hello world function let disassemble helloworld hello world n uf helloworld templeos hello world disassembled uf function also work anything else including thing like editor uf ed templeos editor disassembled red underscored thing look like link actually link source code function holyc compiler build thing internally keep sourcemap much like webapp sourcemaps gcc relates error runtime line code developer function compiles let look definition free templeos free function dig deeper kernel source code next step suggest next step go tour told ignore teach lot basic using templeos figure navigate filesystem hint dir cd work expect start digging documentation system source code hint one look demo c demo future blogposts series breaking apart nt really know suggest watching archived terry davis video youtube mental health issue start becoming really apparent intrusive content however decide watch suggest watching sober possible three coherent train thought need spend time detangling bunch gem use templeos hidden hill gem hope dig future blogposts fun well share mastodon article posted fact circumstance may changed since publication please contact jumping conclusion something seems wrong unclear series templeos
267,Lobsters,osdev,OS,GNU Guix 1.0.1 released,https://gnu.org/software/guix/blog/2019/gnu-guix-1.0.1-released/,gnu guix released,gnu guix released graphical installer installation image virtual machine image source binary announced embarrassing bug sometimes fail start longer create russian translation manual bug graphical installer system installation instruction operating system definition available systemwide lesson learned also oneliner system service specifically test system installation continuous integration service installation process newt code conclusion mailing list gnu guix gnuâ guix respect user freedom guile scheme,gnu guix releasedludovic may pleased announce release gnuâ guix version new version fix bug graphical installer standalone guix systemthe release come installation image virtual machine image tarballs install package manager top gnulinux distro either source binary guix user update running guix two week since announced week commits people already primarily bugfix release specifically focusing issue graphical installer standalone system embarrassing bug would lead graphical installer produce configuration basepackages omitted package field consequently freshly installed system would usual command p xfce would fail start reason see analysisthe wpasupplicant service would sometimes fail start installation image thereby breaking network access fixedthe installer allows toggle visibility password passphrases longer restricts lengththe installer create btrfs file systemsnetworkmanagerapplet part desktopservices thus readily usable gnome also xfcethe news file detail also minor bug fix guix environment guix search guix refresha couple new feature reviewed time make guix system dockerimage produce o image make easier use beforeguix system container new network option allowing container share networking access new package added package updatedtranslations updated usual glad announce complete russian translation manualthe release primarily motivated bug reported shortly release installed guix system graphical installer chance bug ended system usual gnulinux grep p path turn would also prevent xfce starting chose desktop environment systemwe quickly published note system installation instruction explaining work around issue first install package provide command along text editor choice example emacs vim guix install coreutils findutils grep procps sed emacs vimat point essential command would expect available open configuration file editor choice example emacs running root sudo emacs etcconfigscmchange package field add list globallyinstalled package configuration look like operatingsystem package append list specification package nsscerts basepackages reconfigure system new configuration effect guix pull sudo guix system reconfigure etcconfigscmif already installed perform step get core command backguix purely declarative give operating system definition available systemwide go ahead installs precisely exactly happened bug installer generated configuration passed guix system init part installation processlessons learnedtechnically bug fixed adding one line operating system configuration reconfiguring fix installer also oneliner nevertheless obviously serious bug impression user experience want offer serious bug go unnoticed several year guix number automated system test running virtual machine vms test primarily ensure system service work expected specifically test system installation installing raid encrypted device separate home using btrfs etc test even run continuous integration service search job unfortunately installation test target socalled installation process scriptable test graphical user interface consequently testing user interface ui manual process attention presumably focusing ui aspect actual installation test already taken care system test generated system configuration could syntactically correct definitely wrong usability viewpoint perhaps occur u end result issue went unnoticedthe lesson manual testing also look issue importantly need automated test graphical ui debian guix installer uis using newt toolkit debian test installer using code essentially answer question choice ui would present could adopt similar approach could test ui lower screen simulating key stroke ui testing notoriously tricky figure get thereconclusionour party bit spoiled bug sorry installation disappointing tried hope allow try see declarative programmable system configuration management like real value guix system graphical installer icing cakejoin u guix mailing list gnu guixgnuâ guix transactional package manager advanced distribution gnu system respect user freedom guix used top system running kernel linux used standalone operating system distribution machinesin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection used standalone gnulinux distribution guix offer declarative stateless approach operating system configuration management guix highly customizable hackable guile programming interface extension scheme language
268,Lobsters,osdev,OS,"9Front ""Skin of Evil"" Released",http://9front.org/releases/2019/05/16/0/,skin evil released,skin evil released http dash manual http http kernel driver compiler debugger library program documentation,skin evil released http dash manual online http print http thanks miron lukyanov kernel driver bootrc add option disable automatic configuration bootrc handle automatic ip configuration gbe medium bootrc fix rootdir rootspec handling thanks lucio kernel exec support binary kernel export freepages function used mmurelease kernel get rid tstktop ustktop end user address space kernel get rid kstksize alias kstack kernel get rid macro kernel get rid checkpagerefs debugging kernel include lock pointer error report stop spamming lockloop print panicing kernel insert memory barrier scheduler setting mach nil kernel remove ptclbsum dependency configs ktrace support qio handle common case trimblock bcm add uart driver dont touch line control uart enabled bcm call nil paddr dmaaddr return busdram dummy address bcm use paddr convert bus address physical vcore bcm dont assume physdram dmaaddr fix dmaioaddr bcm include sdmmc pi kernel configuration bcm list devswap devtab array bcm move confaddr parsing bootargsc simplify initcode start args handling bcm move fiq saved pc adjust lexceptions shared bcm move interrupt handling trapc irqc add irqc mkfile bcm move okay uartminic devarchc bcm make sure fiq enabled add experimental work progress kernel raspberry pi get rid usb workaround delay map framebuffer writethrough allow unaligned access provide idlehands function use movp instruction saving restoring register use exclusive monitor nrdy wake idlehands pc fix format multibootargs pc properly track dependency memh autogenerated apbootstraph rebooth target pc pci add amd fch lpc bridge southbridges pc devarch recognize amd ryzen model properly handle faulterror devdraw get rid hack make attachscreen return memdata devdraw simplify drawgen devip fix block list handling use proper minadvise devip fix fragment forwarding devip fix ip fragmentation handling issue header option devip handle packet big advise remove fragment header devip ignore icmp advise laggard fragment devip ignore reserved fragment offset bit devip ignore evil bit fragment info field devip loopback linklocal scope devip reject bad numeric port devip remove unused eipconvtetc ptclbsumc file devip simplify ip reassembly function getting rid ipfraghlen devip tcp respond finless acks timewait thanks barret rhoden devip use common code icmp handling advise devip use parseipandmask ipifc route control message parsing devip zero fragment offset reassembly remove tos magic cleanup devip avoid medium bindunbind kproc reader startup race simplify etherbind devip lock selftab ipselftabread remove unused field ipself devip make sure ifc bound ctl command devip remove unused c car qlock avoid potential deadlock ipifcregisterproxy devip reset speed delay bind adjust burst mtu change ifc nil check consistent error string devsd fix panic using delpart remove partition already removed devswap simplify panic writing swapfile fails devtls remove static already flag tlsinit function run audiohda add support geminilake audio intel nuc thanks samd audiohda recognize amd family hd audio controller fix thinkpad ethernet thanks mischief round rbsz multiple fix bogus fca write link detection use byte mtu datasheet work around spurious jumbo packet thanks fix multicast filter thanks aiju add intel ethernet controlller driver thanks igfx add support nusbaudio fix format usage nusbdisk implement bit lba readwrite command byte command nusbdisk unnecessarily unstall device nusbkb fix continuous scrollwheel delta reported thanks samd nusbusbd fix dump u formatter nusbusbd stop sending port enable command nusbusbd work around device ignore high byte wlength control transfer read nusbrc detect keyboardio model appears multifunction device iad csp thanks samd usbdwc enable slowbuilkin workarround improve split transaction timing handle erroring sleep debugging usbxhci make stuck usb transaction interruptible wifi fix format wifictl compiler debugger add c compiler assembler thanks charles forsyth fix indexreg operation fix post increment operand emit sxtw nonregister source operand fix long vlongpointer conversion avoid negative immediate offset fix registerization vlong constant add linker charles forsyth initial sync add missing afmovd extautoloreg operand optab deal huge negative register offset fix lacon avoid dword constant pool sign extend fix bitcon instruction selection encoding fix vlong constant literal pool nonmov instruction bic bimm variant implement movp instruction dont substitute destination register contained movm reglist c fix safe node type func func sugen cc fix format usage lexer token long error acid add support dtracy avoid dmachlock race dtracy avoid pointer integer truncation warning dtracy fix dtracy fix conditional branch generation library ape initial support ape fix malloc deal memory bit system fix zero msize abort due unknown version thanks kvik libauthsrv authdial smprint memory autism libc sand edge macro libc initial support libc fix nan check precedence bug modf thanks burnzez libc provide assembly version memmove memset libc use movp instruction memmove memset libip reject ipmask form address libip move optimized assembly version ptclbsum kernel libip libip prefer myipaddr libip replace new parseipandmask libip return parseipmask parseipandmask mask argument set libmach initial support libmach support movp instruction disassembly libmemdraw handle memarc phi phi keep alpha bound libmemdraw remove static point use zp instead libmp add dummy mkfile libndb provide parseipmask argument subnet use snprint instead sprint libpanel fix format plsnarfentry libsec dummy mkfile libthread initial support program abaco fix format findctype atazz fix format special command processing auxdepend fix format path concatenation auxstatusmsg fix format auxwpa fix format debug print awk fix nextfile crash thanks leetspete cifs fix pruning directory entry thanks steve simon cwfs fix format cmdprintconf dossrv make glong return ulong handle getsect error dostat dossrv use bit vlong sector g support g avoid stupid shift casting hgfs fix usage walk use parseipandmask use ipvmp instead ipayiya use parseipandmask use ipvmp instead ipcifsd fix format xdirflush path ipdhcpd add rootserverip read lookupip thanks ipdhcpd change swap rootserver thanks ipdhcpd provide argument parseipmask ipdhcpd remove undocumented dhcpgroup mechanism group related ndb attribute together ipdhcpd send vendor ndb attribute available thanks ipipconfig ndbdns libndb handle parseipmask error ipipconfig format ipmask instead ipipconfig use default loopback ipipconfig use ewrite enable routing command sendra ipipconfig use new parseipandmask function ipppp fix format debug print ippppoe fix format debug print iprip use new parseipandmask function ipsocksd fix format dialstring iptftpd fix format homedir path iptinc bit rsa passive pmtu discovery fix udpfd close race cleanup iptinc fix mistake previous commit iptinc honor tcponly indirectdata setting script support prefer incoming udp connection iptinc use new parseipandmask parse subnets use ipcmp ipmove remove prefixlen iptorrent fix format dialstring iptorrent avoid trying fetch block past file mk fix closing random fd uninitialized stack variable thanks burnzez mycroftiv ndbdns provide argument parseipmask use snprint instead sprint postscript use pi python support python clean nuke pgen libpythona cpu python remove objtypelibapelibpythona track graminith dependency remove graminitc ratfs implement support replace parseipandmask rc clear redirections rfork f rfcfdg ssh add experimental mux mode ssh assume error message ascii format number complete rune byte ssh implement w option making remote tcp connection ssh print usage unknown flag cleanup sshnet actually make sure ssh established connection exiting main proc sshnet allow port sshnet bring back sshnet using ssh mux mode sshnet leak dialing connection connect ctl write get interrupted sshnet leak error string sshnet fix eof close handling use proper packet size cleanup sshnet fix memory leak sshnet fix write count ctl message writes sshnet get rid announced state simplify sshnet implement listen port forwarding sshnet pas open failure error message simplify sshnet reduce memory consumption lowering stack size tc clean old port code avoid writing stdout troff fix m mug thanks aksr upasfs put message lru uncached upasfs fix format usage upasfs fix infinite loop putcache upasfs include mkupas mkfile last get default target upasfs release mailbox syncing lock encountering error upasfs remove unused function upasned fix format parsesearch improve mkfile upasscanmail fix format xprint improve mkfile upassmtp fix format challenge smtpcram upassmtpd implement support ip blacklist replace parseipandmask uptime rewrite awk vmx build vmx vmx check draw initialization error vt dont make f procs hang around closing rio window vt fix sendnchars walk remove unused depth argument dofile wadfs avoid comma operator macro webfs bracket literal host host header webfs properly handle url path debug print documentation dhcpd ndb group related ndb attribute together dhcpd ndb update documentation thanks dtracy fix print reference ip document tcp ctl close command mach fix byteswapping function signature memdraw remove reference iprint add usb section documenting various usb option boot clarify use rootdir rootspec rsa add example tinc thanks qwx segment use bind c example thanks henesy ssh add sshnet reference sshnet add documentation sshnet fix user host syntax add bug section add ip reference thread threadsetname take fmt string added walk add mkfile syslibplumbbasic make plumbing page bookmark work relative path thanks tobias heinicke fix dst beginend timestamps south australia fortune open source may safe super excellent moderator inststartether skip auto configuration specified distmkfile auxstub avoid overbinding usr case alias distmkfile add target raspberry distproto add libndbdhcp libnews directory thanks lyndon rootstub add syslibdistndbdhcp rootstub create arm mips directory usrglendabin thanks timclassic rootstub create directory vgadb add panel entry lib update pci database timezones add india thanks
269,Lobsters,osdev,OS,ELK MusicOS,https://www.mindmusiclabs.com/,elk musicos,elk introduces aloha new service real time remote music creation performance,elk introduces aloha new service real time remote music creation performance play teach collaborate together live sync different location new aloha service run highspeed internet network transforming music creation performance today clear path future
270,Lobsters,osdev,OS,Interactive File Managers on CP/M,http://techtinkering.com/articles/interactive-file-managers-on-cpm/,interactive file manager cpm,early program cleanup wash sweep nsweep nsweep apparently vfiler vfiler basic information video interactive file manager,cpm number interactive file manager used make easier handle common file operation rather using command line driven command supplied cpm dir era pip ren type early program one first interactive file management program cleanup simple program went file directory asked whether wanted erase view file turn came wash michael j karas micro resource state accompanying documentation inspired cleanup like cleanup wash present file user turn circular list also allows go back list wash add extra functionality well ability rename copy file well send file printer punch device sweep robert fisher us basic circular file presentation wash biggest addition ability tag file mass copy erase also support user area allowing switch different user area copy file back forth nsweep dave rand created nsweep similar sweep much faster smaller generally polished also add extra feature move file one user area another using rename function without copy delete squeeze unsqueeze file display attribute file listing highlighting character filename allows change attribute nsweep great file manager lot feature pretty popular one time however bug used cpm plus copying file disk nt ready corrupt source file part source disk shame unofficial release purported fix apparently introduced serious bug documentation gary conway author state much liked nsweep wanted add extra thing realtime clock better printing support end decided write version sweep style program extra feature wanted result program similar nsweep later version also added support lbr file allowing view extract member good alternative nsweep unfortunately bug move file one user area another deletes file source user area nt move new user area frank gaudé state documentation based common idea presented cleanup wash sweep much smaller program nsweep therefore le feature however present nice clean interface user well vfiler vfiler richard conn follows footstep sweep clean sic disk try make user friendly using direct cursor control create screen oriented file manipulation utility instead going one file next utility vfiler present screen file name move using wordstar cursor control key requires processor run feature similar basic information basic information utility may find useful namesize kb compatible video interactive file manager see file manager action video
271,Lobsters,osdev,OS,Spunky: A kernel using Ada - Part 1: RPC,https://genodians.org/m-stein/2019-05-09-spunky-1,spunky kernel using ada part rpc,spunky kernel using ada part rpc martin stein github branch github issue executing ada kernel preparing translation ada reimplementing rpc ada bringing c ada world together running kernel ada implementation rpc,spunky kernel using ada part rpc may martin stein series article illustrate hobby project mine trying create kernel genode written ada project writing kernel scratch rather successively take part existing basehw kernel translate ada thus design mainly follows approach taken basehw able test already translated part link together remaining part basehw interfacing ada c part done level object method time codebase new kernel become ada le c maybe later work also lead formal verification spark happy ada let go find code behind article github branch interested recent state work may look github issue executing ada kernel thinking ada translation enable compilation execution ada code kernel far ada used userland component simply link spark library runtime support nt option kernel least fact library shared wrote little ada hello world basehw tried execute within kernel start decided put ada source new subdirectory basehw srccoreada postpone work creating new repository make work started adding adaruntime ingredient spark library library import corehw library adapt path new dependency could longer implicitly refer original repository libports within short time working preparing translation ada first subject translation choose rpc state machine basehw called ipc node c implementation unit pretty good abstraction rest kernel model interface nt big first step reviewed c implementation recognized several design detail wanted change order make fit better ada world adaption beforehand working implementation would add error potential translation process thing ipc node virtual method overridden thread class inherited ipc node admittedly nt know whether virtual method ada overridden c impossible least would complicated thing plus experience reducing use inheritance nt bad thing thus ipc node became member thread class hold reference thread object order call previously virtual method another annoying fact ipc node also transmission message content attached capability protection domain another implied ipc node needed know utcb layout protectiondomain interface capability management could avoided without big modification making concern thread class let ipc node concentrate merely state machine behind rpc third adaption arose two fact ada procedure nt return value better compatibility spark nt want function writable argument mean subprogram ca nt modify argument return value time case original ipc node solved replacing original method two new one one modification one return desired value made clear name order call reimplementing rpc ada preparation started reimplementing ipc node semantics new ada package ipcnode object layout represented private record type ipcnodeobjecttype constructor destructor represented procedure ipcnodeinitializeobject ipcnodedeinitializeobject first argument ada subprogram representing c method object c method constant first argument ada subprogram otherwise c method store reference object first argument ada subprogram null access object type avoids problem different access type scope ipc node internally also us queue ipc node reimplementation class private package ipcnodequeue using pattern mentioned tried implement queue also generic package able reuse item type nt work yet wherever ipc node call method thread object skipped call instead left comment place remind add call later way able skip detail cada interfacing completely reimplementation step one interesting detail reimplementation subprogram ipcnodeforeachhelper c function template take lambda function applies multiple ipc node lambda function fact always method thread class surprisingly work fine using subprogram access type ada although accessed subprogram c method bringing c ada world together ada ipc node compiling quite effort treat warning error style warning enabled wanted integrate rest basehw kernel see whether work keep thing clear possible put c gluecode extra package name starting cpp instance package ipcnode accompanied package cppipcnode public interface ccompliant type subprogram cppipcnode translate ccompliant type type natural ada call corresponding subprogram ipcnode later also used fulfill precondition ipcnode package c world replaced original ipc node placeholder still declares public ipcnode interface lack implementation also contains member variable except byte array bloat corresponding object size needed ada world subprogram cppipcnode exported symbol placeholder method c ipcnode object used c world usual implementation stay ada ada hand nt deal memory management reference sufficient object space byte array always handed c side package therefor pure last thing missing integration thread call postponed earlier added new package cppthread whose public interface declares subprogram called ipcnode import implementation c thread class make whole interfacing bit safer finally added initial check assertvalidobjectsize c world us ada subprogram cppipcnodeobjectsize ensure placeholder size sufficient running kernel ada implementation rpc say thanks almost pedantic need correctness ada compiler sheer endless chain complains kept throwing final image worked box put big smile face continued
272,Lobsters,osdev,OS,Network Redirections in Bash,https://www.anmolsarma.in/post/bash-net-redirections/,network redirections bash,network redirections bash tech linux redirc libshnetopenc note differently,network redirections bash may tech linux month ago reading man page recvmmsg came across snippet true echo random sleep done advertised sends udp datagram containing random number port every m recall ever seeing devudp bit surprised worked happens l able access file written l access file directory puzzled intrigued echoed foo bar baz reached strace socket afinet sockdgram ipprotoudp connect safamilyafinet sinporthtons sinaddrinetaddr fcntl fgetfd fcntl fdupfd fcntl fgetfd fcntl fsetfd fdcloexec close fstat write foo bar bazn seemingly normal udp socket created written using regular sycall interface refuted initial suspicion kind special file backed kernel involved actually creating socket peek bash code answered question redirc list patternvalue pair filename redirection code handle specially static stringintalist redirspecialfilenames defined havedevfd devfd rfdevfd endif defined havedevstdin devstderr rfdevstderr devstdin rfdevstdin devstdout rfdevstdout endif defined networkredirections devtcp rfdevtcp devudp rfdevudp endif char null redirection involving devudp handled specially bash us bsd socket api create socket libshnetopenc open tcp udp connection host port serv us traditional bsd mechanism return connected socket error static int host serv typ char host serv int typ struct inaddr ina struct sockaddrin sin unsigned short p int e getaddr host ina internalerror host unknown host errno einval return getserv serv typ p internalerror invalid service serv errno einval return memset char sin sizeof sin sinsinfamily afinet sinsinport p sinsinaddr ina socket afinet typ sockstream sockdgram syserror socket return connect struct sockaddr sin sizeof sin e errno syserror connect close errno e return return mean actually make http request using bash exec printf get checkipamazonawscomrnconnection closernrn tail curl needed jk apart bash version configuration packaged ubuntu ksh support network redirections ash csh dash fish zsh think actually use network redirections fun little rabbit hole dive note code snippet bash licensed snippet man page licensed differently
273,Lobsters,osdev,OS,I/O Is Faster Than the CPU – Let’s Partition Resourcesand Eliminate (Most) OS Abstractions,https://penberg.org/parakernel-hotos19.pdf,io faster cpu let partition resourcesand eliminate o abstraction,,obj linearized l h e n endobj obj type xref length filter flatedecode decodeparms column predictor w index info r root r size prev id stream b endstream endobj obj lang en name r openaction r outline r pagemode useoutlines page r type catalog viewerpreferences displaydoctitle true endobj obj filter flatedecode length stream b e endstream endobj obj annots r r r r r r r r r r r r r r content r mediabox parent r resource r type page endobj obj bbox filter flatedecode formtype ptexfilename compilefiguresparakernelpdf ptexinfodict r ptexpagenumber resource colorspace r r font r procset pdf text imageb imagec imagei xobject r r r r subtype form type xobject length stream osp
274,Lobsters,osdev,OS,Light-Weight Contexts: An OS Abstraction for Safety and Performance (2016),https://www.usenix.org/system/files/conference/osdi16/osdi16-litton.pdf,lightweight context o abstraction safety performance,,obj stream e sq ju u dasjn l b x c j l zm zm p띆é r vl к al uڴ oz z v㒾 taޱk e e z zi p zńg e g q u e kr ǫznߊ w c g e r x r k kp iz
275,Lobsters,osdev,OS,Unikernels: The Next Stage of Linux’s Dominance,https://www.cs.bu.edu/~jappavoo/Resources/Papers/unikernel-hotos19.pdf,unikernels next stage linux dominance,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڥ uyyyyg զ x n q ƞl kt b
276,Lobsters,osdev,OS,Life of a binary (2017),https://kishuagarwal.github.io/life-of-a-binary.html,life binary,life binary note gcc elfutils preprocessing include stdioh e gcc gcc file dn rodata globl type cfi rbp b c b b edx eax eax c c esi dn edi esi edi edi esi c printf printf size main currentaddressof line address main function ident comment notegnustack c gcc elf elf header h eureadelf program header program header program header text rodata dn data bs data int arr strtab symtab relatext eureadelf objdump relatext printf printf relocation table loader loader relatext printf relaehframe printf printf text text printf plt printf libc plt got execev program header table elf header load load load text rodata load got interp interp interp static procedure linkage table global offset table got got plt plt plt plt plt plt plt got got plt got plt load got load article,life binary written april kishu agarwal almost every one must written program compiled ran see fruit hard labour feel good finally see program working make work someone else thankful compiler course assuming working compiled language interpreted one also much hard work behind scene article try show source code write transformed something machine actually able run choosing linux host machine c programming language concept general enough apply many compiled language note want follow along article make sure gcc elfutils installed local machine let start simple c program see get converted compiler program creates two variable add print result screen pretty simple huh let see seemingly simple program go finally get executed system compiler usually following five step last step part o font style fontsize preprocessing font font style fontsize compilation font font style fontsize assembly font supported viewer supported viewer let go step sufficient detail font style fontsize color ffffff preprocessing font font style fontsize compilation font font style fontsize assembly font supported viewer supported viewer first step preprocessing step done preprocessor job preprocessor handle preprocessor directive present code directive start process first remove comment code comment human readability find command command say code used include directive simply say preprocesssor copy stdioh file paste file current location see output preprocessor passing e flag gcc compiler gcc e samplec would get something like following font style fontsize color ffffff preprocessing font supported viewer font style fontsize assembly font supported viewer supported viewer confusingly second step also called compilation compiler take output preprocessor responsbile following important task pas output lexical analyser identify various token present file token literal present program like int return void lexical analyser also associate token type token whether token string literal integer float token pas output lexical analyser syntax analyser check whether program written way satisfy grammar rule language program written example raise syntax error parsing line code b since missing one operand pas output syntax analyser semantic analyser check whether program satisfies semantics language like type checking variable declared first usage etc program syntactically correct source code converted assembly intructions specified target architecture default generates assembly machine running suppose building program embedded system pas architecture target machine gcc generate assembly machine see output stage pas flag gcc compiler gcc samplec would get something like following depending upon environment know assembly language look pretty scary first bad take time understand assembly code normal high level language code given enough time surely read let see file contains line beginning assembler directive file denotes name source file used debugging purpose string literal source code dn resides rodata section ro mean readonly since read string compiler named string later refer code whenever see label starting l mean label local current file visible file globl tell main global symbol mean main called file type tell main function follows assembly main function ignore directive starting cfi used call stack unwinding case exception ignore article know let try understand disassembly main function supported viewer supported viewer main function callfig supported viewer font style fontsize rsp rbp font supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer supported viewer setting local variablesfig supported viewer saving caller function frame pointerfig supported viewer must knowing call function new stack frame created function make possible need way knowing start caller function frame pointer new function return push current frame pointer stored rbp register onto stack move current stack pointer base pointer becomes current function frame pointer fig depicts state pushing rbp register fig show previous frame pointer pushed stack pointer moved current frame pointer local variable program type int machine int occupies byte need byte space stack hold local variable way create space local variable stack decrement stack pointer number byte need local variable decrement stack grows higher address lower address see decrementing instead reason space allocated chunk byte even local variable space byte would allocated stack done performance reason architecures see fig see stack laid right code pretty straight forward compiler used slot storage variable b c move value address variable b respectively prepare addition move b value edx register value register eax register result addition stored eax register later transferred address c variable prepare printf call firstly value c variable moved esi register address string constant dn moved edi register esi edi register hold argument printf call edi hold first argument esi hold second argument call printf function print value variable c formatted integer value point note printf symbol undefined point would see printf symbol get resolved later article size tell size main function byte main expression symbol mean address current line expression evaluates currentaddressof line address main function give u size main function byte ident tell assembler add following line comment section notegnustack used telling whether stack program executable mostly value directive null string tell stack executable font style fontsize color ffffff preprocessing font supported viewer supported viewer supported viewer supported viewer right program assembly language still language understood processor convert assembly language machine language work done assembler assembler take assembly file produce object file binary file containing machine instruction program let convert assembly file object file see process action get object file program pas c flag gcc compiler gcc c samplec would get object file extension since binary file able open normal text editor view content tool disposal find lying inside object file object file could many different file format focussing one particular used linux elf file format elf file contains following information elf header program header table section header table data referred previous table elf header contains meta information object file type file machine binary made version size header etc view header pas h flag eureadelf utility listing see file program header fine program header present executable file shared library see program header link file next step section let see section use flag need understand whole listing essentially section list various information like name section size section offset section start file important section use following text section contains machine code rodata section contains read data program may constant string literal may used program contains dn data section contains initialized data program empty since initialized data bs section like data section contains uninitialized data program uninitalized data could array declared like int arr becomes part section one point note bs section unlike section occupy space depending upon content bs section contain size section nothing else reason time loading needed count byte need allocate section way reduce size final executable strtab section list string contained program symtab section symbol table contains symbol variable function name program relatext section relocation section later also view content section pas corresponding section number eureadelf program also use objdump tool also provide dissembly section let talk little detail relatext section remember printf function used program printf something defined ourself part c library normally compile c program compiler compile way c function call bundled executable thus reduces size final executable instead table made symbol called relocation table later filled something called loader discus loader part later important thing look relatext section would find printf symbol listed let confirm ignore second relocation section relaehframe exception handling much interest u let see first section see two entry one printf symbol entry mean symbol used file name printf defined symbol located file offset start text section let check offset right text section see call instruction offset stand opcode call instruction followed byte offset correspond printf function actual address right later see location actually hold printf address indirectly call using something called plt table cover part later font style fontsize color ffffff preprocessing font supported viewer supported viewer supported viewer supported viewer thing done till worked single source file reality rarely case real production code hundred thousand source code file would need compile create executable step followed till would compare case well step would remain source code file would individually get preprocessed compiled assembed would get separate object code file end source code file written isolation must function global variable must defined file used different location file job linker gather object file go track symbol file defines symbol us could find information symbol table object file gathering information linker creates single object file combining section individual object file corresponding section relocating symbol resolved case collection source file one file since use printf function c library source file dynamically linked c library let link program investigate output gcc samplec go much detail since also elf file saw new section one thing note saw object file got assembler address saw relative linked file pretty much idea piece go thus examine output stage contains absolute address also stage linker identified symbol used program us symbol defined symbol linker map address definition symbol usage symbol still exists symbol yet resolved point one printf symbol general symbol either externally defined variable externally defined function linker also creates relocation table created assembler entry still unresolved point one thing know function data use library statically linked dynamically linked static linking mean function data library would copied pasted executable whereas dynamic linking function data copied executable thus reducing final executable size libray facility dyamic linking library must shared library file normally common library used many program come shared library one libc library libc used many program every program started statically link point would many copy code occupying space memory dynamic linking save problem moment one copy libc would occupying space memory program would referencing shared library make dynamic linking possible linker creates two section object code generated assembler plt procedure linkage table got global offset table section cover section come loading executable section come useful actually load executable font style fontsize color ffffff preprocessing font supported viewer supported viewer supported viewer supported viewer time actually run executable file click file gui run command line indirectly execev system call invoken system call kernel start work loading executable memory remember program header table useful would kernel know find table file well information could found elf header always start offset file done kernel look entry type load load memory space process see listing two entry type load also see section contained segment modern operating system processor manage memory term page computer memory divided fixed size chunk process asks memory operating system allots number page process apart benefit managing memory efficiently also benefit providing security operating system kernel set protection bit page protection bit specifies whether particular page read could written executed page whose protection bit set read modified thus prevents intentional unintentional modification data read page also one benefit multiple running process program share page since page read running process modify page thus every process would work fine set protection bit somehow would tell kernel page marked read could written executed information stored flag entry notice first load entry marked r e mean segment could read executed modified look see section come segment see two familiar section text rodata thus code readonly data read executed modified happen similary second load entry contains initialized non initialized data got table later marked rw thus read written executed loading segment setting permission kernel check interp segment statically linked executable need segment since executable contains code need dynamically linked executable segment important segment contains interp section contains path dynamic linker check interp segment statically linked executable passing static flag gcc compiler checking header table resulting executable case would find one point dynamic linker path similarly executable kernel would start loading shared object reading header finding segment loading memory space current program statically linked executable needed kernel would given control program kernel give control dynamic linker push address main function called stack dynamic linker finish job know hand control understand two table skipping long procedure linkage table global offset table closely related function dynamic linker might two type relocation needed program variable relocation function relocation variable externally defined include entry got table function externally defined include entry table essentially got table entry externally defined variable well function plt table entry function reason two entry function clear following example let u take example printf function see table work main function let see call instruction printf function fe ff ff callq call instruction calling address part plt section let see externally defined function entry plt section look three instruction except first entry special entry see use later find jump value contained address address entry got table let see content address magic happens except first time printf function called value address would actual address printf function c library would simply jump location first time something else happens printf function called first time value location address next instruction plt entry printf function see listing stored little endian format location plt entry push instruction push onto stack plt entry push instruction push different number denotes offset printf symbol relocation table push instruction followed jump instruction jump first instruction first plt entry remember told first entry special dynamic linker called resolve external symbol relocate jump address contained address got table address contain address dynamic linker routine handle relocation right entry filled address filled linker program actually run kernel call dynamic linker routine called linker would resolve symbol pushed earlier case external shared object put correct address symbol got table printf function called consult linker directly jump plt printf function c library process called lazy loading program may contain many external symbol may call one run program symbol resolution deferred till actual use save u program startup time see discussion never modify plt section got section plt section first load segment marked read got section second load segment marked write dynamic linker work skipped lot gory detail interested knowing detail checkout article let go back program loading already done work kernel loaded loadable segment invoked dynamic linker left invoke main function work done linker finish call main function get following output terminal friend bliss thank reading article let know liked article suggestion comment section please feel free share feel free share
277,Lobsters,osdev,OS,Is It Time to Rewrite the Operating System in Rust?,https://www.youtube.com/watch?v=HgtRAbE1nBM,time rewrite operating system rust,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature time rewrite operating system rust youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature time rewrite operating system rust youtube
278,Lobsters,osdev,OS,MILS: Architecture for High-Assurance Embedded Computing (2005),http://static1.1.sqspcdn.com/static/f/702523/9277704/1288928419267/200508-Vanfleet.pdf?token=ZYlBZSpRPQPLGIn2wwrYaiG8X6w%3D,mil architecture highassurance embedded computing,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream l endstream endobj obj endobj obj procset pdftext extgstate typepage endobj obj endobj obj endobj obj endobj obj stream r bk x l
279,Lobsters,osdev,OS,The Eclipse Operating System: Providing Quality of Service via Reservation Domains,https://www.researchgate.net/publication/2634219_The_Eclipse_Operating_System_Providing_Quality_of_Service_via_Reservation_Domains,eclipse operating system providing quality service via reservation domain,,cation coexist batch application samesystem without change applicationswe also described new scheduling algorithm movetorear list scheduling mtrls providesfairness delay bound cumulative service guarantee explained qos parameter important rest paper described eclipse anew experimental operating system implementsreservation domain mtrls scheduling eclipsecan schedule three type resource cpu disk ioand physical memory working set experimental result indicate eclipse provide delay bound andcumulative service bound overload situation wealso showed mtrls prefers lessgreedy process mean automatically provides better performance many case shown experiment wecompared mtrls priority scheduling andwith weighted roundrobin scheduling mtrls provided superior result several case illustrateda simple implementation mtrls appendixmore time efﬁcient implementation mtrls arepossible use complex data structuresour ongoing work concentrate extending thereservation domain approach distributed environment multiple client server investigating hierarchical scheduling reservation domain developing new scheduling algorithm porting reservation domain mtrls popular operatingsystems linux freebsdacknowledgmentsthe author would like thank ron phelps helpingwith programming experimentsreferences j bruno e gabber h saran silberschatz closedloop packet source cumulativeservice technical report aug j bruno e gabber silberschatzmovetorear list scheduling new scheduling algorithm providing qos guarantee proceeding ofacm multimedia seattle washington november demers keshav shenker design andanalysis fair queuing algorithm proceedingsof acm sigcomm austin texas september september p goyal x guo h vin hierarchical cpuscheduler multimedia operating system proceeding usenix symposium operatingsystem design implementation seattle washington october october mbjones cpu reservation time constraint efﬁcient predictable scheduling independent activity proceeding acm symposium operating system principle sosp page saintmalo france october leslie mcauley r black roscoe p braham evers r fairbairns e hyden design implementation operating system support distributed multimedia application ieee journalon selected area communication september c mercer savage h tokuda processor capacityreserves operating system support multimedia application proceeding ieee international conference multimedia computing system may j niehand lam design evaluationof smart scheduler multimedia application inproceedings acm symposium operatingsystems principle sosp page saintmalo france october r rastogi silberschatzellinicontinuous medium storage server kluwer academic publisher plan programmer manual second edition volume computing science research center belllabs murray hill nj isbn k parekh r g gallager generalized processorsharing approach ﬂow control integrated single node case ieeeacm transactionson networking page june r pike presotto dorward b flandrena k thompson h trickey p winterbottom bell lab computing system journal ofthe usenix association summer stoica etal proportional share resource allocation algorithm realtime timeshared system proceeding ieee realtime system symposium december thorup ram priority queue proceedingsof annual acmsiam symposium discrete algorithm page atlanta january ian wakeman atanu ghosh jon crowcroft implementing real time packet forwarding policy usingstreams proceeding usenix technical conference page new orleans louisiana c waldspurger w weihl stride scheduling deterministic proportionalshare resource managementtechnical report mit laboratory computer science june carl waldspurger william e weihl lotteryscheduling flexible proportionalshare resource management first symposium operating system design implementation osdi page montrey california november
280,Lobsters,osdev,OS,Efficient and Safe Execution of User-Level Code in the Kernel (2005),http://www.fsl.cs.sunysb.edu/docs/kbcc-ngs05/main.html,efficient safe execution userlevel code kernel,efficient safe execution userlevel code kernel erez zadok sean callanan abhishek rai gopalan sivathanu avishay traeger stony brook university abstract introduction system call optimization related work system call consolidation compound system call status future work runtime validation kernel code related work kefence event monitoring status future work conclusion acknowledgment reference footnote h,efficient safe execution userlevel code kernel erez zadok sean callanan abhishek rai gopalan sivathanu avishay traeger stony brook university abstract project two goal first goal improve application performance reducing context switch data copy either running select section application kernelmode creating new efficient system call second goal ensure kernel safety violated running userlevel code kernel implementing various hardware softwarebased technique runtime monitoring memory buffer pointer well higherlevel osspecific construct spinlocks reference counter latter technique also used code written specifically o prototyped several technique certain application demonstrate performance improvement high moreover kernel safety check show overhead little introduction software development hard kernel code development harder program written user space tool available develop debug one code developer however would like develop run application kernel perform better overhead due context switching data copy kernel user address space eliminated kernel debugger even available unsuitable debugging race condition timingrelated issue goal project combine best world allow user develop debug code userlevel running code inside kernel achieve developing kernelaware c development environment kgcc kernel infrastructure work kgcccompiled code well host useful utility compilation system static dynamic component improve application performance use two approach first mark code instruct compiler pack code segment run time single small buffer make available kernel using speciallymapped physical memory instruct kernel execute code segment directly kernelmode second captured systemcall trace many commodity user program graphical environment web browser longrunning daemon eg sendmail apache even small program like binls analyzed trace located number frequentlyexecuted sequence new unified system call would efficient implemented benchmarked sequence running userwritten code inside o requires safety kernel environmentand hence user applicationsnot violated therefore substantial part research focus technique make kernel code safer run technique developing applicable userlevel code executed kernel also code written directly kernel longrunning user level program provide important privileged service must run reliably possible eg ecommerce application improve kernel safety use three approach integrating kgcc first used hardwarebased technique segmentation used part userlevel boundsprotecting library electric fence linux kernel electric fence protects buffer overflow underflow placing buffer page boundary inserting protected guardian page boundary access guardian page result hardware pagefault second used softwarebased technique ported gnu boundschecking compiler bcc linux kernel bcc includes boundschecking test also pointer checking validation mallocfree checking third enhancing kgcc include osspecific test kgcc check validate run time proper use kernelspecific aspect semaphore spinlocks reference count higherlevel invariant instrumenting lot kernel code could add overhead considering technique turning certain check using simple heuristic number time particular check executed eventually hope develop tool technique make kernel code development easy userlevel code making future operating system userlevel application efficient safe paper organized follows section discus technique speeding application invoke system call section present technique verifying kernel code safety section concludes system call optimization longrunning server application easily execute billion common dataintensive system call day exchange providing secure uniform interface user application request service kernel system call incur large overhead due data copy across userkernel boundary context switch lessen penalty two way first analyze system call invocation system extract commonlyused sequence develop new system call perform task given sequence reduces context switch data copy implemented several system call benchmarked estimate benefit technique second introduce new framework compound system call cosy enhance performance application cosy provides mechanism execute dataintensive code segment kernel safely cosy encodes c code segment containing system call compound structure kernel executes aggregate compound directly thus avoiding data copy user space kernelspace help cosygcc compiler regular c code use cosy facility minimal change cosygcc automatically identifies encodes zerocopy opportunity across system call ensure safety kernel use combination static dynamic check also exploit kernel preemption hardware feature segmentation implemented system instrumented dataintensive application database access pattern benchmark show performance improvement cpubound application related work networking community long known better throughput achieved exchanging data repeatedly smaller unit example large number readdir operation followed many getattr operation compound operation introduced client may encapsulate several operation processing aggregation provide performance benefit slow network channel context system call slow channel prohibit user application getting optimal performance context switch data copy many internet application http ftp server often perform common task read file disk send network remote client speed common action aix linux created system call called sendfile microsoft ii similar transmitfile function http server using system call report performance improvement ranging cassyopia project suggested profile addressspacecrossing behavior component address space different machine compiler reduce number crossing order improve performance zerocopy well known technique share data instead copying ibm adaptive fast path architecture aim improve efficiency network server zerocopy also used file data enhance system performance intelligent io buffer management known fast buffer extensible operating system let application apply certain customizations tailor behavior o need application exokernel allows user describe ondisk data structure method implement exokernels provide applicationspecific handler facilitate downloading code kernel improve performance networking application spin allows typesafe code downloaded run kernel vino allows extension written c c downloaded kernel us fault isolation via software ensure safety extension also us safe compiler validate memory access extension assure protection selfmodifying code riesen discus use compiler technique convert c program intermediate lowlevel assembly code directly executed interpreter inside kernel unfortunately work neither officially published completed result available comparison system call consolidation design first step finding system call pattern collect log system call done using combination strace system call auditing support linux system call activity logged used script create system call graph searched pattern weighted directed graph vertex representing system call edge weight equal number time system call invoked path large weight likely good candidate consolidation found several promising system call pattern including openreadclose openwriteclose openfstat readdirstat implemented several new system call measure improvement main saving first three combination would reduced number context switch readdirplus system call return name status information file directory combine readdir multiple stat call save context switch data copy get file name directly use get stat information wellknown optimization introduced evaluation tested readdirplus intel pentium machine ram running linux used ide disk formatted file system benchmarked readdirplus program readdir followed stat call file increased number file power found improvement fairly consistent elapsed system user time improved respectively see might affect average user workload logged system call system average interactive user load approximately minute calculated expected saving readdirplus used total amount data transfered user kernel space byte estimate readdirplus used would transfer byte would also far fewer system instead would translate saving second per hour although saving small interactive workload expect cpubound workload mail web server would benefit significantly new system call compound system call design often critical portion application code suffers due data movement across userkernel boundary compound system call cosy encodes statement belonging bottleneck code segment along parameter form compound executed compound passed kernel extract encoded statement argument executes one one avoiding extraneous data copy designed cosy achieve maximum performance minimal user intervention without compromising security facilitate formation execution compound cosy provides three component cosygcc cosylib cosy kernel extension user need identify bottleneck code segment mark cosy specific construct cosystart cosyend marked code parsed statement within delimiters encoded cosy language call intermediate representation marked code segment compound cosy system us two buffer exchanging information first compound buffer compound encoded buffer shared user kernel space operation added user compound directly available cosy kernel extension without data copy second shared buffer facilitate zerocopying data within system call user application kernel first component cosygcc automates tedious task extracting cosy operation marked ccode segment packing compound translation marked ccode intermediate representation entirely transparent user cosygcc also resolve dependency among parameter cosy operation determines input parameter operation output previous operation limited cosy execution subset c kernel one main reason safety another concern extending language support feature may increase performance overhead decode compound increase complexity language second component cosy cosylib provides utility function create compound statement usermarked code segment changed cosygcc call utility function functioning cosylib internal structure compound buffer entirely transparent user final component cosy kernel extension heart cosy framework decodes operation within compound executes operation turn system call invocation cosy kernel module normal process hence necessary check performed however executing usersupplied function safety precaution needed cosy us hardware software check provided underlying architecture operating system efficiently two safety feature preemptive kernel avoid infinite loop segmentation protect kernel memory remove possibility infinite loop kernel use preemptive kernel check running time cosy process inside kernel every time scheduled time exceeded maximum allowed kernel time process terminated cosy support two approach protect kernel memory first approach put entire user function isolated segment privilege level static dynamic need function satisfied using memory belonging isolated segment approach assures maximum security reference outside isolated segment generates protection fault also use two nonoverlapping segment function code function data concern due selfmodifying code vanish automatically however invoke function different segment involves overhead second approach us combination static dynamic method ensure safety approach restrict check protect malicious memory reference achieved isolating function data function code placing function data segment leaving function code segment kernel approach involves additional runtime overhead calling function making efficient however approach two limitation provides little protection self modifying code also vulnerable handcrafted user function compiled using cosygcc evaluation prototyped cosy system linux evaluated variety workload microbenchmarks show individual system call sped common cpubound user application moreover modified popular user application exhibit sequential random access pattern eg database use cosy cpu bound application minimal code change achieved performance speedup unmodified version application status future work future would like modify cosy automate job deciding code moved kernel using profiling addition would like create option executing unmodified unixc program kernel mode major hurdle achieving goal safety concern plan explore heuristic approach authenticate untrusted code behavior untrusted code observed specific time period untrusted code considered safe security check dynamically turned allow u address current safety limitation involving selfmodifying handcrafted usersupplied function extend performance gain achieved cosy designing ioaware version cosy exploring various smartdisk technology typical disk access pattern make cosy io conscious continue analyze system call pattern machine used various purpose implement new system call suite cater workload way administrator choose use system call tailored application mail server web server runtime validation kernel code programmer make mistake c semantics leave ample opportunity introducing memory error problem becomes acute programming inside kernel small memoryaccess bug could crash entire system runtime bound checking hardware efficient method detecting program bug developed system called kefence kgcc software based approach provides comprehensive checking runtime boundschecking effective technique verify property specific c language semantics kernel programmer frequently want verify higherlevel property stated term program semantics rather language semantics kernel many property would like verify spinlocks locked later unlocked reference counter incremented decremented symmetrically interrupt disabled later reenabled allow checking developed event monitoring infrastructure support online analysis kernel user space well logging later analysis related work validation operating system historically performed using technique following area static checking verification compiler assistance external runtime testing dynamic checking employed boundschecking gcc bcc system example compilerassisted verification case used insert runtime check memory corruption buffer overflow c electric fence us system virtual memory hardware place inaccessible memory page immediately user option allocated memory area software read writes page hardware issue segmentation fault stopping program offending instruction easy find statement c source using debugger memory released free made similarly inaccessible wahbe et al use software fault isolation run application written language securely kernel use binary rewriting add explicit check verify memory access branch address tracing special case event monitoring extensively used analyze behavior application interact system apis tracing involves recording event log file using file later analysis done file system network application profiling used find bottleneck application performance counter keep track frequently application basic block executed derivative technique kernel profiling form online monitoring gather unified statistic system behavior profiling based log also used monitor system performance distributed application kefence design kefence designed detect memory buffer overflow hardware level kefence aligns memory buffer allocated kernel virtual address space using vmalloc page boundary kernel vmalloc function allocates one several page request facilitating alignment guardian page table entry pte added adjacent buffer whenever buffer overflow occurs guardian pte accessed guardian pte read write permission disabled hence accessing cause page fault page fault handler linux kernel modified whenever access guardian pte report buffer overflow exact detail context location buffer overflow logged syslog modified page fault handler configured perform various additional task security critical kefence configured crash module upon memory overflow thereby preventing malicious operation system administrator look log determine location overflow debugging important kefence configured log buffer overflow without terminating module implemented automapping readonly readwrite page guardian pte whenever overflow way code caused overflow either allowed write read outofbounds memory location since log contain full information location code caused overflow buffer overflow kernel code diagnosed easily kefence real time making suitable security critical application since kefence protect virtuallymapped buffer allocated using kmalloc protected therefore add bound checking kernel module one must use vmalloc instead kmalloc memory allocation modified linux header file way replacement done automatically special compiler flag set using vmalloc consumes virtual memory since allocates least page memory allocation partly mitigated fact modern architecture make address space virtually inexhaustible resource however replacement kmallocs vmallocs result extra consumption physical memory memory allocated unit page speed default vfree function added hash table store information virtual memory buffer since alignment buffer page boundary done either beginning end kefence detect buffer overflow underflows simultaneously unless allocation multiple page size common case inside kernel found overflow protection sufficient case evaluation evaluate performance kefence instrumented stackable file system called wrapfs wrapfs wrapper file system redirects file system call lowerlevel file system vanilla wrapfs us kmalloc allocation wrapfs object inode file etc contains private data field get dynamically allocated addition temporary page buffer string containing file name also allocated dynamically mounted wrapfs top regular file system rpm ide disk conduct test instrumented version wrapfs used vmalloc memory allocation could exercise kefence dynamically allocated buffer compiled amutils package wrapfs compared time overhead instrumented version wrapfs vanilla wrapfs instrumented version wrapfs overhead elapsed time normal wrapfs overhead due two main cause first vmallocvfree function slower kmallockfree function second allocating entire page memory buffer increase tlb contention found maximum number outstanding allocated page compilation amutils instrumented version wrapfs average size memory allocation byte conclude kefence performs well normal user workload however memoryintensive code may exhaust virtual physical memory event monitoring design designing event monitoring framework wanted flexible enough allow instrumentation part kernel dictated two main property generality performance sensitivity generality framework make assumption possible event monitored reflected simple generic api also nonintrusiveness code eg code block portion kernel preempted performance sensitivity programmer ought able insert check frequent event directly kernel well able monitor infrequentlyoccurring event easily user space figure event monitor structure figure show event monitor internal structure logevent call invokes event dispatcher turn invokes set callback high performance needed event monitor developed kernel module register callback dispatcher kernelspace online event monitor invoked synchronously via callback userspace event monitor receive event character device interface lockfree ring buffer ring buffer lockfree instrument code invoked interrupt handler without fear interrupt handler block make code general able instrument scheduler interrupt handler code safely using module userspace application link libkernevents copy log entry bulk kernel read one one event recorded structure contains void reference object affected event eg field used extract current value reference counter integer encodes type event eg increment decrement reference counter source file line number triggered event structure designed minimize size individual log entry providing sufficient generality allow pertinent information recorded evaluation tested framework postmark benchmark test system cpu ram western digital caviar hard drive linux logging test see used quantum atlas scsi drive adaptec scsi adapter hold log data ran control test vanilla kernel added instrumentation dentry cache lock dcachelock prevents race condition filesystem namespace operation renames benchmark lock hit average time second benchmark ran average second adding event dispatcher ring buffer resulted overhead running userspace logger built around librefcounts parallel postmark increased overhead running userspace program act like logger write disk still gave overhead system time effectively constant run regardless instrumentation hence inefficiency arise kernel infrastructure believe overhead userspace logger due inefficiency userkernel interface current prototype librefcounts poll character device continuously rather using blocking read kgcc compilation framework allows instrumentation kernel code many us used perform runtime bound checking monitor object reference count profile kernel code kgcc derived jones kelly bound checking patch gcc called bcc however kgcc extends functionality bcc several way broader scope kgcc based gcc leverage gcc optimization analysis feature bcc bcc insert check code compile time perform runtime bound checking operation potentially cause bound violation like pointer arithmetic string operation memory copying etc preceded check check simply function call bcc runtime environment maintains map currently allocated memory splay tree tree consulted memory operation however bcc fails compile majority opensource c program partly due bug bcc partly get confused complicated coding style program working towards kernelready bcc also created robust version bcc fixing several serious bug eg several problem inline function call concurrency outofbounds pointer one problem bcc mishandling temporary outofbounds pointer c program often generate temporary address invalid needed part larger computation example expression ptrij ptr pointer j integer possible ptri outside memory area object pointed ptr even though whole expression evaluation translate valid address bcc flag error temporary outofbounds address undesirable though replacing invalid address reference external table entry suppresses error one possible solution introduces problem replacement passed code compiled bcc solution based concept peer whenever outofbounds address created arithmetic object insert special outofbounds oob object new address address map make peer object kgcc runtime permit pointer arithmetic oob object either generate another peer return bound approach handle outofbounds pointer without suffering problem replacementbased approach porting bcc kernel modified bcc support linux kernel dealt several issue relating symbol semantics kernel c runtime environment segmentation also made modification kernel module initialization code added support multithreading stack management kgcc performance instrumented kernel component suffer two problem first instrumentation imposes memory overhead undesirable since kernel memory frequently directmapped program fully compiled default check bcc could time larger compiled gcc bcc runtime add small fixedsize overhead bulk additional code thousand individual check second instrumented code usually run slower must execute additional instruction track validate access kgcc handle two problem uniform way compilation kgcc employ heuristic eliminate unnecessary check example kgcc check stack object whose address taken point code ccured project employ comprehensive approach remove unnecessary check plan integrate kgcc another technique common subexpression elimination allowed u reduce number check inserted half typical kernel code kgcc also employ optimization like argument packing checking function call mechanism reduce localize instruction cache footprint trading space performance caching state kgcc library order reduce communication module evaluation compared performance kgcccompiled reiserfs module vanilla gcccompiled module linux ran cpuintensive benchmark amutils compile system time kgcccompiled reiserfs greater vanilla gcc elapsed time greater also ran iointensive benchmark postmark case system time time greater kgcccompiled reiserfs elapsed time time greater status future work kefence currently working implementation kefence intel platform converting kmalloc call vmalloc call consumes memory investigating method dynamically decide memory protected runtime event monitoring used event monitor instrument variety kernel component acceptable overhead intend develop online inkernel monitor reference counter spinlocks semaphore well tool allow indepth analysis performance bottleneck related object kgcc kgcc currently store address map allocated object splay tree brings recently accessed node top operation result nearly optimal performance reference locality however multiple thread make use splay tree splay tree longer efficient different thread le locality currently investigating data structure better suited multithreaded code two technique intend apply entire kgcc framework selective instrumentation dynamic deinstrumentation first intend make compiler capable inserting instrumentation based rule instrument every operation inode reference count second code path execute safely time often one state greater confidence correct intend implement instrumentation deactivated executed sufficient number time reclaiming performance quickly confidence level frequentlyexecuted code becomes acceptable part implementation technique plan research develop several two new technology integration kgcc first plan develop language specifies code pattern kgcc compiler recognize instrument spirit aspectoriented programming expression language would match pattern parsed typechecked version kernel source code would eliminate tedious errorprone manual instrumentation second plan develop mean direct codelevel modification executable like linux kernel runtime binary would augmented parse tree compilerlevel intermediate representation ir ir would contain pointer binary text segment would updated binary converted executing image runtime new code could inserted using existing parse tree symbol table convert ir compiling ir binary code modifying appropriate section program text segment conclusion shown significant performance improvement user application possible reducing number context switch data copy needed additionally provided tool ensuring complex operation indeed code inserted linux kernel safe work system call consolidation provided secure efficient replacement commonlyused sequence system call improving performance operation performancecritical applicationspecific provided mechanism cosy allow application load run code directly kernel accelerating term safety work kefence combat memory error disabling code overwrites kernel data kgcc compiler embeds check kernel code ensuring pointer dereferenced point outside safe area finally event monitoring framework allows programmer verify kernel code adheres highlevel safety rule interaction kernel object like lock reference count currently devising mechanism disable check executed enough time research made easier run userspace code kernel monitor safety research progress believe distinction user kernel code term performance ease development gradually disappear acknowledgment work made possible nsf career award hpintel gift special thanks go contributor project alexander butler mohankrishna channareddy salil gokhale nikolai joukov aditya kashyap devaki kulkarni amit purohit joseph spadavecchia charles p wright reference b bershad savage p pardyak e g sirer becker fiuczynski c chamber egger extensibility safety performance spin operating system proc acm sosp page copper mountain resort co december b callaghan b pawlowski p staubach nfs version protocol specification technical report rfc network working group june p druschel l peterson fbufs highbandwidth crossdomain transfer facility proc acm sosp asheville nc december gardner w feng broxtony engelhart g hurwitz magnet tool debugging analyzing adapting computing system proc ccgrid page r jones p kelly bound checking c technical report wwwaladocicacukphjkboundscheckinghtml j katcher postmark new filesystem benchmark technical report network appliance p joubert r king r neve russinovich j tracey highperformance memorybased web server kernel userspace performance proc annual usenix technical conference page boston june j mogul observing tcp dynamic real network proc conference communication architecture protocol page g c necula mcpeak w weimer typesafe retrofitting legacy code proceeding annual acm symposium principle programming language page portland january j ousterhout h costa harrison j kunze kupfer j thompson tracedriven analysis unix bsd file system proc sosp page orca island wa december j pendry n williams e zadok amutils user manual edition july wwwamutilsorg b perens efence april purohit system improving application performance system call composition master thesis stony brook university june technical report wwwfslcssunysbedudocsamitmsthesiscosypdf rajagopalan k debray hiltunen r schlichting cassyopia compiler assisted system optimization proc hotos ix lihue hi may r riesen using kernel extension decrease latency user level communication primitive wwwcsunmeduriesenprop ruwase lam practical dynamic buffer overflow detector proc nd symposium page february seltzer endo c small k smith dealing disaster surviving misbehaved kernel extension proc osdi page seattle wa october shepler b callaghan robinson r thurlow c beame eisler noveck nfs version protocol technical report rfc network working group december sivathanu v prabhakaran f popovici e denehy c arpacidusseau r h arpacidusseau semanticallysmart disk system proc first usenix conference file storage technology san francisco ca march tamches b p miller using dynamic kernel instrumentation kernel application tuning international journal high performance computing application fall r wahbe lucco te anderson sl graham efficient softwarebased fault isolation proc sosp page asheville nc december wallach r engler f kaashoek ash applicationspecific handler highperformance messaging proc acm sigcomm page stanford ca august e zadok j nieh fist language stackable file system proceeding annual usenix technical conference page san diego ca june footnote proceeding nsf next generation software workshop conjunction international parallel distributed processing symposium ipdps file translated tex tth version feb
281,Lobsters,osdev,OS,MittOS: Supporting Millisecond Tail Tolerance with Fast Rejecting SLO-Aware OS Interface (2017),https://ucare.cs.uchicago.edu/pdf/sosp17-mittos.pdf,mittos supporting millisecond tail tolerance fast rejecting sloaware o interface,,obj length r filter flatedecode stream v pp l ap j qi r dpթond tz p vj ߡh r w xtb xe p u b b c ȡ b zib mcyhot e h v km e ab v
282,Lobsters,osdev,OS,A fork() in the road,https://www.microsoft.com/en-us/research/publication/a-fork-in-the-road/,fork road,,received wisdom suggests unix unusual combination fork exec process creation inspired design paper argue fork clever hack machine program long outlived usefulness liability catalog way fork terrible abstraction modern programmer use describe compromise o implementation propose alternative designer implementers operating system acknowledge fork continued existence firstclass o primitive hold back system research deprecate educator teach fork historical artifact first process creation mechanism student encounter
283,Lobsters,osdev,OS,HermiTux: A binary-compatible unikernel,https://ssrg-vt.github.io/hermitux/,hermitux binarycompatible unikernel,news http ssrgvtgithubiolibhermitmpk wiki paper vee unikernel binarycompatible vee paper hermitcore trying design principle paper daniel chiba m thesis pierre olivier system software research group virginia tech mr zozu,news discover related project use intel memory protection key protect unikernel written rust http ssrgvtgithubiolibhermitmpk ported hermitux arm architecture info wiki hermitux paper best paper award vee hermitux unikernel minimal operating system low memorydisk footprint subsecond boot time executing application within single address space top hypervisor moreover hermitux binarycompatible linux run native linux executables although proofofconcept hermitux support multiple compiled c c fortran interpreted python lua language provides binary analysis rewriting technique optimize system call latency modularize kernel presence unmodified binary support statically dynamically linked program different compiler optimization level hermitux also provides basic support multithreading debugging profiling comparison disk footprint boot time memory usage linux vm hermituxosvrumprun unikernel docker container detail see vee paper hermitux based hermitcore operating system trying hermitux open source code instruction github design principle detailed description please read hermitux vee paper daniel chiba m thesis virginia tech hermitux us lightweight kvmbased hypervisor load linux binary alongside minimal o layer within single address space virtual machine runtime system call made application caught hermitux kernel optionally hermitux provides mechanism rewrite system call invocation common function call kernel significantly reducing system call latency hermitux also analyze linux binary determine system call invokes compile custom kernel containing implementation particular system call pierre olivier university manchester pierreolivier manchesteracuk hermitux opensource project system software research group virginia tech hermitux supported part onr grant opinion finding conclusion recommendation expressed site author necessarily reflect view onr research development also supported german federal ministry education research grant project envelope hermitux logo made mr zozu
284,Lobsters,osdev,OS,Security and reliability vs static linking in modern languages in Debian,https://anarc.at/blog/2019-03-05-report/,security reliability v static linking modern language debian,debian long term support lts debian lts website work mr fixed issue pgp signature mr bug last mass import cleanup rewrite rule python gpg concern expressed concern post response golang concern expressed concern libarchive update netmask update sent maintainer dla libreoffice last time bug report dputng enigmail approved free software work debian work freeze convertdate new fix date parsing broken feed new phone phone htcones perfect ifixit reparability score ecosto mailing list experiment calendar project post single notification workflow invite problem provide french translation notmuchaddress emailing html notmuch send html mail notmuch apparently intended behaviour inurl credential using dtach instead screen irc bouncer screen dtach feature request work edited,debian long term support lts monthly debian lts report final lts report found work unfortunately able continue working lts project foreseeable future continue volunteer work debian might even contribute lts normal job directly part lts team bad team essential work need help security best lacking everywhere believe current approach minimal viable product move fast break thing sustainable people working linux distribution also lts people hard dirty work maintaining free software long term thankless believe one important job right suspect time go legacy system going anywhere next generation bug old forgotten software one understands care work suddenly break critical vulnerability need patching moving faster help u fix problem pile crap deal real system running production survival human specie planet earth view guaranteed via timely transition towards stationary state world economy without growth peter custer website work worked website month one mass import mr finally merged holger levsen fixed issue pgp signature showing website also polished misnamed audit script check missing announcement website published mr cron project webmaster team still work progress still noisy dlas missing already nt published latest dlas website remaining work automate import new announcement website bug done hopefully last mass import updated workflow wiki finally also done bit cleanup website necessary mass import also required rewrite rule server level hopefully fairly well wrapped whoever pick next python gpg concern following new vulnerability disclosed pythongnupg library expressed concern security reliability project future update referring wider issue identified isi lovecroft post suggested simply drop security support project citing nt many reverse dependency seems nt practical response actually possible keep maintaining update issued jessie golang concern similarly expressed concern maintenance golang package following disclosure vulnerability regarding elliptic curve implementation core golang library update issued core golang statically compiled worried update nt sufficient also needed upload update build dependency using affected code well holger asked golang team help also asked irc apparently nondev package exception binnmu stretch process need clarified also wondered maintenance problem could resolved long term switching dynamic linking ubuntu tried switch dynamic linking abandoned effort seems golang quite difficult maintain security update foreseeable future libarchive update reproduced problem described jessie published fix build update without sbuild overlay system tar chroot otherwise cpio test fail netmask update one minimal patch sent maintainer wrote sent dla interestingly nt access change file made writing dla little harder workflow normally involves calling gendla save change file autopopulates template learned change file normally archived cocciadebianorg specifically srvftpmasterdebianorgqueuedone case security uploads libreoffice tried tackle issue libreoffice last time tried work libreoffice test suite failing linker crashing hour compilation never got anywhere wheezy figured jessie might better shape quickly got trouble sbuild ran space home moved photo external drive patch ended trivial could reproduce simple proof concept could quite get code execution going might nt found right python module load assumed code vulnerable given patch simple worth update build ended taking close nine hour disk space published result also opened bug report dputng dputng still nt warn user uploads securitymaster way dput enigmail finally enigmail finally taken official support list jessie debiansecuritysupport proposed update approved free software work since going start new job march figured would try take time work start therefore mostly tried wrap thing nt much volunteer work usually unsure able much volunteer work start full time job either might possibly last report debian work freeze uploaded new version bitlbeemastodon sopel dateparser also sponsored new uploads smokeping tuptime also uploaded convertdate new missing optional dependency dateparser unfortunately nt make new time freeze dateparser wo nt totally fixed buster also made two new release programmable feed reader fix date parsing broken feed add json output plugin fix issue ikiwikirecentchanges plugin new phone got tired bought new phone even though almost dozen old phone plastic box basically unusable two feature phone need osmand two nokia phone ca nt read sim card least two broken screen one declared stolen lost right mean ca nt used phone totally stupid ask managed salvage old htcones still little buggy crash randomly little slow generally work really like small going hard go back bigger format bought pricey crazy might come year sick trying crossreference specification table lineageos download page work open android version los box importantly fp project try avoid major human right issue source component production device something way often overlooked many mineral involved fabrication modern electronics come conflict zone involve horrible child labour condition fixing issue priority maybe even hardware software freedom even without addressing completely issue fact scored perfect ifixit reparability score amazing seems part difficult find even europe phone nt ship america original website make difficult buy shop ship canada like ecosto see go usual document experience wiki mailing list experiment part calendar project figured would keep reader informed progress year send update every month inspired post said last week ca nt stop thinking kept working mailman unfortunately single proposed patch merged many work progress wip course hoping get feedback proposal especially notification workflow workflow delegate sending confirmation mail caller enables send complex email straitjacket templating system force could control every part email body subject also content type attachment nt seem get traction informal comment received said nt right fix invite problem one working fixing invite problem either wonder going go unabashed tried provide french translation allowed send actual invite fully translated lot work much benefit frustrating well end ended bcc list keep alias muttaliases notmuch read thanks notmuchaddress hack email proposed reader optout nt write back mailing list spammy reader general public people know well close given friggin calendar least find energy finish setting mailman way like use next mailing ca nt help think mailing list overkill mailing bcc list worked without flaw far could tell mean minimal maintenance sure battle mailman much longer shame happen believe probably best bet keep mailing list therefore probably email alive future emailing html notmuch actually write content email messing around mailing list server one thing whole point actually say something case show something difficult using plain text went crazy tried send html mail notmuch thread interesting encourage read full quote first post posterity know know html email evil mostly never ever use fact nt remember last time consciously sent html maybe back using netscape communicator whatever reason thought photography day well allergic social medium way sharing photograph family friend tried creating gallery website r feed sure one surprised uptake minimal nonexistent people expect stuff pushed like instagram facebook twitter spam thought email original social network figured would make mailing list write people let new new picture writing first email realized pretty silly include image least link image email sure see going link email going click click anyways tapping going answer come naturally write frigging html email nt rmswreligious zealot right thing work basically everywhere even notmuch started thunderbird thought heck must better way searching message mode emacs html email ktxbye found people already thought problem came somewhat elegant solution built trying come pure elisp solution go little like defun anarcatnotmuchhtmlconvert create html part markdown body work attachment form added interactive saveexcursion fetch subject html version title message building html attachment messagegotosubject beginningofline searchforward forwardchar let beg point endofline setq subject buffersubstring beg point message determined title subject wrap signature pre messagegotosignature forwardline save delete signature requires special formatting setq signature buffersubstring point pointmax deleteregion point pointmax set region top body end buffer endofbuffer messagegotobody narrowtoregion point mark run markdown region setq outputbuffername notmuchmarkdownoutput message running markdown markdown outputbuffername widen saveexcursion setbuffer outputbuffername endofbuffer add signature formatted pre insert n pre insert signature insert pre n markdownaddxhtmlheaderandfooter subject message done dirty work reinserting everything restore signature messagegotosignature insert signature messagegotobody insert multipart typealternative n endofbuffer insert part typetexthtml n insertbuffer outputbuffername endofbuffer insert multipart n let f buffersize getbuffer outputbuffername message appended html part byte f ca nt read elisp breakfast following parse current email body markdown separate buffer make current email multipartalternative add html part inject html version html part nasty business formatting signature correctly wrapping pre going took thunderbird well read elisp breakfast improvement comment coding style welcome idea write email normally markdown done writing email launch function carefully bound mx anarcatnotmuchhtmlconvert take email add equivalent html part even tweak part screw around raw html feel depressed nostalgic people think insane could work belong notmuch maybe tip section seek therapy hate markdown expand relationship parent text editor thanks feedback p naturally could adapted parse body rst asciidoc texinfo latex whatever insanity think would appropriate nt care idea pps remember reading someone wanting declare textmarkdown mimetype email remembering backwards weird ca nt find reference anymore lazyweb magic person could forward link would grateful one many http wwwgeorgedilloncomwebhtmlemailisevilstillshtml http enwikipediaorgwikinetscapecommunicator yes age showing fair article encouraged quite bit http bass guitar one unfortunately http enwikipediaorgwikihtmlemail adoption http edited original message include latest version script unfortunately life private dotfiles git repository end effort nt quite image link would break webmail seen chromium apparently intended behaviour problem embedding usernamepassword gallery http url using inurl credential apparently deprecated even though standard actually say ended generating full html version frigging email complete link top email saying email nt display properly click following remember dislike html email yet reader quite happy see image directly suspect would nt click individual image see photo think worth trouble think feel silly post update blog gallery private right think like keep way give freedom share intimate picture people using dtach instead screen irc bouncer using irssi screen session long time recently started thinking simplifying setup setting passwordless authentication session also running separate user especially important keep possible compromise irc client limited sandboxed account instead powerful user limit impact possible compromise also started using dtach instead gnu screen handle irssi session irssi still run arbitrary code least ca nt open new window screen need think little eventually could make profile systemd keep forking although sure irssi could still work environment change broke autoaway script relies screen peculiar handling socket signify session attached filed feature request work created tard tuesday en soirée march edited wednesday tôt le matin march
285,Lobsters,osdev,OS,Time protection: The missing OS abstraction,https://ts.data61.csiro.au/publications/csiro_full_text//Ge_YCH_19.pdf,time protection missing o abstraction,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڭ uf z v k j ʰy n ϯ jğ tâ e p j ɨ bsޙ qm x f bvd q r kn endstream endobj obj length filter flatedecode stream xڵ ￄ n eq x mn q j e
286,Lobsters,osdev,OS,Lites for Mach (1996),http://www.cs.utah.edu/flux/lites/html/lites-info.html,lites mach,general lites information overview link information configuration option lites special device installing namei macro lites mike hibler mike csutahedu stephen clawson sclawson csutahedu,general lites information last updated march overview link information configuration option lites special device installing namei macro lites lites bsd lite based server emulation library provides free unix functionality mach based system latest lites release explanation lites configure option used add option lites configuration cause lites look includes put eventually turn specific feature enableslice add slice option lites configuration includes support lites slice device name first included course need kernel also understands slice name like make sense specifies target system compile used host option enabledebug add debug lites configuration turn various sanity check server specifies lites installed also look include fileslibraries best result mach programslibraries srcdirpath specifies source needed running configure source directory withconfiguratonconfigurationstring allows set server configuration default stdws see confmasterh master file information enableprofiling add dgprof pg us libmachsapa etc two set special lites device mapped time running lites probably want create time device need one going running x lites device mapped time mknod time c mknod timezone c running lites also interested special device device mach version mknod iopl c mknod kbd c mknod mouse c actually probably want use something minor numer mouse since determines sort mouse got connected snippet mach xfree readme file mouse mach support several kind external mouse logitech three button mouse microsoft two button mouse mouse logitech mouseman mouse support kind bus mouse way indicate mouse type com port mouse device minor value set minor computed formula type com port com port depending com port plug mouse architecture prefer make modem line type logitech mouse microsoft mouse mouse real mouse logitech mouse man v type since actually going running lites assume running linux box mean running variant bsd nt already copy mach kernel boot populate machservers wserver emulator first need create machservers directory four thing need end startup emulator pagingfile machinit copy lites server emulator machservers either sbin ran gmake install emulator server subdirectory lites build directory point file copied probably nice long name like perfectly normal mach looking either rename file startup emulator make link ln emulator ln startup machserverspagingfile need create paging file mach basically paging file large contiguous file mach page find parition got lot free space count many megabyte want paging file dd ifdevzero ofusrpagingfile count tricky bit come next since nt actually pagingfile machservers directory really need need make link machservers wherever pagingfile however mach kernel dose nt know much filesystems prepend device name note device name mach kernel think dev directory matter drive since hd mach instead wd bsd scsi drive name however scsi device quirk bsd generally given logical number ie first scsi drive probed however mach assigns drive number according scsi id drive mach could map bsd first drive chain anyway determine device corresponds partition made pagingfile usr bsd would ln machservers machserversmachinit want run mach program say one get machinit binary stick machservers machinit come either install collection compile probably want install collection anyway since includes nice thing like p machid m mkill etc nt care running mach program lites create symbolic link standard init program ln sbininit machserversmachinit lites special device need create device lites either run makedevlites came create hand use makedev cd dev sh time also x related device need going running x lites run makedevlites make makedevlites create set check appendix adventurous look makedevlites creating device hand networking setup going using network device set system try use network interface name mach know bsd lites dose nt device name mapping release bsd need copy etchostname file supposing using western digital card would cp using need go etcsysconfig add mach ethernet device list interface try configure boot etcttys thing change console getty actually look console virtual terminal involves editing etcttys turn getty console device turning one vt poing lites dose nt know vt dissapointed reboot lites ever get prompt end woth something like ttys berkeley id ttys v cgd exp name getty type status comment console usrlibexecgetty pc secure usrlibexecgetty pc secure etcttys file similar booting machlites ready boot machlites basically reboot machine boot prompt type name mach kernel system load mach memory start running start lites eventually get login prompt nt something got messed along way check everything really get stuck try mailing list shamelessly stolen lites homepage johannes helander wrote lites following afsstyle namei expansion pathname lookup sys expands mipslites etc per system basis cpu expands mips host expands host name bin expands like sys per binary basis depending kind binary executed string mipsultrix etc comment name choice welcome see execfileh macro expanded namei path component must literal string macro must occupy entire path component symlinks may contain namei macro idea make easier several set binary machine make switching os easier example freebsd netbsd use name path shared library however compatible bin may used distinguish make symlink containing bin another otherwise hard case device number may two dev directory choose runtime create sys linux move dev ln sysdev dev create create suitable device lites linux work respect host cpu might nice sometimes got added think much uid pid date whatever added argued expansion done symlinks would incompatible afs dfs serious would matter taste mike hibler mike csutahedu stephen clawson sclawson csutahedu
287,Lobsters,osdev,OS,MirageOS Spring 2019 hack retreat roundup,https://mirage.io/blog/2019-spring-retreat-roundup,mirageos spring hack retreat roundup,hannes mehnert mirageos spring hack retreat marrakesh dhcp recursive dns resolver caldav pc engine apu freebsd detailed blog post uplink situation eyeofmirage framebuffer support bmp format build system revised split unixdependent functionality mastodon opambuilder opamcheck opamcheckall opampublish ocaml compiler int literal int operator whole program dead code elimination bgp lazy trie mrtformat border gateway protocol bgp lazytrie xen pvh qubesos unikraft project learn ocaml unikernel network device driver ixy implemented ocaml integrated mirage tool miragenet dns client api described cohttp httpaf miragehttp bigarray add capability statistical memory profiler statistical memory profiler ocaml ocaml paper emacs user interface using statmemprofmirage library,hannes mehnertmirageos spring hack retreat marrakesh early march mirageos hacker gathered marrakesh biannual hack retreat like thank amazing host everyone participated onsite remotely especially wrote experience retreat ate dogfood used mirageos dhcp recursive dns resolver caldav unikernels isolated virtual machine running pc engine apu freebsd host system caldav server persisted data git repository host system using raw git protocol communication smart http protocol could used well lynxis wrote detailed blog post uplink situation lot interesting discussion took place code developed knowledge exchanged issue solved enjoyed sun moroccan food following list exhaustive give overview pushed forward imagelib library parse several image format eyeofmirage us display image framebuffer retreat imagelib extended support bmp format build system revised split unixdependent functionality preliminary support gif format implemented activitypub open decentralized social networking protocol used mastodon provides clientserver api creating updating deleting content federated servertoserver api notification content delivery retreat initial prototype protocol implementation drafted opam ocaml package manager extended several direction work started new utility install many opam package possible machine nt enough choice opambuilder opamcheck opamcheckall us opamlib accomplish conex used signing community repository esp opamrepository opam package author cryptographically sign package release user verify downloaded tarball build instruction identical author intended conex developed since yet widely deployed extended opampublish invoke conextargets utility sign opening pull request opamrepository simple mail transfer protocol internet standard sending receiving email ocaml implementation improved possible send email ocaml code hypertext transfer protocol internet standard widely used browsing world wide web http linebased protocol specified year ago attempt fix various shortcoming us binary protocol multiplexing priority etc ocaml implementation actively worked marrakesh irmin distributed database follows design principle git soon irmin released includes graphql http chunk support use git protocol interoperability irmin provides keyvalue interface mirageos ocaml compiler hint type error int literal int operator developed merged ocaml compiler error expression type int expression expected type float hint mean error expression type float expression expected type int line character hint mean use also whole program dead code elimination pr rebased onto trunk bgp lazy trie mrtformat library parse multithreaded routing toolkit trace adapted modern ocaml ecosystem border gateway protocol bgp library slightly updated one dependency lazytrie adapted modern ecosystem well xen pvh xen provides several mode virtualization mirageos first nonunix target paravirtualized pv mode xen require hardware support hypervisor host operating system weak security profile static mapping address large attack surface however pv mode provides attractive target unikernels provides simple softwarebased abstraction dealing driver simple memory model contrast hardwarevirtualization mode provides greater security requires work guest o modern virtualization mode combining virtue approach pvh formerly referred hvmlite yet supported mirageos marek marczykowskigórecki qubesos project visited help u bring pvh support unikraft project common platform building unikernels hope use mirageos xen support future retreat lot bug porting mirageos pvh solved boot crash learn ocaml unikernel platform learn ocaml embeds editor toplevel exercise http server allows student learn ocaml submit solution via web interface automated grader run unit test etc evaluate submitted solution teacher assign mandatory exercise overview student learn ocaml used executable unix host beeing ported mirageos unikernel executable standalone virtual machine network device driver ixy ixy network driver support intel network interface card implemented ocaml performance improved including several failing attempt degraded performance also integrated mirage tool usable miragenet implementation dns client api proposed api described unix lwt mirageos implementation already available since two http server cohttp httpaf ocaml mirageos available new interface miragehttp provides unified interface also support connection upgrade websockets use cstruct wrapper around ocaml bigarray quite lot mirageos cstruct readable writable byte array used phantom type add capability interface distinct readonly writeonly buffer ocaml implementation apply unified diffs code extracted conex since found issue still need fixed statistical memory profiler since jacqueshenri jourdan working statistical memory profiler ocaml read ocaml paper emacs user interface available since year integrated statmemprof mirageos unikernels using statmemprofmirage library marshal data via tcp provide proxy communicates emacs unix domain socket unikernel collection composable library implementing protocol collaboration far various gossip protocol implemented retreat focus gossipbased publishsubscribe dissemination protocol future plan include building unikernels adding pubsub sync functionality irmin
288,Lobsters,osdev,OS,Systems Software Research is Irrelevant (2000),http://doc.cat-v.org/bell_labs/utah2000/utah2000.html,system software research irrelevant,system software research irrelevant aka rob pike august est polemic definition thesis field decline system research contribution boom innovation linux system research day happened pc microsoft web standard orthodoxy change scale unix linux academic microsoft window startup grandma thing thing build conclusion,system software research irrelevant aka rob pike august est polemic talk polemic distills pessimistic side feeling system research day wo nt talk much optimistic side since lot others everyone excited computer industry may therefore present picture somewhat darker reality however think situation genuinely bad requires action definition system operating system networking language thing connect program together software expect research primarily academic research university industrial lab ten year ago hope another ten year irrelevant influence industry thesis system software research become sideline excitement computing industry last see exciting noncommercial demo ironically time computing almost definition innovation research software hardware university much industry becoming insular ossified irrelevant many reason avoidable endemic may way improve situation require communitywide effort field decline need new operating system anyway ask maybe one support thesis lot paper file system performance security web caching etc say yes anyone outside research field paying attention system research contribution boom highend workstation hardware mhz mips r megabyte ram mbps ethernet mhz alpha pentium iii megabyte ram mbps ethernet software unix x emacs tcpip unix x emacs tcpip netscape language c c c c java perl little hardware changed dramatically software stagnant innovation microsoft mostly exercise compare microsoft software claim innovation copying reply java c window macintosh industrial response interesting technically flawed piece system software system research relevant see new operating system new language making inroad industry way instead see thriving software industry largely ignores research research community writes paper rather software linux innovation new another copy old stuff old stuff compare program development linux microsoft visual studio one ibm javaweb toolkits linux success may indeed single strongest argument thesis excitement generated clone decadesold operating system demonstrates void system software research community failed fill besides linux cleverness software development model hardly triumph academic c especially software engineering measure system research day web cache web server file system network packet delay stuff performance peripheral application kernel even userlevel application mostly though lot measurement misinterpretation misapplication scientific method much phenomenology invention replaced observation today see paper comparing interrupt latency linux v window may interesting may even relevant nt research misguided attempt seem scientific much measurement performance minutia bad chart contrast new language o make machine feel different give excitement novelty today done cool web site higher cpu clock rate cute little device computer nt art gone art science part point system research science must engineering design art happened lot thing pc hardware became cheap cheap hardware became good eventually nt run pc nt matter average mean median mode computer pc even much system work revolved around new architecture risc lisp machine major source interesting problem perhaps interesting solution gone much system work also revolved around making stuff work across architecture portability hardware nonissue plan may portable operating system world new release pc old time sake include source architecture expect almost one use pc hardware software sort story microsoft enough said topic although people continue say lot microsoft easy target scapegoat real source difficulty detail follow web web happened early surprised computer science community much commercial one came dominate much discussion much effect business control web came physicist prospered industry bruce lindsay ibm hdlc httphtml replaced web browser compare visicalc pc research contributed little despite huge flow paper cache proxy server architecture etc standard viable computer system one must honor huge list large often changing standard tcpip http html xml corba unicode posix nfs smb mime pop imap x huge amount work nt honor standard marginalized estimate work plan directly indirectly honor externally imposed standard another level instruction architecture bus etc influence much externally imposed structure little slop left novelty even worse commercial company standard microsoft cisco deliberately make standard hard comply frustrate competition academia casualty orthodoxy today graduating phd use unix x emacs tex world often computing world ever used technical work twenty year ago student would exposed wide variety operating system good bad point new employee lab bring world expect arrive reasonable time joining new lab chance explore new way working narrowness experience lead narrowness imagination situation language little better many curriculum include exposure functional language etc also language orthodoxy c java science reserve highest honor prove wrong computer science change scale many external constraint many thing already done much interesting work requires effort large scale many personyears required write modern realistic system beyond scope university department also time scale long design final version five year beyond scope grad student mean industry tends big defining project operating system infrastructure etc small research group must find smaller thing work three trend result nt build measure phenomenology new thing nt go breadth go depth microspecialization system work take existing thing tweak believe main explanation sosp curve unix new operating system today tend way reimplementing unix novel architecture first thing build unix emulation layer operating system research relevant resulting operating system indistinguishable claim late early unix killed operating system research one would try anything else time nt believe today grudgingly accept claim may true microsoft notwithstanding victim success portability led ubiquity meant architecture nt matter one linux hot new thing another unix linux academic microsoft window holy trinity linux gcc netscape course another orthodoxy become icon microsoft technically hot microsoft working hard claim many dimension corresponding product superior technically continue improve linux may fall macintosh trap smug isolation leading near obsolescence besides system research little advance trinity startup startup dominant competition academia idea fund personnel student others microsoft big corporation legion free hacker ietf response governmentfunded especially corporate research directed fast return investment distorts priority research bent towards make big money ipo year horizon short longterm work go infrastructure problem scale funding source government industry perceive pressure vicious circle metric merit wrong stanford encourages student go startup successful ceo give money campus new president stanford successful computer entrepreneur grandma grandma online mean industry designing system service ordinary people focus application device infrastructure architecture domain system research cause largely marketing result proliferation incompatible device ca nt make money software hardware design niche gimmick big new idea programmability big idea computing fallen wayside system research loses thing startup focused short time scale practical result try new thing big corporation focused existing priority try new thing startup suck energy research gold rush leave ghost town prepared move use plan go back thinking building system narrowness irrelevant breadth relevant essence system work system behave work compare concentrate interface architecture engineering courageous try different thing experiment try give cool demo funding body fund courageously particularly longterm project university turn explore way let student contribute longterm project measure success idea paper money make industry want work thing build lot valid useful interesting thing offer small sample evidence field moribund lack possibility one gui ever seriously tried best idea date way getting worse today screen covered confusing little picture surely possibility linux interface nt even good window much talk component architecture one true success unix pipe possible build interactive distributed application piece part future distributed computation language community done little address possibility web dominated system present use information model forced interaction user must go get let go back data come user instead system administration remains deeply difficult problem unglamorous sure plenty room make huge even commercial contribution conclusion world decided want computer system software research community influenced decision somewhat little shut discussion reached point doubt brilliant system project would even funded funded would nt find body work odds success always low essentially zero community university student industry funding body must change priority community must accept explore unorthodox idea community must separate research market capitalization
290,Lobsters,osdev,OS,Race to Idle: New Algorithms for Speed Scaling with a Sleep State (2012),https://www.researchgate.net/publication/220779726_Race_to_Idle_New_Algorithms_for_Speed_Scaling_with_a_Sleep_State,race idle new algorithm speed scaling sleep state,,study energy conservation problem variablespeed processor equipped sleep state executing job high speed setting processor asleep approach lead energy saving compared standard dynamic speed scaling consider classical deadlinebased scheduling job specified release time deadline processing volume general convex power function irani et al devised offline algorithm roughly speaking algorithm schedule job critical speed scrit yield smallest energy consumption job processed power function p sα γ processor speed han et al gave αα plus competitive online algorithm investigate offline setting speed scaling sleep state first prove nphardness optimization problem additionally develop lower bound general convex power function algorithm construct scritschedules execute job speed least scrit achieve approximation factor smaller furthermore algorithm minimizes energy expended processing job attain approximation ratio smaller present algorithmic framework designing good approximation algorithm general convex power function derive approximation factor power function p β sα plus γ obtain approximation finally show framework yield best approximation guarantee class scritschedules general convex power function give another algorithm function p βsα plus γ present tight upper lower bound best possible approximation factor ratio exactly plus lower branch lambert w function
291,Lobsters,osdev,OS,A Mirage unikernel running on an ESP32,https://www.lortex.org/posts/mirage/esp32/2018/05/04/success.html,mirage unikernel running,first video achieved available available available mirage available hellomirage available remains hack intended work outofthebox right,first video achieved long way hacking debugging native code emitter ocaml compiler finally come build run first example mirage unikernels able build whole mirage project run extended ram proof concept probably work box hacked lot thing way tried explain bottom article maybe forgot step whole example size flash code byte flash rodata byte static dataram byte used static instructionram byte used working getting runtime information order see hard would run mirage unikernels without additional ram right go memory startup code try allocate frame table whereas dynamic memory available total every mirage package needed build hello world example ported opam repository available github package development prefixed binutils set path located subdirectory switch crosscompiler needed build almost every package installed subdirectory switch update compiler include path contain idf header mirage runtime implementation ctypes implementation using libffi useless dynamic linking supported use cstubs generation future compiler full native backend target indeed subject lot optimization first running draft available stub o interface platform available mirage add target mirage configuration tool working intended though available hellomirage first mirage sample fully run available remains hack intended work outofthebox right update bigarray meta remove unix dependency update mirageprofile meta remove ppxtoolsversioned dependency need built twice mirage config need worked generate correct jbuild file install every header root intended mv include mv includes switch needed finish installation
292,Lobsters,osdev,OS,Using the IOMMU for Safe and SecureUser Space Network Drivers,https://www.net.in.tum.de/fileadmin/bibtex/publications/theses/2019-ixy-iommu.pdf,using iommu safe secureuser space network driver,,obj length r filter flatedecode stream e zq ҁ ѷ bd ғ endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate endobj obj procset pdf text colorspace r font r r r endobj obj length r n alternate devicegray filter flatedecode stream q ex bzhĸ 됗 g w c sp r ލ ul ci n x c bڵ r endstream endobj obj endobj obj iccbased r endobj obj length r filter flatedecode stream h r endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate endobj obj procset pdf text font r r r r endobj obj length r filter flatedecode stream ѕ ʱ jzso j c u op msѫ z sce ej v e xh rc α endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate endobj obj procset pdf text font r r r r r endobj obj length r filter flatedecode stream uk rj ܥ w kr e g h qmi endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate annots r endobj obj procset pdf text font r r r r r r endobj obj r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj length r filter flatedecode stream v b n endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate annots r endobj obj procset pdf text font r r r r endobj obj r r r r r r r r r r r r endobj obj length r filter flatedecode stream n r sty ŭ h x th endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate annots r endobj obj procset pdf text font r r r r endobj obj r r r r r r r r r r r r r r r r r endobj obj length r filter flatedecode stream zd e z ntm ky xñ q u tnb gk j z ty v g av f endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate annots r endobj obj procset pdf text font r r r r r endobj obj r r r r r r endobj obj length r filter flatedecode stream p qer q vi h e w ep lfc tաm j glvym 胎 l q
293,Lobsters,osdev,OS,Context Drawing System,http://c64os.com/post?p=79,context drawing system,context drawing system context drawing system organizing big module hardware level character animation screen editor modern context drawing system http note canvas screen editor modern comparison kernal plot routine chrout petscii color code o context drawing system commodore petscii code drawn context buffer screen buffer wrapping like see greg naçu want support work stock buy commodore logo patch make donation little cup coffee another way help use referral link hosted digital ocean droplet sign digital ocean refereral link want support hard work comment powered disqus,march programming theory context drawing system mentioned briefly previous post working context drawing system o believe first mentioned context drawing system september post organizing big module back said drawing general complex topic really hard cover single post eventually dedicate entire post talking drawing system work gregory naçu september well time arrived post go detail talking context drawing system state flux calmed pretty much state going stay location name system call worked well parameter take let u dive context drawing system hardware level whether talking screen screen bottom hardware level physical memory graphic chip chipset interprets data generate video signal necessary put pixel screen newer hardware exactly memory translating memory pixel work complicated always several layer abstraction removed programmer coding everything much simpler easy remove layer abstraction work directly hardware see nt great idea even kernal introduces layer two abstraction kernal nt provide anything abstracting bitmap drawing drawing o primary ui also let start vicii chip native text mode mode read screencodes byte matrix screencode fact index selected characterset characterset bitmap screencodes therefore index character composed pixel square pixel time bit byte aka one register vicii used specify start characterset start byte screen matrix memory drew diagram paper help visualize bit work interested bit detail post character animation section drawing busy animation upshot two region memory combined vic special color memory used generate textbased video screen memory accessed close realtime raster line drawn build frame frame therefore poke byte screen matrix memory next time raster beam sweep past part screen draw character instead whatever frame video system unlike modern graphic system manipulate memory way vicii incapable modifying memory ever read therefore job cpu update modification transformation video memory minor execptions example reu used instead cpu move chunk memory one place another move memory video memory thus changing vicii draw particularly useful video player topic return point future although easily put character directly screen memory poke example pop top left corner screen generally speaking output content screen come time kernal output message like ready prompt put r put e put fixed place screen memory would happen enter command like list put program directory listing know long next ready prompt printed one routine kernal output system message need put message different place screen different time relative else already come part context next message printed screen editor kernal implement called screen editor basic program generate output abstractly backending screen editor screen editor simple concept like infinitely long scroll scroll one direction new content scroll onto bottom old content moved top screen something top never go back one simple concept like page novel textual content start left successive content flow horizontally towards right hit right end line wrap around left edge next line another free line screen draw onto previous content whole screen scrolled line losing whatever topmost line new blank line become available bottom infinite scroll concept screen editor accomplish program nt need specify next printed character end screen screen memory must go yet time program free call print supply printed screen editor infinite scroll track maintains contextual information printed character internal context updated preparation next printed character screen editor maintains cursor cursor mistaken little square blink screen little thing cursor indicator visual cue let know data cursor real cursor much fundamental blinking indicator example could put basic program endless loop reading printing content large text file modem byte read would output next appropriate place even though throughout process never see cursor indicator screen editor implement cursor several variable current line number pointer memory location first character line column offset also variable constant dimension screen get bit deeper exploring screen editor work discover also build maintains table line pointer abstract screen memory conceptual logical line character long several fun thing play around screen editor see invisible trait come alive first thing try turn type word like test move cursor back start word make insertion holding shift key pressing insertdelete key would expect word test get pushed across screen imagine string character moved screen memory intuition reinforced word hit right edge screen flow one character time onto line guess process could continue line line word test get bottom screen intuition suddenly disconfirmed word hit end line started ca nt pushed two physical character line screen managed single logical character line two fun little experiements make happening make lot sense anyone tried basic programming probably encountered situation looking tried enter line basic pushing return get syntax error list program program line basic screen line long reaching end second line screen editor automatically move cursor new logical character line content new line fragment english prose quotation mark generates syntax error meanwhile line start print never input return never pressed whilst cursor inside logical line let look one see else screen editor behind scene soon think minute realize could never case pushing insert move subsequent data one character time memory case every character every line would begin rightward march ready prompt following line would begin moving towards right inserted character line clearly never happens something else quite clever happens wrote short program line contains word famous star trek intro basic line exceeds character run program list listed line basic tightly packed one physical screen line next wait second left critical word starship enterprise nt problem add end appropriate basic line basic line allowed character long move cursor end voyage start type rest time cursor reach end screen line screen editor push following basic line opening new blank line middle screen continuation line editing instance think screen editor scroll content opposite direction normal point trying make brief detour history typing ready prompt merely placing one character next subsequent memory location screen editor actually fairly sophisticated abstraction sits hardware layer internally maintains table line pointer pushing return end beginning new line default allocated character exceed character transformed full character line manipulating line pointer table content scrolled rare circumstance bumped line pointer manipulated track physical location screen matrix memory numerous contextual variable maintained along cursor current insertion color reverse insertion depth status inside quoted string way meet eye sure fact software built every commodore available moment turn big selling point back day modern context drawing system estimation screen editor context drawing system albeit primitive one today standard crux context drawing system supply successive partial piece information information laid lower level modified relativized come let look easily accessible context drawing system today canvas found suitable example tutorial site http html javascript create canvas object associated detail dimension identifier well invisible backend memory allocation buffering image simply creating html page canvas tag attribute like canvas id canvasid width height canvas next need javascript actually write code canvas example tutorial go like var context documentgetelementbyid canvasid getcontext var width triangle width var height triangle height var padding draw path contextbeginpath contextmoveto padding padding top corner contextlineto padding width height padding bottom right contextlineto padding height padding bottom left contextclosepath fill path contextfillstyle contextfill get yellow triangle like one shown let face code million mile removed actual pixel put real screen bit abstract illustrate point successive step building contextual information first line get reference canvas context whatever ever nt really know virtue abstraction problem next couple variable defined width height padding nt necessary make changing appearence triangle mere matter tweeking number come real magic command called context one next command add detail underlying environment building one start call begin path tell context shape going defined context internally set cursor move command given set initial position cursor set set relative image buffer know relevant know big declared next line command move cursor also record conceptual line join two point note line command provides end coordinate start coordinate already stored context previous command another line command given third point lastly special command close path tell context building shape probably assumed line join final point back original starting point lastly two final command first set property case fill style flat color finally command fill context know position shape fill based path detail provided know fill style fill inner space shape pixel color done image buffer created backend canvas object html renderer come along render various html element webpage treat canvas tag though image tag except instead getting pixel image externally sourced graphic file get image instead tag backend image buffer programmatically drawn html renderer job compositing together html element content canvas tag image buffer however need redrawn time html renderer need recomposite various element would much slow relevant o get soon note canvas happens plot point fall outside stated size canvas answer problem drawn content automatically clipped edge canvas plus canvas size aspect ratio nt need size screen usually much smaller also larger screen need aspect ratio screen screen canvas whatever choose html canvas many option besides discussed stick path defined shape tell context draw shadow around shape stroke shape color line choose stroke color thickness masking pattern corner join style setting various context property set bunch context variable sending one command time seems like would big pain unset one time draw next phase overall result solution complete current state context backed pushing internal stack later context restored pulling back stack lastly mentioned multiple drawing phase build overall result rarely would use canvas draw one triangle done half point able build complex image least partly dynamic concept coat paint put layer usually begin clearing context might draw yellow triangle blue circle orange rectangle somewhere else drawn thing overlap another later thing drawn earlier thing partially obscuring also known least one form compositing screen editor modern comparison know screen editor taste modern context drawing system least talk different shortcoming screen editor lie first let think similar composited let say use kernal plot routine use set cursor origin maybe set row column set color chrouting petscii color code petscii rvson code next print string character character draw relative plotted origin color reverse taken account new character laying string positional color reversed property later lay another string time might set origin via plot row column choose different color turn reverse print different string character two range partially overlap latter partially obscures earlier drawn string leaving part original still visible abstract underlying memory screen editor handle figuring screen memory plot land kernal also support changing location screen memory default last byte xxff sprite pointer set kernal workspace variable change location kernal plot chrout routine automatically handle working new range also handle relative reference canvas plot line whatever previous cursor point new point screen editor move cursor new location screen relative last think well big whoop nothing kid one first basic program wrote actually felt like starting understand mean program draw large petscii art digital clock screen one routine know draw digit drawing code produce digit adjusting position cursor relative overall clock program able adjust cursor relative origin start particular digit need updated pretty cool serious shortcoming screen editor talking obvious one screen editor textbased drawing system obviously going pixel precision modern system also lack ability draw shape primitive want draw box example write short routine reposition cursor subsequent line draw box series row talking either biggest shortcoming screen editor opinion inability clip drawing bound edge mean well take example petscii clock program drawing code know draw digit us code draw digit anywhere screen set origin top left corner digit boom draw digit rightward downward point happens digit say character wide set origin le character away right edge screen really want drawing code care simply draw way matter screen close right edge want part digit disappear get clipped right edge screen happens course character overflow right edge flow onto left edge one row easy see screen matrix byte contiguous memory drawing perspective maybe want maybe want screen editor nt provision sophisticated o context drawing system long last come context drawing system created o many way still simple still built textbased screen matrix bitmapped add much needed functionality make drawing lot easier system divided two part buffered context drawing context screen compositor think former way canvas tag creates implicit image buffer latter think way html rendering engine combine various element buffer together composited according layer order let start buffered context drawing first o generally nt ever write data directly screen memory mean memory protection really want write screen memory nothing going stop generally speaking great idea reason screen exclusively belong one program reason system manages recompositing screen opportune time correct order might wonder could using screen example menu bar one open menu status bar floating utility panel system dialog box split screen mode split screen mode complicated article suffice say time whole region screen matrix memory even used show standard textbased ui instead full color data hire multicolor bitmap data buffer buffer question system redraws screen layer type code need draw application utility system code reserve layer pushing layer structure system screen module system call upon layer draw necessary order lowest background layer draw first next next whatever screen buffer vulnerable getting clobbered moment could happen menu open draw screen buffer system dialog box pop system asks layer draw let say data display drawing logic code know layout data useful pleasing way could simply make drawing call right system screen buffer sometimes good idea drawing code slow might feel snappy enough user menu bar open menu status bar redraw scratch data every time layer share layer asked redraw opinion fast enough menu draw everything else snap shut automatically fairly rare something lower level rerendering open menu forcing redraw although write sample code showed world commodore kingston retro computing club demonstrate realtime compositing even required redraw time second still fast enough hand lower layer much prone disruption namely menu popping top time bottommost layer generally used application main ui prone disruption get disrupted menu also opening utility start dragging utility around worse application main ui may arbitrary complexity whereas menu fairly simple menu usually occupy small area screen consist row text consistent color easily drawn straight menu data structure bit overhead application hand may full toolkit widgetbased ui sort varied color source content consisting view class complexly nested together scroll offset content clipping application ui redrawing anew system screen buffer every time layer asked redraw would forced redraw time row user pick move utility panel result would slow utility panel would track smoothly beneath mouse albeit would still better geos rule allow moving desk accessory using screen buffer layer drawing buffer word possible always desirable create buffered draw context order context drawing system draw requires context naturally create context structure code push pointer structure toolkit module setctx system call context structured context word character origin word color origin byte buffer width byte width byte height word offset top word offset left vicii separate character data color data different region memory context need least two pointer one character memory one color memory two buffer must exactly size every one byte character data one byte color data even though lower nybble byte actually used buffer big arbitrary usually character color pointer point start buffer top left corner buffer represents call origin however nt pointer moved point origin inset top left physical buffer see minute buffer dimension aspect ratio arbitrary necessary specify wide buffer third property buffer width requires bit explanation let say want region drawing square row column divide number byte page get need page memory character data little bit left also need buffer color data need page let take look code allocate two buffer u return pointer lda mapapp ldx jsr pgalloc sty lda mapapp ldx jsr pgalloc sty lda sta contextbufwidth want allocate page memory character color buffer make mapapp type automatically deallocated application quits convenient could ask page row know maybe system ca nt provide contiguous page nt need contiguous despite small overhead calling pgalloc twice think better make two separate request page call pgalloc register hold page number first page buffer three page long effectively high byte pointer context struct initialized zero need write high byte done little endian remember high byte come second setting two pointer context character color origin canvas draw nt know row column row column etc setting buffer width force canvas area column therefore row happens care row extra row bit left drawing system wo nt use visualization might look example pretend looking character buffer color buffer similar different address example pgalloc returned wrote high byte character origin address giving pointer start buffer let say got cursor buffer draw character call abstract let think little lower level moment move cursor right easy add one move left easy subtract one move row column add buffer width go way end current row plus remainder row length row end column one row subtract buffer width go row exactly would work screen matrix memory buffer width fixed column address screen memory except last row add get address column one row however magic end draw context o fixed buffer size like byte fixed aspect ratio like draw region within arbitrarily sized buffer moved might wondered buffer width width property looking visualization blue outer square size buffer buffer width column red square actual drawing region fully contained within blue buffer draw region red square origin somewhere within buffer plus width height width height property draw context struct define width height red draw region however buffer width still necessary see visualization nt matter draw region inset top left edge whole buffer cursor represented small green square want move row still add buffer width two red arrow show adding buffer width blow past edge draw region end full buffer start next row start buffer way back draw region one row transforming draw context define origin draw region simply use character origin color origin property context though lose initial origin value pointer start buffer nt problem though come drawing nt matter big whole buffer long adhere certain constraint adjusting transforming context let think transform context make smaller know width buffer width draw region width mean always move origin right overflow right bound shrinking width amount shifted origin go always move origin much height simply decreasing height time moving origin height becomes nt make sense width height become zero draw region would nonexistent could skip code meant draw region would nowhere draw additionally make sense height width go negative fact impossible context width height property unsigned allows drawable region maximum row column text cell pixel drawable region o maximum pixel good limit computer able bigger quickly run memory following constraint ever making draw region smaller whatever code controlling transformation never need worry much bigger ought allowed make also nt relevant know original origin start physical buffer want make transform move origin address within current draw region always valid leave origin decrease height width nt lead problem make draw context smaller lose previous origin previous height width ever become bigger answer lie pushing pulling context stack initial code creates buffer assigns context dimension maximum value whatever code allocates three page buffer code also set initial origin character color start buffer buffer meant assigns buffer width initial draw region width height main code code allocating initializing want draw buffer go right ahead imagine main code want pas drawing task code generic toolkit view class first push current context stack shrink inset context appropriate view draw call view draw code point view class absolutely idea memory buffer aboslutely idea draw region positioned sized relative surrounding buffer draw using draw routine get later context happens view contains subview easy view take context push stack shrink offset according subview relative call subview draw routine process recursive child view return parent parent pull context stack adjust second child different relative offset return parent like regular assembly routine call routine truly finished nothing child finished executing call child jmp instead jsr child routine executes rts skip back two level using jsr immediately followed rts waste jsr push return address stack thing returned rts exactly concept view drawing view immediate child need back context adjust first child call first child draw routine first child finished restore context stack leave stack modify second child call second child draw routine second child done pull context stack one last time modify third child nt need push back stack final time third child return nothing return parent parent manages pullrestore stack transforming clipping light view hierarchy upshot code able make draw region smaller inset currently relates view hierarchy nest nothing able draw outside defined draw region mean truly draw outside region long using provided drawing routine anything would fall outside draw region get clipped automatically let look simple view hierarchy might look context drawing system work buffer draw context configured color indicate nesting depth see hierarchy level deep white root red level inside yellow level inside red one yellow area level nested inside blue style hierarchical layout look pretty familiar web developer thing notice child region ever cross bound parent common one parent contain one immediate child child always way smaller andor inset parent reason context ever transformed become smaller let think application would use drawing context produce sort layout main application code allocates page char data page color data set char origin color origin pointer start buffer next set buffer width define aspect ratio buffer also begin setting width height property context struct inital size context fully defined bigger never set good anything made bigger could overflow end allocated buffer would likely lead crash data corruption order draw system use context struct passed system using routine setctx structure copied system working memory full dirty redraw root level clear context system call ctxclear take single character applies color reverse petsciitoscreen translation according current context updated october fill currently defined draw region character color region dirty need cleared case clearing entire buffer root white level content drawn directly end written child bit space top middle bottom written utility example topmost row buffer drawn panel titlebar consists close button two character horizontal line title utility two character horizontal line stylistic choice mine maximize screen real estate remaining righthand side title bar left transparent beos also something similar think look cool speaking transparency buffer always rectangle however one petscii value reserved represent transparent character standard petscii reverse space since regular space pixel set reverse identical appearance o value skipped transcribing draw context screen buffer later root level contains two child two red rectangle transforming first child context pushed stack system call pushctx pushctx take parameter push current context context shrunk origin column one row move origin row simply add buffer width order risk overflowing buffer height would need reduced least compensate inset origin case actually reducing height point drawing passed something main code initially configured buffer context usually hopefully passoff toolkit view let imagine child tkview tkview control know two child wide offset two sidebyside yellow box top red box tkview part drawing loop child push context stack move origin one right one adding buffer width note nt know wide buffer care adding buffer width context move origin one row particular buffer add one move right one must also adjust width height case setting width much smaller initial height reduces call child draw routine topmost leftmost yellow region whatever view draw however want even draw however big want anything overflow bound current draw region clipped automatically clip draw region scroll inner content draw region content big let take detour get nut bolt drawing scrolled offset drawing routine scrolled offset let say implementation whatever view drawing first yellow box nt know drawing memory nt really know going clipped perhaps thing know content let say content character wide character high perhaps list item long longest item wide pretend drawing region maximally large maximum width height draw maximum unsigned measured character word character wide character high draw anywhere want inside enormous virtual square half million pixel wide half million pixel tall start drawing need position draw cursor setting local row column called local nt matter end buffer memory matter cursor relative view square virtual canvas passing one number bit pain three register kernal sometimes need take worth data break two call routine setlrc setlocalrowcolumn call carry clear set row passed regwrd word data x low byte high byte standard o call second time carry set set column passed regwrd setting local row column set draw property calling setdprops draw property flag sent x register draw color passed register draw property petscii screencode conversion reverse direction cursor travel cursor positioned draw property set draw making repeated call ctxdraw character draw passed register x register preserved easy looping view data time character passed draw petscii screencode conversion byte piped o routine petscii happens defines six eight block see programming reference post commodore petscii code block undefined kernal also convert petscii screencodes call chrout output device screen however kernal routine map block block respectively frankly nt really understand logic behind decision map block block o screencodes block one used graphical symbol routine o leaf value block untranslated actually convenient let drop graphical symbol otherwise string petscii reverse draw property set bit inverted kernal note petscii conversion screencodes done first reverse pas block character left alone untranslated reverse swapped block vice versa make better sense kernal effectively make block unaddressable difference o may opt define block character truely different corresponding block character strictly reverse need way address block moving along character attendant color actually get drawn local row column applied origin current draw region width height local row column beyond right edge width bottom edge height character get drawn nowhere clipping action character conversion way happens figuring draw drawn wo nt get converted would waste cycle calling ctxdraw local cursor advance one note one draw property cursor travel direction unlike kernal screen editor o draw context make cursor advance vertically convenient drawing vertical strip vertical scrollbar draggable vertical splitter internally course vertical advance consists adding buffer width cursor something still nt make sense though content bigger draw region draw region automatically clip bound ever see render content overflow look back original context struct context word character origin word color origin byte buffer width byte width byte height word offset top word offset left may wondered offset top offset left value also unsigned serve negatively offset origin virtual drawing canvas origin current draw region like blue square tone together lighter darker represents virtual canvas onto ctxdraw capable drawing set local row column cursor position blue square local drawing coordinate system current view yellow rectangle draw region defined current drawing context ultimately backends real memory somewhere inside pgalloc buffer context offset top offset left property define far blue virtual coordinate system offset draw region origin indicated black arrow particular example offset top set offset left set affect clipping drawing relevant region labeled cursor set setlrc set cursor say row column would put top left region labeled origin draw region next cursor advance right way cursor ever advance yellow draw region cursor set advance right advance c c e never pas draw region cursor set advance downward pas b b e never pas yellow draw region labeled draw context know call ctxdraw return carry either set clear set mean subsequent call current cursor position draw ever result anything nt clipped allows drawing routine abandon drawing row column move next situation similar region b c set local row column fall region b rightward advancing cursor eventually cross drawing region region eventually leave right edge region e point ctxdraw start returning carry set let know region c thing vertically region c rightward advancing cursor immediately start returning carry set region b downward advancing cursor thing region start drawing cursor advance either direction leaf either right bottom edge region carry start getting returned set call lastly region e nether region cursor start end cursor never progress draw region scrolling efficient drawing idea offset top offset left able slide around blue virtual canvas current view different part become visible little peep hole currently defined draw region context offset get set programmatically change offset top offset left value honest intention anyone would ever manually generally speaking view content bigger available space want able see get content need embed view inside tkscrollview tkscrollview o take one child set flag scroll either vertically horizontally tkscrollview request one child tall andor wide draw scrollbars allow user scroll keep thing simple let pretend scrolling happens vertically even though everything describing applied also horizontal scrolling user move scrollbar tkscrollview remembers internally scroll offset tkscrollview draw routine called first draw scrollbars shrink context draw region part show child add scroll offset context offset top call child draw routine super important add context current offset top replaces context offset top reason nest multiple scrollviews one inside tricky visualize happens scrollview inside another scrollview partially visible promise progressive shrinking context draw region work said virtual canvas onto view able draw using local coordinate huge area cover nearly billion pixel computer lot space several question raised even large space question might need much space enough memory much space understand need much think way content structured overflow visible area need scrolled mind two main way content becomes overflowingly large first way raw data content could big block text could list many shorter string list bit easier think let stick list could example list file name read directory file short name one displayed subsequent line limited local coordinate system would max able draw line content file name example enough directory hold file absolute smallest storage device compatible reading directory lot would nice limited row content reasonable make limit higher though memory constraint case list file need least byte per file name file per page file fit page o around memory page available enough memory hold file name row limit next step might bit excessive virtual real estate much space nt actually need allocated memory coordinate canvas row tall column wide see comparison visualization insanely bigger canvas size barely visible speck beside canvas scale size pixel size character cell nt need item number become useful need something exceeds number like let say data structure memory file name need minimum page memory draw could start index set local row column cursor advance rightward output first file name next loop set local row output next file name repeat get end data structure printed file name along way drawing context clip row fall draw region defined height offset top character clipped away nt draw x byte buffer drawn anywhere character clipped actually get copied buffer already allocated drawing context bingo easy wait something right technically would work would extremely slow inefficient everytime tried scroll one row scrollview would adjust offset top call child redraw routine child would redraw file name slightly different subset pas tiny clipping peep hole instead know kind view draw copious amount data hundred line take simple step dramatically decrease draw time increase efficiency need know start drawing need know stop least two situation could well let say long scrolling list none parent contained within scrolled area simple case much like example yellow rectangle contained within red rectangle contained within root drawing context none yellow rectangle container scrolled case context offset top equal list scroll offset offset skip first file name list set first local row first one spend time trying draw already inside drawing region nt getting clipped get bottom drawing region ctxdraw start returning carry set check carry inside loop get set stop looping complicated situation though scrolling list could embedded inside scrollable area offset number case context raw offset top property equal list scroll offset reliably determine list scroll offset requested parent internal scroll offset property however go beyond role context drawing system design toolkit class said another way content overflow bound parent get clipped thus need scrolling rather one view handle drawing large amount data could also arrangement many view placed beside eventually overflow space alloted parent also said tkscrollview support one child get scroll height width asking child wide tall true however ordinary view able contain multiple child view could example create form made long list labeltextfield pair label textfield view added single parent anchored positioned within parent resulting overall size scrolling required see sort dipping toolkit mention completeness sake tkview loop child calling draw routine however view also aware context offset top offset left width height property view calculate childbychild basis child entirely outside draw region call child draw routine kind view draw small amount content single short text label draw routine get called least portion content clipped case much coding simply draw entirety let context clip away bit nt visible unrolling unrolling unrolling recursion doubt see drawing context along toolkit view highly recursive drilled several level yellow rectangle top left reminder example top left yellow box contained scrollview contained view know draw list string data structure efficiently pay attention offset parent draw bare minimum necessary perhaps allowing small element clipped filename character wide yellow draw region high wide one taken scrollbar leaving wide high could add horizontal scrollbar making content high allowing user scroll left right see complete file name alternatively could ignore horizontal scrolling allow context clip end file name many place macos instance insufficient horizontal space show item list horizontal scrolling list item get ellipsed macos like use ellipsis clipped text done drawing yellow rectangle nowhere deeper go scrollview draw routine return course called top red rectangle draw routine draw routine pushed context shrinking first child pull context using pullctx system call like pushctx take parameter simply restores context state time last push hallelujah need worry whatever modification child may made state may left check another child red rectangle second wider yellow rectangle right since red rectangle last child nt actually need push context stack modify shrinking time modifying suit origin width height second child call child draw routine recurse recurse recurse every visible view drawn everyone like good recursion joke drawn context buffer happens forced redraw user interface date dirty otherwise corrupted remember back simply using main screen buffer drawing buffer every time anything drawn screen would corrupt previously drawn data asked redraw would choice completely redraw ui would likely involve redrawing entire view hierarchy instead choose allocate special private buffer process ui draw private buffer nothing else overwrite called private code application ever touch memory able see parallel o private draw context buffer backend image buffer created canvas tag appearence neither one need recomputed unless something specifically modifying apparence particular buffer sure code arbitrarily corrupting data longer becomes necessary completely totally rerender view hierarchy scratch instead individual toolkit view flag dirty perhaps grab scrollbar move scrollview would set dirty flag still working part global flag part view hierarchy dirty set intentionally dirtied tell system layer need draw cycle next loop around main event loop cause system call layer draw routine layer draw routine see view hierarchy date begin process recursively walking view hierarchy modifying context go looking view marked dirty dirty view redraw child described dirty flag mean single checkbox get checked result every view redrawing checkbox redraws getting buffer onto screen part view hierarchy dirty redraw part hierarchy specially allocated context draw buffer fine private buffer get onto screen addition need update dirtied view hierarcy also situation layer told redraw buffer unchanged fact happens time like menu fly overtop layer close layer asked redraw nothing layer private buffer changed private buffer make layer much snappier regardless whether updated private buffer last step always copy buffer main screen buffer system screen module call layer drawing routine correct order thus safe time draw anything want anywhere screen buffer corrupt layer u screen module provides special system call routine copy buffer defined current draw context screen buffer thus necessary specify detail buffer already captured context special opportunites screen small probably going size last vicii chip earth gate final electron ancient creaky circuit path good news u use x register specify screen copy context buffer screen small fact width le half maximum value x register used pas column signed allows origin buffer positioned column left edge screen column right edge screen practice allows position buffer partially left right edge screen surprise got first amiga workbench window much like window wheel dashboard moved partially edge screen o register used setting row context buffer origin start moment row value unsigned prevents positioning buffer top screen close bottom bottom buffer fall bottom edge screen may change register signed well main purpose able reorigin context buffer screen buffer allow utility moved like window dragged top title bar anyway make impossible ever drag window positioned top screen actually limitation artificially imposed macos feel sensible reason might change future able animate modal window top middle window nt manually positioned moved see earlier mentioned special character defined transparent return topic transparent byte come play context buffer copied screen buffer byte encountered source buffer skipped nothing copied screen buffer typically done narrow titlebars utility panel used many clever way add region transparency middle panel screen buffer one last thing talk careful discussion always refer copying context buffer screen buffer screen use main screen buffer direct target context drawing use screen way lest anyone think pedantic say screen buffer really mean screen buffer screen near top section post begin discus o context drawing system mentioned briefly split screen mode complicated get post want say screen matrix memory used vicii screen code draw text mode also primary supplementary color data hire multicolor bitmap mode o support text modebitmap mode split screen position split controllable user ordinary screen memory freely written therefore o buffer screen matrix memory textmode color memory system call always copy private buffer system screen buffer said menu layer nt use private buffer instead render directly screen buffer going screen buffer straight screen matrix memory last step draw cycle copy screen buffer screen color buffer real memory area vicii actually draw two big benefit double buffering first never see compositing artifact real screen matter long take complicated ui update initially introduced main screen buffer order get rid horrible screen flickering would occur underlying application would redraw prior utility panel moved redrew new position screen refreshed middle enough time everything redraw get recomposited le time complete screen refresh geos nt even try painfully watch every line character get drawn screen take many screen refreshes redraw everything would even slower try double buffer single screen o geos bitmap mode memory would also horribly impinged even o double buffered screen usable space lost color well actual screen matrix memory tucked away ram io much later sit implement o split screen mode sudden existence extra screen buffer made managing split screen fairly straightforward two piece code actually care split system status bar draw row preceding split screen module adjusts copy screen buffer screen matrix memory wrapping last month lamented wanted keep pace making post month already march first post month however word long feel justified time get one post one doozy spoken past mostly planning phase many thing finalized implemented far working everything described exception toolkit example actually tested working use app launcher testground app use testing various feature o numerous utility always comment question suggestion welcome like see read one weblog post free first thank interest make producing content feel worthwhile love hear input feedback forum best answer every question creating o documenting progress along way give something contribute commodore community please consider purchasing one item currently offering making small donation help continue bring update technical discussion programming reference generous support greatly appreciated greg naçu want support work eprom usd shippinghandling stock patch usd patch usd buy commodore logo patch make donation little cup coffee another way help use referral link hosted digital ocean droplet digital ocean cloud hosting platform built developer make simple get started intuitive administrative tool reasonable price scale need grow sign referral link get credit spent get looking cloud platform host website web app sign digital ocean refereral link save money help time want support hard work please enable javascript view comment powered disqus
294,Lobsters,osdev,OS,IBM iSeries Architecture Overview (2008),http://www.mi.fu-berlin.de/wiki/pub/Tec/ArtLehreSystemverwaltung2008/module03lectureV3.pdf,ibm iseries architecture overview,,äüöß obj stream k تo c
296,Lobsters,osdev,OS,Redox OS 0.5.0,https://www.redox-os.org/news/release-0.5.0/,redox o,back relibc cookbook standard image relibc new package relibc code change discussion,sunday march back one year four day since last release redox o time hard work improving redox ecosystem much work related relibc new c library written rust maintained redox o project adding new package cookbook proud report far exceeded capability newlib using system c library added many important library program see listed standard image download image first glimpse standard iso look much different last real release still login screen default background application accomplishment work relibc intense touched nearly every part system one dig little deeper change become obvious event system redesigned provide correct support select poll complete memory mapping support implemented pthreads implemented also number signalrelated system call whole change provided better support llvm rustc mesa llvmpipe addition new image based new bootloaders coreboot efi significant work done provide library efi rust development develop coreboot payload rust either bootloader project forked repurposed desired see following project new package result relibc work seen massive addition new package added filesystemtoml building locally installed pkg install see available package version code change please use following link see code change since discussion please see following link discussion
297,Lobsters,osdev,OS,Communication Files: Interprocess IO before Pipes (2017),https://www.cs.dartmouth.edu/~doug/DTSS/commfiles.pdf,communication file interprocess io pipe,,âãïó obj content r group c devicergb transparency parent r type page endobj obj filter flatedecode length stream í u j ècñ ò õ çg ÿ ãğğ ùn pód ïe ú ì ù z óø éig õchgnãˆn õ ìeajuâ µvé ó fìmd ğu å jjôzw msò w eø í yüä î híìâìkµûáuäº úfÿš ùjô ešõoöõç œşm z endobj obj content r group c devicergb transparency parent r type page endobj obj filter flatedecode length stream f á ˆ ö wæa ï omšşltæa wd ôaåq qöi zè ù bö âp ræ ñ ñ å ölg õª şlæ ò ècíøµåxß yë œróîıç r ut è nœö vp á œ ªî fï î ægë êácßğê øú œ yfôé évè vÿ wêãòín ªì eó öéàll øvläñ ÿgd ö æv kjòjºšš óomúönõô j vş pè dïv ïˆáµ endobj obj content r group c devicergb transparency parent r type page endobj obj filter flatedecode length stream û ıæîßì lídó ç uêa wëf ßßö ºğõìõe õ ê âšõaz ã ş únî ö x ğa sê x éœ zndõàû áãõøğe ï ñ f è q ğ gµœäó ãbu ô aè psi xûûz p şğ òœv âäqz ê ë õê h í ãÿfù õ ö r ê zói oóã qøaš í ör ïmœ ky õ ôx é ùhnÿ n ç jw ïşt ğ ï c
298,Lobsters,osdev,OS,Paging Implementation,https://os.phil-opp.com/paging-implementation/,paging implementation,paging implementation github bottom introduction previous post ca nt access page table kernel accessing page table identity mapping identity map page table memorymapping file segmentation map fixed offset use separate memory region page table mapping map complete physical memory mapping complete physical memory huge page temporary mapping map page table frame temporarily recursive page table map page table recursively example beginning post address calculation octal previous post octal bootloader support cargo feature boot information semverincompatible macro implementation accessing page table end previous post rfc translating address using recursive page table creating new mapping function generic dummy choosing virtual page previous post creating mapping post allocating frame method range syntax implementing trait using summary next allocate memory collection type,paging implementation mar post show implement paging support kernel first explores different technique make physical page table frame accessible kernel discus respective advantage drawback implement address translation function function create new mapping blog openly developed github problem question please open issue also leave comment bottom complete source code post found branch table content previous post gave introduction concept paging motivated paging comparing segmentation explained paging page table work introduced page table design found bootloader already set page table hierarchy kernel mean kernel already run virtual address improves safety since illegal memory access cause page fault exception instead modifying arbitrary physical memory post ended problem ca nt access page table kernel stored physical memory kernel already run virtual address post continues point explores different approach making page table frame accessible kernel discus advantage drawback approach decide approach kernel implement approach need support bootloader configure first afterward implement function traverse page table hierarchy order translate virtual physical address finally learn create new mapping page table find unused memory frame creating new page table page table accessing page table kernel easy may seem understand problem let take look example page table hierarchy previous post important thing page entry store physical address next table avoids need run translation address would bad performance could easily cause endless translation loop problem u ca nt directly access physical address kernel since kernel also run top virtual address example access address kib access virtual address kib physical address kib level page table stored want access physical address kib virtual address map order access page table frame need map virtual page different way create mapping allow u access arbitrary page table frame mapping simple solution identity map page table example see various identitymapped page table frame way physical address page table also valid virtual address easily access page table level starting register however clutter virtual address space make difficult find continuous memory region larger size example imagine want create virtual memory region size kib graphic eg memorymapping file ca nt start region kib would collide already mapped page kib look find large enough unmapped area example kib similar fragmentation problem segmentation equally make much difficult create new page table need find physical frame whose corresponding page nt already use example let assume reserved virtual kib memory region starting kib memorymapped file ca nt use frame physical address kib kib anymore ca nt identity map fixed offset avoid problem cluttering virtual address space use separate memory region page table mapping instead identity mapping page table frame map fixed offset virtual address space example offset could tib using virtual memory range physical memory size exclusively page table mapping avoid collision problem identity mapping reserving large region virtual address space possible virtual address space much larger physical memory size nt problem since address space tib large approach still disadvantage need create new mapping whenever create new page table also allow accessing page table address space would useful creating new process complete physical memory solve problem mapping complete physical memory instead page table frame approach allows kernel access arbitrary physical memory including page table frame address space reserved virtual memory range size difference longer contains unmapped page disadvantage approach additional page table needed storing mapping physical memory page table need stored somewhere use part physical memory problem device small amount memory however use huge page size mapping instead default page way mapping gib physical memory requires kib page table since one level table level table needed huge page also cache efficient since use fewer entry translation lookaside buffer tlb mapping device small amount physical memory could map page table frame temporarily need access able create temporary mapping need single identitymapped level table level table graphic control first mib virtual address space reachable starting register following entry level level level page table entry index map virtual page address kib physical frame address kib thereby identity mapping level table graphic show identitymapping horizontal arrow kib writing identitymapped level table kernel create temporary mapping minus entry required identity mapping example kernel created two temporary mapping mapping entry level table frame address kib created temporary mapping virtual page kib physical frame level page table indicated dashed arrow mapping entry level table frame address kib created temporary mapping virtual page kib physical frame level page table indicated dashed arrow kernel access level page table writing page kib level page table writing page kib process accessing arbitrary page table frame temporary mapping would search free entry identitymapped level table map entry physical frame page table want access access target frame virtual page map entry set entry back unused thereby removing temporary mapping approach reuses virtual page creating mapping thus requires physical memory drawback bit cumbersome especially since new mapping might require modification multiple table level mean would need repeat process multiple time page table another interesting approach requires additional page table map page table recursively idea behind approach map entry level page table level table effectively reserve part virtual address space map current future page table frame space let go example understand work difference example beginning post additional entry index level table mapped physical frame kib frame level table letting cpu follow entry translation nt reach level table level table similar recursive function call therefore table called recursive page table important thing cpu assumes every entry level table point level table treat level table level table work table level exact layout following recursive entry one multiple time start actual translation effectively shorten number level cpu traverse example follow recursive entry proceed level table cpu think level table level table going treat level table level table level table mapped frame mean read write level page table cpu think mapped frame graphic illustrates translation step similarly follow recursive entry twice starting translation reduce number traversed level two let go step step first cpu follows recursive entry level table think reach level table follows recursive entry think reach level table reality still level table cpu follows different entry land level table think already level table next entry point level table cpu think point mapped frame allows u read write level table accessing table level work way accessing level table follow recursive entry three time tricking cpu thinking already level table follow another entry reach level table cpu treat mapped frame accessing level table follow recursive entry four time cpu treat level table mapped frame blue graphic might take time wrap head around concept work quite well practice section explain construct virtual address following recursive entry one multiple time use recursive paging implementation nt need read continue post interest click address calculation expand address calculation saw access table level following recursive entry multiple time actual translation since index table four level derived directly virtual address need construct special virtual address technique remember page table index derived address following way let assume want access level page table map specific page learned mean follow recursive entry one time continuing level level level index move block address one block right set original level index index recursive entry accessing level table page move index block two block right set block original level index original level index index recursive entry accessing level table work moving block three block right using recursive index original level level level address block finally access level table moving block four block right using recursive index address block except offset calculate virtual address page table four level even calculate address point exactly specific page table entry multiplying index size page table entry table summarizes address structure accessing different kind frame virtual address foraddress structure octal level table level table level table level table whereas aaa level index bbb level index ccc level index ddd level index mapped frame eeee offset rrr index recursive entry index three digit transformed offset four digit done multiplying size page table entry offset resulting address directly point respective page table entry sss sign extension bit mean copy bit special requirement valid address architecture explained previous post use octal number representing address since octal character represents three bit allows u clearly separate index different page table level nt possible hexadecimal system character represents four bit rust code construct address rust code use bitwise operation virtual address whose corresponding page table want access let addr usize let r recursive index let sign sign extension retrieve page table index address want translate let addr level index let addr level index let addr level index let addr level index let pageoffset addr calculate table address let sign r r r r let sign r r r let sign r r let sign r code assumes last level entry index recursively mapped nt case currently code wo nt work yet see tell bootloader set recursive mapping alternatively performing bitwise operation hand use recursivepagetable type crate provides safe abstraction various page table operation example code show translate virtual address mapped physical address srcmemoryrs use structure paging mapper page pagetable recursivepagetable use virtaddr physaddr creates recursivepagetable instance level address let let mut pagetable let recursivepagetable unsafe let mut recursivepagetable new unwrap retrieve physical address given virtual address let addr let addr virtaddr new addr let page page page containingaddress addr perform translation let frame recursivepagetabletranslatepage page framemap frame framestartaddress addrpageoffset valid recursive mapping required code mapping missing calculated first code example recursive paging interesting technique show powerful single mapping page table relatively easy implement requires minimal amount setup single recursive entry good choice first experiment paging however also disadvantage occupies large amount virtual memory nt big problem large address space might lead suboptimal cache behavior allows accessing currently active address space easily accessing address space still possible changing recursive entry temporary mapping required switching back described outdated remap kernel post heavily relies page table format might work architecture support approach require page table modification setup example mapping physical memory need created entry level table need mapped recursively problem ca nt create required mapping without existing way access page table mean need help bootloader creates page table kernel run bootloader access page table create mapping need current implementation bootloader crate support two approach controlled cargo feature mapphysicalmemory feature map complete physical memory somewhere virtual address space thus kernel access physical memory follow map complete physical memory approach recursivepagetable feature bootloader map entry level page table recursively allows kernel access page table described recursive page table section choose first approach kernel since simple platformindependent powerful also allows access nonpagetableframes enable required bootloader support add mapphysicalmemory feature bootloader dependency dependency bootloader version feature mapphysicalmemory feature enabled bootloader map complete physical memory unused virtual address range communicate virtual address range kernel bootloader pass boot information structure information bootloader crate defines bootinfo struct contains information pass kernel struct still early stage expect breakage updating future semverincompatible bootloader version mapphysicalmemory feature enabled currently two field memorymap physicalmemoryoffset memorymap field contains overview available physical memory tell kernel much physical memory available system memory region reserved device vga hardware memory map queried bios uefi firmware early boot process reason must provided bootloader way kernel retrieve later need memory map later post physicalmemoryoffset tell u virtual start address physical memory mapping adding offset physical address get corresponding virtual address allows u access arbitrary physical memory kernel bootloader pass bootinfo struct kernel form static bootinfo argument start function nt argument declared function yet let add srcmainrs use bootloader bootinfo nomangle pub extern c fn start bootinfo static bootinfo new argument nt problem leave argument calling convention pass first argument cpu register thus argument simply ignored nt declared however would problem accidentally used wrong argument type since compiler nt know correct type signature entry point function entrypoint macro since start function called externally bootloader checking function signature occurs mean could let take arbitrary argument without compilation error would fail cause undefined behavior runtime make sure entry point function always correct signature bootloader expects bootloader crate provides entrypoint macro provides typechecked way define rust function entry point let rewrite entry point function use macro srcmainrs use bootloader bootinfo entrypoint entrypoint kernelmain fn kernelmain bootinfo static bootinfo longer need use extern c nomangle entry point macro defines real lower level start entry point u kernelmain function completely normal rust function choose arbitrary name important thing typechecked compilation error occurs use wrong function signature example adding argument changing argument type let perform change librs srclibrs cfg test use bootloader entrypoint bootinfo cfg test entrypoint testkernelmain entry point cargo test cfg test fn testkernelmain bootinfo static bootinfo like init testmain hltloop since entry point used test mode add cfg test attribute item give test entry point distinct name testkernelmain avoid confusion kernelmain mainrs nt use bootinfo parameter prefix parameter name silence unused variable warning access physical memory finally start implement page table code first take look currently active page table kernel run second step create translation function return physical address given virtual address mapped last step try modify page table order create new mapping begin create new memory module code srclibrs pub mod memory module create empty srcmemoryrs file page table end previous post tried take look page table kernel run failed since could nt access physical frame register point able continue creating function return reference active level page table srcmemoryrs use structure paging pagetable virtaddr return mutable reference active level table function unsafe caller must guarantee complete physical memory mapped virtual memory passed physicalmemoryoffset also function must called avoid aliasing mut reference undefined behavior pub unsafe fn physicalmemoryoffset virtaddr static mut pagetable use register control let read let phys let virt physicalmemoryoffset let pagetableptr mut pagetable virtasmutptr mut pagetableptr unsafe first read physical frame active level table register take physical start address convert add physicalmemoryoffset get virtual address page table frame mapped finally convert virtual address mut pagetable raw pointer asmutptr method unsafely create mut pagetable reference create mut reference instead reference mutate page table later post nt need use unsafe block rust treat complete body unsafe fn like large unsafe block make code dangerous since could accidentally introduce unsafe operation previous line without noticing also make much difficult spot unsafe operation rfc change behavior use function print entry level table srcmainrs fn kernelmain bootinfo static bootinfo use blogos memory use virtaddr println hello world blogos init let physmemoffset virtaddr new bootinfophysicalmemoryoffset let unsafe physmemoffset entry enumerate entryisunused println entry entry cfg test testmain println crash blogos hltloop first convert physicalmemoryoffset bootinfo struct virtaddr pas function use iter function iterate page table entry enumerate combinator additionally add index element print nonempty entry entry would nt fit screen run see following output see various nonempty entry map different level table many region kernel code kernel stack physical memory mapping boot information use separate memory area traverse page table take look level table take mapped frame entry convert virtual address loop srcmainrs use structure paging pagetable entryisunused println entry entry get physical address entry convert let phys entryframe unwrap startaddress let virt bootinfophysicalmemoryoffset let ptr virtaddr new virt asmutptr let pagetable unsafe ptr print nonempty entry level table entry enumerate entryisunused println entry entry looking level level table repeat process level level entry imagine get verbose quickly nt show full code traversing page table manually interesting help understand cpu performs translation however time interested mapped physical address given virtual address let create function address translating virtual physical address traverse fourlevel page table reach mapped frame let create function performs translation srcmemoryrs use physaddr translates given virtual address mapped physical address none address mapped function unsafe caller must guarantee complete physical memory mapped virtual memory passed physicalmemoryoffset pub unsafe fn translateaddr addr virtaddr physicalmemoryoffset virtaddr option physaddr translateaddrinner addr physicalmemoryoffset forward function safe translateaddrinner function limit scope unsafe noted rust treat complete body unsafe fn like large unsafe block calling private safe function make unsafe operation explicit private inner function contains real implementation srcmemoryrs private function called translateaddr function safe limit scope unsafe rust treat whole body unsafe function unsafe block function must reachable unsafe fn outside module fn translateaddrinner addr virtaddr physicalmemoryoffset virtaddr option physaddr use structure paging pagetable frameerror use register control read active level frame register let read let tableindexes let mut frame traverse multilevel page table index tableindexes convert frame page table reference let virt physicalmemoryoffset framestartaddress let tableptr const pagetable virtasptr let table unsafe tableptr read page table entry update frame let entry table index frame match entryframe ok frame frame err frameerror framenotpresent return none err frameerror hugeframe panic huge page supported calculate physical address adding page offset framestartaddress addrpageoffset instead reusing function read level frame register simplifies prototype implementation nt worry create better solution moment virtaddr struct already provides method compute index page table four level store index small array allows u traverse page table using loop outside loop remember last visited frame calculate physical address later frame point page table frame iterating mapped frame last iteration ie following level entry inside loop use physicalmemoryoffset convert frame page table reference read entry current page table use pagetableentry frame function retrieve mapped frame entry mapped frame return none entry map huge page panic let test translation function translating address srcmainrs fn kernelmain bootinfo static bootinfo new import use blogos memory translateaddr use virtaddr hello world blogos init let physmemoffset virtaddr new bootinfophysicalmemoryoffset let address identitymapped vga buffer page code page stack page virtual address mapped physical address bootinfophysicalmemoryoffset address address let virt virtaddr new address let phys unsafe translateaddr virt physmemoffset println virt phys testmain crash printing hltloop run see following output expected identitymapped address translates physical address code page stack page translate arbitrary physical address depend bootloader created initial mapping kernel worth noting last bit always stay translation make sense bit page offset part translation since physical address accessed adding physicalmemoryoffset translation physicalmemoryoffset address point physical address however translation fails mapping us huge page efficiency supported implementation yet offsetpagetable translating virtual physical address common task o kernel therefore crate provides abstraction implementation already support huge page several page table function apart translateaddr use following instead adding huge page support implementation base abstraction two trait define various page table mapping function mapper trait generic page size provides function operate page example translatepage translates given page frame size mapto creates new mapping page table mapperallsizes trait implies implementor implement mapper page size addition provides function work multiple page size translateaddr general translate trait define interface nt provide implementation crate currently provides three type implement trait different requirement offsetpagetable type assumes complete physical memory mapped virtual address space offset mappedpagetable bit flexible requires page table frame mapped virtual address space calculable address finally recursivepagetable type used access page table frame recursive page table case bootloader map complete physical memory virtual address specfied physicalmemoryoffset variable use offsetpagetable type initialize create new init function memory module use structure paging offsetpagetable initialize new offsetpagetable function unsafe caller must guarantee complete physical memory mapped virtual memory passed physicalmemoryoffset also function must called avoid aliasing mut reference undefined behavior pub unsafe fn init physicalmemoryoffset virtaddr offsetpagetable static let physicalmemoryoffset offsetpagetable new physicalmemoryoffset make private unsafe fn physicalmemoryoffset virtaddr static mut pagetable function take physicalmemoryoffset argument return new offsetpagetable instance static lifetime mean instance stay valid complete runtime kernel function body first call function retrieve mutable reference level page table invoke offsetpagetable new function reference second parameter new function expects virtual address mapping physical memory start given physicalmemoryoffset variable function called init function easily lead aliased mutable reference called multiple time cause undefined behavior reason make function private removing pub specifier use mapperallsizes translateaddr method instead memory translateaddr function need change line kernelmain srcmainrs fn kernelmain bootinfo static bootinfo new different import use blogos memory use structure paging mapperallsizes virtaddr hello world blogos init let physmemoffset virtaddr new bootinfophysicalmemoryoffset new initialize mapper let mapper unsafe memory init physmemoffset let address address address let virt virtaddr new address new use mappertranslateaddr method let phys mappertranslateaddr virt println virt phys testmain crash printing hltloop need import mapperallsizes trait order use translateaddr method provides run see translation result difference huge page translation also work expected translation code stack address stay translation function additionally see virtual address physicalmemoryoffset mapped physical address using translation function mappedpagetable type spare work implementing huge page support also access page function mapto use next section point longer need memory translateaddr memory translateaddrinner function delete new mapping looked page table without modifying anything let change creating new mapping previously unmapped page use mapto function mapper trait implementation let take look function first documentation tell u take four argument page want map frame page mapped set flag page table entry frameallocator frame allocator needed mapping given page might require creating additional page table need unused frame backing storage createexamplemapping function first step implementation create new createexamplemapping function map given virtual page physical frame vga text buffer choose frame allows u easily test mapping created correctly need write newly mapped page see whether see write appear screen createexamplemapping function look like srcmemoryrs use physaddr structure paging page physframe mapper frameallocator creates example mapping given page frame pub fn createexamplemapping page page mapper mut offsetpagetable frameallocator mut impl frameallocator use structure paging pagetableflags flag let frame physframe containingaddress physaddr new let flag flag present flag writable let maptoresult unsafe fixme safe testing mappermapto page frame flag frameallocator maptoresultexpect mapto failed flush addition page mapped function expects mutable reference offsetpagetable instance frameallocator frameallocator parameter us impl trait syntax generic type implement frameallocator trait trait generic pagesize trait work standard page huge page want create mapping set generic parameter mapto method unsafe caller must ensure frame already use reason mapping frame twice could result undefined behavior example two different mut reference point physical memory location case reuse vga text buffer frame already mapped break required condition however createexamplemapping function temporary testing function removed post ok remind u unsafety put fixme comment line addition page unusedframe mapto method take set flag mapping reference frameallocator explained moment flag set present flag required valid entry writable flag make mapped page writable list possible flag see page table format section previous post mapto function fail return result since example code need robust use expect panic error occurs success function return mapperflush type provides easy way flush newly mapped page translation lookaside buffer tlb flush method like result type us mustuse attribute emit warning accidentally forget use dummy frameallocator able call createexamplemapping need create type implement frameallocator trait first noted trait responsible allocating frame new page table needed mapto let start simple case assume nt need create new page table case frame allocator always return none suffices create emptyframeallocator testing mapping function srcmemoryrs frameallocator always return none pub struct emptyframeallocator unsafe impl frameallocator emptyframeallocator fn allocateframe mut self option physframe none implementing frameallocator unsafe implementer must guarantee allocator yield unused frame otherwise undefined behavior might occur example two virtual page mapped physical frame emptyframeallocator return none nt problem case virtual page simple frame allocator pas createexamplemapping function however allocator always return none work additional page table frame needed creating mapping understand additional page table frame needed let consider example graphic show virtual address space left physical address space right page table page table stored physical memory frame indicated dashed line virtual address space contains single mapped page address marked blue translate page frame cpu walk page table reach frame address kib additionally graphic show physical frame vga text buffer red goal map previously unmapped virtual page frame using createexamplemapping function since emptyframeallocator always return none want create mapping additional frame needed allocator depends virtual page select mapping graphic show two canditate page virtual address space marked yellow one page address page mapped page blue level level page table index blue page level level index different see previous post different index level table mean different level table used page since level table exist yet would need create chose page example mapping would require additional unused physical frame contrast second candidate page address problem us level page table blue page thus required page table already exist summary difficulty creating new mapping depends virtual page want map easiest case level page table page already exists need write single entry difficult case page memory region level exists yet need create new level level level page table first calling createexamplemapping function emptyframeallocator need choose page page table already exist find page utilize fact bootloader load first megabyte virtual address space mean valid level table exists page region thus choose unused page memory region example mapping page address normally page stay unused guarantee dereferencing null pointer cause page fault know bootloader leaf unmapped mapping required parameter calling createexamplemapping function let modify kernelmain function map page virtual address since map page frame vga text buffer able write screen afterwards implementation look like srcmainrs fn kernelmain bootinfo static bootinfo use blogos memory use structure paging page virtaddr new import hello world blogos init let physmemoffset virtaddr new bootinfophysicalmemoryoffset let mut mapper unsafe memory init physmemoffset let mut frameallocator memory emptyframeallocator map unused page let page page containingaddress virtaddr new memory createexamplemapping page mut mapper mut frameallocator write string new screen new mapping let pageptr mut pagestartaddress asmutptr unsafe pageptroffset writevolatile testmain crash printing hltloop first create mapping page address calling createexamplemapping function mutable reference mapper frameallocator instance map page vga text buffer frame see write screen convert page raw pointer write value offset nt write start page top line vga buffer directly shifted screen next println write value represents string new white background learned vga text mode post writes vga buffer volatile use writevolatile method run qemu see following output new screen write page mean successfully created new mapping page table creating mapping worked level table responsible page address already exists try map page level table exists yet mapto function fails try allocate frame emptyframeallocator creating new page table see happen try map page instead srcmainrs fn kernelmain bootinfo static bootinfo let page page containingaddress virtaddr new run panic following error message occurs panicked mapto failed frameallocationfailed map page nt level page table yet need create proper frameallocator know frame unused much physical memory available frame order create new page table need create proper frame allocator use memorymap passed bootloader part bootinfo struct srcmemoryrs use bootloader bootinfo memorymap frameallocator return usable frame bootloader memory map pub struct bootinfoframeallocator memorymap static memorymap next usize impl bootinfoframeallocator create frameallocator passed memory map function unsafe caller must guarantee passed memory map valid main requirement frame marked usable really unused pub unsafe fn init memorymap static memorymap self bootinfoframeallocator memorymap next struct two field static reference memory map passed bootloader next field keep track number next frame allocator return explained boot information section memory map provided biosuefi firmware queried early boot process bootloader already call respective function u memory map consists list memoryregion structs contain start address length type eg unused reserved etc memory region init function initializes bootinfoframeallocator given memory map next field initialized increased every frame allocation avoid returning frame twice since nt know usable frame memory map already used somewhere else init function must unsafe require additional guarantee caller usableframes method implement frameallocator trait add auxiliary method convert memory map iterator usable frame srcmemoryrs use bootloader bootinfo memoryregiontype impl bootinfoframeallocator return iterator usable frame specified memory map fn usableframes self impl iterator item physframe get usable region memory map let region selfmemorymapiter let usableregions region filter r rregiontype memoryregiontype usable map region address range let addrranges usableregions map r rrangestartaddr rrangeendaddr transform iterator frame start address let frameaddresses addrrangesflatmap r rstepby create physframe type start address frameaddressesmap addr physframe containingaddress physaddr new addr function us iterator combinator method transform initial memorymap iterator usable physical frame first call iter method convert memory map iterator memoryregions use filter method skip reserved otherwise unavailable region bootloader update memory map mapping creates frame used kernel code data stack store boot information already marked inuse similar thus sure usable frame used somewhere else afterwards use map combinator rust range syntax transform iterator memory region iterator address range next step complicated convert range iterator intoiter method choose every address using stepby since byte kib page size get start address frame bootloader page aligns usable memory area nt need alignment rounding code using flatmap instead map get iterator item instead iterator item iterator item finally convert start address physframe type construct iterator item physframe return type function us impl trait feature way specify return type implement iterator trait item type physframe nt need name concrete return type important ca nt name concrete type since depends unnamable closure type frameallocator trait implement frameallocator trait srcmemoryrs unsafe impl frameallocator bootinfoframeallocator fn allocateframe mut self option physframe let frame selfusableframes nth selfnext selfnext frame first use usableframes method get iterator usable frame memory map use iterator nth function get frame index selfnext thereby skipping selfnext frame returning frame increase selfnext one return following frame next call implementation quite optimal since recreates usableframe allocator every allocation would better directly store iterator struct field instead would nt need nth method could call next every allocation problem approach possible store impl trait type struct field currently might work someday named existential type fully implemented bootinfoframeallocator modify kernelmain function pas bootinfoframeallocator instance instead emptyframeallocator srcmainrs fn kernelmain bootinfo static bootinfo use blogos memory bootinfoframeallocator let mut frameallocator unsafe bootinfoframeallocator init bootinfomemorymap boot info frame allocator mapping succeeds see blackonwhite new screen behind scene mapto method creates missing page table following way allocate unused frame passed frameallocator zero frame create new empty page table map entry higher level table frame continue next table level createexamplemapping function example code able create new mapping arbitrary page essential allocating memory implementing multithreading future post point delete createexamplemapping function avoid accidentally invoking undefined behavior explained post learned different technique access physical frame page table including identity mapping mapping complete physical memory temporary mapping recursive page table chose map complete physical memory since simple portable powerful ca nt map physical memory kernel without page table access needed support bootloader bootloader crate support creating required mapping optional cargo feature pass required information kernel form bootinfo argument entry point function implementation first manually traversed page table implement translation function used mappedpagetable type crate also learned create new mapping page table create necessary frameallocator top memory map passed bootloader next next post create heap memory region kernel allow u allocate memory use various collection type
299,Lobsters,osdev,OS,Booting from Grub2 to x86 long mode (64-bit mode) (2017),http://ringzeroandlower.com/2017/08/08/x86-64-kernel-boot.html,booting long mode mode,linker script memory layout kernelld assembly code boot c code building kernel running kernel grubcfg code http one final note,post going walk process booting kernel grub getting bit c code kernel loaded low physical memory grub mapped high virtual memory leave low virtual memory user space similar linux memory layout going use top two gb kernel dive assembly probably best start linker script linker script memory layout linker script used kernel kernelld entry start section kernelphysicalstart boottext booto multiboot booto text bootrodata booto rodata bootdata booto data bootbss booto bs booto common align bootend kernelvirtualstart text bootend multiboot text align rodata loadaddr text sizeof text rodata align data loadaddr rodata sizeof rodata data align bs loadaddr data sizeof data common bs kernelvirtualend kernelphysicalend loadaddr bs sizeof bs couple thing going linker script first current output location set four megabyte along one variable kernelphysicalstart defined well rest booto layed one thing note boottext contains multiboot talk bit section booto specified current output location offset start high virtual address space give kernel gb need kernel decrease number section rest object file set location previous section plus size previous rounded finally kernelvirtualend kernelphysicalend defined main take away linker script booto identity mapped low memory everything else loaded low memory high virtual address memory layout little kernel set move onto code assembly code boot bit assembly going get u long mode c fact jumping c code relevant could easily jump something like c rust responsible two main thing setting paging data structure setting cpu state long mode also multiboot header defined boot seen lot c macro hence boot instead boot capital mean c preprocessor run first mention lot macro make readable selfdocumenting remove bunch magic number put output c preprocessor end post need something quick dirty also selfcontained boot include include include kernelh include sizesh include include set headerlength headerend headerstart set checksum headerlength section multiboot headerstart long long long headerlength long checksum multiboot tag go short multibootheadertagend short flag none set long size including short short long headerend section bs comm comm lowpdpt pdptsize pdptalignment comm highpdpt pdptsize pdptalignment comm lowpagedirectorytable pagedirectorysize pagedirectoryalignment comm highpagedirectorytable pagedirectorysize pagedirectoryalignment comm tmpstack kernelbootstacksize kernelbootstackalignment data align gdttablealignment gdttable gdtfirstentry gdtkernelentry gdttableend skip gdttablesize gdttableend gdttable gdtptr short gdttablesize long gdttable section text global start type start function start movl tmpstack kernelbootstacksize esp movl lowpdpt eax mmupresent mmuwritable eax movl eax kernelphysicalstart movl highpdpt eax mmupresent mmuwritable eax movl eax kernelvirtualstart movl lowpagedirectorytable eax mmupresent mmuwritable eax movl eax lowpdpt pdptaddrtoentryindex kernelphysicalstart pdptentrysize movl highpagedirectorytable eax mmupresent mmuwritable eax movl eax highpdpt pdptaddrtoentryindex kernelvirtualstart pdptentrysize mov ecx movl kernelphysicalend esi shrl twomegabytesshift esi addl esi pagedirectorytableloop movl twomegabytes eax mul ecx mmupresent mmuwritable mmupdetwomb eax movl eax lowpagedirectorytable ecx pagedirectoryentrysize movl eax highpagedirectorytable ecx pagedirectoryentrysize inc ecx cmp esi ecx jne pagedirectorytableloop equal redo loop movl eax movl eax movl eax movl eax movl msrefer ecx rdmsr msreferlme eax wrmsr movl eax movl eax lgdt gdtptr ljmp kernelgdtentry gdtentrysize cli hlt global type function setup segment selector movw ax movw ax d movw ax e movw ax f movw ax g movw ax s call kernelmain never reach cli hlt jmp first thing boot multiboot header section multiboot going multiboot header format header start multiboot magic number architecture header length finally checksum four variable multiboot variable number multiboot tag going put except required end tag flag size next bs data bs declare bunch region memory paging data structure paging involves level paging going use page table instead use mb large page directory entry low high page directory pointer table pdpt page directory table low table used identity mapping high table going used mapping low physical memory high virtual address data section defines global descriptor table gdt contains two entry first used gdtfirstentry defined gdtkernelentry one going use long jump switch mode defined mode set present ring privilege level executable finally additional space added gdt gdtptr defined gdtptr sixbyte data structure first two byte size gdt minus one last four byte physical address gdt point memory data structure need start writing actually boot assembly code start entry point grub jump specified kernelld first thing set esp point top stack declared bs movl tmpstack kernelbootstacksize esp next set two entry one lowpdpt one highpdpt load address pdpt eax present writable bit set finally move value eax corresponding entry handy macro shift value bit bitwiseands basically take address return index table address repeated lowpdpt highpdpt entry byte size since still mode point set lower bit entry okay top bit used high physical address reservedignored execution bit bit need worry right similar table used long mode follow pattern setting first bit leaving rest zero movl lowpdpt eax mmupresent mmuwritable eax movl eax kernelphysicalstart movl highpdpt eax mmupresent mmuwritable eax movl eax kernelvirtualstart next similar pattern followed page directory table note use different macro pdptaddrtoentryindex shift bit instead set entry lowpagedirectorytable lowpdpt highpagedirectorytable highpdpt movl lowpagedirectorytable eax mmupresent mmuwritable eax movl eax lowpdpt pdptaddrtoentryindex kernelphysicalstart pdptentrysize movl highpagedirectorytable eax mmupresent mmuwritable eax movl eax highpdpt pdptaddrtoentryindex kernelvirtualstart pdptentrysize pdpts set thing left set entry page directory table going loop set number page kernel based kernelphysicalend declared kernelld ecx going contain current entry set first set zero esi going contain number page want set divide two mb shifting add one take care rounding mov ecx movl kernelphysicalend esi shrl twomegabytesshift esi addl esi next body loop entered first multiply eax two mb present writable two mb flag store value eax low high page directory table offset ecx counter time size page directory entry eight pagedirectorytableloop movl twomegabytes eax mul ecx mmupresent mmuwritable mmupdetwomb eax movl eax lowpagedirectorytable ecx pagedirectoryentrysize movl eax highpagedirectorytable ecx pagedirectoryentrysize point set entry current loop increment ecx compare esi equal repeat body loop start pagedirectorytableloop inc ecx cmp esi ecx jne pagedirectorytableloop equal redo loop final bit setting paging long mode move physical address movl eax movl eax left set cpu state transition long mode three thing need done set extended feature enable register efer modelspecific register msr set set enable protected mode bit set specify math coprocessor bit set enable paging physical address extension bit bit set finally bit efer msr long mode bit bit toggled one movl eax movl eax movl msrefer ecx rdmsr msreferlme eax wrmsr movl eax movl eax stick almost done last thing code set global descriptor table via lgdt long jump code located boot lgdt gdtptr ljmp kernelgdtentry gdtentrysize code set segment selector jump c code global type function setup segment selector movw ax movw ax d movw ax e movw ax f movw ax g movw ax s call kernelmain c code kernelmain located kernelc pretty simple basically going prove everything working c code define videostart define vgalightgray static void printstring char str unsigned char video unsigned char videostart str video str video vgalightgray void kernelmain void printstring hello world going print string hello world screen using vga text mode still use address still low memory identity mapped one thing would probably want c fix dereferencing null right cause page fault course set interrupt descriptor table idt yet handle page fault another post building kernel makefile kernel found pretty selfexplanatory thing worth mentioning first compile fnobuiltin nostdinc nostdlib ffreestanding want build stuff come gcc come linux system also compile mnoredzone want use bit red zone red zone region stack function might use preserved regular user space code optimization kernel code cause issue interrupt interrupt enabled still compile flag compile mcmodelkernel want generate code kernel code model kernel running high virtual address space also specify z default page size large grub find multiboot magic number ccgcc sharedflags fnobuiltin nostdinc nostdlib ffreestanding g wall wextra werror mmd mnoredzone mcmodelkernel cflags sharedflags asflags sharedflags wa divide objs booto objs kernelo dfiles patsubst objs kernel kernel objs kernelld makefile cc z cflags mcmodelkernel wl buildidnone kernelld objs clean find name delete rm rf objs dfiles kernel objs makefile include dfiles one final thing regard building kernel using gcc come linux system assuming build occurring system case build work people running linux point best practice would use toolchain skipping step simplicity running kernel finally test going use qemu run iso make little kernel use create iso first need create grubcfg contain following grubcfg set set menuentry kernel bootkernel specified kernel bootkernel let make directory iso copy grubcfg kernel run generate iso snippet makefile mkdir p isobootgrub cp grubcfg isobootgrub cp kernelkernel isoboot isofile iso isofile defined kerneliso finally run invoke qemu cdrom isofile serial stdio see following code code post found github http one final note one thing worth mentioning assumed kernel run processor support long mode checked runtime done code sake simplicity
300,Lobsters,osdev,OS,Genode's Conscious C++ dialect,https://genodians.org/nfeske/2019-01-22-conscious-c++,genode conscious c dialect,genode conscious c dialect norman feske two edge sword thrown towel narrowing scope operatingsystem level banning hidden state hidden side effect static composition raii exception friend much come fsquery,genode conscious c dialect january norman feske c power tool scale embedded system complex software stack imaginable started genode feature set language extremely persuasive strike great balance giving programmer full control whenever needed also featuring mean expressing highlevel software design power twoedged sword though series posting like share learned handle without regret two edge sword one edge versatility c staggering programmer free express oneself via imperative programming objectoriented programming functional programming meta programming combination paradigm industrywide adoption huge thanks quality diversity tooling eg diverse compiler vendor careful language standardization process welldesigned standard library edge c widely criticised enormous complexity safety risk become complex even father figure like scott meyers thrown towel language design seems follow principle maximum risk risk fun right dance volcano tune manual memory management integer overflow implicit type conversion implicitly called constructor outofbounds array access rhythm undefined behavior absence universally established codingstyle convention clinging archaic legacy c stone age like preprocessor c pointer arithmetic make situation better looking sideline dystopic picture suggests c may lost cause people understandably seek salvation alternative like rust instead throwing baby bathwater however went different route finding tuning custom c dialect largely mitigates safety trap compared contemporary c project feel almost like different language genode c dialect evolved primarily economic perspective earlier project haunted memorycorruption problem sporadic datarace condition operatingsystem development sometimes felt like misery spending miniscule fraction day creating new exciting thing percent time went drain question heck going worse obnoxious bug turned shamefully mundane finding issue felt like victory rather defeat missing lock guard offbyone missing virtual destructor arithmetic overflow uninitialized variable tiny artifact left weak moment overlooked reviewer ensued sometimes day hunting got u thinking systematic way cutting percent two aspect fueled optimism first genode greenfield project api fairly unique position make rule second developer team tightknit group le people small enough agree principle convention follow rigorously year stringent strongly opinionated dialect c evolved dramatically improved situation narrowing scope operatingsystem level dialect address operatingsystem o code application code two different world whereas applicationlevel programmer concerned optimized code path cache locality high variety data structure ability swap inandout finetuned memory allocator convenience feature o code rather boring respect genode systemlevel code strive minimizing complexity maximizing robustness contradicts common wisdom lowlevel code must always optimized performance first place think o bureaucratic apparatus inbetween application hardware nt meaningful work term computation designed stand way application performance data structure within o became bottleneck software design would call improvement data structure argument especially true componentbased system like genode traditional o functionality like protocol parser cryptographic function applicationlevel concern hence lie outside scope c dialect banning hidden state hidden side effect genode c dialect deliberately start nearzero complexity neither c runtime trace c standard library start naked language notion main function implicit execution global constructor way anonymous memory allocation tiny selfsufficient support library give u support exception runtime type information rtti vocabulary dialect solely shaped selfsufficient genode api small enough understood entirety single developer dialect program modelled state machine main function instead execution start socalled component construct function take interface component environment env argument env way program produce side effect like io intercomponent communication construct function construct main object forwarding env constructor argument object actual program convey mental model behind program viewed sequence step rather viewed object composed building block construct function return program becomes ready respond external event ie incoming intercomponent communication io way program flow control turned upside compared traditional notion main function immediate consequence code program executed within meaningful context eg whenever signal handler invoked main program handler actually method naturally access member main object following rule become practical singleton whenever single instance object needed hosted member main object global variable always natural context state reside blocking io call instead blocking io component becomes receptive io whenever returning idle state blocking call hidden state stack blocking threadlocal storage context flow execution always surrounding object main object thread object global constructor needed program explicitly constructed main object anonymous memory allocation exists default new operator unless env part thereof presented sub program sub program side effect outside world particular io dynamic memory allocation possible sub program side effect triggered explicit consent calling code passing corresponding interface sub program static composition raii exception friend genode c dialect promotes static composition object object main object top level hierarchy code traditionally expressed sequence statement instead expressed sequence class member composing program hierarchy aggregated member handling error becomes robust error exception happen construction time thanks raii technique c already constructed member partially constructed object always orderly destructed clearcut transactional semantics either object could constructed successfully case program eventually enters consistent state socalled reconstructible pattern provides way reconstruct part program maintaining program static memory layout data type intrusive mean meta data allocated separately managed object stored within respective object container string even genode xml generator xml parser nt perform dynamic memory allocation case dynamic memory allocation unavoidable allocator eg heap must explicitly created required env resource ingredient since memory allocation deliberate rare operation dialect foster strong sense ownership dynamic allocation dynamically allocated object usually owned remembered allocating context reference object never leave scope owner whenever allocated objected must accessed outside owner lambda function used resource monitor much come posting meant kick series short article highlighting many different aspect genode concious c dialect ranging stylistic consideration avoidance many c trap datastructure design stay tuned get taste dialect look practice consider examining code fsquery component source line sloccount reasonably small meaningful work
301,Lobsters,osdev,OS,Release notes for the Genode OS Framework 19.02,https://genode.org/documentation/release-notes/19.02,release note genode o framework,release note genode o framework road map popular sculpt o community experience ce genodiansorg initial posting genodiansorg showcase genodebased web appliance java showcase javabased network appliance ada spark ocaml base framework oslevel infrastructure sculpt o community experience ce documentation announcing software package depot mailing list showcase javabased network appliance java genodiansorg genodiansorg showcase genodebased web appliance genodiansorg gosh markdown base framework oslevel infrastructure removal deprecated apis version version version sourcetree reorganization timer moved o base repository consistent naming block component improved api safety xmlparsing api simplified sessionpolicy handling removed pointer genode fifo interface new serverside blockrequest stream api osincludeblockrequeststreamh ossrctestblockrequeststream gui stack sculpt o community experience ce window management unified shapereport routing unicode support graphical terminal programming language ada spark componolit build system integration elaboration code debug output unit testing aunit java showcase javabased network appliance nim ocaml library application new utility taking screenshots posting growing use genodeworld repository genodeworld java updated removed software removal virtualbox platform board support quad sabrelite solox resizeable virtual framebuffer linux tooling build system enforced annotation generalized use depot run script repeat mode depotautopilot test environment new run script execute single test wo depot posting support undefinedbehavior sanitizer undefinedbehaviorsanitizer gcc documentation,release note genode o framework road map stated goal make genode relevant appealing broader community current release take big leap towards goal open sculpt o software provider introduces federated blogging platform genoderelated topic make world popular programming language java available genode user stage evolution sculpt o themed community experience ce genode custom generalpurpose o introduces novel simple way user discover software software provider announce software middle man like app store distribution hope federated model software provisioning deployment vitalizing effect community around genode practical level interactivity new version playful fun experience section sculpt o community experience ce give rough overview sculpt ce readytouse disk image released mid march speaking software provider nt think anonymous repository software free software particular developed provided individual federated way software distribution want highlight individuality reason launched new blogging platform genoderelated story called genodiansorg give everyone enthusiastic genode user developer alike platform express idea announce software share practical tip trick explained initial posting genodiansorg spirit sculpt software distribution model also organized federated way content hosted remains completely control respective author website merely aggregate present content go without saying genodiansorg based genode system image contains entire web appliance kernel content management web server contained mib disk image section genodiansorg showcase genodebased web appliance go detail identified support popular programming language one key aspect attract broader community current release port openjdk section java arm reached mature state suitable creation web service pave way towards quite exciting new system creation like system presented section showcase javabased network appliance account programminglanguage support happy announce vastly improved runtime support ada spark section ada spark well initial support ocaml section ocaml besides work shiny feature current release cycle included profound spring cleanup described section base framework oslevel infrastructure thereby finalizes huge api modernization initiated almost three year ago sculpt o community experience ce laid road map sculpt o little one year ago envisioned four stage development sculpt ea geared towards diehard early adopter facilitating live editing system using text editor sculpt tc targeted curious included graphical user interface common administrative task sculpt vc introduced visual composition system using interactive graph even though sculpt already allowed installation component different software provider stage offered simple mean discover software installation still required manual editing launcher text file final community experience stage plan ought foster federated provisioning software software provider ability announce new package conversely user able subscribe announcement similar one would subscribe r feed software discovered way take click install integrate running sculpt system commandline interface stand way discovery sculpt ce realization idea sculpt user discovery start menu contrast sculpt vc menu offered rather long list component choose menu offer nothing excited however bottom new menu entry depot lead sub menu list enabled software provider connected network also show entry named selection selection sub menu allows user enable software provider clicking one checkboxes package index provider downloaded checkbox highlighted example nfeske already enabled clicking topleft triangle one always go one menu back depot menu selecting software provider display index available package selecting new package installed via single click package installed menu take user dialog integrating package new component running sculpt system resource required package user decide connect example file system mounted config fresh nouxsystem instance routed file system service user wish nouxsystem wo nt know file system selected work soon route defined dialog present button adding component system using interactive work flow discovery software integration becomes rather playful process make composed system permanent one use inspect window copy configmanageddeploy file directory genode partition way deployment configuration take effect immediately boot time genode come sculpt ce included usual take bit time following release thorough testing refining announcing updated disk image mid march would greatly appreciate feedback phase baking fresh sculpt image please refer documentation sculpt vc using git tag instead sculptvc announcing software package community experience sculpt ce ultimately depend participation software provider become listed selection dialog mentioned may consider including public key download location genode repository depot announcement package software provider publish socalled index file particular sculpt version software provider depot eg index package supported sculpt would located within depot like depot content index file digitally signed example index software provider nfeske would look follows index index name gui pkg path info default desktop background pkg path info readytouse window manager index pkg path info simple softwarerendering demo index pkg node refers package concrete version short description nesting index node software category defined index file published like depot content using depotpublish tool take care compressing digitally signing published information tooldepotpublish ease updating index current package version sculptrun script creates depotindex version file input found reposgemsrunsculptindex latter file void version number question process please consult genode mailing list showcase javabased network appliance openjdk good shape section java created genode scenario demonstrates jvm ability execute well embedded hardware target platform choose arm imx based soc two integrated network interface controller scenario genode system boot directly java application turn spawn two http server instance instance communicates dedicated nic server instance run one java program java application jar file loaded board sd card therefore easily replaced interested java arm soc full detail step step instruction found genodiansorg site genodiansorg showcase genodebased web appliance genodiansorg take federated blogging platform genoderelated topic host actual content rather aggregate content hosted elsewhere site periodically fetch content form zip archive containing raw text png image extract archive transforms text html using custom static site generator result transformation process served lighttpd web server system based genode found noteworthy technical point site periodic process downloading extracting transforming content realized via fetchurl extract sequence component textual content us markup gosh text processing tool similar markdown custom static site generator consists plain makefile gosh style file makefile executed within noux instance genode custom unix runtime environment respawned iteration gosh written tcl tclsh used within noux environment lighttpd web server us statically supplied ssl certificate timeconsuming part creating genodiansorg cs definition entire system image mib size includes following ingredient kernel eg nova basic genode component init nic router vfs server network driver based ipxe linux tcpip stack library curl libssh libssl libcrypto lighttpd downloading serving content libarchive zlib liblzma extracting downloaded content noux coreutils stripped bash gnu make tclsh transforming text html information site inner working posted series article guess genodiansorg base framework oslevel infrastructure removal deprecated apis almost three year ago version started transition genode modern api one year later version announced completion transition retained deprecated apis accommodate genode user picked new api gradually current release finally drop deprecated apis along couple legacy basetimedsemaphoreh removed hindsight officially providing utility big mistake lured developer wrong direction fact found legitimate use component designed clean way component relies timed semaphore better redesigned two noteworthy place timed semaphore still used bandaid solution pthreadcondwait implementation libc dde rump kernel place host private copy timed semaphore ultimately reworked header baseprintfh removed along log back end printf console formatstring parser still along snprintfh latter still used place prominently connection class notion ramsession exists since former ramsession interface merged pdsession interface version still type preserved typedefs pdsession keep api compatibility last trace ramsession gone env ram accessor return ramallocator interface subset pdsession interface use global genode env accessor function possible anymore old childpolicy resolvesessionrequest interface returned service instead route removed boolean accessor method longer prefixed eg instead isvalid use valid connection constructor need env argument reporter constructor need env argument reporter creates report connection old notion signaldispatcher gone receiving asynchronous notification signalhandler interface must used transitional header like osserverh capsession volatileobjecth osattached dataspaceh signalrpcdispatcherh removed distinction threadstate threadstatebase exist anymore threadstate prevails header cputhreadcapabilityh along type definition cputhreadcapability removed use type threadcapability defined cpusessioncpusessionh instead osramsessionguardh removed use constrainedramallocator provided baseramallocatorh instead sourcetree reorganization timer moved o base repository traditionally userlevel timer hosted o repository driverstimer however since timer timeout handling become part base library dynamic linker component naturally belongs base repository located basesrctimer base kernel srctimer respectively note change affect include path former includeostimer includeosalarmh includeosdurationh header found includebase consistent naming block component regarding naming file apis genode follows convention avoiding abbreviation component follow convention block server exception rule named partblk romblk current release removed inconsistency renaming offender changing blk block closely related abbreviation like cli srv replaced client server improved api safety xmlparsing api genode consistently us xml component configuration report generated component latter often consumed component put xml parser prominent position genode xml parser come form xmlnode class since introduced age modern c offer several risky cish method particular accessors return pointer raising memorysafety concern promote safe programming style following part interface subject change xmlnode addr xmlnode contentaddr xmlnode contentbase accessors removed easy store returned pointer forget lifetime originating xmlnode object fortunately practice method rarely used information typically represented attribute node content however still support access raw content new xmlnode withrawnode xmlnode withrawcontent xmlattribute withrawvalue method call functor taking raw byte buffer size argument way lifetime pointer naturally bound scope functor new withsubnode method call functor specified sub node argument thereby reduces need traditional xmlnode subnode method return xmlnode latter risky xmlnode contains pointer actual data contrast lifetime xmlnode processed via new xmlnode withsubnode naturally bound scope passed functor xmlattribute value xmlnode value method take argument type instead eliminates uncertainty possible nullptr argument original interface still available eventually removed simplified sessionpolicy handling server component make use sessionpolicy utility selecting client policy depending session label however pattern use remained bit inconsistent across component particular handling case policy could found component outright denied session others implemented fallback builtin default policy inconsistency removed following principle denybydefault absence matching policy denies session request since sessionpolicy nopolicydefined exception typedef genode servicedenied exception server need explicitly handle simplifies implementation change nopolicydefined case always error case hence new version sessionpolicy print error message relief server developer implementing diagnostics server code consequence change scenario used rely policyfallback approach server notably nic bridge window manager window decorator need slight adaption enable fallback default policy defaultpolicy node must explicitly specified server configuration removed pointer genode fifo interface make use genode fifo data structure safe method return pointer replaced method call functor reference argument new serverside blockrequest stream api current blockcomponent api osincludeblock designed time long genode modern component api introduced back use blocking call prevalent today design component work asynchronously original blockserver api successively enhanced allow implementation asynchronous block server remained upside growing complicated simplify implementation verification block server current release introduces modern api eventually replace original blockcomponent api new api called blockrequest stream found osincludeblockrequeststreamh designed following consideration anticipates asynchronous operation block server default using new api server particular blockdevice driver implemented state machine triggered client request device interrupt reinforces memory safety server code returning pointer reference relief server developer handling special case like congested acknowledgement queue flexible enough accommodate different category component like driver resource multiplexer partblock bumpinthewire component natural way naturally support batching request well zerocopy device dma directly client communication buffer use new api illustrated artificial test ossrctestblockrequeststream plan successively migrate existing block server new api remove traditional blockcomponent api eventually gui stack motivated work sculpt described section sculpt o community experience ce genode gui stack received following improvement window management improve visual appearance sculpt administrative gui themed decorator enhanced option disable decoration based window label setting decoration attribute policy node matching window appear without border desirable sculpt component graph furthermore themed decorator accepts policy attribute motion number default value value higher specified windowgeometry change applied animation number denotes number animation step feature used smoothing placement sculpt component graph motif decorator nice alternative themed decorator giving visual feedback mouse click example user drag window clicking window title title bar appears pressed creates improved sense responsiveness unified shapereport routing application propagate custom mousecursor shape issuing shape report towards pointer component pointer component correlate session label incoming shape report label nitpicker currently hovered client hence application shape report session take route nitpicker session presence window manager intermediary nitpicker session break rule consequently rather awkward labelrewriting magic required routing shape report originating windowed application make shape reporting natural window manager become able proxy shape report behalf client routing shape window manager label nitpicker session well shape report session contain intermediary wm part unicode support graphical terminal terminal changed represent character codepoints internally thereby became able display much larger variety international character using suitable font unicodes sent terminal session via burst byte collateral change generic codepoint class became printable via genode output interface way codepoint easily serialized byte programming language ada spark work described within section contributed componolit thanks alexander senier johannes kliemann fantastic collaboration integration sparkada program improved greatly ada runtime renamed spark emphasizes main purpose trusted component formally verified featurerich runtime based libc added genodeworld name ada build system integration deprecated gnatmake tool used build ada object file unfavorable two reason first multiple invocation gnatmake would sporadically corrupt compilergenerated ada linker file ali break parallel build second ada dependency information get propagated genode build system certain source change failed trigger rebuild reason gnatmake tool dropped favor regular compiler call done language facilitate consistent rebuilds sourcecode change tool created ali file produce file suitable direct inclusion genode build system integration toolchain support need enabled variable absolute path command name command path default warning absence tool emitted dependency information generated add variable etctoolsconf build directory follows elaboration code previously ada program required elaboration code run unsupported genode release ada program bound using gnatbind result elaboration code generated additional benefit come form proper error message compile time example source code missing outdated run ada main program elaboration call adainit adafinal generated binder need added componentconstruction code extern c void adamain void extern c void adainit extern c void adafinal void component construct genode env env adainit adamain adafinal envparent exit note name ada main program adamain example depends name main procedure debug output support gnatio added runtime gnatio strippeddown text io facility map terminal session genode output supported moment pointer terminal session provided ada runtime order use gnatio please refer reposlibportssrctestgnatio example unit testing facilitate testdriven development ada component aunit unit testing framework ported genode located genodeworld repository whereas usage example found srctestaunit note full ada runtime ada required framework us feature present spark runtime java since genode release continued effort enable justintime jit compiler openjdk happy announce able achieve goal jit compiler enabled default bit arm bit significantly improves performance java virtual machine architecture additionally even improved jvm performance taking advantage aggressive compiler optimization triggered unidentified bug led greatly enhanced stability openjdk small hello world example offer simple run script make runjava complex scenario please refer section showcase javabased network appliance nim support nim removed genode build system encourage building nim component outoftree using nimble package manager compatibility base system nim runtime monitored improved regardless change ocaml proofofconcept port ocaml bytecode interpreter placed world repository allows simple program compiled bytecode instruction executed first step supporting ocaml language interpreter yet include standard library therefore language primitive available porting standard library appears simply matter defining build process greatest hurdle porting existing ocaml application would seem finding path workflow opam package tooling library application new utility taking screenshots flifcaputure screenshot utility added world repository utility implement framebuffer input service proxy parent utility observes prtsc key capture content framebuffer writes file system flif image format flif chosen primarily uncomplicated api use utility practice common case would run client default window manager second window manager stack running client capture utility allows capture behavior scope remain simple explicit background story behind tool covered dedicated posting genodiansorg growing use genodeworld repository genodeworld repository contains software strictly part official genode o framework rather supplemental particular contains port software genode pool ported software steadily growing move world repository spotlight genode user example among variety game experimental component port openjdk java also hosted acknowledge growing importance world repository added building world depot archive nightly build test baseline quality assurance place good time move supplemental software dosbox fuse libav libsdl companion library genode repository genodeworld repository speaking libsdl part curation world content library back end libsdl changed direct use nitpicker session interface instead lowerlevel framebuffer input interface thanks change many scenario could greatly simplified particular package designated use sculpt o updated removed software following software received update openssl updated version sslconf enabled needed lighttpd modopenssl lighttpd updated version tl enabled libpng updated version updated version removal virtualbox regular user genode virtualbox port migrated version long time ago version still maintained version supported muen separation kernel however since focus muen developer recently moved towards use nested virtualization version virtualbox longer vital muen could remove platform board support quad sabrelite solox extended devicedriver support nxp imx based arm platform year continue commitment platform additional support nxp reference board quad sabrelite solox feature dual gigabit ethernet resizeable virtual framebuffer linux executing genode linux use libsdlbased pseudo driver running graphical scenario fbsdl server enhanced ability resize sdl window resize event translated genode framebuffer resize protocol thereby resizing host window look like mode change genode gui stack greatly eas testing modechange handling component like nitpicker gui server tooling build system enforced override annotation wsuggestoverride warning complains implementation virtual function lack override keyword implementation virtual method marked override compiler check matching virtual method base class method implementation unexpectedly diverged interface interface may change time especially troublesome contains default implementation virtual method without override annotation compiler silently add outdated implementation derived class overload interface default implementation introduces subtle potentially serious bug rule bug future made override annotation mandatory using default strict warning level generalized use depot run script run script using archive genode depot gained experience typical usage pattern particular found universal use configurable depot user preferable hardwiring genodelabs hence depotuser function become builtin function run tool repeat mode depotautopilot test environment depotautopilotrun script support environment variable testrepeat possible value untilforever untilfailed specified test run loop latter argument particularly useful reproducing sporadic error new run script execute single test wo depot new osruntestrun script allows quick execution individual test build directory sidestepping depot expects pkg variable specifying test package eg make runtest kernelnova pkgtestxmlnode note cover test package right tool limitation explained detail dedicated posting genodiansorg support undefinedbehavior sanitizer undefinedbehaviorsanitizer ubsan also described gcc documentation detect undefined behavior program running current release diagnostic feature gcc becomes available analyzing genode component specifying sanitizeundefined yes targetmk file fsanitizeundefined compiler flag enabled program linked libubsan libsanitizercommon program call envexecstaticconstructors sanitizerinit env upon startup initialize sanitizer library whenever undefined behavior detected program running runtime error message including source code location error printed log
302,Lobsters,osdev,OS,Linux 5.0,https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#u,linux,sibling reply message thread permalink raw permalink raw reply nested message thread index mboxgz atom feed linux config snippet nntp nntplorekernelorgorgkernelvgerlinuxkernel http publicinboxorgpublicinboxgit,linux linus torvalds sibling reply message thread linus torvalds utc permalink raw linux list kernel mailing ok last week release nt entirely quiet lot smaller whole happy delayed week turn actual patch talked release nt worrisome bug thought yes uninitialized variable reason nt immediately noticed due warning way gcc work compiler basically initialized u right value thing caused lack warning also effectively meant fix noop practice hey bug fix come actually matter uninitialized variable could problem another compiler regardless well end well handful real fix last week enough make go hmm thing really unstable fact least two third patch marked fix previous release like look bad knock wood anyway merge window obviously open happy see already several early pull request start processing tomorrow appended usual shortlog last week overall change release much bigger like point yet nt featurebased release nt mean anything number started getting big enough ran finger toe linus alamy liu mmc cqhci fix space allocated transfer descriptor mmc cqhci fix tiny potential memory leak error condition alistair francis drmbochs fix id mismatch error andrew lunn net dsa fix statistic net dsa fix statistic andy lutomirski nt leak ac flag putuser value evaluation andy shevchenko net dev use unsigned integer argument leftshift correct description debug module parameter ard biesheuvel crypto fix crash bug build crypto fix crash bug build arnd bergmann kasan turn asanstack earlier bough chen mmc sdhciesdhcimx correct fix bart van assche scsi core avoid system resume trigger kernel warning bryan whitehead fix tx stall issue christoph hellwig mips lantiq pas struct device dma api function daniel borkmann bpf fix sanitation rewrite case nonpointers darrick j wong tmpfs fix uninitialized return value shmemlink david ahern return error rtavia attribute return error rtavia attribute mpls return error rtagateway attribute pas original device iprcvfinishcore david howells afs fix manually set volume location server list davide caratti netsched actipt fix refcount leak replace fails netsched actskbedit fix refcount leak replace fails dmitry bogdanov net aquantia regression cpu high core set mode queue eric biggers net socket set sock sk null calling protoops release crypto fix big endian crypto fix hchachablockneon big endian gilad benyossef crypto ccree add missing inline qualifier greg kroahhartman kvm properly check debugfs dentry using haiyang zhang hvnetvsc fix ip header checksum coalesced packet hangbin liu add support parse route ipproto hannes reinecke scsi lpfc fix call dmasetmaskandcoherent scsi fix call dmasetmaskandcoherent scsi fix call dmasetmaskandcoherent scsi fix call dmasetmaskandcoherent scsi bfa fix call dmasetmaskandcoherent scsi csiostor fix call dmasetmaskandcoherent scsi hisisas fix call dmasetmaskandcoherent scsi hptiop fix call dmasetmask hauke mehrtens net dsa lantiq add gphy firmware file heiner kallweit net phy phylink fix uninitialized variable phylinkgetmacstate net dsa prevent interrupt storm caused igor druzhinin xennetback fix occasional leak grant ref mapping memory pressure xennetback nt populate hash cache xenbus disconnect jann horn mm enforce min addr even capable expanddownwards jiri benc geneve correctly handle module parameter jonas gorski mips provide dma mask ethernet device jonathan neuschäfer mmc spi fix card detection probe julia cartwright iommudmar fix buffer overflow pci bus notification julia lawall tee optee add missing ofnodeput ofdeviceisavailable lan tianyu fix definition hvmaxflushrepcount linus torvalds revert bug uaccess helper fault kernel address linux linus walleij arm dts gemini reenable display controller mao wenan net sit fix memory leak sitinitnet marc gonzalez dts qcom extend tz reserved memory area mario kleiner drmamddisplay use vrr friendly pageflip throttling dc matthias maennich sctp chunkc correct format string sizet printk max uvarov net phy add soft reset delay maxime chevallier net dsa power serdes onoff interface michael chan bnxten drop oversize tx packet prevent error michael clark mips fix truncation cmpxchgsmall short value mike kravetz hugetlbfs fix race page leak migration mike marshall orangefs remove two unneeded bugons ming lei mmc core align max segment size logical block size nazarov sergey net add icmpsend helper net avoid use ipcb nicholas kazlauskas drm block fb change async plane update paolo abeni selftests pmtu disable dad namespaces selftests pmtu add explicit test pmtu exception cleanup selftests fix udp gro paul burton mips ebpf fix icache flush end address paul moore netlabel fix outofbounds memory access peng sun bpf decrease usercnt bpfmapnewfd fails bpfmapgetfdbyid bpf drop refcount bpfmapnewfd fails mapcreate rajasingh thavamani net phy micrel link failure cable connect ritesh harjani mmc core fix null ptr crash mmcshouldfailrequest sergei shtylyov mmc tmiommccore nt claim spurious interrupt sheng lan net netem fix skb length bugon skbtosgvec takeshi saito mmc tmio fix access width block count register thomas bogendoerfer mips fix memory setup platform physoffset timur celik tun fix blocking read tun remove unnecessary memory barrier tung nguyen tipc fix race condition causing hung sendto vlad buslov net sched acttunnelkey fix null pointer dereference init wen yang net dsa fix leaked reference adding missing ofnodeput yuehaibing net nfc fix null dereference nfcllcpbuildtlv fails permalink raw reply flatnested message threadonly message thread back index thread overview message download mboxgz follow atom feed link jump message page linux linus torvalds lkml archive lorekernelorg archive clonable git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http git clone mirror http publicinbox installed may initialize index mirror using following command publicinboxinit lkml lkml http lorekernelorglkml linuxkernel vgerkernelorg publicinboxindex lkml example config snippet mirror newsgroup available nntp nntp nntplorekernelorgorgkernelvgerlinuxkernel agpl code site git clone http publicinboxorgpublicinboxgit
303,Lobsters,osdev,OS,QNX Desktop 2019 update with screenshots,https://membarrier.wordpress.com/2019/03/03/screenshot-galore/,qnx desktop update screenshots,original post cairo library multimedia fairly good documentation musique music player productivity development one like,qnx desktop seen significant improvement last month still mostly oneperson sparetime project becoming usable first owe debt original post reprimanded commentator window decoration lack visual appeal address added simple theme plugin api window manager facilitates creation new theme built shared object loaded window manager start help cairo library able write two new theme one original le see spot multimedia desktop system complete without ability play back music video qnx playback engine called mmrenderer able add system ease owing fairly good documentation moreover qt library already set use mmrenderer mean running able use qt medium player demo play music video nevertheless simple demo far cry good medium player trying various option found excellent musique music player musique dependency qt rely playback library qtav want port given many dependency luckily musique code well organized medium playback encapsulated separate library interface implementing interface using qt native qmediaplayer class almost trivial result fantastic finally starting mmrenderer allows browser play medium without change productivity lack office suite used significant hurdle adoption alternative desktop operating system still remember attempt use wordperfect star office redhat linux thing changed dramatically proliferation webbased application google doc office accessed system modern browser course real men woman small furry creature alpha centauri use word processor u latex writing latex code emacs thing texmaker rescue development top existing set development tool gcc gdb emacs vim valgrind qnx desktop includes qt creator following screenshot homage aestheticallypleasing desktop ever created including attempt write matching qt style one need access linuxbased system problem qnx hypervisor support various linux flavour including ubuntu android like like loading
304,Lobsters,osdev,OS,Workplace OS History: IBMs $2 Billion Microkernel of Failure,https://tedium.co/2019/02/28/ibm-workplace-os-taligent-history/,workplace o history ibms billion microkernel failure,today tedium year opensource operating system linux first announced ibm became poster child operating system failure bought guy msx messy divorce microsoft ibm three set card two set fate story course know also led new company called taligent ibm apple main ally column either definitive operating system tomorrow massive flop john c dvorak one microkernel rule postmortem true linux monolithic agree microkernels nicer le argumentative subject probably agreed said theoretical aesthetical standpoint linux loos gnu kernel ready last spring bothered even start project fact still linux win heavily point available linus torvalds post post minix author andrew tanenbaum ibm attempt reframe operating system work article museum ran bad press littleseen powerpc variant warp article noted wrote powerpc undoubtedly interesting experiment albeit failed one impossible tell whether failure caused shortcoming powerpc falling far short powerpc platform whole michal necasek review ibm variant powerpc feel like surprise retrospect love linux turning company dream reality red hat acquisition embedded qnx believed replacement android chrome o share pal thanks support,today tedium early idea computer industry going next generation would look like even driving factor would developer back knew operating system available server room desktop computer simply good enough next generation needed lot better easier said done problem reason seemed rack brain one company ibm throughout decade company associated overwrought thinking operating system little show end problem might gotten caught kernel madness today tedium explains ibm odd operating system fixation belly flop created ernie tedium year opensource operating system linux first announced linus torvalds hobby big professional like gnu said oh wrong announcement later proved fundamental modern computing change given torvalds formative attempt building kernel attempt get ground year ibm working stuff department ibm became poster child operating system failure extremely simplified form popular plot line personal computer revolution go like ibm wanted create desktop computer business using offtheshelf part including operating business partner microsoft bought guy microsoft realized deal ibm exclusive hardware company figured reverseengineer early pc apple stuff microsoft later borrowed booooooom personal computer revolution add water course anyone ever owned commodore zx spectrum msx know truth complicated leaf whole lot created company involved original pc revolution nonetheless rise ibm pc clone software drove left lot company sideline early ironically one company ibm certainly ibm mean struggled company released first thinkpads monolith moved many direction way going fall apart ibm tasted fruit pc success far short time clonemakers turned company another player business computing market ibm wanted better somewhat techsavvy might assume given leadup talk operating system center messy divorce microsoft ibm certainly player story one ibm bigger plan wanted create kernel major operating system point one two simultaneous project going create brand new operating system technology project audacious one probably betterremembered another thanks certain anecdote closely associated different company tale blue red pink card pink card doom adobe stock three set card two set fate staff reorganization apple late offsite meeting put goal trying scope future mac o poststeve era job wozniak left company time story basically card product brainstorming session blue card represented immediate change mac o pink longerterm change red even advanced change context think red deeper pink card ultimately represented marching order two team blue card led new feature mac o system pink red card part longerterm plan unfortunately smaller pink team struggled implement feature reasonable amount time became victim scope creep decision made point start developing new operating system entirely using model called microkernel effectively creates minimal layer software task handled work eventually separated mac o entirely ibm come back play work pink team longrunning highly advanced early dovetailed nicely ibm plan new line processor power system line collaboration led apple use related powerpc processor line course know also led new company called apple pink team member ibm staff would work future operating system somehow proved big mac o headline new york time october shocking observer ibm apple main ally pc magazine column voice generation john c dvorak laid company ultimate plan taligent role world create environment application buy individually built directly operating system apps programmable put together custommade suite taligent could mean end application know bold stuff however ibm project front audacious one either definitive operating system tomorrow massive flop john c dvorak correctly diagnosing ibm effort muchhyped workplace o microkernelbased project working throughout early one little kernel adobe stock one microkernel rule taligent getting airborne employee ibm already working microkernel based existing work done mach microkernel carnegie mellon name ibm endeavor workplace o mission become operating system center every operating system le ibm interest numerous operating system taligent also legitimate say direction msdos window operating system standard posix along inhouse operating system perhaps closest thing center world operating system time interest microkernels rising part due perceived reliability benefit ibm position push forth vision attempted drive part felt could save money standard base different operating system saving money expensive however university californiariverside researcher brett fleisch mark allan co noted postmortem ibm spent nearly billion trying get workplace o ground approximately percent ibm total revenue fiveyear period workplace kernel ambition effectively torpedoed taligent microkernel way though taligent project audacious say least concept conceived around something called grand unification theory operating system gut effectively aimed build standard subsystem around common operating system different piece software could use basic service even using different operating system company endeavor would front conceivably would able exist pretty much every major operating system going forward big o intended server rack personal digital assistant know last thing ask parent good idea audacious one one whose mission could seen charitable light way make operating system work efficiently le charitable light seemed like ibm attempt reassert dominance pc world responsible somehow proved shakier expected assert thanks clone showed fact one problem microkernel ready ibm wanted true linux monolithic agree microkernels nicer le argumentative subject probably agreed said theoretical aesthetical standpoint linux loos gnu kernel ready last spring bothered even start project fact still linux win heavily point available linus torvalds post usenet group composminix responding post minix author andrew tanenbaum claimed linux already obsolete part used traditional monolithic kernel basic part operating system managed within kernel rather separated service would using microkernel debate torvalds tanenbaum famous part fact torvalds directly inspired tanenbaum work minix ultimately chose performance benefit monolithic kernel spelling error kept full effect warp connect powerpc system used workplace o via museum ibm attempt reframe operating system work microkernel concept ibm embraced one realm possibility working already significant evidence building operating system based mach kernel nextstep operating system would later form basis modern macos started nextstep solid rock time many operating system ibm ambition mixed technical weakness microkernel model ultimately sank ship ibm unusually aggressive operating system move early particularly partnership apple seem make much sense either outsider longtime partner new york time article laid messy split microsoft ibm steve ballmer microsoft senior vice president system software later ceo implied doubledipping operating system front directly created chasm two company tell ibm strategy know working together u ballmer said benefit customer understand either ballmer proved right course ibm complex project operating system space failed set world ablaze course adherent museum problem microkernel ibm case least twofold one putting together meet competing need incredibly complex something reflected fact spent billion dollar project two microkernels design sacrifice speed ibm soon realized server customer definitely would want caused company backtrack original workplace o promise per university californiariverside postmortem highlighted earlier internal discussion ibm focused aix finally comdex ibm chairman louis gerstner announced microkernel would replace aix ibm realized many aix user would accept performance penalty associated microkernel system ibm also concerned microkernel presenting competitive impediment high performance hp sun unix system ran directly hardware instead gerstner told aix customer would able migrate workplace o later interested aix part plan ultimately abandoned workplace o effort nonetheless continued goal putting workplace o powerpc workstation company powerpc chip ran bad press led scuttling workplace o endeavor entirely littleseen powerpc variant warp show taligent apple collaboration ibm well joint venture faced lot challenge many caused culture clash straightlaced ibm alum leading relaxed expat apple pink team collaboration already audacious paper reality even harder build technological develop objectoriented operating system compete microsoft tough fortune article noted social engineering create new corporate culture collision two diametrically opposed operating even tougher ultimately taligent task spinoff failed release operating system despite much pressure eventually releasing runtime system commonpoint saw critical success hit one point hewlettpackard joined fun partnership fall apart entirely late ibm left holding bag taligent one several pieinthesky fiasco left apple desperate strait buy next daring fireball scribe john gruber wrote apple spent facing one operating system crisis another got microkernel whole deal end acquiring next even one based carnegie mellon mach microkernel technology one spent much time money working powerpc undoubtedly interesting experiment albeit failed one impossible tell whether failure caused shortcoming powerpc falling far short powerpc platform whole michal necasek writer museum review ibm variant powerpc came limited release much way software deep irony one system released wild built around workplace o support speak despite one kernel rule mindset came define project feel like surprise retrospect step time machine go back year tell everyone random programmer finland going beat ibm dream creating universal operating system sure laughed room wearing futuristic clothes like marty mcfly back future break linux basically fulfilled every requirement workplace o operating system often used basis numerous operating system solution getting used everywhere embedded system smartphones server television set window macos use linux kernel course though microsoft increasingly love linux key element google chrome o operating system know thing two turning company dream reality really thing improve ibm bottom line every time used red hat acquisition notwithstanding microkernel v monokernel debate one likely never go away completely part useful academic debate computer scientist commenters hacker news successful example course macos borrows element concept embedded qnx excels stability part microkernel equation stealth edit worth noting google intheworks fuschia o believed replacement android chrome o based microkernel pure microkernel might see day sun yet world seemed like massive chunk population bothered use anything microsoft window ibm thought opportunity build next generation operating system instead failed twice find one fascinating read share pal thanks hacker newsletter sponsorship throughout february thanks support
305,Lobsters,osdev,OS,Fuchsia is not unix,https://github.com/rust-lang/rust/issues/58590,fuchsia unix,join github today sign comment cramertj reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign comment cramertj changed title fuchsia unix fuchsia targetfamily none unix feb perform action time signed another tab window reload refresh session signed another tab window reload refresh session
307,Lobsters,osdev,OS,Light-weight Contexts: An OS Abstraction for Safety and Performance (2016),https://people.mpi-sws.org/~druschel/publications/osdi16.pdf,lightweight context o abstraction safety performance,,obj length filter flatedecode stream xڭ yӿw ht c ۀ
308,Lobsters,osdev,OS,"Massive Progress, Exact CPU Selected & Minor Shipping Adjustment",https://puri.sm/posts/massive-progress-exact-cpu-selected-minor-shipping-adjustment/,massive progress exact cpu selected minor shipping adjustment,close finished excited thing progressing rapidly purism around librem smartphone want share latest update said want make secure mobile communication device one offer onpar experience today smartphones one also ethical around bend reaching goal progress report librem devkit running pureos shipping librem previously announced cpu spec delivering promise theâ quad powerful cpu good operating temperature good battery life rapid development continues excitement increase,close finished excited itthings progressing rapidly purism around librem smartphone want share latest update said want make secure mobile communication device one offer onpar experience today smartphones one also ethical around bend reaching goalprogress reportprogress quick steady use component respect ethical value personal privacy freedom imagine layer complexity go delivering revolutionary mobile phone new hardware new kernel new operating system new application culminating librem phonewe want best possible solution come hardware user experience able show corresponds exact intention important allow see progress think video running librem dev kit hardware shipped december speaks volumesthe librem devkit running pureoswhat saw video prototype librem hardware nearly identical spec one putting production later year see running pureos mobile operating system proud show fact librem built android iosall basic functionality still prerelease state progress constantly happening aroundtheclock mean even apps making pureos store shipping librem lead u aforementioned one quarter shipping adjustment previous estimate confirmed product shipping account time took u properly benchmark test newest cpu choice nxp librem question whether choose imx quad imx mini mean adjusted delivery plan slightly previously announced imx quad cpu known erratum issue silicon root cause delay detour need research potential alternativeson one hand imx quad silicon issue meant temperature battery way high also could discharge quickly hand imx mini made updated silicon process instead reduced feature resulting lower power new could unknown issue risk lot research made development team started evaluating mini see could used within software binary blob mainline based software stacksand month february began something else unexpectedly happened nxp released new software stack first cpu choice imx power consumption heating issue suddenly disappeared cpu specsso track little useful delay know know lot imx quad cpu chose little bit possible alternative chosen imx quad cpu power consumption issue dealt ultimately mean change hardware solve issue full fabrication begin librem specification described hd quad gb emmc internal ghz bluetooth modem w single sim replaceable cardgpsteseo multiconstellation gnss format smart cardskill wifi cellular microphonecameras turn gps external storagemicrosd storage imu gyro accel magnetometer front cameratbdback cameratbdvibration motoryeschargingusb c connector charging usb client function usb host function power deliverybatteryuser replaceablespeakersat least onedelivering promiseas come know purism always keep posted impressive progress making issue major minor come along ultimately cpu choice many opportunity one change future computing better decision come certain advantage long term theâ quad powerful cpu good operating temperature good battery life chosen best possible cpu provide u overall better hardware experience better capability shorter integration integration software platformrapid development continuessoftware development continues move forward quickly amazingly quickly past month seen astonishing software progress able take advantage finally extra time librem hardware fabrication benefit software advancement continue without slowdown quality testing providing greater number default apps community advancement made librem dev kitexcitement increaseswe recognize importance librem phone interest around rest assuredâ based historic delivery promise feel comfortable advancing towards delivery librem phone third quarter also immensely grateful support receiving forum social medium proud progress team making grateful community supporting effort work diligently get librem societal hand think team community deserve best
309,Lobsters,osdev,OS,Cross-compiling Rust code to Minix,https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/,crosscompiling rust code minix,crosscompiling rust code minix tldr git experience libc crate test ctest crate compiler target standard library main problem thread small patch result future code recent plan http,crosscompiling rust code minix feb tldr scroll pretty screenshot github link decided take look minix interesting microkernel o naturally building minix git first thing decided try porting rust std minix could crosscompile rust program linux run minix okay suppose could started something else porting rust software modifying platformdepending part std something experience working redox o rust really hard port theory almost trivial minix provides unixlike libc particular fork netbsd libc std generic backend unix system make call system libc implement platform specific functionality need compile minix library everything work course quite libc crate language including rust read c header need libc crate provide binding use c library rust need ported new oslibc bad since lot thing fairly standard shared minix us fork netbsd libc placed code minix libcsrcunixbsdnetbsdlikeminix seemed like good place put needed add modifiy cfg line various place minix could run lot subtle issue binding actually match libc luckily libc crate test based ctest crate compare binding c header likely catch every issue quite helpful save first set error got longer output one stage minix main running test bad siginfot size rust c bad ifmsghdr size rust c bad ifmsghdr align rust c bad netrtmaxid value byte rust c bad scmcreds value byte rust c bad fdsetsize value byte rust c bad fdsetsize value byte rust c bad fionread value byte rust c bad pipebuf value byte rust c thread main panicked test failed minix fixed issue minix main running test passed test minix great sure still subtler issue thing verified correct much easily manually compiler target standard library adding new target rustc done modifying crate librustctarget recompiling rustc compiling compiler take rather long time luckily rust also allows json target specification file standard library need much modification minix add cfg tell use unix backend work redirected libc portable unixlike system various cfg line couple temporary hack main problem thread turn various common unix function available minix notable limitation minix complete pthreads implementation minix includes library called mthread includes basic implementation user thread optional pthread emulation support everything pthreads initially based port even sent small patch fixing small issue mthread missing const specifier argument rust std us pthreads function provide got hello world working way various hack std part base system minix package gnu pth much complete user thread library including support pthreads function switching pth allowed reducing hack fixed error getting clear improvement adding dependency pth library different threading provided modern operating system since provides nonpreemptive user thread rather preemptive kernel thread obviously could potentially result performance hit sure however lack preemption might break easy enough contrive example multithreaded code break without preemption know much issue practice result tested much got ripgrep compile seems work perfectly future much working rust software potential subject porting attempt including rustc cargo harder others sort thing hard estimate trivial quite difficult one two remaining issue aware probably many found particular wonder impact nonpreemptive user thread implementation typical rust software upstreaming minix support rust likely possible first would want cleaner patch fewer hack fewer overall change well testing overall suppose writing driver filesystem system component minix using rust could interesting exercise might try point code created github repository rust libc fork build system make relatively easy use spent way long messing makefiles script set using rust fork standard library convenient currently recent plan provide integrated support cargo building core std http
310,Lobsters,osdev,OS,Database as Filesystem,https://www.youtube.com/watch?v=wN6IwNriwHc,database filesystem,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature database filesystem youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature database filesystem youtube
311,Lobsters,osdev,OS,John Nagle on Tricks QNX RTOS Uses to Outperform Other Microkernels,https://news.ycombinator.com/item?id=9872640,john nagle trick qnx rtos us outperform microkernels,,important operation qnx msgsend work like interprocess subroutine call sends byte array another process wait byte array reply status code io network request msgsend cc library handle simulate posix semantics design o optimized make msgsend fasta msgsend another service process hopefully waiting msgreceive case service process idle waiting msgreceive fast path sending thread blocked receiving thread unblocked control immediately transferred without trip scheduler receiving process inherits sender priority cpu quantum service process msgreply control transferred back similar waythis fast path offer big advantage scheduling delay control transfer happens immediately almost like coroutine cpu switch data sent cache service process need minimizes penalty data copying message copied usually highest level cacheinheriting sender priority avoids priority inversion highpriority process call lowerpriority one stall qnx realtime system priority taken seriously msgsendreceive priority based higher priority preempt lower one give qnx unusual property file system network access also priority based run hard real time program compiles web browsing machine realtime code nt slowed sadly latest release qnx discontinuing support selfhosted development qnx mostly used auto dashboard mobile device everybody crossdeveloping ide eclipse way inheriting sender cpu quantum time left another task priority get run mean calling server neither put end line cpu put head line like subroutine call scheduling purposesmsgreceive return id replying message used msgreply one server serve many client multiple thread msgreceiveprocessmsgreply loop multiple server running parallel concurrencythis nt hard implement secret qnx documentation os work way os linuxdomain messaging system v messaging unidirectional message passing caller sends receiver unblocked sender continues run sender typically read channel reply block approach mean several trip cpu scheduler behaves badly heavy cpu load system nt support manyone manymany casesomebody really write microkernel like rust actual qnx kernel occupies byte machine plus process called proc various privileged function run user process huge joball driver user process thing kernel driver qnx boot image contain user process started boot time initial driver get loaded almost everything optional component including file system code romable small embedded device code may rom hand qnx configured web server desktop system although rarely donethere paging swapping realtime may even disk paging supported within process done gcc much else make nicely responsive desktop system
312,Lobsters,osdev,OS,List of open source real-time operating systems,https://www.osrtos.com,list open source realtime operating system,nuttx apache mynewt trampoline phoenix tencentostiny tinyos zephyr azure rtos contiking rtthread stateos intro drone riot mbed o tock quarkts alios thing nutos embox ucosiii ucosii freertos mongoose o microkernel tizenrt erika enterprise liteos frosted distortos hyperc chibiosrt echronos contiki o stratifyos bertos xenomai cocoos brtos rtems rtai librertos atomthreads ukos moe tneo marte bitthunder tirtos kernel scmrtos fusion embedded rtos freescale mqx ecos tnkernel funkos duinos femto o prex usmartx protothreads,nuttx arm avr pic mips xtensa riscv freescale zilog filesystem network command line interface usbhost usbdevice gui nuttx realtime operating system rtos emphasis standard compliance small footprint scalable microcontroller environment primary governing standard nuttx posix ansi standard apache mynewt ble lorawan filesystem network tlsssl runtime analysis apache mynewt o realtime modular operating system connected iot device need operate long period time power memory storage constraint provides complete environment prototyping developing managing em presterlyrefactor trampoline trampoline static rtos small embedded system api aligned osekvdx o autosar o standard devmaster phoenix filesystem network usbdevice phoenixrtos opensource microkernelbased realtime operating system resource constrained device dev tencentostiny ble lorawan filesystem tlsssl network gui tencentos tiny realtime operating system developed tencent internet thing feature low power consumption low resource consumption modularity security reliability effectively improve development efficiency iot terminal product devmaster tinyos tinyos open source bsdlicensed operating system designed lowpower wireless device used sensor network ubiquitous computing personal area network smart building smart meter zephyr arm xtensa riscv arc nios ii ble filesystem command line interface logging project scalable realtime operating system rtos supporting multiple hardware architecture optimized resource constrained device built security mind linux foundation hosted project embrace open source development value governance mission unite leader across industry produce bestinbreed solution azure rtos filesystem network runtime analysis gui usbhost usbdevice advanced realtime operating system rtos designed specifically deeply embedded application among multiple benefit provides advanced scheduling facility message passing interrupt management messaging service azure rtos threadx many advanced feature including picokernel architecture preemption threshold event chaining rich set system service contiking filesystem network database simulation shell contiking operating system resourceconstrained device internet thing contiking contains rfccompliant lowpower communication stack enabling internet connectivity rtthread arm mips powerpc riscv andes filesystem network command command line interface runtime analysis usbhost usbdevice rtthread open source realtime operating system embedded device china rtthread rtos scalable realtime operating system tiny kernel arm full feature system arm arm dualcor stateos free extremely simple amazingly tiny realtime operating system rtos designed deeply embedded application target arm cortexm inspired concept state machine intro free simple tiny cooperative operating system o designed deeply embedded application drone apache license mit license drone embedded operating system writing realtime application rust riot arm avr mips riscv ble lorawan filesystem network gui tlsssl usbdevice ota riot realtime multithreading operating system support range device typically found internet thing iot microcontrollers mbed o ble lorawan filesystem network command tlsssl runtime analysis usbhost usbdevice mbed o opensource embedded operating system designed specifically thing internet thing iot includes feature need develop connected product based arm cortexm microcontroller tock tock embedded operating system designed running multiple concurrent mutually distrustful application cortexm based embedded platform kernel device driver written rust quarkts arm avr pic coldfire mips quarkts simple nonpreemtive realtime o quasistatic scheduler embedded multitasking application alios thing alios thing designed low power resource constrained mcu connectivity soc greatly suitable iot device alios thing rtos contains full stack software component tool building iot device nutos nutos intentionally simple rtos provides minimum service run nutnet tcpip stack embox embox configurable operating system kernel designed resource constrained embedded system ucosiii arm coldfire avr powerpc riscv filesystem network tlsssl usbhost usbdevice modbus gui µcosiii highly portable romable scalable preemptive realtime deterministic multitasking kernel microprocessor microcontrollers dsps ucosii arm coldfire avr powerpc riscv filesystem network tlsssl usbhost usbdevice modbus gui μcosii portable romable scalable preemptive realtime deterministic multitasking kernel microprocessor microcontrollers dsps freertos arm avr coldfire pic filesystem network tlsssl command line interface runtime analysis freertos market leading rtos amazon web service support architecture distributed mit license mongoose o filesystem network tlsssl mongoose o open source operating system internet thing supported microcontrollers amazon aws iot google iot core integrated code c javascript microkernel microkernel microkernelbased kernel support running realtime timesharing application example wireless communication arm cortexm series microprocessor efficiency performance power consumption security memory protection isolated execution mind tizenrt tizenrt lightweight rtosbased platform support lowend iot device world first operatingsystem kernel endtoend proof implementation correctness security enforcement available open source erika enterprise erika enterprise first opensource free rtos certified osekvdx compliant liteos huawei liteos lightweight opensource iot o smart hardware development platform simplifies iot device development device connectivity make service smarter delivers superb user experience provides better data protection huawei liteos designed smart home wearable iov intelligent manufacturing application frosted frosted acronym mean free operating system tiny embedded device goal project provide free freedom kernel embedded system expose posixcompliant system call api oldhallpc distortos mozilla public license version distortos objectoriented c rtos microcontrollers hyperc hyperc o real timeoperating system rtos designed various iot application design aimed optimization arm cortex cpu chibiosrt avr coldfire powerpc filesystem network usbhost usbdevice chibios complete development environment embedded application including rtos hal peripheral driver support file development environment echronos echronos rtos realtime operating system rtos originally developed nicta breakaway consulting pty ltd intended tightly resourceconstrained device without memory protection contiki o filesystem network command line interface contiki open source operating system internet thing contiki connects tiny lowcost lowpower microcontrollers internet stratifyos stratifyos powerful embedded rtos arm cortex microcontrollers bertos bertos real time open source operating system supplied driver library designed rapid development embedded software xenomai filesystem network tlsssl xenomai realtime development framework cooperating linux kernel order provide pervasive interfaceagnostic hard realtime support userspace application seamlessly integrated gnulinux environment cocoos cocoos free open source cooperative task scheduler based coroutines targeted embedded microcontrollers like avr brtos brtos lightweight preemptive real time operating system designed low end microcontrollers rtems arm mips powerpc filesystem network tlsssl command line interface rtems open source rtos support open standard application programming interface posix used space flight medical networking many embedded device rtai arm powerpc rtai realtime application interface linux let write application strict timing constraint favourite operating system rtai distribution includes rtailab tool chain convert block diagram rtai executab rtai librertos librertos portable singlestack real time operating system task share stack allowing large number task created even architecture low ram devmaster atomthreads atomthreads free lightweight portable realtime scheduler embedded system ukos ukos multitasking o suitable small embedded µcontroller system based preventive multitasking scheduler moe moe eventdriven scheduler system mcus moe mean mind embedded system toppersatk automotive kernel realtime operating system automotive system control publicly released topper project tneo tneo wellformed carefully tested preemptive realtime kernel mcus compact fast marte marte o hard realtime operating system embedded application follows minimal realtime subset bitthunder reliable realtime operating system application framework tirtos kernel tirtos kernel formerly known sysbios scmrtos scmrtos tiny realtime preemptive operating system intended use singlechip microcontrollers scmrtos capable run tiny ucs small amount ram byte rtos written c support various platform sophisticated modern rtos application development platform targeted towards growing list today compelling embedded device fusion embedded rtos fusion embedded rtos realtime operating system unicoi system realtime o designed optimized networking mediacentric processor freescale mqx freescale mqx realtime operating system rtos provides realtime performance within small configurable footprint rtos tightly integrated latest mcus mpus freescale provided commonly used device driver ecos ecos free open source realtime operating system intended embedded application highly configurable nature ecos allows operating system customised precise application requirement delivering best possible runtime perfor tnkernel tnkernel compact fast realtime kernel embedded bit microprocessor funkos funkos rtos bit mcus including avr cortex c c kernel avaiable key feature include preemption periodic event device driver mutexsemaphores includes variety graphic filesystem middleware duinos duinos small multithreading real time operating system rtos based freertos kernel arduino compatible board femto o femto o rtos small mcu like avr prex prex open source royaltyfree realtime operating system embedded system designed implemented resourceconstrained system require predictable timing behavior highly portable code prex written ansi c ba usmartx usmartx nonpreemptive multitasking priority based rtos protothreads protothreads extremely lightweight stackless thread designed severely memory constrained system
314,Lobsters,osdev,OS,Trusted Xenix 4.0 Evaluation Report (1994) (PostScript),http://webapp1.dlib.indiana.edu/virtual_disk_library/index.cgi/1347159/FID1806/library/fers/csc-epl-92-001-a.ps,trusted xenix evaluation report postscript,c download browse,commercial product evaluationscontains evaluation trusted product national computer security center u ft meade md national computer security system requirement ibm compatible pc m window cdrom drive accessible via web browser commercial product evaluation inu ocolc c user open indexhtml view data file data tied download browse
315,Lobsters,osdev,OS,50 Years In Tech Part 15. Be: From Concept To Near Death,https://mondaynote.com/50-years-in-tech-part-15-be-from-concept-to-near-death-f69c64d8725e,year tech part concept near death,year tech part concept near death firing frankness discussed original newton tablet described earlier monday note commodore amiga aquarius processor hobbit processor digital signal processor field camera hp logic analyzer united technology macdraw,year tech part concept near deathby jeanlouis gasséebe company steve sakoman founded leaving apple great product idea thought discover bad choice partner would almost destroy companyas described firing frankness monday note exit arrangement apple involved staying another six month minister without portfolio pondered next move got pair phone call steve job first asked felt fired smirking question deserved given instrumental dismissal day later another call time job offered talk could great thing together declined discussed knew emotional strength work charismatic next founderthere opportunity running unix system lab taking helm commodore becoming coo unix server company must stay cuttingroom floor fear muddying today picture conception gestation near early death bein february shortly exit apple arranged friend colleague steve sakoman came office announced intention leave company surprised sakoman wellregarded ran separate organization developing exciting new product original newton tablet oddly wikipedia article omits first fullsize tablet phase project despite promising future apple sakoman wanted leave doubt company direction described earlier monday note well concern newton handwriting recognition key feature device definedwhen halfhearted attempt convince stay apple foundered sensible thing offered join precise idea product convinced make good team done already proved correct also told sakoman fund project perhaps friend help fall prey vulture capitalist proved severely misguided almost lethalfor spoke circle failing find core idea july vacationing france discussed phone frustration complicated layer hardware software silt mac accumulated surely could come simpler cleaner architecture agile personal computer room third product besides mac intel pc ensuing conversation commodore amiga became reference platform example good bad promising amiga provided interesting multimedia feature le impressed overlycomplicated architecture implementation issue important aspect u sold attractively large number proving indeed market third wayweeks later sakoman presented basic sketch simple powerful multimedia machine newton tablet work aquarius processor project developed relationship microelectronics division based allentown pa original newton project used two hobbit processor simple inexpensive risc device also made dsps digital signal processor simplified capricious fast chip process image video sound telephony fax transmission like sakoman idea build multimedia computer featuring two hobbit three dsps one sound video faxtelephony around simple homegrown bussakoman lab scott valley home precisely clean room delicately retouched print field camera soon procured expensive u lab equipment fast tektronix oscilloscope hp logic analyzer latter call hp ceo john young office yet incorporated business hp sale people ship sakoman house matter week sakoman working hardware prototype produced heartbeat needed software team starting erich ringewald apple alumnus cyril meurillon french engineering student failed convince drop prestigious sup télécom school write key part o kernel dorm paris benoît schilling blindingly fast prototyper belgium little later recruited apple alumnus engineer bob herold steve horowitz attorney cory van arsdale business manageri thought great name nowincorporated company united technoids easily abbreviated ut cute useless already huge conglomerate called united technologiesduring one daily phone call sakoman told family hunted name night crawling dictionary gotten far b though meant letter b simple resonant romantic even call action loved itat home pulled oed second edition walked long page procession meaning age sanskrit saxon latinate root immediately jumped macdraw design simple time roman light condensed logo manually kerning e make sure looked right next b business amicable legal settlement company called better educationearly demo impressed visitor sakoman clean room much early investor friend wrote second check trunk rental car end visit write separate monday note t dangerously naive fund raising effort short skip friend family go cynical deep pocketed pro disaster struckwe seen coming beginning microelectronics people supportive knew u worked closely sakoman newton project exhibited gingerly optimism ability generate publicity multimedia machine processor result time passed started experience difficulty getting clearer product roadmap got news giving hobbitgestation interruptedthis hurt sakoman badly tried convince mere bump road used literary analogy author computer backup burn freak electric fire manuscript destroyed feel pain say publisher get another advance book even opportunity fix problem telling success still around easy say engineering design human creative activity rational part sakoman distraught bring start left would return year road lost colleaguea month earlier almost lost life tore inner lining left carotid artery experienced stroke result understanding happened lost speech minute sitting home wife discovered dragged stanford er probably saved life fortunately sequela seems numb patch skin right index finger lost friend efi arazi told shut apologize investor understand impact losing crucial supplier come new idea follow advicein part year tech series review failure heed advice eventual sale palm jlg mondaynotecom
316,Lobsters,osdev,OS,9FRONT CALLING DTRACY,https://www.amazon.com/9FRONT-CALLING-DTRACY-Stanley-Lieber/dp/1793390096,calling dtracy,,enter mobile number email address send link download free kindle app start reading kindle book smartphone tablet computer kindle device required
317,Lobsters,osdev,OS,FreeBSD Desktop – Part 16 – Configuration – Pause Any Application [2018],https://vermaden.wordpress.com/2018/09/19/freebsd-desktop-part-16-configuration-pause-any-application/,freebsd desktop part configuration pause application,kill process management ghost shell part xterm xdotool today show freeze application single keyboard shortcut mouse gesture utilize way small simple script freebsd desktop global page pkg pkg install xprop xdotool zenity xbindkeys desktoppausesh path bin script fetch scriptsdesktoppausesh http rawgithubusercontentcomvermadenscriptsmasterdesktoppausesh chmod x scriptsdesktoppausesh echo path grep script desktoppausesh desktoppausesh p l xbindkeys xbindkeysrc xbindkeys help key xbindkeys key xbindkeys key xbindkeysrc cat xbindkeysrc xbindkeys xbindkeys xbindkeys p ax grep firefox grep v grep p ax grep firefox grep v grep p ax grep firefox grep v grep desktoppausesh p p ax grep firefox grep v grep desktoppausesh p p ax grep firefox grep v grep xterm xbindkeys xinitrc xsession update update browsersuspender update seschwar stoppable layout xmonad update imglorp desktoppausesh pauseresume active window minimize pauseresume interactively selected window minimize http like,many desktop oriented operating system try provide various usability improvement feature like quite useful expose dashboard mac o x useless tile concept recent edition microsoft window system using unix many year knew could freeze pause process system kill sigstop signal unfreeze kill sigcont signal described process management section ghost shell part article way desktop application pita say least imagine opening xterm terminal searching chromium firefox process freezing one one every time need neither fortunately introduction called helper utility like xdotool possible implement usable manner today show freeze application single keyboard shortcut mouse gesture utilize way small simple script feature useful let say firefox started many tab open know drain battery life laptop close need information tab start firefox even battery usage load needed tab battery alternative pause firefox process use freeze process subprocesses use cpu battery power need unpause without need load tab example may heavy processing example started rawtherapee darktable processing large amount photo able smoothly watch video pause watch video unpause finish work also usable single player gaming really pause game literally may want check article freebsd desktop series freebsd desktop global page find link episode series along table content episode content first need install called helper pkg command pkg install xprop xdotool zenity xbindkeys script would make magic happen desktoppausesh script available github syntax nicely colored save place searchable path variable like bin script directory make executable fetch scriptsdesktoppausesh http rawgithubusercontentcomvermadenscriptsmasterdesktoppausesh chmod x scriptsdesktoppausesh echo path grep script sbin bin usrsbin usrbin usrlocalsbin usrlocalbin homevermadenscripts three way usage desktoppausesh usage desktoppausesh option argument option pauseresume active window pauseresume interactively selected window p pauseresume specified pid l list paused processeswindows l list paused processeswindows pid argument pid p option started option would pauseunpause currently active window option best used keyboard shortcut mouse gesture start desktoppausesh script argument cursor change able select window freeze unfreeze p option usable terminal directly may want freezeunfreeze process without environment debugging purpose example last l option list application currently paused presentday generation laptop island type limited keyboard choose keyboard shortcut use still use thinkpad laptop keyboard little option pause break key seems best candidate feature use active window freezeunfreeze option shift pause break key interactive option create new keyboard shortcut use handy xbindkeys tool let see code put xbindkeysrc configuration file xbindkeys help xbindkeys philippe brochard usage xbindkeys option option v version print version exit default print default rc file f file use alternative rc file p pollrc poll rcguile configs update h help help x display set x display use v verbose information xbindkeys run show show actual keybinding k key identify one key pressed mk multikey identify multi key pressed g geometry size position window open kmk option n nodaemon nt start daemon single key need key option let xbindkeys key press combination key orand click window use one two line nocommand homexbindkeysrc bind key scheme function pause let read shift pause break sequence xbindkeys key press combination key orand click window use one two line nocommand homexbindkeysrc bind key scheme function shift pause needed information xbindkeysrc configuration file look configured cat xbindkeysrc pause break active window scriptsdesktoppausesh pause shift pause break interactive window scriptsdesktoppausesh shift pause let start xbindkeys verify work xbindkeys press pause break key terminal started xbindkeys utility hit enter several time terminal freezed hit pause break key etnered enter key passed unfreezed let check firefox example process run like usual r state like shown p ax grep firefox grep v grep usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab firefox usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab freeze firefox pause break key process state p ax grep firefox grep v grep usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab firefox usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab unfreeze pause break key get back normal r state p ax grep firefox grep v grep usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab firefox usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab may course specify hand firefox pid current state desktoppausesh p info kill info kill info kill firefox browser paused p ax grep firefox grep v grep usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab firefox usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab use unpause desktoppausesh p info kill info kill info kill viola firefox run p ax grep firefox grep v grep usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab firefox usrlocallibfirefoxfirefox contentproc childid isforbrowser prefslen schedulerprefs appdir usrlocallibfirefoxbrowser tab downside feature one remember paused application refresh process freezed see frozen epiphany browser upon xterm window moved pretty window like effect unpause epiphany get back normal shown remember add xbindkeys command xinitrc xsession file make permanent update one hacker news user named explained lack window content refresh application freezed cite comment depends window manager application state really affected stop updating redrawing area another window move away window manager asks underlying application update area screen dead wm keep displaying last thing something else happens spot hand compositing window manager dedicate separate buffer application exclusive access kind window manager would ask application update anything would take image dedicated application buffer update screen since application buffer modified anything else would last state application would turn find way screen glitch update one reddit user pointed browsersuspender solution simply suspends browser focus using stopcont signal update lobster user seschwar pointed stoppable layout functionality xmonad automatically pause process window except active one also us sigcont sigstop signal update one hacker news user named imglorp suggested command could also iconifyminify app window really good idea added option also minimize window desktoppausesh usage desktoppausesh option argument option pauseresume active window pauseresume active window minimize pauseresume interactively selected window pauseresume interactively selected window minimize p pauseresume specified pid l list paused processeswindows l list paused processeswindows pid argument pid p option changelog desktoppausesh script http eof like like loading related
318,Lobsters,osdev,OS,A Forth-Based OS for the TI-84+ Calculator,https://github.com/siraben/zkeme80,forthbased o calculator,forthbased o calculator tldr another o knightos an standard forth note standardcompliance project offical test suite write smileyos knightos kernel building running operating system using makefile jstified using nix package manager file included design assembler structure assembly program pas handling expression handling procedure pas debugging assembler limitation,forthbased o calculator tldr assemblerscm assembler o build rom run make build dependency apart recent version guile supporting module bytevectors record scheme implementation tested another o ti tinkering community long loathed proprietary nature default tios project attempted create viable alternative fewer matured usable state none currently able actually let use calculator calculator looking operating system chance come across knightos well developed plenty unixlike feature filesystems task even c compiler maybe want want minimal operating system allows extend way wish bonus point nt need know assembly operating system minimal core mostly an standard conforming forth interpretercompiler word covering sprite graphic text memory access everything need make next hit snake clone rpnbased math layer already lower barrier entry customizing operating system enable rapid development cycle forth layer find two lowest level highest level language assembly scheme best assembler extensible one writing macro joy pain scheme macro system macbook pro running nixos take around second real time compile operating system first time make build subsequent build involving change f file take around second real time forth o development hard doubly using assembly keep track calling convention routine preserve register tedious errorprone task nested loop switch statement window importantly nt easy allow user extend operating system forth change low level assembly high level want want exception already want garbage collection memory safety roll see forthscm example forth word familiar forth highly recommend starting forth leo brodie get note standardcompliance word standard copied project based jonesforth however consult an standard incorporate good idea instance test suite currently found slight sans floating point stuff adaptation offical test suite current version operating system run series test check correctness word environment time go may consider making word standardconforming write assembly code outside forthscm taken smileyos based older version knightos kernel chose smileyos minimal needed get nasty stuff lockingunlocking flash display routine key routine etc way code nt exist smileyos taken public source including current version knightos rest operating system design building running operating system using makefile running make build make generate file called directory simply pas file emulator jstified work browser start playing around running make build run project assumes already properly built tielm run shell guile installed warned though tilem tricky build enable sort flag install dependency anyone know good emulator macos please let know using nix package manager using nix package manager clone repository run following compile build assembler operating system emulator automatically run rom done prop clever nixos figuring build tilem nixbuild runit result file included assemblerscm assembles sexp style assembly code binary simply run load assemblerscm scheme repl run assembleprog sampleprog see binary data run assembletofile sampleprog outbin write binary file forthbased operating system load run makerom output binary file design assembler assembler core us pattern matching program counter implemented mutable scheme object pc label kept global alist label allow use jump refer label declared use multiple pass assembler designed extensible various level source code assembler pas pas layer extended using full power scheme extensible nature assembler mean user add whatever feature desire built already instance retargeting assembler adding missing instruction structure assembly program assembly program consist list element either expression procedure pas handling expression expression program passed assembleexpr also check wellformed assembleexpr return record type following field normal instruction record entry type description length integer length instruction byte geninstr lambda thunk computes actual instruction byte use converting expression record type like allows u compute length program resolve look ahead label handling procedure procedure scheme object satisfy predicate procedure embedded program must able run without argument return either instruction record main extension mechanism assembler instance macrosscm procedure called filluntilend creates list byte total binary byte long pas program make pas perform code generation label resolution instruction record required length property tell advance many byte generated thunk consistency number thunk output checked instruction record also checked generates unsigned integer result flattened list unsigned number manipulated user wish debugging debugging process pretty simple one write valid assembly program sexp format run disassembler compare output feeling particularly brave may skip step try program chip assembler limitation currently instruction encoding like file assembler accepts add new instruction current workflow look relevant portion data sheet write new case pattern matcher adding encoding would allow assembler retargeted
319,Lobsters,osdev,OS,Transcript of Chuck Moore on OKAD and the P21 Microprocessor,http://www.ultratechnology.com/tape1-2.htm,transcript chuck moore okad microprocessor,video,chuck moore interviewed home office video presentation store chuck moore gave following interview home began tour museum first forth hardware board chuck behind glass fact behind glass one early early computer rarely get good excuse see left one naked die pile wire board think earliest novix computer number interface board cabled together basic guess one early forth kit board novix static ram board collectively generated video know interface board generate video one reason putting video coprocessor nt plan ahead get real mess trying work thing afterwards incidentally happened pc put board add interface chip around provide kind video serial parallel bus end pretty gerrigged mess point want go back redesign whole thing throw interface chip consolidate thing never trying asics handle horrible io processing pc requires nightmare wrap thing like showing novix kit video system adhoced gerryrigged sense historical artifact stated whole chain event ten year counting would longer run see broken wire could made run ran retired die die mil side equivalent board showed earlier equivalent shboom room plus ten time faster one percent cost tremendous advantage consolidating thing single piece silicon provided piece silicon small people kind thing nowadays chip size thumbnail large expensive power hungry unreliable low yield bad thing chip come size want cleverness make thing small fast instead large clumsy question goal goal trying provide simplest possible hardware simplest possible software simplest combination two spite fact people give lip service industry getting software people involved design hardware fact people job different rarely communication one another think useful let someone familiar world try optimize interface goal starting human provide simplest possible electronic tool use like seven key keyboard simplest keyboard imagine building using interfacing simple computer restricted instruction set nt work hard remember instruction exist simple interface computer memory output device video network whatever low power course low power go simple fast computer fast software efficient let lot software use le hardware spend le time building hardware hooking debugging using power want reliable computer first started business building little computer manhattan beach goal would take computer could hold hand drop ocean fish ocean would still running wanted proof salt water wanted proof anything short nuclear explosion induced electromagnetic pulse think hopeless problem people think survive kind environment large power supply would nice run couple cell perhaps practical packaged properly computer shape would quite reasonable thing briefcase would run day without power supply memory card pcmcia form nice interface much smaller rugged floppy disk ultimately price zero moment still expensive question difference software commercial software ok let talk software software easier talk context look program commercially available people shopping back forth amongst company sense written fortran twenty year ago maybe software written last twenty year people repackage take package package put together package twice big twice powerful well certainly ca nt think way get megabyte software one sits write megabyte code probably impossible get megabyte agglomerating kilobyte one thousand time get megabyte totally bewildering people willing talked someone dec said major emphasis development cad software integrate various software package one consistent whole one consistent whole could well megabyte size even though individual component wrong way want start clean piece paper decide want write good software first step write operating system write operating system establish environment going working operating system handle everything environment ok going even one small computer simple fast processor lot memory million word memory problem graphic problem going designing complex system chip got context try optimize something seven input key perfect seven input key good word processing fine steering cursor around screen making menu selection start saying going seven key menu based driven system immediately establishes useful constraint first system going highly modular code going aimed responding keystroke press button want execute little bit code button directed move cursor screen perhaps ok system work interprets keystroke organizes menu let edit graphic character supporting work need put picture screen need instruction easy write instruction easy invest effort optimize instruction make sure well done cad package top going another instruction perfectly feasible one person write said done want add capability system mean adding another menu seven button press available seven button press worth code necessary something take large quantity code take well though quantity code particular need avoid writing code situation never arise practice need avoid writing code handle general problem never going encounter instance first version ok intended design pin chip chip designing modify design pin chip chip chip designing probably modify handle pin chip ambitious piece software handle n pin chip even n three version specialized add code necessary change number output pad certainly possible nt need solve general problem solve specific case see future many general purpose computer special purpose computer special purpose computer much easier program nt need worry consequence word processor change making graphic user interface word processor dinosaur insist computer must general purpose going go business next ten twenty year computer built everything wo nt computer interface wo nt nt need lot custom silicon custom silicon business guess natural thing say certainly universally accepted industry lot people keep thinking ca nt run c ca nt interesting one hundred year wo nt anything run c nt matter chuck switch demo okad tour chip layout ok screen hit cad button switch cad screen hit rectangle button get rectangle display see whole chip zoom bit actually possible zoom see whole chip zoom way see interesting thing zoom see geometry chip nt zoom back little show different layer ok region stack second metal ground diffusion well one region diffusion region p v n diffusion well diffusion together well substrate contact poly metal metal plus contact second metal second metal plus contact together second metal removed see oh accidentally hit rectangle button reason rectangle red warn hit button computer going busy ten second recomputing reextracting geometry tile representation take long compute rectangle fair midland fast let zoom see couple interesting thing transistor region poly cross diffusion red cross green transistor transistor n transistor background black p transistor background greenish n well transistor controlling flow current transmission gate pair transistor constitutes transmission gate signal go zero five volt five volt zero equal facility basically transistor control switch two metal line large transistor physically large geometry conduct current one likewise transistor conduct current one another pair transistor constitutes inverted two inverter cross coupled inverter constitute latch one transmission gate enabling input latch screen constitutes one bit memory control line tend silver bus tend blue whole thing constitutes one bit memory zoom little bit seeing two four bit memory see six bit memory thousand bit memory entire structure region data stack register bit bit memory right alu processor go bit find return stack instruction register region register organized horizontally bit zero though twenty stretched across screen horizontally center find big transistor drive control line random logic instruction decode select control line return stack memory processor spread bit moving thing around bit video coprocessor lot empty space use increase depth stack whatever analog coprocessor network coprocessor parallel port attached pad oh nt even looked tiled representation tiled representation distinct geometric representation looked saying thing except scaled actual geometry required fabricator le right thickness line approximately work edit simulate design later rectangle generated actually proved output required fabrication ability simulate behavior chip hit button reset signal start zero except three pad represent five volt looking four trace varying time power ramped zero five volt seeing pad chip change plus five ground time go monitor signal four signal great detail square across typically first interesting event going occur first memory access see signal going ground five address line established correctly sram select bit gone low eight bit data word put input line represents semicolon switch sram dram stop process go back tiled layout position see bright red signal got five volt dark red signal got ground established signal level twenty five hundred signal chip pan though end edited two hour tape show thing iv curve transistor code going simulating code ultratechnology street berkeley ca
320,Lobsters,osdev,OS,600 Days of postmarketOS,https://postmarketos.org/blog/2019/01/16/600-days-of-postmarketOS/,day postmarketos,new front page booting mainline accelerated graphic connecting cellular modem free software userspace pmbootstrap aports separated pmbootstrap tool pmaportsgit pypi different alpine linux branch future substantial breakage worthy successor buildssrht sircmpwn describes martijnbraam working backend code ollieparanoid purism necuno solution craftyguy crowdfunding day managed boot postmarketos craftyguy refactored necuno solution postmarketos among puretryout ubports porting interface postmarketos puretryout ollieparanoid martijnbraam packaging phosh tab completion pmbootstrap using argcomplete longer case puretryout changing architecture sony xperia compact upgrade vendor kernel package pinoaffe block device partition zhuowei build rootfs image byte sector size packaged grate driver homepage pparent ollieparanoid wiki community postmarketos related repository moved gitlab last post fosdem bshah martijnbraam mayeulc puretryout unrznbl reddit reddit hn,postmarketos aiming ten year lifecycle smartphones see new front page short introduction new around today cover happened second half many wondering took u long write real update post project dead already nt phone call almost working happened development going continuously dead maybe little undead though like old forgotten phone trying revive really gotten closer goal getting telephony working turning phone daily driver nexus booting mainline accelerated graphic connecting cellular modem free software userspace still working audio one example device different problem however sitting idle nothing past month might think well suck get last missing piece making call place daily driver salvation androidios duopoly right see even missing functionality still proof concept something easily used daily driver making phone call nexus still requires firing terminal inputting command name obvious flaw like linux distribution need take care thing surface list housekeeping task include integrating various component one another updating software repository dealing breakage update maintaining binary package repository repairing package fail build handling incoming patch bug report feature request writing organizing documentation thing slow development especially optimized could stuck proofofconcept stage time get mean going rush telephony functionality even could done easily pretending everything around fixed later certain workflow need put place get rock solid base upon easy fun develop becoming great platform development idea beginning applied foundation postmarketos pmbootstrap development tool time take next level deploy concept distribution whole mind took one longstanding issue postmarketos architecture package building recipe aports separated pmbootstrap tool resolved pmbootstrap clone copy nowseparated pmaportsgit repository run initialization wizard first time thanks new independence linux distribution properly package pmbootstrap change also allowed u finally put pypi pip install user pmbootstrap pmbootstrap init also important stepping stone basing package different alpine linux branch future right alpine bleeding edge aptly named edge branch allows u get latest version package quickly moving target roughly month update one package cause substantial breakage throughout postmarketos developer fun situation deal typically day everything adjusted end nt need tell unacceptable would phone refused work day especially every often fix involves reinstall o therefore plan use alpine stable release future base rebasing package separate branch next alpine release roughly every six month match alpine release cycle allow u give user clear safe upgrade path current stable package branch new one ready multiple package branch mean need build package branch every cpu architecture course fun exercise without powerful automated package building infrastructure problem right cut task single machine ghz quadcore manually triggered build everything take example several hour build new plasma mobile upgrade supported architecture even though cross compiling supporting multiple branch yet prompted u start brainstorming worthy successor long discussion started buildssrht build dot sir hat mentioned since started collaborating author sircmpwn describes project flagship product srht continuous integration platform buildssrht easily capable continuous integration system available today powerful working multiple linux distribution bringing onboard platform scale automation need entire linux distribution martijnbraam working backend code start individual package build job whenever new commits land pmaportsgit come nice status page frontend link individual postmarketos package srht build job one job per package requires knowledge package need built advance ollieparanoid added pmbootstrap repomissing srht based build repository effort still work progress however already caused nice spike srht statistic triggered initial package build see image majority device running postmarketos rather old one interested packaging support new hardware well especially hardware produced free software loving company purism necuno solution next purism librem craftyguy ordered development kit back crowdfunding day september arrived week ago writing blog post managed boot postmarketos sharing much code device possible paid librem requires uboot written sd card also need another firmware file written craftyguy refactored code allow arbitrary number firmware file embedded sd card image picture see dev board booted hooked hdmi monitor last least necuno solution collaborating six alternative mobile o community postmarketos among puretryout receive one device free porting purpose possible order postmarketos preinstalled course brings back classic question device sold postmarketos name marketos premarketos prepostmarketos work clearly needed may remember canonical canceled attempt bringing ubuntu unity desktop phone called ubuntu touch life without canonical backing form ubports forked project maintain nowadays started porting interface postmarketos already done impressive amount upstreaming everything fixed along way unity boot far ubuntuapplaunch working enough application launch everything lock easily point need package actual apps well right system setting app picture meanwhile puretryout ollieparanoid martijnbraam took shot packaging phosh ui librem use default purism pureos like unity port getting ui running alpine stack hold unresolved challenge help highly appreciated always blog post get long even nt bother listing every change noteworthy one tab completion pmbootstrap work perfectly bash zsh added support using argcomplete automatically tab completion existing argparse without manual maintenance always perfect nt nice recently use binary device cpu available alpine postmarketos longer case able unleash full cpu power shortly device puretryout tested changing architecture sony xperia compact work flawlessly one tougher challenge postmarketos alpine upgrade lot vendor kernel refused compile least one device nt boot kernel compiled ended packaging sidebyside building existing kernel allowing device owner ability select gcc version used vendor kernel package device owner slowly switching since carefully testing device still boot change new default patch related added new port nt deal issue pinoaffe updated initramfs script look rootfs block device partition speaking rootfs zhuowei made possible build rootfs image byte sector size required google pixel xl two important project change nt necessarily related packaged grate driver tegra gpus wiki main page homepage based pparent excellent photo updated mobile friendly ollieparanoid document progress wiki reach community share result work together fixing flaw found optimizing postmarketos use case thanks everyone ported device see contributor section device wiki page big update blog post additional figure note merged mr closed issue open issue counted across postmarketos related repository possible github moved gitlab star fork watch included imported see last post reference fosdem start roughly two week quite people postmarketos attend bshah martijnbraam mayeulc puretryout unrznbl together folk pretty much every alternative floss mobile project looking forward seeing going mixed bag news honest still fun celebrating hacker spirit flow project thanks reading good luck whatever passion let make marvelous year overcoming obstacle fun hacking fascinating stuff reddit thread post reddit thread new homepage hn
321,Lobsters,osdev,OS,Teaching Operating Systems with Tracing,https://github.com/teachbsd/course,teaching operating system tracing,teaching operating system tracing set opensource course student software practitioner freebsd operating system design implementation freebsd operating system ed opensource license metropolitan,teaching operating system tracing set opensource course student software practitioner robert n watson george v nevilleneil observed decline teaching operating system fundamental period becoming important large part due lack contemporary reusable material training people teach operating system course still exist work toy rather real system avoid interesting microarchitectural element required achieve performance contemporary system omit coverage feature developer likely engage eg multithreading multicore hardware networking finally perhaps importantly fail teach suitable experimental methodology allow developer evaluate whether performance work effective belief giving student ability observe run time inner working complex system freebsd operating system provides clearer understanding system ought work theory actually work practice design experiment tell difference two course applicable university student practitioner software engineering preferred text course design implementation freebsd operating system ed material contained herein shared permissive opensource license intent widely adopted note practitioner course requires metropolitan beamer theme installed slide compiled
322,Lobsters,osdev,OS,A founder’s farewell,https://urbit.org/posts/essays/a-founders-farewell/,founder farewell,,
323,Lobsters,osdev,OS,The Urbit address space is now live on the Ethereum blockchain. We’re calling it ‘Azimuth’,https://urbit.org/posts/essays/azimuth-is-on-chain/,urbit address space live ethereum blockchain calling azimuth,,
324,Lobsters,osdev,OS,Writing an OS in Rust: Introduction to Paging,https://os.phil-opp.com/paging-introduction/,writing o rust introduction paging,introduction paging github bottom memory protection segmentation paging segmentation virtual memory fragmentation paging hidden fragmentation page table multilevel page table twolevel page table paging sign extension two complement page table example translation page table format system call spectre page table entry translation lookaside buffer module implementation kernel already run paging minimal rust kernel page fault double fault bit set accessing page table summary next,introduction paging jan post introduces paging common memory management scheme also use operating system explains memory isolation needed segmentation work virtual memory paging solves memory fragmentation issue also explores layout multilevel page table architecture blog openly developed github problem question please open issue also leave comment bottom complete source code post found branch table content protection one main task operating system isolate program web browser nt able interfere text editor example achieve goal operating system utilize hardware functionality ensure memory area one process accessible process different approach depending hardware o implementation example arm cortexm processor used embedded system memory protection unit mpu allows define small number eg memory region different access permission eg access readonly readwrite memory access mpu ensures address region correct access permission throw exception otherwise changing region access permission process switch operating system ensure process access memory thus isolate process hardware support two different approach memory protection segmentation paging segmentation already introduced originally increase amount addressable memory situation back cpu used address limited amount addressable memory make accessible additional segment register introduced containing offset address cpu automatically added offset memory access memory accessible segment register chosen automatically cpu depending kind memory access fetching instruction code segment c used stack operation pushpop stack segment s used instruction use data segment d extra segment e later two additional segment register f g added used freely first version segmentation segment register directly contained offset access control performed changed later introduction protected mode cpu run mode segment descriptor contain index local global descriptor table contains addition offset address segment size access permission loading separate globallocal descriptor table process confine memory access process memory area o isolate process modifying memory address actual access segmentation already employed technique used almost everywhere virtual memory memory idea behind virtual memory abstract away memory address underlying physical storage device instead directly accessing storage device translation step performed first segmentation translation step add offset address active segment imagine program accessing memory address segment offset address really accessed differentiate two address type address translation called virtual address translation called physical one important difference two kind address physical address unique always refer distinct memory location virtual address hand depend translation function entirely possible two different virtual address refer physical address also identical virtual address refer different physical address use different translation function example property useful running program twice parallel program run twice different translation function first instance segment offset virtual address translated physical address second instance offset translates virtual address physical address allows program run code use virtual address without interfering another advantage program placed arbitrary physical memory location even use completely different virtual address thus o utilize full amount available memory without needing recompile program differentiation virtual physical address make segmentation really powerful however problem fragmentation example imagine want run third copy program saw way map third instance program virtual memory without overlapping even though enough free memory available problem need continuous memory ca nt use small free chunk one way combat fragmentation pause execution move used part memory closer together update translation resume execution enough continuous space start third instance program disadvantage defragmentation process need copy large amount memory decrease performance also need done regularly memory becomes fragmented make performance unpredictable since program paused random time might become unresponsive fragmentation problem one reason segmentation longer used system fact segmentation even supported mode anymore instead paging used completely avoids fragmentation problem idea divide virtual physical memory space small fixedsize block block virtual memory space called page block physical address space called frame page individually mapped frame make possible split larger memory region across noncontinuous physical frame advantage becomes visible recap example fragmented memory space use paging instead segmentation time example page size byte mean memory region split across three page page mapped frame individually continuous virtual memory region mapped noncontinuous physical frame allows u start third instance program without performing defragmentation fragmentation compared segmentation paging us lot small fixed sized memory region instead large variable sized region since every frame size frame small used fragmentation occurs seems like fragmentation occurs still hidden kind fragmentation socalled internal fragmentation internal fragmentation occurs every memory region exact multiple page size imagine program size example would still need three page size would occupy byte needed differentiate two type fragmentation kind fragmentation happens using segmentation called external fragmentation internal fragmentation unfortunate often better external fragmentation occurs segmentation still waste memory require defragmentation make amount fragmentation predictable average half page per memory region table saw potentially million page individually mapped frame mapping information need stored somewhere segmentation us individual segment selector register active memory region possible paging since way page register instead paging us table structure called page table store mapping information example page table would look like see program instance page table pointer currently active table stored special cpu register register called job operating system load register pointer correct page table running program instance memory access cpu read table pointer register look mapped frame accessed page table entirely done hardware completely transparent running program speed translation process many cpu architecture special cache remembers result last translation depending architecture page table entry also store attribute access permission flag field example rw flag make page readable writable page table simple page table saw problem larger address space waste memory example imagine program us four virtual page use thousand separator need physical frame page table million entry ca nt omit empty entry cpu would longer able jump directly correct entry translation process eg longer guaranteed fourth page us fourth entry reduce wasted memory use twolevel page table idea use different page table different address region additional table called level page table contains mapping address region level page table best explained example let define level page table responsible region size following table would exist example mapping page fall first byte region us first entry level page table entry point level page table specifies page point frame page fall byte region use entry level page table entry point different level page table map three page frame note page address level table include region offset eg entry page still empty entry level table much fewer million empty entry reason saving nt need create level page table unmapped memory region principle twolevel page table extended three four level page table register point highest level table point next lower level table point next lower level level page table point mapped frame principle general called multilevel hierarchical page table know paging multilevel page table work look paging implemented architecture assume following cpu run mode architecture us page table page size page table independent level fixed size entry entry size byte table large thus fit exactly one page page table index level derived directly virtual address see table index consists bit make sense table entry lowest bit offset page byte bit discarded mean really since support address even though bit discarded ca nt set arbitrary value instead bit range copy bit order keep address unique allow future extension like page table called signextension similar sign extension two complement address correctly signextended cpu throw exception worth noting recent ice lake intel cpu optionally support page table extends virtual address given optimizing kernel specific cpu make sense stage work standard page table post translation let go example understand translation process work detail physical address currently active level page table root page table stored register page table entry point physical frame next level table entry level table point mapped frame note address page table physical instead virtual otherwise cpu would need translate address could cause neverending recursion page table hierarchy map two page blue page table index deduce virtual address two page let see happens program try read address first convert address binary determine page table index page offset address index walk page table hierarchy determine mapped frame address start reading address level table register level index look entry index table tell u level table stored address load level table address look entry index point u level table level index look last entry page find address level table entry index level table finally find page mapped frame hexadecimal final step add page offset frame address get physical address permission page level table r mean readonly hardware enforces permission would throw exception tried write page permission higher level page restrict possible permission lower level set level entry readonly page use entry writable even lower level specify readwrite permission important note even though example used single instance table typically multiple instance level address space maximum one level table level table level table entry level table level table entry level table entry level table table format page table architecture basically array entry rust syntax repr align pub struct pagetable entry pagetableentry indicated repr attribute page table need page aligned ie aligned boundary requirement guarantee page table always fill complete page allows optimization make entry compact entry byte bit large following format bit namemeaning page currently memory allowed write page accessibleif set kernel mode code access page cachingwrites go directly memory cacheno cache used page cpu set bit page used cpu set bit write page occurs pagenullmust creates page creates page nt flushed cache address space switch pge bit register must set used freely o addressthe page aligned physical address frame next page table used freely o executeforbid executing code page nxe bit efer register must set see bit used store physical frame address remaining bit used flag freely used operating system possible always point aligned address either pagealigned page table start mapped frame mean bit always zero reason store bit hardware set zero using address true bit architecture support physical address similar support virtual address let take closer look available flag present flag differentiates mapped page unmapped one used temporarily swap page disk main memory becomes full page accessed subsequently special exception called page fault occurs operating system react reloading missing page disk continuing program writable execute flag control whether content page writable contain executable instruction respectively accessed dirty flag automatically set cpu read write page occurs information leveraged operating system eg decide page swap whether page content modified since last save disk write caching disable cache flag allow control cache every page individually user accessible flag make page available userspace code otherwise accessible cpu kernel mode feature used make system call faster keeping kernel mapped userspace program running however spectre vulnerability allow userspace program read page nonetheless global flag signal hardware page available address space thus need removed translation cache see section tlb address space switch flag commonly used together cleared user accessible flag map kernel code address space huge page flag allows create page larger size letting entry level level page table directly point mapped frame bit set page size increase factor either level entry even level entry advantage using larger page fewer line translation cache fewer page table needed crate provides type page table entry nt need create structure translation lookaside buffer page table make translation virtual address expensive translation requires memory access improve performance architecture cache last translation socalled translation lookaside buffer tlb allows skip translation translation still cached unlike cpu cache tlb fully transparent update remove translation content page table change mean kernel must manually update tlb whenever modifies page table special cpu instruction called invlpg invalidate page remove translation specified page tlb loaded page table next access tlb also flushed completely reloading register simulates address space switch crate provides rust function variant tlb module important remember flushing tlb page table modification otherwise cpu might keep using old translation lead nondeterministic bug hard debug one thing mention yet kernel already run paging bootloader added minimal rust kernel post already set paging hierarchy map every page kernel physical frame bootloader paging mandatory mode mean every memory address used kernel virtual address accessing vga buffer address worked bootloader identity mapped memory page mean mapped virtual page physical frame paging make kernel already relatively safe since every memory access bound cause page fault exception instead writing random physical memory bootloader even set correct access permission page mean page containing code executable data page writable fault let try cause page fault accessing memory outside kernel first create page fault handler register idt see page fault exception instead generic double fault srcinterruptsrs lazystatic static ref idt interruptdescriptortable let mut idt interruptdescriptortable new idtpagefaultsethandlerfn pagefaulthandler new idt use structure idt pagefaulterrorcode use crate hltloop extern fn pagefaulthandler stackframe mut interruptstackframe errorcode pagefaulterrorcode use register control println exception page fault println accessed address read println error code errorcode println stackframe hltloop register automatically set cpu page fault contains accessed virtual address caused page fault use read function crate read print pagefaulterrorcode type provides information type memory access caused page fault example whether caused read write operation reason print ca nt continue execution without resolving page fault enter hltloop end try access memory outside kernel srcmainrs nomangle pub extern c fn start println hello world blogos init new let ptr mut unsafe ptr cfg test testmain println crash blogos hltloop run see page fault handler called register indeed contains address tried access error code tell u causedbywrite fault occurred trying perform write operation tell u even bit set example fact protectionviolation flag set mean page fault occurred target page nt present see current instruction pointer know address point code page code page mapped readonly bootloader reading address work writing cause page fault try changing pointer note actual address might different use address page fault handler report let ptr mut read code page unsafe let x ptr println read worked write code page unsafe ptr println write worked commenting last line see read access work write access cause page fault see read worked message printed indicates read operation cause error however instead write worked message page fault occurs time protectionviolation flag set addition causedbywrite flag indicates page present operation allowed case writes page allowed since code page mapped readonly page table let try take look page table define kernel mapped srcmainrs nomangle pub extern c fn start println hello world blogos init use register control let read println level page table testmain println hltloop read function return currently active level page table register return tuple physframe type interested frame ignore second element tuple run see following output level page table physaddr currently active level page table stored address physical memory indicated physaddr wrapper type question access table kernel accessing physical memory directly possible paging active since program could easily circumvent memory protection access memory program otherwise way access table virtual page mapped physical frame address problem creating mapping page table frame general problem since kernel need access page table regularly example allocating stack new thread solution problem explained detail next post post introduced two memory protection technique segmentation paging former us variablesized memory region suffers external fragmentation latter us fixedsized page allows much finegrained control access permission paging store mapping information page page table one level architecture us page table page size hardware automatically walk page table cache resulting translation translation lookaside buffer tlb buffer updated transparently need flushed manually page table change learned kernel already run top paging illegal memory access cause page fault exception tried access currently active page table nt able register store physical address ca nt access directly kernel next next post explains implement support paging kernel present different way access physical memory kernel make possible access page table kernel run point able implement function translating virtual physical address creating new mapping page table
325,Lobsters,osdev,OS,Monotonic clocks are not monotonic,https://github.com/rust-lang/rust/pull/56988,monotonic clock monotonic,,std force instant monotonic commit attempt force instant monotonic mean possible tried relying oshardwareclock implementation seem buggy enough ca nt rely practice commit implement hammer firefox recently implemented noted keep whatever lastest instant return value memory returning instead o look like moving backwards close close cc cc close close
326,Lobsters,osdev,OS,Misadventures in process containment,https://apenwarr.ca/log/20190111,misadventure process containment,redo tutorial building docker kvm container scratch using redo dockerfiles nitix virtual server nv centosbased chromeoss crostini self configuring virus free appliance server horrible widespread security exploit redo tutorial take gigabyte distribute app megabyte bupdate bup incremental backup software written previously bupsplit algorithm nsis worrying people stealing idea casync jnrowe point zsync,misadventure process containment working series tutorial using redo various use case one common user request example solve realworld problem redo problem extremely flexible tool hard people figure start recent series tutorial building docker kvm container scratch using redo think turned pretty well maybe tutorial deserves disclaimer though really something good question nt know see standard way build container nowadays commonly using dockerfiles docker build command obvious need another way obvious nt wait let back bit get idea isolated chrootbased container around long time first startup even commercial version concept early first implemented patrick patterson called nitix virtual server nv original idea take verylockeddown linuxbased server appliance let install apps without removing useful security reliability lockeddownness operating system nitix stripped minimal linux install nv full install centosbased system userspace could basically anything linux could might recognize concept chromeos crostini could start stop snapshot inner nv operating system make backup importantly app developer could take one preinstalled customized snapshot package sell customer hopefully one appliance eventually one packaged apps became appealing enough app maker much larger u decided acquire company often happens accidentally killed love sadly end branch container evolutionary tree container installed physical appliance hardware another branch evolution seems died nobody belief anymore zeromaintenance self configuring virus free appliance server run office network without needing professional sysadmin come think people nt believe u back either least seeing demo whatever product nt exist anymore nowadays right case modern solution everybody host everything cloud cloud problem least problem fairly well understood importantly pay minute crack team expert one server fix problem people work pretty well back container way made long ago bit adhoc person installed fresh nv installed app wrote script take system configuration data user account remember used hostnames ip address put right appspecific config file grab snapshot whole nv distribute making new version app container involved either making additional tweak live image little risky resnapshotting human start scratch rerun manual step simpler time nowadays people care lot automated build automated testing back big improvement also collaborate lot docker container share almost basic concept take base filesystem stuff take another snapshot share snapshot automated better way automate stuff part step layer share layer one person publish base o install another person install go compiler another person build install app another person customize app configuration people work different company live different country sign touch younguns would never thought could trust random unauthenticated person internet provide big binary image o platform company us distribute app maybe ca nt people surprisingly almost never result horrible widespread security exploit guess people surprisingly nonevil anyway one thing bothered lot old nv day today dockerfiles extra crud end image install way whole operating system example looked might official dockerfile building mysql server image although sure one defines official involves installing whole c compiler toolchain copying source code building installing binary resulting enduser container still stuff soaking disk space download time potentially adding security hole definitely adding complete lack auditability realize nobody care care though weird care boring thing write anyway least two way one way endorsed dockerfiles skip intermediate layer building package uninstall compiler extra crap nt package install compiler install source code layer package one layer basic operating system one diffs operating system final product call blacklist approach explicitly excluding thing nt want image dockerfiles make approach relatively easy get hang obsessive approach whitelist include exact file want include trick first construct thing want final container end copy interesting thing new fresh empty container docker nt really make harder anything else docker nt really help either problem docker fundamentally run concept dive container execute command make snapshot nt even container start direction went redo tutorial built script actually construct complete multilayered container image without using docker docker credit pretty easy container format simple pretty welldefined using script easy copy file subdirectory poke around add right supporting file like libc package file loaded docker executed bonus without root user docker permission worrying cluttering local docker container cache like kind person fun exercise probably living past nobody care anymore take gigabyte distribute app megabyte gigabyte cheap side note incremental image downloads would like complain people distribute incremental change container basically idea build container layer time replacing topmost layer ie app binary bottommost layer ie o share say o layer across multiple container deploying many container single machine download o generally okay bit rebuild o change eg couple debian package updated fix security hole redownload whole container first appropriate use rsync could make go lot smoothly secondly already invented solution eight year ago open sourced promptly failed document advertise course nobody knew exists oops solution something call bupdate mix bup update littleknown branch bup incremental backup software written previously unlike bup bupdate client work dumb static file http server bupdate take group file case tarballs iso image vm disk image run bupsplit algorithm divide chunk writes file offset file ending fidx file index similar git idx packfile index bup midx multipack index publish along original file client downloads fidx file generates index local file already lying around eg old container case construct exact replica new file old chunk necessary newlydownloaded chunk request new chunk using series simple http byterange request image file sitting server pretty neat even nsis plugin nsis download reassembly installing big blob window implemented one client one point like updating big video game wad file way technique would help lot say aptget update process retrieving package file need upload packagesfidx alongside package file new client understood bupdate could use retrieve part package file changed since last time could reduce incremental package downloads several megabyte ten kilobyte old client would ignore fidx download whole package file bupdate pretty old year relies even older c library probably nt work modern compiler would nt hard rejuvenate somebody really ought start using updating container layer frequentlyupdated large list contact think might useful maybe find time bring bupdate back life gzip rsyncable note nt heard already really know gzip rsyncable widely known gzip file nt work well rsync even one byte change near beginning file change compression entire rest file redownload whole thing bupdate core really onesided rsync suffers problem gzip rsyncable different carefully change compression rule dictionary flushed periodically change byte early disrupt next kilobyte rather entire rest file compress file rsyncable bupdate work lot better alternatively using web server support onthefly compression serve uncompressed file let web server compress block requesting byteefficient gzip rsyncable since nt download entire block next resync point cost cpu time server nowadays cpu time pretty cheap gzip pretty fast might good tradeoff footnote say offended process used update container much offended people failing adopt idea fair neglected tell anyone mostly offended nobody else managed invent better idea bupdate even comparably good intervening year truly point worrying people stealing idea rather opposite edit eric anderson pointed casync something like bup bupdate reference bup one influence guess someone invent least comparably good idea think bupdate file format slightly cuter since sits alongside reuses original static file allows cheap backward compatibility plain downloads rsyncs biased edit jnrowe point program called zsync sound similar bupdate share goal disturbing original file set fact even clever publish zsync index one web site refers chunk another web site allowing encourage zsync use even upstream maintainer nt play along look inside gz file even nt use gzip rsyncable maybe use instead bupdate disclaimer nt tried yet
327,Lobsters,osdev,OS,Simulation and Formal Verification of x86 Machine-Code Programs that make System Calls,https://www.cs.utexas.edu/users/hunt/FMCAD/FMCAD14/proceedings/18_goel.pdf,simulation formal verification machinecode program make system call,,obj endobj obj filter flatedecode length stream k q h xy ok j pv e onn q k yu yl b iȼu z f xp lq j stɇ e z x b ym b b qe ez z қ bwp z wp h l u fϑ g cxrz ʌz si q f x wήu mfѻ lri g zv k
328,Lobsters,osdev,OS,KaiOS,https://en.wikipedia.org/wiki/KaiOS,kaios,mobile operating system linux kowloon hong kong multinational tcl corporation forked o gecko open source firefox o mozilla overtheair update app marketplace kaistore twitter facebook youtube kowloon hong kong google reliance jio india jio tl webassembly webgl progressive web apps webp javascript cs embedded system edit alcatel tracfone wireless reliance jio jiophone jiophone hmd global nokia flip tough energizer doro cat indonesia google alfamart mtn positivo multilaser tecno digit iphone edit nokia jailbreak gerdaos edit mozilla airfind facebook google twitter bullitt doro hmd global micromax nxp spreadtrum qualcomm jio sprint tmobile orange sa edit edit brics broke monopoly india hongmeng took access source code kaios repository official linkedin page kaios technology inc kaios faq original jiophone operating system android kaios firefox o original kaios feature phone platform built ash firefox o add facebook youtube twitter google apps techcrunch kaios everything know operating system available jiophone mobile studio original kaios emerging o developing telecom reliance jio lyf volta feature phone run kaios app store need know kaios run jio feature phone kaios million phone google apps facebook twitter google invests million o powering nokia feature phone kaios jio ready serve goodness unserved kaios well india pulling big number u jiophone kaios surpasses io become india second popular mobile operating system secondlargest mobile o india rhyme io nt io android authority mozilla help modernize feature phone powered firefox tech firefox o successor mozilla kaios announce partnership ghacks tech news http kaiosorg http wwwkaiostechcommeetthedevicesthatarepoweredbykaios alcatel go cingular flip newest clamshell phone alcatel myflip reliance jio lyf volta feature phone run kaios app store exclusive reliance jio lyf volta feature phone jio phone booking pre book jio mobile online jio jiophone r whatsapp youtube facebook new feature phone economic time return nokia banana phone kaios nokia back http doro next great simple phone cat rugged feature phone launched kaios google apps gizmochina maxcom mwca google wizphone jiophone competitor launched indonesia mtn launch smartphone whatsapp http http http wwwapplecomiphone spent week kaios phone learned gerdaos custom rom liberate heart kai mwc kai announces partnership mobile industry giant kaios mozilla help modernize feature phone powered firefox tech kaios run feature phone qualcomm spreadtrum chipsets ram new nokia firmware update brings kaios edit,mobile operating system kaios mobile operating system based linux developed kaios technology hong kong limited company based kowloon hong kong largest shareholder chinese multinational electronics conglomerate tcl corporation forked o boot gecko o open source communitydriven fork firefox o discontinued mozilla primary feature kaios bring support lte e volta gps wifi apps longer battery life nontouch device optimized user interface le memory energy consumption also feature overtheair update citation needed dedicated app marketplace kaistore enables user download application service preloaded application including twitter facebook youtube april apps kaistore operating system comparatively lightweight hardware resource usage able run device mb memory operating system first appeared developed kaios technology inc kowloon hong kongbased company headed ceo sebastien codeville office country june google invested u million operating system indiabased telecom operator reliance jio also invested million cash stake company market share study result announced may kaios beat apple io second place india android dominates albeit kaios growth largely attributed popularity competitivelypriced jio phone million kaios device shipped march mozilla kaios technology announced partnership update kaios modern version gecko browser engine closely aligned testing infrastructure change give kaios year worth performance security improvement new feature including tl webassembly webgl progressive web apps new video codecs like webp modern javascript cs feature kaiads endtoend programmatic advertising platform supporting openrtb protocol kaios also name unrelated linux project dating targeted embedded system kaipay allows end user purchase premium apps kaistore complete inapp purchase wallpaper store kaipay widely available provide greater coverage additional method payment device edit device come kaios included alcatel go flip known cingular flip alcatel myflip tracfone wireless reliance jio jiophone jiophone branded lyf jiophone hmd global nokia flip tough energizer energy hardcase doro cat maxcom wizphone launched indonesia partnership google alfamart mtn phone mtn smart positivo brazil multilaser zapp brazil tecno jazz digit iphone later open source edit release nokia active community around kaios phone arose released first version jailbreak gave user ability use old firefox o apps kaios device well flashing device communitycreated rom gerdaos partnership edit february kaios technology partnered mozilla airfind facebook google twitter bullitt doro hmd global micromax nxp spreadtrum qualcomm jio sprint tmobile orange sa march kaios technology partnered mozilla bring modern version gecko browser engine future kaios build release history edit version announced new feature march first kaios smart feature flip phone july major core upgrade gecko november service party apps july kaistore kaiaccount advance feature whatsapp december kaiads simbased cust july major service upgrade location service enhancement february minor system update notification enhancement may device financing program dual sim lte support august lf integration north america requirement december major platform upgrade gecko upgrade reference edit b brics broke monopoly india hongmeng took access source code kaios supportkaiostechcom repository b official linkedin page kaios technology inc linkedin retrieved june team behind kaios currently number people continues grow rapidly headquartered hong kong kai office around world including u china india france kaios hong kong based company kaios faq kaios archived original kaios originates firefox o opensource project continued independently mozilla since jiophone operating system android kaios firefox o archived original retrieved jiophone going run kaios forked version firefox mobile o lunden ingrid kaios feature phone platform built ash firefox o add facebook youtube twitter google apps techcrunch retrieved kaios around since kaios built fork firefox o hmdnokia using kaios everything know operating system available jiophone mobile studio mobilestudiocoin august archived original january retrieved december barton james kaios emerging o developing telecom developingtelecomscom reliance jio lyf volta feature phone run kaios app store indianexpresscom july b need know kaios run jio feature phone blogpokecom kaios million phone google apps facebook twitter mobilityarenacom february google invests million o powering nokia feature phone thevergecom parikh prasham kaios jio ready serve goodness unserved eoto tech retrieved kaios well india pulling big number u wwwandroidauthoritycom retrieved jiophone kaios surpasses io become india second popular mobile operating system bgrin may retrieved august secondlargest mobile o india rhyme io nt io android authority wwwandroidauthoritycom retrieved b shankland stephen mozilla help modernize feature phone powered firefox tech cnet retrieved b firefox o successor mozilla kaios announce partnership ghacks tech news wwwghacksnet retrieved http kaiosorg http wwwkaiostechcommeetthedevicesthatarepoweredbykaios alcatel go alcatelonetouchca june cingular flip newest clamshell phone phonearenacom alcatel myflip tracfonecom reliance jio lyf volta feature phone run kaios app store indianexpresscom july exclusive reliance jio lyf volta feature phone techppcom july jio phone booking pre book jio mobile online jio jiocom jiophone r whatsapp youtube facebook new feature phone economic time july return nokia banana phone kaios kaiostechcom june nokia back mybroadbandcoza http doro next great simple phone ukpcmagcom february cat rugged feature phone launched kaios google apps gizmochina gizmochina retrieved maxcom mwca google wizphone jiophone competitor launched indonesia mtn launch smartphone whatsapp mybroadbandcoza retrieved b http http http wwwapplecomiphone spent week kaios phone learned android authority april retrieved march gerdaos custom rom liberate heart kai gerdatech retrieved march mwc kai announces partnership mobile industry giant kaios kaiostechcom february mozilla help modernize feature phone powered firefox tech cnetcom march kaios run feature phone qualcomm spreadtrum chipsets ram fonearenacom nayan new nokia firmware update brings kaios nokiapoweruser retrieved nokia running kaios received firmware version kaios external link edit
329,Lobsters,osdev,OS,Design and Verification of Secure Systems (1981),http://www.csl.sri.com/users/rushby/abstracts/sosp81,design verification secure system,john rushby acm symposium operating system principle sosp pacific grove california december appears acm operating system review volume number pp abstract gzipped postscript plain postscript pdf crude ascii bibtex entry trouble reading paper return home page return home page,design verification secure system john rushby acm symposium operating system principle sosp pacific grove california december appears acm operating system review volume number pp abstract paper review difficulty arise verification kernelized secure system suggests new technique resolution proposed secure system conceived distributed system security achieved partly physical separation individual component partly mediation trusted function performed within component purpose security kernel simply allow distributed system actually run within single processor policy enforcement concern security kernel approach decouples verification component perform trusted function verification security kernel latter task may accomplished new verification technique called proof separability explicitly address security relevant aspect interrupt handling issue ignored present method gzipped postscript plain postscript pdf crude ascii palm pilot bibtex entry inproceedings sosp author john rushby title design verification secure system booktitle eighth acm symposium operating system principle sosp address asilomar ca month dec year page note acm em operating system review vol trouble reading paper return formal method program home page return computer science laboratory home page
330,Lobsters,osdev,OS,"A Distributed, Secure System (Extended Abstract) (1983)",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.66.4421&rep=rep1&type=pdf,distributed secure system extended abstract,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r pagemode usenone openaction r ficl enfocus r endobj obj goto r xyz endobj obj filter flatedecode length r stream ua e nm b endstream endobj obj endobj obj mediabox type page parent r resource font r xobject r procset r content r r r r r r r r cropbox rotate thumb r endobj obj r r r r r r r r r endobj obj type font subtype name basefont newcenturyschlbkbold firstchar lastchar width encoding winansiencoding fontdescriptor r endobj obj type fontdescriptor fontname newcenturyschlbkbold flag fontbbox missingwidth stemv stemh italicangle capheight xheight ascent descent leading maxwidth avgwidth endobj obj type font subtype name basefont courier encoding winansiencoding endobj obj type fontdescriptor fontname newcenturyschlbkroman flag fontbbox missingwidth stemv stemh italicangle capheight xheight ascent descent leading maxwidth avgwidth endobj obj type font subtype name basefont newcenturyschlbkroman firstchar lastchar width encoding winansiencoding fontdescriptor r endobj obj type font subtype name basefont helveticabold encoding winansiencoding endobj obj type font subtype name basefont timesroman encoding winansiencoding endobj obj endobj obj filter flatedecode length r stream u iw endstream endobj obj endobj obj filter flatedecode length r stream q b smџ f endstream endobj obj endobj obj type font subtype name basefont helvetica encoding winansiencoding endobj obj filter flatedecode length r stream zu l kp r w œ endstream endobj obj endobj obj filter flatedecode length r stream ư g x endstream endobj obj endobj obj type font subtype name basefont palatinobolditalic firstchar lastchar width encoding winansiencoding fontdescriptor r endobj obj type fontdescriptor fontname palatinobolditalic flag fontbbox missingwidth stemv stemh italicangle capheight xheight ascent descent leading maxwidth avgwidth endobj obj filter flatedecode length r stream r z endstream endobj obj endobj obj type font subtype name basefont courierbold encoding winansiencoding endobj obj type font subtype name basefont helveticablack firstchar lastchar width encoding winansiencoding fontdescriptor r endobj obj type fontdescriptor fontname helveticablack flag fontbbox missingwidth stemv stemh italicangle capheight xheight ascent descent leading maxwidth avgwidth endobj obj filter flatedecode length r stream z wh z ùpd b om kη endstream endobj obj endobj obj filter flatedecode length r stream p h r endstream endobj obj endobj obj filter flatedecode length r stream z ߣ jĵu ߴ endstream endobj obj endobj obj type xobject subtype image name filter ccittfaxdecode width height bitspercomponent decode colorspace devicegray length r decodeparms k column stream w l c l 旄 l um l rxms ct q ś ba ć b xxf b g mm b b r b ų ɛe h x dfp c x b zsp دm p om j tg c gr c l b y im dhg z r b mu ȓ c nc x ǣ b b w cclqlsr b al bњ qb yl r w sm uk g ozz c xg b ه ނ տ 㴗o g v x hk b dg n zm pe j dp j x tb k k b p c l sc p pi r ap sm c dx aa ɹ l д z x g b ˇ v n r x x q lk b c r h v g c ԇ x dw jט k gaa l h pc k hy g v c ʹ hr hc q q q q h h w n w恫zr c k x x n f p x jd k 馺 e r ga r h g xj h lra x db x g r ߤ k w z xe q k c h dw h va ou g r bq ra ixav ia q dw r rc cl c h b b b c n u v tд tz c rnt e ȯe h w z ut endstream endobj obj pdf text imageb endobj obj mediabox type page parent r resource font r xobject r procset r content r cropbox rotate thumb r endobj obj r r endobj obj endobj obj filter flatedecode length r stream b endstream endobj obj endobj obj filter flatedecode length r stream x w gt c p p k li ԍ j ˬz ӂ
331,Lobsters,osdev,OS,OSv - the operating system designed for the cloud,http://osv.io/,osv operating system designed cloud,,usually osv run unmodified application order provide even better performance possible access low level kernel api application access block device flushing map nic descriptor directly virtioapp signal hypervisor believe number cycle application requires always smaller kernel path
332,Lobsters,osdev,OS,Orthogonally Persistent Object Systems (1995),http://www.vldb.org/journal/VLDBJ4/P319.pdf,orthogonally persistent object system,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r endobj obj filter flatedecode length r stream c q b c e ee b vb endstream endobj obj endobj obj type page mediabox parent r resource font r r r r r r r r r r xobject r procset r content r r r r r r r r thumb r cropbox rotate endobj obj type font subtype truetype name basefont timesnewroman encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman bold encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman italic encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman bold encoding winansiencoding endobj obj type font subtype truetype name basefont arial bold encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman italic encoding winansiencoding endobj obj endobj obj filter flatedecode length r stream n ni f endstream endobj obj endobj obj filter flatedecode length r stream ia nxf q endstream endobj obj endobj obj filter flatedecode length r stream l endstream endobj obj endobj obj filter flatedecode length r stream ryl endstream endobj obj endobj obj filter flatedecode length r stream endstream endobj obj endobj obj filter flatedecode length r stream f endstream endobj obj endobj obj filter flatedecode length r stream p endstream endobj obj endobj obj filter flatedecode length r stream b ϫ endstream endobj obj endobj obj type xobject subtype image name filter ccittfaxdecode width height bitspercomponent colorspace devicegray length r decodeparms k column stream dq td z ҽ x e b ccmuqx ã b l h r n dm wm ۿ l b u w zul gf z c ȴrܤ b hx l p jt v u ab gd c ha l l r g w le f ndb nx az cm b p f h l fi e h r w j xm ln r lb fa w n c xl mu f xl bӌ f f c k k zvi vj ڐ v h ӊn l l j r hӛ l v n r r rq fn û l 괝 c ub l ӳ 맥zwr ߥ fm l xv wpx p l j mm c h uf za z q lr ᄜ n h z endstream endobj obj pdf text imageb endobj obj type page mediabox parent r resource font r r r xobject r procset r content r thumb r cropbox rotate endobj obj r r r r r r endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream ū q tי һa vғ x g endstream endobj obj endobj obj length r filter flatedecode stream mm ԩ f endstream endobj obj endobj obj length r filter flatedecode stream k g k g e w e ĕa јv ú endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream c endstream endobj obj endobj obj type xobject subtype image name filter ccittfaxdecode width height bitspercomponent colorspace devicegray length r decodeparms k column stream w kz j b bb f u dddb x gh v hb e ge l f ȃ g ݧ g h c 輇t l l 圣 í x l q tn c f x ag r 囤w ӫm l fc n ot ڜ e jn f r l tι asdf ĉ e ińl b b epl g g e c n qf l n l km za coi l h n ei ǚ l nk c f eai l ߦ zh ϳpb l c fi ӌ j u ȩ eť ot z h dϊc x u ƛ j p dg z w qh h h z ނ h z ra xdx b l z w h n ab h v r j ӱ g x r ڥs c rᦃl j n ar l ȣdbd ݦv j mpm v z rea j l gjp ڰa쾼wizq b z ӑ بզ ȝtƒi n r e q nr n c b xz u qxl r endstream endobj obj pdf text imageb endobj obj type page mediabox parent r resource font r r r xobject r procset r content r thumb r cropbox rotate endobj obj r r r r r r r r endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream xi tt xf p endstream endobj obj endobj obj length r filter flatedecode stream ɟ endstream endobj obj endobj obj length r filter flatedecode stream ޱ ƙ h f endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream c endstream endobj obj endobj obj type xobject subtype image name filter ccittfaxdecode width height bitspercomponent colorspace devicegray length r decodeparms k column stream iw xt mx e hyh b l v l n v l r z il b k htw pp l e l ok l x hx hj b j x ԫ mbi tt ݧ h cċx h l u xq dard wh c ݢ n b q b ef mn l el p p c z l k n mo yni v mz q spen ˈ al ϙ lz f v q h dbl l r q e l t f ȥ sl l c z b ʌ n u x e nziq dr cm c v n l pl q az endstream endobj obj pdf text imageb endobj obj type page mediabox parent r resource font r r r r r r r r xobject r procset r content r thumb r cropbox rotate endobj obj r r r r r r r endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream ih n ǯ endstream endobj obj endobj obj length r filter flatedecode stream jhk ca q r endstream endobj obj endobj obj length r filter flatedecode stream v j l k f l gt l g h endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream c endstream endobj obj endobj obj type xobject subtype image name filter ccittfaxdecode width height bitspercomponent colorspace devicegray length r decodeparms k column stream p f l ɗ cd qa w ti xa wu g fz ā r h oտh p l u c fh ª l r ʁb na h h n b q g tȏ j p l ȧ xa dm b n h qq h c pɜ ڑ ab f njh n b haa nb zy h au b f ݪ nbԗ ø l n w x g l de l ח զ x pan l ilߖ 꿶 q l ddd dp x v p n q h b u n al p cl w b c b endstream endobj obj pdf text imageb endobj obj type page mediabox parent r resource font r r r r r r r r xobject r procset r content r thumb r cropbox rotate endobj obj r r r r r r r r r r r r endobj obj endobj obj length r filter flatedecode stream ӗu endstream endobj obj endobj obj length r filter flatedecode stream g endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream c f endstream endobj obj endobj obj length r filter flatedecode stream j v endstream endobj obj endobj obj length r filter flatedecode stream endstream endobj obj endobj obj length r filter flatedecode stream x endstream endobj obj endobj obj length r filter flatedecode stream b v h mˠs u졸 q yh
333,Lobsters,osdev,OS,GenodeOS Sculpt with Visual Composition,https://genode.org/documentation/release-notes/18.08#Sculpt_with_Visual_Composition,genodeos sculpt visual composition,release note genode o framework device driver new intel microcode update mechanism new vfs plugin using lwip tcpip stack python cached filesystembased rom service sculpt visual composition sculpt visual composition road map http depotgenodeorggenodelabs live runtime view revised deployment configuration sculpt hardwareprobing instrument device driver linux devicedriver environment based kernel version updated enhanced intel framebuffer driver updated reworked intel wireless driver firmware image dde linux decomposed usb stack release note usb host driver usb hid driver usb network driver usb device timing constraint updated ipxebased nic driver experimental runtime zirconbased driver improved device compatibility base framework oslevel infrastructure streamlined elfbinary loading nicrouter support multiple uplink comprehensive concept configuration uplink icmp echo server new verbosity class packet drop new vfs plugin using lwip tcpip stack version release dynamic capabilityquota balancing version simplified dns handling libcusing component cached filesystembased rom service vfs plugin importing initial content enhanced ada language support enhanced terminal compatibility library application python genodeworld new component querying information file system updated ported software userlevel acpica virtualbox platform new intel microcode update mechanism morbo multiprocessor support custom kernel nova microhypervisor cyberus technology genode lab fiascooc microkernel updated june subversion repository build system tool improved run tool unified precondition check optional preservation bootdirectory content configurable amt poweron timeout,release note genode o framework genode enter third episode story sculpt endeavor shape genode generalpurpose operating system first two episode addressed early adopter curious technology enthusiast current ambition gradually widen audience beyond group release reflects addressing four concern crucial generalpurpose computing first foremost system must support currentgeneration hardware section device driver describes substantial update genode arsenal device driver line work range updated driver architectural change like split usb subsystem multiple component experimental undertaking like running zircon driver google fuchsia project genode component second steady stream new discovered cpulevel vulnerability call timely application microcode update section new intel microcode update mechanism present kernelagnostic mechanism applying cpumicrocode update genodebased system third order actually useful system need scalable towards vast variety workload genode vfs infrastructure pivotal element almost like swiss army knife example section new vfs plugin using lwip tcpip stack present vfs enables lwip linux tcpip stack used interchangeably network application merely tweaking component configuration vfs ultimately enables u host sophisticated software like new port python section python also account workload scalability release feature new caching mechanism described section cached filesystembased rom service fourth overcome perception toy geek sculpt must become easy use aiming higher mere convenience though ought give user full transparency system operation intuitive level abstraction user empowered see consciously control interaction component one another hardware example unless user explicitly allows application reach network application remains completely disconnected founded capabilitybased security genode already provides solution technological level make power available user make possible need walk beaten track commodity user interface section sculpt visual composition give glimpse upcoming feature future besides development driven sculpt requirement current release feature extended ada language runtime updated kernel new multiprocessor support custom microkernel ability route network traffic arbitrary number physical network interface sculpt visual composition sculpt take creating genodebased generalpurpose operating system year sculpt leitmotif current release feature ingredient third evolution step advertised road map sculpt vc visual composition pursue gradual transition textbased user interface graphical user interface administrative task preserving textbased interface full flexibility package current version sculpt readily available http depotgenodeorggenodelabs official disk image sculpt vc released september live runtime view central element sculpt envisioned graphical user interface interactive representation runtime state giving user intuitive picture relationship component respective trusted computing base thereby sense control unknown today commodity operating system runtime view generated fly updated whenever system undergoes structural change organized component close semantic relationship grouped together default significant relationship two component highlighted line connecting runtime view already support basic form interaction clicking component relationship component runtime become visible additional detail resource usage presented forthcoming version graph become interactive within sculpt leitzentrale runtime view displayed default however inspecting file system runtime view replaced inspect window view toggled clicking title storage dialog inspect window dialog runtime view revised deployment configuration current incarnation deployment component directly controlled editing configdeploy file sculpt config file system move nontextual user interface responsibility handed sculptmanager component make transition possible moved manuallydefined part deploy configuration socalled launcher configuration reside configlauncher deploy configuration merely control instantiation component referring launcher name launcher corresponds file name said deploy configuration backwards compatible whenever start node contains pkg attribute still work using launcher policy new version default deploy configuration contains list node referring launcher according name attribute possible explicitly refer differently named launcher specifying launcher attribute way one launcher instantiated multiple time config node within launcher present override one pkg turn config node within node deploy config override node launcher start node may contain route node routing rule defined start node precedence one defined launcher way routing launcher parameterized deploy configuration file configlauncher monitored sculpt manager therefore edited fly especially useful editing config node configlauncherusbdevicesrom pas usb device virtual machine launcher integrated boot image defined gemsrunsculptlauncher file contains node mandatory pkg attribute attribute value contains one character assumed complete pkg path form user pkg name version otherwise assumed pkg name replaced current version current depot user pkg systemintegration time sculpt hardwareprobing instrument new reportdump subsystem periodically copy content sculpt report file system default file system thereby used turn sculpt diagnostic instrument probing driver support new hardware first usb stick fresh sculpt image booted fully supported machine user customizes usb stick within running system expanding usb stick genode partition setting default storage location deploying reportdump subsystem last step trigger installation reportdump package onto usb stick finally user copy deploy configuration inmemory config file system configdeploy usb stick usb n booting prepared usb stick deployment configuration becomes active automatically point sculpt system copy snapshot report file system genode partition usb stick every second snapshot captured usb stick later analyzed another machine snapshot contain log message reportlog also report generated various component driver subsystem deployed component eg acpica present deploy configuration battery state captured well reportdump subsystem nicely showcase addition simple package allows reshaping sculpt handy specialpurpose appliance device driver linux devicedriver environment based kernel version updated dde linux version support newer intel wireless card well intel hd graphic device since change linux internal apis adapt linux emulation environment managed way still make possible keep using old linux version certain driver like fec network driver tcpip stack updated future furthermore driver received additional feature updating code base updated enhanced intel framebuffer driver updated intel graphic driver gained support changing brightness notebook display driver configuration feature new attribute named brightness expects percentage value config connector name width height hz brightness enabled true config default brightness set percent connector status report also includes current brightness supported display status update connector connector name connected brightness mode width height hz connector connector name connected false connector updated reworked intel wireless driver update iwlwifi driver code base brings new support well device wpa supplicant code also updated recent git version contains critical fix issue like krack attack since updated driver requires newer firmware image easily accessible old one provide appropriate image firmware image dde linux took update opportunity rework wifidrv configuration interface old driver used wpasupplicantconf posix configfile interface configuration mechanism unfortunately implementation detail became apparent user driver filesystem storing file needed configured reason make use ctrl interface supplicant implemented genodespecific back end context refined structure configuration driver driver still report current state report simply called state instead wlanstate moment ssids provided verbatim within report sanitized ssids contain unusual character like nul byte lead invalid report also applies accesspoints report supersedes former wlanaccesspoints report address remaining issue future update main configuration moved common config node new rom called wificonfig cleanly separate wireless configuration component internal configuration libc vfs setting would changed component lifetime new wificonfig configuration look follows wificonfig connectedscaninterval scaninterval accesspoint ssid foobar protection passphrase allyourbase wificonfig connectedscaninterval specifies timeout driver request new scan existing access point connected access point setting influence frequency driver make roaming decision within network ssid scaninterval attribute specifies timeout new scan request executed still trying find suitable access point addition attribute attribute evaluated startup enable disable support within iwlwifi module toggled runtime furthermore various verbosity attribute like verbose verbosestate either set yes driver print diagnostic message log verbosity toggled runtime also possible temporarily suspend radio activity wireless device setting rfkill attribute yes disable connectivity toggled runtime accesspoint node replaces previously used selectednetwork node ssid preferred network set via ssid attribute like ssid driver report value copied verbatim moment way express escape non alphanumeric character type protection network set via protection attribute valid value wpa alphanumeric password set via passphrase attribute setting psk directly supported configuration contain one accesspoint entry case driver choose network offer best quality list prevent driver autoconnecting network autoconnect attribute set false bssid attribute may used addition ssid attribute select specific access point within one network backwards compatibility old configuration format user advised adapt system scenario unfortunate regression card work properly issue investigated decomposed usb stack usb stack long history genode o framework back may first ddelinuxbased driver introduced usb input driver used compilation unit related usb host controller hid input subsystem linux genode component offered input session interface time driver ran machine since usb driver underwent manifold alteration extended support different architecture usb hostcontrollers various platform support usb endpoint device extended additional hid storage network device nonetheless usb driver remained monolithic component comprising different session interface like block nic input nevertheless always regarded monolithic approach intermediate step towards componentized usb stack seen release note first qualitative change usb landscape genode introduction usb session interface support ddelinuxbased monolithic driver genode release enabled development independent driver component usbconnected device simultaneously first selfcontained driver released prolific usb uart adapter independent writtenfromscratch driver followed supporting hid usb block device icing cake support usb session within virtualbox introduced may point possible drive dedicated usb device within guest operating system nevertheless usb hostcontroller driver still contained overall complexity linux input storage network usb subsystem complexity unfortunate inflates trusted computing base client updating different dde linux based driver recent version finally took opportunity split monolithic usb driver stack several part separating usb controller driver actual usb device driver significantly reduce complexity usb resource multiplexing usb host driver find new usb hostcontrolleronly driver different platform arndale panda rpi wandboard reposddelinuxsrcdriversusbhost transitional period new driver stack exist besides old one run script still use old variant look script usbblockrun usbhidrun usbnetrun get notion combine new building block new driver configured dynamically report usb device connected host controller hub adding report device yes configuration node like previous driver one use productid vendorid bus dev number attribute delivered via report define policy rule configuration driver thereby different client driver access dedicated device ease migration new usb host driver possible state class number within policy rule usb clientside driver able open session device class must use correct label address unique device opening usb session possible driver configuration new usb host driver look follows provides service name usb provides config report device yes policy labelprefix usbnetdrv vendorid productid policy labelprefix usbblockdrv vendorid productid policy labelprefix usbhiddrv class config new host driver need configured respect kind host controller used eg ohci ehci xhci providing appropriate devicehardware resource driver automatically detects kind controller driven usb hid driver new selfcontained usb hid driver platform independent solely depends usbsession interface comprises driver several kind hid device one either enable support kind hid device one driver instance compatibility reason use one dedicated driver instance per hid device support hid device provided usb host driver hid driver subscribe report host driver configuring hid driver like following snippet track change rom called report open usb session hid device listed report config usereport yes option tracking state keyboard led like capslock configuration value support multitouch device still supported equal former monolithic driver usb network driver selfcontained usb network driver called usbnetdrv resides reposddelinuxsrcdrivers support different chipsets contrast hid driver support exactly one device per driver instance need support one usb connected network card additional driver must instantiated like old monolithic driver advised state mac platform possible read one eeprom otherwise hardcoded one used usb device timing constraint device like usb headset webcam sound card require assertion guaranteed bandwidth usb host controller order function correctly usb achieves socalled isochronous endpoint guarantee desired bandwidth assert correctness data delivered genode usbsession interface lacked support kind device extended interface added support isochronous endpoint host controller driver additionally adapted qemuxhci device model also handle isochronous request seamlessly extension place becomes possible directly access example headset guest operating system within virtualbox eg linux window consider feature preliminary current implementation limit support isochronous endpoint one one endpoint per usb device updated ipxebased nic driver since genode extended support intel ethernet nics another variant also introduced support including upstream fix boottime mac address configuration experimental runtime zirconbased driver new ddezircon repository provides devicedriver environment zircon microkernel kernel google fuchsia o consists zirconlibso shared library implement adaption layer zircon genode driver serf proofofconcept thanks johannes kliemann contributing line work improved device compatibility invested time implementation due compatibility issue keyboard touchpads trackpoints recent notebook result input device current lenovo x notebook well dell latitude work solid base framework oslevel infrastructure streamlined elfbinary loading scenario like sculpt runtime subsystem parent component may create subsystem elf binary provided one child however since parent access elf binary order load parent interact child service thereby becomes dependent liveliness particular child unfortunate parent need trust child otherwise dissolve unwelcome circular trust relationship simplified genode elf loading procedure parent never deal elf binary directly instead parent unconditionally load dynamic linker obtained trusted parent dynamic linker running context new component obtains elf binary regular rom session provided sibling component sibling misbehaves reason parent remains unaffected achieve level independence drop handling staticallylinked executables firstclass citizen order distinguish static dynamic binary parent needed look binary statically linked binary hybrid linuxgenode lxhybrid binary still started relabeling romsession route ldlibso binary name pretend binary dynamic linker achieved via init label rewriting mechanism route service name rom unscopedlabel ldlibso parent label testplatform service route however quite cryptic would need applied lxhybrid component added shortcut init configuration one simply add ld attribute start node corresponding component start name testplatform ld nicrouter support multiple uplink comprehensive concept configuration uplink main purpose nic router mediate arbitrary number nic session according user policy osi layer nic session established integrated mediation algorithm fact whether nic router client server session becomes reduced subtlety transparent user though establishing session exist difference must reflected nic router configuration interface nic session server router simply accepts incoming session request given transfer sufficient resource refer session downlinks nic session client hand router supposed request desired session called uplink therefore also determine session argument way original version nic router used simplified model based assumption either none one uplink existence one possible uplink bound presence special domain named uplink configuration thereby obviating need uplinkspecific mean configuration model broken make room potent elegant solution introduced new uplink node uplink equivalent policy node downlinks like policy node uplink node assigns corresponding nic session specific domain unlike policy node uplink node represents exactly one uplink nic session client whose lifetime session argument defines short configuration example demonstrating usage new node config policy labelprefix virtualbox domain default policy labelprefix arora domain wifidomain uplink domain default uplink label domain wiredbridge uplink label domain wiredbridge uplink label wifi domain wifidomain domain name wiredbridge domain domain name default domain config observed multiple uplink node supported label attribute represents label corresponding nic session client attribute omitted result empty string label keep mind uplink label must unique label used route different uplink session different nic server assuming nic router instance child init component configuration accompanied init routing configuration follows route service name nic label wifi child name wifidrv service service name nic label child name service service name nic label child name service service name nic parent service route domain attribute uplink node defines domain corresponding uplink try assign see example problem assigning multiple uplink domain even uplink together downlinks independent whether uplink downlinks nic session share domain communicate connected repeating hub without restriction applied router similar downlinks uplink required stay connected certain domain lifetime safely moved one domain another without closing corresponding nic session achieved reconfiguring respective domain attribute uplink even exist without domain like wifi uplink example case packet uplink ignored nic router session still remains open finally uplink nic session client terminated removing corresponding uplink node nic router configuration icmp echo server nic router act icmp echo server functionality configured shown following two configuration snippet config domain name one domain domain name two icmpechoserver domain config config icmpechoserver domain name three domain domain name four icmpechoserver yes domain config default icmp echo server enabled example enabled nic session assigned domain one four implies router answer icmp echo request session target ip address corresponding domain domain two three icmp echo server disabled meaning drop mentioned request nic session new verbosity class packet drop nic router deployed growing number reallive scenario eg sculpt o ability list dropped packet proved helpful localizing cause complicated networking problem type log message came along output router verbose flag thus moved dedicated verbosity class controlled new verbosepacketdrop flag illustrated following two configuration snippet config domain name one domain domain name two verbosepacketdrop yes domain config config verbosepacketdrop yes domain name three domain domain name four verbosepacketdrop domain config feature disabled default domain one four wo nt log dropped packet whereas domain two three dropped packet message accompanied rationale led decision new vfs plugin using lwip tcpip stack architecture philosophy genode mandate network protocol stack moved away kernel whenever practical eliminating tcpip stack tcb nonnetworked component obvious benefit pose challenge isolating sharing ip stack otherwise version introduced bsdsockets api layer posix c runtime us local virtualfilesystem layer access abstract tcpip stack via control file stack may instantiated locally shared via filesystem service first stack plugin vfs layer port linux ip stack referred lxip ported release lwip lightweight alternative lxip feature lowlevel asynchronous interface well optional implementation bsdsockets api release updated lwip latest version reconfigured asynchronous mode use lowlevel api new lwip vfs plugin plugin retains modest resource usage lwip library performance competitive lxip previous lwip port renamed lwiplegacy scheduled removal developer integrator encouraged transition old libclwip library new vfs plugin simply removing legacy library component updating configuration load configure plugin start time dynamic capabilityquota balancing since version init component support dynamic adjustment ram quota value mechanism remained unavailable capability quota became limitation use case like sculpt ram file system upper bound needed capability hard define reason init gained ability adjust capability quota child according dynamic configuration change simplified dns handling libcusing component overhauled way libc acquires dns server information instead simply accessing commonly used etcresolvconf file inspects file given nameserverfile attribute retrieve dns name server address default socketnameserver common location using lxip lwip vfs plugin constraint libc read first line expects verbatim nameserver address cached filesystembased rom service fsrom server long part foundation dynamic genode system serving configuration loading component binary library server dynamically update rom dataspaces requested client must maintain independent dataspaces client small price dynamic configuration burden serving static binary image new cachedfsrom server alternative rom service deduplicates dataspaces across client session well load deliver session outoforder implementing cachedfsrom component required amendment rm session interface support readonly attachment managed dataspaces allows server allocate managed memory region session map dataspace file content region without write permission finally hand dataspace capability region client prerequisite safely delegating shared memory across client note granting access component would course allow client discover file loaded component measuring roundtrip time session request discovery mitigated sculpt o restricting component rom whitelist condition component may determine component similar whitelist loaded previously rom loaded dynamic linker measurement taken vfs plugin importing initial content previous release added long anticipated feature plugin vfs layer copyonwrite plugin cow plugin transparently forward write operation readonly file writable file different location initial disk image virtual machine implementation appeared provide semantics without sophisticated knowledge portion filesystem duplicated writing practical use plugin suffered number issue first plugin able reliably detect recursion second chaining asynchronous operation together proved complicated planned look feature using rather feature anticipated focused initial content feature ramfs server provides nonpersistent filesystem populated content servicing client foster goal providing toolkit orthogonal component gradually merging ramfs server first filesystem server newer powerful vfs server initial population happened last feature parity created special import plugin vfs library instantiates temporary internal filesystem copied root main vfs instance copy recursive nondestructive default import process need overwrite existing file overwrite yes may added plugin configuration node plugin cover use case cow plugin turned quite intuitive therefore release cow plugin replaced import plugin plugin quite easy use example importing shell configuration noux instance start name shell binary name noux config start name binbash env name home value home start fstab tar name coreutilstar f import overwrite true dir name home inline name bashprofile w inline dir import fstab config start compare use plugin vfs server start name configfs binary name vfs config vfs ram import dir name managed rom name font label fontsconfig rom name fbdrv label fbdrvconfig rom name wifi label wificonfig inline name depotquery query inline dir rom name inputfilter label inputfilterconfig rom name fbdrv label fbdrvconfig rom name nitpicker label nitpickerconfig import vfs policy label configfsrom root policy label rw root writeable yes config start traditional ramfs content configuration start name configfs binary name ramfs config content dir name managed rom name fontsconfig font rom name fbdrvconfig fbdrv rom name wlanconfig wlan inline name depotquery query inline dir rom name inputfilterconfig inputfilter rom name fbdrvconfig fbdrv rom name nitpickerconfig nitpicker content policy label configfsrom root policy label rw root writeable yes config start enhanced ada language support genode runtime ada programming language extended exception support c interfacing ada exception caught c provide type error location information raised improvement runtime support arithmetic minor fix gnatmake include path thanks johannes kliemann welcome improvement enhanced terminal compatibility release cycle simple ssh client added world repository quickly noticed graphical terminal unprepared variety terminal escape sequence found wild escape sequence parser terminal server able handle ignore litany sequence might considered part ad hoc standard may never able say handle terminal server compatible robust tui application library application python thanks work johannes schlatow python become available genodeworld repository supersedes genode original python port scheduled removal python port accompanied script quick test drive also feature depotarchive recipe principle enable deployment python within sculpt o new component querying information file system situation security critical application need obtain information stored file system must depend liveliness filesystem implementation prominent example sculpt manager sculpt o instead accessing file system directly us helper component performs actual filesystem access generates report containing aggregated information file system crash become unavailable reason removal usb stick helper component may get stuck securitycritical application remains unaffected new fsquery component resides reposgemssrcappfsquery accompanied fsqueryrun script file system configured componentlocal vfs component accepts number query node within config node query node must contain path attribute pointing directory watch component generates report labeled listing existing directory queried report contains dir node list file file node featuring corresponding name attribute value query equipped content yes attribute set content queried file supplemented body file node reported content limited kib per file content valid xml file node contains attribute xml yes indicating xml information inserted otherwise content sanitized updated ported software userlevel acpica updated port acpi component architecture acpica version recent release version motivated recent notebook apparently supported well old version according acpica documentation update mainly mark step acpi specification version hoped problem modern laptop got fixed virtualbox updated virtualbox port genode latest available version platform new intel microcode update mechanism applying cpu microcode patch common task uefibios firmware shipped hardware vendor pc andor motherboards various reason however machine may receive firmware update often quickly based recent high rate disclosure spectrerelated hardware bug cpu desire use microcode update rapidly released address concern added principle support applying intel microcode patch part genode framework first step add support download intel microcode patch via genode port mechanism toolportsprepareport microcodeintel next step genode component showcased reposportsrunmicrocoderun compare current microcode patch level genodenova downloaded intel microcode relevant information cpu microcode patch level provided platforminfo rom genodenova microcode update necessary intel microcode applied next boot decided implement functionality separate chained bootloader called microcode order inflate supported kernel additional management code applying microcode patch cpu microcode bootloader expects module called microcode contains specific intel microcode microcodeintel port target cpu relevant excerpt genode configuration look like bootbender bootmicrocode bootmicrocode microcode boothypervisor hypervisor bootimageelfgz imageelf microcode update functionality integrated toolrunbootdirnova support file enabled providing applymicrocode tcl procedure showcased reposportsrunmicrocoderun developed microcode chained bootloader part morbo project check intel cpu valid microcode module match currently running cpu afterwards bootloader look cpu lapic information parsing relevant acpi table information cpu booted apply microcode update processor cpu hyperthreading enabled effectual start single hyperthread per cpu apply update finally previously started cpu halted microcode bootloader hand control next module typically kernel multiprocessor support custom kernel announced year roadmap extended hw kernel multiprocessor support bootstrap part kernel par acpi table obtain required cpu information finally start number running cpu reported bootstrap hw kernel foster case maximum supported number cpu identical number running cpu contrast supported arm board number nova microhypervisor nova kernel branch use switched revision intermediate result cyberus technology genode lab harmonize independently developed nova kernel branch hope mutually benefit evolution nova long run common nova trunk short individual branch featurewise branch contains following change export kernel trace message via memory used genode debugging purpose feature used sculpt o already may tested repososrunlogcorerun crosscore ipc via nova portal restricted avoid general protection fault amd machine svm disabled uefi firmware robust acpi table parsing brokendefect acpi table using eager fpu switching intel cpu mitigate spectre fpu cve report cpu microcode patch level information via hypervisor information page fiascooc microkernel updated past repeatedly encountered problem kernel object destruction using genode top fiascooc microkernel effect nonresponsive kernel halt machine thanks recent development community problem seem solved jakub jermar gave u hint update recent kernel version solved observed issue genode fork fiascooc version based official github source june part used genode namely bootstrap component still based official subversion repository referring revision build system tool improved run tool genode run tool automates workflow building configuring integrating executing system scenario unified precondition check refined run tool removing checkinstalled requiresinstallationof function used determine certain shell command present host system superseded installedcommand function new function also check shell command present system searching path variable additionally sbin directory might part path linux distribution shell command located warning message given run script aborted optional preservation bootdirectory content executing run script genode yield creation image file eg imageelf runscript img image file created temporary directory builddir varrun runscript genode genode component required run script stored image creation becomes difficult determine set component present certain image therefore added new run option runopt environment variable called leaf temporary genode directory intact runopt preservegenodedir way genode component image file inspected ease note option inflates size resulting boot image content contained twice imageelf file genode directory configurable amt poweron timeout boot time may vary vastly pc particularly troublesome amt serialoverlan debug option different test machine intel quite picky time window amt sol connects may fall flat added run option optionally change default amt boot timeout second like follows runopt poweronamttimeout pc increase option second may increase attached usb mass storage usb boot enabled
335,Lobsters,osdev,OS,Haiku Beta: The release heard around the world,https://medium.com/@andrewgreimann_62789/haiku-beta-the-release-heard-around-the-world-d776cae5f3e7,haiku beta release heard around world,haiku beta release heard around world one big step little o one leap free software haiku beta beta part quick look beta change new highlight invisible change first release note new highlight package mean haiku big depot bebits haikuware redirect awesome mixed reception distro haiku new enter age tool haikudepot updater state packagefs new highlight visible change alpha tidbit point difference prefs mainly yes said alpha shot group shot grouped shot grouped shot comparing beware may get little long mouse network notification screen screensaver virtualmemory screensaver shortcut time clock haikudepot gone congrats wait quitting highlight application new stuff part beta heard around world awesome first start welcome installation first reboot setting desktop background showimage tweaking deskbar tweaking color appearance appearance demo clock clock clock demo chart chart chart demo fontdemo fontdemo demo demo cortex glteapot overlayimage demo mandlebrot mandlebrot mandlebrot set demo builtin game sudoku pair demo playground playground showimage wonderbrush desktop applet replicants workspace powerstatus launchbox processcontroller networkstatus applet workspace clock workspace workspace applet powerstatus powerstatus applet launchbox launchbox look like workspace clock launchbox application mediaplayer deskcalc textedit mediaplayer sound card travel mediaplayer deskcalc replicant deskcalc stylededit editor could stylededit getting info hello addons still still welcome disk tracker preference system folder two folder,haiku beta release heard around worldone big step little o one leap free softwarewell happy holiday everyone wonderful season beta haiku first year ever haiku beta finally several long year waiting month overdue review also apologize reader taken long get said look forward taking look haiku personal take haiku beta release beta yeah woot woot woooohoo part quick look beta actually get haiku fun let look change happened since alpha want read part hey totally cool scroll review time look everything new beta alpha year improvement beta picked three highlight like take quick look actually get fun new highlight invisible change first one thing stated enough thanks haiku team work done system user see certainly feel one thing beta added efi official release first timein addition adding efi much needed era improvement debugger serial tool deep systemlevel change like updated driver new thread scheduler several security feature covered haiku release note also worthy pointing definitely notable addition systemscreenshot something visible old debugger alpha next updated debugger taken prebeta screenshot beyond number tweak bug fix patch added new hardware support even nightly release hardware work improvement every area really shine beta sure thank haiku devs get opportunitythe work impressive especially near size popular platform like gnulinux bsds may taken long time get believe wish stopgap like alpha would come wait worth itanyways next highlight new highlight packageswhat mean haiku bigthis sorta part last section invisible highlight also definitely visible highlight well feature cool really cool one thing beta haiku make history release introducing package joining several free operating system application center called depot fun review shown softwarevalet beos dano relic different timeconvenient cool front end registration management may old day find new software like port arora browser qemu vlc unofficial firefox beos user usually would frequent website across web providing popular softwaretwo notable behaiku software site included bebits haikuware today article written bebitscom haikuwarecom redirect remix o awesome mixed reception going worth noting history reception new package wielding haiku always wonderful become today packaging feature haiku began roll nightly release big change happened system order make packaging work intended certain area system became readonly back led debate user community become frustrated first change sparked ultimate closure bebits haikuware shortlived distro haiku eventually went nowhere said yes upgrading alpha beta notice change system folder layout course certain part readonly instance go edit systemsettingscdrecord still get shift confirmation dialog earlier release also played prebeta overall point packaging eliminates get application find resolve dependency old way replaces better wayin new enter age today good news beta release haiku officially moved package long time nightly mode providing software repos accepted way distributing haiku software packaging huge step forward haiku provides new set useful feature hopefully helpful developer end usersto see packaging offer area worth highlighting beos haiku please read accompanying article review make beos haiku uniqueto quickly recap leave review read packaging give u unified set package work like module activating system startup complete suite command line tool haikudepot also get updater package andor system state packagefs itselfnew highlight visible changesthere ton change alpha beta mentioned let look thing picked cover everything like improvement web browser mail iconomatic printing medium much alpha tidbit point difference prefs mainly deskbar preferenceswe play tracker deskbar prefs bit actual see alpha version began visibly age deskbar preference pane crowded disk mounting separate small improvement made tracker preference get part old version alpha also see change like ugly button old tracker single window navigator compare old appearance alpha newer tracker color picker alpha appearance preferenceshere see old color switcher alpha updated along nightly path salvo alpha preferencesbelow save time grouped several prefs one shot three time sake time yes largely point point beta look much cleaner new version point bitthat said alpha shot group shot mouse notification screen network preference alpha grouped shot showing old time virtual memory preference grouped shot showing old screensaver shortcutscomparing remember new preflets largely preference like network nicely revamped point point beta attention polish detail hope show beware may get little long hang last part get beta group let get first shot starting trivial change first keymap switcher aside word hotkey replaced arrow system us new arrow design spacing box slightly improved keymap also pretty much key cap layout look cleaner beta included herethe notable change appearance maclike scroll bar feature look feel pane visual arrow style section showing happen definite improvement dropdown also another change save part group also get nice visual cleanup appleesque fashion three slider lose slow fast label making layout easier eye spacing first half preflet second half refreshing well saving best last mouse look much better resembles standard desktop mouse curve shinenetwork completely redesigned better status toggle much easier old way service join network pane human friendly configuration nice status gone drab dropdown mac o design late different network device collapsible heading clean bold font indicator light status wellcrafted icon make much easier see wifi ethernet looking kudos haikunext list notification gently revisited ugly button caption replaced checkbox display tab nicely folded position dropdown two slider also replace ugly hide second text box notification renamed application much nicer uilast least screen look identical look harder see workspace centered ever slightly neater set button make presentable worth noting behind scene back visible stuff internal improvement resolution color made since alpha wellthis vein refinement continues screensaver virtualmemory identical change screensaver get le crammed make look nicer virual memory preflet automatic swap management clearer old label serving section heading sort personally intention devs grant auto swap section beta maybe also notice ugly rounded label gone shortcut maybe typing path might seem harder new user first think new way better browsing app open box path wary yes paste last list prefs good ole time yay time calendar much nicer wow use alpha bit beta difference strikingly relieving extra room given clock make nice wish new replicant find larger clock face nice hey good old clock replicant wordclock haikudepot make loss alpha indexed file noticed one little thing time run beta far definitely seems pesky box alpha thankfully gone going cover next part realize easier fun without sucking alpha usso last thing look also get see installer copied item individually making much slower today seen clearly really stop compare item beta copy load file alphaoverall visually comparing alpha several tiny tweak improvement throughout default application preflet set instantly notice alpha got lot show today going look handful change change big small kudos haiku team congrats first beta release let fun get started wait quitting highlight application new stuff sorry would make article way long much cover make book try look cool stuff review seriously let leave highlight alone get part beta heard around world made far past opening list highlight awesome get actually get fun first startokay first thing greet good old haiku boot splash beautifully simple one favorite boot splash one imho beat term coolness one webpalm o mac ossimilar classic mac o version little puzzle piece appeared appear nice row much accurately like purplish orb original beos startup block light little haiku start welcome originally wanted compare original alpha welcome box firstbootprompt one show much nicer extra width make one feel comparison anyways let get installing get installer note worth mentioning well notice nicely cleaned alpha making amount new user need read shorter nice let move click continueinstallationokay haiku installer tool write new boot menu sector set open drivesetup need today preformatted volume save time originally going cover review commemorating special release going long one let select go like add upfront text clipped normally biggie pic lost word might confuse newbie click personally imho since next line text tell u click begin maybe delete click begin bit anyways let install installation really fast wanted catch installer getting started see even see blue already made sweet doubter yes haiku indeed use managed capture beta woohoo officialas release unlike nimble nightly branch get guide cooland oh yes get sweet noto font aging dejavu sans thanks new font haiku google lastly finishing capture one favorite part good old trash done know let restart first reboothere restarting startup block see system boot two bite halfway pause done certain system take longer wake hibernation like dory say finding nemo built speed lovely blue screen personally think beos classic o x see others might also see whatever like fresh clean desktop yeah may look old may look blank let eye deceive lot herewe first need desktop background make home let open leaf menu mount second volume case storagenow got ta say like added security given choice whether mount read hope stay though error part made sense hopefully change beta issuessetting desktop backgroundokay folder called myhaikubackdrops exactly concept image haiku leaf made funand picture open showimage default image viewer scale fit set like add little bit centered gradient desktop hopefully still look true originaltweaking deskbarnow past usually popped deskbar top screen using handle clock btw lot usability get deskbar side let take one thing haiku dedicated deskbar preference pane let go ahead change thing feel go ahead check sort option tracker first also resize notch icon size caption entirely accurate also resizes app block find useful scale bitthe area wanted mention one miss used menubar taskbar app expander new application open expand list allowing see window open nicelytweaking colorsmuch like haiku default palette bit gray taste four alpha one beta think color officially stay let first head preference menu left open see default set open appearancesimilar mac o appearance central location changing font color freelance style font smoothing scroll arrow let first make title tab text bit see take beos directly ui color free changing also similar older window iteration old system contrast predefined color palette earlier mentioned classic mac o notice new color control beta dynamically change slider move unlike alpha several minute tweaking everything including making title text blue ink color got color set close like themin next tab see new beta nice split one decorator trying like alpha earlier appearing first nightlies first default haiku style second style hopefully two decorator allow haiku quietly add character time pass already getting beta already shown back part scroll bar widget get added well okay nothing notable see font smoothing ie antialiasing pane let move first stop demo demo clockokay anyone read haiku review know love finding clock personally always fun behaiku one includes nice pocket watch looking version always joy open keep desktop clock several face alternated clicking fun let set face since clock replicant mac would either call desk accessory olden time widget window would call gadget pull new clock replicant handle bottom usually let go drag want itand moving recap anyone new deleting replicant done like recapped replicant basic bottom right corner cute little clock demo chartchart definitely personal favorite replicant animation setting display type set magic begin chart star chart demo play cool starfield simulation one first goto application open whenever see haiku newbie several space type spiral amas choas slow fast rotation slow fast forward motion synergy free motionjust show two mode beyond galaxy spiral mode shown shot chaos mode free star placement amas mode clustered star placement demo fontdemonext fontdemo something show capability font rendering beos haiku platform simply drag slider group slider haiku instantly transform font whatever want live release dating back demo debuted freely messing stretching font freely like taffy would stunningdemos demosnext spin leaved letter logo object depending card andor graphic mode either show monochrome like colorbehind cortex cover another review bottom spinning glteapot demo showing fps load remember fully multithreaded overlayimage explains box usually doesdemos mandlebrotnext one cool demo also mandlebrot exactly app name say draw mandlebrot set screenthe beta year incubation nightlies add salvo feature including series named palette shown palette series set original plus burning ship tricorn julia orbit trap multibrot see one choose set draw orbit trap change palette color quit one look like lightning modeand quit demo hoping get open menu way go demo builtin gamestwo builtin game sit inside demo folder haiku first sudoku biggest fan pair fun simple memory game featuring haiku icon card demo playgroundthere also playground app allows drawing shape canvas let simple rounded demo save shape although take screenshot clip showimage good news andor bright side though plenty choice paint like included wonderbrush plus apps depot like artpaint krita artist want draw fun place desktop applet replicants desktop applet others get bit let guide case unfamiliar full set workspace workspace applet toolpowerstatus battery monitorlaunchbox app launcherprocesscontroller process thread utility deskbar networkstatus networking applet tool deskbar last two already deskbar job default let look first threeapplets workspacesworkspaces incredibly powerful one thing replicant move copy like clock rightclick replicant going reveal option shown right click workspace applet wealth hidden option appears change number workspace tell change space scrolling show deskbar keep mind background prefs allows change backdrop per workspace historically allowed depth change well workspace haiku quite impressive definitely deserve mentionapplets powerstatusnext powerstatus applet nice little applet show battery info live deskbar need bigger better battery monitor becomes replicant complete text topapplets launchboxlast certainly least launchbox default top chrome shown turned basically fully configurable app board sit anywhere desktop vertically default side complete icon size preference scale big small need towhat look like pulling workspace replicant clock replicant putting launchbox bottom side desktop look something like browsing demo applet let open application start mediaplayer calculator deskcalc default text editor textedit mediaplayer sound card travel experience mediaplayer sound card work part work case thanks retrieving ogg vorbis clip girl flaxen hair performed mike ambrose wikipedia source mediaplayer playing song look like oh mention double vlc like player sort video get later review let keep replicant okay remember mentioned replicants applet well true deskcalc included simple calculator also become replicant mean drag like others make interesting chrome becomes transparent editor couldso next batch application one personal favorite stylededit see look like also rather useful well per name style color text nicely name somewhat similar textedit kind interesting candidate o x edit editor first real thing really look beta beautiful palette color font menu back alpha look nice whoever added thanksand similar simpletext classic mac change font name style size right menu welljust like earlier version also change find replacei wanted point alpha nice little title tab nice little refinement going back document menu fetch document statistic like earlier version worth pointing show feature little editor cool huh okay let quit move like taken right mac still asked save save save box nothing truly changed since still reminiscent something might downright sorely ancient depends way look guessbut personally classic let go ahead save document desktop since beos code name maui dano naming hawaii getting infoso saving file felt compelled cover people look property identify click fileso similar mac o original beos partly inspired alti clicking get info pull infothe info box work like used beos mac basic attribute file association menu permission really quickly property file hello addons still still welcomeyou know mac inherited next service available application beos addons allow choose specific action file like zipping finding searching file text even setting folder backdrop opening terminal spot haiku beta still hereof disk open context menu tracker click unmount altu remove disk haiku like also drag volume trash least time seems work love trashing disk giving mention yeah demo trash putting test page emptying one thing haiku like beos built simple power speed whim person behind thus trash empty without complaint trusting user understands meaningtracker preferencesand bring u tracker preference indepth like earlier version get usual desktop prefs show disk stack open tracker window like computer view window mac o get useful option alternate depending mode nothing really changed pane eitheryou show path title switch spatial browserlike file browsing personally think awesome given right scenario hide dotfiles like hidden dsstore stuff used unix like system enable typeahead filtering cooler sound mean start typing tracker narrow everything typing instantly think two box list folder outline selfexplanatorythird pane volume indicator prefs little green bar red space next drive kind like microsoft longhorn vista personally know know siding mac like o x way toggling text volume still pretty nifty definitely note look new color control beta inherited nightly build alpha pretty cool finally disk prefs pane unlike alpha life tracker prefs think option explain basically asks automount demand starting something wish could easy system could name system foldersokay leave tracker alone find something fun let look system folder really quick much could cover really wanted point two today grouped one shot package nonpackaged folder new beta upgrading alpha packaging system along new area holding package nonpackaged item part packaged filesystem inside package notice package comprise copy haiku see drop package take also administrative folder haiku store package info state systemthe launchdaemon secondly look underneath haiku various system service called server notice launchdaemon inside similar mac o allows faster smoother boot process haiku new beta definitely worth mention
336,Lobsters,osdev,OS,Mondrian Memory Protection,https://www.cs.utexas.edu/users/witchel/pubs/mmp-asplos2002.pdf,mondrian memory protection,,obj stream ab dlq dpw n p e um e
337,Lobsters,osdev,OS,TempleOS | Down the Rabbit Hole,https://www.youtube.com/watch?v=UCgoxQCf5Jg,templeos rabbit hole,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature templeos rabbit hole youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature templeos rabbit hole youtube
338,Lobsters,osdev,OS,A random emoji in your terminal prompt. How and Why,https://loige.co/random-emoji-in-your-prompt-how-and-why,random emoji terminal prompt,bash config update colonelpanic email protected variable update stand pro tip section terminal prompt random variable random section advanced bashscripting guide bash array array section bash beginner guide putting together email protected email protected bonus bash formatting email protected bash tip color formatting tput terminfo bonus actual bonus bash prompt generator bonus use return code bdesham lobster thread gschizas,article see customize terminal prompt add random emoji terminal prompt could penny every time somebody asked put random emoji probably millionaire would definitely able afford coffee every day le sleepy article explain emojified terminal since simple stuff also try explore extra detail customize bash experience bash config bash customizations generally made file saved user home directory file generally called bashrc common linux system bashprofile common macos update bashprofile executed login shell bashrc executed nonlogin shell thanks colonelpanic correction file essentially bash script file get loaded every single time open terminal session example possible bashrc file f etcbashrc etcbashrc fi alias ogls ogrt alias llls al alias lcls c alias dirls lrt alias hhistory alias ppwd p alias etemacstty alias export email protected h w export host uname n export editorvim export path homebin path see script goal setting bash environment instance load configuration file load global configuration available define shortcut alias common command finally export environment variable instance define default text editor modifyextend path list directory look executable command variable briefly touched path editor many special variable bash used customize look feel behavior terminal one variable important article called betting man would bet name stand prompt style update rohit chakraborty actually clarifies comment stand prompt string allows define look feel primary bash prompt format configuration example defining variable follows personal laptop render like point probably already grasping work variable act template special escape sequence like u h used indicate replace actual username hostname several set escape sequence might supported different operative system different type console list common widely supported escape sequence ascii bell character date weekday month date format eg tue may h hostname first h full hostname n newline name shell basename portion following final slash current time hh mm s format current time hh mm s format current time ampm format u username current user w current working directory effective uid otherwise used distinguish whether root backslash begin sequence nonprinting character could used embed terminal trol sequence prompt end sequence nonprinting character comprehensive list checkout pro tip also variable secondary prompt displayed command need input eg multiline command generally set also exist funny enough pun playstation curious know used archlinux great section terminal prompt random variable purpose another useful bash special variable random goal simple name suggests always evaluate different random value try run following command multiple time feeling ran command time list output got accurate using random referencing constant value variable internal bash function return pseudorandom integer range value included primitive generally good enough need something random like extracting arbitrary element array careful though technique strong enough security sensitive situation like generating encryption key slightly advanced use case instance might need extract random number smaller positive range case use modulo operator something like smallerrandomexpr random echo smallerrandom print number included excluded advanced use case check dedicated random section advanced bashscripting guide bash array bash array variable containing multiple value variable may used array maximum limit size array define array several different way assign element array one one different assignment statement generic fashion assign value given array index syntax array index value index expression evaluated nonnegative integer course shorter version allows initialize array multiple element single assignment instruction want read dereference value array way print bash array zeroindexed want reference element array follows element array also string need wrap quote unless string includes space instance create following array sport judo jiujitsu sicilian stick fighting loop element array sport sport echo sport done finally get length array use following syntax lot array enough want achieve article curious checkout array section bash beginner guide putting together ok know bash config bash variable bash random bash array enough knowledge able render random emoji terminal prompt let try write simple bashrc file emojis selectedemoji emojis random emojis export selectedemoji email protected h w look follows machine see something wrong emoji always problem selectedemoji get computed open new terminal window point behaves like constant value prompt always look approach essentially end random emoji per session per command fix introducing bash function emojis randomemoji selectedemoji emojis random emojis echo selectedemoji export randomemoji email protected h w notice replaced selectedemoji randomemoji terminal prompt template previously interpolating variable terminal prompt actually invoking function extract random emoji every single time prompt rendered new result mission complete wait quick let go code make sure understand going behind scene emojis simple array string every string made emoji selectedemoji inside function randomemoji dynamic value get initialized random emoji set supported emojis emojis complicated part oneliner made different expression righthand side assignment let break emojis evaluated length emojis array random emojis calculate random integer normalize number element emojis array using modulo operator essentially extracting random index emojis array finally use result expression dereference random element array assign selectedemoji pretty neat right bonus bash formatting probably noticed prompt well people prompt come fancy color formatting wonder like bold underlined text terminal support different formatting option bold dim underlined blink hidden inverted number different color background foreground done prefixing text special escape sequence give example let look code echo e name twitter handle email protected render follows way work using special escape sequence prefix sequence sequence parameterized indicate start end different formatting option generic syntax formatcodem formatcode replaced value indicate different formatting option previous example stand start color green stand start default color color reset stand start emphasis bold stand reset emphasis end bold table different formatcode value effect formatcode description bold dim underline blink hidden reset reset bold reset dim reset underline reset blink reset hidden default color black red green yellow blue magenta cyan white default bg color black bg red bg green bg yellow bg blue bg magenta bg cyan bg white bg information additional formatting option checkout bash tip color formatting way achieve similar formatting tput terminfo bonus actual keep bashprofile public github cool way easily clone different machine curious see bashemojification actually done else put variable even alias use feel free tell think ask question comment box article bonus bash prompt generator course service online help stuff turn many want build fancy bash prompt draganddropppy clickyclicky way checkout link point know enough able build generator website maybe idea next hackweekend bonus use return code amazing snippet bdesham lobster function successindicator eq echo else echo fi export successindicator approach random emoji anymore instead deterministic emoji given return code previous command command exited successfully see cool dude emoji otherwise surprised poop show prompt title article said careful probably noticed never really explained might want go stuff well real reason care seriously strong reason stuff important definitely fun interesting might fantastic developer even without knowledge without emojis terminal anyway answer convincing actually prove emojis terminal make productive try put toilet poop emoji list supported emojis next time mistype command randomly see poop emoji assure bit fun morale stay hopefully keep pounding way keyboard enjoying work whether believe hope see soon next article byez p special thanks people contributed lobster thread lot great insight also thanks gschizas reddit spotting error
339,Lobsters,osdev,OS,Verification of Tree-Based Hierarchical Read-Copy Update in the Linux Kernel (2018),http://www.kroening.com/papers/date2018-rcu.pdf,verification treebased hierarchical readcopy update linux kernel,,obj length filter flatedecode stream xڭ ݲi
340,Lobsters,osdev,OS,TempleOS,https://en.wikipedia.org/wiki/TempleOS,templeos,biblical operating system third temple terry davis manic episode revelation god commodore do turbo c c basic flight simulator compiler kernel edit bipolar disorder schizophrenic god third temple platoon cia sic edit nonpreemptive multitasking multicored public domain open source single address space ascii graphic library vga iso flight simulator compiler kernel burning bush oracle ouija glossolalia c c ide jitcompiled creating binary edit techrepublic osnews outsider art bourogne steve job steve wozniak edit edit god lonely programmer vice motherboard man killed train tech following temple o un système dexploitation pour parler à dieu codé par un fou génial slatefr troubled legacy terry davis god lonely programmer losethos ibm pc operating system original templeos educational tool programming experiment techrepublic temple operating system original scheduler original templeos le système dexploitation qui parle à dieu tom guide temple operating system original constructive look templeos la diagonale de lart art brut libération creator templeos terry davis passed away osnews edit,biblicalthemed operating system created terry davis templeos formerly j operating system sparrowos losethos biblicalthemed lightweight operating system designed third temple prophesied bible created american programmer terry davis developed alone course decade series manic episode later described revelation god system characterized modern commodore using interface similar mixture do turbo c davis proclaimed system feature resolution display single audio voice explicitly instructed god programmed original variation c named holyc place basic included original flight simulator compiler kernel templeos released j operating system templeos last updated received largely favorable review tech community davis amassed small online following background edit terry davis began experiencing regular manic episode leading numerous stay mental hospital initially diagnosed bipolar disorder later declared schizophrenic remained unemployed rest life suffered delusion space alien government agent left briefly hospitalized mental health issue experiencing selfdescribed revelation proclaimed direct communication god god told operating system god third temple davis began developing templeos circa one early name j operating system renaming losethos reference scene film platoon davis wrote losethos primarily making video game networking internet support far concerned would reinventing wheel another name used sparrowos settling templeos website announced god temple finished god kill cia spread sic davis died hit train august system overview edit templeos megabyte nonpreemptive multitasking multicored public domain open source single address space nonnetworked pc operating system recreational programming o run ascii graphic source code graphic library run vga color like modern operating system keyboard mouse support support iso redsea file system latter created davis support file compression according davis many resolution display single audio instructed god explained limited resolution make easier child draw illustration god operating system includes original flight simulator compiler kernel one bundled program egypt game player travel burning bush use highspeed stopwatch stopwatch meant act oracle generates pseudorandom text something davis likened ouija board glossolalia example generated text follows among consigned penally result perverseness checked stated held sensation reasoning sky adversity dakota lip suffer approached enact displacing feast canst pearl alms comprehendeth nought templeos written programming language developed davis middle ground c c originally called c c plus later renamed holyc double shell language enabling writing execution entire application within shell ide come templeos support several feature embedding image code us nonstandard text format known doldoc support hypertext link image mesh embedded otherwise standard ascii file file spinning model tank comment source code code o jitcompiled generally encouraged use jit compilation opposed creating binary davis ultimately wrote line code o critical reception edit templeos received mostly favorable review tech journalist david cassel opined partly programming website tried find necessary patience understanding accommodate davis techrepublic osnews published positive article davis work even though davis banned latter hostile comment targeting reader staff review techrepublic james sander concluded templeos testament dedication passion one man displaying technological prowess nt need anything osnews editor kroc camen wrote o show computing still hobby everybody serious day want code o us interpretive dance input method allowed company like apple damned o shown part outsider art exhibition bourogne france davis death osnews editor thom holwerda wrote davis clearly gifted programmer writing entire operating system small feat sad see affected mental illness one fan described davis programming legend another computer engineer compared development templeos onemanbuilt skyscraper engineer previously spoken davis length believed davis could steve job steve wozniak illness added actually boggles mind one man wrote hard lay person understand phenomenal achievement write entire operating system alone another computer engineer said templeos contained innovation developer accomplished particularly run certain part computer processor maintain extremely quick speed vague see also edit reference edit b c e f hick jesse november god lonely programmer vice motherboard retrieved b c e cecil neita september man killed train tech following dalles chronicle subscription required bruetferréol quentin may temple o un système dexploitation pour parler à dieu codé par un fou génial slatefr french retrieved b c e f g cassel david september troubled legacy terry davis god lonely programmer new stack davis terry losethos ibm pc operating system losethos archived original december b c e f sander james january templeos educational tool programming experiment techrepublic retrieved davis terry temple operating system templeos archived original july davis terry nd scheduler templeos source code archived original retrieved mathieu bruno november templeos le système dexploitation qui parle à dieu templeos operating system talk god tom guide french retrieved davis terry nd temple operating system wwwtempleosorg archived original retrieved mitton richard june constructive look templeos wwwcodersnotescom retrieved godin philippe la diagonale de lart art brut libération french retrieved holwerda thom september creator templeos terry davis passed away osnews retrieved january external link edit
341,Lobsters,osdev,OS,Everyday Use of GNU Guix,https://www.gnu.org/software/guix/blog/2018/back-from-seagl-2018/,everyday use gnu guix,back seagl seagl previously announced talk introducing gnu guix handy guix reference card everyday use gnu guix download video,back seagl marusich december concluded thank everyone local seattle community came participate previously announced chris marusich gave talk introducing gnu guix people experience level guixy swag handed including printed copy handy guix reference card room packed audience asked great question overall ton fun nt able come seagl year ok watch video talk happy hacking everyday use gnu guixdownload video webm minute
342,Lobsters,osdev,OS,Operating systems development for Dummies,https://medium.com/@lduck11007/operating-systems-development-for-dummies-3d4d786e8ac,operating system development dummy,operating system development dummy great pinnacle programming templeos setting cross compiler gnu ftp mirror gnu ftp mirror http booting linking bootloader grub bootloader making kernel something extending standard library interacting cpu github specification osdev wiki operating system modern operating system,operating system development dummiesa screenshot basilica o system developing tutorialif ever used computer may found wondering operating system function low level even would go developing one say kernel development difficult severe understatement really great pinnacle programming guide introduce basic tool needed implement simple operating system c assemblythe system developing known basilica o named tribute late developer templeos terry davis know story terry davis read system develop simple act introduction operating system development cover complicated o theory related topic executable format serial communication yet implement keyboard support rather set base working system begin implement standard library assumed operating environment ubuntu although using wsl window may workanyway let get startedsetting cross compilerthe first thing set crosscompiler compile target need know much elf wish learn elf file structured read developing linux environment may already compiler capable compiling elf however work produce executable file targeted linux incompatibleto set cross compiler begin installing dependenciessudo aptget install buildessential bison flex libmpcdev libmpfrdev texinfo libcloogisldev libisldev qemu grubcommon xorriso nasm grubpcbinnow make installation bit easier define value create directory srcto install cross compiler add newly assembled binary system path compiler detect binutils builtexport prefix homeoptcross export path prefixbin path mkdir srcnow download latest release binutils new srcbuildbinutils directory done via gnu ftp mirror via wget whichever version end getting ensure use right command entering correct version numberscd src wget http xf buildbinutilscd buildbinutils target target prefix prefix withsysroot disablenls disablewerrormakemake installonce done download gcc gnu ftp mirror using wget download directly gcc build process may take get comfortablecd src wget http xf buildgcccd buildgcc target target prefix prefix disablenls enablelanguagesc c withoutheadersmake allgccmake alltargetlibgccmake installgccmake installtargetlibgccafter installed add following line bashrcexport path homeoptcrossbin pathnow begin build operating systembooting linkingthe first thing write assembly code handle system run booting creating program load operating system booting bootloader quite difficult using grub bootloader load o pas control computer programstart creating file bootasm following instruction first line define global variable contain magic value searched bootloader kernel recognized multiboot compatiblelines declares multiboot header containing magic value flag well checksum confirm fact multiboot header section multiboot force value first kernel file align aligns file boundarieslines construct small stack align set stack aligned standard stack stackbottom creates symbol bottom stack resb reserve space stack stacktop creates symbol top stackin line define program function called linking script soon create define start entry point system bootloader jump position kernel loaded mov esp stacktop set previously defined stack moving stacktop stack pointer register call external function kernelmain define shortlynow start implement kernel create file kernelc write following anything yet used temporarily set linking note function void kernelmain function declared called bootasm entry point kernelnext create file linkerld add following code itentry start designates start entry symbol pretty self explanatory begin putting section put multiboot header early bootloader recognizes file format followed text section place readonly data readwrite data area stack area section may created compilernow file need created compile build bootable cdrom image compile build system following commandsnasm bootasm c kernelc kernelo ffreestanding wall linkerld basilicabin ffreestanding nostdlib booto kernelo lgccat point check see configured everything correctly running grubfile basilicabinecho return everything good return make sure followed step correctly build cdrom iso image binary file creating config file called grubcfgmenuentry basilica multiboot bootbasilicabin create folder structure copy needed file build iso imagemkdir p isodirbootgrubcp basilicabin isodirbootbasilicabincp grubcfg isodirbootgrubgrubcfggrubmkrescue basilicaiso isodiryou probably find lot command type fully link compile build image let make life little bit easier creating makefile create file called makefile followingnow compile build whole project iso image make remove iso bin file typing make clean using lot quickerwe run program cdrom basilicaisowe displayed grub multiboot menu followed blank black screen proceedinggrub bootloaderour operating system much yetmaking kernel somethingnow got everything working let start make something first thing find way print screen writing information video memory colour display located using mode every character screen text mode memory take two byte one ascii code byte byte attribute byte contains foreground colour background colour attribute byte background colour located first four bit foreground colour last four fg asciiknowing start define constant make function place character screenmake sure understand code moving onnow going create default colour terminal choosing vgacolourwhite foreground vgacolourblue background also add way keep track line column place multiple character row time done going add terminalinitialize function set default value change background colour something le depressing let also print character centre see worksnow build run new system look something like thisthis great however inconvenient write every character one time well set foreground background colour every time let write function automatically keep track placement colour print string terminalhowever careful program compile give error undefined reference strlen access standard library really noncompiler library matter point create file stdlibh include project done put following function build run systemwe get following may look like window blue screen death screaming u good mean string wrapping work may notice odd looking character end string kernel currently way dealing newline character printed another characternewlines implemented rather easily rewriting terminalputchar treat reading n reaching vgawidth refraining writing display buffer refactor terminalputchar although one thing might notice reach end screen wrap back front fix need implement terminal scrolling clear bottom row move every row one first may tempted use memmove remember standard library function scroll screen implemented looping character setting character vgawidth character front terminalputchar terminalscrollup written text scroll upwards reach end screen however screen look fairly bleak mostly screen completely static let fix adding delay function standard library since yet access kind cpu timer simplest laziest way implement going loop set amount iteration relatively easy writethe volatile keyword well use asm nop done prevent compiler optimisation may prevent loop running test delay terminalscrollup function runningfor delay terminalwritestring test let also make printing function make life easier make terminalwritestringcolour print whole string specific colour also add terminalwriteint print integer fairly easy implementextending standard library interacting cpuwe making pretty good progress operating system however one thing might notice point screen look behave exactly every time run currently way change way screen behaves based external random factor useful function add standard library would rand generate random variable c standard rand typically us simple linear congruential generator fairly easy write sample rand implementationthis function work may quick realise shift problem slightly way provide semirandom seed srand rand produce number order every time system boot fix need source entropy make system advanced later may able use mouse movement user interaction source entropy take easiest route use cpu timestamp counter seed random valuesthere builtin way read timestamp counter c need use assembly could using inline assembly easier way would modify already existing bootasm add functionalityto use mnemonic rdtsc read value edx eax meaning highorder bit loaded edx loworder bit loaded eax accumulator register eax capable storing bit define two function return value stored bothedx eax first declare timestampedx timestampeax global call kernelc first function set edx eax value time stamp counter move value stored edx eax return execution kernelc second function return straight calling rdtsc value eax already wantnow call function kernelc program including following function declaration extern timestampedx extern timestampeax final test let try making simple screen generating random value seeded timestampeax congradulations successfully developed implemented basic kernel bootloader standard library time tool developed may able go develop full fledged system view full source code githubwhere next major tool would want implement would likely keyboard support unless feel like getting acquainted specification would avoid usb instead opt keyboard would much easier implement read hereif wish go implement advanced system would advise learning theory useful resource would osdev wiki operating system modern operating systemsstay tuned next part may take continue series show implement support keyboard among thing note operating system loosely defined kernel tool application depending definition system implemented tutorial may akin kernel rather operating system going consider strlen tool rand application get around
343,Lobsters,osdev,OS,The Secure Socket API: TLS as an Operating System Service,https://www.usenix.org/conference/usenixsecurity18/presentation/oneill,secure socket api tl operating system service,support usenix presentation audio,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author mark textquoteright neill scott heidbrink jordan whitehead tanner perdue luke dickinson torstein collett nick bonner kent seamons daniel zappala title secure socket api tl operating system service booktitle usenix security symposium usenix security year isbn address baltimore md page url http publisher usenix association month aug presentation video presentation audio
345,Lobsters,osdev,OS,GNU Guix and GuixSD 0.16.0 released,https://gnu.org/software/guix/blog/2018/gnu-guix-and-guixsd-0.16.0-released/,gnu guix guixsd released,gnu guix guixsd released key item guixsd installation image virtual machine image guixsd source binary substitute url bioinformatics platform berlin institute medical system biology bimsb max center mdc gsoc internship list new upgraded package mechanism emacsguix package transformation option software heritage issue rust mrustc get rid hurdspecific glibc variant package translated german french translation translate manual native language joining translation project release announcement gnu guix gnuâ guix respect user freedom guile scheme,gnu guix guixsd releasedludovic december pleased announce new release gnuâ guix guixsd version release hopefully last one closing key item last monthsthe release come guixsd installation image virtual machine image guixsd tarballs install package manager top gnulinux distro either source binary guix user update running guix month since previous release people contributed code package highlightsthe default substitute url changed http ciguixinfo backed powerful build farm terabyte storage kindly donated bioinformatics platform berlin institute medical system biology bimsb max center mdc build farm frontend run cuirass continuous integration tool partly developed two gsoc internshipsguix pull list new upgraded package profile option allows keep several guix revision parallel related new guix describe command display information guix revision usingguix pull support channel nutshell specify configguixchannelsscm channel guix pull fetch guix well optionally thirdparty package repository guix describe display channel use guix describe f channel produce specification used channelsscm file guix pullusing new inferior mechanism interact different revision guix even compose package coming different revision guix output commandline tool noticeably improved important event colorized guix package guix system longer display build log guix build colorizes build log way similar emacsguix new package transformation option withbranch withcommit allow obtain package variant straight git repositoryguix reproducible build source code package refers git repository disappeared unfortunately uncommon checkout fetched software heritage make guix one first distros backed longterm archive see issue infoour rust package fully bootstrapped source starting mrustc rust compiler written c victory instance guix probably first distro achieve future post guixsd guix system reconfigure always load replacement system service way deem appropriate run herd restart service start upgraded serviceas usual package added upgraded notably gnuâ c library version incidentally allowed u get rid hurdspecific glibc variant last today guix provides packagesthe manual partially translated german french translation complete help translate manual native language joining translation projectpffew quite long list already release announcement list additional noteworthy change bug fix may interested inenjoy gnu guixgnuâ guix transactional package manager gnu system guix system distribution guixsd advanced distribution gnu system relies gnu guix respect user freedomin addition standard package management feature guix support transactional upgrade rollback unprivileged package management peruser profile garbage collection guix us lowlevel mechanism nix package manager except package defined native guile module using extension scheme language guixsd offer declarative approach operating system configuration management highly customizable hackableguixsd used machine also possible use guix top already installed gnulinux system including
346,Lobsters,osdev,OS,Virtualization Extensions into a Microkernel based Operating System,https://www.researchgate.net/publication/301298873_Virtualization_Extensions_into_a_Microkernel_based_Operating_System,virtualization extension microkernel based operating system,,instructor include virtualization topic laboratory assignment mhyper prof microkernel o technology particularly minix well adapted include new feature support several virtualization approach acknowledgment author gratefully acknowledges help received antoine leca phd silvio gonnet reference galley virtual machine proc acm sigarchsigops workshop virtual computer system popek g goldberg r formal requirement virtualizable third generation architecture communication acm acceta r baron w bolosky golub r rashid tevanian young mach new kernel foundation unix development usenix conference pp gien grob l microkernel architecture key modern operating system design hohmuth peter et al reducing tcb size using untrusted component small kernel versus virtualmachine monitor ew ford b hibler et al microkernels meet recursive virtual machine second symposium osdi biemueller dannowski u real virtual machine api proposal proceedingsof mike tanenbaum et al minix status report current research login usenix magazine liedtke j toward real microkernels communication acm volume issue sept h hartig security architecture revisited workshop acm sigops european workshop ew page agarwal levy thousandcore chip kill rule multicore annual conference design automation baumann et al multikernel new o architecture scalable multicore system symposium operating system principle wentzlaff al operating system multicore cloud mechanism implementation proceeding acm symposium cloud computing linnenbank n implementing minix single chip cloud computer master thesis vrije universiteit herder j towards true microkernel operating system vrije universiteit master degree thesis herder j gras b tanenbaum modular system programming minix login april protection matrix minix http wikierightsorgwikiprotectionmatrixesinminix jorrit n herder herbert bos ben gras philip homburg andrew tanenbaum fault isolation device driver dsn estoril lisbon portugal hand warfeld et al virtual machine monitor microkernels done right heiser g uhlig v levasseur j virtual machine monitor microkernels done right nicta technical report armand f gien practical look microkernels virtual machine monitor ieee cccn conference u steinberg b kauer nova microhypervisorbased secure virtualization architecture eurosys conf paris france apr g heiser b leslie microvisor convergence point microkernels hypervisors acm steﬀen liebergeld lightweight virtualization microkernelbased system january brygier j fuchsen r h blasum pikeos safe secure virtualization separation microkernel sysgo white paper kivity kamay laor u lublin liguori kvm linux virtual machine monitor linux symposium b ford hibler j lepreau p tullmann g back clawson microkernels meet recursive virtual machine osdi october ning li kinebuchi mitake h shimada h tsunghan lin nakajima lightweighted virtualization layer multicore processorbased rich functional embedded system isorc april c van schaik g heiser highperformance microkernels virtualization arm segmented architecture international workshop microkernels embedded system dike jeff usermode port linux kernel annual linux showcase conference pessolani pablo modifying behaviour minix system call redirection message cacic yang yu fanglu guo susanta nanda lapchung lam tzicker chiueh featherweight virtual machine window application vee blas j prola g sarli j diseño e implementación de un file server alternativo para minix conaiisi david c van moolenbroek raja appuswamy andrew tanenbaum towards flexible lightweight virtualization alternative system storage conference systor pessolani p gonzález c enhancing minix inputoutput performance using virtual machine approach warso cacic pessolani p realtime operating system based minix master thesis unlp y vivek l bhuvan g ashrith dsvn aditya realtime minix banco zandbergen realtime minix october stephen soltesz herbert pötzl marc e fiuczynski andy bavier larry peterson containerbased operating system virtualization scalable highperformance alternative hypervisors eurosys
347,Lobsters,osdev,OS,try/catch in Linux Kernel,https://binarydebt.wordpress.com/2018/11/16/try-catch-in-linux-kernel/,trycatch linux kernel,extable context handler solution work helloworld kernel module http wwwflickrcomphotosflickcoolpix like,higher level language like java c one recover unexpected bahaviour using trycatch like mechanism thing different inside linux kernel code considered trusted reliable fault exception severe penalities example division zero likely cause kernel oops whole system hang would run code know fault enter extable kernel mechanism one trycatch like facility highlevel extension c programming language instead work assembly level take following piece blatant division zero make safe run inside kernel using exception handling mechanism assuming platform article void blatantdivbyzero void quotient divisor int q asm movl eax movl edx div movl eax r q b eax prdebug quotient dn q extable extable basically elf section inside linux kernel binary image contains mapping potentially faulting instruction respective handler user interface extable asmextable family macro macro delegate one macro asmextablehandle handler address faulting instruction ie try part address control transferred fault occurs ie catch part handler function transfer execution catch part handler function important following signature bool handler const struct exceptiontableentry fixup struct ptregs regs int trapnr fixup contains address catch part ie argument asmextablehandle regs contains register fault happened trapnr fault number handler transfer control catch part simply setting instruction pointer register regs argument fixup address however opportunity set environment catch part different wrapper around asmextablehandle come wrapper us differnt handler function let take couple example define asmextable asmextablehandle exhandlerdefault define asmextablefault asmextablehandle exhandlerfault exhandlerdefault handler function simply set instruction pointer catch part exhandlerfault move fault number rax register addition setting instruction pointer catch part catch part access fault number context handler point might wondering context handler function execute short answer interrupt handler context work may jump next section quick detour interrupt context come executing instruction going next instruction control unit check justexecuted instruction resulted interrupt exception exception occur determines vector associated case dividebyzero fault vector control unit read corresponding entry zeroth entry dividebyzero interrupt descriptor table idt array entry inside processor ram address table stored inside idtr register entry idt turn point entry another table entry called global descriptor table gdt entry inside gdt info base address segment related handler exception whose vector started processor performs check store context exception occurred eg register content stack handler function discussed set instruction pointer actually set instruction pointer saved context process jump interrupt handler interrupt handler look extable section find handler function faulting instruction handler function found processor jump therefore handler function executed inside interrupt context ultimately execution return interrupt context context saved stack interrupt handler executed restored since handler function set instruction pointer potentially register part preinterrupt context restored execution jump catch part interrupt handler return solution work using extable macro rewrite blatantdivbyzero function safe way let first see final solution look like break easily understandable part void blatantdivbyzero void quotient divisor int q asm volatile movl eax movl edx div movl eax tn tsection fixup ax n tmovt tpreviousn asmextable r q b eax prdebug quotient dn q two key difference first adding code section called fixup second asmextable macro code fixup section catch part asmextable saw us default handler merely set instruction pointer catch part visible bool exhandlerdefault const struct exceptiontableentry fixup struct ptregs regs int trapnr regs ip exfixupaddr fixup return true first argument asmextable label faulting instruction div letter b mean backwards functional significance context second argument catch part inside fixup section let look execution flow set division zero instruction executed fault go exception handler vector find correct handler case exhandlerdefault turn set instruction pointer address label catch part noted label inside fixup section inside label set quotient q jump label known safe point faulting instruction execution continues next instruction like normal note next instruction neither tsection fixup ax n directive linker tmovt life different section instruction label let see real object file look like compiled extable code helloworld kernel module modified contain blatantdivbyzero function compiling inspect section using readelf readelf helloko section header starting offset section header nr name type address offset size entsize flag link info align null notegnubuildi note text progbits ax inittext progbits ax relainittext rela fixup progbits ax relafixup rela exittext progbits ax relaexittext rela progbits am extable progbits relaextable rela partial output containing section relevant discussion first fixup section number type progbits mean loaded memory flag x mean executable want since execute catch part number extable section loaded memory type progbits marked executable use read address handler function need execute section function kernelextablec search extables correct handler given faulting address reproduced given address look exception table const struct exceptiontableentry searchexceptiontables unsigned long addr const struct exceptiontableentry e e searchextable startextable stopextable startextable addr e e searchmoduleextables addr return e see search kernel image fails function look kernel module extables corresponding entry call searchmoduleextables addr function search helloko module entry corresponding divisionbyzero instruction apology formatting please bear find way fix wordpress editor title image catch taken playing cricket street popular pastime south asia taken http wwwflickrcomphotosflickcoolpix like like loading related
348,Lobsters,osdev,OS,McKernel – A lightweight multi-kernel OS for high-performance computing,https://www.sys.r-ccs.riken.jp/ResearchTopics/os/mckernel/,mckernel lightweight multikernel o highperformance computing,overview background design architecture functionality publication balazs gerofi balazs gerofi,overview ihkmckernel lightweight multi kernel operating system designed specifically high performance computing run linux mckernel lightweight kernel lwk sidebyside compute node primarily aiming following provide scalable consistent execution largescale parallel application time rapidly adapt exotic hardware new programming model provide efficient memory device management resource contention data movement minimized system level eliminate o noise isolating o service linux provide jitter free execution lwk support full posixlinux apis selectively offloading system call linux background growing complexity highend supercomputer become indisputable current system software stack face significant challenge look forward exascale beyond necessity deal extreme degree parallelism heterogeneous architecture multiple level memory hierarchy power constraint etc advocate operating system rapidly adapt new hardware requirement support novel programming paradigm runtime system hand new class dynamic complex application also horizon increasing demand application construct insitu analysis workflow elaborate monitoring performance tool complexity relies rich feature posix also linux apis proc sys filesystems etc particular two traditional approach traditionally lightweight operating system specialized hpc followed two approach tackle high degree parallelism scalable execution largescale application delivered full weight kernel fwk approach full linux environment taken basis feature inhibit attaining hpc scalability removed ie making lightweight pure lightweight kernel lwk approach hand start scratch effort undertaken add sufficient functionality provides familiar api typically something close general purpose o time retains desired scalability reliability attribute neither approach yield fully linux compatible environment multikernel approach hybrid approach recognized recently system software community run linux simultaneously lightweight kernel compute node multiple research project pursuing direction basic idea simulation run hpc tailored lightweight kernel ensuring necessary isolation noiseless execution parallel application linux leveraged full posix api supported additionally small code base lwk also facilitate rapid prototyping new exotic hardware feature nevertheless question share node resource two type kernel device driver execute exactly two kernel interact extent integrated remain subject ongoing debate design architecture heart stack lowlevel software infrastructure called interface heterogeneous kernel ihk ihk general framework provides capability partitioning resource manycore environment eg cpu core physical memory enables management lightweight kernel ihk allocate release host resource dynamically reboot host machine required altering configuration ihk also provides lowlevel interkernel messaging infrastructure named interkernel communication ikc layer architectural overview main system component shown figure figure ihkmckernel architecture mckernel lightweight kernel written scratch designed hpc booted ihk mckernel retains binary compatible abi linux however implement small set performance sensitive system call rest delegated linux specifically mckernel memory management support process multithreading simple roundrobin cooperative tickle scheduler implement signaling also allows interprocess memory mapping provides interface hardware performance counter functionality overview principal functionality ihkmckernel stack provided system call offloading system call forwarding mckernel implemented follows offloaded system call occurs mckernel marshal system call number along argument sends message linux via dedicated ikc channel corresponding proxy process running linux default waiting system call request ioctl call ihk system call delegator kernel module delegator kernel module ikc interrupt handler wake proxy process return userspace simply invokes requested system call obtains return value instructs delegator module send result back mckernel subsequently pass value userspace system call offloading mechanism shown figure figure system call offloading ihkmckernel unified address space unified address space model ihkmckernel ensures offloaded system call seamlessly resolve argument even case pointer mechanism depicted figure implemented follows figure unified address space mckernel process corresponding proxy first proxy process compiled position independent binary enables u map code data segment specific proxy process address range explicitly excluded mckernel user space red box right side figure demonstrates excluded region second entire valid virtual address range mckernel application userspace covered special mapping proxy process use pseudo file mapping linux mapping indicated green box left side figure publication balazs gerofi yutaka ishikawa rolf riesen robert w wisniewski yoonho park bryan rosenburg multikernel survey highperformance computing international workshop runtime operating system supercomputer ross held conjunction acm international symposium highperformance parallel distributed computing hpdc kyoto japan appear balazs gerofi masamichi takagi gou nakamura tomoki shirasawa atsushi hori yutaka ishikawa scalability performance isolation device driver transparency ihkmckernel hybrid lightweight kernel ieee international parallel distributed processing symposium ipdps chicago u takagi masamichi norio yamaguchi balazs gerofi atsushi hori yutaka ishikawa adaptive transport service selection mpi infiniband network international workshop exascale mpi exampi held conjunction acmieee international conference high performance computing networking storage analysis sc austin tx usa balazs gerofi takagi masamichi yutaka ishikawa toward operating system support scalable multithreaded message passing european mpi user group meeting eurompi bordeaux france balazs gerofi masamichi takagi yutaka ishikawa rolf riesen evan power robert w wisniewski exploring design space combining linux lightweight kernel extreme scale computing international workshop runtime operating system supercomputer ross held conjunction acm international symposium highperformance parallel distributed computing hpdc portland usa best paper award rolf riesen david n lombard kurt ferreira robert w wisniewski arthur barney maccabe john jack lange mike lang ron brightwell balazs gerofi kevin pedretti pardo keppel todd inglett yoonho park yutaka ishikawa lightweight kernel international workshop runtime operating system supercomputer ross held conjunction acm international symposium highperformance parallel distributed computing hpdc portland usa taku shimosawa balazs gerofi masamichi takagi gou nakamura tomoki shirasawa yuji saeki masaaki shimizu atsushi hori yutaka ishikawa interface heterogeneous kernel framework enable hybrid o design targeting high performance computing manycore architecture ieee international conference high performance computing hipc goa india acceptance rate balazs gerofi takagi masamichi yutaka ishikawa exploiting hidden nonuniformity uniform memory access manycore cpu international workshop multimanycore computing system mucocos held conjunction europar international european conference parallel processing porto portugal yuki soma balazs gerofi yutaka ishikawa revisiting virtual memory high performance computing manycore architecture hybrid segmentation kernel approach international workshop runtime operating system supercomputer ross held conjunction acmsigarch international conference supercomputing ic munich germany balazs gerofi akio shimada atsushi hori takagi masamichi yutaka ishikawa cmcp novel page replacement policy system level hierarchical memory management manycores acm international symposium highperformance parallel distributed computing hpdc vancouver canada acceptance rate best paper award akio shimada balazs gerofi atsushi hori yutaka ishikawa proposing new task model towards manycore architecture international workshop manycore embedded system me colocated isca tel aviv israel balazs gerofi akio shimada atsushi hori yutaka ishikawa partially separated page table efficient operating system assisted hierarchical memory management heterogeneous architecture acmieee international symposium cluster cloud grid computing ccgrid delft netherlands acceptance rate nominated best paper
349,Lobsters,osdev,OS,Translating xv6 to Nim,https://github.com/ckkashyap/nim-xv6,translating nim,join github today sign file permalink build resource license reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time translate nim build build depends devel version nim c compiler emit export gccgcc export ldld export objcopyobjcopy export nimnim export make working realized instead trying build kernel scratch nim potentially better approach could infuse nim working kernel way could working kernel time started git githubcom look like idea working took working c version replaced uartc uartnim work essentially working kernel nim source matter replacing c source nim always pleasure working unix kernel translate nim resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
350,Lobsters,osdev,OS,Haiku monthly activity report - 11/2018,https://www.haiku-os.org/blog/pulkomandy/2018-12-02_haiku_monthly_activity_report_november_2018/,haiku monthly activity report,haiku monthly activity report runtimeloader localization user interface debugging tool build system general code cleanup driver application medium file system documentation,haiku monthly activity report last activity report notice written report since july thanks community member took care period busy moving new flat visiting usa gsoc mentor summit germany begeistertanyway report cover past beta release unsurprisingly activity mostly focused bugfixes always new thing going onthe report includes work done begeistert partially explains higher usual commit count also got new contributor great runtimeloaderkorli fixed detection gcc version runtimeloader program load run program need know gcc version order load correct library forgot adjust starting use adjusted bdate use locale kit date parsing formatting rather relying strftime make sure bdate use locale setting even used gui apps locale environment variable setkapix added option locale command line tool tool must follow posix convention used buildsystems example make sure locale availableuser interfaceaxeld running haiku new computer high resolution display current work making user interface scale properly according font size month fixed sound voume replicant including new muted icon designed stippi adjusting size icon tracker list mode allowing replicants deskbar resize also adjusted deskbar leafkapix added support bstringview multiple line string also made processcontroller handle cpu icon larger toolswaddlesplash fixed strace crash attempting display invalid syscall number strace tool run executable trace call kernel allows form black box debugging looking interface program system found openjdk would sometimes try call nonexisting syscalls happen strace would crash problem debuggingoco made change start team window debugger make easier use window size adjustment remembering last used file path etc build systemwaddlesplash started work cleaning jam rule started changing compiler called file path relative repository root help creating reproducible build gcc store file path generated object file cleaned rule related building kernel bootloader eventually lot obsolete rule removed override haiku source upstreamed fork jam unfortunately real upstream jam perforce maintained anymore ca nt upstream started improving bootstrap process used rebuild haiku entirely source without relying download prebuilt package dependency started experimenting docker container run bootstrap goal provide reliable setup build currently sensitive host configuration cpu arch linux distro etc kapix made makefileengine process cxx file c expectedpulkomandy introduced haikuextras package haiku depot including code haiku nt think need default image currently includes partition handler amiga rdb apple partitionning system rarely needed still possibly useful started experiment rewrite configure script python without usable result yetwaddlesplash also resumed work building haiku clang fixing extra warning found along waygeneral code cleanupswaddlesplash cleaned beos legacy code various place test powerpc architecture written properly powerpc code ended used also armmurai takashi started reviewing issue pvs scan year back started fixing lot work get everything triaged pvs focused detecting typical mistake suspicious operator precedence missing pointer dereferences etcextrowerk fixed missing prototype mathh ease work porting software haiku fixed signature screenmode command reliably used shortcut made cleanup work arm port make least buildable includes work mailbox driver raspberry pi videocore communicationspeter kosyh fixed logic error mouse driver could lead problem resetting mouse also fixed crash netservertqh improved elantech touchpad driver enough yet enable standard buildspulkomandy added command line tool change display brightness driver support currently intelextreme laptop bound keyboard shortcut easily changing brightness also removed implemented mention device preference would mislead people thinking driver hardwarewaddlesplash continues work freebsd network driver implementing mtxtrylock curcpu enabling faster tx path driver also continues work setting proper flag area smap smep work intended also driveby patch bluetooth netfs thingsmmlr fixed issue virtio virtionet driver would lead frame sent lot padding byte end still worked limited performance used lot memory reasonwaddlesplash also fixed hda driver work vmware virtualboxnathan sashihara fixed copypaste error handling macrosapplicationspeter kosyh lot work imap smtp handling initially started small patch kuroneko ended reworking lot code fixing many problem place mail work lot reliablyfrançois finished shelf screen saver show replicants computer idle providing nice informative dashboardlock screenandrew lindesay fixed crash haikudepot repository missing identity urlskerwizzy rewrote core mandelbrot app crash window resizedmediapulkomandy work updating ffmpeg addon current ffmpeg apis mostly using new producerconsumer api reworking management timestamps however still solve ongoing problem ffmpeg addon still crash fixedbarrett reworking encodingdecoding side medium kit introduced new codec kit share easily function needed size plan completely rework format negociation storage access apis make whole thing better suited nonfile medium stream podcasts also later blueray dvd new api already expose file metadata tag etc exposed beforefile systemsit possible disable cddb lookup cdda filesystem option already documented workingdocumentationfollowing complaint hackernews haiku interface guideline reworked become genderneutral already part everywhere
351,Lobsters,osdev,OS,"ARX, Arthur and RISC OS - Paul Fellows",http://rougol.jellybaby.net/meetings/2012/PaulFellows/index.html,arx arthur risc o paul fellow,arx arthur risc o paul fellow,arx arthur risc o paul fellow dialog paul fellow except audience question marked q minor hesitation inconversation self correction edited thanks much inviting guy god know year pleased talk boy time ago talk got explain mean got got obviously started best machine world ever bbc micro model b got though first machine sinclair acquired free upgraded rom meant keyboard wrong first sensible computer bbc model b bought student cambridge encouraged friend building acorn atom room chap called steve barlow thought fantastic thing abandoned studying chemistry supposed started playing computer day time finished degree written lot acornsoft bit chemical theme going using chemistry degree studying writing program instead shirley conran magic garden worst program world ever forced write one chris curry bizarre publishing deal shirley conran publisher apologise profusely program anyone ever saw one shrink wrap completely useless never opened sphinx adventure warped mind whole generation acornsoft database good completely made obsolete mark colton view series spascal pascal compiler wrote basic thesis postgraduate work computer lab got paid acornsoft published whole pascal compiler written basic bbc micro program compiler object code created notice one published floppy disc also published cassette real masochist could load compiler cassette compile program long fabulous result writing pascal compiler got offered job taking running acornsoft language group tony thompson stuart swale richard manby responsible getting lot door nt write managed tested lisp written arthur norman computer lab forth richard de grandisharrison went driving force thing like symbian think martin richards invented bcpl brother responsible compiler logo implementation dude london prolog david christiansen comal ben lionel acorn iso pascal compiler fully validated fitted rom language group kind went offpiste management nt really care long made money got involved several thing termulator terminal emulator terminal nobody used glad could nt really see importantly story tonight wrote graphic extension rom bbc micro mentioned little bit one user guide reserved graphic extension rom tweaked interest thought someone really ought richard manby language group working ran language implement produced graphic extension ellipsis flood fill stuff produced graphic extension rom got incorporated bbc master operating system crucial story first time acornsoft separate company got system software went machine see going ca nt right little lesson history memory map bbc micro slide got bbc computer dfs basic classic screen came side got memory map address space organised bottom got ram rom space operating system rom memory mapped io top simple scale see say movable boundary graphic memory started worked way downwards likely came put high resolution graphic went graphic operating system first nt much left used high resolution graphic mode crucial model b popular machine lot scrambling around competition coming machine like commodore amiga coming along even memory even ram acorn something one friend martin gilbert beavering away background building model c became master taking forever something watford electronics invented way adding memory create shadow bank memory big chunk video memory processor tried access memory range instruction fetched range operating system rom must trying access screen would magically flip bank memory let access screen let operating system flip back whereas address range instruction fetch anywhere else accessed normal memory program got access normal ram operating system graphic routine got see memory meant could nt poke screen program could nt get go proper operating system call broke sort illegally written software cheated way around apis happy stuff worked still nt enough acorn thought hell add made b master even later way stuff another rom slot nip back memory map paged rom paged rom area basic adfs rom would live within space page register would say one paged could put ram well b four ram stuffed area drawn little map top got operating system rom basic would live normally got page ram making another really hard get shadow memory talked b operating system graphic routine could get idea people wanted write larger basic program going sell machine ram really ought let write bigger program previous version mad idea put basic interpreter let access program spread across four rom slot course lived address space finding place assembly language basic interpreter accessed source code program variable discovered done one particular mode addressing indirect comma form addressing could stick extra byte address poke hardware register order let access chunk address space got version basic work lot page swapping rom going went along proposed roger wilson sophie wilson responsible basic got comment insane suicide impossible anyway got shipped b master came along afterwards tony thompson group acorn grateful time able say bigger got memory really put guy map able thing sophie thought impossible good see story going meanwhile sophie steve incredibly busy designing arm chip picture first arm chip lid statistic amazing thousand transistor based micron technology nanometre today money huge comparison anything going today running taking one cycle per instruction work different instruction time multiply device came later version dieshrink built first put nice secondprocessor case pictured could turbocharge bbc getting one system putting side could get hold one really hard get hold eventually sold arm development system bit snotty allowed buy nt put general sale fact trouble getting acornsoft send stuart swale lab signed part brought back built four way get hold wonderful thing thought absolutely amazing boot one bbc basic v see whole megabyte ram play thing unbelievably fast compared poor old bbc wanted say bit acorn decided whole risc thing acorn manufacturer home computer earth would crazy enough design chip sophie analysis compiler output lot common compiler part process trying choose chip use next looking thing like national semiconductor got renamed nt know remember second processor done nat semi produced poster said late bit machine early bit machine year later crossed early wrote late analysis showed complicated instruction complicated memcopies compiler nt generate generate loadstore add subtract andor compare branch really rest unless writing assembler nt use complete waste aforementioned arthur norman written lisp interpreter bbc micro acorn whole time come design machine instruction called ski machine whose instruction called k ran lisp hardware built one thing never worked big covered wirewrap always broken idea prove really nt need many instruction general purpose machine q three instruction point paper like read still nt understand familiar lisp programming language basically could take right value left value skip onto next instruction really three primitive need lisp machine read paper still nt really get also time computer lab got ibm noticed branch link put program counter rather jumptosubroutine automatic stamp model useraccessable register returnaddresses returning using mov pc special purpose rts instruction thing together meant thought right sufficiently simple could design mostly could work going computer lab time acorn also opened research centre paolo alto set process writing operating system run chip arx arx operating system preemptively multi tasking multithreaded multiuser written acornextended godalone know chose language test compiler compiler arm point gave task taking x coordinate working would address memory add base address coordinate time row width add x exactly complicated two add multiply compiler generated instruction branch link general multiply bit slow slow written highlevel language quote wikipedia much operating system ran usermode suffered kernel switch perform mutexes order multi processing mentioned course real problem late hardware starting made software obviously nowhere seen predicted another six nine month away ready ship hence project arthur got job born absolute crisis hardware coming existence q relationship arthur norman arthur sure good question think believe word arthur come fact wanted arm thursday crisis memory bit debate people may say different thing officially project arthur arthur norman never involved even though around involved design arm hauled front board director acorn said hardware made got software guy nt much acornsoft make u bbc like operating system got month hardware going hit street like idiot said yes nt got much reason came u done graphic extension rom master part recent machine gone door done fancy basic interpreter could access memory thus proving could hard thing done language could possibly want bbc micro really nt much else acornsoft language group team leader fool said yes got write driver actually given driver john biggs arm today written ripped arx implementation said make real time clock work fine test compiler worked nascent version arthur time transliterated assembler went time faster got slightly upset driving bus fast also thing like colour palette tony thompson done implementation basic got core operating system real gut arthur brought reset powered organised memory forth really interesting time part one machine could get thing boot reliably could boot turn reboot sometimes would work sometimes would nt turned would boot fine left long enough nt turn long nt reset properly fan board still spinning back emf fan enough power keep arm running got arm phone today would take power keep micron arm transistor would run second energy stored fan stuart swale wrote fileswitch think heap manager well could nt done without stuart fixed everything richard manby graphic extension rom author graphic risc o went draw really quite fantastic program got ace game programmer semiretirement writing game beeb market tim tim work broadcom day text sound keyboard serial drafted couple guy acorn team grew got nick reef disk filing system stuff brian cockburn team guy tony arm stuart retired richard manby work ant cambridge embedded browser tim work chip sophie broadcom thing like raspberry pi core chip related work nick reef arm brian amino amino company started martin gilbert martin designed master look inside one amino set top box find boot rom flash filing system nand flash boot rom nt half look like core operating system load separate relocatable module boot run exec boot inside nand flash go run linux think sold million settopboxes instance operating system acorn ever managed thing got serious got hardware desk first piece hardware got second processor card see four core chip arm memc vidc ioc square flatpack holder ram operating system software sort eeproms tube interface plugged via tube interface bbc micro giant second processor say board second processor development board first one gradually got point one development work could attach keyboard graphic output monitor gradually functionality arthur came life could migrate io feature onto board bbc micro course thing could never run entirely standalone always needed host micro get going got everything going sound graphic memory management everything running initial system still quite board around still work first stand alone machine confusing called one second processor photo said machine lid lid thought quite smart design plastic moulding front keyboard plugged think actually computer tell mine got red stickies function key change name button keyboard designed arx weird button nobody ever knew supposed stuck label think tipex one make appropriate booted running seems risc o inside got floppy drive hard drive podule bus seen similar archimedes fan stop order reboot real machine came along archimedes changed one important thing keyboard different style keyboard keyboard connector nt quite know keyboard came obviously micro would chuck keyboard data u serial lead one funny story trying debug interface tony software keyboard stuart tony bruce brian cockburn night trying get damn thing work guy made keyboard got fantastically useless protocol come keyboard sent replied sent replied sent supposed reply trouble received nt know first one second one spent age trying create code arm end make reliably boot start keyboard properly eventually morning suggested send something illegal sent well would would nt keyboard took went oh nt know deal start sent time knew first one still like today never could get bottom nt work lid rest bit hidden drive forth awful lot component today standard think broke cad program cad program guy trying use design hardware could nt handle software wise core operating system made look like bbc mo relocatable module made look like sideways rom service call beeb mirrored go chaining nt hardware paging go one underneath version risc o still bbc inside fact turn one amino set top box debug lead nt half look like finished association amino set top box another company adrian chritchlow guy acorn world built something called alertmecom cambridge home gateway connected internet modem collection zigbee based sensor got burglar alarm function programmable infrared sensor magnetics one keyfob forth really well little sensor got small processor ram rom nt half look like inside well amino set top box alertme sensor great grandchild kept faith built another million unit got operating system like one probably one ever really heard change good plan eh want talk little friend neil sadly longer u stage arthur fired looked like management asked u built bbc micro neil came along said finished writing game best game ever planetoid defender great game got interested writing font manager run arthur wrote two bitmap one well good bit clunky horrible wrote outline font manager later much nicer one still today think wrote window manager think wrote wanted addition two module transformed arthur commandline world desktop based system cautionary tale behind richard manby wrote arthur desktop basic demonstration window manager could using bitmap font forth outline font manager nt ready point piece demoware escaped wild burnt rom boot demonstration write program use window manager never underestimate marketing department get every time write demo sell many time bitten one written great showdown meeting happened say arx arm thursday showdown meeting boardroom acorn morning team paoloalto turned harddrive running arx demonstration far got wonderful thing big mistake told u demo going hand got ticking clock running said click another one run several wo nt able arthur ca nt multitask look clicked three four got running fourth one started system started engage virtual memory started swapping machine hand clock started ticking every second demonstration turned tim dobson written clock program turned ram arthur desktop ticking clock program ran ticked smoothly arx got cancelled next day arx hopeless way acorn could afford go market machine needed ram hard drive day even going slow absolutely going launch smallest amount ram hard drive q something like think sept come jesus meeting said write month hardware early course hardware took longer always nt took year get arthur shipped version earlier q much ram shit load would ukp worth computer little ukp ukp smallest system still fairly expensive compared beebs ukp problem price system ratcheting although functionality going happened acorn opinion went fast functionality curve price crept left enormous gap underneath nintendo playstation everyone else marched game engine took away core market view going back neil wizard idea said coffee machine one day know fool around memc overlay take application program use memory controller whisk away map somewhere else memory map put another program mapped application logical equivalent page bbc micro overlay switch one program another thought well neil would want bother came astonishing idea ever heard return wimppoll instead program call wimppoll instead getting answer back get swapped someone else get swapped get return wimppoll called sometime earlier actually full multi tasking system risc o q wimppoll arthur world arthur desktop called wimppoll operating system swi call would get message mouse keyboard return quite often say null nothing sit polling away responding input neil would call wimppoll would see input message window message another window another task instead returning answer null would return poked around memc put code space thought made call wimppoll next thing far concerned got answer back actually running mean time paged put nt even know thought absolutely brilliant q run multiple clock arthur demo wrote basic program allowed draw lot time absolute fraud said run two clock calculator screwed went second went first showed u demo night said fabulous wrote something exactly better thing system never going fit machine actually going sell fair needed coming end little bit googling risc o arthur various thing found page pleased somebody pointing window task bar decidedly dock like large labelless icon like dock place launch program well somewhere minimise window drag application anywhere taskbar drag arrange mac window box around icon indicates program running blah blah blah apple acquired dock steve job nextstep o stole acorn arthur operating system damn right tragically could nt patent software point one invented came idea iconbar across bottom case anyone ever asked came sat room thinking design different nt get sued apple mac day menu bar text across top thought ca nt go across top go across bottom ca nt use text use icon like proof fact true ever asked icon right left noticed window exactly distribution thing go side thing go side started world physical device left application program right rational first place exactly way point window printer floppy drive turned side become bit confused later version generally ran thing appeared thing appear think come end rant happy take question regale amusing story naughtiness got along way nt dare write q arx actually developing group paolo alto guy called jim mitchell lead arx development team lot highly paid californian software engineer writing would absolutely wonderful needed another year moore law make plausible q started scratch based something paradigm linux like core called mach multithreaded multiuser core trying follow built sort base q bit like mac o x yeah bit like mac o x would nt surprise find guy ended working apple guy colton software u dave joined microsoft seattle shortly window acquired iconbar know idea got q board director acorn technical people arthur project think brian long ceomanaging director financial man herman hauser technical director name jim merryman operation director technical director role herman chris curry busy thing none particularly technical technical lead company really sophie wilson steve furber people tudor brown mike muller subsequent story separated mothership went arm q important think director background electronics hardware programming think look history acorn started chris curry herman hauser herman deeply technical guy lot respect herman guy let go control day day side shortly episode thing really started go wrong rush market release product right time set company employee needed feed kept churn new product financial side running yes vitally important technical people vision see going one lead company need business people execute let go technical vision go pearshaped q say started go wrong release arthur technical guy let finance guy take nt whole story arthur basically product released ready yeah whole thing taken longer completely agree think mad rush design hardware get market meant came price point unaffordable ukp much face competition based amiga ukp machine better expensive nt entry level product underneath extremely tough sell q remember sophie wilson saying similar thing gave talk experience selling archimedes high end model got pulled first people bought low end one people cared price feature yeah sadly exactly right wonderful machine q role beyond arthur decided leave arthur think took left offered lot money go work clive sinclair building machine william stoye took renamed risc o neil raine magic happened watch went thing year designed mark colton machine clive sinclair called laptop ran aa battery screen top black rubber key lot fun pipedream mark written bbc basic richard russell nice machine designing follow going use arm processor nice magnesium case clive bless decided future satellite dish dropped computer went nt need software satellite dish set business q happened quantum leap died sometime long time q mentioned william stoye stoye work semantics programming language related unusual surname think might person phd acorn r group decided move got look risc o q mentioned charge language group came arthur operating system nt seem collection language available one thing history showed acornsoft separate limited company whose mission make money selling software title acorn computer group separate thing got merged together arthur project born acornsoft go exploitation work build software title game game david braben wrote zarch acornsoft game department ready build software title remember got operating system working banging time saying look well good got machine need load application software like order make useful resource took fair time various third party computer concept whole bunch others managed catch start producing enough software impression rhapsody made actually useful would helped group guy beavering away churning title still belief within part acorn temporary solution arx stuff would come back another lot trying build bsd unix going well guy hired working compiler focusing absolutely age compiler anything could nt get anyone put effort making tool go thing interim solution q quiet hear first machine team half dozen people write application could started year q presumably would team nt take arx yes would u writing operating system would job build stuff people q sometime afterwards pc emulator yes guy called ian jack wrote pc emulator nt part team next door office emulator q surprised risc o still attracts many u yes think bonkers q nostalgia think good job given mad history wish computer would boot second head every day confront microsoft window think thing could like time window particularly mac stuff evolved look like risc o got ipads thing like feel horribly familiar q arthur way run one application time yeah exactly think fantastic thing like raspberry pi coming david braben done lot publicise think risc o wonderful really want encourage whole new generation people understand technology got software business ca nt hire anyone know going rare day someone know interrupt know poke register debug anything tool nt work quite problem wo nt tell story arrested premise tool compiler assembler q basic assembler john thackery done assembler arm development kit used basic interpreter source control guy trying write operating system go rom got get right different bit share system file cv source control sourcesafe none solution main system header file constant swi number address everything lived could edit pink dinosaur desk pink dinosaur desk could edit edited without pink dinosaur australian friend brian cockburn would come round see remember squealing stuart made interesting macro change header system without dinosaur brian spent night trying figure stuff nt work finally found got stuart cowering desk saying come want arm giving chineseburn one arm remember going one first show olympia launching stuff acorn massive stand one archimedes one end end lot acorn marketing guy suit acorn abc awful thing olivetti forced stuart ancient brown jumper stuart orange hair great mob around u see showing arthur could hear suited acorn sale guy saying nt know anything need either speak jumper hair actually shadow ram invented chris jordan david barnett first marketed aries computer
352,Lobsters,osdev,OS,What makes BeOS and Haiku unique,https://osvoyager.wordpress.com/2018/11/30/what-makes-beos-and-haiku-unique/,make beos haiku unique,hello package package packaging tool haikudepot updater package system state packagefs package tool haikudepot haikudepot softwareupdater softwareupdater state packagefs please note powerfully simple iconomatic art making canary colored tab option option good user search befs bfs bootfs query attribute hey beos bible scripting guide applescript make stuff pop run fast run well jaguar old beos demo video youtube thread server page white prompt download haiku today download haiku thanks reading general faq like,hello welcome world beos haiku today article going look classic beos see screenshots modernday successor beos haiku operating system also screenshots well meant quick overview simply covering technology personally think make behaiku platform great something wanted put one place refer review haiku release please note anything huge fancy like super cool book beos bible said let get first area take look haiku latest feature beta release packaging package package reading package might evoke merely running package manager gnulinux etc haiku far mentioned haiku beta review first official release feature package management best give anyone new haiku mental picture think packagefs like old slax module system running along usual package tool go recap summarized five quick point versatile commandline packaging tool might expect haikudepot software updater package andor system state packagefs package mounted seamlessly mesh startup side effect f gentle layer safety system quick overview feature seen like package tool may expected operating system yes haiku packaging tool available terminal including ability update listed haikudepot along command line tool come userfriendly application center called haikudepot allows user search install remove package easily along depot course also graphical preflet called repository allows user fetch update system quickly easily similar classic o x softwareupdater yes also graphical softwareupdater much similar feel classic software update preference paneutility shipped mac o first version o x state one coolest area package management go back time boot previous state system thanks new packaging system simply open boot menu choose boot volume select latest state nicely time stamped version cool packagefs ability see pull pull package feature debuted haiku nightly release inbetween era alpha year beta haiku beta official haiku software depot distributed package like illustrating earlier slax module example package intelligently activated system startup live package area side effect new packagefs several folder part visible filesystem readonly little detail worth noting opinion help add tiny amount safety system keeping several folder modification please note folder haiku readonly one good example nonpackaged folder powerfully simple okay next point really first feature new user notice even noticing package covered first new beta user interface manages remain fundamentally true also quite powerful new apple continued job death really could learn past beos area love apple really simple yet powerful sometimes curated walled garden way dedicated pursuit art presentation made thing simple beos way making thing easy use yet put serious developerlevel tool front user still keeping thing simple would classic mac o palm o real craftsmanship notice everything usual usercentric apps like codycam diskprobe nice resource editing utility also useful device tool preference poorman personal web sharing note reader still think calculator dano look better deskcalc also beide think debugger bdb part developer set especially compared various gnulinux distribution run xorg system likewise multiple layer trying mesh together beos haiku everything designed work together harmony application design kept neat similar mac o palm application obey certain behavior keep user experience consistent clear iconomatic art making may noticed beos screenshot icon beos made traditional bitmap advent haiku changed iconography done new haiku vector icon format hvif mean icon scale gracefully efficient lossless lightweight vector format icon scale could theory go much higher like svg using path attribute property define element house system leaf shadow folder surface etc traditional raster icon design simple sentence convey average weighing le raster file replace making icon simple simply add make path point editor choose template either rect angle circle creating choosing path user probably see anything first define path shape simplify quick example add shape style give color went style inside style box underneath style menu nice green circle gradient shape possible well way showing quick haiku make developer artist create new icon course hvif file vector resource definition source mainly used application iconomatic also allows exporting standard svg scalable vector format raster png format may recognize universal format yes export beos icon attribute canary colored tab using beos haiku probably already know small yellow tab window look purpose allow manage app across desktop haiku refers feature stack tile personally think tabbing magnetic edge work like hold option metalogo key pc keyboard dragging happens let go window tab allowing switching tabbing thing haiku window another magical property magnetic hold option meta stick two window together well stick window together might add unlike snapping macos high sierra window use resized together group pretty cool personally like honest reader prefer tab stuff together finishing area yes also usual window feature may expect power user ctrl alt key used move resize visual control reach good user mac favorite view definitely column view someone indeed place folder apple menu dock sort thing even universal feature tracker work across file manager moving linking copying file recent folder menu even trash navigable way well using mere submenu delve folder folder easily go back hovering folder got see browsed two folder almost effortlessly quickly go boot system keep going wanted true lot folder would eventually overlap make mess defeat purpose feature point quick simple way looking around system getting somewhere fast without open extra window often overlooked definitely another advantage haiku make unique search beos maybe first certainly ahead major vendor fully indexed searchable filesystem befs classically bfs confused bootfs hint seen drivesetup tracker builtin find box everything mail contact file instantly returned unique way exist system let first normal search maui desktop return file wanted also show two query beos query saved search thing apple spotlight window vista aero search even apple first foray search called sherlock kind idea around time much hf mac o really tried may hoped query malleable historic beos may edit one would want modern search several indexing tool available user run terminal attribute manually added deleted listed see attribute system index run lsindex brings u next point attribute one neat thing beos attribute available application across system create contact people example everything write attribute notice file size byte tracker understands file person example show attribute click way read back attribute aside tracker beos aware go back terminal nice set attribute utility mess let go ahead listattr nice little person system attribute applied across filetypes system file type universally managed via filetypes preflet preference like one folder option tab window full control file hey one favorite feature macintosh cool rather fun little language called applescript tell computer go sleep beep quit something open series apps say alphabet show dialog box whatever else want fun scriptable action grew automator recently siri shortcut haiku similar functionality hey scripting tool usage displayed nicely showing utilize shown alpha yet fully learn honest said let quit stylededit get title window demo consider want quit application run something like hey stylededit quit close window open like pe hey stylededit get title window haiku return full credit trick go working hey section beos bible scripting guide chris herborth personally despite power thing like hey definitely meant technical audience like developerpower user everyday user telling computer go sleep applescript simple little kid similar functionality osascript work mac o x make stuff pop also create dialog shell script frequent python perl even zenitykdialog dialog bash simply use alert command invoke capability shown also show stop critical also warning haiku something else something actually maclike shutdown box show terminal shutdown ask user normal shutdown command power shutdown r restart could used maybe efficiently option still worth mention run fast run well know really appreciate power beos see mac o handled system stability around time system age around went awesome mac o x got released world compared nimble beos cheetah lot resource heavy would take jaguar second serious release new mac o puma update really start maturing serious platform beos impressively fast time multiple application demo medium file etc could run time without complexity larger system carried instead merely writing old beos demo video youtube illustrates point feature better like workspace everything background color depth left user thread beos everything life multithreaded world notice top standard shell utility show team name thread name thread organized team team simply set thread living coming one application app least main thread force quit box beos haiku called team monitor looking nice graphical utility see team currently running quit team however really visualize nicely really need see using process controller replicant life deskbar haiku see application broken different part set priority keep mind bar live thread cpu usage open processcontroller design letting everything live multithreaded system encouraging developer create application take advantage one area make haiku truly unique something need see experience server another feature unique beos meant fast overview sorry spending time topic server server handle different part current session medium may playing handling network connection simply handling notification volume currently mounted system page white prompt inherited beos haiku includes kernel debugging land builtin debugger summoned terminal needed also appears system crash builtin help available prompt simple straightforward notice even debugger thread exit debugger simply typing continue return user back regular system even much love mac crash instead getting quaint kdl prompt user used get nice little panic box o x mountain lion believe restarting per crash automatic still confess wish haiku could add nice message like apple example end user end lie either mentioned discussing user interface idea empowering presenting user system masking making simple defined beos defines haiku today make one best operating system made today definitely try hardware compatible even download haiku today credit go humdinger haiku original button thread haiku forum case link work direct link download haiku thanks reading course cool haiku operating system point major highlight system thought cover haiku mention general faq page enjoyed article please sure view screenshot tour haiku also featured site well like like loading related
353,Lobsters,osdev,OS,So You Want To Write A Linux Userland,http://tilde.town/~elly/userland.txt,want write linux userland,,want write linux userland target audience document programmer experience writing userland linux program c c want understand userland work bottom init process linux kernel imposes requirement userland give userland author tremendous design flexibility one thing need provide initial binary launch path sbininit etcinit bininit binsh process init run pid init process need two thing never exit init exit kernel panic reap zombie process process exit becomes zombie process state z zombie process resource deallocated still occupies slot process table parent collect exit status via wait process dy child though child process would never exit status collected process table would overrun zombie process linux kernel unixlike kernel therefore reparent process whose parent dy init init responsible reaping process via wait simplest possible init therefore c program int main int status wait status build run linux system init everything work system wo nt useful init sit endless loop failing wait call since child make init useful like int main int status const char shell binsh null fork execve shell shell null wait status init fork subprocess run shell entering infinite loop child process turn create child process fact singleuser commandline system init almost everything need one small problem init single session per boot model first shell exit system becomes useless pretty easily fix init check exiting process shell launched relaunching shell daemon supervisor often however want work background nt running shell example graphical system might need start x might also need start network daemon local service init fork launch process restart exit starting lot logic put process previously responsibility common solution supervisor process init responsible running responsible starting watching state system service example supervisor process common use right upstart systemd supervisor process usually expose interface form ipc well user system control process manages design supervisor process three responsibility launch system service relaunch system service exit allow administrator manually stop start system service lot possible design supervisor process thing pretty clear right init service three thing well launch supervisor process restart exit launch shell restart exit reap zombie login sometimes nt actually want run shell root system every boot case move capability init supervisor process treat ability log service one service per method logging rather like sshd service local login service unix system service actually named login one copy run virtual tty system login service quite simple need accept username password console usernamepassword pair valid change user id setresuid user user id launch shell choice oldest design login program involved file called etcpasswd containing value username hash password user id desired shell newer design many fancy feature like ability authenticate network service still gut login quite simple get usernamepassword look username user database hash password check match hash database print error message yes setresuid user uid execve shell note us setresuid need access password file design login inherently requires root access shell minimum workable shell provide ability execute command subprocesses argument supplied common shell feature include pipe input output redirection background process alias function builtin logic arithmetic operator shell user main interface commandline system usual admonition one thing well often bent broken designing shell small additional feature big improvement life user c library last component likely really need working system c library commonly known libc function provides c function declaration implementation let c program interface system bare minimum c library need contain program startup code arranges stack execution environment conform c expects see abi documentation system detail program startup code commonly written perplatform assembly language another common feature c library c wrapper useful system call widelyused libcs also often contain definition standard type sizet memory allocator malloc string manipulation function strlen friend convenience function system similar system service apis getpwent similar put almost anything c library bear mind anything included truly useful almost c program use system since c library imposes size memory use penalty every single c program build putting together list part need build working useful unix system init supervisor login program shell c library actually quite tractable write none exceeds couple hundred line code minimal form top base build anything want example program might want tool working filesystem l mv cp etc editor assembler start developing system remotelogin system listens network connection invokes login go forth unix
354,Lobsters,osdev,OS,QEMU Advent Calendar 2018,https://www.qemu-advent-calendar.org/2018/,qemu advent calendar,back top mit license,qemu advent calendar feature qemu disk image day december christmas day new package becomes available download every download contains little run shell script start qemu emulator recommended parameter disk image disk image either contained directly download downloaded run script need installed curl wget case disk image contain interesting operating system software run qemu emulator wellknown notsowellknown operating system old new others custom demo neat algorithm run script disk image included download created volunteer qemu community showcase cool software qemu run back top qemu logo benoît canet creative common attribution unported santa hat added stefan hajnoczi website qemu contributor mit license design based website created stefan hajnoczi modified thomas huth source code software licensed gpl available request please write email thomas huth see contact information website us cooky store state door use cooky track collect personally identifiable information
355,Lobsters,osdev,OS,PDP-10/its: Incompatible Timesharing System's source code,https://github.com/PDP-10/its,incompatible timesharing system source code,incompatible timesharing system http itsvictorsemailmanlistinfoitshackersitsvictorse project program missing source code usage docddtmd documentation subdirectory known machine built application detailed list installed program,incompatible timesharing system incompatible timesharing system operating system computer family created hacker mit mit site shut enthusiast continue operate system day notable feature hosted first version emacs zork macsyma maclisp scheme multiplayer maze war virtual memory userspace device driver networking tcpip arpanet chaosnet transparent network file system terminalindependent text output graphical workstation mailing list discussion go http itsvictorsemailmanlistinfoitshackersitsvictorse information project repository contains source code tool script build system scratch goal provide automated build start end user intervention necessary check program source code program missing source code ensure know build program update program latest bug fix enhancement able set configurable option across whole system host name ip address hardware device build currently run simh emulator course delighted test real usage build repository need tool installed make c compiler expect also need sdl type display ensure submodules checked type make emulatorsimh make make make leave built file directory one disk image installed start type start see type go enter see dskdmp prompt type press enter esc g use emulator prompt need type esc l press enter esc g eventually see system job using console ready log type controlz see docddtmd list useful command shut type lock log avoid minute grace period type logout writes shutdown complete safe stop emulator optionally use additional peripheral device attach simulated graphic terminal type start run emulator use knight tv raster display typing start tvcon tv type instead controlz install personal user file add subdirectory user file inside copied directory name limited six character file name must two sixcharacter part separated period overview repository bin binary file necessary bootstrap system build build script conf configuration building doc documentation appear info system src source code program tool build tool build output user optional user file installed documentation see doc subdirectory documentation short introduction beginner list known machine built application major application adventure game c compiler ddt debugger emacs editor logo interpreter mac hack vi tech ii chess program maclisp interpreter compiler muddle interpreter macsyma symbolic math maze war game midas assembler muscom musrun playing music simulator scheme interpreter spacewar game stanford university drawing system teco editor wait emulator detailed list installed program
357,Lobsters,osdev,OS,On Urbit and Exit (featuring Urbit Engineer Ted Blackman),https://www.youtube.com/watch?v=07LE6SAhUdo,urbit exit featuring urbit engineer ted blackman,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature urbit exit featuring urbit engineer ted blackman youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature urbit exit featuring urbit engineer ted blackman youtube
358,Lobsters,osdev,OS,UKL: A Unikernel Based on Linux,http://next.redhat.com/2018/11/14/ukl-a-unikernel-based-on-linux/,ukl unikernel based linux,ling includeos mirageos ebbrt facebook datacenters like,unikernels customized single address space bootable image composed application required bareminimum kernel functionality today unikernels demonstrated substantial performance security advantage monolithic microkernels none yet achieved widespread adoption fundamental problem today unikernels developed forking existing operating system cleanslate design abandoned evolutionary community process made linux success post describe alternative approach pursuing goal making unikernels community supported evolving capability linux gnu c library glibc unikernels single address space library operating system application compiled unikernel required functionality kernel nothing else strippeddown kernel make unikernels extremely lightweight term image size memory footprint also lead security benefit due reduced attack surface many lightweight unikernel implementation eg ling includeos mirageos ling website take mb memory run top ling unikernel includeos base vm start dns server running mirageos compiles kb image since unikernel initialize device service needed application run boot time fast ring transition overhead unikernels eg overhead going least privileged ring application operate privileged ring kernel life ring transition required implement multiprocessing design basic unikernels run multiple process additional improvement come kernelapplication code cooptimized meet specific application need example researcher boston university department computer science carried experiment compare performance linux specialized unikernel named elastic building block runtime ebbrt application chose run memcached memory based key value store also used facebook datacenters researcher generated access pattern representative facebook workload found ebbrt give almost two time improvement memcached throughput target tail latency compared memcached running linux kernel optimizing kernel memory management networking scheduling need application unikernels popular given advantage unikernels still widely used even around decade possible answer found way unikernels developed different effort unikernel development year followed one two approach clean slate forking existing code base clean slate approach developer far control code api necessarily follow posix api use newer language case halvm us haskell freedom unikernels provide enhanced performancesecurity benefit problem approach unikernels abandon battletested linux code entire linux community well maintains linux keep fixing bug newer codebases might thoroughly structured well written match thousand personyears invested development linux decade furthermore linux become goto kernel deployment cloud setting deviating away developing something entirely new mean persuading everyone let go linux unikernels deviate posix api legacy software run unikernels application ported rewritten different nonstandard apis approach unikernel development forking existing kernel codebase eg linux netbsd stripping create unikernel process stripping codebase project change original code much change get integrated back original code base essentially lead maintaining code new project existing developer community take care maintaining nontargetspecific code might even ensure wellintegrated target break without work original contributor port gradual community based approach take different approach developing unikernel follow approach linux glibc project took making working version improving gradually unikernel actually part linux glibc code base huge community maintains unikernel well way would able use entire code base linux glibc without reinvent wheel provide unchanged linux interface developer support existing device driver file system etc unikernel deployed virtual environment bare metal machine achieve might unikernel instance gpu support summer worked red hat intern project ulrich drepper richard wm jones red hat along phd advisor prof orran krieger boston university supervisor james cadden tommy unger ebbrt team boston university also consulted project started goal mind wanted create unikernel linux glibc idea get accepted upstream eventually make change code base possible wanted keep linux interface unchanged change eg zero copy networking come project upstreamed go regular linuxgcc community process architecture came application relevant user space library sitting top glibc instead making system call kernel made function call wrote wrapper library around system call translate direct function call kernel keep application kernel address space stopped kernel creating init process instead called application code finally everything linked together single bootable binary tested setup running simple echo server inside unikernel qemu initial version unikernel extremely promising changed one line linux code base change glibc made ulrich drepper also minimal separate subtree translates system call function call modest change might increase chance eventual acceptance upstream unchanged linux glibc api mean application run unikernel little change additionally mean library make system call used unmodified might need code emulating us pseudo file proc sys hidden implementation detail glibc andor kernel coming iteration ukl currently working next iteration unikernel get rid wrapper library move functionality linux kernel rest glibc plan introduce config option user turn turn functionality required application compile time along plan automatically link time optimization also currently working cleaning unikernel build process right borrowing functionality linux kernel build process eventually hope different gcc target one create application specific unikernel run make ccuklgcc assuming library used fulfill requirement ease creating unikernel huge step towards making unikernels pervasive plumbing done plan incorporate support start feature thread local storage pthreads support calling c constructor boot etc employ research carried different unikernels ebbrt add similar solution eg zero copy networking employing whole program optimization link time optimization resulting codebase automatically create application specific unikernels idea acceptance community gradually add feature community accept maintain long term believe linuxbased unikernel provide viable alternative package fully inpart bypass avoid kernel processing user space dpdk spdk package need reimplement functionality already resides kernel would able build top unikernel approach could eliminate overhead kernelbypass approach address interesting see performance benefit application get compared vanilla linux interesting research direction explored improving performance unikernel comparing specialized effort eg ebbrt unikernel based linux may answer performance security question potential begin addressing question becomes easier deploy application intend go like like loading
359,Lobsters,osdev,OS,Simplicity awakes,http://jehanne.io/2018/11/15/simplicity-awakes.html,simplicity awakes,timer interrupt handler timeslice system call cpu control time signal alarm setitimer select poll kqueue sigtimedwait plan bell lab system call api rather simpler sleep alarm alarm note tsemacquire io multiplexing wait several resource rfork serve several concurrent client filesystem libthread communicating sequential process curse frankenstein complex interaction design philosophy famous essay worse better simplicity correctness consistency completeness minimum viable product timetomarket first mover advantage virus spread pressure improve closer user already conditioned accept worse enough enough repository user one one thing race application developer piece crack time simplex sigillum veri meucci laboratory simplicity correctness consistency composability antonio meucci pier giorgio perotto guglielmo marconi renzo piano leonardo da vinci awake system call system call book new time slice exit noted two simple function sleep tsemaquire still waiting moved user space timeouts support qlock rwlock rendez libposix nonblocking io signal sigset waiter newlib mirbsd korn shell line code timer ringer order expiration tick blocking system call issue future us,nov preemptive multitasking year old initially introduced monitor multics instead relying process cooperatively release cpu kernel registered timer interrupt handler move control back kernel code nevertheless process still able yield control cpu kernel timeslice calling system call system call often distinguished blocking nonblocking depending probability kernel return control calling process code next tick real world nonblocking syscalls might block process blocking syscalls might block depends implementation detail state system runtime classical example blocking system call sleep block certain number second wait could block child process exit read would block chunk data available write would block pipe without enough space new data cpu control time sleep interesting syscall whole point yield cpu process use main use case poll certain resource become available without subtracting computing power could used produce resource tool cooperative multitasking o supporting preemptive multitasking blocking system call like wait read write depend external event return control process soon programmer realized external event might never occur designed way mitigate risk unix introduced signal service like alarm setitimer give back control calling process certain event certain time later new syscalls like select poll kqueue sigtimedwait introduced timeout parameter beginning plan bell lab compared system call linux plan api rather simpler still support bit timecontrol style sleep suspends calling process number millisecond specified argument alarm cause alarm note sent invoking process number millisecond tsemacquire wait number millisecond acquire semaphore design plan provides limited support nonblocking io alarm support io multiplexing program need wait several resource usually call rfork program want serve several concurrent client usually expose filesystem furthermore libthread plan provides implementation hoare communicating sequential process dedicated preemptively scheduled process used issue blocking system call several cooperativelyscheduled thread sharing memory single process used access global state curse frankenstein complex interaction different way handle timeouts unix lesser extent plan direct effect design philosophy explained richard p gabriel famous essay unix c ultimate computer virus worse better worseisbetter model software design implementation following characteristic approximately descending order importance simplicity design must simple implementation interface important implementation simple interface simplicity important consideration design correctness design correct observable aspect slightly better simple correct consistency design must overly inconsistent consistency sacrificed simplicity case better drop part design deal le common circumstance introduce either complexity inconsistency implementation completeness design must cover many important situation practical reasonably expected case covered completeness sacrificed favor quality fact completeness must sacrificed whenever implementation simplicity jeopardized consistency sacrificed achieve completeness simplicity retained especially worthless consistency interface way called new jersey style rush minimum viable product able minimize timetomarket gain first mover advantage quoting gabriel early unix c compiler simple structure easy port require machine resource run provide want operating system programming language important remember initial virus basically good viral spread assured long portable virus spread pressure improve possibly increasing functionality closer user already conditioned accept worse right thing far good early unix like plan aim perfection serving majority user need well enough enough enough unix philosophy spread beyond unix became common wisdom software engineering far early unix plan enough enough look see modern system follows philosophy consistently catch however plan like early unix system evolving whole particularly visible repository whole system evolves together program modified consistently answering ever changing need user plan one application computer operating system split several executables still one thing asymptotic path toward completeness piece progress together provides required functionality really mean split system independent component assign different team following philosophy happened mainstream operating system widespread adoption variety people need served anymore single company thus good apis development tool provided strategic advantage build ecosystem application running certain o would expanded market share unix particularly well suited kind race application developer however process significant overlooked drawback running operating system lose unity coherence operating system became collection variegate software developed variety different team goal taste set best practice piece crack take one application work correctly time fine time application working correctly time probability work correctly together computer clock composition expect roughly time assumption probability system behaving correctly go pretty quickly approaching formula p n ⁿ many program running right curse frankenstein piece crack simplex sigillum veri plan bell lab followed new jersey style beginning still incarnation jehanne meucci laboratory turn design jehanne follow new jersey style rush yet jehanne follow mitstanford style either follow gabriel scheme could say jehanne based upon simplicity design must simple simple easy learn orthogonal abstraction able describe use case conceivable implementation difficult design simple enough correctness design correct observable aspect incorrectness allowed consistency design must inconsistent inconsistency reveals design problem either missing abstraction abstraction orthogonal enough composability completeness naturally emerge desirable side effect goal design must cover important situation practical let user compose abstraction provided build need call set principle simplex sigillum veri deeply inspired work italian hacker antonio meucci pier giorgio perotto guglielmo marconi renzo piano leonardo da vinci awake system call plan support system call counting obsolete one since system call expressed term others jehanne moved duplicate userspace idea smaller kernel surface make easier get right simple long run clean realized sleep alarm tsemacquire somehow ugly supposed mixing orthogonal issue looked missing abstraction hiding awake syscall born long awake long millisecond awake complement sleep book new time slice future fundamental building block used implement service user space like sleep alarm tsemacquire interrupt blocking syscall certain number millisecond failure return success return negative long used identifier release booked time slice wakeup note signal sent process process error string left unchanged blocking syscall simply return process result process register many wakeups want within global system cap wake chance interrupt system call wakeups booked two distinct group interact normal process execution note handler group automatically reset respectively exit noted libc two simple function wrap awake enhance readability awakened tell calling process whether certain wakeup already occurred forgivewkp tell kernel remove certain wakeup primitive trivial move sleep tsemaquire libc particular tsemaquire show pretty well simple idiom awake book time slice future long wkup awake m blockingsyscall jehanneawakened wkup handle syscall timed syscall otherwise interrupted try fail error whatever fit syscall completed release booked time slice jehanneforgivewkp wkup enjoy mindful reader notice alarm still waiting moved user fact boring task fair awake originally designed interrupt rendezvous enable timeouts support qlock rwlock rendez libc beginning clear could generalized composed system call provide service advent libposix used awake implement support posix nonblocking io signal sigset waiter turn enabled port newlib mirbsd korn shell jehanne le line code two kernel process timer ringer cooperate linked list wakeups kept order expiration filled system call tick first element registry expired interrupt handler awake timer prepare collection expired timer ringer start loop interrupt process properly two different process make possible keep processing new wakeups ringer waiting process interruptible state blocking system call interrupted though create notable example blocking system call excluded interruptible one prevent timeout leave orphan file behind issue future us awake used implement timeouts jehanne system call even without libposix provides simple mechanism implement nonblocking io needed used implement timeouts multiplexing io unfortunately interface kernel scheduler awake work user space scheduler keep control task right mean qlockt rlockt wlockt rsleept work linking libthread long run might make slightly difficult port virtual machine programming language provide scheduler user space like go java solution however already outlined libthread usage custom rendezvous simply override system call give control desired scheduler
360,Lobsters,osdev,OS,Formal Methods for Kernel Hackers,https://linuxplumbersconf.org/event/2/contributions/60/,formal method kernel hacker,,formal method kernel hacker
361,Lobsters,osdev,OS,How to Design Software Good,https://www.haiku-os.org/docs/HIG/index.xml,design software good,haiku human interface guideline design software good gon na use user user work summary quality good software good software focus user actual need good software us everyday language good software expose implementation good software us graphical control properly good software natural layout control good software give plenty feedback good software make error hard good application handle error gracefully good software forgiving summary convention haiku program setting format location maintain responsiveness avoid hardcoded file path make app look fit others live update translator squeezing bfs query attribute system tray dinner anymore tracker us getting input user mouse vocabulary aka button scroll wheel keyboard accelerator sport car gui standard system accelerator design prevent fitts dynamic data exchange pas data application drag drop clipboard standardized clipboarddrag data format replicants use text gui error message sorry dave afraid ca nt abbreviation acronym contraction oh capitalization spelling use font special case command line branding program icon window graphic visuals ok corral program icon design tip doorway creative expression graphic stuff cursor predefined cursor us making cursor animating cursor menu menu bar menu field naming organization marking toggling item common menu content program item related operating program file contains item related document handled program edit item menu used different editing task search task menu include finding replacing data navigation command help different way user learn program get help needed window need basic style purpose naming placement size decision bacceptsfirstclick modality special purpose window alert window find window setting window design open save panel control donts button donts checkboxes donts radio button donts control group donts slider donts label donts text control donts text view donts list view donts tab donts scrollbars donts menu field donts popup menu donts progress meter donts toolbars make good error example good error message real world example bad error message,haiku human interface guideline better known write software darkwyrm design software good haiku operating system known speed easy anyone use partly good programmer try design apps going examine also make program appealing reason easy easier use mean people using program writing good software hard worth time effort gon na use probably already know kind program going write put book away thinking first without clear idea want hard something know general kind program would like create also need figure program meant something general desktop user something specific haiku web developer know main user program make certain assumption user know ca nt necessarily expect musician understand effectively use modelling program advanced say studio max expect skill lend using program writing music depending concerned detail may even want create user profile fictional idea example user consist one two sentence several paragraph short user profile contains person first name occupation level expertise kind thing want able computer one thing sure make user profile believable like person might know fact design app may helpful know someone fit target audience nt want design app person specifically rather someone like user people use software get work done unless course writing next hit game despite experience may might make wonder user fairly intelligent saying one read manual mostly true people generally better thing read software manual except either trouble bathroom reading try keep mind busy people valuable time designing program order make work program easier need prioritize kind work order often work done come list task user put one category common uncommon rare common task unsurprisingly thing user time word processor would include typing text changing font size style adjusting margin uncommon task user time time depending user might something like printing label adding color table counting word document rare task done every great often time task one user would quite likely miss possible program would also kind thing percent user le would end using decide include feature handle rare task think carefully task importance grand scheme thing deciding finality paraphrase einstein must make software simple possible simpler complexity must kept minimum one major way done avoiding feature used remote instance task rare group design application meet need percent target audience feature add complexity complexity add difficulty user work know user need figure done general sense include program actually look like however personal finance application one user primary task entering transaction user need type data transaction download bank internet need know kind information task user perform common otherwise actual implementation determined last discussed general usage application determined example user form enter transaction account form text field different kind data payee amount check number somewhere nearby user able see list transaction current account actual building look program take place crucial point development know understand make software truly easy use examine next note technology used actually create program even mentioned yet audience technology merely mean end tool goal summary careful planning key writing excellent software regardless stage development project may order easy good software really needed also help user work wherever possible thoroughly understanding work done program provide best experience possible quality good software come software proof usage piece software requires significant time learn user invest time learning choice use particular software b importance need filled software much greater importance user time short user learn must order job even forced good software focus user actual need chapter mentioned program meet need percent target audience impossible meet need user software still retain semblance easy use sometimes user nt even know need nt need feature designer developer figure needed often better small collection specialized tool one everything good software us everyday language job information technology industry almost always professional position one aspect make profession body knowledge terminology go people rudimentary computerese vocabulary thing look use computer called monitor screen little arrow screen called cursor thing type called keyboard user know care file format fewer still know invalid sector floppy disk might good program use language appropriate audience problem quite lot software intended general desktop user read like yiddish joe user case regular everyday language used much possible file management software volume really disk even though term nt quite accurate normal person think disk storage container volume high really good party image picture person nt kill application hung force frozen program quit detail like may seem minor many small improvement program usability profound effect overall course target audience professional kind term perfectly acceptable sure match everyday language audience doubt err toward using le technical language good software expose implementation good software work certain way best way done close code written certain way dictated underlying api example would music composition program easilyreached maximum song size code monkey wrote used variable instead one sometimes limitation overcome actual code written architecture used written little effect possible user see work using software good software us graphical control properly gui control meant used certain way program use particular way confusing user possibly hazardous user data check box example commonly used list value turned program however us choosing one option list even though radio button meant task text box used labelling control might seem common sense rest assured many program something simple short use standard control way intended good software natural layout control task natural logical workflow good program designed way capitalizes workflow entering address united state natural order name street number city state zip code following order would frustrate user also lead mistake entering data also applies tab navigation order control window generally speaking order either lefttoright toptobottom counterclockwise circle depending control placed expectation associated work done good software give plenty feedback imagine moment started converting movie file another format hit button marked go wait wait go restroom brew new pot coffee get mail box confirm mullet still outofstyle come back wait sure clicked button nothing seems happening something go wrong snooping around file manager find everything ok nt know happening program nt tell good software keep line communication open good feedback mean making sure user know program given time especially program busy something make wait cd dvd burning program tell user much left finished making cd dvd file management program tell many file left copy move web browser animate little icon download web page user natural tendency think nothing seems happening program probably frozen making sure user know program hard work put mind ease good software make error hard said nothing made foolproof fool ingenious even make tough user make mistake example user need enter text certain character allowed disable character text box need entered instead nagging user message box resizing window horizontally done reason nt let user program require selection list user click ok tell user nicely course disable ok button selection made even better solution would select good default choice user give option change build constraint application prevent error would floppy disk notch one side inserted drive one way constraint also good lazy developer software crash le nt need write much errorhandling code good application handle error gracefully even make hard user make mistake expect program deal error possible program handle error way nt leave user wondering happened code written error sort need anticipated handled lack memory lack disk space permission error corrupted file loss network connectivity murphy law state something go wrong given situation probably hope best prepare worst without bordering completely ridiculous handle every error likely occur greatly improves perception software outside world crash unacceptable case period error message example need describe user level expertise happened suggest user remedy situation worst case program need provide easy way user send technical information problem back via email mean case user data preserved one way see well program handle error deliberately try break every way possible feed entire text aunt may quiche recipe text box try open file business given take valid document back open diskprobe enter much junk data like try open break internet connection middle update try use file really wonky filename creative ridiculous fun breaking thing good software forgiving computer excellent tool people good many thing people perspective focus technology human imprecise illogical disorganized make mistake frequently however excellent forming habit matching pattern two thing computer difficult time make command undoable whenever possible possible sure inform user case capitalize computer strength make person inherent weakness summary good software take real work produce stereotypical lazy programmer unless know acceptable lazy creating something value customer good software creates positive image company loyal customer advertising best advertising done customer friend family coworkers convention haiku person generally nt go barging stranger home start redecorating otherwise making home merely owner shotgun program need good manner getting along operating system program user installed system merely good coding practice meant make job easier others ensuring program easily maintained none difficult much work choice follow program setting format location lot way store program setting easiest recommended method placing bmessage flattening bfile using bmessages container nt concern writing debugging code exact location used store depends number file need software need one file ever need one simplest place user configsettings folder however need one file please put folder minimize clutter folder either follow format homeconfigsettingsyourappnamehere homeconfigsettingsyourcompanynamehereyourappnamehere maintain responsiveness probably bestknown quality beos haiku operating system speed largely come extensive use multithreading application responsive necessarily mean program never busy respond input redraw request even something common experience encountered linux window user blanking window entire program busy something else come two thing program one thread execution devoted window thread busy sort timeconsuming work instead falling trap unprofessional confusing user spawn another thread actual processing allow messagehandling thread continue job make sure user know application still running properly frozen avoid hardcoded file path whenever program need specify particular location system use finddirectory function generate day come haiku support multiple user application make smooth transition new architecture also allow backward compatibility older version beos change location bcommonfontsdirectory different place haiku finddirectory supported c c environment make app look fit others certain function call provided api aid making sure software share general look application allow user make customizations system time unless good reason get color program uicolor constant go determine size control dynamically use resizetopreferred getpreferredsize system control calculate size control based font size obtained system instead hardcoded value writing code specifically haiku nt care compatibility beos flavor use new layout api allow better easeofuse user prefers tiny font increase use desktop real estate also older user need larger font size accommodate weaker visual acuity graphic important part program look nt reimplement look button standard control make application stand rest keeping visual consistency rest operating system avoid confusing user button look like click strangeacting menu forth live update one way make sure application communicates effectively user provide live update information mostly relates file system good example address book program automatically remove add entry new people file added people folder information nt even data outside program could simple updating entry list item user type make change form different part gui responsiveness like program help user feel control work prevents possible loss data translator haiku come bit technology allows lazy programmer lazy still program good one one translation kit merely including library making use even something simple btranslationutils class help ensure least portion code free bug general probably find making use image translator order load image resource program use remember translator system addons unless program installed translator particular file format depend format installed default system aside format undocumented require licensing make difficult user access data use open documented format much possible squeezing bfs query attribute filesystem created nothing short amazing even gradual evolution operating system progressed since still one powerful around attribute powerful tool allow store data file without part file kind power easily put use audio file flac ogg vorbis ubiquitous attaching attribute audio file search query query also leverage filesystem power long attribute querying indexed filesystem place file attribute hide top also fast way search file meeting certain criterion although attribute query powerful use good sense take quite read large number attribute file may wish cache writing program need read query make use attribute indexed speed go attribute indexed system tray dinner anymore easily become cluttered install icon deskbar shelf provides information updated often provides functionality frequently accessed user example kind situation would monitoring memory processor load checking mail quick access feature provided personal information management program unlikely user need access information functionality le per session nt use deskbar accessing program menu icon desktop sufficient tracker us tracker quite useful tool program requires little effort provide courtesy user would otherwise lot work open save window already done please use certain type entry needed folder specific type file make filter show type entry removing unneeded item file navigation window reducing number choice user must pick also preventing opening wrong kind file keep mind may file may mime type identified exclude either also make tracker show window particular folder order show user particular file stored give access directly getting input user might seem simple case get input user often case wish account many external factor accessibility speed user expertise mouse vocabulary aka button mouse favorite rodent user intuitive device mouse skill must learned time mouse skill issue user clicking button menu forth sometimes program must deal directly mouse click move mouse operation fall one three category skill expect user singleclick doubleclick primary mouse button single click secondary mouse button drag primary mouse button skill user might drag secondary mouse button singleclick tertiary mouse button singleclick primary mouse button modifier key tripleclick primary mouse button scroll scroll wheel scroll scroll wheel modifier key drag tertiary mouse button nt use clickandahalf mouse mouse drag second mouse multiple click nonprimary mouse button consecutive click quadruple clicking drag tertiary mouse button drag modifier key secondarytertiary click modifier key event program must deal directly handling mouse input certain rule thumb expected skill used single click used common action operating control would selecting item list pushing button choosing menu item placing blinking text cursor btextview double click used secondary function invoking item blistview selecting word btextview secondary mouse click commonly called rightclicking generally used contextsensitive menu case graphic program drawing secondary color mouse dragging used selecting text moving thing around mouse dragging btertiarybutton generally used panning scroll wheel used scrolling program may use scroll wheel used modifier key scroll wheel bcommandkey zoom inout boptionkey scroll one full page bcontrolkey increasedecrease font size keyboard accelerator sport car gui advanced user often like using keyboard shortcut common task reduce considerable amount time spent switching keyboard mouse standard system accelerator bcommandkey n new document bcommandkey open document bcommandkey save document bcommandkey shift save show save dialog window bcommandkey p print bcommandkey w close active window bcommandkey q quit bcommandkey c copy bcommandkey x cut bcommandkey v paste bcommandkey f show find window bcommandkey g find bcommandkey boptionkey f show replace window bcommandkey l replace find bcommandkey setting window bcommandkey b word processor bold font bcommandkey u word processor underline font bcommandkey word processor italicized font bcommandkey select bcommandkey z undo bcommandkey bshiftkey z redo tab shift tab keyboard navigation bcontrolkey tab switch program choosing keyboard accelerator program use commonlyused task use one system combination task different list confuse frustrate user choose key combination easily associated function go example tracker us alt go parent folder current window command key main shortcut key option key generally used modify existing shortcut closely related function command f show find window command option f show replace window design prevent fitts according mr fitts using mouse pointing device amount time take point something proportional far away something big might seem obvious often overlooked program designed easiest place user click four corner screen pixel directly cursor reason mouse need moved click pixel user think much moving cursor corner soon reach edge go farther direction regardless much mouse moved deskbar one corner screen reason design graphical interface program make control easy click toolbars text label part button inherently easier click label add size button number existing image editing program use secondary mouse button popup menu access common feature mouse nt move order bring menu researcher even experimented circular menu called pie menu capitalize fitts law order make menu fast possible program need go measure keep mind teeny control slow user dynamic data exchange pas data application drag drop confused falling reptile ability user click object drag target drop make target something familiar empowering direct manipulation method nonetheless draganddrop paradigm used make sense rearranging item list file management opening file dragged app tracker etc plan supporting dragging within program program even little bit support drop probable target program nt normally difficult drop program come either tracker form entryref within program drop program required especially convenient nice bullet point marketing blurb program implementing dragging sure program provides feedback dragged often best done using image closely represents dragged possible rectangle size dragged item selection used place picture feature helpful user drop feedback time user dragging something cursor pass program window react way show user program accept dragged object drop feedback take variety form list control draw line two item show dragged item would placed user released button btextview control show line dragged text would placed dropped user drag entry folder tracker shade slightly color well could highlight border possible way enough get idea mentioned feedback good thing tm allows user better understand use program get something done clipboard another way getting data one program another via system clipboard unlike form data exchange using clipboard requires little effort code plunk data particular bmessage standard control already btextview class already implement copying cutting pasting way keyboard accelerator case like want add menu item le advanced user standardized clipboarddrag data format plain text easiest describe basic code snippet clipboard adddata textplain bmimetype yourtextstringhere styled text use format plain text add text run array field message also probably wo nt need worry unless writing word processor something similar clipboard adddata applicationxvndbetextrunarray bmimetype runarray runarraysize generic file reference amount data wish pas another program large place clipboard without straining system dump data temporary file place entryref point clipboard instead audio video file commonly suffer problem call addref field name ref add entryref pointing file wish pas may multiple entryref object sent program going handle kind drop file reference look multiple entry ref field unless would inappropriate image data program us different kind data already standardized guideline follow program use first make sure data put clipboard generalized form possible field typenamedescriptions bstringtypeclass bbitmap brecttypeframea brect containing bound bitmap data pixel colorspace constant image data flag argument bbitmap number byte per row including padding brawtypedatathe raw image data bpointtypebe locationthe location image data copied may ignored replicants replicants take cue dolly sheep allowing bview cloned allow really neat thing tm cool replicant technology emerging technology operating system unfamiliar user general best left extra feature primary mode operation program guideline using however appropriate program replicant lightweight program provides information feature user want able access frequently allow size dragger handle computing layout sure big enough get lost placed busy desktop background time take user desktop unless want happen pixel square good minimum size example provide reliable way user control replicant rely menu provided dragger handle handle may hidden instead provide another mean immediately obvious least show popup menu user click either button clickable control place frame around replicant border stand surroundings make visually distracting mainly amount avoiding lot bright color control limiting amount animation movement use text gui almost without exception writing program need pay least little attention us text believe right way wrong way guideline text might seem trivial paying attention seem like niggling little detail set good program apart rest else mentioned chapter use language appropriate audience time mean avoiding technical term clear concise error message sorry dave afraid ca nt perhaps place use text error message appear seldom possible anticipated handled many error condition possible tried blow real good right program ca nt handle particular error error message given user following explain happened everyday word provide enough information know happened without providing detail could confuse user example mail client sends request server email server fails respond way explain might something like mymailapp could check email mail server respond contacted offer suggestion help user fix problem possible using example one possible suggestion might try checking internet connection web browser web browser work mail server might working correctly may want try later ellipsis series dot used tell user control often menu item button require input example menu item named display window title new however creating new document require showing window ellipsis used please sure use character instead period haiku keymaps allow type ellipsis option period keyboard shortcut abbreviation acronym contraction oh sometimes space premium abbreviation acronym contraction come handy instance also confusing whenever possible avoid using many time reason enough space nt used efficiently possible use abbreviation please sure absolutely necessary common clear appropriate program target audience example using octothorpe symbol abbreviation word number english language fit criterion case guideline also apply acronym example acronym cmyk cyan magenta yellow black acceptable color picker image processing application designed graphic professional one meant child menu button label never abbreviated contain acronym special care must used contraction pitfall user using program native language require advanced command language avoid using place role crucial conveying meaning message example checkbox message dialog checkbox marked nt show message unchecked default reworded always show message checkbox checked default capitalization spelling nothing unprofessional spelling capitalization error spelling strong suit consult spell checker dictionary least friend particularly important working language native one use sentence capitalization place follow normal grammar rule language english mean capitalize specific name like tracker deskbar use font good use font way make program visually appealing used well make ugly hard read worse stick plain bold fixed system font maintain general visual consistency across operating system perfectly acceptable use different font size need heading something similar try limit number different size window lot different font style size harder read look unprofessional control label always system plain font size specified system calculating layout control sure depend system font set particular font size bcontrolderived control implement method getpreferredsize resizetopreferred take font size account basic idea line height font calculated calling bfont getheight adding together value fontheight structure lastly depend user particular font installed system unless willing ensure user installed system font handling program responsibility user follow route sure check see redistribution right font license font question special case command line designing program work commandline environment special consideration must addressed interaction program use shell script generally consistent interface commandline program thing need keep mind major design decision make program get data option available feedback user given spend time thinking program interact shell program time boil whether program fileoriented streamoriented streamoriented program like grep le work pretty much like filter getting data stdin dumping data stdout fileoriented program like zip given list file program operates program certainly choose primary method influence design decision later seriously consider handling wildcards instead relying shell program fileoriented mean work developer also reduces typing thus typing error user course nt make sense support wildcards nt choose option going accessible commandline switch carefully make one available fill reasonably common task perspective user adding option adding feature turn increase complexity program provide gnustyle double dash long name switch option commonlyused option also short singledash single letter counterpart switch help h reserved showing help information standard unix application l tar df etc required follow standard h order avoid breaking backward compatibility new commandline program need follow also program requires one parameter user favor show help message extra parameter instead telling user retype command help switch option requires particular value also standard user provide information gnustyle command option follow format optionvalue option enclose value quote multiple value switch commaseparated shortstyle command option place space value follows like mentioned wildcards handled program except make sense program something modifies data make sure program requires sort parameter switch file whatever data lost user invokes program without knowing assume user sharper bowling ball expect user expert knowledge operating system matter program program merely report information l df come mind required long information displayed give user idea program sure give enough feedback program thing like graphical program long task inform user progress may something complex fullfledged progress meter drawn text simple series period listing file operated something else program provide sort feedback time program may print nothing quiet option user specified feedback program give nt even excessive give general detail verbose option provide detail program default explained earlier chapter error message technical absolutely necessary helpful whenever possible program requires parameter sort nt given show either message help option abbreviated version still reasonably informative along something point user help option detailed information branding program icon window graphic visuals ok corral discussion may beginning think welldesigned program mean going boring look definitely interesting look drying paint plenty freedom creativity along suggestion help get started program icon program icon one easy way set apart rest pack beosstyle icon follow one two perspective flat isometric flat icon look like headon view isometric icon look icon point right object angled line degree horizontal good icon give program favorable professional impression people otherwise nt know thing program take time create find goodlooking icon whatever nt slap together shabbylooking icon would better provide icon rely system show default application icon one reflects poorly program reputation detail icon creation consult haiku icon guideline design tip remember small nt use much detail use color combination pleasing eye tie general color scheme program one doorway creative expression give credit program make window nt need especially fancy inclined contain title program version author name company copyright information nothing else write line code show baboutwindow information enough lot information show using marquee effect automatically scroll information least readonly text view scroll bar include information computer amount ram processor speed nt belong certainly may show something short licensing program like distributed term gnu public license full text license belongs elsewhere window tab either button marked close simply disappear clicked also respond command w keyboard shortcut graphic stuff graphic need limited window program icon also use background image bviews toolbars button place hardandfast rule tip might find useful follow do donts toolbars mentioned chapter background image busy reduce overall readability program us small picture may want package resource file prevent somehow coming missing installation user machine crazy thing happen people computer cursor predefined cursor us predefined cursor icon haiku variety us including text selection hyperlink resizing default hand used anything else making cursor easily make cursor purpose different cursor dramatically improve well user work program moment cursor pixel square sure hot spot actual location passed application mouse button pressed obvious good hot spot tip hand cursor point arrow center crosshairs use full dimension available increase cursor visibility high screen resolution note ever busy cursor beosbased operating system deliberate design decision need busy cursor need make program responsive often use multiple thread eliminate need busy cursor animating cursor haiku provide explicit support animate cursor provide little graphical appeal kind movement display use animation sparingly distracting menu menu bar menu field menu everywhere common may far many program could use better attention small detail program menu one common difference good program great one developer pack lot feature small space still force user remember menu afford exploration interface step chapter focus primarily issue related menu general popup menu menu field discussed chapter naming organization choosing good name menu menu item generally difficult menu name short accurately describes kind item contains instance file menu copy paste item name menu item concisely accurately describe function performs item capitalized described chapter ellipsis used item requires action menu item open window name item window two way organize menu nounverb method verbnoun method nounverb name menu kind object operates item menu action performed object example file menu contains item open print save close verbnoun name menu action item object action performed two example menu could view go standardized menu edit menu follow either method item organized grouped function andor attribute use separator item item group example would edit menu look like edit undo redo cut copy paste undo redo perform related though opposite function cut copy paste clipboard function belong group separate undo redo font menu would group font style together organizing menu menu bar try logical progression one menu another financial program might menu program file account transaction help submenu another possibility grouping menu item particularly attribute avoided option exist slow user also add complexity interface user may also trouble navigating submenu fine motor skill required submenu item consider placing toplevel menu marking toggling item menu also contain item indicate state feature visibility tool window preferred method place checkmark beside item indicating positive state le confusing dynamically change menu item label advantage used choosing two state expense screen space two state possible state need listed order prevent confusion example good tooglingmultiple state item usage help open show tooltips go myapp website font choose font normal bold italic bold italic strikeout underline common menu content description menu common many program common guideline use consistency program program exception program menu menu used make sense program program item related operating program app name show window commonlyaccessed item provide keyboard shortcut window used customize setting program submenu program couple setting quit command q bottom item menu separator go clicking item close window quit program file contains item related document handled program new command n create new document item ellipsis show window asking information example canvas size drawing program nt command open document disk open recent submenu file menu allow fast access recent document open window kind except program us onewindowperdocument architecture number recent item limited item close command w function item depends program architecture program one document per window close window one open window quits program although recommended program allows multiple document shown window item close one document save command save current document show window unless new document yet saved normally show window ellipsis necessary save command shift performs basic kind task save always show window save item executes save command document program procedure handling new document yet saved follows remember current document window document needing name bring front open save window save document proceed next document needing name document processed bring window originally active one back front note procedure applied closing program revert undoes change made document since last save import import data another file format new document like always show window export convert data current document another format like save always show window reserved lossy conversion program save data multiple format without information loss available save save menu item instead page show page setting window printer setup command p always show print window printing current document intended toolbar button pressed edit item menu used different editing task undo command z undoes recently performed edit possible item dynamic also include name task would undo undo cut undo typing user operation change document data changing zoom level like included undo operation redo command shift z undoes recent undo operation like undo menu item also dynamic possible cut command x copy currentlyselected data current document clipboard remove document copy command c copy currentlyselected data current document clipboard paste command v insert data clipboard current document existing selection current document paste operation replaces selected data pasted data like undo redo menu item dynamic according clipboard content paste text paste image select command selects data current document search task menu include finding replacing data navigation command command f always show find window program find window allow user choose whatever option desire find disappear actual find executed find command g repeat recent find find performed program yet show find window command normally show window ellipsis needed help different way user learn program get help needed open show manual program new window manual never shown balert prefer opening html readonly text file using preferred application set user showing noneditable text view text copied go myapp mycompany website open default web browser website program program company respectively window need basic window common control every developer know basic use properly operating system suffer overuse abuse window bizarre error message incessant confirmation wrong window type task many mistake learn proper way working window overcome major usability hurdle style purpose haiku allows specify look feel creating window setting properly help user immediately know kind window dealing also restricts operation allowed perform lookpurpose documentwindows containing user document editor viewer titledgeneral purpose floatingtool utility window modalmodal window borderedalerttype dialog window borderlesssplash screen feelpurpose normalgeneral purpose modal subsetonly need block window subset modal appwhen user decision required continue rest program modal allwhen user need make systemcritical decision system shutdown confirmation use feel absolutely floating subsetwhen subset window need take priority subset floating apptool utility window floating allsystem monitor window user always want visible like modal use absolutely necessary typelook feel titledtitled normal documentdocument normal modalmodal modal app floatingfloating floating app borderedbordered normal probably time end using titled document window occasional floating window borderless window used frequently splash window displayed program loading bordered window way window tab nt used much except balerts modal window nt used absolutely necessary reason explained modality section chapter naming placement size decision merely knowing kind window look feel use given situation enough also aware resizing zooming moving closing minimizing affect program different way know kind window need also figure initial size location going also restrict action user perform window unless good reason include nt want write code handle care given name used window main window program include program name window opened menu item name menu item without ellipsis document window include document name first new document application use name untitled subsequent new document appending number titled window never empty title bar size window depends number factor application window initial size minimum needed see control without overcrowding control never overlap initial size also minimum size window passed setsizelimits initial size document window large enough see entire document least significant portion document larger screen arbitrarily restrict resizing unless make sense allow resizing particular direction window allows resizing size generally saved closed program quits restored size shown zooming similar resizing difference permit zooming done utility window example intended main focus program allow zooming even though allow resizing except inappropriate document window expand fill sensible space allow viewing editing often time entire screen program nt make sense image viewer example set size fit exactly image currently shown current zoom level placement window screen also varies depending usage program window initially either show center screen little use bwindow centeronscreen go initial placement document window additional document window duplicate recent document window frame offset window tab height direction size program generally remember screen placement window movement restricted unless good reason window need always visible duh considering hidden closed altogether may bit confusing generally document allow minimizing make possible user get document way moment without close entirely utility window program window main window normally permit minimizing allow closing main window allow minimizing note program focus utility window floating subset floating app behavior hidden window normally allowed close unless good reason number time document mentioned prevent something unless sufficient reason particularly platform developer known disallow resizing nt want bother writing handler code instance example window could closed code design flaw would cause crash window closed remember work making program helpful mean le work user mean program easier use bacceptsfirstclick macos x feature flag enables called clickthrough mean clicking window pass click control mouse time even window focus rule behavior used time quite useful system monitor program deskbar forth typically flag used helper application utility window note user override mouse preference wish forcing window accept first click modality default window beos operating system modeless meaning click window besides one focus occasionally need force user make decision moving appropriate time use modal window need far le often many would believe however time reason use modal window would would make potential user lose data nothing done code architecture prevent follows restriction good reason way thinking mentioned modal window place restriction window ca nt click special purpose window alert window alert window single easiest way make usability mistake often used show error message problem used far often error message used technical regular user understand plain useless also used ask user question often question asked could easily answered developer thought ahead bit whatever take gracefully handle error without bothering user option exhausted show error message help writing good error message see chapter ask user question sure one honestly ca nt answer ca nt without possibly disturbing way user work example good courtesy ask user would like program default handler particular kind file program installed never acceptable ask user sure want quit program asked quit handle unsaved document quit question asked action involves undoable destruction data deleting file instead moving trash avoiding kind situation entirely better solution confirmation asked often user develop habit confirming without second thought asking question rendered moot use alert window please follow guideline notification error message use ok label button asking question make least destructive common choice default avoid yes button label much better use name action label save change discard change rare case yes label best choice find window window used search data document different others used help hinder annoy user searching need shown user need set search term set window disappear search performed find window stay visible clutter screen often obscures part current document even result search also place program separate mode generally avoided search default caseinsensitive search option allow case sensitivity search regular expression option normally limited program programmer intended audience setting window design window allow user change various program setting another place developer commonly commit usability faux pa two common mistake poorlychosen default inappropriate language target audience many choice guideline making good one choose default fit number people possible change take place immediately instead requiring user click ok provide button revert change also set default value provide setting significant feature would include thing like default file format cd ripper european v american date format although systemwide setting used instead default account mail client unncessary setting include use in key paste confirm program quit use language appropriate target audience mentioned chapter example web browser option move system caret focusselection change requires technical knowledge better way label option would allow text selected keyboard refer option difference many people understand open save panel bfilepanel used opening saving file using well merely showing list file remember location user viewing inaccessible reason show home folder possible make use file filter eliminate file program handle filtering bad file eliminate error time reduce amount time user need find file want reducing number option offering possible file name saving new document another way help user title panel need match task whether import export save save open something else control beos operating system perhaps fullyfeatured others posse control bread butter working gui program basic usage obvious sake sure want program best covered detail basic advanced detail button button around u computer world real one button used invoke command much le often show window donts button dodo nt use getpreferredsize resizetopreferred reduce work avoid using one button opposite function without appropriate feedback leave sufficient padding around make small ridiculously large like pixel square word ok font size point leave blank show menu one use label change label font checkboxes checkboxes like light switch label attached aside turning option also used quickly choosing multiple selection list choice donts checkboxes dodo nt label checkboxes user understands ahead time clicking use care calculating bounding box carefully choose label text use choosing one item list use group radio button instead use checkbox place button use list checkboxes progress indicator radio button radio button used choose exclusive choice list choice also used turn option plenty space donts radio button dodo nt label radio button user understands ahead time clicking one use care calculating bounding box set default value carefully choose label text use individually use way checkboxes use group consider list view instead control group control group namely bbox class often abused wellunderstood control group visually associating different control work together common function unfortunately often used fluff donts control group dodo nt label control group use control group lot control window use control group label single control nest control group use control group around control window mix control group border style slider slider good way allow user choose value must within certain range especially effect nt exactly concrete value meaning user good us slider include setting volume mouse acceleration movie playback position donts slider dodo nt label end slider show tick mark value slider distinct increment place largest value right top use appropriate orientation label slider position increment size change logarithmically use slider progress indicator scrollbar label slider position slider fixed increment size label label help user know particular control control beos api include handle label section deal label included control one created donts label dodo nt label control use separate label layout make hard use control builtin label use proximity associate label control use label large amount static text consider readonly text view use separate label object control label function builtin text control text control oneline editable text box useful entering text form donts text control dodo nt disable character nt want field try hard validate text entered make large enough accommodate length common entry allow clipboard operation possible use text control label make small use static text arbitrarily limit number character without good reason text view text view multiline text control also provide undo styled text number useful text function donts text view dodo nt disable editing use one display static text allow undo selection text unless good reason allow clipboard operation possible use one singleline input forget pad text rectangle inside text view list list used display lot individual item possibly hierarchy also allow multiple single selection donts list view dodo nt provide way select item multipleselection list sort list use enough space display couple item try use select hundred item use search instead use list item toggle option like list checkboxes tab tab quite handy displaying multiple view small space unfortunately seem suffer easy abuse donts tab dodo nt use tab manage organize otherwise complex dialog window use list instead tab manage large number view use tab select particular mode nest tab view use many tab scrolling needed see place confirm cancel button inside tab overlay toolbars using tab use vertical text vertical tab use tab one side use one tab use unlabelled icon tab title use scrollbar scroll form inside tab scrollbars scrollbars unlike tab tend abused use display item fit screen nt overuse donts scrollbars dodo nt adjust range step size target view resized scroll form try customize look use like slider control nest bscrollviews menu field menu field button display label pop menu clicked donts menu field dodo nt use place radio button space limited remember follow menu construction guideline mentioned chapter use instead menu bar main program menu popup menu popup menu differ regular menu invoked anywhere screen donts popup menu dodo nt make popup menu sticky use popup menu context menu show popup menu clicking button similar nonsensical control daisychaining use popup menu tooltip use primary mouse button show context menu progress meter bstatusbars used show progress beos operating system donts progress meter dodo nt choose color carefully nt use default use whenever operation potential take properly label progress bar use slider scrollbar progress bar use progress bar control separator toolbars toolbars little collection graphical button used providing fast access commonlyused function donts toolbars dodo nt use speed access common function use icon standard set possible make function button obvious icon used follow specific icon guideline toolbar icon add toolbar look scroll toolbars use put many button toolbar many toolbars screen make good error nature perfect developer make mistake program without bug mentioned earlier condition could cause error anticipated handled much reasonably possible instance nothing left done except show error message helpful polite nontechnical possible example good error message uhoh could nt create playlist boothomeplaylistsfoo may happened number different reason often happens making playlist nonbeos drive one shared window certain character question mark slash cause problem disk may want check name artist album song character put good substitute place remove character entirely myapp ca nt copy file disk nt enough space would like copy move delete file destination disk try myapp nt recognize data file boothomefoo might myapp file perhaps file corrupted website reading message mean made mistake nt worry sure reading people freaking around testing circuit rebooting system even typing resumés kidding please try back minute still plenty great stuff real world example bad error message wrong button button nt work solution try another project file e wsfoo may modified disk preceding source control operation however also made change project saved reload project lose current change nt risk overwriting new change disk usually much worse want reload yes mail engine error spell check cancelled unexpected error please investigate system error unspecified error question information need user immediate attention
362,Lobsters,osdev,OS,FreeBSD 12 has been branched into -STABLE,https://svnweb.freebsd.org/base/stable/12/,freebsd branched stable,svn mergeinfo,svn mergeinfo
363,Lobsters,osdev,OS,ニンテンドウ64 (Linux on Nintendo 64),https://speakerdeck.com/murachue/nintendou64,linux nintendo,fewer faster,copyright fewer faster llc slide content description owned creator
364,Lobsters,osdev,OS,How does virtual memory work?,https://drewdevault.com/2018/10/29/How-does-virtual-memory-work.html,virtual memory work,earlier article pointer,virtual memory essential part computer several decade earlier article pointer compared memory giant array octet byte explained abstraction make top actual fact memory complicated flat array byte article explain astute reader earlier article may considered pointer say system bit long address byte exbibyte memory gib ram computer give rest address space answer kind thing small subset address space mapped physical ram system computer called mmu memory management unit responsible managing abstraction enables us address space abstraction called virtual memory kernel interacts directly mmu provides syscalls like mmap mmap userspace program virtual memory typically allocated page time given purpose allocation along various flag documented mmap page call malloc libc us mmap syscall allocate page heap assigns subset memory asked however since many program run concurrently system may request page ram time physical ram get fragmented time kernel hit context switch swap page table next process used way give process clean address space provide memory isolation process preventing accessing memory sometimes however case shared memory physical memory deliberately shared multiple process many page also combination readable writable executable latter meaning could jump execute native code compiled program file mmap executable page load memory jump huzzah running program jits dynamic recompiling emulator etc job common way reduce risk popular bsd enforcing wx writable xor executable page either writable executable never sometimes memory think actually blow ram budget across whole system swap get involved page ram swapped disk soon program try access page fault occurs transferring control kernel kernel restores swap damning poor process fate return control program another common use virtual memory memory mapped io example mapping file memory efficiently read write disk map sort hardware video memory computer probably pretend initially boot simple cell text buffer available address tinspire cx calculator read current time realtime clock summary mmus arrived almost immediately computing scene become increasingly sophisticated ever since virtual memory powerful tool grant userspace programmer elegant convenient efficient access underlying hardware
365,Lobsters,osdev,OS,Native OKL4 Web Browser (2010),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.378.5764&rep=rep1&type=pdf,native web browser,,obj length r filter flatedecode stream hl dt 戡 j endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text imageb imagec imagei colorspace r font r r r xobject r endobj obj length r type xobject subtype image width height interpolate true colorspace r intent perceptual bitspercomponent filter dctdecode stream jfif mm b j lk lk adobe photoshop macintosh ƞ h h jfif h h adobecm adobe u n n q
366,Lobsters,osdev,OS,A Plan 9 C Compiler for RISC-V,https://www.geeklan.co.uk/files/oshug69-Miller-criscv.pdf,plan c compiler riscv,,äüöß obj stream endstream endobj obj endobj obj stream qx x ybj endstream endobj obj endobj obj stream endstream endobj obj endobj obj stream c endstream endobj obj endobj obj stream endstream endobj obj endobj obj stream endstream endobj obj endobj obj stream xqv p endstream endobj obj endobj obj stream st endstream endobj obj endobj obj stream h aӭ g ay endstream endobj obj endobj obj stream xk jhk endstream endobj obj endobj obj stream nl x ʆ εҍ r vx yx xc endstream endobj obj endobj obj stream g k endstream endobj obj endobj obj stream lz endstream endobj obj endobj obj stream q endstream endobj obj endobj obj stream u z r endstream endobj obj endobj obj stream k n ѕ endstream endobj obj endobj obj stream endstream endobj obj endobj obj stream r כ z e endstream endobj obj endobj obj stream v endstream endobj obj endobj obj stream n u k endstream endobj obj endobj obj endobj obj stream endstream endobj obj endobj obj stream cǉs q rdae b l n n ni e w p l tv r endstream endobj obj endobj obj endobj obj stream endstream endobj obj endobj obj stream w oz
367,Lobsters,osdev,OS,"LegoOS: a disseminated, distributed OS for hardware resource disaggregation",https://blog.acolyer.org/2018/10/22/legoos-a-disseminated-distributed-os-for-hardware-resource-disaggregation/,legoos disseminated distributed o hardware resource disaggregation,legoos disseminated distributed o hardware resource disaggregation http legoosio splitkernel architecture hardware disaggregated o also legoos process component monitor memory component monitor storage component monitor minimal global state implementation evaluation enlarge,legoos disseminated distributed o hardware resource disaggregation et al osdi one interesting trend hardware proliferation importance dedicated accelerator general purpose cpu stopped benefitting moore law time seen networking getting faster faster causing u rethink tradeoff local io network access monolithic server unit packaging collection device starting look le attractive lead inefficient resource utilisation since cpu memory job allocated machine lead eviction even utilisation overall low eg difficult add move remove reconfigure hardware component installed server leading long upfront planning cycle hardware rollouts odds fastmoving rate change requirement creates coarse failure domain hardware component within server fails whole server often unusable work well heterogeneous device rollout eg gpgpus tpus dpus fgpas nvm nvmebased ssds fully support growing heterogeneity hardware provide elasticity flexibility hardware level break monolithic server model envision hardware resource disaggregation model hardware resource traditional server disseminated networkattached hardware component component controller network interface operate independent failureisolated entity hardware resource disaggregation enabled three hardware trend rapidly growing network speed eg gbps infiniband slower main memory bus bandwidth main memory bus facing bandwidth wall future network bandwith line rate even projected exceed local dram bandwidth think many design assumption turn head network technology intel omnipath rdma nvme fabric enable hardware device access network directly without need attached process hardware device incorporating processing power making possible offload application o functionality hardware perspective seems open bunch exciting possibility earth operating system look like world question paper set address design legoos legoos distributes operating system function across collection looselycoupled monitor run manages hardware component initial implementation go big three processing memory storage yes mean processor memory separated network biggest challenge focus building legoos separation processor memory management modern processor os assume hardware memory unit including main memory page table tlb local simply moving memory hardware memory management software across network work legoos available http legoosio splitkernel architecture singlenode os eg linux view server unit management assume hardware component local running o processor accessing everything else remotely cause high overhead make processor single point failure multikernel solution run kernel coreprocessorprogrammable device within server use message passing communicate server still run within bound single server though access common hardware resource memory network interface hardware resource disaggregation fundamentally different traditional monolithic server model complete disaggregation processor memory storage mean managing one local access hardware disaggregated o also splitkernel architecture break traditional o function looselycoupled monitor running managing hardware component monitor added removed restarted dynamically monitor communicate solely via network messaging two global task splitkernel o orchestrating resource allocation across component handling component failure legoos legoos follows splitkernel architecture appears application set virtual server vnodes initial implementation focus process memory storage monitor communicating via customised rdmabased network stack vnode unique id ip address storage mount point legoos protects isolates resource given node others internally vnodes comprise multiple process component pcomponents memory component mcomponents storage component scomponents writable shared memory across processor legoos support linux system call interface unmodified linux abi distributed application run linux seamlessly run legoos cluster running set vnodes process component monitor hardware memory function page table tlbs responsibility mcomponents pcomponents left cache see virtual address use virtual memory address cache previous study show today network speed meet application performance requirement memory access across network fortunately many modern datacenter application exhibit strong memory access temporal keeping small amount memory eg pcomponent moving memory across network therefore work well practice pcomponent cache called extended cache excache placed current processor lastlevel cache llc excache managed using combination hardware software software set permission bit line inserted hardware check access time legoos process monitor run kernel space pcomponent manages cpu core excache us simple local thread scheduling model target datacenter application thread assigned core run completion scheduling kernel preemption common scenario since legoos freely schedule process pcomponents without considering memory utilisation already win utilisation need push perfect individual core utilisation legoos preempt pcomponent end needing schedule thread number available core memory component monitor memory component used anonymous memory heap stack memorymapped file storage buffer cache memory monitor manages virtual physical address space allocation deallocation memory address mapping process address space span multiple mcomponents application process home mcomponent initially load process handle virtual memory space management system call home component handle coarsegrained high level virtual memory allocation mcomponents perform finegrained allocation optimisation legoos see section paper delay physical memory allocation write time storage component monitor legoos provides posix compatible file interface core storage functionality implemented scomponents design stateless request storage server containing information needed fulfil request although support hierarchical file interface internally us simple nonhierarchical hash table reduces complexity implementation making possible storage monitor fit storage device controller limited processing power minimal global state legoos three global resource manager process memory storage resource gpm gmm gsm example global memory resource manager gmm used assign home mcomponent new process creation time gpm allocates pcomponent global resource manager run one normal linux machine implementation evaluation legoos sloc sloc driver ship three network stack customised rdmabased rpc framework used internal communication designed save nic sram eliminating physicaltovirtual address translation socket interface implemented top rdma traditional socket tcpip stack network communication core legoos performance chart comparing network latency three stack legoos networking stack outperform linux microbenchmark evaluation mcomponent performance compared linux singlenode memory performance show general worker thread per mcomponent using mcomponents improve throughput four worker thread similar vein storage microbenchmark compare legoos scomponent performance compared singlenode linux interesting performance legoos real unmodified application evaluation us tensorflow phoenix singlenode multithreaded mapreduce system evaluation us one pcomponent one mcomponent one scomponent legoos vnode tensorflow excache phoenix excache following figure show slowdown running legoos compared remote swapping system b linux server swap file local highend nvme ssd c linux server swap file local ramdisk system legoos main memory size set match excache size around working set legoos slowdown tensorflow phoenix compared monolithic linux server fit working set main memory legoos performance significantly better swapping ssd remote memory largely efficiently implemented network stack simplified code path compared linux paging subsystem optimisation delay physical memory allocation write time author also conduct interesting analysis expected failure rate legoos cluster compared monolithic server based mttf rate hardware failure requiring replacement available data assumption monolithic server legoos component fail hardware device fails device fail independently enlarge better resource utilization simplified hardware component eg motherboard legoos improves mttf compared equivalent monolithic server cluster
369,Lobsters,osdev,OS,RISC OS relicensed under Apache license,https://www.riscosopen.org/news/articles/2018/10/22/risc-os-is-open-for-business,risc o relicensed apache license,edit risc o open business o development castle technology ltd cc apache license open source o london show raspberry pi eben upton o arm itv free open source software o open wwwriscosopenorg o development wwwriscosdevcom press release community comment,edit risc o open business posted steve revill mon oct gmt risc o open ltd rool hugely proud announce working risc o development rod following recent acquisition risc o intellectual property purchase castle technology ltd castle next phase mission reinvigorate risc o market image mark moz cc rod working alongside community maintainer rool republish source code popular niche operating system apache license move aimed removing existing barrier entry developer open source community enabling freeofcharge use commercial product first time risc o history release risc o apache license scheduled weekend coincide popular risc o london show saturday october show risc o development unveiling future plan system risc o open onhand explain benefit open source answer question news welcomed many risc o community including raspberry pi ceo eben upton risc o great demonstration much performance welltuned operating system user interface wring platform moving free open source license bring renewed interest risc o risc o open steve revill added relicensing represents achievement primary goal risc o open originally set achieve key milestone important part british computing history fulfilment longheld personal ambition enable anyone use risc o freely contribute openly future open source movement play fundamental part today software industry goal promoting collaboration sharing exactly risc o community need enable future growth say richard brown director risc o development ltd fellow director andrew rawnsley added move unlocks lot opportunity risc o previously inaccessible due former licence restriction look forward seeing exciting project make possible risc o risc o first released iconic british computer company acorn computer created team designed original arm microprocessor operating system proprietary closedsource product sometimes licensed third party use project diverse digital tv decoder factory automation system providing graphic itv hit show want millionaire early risc o acquired castle technology subsequently developed range desktop system castle worked risc o open release source code risc o partlyfree license move allowed anyone contribute risc o source code use noncommercially free charge commercial user risc o still required pay royalty castle castle technology whollyowned subsidiary risc o development risc o made available true free open source software license risc o open rool risc o open limited rool manages source code risc o organisation run largely voluntary basis also offer specialist professional service anyone interested developing product around arm architecture risc o wwwriscosopenorg risc o development rod formed goal providing investment development risc o operating system application bringing risc o new market acquired castle technology ltd risc o intellectual property right ipr wwwriscosdevcom posted press release community comment
370,Lobsters,osdev,OS,Writing an OS in Rust: Hardware Interrupts,https://os.phil-opp.com/hardware-interrupts/,writing o rust hardware interrupt,hardware interrupt github bottom overview pic intel apic io port article osdevorg implementation source code method enabling interrupt intel handling timer interrupt clike enum end interrupt configuring timer apic timer configuring pit deadlock lock global interrupt occurs provoking deadlock fixing deadlock closure fixing race condition instruction instruction thin wrapper keyboard input reading scancodes io port interpreting scancodes ibm xt ibm pc ibm ibm xt osdev wiki match shadow configuring keyboard configuration command summary next,hardware interrupt oct post set programmable interrupt controller correctly forward hardware interrupt cpu handle interrupt add new entry interrupt descriptor table like exception handler learn get periodic timer interrupt get input keyboard blog openly developed github problem question please open issue also leave comment bottom complete source code post found branch table content interrupt provide way notify cpu attached hardware device instead letting kernel periodically check keyboard new character process called polling keyboard notify kernel keypress much efficient kernel need act something happened also allows faster reaction time since kernel react immediately next poll connecting hardware device directly cpu possible instead separate interrupt controller aggregate interrupt device notifies cpu timer keyboard interrupt cpu hardware controller etc interrupt controller programmable mean support different priority level interrupt example allows give timer interrupt higher priority keyboard interrupt ensure accurate timekeeping unlike exception hardware interrupt occur asynchronously mean completely independent executed code occur time thus suddenly form concurrency kernel potential concurrencyrelated bug rust strict ownership model help u forbids mutable global state however deadlock still possible see later post pic intel programmable interrupt controller pic introduced long replaced newer apic interface still supported current system backwards compatibility reason pic significantly easier set apic use introduce interrupt switch apic later post interrupt line several line communicating cpu typical system back equipped two instance pic one primary one secondary pic connected one interrupt line primary real time clock timer acpi keyboard available secondary primary available interrupt serial port interrupt cpu mouse controller serial port controller coprocessor parallel port primary ata floppy disk secondary ata parallel port graphic show typical assignment interrupt line see line fixed mapping eg line secondary pic assigned mouse controller configured two io port one command port one data port primary controller port command data secondary controller command data information pic configured see article osdevorg default configuration pic usable sends interrupt vector number range cpu number already occupied cpu exception example number corresponds double fault fix overlapping issue need remap pic interrupt different number actual range nt matter long overlap exception typically range chosen first free number exception slot configuration happens writing special value command data port pic fortunately already crate called nt need write initialization sequence case interested work check source code fairly small well documented add crate dependency add following project cargotoml dependency main abstraction provided crate chainedpics struct represents primarysecondary pic layout saw designed used following way srcinterruptsrs use chainedpics use spin pub const pub const pub static pic spin mutex chainedpics spin mutex new unsafe chainedpics new setting offset pic range noted wrapping chainedpics struct mutex able get safe mutable access lock method need next step chainedpics new function unsafe wrong offset could cause undefined behavior initialize pic init function srclibrs pub fn init gdt init interrupt initidt unsafe interrupt picslock initialize new use initialize function perform pic initialization like chainedpics new function function also unsafe cause undefined behavior pic misconfigured go well continue see crash message executing cargo run interrupt nothing happened interrupt still disabled cpu configuration mean cpu listen interrupt controller interrupt reach cpu let change srclibrs pub fn init gdt init interrupt initidt unsafe interrupt picslock initialize instruction interrupt enable new interrupt enable function crate executes special sti instruction set interrupt enable external interrupt try cargo run see double fault occurs reason double fault hardware timer intel exact enabled default start receiving timer interrupt soon enable interrupt since nt define handler function yet double fault handler invoked timer interrupt see graphic timer us line primary pic mean arrives cpu interrupt offset instead hardcoding index store interruptindex enum srcinterruptsrs derive debug clone copy repr pub enum interruptindex timer impl interruptindex fn self self fn asusize self usize usize enum clike enum directly specify index variant repr attribute specifies variant represented add variant interrupt future add handler function timer interrupt srcinterruptsrs use crate print lazystatic static ref idt interruptdescriptortable let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler idt interruptindex timerasusize sethandlerfn timerinterrupthandler new idt extern fn timerinterrupthandler stackframe mut interruptstackframe print timerinterrupthandler signature exception handler cpu reacts identically exception external interrupt difference exception push error code interruptdescriptortable struct implement indexmut trait access individual entry array indexing syntax timer interrupt handler print dot screen timer interrupt happens periodically would expect see dot appearing timer tick however run see single dot printed interrupt reason pic expects explicit end interrupt eoi signal interrupt handler signal tell controller interrupt processed system ready receive next interrupt pic think still busy processing first timer interrupt wait patiently eoi signal sending next one send eoi use static pic struct srcinterruptsrs extern fn timerinterrupthandler stackframe mut interruptstackframe print unsafe picslock notifyendofinterrupt interruptindex notifyendofinterrupt figure whether primary secondary pic sent interrupt us command data port send eoi signal respective controller secondary pic sent interrupt pic need notified secondary pic connected input line primary pic need careful use correct interrupt vector number otherwise could accidentally delete important unsent interrupt cause system hang reason function unsafe execute cargo run see dot periodically appearing screen timer hardware timer use called progammable interval timer pit short like name say possible configure interval two interrupt wo nt go detail switch apic timer soon osdev wiki extensive article configuring pit form concurrency kernel timer interrupt occur asynchronously interrupt start function time fortunately rust ownership system prevents many type concurrency related bug compile time one notable exception deadlock deadlock occur thread try acquire lock never become free thus thread hang indefinitely already provoke deadlock kernel remember println macro call vgabuffer print function lock global writer using spinlock srcvgabufferrs doc hidden pub fn print args fmt argument use core fmt write writerlock writefmt args unwrap lock writer call writefmt implicitly unlocks end function imagine interrupt occurs writer locked interrupt handler try print something timestepstartinterrupthandler println lock writer occurs handler begin run println try lock writer already locked try lock writer already locked neverunlock writer writer locked interrupt handler wait becomes free never happens start function continues run interrupt handler return thus complete system hang deadlock easily provoke deadlock kernel printing something loop end start function srcmainrs nomangle pub extern c fn start loop use blogos print print new run qemu get output form see limited number hyphen printed first timer interrupt occurs system hang timer interrupt handler deadlock try print dot reason see dot output actual number hyphen varies run timer interrupt occurs asynchronously nondeterminism make concurrency related bug difficult debug deadlock avoid deadlock disable interrupt long mutex locked srcvgabufferrs print given formatted string vga text buffer global writer instance doc hidden pub fn print args fmt argument use core fmt write use instruction interrupt new interrupt withoutinterrupts new writerlock writefmt args unwrap withoutinterrupts function take closure executes interruptfree environment use ensure interrupt occur long mutex locked run kernel see keep running without hanging still nt notice dot scrolling fast try slow printing eg putting inside loop apply change serial printing function ensure deadlock occur either srcserialrs doc hidden pub fn print args core fmt argument use core fmt write use instruction interrupt new interrupt withoutinterrupts new lock writefmt args expect printing serial failed note disabling interrupt nt general solution problem increase worst case interrupt latency ie time system reacts interrupt therefore interrupt disabled short time race condition run cargo test might see testprintlnoutput test failing cargo test lib running test testbreakpointexception ok testprintln ok testprintlnmany ok testprintlnoutput failed error panicked assertion failed left right left right reason race condition test timer handler remember test look like srcvgabufferrs testcase fn testprintlnoutput let test string fit single line println c schars enumerate let screenchar writerlock bufferchars bufferheight read asserteq char screencharasciicharacter c test print string vga buffer check output manually iterating bufferchars array race condition occurs timer interrupt handler might run println reading screen character note nt dangerous data race rust completely prevents compile time see rustonomicon detail fix need keep writer locked complete duration test timer handler ca nt write screen fixed test look like srcvgabufferrs testcase fn testprintlnoutput use core fmt write use instruction interrupt let test string fit single line interrupt withoutinterrupts let mut writer writerlock writeln writer n expect writeln failed c schars enumerate let screenchar writerbufferchars bufferheight read asserteq char screencharasciicharacter c performed following change keep writer locked complete test using lock method explicitly instead println use writeln macro allows printing already locked writer avoid another deadlock disable interrupt test duration otherwise test might get interrupted writer still locked since timer interrupt handler still run test print additional newline n printing string way avoid test failure timer handler already printed character current line change cargo test deterministically succeeds harmless race condition caused test failure imagine race condition much difficult debug due nondeterministic nature luckily rust prevents u data race serious class race condition since cause kind undefined behavior including system crash silent memory corruption hlt instruction used simple empty loop statement end start panic function cause cpu spin endlessly thus work expected also inefficient cpu continues run full speed even though work see problem task manager run kernel qemu process need close cpu whole time really want halt cpu next interrupt arrives allows cpu enter sleep state consumes much le energy hlt instruction exactly let use instruction create energy efficient endless loop srclibrs pub fn hltloop loop instruction hlt instruction hlt function thin wrapper around assembly instruction safe way compromise memory safety use hltloop instead endless loop start panic function srcmainrs nomangle pub extern c fn start println crash blogos hltloop new cfg test panichandler fn panic info panicinfo println info blogos hltloop new let update librs well srclibrs entry point cargo test cfg test nomangle pub extern c fn start init testmain hltloop new pub fn testpanichandler info panicinfo serialprintln failed n serialprintln error n info exitqemu qemuexitcode failed hltloop new run kernel qemu see much lower cpu usage input able handle interrupt external device finally able add support keyboard input allow u interact kernel first time note describe handle keyboard usb keyboard however mainboard emulates usb keyboard device support older software safely ignore usb keyboard usb support kernel like hardware timer keyboard controller already enabled default press key keyboard controller sends interrupt pic forward cpu cpu look handler function idt corresponding entry empty therefore double fault occurs let add handler function keyboard interrupt quite similar defined handler timer interrupt us different interrupt number srcinterruptsrs derive debug clone copy repr pub enum interruptindex timer keyboard new lazystatic static ref idt interruptdescriptortable let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler new idt interruptindex keyboardasusize sethandlerfn keyboardinterrupthandler idt extern fn keyboardinterrupthandler stackframe mut interruptstackframe print k unsafe picslock notifyendofinterrupt interruptindex see graphic keyboard us line primary pic mean arrives cpu interrupt offset add index new keyboard variant interruptindex enum nt need specify value explicitly since default previous value plus one also interrupt handler print k send end interrupt signal interrupt controller see k appears screen press key however work first key press even continue press key k appear screen keyboard controller wo nt send another interrupt read socalled scancode pressed key scancodes find key pressed need query keyboard controller reading data port controller io port number srcinterruptsrs extern fn keyboardinterrupthandler stackframe mut interruptstackframe use instruction port port let mut port port new let scancode unsafe portread print scancode unsafe picslock notifyendofinterrupt interruptindex use port type crate read byte keyboard data port byte called scancode number represents key pressrelease nt anything scancode yet print screen image show slowly typing see adjacent key adjacent scancodes pressing key cause different scancode releasing translate scancodes actual key action exactly scancodes three different standard mapping scancodes key socalled scancode set three go back keyboard early ibm computer ibm xt ibm pc ibm later computer fortunately continue trend defining new scancode set rather emulated existing set extended today keyboard configured emulate three set default keyboard emulate scancode set xt set lower bit scancode byte define key significant bit defines whether press release key present original ibm xt keyboard enter key keypad generate two scancodes succession escape byte byte representing key list set scancodes corresponding key check osdev wiki translate scancodes key use match statement srcinterruptsrs extern fn keyboardinterrupthandler stackframe mut interruptstackframe use instruction port port let mut port port new let scancode unsafe portread new let key match scancode none let key key print key unsafe picslock notifyendofinterrupt interruptindex code translates keypresses number key ignores key us match statement assign character none scancode us let destructure optional key using variable name key pattern shadow previous declaration common pattern destructuring option type rust write number translating key work way fortunately crate named pckeyboard translating scancodes scancode set nt implement use crate add cargotoml import librs cargotoml dependency pckeyboard use crate rewrite keyboardinterrupthandler insrcinterruptsrs extern fn keyboardinterrupthandler stackframe mut interruptstackframe use pckeyboard layout decodedkey handlecontrol keyboard use spin mutex use instruction port port lazystatic static ref keyboard mutex keyboard layout mutex new keyboard new layout handlecontrol ignore let mut keyboard keyboardlock let mut port port new let scancode unsafe portread let ok keyevent keyboardaddbyte scancode let key keyboardprocesskeyevent keyevent match key decodedkey unicode character print character decodedkey rawkey key print key unsafe picslock notifyendofinterrupt interruptindex use lazystatic macro create static keyboard object protected mutex initialize keyboard u keyboard layout scancode set handlecontrol parameter allows map ctrl az unicode character nt want use ignore option handle ctrl like normal key interrupt lock mutex read scancode keyboard controller pas addbyte method translates scancode option keyevent keyevent contains key caused event whether press release event interpret key event pas processkeyevent method translates key event character possible example translates press event key either lowercase character uppercase character depending whether shift key pressed modified interrupt handler write text keyboard possible configure aspect keyboard example scancode set use wo nt cover post already long enough osdev wiki overview possible configuration command post explained enable handle external interrupt learned pic primarysecondary layout remapping interrupt number end interrupt signal implemented handler hardware timer keyboard learned hlt instruction halt cpu next interrupt able interact kernel fundamental building block creating small shell simple game next timer interrupt essential operating system provide way periodically interrupt running process regain control kernel kernel switch different process create illusion multiple process run parallel create process thread need way allocate memory next post explore memory management provide fundamental building block
371,Lobsters,osdev,OS,Formalising Filesystems in the ACL2 Theorem Prover: an Application to FAT32,https://arxiv.org/pdf/1810.04309.pdf,formalising filesystems theorem prover application,,obj stream zw n c aޘ kr z g vkv w x wjꩠu n x te kt h f k endobj obj endobj obj stream u h c ӽ l ap rzr q lk
373,Lobsters,osdev,OS,Arcan versus Xorg – Approaching Feature Parity,https://arcan-fe.com/2018/10/17/arcan-versus-xorg-approaching-feature-parity/,arcan versus xorg approaching feature parity,client privilege abi shmif awk multimedia chain trust mild form completely fails regard extension window manager wm display v connection point mechanism policy reading window screen content like input input injection target flag code example display density colour management xrandr mixed dpi x window system management interface font management font management xft font library management interface xdotool xtest fuse demo client content decoration demo clipboard drag drop synchronisation xplain present xsync high level midlevel lowlevel apilevel like,first article two go consider relevant xorg feature set compare point point corresponding solution category work arcan article solely focus display server set feature relate xorg feature second article cover feature currently missing eg network transparency accounted well feature already present arcan quite exist xorg worthwhile stress project way attempt replace xorg sense expect transfer individual workflow mental model system graphic work without kind friction effort said also unspoken goal make sure everything done xorg environment possible general nothing wrong feature set x though bit limited nitty gritty detail feature work implemented interact really kept time modelled coherent way thus decent requirement specification start careful implementation much fraction code size idea project whole find new model system graphic preferably survive prospect coming demise desktop androidchrome alphabet soup monster keep slurping established one make concession concession try cater prospective user base want thing work expense advanced user agency term classic desktop xorg work already quite close dreaded good enough polish needed mostly within reach skepticism based long standing notion actually matter anywhere near good enough article dry experience quaffing cup freshly ground cinnamon even wall text trimmed half original length make le painful read use shortcut jump different feature category section start summary x org perspective contrast handled arcan precursor section let first take look two big conceptual difference first one arcan primitive client really work referred segment segment typed ipc container stream audio andor video data one direction client server server client also carry associated event metadata eventbound abstract data handle eg file descriptor direction type hint tofrom policy layer somewhat similar window manager eg popup multimedia clipboard game used assign priority influence decision suppresssuspend input grab without letting client request state change otherwise annoying default many environment connected client get one segment primary closing one release resource associated client client may negotiate additional segment rejected rejection real life default behaviour policy layer explicitly opt allocation client may also negotiate extending capability segment support advanced privileged feature access vr related device hardware colour lookup table second key difference aforementioned policy layer layer act window manager event driven io routing rule combined one treated normal client instead access unique set privileged function leveraged explicitly control everything display synchronisation source output mapping event propagation synthesis premise choice policy layer modifiable user behest thought firewall router ui related activity control go shape layer also option accept map client segment also explicitly push segment client mean probing announcing support feature client privilege entirely comfortable display server parlance recall distinction x protocol version xorg protocol literal stack paper xorg current de facto server side implementation protocol though protocol expose subset server potentially reasonable parallel one relationship http spdy quic rest web browser firefox chrome engineering effort relative importance client communicate using protocol de facto implementation come via xlib library via recent xcb library setup quite rare userfacing operating system general window display server protocol go osx android real value protocol communication hard system barrier politics condensed speak interaction userspace component particularly hard boundary protocol distinction also common related subsystem like audio happens instead expose apis letting client interact integrate outer system definition describes interface nothing strictly communication channel ordering rule valid invalid bit pattern action take noncompliance parameter regulated o level shape lesser known abi similar vein arcan protocol normal client compatibility support protocol like wayland come via translation service built separate optin special client stronger separation sanity sandboxing reason apiwise arcan expose three apis shmif tui alt philosophy behind design let server side absorb systemic complexity strive make client trivial possible develop inspect multimillion line code toolkit ever necessary perspective instead emphasise extreme focus small one task kind client integration bigger embedded universe like virtual machine web browser leave middle fester rot shmif api provides low level interface expose large set feature deceptively simple setup one mostly inspired old arcade hardware design api kept lockstep engine may incompatible change version far really remain lock stepped fabled release mean running engine version need match shmif api version enforces attitude upgrade server side upgrade client well therefore provide mean extension reasoning absolutely clear version feature present left guesswork termxxx termcap style database wayland charlie foxtrot style extension registry tui api build upon shmif primarily strike textoriented user interface mean dissolving dependency traditionally terminal protocol need go via terminal emulator open door better integration window management style outer desktop sane input model multimedia capable rich text command line tool removing need tmux style multiplexer lastly alt api high level engine interface currently exposed via lua see also awk multimedia used server side implement policy layer also used client side via special arcan build referred lwa act normal renderer going back arcanshmif api used implement support number feature also supporting protocol typically come separate process service switch runtime big two example right waybridge wayland support xarcan client support kept separate privilege separated optionally sandboxed process run combination one bridge one client one bridge many client many bridge many client program use arcan shmif api split three distinct group subjugated authenticated nonauthoritative collectively referred frameservers engine documentation code authenticated client started initiative window manager parameter predefined database inherit respective connection primitive thus keeping chain trust intact subjugated client preset archetype archetype regulates intended role desktop ecosystem eg medium decoding encoding cli shell etc window manager may forcefully create destroy predictable consequence therefore considered form one thing well die graphical client big thing window manager make stronger assumption make presence lack thereof last nonauthoritative client one closely match model seen wayland compositor x mild form authentication wayland completely fails regard simply client started terminal tty likely pseudoterminal ptty using o specific connection primitive discovery scheme client connects authenticates server flat disregarding certain extension always extension set quite farreaching permission client iterate modify map read redirect part event routing scene graph structure control draw draw draw tried true way getting flexible dynamic client also curse arcan minimal default set permission roughly corresponds drawing single resizeable buffer along bidirectional event queue everything else defaultreject policy opted includes attempt retrieve additional buffer principle client hard time issue command induces uncontrolled serverside resource allocation partial motivation resource stringency display server run extended period time small performance degradation heap fragmentation accumulate slowly present jankyness judder lag terrifyingly hard attribute solve upside window manager extend sliding scale accepting custom mouse cursor certain client allowing gpu accelerated transfer access colour control buffer readbacks unfiltered eventloop injection principally albeit unwise nothing stop layer opening permission door wide open immediately replicate model entirety happens behest user default window manager wm one hallmark feature decent display system able allow user manipulate tune replace interface event routing event response see fit x client achieve effect also one many problem one many client try manage window dubious pleasure choosing race condition manifest short intermittent graphic glitch conflicted territory like decoration buffercontent tearing performance degradation term increased latency andor lowered throughput many case actually get arcan keep window manager concept treated another client access set mechanism others instead act dominant force access much stronger set command since engine know trust window manager allow drive synchronisation get around synchronisation problem inherent x approach example window management scheme showed video year implemented level acted driving force evolutionary design scripting api high level script mouse cursor management one example get generalised added shared set optin builtin script choice feature individual scheme provide transplanted window manager much lower developer effort would ever possible xorg current wayland compositor matter display v connection point client connects display specified display host screen environment variable addressing scheme map domain network socket connect server arcan environment variable arcanconnpath name also point domain socket unless connection preauthenticated primitive inherited big difference name set window manager consumed use meaning client connected disappears reopened window manager powerful mechanism allows window manager treat client differently based address connect mean api focus mechanism policy window manager select policy based connection origin instead using name address server address desktop location trivial example would singleton connection point external status bar launcher desktop wallpaper without pollute protocol window management policy worse modifying client enable principally window manager scheme dependent policy mechanism also used successfully implement load balancing denial service protection something like true connectclient done terminal able render ui unresponsive cause system crash terminate reading window screen content x client option reading content window others used sample whole part display server output fairly notable cost actual mean vary set extension available instance glx gl extension x protocol available better tactic create offscreen redirected window server side bind client accessible texture drawcopy intended source let gpu sort transfer path arcan feature much nuanced client request subsegment output type explicit control mean output intended client mechanism used drop part drag drop paste part clipboard paste window manager explicitly specifies source transformation sampled forwarded client client side code look like mean client may provided full copy screen something else entirely content swapped time transparently client since segment contain audio video approach applies audio philosophy window manager provides user control defining selection composition client provides processing composited content window manager also chose forcepush output segment client mean saying output user decided something client get option map start reading ignore implicitly say know care useful mental model like normal drag drop drag content user defined target unaware content origin input input injection input layer notoriously complicated part spec xkb alone intimidating read sure including deprecated present method also relate one larger issue lack wm mandated input coordinate space translation scaling access zero race condition free way controlling get control input subsystem notable cause kind problem also severely hinders feature desktop provide input model complicated also limited lot thing happened input device term speciality accessibility gaming device hybrid system like vr positioning gesture input philosophy arcan engine platform layer gather much input device given permission use provide window manager script minimal processing acceleration gesture detection always reasonable performance reason boil sample rate device propagation cost sample therefore possible set rate limit primitive filter oversaturate event queue otherwise input sample raw possible done order defer decision input device action actually mean reason default script window manager chose attach overlay gesture detection similar higher level feature translate forward client input injection thing even flexible event model arcanshmif api match one engine us translate platform layer input event device normally originate scripting layer client event processing simply mean event queue memory shared client get multiplexed translated onto master queue priority saturation limiter key difference however event provided client get masked filtered added master queue default mask restrictive event associated input device blocked scripting api however provides target flag allowing mask changed combine preauthenticated setup program act input driver safe way yet still present ui component onscreen keyboard configuration interface code example illustrates trivial input injector press random key random number keyboard display density colour management x xrandr extension exposing detailed information output display interface also used low level control resolution orientation density accelerated colour lookup table colour lookup table least two big drawback first client make display useless providing broken bad table second coordination client know order table transforms applied game might need brightness adjusted image viewer need advanced colour management become pronounced drift towards larger variety display hdr probably prove even painful get right variation density exposing low level control display part come problem lot extra event coordination needed window manager understand happening solution worked time crt display zenith well collective sun setting density related complicated subject decent writeup interaction x extension display context density found mixed dpi x window system better read covered arcan extended privileged setup shmif api client get accessed enumerating display property randr like way also used retrieve submit acceleration table ultimately requires window manager opt act intermediate order resolve conflict table therefore tracked managed per client level per display resolution orientation control see section management interface section detail density see font management section worth mention property handled per client window manager responsible forward relevant information client basis thus multiple client live display different idea density related parameter font management font rendering management strong candidate sure winner murkiest part x though input stack also come close since print server principally dead better description found probably keithp xft font library also relies quite knowledge huge topic text rendering relates network transparency historical perspective printing protocol printer high dpi extremely low refresh rate kind display topic x font management shape xfs x font server xfld x logical font description left history department account practically deprecated another aspect worth bringing text one absolutely important primitive passed around doubt font connected order transform text something see transform depends output display density subpixel layout orientation also requires user context sensitive information presentation language order provide proper shaping substitution short example simple problem take subpixel hinting individual colour channel biased order provide appearance higher text resolution may look better locally taking screenshot sharing window remote viewer opposite effect division responsibility text processing intractable problem solution sight far reaching consequence quality tradeoff legacy compromise work multiple dpi similar constant express scale factor new design make every high school math physic teacher cringe disgust arcan client normally responsible text drawing window manager suggests parameter way managed moment connection opened client immediately get set initial property includes set font primary secondary etc preferred font size output display property language dynamically overridden later via handful event primarily fonthint size hinting change transfer new descriptor displayhint preferred output size target density geohint position inputoutput language twist client switch segment use different output format tpack format package enough high level information glyph font index formatting line screen oriented way server side performs actual font rendering management interface category bit eccentric others xorg lot management behaviour exposed via client quintessential tool people associate either part randr via xdotool fall creative use xtest game mechanic randr like management covered section display role split covered section display management input injection due increased role window manager automation control go compromise support script pulled window manager expose data model exposing window management control file system along support fuse demo driver allows file system mounted normal command line tool used discover control script higher level management cooperation window manager rather competition client content decoration infected subject principally requires reaching agreement client window manager actual content client populated buffer client anything stop window manager decorating window window manager stop client rendering decoration buffer used canvas window manager slight advantage forcibly crop buffer composition translate input coordinate accordingly shown demo thus client need know draw titlebar border decision far reaching consequence information need conveyed understood synchronised window manager client instance titlebar button drawn client side need reflect server side window state suddenly need information minimised maximised state confused part technically many refer server side decoration exactly server side predominant x solution one even multiple client window manager compositor possibly separate client decorate others big problem approach becomes almost uniquely complicated synchronisation decoration need reflect state size decorated client speed limited combined roundtrip time one decorating one decorated principal standpoint arcan server allowed complicated write written client trivial possible annotation decoration provide entirely window manager since wm entirely different privileged thing client true server side decoration typical approach synthesise demand shader composition stage fraction cost even fancy thing like drop shadow compromise client explicitly either indicate look cursor preset derived list request subsegments cursor andor titlebar type case secondary allocation request defaultdeny window manager optin clipboard clipboard traditionally one strange form ipc around implementation window arguably biggest piece wtf around tailgated x hallmark feature certain whatever paste origin destination interface inherently prone race condition venerable icccm defines three selection buffer primary secondary clipboard real difference input bound ctrlc ctrlv menu clipboard v mouse action primary external client clipboard manager used add monitor buffer also option client negotiate content format exchanging list supported format lengthy protocol drag drop arcan abstract singleton clipboard drag drop rather two type segment clipboard client server clipboardpaste server client client wish provide clipboard information request subsegment clipboard type paste operation occurs server forcepushes clipboardpaste subsegment client accept audio video short message file descriptor transfer routing allows infinite number clipboard shared different client determined window manager thus completely configurable safe allow one client act clipboard manager segment trusted nontrusted group matter example code simple clipboard manager found set directly copy one client clipboard another client clipboardpaste window manager intercepting modifying everything act file descriptor router pick poison synchronisation might bit confusing think synchronisation feature thing consider might make bit clear modern system graphic parallelised asynchronous degree really underestimated hit like brick fail think thing task made easier fact part chain need synchronising unreliable limited plain broken fantastic explanation absolute basic regard found article jasper st pierre et xplain follow development regard present extension check xsync extension attempt summarise instead go model problem three big area consider synchronisation first area synchronisation display historically display synchronisation easy could literally interrupt handler told display wanted new content much time left produce became difficult hooked multiple display necessarily share refresh rate refresh method example display cooperating trying share content likely prefer tearing latency using least common divisor shared synch period xorg try hardest meet specific deadline display connected necessity trying race beam counting microsecond admirable approach time conception much today second area window manager window manager need react ui component manipulated need relayout redecorate accordingly ready time composition scanout synch display hard impossible strike accuracy precision many external factor introducing jitter delay area animation quality tend highlight well solution work whole actually good reason troubleshooting regardless enabled production third area synchronising client common common kind client interactive mean mainly update produce new content response input receives thus state input sample forwarded need fresh latency suffer time client need decide stop waiting input use input synthesise output state might need client local coordinate transforms might depend surface dimension source device might high samplerate mouse device emitting sample terminal emulator capable handling fraction list go end web judgement call balance latency cpu utilisation arcan approach range synchronisation problem well number level high level runtime changeable strategy set favour property like input latency animation smoothness energy conservation user choice get applied regardless window manager decides midlevel window manager control set synchronisation target act input high level strategy currently selected window good target mean synchronisation target get favourable treatment lowlevel single client mapped output sidestepping window management entirety window manager also force synchronisation mode even manually clock suggest enforce deadline per client apilevel client movement range cancel current synchronisation attempt cost possible tearing bind early possible dynamic deadline triplebuffer like strategy latest complete frame one get synched phew needlessly say lot said subject still barely scratching surface main missing piece guessed mainly multilevel network transparency drawing commandstream buffer format focus arcan xorg feature like compositing vr audio support live migration server recovery multigpu rendering like like loading related
374,Lobsters,osdev,OS,BεtrFS: The Bε-tree File System,http://www.betrfs.org/,bεtrfs bεtree file system,usenix pdf fast usenix acm pdf usenix fast usenix pdf fast acm pdf usenix usenix slide pdf fast,full path fullpath indexing usenix pdf proceeding usenix conference file storage technology fast oakland ca february age file system usenix login magazine volume number page summber writes wrought right adventure file system optimization acm pdf acm transaction storage volume article march file system fated senescence nonsense say science usenix usenix conference file storage technology fast santa clara ca february optimizing every operation writeoptimized file system usenix pdf usenix conference file storage technology fast santa clara ca february betrfs writeoptimization kernel file system acm pdf acm transaction storage volume article october introduction bεtrees writeoptimization usenix login magazine volume number page october betrfs rightoptimized writeoptimized file system usenix slide pdf usenix conference file storage technology fast santa clara ca february
375,Lobsters,osdev,OS,"Composability, homogeneity, and language-based systems",https://medium.com/@enkiv2/composability-homogeneity-and-language-based-systems-fb00e2c2458,composability homogeneity languagebased system,composability homogeneity languagebased system popularized eccentric computing proposal interimos,composability homogeneity languagebased systemsi like describe distinguish three related distinct idea floating around small vibrant community alternative o design composable user interface coin popularized homogeneous operating system coined eccentric computing describe templeos languagebased system coined fred schneider generalized lukas hartmann proposal interimos composable user interface system component control user combined together instance command line tool unix command line composable combined using pipe composition saved shell script reused automatic way collection graphical application x although used together pasting output one another composable communication requires user input modicum composability created noncomposable system automation language applescript integrated part interface natural extension normal use way pipe command line make ui composable composable ui textbased instance practically every programming language composability bourne shell powershell allow composition foreign component graphical alto gui hypernews consolebased like emacs templeos fully homogenous operating system operating system layer interaction operate set rule command shell interprets language use write device driver kernel module hotkeys work every context special domain rule interaction change look homogeneity scale however templeos lisp machine alto extremely homogeneous running code language inspected modified run slightly le homogenous handful realm c code resident source system program command line tool bournestyle shell access system facility extremely consistent filesystem layer graphical interface internally consistent integrated shell unix command line le homogenous separate privileged realm c program able interact directly apis shell far end extreme ahomogeneity original mac o do application completely unaware fully incapable interaction user write meaningfully complex software normal mechanism interact computer instead must seek learn specialized development toolsit clear homogeneous operating system textual nontextual component even fully commandlinebased operating system let alone consolebased one like templeos behavior though keyboarddriven programming language proper place source file nevertheless semantically meaningful kind interpreter line editing job control languagebased system one term sourcecodeoriented perspective homogeneous operation term welldefined behavior particular language special privileged domain beyond although may restricted domain top itthere two factor tie three idea together consistency power composable user interface power programming language regardless form homogeneous operating system composability definition language system application software written must support composition key feature mechanism composition consistent across layer abstraction languagebased system internally consistent ground level behavior must consistent powerful underlying representationa fully homogeneous operating system languagebased system toplevel user interface consistent structurally similar equivalent power underlying language manipulates domain
376,Lobsters,osdev,OS,What's a CPU to do when it has nothing to do?,https://lwn.net/SubscriberLink/767630/594421f913c3d00a/,cpu nothing,subscribing lwn kernel recipe kernel recipe log,benefit lwn subscribersthe primary benefit subscribing lwn helping keep u publishing beyond subscriber get immediate access site content access number extra site feature please sign today october article contributed tom yates kernel recipe would reasonable expect nothing easy simple task kernel nt kernel recipe rafael wysocki discussed cpu nt anything kernel handle problem inherent current strategy recent rework kernel idle loop improved power consumption system nt anything idle loop one kernel subsystem wysocki maintains control cpu process run precise fault wysocki defined term purpose discussion cpu entity take instruction memory execute time entity system likewise simple singlecore singleprocessor system core cpu processor multiple core core cpu core expose multiple interface simultaneous instruction execution intel call hyperthreading thread cpu cpu idle task run precisely linux kernel number internal scheduling class including special idle class task run given cpu class save idle class cpu regarded idle hardware nt make allowance cpu run useless instruction needed real work however wildly inefficient use electricity cpu support number lowerpower state kernel put needed useful work idle state free enter exit entry exit require time moreover power consumption briefly rise slightly normal current state entry idle normal destination state exit idle although increasingly deep idle state consume decreasing amount power increasingly large cost enter exit implies short idle period fairly shallow idle state best use system resource longer idle period cost deeper idle state justified increased power saving idle therefore kernel best interest predict long cpu idle deciding deeply idle job idle loop loop cpu scheduler notice cpu idle work cpu scheduler call governor best predict appropriate idle state enter currently two governor kernel called menu ladder used different case try roughly thing keep track system state cpu idle long ended idling done order predict long freshlyidle cpu likely remain thus idle state appropriate job made particularly difficult cpu scheduler clock tick timer run cpu scheduler purpose timesharing cpu going run multiple job single cpu job run periodically put aside favor another job tick nt need run cpu idle since job cpu shared moreover tick allowed run otherwiseidle cpu prevent governor selecting deep idle state limiting time cpu likely remain idle kernel older scheduler disables tick calling governor cpu woken interrupt scheduler make decision whether work reactivates tick governor predicts long idle idle period turn long governor win cpu enter deep idle state power saved governor predicts long idle period turn short governor loses cost entering deep idle state repaid power saving short idle period worse governor predicts short idle period loses regardless actual idle duration actual duration long potential power saving missed short cost stopping restarting tick paid needlessly put another way stopping starting tick cost point stopping tick governor going predict short idle wysocki considered trying redesign governor work around concluded essential problem tick stopped governor invoked thus recommended idle state known therefore reworked idle loop kernel decision stopping tick taken governor made recommendation idle state recommendation long idle tick stopped wake cpu prematurely recommendation short idle tick left avoid paying cost turning mean tick also safety net wake cpu event idle turn longer predicted give governor another chance get right idled cpu woken interrupt whether tick left running event scheduler immediately make decision whether work tick restarted need governor immediately reinvoked since mean governor invoked tick running stopped governor reworked take account reexamining winloss table earlier wysocki expects thing improved rework long idle predicted tick still stopped nothing change win actual idle long lose short short idle predicted better actual idle short saved cost stopping restarting tick actual idle long unstopped timer wake u give u another bite prediction cherry since game theory substitute realworld data wysocki tested number system graph characteristic system tested show power consumption time system idle green line old idle loop red new power consumption le new scheme moreover much predictable cpu tested showed large gap green red line showed flat red line beneath bumpy green one wysocki put new scheme predicts short idle le often old scheme right short often response question audience wysocki said work architectureindependent intel cpu benefit particularly comparatively large array idle state governor may select giving governor best chance well predicts correctly arm cpu example also benefit drop idle power consumption may seem small victory go system want able cope reasonably well peak load need spare capacity normal operation manifest idle time graph show cpu usage mailtalkfiletransfervpnntpetc server past year bright yellow idle time saving power please colocation provider much indeed good planet would like thank lwn travel sponsor linux foundation assistance travel funding kernel recipe log post comment
377,Lobsters,osdev,OS,"First, seL4 Summit",https://www.sel4-us.org/summit,first summit,,wednesday november belmont ii iii iv breakfast bellmont foyer session assured system overview chair dr jason li opening remark introduction dr raymond richards keynote hardwaresoftware totalsystem view trustworthiness dr peter neumann sri international evolution secure operating system prof trent jaeger penn state university past present future dr gernot heiser data break minute session center excellence chair douglas schafer hacms program vision dr raymond richards darpa coe plan progress nicholas evancich iai practical use robert vanvossen dornerworks lunch red fox hour session government effort chair daniel fayette afrl are program douglas schafer afrlriga overview dhs cpssec program dr christos papadopoulos dhs tardec related program effort leonard elliott eric bennett army tardec nsf cps security program dr david corman nsf break minute session industry academia effort part chair dr paul pazandak steal drone highassurance cyber military system dr darren cofer rockwell collins security mechanism cyberphysical system david payton dr aleksey nogin hrl creating practical security architecture based prof simon ou university south florida dr raj rajagopalan honeywell closing remark douglas schafer afrlriga thursday november belmont ii iii iv breakfast bellmont foyer session formal verification tool chair dr gabriela ciocarlie formal verification dr june andronick data verifiable c verified software toolchain dr lennart beringer dr andrew appel princeton university scalable verification legacy binary cot hardware prof freek verbeek prof binoy ravindran virginia tech isamodular dependently typed validation native code prof kevin hamlen university texas dallas component oriented engineering dr john launchbury galois break minute session coe panel discussion moderator dr jason li dr peter neumann sri international dr gernot heiser data prof trent jaeger penn state university dr lok yan air force research laboratory dr john launchbury galois lunch red fox hour session industry academia part ii chair dr simon ou secure boot virtualization environment dr stuart card critical technology verified network stack synthesis dr eric smith kestrel technology secure distributed computing middleware ecosystem dr paul pazandak rti mixedcriticality medical device platform based todd carpenter adventium lab enabling trustworthy remote recovery kyle ingols mit lincoln lab break minute session coe assured system way forward chair dr lok yan extending security guarantee within dr gabriela ciocarlie sri international cmu sei effort assured system dr greg shannon sei cert cyber resilient operating system jon paulikonis naval air system command center excellence management transition jerry dussault griffiss institute cyber research institute closing remark dr raymond richards darpa
378,Lobsters,osdev,OS,Biscuit research OS,https://github.com/mit-pdos/biscuit,biscuit research o,biscuit research o http pdoscsailmiteduprojectsbiscuithtml http githubcomgolanggo install troubleshooting contributing,biscuit research o biscuit monolithic posixsubset operating system kernel go cpu written study performance tradeoff using highlevel language garbage collection implement kernel common style architecture find research paper biscuit http pdoscsailmiteduprojectsbiscuithtml biscuit important feature getting good application performance multicore kernelsupported thread journaled f concurrent deferred group commit virtual memory copyonwrite lazily mapped anonymousfile page tcpip stack ahci sata disk driver intel nic driver biscuit also includes bootloader partial libc litc user space program though could used grub existing libc implementation like musl repo fork go repo http githubcomgolanggo nearly biscuit code biscuit install root repository contains go toolsruntime biscuit code modification runtime mostly srcruntimeoslinuxgo biscuit used build linux openbsd probably build linux currently must build biscuit modified go runtime building biscuit git clone http githubcommitpdosbiscuitgit cd biscuitsrc makebash go biscuit main part launch cd biscuit make qemu biscuit boot type command l troubleshooting need environment distribution name way fix naming path etc gopath environment variable nt contain biscuit build fail something like find package containerlist either unset gopath set explicitly example assuming working directory gnumakefile gopath pwd make qemu contributing please feel free hack biscuit happy accept contribution
379,Lobsters,osdev,OS,The benefits and costs of writing a POSIX kernel in a high-level language,https://www.usenix.org/conference/osdi18/presentation/cutler,benefit cost writing posix kernel highlevel language,support usenix presentation audio,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author cody cutler frans kaashoek robert morris title benefit cost writing posix kernel highlevel language booktitle usenix symposium operating system design implementation osdi year isbn address carlsbad ca page url http publisher usenix association month oct presentation audio
380,Lobsters,osdev,OS,Welcome to the WooKey project documentation,https://wookey-project.github.io/,welcome wookey project documentation,,welcome wookey project quick start guide philosophy main purpose feature project summarized wookey project section detailed project found publication section experiment demo wookey project discovery board directly go quick start section warning new release wookey software delivered denoted release includes huge amount new security feature bufixes described section release page release still nightly tagged stable shortly
381,Lobsters,osdev,OS,Admiring the Zircon Part 1: Understanding Minimal Process Creation,https://depletionmode.com/zircon-process.html,admiring zircon part understanding minimal process creation,http githubcomfuchsiamirrorzircon,recently ive taking look google new opensource microkernel zircon guy power google shiny fuchsia o currently development speaking zircon referring microkernel binary also usermode component make base o difficult ascertain zircon end fuchsia begin roughly speaking believe kernel system component http githubcomfuchsiamirrorzircon current zircon documentation seems comprehensive enough anyone understand thing work blog post like one might somewhat superfluous however found gaining full understanding take digging source playing around runtime mainly way documenting learning decided write stuff may may useful others first fairly obsessed zircon worked systemslevel development linux past nt somewhat extensively day job security angle zircon get excited code always run required amount privilege unfortunately industry today current os architected year really understood security problem space bloated hardtodefend monolithic beast personally believe microkernels coupled innovative isa extension go long way reducing problem space attack surface nintendo something similar going switch sure hacked shred reason orthogonal microkernel design still believer microkernel model general purpose computing done right diving right zircon developed light touch c crazy sdl everywhere c object used imo neatly make sense believe google doc originally forked lk microkernel designed lightweight device familiar lk going refer zircon tell zircon author seem added object wrapper lk primitive built didnt really look difference two linux everything file operation usually done file descriptor zircon like window treat kernel primitive object much like nt kernel fact nomenclature kernel primitive somewhat match nt process job etc kernel expose handle used manipulate kernel object handle right verified kernel ensure caller sufficiently privileged act object speaking microkernel design driver usermode code meaning code kernel need act object within kernelmode solves major issue monolithic design developer take thing like reference internal representation object within kernel leading sort instability zircon force use api manage internal object lifetime see fit another huge advantage limited set syscalls microkernel need expose usermode syscalls exposed best thought set primitive necessary enable usermode perform heavy lifting recommendation interested read official intro doc available nothing post find sifting docscode introduction thing actually wired thought start working example process created starting usermode working way kernel start example program spawn new process run boilerplate code first thing app need request creation process object kernel done via zxprocesscreate syscall first parameter handle job object new process executed child provided job job thought collection n process managed together example create process default job currently running parent process obtained via zxjobdefault wrapper around zirconjobdefault populated libc process start bootstrap code remaining input parameter allow specification arbitrary name process seems placeholder future option call currently must set successful call return handle new process object handle vmar virtual memory address region object describing root process object address space root vmar simply description available address space aspace available process actual memory committed yet storage kernel process object course kernel perspective zxprocesscreate make way object dispatcher factory process object processdispatcher create allocate referenced storage new processdispatcher object add child requested job object address space aspace object process object type vmaspace typeuser created describing region harddefined per architecture form root vmar vmaddressregiondispatcher object created vmar control return usermode relevant output parameter next allocate memory stack executable code using zxvmocreate syscall ask kernel create vmo virtual memory object describe actual physical memory page hold executable code stack space usual get handle back allow u interact vmos zxvmowrite syscall used write executable code one vmos physical page represented vmos created lazily ie dont actually exist populated point note even though root vmar describing entire aspace process two vmos representing region within root vmar aspace one populated code eventually run neither vmo actually mapped new process address space zxvmarmap stack map rw code region wx kernel perspective virtual memory management complex full review outside scope post however briefly somewhat inexactly following take place zxvmocreate create pageable vmobject sufficientlyprivileged caller keeping general pattern related vmobjectdispatcher vmobject zxwritevmo copy relevant data userspace kernelspace attempt write relevant vmobject range verified target page faultedin locked copy take place parent vmo hold relevant page writefault trigger copyonwrite page cloned page exists one allocated free list mapping vmo requested usermode process via zxvmarmap kernel verify whether caller necessary right map vmo page permission afforded mapping combination permission specified vmo requested vmar mapping eg one request zxrightexecute mapping vmo hold right requested range present checked vmmapping object created mapping triggered vmmapping maprange committing requested page coalescing page mapped flushing mmu mmu subsequently coalesced list address certainly outside scope latter blog post perhaps instance executable code run thread well computer science need employ zxthreadcreate create one host execution context thread object get handle individually name thread well place start execution even though thread generally started via zxthreadstart initial thread process must started zxprocessstart special wrapper zxthreadstart transfer ownership handle parent process child pas zxprocessstart handle newly created process object handle newly created initial thread start address thread pointing code vmo aforementioned object handle transfer case create event object nt use suitable initial stack pointer address architectureabidependent zircon codebase provides helper function computeinitialstackpointer handily computer u supported architecture currently arm race kernel perspective zxprocessstart responsible launching execution initial process thread described thread object created zxthreadcreate called per process unique ability allow single handle fully transferred parent child process removed parent process dispatcher handle list appended child parent process therefore longer act upon handle transferred child responsible lifetime initial thread execution begin thread dispatcher initial thread object marking state state running resuming thread initially created suspended allows scheduler schedule thread execution code running somewhat useless peg core looping infinitely important note though thread termination must done either thread difficult stage access syscalls parent job due parent job terminated call zxtaskkill process handle terminate runnable task case includes child thread close handle opened course exercise full test code error checking debug spew available link bottom spew something like zircon process loader test one depletionmode created process object koid root vmar koid base len created stack region vmo koid size created code region vmo koid size wrote code code vmo mapped stack vmar address mapped code vmar address created thread object koid started child process thread state thread running state process creation successful note kernel object identified koid kernel object id wait whats say access syscalls well kind disappointing sure havent linked libc whatever cant boilerplate code call sysentersyscall directly well brings u one coolest zircon feature yet one favorite vdso virtual dynamic shared object vdso special vmo created kernel consists necessary code call syscalls usermode calling syscalls directly work kernel syscall dispatcher verify pc caller situated within vmar describes mapping special vmo usermode process usermode process perform syscalls control must passed vdso code code call syscalls headache let c library lowerlevel usermode system library perform work well one great reason security shell code invoke syscalls need use vdso code kernel responsible vmo permission governing mapped kernel could choose map entirely different vdso particular process thereby restricting syscalls usermode code able call think syscall filtering steroid possible thing like forbidding driver creating process process mapping arbitrary piece mmio space etc attack surface reduction oh yeah cant map vdso vmo multiple time fool around page permission note zircon support multiple vdso variant seems active dev moment current vmo default vdso labeled vdsofull know need map vdso order hope calling syscalls let look could done first thing first finding handle vdso vmo child process another wonderful helper function zxtakestartuphandle allows caller destructively grab handle vdso vmo populated libc bootstrap code parent process executed ran normal citizen frankenstein child process turned simplicity use helper code vdso format subset elf regular elf parser used parse section needed map guy using usual vmar syscalls process zircon codebase test code blog post somewhat similar use elfloadprepareelfloadreadphdrselfloadmapsegments mapping format subset elf design simple enough hack something together basically need two mapping one first segment page size contains elf header dyn linking info constant data another executable text segment rodata first page must mapped ro text section rx kernel fail mapping permission ok got vdso vmo mapped child process child process want actually call syscalls need know vdso situated implementation libc loader using bootstrap message passed child process includes numerous program argument vdso base address example bootstrap code libcstartmain running context newly created process initial thread parse elf section vdso set everything necessary child process immediately start calling syscalls got none manually provide example program code address syscall recall first iteration simply ran code looped forever externally terminated zxtaskkill call zxthreadexit within child thread cause thread terminate prior infinite loop pas function pointer zxtaskkill zxprocessstart value passed kernel thread code rsi register spew zircon process loader test two depletionmode created process object koid root vmar koid base len vdso vmo koid size mapped vdso ro vmar address mapped vdso rx vmar address created stack region vmo koid size created code region vmo koid size zxthreadexit located wrote code code vmo mapped stack vmar address mapped code vmar address created thread object koid started child process thread state thread running state process creation thread exit successful recap create process capable calling syscalls created process object created virtual memory object vmos stack code mapped vmos root virtual memory address region vmar address space aspace mapped virtual dynamic shared object vdso vmo two vmars created thread object started process cleaned handle hope enjoyed little foray process creation zircon next looking driver model simple device driver written stay tuned
382,Lobsters,osdev,OS,Testing Closed-Source Binary Device Drivers with DDT (2010),http://dslab.epfl.ch/pubs/ddt.pdf,testing closedsource binary device driver ddt,,obj stream
383,Lobsters,osdev,OS,Haiku R1/beta1 has been released,https://www.haiku-os.org/news/2018_09_28_haiku_r1_beta1/,haiku released,haiku released release note press contact get haiku,haiku releasedafter nearly year since haiku released see release note lengthy release note press contact press inquiry mldr get haiku skip download release
384,Lobsters,osdev,OS,GNU Shepherd 0.5.0 released,https://lists.gnu.org/archive/html/guix-devel/2018-09/msg00282.html,gnu shepherd released,date prev date next thread prev thread next date index thread index gnu shepherd released http wwwgnuorgsoftwareshepherd http http http wwwgnuorgorderftphtml gnu shepherd released,date prev date next thread prev thread next date index thread index gnu shepherd released ludovic subject gnu shepherd released date wed sep useragent gnu gnulinux pleased announce gnu shepherd version release containing new feature bug fix gnu daemon shepherd gnu shepherd service manager written guile look herd system service provides replacement servicemanaging capability sysvinit init dependencybased system convenient interface gnu shepherd may also used unprivileged user manage peruser daemon eg tor privoxy mcron etc written guile scheme configured extended using guile gnu shepherd developed jointly gnu guix project used init system guixsd advanced gnulinux distribution http wwwgnuorgsoftwareshepherd download compressed source gpg detached signature http http use mirror higher download bandwidth http wwwgnuorgorderftphtml hash use sig file verify corresponding file without sig suffix intact first sure download sig file corresponding tarball run command like gpg verify command fails nt required public key run command import gpg keyserver keysgnupgnet recvkeys rerun gpg verify command release bootstrapped following tool autoconf automake makeinfo change since version excerpt news file service slot restarting service restarts dependent service well gracefully halt upon ctrlaltdel running pid gnulinux action invoked service currently running guile required guile supported unused runlevel code removed updated translation e fr ptbr sv please report bug address hidden join address hidden address hidden discussion ludovic behalf shepherd herd signatureasc description pgp signature gnu shepherd released ludovic
385,Lobsters,osdev,OS,OpenZFS Device Removal (2018),https://www.youtube.com/watch?v=KGnFhmG8gT0,openzfs device removal,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature device removal matt ahrens youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature device removal matt ahrens youtube
386,Lobsters,osdev,OS,How to create an OS from scratch,https://github.com/cfenollosa/os-tutorial,create o scratch,ostutorial document osdev wiki little book o development jamesm kernel development tutorial feature use tutorial concise strategy contributing,ostutorial create o scratch always wanted learn make o scratch college taught implement advanced feature pagination semaphore memory management etc never got start boot sector college hard nt remember fed people think reading already existing kernel even small good idea learn operating system inspired document osdev wiki try make short stepbystep readmes code sample anybody follow honestly tutorial basically first document split smaller piece without theory updated source little book o development jamesm kernel development tutorial feature course code tutorial aimed people comfortable low level computing example programmer curiosity o work nt time willpower start reading linux kernel top bottom little theory yes feature google theory lecturer pas college excessive theory worse theory make thing seem difficult really lesson tiny may take minute complete trust trust use tutorial start first folder go order build previous code jump right folder nt know mov ah missed lecture really go order always skip stuff already know open readme read first line detail concept familiar reading code google concept familiar second line state goal lesson read explain important read rest readme concise optional try write code file reading readme look code example extremely well commented optional experiment try break thing way make sure understood something trying break replicate different command tl dr first read readme folder code file brave try code strategy want many thing o boot scratch without grub done enter mode done jump assembly c done interrupt handling done screen output keyboard input done tiny basic libc grows suit need done memory management write filesystem store file create simple shell user mode maybe write simple text editor multiple process scheduling probably go order however soon tell feel brave enough basic interpreter like gui networking contributing personal learning project even though nt updated long time still hope get point thankful pointed bug submitted pull request need time review everything guarantee moment please feel free fork repo many interested continuing project let know link main fork
387,Lobsters,osdev,OS,The CLIP OS Project,https://clip-os.org/en/,clip o project,national cybersecurity agency france anssi history page version page version clip o version page version clip o version page version contributing page version anssi opening source code clip o plan transparent collaborative public action french clip o project maintained anssi government made operating system anssi gentoo hardened chromium o yocto project license used published source code lgpl expected security feature major difference operating system anssi version version difference qubes o download link install personal computer home gentoo project documentation anssi national cybersecurity agency france anssi audience activity,clip o project open source project maintained national cybersecurity agency france anssi aim build hardened multilevel operating system based linux kernel lot free open source software history initially developed answer security requirement french administration previous version clip o publicly available since september project source published project open contribution list element published source code documentation french clip o version source archive made available reference upstream patch contribution future development information see page version source code documentation english clip o version current actively developed version project considered beta status information see page version clip o version publishing version project nonworking reference source archive version result ten year internal development anssi includes implementation various security feature harden linux based operating system along source code archive declassified project documentation french description security feature implemented clip o version information see page version clip o version version currently developed version clip o project version still beta stage already includes interesting security property systemwide enforced filesystem integrity protection systemwide enforced distinction application binary system data uefi secure boot support development realized publicly project open discussion contribution suggestion community information see page version contributing please refer instruction page version anssi opening source code clip o public release clip o project part plan transparent collaborative public action french driven french dinsic opening clip o project source code also way anssi share work enable everybody benefit reuse build hardened linux system based clip o clip o project maintained anssi yes project currently beta status active development clip o development team anssi progressively add missing functionality security feature first stable version released project considered mature enough production enduser handling government made operating system clip o project lead maintained developer anssi source code resulting final clip o system image come popular open source project linux kernel gnu compiler collection etc project based gentoo hardened many similarity chromium o yocto project license used published source code project based lot publicly developed open source software part code specific project available open source license mainly lgpl expected security feature major difference operating system clip o project based ten year internal development anssi build hardened operating system list security property easy obtain currently available operating system multilevel support handle information multiple confidentiality level restricted administrator access production administrator able compromise system deployed production access user data fully automated unattended build source system image deep environment integration opportunity complete list available feature included documentation version see link page version version difference qubes o even though clip o qubes o project lot similar objective differ practice several topic download link install personal computer home like gentoo project clip o mostly available source code need process create system image prepackaged version clip o made available documentation contains instruction enable build version clip o different project relation clip o project name similarity coincidence lot reference shorter name clip source code clip o version historic name project current official name project clip o anssi national cybersecurity agency france anssi french authority area cyberdefence network information security ni fulfill mission anssi deploys broad range regulatory operational activity issuing regulation verifying application monitoring alert rapid response particularly government network anssi provides expertise technical assistance government department business play enhanced role supporting operator vital importance responsible promoting technology trustworthy product service system knowhow expert general public therefore play role developing trust use digital technology would like know please read audience activity
388,Lobsters,osdev,OS,Newton Storage History,http://www.dadhacker.com/blog/?p=948,newton storage history,,joined newton group early june apple since working tool database engine development tool group bunch bad politics dwell upon wound needing new position pretty quickly managed land gig working device driver framework newton arrived newton group decided junior product become first newton messagepad point bunch people happily noodling away ralph objectoriented dialect scheme newton tablet product going based decision made ce gather junior c later would become newtonscript arrived bunch exlisp hacker wandering hallway clutching c reference book looking unhappy really unhappy expensive tablet product senior entirely shelved kept rev plastic softpedalled eventually died simple driver model device retrospect probably way simple inherited heap manager eventually made work pretty well worked early storage stuff tim harrington another engineer kernel group first store inside newton kept object heap newton battery backed ram also worked scheme keeping heap removable pcmcia ram card problem heap located particular virtual address work virtual address card could vary depending slot plugged card could simply relocated heap structure problem remained power could fail user could remove card middle store update whereupon lose data worse would become flakily corrupt needed storage system addressindependent would also survive restarts group starting realize newton platform way budget ram neat work done kernel team reduce stack memory needed thread work heap manager minimize virtual memory usage fragmentation clear enough ram store much user data would need even reducing application heap need another make people ahem marketing happy hardware team added single byte lane ram basically region memory every fourth byte valid agreement hardware folk o team could populate lane byte filled four lane became like rest ram easy hardware folk solder another chip board heapbased store deal byte lane also support flash device type flash planned support could read directly like ram written without going funny little statemachine gyration given wacky bytelanes ram nonramnature flash clear bunch work storage layer object store talked actual backing store abstraction caller idea kind wacky stuff store going order make thing persistent fact internal store omp used bytelane memory plus another ordinary memory stolen rest system abstraction glued wacky memory together newtonscript world never knew difference still window reset power failure would cause store become corrupt crashproof resetproof knew done thinking putting transaction system none u thought time fix thing ship one afternoon michael culbert newton technologist came office discus battery contact bounce nervous robustness storage system talked confirmed worst fear battery contact bounce jiggling power connector toss device onto hard surface device easily momentarily lose power reset newton middle storage update data would lost said talking transaction store michael finally good argument going critical said fucked fucked echoed go tell fi software manager newton gaston head division okay take week know maybe four month product scheduled ship first thing leave work couple hour visit bookstore liked buy couple cd thinking getting take long walk came back evening closed door office worked hour day next five six week couple evening effort gaston came office tried small talk good concentrating design transaction log point really want disturbed gaston said fi tell guy going save product guess need help right thing partitionable knew practically subroutine write gaston left tracked fi told offense please tell gaston come around office anymore make nervous get folk team help piece able partition farm part thing done simply parceled people time get speed adding people late project make later thing remember clearly next couple week dreamed whole lot transaction system stuck change system mandatory code review spent two day prior checkingin talking hoarse walking code greg seitz another kernel guy allnighter apple getting build recall couple bug fix upshot transaction system could bunch update object store crash middle recover everything prior update crashed pretty cool roughly worked imagine notepad entry bunch text newtonscript storage layer break note bunch small object including text plus extra object searching object containing structure allow text quickly searched say original note buy milk add bread newton create whole set shadow object like old one change applied single write single byte somewhere store storage system commits change go back deletes outdated object power fails commit point newton deletes new object lost much work remember buy bread power fails commit point newton ensures old object gotten rid reuse space take sound simple principle fact quite difficult get correct additionally flash storage using amusing characteristic bit could go bad little like design car engine might lose gear two still maintain freeway speed without driver even noticing flashbased file system kind rocket science existing stuff microsoft manually compacted well imagine really awful pain rear newton flash store transparently realtime technical presentation got question always assumed microsofties user compact flash card done refusal believe got question several time fun nowadays user expect stuff work back existing flash file system pretty icky felt great something cool shipped added large binary support idea use virtual memory system newton o dynamically page modifiable binary object could significantly larger amount ram system eg fax first couple cut pretty miserable idea hooking object newtonscript garbage collector idea large binary associated persistent slot would live kind limbo garbagecollected would deleted system crashed deleted would cleanedup part normal transaction undo phase object persisted large binary slot large binary would kept alive took result system ram could receive multimegabyte fax modem work bitmap image larger main memory play sound likewise really large lot great technology hidden away gut newton worked piece neat happy shipped lot fun work newton one project always felt privilege part
390,Lobsters,osdev,OS,"First, Real, Operating System for Reconfigurable Computers (2001)",http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=0D315FAB84F3D3B04B5D3401FAF2401C?doi=10.1.1.8.5241&rep=rep1&type=pdf,first real operating system reconfigurable computer,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r metadata r pagelabels r endobj obj l filter flatedecode length r stream b f endstream endobj obj endobj obj type page parent r resource r content r r r r r r r r mediabox cropbox rotate endobj obj procset pdf text font r r r extgstate r colorspace r endobj obj type font subtype encoding winansiencoding basefont timesroman endobj obj iccbased r endobj obj type font subtype encoding winansiencoding basefont timesbold endobj obj endobj obj filter flatedecode length r stream r סq oh endstream endobj obj type font subtype encoding winansiencoding basefont timesitalic endobj obj endobj obj filter flatedecode length r stream ϛ g r j endstream endobj obj endobj obj filter flatedecode length r stream j x f k endstream endobj obj endobj obj filter flatedecode length r stream iur
391,Lobsters,osdev,OS,"9front ""run from zone"" released",http://9front.org/releases/2018/09/09/0/,run zone released,run zone released http http dash manual http kernel driver library program documentation,run zone released http http dash manual http coming soon print edition kernel driver support efi detect syslinux memdisk pas kernel via parameter bootrc write fatal error message kernel cap minimum sleep time syssleep kernel stop practice passing dmdir devir perm argument pc kernel get rid ugly partially broken cpuid macro pc look rsd ptr acpi reserved memory region map pc make mapalloc mapfree static memoryc fix fpu bug update header match pc pc fix ugly partially broken switch statement devarch fix devmsr thanks aiju devaoe fix dotdot walk devlinkdir make perm consistent devdraw zero initialize dimagedscreen pointer vnc drawterm devenv make ec file show world writable devip arp interface address specifies interface source address route lookup devip icmp reply multicast destination devip pad tag routing command fix removing route character tag devip send arp request null address devip fix flush copy tag replacing route entry devip fix missing wunlock ipifc yet bound device case create multicast entry error devip fix multicastarp ipconfig assigned address devip fix router advsol option validation option padded byte devip fix udp checksum devip fix use free ipifcremmulti devip make il connect fail quickly there route devip reject incompatible multicastinterface ip address pair ipifcaddmulti devmnt make sure auth chan said conection mntattach devmouse produce signed msec timestamp devmouse accept unsigned write devvga disable cursor shutdown avoiding graphic glitch reboot nusbether fix ethertype filtering nusbrc add lg nusbether sdloop new import sdloop driver thanks erik sdram new experimental ramdisk driver sdram new properly support multiple ramdisks ramdiskx corresponds sdzx wifi lilu dallas multirate audiohda support intel sunrise pointlp thinkpad etheriwl add pci wifilink thans senthil igfx support blanking turning panel power backlight fix receive nuc library ape add common field stat grp pwd ape add strnlen ape fix authh ape floating point improvement thanks spew libttf new add libttf truetype font rendering libdraw accept unsigned msec timestamp devmouse libip ignore link local address myipaddr libmach substitute devzero proc pidfpregs missing snapfs libogg nuke old liboggau libvorbis fix broken free thanks mischief mklib add acid target program fix nocast cast bug prevents address arithmetic computed compile time bfn improvement acme add spacesindent mode acme pas pointer int type avoid pointer int cast warning asaudit make error explicit authsrv implement authntlm authsrv log message aes key found pak authsrv separate mschap ntlm authentication authsrv work arround linux omiting final z avrpairs camv fix leak resize cc fix result operation used warning void cast cwfs cwfs option misleading dc fix one stack overflow check thanks burnzez dontkill explicitely set exit status emulator ui add option fixed factor scaling bound scale vertically emulator ui call flushmouse twice emulator ui drink code emulator ui fix input botch typo fplot draw ax zoom naturally unzoom gamesdmid new add gamesdmid gamesdmid new add support midi stream gamesdmid new better fnumber calculation fix fine tuning voice gamesdoom set repl scale gamesdoom use wadfs expose music lump gamesdpic new add gamesdpic gamestodpic gamesgb attempt fixing sprite priority gamesgb fix register addressing fix gamebreaking bug gamesgba handle writes vram gamesmidi properly skip sysex message gamesmines add missing check useghost gamesmus fix note volume channel selection simplify gamessnes fix input botch hjfs fix unbounded recursion bug hjfs hjfs set group new file parent directory thanks umbraticus ipcifsd fix authentication ipcifsd limit response data count remotebuffersize avoid empty filename root new add minimal stateless server network boot dns configuration new make constant message type check server identifier request recheck ndb every minute new ignore short nonlocal source packet new announce alldhcpservers multicast address interface linklocal address ipdhcpd add varargck pragma warning fatal syserr r format ipdhcpd handle multiple network interface dont get confused interface address ipdhcpd parseip error handling make sure client ip add explicit length argument lookupname lookupserver ipdhcpd reject bogus request handle multiple ether attribute ndb cleanup ipipconfig add missing debug macro ipipconfig add varargck pragma warning function ipipconfig call mklladdr get confhwa initialized ipipconfig check recvra timeout ipipconfig make daemon le chatty log syslogipconfig instead ipipconfig simplify combining mklladdr mkclientid ipipconfig use ipmove instead memmove iptftpd deal block wrap arround kbdfs handle mouse control kmouse kshift button swap parallel bring back x form handling kbdfs ignore first scancodes number row kbtabctl control key reverse mapping mothra persist k command mothra add matching k flag thanks piroko ndbcs add flag lookup control message toggle lookup ndbcs make host practical checking ip version local interface ndbcs prevent deadlock ndbcs mounting srvdns net ndbcs dns lookup got loopback link local address ndbdns fix delegation norecursion r flag ndbdns fix encoding srv record target ndbdnsdebug handle name ndbdnsgetip report error dns resolution fails ndbdnsquery handle name mount dns service play handle file name containing consecutive space rc fix xpipefd unbalancing redir stack screenrc bind v already done cpu server ssh add r extra raw mode ssh fix nil dereference term isnt set r requested ssh wait remote channel close thanks piroko sshfs going annoy everyone least match documentation stats fix crash fag window narrow stats read cputemp c set scale max c stats fix etherstats avoid vmax sysinfo minor formatting fix tc shiftjis add support halfwidth kana tc support eucjp ji x code upasnedmail marshal option n mutually exclusive upassmtp allow remote port set something smtp eg ssmtp upassmtp use current login id absence u option per man page valley call srand actual random phrase used vncs fix mistake screen v gscreen thanks eekee vncs silence devdraw debug print vncs support desktop resize extension update devdraw vncv adjust window size desktop resize fix canresize check vncv handle enclosed literal address host vncv implement extended desktopsize extension cleanup vt implement proper selection thanks orib webfs handle unknown status code continuation reset status handling continuation avoid infinite loop win bind text file properly instead special case documentation avl add avlminavlmax synopsis dc add pi program example getuser add source sysname hgfs fix typo thanks piroko ip document ipifc connection fix delay formatting mothra fix formatting ndb ndbinform also publishes address iwlwifi essidbssid misleading sshfs drink troff sshfs language sshfs replace much maligned r option stats document z flag thanks xcko ttfrender new wadfs fix typo syslibdistndbcommon synchronize root server link root hint source fix incorrect character range vgaunicodefont leading missing cjk character turkey simplified timezone thanks erkin ml update pci database fortune looking running plan jslinux skip tavakkolian
392,Lobsters,osdev,OS,Beta release nears for BeOS-inspired open source OS Haiku,https://www.computerworld.com.au/article/646410/beta-release-nears-beos-inspired-open-source-os-haiku/,beta release nears beosinspired open source o haiku,haiku community project statistic application http wwwhaikuosorg,year since project launched year since last release operating system inspired open source haiku o nearing beta release long road haiku project launched august initially named openbeos beos one great could desktop os launched system almost became operating system apple hardware instead apple decided go openstep mdash developed next software founded steve job ousted apple last formal release beos mdash mdash took place march later unreleased version leaked online inc shuttered asset snapped palm although beos dead haiku much alive first beta o expected released late month read haiku background haiku developer adrien destugues said remaining work beta released includes fixing embarrassing bug also need set various thing make possible publish update bugfixes beta shipped add biggest challenge length time release recent release haiku alpha date back november alpha shipped september get process back running shape figuring buildbot setup distribute release mirror get cd pressed ship user want buy one etc destugues said well development task side work take lot time delayed release lot timeline beta may still change team preferring ship quality product even mean delaying release another month two unfortunately nt formalised qa team thehaikuproject people planning create one start working beta destugues said mean first beta rough edge start somewhere uncertainty also mean clear quickly nonbeta release ship thehaikuproject currently work setting goal ship release everything ready destugues said release ambitious goal however term feature already ahead u long period bugfixing boring task know people contributing tohaikuare interested would rather work exciting new feature included make really stable maybe however problem beta release u mean known bug think google used beta tag gmail long time already obvious thatthe system production working million user beginning first beta intention frequent release mdash potentially new beta every six monthsmdash well continuous update via o package manager fine people start using beta nt wait final release destugues said initial goal haiku dropin replacement beos mdash final major version operating system however release first haiku alpha goal reviewed given advance operating system poll list feature developer user would vote decide destugues explained poll held right first release ofhaiku people perhaps bit optimistic choice new feature include support wifi modern web browser cs support many improvement apis support system notification application localisation easier laying control gui stack tile window management probably lot also launch daemon charge starting monitoring system service restart deskbar tracker restart networking restart medium service button case beos also added cpu support support eight cpu core sata support support ram mdash everything need runhaikuon modern machine added perhaps important controversial change decision add package manager started looked like reasonable requirement possible install beta update without reinstalling everything eventually date destugues said focus thing right way however ended growing much ambitious package manager featuring draganddrop install transaction allowing rollback older state system management update system application later also added appstore like function ability user give review different language rating lot work packaging good selection software figuring build automatically continued page breakhaiku community haiku core development team mdash continuously contributing project mdash comprises handful two individual though project statistic reveal around people contributing least one patch every year hard get sense full size community destugues said user registered show world map ofhaikuusers subset active member forum said user irc channel everyone interested inhaikuwill irc addition beyond contributing core project people working haikuports writing recipe package software forhaiku haikuarchives involves updating old beos apps work new system well writing new application also user helping forum taking time create followup bug report destugues said haiku longterm participant google summer code gsoc program involves mentoring student threemonth period since also part google codein google opensource competition preuniversity student aged running part effort share knowledge experience something important project writing shipping operating system destugues said destugues began contributing haikuproject gsoc student originally discoveredhaikusomewhere around friend school asked download burn cd beos old computer looked like o would run decent speed said indeed added back thenhaikuwas starting get appserver running destugues said used beos deved distro precisely time eventually switched linux still followinghaikuprogress opportunity contributing part gsoc came applied andhaikuwas obvious choice first gsoc application accepted spent year learning project successfully applied project mdash adding internationalisation support haiku mdash successful following gsoc invited talk begeistert conference focused haikuand beos memorable experience including road trip crossing france germany another gsoc student twohaikudevs get event said today haikuis main operating system feel nothing come close term ease use responsiveness overall coherence destugues said maybe used project also great learning experience c language algorithm computery stuff also managing team especially single leader inhaikuin charge decision possibly difficult setup get working community management many skill necessarily directly part job still relevant haikuis tool enabling want computer place still learning lot thing around computer science social interaction lot think deserves giving back time fully worth prior joining haiku worked paint application called still manages project year also ended maintaining various piece software said interestingly thing wrote scratch seems skill interest understanding others code making change way keep running properly find work quite well always annoyed people always want rewrite everything lot learn reading people code destugues also work professionally software developer largely telco sector currently involve much open source code like working colleague improving said beyond beos open source enthusiast project drawn commercial interest company previously relied beos destugues said one example tunetracker system company build command centre software radio station range software run beos tunetracker basic suite ship beos example company helped fund part haiku help get software running operating system destugues said hope see future term commercial apps ported tohaiku added great achieve open source software would nice see people managing earn money based work forhaikuapplications application haikuports haikuarchives currently house range software used o destugues said worked range software including small game porting tool embedded system occasional python library needed people bigger goal achieved thing porting qt libreoffice large application linux world said said motivated people ended working haiku mean fewer resource dedicated software ecosystem around o working onhaikuis often difficult one end going way completely different expected said example port libreoffice webkit often end uncovering bug deep system use unexpected way compared usual simple application working one bug may find text editor simply task start writing new one happened kapix porting libreoffice created koder kind rabbit hole programming quite common inhaiku fortunate allinone design o one single source repo one single team control whole o allows u work way mean one want work application sooner later fixing o well said although haiku large codebase team try keep clean reducing barrier entry potential contributor documentation sometimes lacking make another thing people contribute said team welcoming always willing guide newcomer code contribution process even people fluent c many way contribute keeping translation various language date helping user completing user guide etc programming side haikuis large project task domain matter kernel hacker user interface designer even web developer always way contribute haiku downloaded http wwwhaikuosorg
395,Lobsters,osdev,OS,Dagstuhl: Network Latency Control in Data Centers,http://drops.dagstuhl.de/opus/volltexte/2016/6760/pdf/dagrep_v006_i007_p015_s16281.pdf,dagstuhl network latency control data center,,obj length filter flatedecode stream x r q ivu h mr z n ӿax endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form formtype ptexfilename ccpdf ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r r length filter flatedecode stream ԋ tcei iբv v w endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form formtype ptexfilename ccbypdf ptexpagenumber ptexinfodict r bbox lastmodified pieceinfo illustrator r resource extgstate r property color dimmed false editable true preview true printed true title visible true length filter flatedecode stream v guq e endstream endobj obj length stream creator adobe illustrator r marc herbstritt title ccbyiconsvg creationdate canvassize boundingbox hiresboundingbox documentprocesscolors cyan magenta yellow black color rgbprocesscolor passermarken none endcomments endstream endobj obj length stream boundingbox hiresboundingbox begindata hex byte enddata endstream endobj obj filter flatedecode length stream c ö e gp k j j n tk f p քچcx e yk fq ԯ
396,Lobsters,osdev,OS,Oberon System Implemented on a Low-Cost FPGA Board (2015),https://pdfs.semanticscholar.org/2c11/7c1456eb96bbea19aa3c8b018de4fc9387bc.pdf,oberon system implemented lowcost fpga board,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream
397,Lobsters,osdev,OS,Homogeneous Operating Systems Are Better,https://ecc-comp.blogspot.com/2014/12/homogeneous-operating-systems-are-better.html,homogeneous operating system better,terry davis temple o checking,recently encounter two similar implementation idea homogeneous operating system homogeneous operating system operating system created one programming language way several benefit get clear negative consequence using paradigm like see thought anyways let get terry davis temple o great example homogeneous o nt beautiful o like terminal crack everything see screenshot modified ease entire system built fine c actually holyc c dialect device driver shell c programming language used flexibility show counting demonstration video show draw directly screen c interpreter shell jump function definition find source file ease recommend checking promise interest modern operating system whether linuxbased bsd window mac find incredibly hard modify aspect without dive extremely convoluted manual read mailing list cast magical incantation ca nt look yes plan right see tcp implementation example could anything even better nt understand certain function call press whatever choose jump tcpc read code best scenario source file contain nice little heading top explaining function file typically used documentation usecases covered system required research begin anything significance writing x application good example extremely convoluted trying read documentation fact may documentation missing nt best possible temple o system going mention shortly source used apis stopping developer heart desire truly complete control operating system temple o nt first reading unix hater handbook hilarious great book way author talk bit lisp machine glorious agree somewhat convinced lisp machine used programming language called come lisp lisp high level used entire system processor processed lisp shell lisp interpreter gui coded lisp lisp machine programmer breathe eat sleep lisp temple o lisp machine operating system allowed developer jump function easily modify aspect system little restriction developer free use lisp function anywhere please nt easy developer today ask right best way list function available system simply put ca nt unless running completely opensource o compiled everything debugging symbol rare eccentric computer user unfortunate world instead stuck man page cryptic program name htmlbased documentation massive amount library duplicate functionality next little bit text talk unixisms way mean interpreted unixisms suck consider life could changing paradigm bit anyways thinking bit paradigm began think consider maybe unix philosophy write program one thing well little maybe written write routine one thing well maybe get rid unix pipe keep concept stream pas data around routine consequently use programming language typing system define data passed routine much flexible paradigm obsoletes text stream universal interface data data restriction said data make think idea like synthetic filesystems silly fifo file silly exist help u deal mess api pas data filesystem used persistent storage ram temporary storage consequently also make unix philosophy rule store data flat text file redundant store data intended stored nt go way mangle human readable computer actually say data meant expressed text reason wo nt see shift paradigm time soon primarily cost many developer spent life using traditional o want make effort switch thousand business use traditional os worker forced use many application written many different language possible unless everyone big guy decides want move way maybe crazy best ever lifetime right
398,Lobsters,osdev,OS,A Constructive Look At TempleOS (2015),http://www.codersnotes.com/notes/a-constructive-look-at-templeos/,constructive look templeos,templeos terry davis god instructed construct temple terry also suffers schizophrenia frequently banned forum mocked ignored forgotten lars real girl nancy oliver got idea thinking plan developed bell lab installation shell holyc file explorer hypertext doldoc oberon system developed eth zurich holyc programming environment hardware security http wwwtempleosorgtempleoshtml us following analogy conclusion xerox alto oberon plan video much code would needed one way thing work something worthwhile found everything nt write thing big flaw,templeos somewhat legend operating system community sole author terry davis spent past year attempting create new operating scratch terry explains god instructed construct temple covenant perfection unfortunately terry also suffers schizophrenia tendency appear various programming forum burst strange paranoid often racist comment frequently banned forum combination templeos amateurish approach terry unfortunate outburst resulted templeos often regarded something mocked ignored forgotten many people done thing understandable templeos booted reminded movie saw called lars real girl man buy realdoll treat real girlfriend rather laughing resident town instead band together treat real person started watching expected ferrellesque comedy guy would played laugh instead found incredibly compassionate story within writer nancy oliver got idea thinking nt treat mentally ill people like animal brought kindness compassion table many bad thing said templeos many aspect seem poorly constructed would nt work real world going ignore easy negative never learn anything new many might consider templeos waste time compared fullyfeatured os linux never success plan developed bell lab research o designed successor unix despite big name big idea never kind commercial success plan therefore waste time many would argue idea since found way product perhaps instead look templeos research operating system accomplished locked established thinking backwards compatibility market demand learn willing listen installation installation incredibly painless supplied distribution act livecd harddisk installer hit couple time installed installed faster ubuntu booting window morning ca nt help notice long take even window appears booted nt actually become properly usable perhaps another minute listen spot point usability declared window play startup sound indicate templeos boot hard disk second paging instantly usable shell templeos programming language holyc whole operating system written except assembly lowerlevel part perhaps unexpectedly language also used shell right execute shell command using clike language go directly compiler every filename printed shell hyperlink rightclick get context menu one builtin calculator application shell one enter command line get answer even go use shell repl build entire program menu file sits home directory accessible time hitting ctrlm editing file create kind launcher wish file autosave exit one mean also use popup scratchpad templeos systemwide autocomplete hit point get list completable word filename also symbol name source code indexed jump function anywhere even shell system work program throughout o templeos unified hypertext really shine presented shell commandline call uf foo disassemble function symbol printed hyperlinked shell window click go source objdump ca nt type function used display file like do type unix cat course hypertext respected even use type show bmp file directly shell raise interesting challenge os shell pure text ca nt multimedia shell file explorer operating system something like explorer nautilus file manager let browse around directory tree clicking templeos file manager program ctrld kinda extension shell surprisingly nt need operation using hyperlink system permeates operating system shell act explorer type dir listing simply click directory hyperlink change directory get new listing within shell click go take little getting used used admit growing quite attached hypertext doldoc notable feature templeos ubiquitous hypertext system doldoc foundation shell text editor unlike unix represents everything via plaintext everything temple stored doldoc format format somewhat akin rtf hit ctrlt point inspect raw text directly doldoc nt text store image even mesh directly document put macro hyperlink command run click want build menu launcher make new text document put link allows something similar oberon system developed eth zurich distinction text program menu form blur together one html json xml shell script source file text file templeos replaces via one unified hypertext representation file templeos source code one line contains passage several routine include routine part hyperlink unlike html perhaps may lead page listing routine doldoc macro used grep actually performed click html version could become stale noone updated always uptodate every ide let embed image flowchart directly source code kinda make sit take notice yes flowchart box hotlinked click go directly source code implement press ctrlr point bring resource editor let draw thing sprite draw embedded directly document refer using numbered tag standalone paint program supplied o already one accessible time within program want sketch doodle open new document draw thing save holyc language provided holyc heart reasonably complete version c notable extension main function templeos program anything write toplevel scope executed run compiler c something like int myfunction ca nt write myfunction run every piece code templeos except initial kernelcompiler jit compiled demand yes right run program without compiling simply using include statement command line program brought shell current namespace execute individual function directly issuing command tag function helpindex compiler directive automatically appear documentation right place yes fully dynamic nt need run rebuild process compile file documentation update hit see change reflected help system holyc provides exe compiler directive used shell external command include output back source code provides way user implement certain set functionality would otherwise require macro specialized compiler support attach metadata class member holyc class system implement full metadata reflection support given class enumerate every member get name offset etc surprising also attach custom metadata class member compile time example us might include storing default value minmax range printf format string language support special lastclass keyword used default argument function cause compiler supply name previous argument type string allowing metadata lookup aheadoftime linker object file dynamic linker exclusively responsible binding symbol together load time symbol table remains accessible runtime used purpose templeos environment variable use regular variable programming environment holyc formal build system compile file done project span one file include file one compile compiler compile line code le second hit editor program jit compiled run toplevel statement executed turn task loaded ready toplevel statement included sort loop stay running otherwise dropped back new shell however shell exists within task interactively use repl start calling function inside program current ide support link documentation perhaps might place call dbg somewhere program hit ctrlaltd dropped directly debugger point debugger course still function interactive repl ide support dropin repl much support code take open window draw graphic operating system templeos onetoone correspondence task window single call dcalias enough return device context window soon main function called draw making window surely important thing windowed operating system hard gdi directx opengl could learn something hardware security hardware support mean templeos support hardware minimal core system make pc support graphic card vga support soundcard pc speaker support networking templeos use memory protection code system run ring highest privilege level meaning stray pointer write could easily crash entire system deliberate design choice http wwwtempleosorgtempleoshtml fun access everything teenager book mapping commodore told every location memory liked copying rom ram poking around rom basic variable everybody directly poked hardware port terry philosophy growing successful machine like approach standardized platform boot thing machine locally handson machine user allpowerful terry us following analogy linux semitruck gear operate window like car templeos motorbike lean far fall nt argues linux designed use case people nt linux say aim mainframe user connected crash one user program could take others obviously would bad personal computer one user make sense instead o empower single user get way templeos file permission one user else could give permission honest often wondered unix would nt better made security happen mount level instead micromanaging per file thing thread templeos nt need process thread thing memory protection need something parallel spawn another process let share data appreciate terry philosophy probably fair point come one thing ecosystem commonplace exchange distribute program physical medium via store magazine much hate say bird flown conclusion many way templeos seems similar system xerox alto oberon plan allinclusive system blur line program document video terry give brief tour interesting feature templeos show build small graphical application scratch let think window second consider minute much code would needed register windowclass create window gdi command run message pump etc need set visual studio project perhaps either use resource editor embed bitmap try load disk somehow compare tiny snippet code terry writes accomplish task certainly make wonder went wrong watching templeos execute builtin test suite jawdropping experience ca nt help impressed vast number demo game graphing calculator debugger compiler fly eye see sheer amount content written year see effort expended labor love wonderfully heartwarming nt claim immediately dump windowslinuxosx start using templeos daytoday operating system however might find take time open mind new idea might learn something unexpected place learn apply endeavor one way thing work current toolsets thing one way nt mean necessarily best way something worthwhile found everything incredibly easy assume something nt successful developed one guy nothing discover someone invested year work something possible might find even one interesting idea nt write thing big flaw ok color author worst enemy dismiss everything life used never expand outside already know gnu cathedral linux bazaar perhaps place temple somewhere
399,Lobsters,osdev,OS,What I could not undiscover about Unikernels,http://fourlightyears.blogspot.com/2018/08/what-i-could-not-undiscover-about.html,could undiscover unikernels,blogger,awesome inc theme powered blogger
400,Lobsters,osdev,OS,OSHUG Event #69 - Members' Lightning Talks,http://oshug.org/event/69,oshug event member lightning talk,british computer society open source specialist group hammerspoon staggeringly powerful macos desktop automation hammerspoon chris jones cooking touch science dash engineering chris swan building open source electric surfboard http githubcomlargeostrichopenelectricsurfboard http githubcomlargeostrichopenwaterjet peter bennett jumbo servo position control andy clark next generation storage interface dr kunkel upspin personal storage sharing system upspin sevan janiyan venture plan c compiler riscv dr richard miller note please aim arrive event start prompt,nt usually september meeting thought would interesting hear member project working year delighted welcome range speaker spend minute discussing project joint meeting british computer society open source specialist group hammerspoon staggeringly powerful macos desktop automation hammerspoon expose many part macos simple scripting language lua goal make powerful flexible tool serious power user automate customise many thing possible talk look history automation apple computer hammerspoon work excellent thing help course open source also jump help make even better chris jones creating using advocating open source software since spent last year professional life working onwith open source first half canonical creator ubuntu since working openstack hp red hat year zealously running linux desktopslaptops spent last year recovering macos user nevertheless retained passion contributing open source cooking touch science dash engineering sou vide vacuum technique place food temperature controlled water bath vacuum bit nt important squeezing air zip lock bag generally sufficient precise temperature control essential ensure right protein denatured thermostat typical piece kitchen equipment nowhere near good enough add sensor immersible temperature gauge actuator remote control socket control software dev board run ability cook perfect steak egg fish whatever chris swan tinkering electronics since small child got software realised necessary make hardware interesting thing day job cto global delivery dxc technology bringing large service company customer world devops infrastructure code evening weekend often found making sort project around dev board particular fondness raspberry pi building open source electric surfboard increasing availability printer wide variety component available internet hard build electric surfboard talk cover design construction opensource electric surfboard concept hitting sea including challenge met along way especially managing lot electricity close lot water project found github http githubcomlargeostrichopenelectricsurfboard http githubcomlargeostrichopenwaterjet peter bennett currently studying mining engineering camborne school mine university exeter long standing interest open source technology particularly printing electronics previously reimagined peripheral edsac using printing arduino chiphack wuthering byte jumbo servo position control andy needed really big servo rather spend fortune industrial monster decided make one would used raspberry pi microcontroller decided would digitally controlled rather usual analogue pwm andy clark making repairing shed bottom garden last year code design often quirky enchanting project found github documented workshopshed blog next generation storage interface efficient convenient robust execution datadriven workflow enhanced data management key productive computeraided rd e still storage stack based lowlevel posix io object cloud storage talk introduces chance establishing open communitydriven nextgeneration storage interface similar fashion existing forum forum would bring together vendor storage expert user discus key feature api establish governance strategy envisioned coarsegrained api aim overcome current obstacle highly parallel workflow would beneficial also domain big data even desktop pc bear opportunity create new ecosystem dr kunkel lecturer computer science department university reading previously worked postdoc research department german climate computing center dkrz partner scientific computing group hamburg manages several research project revolving around highperformance computing particularly highperformance storage julian became interested topic hpc storage study computer science besides main goal provide efficient performanceportable io hpcrelated interest data reduction technique performance analysis parallel application parallel io management cluster system costefficiency consideration software engineering scientific software upspin personal storage sharing system upspin try address shortcoming sharing privacy availability data internet modern day whether making state available across multiple computer sharing party upspin personal namespace accomodate built upon sevan janiyan founder venture provides system administration consultancy service fan operating system computer different cpu architecture spare time maintains build open source software variety system featuring powerpc sparc arm cpu plan c compiler riscv plan operating system developed bell lab using new c compiler written ken thompson also later used implement kernel inferno operating system bootstrap early release go language like plan compiler highly portable elegantly minimalist lightweight quick arm version example line code compiles second raspberry pi talk describe exercise retargeting plan c compiler generate code riscv open instruction set architecture dr richard miller learned c retargeting rehosting dennis ritchie original unix c compiler interdata since retargeted unix plan c compiler various cpu n nios ii note please aim arrive event start prompt
401,Lobsters,osdev,OS,FlexSC: Flexible System Call Scheduling with Exception-Less System Calls (2010),https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Soares.pdf,flexsc flexible system call scheduling exceptionless system call,,obj goto endobj obj introduction endobj obj goto endobj obj real cost system call endobj obj goto endobj obj mode switch cost endobj obj goto endobj obj system call footprint endobj obj goto endobj obj system call impact user ipc endobj obj goto endobj obj mode switching cost kernel ipc endobj obj goto endobj obj exceptionless system call endobj obj goto endobj obj exceptionless syscall interface endobj obj goto endobj obj syscall page endobj obj goto endobj obj decoupling execution invocation endobj obj goto endobj obj implementation flexsc endobj obj goto endobj obj syscall thread endobj obj goto endobj obj flexsc syscall thread scheduler endobj obj goto endobj obj system call galore flexscthreads endobj obj goto endobj obj eventdriven server case hybrid execution endobj obj goto endobj obj flexscthreads endobj obj goto endobj obj experimental evaluation endobj obj goto endobj obj overhead endobj obj goto endobj obj apache endobj obj goto endobj obj mysql endobj obj goto endobj obj sensitivity analysis endobj obj goto endobj obj related work endobj obj goto endobj obj system call batching endobj obj goto endobj obj locality execution multicores endobj obj goto endobj obj nonblocking execution endobj obj goto endobj obj concluding remark endobj obj goto endobj obj acknowledgement endobj obj goto r fit endobj obj length filter flatedecode stream
402,Lobsters,osdev,OS,Haiku R1/beta1 release plans - at last,https://www.haiku-os.org/blog/waddlesplash/2018-08-19_r1beta1_release_plans_-_at_last/,haiku release plan last,release plan last current release timeline aug aug aug aug sep sep sep sep sep,release plan lastat last nearly upon u already explained mailing list two non task issue remain milestone prototype solution buildbot major service rehabilitated need minor tweaking handle new branch mmlr massaging haikuporter buildmaster handle new branch though work quite finished yetso essentially stand u release lot testing testing polishing little bit piece neglected along way already begun drafting release note translation tool synchronized master even though string freeze happened yet bulk translation work beginthe current release timeline aug aug last minute scramblewe hopefully commit anything riskytesting start ramping aug branch buildbot buildmaster generating release aug sep hand deck testing release candidatesunless unfixable showstopper found release sep sepfinalization golden master image picked buildbot final translation synchronization sep seprelease ready window account unexpected delaysonward
403,Lobsters,osdev,OS,The Jury is In: Monolithic OS Design is Flawed,http://ts.data61.csiro.au/publications/csiro_full_text/Biggs_LH_18.pdf,jury monolithic o design flawed,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڝz ց ec q ecʞ r p z f x e c u ܡ v endstream endobj obj type xobject subtype form formtype ptexfilename imgslinuxslocpdf ptexpagenumber ptexinfodict r bbox resource procset pdf text extgstate r font r length filter flatedecode stream f endstream endobj obj filter flatedecode subtype length stream e b nh n x q 顦 endstream endobj obj length filter flatedecode stream xڅ x g q x چi ǵioąp n ia e xޕ l qa w yc f ъs r x v j ϡt ï g b narܮ l endstream endobj obj type xobject subtype form formtype ptexfilename imgsarchpdf ptexpagenumber ptexinfodict r bbox resource procset pdf text colorspace r r extgstate r r r r font r length filter flatedecode stream pt wѭƹ u age xe szr e endstream endobj obj length r n alternate devicergb filter flatedecode stream vdf c n z v l r dgry j e e n c ёl q wt w endstream endobj obj length r n alternate devicergb filter flatedecode stream rk n endstream endobj obj length r filter flatedecode stream ecy qk e
404,Lobsters,osdev,OS,Formal Specification and Verification of a Microkernel (2010),http://people.cs.ksu.edu/~danielwang/Investigation/Formal_Verification/JD10.pdf,formal specification verification microkernel,,obj pgfprgb pattern devicergb endobj obj goto endobj obj introduction endobj obj goto endobj obj document outline endobj obj goto endobj obj related work endobj obj goto endobj obj motivation contribution endobj obj goto endobj obj preliminary endobj obj goto endobj obj background endobj obj goto endobj obj academic system software stack endobj obj goto endobj obj academic system semantic stack endobj obj goto endobj obj language endobj obj goto endobj obj vamp assembly language endobj obj goto endobj obj isabellesimpl verification environment endobj obj goto endobj obj device endobj obj goto endobj obj communicating virtual machine endobj obj goto endobj obj cvm state endobj obj goto endobj obj cvm transition endobj obj goto endobj obj cvm primitive endobj obj goto endobj obj cvm isabellesimpl endobj obj goto endobj obj vamos microkernel design implementation endobj obj goto endobj obj vamos functionality endobj obj goto endobj obj vamos isabellesimpl endobj obj goto endobj obj abstract system layer endobj obj goto endobj obj overall system bird eye view endobj obj goto endobj obj abstract type endobj obj goto endobj obj vamp assembly process model endobj obj goto endobj obj process initialization endobj obj goto endobj obj process interface endobj obj goto endobj obj output function endobj obj goto endobj obj process transition endobj obj goto endobj obj vamos model endobj obj goto endobj obj vamos state space endobj obj goto endobj obj virtual user machine endobj obj goto endobj obj priority endobj obj goto endobj obj scheduling data structure endobj obj goto endobj obj right datastructures endobj obj goto endobj obj send status database endobj obj goto endobj obj device data structure endobj obj goto endobj obj initial vamos state endobj obj goto endobj obj output function endobj obj goto endobj obj transition function endobj obj goto endobj obj vamos trap handler endobj obj goto endobj obj access control endobj obj goto endobj obj memory management endobj obj goto endobj obj process management endobj obj goto endobj obj scheduling mechanism endobj obj goto endobj obj device driver support endobj obj goto endobj obj interprocess communication endobj obj goto endobj obj read kernel information endobj obj goto endobj obj vamos scheduler endobj obj goto endobj obj vamos interrupt delivery endobj obj goto endobj obj vamos correctness endobj obj goto endobj obj data abstraction endobj obj goto endobj obj abstracting user process endobj obj goto endobj obj abstracting scheduling datastructures endobj obj goto endobj obj abstracting priority endobj obj goto endobj obj abstracting send status database endobj obj goto endobj obj abstracting right datastructures endobj obj goto endobj obj abstracting device datastructures endobj obj goto endobj obj vamos abstraction relation endobj obj goto endobj obj implementation invariant endobj obj goto endobj obj value bound endobj obj goto endobj obj validity consistency requirement endobj obj goto endobj obj miscellaneous requirement endobj obj goto endobj obj summing endobj obj goto endobj obj simulation theorem endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj weakening abstraction relation endobj obj goto endobj obj auxiliary function endobj obj goto endobj obj correctness timerinterrupt handler endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj correctness trap handler endobj obj goto endobj obj implementation correctness function endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj implementation correctness ipc endobj obj goto endobj obj implementation correctness function endobj obj goto endobj obj correctness vamos toplevel function endobj obj goto endobj obj correctness system step endobj obj goto endobj obj conclusion endobj obj goto endobj obj future work endobj obj goto endobj obj appendix endobj obj goto endobj obj formal specification vamos trap dispatcher endobj obj goto chapter endobj obj bibliography endobj obj goto r fit endobj obj length filter flatedecode stream h wzw endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename eulepdf ptexpagenumber ptexinfodict r bbox resource procset pdf xobject r length r filter flatedecode stream c endstream endobj obj creationdate moddate producer mac o x quartz pdfcontext endobj obj length r type xobject subtype form formtype bbox resource r filter flatedecode stream vtz q g q fx p k apbj uz u kbk endstream endobj obj endobj obj endobj obj procset pdftext extgstate r r font r endobj obj type extgstate sm endobj obj type extgstate opm endobj obj type font subtype truetype basefont povulw fontdescriptor r width r firstchar lastchar encoding macromanencoding endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname povulw italicangle stemv maxwidth xheight r endobj obj endobj obj length r filter flatedecode stream xڽx tw j窎 l x rmi kv e lk т hv f endstream endobj obj endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r xobject r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream b endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream g و jum endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream ʣip q qݔ aa u ppǆ ˍ жnr endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream zq h endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream b w kt vվ v c r ka è و l q endstream endobj obj type page content r resource r mediabox parent r annots r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream jy ѿ endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream h q endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream b 결 h uv g p b tnx endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream h w k ƨf f endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto chapter endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream z endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream h p q endstream endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream gg po wyd ѥ q kb iqǔ p
405,Lobsters,osdev,OS,CuriOS: Improving Reliability through Operating System Structure (2008),http://people.cs.ksu.edu/~danielwang/Investigation/System_Security/curios.pdf,curio improving reliability operating system structure,,obj stream j u j w b
406,Lobsters,osdev,OS,Freeing the Web from the Browser,https://www.reinterpretcast.com/open-hypermedia,freeing web browser,freeing web browser past transclusions present kind system today unclear value exploratory study macho executable storyboarding effort,freeing web browser published august joe savage web application platform anything else day piece focus solely role hypermedia research activity web without doubt powerful research tool currently available man longer must researcher comb endless index catalogue find looking instead hyperlink allow user associatively explore rich interconnected structure information ease click possible navigate vast global space information comprising document virtually subject talking web mean hypermedia system whole http also browser general experience spite tremendous improvement came however web frankly disappointment comparison could saddening perhaps way web constrains use link example although link primary form reference web underpinning tangle connection make system useful ability create new link privilege granted content producer vast majority interested piece work merely reader unable contribute consume result linkbased navigation web today constrained connection made document author think second billion across globe rely web enhance intellectual capability daily basis building understanding rich mesh connection yet open web browser people presented navigation opportunity carefully selected aid finding information looking rather connection author happened make crafting document might find work eventually following link link search arduous come guarantee success depends heavily popular author happen link degree constrains web hard overstate really expect author identify salient connection piece work wider web even writing sentence problem thinking particularly hard link making fact focus almost exclusively writing past paragraph much neglected term connective value even despite fact really sublime piece work relating saying might find immense value pointing towards driving point people come piece work different background different reason ideal set link article nontechnical reader instance differs wildly system programmer differs still hci researcher different people different perspective information connected allow range perspective represented shared digitally limit one point view one could imagine system multiple set link could associated single resource accommodate allowing range different viewpoint thing connected system connecting information together becomes powerful tool available rather privilege granted content producer user empowered create explore varying perspective information see fit instance better reflect goal motivation consuming piece medium connect idea work mass medium area may le widespread appeal draw new relationship historic work browser support video mockup imagined hypermedia system allowing multiple perspective information connected link system serve powerful tool building externalising understanding researching topic article instance read make connection great deal existing research lacking natural way accomplish suffice making connection implicitly plaintext note process clunky best imagine system also collaborative editing annotation capability would researcher dream imagine world could instead effortlessly offload understanding hypermedia system using link world could construct refine set connection way seamlessly integrates research process computer would serve powerful medium thought enabling better develop understanding represent result form could naturally navigated manipulated shared mockup imagined hypermedia system allowing effortless draganddrop link creation past turn idea nt new fact vannevar bush pondered benefit kind capability way back visionary essay may think new profession trail blazer find delight task establishing useful trail enormous mass common record inheritance master becomes addition world record disciple entire scaffolding erected vannevar bush may think idea also central movement within hypermedia research community late early known open hypermedia unlike www open hypermedia system make hard separation hypermedia structure link transclusions resource content link stored completely separately content upon displayed hypermedia functionality including creation interaction link exposed via open protocol implemented independent program called link server recreate code editor simulator spreadsheet browser already native program much better suited task separation imbues system kind flexibility achieved web today benefit twofold firstly system allow user create explore multiple perspective information connected already touched upon addition though exposing hypermedia structure open protocol thirdparty program written use protocol interact hypermedia system user empowered naturally explore information space span domain multiple program connecting information powerful allow single monolithic browser program fun mockup imagined hypermedia system without single browser program present idea already around kind system today well think lot reason doubt important though open hypermedia system require astounding amount design engineering work return offer benefit unclear value web today represents local maximum solution space clear effort required move potentially better solution worth cost number technical detail system explored existing research really lacking view research considering human factor play value people extract unique capability system people find capability useful useful design system best serve user anyway link different source displayed link displayed across various type medium history work multiwindow hypermedia system replicate organisational navigational benefit tab system like frustrated lack clarity around question set explore open hypermedia detail final year undergraduate study university bath though generally find interested system programming interaction design felt strongly potential value system could nt help try something result roughly page document entitled freeing web browser revisiting open hypermedia aim prove improve value open hypermedia system encourage future work area nt expect anyone read document entirety think touch interesting idea go way proving immense value kind system particularly happy result exploratory study participant sift great deal information understand hex dump macho executable outcome initial storyboarding effort included proposal chain history could separated multiwindow hypermedia system using multiple desktop also produced highfidelity video prototype demonstrating fundamental link navigation backtracking might work kind system embedded highfidelity video prototype showing fundamental imagined hypermedia system really think idea represent significant improvement state art hypermedia system design order make system sort reality though still much work done particularly area interaction design work attempt spark wider discussion around issue certainly claim answer though nt believe open hypermedia system represent one true solution space believe significant step right direction great disservice failing consider system seriously word doug engelbart possibility improving effective utilization intellectual power society problem solver warrant serious consideration man problemsolving capability represents possibly important resource possessed society
407,Lobsters,osdev,OS,"Survey of Contemporary, Real-Time, Operating Systems (2004)",http://www.eng.auburn.edu/~baskiyar/MyArticles/Survey-of-RTOS-Informatica.pdf,survey contemporary realtime operating system,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream ea endstream endobj obj endobj obj endobj obj procset pdftext extgstate endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream p n f tg z endstream endobj obj endobj obj endobj obj endobj obj stream f endstream endobj obj stream k endstream endobj obj stream k x endstream endobj obj stream ow k w endstream endobj obj stream j z wionjz endstream endobj obj stream c nz sp ֆ xu h b endstream endobj obj stream e owtx q endstream endobj obj stream ȝ x λ p ue㑸 n ﰭ jqg l f ny ţ q ߒq vc
408,Lobsters,osdev,OS,Embedded Linux in a Partitioned Architecture for Aerospace Applications (2009),http://air.di.fc.ul.pt/air-ii/downloads/aiccsa-final.pdf,embedded linux partitioned architecture aerospace application,,obj length filter flatedecode stream vt 𣫇ǫ w ʼ ͱg pmu dӌ iw b n h ǜw z
409,Lobsters,osdev,OS,Writing an OS in Rust: Double Fault Exceptions,https://os.phil-opp.com/double-fault-exceptions/,writing o rust double fault exception,double fault github bottom double fault interrupt descriptor table triggering double fault idt double fault handler cause double fault swapped pdf dividebyzero invalid tss segment present stacksegment fault general protection fault invalid tss segment present stacksegment fault general protection fault page fault page fault invalid tss segment present stacksegment fault general protection fault kernel stack overflow interrupt stack frame switching stack idt entry ist tss task state segment hardware context switching io port permission bitmap creating tss struct loading tss global descriptor table instruction global descriptor table memory segmentation three easy piece book creating gdt loading gdt final step reload code segment register load tss update idt entry stack overflow test without test harness implementing volatile test idt double fault handler summary next intel,double fault jun post explores double fault exception detail occurs cpu fails invoke exception handler handling exception avoid fatal triple fault cause system reset prevent triple fault case also set interrupt stack table catch double fault separate kernel stack blog openly developed github problem question please open issue also leave comment bottom complete source code post found branch table content double fault simplified term double fault special exception occurs cpu fails invoke exception handler example occurs page fault triggered page fault handler registered interrupt descriptor table idt kind similar catchall block programming language exception eg catch c catch exception e java c double fault behaves like normal exception vector number define normal handler function idt really important provide double fault handler double fault unhandled fatal triple fault occurs triple fault ca nt caught hardware reacts system reset double fault let provoke double fault triggering exception nt define handler function srcmainrs nomangle pub extern c fn start println hello world blogos init trigger page fault unsafe mut cfg test testmain println crash loop use unsafe write invalid address virtual address mapped physical address page table page fault occurs nt registered page fault handler idt double fault occurs start kernel see enters endless boot loop reason boot loop following cpu try write cause page fault cpu look corresponding entry idt see handler function specified thus ca nt call page fault handler double fault occurs cpu look idt entry double fault handler entry specify handler function either thus triple fault occurs triple fault fatal qemu reacts like real hardware issue system reset order prevent triple fault need either provide handler function page fault double fault handler want avoid triple fault case let start double fault handler invoked unhandled exception type double fault handler double fault normal exception error code specify handler function similar breakpoint handler srcinterruptsrs lazystatic static ref idt interruptdescriptortable let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler idtdoublefaultsethandlerfn doublefaulthandler new idt new extern fn doublefaulthandler stackframe mut interruptstackframe errorcode panic exception double faultn stackframe handler print short error message dump exception stack frame error code double fault handler always zero reason print one difference breakpoint handler double fault handler diverging reason architecture permit returning double fault exception start kernel see double fault handler invoked worked happens time cpu try write cause page fault like cpu look corresponding entry idt see handler function defined thus double fault occurs cpu jump present double fault handler triple fault bootloop longer occurs since cpu call double fault handler quite straightforward need whole post topic well able catch double fault case current approach nt suffice double fault look special case need know exact cause double fault used pretty vague definition double fault special exception occurs cpu fails invoke exception handler fails invoke mean exactly handler present handler swapped happens handler cause exception example happens breakpoint exception occurs corresponding handler function swapped page fault occurs page fault handler swapped dividebyzero handler cause breakpoint exception breakpoint handler swapped kernel overflow stack guard page hit fortunately manual pdf exact definition section according double fault exception occur second exception occurs handling prior first exception handler important specific combination exception lead double fault combination first exceptionsecond exception dividebyzero invalid tss segment present stacksegment fault general protection faultinvalid tss segment present stacksegment fault general protection fault page faultpage fault invalid tss segment present stacksegment fault general protection fault example dividebyzero fault followed page fault fine page fault handler invoked dividebyzero fault followed generalprotection fault lead double fault help table answer first three question breakpoint exception occurs corresponding handler function swapped page fault occurs page fault handler invoked page fault occurs page fault handler swapped double fault occurs double fault handler invoked dividebyzero handler cause breakpoint exception cpu try invoke breakpoint handler breakpoint handler swapped page fault occurs page fault handler invoked fact even case exception without handler function idt follows scheme exception occurs cpu try read corresponding idt entry since entry valid idt entry general protection fault occurs define handler function general protection fault either another general protection fault occurs according table lead double fault stack overflow let look fourth question happens kernel overflow stack guard page hit guard page special memory page bottom stack make possible detect stack overflow page mapped physical frame accessing cause page fault instead silently corrupting memory bootloader set guard page kernel stack stack overflow cause page fault page fault occurs cpu look page fault handler idt try push interrupt stack frame onto stack however current stack pointer still point nonpresent guard page thus second page fault occurs cause double fault according table cpu try call double fault handler however double fault cpu try push exception stack frame stack pointer still point guard page third page fault occurs cause triple fault system reboot current double fault handler ca nt avoid triple fault case let try easily provoke kernel stack overflow calling function recurses endlessly srcmainrs nomangle nt mangle name function pub extern c fn start println hello world blogos init fn stackoverflow stackoverflow recursion return address pushed trigger stack overflow stackoverflow testmain println loop try code qemu see system enters bootloop avoid problem ca nt omit pushing exception stack frame since cpu need ensure somehow stack always valid double fault exception occurs fortunately architecture solution problem stack architecture able switch predefined knowngood stack exception occurs switch happens hardware level performed cpu push exception stack frame switching mechanism implemented interrupt stack table ist ist table pointer knowngood stack rustlike pseudo code struct interruptstacktable stackpointers option stackpointer exception handler choose stack ist stackpointers field corresponding idt entry example could use first stack ist double fault handler cpu would automatically switch stack whenever double fault occurs switch would happen anything pushed would prevent triple fault ist tss interrupt stack table ist part old legacy structure called task state segment tss tss used hold various information eg processor register state task mode example used hardware context switching however hardware context switching longer supported mode format tss changed completely tss longer hold task specific information instead hold two stack table ist one common field tss pointer io port permission bitmap tss following format fieldtype reserved privilege stack table reserved interrupt stack table reserved reserved io map base privilege stack table used cpu privilege level change example exception occurs cpu user mode privilege level cpu normally switch kernel mode privilege level invoking exception handler case cpu would switch stack privilege stack table since target privilege level nt user mode program yet ignore table tss let create new tss contains separate double fault stack interrupt stack table need tss struct fortunately crate already contains taskstatesegment struct use create tss new gdt module name make sense later srclibrs pub mod gdt srcgdtrs use virtaddr use structure tss taskstatesegment use lazystatic lazystatic pub const doublefaultistindex lazystatic static ref tss taskstatesegment let mut tss taskstatesegment new tssinterruptstacktable doublefaultistindex usize const stacksize usize static mut stack stacksize stacksize let stackstart virtaddr fromptr unsafe stack let stackend stackstart stacksize stackend tss use lazystatic rust const evaluator yet powerful enough initialization compile time define ist entry double fault stack ist index would work write top address double fault stack entry write top address stack grow downwards ie high address low address nt implemented memory management yet nt proper way allocate new stack instead use static mut array stack storage unsafe required compiler ca nt guarantee race freedom mutable static accessed important static mut immutable static otherwise bootloader map readonly page replace proper stack allocation later post unsafe longer needed place note double fault stack guard page protects stack overflow mean anything stack intensive double fault handler stack overflow might corrupt memory stack tss created new tss need way tell cpu use unfortunately bit cumbersome since tss us segmentation system historical reason instead loading table directly need add new segment descriptor global descriptor table gdt load tss invoking ltr instruction respective gdt index reason named module gdt global descriptor table global descriptor table gdt relict used memory segmentation paging became de facto standard still needed mode various thing kerneluser mode configuration tss loading gdt structure contains segment program used older architecture isolate program paging became standard information segmentation check equally named chapter free three easy piece book segmentation longer supported mode gdt still exists mostly used two thing switching kernel space user space loading tss structure gdt let create static gdt includes segment tss static srcgdtrs use structure gdt globaldescriptortable descriptor lazystatic static ref gdt globaldescriptortable let mut gdt globaldescriptortable new gdtaddentry descriptor kernelcodesegment gdtaddentry descriptor tsssegment tss gdt use lazystatic rust const evaluator powerful enough yet create new gdt code segment tss segment gdt load gdt create new gdt init function call init function srcgdtrs pub fn init gdtload srclibrs pub fn init gdt init interrupt initidt gdt loaded since start function call init still see boot loop stack overflow final step problem gdt segment yet active segment tss register still contain value old gdt also need modify double fault idt entry us new stack summary need following reload code segment register changed gdt reload c code segment register required since old segment selector could point different gdt descriptor eg tss descriptor load tss loaded gdt contains tss selector still need tell cpu use tss update idt entry soon tss loaded cpu access valid interrupt stack table ist tell cpu use new double fault stack modifying double fault idt entry first two step need access codeselector tssselector variable gdt init function achieve making part static new selector struct srcgdtrs use structure gdt segmentselector lazystatic static ref gdt globaldescriptortable selector let mut gdt globaldescriptortable new let codeselector gdtaddentry descriptor kernelcodesegment let tssselector gdtaddentry descriptor tsssegment tss gdt selector codeselector tssselector struct selector codeselector segmentselector tssselector segmentselector use selector reload c segment register load tss srcgdtrs pub fn init use instruction segmentation setcs use instruction table loadtss unsafe setcs loadtss reload code segment register using setcs load tss using loadtss function marked unsafe need unsafe block invoke reason might possible break memory safety loading invalid selector loaded valid tss interrupt stack table set stack index double fault handler idt srcinterruptsrs use crate gdt lazystatic static ref idt interruptdescriptortable let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler unsafe idtdoublefaultsethandlerfn doublefaulthandler setstackindex gdt doublefaultistindex new idt setstackindex method unsafe caller must ensure used index valid already used another exception cpu switch double fault stack whenever double fault occurs thus able catch double fault including kernel stack overflow never see triple fault ensure nt accidentally break add test stack overflow test test new gdt module ensure double fault handler correctly called stack overflow add integration test idea provoke double fault test function verify double fault handler called let start minimal skeleton testsstackoverflowrs nostd nomain use core panic panicinfo nomangle pub extern c fn start unimplemented panichandler fn panic info panicinfo blogos testpanichandler info like panichandler test test run without test harness reason ca nt continue execution double fault one test nt make sense disable test harness test add following cargotoml cargotoml test name stackoverflow harness false cargo test test stackoverflow compile successfully test fails course since unimplemented macro panic start implementation start function look like testsstackoverflowrs use blogos serialprint nomangle pub extern c fn start serialprint stackoverflow stackoverflow blogos gdt init inittestidt trigger stack overflow stackoverflow panic execution continued stack overflow allow unconditionalrecursion fn stackoverflow stackoverflow recursion return address pushed volatile volatile new read prevent tail recursion optimization call gdt init function initialize new gdt instead calling interrupt initidt function call inittestidt function explained moment reason want register custom double fault handler exitqemu qemuexitcode success instead panicking stackoverflow function almost identical function mainrs difference additional volatile read end function using volatile type prevent compiler optimization called tail call elimination among thing optimization allows compiler transform function whose last statement recursive function call normal loop thus additional stack frame created function call stack usage remain constant case however want stack overflow happens add dummy volatile read statement end function compiler allowed remove thus function longer tail recursive transformation loop prevented also add allow unconditionalrecursion attribute silence compiler warning function recurses endlessly test idt noted test need idt custom double fault handler implementation look like testsstackoverflowrs use lazystatic lazystatic use structure idt interruptdescriptortable lazystatic static ref testidt interruptdescriptortable let mut idt interruptdescriptortable new unsafe idtdoublefault sethandlerfn testdoublefaulthandler setstackindex blogos gdt doublefaultistindex idt pub fn inittestidt testidtload implementation similar normal idt interruptsrs like normal idt set stack index ist double fault handler order switch separate stack inittestidt function load idt cpu load method double fault handler missing piece double fault handler look like testsstackoverflowrs use blogos exitqemu qemuexitcode serialprintln use structure idt interruptstackframe extern fn testdoublefaulthandler stackframe mut interruptstackframe errorcode serialprintln ok exitqemu qemuexitcode success loop double fault handler called exit qemu success exit code mark test passed since integration test completely separate executables need set feature attribute top test file run test cargo test test stackoverflow cargo test run test expected see stackoverflow ok output console try comment setstackindex line cause test fail post learned double fault condition occurs added basic double fault handler print error message added integration test also enabled hardware supported stack switching double fault exception also work stack overflow implementing learned task state segment tss contained interrupt stack table ist global descriptor table gdt used segmentation older architecture next next post explains handle interrupt external device timer keyboard network controller hardware interrupt similar exception eg also dispatched idt however unlike exception nt arise directly cpu instead interrupt controller aggregate interrupt forward cpu depending priority next explore intel pic interrupt controller learn implement keyboard support
410,Lobsters,osdev,OS,Booting Secure,http://michaellynn.github.io/2018/07/27/booting-secure/,booting secure,somewhat busy new new provisioning reality netinstall netboot boot external medium based device enrollment program dep note let talk security level security full security guids single recoverypreboot volume required within container file format note silver searcher ripgrep freshly reinstalled o ecid growing evidence new process whoa shsh protocol medium security deleting file round could copy yes get blocked boot cool detail lifespan imaging dead thought yet autodmg within recovery read ecid target disk mode attached device million dollar question install macos organization google restor greg neagle bootstrappr via mdm deployed profile organization feel need image device simply putting file disk good enough reason postscript,howdy long time somewhat busy macbook pro exists hear ship secure boot hear might freaking written blog post read mind one written secure boot device community tech article new article apple even older kb article got updated trivia bit importantly may completely destroyed entire macos imaging provisioning workflow new provisioning reality change effectively mean person responsible mac setup workflow secure boot device chip fresh box configured full security mode netinstall netboot netsus bsdpy serverapp netinstall service none work use n key startup boot network imaging workflow use option key startup select network boot target boot external medium usb thunderbolt etc use option key startup select different attached disk boot unless device provisioningconfiguration workflow based device enrollment program dep light touch automated provisioning workflow find incompatible device exception cover workflow based bootable attached medium since network boot really dead dead dead go enable make sure external boot medium created even boot device macbook pro run custom fork example boot machine normally complete setup assistant first user creation process setting password reboot recovery open secure startup utility allow booting external medium either set security leave full medium may require network connectivity apple reboot external medium begin workflow exactly light touch anymore let go let talk secure boot requires machine note blog post cover every aspect secure boot checking cover new useful technical detail mike let talk security level security putting one first easiest talk simply put closest classic boot model knew normal stuff applies device firmware able see bootefi use volume read boot o inside volume say support hardware foremost stored systemlibrarycoreservicesplatformsupportplist ever wondered provide necessary hardware kexts talking bit computer secure boot device come additional requirement chip run o bridgeos yadda yadda yadda boot mode interested reading normal o compatible boot mac situation full security different mode let investigate ask secure boot device booting let start bless command sudo bless getboot verbose lot information never noticed macos device boot apfs like secure boot device macos booting file system volume booting bootefi file new apfs preboot volume find inside apfs container key bllastbsdname key string string key path key string string matter encrypted device every macos device booting apfs filesystem boot like see container layout command diskutil apfs list come triplet ossystem volume preboot recovery booted system volume within apfs container also see temporary vm volume taken place mounted privatevarvm booting preboot since trying figure different secure boot device preboot volume older mac without chip look different comparison let mount see o booted internal disk usually diskutil mount mount volumespreboot look top level disk see one folder look like long hex string dash guids guids guids match output saw diskutil apfs list system volume within apfs container unique guid within preboot recovery volume well top level folder contain folder name matching guid system volume paired volume apfs volume disk role specific role name macintosh hd caseinsensitive mount point l l volumespreboot total drwxrxrx root wheel jul hf boot model kernel hardcoded look recovery partition partition id minus associated system partition apfs single apfs container contain multiple system volume single recoverypreboot volume required within container contain multiple guidnamed folder one system volume looking back information got bless command see bootefi subfolder within guid folder systemlibrarycoreservicesbootefi key path key string string boot target secure boot device maybe something related secure boot process quite file preboot volume maybe could compare device running o version without chip record mean comparing imac pro macbook pro running let chop guid name beginning since unique every system volume compare content subdirectory sort line run diff command standardlistingtxt securebootlistingtxt comappleinstallerbootefi comappleinstallerbridgeversionbin comappleinstallerbridgeversionplist comappleinstallercomapplebootplist comappleinstallerplatformsupportplist comappleinstallersystemversionplist systemlibrarycoreservicesrootuuid systemlibrarycoreservicesbootefi wow different file secure boot device file google interesting hit file format manifest file structured tag file contains signature o component used apple os including io let go back apple description full security startup mac verifies integrity operating system o startup disk make sure legitimate sound like something signature would useful information unique mac ensures mac start o trusted apple oh might different look yet another imac pro good thing access compare sure enough additional file device hex string suffix different well think part security signature let start basic experimentation rename case need file note target disk mode fun filesystem protection want play home mike extra grin let poke comment make sure network disconnected reboot mac connect internet display alert internet connection required annnnnnd bingo would seem part equation reconnecting device network later checking preboot would seem new file recreated interestingly one rebuilds uniquely named file always hex name appear different every time remade checksum keep changing static record instead likely dynamic signature needing network access order created maybe static hex string unique identifier sort try searching machine identifier maybe find normally kind thing want search entire content machine reach standard tool like silver searcher ripgrep tool gladly recursively search text binary file locate string interested guy get frequent shoutouts reverse engineering talk however case dumbly lucked trying naive approach checking see output systemprofiler list unique identifier like ethernet mac address serial number etc happened contain hex string question freshly reinstalled o systemprofiler tends include recent portion several log file instance included installlog apecid also apboardid maybe ec ecid let try good friend iphone wiki maybe know ecid ecid possibly standing exclusive chip id electronic chip id identifier unique every unit ton detail page likely lot educated guess nonapple people likely applies secure boot mac play around tool suggestion find looking basically thing growing evidence new process secure boot mac new unique identifier io device time ecid would appear signature manifest generated part secure boot process full mode make signature specific ecid device good tidbit log near whoa know entire new process called personalization know url reaching http friendly hit wiki site url shsh protocol wow sending data request section look similar detail mac sending hostplatforminfo apecid etc locking pretty solid apple leveraged technology generating signature validated booting secure boot mac knowing know play little bit help confirm file unique device generated copying secure boot device renaming match ecid device still result secure boot wanting repair signature going back macbook pro secure boot uniquely named file generic file bootefi happens delete still boot apparently device secure boot rely checkvalidate file boot process let take one last bit log help confirm signature indeed file pretty clear proof result personalization process saved file path medium security allows version signed operating system software ever trusted apple run startup medium security turned mac verifies o startup disk making sure properly signed apple mention information unique mac let set medium delete uniquely named file reboot hmmmmmmm booted directory structure exact match macbook pro longer file ecid hex identifier file one without ecid name maybe relying deleting file round soon yes run alert dialog o longer trusted bootable need repair let expand thought process statement information unique mac could copy macbook pro secure boot back imac pro secure boot get imac pro booting answer yes repeating experiment time copying file machine running get blocked boot know generic file o specific knowing found far let loop back look file wiki page found mentioning interesting note bottom mentioning file simply encoded let run openssl find cool detail embedded cert coming apple secure boot root ca validating signature lot letter field bord chip etc probably related one attribute like saw supplied installlog personalization service interesting ecid field definitely present full security mode manifest missing medium security manifest yet confirmation tied specific hardware would seem imply unlike full security mode medium security mode could simply place already generated correct manifest disk without access internet devicespecific personalization need occur one complete set signature file good o whatever hardware compatible phrase air gapped imaging come mind mentioned let talk context imaging lifespan imaging dead thought yet u community spoken quite well already early first release day imac pro talk use asr restore o image device boot box however fortunate enough two imac pro brave enough try internet recovery could apparently image bother check back news tried recently making never booted image wonderful tool like autodmg day asr definitely restore booting macos onto device even host device running asr restore secure boot device changed imac pro came running special fork uncommon new hardware build current o time macos build released unified build imac pro longer ran fork using knowledge personalization look asr command see may changed let try favorite builtin tooling peek binary string otool string usrsbinasr grep personaliz nopersonalization could nt personalize volume personalization failed error line nopersonalize personalizationrequiredforvolumeatmountpoint networkavailableforpersonalizationwithoptions personalizevolumeatmountpointforinstall outputdirectory option completionhandler otool l usrsbinasr grep personaliz systemlibraryprivateframeworksospersonalizationframeworkversionsaospersonalization compatibility version current version would appear asr gained new trick fact asr imac pro copy already new capability worked device device within recovery asr macos version capability without need special undocumented flag trick tinker little deeper like find code ospersonalization privateframework read ecid target disk mode attached device allows personalize device even full security mode ecidspecific devicespecific manifest million dollar question image apple tell blatantly install macos organization apple recommend support monolithic system imaging installation method system image might include modelspecific information firmware update read apple recommend support say recommend supported quite obviously built functionality asr hard beat speed target disk mode restore autodmg built image secure boot device support target disk mode box mean restore personalized image secure boot device boot first try suddenly light touch hold boot workflow back amazing tool starting available like google restor someone need worry delivered device manipulated midshipment try placing simple launchdaemon secure boot device system volume stop booting full security mode one thing signature manifest honestly billion place o could modified autolaunch thing root start secure boot check thing check thing yet focused right securing core boot process situation instead internet recovery guess many machine could restored back vanilla something like restor amount time system image might include modelspecific information firmware update warning something consider definite change o installer work going image restoring workflow consider portion device may necessary software restoring anything last o version ran make effective probably need keep fleet device top o update make sure restoration image latest o version patch time also alternative project light touch still drastically le running setup assistant create account destroy example greg neagle bootstrappr boot recovery type two command race work provisioning clean machine bringing device back user redeployed wipe restore machine pristine state deal filevault encrypted disk etc still looking something like internet recovery return device new state secure boot macos device still new definitely corner edge around concept imaging surely stumbled yet apple recommend support think read line apple understands right organization may feel need workflow still apple continues similar path done io could eventually possibly split o volume possibly even read image mutable user data stored separately ever get state security concern evaporate o device one trusted verified deeper state macos today could even gain erase content setting functionality nobody apple know next meantime provide guidance guidance looking depmdmbased workflow provisioning latest operating system version already include feature like managing automatic kernel extension loading done remotely adjusted postdeployment via mdm deployed profile siu capability make network bootable image ran scutil reconfigure trust setting moot secure boot device network boot mdm game organization feel need image device know simply putting file disk good enough reason mdm mdmdeployed agent aware likely long term solution definitely meantime getting mdm going environment always hope help mike postscript access macbook pro look preboot volume see two different similar file version macos instead file also see file going back installlog find line quick google search suggest likely internal model identifier either imac pro specific chip inside little poking around find new macbook pro device would indicate signature generic medium mode still need exist specific secure boot device model attempting boot
411,Lobsters,osdev,OS,OS/161 - teaching how to make a UNIX OS,http://os161.eecs.harvard.edu/,teaching make unix o,project news publication license credit download guide resource documentation instructor bug mailing list sigcse paper processor still heart rather intentional want simpler mmu feel pairedpages model later mips mmus unnecessarily complicated,instructional operating system project news publication license credit download guide resource documentation instructor bug mailing list teaching operating system simplified system used teaching undergraduate operating system class bsdlike feel reality teaching os run simulator structure design larger system two supported branch branch first launched provides uniprocessor kernel programming environment branch debuted finally fully released move multicore era adding multiprocessor support modern attribute branch actively maintained includes kernel conventional macrokernel design simple userland including variety test program written c us include gcc compiler includes support one architecture structured portable system processor platformdependent code segregated maintainability base system provides lowlevel trap interrupt code device driver inkernel thread baseline scheduler extremely minimal virtual memory system also includes simple skeleton file system emulator passthrough file system vfs layer allow using thing included implemented student programming assignment basic sequence lock come interrupt handling spinlocks semaphore student implement sleeplocks condition variable possibly also readerwriter lock synchronization tool use solve two three problem diningphilosophers type school material part prior course assignment often skipped system call come kernel abi definition system call layer except minimal example reboot also time student implement basic set file process system call add necessary support infrastructure kernel virtual memory dumbvm shipped meant good enough bootstrapping system early assignment never reuses memory support large process malloc student write proper vm system file system file system shipped limited also us one big lock locking student refit file system proper finegrained locking extend add feature remove limitation basic version alternatively student given solution code material asked implement file system journaling something else many thing added point student pick something suitable neither ridiculously involved absurdly trivial implement solutionset code assignment available instructor note network stack base generally tackle networking o class separate networking class network hardware adding simple networking support viable assignment porting real tcpip stack probably information assignment structure see sigcse paper machine simulator provides simplified still realistic environment o hacking mips system supporting processor hardware slot holding single simple device disk console network etc designed support balance simplicity realism chosen make maximally useful teaching however also proven useful platform rapid development research kernel project support fully transparent debugging via remote gdb simulator also provides transparent kernel profiling statistical monitoring event tracing level individual machine instruction one connect multiple running instance together network using hub program multiprocessor support introduced run multiprocessor uniprocessor branch discontinued everyone move primary thing hardware floating point support cache timing model enforcement cache flushing memory barrier pipeline hazard requirement hardware device support dma require processor bulk copy transfer buffer processor still heart rather intentional want simpler mmu feel pairedpages model later mips mmus unnecessarily complicated
412,Lobsters,osdev,OS,Interim OS (2015),http://interim-os.com/,interim o,interim o learned writing operating system building keyboard root bloody root simpler o baremetal setup setup kernel setup repl reader allocator compiler jit execute writer garbage collector multitasking cache setup graphic setup filesystem framebuffer filesystem keyboard filesystem mouse filesystem sound filesystem sd filesystem net interim lisp symbol definition function arithmetic flow control pair list homoiconicity reflection string buffer filesystem,welcome interim o minimal operating system featuring language oriented kernel last update intended computer o design education embedded system development recreational computing hacking tinkering learned writing operating system building keyboard root bloody root nt recall exact moment decided start project turned much much work patience ever expected must around year ago root experiment turning avrbased microcontrollers arduino teensy something resembling pc terminal back first step tried generate vga signal display character vga monitor directly mcu without specialized graphic hardware surprisingly lot glitch noise worked connected pin old keyboard mcu line code later could type letter screen minimal command line early little success gave lot motivation entering new territory first make small attempt something never get first feeling success moved teensy first handson encounter arm processor although quickly found nt really understand arm instruction set mini version called thumb pasted code barebones character generator could disassemble thumb later wrote basic text editor c assemble function generated thumb code assembler source nt support opcodes macro fancy assembler feature worked soldered sd card directly little computer linking arduino sdfat library could read write file later found could generate color constructing resistor ladder would turn output bit blazing rrgggbb encoded pixel similar approach work sound spent night programming rotating cube loading pixel image sd even streaming music wav file good bare metal kind directness missing computer since end amiga time extremely limited mcus typically kilobyte ram fast ondie sram something like teensy enough store display framebuffer satisfying resolution also mcus typically operate speed le mhz since experiment really craved computer system dead simple brutal direct time ghzgb arena could manipulate interesting audiovisual content make use internet meaningful way still nt found system like approximation simpler o time nagging feeling wanted simpler operating system le layer hardware whose complexity low enough someone limited time could wrap head around become productive quickly productive mean get graphic text screen sound speaker packet network run mysterious background service fill ram bloated office package load advertising web figured needed component make system something interesting load code make run setup get pointer display content put pixel screen framebuffer load stuff like font disk display text filesystem receive character keyboard kind main loop interprets keyboard input command repl write data disk receive send packet fromto ethernet network platform chose implement thing raspberry pi actually first pi several lying around differnt story raspberry pi fulfills theory mostly requirement hardware almost ghz risc cpu actually four qpu gb ram fullhd graphic output stereo cd quality audio output baremetal programmable dislike rpi requires closedsource binary blob boot un der documented videocore iv qpu boot control system arm cpu peripheral device unnecessary feature board mipi csi seem like leftover mobile soc ethernet internal usb device usb overly complex working intensively several month nt seem like clean simple system detailled criticism http wikidebianorgraspberrypi baremetal setup loading baremetal kernel rpi relatively easy put file first fat partition mbr partioned sd card also put required binary blob configtxt file card plug pray create kernel file arm binary file generate elf executable using objcopy arm version gnu binutils armnoneeabiobjcopy buildinterimarmelf binary secret sauce load binary address address make everything work compile binary gcc example need linker file file extension ld passed gcc parameter like specifies start address right place entry start section text keep textboot text rodata rodata data data bs bssstart align bs align bs bssend linker file look weird lesson learned text section contains actual machine code rodata data contain constant like constant number string bs contains nonstack variable must initialized zero program startup get weird behaviour randomly initialized variable kernel written high level language like c language need setup code written run reliably target platform least clear zero bs section see set stack without stack function call c crash usually also like setup assembler fragment linked start address kernel performs critical setup way probably switching cpu feature jump main function c code cland set stack setting stack requires think general memory layout system decided flat memory layout virtual address physical address avoid indirection knot brain make stack heap memory allocated language explanation grow opposite direction like heap main working memory start mb allocation grow heap increasing address stack temporary storage used mainly function call start byte word size pointer heap grows mean every new item stack pointer stack sp decremented kernel code data occupy first mb ram stack larger mb would overwrite kernel else assembler setup fragment switch vfpneon floating point vector unit arm respectively without use floating point code cpu crash wonder arm architecture reference manual arm arm also set mmu memory management unit assembler found cumbersome adapted mvrn c code instead hardware configuration armrelated like switching vfp done via mrc mcr instruction first read controlcoprocessor register using mrc temporary register twiddle bit write everything back mcr example mrc orr mcr setup kernel ldr main load address main blx branch store pc link register main function hardware configuration uart serial port early debug printing serial line see going boot invaluable mmu memory management unit complicated topic helped boost performace discovered late qpu quad processor framebuffer address graphic output usb integrated part uspi library usb keyboard usb ethernet launch repl system main loop setup repl init compiler turn inits allocator necessary allocate interim lisp object heap mount filesystems like framebuffer keyboard console mouse sound sd sd card interface finally part o written interim lisp loaded evaluating eval read recv open sdshelll reader file readerc reader par string sexpressions internally represented tree cell struct defined minilisph cell consists machine word valueaddr car sizenext cdr tag specifies type cell typedef struct cell union jitwordt value void addr union jitwordt size void next jitwordt tag cell allocator carves cell heap cell cellalloc freelistavail freelistconsumed serve free list int idx freelistconsumed freelistconsumed cell re freelist idx return re else grow heap cell re cellheap cellsused cellsused cellsused maxcells memory printf cellalloc failed maxcells usedn exit return re compiler file compilerc opcode list function signature jit file jitarmrawc generates arm instruction void jitmovr int dreg int sreg op op sreg op dreg code codeidx op execute writer file writerc turn cell tree human reader readable string garbage collector file allocc find reachable object free rest multitasking interim singletasked cooperative multitasking emulated roundrobin executing list function global task list task spawned appending function list cache setup graphic setup filesystem framebuffer filesystem keyboard filesystem mouse def mouse open mouse let mouseinfo recv mouse def mousedx car car mouseinfo def mousedy cdr car mouseinfo filesystem sound filesystem sd filesystem net def freenode open let packet recv net size packet interim lisp interim syntax defined follows atom one following integer ascii symbol hello string hexadecimal byte string pair lambda applicable function nothing pair link two atom lefthand side traditionally called car content address register righthand side traditionally called cdr content data register list atom pair whose left side point atom type whose right side point next list atom empty list atom pair two nothing list entered displayed simply separating atom whitespace wrapping result parenthesis interim program simply interim list first item progam list must symbol function apply following parameter remaining item list parameter evaluates evaluates def evaluates sideeffect symbol defined number def double fn x x x defines function double take one parameter called x double evaluates number builtin symbol available system startup symbol definition function def symbol atom definition bind atom symbol globally let symbol atom definition bind atom symbol functionlocally fn argn body function defines function parameter symbol argument used placeholder anywhere function body symbol application apply argument function bound symbol arithmetic add subtract multiply divide modulus operate integer nonnothing noninteger interpreted nothing interpreted allows logic constructed arithmetic gt b lt b eq b compare two value b gt return greater b lt opposite eq return b equal represent number object flow control condition else conditional branch condition evaluates nonzero evaluated else evaluted value evaluated branch returned condition conditional loop long condition evaluates nonzero evaluated value last evaluation returned exprn sequencing expression evaluated given order value last evaluation returned pair list con b return pair b ab car pair return left side pair cdr pair return right side pair quote sexpression return given sexpression unmodified without evaluating list b construct list given parameter homoiconicity reflection read string deserialization par string text atom write op serialization return string representation given atom symbol return list visible symbol string buffer string text byte string binary data file uniform interface interim o system resource see section interim o exposed file system addressed using open opened file behaves exactly like byte string thus string created runtime nameless file memory alloc return string zero size str return length string byte substr str offset length return substring length length start offset byte given string put str offset byte replaces byte position offset given string copy byte get str offset return byte position given string filesystem open pathtofile return stream interface file specified path send sym sends appends string given symbol representing stream recv sym length receives consumes length byte stream represented sym
413,Lobsters,osdev,OS,Fuchsia: Google Is Quietly Working on a Successor to Android,https://www.bloomberg.com/news/articles/2018-07-19/google-team-is-said-to-plot-android-successor-draw-skepticism,fuchsia google quietly working successor android,detected unusual activity computer network,detected unusual activity computer network continue please click box let u know robot
414,Lobsters,osdev,OS,Amiga like OSes on QEMU,http://zero.eik.bme.hu/~balaton/qemu/amiga/,amiga like os qemu,running amiga like os qemu disclaimer aros amigaos morphos qemu unless another version listed need least qemu work older version latest change may qemu source git require building sometimes additional patch see developer introduction instruction nt provide binary help building patch get official qemu release eventually become widely available future sometimes may take time reach source binary news aros amigaos morphos faq comment aros aros nightly build downloads known problem amigaos known problem screen shot binary patch bug patch morphos better graphic emulation known problem openbios patch comment forum thread real please share output andor test booting cd drive connected pci card without graphic card using onboard graphic let u know work faq emulate pegasos etc instead emulation project qmiga ati vga emulation,running amiga like os qemu disclaimer note run amiga like os like aros amigaos morphos qemu written date info status help new user emulation qemu come without support expected complete everything one may desire dream commercial product roadmap goal still work progress may never get finished personal interest limited free time donation solicited accepted nt expect anything curiosity moment future depends open source community make keep mind trying unless another version listed need least qemu work older version latest change may qemu source git require building sometimes additional patch see developer introduction instruction nt provide binary help building patch get official qemu release eventually become widely available future sometimes may take time reach source binary ppc machine emulated ppcsoftmmu target qemu need build configure targetlistppcsoftmmu building enabledebug make emulation considerably slower want performance nt enable option machine run os morphos currently work macintosh emulation used instead news info category aros amigaos morphos faq comment aros aros nightly build downloads page boot mostly work well tested real hardware problem found sure aros bug emulation bug start qemusystemppc machine rtc baselocaltime drive ifnone idcd formatraw device idecd drivecd minimum required qemu version known problem screen mode available sure something missing emulation aros problem sometimes seems hang boot grey screen may race condition aros booting help device network card emulation seems work aros driver card nt seem work sure aros driver qemu problem think aros driver nt work big endian machine like ppc amigaos amigaos final edition install cd tested expected boot machine emulated start qemusystemppc machine rtc baselocaltime drive ifnone idcd formatraw device idecd drivecd minimum required qemu version least recommended known problem initial graphic mode incorrect result strange blue white color reason amigaos may select right graphic mode boot fall back pal lowres result strange color dithering workaround select last option boot livecd select better board specific mode system prefs screenmode screenmode prefs may take long time launch wait time like minute double clicked trying see screen shot showing problem workaround step alternatively patch boot iso change screenmodeprefs use bit mode selected mode color correct done binary patch kindly provided sebastian bauer patch applies iso sum result iso sum one use bspatch apply patch please note responsible confirm license amigaos allowed distribute iso crash installing libstdc included bug us lwsync instruction invalid embedded ppc cause exception core real hardware patch qemu allow work included qemu see lwsync related crash newer qemu version program randomly crash program may crash sometimes qemu compiled without enabledebug option happens le frequently qemu least version recommended amigaos seems depend speed emulated cpu happens fast system exact cause yet known could nt fixed disk fill quickly install may big block size set file system changed partitioning select filesystem edit default sure seems default large value maybe depends partition size expect write many small file byte block size use le space graphic operation slow may glitch amigaos us hardware feature fully os mean need emulated optimised yet feature implemented yet may improved future clgd driver boot cd default may work better cirrus vga emulation qemu nt tested morphos least morphos version required latest tested recommended start qemusystemppc machine viapmu vga none device cdrom boot promenv bootdevicecd bios openbiosqemuelf serial stdio minimum required qemu version since qemu also use device ativga guesthwcursortrue instead device see better graphic emulation faq entry limitation see problem openbiosqemuelf make sure type copy paste command correctly promenv parameter exactly like backslashes quote around without additional space see error booting screen remains blank typo option common reason check command line carefully known problem usb device nt work openbios firmware correctly describe pci bus emulated machine make morphos try access device wrong pci bus openbios patch provides workaround patched openbios binary mouse movement periodically jump cpu usage high caused high priority temperaturesensor task presumably try access temperature sensor emulated qemu hang waiting interrupt delivered time see application logtool logtool workaround lower priority task utility task manager implemented qemu help mouse freezing avoid possible performance impact sensor task also stopped ikill temperaturesensor shell command window start script collected information needed emulate bus qemu someone want help implementing open contribution network problem preferred network card machine sungem emulating onboard ethernet port powermacs supported morphos dhcp client work well default userslirp network backend qemu symptom hang boot especially booting hd network working better result may achieved using tap networking static ip address assignment people found resetting network config installation booting cd copying relevant configs envarc may fix see comment morphos boot reason find pci device boot either wo nt find sata controller thus boot cd hd booting usbstorage sd card image prevented bug uboot firmware anyway wo nt find display device output problem may actually exist real hardware according forum thread similar issue reported nt real hardware test look like morphos try access pci register offset reason may happen real hardware may wrap way provide different result device working others failing people use pcie graphic avoid pci device real real please share output mossys cpciscan andor test booting cd drive connected pci card without graphic card using onboard graphic let u know work faq emulate pegasos etc instead good target os support emulation component already present qemu previous work done relatively simple implement machine either hardware software part available easily implemented nt support os may work implement provide result ie run amiga like os qemu simple way slow faster machine would nt emulating faster hardware result better performance usually emulation speed speed hardware emulated related complex hardware slower emulation would added complexity need handled also difficult implement would take longer also frequency value emulated cpu speed guest o see emulator relation speed code run relate real hardware speed said case might help emulate machine cpu software using altivec instruction could take advantage qemu ability translate corresponding instruction host power cpu host virtualisation could used therefore emulation considered interesting amigaos morphos already run qemu slow could made faster compile qemu enabledebug option disables optimisation enables additional check make run considerably slower unless need debugging try without option apart nt know one would know sure without profiling identifying speed penalty generally thing software normally done hardware going slow done hardware real machine emulating one hardware arch different one implementing hardware feature software expected slower unless emulated hardware much slower host qemu trick speed thing may work workload may possible optimise someone would take time measure identify optimise bottleneck use kvm would make faster kvm virtualisation facility used ppc host run ppc code help emulating ppc different cpu arm moreover ppc ideally us virtualisation hypervisor hv support found server newer cpu run code cpu host ppc besides hv mode kvm also called pr mode also work cpu without hardware support run nonprivileged user code natively still emulate privileged instruction slower hv kvm depending usage still much faster emulating instruction qemu use kvm ppc host since ppc linux focused server possible older cpu kvm pr need fix mostly work book cpu supporting virtualisation would need work else done improve probably lot thing depending time expertise available may limited one person working apart profiling trying identify eliminate bottleneck already mentioned think interesting possibility experimenting kvm ppc hardware trying passthrough physical device virtual machine eg using radeon gpu graphic support paravirtualisation virtio driver guest os could help disk network speed using qemu virtiogpu support acceleration work progress idea created open project project qmiga place interested developer could join cooperate make happen qemu development process slow complicated writeenhance another emulator could move faster qemu actively developed maintained emulator get lot component improvement work done platform free eg macintosh quadra next cube emulation merged qemu might get useful component future also benefit improvement made ppc emulation powermac server emulation also qemu supported lot platform get free well finally support amiga like os qemu also increase visibility among expert better obscure emulator limited number people develop use spirit open source qemu get help others also help others time working common goal eg emulation added used platform common pci sata controller emulation used test linux release ensure still work platform graphic chip also used sh platform emulation work done get morphos running helped getting macos o x running well better graphic emulation currently emulated graphic limited even optimising would provide feature usually found real hardware instead spending time improving started implementing ati vga emulation far finished big project expecting able finish time soon without help partially emulate ati rage pro yet qemu used morphos get picture acceleration although video overlay known missing video playback fail could problem well try replace device device ativga morphos command line work use amigaos rage pro driver anyway work morphos
416,Lobsters,osdev,OS,Plan9 fcall GBIT macro demo,https://github.com/pgniewek/learn_gbitx,fcall gbit macro demo,learngbitx http http,learngbitx try right web browser via gdb online c compiler http demo gbitx macro fcall macro allow extraction one two three four byte memory address pointer p extracted data interpreted unsigned char unsigned short unsigned int unsigned long int respectively functionality implemented via compiler preprocessor macro bit shift efficiency prototype said macro uchar uchar ushort uchar ulong uchar vlong uchar definition define p p define p p p define p p p p p define p p p p p vlong p p p p see also see also http
417,Lobsters,osdev,OS,MorphOS Version 3.11 released,http://www.morphos.de/releasenotes/3.11,morphos version released,,morphos bootimg change following probably incomplete list change made release morphos rom bootimg based component emulation fixed instruction emulation hyperbootloader convert creating command line booting morphos fix delay booting cd new resource used handling access resource related ethernet quark map second frame manager machine powerbook fixed fan control fixed memory leak older powerbooks ibooks would leak little memory every second also caused performance hit time fixed rare memory leak battery handler morphos disk change following probably incomplete list change made disk based component morphos ambient fix keyboard handling lister fixed doubleclicking lha archive loaduri arexx command us default view default view mode one omitted added open parent context menu panel button open lister inline edit pressing space delete signentry jump next entry create archive fixed add multiple file single lha archive applicationsflowstudio postscript file displayed style setting statusbar display multibyte char code correctly nonbreaking space ie displayed style control character replace operation respect regexp setting search part improvement printing using screen colour made possible add remove breakpoints debugged task already running suspended makefile generator handle file subdirectory suppressed output generated makefiles noixemul switch used even ixemul project performance improvement replaced various icon additional custommade version applicationsodyssey introduces support dozen additional nowadays commonly used cs property name add support additional cs property value used modern flexbox grid page layout add support native cs filter use without vendor prefix require temporary disablement rarely used svg filter add native support cs region disables native javascript promise support newer website fail consider partial implementation increasingly caused incompatibilites optimized internal handling webkit event fix performance hit many tab open odyssey try prevent embedded medium file autoplaying without prior user action order minimize severe performance degradation disruption unexpected noise disturbences etc added new autoplayer userscript control forementioned behavior via usermaintained whitelist website updated included adblocker list recent state added workarounds prevent issue otherwise benign content delivery network cleaned information page succinct relevant applicationsjukebox fixed bug gauge object displayed window frame applicationsremoteshell updated openssl applicationsshowcase store jpeg selected icc profile fixed colorspace file without icc applicationsvpdf use mediasize provided pdf passthrough print mode allows specify direct file postscript output enabled printer profile selected available refreshes printer profile list related cycle gadget new printer preference called show profile selected output path printer profile selected postscript mode cclonex fixed misspelled appent option also accept correctly spelled append ced tweaked wordwrapping default cplaymidi added clustername argument ctextconv use stderr error available cwaitx classesframeworksmuiframework use muimlistsortentries flickerless sort fixed rely muimnotify result since always false group descendant classesframeworksobframework fixed memory leak obmutablestring fixed race condition obtimer classesmuiscintillamcc improved esc key handling scintilla focus performance optimization classesmuiwpasupplicantmcc fixed bug made hardimpossible select new network list classesusbaudio fixed handle perchannel global volume control fixed several race condition crash unplugging usb audio device classesusbprinter usbpar included dosdrivers devsmonitorsradeon added island interrupt support fixed agp support card fixed hdmi output northern island card fixed overlay stability issue disabled dma writebacks pci dma mode libscryptostorage new encrypted keyvalue storage library libsixemul fixed large fread could result premature eof caused spurious eofs large read pipe libsmpega fix libspciids updated pciids file version libsthumbnail mui added muimlistsortentries prefsprinters improved error handling ppd printer config import fixed cupsfilters handling skin changed default mui setting window size position stored permanently default toolsiwizard fixed correctly identify target o update added new splash graphic utilitieskeyexplorer improved dead key handling
418,Lobsters,osdev,OS,The Microkernel Overhead (2012),https://archive.fosdem.org/2012/schedule/event/549/96_Martin_Decky-Microkernel_Overhead.pdf,microkernel overhead,,äüöß obj stream k զ z endstream endobj obj endobj obj stream ђ fl zdt
419,Lobsters,osdev,OS,LibreOffice 6.2 has been ported to Haiku,https://discuss.haiku-os.org/t/libreoffice-is-now-available-for-haiku/6917,libreoffice ported haiku,,excellent caption screen shot libreoffice correct presume available variant opportunity formal testing ass well file creatededited libreoffice handled m office current prospective client using solely m office
420,Lobsters,osdev,OS,Bringup is Hard,http://www.garbled.net/tmp/bringup.pdf,bringup hard,,obj linearized h l e n endobj xref n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r metadata r pagelabels r endobj obj l filter flatedecode length r stream f endstream endobj obj endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r r extgstate r endobj obj type font subtype encoding macromanencoding basefont timesbold endobj obj type font subtype encoding macromanencoding basefont timesroman endobj obj type font subtype encoding winansiencoding basefont timesitalic endobj obj length filter flatedecode stream w j x c j rga b p njw l qrsp k endstream endobj obj type extgstate sa false sm default endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream jg l h ø endstream endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream vjx ҕl u f k ch hg l n z endstream endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream qɺ x k j q k ȕ nok k iťg u ċ endstream endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream tx ӊ gt f endstream endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream ky f p bh endstream endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream k g p q r g fi u utn k
421,Lobsters,osdev,OS,Introducing feL4: Rust Programs for the seL4 Microkernel,https://users.rust-lang.org/t/introducing-fel4-rust-programs-for-the-sel4-microkernel/17897,introducing rust program microkernel,library,open source operating system kernel proof implementation correctness cool capability system project rust project built run context make use apis robigalia project best example prior art space distinguished largely aim automate simplify development process today sharing automation tool write task rust expose prescribed entry point build along kernel provides code generation help accelerate project beyond boilerplate setting application us tomlbased configuration approach help wrap relatively complex cmake build system generates usable configuration file multiple hardware target expose system call way bindgen represented library however plan release idiomatic rusty abstraction near future cheer dan jon zack nathan polysync
423,Lobsters,osdev,OS,Omero: Pervasive User Interfaces in the Plan B Operating System (2012),https://www.youtube.com/watch?v=iKy2UxFLhgQ,omero pervasive user interface plan b operating system,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature omero pervasive user interface plan b operating system youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature omero pervasive user interface plan b operating system youtube
425,Lobsters,osdev,OS,XANA & iX: A history & post-mortem of two small operating system projects,https://medium.com/@enkiv2/xana-ix-a-history-post-mortem-of-two-small-operating-system-projects-18dfbbf01703,xana ix history postmortem two small operating system project,xana ix history postmortem two small operating system project essay subject project xana multiboot header small module vga text keyboard support invent aileta wrapper disk routine outside observer looked like byte array void pointer ix handful fairly small keyboard handler meant staticlength preallocated memory structure staticlength field early version kaukactr taskswitching code conclusion,xana ix history postmortem two small operating system projectsin year reading o development writing toy project vein wrote first serious small o serious sense used protected mode filesystem marginallyusable ui three year later wrote another o incorporating lesson learned first project failure usable o project success waysi like describe briefly case might interest aspiring osdev hobbyist warning also like describe order indulge bit reminiscence writing o experiment timeconsuming even small found experience enjoyable longer spare energy work thing fulltime employment made impossibleboth project incorporated project xanadu idea understood time understanding idea largely incorrect accurate overview technical perspective recommend reading essay subject covering actual concept misunderstood except shallowly illuminate way implementation differed history sketch memory made effort verify beyond looking commit history circumstance describe largely description understanding time filtered decade working thing time worked project substantially greener developer perpetually sleepdeprived error chronology external event outright misunderstanding would project xanasomeone freenode irc channel alexander panek began work o kernel time early abandoned early interested o development time read kernelinprogress consisted multiboot header maybe hundred line assembly getting bootloader entry point small module vga text ported digital mar compiler gdc thenthirdparty patchset adding support gcc around time major version language released gdc playing catchup running sourcebased distro easily get digital mar binary run time related theoreticallyseparate effort lot people jumping default standard library phobos new replacement standard library believe called deimos unable get deimos work gdc install although also understand people preferred feature whose use comprehend hanging channel month writing toy program probably even compiling one wrote however graduated high school january february year began taking handful class nearby university gave enough time dive headfirst languagealmost original code kernel ended rewritten assembly code rendered unnecessary grub though also wrote bootloader point development remaining code vga module feature thing like smooth scrolling match display model thing like wrapping single gdtidtinterface instruction might worked dmdgenerated code work gdcgenerated code register got filled unrelated data however brunt work actually occurred getting anything bootit unclear extent dmd generated code actually dependent upon phobos deimos however version gdc emitted endless reference phobos routine code used internally even thing might expect dependency furthermore code dependency libc routine many provided o instance optional garbage collection garbage collection routine declaring variable depended upon malloc hashing function syscalls get time variety unexpected thing spent week nothing commenting part phobos replacing mock return static valueseventually help couple mathrelated routine publicdomainlicensed allassemblylanguage libc implementation couple header taken gcc got kernel could build display word screen mostly got strong lesson separation concern difficult extract o libc dependency complex highlevel library never designed make extraction straightforward phobos code could read deeply entangled generated code c dependency predict rewriting large portion libc card taken task writing first o simply codebase mostly c assembly even early stage luckily phobos also publicdomain licensed change adhoc substantial enough easily applied buildtime particularly moving target essentially broken gutted phobos fork giant dork named kernel project xana combination project xanadu obsessed least four year already xana antagonist mediocre french animated child television show code lyoko watch respected ground show virtual reality relatively thin ground got kernel running implemented keyboard support required modifying idt thus gdt switched grub point since bootloader switch protected mode read kernel symbol table therefore jump nonstatic address since grub set idt gdt initially switch protected mode needed work since switch writing full idt ended relatively difficult trick author original code working mostly rewritten anyhow work gdc ever dmd considering absence similarly gutted phobos project probably invent getting keyboard working probably week worth work ground rather looking thing working trial errorat point high something working started dumping xanadu concept designsince kernel time produced file named grub file broke development stage kernel point next stage implemented document storage system estage e enfilade actually use enfilade tumblerindexed hash table custom hashing algorithm slow ended worse linear search also implemented document system spantospan hyperlink reintroduce previouslyremoved part phobos order make workthen implemented interactive frontend keeping code lyoko theme called aileta one protagonist probably named alita princess mar took inspiration zigzag playstation crossbar menu system treated first character document icon document set keyboard input handling controlcharacter produced character ascii code character minus chose display control code graphic linedrawing character prior ascii easily accessible though one would need memorize first forward backlinks used arrange document icon navigable crossshaped menuafter implementing started work hard disk support required writing pic irq manipulation code made disk map directly inmemory structure used document storage structure ultimately meant making wrapper disk routine outside observer looked like byte array void pointer routine never got workout real disk emulation able happily trigger format took excess half hour never tested reading structure reboot also brought full lua implementation removed system libc dependency idea lua code document would primary way developing within systemultimately project mess extent functional unusably slow suffered use highlevel language needed tamed made use feature provided language limited use feature functionality needed removed case use beneficial vga manipulation nominally easier c module system structs act pseudoobjects member function mapped allocated memory making hard disk look like byte array really possible c also particularly sensible thing donevertheless able prototype lowlevel structure made certain thing easier conceptual level many idea eventually made way ix prototyped xana structure unthinkable c idiomatic turned structure ported back c nicelyxana build modern version gdc dmd far know nobody else attempted write o mostly primarily although people write os c time would similar problem suspect o written rust go would also run issue whereas c wellunderstood bestpractices minimal standard library specifically minimize impact problem ixin took operating system class remembered much masochistic fun writing xana started writing new o c cribbing idea xana specifically translated xana multiboot header back c copied linker script another zigzag variation frontendsince writing c ability control precisely standard library feature wanted use fact break compatibility case implemented handful themrather port back idt routine written xana worked tutorial osdev c bkerndev idt gdt irq file code project write written would written assembly still understanding bran code even though written equivalent code assembly replacing keeping compatibility deemed lowpriority backported idea xana keyboard handling code combined idea bkerndev produce fairly small keyboard handleronce made ondisk format mimic inmemory structure user data informed ui however since design decision outset made sure make format straightforward implement resistant serialization problem meant staticlength preallocated memory structure staticlength field never make new cell new dimension instead fill connection fill preallocated cell cell content also fixed maximum length zero termination truncating unlike xana interface functional dimensionswitching ix however dimension named numbered clone ix proper zigzag implementationrather trying import conventional language started work early version kaukactr internal language development system get far even write function decoding implementation original plan would already mapped time wrote code also integrated taskswitching code switched task every jiffy used normal timer interruptzigzag kaukatcr good fit o written lowlevel language like c require complicated structure benefit significantly abstraction layer serialization made straightforward could supported named dimension clone properfull kaukactr implementation without much effortix fairly clean code particularly compared xana although drawing box graphical structure tends get long hard read would benefit refactoring specifically introduction dedicated drawing routine avoided using unusual c feature even feature might fairly common o dev tried make code small clear implement anything unnecessary ix minimalist xana maximalistconclusionneither project going storm world fact neither even going kind smallbutenthusiastic user base menuet however think demonstrate useful idea odds recieved wisdom o development possible potentially rewarding make use highlevel language feature o development context provided minimize runtime dependency featuresit possible potentially rewarding write o standalone experiment ui design make structure o mirror ui design easier minimalist system irrelevant feature might make o usable eliminated favor conceptual simplicity o becomes art projectif avoid goal compatibility usability widespread adoption difficult problem task switching filesystem design interfacing storage medium become straightforwardthere room thousand artproject os way even hundred unix clone
426,Lobsters,osdev,OS,CPU Exceptions | Writing an OS in Rust,https://os.phil-opp.com/cpu-exceptions/,cpu exception writing o rust,cpu exception breakpoint exception github bottom overview page fault invalid opcode sse instruction general protection fault double fault triple fault osdev wiki interrupt descriptor table global descriptor table exception table rflags gdt idt type struct type alias foreign calling convention interrupt calling convention calling convention system v abi nt even rust abi yet preserved scratch register preserving register interrupt stack frame aligning stack pointer switching stack pushing old stack pointer pushing updating register pushing instruction pointer pushing error code invoking interrupt handler behind scene retrieving argument returning using handling error code aligning stack naked function end post implementation breakpoint exception loading idt block lazy static rescue created abstraction vga text buffer running adding test much magic handling exception naked function first edition next triple fault double fault,cpu exception jun cpu exception occur various erroneous situation example accessing invalid memory address dividing zero react set interrupt descriptor table provides handler function end post kernel able catch breakpoint exception resume normal execution afterwards blog openly developed github problem question please open issue also leave comment bottom complete source code post found branch table content exception signal something wrong current instruction example cpu issue exception current instruction try divide exception occurs cpu interrupt current work immediately call specific exception handler function depending exception type different cpu exception type important page fault page fault occurs illegal memory access example current instruction try read unmapped page try write readonly page invalid opcode exception occurs current instruction invalid example try use newer sse instruction old cpu support general protection fault exception broadest range cause occurs various kind access violation trying execute privileged instruction user level code writing reserved field configuration register double fault exception occurs cpu try call corresponding handler function another exception occurs calling exception handler cpu raise double fault exception exception also occurs handler function registered exception triple fault exception occurs cpu try call double fault handler function issue fatal triple fault ca nt catch handle triple fault processor react resetting rebooting operating system full list exception check osdev wiki interrupt descriptor table order catch handle exception set socalled interrupt descriptor table idt table specify handler function cpu exception hardware us table directly need follow predefined format entry must following structure typenamedescription pointer lower bit pointer handler function selectorselector code segment global descriptor table see pointer middle bit pointer handler function pointer remaining bit pointer handler function option field following format bitsnamedescription stack table nt switch stack switch nth stack interrupt stack table handler called interrupt gate trap gateif bit interrupt disabled handler called one zero privilege level dpl minimal privilege level required calling handler exception predefined idt index example invalid opcode exception table index page fault exception table index thus hardware automatically load corresponding idt entry exception exception table osdev wiki show idt index exception vector nr column exception occurs cpu roughly following push register stack including instruction pointer rflags register use value later post read corresponding entry interrupt descriptor table idt example cpu read entry page fault occurs check entry present raise double fault disable hardware interrupt entry interrupt gate bit set load specified gdt selector c segment jump specified handler function nt worry step learn global descriptor table hardware interrupt future post idt type instead creating idt type use interruptdescriptortable struct crate look like repr c pub struct interruptdescriptortable pub dividebyzero entry handlerfunc pub debug entry handlerfunc pub nonmaskableinterrupt entry handlerfunc pub breakpoint entry handlerfunc pub overflow entry handlerfunc pub boundrangeexceeded entry handlerfunc pub invalidopcode entry handlerfunc pub devicenotavailable entry handlerfunc pub doublefault entry handlerfuncwitherrcode pub invalidtss entry handlerfuncwitherrcode pub segmentnotpresent entry handlerfuncwitherrcode pub stacksegmentfault entry handlerfuncwitherrcode pub generalprotectionfault entry handlerfuncwitherrcode pub pagefault entry pagefaulthandlerfunc pub entry handlerfunc pub alignmentcheck entry handlerfuncwitherrcode pub machinecheck entry handlerfunc pub simdfloatingpoint entry handlerfunc pub virtualization entry handlerfunc pub securityexception entry handlerfuncwitherrcode field omitted field type idt entry f struct represents field idt entry see table type parameter f defines expected handler function type see entry require handlerfunc entry require handlerfuncwitherrcode page fault even special type pagefaulthandlerfunc let look handlerfunc type first type handlerfunc extern fn mut interruptstackframe type alias extern fn type extern keyword defines function foreign calling convention often used communicate c code extern c fn calling convention interrupt calling convention exception quite similar function call cpu jump first instruction called function executes afterwards cpu jump return address continues execution parent function however major difference exception function call function call invoked voluntary compiler inserted call instruction exception might occur instruction order understand consequence difference need examine function call detail calling convention specify detail function call example specify function parameter placed eg register stack result returned linux following rule apply c function specified system v abi first six integer argument passed register rdi rsi rdx rcx additional argument passed stack result returned rax rdx note rust follow c abi fact nt even rust abi yet rule apply function declared extern c fn scratch register calling convention divide register two part preserved scratch register value preserved register must remain unchanged across function call called function callee allowed overwrite register restores original value returning therefore register called calleesaved common pattern save register stack function beginning restore returning contrast called function allowed overwrite scratch register without restriction caller want preserve value scratch register across function call need backup restore function call eg pushing stack scratch register callersaved c calling convention specifies following preserved scratch register preserved registersscratch register rbp rbx rsp rcx rdx rsi rdi calleesavedcallersaved compiler know rule generates code accordingly example function begin push rbp backup rbp stack calleesaved register register contrast function call exception occur instruction case nt even know compile time generated code cause exception example compiler ca nt know instruction cause stack overflow page fault since nt know exception occurs ca nt backup register mean ca nt use calling convention relies callersaved register exception handler instead need calling convention mean preserve register calling convention calling convention guarantee register value restored original value function return note mean register saved stack function entry instead compiler back register overwritten function way efficient code generated short function use register interrupt stack frame normal function call using call instruction cpu push return address jumping target function function return using ret instruction cpu pop return address jump stack frame normal function call look like exception interrupt handler however pushing return address would suffice since interrupt handler often run different context stack pointer cpu flag etc instead cpu performs following step interrupt occurs aligning stack pointer interrupt occur instruction stack pointer value however cpu instruction eg sse instruction require stack pointer aligned byte boundary therefore cpu performs alignment right interrupt switching stack case stack switch occurs cpu privilege level change example cpu exception occurs user mode program also possible configure stack switch specific interrupt using socalled interrupt stack table described next post pushing old stack pointer cpu push value stack pointer rsp stack segment s register time interrupt occurred alignment make possible restore original stack pointer returning interrupt handler pushing updating rflags register rflags register contains various control status bit interrupt entry cpu change bit push old value pushing instruction pointer jumping interrupt handler function cpu push instruction pointer rip code segment c comparable return address push normal function call pushing error code exception specific exception page fault cpu push error code describes cause exception invoking interrupt handler cpu read address segment descriptor interrupt handler function corresponding field idt invokes handler loading value rip c register interrupt stack frame look like crate interrupt stack frame represented interruptstackframe struct passed interrupt handler mut used retrieve additional information exception cause struct contains error code field since exception push error code exception use separate handlerfuncwitherrcode function type additional errorcode argument scene calling convention powerful abstraction hide almost messy detail exception handling process however sometimes useful know happening behind curtain short overview thing calling convention take care retrieving argument calling convention expect argument passed register possible exception handler since must overwrite register value backing stack instead calling convention aware argument already lie stack specific offset returning using iretq since interrupt stack frame completely differs stack frame normal function call ca nt return handler function normal ret instruction instead iretq instruction must used handling error code error code pushed exception make thing much complex change stack alignment see next point need popped stack returning calling convention handle complexity however nt know handler function used exception need deduce information number function argument mean programmer still responsible use correct function type exception luckily interruptdescriptortable type defined crate ensures correct function type used aligning stack instruction especially sse instruction require stack alignment cpu ensures alignment whenever exception occurs exception destroys later push error code calling convention take care realigning stack case interested detail also series post explains exception handling using naked function linked end post understood theory time handle cpu exception kernel start creating new interrupt module srcinterruptsrs first creates initidt function creates new interruptdescriptortable srclibrs pub mod interrupt srcinterruptsrs use structure idt interruptdescriptortable pub fn initidt let mut idt interruptdescriptortable new add handler function start adding handler breakpoint exception breakpoint exception perfect exception test exception handling purpose temporarily pause program breakpoint instruction executed breakpoint exception commonly used debugger user set breakpoint debugger overwrites corresponding instruction instruction cpu throw breakpoint exception reach line user want continue program debugger replaces instruction original instruction continues program detail see debugger work series use case nt need overwrite instruction instead want print message breakpoint instruction executed continue program let create simple breakpointhandler function add idt srcinterruptsrs use structure idt interruptdescriptortable interruptstackframe use crate println pub fn initidt let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler extern fn breakpointhandler stackframe mut interruptstackframe println exception breakpointn stackframe handler output message prettyprints interrupt stack frame try compile following error occurs error abi experimental subject change see issue extern fn breakpointhandler stackframe mut interruptstackframe println exception breakpointn stackframe help add feature crate attribute enable error occurs calling convention still unstable use anyway explicitly enable adding feature top librs idt order cpu us new interrupt descriptor table need load using lidt instruction interruptdescriptortable struct provides load method function let try use srcinterruptsrs pub fn initidt let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler idtload try compile following error occurs error idt live long enough idtload live long enough borrowed value life note borrowed value must valid static lifetime load method expects static self reference valid complete runtime program reason cpu access table every interrupt load different idt using shorter lifetime static could lead useafterfree bug fact exactly happens idt created stack valid inside init function afterwards stack memory reused function cpu would interpret random stack memory idt luckily interruptdescriptortable load method encodes lifetime requirement function definition rust compiler able prevent possible bug compile time order fix problem need store idt place static lifetime achieve could allocate idt heap using box convert static reference writing o kernel thus nt heap yet alternative could try store idt static static idt interruptdescriptortable interruptdescriptortable new pub fn initidt idtbreakpointsethandlerfn breakpointhandler idtload however problem static immutable ca nt modify breakpoint entry init function could solve problem using static mut static mut idt interruptdescriptortable interruptdescriptortable new pub fn initidt unsafe idtbreakpointsethandlerfn breakpointhandler idtload variant compiles without error far idiomatic static muts prone data race need unsafe block access static rescue fortunately lazystatic macro exists instead evaluating static compile time macro performs initialization static referenced first time thus almost everything initialization block even able read runtime value already imported lazystatic crate created abstraction vga text buffer directly use lazystatic macro create static idt srcinterruptsrs use lazystatic lazystatic lazystatic static ref idt interruptdescriptortable let mut idt interruptdescriptortable new idtbreakpointsethandlerfn breakpointhandler idt pub fn initidt idtload note solution requires unsafe block lazystatic macro use unsafe behind scene abstracted away safe interface last step making exception work kernel call initidt function mainrs instead calling directly introduce general init function librs srclibrs pub fn init interrupt initidt function central place initialization routine shared different start function mainrs librs integration test update start function mainrs call init trigger breakpoint exception srcmainrs nomangle pub extern c fn start println hello world blogos init new invoke breakpoint exception instruction interrupt new cfg test testmain println crash loop run qemu using cargo run see following work cpu successfully invokes breakpoint handler print message return back start function crash message printed see interrupt stack frame tell u instruction stack pointer time exception occurred information useful debugging unexpected exception test let create test ensures continues work first update start function also call init srclibrs entry point cargo test cfg test nomangle pub extern c fn start init new testmain loop remember start function used running cargo test lib since rust test librs completely independent mainrs need call init set idt running test create testbreakpointexception test srcinterruptsrs testcase fn testbreakpointexception invoke breakpoint exception instruction interrupt test invokes function trigger breakpoint exception checking execution continues afterwards verify breakpoint handler working correctly try new test running cargo test test cargo test lib test librs module see following output blogos interrupt testbreakpointexception ok much magic calling convention interruptdescriptortable type made exception handling process relatively straightforward painless much magic like learn gory detail exception handling got covered handling exception naked function series show handle exception without calling convention also creates idt type historically post main exception handling post calling convention crate existed note post based first edition blog might date next successfully caught first exception returned next step ensure catch exception uncaught exception cause fatal triple fault lead system reset next post explains avoid correctly catching double fault
427,Lobsters,osdev,OS,"Booting an Intel Architecture System, Part I: Early Initialization",http://www.drdobbs.com/parallel/booting-an-intel-architecture-system-par/232300699,booting intel architecture system part early initialization,hardware power sequence prepreboot,taking lot little step along path good analogy understanding boot flow intel architecturebased system minimum firmware requirement making system operational booting operating system presented article vast majority system perform step article full cold boot depending architecture bios may multiple software phase jump different set rule sequence waking hardware least early phase much hardware power sequence prepreboot someone push power button cpu ca nt simply jump start fetching code flash memory external power first applied hardware platform must carry number task processor brought reset state first task power supply allowed settle nominal state primary power supply settle usually number derived voltage level needed platform example intel architecture reference platform main input supply source platform processor require voltage rail volt voltage must provided particular order process known power sequencing power sequenced controlling analog switch typically fieldeffect transistor sequence often driven complex program logic device cpld platform clock derived small number input clock oscillator source device use phaselocked loop circuitry generate derived clock used platform clock take time converge step occurred powersequencing cpld deassert reset line processor illustrated figure depending integration silicon feature logic may chip controlled microcontroller firmware start prior main processor figure overview power sequencing variety subsystem may begin prior main host system intel manageability engine available mainstream desktop serverderived chip one component main system firmware initialize device composing however likely level interaction must taken account setting firmware descriptor flash component start enable clock correctly main system firmware also potential make call called another example micro engine telecommunication component used embeddedsystems world micro engine firmware start independently system bios host system bios must make allowance advanced configuration power interface acpi memory map allow proper interaction host driver microengine subsystem processor reset line deasserted processor begin fetching instruction location instruction known reset vector reset vector may contain instruction pointer starting instruction flash memory location vector architecturespecific usually fixed location depending processor initial address must physical address memory management unit mmu exists yet enabled first fetching instruction start byte left top memory byte must contain far jump remainder initialization code code always written assembly point software stack cache ram available time processor cache enabled default uncommon flush cache step wbinv instruction wbinv needed newer processor nt hurt anything
429,Lobsters,osdev,OS,"Node9, an OS based on Inferno, LuaJIT, and Libuv",https://github.com/jvburnes/node9,o based inferno luajit libuv,wiki,hosted operating system based bell lab inferno o using lua scripting language instead limbo luajit high performance virtual machine instead dis virtual machine also us libuv io library maximum portability efficient event processing thread management see file doc information current status development information check wiki see also
431,Lobsters,osdev,OS,Microkernels - The component-based operating systems,http://www.microkernel.info/,microkernels componentbased operating system,create pull request,microkernels operating system outsource traditional operating system functionality ordinary user process providing mechanism requisite implementing microkernelbased operating system come many different flavour distinctive set goal feature approach often cited reason structuring system microkernel flexibility security fault tolerance many microkernels take role hypervisor microkernels user environment often implemented c c programming language little bit assembly implementation language possible fact component microkernelbased system implemented different programming language list active free open source microkernel project project missing page need fixing please create pull request
432,Lobsters,osdev,OS,bhgv/Inferno-OS_Android - an Android port of Inferno OS,https://github.com/bhgv/Inferno-OS_Android,bhgvinfernoosandroid android port inferno o,infernoosandroid change may get official source vitanuova working changed added jit compiler buit kind fpu possibility use build medium note dependency build window host run,infernoosandroid change infernoos tree replaced repo infernoosbhgv use git clone recursive http githubcombhgvinfernoosandroid need old infernoos tree may get android api based last official source vitanuova working gui compatibility main gui app wmawm load wmawm start source applawm applalib touch screen single touch nt know use multitouches inferno file filetree stored sdcardinferno folder permission network styx regular tcp connection permission changed gui bigger icon bigger key keyboard bigger caption window icon changed size display output android way little experimental still may changed future added added support png svg image may used place may used bit image example parameter bitmap tk control call possibility resize svg png image time loading tk bitmap new size imagepath svgorpng ttf font maybe supported internally using embedded libfreetype use specify subfonts font file command line format regular emu commang line restriction mostly graphic parameter jit restriction hardware jit compiler buit kind fpu devaudio devaudioctl device first mapped dev f bind b dev possibility reading devaudio read phone mic stereo raw wave without header compression ex cat devaudio sndraw writing devaudio output data written phone speaker stereo raw wave without header compression ex cat sndraw devaudio devaudioctl support next command writing load file file path inferno f load specified file nt start play load uri uri address stream play load specified network stream nt start play unload file unloads last loaded file free used resource unload uri unloads last loaded network stream free used resource play file play loaded file play uri play loaded uri stop file stop playing file stop uri stop playing network stream loop file loop uri loop playing file stream sound stream record output raw wave devaudio playing file network stream use separate buffer may work simultaneously ex echo load file devaudioctl echo play file devaudioctl echo load uri http devaudioctl echo play uri devaudioctl thanks somafmcom network radio provided demo net stream mouse button emulated using multitouch possibility use point select need finger tap somewhere finger couse click mouse button coordinate click coordinate first finger copypaste functionality working text yet inferno copy paste buffer separated android copypaste buffer actually way copypaste inferno android build medium note built window using linux easy build linux pair change go infernoos folder rewrite bldbat script linux style also forget configure linux tool modifying makeconfig script dependency android studio cmake plugin android studio ndk build window host cd infernoos bldbat successful building inferno libs infernoosandroidarmlib open project android studio build apk run install apk android copy inferno tree infernoos android path sdcardinferno run
433,Lobsters,osdev,OS,Antique BeOS Content by Scot Hacker,http://birdhouse.org/beos/byte/,antique beos content scot hacker,antique beos content scot hacker archived column bytecom zdnet plus peachpit beosbiblecom decided pony beview archive april august zdnet behive archive november april making available behive tarball beosbiblecom mirror reproduce beosbiblecom article,antique beos content scot hacker archived column bytecom zdnet plus peachpit beosbiblecom late bytecom decided combat falling ad revenue charging admission archive computing content firsthand experience tring harvest enough revenue internet pay operating cost fully support byte decision move subscription model however beview column bytecom virtually hidden search engine thus internet hundred incoming link redirect subscription page might well broken beos content provided bytecom two year wrote tailored specific niche audience beos practical intent purpose completely dead even though article surprisingly welltrafficked time hard imagine anyone would pay access byte archive read old nugget contract bytecom stated allowed publish content elsewhere period three month publication right reverted encourage anyone enjoys byte content consider paying decided make contribution freely available interest hobbiests madman appreciate byte contribution history computing encourage pony worth beview archive april august byte author decided repost content domain zdnet behive archive november april also making available contribution zdnet longdefunct behive antique article somewhat embarassing journalistically speaking represent earliest commercial journalistic coverage beos comprise fairly detailed record feel woefully underdocumented period computing history thought beos completists might appreciate never paid behive column got free bebox exchange running site signed contract per use content behive tarball beosbiblecom mirror peachpit official website beos bible beosbiblecom included chapter excerpt entire chapter written book never published update site taken offline shortly book went print eventually peachpit granted permission mirror content elsewhere able supply broken partial archive original site course copy content written going take lot work fix actual site archive supplied may oren bear provided complete copy site apparently hoovered web year prior thanks oren finally able reproduce beosbiblecom entirety birdhouse article published independently site apple considering whether use next beos technology heart o x piece generated email response
