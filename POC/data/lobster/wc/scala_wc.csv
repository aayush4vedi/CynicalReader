ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,scala,Scala programming,ZIO 1.0 Released,https://ziverge.com/blog/zio-1.0/,zio released,zio released opened issue aff birth zio contentious concurrency argued effect concurrency inherently unsafe presented first version typed error evolution introducing staticallytyped error standalone library contributor growth improved typeinference battery included zio stream scale bay zio environment software transactional memory execution trace summer zio test zlayer structured concurrency zio beyond release note online zio personal thanks septimal mind softwaremill scalac panopticontui signify technology,year development contributor many production deployment zio readyzio released june opened issue scalaz repository github argued scalaz needed powerful fast data type async programming encouraged contribute scalaz friend vincent marquez volunteered build one first foray async concurrent programming previously designed built first version aff assisted talented nathan faubion second iteration library quickly became number one solution async concurrent programming purescript ecosystem back written future data type scala abandoned scala standard library incorporated much better version wrote promise data type haxe raincheck data type java every case made mistake subsequently learned make new mistake sunny afternoon june imagined spending month developing new data type point would wrap tidy bow hand scalaz organization happened next never could imagined birth zio spent free time working core new project increasingly felt like goal work create pure functional effect wrapper sideeffects done performance could improved scalaz library built pure functional programming generally compete baremetal abstractionfree handoptimized procedural code developer like believe one true way functional programming effectwrapper enough going win new convert slap certified pure label imperative code although solving async problem still useful preloom world lot data type already solved problem scala future instead thought needed focus library concrete pain wellsolved functional programming one pain stood among others concurrency including unsolved problem scala future safely cancel executing code whose result longer necessary due timeout failure concurrency big enough space play whole library ecosystem formed tame wily way indeed framework become popular precisely shield developer concurrency complex confusing errorprone given challenge thought bake concurrency new data type give feature would impossible replicate procedural program without special language feature vision powerful concurrent library drove early development contentious concurrency time began working scalaz project prevailing dogma functional scala ecosystem effect type little support concurrency baked indeed argued effect concurrency inherently unsafe must left streaming library like nonetheless seen amazing work coming haskell f believed possible important modern effect type solve four closely related concurrency concern starting new independent thread computation asynchronously waiting thread finish computing return value automatically canceling running thread return value longer needed ensuring cancellation leak resource course time developed small prototype socalled scalaz io monad solved problem fast purely functional package effect could forked yield fiber cooperativelyyielding virtual thread could awaited instantly interrupted haskellinspired version tryfinally called bracket provided resource safety excited design talked publicly released code resulting backlash competitor nt believe benchmark could possibly correct november presented first version scale bay opening pull request full source code including rigorously designed benchmark allayed concern despite initial skepticism criticism time effect system scala adopted concept launching effect yield fiber could safely automatically interrupted primitive ensure resource safety early prototype yet zio know today seed zio planted grew quickly typed error evolution initial design scalaz io data type inspired haskell scalaz task due time however found reevaluating decision made data type particular unhappy fact effect type dynamically typed error pragmatically speaking compiler ca nt help reason error behavior pretend every computation always fail infinite way staticallytyped functional programmer want use compiler help write better code able better job know nt handled error use typed data model business error course haskell answer adding staticallytyped error use monad transformer maybe type class unfortunately solution increase barrier entry reduces performance bolt second often confusing error channel since starting clean slate different programming language different idea instead rigidly fixing error type throwable like scala try data type let user pick type like either initial result experiment remarkable looking type signature could understand exactly code dealing error dealing combinators precisely reflected error handling behavior type signature law traditionally checked using library like scalacheck checked statically compile time january committed ended radical departure status quo introducing staticallytyped error scalaz effect type month followed worked polish optimization bug fix unit test documentation found growing demand use data type production became apparent scalaz longerterm project ambitious developer pulled io data type standalone library could begin using project excited early traction nt want obstacle using data type user scalaz cat june decided pull project new standalone project zero dependency completely separate scalaz chose name zio combining z scalaz io io monad contributor growth around time first significant wave contributor started joining project including regis kuckaertz wiem zine elabidine pierre ricadat among others new open source functional scala although deep background mentorship contributor including case weekly meeting pull request review whole new generation open source scala contributor talented functional scala developer whose warmth positivity cando spirit started shape community zio started accreting feature make easier build concurrent application asynchronous doublybackpressured queue better error tracking handling rigorous finalization lowerlevel resourcesafety bracket although increased contribution led increasingly capable effect type personally found using zio pleasant library poor type inference improved typeinference many functional scala developer time absorbed prevailing wisdom functional programming done scala meant avoiding subtyping declarationsite variance indeed presence subtyping language negatively impact type inference using declarationsite variance couple drawback however decision using zio required specifying type parameter many method resulting unforgiving joyless style programming particularly typed error private wrote small prototype showing using declarationsite variance could significantly improve type inference made want implement feature zio time however zio still resided scalaz organization separate repository aware departure status quo would controversial private fork wiem zine elabidine worked together massive refactoring first major collaboration friday july opened pull request added covariance result spoke nearly explicit type annotation deleted although expected controversy difficult argue result change zio started becoming pleasant use extra error type parameter longer negatively impacted usability experience emboldened start breaking taboo started aggressively renaming method class removing jargon known pure functional programmer step created yet controversy also differentiated zio design choice including expressed scalaz turbulent evolution new take functional scala entered zio community contrarian principled take emphasizes practical concern solving real problem accessible joyful way using part scala including subtyping declarationsite variance finally project began feel like zio today shaped rapidly growing community fresh face eager build new future functional programming scala battery included toward latter half zio got compositional scheduling powerful new data type represents schedule equipped rich compositional operator using single data type zio could either retry effect repeat according near arbitrary schedule artem pyanykh implemented blazing fast lowlevel ringbuffer help pierre ricadat became foundation zio asynchronous queue demonstrating ability zio ecosystem create de novo highperformance jvm structure itamar ravid highly talented scala developer joined zio project added managed data type encapsulating resource inspired haskell managed provided compositional resource safety package supported parallelism safe interruption help maxim schuwalow managed grown become extremely powerful data type thanks effort raas ahsan zio unexpectedly got early version would later become fiberref fiberbased version threadlocal kai wizardlevel scala developer type astronaut labored add compatibility cat effect library zio user could benefit hard work put library like doobie thanks work numerous contributor spread year zio became powerful solution building concurrent one without concurrent stream zio stream although akka stream provides powerful streaming solution scala developer coupled akka ecosystem scala future functional scala space provides streaming solution work zio based cat effect whose type class ca nt benefit ziospecific feature knew ziospecific streaming solution would expressive type safe lower barrier entry existing zio user given importance streaming modern application decided zio needed streaming solution one unconstrained feature set cat effect bringing new competitive streaming library existence would lot work itamar ravid volunteered help instantly said yes together third quarter itamar worked secret zio stream asynchronous backpressured resourcesafe compositional stream inspired work remarkable scala developer eric torreborre well work haskell iteratees initial release zio stream delivered highperformance composable concurrent stream sink strong guarantee resource safety even presence arbitrary interruption unveiled design scale bay since thanks itamar army capable contributor including regis kuckaertz zio stream become one highlight zio bit capable streaming library much smoother integration zio effect type capability toward end decided focus complexity testing code written using effect system led last major revision zio effect type zio environment exploring contravariant reader data type model dependency discovered using intersection type emulated keyword scala one could achieve flawless type inference composing effect different dependency provided possible solution simplifying testing zio application excitedly wrote simple toy prototype shared wiem zine elabidine want help work asked said yes together quietly added third final type parameter zio effect type environment type parameter unveiled third type parameter nowinfamous talk death finally tagless humorously presented cartoonish halloween theme talk argued testability primary benefit taglessfinal could obtained much simply teachable way passing interface solution objectoriented programmer used decade taglessfinal assumption discipline zio environment provided way reason dependency statically way code interface without pain usesite unlike taglessfinal fully inferred nt require teaching type class category theory higherkinded type implicits zio user immediately started using zio environment appreciating ability describe dependency using type without actually passing thus allowing dependency inference constructing zio environment however proved generically difficult even structure environment fully known workable solution pain would identified almost year later meanwhile zio continued benefit numerous contribution added combinators improved documentation improved interop improved semantics core data type next major addition zio software transactional memory software transactional memory first prototype scalaz io data type included mvar doublybackpressured queue maximum capacity inspired haskell data type name really liked fact mvar already proven could used build many concurrent data structure queue semaphore soon early prototype however talented eloquent fabio labella convinced two simpler primitive provided orthogonal basis building concurrency structure promise variable data type set exactly one time awaited asynchronously retrieved number time ref model mutable cell store immutable value atomic operation updating cell early refactoring allowed u delete mvar provided much simpler foundation however year using structure appreciated orthogonality power became apparent assembly language concurrent data structure structure could used build lot asynchronous concurrent data structure semaphore queue lock extremely tricky required hundred line fairly advanced code complexity stem requirement operation data structure must safely interruptible without leaking resource deadlocking moreover although build concurrent structure promise ref enough work make coordinated change across two concurrent structure transactional guarantee structure built promise ref noncompositional apply isolated data structure built ref noncompositional transactional semantics strictly speaking transactional power equivalent actor mutable state actor safely mutate state transactional change made across multiple actor familiar haskell software transactional memory provides elegant compositional solution problem developing concurrent structure decided implement version zio help partnerincrime wiem zine elabidine presented scalar conf april dejan mijic another fantastic highly motivated developer keen interest highperformance concurrency distributed system joined zio stm team mentorship dejan helped make stm stacksafe transaction size added several new stm data structure dramatically improved performance existing structure implemented retrystorm protection supporting large transaction hotly contested transactional reference zio stm stm scala feature although much older scala stm surely productionworthy nt integrate well asynchronous purely functional effect system built using fiberbased concurrency next major feature zio would address severe deficiency never solved scala ecosystem extreme difficulty debugging async code problem present scala future decade execution trace previously presenting zio new nonpure functional programmer primary audience zio received question debug zio code difficulty stem worthless nature stack trace highly asynchronous programming stack trace capture call stack future zio heavily async environment call stack mainly show gut execution environment useful tracking error thought problem become convinced would possible implement async execution trace using information reconstructed call stack began telling people would implement something like zio soon anticipate soon would kai came idea execution tracing radically different way imagined dynamically parsing executing bytecode class file although recollection bit hazy seemed mere day kai whipped prototype seemed extremely promising offered assistance hammering detail full implementation ended wonderful joint talk ireland launch feature sometimes tendency focus law abstraction seeing phenomenally positive response execution tracing good reminder stay focused real world pain developer summer beginning summer zio began seeing first significant commercial adoption led many feature request bug report much feedback user summer saw many performance improvement bug fix naming improvement tweak library thanks regis kuckaertz countless contributor thanks work everpatient honza strnad others fiberref evolved presentday form much powerful fiberaware version one undergo specified transformation fork merges join pleased addition however zio grew automated test zio growing became increasing source pain across scalajs jvm dotty test runner time natively support dotty summer began work purely functional testing framework goal addressing pain result zio test zio test testing functional effect inside traditional testing library painful easy way run effect provide dependency integrate host facility functional effect system using retries repeat forth wanted change small compositional library called zio test whose design thinking since even zio existed like groundbreaking zio test embraced philosophy test value although zio test retained traditional treelike structure spec allows nesting test inside test suite suite inside suite early development zio test incredible extremely helpful adam fraser joined project core contributor instrumental fleshing realizing greatly extending vision zio test adam since become lead architect maintainer project piggybacking atop zio powerful effect type zio test implemented comparatively line code concern like retrying repeating composition parallel execution forth already implemented principled performant typesafe way indeed zio test also got featherweight alternative scalacheck based zio stream since generator value viewed stream unlike scalacheck zio test generator autoshrinking baked inspired haskell hedgehog library correctly handle filter shrunk value edge case scenario scalacheck handle toward end nearly year real world usage zio community hard work solution problem making dynamic construction zio environment easier work directly led creation zlayer last major data type added zio zlayer two talented scala developer maxim schuwalow piotr gołębiewski jointly worked zio macro project among utility provided easier way construct larger zio environment smaller piece excellent work independently replicated highlyacclaimed polynote jeremy smith response pain functional scala several speaker presented pain constructing zio environment convinced take hard look problem taking inspiration earlier attempt piotr created two new data type zlayer thought typeindexed heterogeneous map type safe requires access compiletime type tag information zlayer thought powerful constructor build multiple service term dependency unlike constructor zlayer dependency graph ordinary value built value using composable operator zlayer support resource asynchronous creation finalization retrying feature possible constructor zlayer provided clean solution problem developer zio perfect mind nt think solution prior scala perfect every solution design space different tradeoff good solution became even better excellent consultancy septimal mind donated izumi reflect zio organization introduction zlayer last major change core data type zio since although stream seen churn rest zio stable yet despite stability recently still one major unresolved issue heart zio runtime system full solution problem structured concurrency structured concurrency structured concurrency paradigm provides strong guarantee around lifespan operation performed concurrently guarantee make easier build application stable predictable resource utilization since long fan haskell structured concurrency via async related zio first effect system support structured concurrency numerous operation default interrupting fiber return fiber interrupted finalizers executed default timing effect return effect timed interrupted finalizers executed default executing effect parallel one fails parallel operation continue sibling effect interrupted etc design decision contentious implemented effect system recently however one notable area zio provide structured concurrency default whenever effect forked launched concurrently execute new fiber lifespan executing effect unconstrained solving problem turned require multiple major surgery zio internal runtime system part zio developer understand completely tends bottleneck end solved problem satisfactory way required learning real world feedback prototyping le completely different solution problem today zio effect system scala full structured concurrency default zio beyond yesterday august zio released live online zoomhosted launch party brought together paid tribute contributor user across zio ecosystem laughed chatted monologued bit toasted time user contributor past future zio today zio artifact available sonatype part zio ecosystem working rapidly release new version downstream library expect full binary backward compatibility line two exception zio stream lock zio stream api zio higher allowing u time prove newer improvement library zio test similarly zio stream want wait zio least locking zio test major breaking change planned need solve problem shared layer across totally different spec well reporting could solving problem need make breaking change guarantee backward compatibility help zio ecosystem flourish encourage corporate adoption release note online zio effect system nt right everyone zio may right choice team think compelling reason scala developer take serious look zio wonderful community amazed talent positivity apprenticeship seen zio community well universal attitude page code code code collaboratively work together way improving code history innovation zio first effect type pure automatic interruption default first effect type execution context locking correctly handled autoshifting async boundary exception first effect type typed error effect type environment first effect type execution tracing current effect type finegrained interruption current effect type full structured concurrency much although inspired haskell zio charted course become many believe leading effect system scala bright future zio took three year get right believed foundation extremely robust support coming early library like caliban zio redis zio config zio grpc others indication coming going amazing zio user attract new user functional programming scala programming language addition living advanced effect system past year core contributor exciting idea next future effect system several mindblowing whether end zio something else question concurrent programming scala never much fun correctbyconstruction productive personal thanks zio would possible without work contributor personally reviewed thanked many contributor want thank every one work creativity inspiration addition like personally thank core contributor rolled sleeve contributed directly mentored developer given talk inspired contributed incredible variety creative suggestion innovative feature bug fix automated test documentation improvement particular want thank wiem zine elabidine first person believe project enormous role codeveloping zio would become friend ongoing source inspiration good time bad adam fraser literally right hand man top contributor zio congratulation continuously innovating way never cease amaze one helpful impactful voice zio community itamar ravid depth breadth experience come seniority able tackle problem whatsoever part code base machine incidentally first person choose go war hit gym whatever pleasure cocontributor colleague pierre ricadat one light shine brightly across scala contribution zio creation amazing caliban library show everyone powerful joyful functional scala mentoring new generation functional scala developer producing community wonderful newsletter dejan mijić wonderful friend coconspirator neverending stream improvement many take place concurrently taking even craziest performance challenge glee leaving fun memory regis kuckaertz one brave people join journey early day working trickiest code zio runtime system writing entertaining documentation seen os project kai one kind force nature go others fear tread usually innovating multiple front simultaneously one never enough telling thing may like hear definitely hear artem pyanykh blowing away attention detail finest systemlevel code seen scala ecosystem salar rahmanian tim steinbach always pushing build release process incredible machine become saving many occasion thing broken nt understand going lech głowiak diving functional scala open source development helping wherever needed despite impossibly busy life work schedule maxim schuwalow piotr gołębiewski ongoing independent innovation significantly shaped always pushing find better way solving problem zio address igal tabachnik building amazing intellij plugin seen scala ecosystem providing level comfort maturity java user receive francois armand constant voice user giving gentle feedback way make project deal real pain user yes francois autoblocking officially todo list flavio brasil inspirational body work intersection performance functional programming although flavio yet able contribute zio directly encouragement work super fast collection led chunk boxfree zio data type backed array super fast element appendprepend great cache locality small constant factor operation want thank early adopter zio fearlessly rolled zio production since release willing pay tax tirelessly updating code base sometimes new release candidate zio adopter encountered problem reported bug proposed new feature helped shape zio library become want thank septimal mind donated izumi reflect contributed execution tracing softwaremill financial support circleci build outstanding community supporter scalac ongoing work teaching zio sponsorship zio hackathon warsaw contribution multiple zio open source project including amazing panopticontui signify technology helped bring many zio job scala developer whose participation scala community greatly enriched finally want acknowledge haskell ecosystem particular simon marlow pushed boundary possible functional concurrency asynchronicity michael snoyman invented rio share common design purpose zio michael pilquist came brilliant trick making asynchronous waiting concurrent structure safely interruptible used zio original version semaphore though necessary stm provides property free alex nedelcu whose work monix blew past scalaz task long zio whose work inspired wonderful peekahead optimization zio runtime fabio labella persuaded abandon mvar favor orthogonal primitive list could never complete omitted significant credit contribution human amazing journey one scarcely believe concluded incredibly grateful experience opportunity finally release zio start new journey place unknown john de go
2,Lobsters,scala,Scala programming,Cross-Platform Language Design - Sébastien Doeraene - Ph.D. thesis,http://lampwww.epfl.ch/~doeraene/thesis/,crossplatform language design sébastien doeraene phd thesis,crossplatform language design full text scalajs abstract,crossplatform language design doeraene phd thesis full text thesis behind scalajs dialect scala compiles javascript abstract programming language increasingly compiled multiple runtimes featuring rich structure object model furthermore need interact language targeting said runtimes language targeting one runtime designed tailor semantics runtime easy interoperability language however language targeting multiple runtimes differing semantics difficult cater retaining common behavior across runtimes call crossplatform language language aim portable across platform interoperable target platform portability ability program library crosscompile multiple platform behave way interoperability ability communicate language platform many crosscompiling language focus one two adding support one language designed ground support rare thesis present design scalajs dialect scala targeting javascript platform turned scala crossplatform language one hand scala program crosscompiled jvm javascript portable semantics hand whereas scalajvm interoperates java scalajs interoperates javascript allowing use javascript library along dissertation give insight transferred design crossplatform language although bias towards targeting jvm javascript first obvious challenge reconcile static nature scala object model javascript dynamic one besides ability mutate class hierarchy runtime javascript fundamental difference two model particular difference compiletime overloading runtime overloading discus semantic mismatch live harmony within language second challenge obtain good performance language interoperability dynamic unknown part program pervasive end design specify intermediate representation ir firstclass support dynamically typed interoperability feature addition statically typed jvmstyle operation despite tight integration open world javascript ir considered closed world advanced wholeprogram optimization performed performance overall system evaluated shown competitive handwritten javascript even scalajvm case keywords interoperability portability language design crossplatform performance scala javascript
4,Lobsters,scala,Scala programming,Configuration as Code with Ciris,https://lewisjkl.com/config-as-code/,configuration code ciris,configuration code ciris ciris feature secret refined support custom decoder conclusion,traditionally working configuration mean define set value without typesafety look application runtime could go wrong turn lot thing may realize put configuration wrong path may load configuration incorrect type may compile multiple subprojects together configuration overwritten unexpected way frustrating experience configuration code come configuration code give compiletime safety still giving option overriding configuration value runtime best world favorite configuration code library called ciris show basic work ciris configuration code ciris personally treat configuration code place define structure configuration along default value override default value runtime using environment variable approach could take reading configuration file instead environment variable best fit use case small example using ciris import catsimplicits import ciris object config final case class appconfig host string port int val appconfig configvalue appconfig env host string default env port int default parmapn appconfig setup give value appconfig reference code access host port application bind appconfig kept default value host port provided environment variable runtime override default may notice setup still allows runtime failure example environment variable port expected integer provide type want account scenario resolve configuration inside main method way runtime failure happen right application boot later runtime object main extends ioapp val myapp io unit cfg configappconfigload io iopure new myprogram cfg yield def run args list string io exitcode myappas exitcodesuccess runtime configuration failure going happen program happen right call configappconfigload io use traditional configuration approach typesafe config could still config resolution time application boot isolate runtime error application startup however going require lot manual work ciris take care dsl provides constructing configvalue approach would still leave uncertainty around way configuration separate subprojects merged together good news seen basically everything need order work ciris simple library method need know said feature want mention ciris feature secret ciris allows load configuration wrapped secret class contain sensitive value want end application log env databasepassword databasepassword secret give secret databasepassword refined support ciris provides module parsing configuration directly refined type env databaseusername nonemptystring default username custom decoder ciris allows decode custom type implementing configdecoder custom type take example type defined need run validation constructor argument final case class slackchannel private value string object slackchannel def create value string option slackchannel valuestartswith valuesome else none private implicit val slackchanneldecoder configdecoder string slackchannel configdecoder identity string mapoption slackchannel slackchannelcreate conclusion hopefully article shown useful configuration code found huge improvement traditional configuration resolution method appreciate ability give define configuration structure typechecked scala code ciris favorite library used configuration code provides super simple dsl resolving configuration providing default value also completely extensible add whatever functionality want
5,Lobsters,scala,Scala programming,Lazy sequences in the Scala standard library,https://www.toromtomtom.com/blog/2020/05/16/laziness-in-scala.html,lazy sequence scala standard library,discussion github stream lazylist conclusion pull request,one way learn idiom idiosyncrasy programming language follow development standard library scala standard libary example deprecated data structure lazy sequence stream replaced new data structure called lazylist release however lazylist different laziness characteristic stream recently sparked discussion github found discussion quite interesting try illustrate difference data structure post stream simplified version definition stream class stream hd tl stream val head hd lazy val tail stream tl def apply int head else tail stream consists con cell eagerly evaluated head lazily evaluated tail stream object instantiated expression head tail head expression immediately evaluated whereas tail evaluated first accessed therefore stream always look like following con cell evaluated head con cell except last one evaluated tail pointing next con cell head tail head tail head unevaluated one way construct stream use recursive function injecting printlns see order function call expression head tail evaluated syntactical sugar creating stream con cell def mkstream int stream int println evaluating cell println evaluating head cell println evaluating tail cell mkstream force evaluation con cell observe output val stream mkstream println stream println stream output evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell see head cell evaluated cell constructed tail evaluated access next cell lazylist simplified version definition lazylist replacement stream class lazylist hd tl lazylist lazy val head tail lazylist hd tl def apply int head else tail head tail lazily evaluated therefore actual con cell constructed either head tail accessed interestingly maybe confusingly head tail always evaluated together example accessing head unevaluated lazylist con cell construct con cell also evaluate tail thus lazylist structure look like head tail head tail unevaluated recursive function construct lazylist similar one shown stream equivalent access individual con cell get following output evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell evaluating tail cell evaluating cell first call construct lazylist evaluates neither head tail sense lazylist lazier stream however evaluating third con cell containing also invokes function construct next con cell lazylist le lazy stream conclusion one immediate conclusion refers porting us stream lazylist exploit laziness lazylist current scala version used differently stream using recursive function construct lazylist make sure work expression head tail lazily evaluated everything function outside expression evaluated soon previous con cell evaluated even head previous con cell accessed example instead def mklazylist int lazylist int val content doexpensivecalculation content mklazylist def mklazylist int lazylist int doexpensivecalculation mklazylist def mklazylist int lazylist int lazy val content doexpensivecalculation content mklazylist time writing pull request making tail lazylist con cell lazy opened
7,Lobsters,scala,Scala programming,Functional GraphQL library for Scala,https://ghostdogpr.github.io/caliban/,functional graphql library scala,purely functional minimal boilerplate type safe schema,purely functional interface pure type referentially transparentminimal boilerplate need manually define schema every type apitype safe schema schema derived compiletime resolver provided runtime
8,Lobsters,scala,Scala programming,The Death of Hype: What's Next for Scala,http://www.lihaoyi.com/post/TheDeathofHypeWhatsNextforScala.html,death hype next scala,death hype next scala past peak inflated expectation pushing syntactic boundary databinder dispatch scalagraph sbt reactive architecture akka actor framework functional programming apache spark trough disillusionment present slope enlightenment redmonk ranking tiobe ranking solid platform production usage mill build tool coursier metal speedup sjsonnet pattern matching string warning suppression broad varied ecosystem future usability ammonite upickle pprint requestsscala oslib cask scala native scalajs conclusion jetbrains developer survey python,death hype next scalaa recent tweet friend mine noted public interest scala programming language seems plateaued waned match feeling latest trend zeitgeist blog post go think happened scala stand future hold scala communityabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming blogpost inspired following tweet shame see friend typesafelightbend laid always said hard sell free stuff wonder scala adoption clojuredead seemed peak around zero data back though jamie note public interest scala programming language seems waned le interest meetups le interest conference le match seeing well scalaspecific conference targeting enthusiast still going strong shut global economy think doubt much le talk scala broader engineering community think reduction public interest real also expected given typical hype cycle follows new technology early scala rode wave hype frankly surprised even hype around pushing syntactic boundary hype around reactive architecture hype around functional programming hype around apache spark project much hype since died period backlash negativity within scala community outside since even backlash faded left reasonable boring language steadily advancing providing great platform general software engineeringthe past peak inflated expectation scala initially created language really started taking early twitter started picking language production system first tagged release scalaz functional programming library lightbend company pushing scala related technology founded apache spark written scala first tagged release cat functional programming library doubt activity scala community doubt major milestone kickstarted interest language largescale commercial adoption commercial support killer bigdata product like apache spark surprising surge public interest lot effort went following domain pushing syntactic boundary lot early scala interest flexible language extension method operator overloading implicit constructorsconversions flexible implicitparameter feature could used sort way flexibility liberating opened sort domainspecificlanguages programming style would unheard language exemplified number project databinder dispatch http client scalagraph data structure library sbt build tool making http request processing output databinder dispatch executer host port target reqbody fromrespstr constructing simple directed graph labelled edge scala graph val flight graph jfc fra flight lh h fra dme flight lh h append content url file filtering grep using sbt url http databindernetdispatchabout grep json file aboutjson search us null source directory using sbt find src name scala exec grep null xargs test z echo nullfree echo null detected many library evolved since early day since moved boring methodbased apis turn naming operator possible always wisest thing nevertheless doubt pushing boundary scala syntax using operator domainspecificlanguages one big point interest early scalareactive architecture reactive architecture pushed largely lightbend via akka actor framework another big effort way writing code different normal code someone might learn school allowed high level concurrency performance beyond achievable writing code traditional style initial incantation akka actor sacrificed lot scala total lack typesafety actor prohibiting blocking apis many idiosyncracies working akka actor basically language embedded scala convention syntax semantics recently typed actor reactive stream akka developer experience shifted much closer typechecked experience would expect typical scala program think also shift community mood rather treating reactive architecture like generalpurpose solution problem treated one possible approach one specific class problem mostly match experience using technique applicationsfunctional programming functional programming scala best exemplified scalaz cat project two library attempt bring much functional programming technique haskell scala language heavy focus concept like monad applicatives eschewing objectoriented side language purefunctional style two library different style remain heavily used portion community today evangelism died extent usage remains strong everyone recognizes functional programming one possible style write scala applicationsapache spark last big project drove scala early hype apache spark distributed bigdata process framework apache spark leveraged scala functional style serializable lambda take common collection like map filter reduce run distributed compute cluster processing huge amount data apache spark allowed big data processing pipeline written order magnitude le code running order magnitude le time earlier hadoop apis spark proved instant hit apache spark scala killer app huge fraction scala community using scala need interoperate spark way apache spark support developer apis many language sql r python popular original collectionslike apis largely superseded sqllike interface allows better optimizability important factor working huge datasets apache spark often used nevertheless apache spark codebase remains mostly scala dayin trough disillusionment since initial spark definitely backlash scala initial hype died early contributor left community interpersonal unhappiness aggregate individual level well personally know many individual got tired thing hyping moved slightly sour taste mouth hard pinpoint exact time hype died perhaps around even technical level well many organization used technique successfully respective niche others regretted going allin actor allin functional programming finding technique nt fit problem well would liked spend time backing allin investment particular programming paradigm personally know many organization make adjustment even fall early surprised amount hype around technology usage operator library clearly roof sometimes turned even simple task complex brainteasers amount hype saw around reactive architecture functional programming match specialized use case found fit best every scala conference keynote speaker evangelizing approach beall endall future software architecture surprise time others would join realizing trough disillusionmentthe present slope enlightenment scala hype early followed backlash hype midlate leave scala despite apparent downturn public interest usage scala continues increase maintain large number open source library number unique ip downloading library maven central package repository grown last year variation number downloads metric individual package overall match trend quite closely growth nt exponential rocket ship project hoping steady increase usage match subjective experience usage scala continues increase even hype died away maintain growth every year think scala community continue pretty good shape look recent redmonk ranking tiobe ranking show scala stably hovering outside clique mainstream language ranked respectively uncommon obscure hype backlash distant memory see scala flexible language supporting multiple programming style tradeoff use case lot early religiosity conflict transformed people using scala steady work enjoying language way choosea solid platform production usage despite reduction hype scala language lot better place used sbt build tool improved leap bound last year massively faster easier use nt like sbt choice many organization use bazel pant scala mill build tool stable widely used new tool like coursier forming new foundation ecosystem used tool ammonite sbt mill metal project brings scala support vscode sublime text editor languageserver support intellij scala plugin continues improve faster accurate support new tool like ammonite script mill build tool new collection library scala clean huge number old wart significantly improves performance many case eg speedup sjsonnet polish feature like pattern matching string warning suppression continue make life better everyone compiler massively sped code compiling literally twice fast three year ago language specification hardly changed past year amount qualityoflife improvement landed hard overstate talked scalausing engineering organization halving compile time back would showered money make happen individually significantly improved personal experience writing scala many improvement comprehensively list herea broad varied ecosystem hype around original four effort waned still form large active subcommunities within scala ecosystem example everyone may want use pure functional programming individual may want use time library ecosystem surrounding nevertheless varied highquality wellmaintained encounter occasion use pure functional programming find everything need way hype served purpose introducing large number people particular paradigm help achieve critical mass fraction people sustain subcommunity going forward broad range style scala thought boon rather considering way splitting community apart way bringing together community would otherwise never interact without scala community may disparately working haskell python java go system focusing shared rather different scala allows community collaborate thing benefit still preserving thing make subcommunity unique personally default architecting code reactively using actor shipped production code heavily us actor situation called default pure functional programming technique used pretty esoteric construct like free applicatives useful think community whole matured similar way appreciating different style using appropriate without dogmatism plagued early day scalathe future exciting thing think lie scala future scala language relatively good state afternoon writing modern java code enough relieve illusion language caught spending day trying unsuccessfully package python project standalone executable hello azurecli greatest potential lie introducing scala new set people new set use case point completely bound think two main thing stand usability initial four scala effort one thing missing ability new developer start codebase immediately productive nt matter whether using operatorheavy dispatch style actorheavy reactive style purefp catsscalaz style someone trying onboard going hard time need case counterexample developer generally find python easy language get started executable pseudocode call new programmer learn python nonprogrammers learn python people write code whiteboard marker often write python python performance concurrency largescale maintenability questionable ease getting started unmatched ca nt scala easy get started python answering question goal entire suite library maintain many library carboncopies shameless clone python equivalent example ammonite clone ipython repl upickle clone python json module pprint clone python pprint module requestsscala clone kenneth rietz request module oslib clone python o sys shutil module cask clone armin ronacher flask library turn make scala easy get started python python weakness performance concurrency maintainability scala already excellently scala potential language usability flexiblity python performance scalability java go typesafe maintainability far beyond option quite literally best world always use case highconcurrency reactive architecture purefunctional programming best tool job hope going forward developer able onboard onto scala language easy straightforward way need learn advanced technique need comesscala native scalajs demonstrated feasiblity using scala alternate platform compiled javascript instead jvm vibrant ecosystem community brings scala language browser somewhere could never used scalanative promise even bigger revolution compiling scala selfcontained binary executables would allow scala language used scenario startup time resource overhead jvm javascript runtime unacceptable scalajs brought scala browser scalanative promise bring scala host new environment commandline tool like git l rsync etc tolerate startup time jvm sidecar process background daemon significant memory overhead jvm make using scala problematic mobile development io running iphones ipads one ubiquitous consumer computing device world desktop application jvm startup time slow bundling jvm bulky deep integration native library like tensorflow machine learning framework sort program traditionally written unsafe language like c c recent implementation often written rust go whole cottage industry notc programming language like nim zig crystal also trying fill space scalanative promise able fill space brandnew language alreadypopular language existing rich ecosystem library tooling scalanative much difficult make successful scalajs particular scalajs could focus compiler delegate existing javascript runtime scalanative build runtime first principle threading garbagecollection eventloops addition formidable amount compiler work necessary nevertheless successful would massive boon broadening use case scala language usedconclusion amount hype around scala language definitely died year usage seems growing steady clip experience using language improving rapidly exactly would expect language progress hype cycle move faddriven community valuedriven community scala developer using language end unto instead solid tool use accomplish nonscalarelated technical business objective effect mean community mature going forward hope see focus outcome value rather hype weighing tradeoff rather dogmatism celebrating shared core rather arguing difference compiler speedup think way scala community spending effort bikeshedding existing language syntax effort arguing functional v object oriented programming effort trying make alreadyverytypesafe code even typesafe instead inclusively expanding language reach developer could never reach newbie nonprogrammers commandlinetool folk io developer look jetbrains developer survey python see breadth different domain python language used currently scala overwhelmingly used backend service andor spark data pipeline reason use case could nt satisfied scala well community make using scala easy broadlyusable enough anyone grizzled backenddata engineer able pick scala use enjoying conciseness performance typesafety within scala community already know loveabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
9,Lobsters,scala,Scala programming,Cats Effect Ref,https://lewisjkl.com/cats-effect-ref/,cat effect ref,state monad implementation ref overview ref implementation example partially applied type ref get implementation example ioapp ref set implementation example ref update implementation example ref modify implementation example full ref example region sharing conclusion twitter,newcomer functional programming thought mutability prohibited although figured use immutability situation found obvious case work modeling updating inmemory state eg inmemory cache counter wrong think functional programming mandated using immutable value functional programming requires referential transparency long hold mutability fine case inmemory state modeled using state monad provides way represent state updated sequentially case state move serially one value another taking previous state input look state monad however use case need update state concurrently rather sequentially look cat effect ref additionally look zio another ref implementation prefer ref overview ref mutable reference nonblocking accessed modified concurrently modified atomically dealt using pure function ref get atomicity java atomicreference referential transparency using cat effect sync type class show building block combine create ref going walk major operation available ref get set update modify note changed implementation simplify post mostly wish see real implementation ref check ref method constructor ref implementation def f implicit f sync f f ref f fdelay new ref f new atomicreference constructor creates ref filled atomicreference containing initial value within f context maintain purity operation referentially transparent since composed f using delay sync type class effect executed calling function merely return effect f ability run future point create ref true function within ref pure taking advantage delay behavior provided sync type class example val ref io ref io int refof io int note equivalent ref io ref take advantage partially applied type ref get operation simplest operation ref get value atomicreference currently contains ar atomicreference supplied within constructor implementation def get f fdelay arget get operation atomicreference happens single machine instruction mean number thread performing get atomicreference time without contention name atomicreference implies threadsafety hold operation atomicreference cleverly performs operation single machine instruction another key thing note atomicreference backed volatile variable volatile variable read written host computer main memory rather cpu cache mean even program running different cpu behave though running single cpu volatile variable see example val printref ref ref io content refget yield println content printrefunsaferunsync example following create ref using ref io acquire content ref using refget print content console using println content example printref return io unit effect representing computation run future point time case example post effect run immediately calling unsaferunsync typically call explicitly within program rather use ioapp run program ref set operation structured get except performing set operation time operation relies volatile threadsafe nature atomicreference implementation def set f unit fdelay arset example val printref ref ref io refset content refget yield println content printrefunsaferunsync ref update get set operation great alone allow u atomically update value contained inside reference example wanted take whatever value stored ref increment one might tempted something like def getthenset ref ref io int io unit refgetflatmap content refset content val printref ref ref io nonemptylistof getthenset ref getthenset ref parsequence content refget yield println content issue going get inconsistent output running code two separate process working parallel perform getthenset operation process may get value ref process chance increment value using set operation example execution program process get value calling ref get ref get return ref get return ref set set ref set set would expected final output program due get set happening two different operation end potentially incrementing value twice update come implementation def update f f unit modify f operation logically simple modify included modify post worry much implementation read section modify important thing note update update take function f argument called whatever value currently contained inside ref whatever value function f return new value inside ref update work make sense understand modify function ref work key thing understand update provides way atomically perform get set operation example val printref ref ref io refupdate refupdate content refget yield println content printrefunsaferunsync ref modify shown update perform get set operation although yet explain yet seen perform get set get operation although may seem unlikely operation needed common one take example using update increment counter method work unless need atomically access value incremented example want keep track number request http server seen time could use ref update function add one counter every request however update function work want return new request number updating could use update followed get atomic get performed separate machine instruction could lead two request getting id problem modify solves implementation def modify b f b f b tailrec def spin b val c arget val u b f c arcompareandset c u spin else b fdelay spin dive explaining modify method need understand atomicreference compareandset method compare set ca take two parameter value c expect contained atomicreference value u want update atomicreference ca update atomicreference value u value currently held within atomicreference equal value c value c equal value currently held atomicreference compareandset update reference return false indicate ca operation atomic compare set functionality happen single machine instruction let look ref modify method method take function f parameter function accepts value currently stored ref return tuple containing value update ref value return modify method modify method contains tailrecursive stacksafe inner method called spin spin method form called compare set loop reason loop needed modify requires two operation work atomicreference get atomicreference compareandset operation atomic call sequence resulting operation atomic thus atomicreference may get updated call get call compareandset causing compareandset operation fail return false reason need retry operation repeatedly finally succeeds succeed update underlying atomicreference call get compareandset example val printref ref ref io content refmodify current current current yield println content printrefunsaferunsync full ref example full example using ref manage state set bank account import bankaccounts final class bankaccounts ref ref io map string bankaccount def alteramount accountnumber string amount int io option balance refmodify allbankaccounts val maybebankaccount allbankaccountsget accountnumber map bankaccount bankaccountcopy balance bankaccountbalance amount val newbankaccounts allbankaccounts maybebankaccountmap mnumber val maybenewbalance maybebankaccountmap balance newbankaccounts maybenewbalance def getbalance accountnumber string io option balance refgetmap get accountnumber map balance def addaccount account bankaccount io unit refupdate accountnumber account object bankaccounts type balance int final case class bankaccount number string balance balance val example ref ref io mapempty string bankaccount bankaccounts new bankaccounts ref bankaccountsaddaccount bankaccount bankaccountsalteramount bankaccountsalteramount endingbalance bankaccountsgetbalance yield println endingbalance exampleunsaferunsync example still fairly basic certainly intended show would implement real banking software however give idea possible using ref region sharing final note something confusing first working ref whenever working ref operation using forcomprehension may know forcomprehensions syntactic sugar represent series flatmap call followed map end ref operation contained within f effect context need map flatmap result operation access value referred region sharing ref io flatmap region sharing ca nt access value ref contains region sharing convenient give u ability reason code locally word see every possible operation could modifying ref right inside region sharing look anything outside region since anything access ref conclusion hope overview given better intuition ref use within code ref super powerful construct give easy way manage application state way atomic pure ref would recommend checking resource question comment article please reach twitter thanks reading
10,Lobsters,scala,Scala programming,Building a Super Easy Rate Limiter with ZIO,https://medium.com/wix-engineering/building-a-super-easy-rate-limiter-with-zio-88f1ccb49776,building super easy rate limiter zio,building super easy rate limiter zio linda wilson unsplash zio challenge token bucket zio rescue zio api implementation queue using rate limiter using outside zio summary twitter,building super easy rate limiter ziophoto linda wilson unsplashin post show able make efficient nonblocking rate limiter using line code leveraging zio builtin nonblocking concurrency primitive fiber based concurrencythe challengerecently needed implement rate limiter one internal scala service service among thing allows user get live view kafka message fly topic select user selects topic view server start consuming topic stream message back client via websocketnaturally topic throughput far exceeds human eye ability follow brain ability process rate limiting come consumption rate exceeds certain maximum kafka consumer slow downrate limiter throttler easy write several algorithm choose token bucket fixed window sliding log others writing efficient correct concurrent code hardzio rescuefortunately service using zio library typesafe composable asynchronous concurrent programming scala zio come ton building block writing async non blocking concurrent code let see leverage implement rate limiterthe apifirst let define rate limiter api need single function given effect return new effect may suspend maximum throughput rate exceed executing original effect implementationthere data structure provided zio something similar structure bounded queue bounded queue created finite size queue full offer method suspend fiber call take happens reverse calling take empty queue need create bounded queue fiber draining constant rate rate limiter twenty line code necessary boilerplate forcomprehension actually understand mostly need understand two line line line magic happeninglets break queuetakerepeat schedulefixed period forkthe expression right side constructing program executed take element queue repeatedly every period forever interrupted separate fiber light weight logical thread provided zioif omitted fork comprehension hence whole effect returned ratelimitermakewould never finish repeated queuetake would run main fiber effectqueueoffer effectwe modify effect first offer element queue queue full suspend fiber element taken queue line room queue fiber proceeds generate original effectnote b equivalent aflatmap b running two effect sequentially ignoring result first using rate limiterhow use rate limiter contrived example second line comprehension attempt print number fast putstrln effect wrapped limiterratelimit number printed rate exceeding per second initial burst allowed bybuffer note throughput capped without blocking thread using outside ziocan also use rate limiter non zio code yes require boilerplatewe need instance zioruntime run zio effect case default environment fine create like object runtime extends ziodefaultruntimefirst let make async version rate limiter work scala future note since scala future represents already started effect ca nt delayed ratelimit method accepts function return future name parameter future would work well think case future express intent better could also make blocking rate limiter note use effectblocking wrap potentially blocking code zio effect make sure code run separate thread pool non blocking zio operationssummaryto summarize shown using zio able put together concurrent nonblocking rate limiter line code also shown rate limiter might used zio based code traditional future based even blocking applicationsthanks reading comment follow medium twitter
11,Lobsters,scala,Scala programming,Scala Implicits are Everywhere: A large-scale study of the use of Implicits in the wild (2019),https://arxiv.org/abs/1908.07883,scala implicits everywhere largescale study use implicits wild,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
12,Lobsters,scala,Scala programming,What Could Possibly Go Wrong: Polyglot Party with Nextjournal,https://www.innoq.com/en/blog/what-could-possibly-go-wrong/,could possibly go wrong polyglot party nextjournal,hedgehog nextjournalcomjanwhatcouldpossiblygowrong comment read,nextjournal notebook great tool trying thing sharing result enabling others build top also languageagnostic environment allows spin several programming language virtual embed single document data produce shared across runtimes processed visualised within notebook like nextjournal awful lot experimenting trying build clojure wrapper scala propertybased testing library hedgehog pleasant experience environment lends well playing code data encouraging happy share result encourage build top find notebook nextjournalcomjanwhatcouldpossiblygowrong comment please accept cookie agreement see full comment functionality read
13,Lobsters,scala,Scala programming,"LambdaConf 2020 Call for Proposals: Scala, Haskell, Kotlin, Purescript, Rust, Elm, Elixir, F#",https://lambdaconf.zohobackstage.com/LambdaConf2020#/cfp?lang=en,lambdaconf call proposal scala haskell kotlin purescript rust elm elixir f,,
15,Lobsters,scala,Scala programming,Beyond Liskov: Type Safe Equality in Scala,http://www.lihaoyi.com/post/BeyondLiskovTypeSafeEqualityinScala.html,beyond liskov type safe equality scala,beyond liskov type safe equality scala equality problem g integer integer seq seq array float array float list seq list vector seq vector type subtypes liskov substitution principle strawman exacttype match existing violation liskov safety beyond liskov substitution heuristic law universal equality make trivial expression discussion constant folding conclusion multiversal equality implicitbased invariant seqcontains,beyond liskov type safe equality scalathe scala language following java heritage allows compare two value equality regardless respective type error prone since refactor change type one value may silently result equality check never return true blog post explores safer equality check one many feature go principle underlie type system subtyping achieving requires fundamental rethinking mean type safe author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programmingthe equality problem scala equality operator defined follows abstract class final def boolean roughly equivalent java definition public class object public boolean equal object obj base scala type hierarchy like object base class java type hierarchy post referring scala type system everything said applies well java well base scala type hierarchy mean every type extends g integer integer integer seq seq seq array float array float array float list list seq list vector vector seq vector scala type hierarchy hierarchy includes subtyping idea type child another type perhaps additional method constraint functionality idea subtyping familiar anyone programming experience given prevalence object oriented language make heavy use concept method take argument mean compile error two value whether chance equal def x int int println x true false true def x int string println x one false false false case seems bit egregious nt point type system help avoid kind bug writing meaningless code always return false programmer likely made error might make sense write function like directly quite easy accidentally end function like refactor eg converting user id ints string vice versa nt type system meant help catch case performing refactor give u compile error rather letting broken halfrefactored code proceed runtime giving meaningless result type subtypes go make sense first discus mean type subtype one way looking type thing know expression program expression string expression specific string like hello expression int expression specific int like expression seq specific seq like list vector expression meaning could know expression string know int vice versa type tell known fact particular expression program allowing compiler eg check make sure passing string int required subtypes mean different level thing know expression program mean expression could anything integer string list etc int mean expression could integer mean expression single integer case consider type something restricts expression particular range value subtype simply range value subset range allowed another type subtyping natural way representing varying amount knowledge various expression within program different compiler may different type subtype hierarchy eg java nt type exact number scala val x x int val x type mismatch found int required val x compilation failed neither java scala type arbitrary integer range like integer present optimizing compiler although possible define type system work without subtyping lose lot flexibility modeling varying amount knowledge expression within programthe liskov substitution principle liskov substitution principle lsp stated follows let phi x property provable object x type phi true object type subtype subtype object type may replaced object type without altering desirable property program correctness task performed etc mean method thing seq able thing list vector method work fine given list vector subtypes seq fundamental principle underlies type system subtyping mostly formalization existing intuition subtyping work dynamicl language without typechecker violation lsp often result runtime exception nameerrors python typeerrors javascript accidentally try perform operation eg call method value support one point ambiguity meant desirable property program point revisit laterstrawman exacttype match coming back unsafeequality problem one immediate solution try enforce callable exact type available left right exactly equal one issue constraint expressible scala language similar language subtyping let u imagine could define function made syntax abstract class final def selftype boolean selftype magical parameter type allows type receiver method would allow method work def x int int println x true false reject def x int string println x compile error compare int string immediately bump issue realize value different type sometimes equal example may write function check whether list vector equal def checkequalsequences existing list int value vector int println existing value defined function checkequalsequences checkequalsequences list vector true list vector two separate type share common supertype seq otherwise unrelated fact every scala type share common supertype fact list vector share seq supertype different string int sharing supertype furthermore bump second issue selftype constraint violates liskov substitution principle see let u consider following definition def validateany x println x validateany true validateany false validateany allowed x type satisfying selftype constraint however earlier saw narrowing type x int string respectively caused compile error def x int string println x compile error compare int string defined int string subtypes thus expect able substitute x x int string without altering desirable property program arguable whether desirable property runtime property compiletime property argued going program compiles program compile would altering desirable property thus selftype constraint violates liskov substitution principle nt end world definitely begs question violate turn several existing part scala language violate lsp way look shortlyexisting violation liskov consider following function def isint x x match case int true case false defined function isint isint boolean true isint omg boolean false isint take argument type pattern match int print something different something else perhaps code write every day even code want write unheard consider following modification def x string x match case int true case false scrutinee incompatible pattern type found int required string case int true compilation failed changed argument type x x string program stopped compiling seemingly violates lsp string subtype expect able substitute without losing desirable property process code stopped compiling however wrote code slightly different way using isinstanceof rather pattern matching compile error go away x x string allowed def x xisinstanceof int true else false defined function boolean true one boolean false def x string xisinstanceof int true else false defined function one boolean false isint semantically identical take may print one two thing depending whether pas int fails compile always print one thing even though semantically identical comparison hopefully clarify compile error complaining pattern matching check known string int invalid rather complaining pattern matching check known string int valid already know answer compile error due presence knowntrivial rather due fundamental type error violates lsp shuffling thing around write code way compiler iscodetrivialornot heuristic figure code code compile run perfectly fine runtime produce valid result albeit one always false string never intsafety beyond liskov substitution fundamental issue liskov substitution principle ensures safety one way possible value type allowed perform desired operation however another definition safety illustrated problem equality pattern matching possible value type result desired operation must trivially known complaint universal equality defined unsafe nt allows u perform equality check invalid rather allows u perform equality check valid trivial return original invalid example def x int string println x one false false false never see two value compared plenty value whencompared always return false false perfectly good return value always returning false likely indicates bug program logic course also plenty possible equality check always return true also likely indicate bug program logic general whenever narrowing type turn okay code snippet error code snippet tell nt anything related traditional definition typesafety traditional typesafety based lsp lsp narrowing type expression valid code always preserve validity code narrowing type code becomes invalid something else amiss insight tell u important thing heuristic law since complaint universal equality triviality rather traditional sense typesafety depends entirely consider trivial example earlier considered code okay def x int int println x okay know return code def x int string println x always return false think probably bug following code def validateuseridouter z int def validateuseridinner x int int println x validateuseridinner z z trivial analysis tell u always return true probably bug well saw code like code review would certain mistake valuable find reject trivial code always produce known result impossible find scenario due halting problem thus trying reject trivial trivial isinstanceofs pattern match etc entirely reliant much analysis compiler upfront better theoretically impossible get complete coverageit universal equality lot possible operation trivial code probably bug earlier saw trivial trivial isinstanceofs patternmatches others example seqcontains def checkinseq x seq xscontains checkinseq seems fine may return true false depending passed next snippet hand def x seq int string xscontains seems invalid know always return false became invalid narrowed type x seq x seq int string like validateuserid function saw earlier many noncontains nonrelated case x option isempty normal isempty always return false like seqcontains noneisempty always return true x int normal always return false always return true x seq int isinstanceof list int typical x vector int isinstanceof list int always return false like seqcontains x match case int true case false typical x string match case int true case false always return false like seqcontains blocked compiler violates lsp x string match case int true case false fact fails compile may sound unreasonable realize upcasting compile x getclass typical return anything x charsequence getclass specific return fewer thing x string getclass ever return classof string like seqcontains sometimes ever return false set case operation wide type expected operation narrow type trivially result single known result probably bug perfect accordance lsp often indicate bug inefficiency program various point time certainly bitten mistake look like case function like validateuseridinner look fine called one place returning trivial result mismatched isinstanceof check always returned false x check type always return false x trivially always two different integer universal equality seems get attention really problem writing code produce trivial result probably bug flagged disallowedwhat make trivial expression far seen many case problematic trivial expression trivially evaluated constant even compile time another name partial evaluator typechecker naftoli gugenheim pointed discussion trying partial evaluate booleans constant nothing typechecking singleton type constantfolding scala already support three thing required identifying problematic trivially constant snippet code question nontrivial ie single primitive literal easy check code question typechecks singleton type already ability code question pure currently ability track compiler thing need add rudimentary purity analysis catch problematic case perhaps annotation pure handle thing like contains noneisempty would give u safety wanted much le invasive change proposal seen pure annotation lie generic type due erasure end decide want trust constant folding one problematic case prohibiting trivial computation sometimes want consider following snippet def thirdofcircle mathpi def timetowaitinmillis may want mathpi constantfold single number performance want write number directly mathpi much informative literal one possible solution require triviallyconstant value wrapped marker method def thirdofcircle const mathpi def timetowaitinmillis const const tell compiler know trivial computation let providing marker function making people use may overall boost readability overall reader immediately identify portion code compute constant rather run constantfolder head try figure snippet code going optimized away constant way get constant folding within const block constant folding outside compiler programmer clear constant folding exists tconclusion traditional definition typesafety based type subtyping lsp deeply ingrained almost staticallytyped language allows u prohibit atcompiletime anyone accidentally trying perform operation expression might support however lsp say nothing another type issue programmer writes code trivially known result likely indicate error oversight essentially something nontrivial compute trivial result probably programmer error universal equality one common case seen issue go far beyond universal equality check thus make sense want similarly general approach mitigate although halting problem mean theoretically impossible find trivial result compile time approach based finding trivial expression handle disparate case without specialcase handling contains fact already machinery necessary compiler singleton type inference need extend slightly let serve doubleduty catching trivial expression reason think proposal multiversal equality implicitbased invariant seqcontains right way go relativelyspecific hack relativelyspecific manifestation problem neither solving core issue based upon strong theoretical foundation add lot additional rule relatively simple core concept subtyping along edge case ergonomic issue complexity using invariant collection typesafe contains method also proposed work throwing away subtyping among collection hierarchy nt address myriad noncollectionrelated case problem exists end goal clear using ability infer singleton type identify trivial snippet code likely programmer error able reuse existing infrastructure around singleton type without needing invasive change language core library adding hint core language type system assist inference nt question long keep mind hint aid inference whole separate subsystem way knowing halting problem prevents general solution liberating know never get perfect need provide level good enough bugfinding improve time balance performance usability ergonomicsabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
16,Lobsters,scala,Scala programming,Require is an Anti-Pattern,https://lewisjkl.com/require-anti-pattern/,require antipattern,better way conclusion,scala require method frequently used better option available get started show example demonstrates require frequently used def transfermoney amount int transferresult require amount amount transfer must greater zero transfer money operation first encountered pattern thought great loved able define front function input look like another nicety rest function could assume required condition true often allowed logic function simpler issue well see several function actually covering entire domain input function really partialfunction caller know cover entire domain caller way knowing restriction exist without looking function directly good chance caller safely call function eg wrapped try thrown exception could actually crash program analyze approach realize like idea locking type like way accomplished better way opensource library called refined support believe ideal way restrict type beyond native definition import eutimepitrefinedapirefined import eutimepitrefinedauto import eutimepitrefinednumeric type positivenonzeroint int refined positive final case class transferresult amounttransferred positivenonzeroint def transfermoney amount positivenonzeroint transferresult transfer money operation transferresult amount transfermoney refined allowed example create new type hold positive nonzero integer mean previously checked require statement built type give u benefit require without drawback enumerated function defined input entire domain caller full visibility restriction imposed conclusion using refined type easy way lock type way transparent caller reach twitter github question comment correction
17,Lobsters,scala,Scala programming,Use := for Assignment (Scala 3),https://github.com/lampepfl/dotty/issues/7598,use assignment scala,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
18,Lobsters,scala,Scala programming,Scala Notes: Case Classes and Case Objects,https://www.jowanza.com/blog/2019/11/17/scala-notes-case-classes-and-case-objects,scala note case class case object,immutable,scala case class functionality class using case keyword compiler generates code enables handy feature go detail feature provide example belowimmutable default case class immutable immutability part zen scala may surprising default case class constructor parameter use val keyword making immutable run ever create case class try mutate one parameter
19,Lobsters,scala,Scala programming,Working with HTTP in Polynote,https://blog.softwaremill.com/working-with-http-in-polynote-d950dcfcd75f,working http polynote,working http polynote recently opensourced spark sttp client downloading okhttp backend circe import import import import uri interpolator traversed optic case class case class polynote sttp client,working http polynotepolynote recently opensourced polyglot notebook support scala spark python sql notebook often used big data machine learning data science time time still need http request fetch json parse explore ithow send http request polynote notebook since dealing scala use sttp client replnotebookfriendly formlet start downloading recent polynote release unpacking either add sttp dependency default notebook copying configtemplateyml configyml adding dependency section dependency scala comsoftwaremillsttpclient comsoftwaremillsttpclient running polynote creating new noteboook adding dependency configuration dependency section folded default using sttp client api okhttp backend provides synchronous backend future io great notebook setting based stable battleproven library moreover parse json using circenow ready start notebooking first need import come sttp macos dictionary yet need three import work comfortably first import sttpclientokhttpquick pull sttp client api implicit instance synchronous backend well quickrequest starting point describing request always read response body stringin application probably want import sttpclient create backend give control allocation resource creating backend connection pool moreover likely use basicrequest starting point default read response body either string string right left depending status code get typesafety unsafe http worldsecond import sttpclientcirce pull sttpcirce integration parse response body jsonfinally import iocircegenericauto automatically derive json codecs case class possible write handwe run first request let try simple oneseems work next let try parsing json visualising result query github api look scala repository sorted star count see safely embed value uri thanks uri interpolator interpolator handle contextsensitive encoding also support optional value collection parameter map etcthe result large json let try parsing several option parse string circe json type represents arbitrary json datatype traversed also using dedicated optic modulehere however parse response data structure interested repository name looking result see item array containing data one project data structure case class githubproject name string case class githubresult totalcount int item list githubproject read response json modify description request contains information response handled use already imported sttpclientcirceasjson come sttpcirce integration json codecs also automatically generated need add anything notebook environment worry much http deserialisation error use asjsonalwaysunsafe throw exception json fetched parsed application probably want use asjson typesafe return either deserialisation error resultnow big data top scala project data science let see popular initial letter scala project guess group response first letter project name count many project group finally visualise result si without much surprise popular initial letter scala project lot starsyou find polynote sttp client website full notebook enjoy
20,Lobsters,scala,Scala programming,"Unit, Functional, Integration? You are doing it wrong",https://blog.7mind.io/constructive-test-taxonomy.html,unit functional integration wrong,unit functional integration wrong summary problem constructive test taxonomy intention axis encapsulation axis isolation axis different kind communication test space axis idea abservations lobster module dependency injection better test dual test tactic mock v dummy upcoming talk functional scala distage conclusion p twitter,unit functional integration wrong summary many engineer pay enough attention test two reason hard make good test easy formalize test good bad created test taxonomy alternative classic unitfunctionalintegration trinity allowing engineer establish useful guideline work test suite problem write test u regularly many u consider test important business logic test establish important contract greatly reduce maintenance cost test equal though wrote start noticing helpful troublesome may say bad test slow unstable fail randomly nonviable survive refactorings demanding require complex precondition met external service running fixture loaded etc etc incomprehensible signal problem help u localize cause though question write better test choose best possible strategy start writing test surprisingly hard answer question think one reason fact miss proper vocabulary improperly use existing one used classifying test using word like unit functional integration also system performance acceptance think something like unit test better functional test integration test worst also know good high coverage usual definition unit test check functionality individual module unit functional test check whether system work according requirement integration test check related program module unit code let assume system following component iloancalculator one implementation loancalculatorimpl iuserrepository two implementation userrepositoryposgresimpl userrepositoryinmemoryimpl iaccountingservice one implementation accountingserviceimpl depends iuserrepository iloancalculator http server exposing rpc api wrote test iaccountingservice wired test loancalculatorimpl userrepositoryposgresimpl integration test seems like involves several component program talk database functional test maybe checking important service system conforms specification unit test maybe check functionality system module thing get interesting case make test abstract add another implementation using userrepositoryinmemoryimpl continue call integration test seems test talk database anymore still involves several component still functional test yes still unit test yes intuitively new implementation many aspect better one likely faster require precondition running database met fewer potential exception something important changed may know call change test taxonomy useless let build better one constructive test taxonomy let assume may assign arbitrary amount tag test several predefined set tag may assign one tag set test case want one test may split may establish full partial order set assign weight element let call set axis try come useful ax intention axis test written intention behind common intention test specification contract behaviour code let call test contractual discover issue code usually write test confirming fix keep test regression test know problem fix due design issue broken external library whatever else may write progression test confirming incorrect behaviour case type test underestimated need check performance code write benchmark first axis called intention possible value contractual regression progression benchmark default guideline may say contractual test important regression regression test important progression one case benchmark lowest importance may introduce weight axis point intention contractual regression progression benchmark encapsulation axis test may test interface knowing anything implementation behind may call blackbox test whitebox test may know implementation check directly sometimes even breaking internal state verify conforms test expectation blackbox test break encapsulation survive many refactorings important property always try write blackbox test avoid whitebox one cost test may use interface also verify sideeffects file created disk hard explicitly express let call effectual test may write always better avoid possible may define encapsulation axis encapsulation blackbox effectual whitebox whitebox test expensive assigned high weight isolation axis test check one software component may single function single class test best issue localization possible may call atomic test check one unsplittable entity test may involve multiple software component interact anything outside program test aggregate group entity may call group test test may communicate outer world database api provider etc etc may call communication test test usually le repeatable slow avoided possible may define isolation axis isolation atomic group communication good communication evil different kind communication may notice least two important communication test subtypes difference test calling facebook api postgresql database control restart database anything facebook test interact something outside developer area control expensive one source pure evil call evil communication test test interact something beyond control may called good communication test test space several ax may build multidimensional space consisting least test class also may use distance zero point simple scalar metric allowing u roughly estimate test better two blue box near zero correspond two test class highest value u contractualblackboxatomic contractualblackboxgroup also may try use following pseudoformula roughly estimate maintenance cost associated test maitenancetime encapsulationweight atomicityweight intentionweight coverage axis taxonomy hard easy build perfect one one propose perfect well may give try useful case unhappy something nothing prevent adding ax altering one presented post every team project need workflow may good idea tailor proper vocabulary specific need proper test taxonomy may make useful guideline help establish good practice reduce maintenance cost try precise forget make guide note idea abservations ax miss zero element would correspond contract expressed design type system allow incorrect state nothing test maintenance cost may nearly zero maybe may hard extend system rigid contract specified type may document test adding abbreviation corresponding test type example cbg may stand contractualblackboxgroup test reader lobster proposed couple interesting alteration taxonomy may add mutability axis may change isolation axis precise isolation expression method class file package library application host intranet internet sound interesting try give shot module dependency injection better test dual test tactic simple powerful tactic help u lot design code test able test interface create dummy mock implementation every single integration point entity communicates outer world abstract test create least two implementation one wired production implementation another one dummy one skip production test run service available etc try isolate integration point business logic avoid combinatoric explosion amount possible configuration approach help enforce encapsulation allows code business logic blazing fast test postopone integration work previously manually even case worth automated mock v dummy many engineer love create mock using automatic mocking framework like mockito usually people say mock mean automatic mock experience general bad idea use automated mock usually work runtime slow truly important break encapsulation rarely survive refactorings prefer create mock manually using inmemory data structure simple concurrency primitive call dummy avoid ambiguity strongly prefer dummy automatic mock cost bit code save lot maintenance effort upcoming talk good module system andor dependency injection framework may useful wish make test fast reliable going make talk functional scala regarding bleedingedge approach testing distage dependency injection framework fp scala may help cut development cost conclusion sometimes may hard design properly may use outdated imprecise vocabulary always good idea set mind free think constrained artifical legacy boundary traditional testing approach taxonomy perfect may good idea scrap think end may notice code quality team productivity increased design become resilent update p would happy know thought idea subject may contact twitter
21,Lobsters,scala,Scala programming,Laziness and Streams - Part 2,https://jjmalina.github.io/posts/laziness-and-streams-pt-2/,laziness stream part,laziness stream part jeremy fairbank function stream javascript purely generating stream http itrue conclusion found way write tail recursive decorator,following laziness stream part inspired jeremy fairbank function stream javascript wanted try implement lazy stream python problem python nonstrict argument like scala operator python lambda keyword use define function single line expression lambda keyword need take argument used nonstrictness operator hack add lot extra syntax allows u simulate nonstrictness build lazy stream implementation scala code basic stream construction map filter class stream object staticmethod def create args args return stream return stream lambda args lambda streamcreate args def init self headnone tailnone selfhead head selftail tail property def empty self return selfhead none def str self value selfhead selfempty else return stream value selftail selftail else def foldright self acc f selfempty return acc return f selfhead lambda selftail foldright acc f def map self f return selffoldright stream lambda b stream lambda f b def filter self f return selffoldright stream lambda b stream lambda b f else b lazy mapping filtering scala streamcreate lambda lambda lambda map lambda filter lambda print get stream stream stream wanted create stream another iterable could write createfromiterator method lazily iterates data create stream staticmethod def createfromiterator iterable iterator iter iterable try value iteratornext except stopiteration return stream return stream lambda value lambda streamcreatefromiterator iterator streamcreatefromiterator range map lambda filter lambda print result stream stream stream however calling next iterator pure since change state iterator side effect make evaluating stream return different result call print result stream stream using iterators create stream ideal forced mutate state lead inconsistent result need different way create stream purely generating stream generate sequence could write function like def rangestream start end def loop current current end return stream return stream lambda current lambda loop current return loop start running print rangestream print stream stream stream stream let say wanted never ending stream fibonacci number write another recursive function def fibonacci def loop n return stream lambda lambda loop n n return loop call fibonacci give u stream never terminates actually use value right implement take function stream take n fibonacci number new stream evaluate def take self n n return stream return stream lambda selfhead lambda selftail take n running print fibonacci take give stream stream stream stream stream stream pattern generating stream always need recursive function function called unfold allows u simplify generating stream def unfold self state f take state function f passed state return either none value state pair result f state result return stream value nextstate result return stream lambda value lambda selfunfold nextstate f implement fibonacci using unfold def fibonacci return stream unfold lambda state state state state state also refactor take using unfold def takeunfold self n def unfolder state remaining stream state remaining return return streamhead remaining streamtail return selfunfold n self unfolder wanted implement python range function could using unfold def streamrange start endnone end none end start start def createrangestream end return return return stream unfold start createrangestream make stream data type play nice rest python may want use loop comprehension implement iter next type wrap stream want able use stream loop implementing iter next def iter self stream type return streamiterator self class streamiterator object def init self stream selfstream stream def next self selfstreamempty raise stopiteration value selfstreamhead selfstream selfstreamtail return value implement container class stream iterator stream immutable data structure iterator need mutated keep track value return next handy iterate stream loop comprehension streamrange print streamrange python fiddle code http itrue conclusion using property nonstrictness faked python using lambda able write purely functional stream data structure lazily constructed evaluated saw used stateful iterator createfromiterator broke referential transparency stream data type returned inconsistent result instead wrote pure helper function called unfold aid constructing stream like fibonacci number big caveat python ignored far try evaluate large stream python exceed max call stack size get error since python tail cail optimization reinterpret recursive code loop way scala unfortunately make python bad fit implementing purely functional data structure look like someone found way write tail recursive decorator might explore another follow post
22,Lobsters,scala,Scala programming,"sttp — an open-source library with simple, type-safe API for defining HTTP requests",https://blog.softwaremill.com/sttp-an-open-source-library-with-simple-type-safe-api-for-defining-http-requests-5655ad976762,sttp opensource library simple typesafe api defining http request,sttp opensource library simple typesafe api defining http request scala http client always wanted adam warski could briefly describe sttp library problem library trying solve akka monix catseffect zio team come idea sttp decide engage developing opensource project anything specific learned working project future plan project development overview proposed change would advice people willing start adventure os,sttp opensource library simple typesafe api defining http requeststhe scala http client always wanted sttp opensource library provides simple typesafe api defining http request asked adam warski background project scala ecosystem need could briefly describe sttp library problem library trying solve sttp client provides programmerfriendly api describing sending http request task common everyday programming api aim simple readable time functional reasonably typesafesttp client wrap number http client library thus integrating easily variety application stack thus use api use akka monix catseffect zio want couple synchronous exploratory team come idea sttp couple great implementation http stack scala java akkahttp asynchttpclient okhttp however scala interface either lowlevel complicated usually simple task sending http request think better lowlevel implementation great programmerfacing api needed improvement hence sttp client project provides better api wrapping existing tested http decide engage developing opensource project often case simply needed kind api quite often project find anything would meet need wrote typical scratch itch anything specific learned working project sure quite lot technical challenge always arise try unify couple implementation single api additional challenge maintaining project build target different scala version scalajs scala native finally interacting user community also demanding sometimes need balance need single user group user overall usability longterm future plan project development time writing finishing work version library brings couple significant breaking change important improved way specifying error handled response websocket overview proposed changesthere also change unified model shared tapir library available would advice people willing start adventure os write something need might wrapper api favorite language tooling library better interface database etc course opensource done yet important step let world know write couple blog post explaining approach better kind problem solves try promoting reddit twitter even great library need marketing get initial spark interest
23,Lobsters,scala,Scala programming,Kleisli Category — From theory to Cats,https://blog.softwaremill.com/kleisli-category-from-theory-to-cats-fbd140bf396e,kleisli category theory cat,kleisli category theory cat franck mahon kleisli category journey wikipediaorg category theory kleisli category category monad lecture series repository solution solution solution solution associativity identity ring bell category kleisli arrow cat usefull,kleisli category theory catsfranck mahon flickrcom cc category journeyfrom wikipediaorgin category theory kleisli category category naturally associated monad tso far good let break piece example way go back sentence end post understand exactly meanslet suppose want handle log method execution handle one single list log way log example leading u category borrowed great video lecture series bartosz milewski code sample available github repositorysolution simplest solution would store log global variable know shrugged worry demonstration purposeswith logacc log accumulator execute function keep log nicely organized know terrible know reading want see functional way solving thing solution second approach pas log one function execution next parameter better function pure least know signature negating function something else pas second element resulting tuple next function concatenated log end course bad function us logic handle log inside break single responsibility principle function difficult memoize switch red light thinking pure function let try something else solution decide return tuple like second example take boolean parameter defer log concatenation point call function pure function log context pas around handle end good except way handle resulting log need keep result execution concatenate log etc get difficult word need better way composing functionssolution function composition take two composable function create single function interested category theory probably already seen example composing function b function b c result function c composition fundamental functional programming three type b c create compose function like function take two function argument return another function type cwith tuple example log context create composing function function take two function taking boolean returning boolean string convert single function take boolean return boolean string example generalized boolean generic type please note string concatenation operation happening within composition composet function know looking function simple function composition associative knowledge string know composet associative string concatenation associativeif associativity let check create identity create identity function need function nothing log word need function take boolean return boolean value empty string tuple easy associativity identity ring bell point know associativity identity word category category object scala type arrow b string instead simple b arrow fact arrow simple transformation b make called kleisli arrow kleisli arrow work many different type tuple type b string defined type impose condition possible word monadic type cat definition kleisli come kleisli enables composition function return monadic value instance option int either string list double without function take option either parameter strange unwieldyso usefull kleisli composing let say function want compose simplest approach would call one one pas result one like could inline call like scala function like compose andthen problem example need match input one function output another make work output wrapper around type eg future cat io get trouble quicklylet wrap value something useful see would typically handle clear pas return value generate process etc know io monad easily flatmap cleaner approach comprehension kleisli something similar many case clear readable way let start verbose version wrap function kleisli type use andthen mechanism used function matching input output side note cat library actually override scala andthen scalaz us andthenk purpose far good better operator cat working kleisli use get much cleaner code addition using andthen approach need wrap kleisli function want use first one enough eg hope throughout tutorial could see kleisli category category naturally associated monad went simple example tuple get category kleisli arrow cat library definition usageenjoy
24,Lobsters,scala,Scala programming,"Scala application lifecycle, from pure Scala to FS2",https://blog.softwaremill.com/scala-application-lifecycle-from-pure-scala-to-fs2-5f2861005603,scala application lifecycle pure scala,scala application lifecycle pure scala previous blog post lifecycle short story resource handling plain scala sample scala di grafter blogpost start stop cat effect world ioapp akka stream monix bracket cat bracket conclusion github repository repository,scala application lifecycle pure scala previous blog post described scala application structure going focus whole lifecycle including initialization shutdownlifecycleduring application startup usually multiple typical operation performed first needed load configuration usually resource file database client created together connection pool http server must started provide apis service application may stream processing eg incoming kafka message also would need started apart thing like monitoring http client connection pool initialization service however one common thing among mentioned operation point usually would shutdown closed file connection socket etc gracefully closed freeing system resourcestake look blogpost short story resource handling describing different approach resource management various technology find detailed description eg cat resource bracketplain scalain vanila scala put initialization main application resource closing however difficult usual way use shutdown hooksample scala di graftermy blogpost describes grafter di one thing want notice includes start stop trait allowing define appropriate logic module level grafter manage lifecycle execute method appropriate point time approach similar one may know spring java ee however would rather propose avoid due quite specific design decisionscats effect worldcats effect allows encapsulate sideeffects io type io string mean run io result string type however without explicit running nothing happen everything lazy think bit lazy future however catseffect includes lot useful featuresresource bracket class allow safe usage resource requiring acquisition release usage wrap use wrapped object automatically closed way consume value without releasing resource info also herecatseffect library provides additional class called ioapp allowing return io application way may wrap side effect however important fact easily combine resource bracket applicationthis also mean application may become composition big comprehension iosthe drawback flatmap resource need use theuse method every leveraged stream need compiled drained get io concern thing like http server kafka consumer long running one scala stream processing solution usually compared akka stream monix integrates easily catseffecthowever another way define operation operation stream provides method allowing evaluate io stream processing streameval also allows convert cat resource bracket using streamresource bracket similar cat bracket define special stream whose element includes acquiring releasing logic consuming element automatically releaseddef bracket f r acquire f r release r f unit stream f r mean cat easily integratedthis way may single forcomprehension end need single compiledrain stream evaluation get io sure approach guarantee resource safe going released application shutdownconclusionremember every opened resource eventually closed fp may help steep learning curvethe presented application structure organization way go may become choice project included gist piece bigger example presented github repository please note provided code example simplification allowing present concept full solution aim present compiling structure running application could greatly improved going productiontake look repository presenting broader example shown concept
25,Lobsters,scala,Scala programming,How to structure your Scala application?,https://blog.softwaremill.com/how-to-structure-your-scala-application-658168fbb827,structure scala application,structure scala application structure object creation style article cakepattern package organization feature chimney test maintaining order archunit keep domain clean event sourcing conclusion next blogpost repository,structure scala application scala powerful language given lot feature allowing realize application various waysin java world history using framework platform define force lot behavior example java ee spring define configure application object lifecycle many thingsin scala tend see smaller library quite flexible many thing like application structure lifecycle fully depend remember great power come great responsibilitythis blogpost focus application organization structure second part focus application flowstructureduring work application decide code related thingsobject creation stylefirst topic decide create object manually using new using dependency injection di library java used using di everywhere every project scala different topic di scala already broadly covered adam warski one articleslet say using pure scala new keyword compose module application let say building application sumo wrestler would need feature related eg diet training plan schedule would create separate package containing separate module question compose main application module traitsthe first option treat application module trait main need extend module application one module need object another one need add field trait whose value overriddenif added selftypes following example already cakepatternmodules classesanother way model module class main includes module field dependency module passed via module constructorswe used approach various project far prefer second one make test cleaner especially around providing module dependenciespackage organizationsecondly would package organization layer feature personally prefer organization feature writing code everything related feature located parent package need jump whole service needed together inside feature package need may course layer package happens layer example comsoftwaremillsumodiet module parent package feature related diet package would contain module definition eg dietmodule inside module would see creation various object packageclass dietmodule database database implicit executioncontext executioncontext lazy val dietrepository new dietrepository database lazy val dietservice new dietservice dietrepository lazy val dietcontroller new dietcontroller dietservice comsoftwaremillsumodietdomain definition domain class depending case multiple file insidecomsoftwaremillsumodietrestor apirest apis controller route class eg protocol role provide rest api definition request response format together converter domain class jsonlibrary dependent schema definition controller may contain logic related api representation appropriate conversionswhen separate api domain database model copying data representation quite tiresome take look chimney library make easier youcomsoftwaremillsumodietpersistence logic related database dao repository case return domain typescomsoftwaremillsumodietapplication application logic service process program logic would called api level level operate domain class may integrate execution repository persistence external service eg http client also feature packagesdepending need may layer eg may using external service client library wrapped another layer operate domain application logictestsbasic unit test located srctest corresponding package test class named basic spec suffix worth keep unit test fast nonpublic logic would worth put test put package private eg private application accessed corresponding spec heavier test like one depending database worth put separate directory eg srcit run independentlymaintaining orderthe important question keep order project initially may solidly designed time mess may appear avoid cycle package enforce check allowing use feature internal class another feature come archunit dsl allowing define check testsandrzej ludwikowski blogpost keep domain clean event sourcing provided example archunit check validate dependency domain packagesconclusionscala usage may give power careful introduce mess project afraid using good old new keyword instantiating dependency di framework may really needed applicationin next blogpost focus application lifecycle including initialization resource managementtake look repository presenting broader example shown concept
26,Lobsters,scala,Scala programming,ZIO 1.0 Released,https://ziverge.com/blog/zio-1.0/,zio released,zio released opened issue aff birth zio contentious concurrency argued effect concurrency inherently unsafe presented first version typed error evolution introducing staticallytyped error standalone library contributor growth improved typeinference battery included zio stream scale bay zio environment software transactional memory execution trace summer zio test zlayer structured concurrency zio beyond release note online zio personal thanks septimal mind softwaremill scalac panopticontui signify technology,year development contributor many production deployment zio readyzio released june opened issue scalaz repository github argued scalaz needed powerful fast data type async programming encouraged contribute scalaz friend vincent marquez volunteered build one first foray async concurrent programming previously designed built first version aff assisted talented nathan faubion second iteration library quickly became number one solution async concurrent programming purescript ecosystem back written future data type scala abandoned scala standard library incorporated much better version wrote promise data type haxe raincheck data type java every case made mistake subsequently learned make new mistake sunny afternoon june imagined spending month developing new data type point would wrap tidy bow hand scalaz organization happened next never could imagined birth zio spent free time working core new project increasingly felt like goal work create pure functional effect wrapper sideeffects done performance could improved scalaz library built pure functional programming generally compete baremetal abstractionfree handoptimized procedural code developer like believe one true way functional programming effectwrapper enough going win new convert slap certified pure label imperative code although solving async problem still useful preloom world lot data type already solved problem scala future instead thought needed focus library concrete pain wellsolved functional programming one pain stood among others concurrency including unsolved problem scala future safely cancel executing code whose result longer necessary due timeout failure concurrency big enough space play whole library ecosystem formed tame wily way indeed framework become popular precisely shield developer concurrency complex confusing errorprone given challenge thought bake concurrency new data type give feature would impossible replicate procedural program without special language feature vision powerful concurrent library drove early development contentious concurrency time began working scalaz project prevailing dogma functional scala ecosystem effect type little support concurrency baked indeed argued effect concurrency inherently unsafe must left streaming library like nonetheless seen amazing work coming haskell f believed possible important modern effect type solve four closely related concurrency concern starting new independent thread computation asynchronously waiting thread finish computing return value automatically canceling running thread return value longer needed ensuring cancellation leak resource course time developed small prototype socalled scalaz io monad solved problem fast purely functional package effect could forked yield fiber cooperativelyyielding virtual thread could awaited instantly interrupted haskellinspired version tryfinally called bracket provided resource safety excited design talked publicly released code resulting backlash competitor nt believe benchmark could possibly correct november presented first version scale bay opening pull request full source code including rigorously designed benchmark allayed concern despite initial skepticism criticism time effect system scala adopted concept launching effect yield fiber could safely automatically interrupted primitive ensure resource safety early prototype yet zio know today seed zio planted grew quickly typed error evolution initial design scalaz io data type inspired haskell scalaz task due time however found reevaluating decision made data type particular unhappy fact effect type dynamically typed error pragmatically speaking compiler ca nt help reason error behavior pretend every computation always fail infinite way staticallytyped functional programmer want use compiler help write better code able better job know nt handled error use typed data model business error course haskell answer adding staticallytyped error use monad transformer maybe type class unfortunately solution increase barrier entry reduces performance bolt second often confusing error channel since starting clean slate different programming language different idea instead rigidly fixing error type throwable like scala try data type let user pick type like either initial result experiment remarkable looking type signature could understand exactly code dealing error dealing combinators precisely reflected error handling behavior type signature law traditionally checked using library like scalacheck checked statically compile time january committed ended radical departure status quo introducing staticallytyped error scalaz effect type month followed worked polish optimization bug fix unit test documentation found growing demand use data type production became apparent scalaz longerterm project ambitious developer pulled io data type standalone library could begin using project excited early traction nt want obstacle using data type user scalaz cat june decided pull project new standalone project zero dependency completely separate scalaz chose name zio combining z scalaz io io monad contributor growth around time first significant wave contributor started joining project including regis kuckaertz wiem zine elabidine pierre ricadat among others new open source functional scala although deep background mentorship contributor including case weekly meeting pull request review whole new generation open source scala contributor talented functional scala developer whose warmth positivity cando spirit started shape community zio started accreting feature make easier build concurrent application asynchronous doublybackpressured queue better error tracking handling rigorous finalization lowerlevel resourcesafety bracket although increased contribution led increasingly capable effect type personally found using zio pleasant library poor type inference improved typeinference many functional scala developer time absorbed prevailing wisdom functional programming done scala meant avoiding subtyping declarationsite variance indeed presence subtyping language negatively impact type inference using declarationsite variance couple drawback however decision using zio required specifying type parameter many method resulting unforgiving joyless style programming particularly typed error private wrote small prototype showing using declarationsite variance could significantly improve type inference made want implement feature zio time however zio still resided scalaz organization separate repository aware departure status quo would controversial private fork wiem zine elabidine worked together massive refactoring first major collaboration friday july opened pull request added covariance result spoke nearly explicit type annotation deleted although expected controversy difficult argue result change zio started becoming pleasant use extra error type parameter longer negatively impacted usability experience emboldened start breaking taboo started aggressively renaming method class removing jargon known pure functional programmer step created yet controversy also differentiated zio design choice including expressed scalaz turbulent evolution new take functional scala entered zio community contrarian principled take emphasizes practical concern solving real problem accessible joyful way using part scala including subtyping declarationsite variance finally project began feel like zio today shaped rapidly growing community fresh face eager build new future functional programming scala battery included toward latter half zio got compositional scheduling powerful new data type represents schedule equipped rich compositional operator using single data type zio could either retry effect repeat according near arbitrary schedule artem pyanykh implemented blazing fast lowlevel ringbuffer help pierre ricadat became foundation zio asynchronous queue demonstrating ability zio ecosystem create de novo highperformance jvm structure itamar ravid highly talented scala developer joined zio project added managed data type encapsulating resource inspired haskell managed provided compositional resource safety package supported parallelism safe interruption help maxim schuwalow managed grown become extremely powerful data type thanks effort raas ahsan zio unexpectedly got early version would later become fiberref fiberbased version threadlocal kai wizardlevel scala developer type astronaut labored add compatibility cat effect library zio user could benefit hard work put library like doobie thanks work numerous contributor spread year zio became powerful solution building concurrent one without concurrent stream zio stream although akka stream provides powerful streaming solution scala developer coupled akka ecosystem scala future functional scala space provides streaming solution work zio based cat effect whose type class ca nt benefit ziospecific feature knew ziospecific streaming solution would expressive type safe lower barrier entry existing zio user given importance streaming modern application decided zio needed streaming solution one unconstrained feature set cat effect bringing new competitive streaming library existence would lot work itamar ravid volunteered help instantly said yes together third quarter itamar worked secret zio stream asynchronous backpressured resourcesafe compositional stream inspired work remarkable scala developer eric torreborre well work haskell iteratees initial release zio stream delivered highperformance composable concurrent stream sink strong guarantee resource safety even presence arbitrary interruption unveiled design scale bay since thanks itamar army capable contributor including regis kuckaertz zio stream become one highlight zio bit capable streaming library much smoother integration zio effect type capability toward end decided focus complexity testing code written using effect system led last major revision zio effect type zio environment exploring contravariant reader data type model dependency discovered using intersection type emulated keyword scala one could achieve flawless type inference composing effect different dependency provided possible solution simplifying testing zio application excitedly wrote simple toy prototype shared wiem zine elabidine want help work asked said yes together quietly added third final type parameter zio effect type environment type parameter unveiled third type parameter nowinfamous talk death finally tagless humorously presented cartoonish halloween theme talk argued testability primary benefit taglessfinal could obtained much simply teachable way passing interface solution objectoriented programmer used decade taglessfinal assumption discipline zio environment provided way reason dependency statically way code interface without pain usesite unlike taglessfinal fully inferred nt require teaching type class category theory higherkinded type implicits zio user immediately started using zio environment appreciating ability describe dependency using type without actually passing thus allowing dependency inference constructing zio environment however proved generically difficult even structure environment fully known workable solution pain would identified almost year later meanwhile zio continued benefit numerous contribution added combinators improved documentation improved interop improved semantics core data type next major addition zio software transactional memory software transactional memory first prototype scalaz io data type included mvar doublybackpressured queue maximum capacity inspired haskell data type name really liked fact mvar already proven could used build many concurrent data structure queue semaphore soon early prototype however talented eloquent fabio labella convinced two simpler primitive provided orthogonal basis building concurrency structure promise variable data type set exactly one time awaited asynchronously retrieved number time ref model mutable cell store immutable value atomic operation updating cell early refactoring allowed u delete mvar provided much simpler foundation however year using structure appreciated orthogonality power became apparent assembly language concurrent data structure structure could used build lot asynchronous concurrent data structure semaphore queue lock extremely tricky required hundred line fairly advanced code complexity stem requirement operation data structure must safely interruptible without leaking resource deadlocking moreover although build concurrent structure promise ref enough work make coordinated change across two concurrent structure transactional guarantee structure built promise ref noncompositional apply isolated data structure built ref noncompositional transactional semantics strictly speaking transactional power equivalent actor mutable state actor safely mutate state transactional change made across multiple actor familiar haskell software transactional memory provides elegant compositional solution problem developing concurrent structure decided implement version zio help partnerincrime wiem zine elabidine presented scalar conf april dejan mijic another fantastic highly motivated developer keen interest highperformance concurrency distributed system joined zio stm team mentorship dejan helped make stm stacksafe transaction size added several new stm data structure dramatically improved performance existing structure implemented retrystorm protection supporting large transaction hotly contested transactional reference zio stm stm scala feature although much older scala stm surely productionworthy nt integrate well asynchronous purely functional effect system built using fiberbased concurrency next major feature zio would address severe deficiency never solved scala ecosystem extreme difficulty debugging async code problem present scala future decade execution trace previously presenting zio new nonpure functional programmer primary audience zio received question debug zio code difficulty stem worthless nature stack trace highly asynchronous programming stack trace capture call stack future zio heavily async environment call stack mainly show gut execution environment useful tracking error thought problem become convinced would possible implement async execution trace using information reconstructed call stack began telling people would implement something like zio soon anticipate soon would kai came idea execution tracing radically different way imagined dynamically parsing executing bytecode class file although recollection bit hazy seemed mere day kai whipped prototype seemed extremely promising offered assistance hammering detail full implementation ended wonderful joint talk ireland launch feature sometimes tendency focus law abstraction seeing phenomenally positive response execution tracing good reminder stay focused real world pain developer summer beginning summer zio began seeing first significant commercial adoption led many feature request bug report much feedback user summer saw many performance improvement bug fix naming improvement tweak library thanks regis kuckaertz countless contributor thanks work everpatient honza strnad others fiberref evolved presentday form much powerful fiberaware version one undergo specified transformation fork merges join pleased addition however zio grew automated test zio growing became increasing source pain across scalajs jvm dotty test runner time natively support dotty summer began work purely functional testing framework goal addressing pain result zio test zio test testing functional effect inside traditional testing library painful easy way run effect provide dependency integrate host facility functional effect system using retries repeat forth wanted change small compositional library called zio test whose design thinking since even zio existed like groundbreaking zio test embraced philosophy test value although zio test retained traditional treelike structure spec allows nesting test inside test suite suite inside suite early development zio test incredible extremely helpful adam fraser joined project core contributor instrumental fleshing realizing greatly extending vision zio test adam since become lead architect maintainer project piggybacking atop zio powerful effect type zio test implemented comparatively line code concern like retrying repeating composition parallel execution forth already implemented principled performant typesafe way indeed zio test also got featherweight alternative scalacheck based zio stream since generator value viewed stream unlike scalacheck zio test generator autoshrinking baked inspired haskell hedgehog library correctly handle filter shrunk value edge case scenario scalacheck handle toward end nearly year real world usage zio community hard work solution problem making dynamic construction zio environment easier work directly led creation zlayer last major data type added zio zlayer two talented scala developer maxim schuwalow piotr gołębiewski jointly worked zio macro project among utility provided easier way construct larger zio environment smaller piece excellent work independently replicated highlyacclaimed polynote jeremy smith response pain functional scala several speaker presented pain constructing zio environment convinced take hard look problem taking inspiration earlier attempt piotr created two new data type zlayer thought typeindexed heterogeneous map type safe requires access compiletime type tag information zlayer thought powerful constructor build multiple service term dependency unlike constructor zlayer dependency graph ordinary value built value using composable operator zlayer support resource asynchronous creation finalization retrying feature possible constructor zlayer provided clean solution problem developer zio perfect mind nt think solution prior scala perfect every solution design space different tradeoff good solution became even better excellent consultancy septimal mind donated izumi reflect zio organization introduction zlayer last major change core data type zio since although stream seen churn rest zio stable yet despite stability recently still one major unresolved issue heart zio runtime system full solution problem structured concurrency structured concurrency structured concurrency paradigm provides strong guarantee around lifespan operation performed concurrently guarantee make easier build application stable predictable resource utilization since long fan haskell structured concurrency via async related zio first effect system support structured concurrency numerous operation default interrupting fiber return fiber interrupted finalizers executed default timing effect return effect timed interrupted finalizers executed default executing effect parallel one fails parallel operation continue sibling effect interrupted etc design decision contentious implemented effect system recently however one notable area zio provide structured concurrency default whenever effect forked launched concurrently execute new fiber lifespan executing effect unconstrained solving problem turned require multiple major surgery zio internal runtime system part zio developer understand completely tends bottleneck end solved problem satisfactory way required learning real world feedback prototyping le completely different solution problem today zio effect system scala full structured concurrency default zio beyond yesterday august zio released live online zoomhosted launch party brought together paid tribute contributor user across zio ecosystem laughed chatted monologued bit toasted time user contributor past future zio today zio artifact available sonatype part zio ecosystem working rapidly release new version downstream library expect full binary backward compatibility line two exception zio stream lock zio stream api zio higher allowing u time prove newer improvement library zio test similarly zio stream want wait zio least locking zio test major breaking change planned need solve problem shared layer across totally different spec well reporting could solving problem need make breaking change guarantee backward compatibility help zio ecosystem flourish encourage corporate adoption release note online zio effect system nt right everyone zio may right choice team think compelling reason scala developer take serious look zio wonderful community amazed talent positivity apprenticeship seen zio community well universal attitude page code code code collaboratively work together way improving code history innovation zio first effect type pure automatic interruption default first effect type execution context locking correctly handled autoshifting async boundary exception first effect type typed error effect type environment first effect type execution tracing current effect type finegrained interruption current effect type full structured concurrency much although inspired haskell zio charted course become many believe leading effect system scala bright future zio took three year get right believed foundation extremely robust support coming early library like caliban zio redis zio config zio grpc others indication coming going amazing zio user attract new user functional programming scala programming language addition living advanced effect system past year core contributor exciting idea next future effect system several mindblowing whether end zio something else question concurrent programming scala never much fun correctbyconstruction productive personal thanks zio would possible without work contributor personally reviewed thanked many contributor want thank every one work creativity inspiration addition like personally thank core contributor rolled sleeve contributed directly mentored developer given talk inspired contributed incredible variety creative suggestion innovative feature bug fix automated test documentation improvement particular want thank wiem zine elabidine first person believe project enormous role codeveloping zio would become friend ongoing source inspiration good time bad adam fraser literally right hand man top contributor zio congratulation continuously innovating way never cease amaze one helpful impactful voice zio community itamar ravid depth breadth experience come seniority able tackle problem whatsoever part code base machine incidentally first person choose go war hit gym whatever pleasure cocontributor colleague pierre ricadat one light shine brightly across scala contribution zio creation amazing caliban library show everyone powerful joyful functional scala mentoring new generation functional scala developer producing community wonderful newsletter dejan mijić wonderful friend coconspirator neverending stream improvement many take place concurrently taking even craziest performance challenge glee leaving fun memory regis kuckaertz one brave people join journey early day working trickiest code zio runtime system writing entertaining documentation seen os project kai one kind force nature go others fear tread usually innovating multiple front simultaneously one never enough telling thing may like hear definitely hear artem pyanykh blowing away attention detail finest systemlevel code seen scala ecosystem salar rahmanian tim steinbach always pushing build release process incredible machine become saving many occasion thing broken nt understand going lech głowiak diving functional scala open source development helping wherever needed despite impossibly busy life work schedule maxim schuwalow piotr gołębiewski ongoing independent innovation significantly shaped always pushing find better way solving problem zio address igal tabachnik building amazing intellij plugin seen scala ecosystem providing level comfort maturity java user receive francois armand constant voice user giving gentle feedback way make project deal real pain user yes francois autoblocking officially todo list flavio brasil inspirational body work intersection performance functional programming although flavio yet able contribute zio directly encouragement work super fast collection led chunk boxfree zio data type backed array super fast element appendprepend great cache locality small constant factor operation want thank early adopter zio fearlessly rolled zio production since release willing pay tax tirelessly updating code base sometimes new release candidate zio adopter encountered problem reported bug proposed new feature helped shape zio library become want thank septimal mind donated izumi reflect contributed execution tracing softwaremill financial support circleci build outstanding community supporter scalac ongoing work teaching zio sponsorship zio hackathon warsaw contribution multiple zio open source project including amazing panopticontui signify technology helped bring many zio job scala developer whose participation scala community greatly enriched finally want acknowledge haskell ecosystem particular simon marlow pushed boundary possible functional concurrency asynchronicity michael snoyman invented rio share common design purpose zio michael pilquist came brilliant trick making asynchronous waiting concurrent structure safely interruptible used zio original version semaphore though necessary stm provides property free alex nedelcu whose work monix blew past scalaz task long zio whose work inspired wonderful peekahead optimization zio runtime fabio labella persuaded abandon mvar favor orthogonal primitive list could never complete omitted significant credit contribution human amazing journey one scarcely believe concluded incredibly grateful experience opportunity finally release zio start new journey place unknown john de go
27,Lobsters,scala,Scala programming,Cross-Platform Language Design - Sébastien Doeraene - Ph.D. thesis,http://lampwww.epfl.ch/~doeraene/thesis/,crossplatform language design sébastien doeraene phd thesis,crossplatform language design full text scalajs abstract,crossplatform language design doeraene phd thesis full text thesis behind scalajs dialect scala compiles javascript abstract programming language increasingly compiled multiple runtimes featuring rich structure object model furthermore need interact language targeting said runtimes language targeting one runtime designed tailor semantics runtime easy interoperability language however language targeting multiple runtimes differing semantics difficult cater retaining common behavior across runtimes call crossplatform language language aim portable across platform interoperable target platform portability ability program library crosscompile multiple platform behave way interoperability ability communicate language platform many crosscompiling language focus one two adding support one language designed ground support rare thesis present design scalajs dialect scala targeting javascript platform turned scala crossplatform language one hand scala program crosscompiled jvm javascript portable semantics hand whereas scalajvm interoperates java scalajs interoperates javascript allowing use javascript library along dissertation give insight transferred design crossplatform language although bias towards targeting jvm javascript first obvious challenge reconcile static nature scala object model javascript dynamic one besides ability mutate class hierarchy runtime javascript fundamental difference two model particular difference compiletime overloading runtime overloading discus semantic mismatch live harmony within language second challenge obtain good performance language interoperability dynamic unknown part program pervasive end design specify intermediate representation ir firstclass support dynamically typed interoperability feature addition statically typed jvmstyle operation despite tight integration open world javascript ir considered closed world advanced wholeprogram optimization performed performance overall system evaluated shown competitive handwritten javascript even scalajvm case keywords interoperability portability language design crossplatform performance scala javascript
29,Lobsters,scala,Scala programming,Configuration as Code with Ciris,https://lewisjkl.com/config-as-code/,configuration code ciris,configuration code ciris ciris feature secret refined support custom decoder conclusion,traditionally working configuration mean define set value without typesafety look application runtime could go wrong turn lot thing may realize put configuration wrong path may load configuration incorrect type may compile multiple subprojects together configuration overwritten unexpected way frustrating experience configuration code come configuration code give compiletime safety still giving option overriding configuration value runtime best world favorite configuration code library called ciris show basic work ciris configuration code ciris personally treat configuration code place define structure configuration along default value override default value runtime using environment variable approach could take reading configuration file instead environment variable best fit use case small example using ciris import catsimplicits import ciris object config final case class appconfig host string port int val appconfig configvalue appconfig env host string default env port int default parmapn appconfig setup give value appconfig reference code access host port application bind appconfig kept default value host port provided environment variable runtime override default may notice setup still allows runtime failure example environment variable port expected integer provide type want account scenario resolve configuration inside main method way runtime failure happen right application boot later runtime object main extends ioapp val myapp io unit cfg configappconfigload io iopure new myprogram cfg yield def run args list string io exitcode myappas exitcodesuccess runtime configuration failure going happen program happen right call configappconfigload io use traditional configuration approach typesafe config could still config resolution time application boot isolate runtime error application startup however going require lot manual work ciris take care dsl provides constructing configvalue approach would still leave uncertainty around way configuration separate subprojects merged together good news seen basically everything need order work ciris simple library method need know said feature want mention ciris feature secret ciris allows load configuration wrapped secret class contain sensitive value want end application log env databasepassword databasepassword secret give secret databasepassword refined support ciris provides module parsing configuration directly refined type env databaseusername nonemptystring default username custom decoder ciris allows decode custom type implementing configdecoder custom type take example type defined need run validation constructor argument final case class slackchannel private value string object slackchannel def create value string option slackchannel valuestartswith valuesome else none private implicit val slackchanneldecoder configdecoder string slackchannel configdecoder identity string mapoption slackchannel slackchannelcreate conclusion hopefully article shown useful configuration code found huge improvement traditional configuration resolution method appreciate ability give define configuration structure typechecked scala code ciris favorite library used configuration code provides super simple dsl resolving configuration providing default value also completely extensible add whatever functionality want
30,Lobsters,scala,Scala programming,Lazy sequences in the Scala standard library,https://www.toromtomtom.com/blog/2020/05/16/laziness-in-scala.html,lazy sequence scala standard library,discussion github stream lazylist conclusion pull request,one way learn idiom idiosyncrasy programming language follow development standard library scala standard libary example deprecated data structure lazy sequence stream replaced new data structure called lazylist release however lazylist different laziness characteristic stream recently sparked discussion github found discussion quite interesting try illustrate difference data structure post stream simplified version definition stream class stream hd tl stream val head hd lazy val tail stream tl def apply int head else tail stream consists con cell eagerly evaluated head lazily evaluated tail stream object instantiated expression head tail head expression immediately evaluated whereas tail evaluated first accessed therefore stream always look like following con cell evaluated head con cell except last one evaluated tail pointing next con cell head tail head tail head unevaluated one way construct stream use recursive function injecting printlns see order function call expression head tail evaluated syntactical sugar creating stream con cell def mkstream int stream int println evaluating cell println evaluating head cell println evaluating tail cell mkstream force evaluation con cell observe output val stream mkstream println stream println stream output evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell see head cell evaluated cell constructed tail evaluated access next cell lazylist simplified version definition lazylist replacement stream class lazylist hd tl lazylist lazy val head tail lazylist hd tl def apply int head else tail head tail lazily evaluated therefore actual con cell constructed either head tail accessed interestingly maybe confusingly head tail always evaluated together example accessing head unevaluated lazylist con cell construct con cell also evaluate tail thus lazylist structure look like head tail head tail unevaluated recursive function construct lazylist similar one shown stream equivalent access individual con cell get following output evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell evaluating tail cell evaluating cell evaluating head cell evaluating tail cell evaluating cell first call construct lazylist evaluates neither head tail sense lazylist lazier stream however evaluating third con cell containing also invokes function construct next con cell lazylist le lazy stream conclusion one immediate conclusion refers porting us stream lazylist exploit laziness lazylist current scala version used differently stream using recursive function construct lazylist make sure work expression head tail lazily evaluated everything function outside expression evaluated soon previous con cell evaluated even head previous con cell accessed example instead def mklazylist int lazylist int val content doexpensivecalculation content mklazylist def mklazylist int lazylist int doexpensivecalculation mklazylist def mklazylist int lazylist int lazy val content doexpensivecalculation content mklazylist time writing pull request making tail lazylist con cell lazy opened
32,Lobsters,scala,Scala programming,Functional GraphQL library for Scala,https://ghostdogpr.github.io/caliban/,functional graphql library scala,purely functional minimal boilerplate type safe schema,purely functional interface pure type referentially transparentminimal boilerplate need manually define schema every type apitype safe schema schema derived compiletime resolver provided runtime
33,Lobsters,scala,Scala programming,The Death of Hype: What's Next for Scala,http://www.lihaoyi.com/post/TheDeathofHypeWhatsNextforScala.html,death hype next scala,death hype next scala past peak inflated expectation pushing syntactic boundary databinder dispatch scalagraph sbt reactive architecture akka actor framework functional programming apache spark trough disillusionment present slope enlightenment redmonk ranking tiobe ranking solid platform production usage mill build tool coursier metal speedup sjsonnet pattern matching string warning suppression broad varied ecosystem future usability ammonite upickle pprint requestsscala oslib cask scala native scalajs conclusion jetbrains developer survey python,death hype next scalaa recent tweet friend mine noted public interest scala programming language seems plateaued waned match feeling latest trend zeitgeist blog post go think happened scala stand future hold scala communityabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming blogpost inspired following tweet shame see friend typesafelightbend laid always said hard sell free stuff wonder scala adoption clojuredead seemed peak around zero data back though jamie note public interest scala programming language seems waned le interest meetups le interest conference le match seeing well scalaspecific conference targeting enthusiast still going strong shut global economy think doubt much le talk scala broader engineering community think reduction public interest real also expected given typical hype cycle follows new technology early scala rode wave hype frankly surprised even hype around pushing syntactic boundary hype around reactive architecture hype around functional programming hype around apache spark project much hype since died period backlash negativity within scala community outside since even backlash faded left reasonable boring language steadily advancing providing great platform general software engineeringthe past peak inflated expectation scala initially created language really started taking early twitter started picking language production system first tagged release scalaz functional programming library lightbend company pushing scala related technology founded apache spark written scala first tagged release cat functional programming library doubt activity scala community doubt major milestone kickstarted interest language largescale commercial adoption commercial support killer bigdata product like apache spark surprising surge public interest lot effort went following domain pushing syntactic boundary lot early scala interest flexible language extension method operator overloading implicit constructorsconversions flexible implicitparameter feature could used sort way flexibility liberating opened sort domainspecificlanguages programming style would unheard language exemplified number project databinder dispatch http client scalagraph data structure library sbt build tool making http request processing output databinder dispatch executer host port target reqbody fromrespstr constructing simple directed graph labelled edge scala graph val flight graph jfc fra flight lh h fra dme flight lh h append content url file filtering grep using sbt url http databindernetdispatchabout grep json file aboutjson search us null source directory using sbt find src name scala exec grep null xargs test z echo nullfree echo null detected many library evolved since early day since moved boring methodbased apis turn naming operator possible always wisest thing nevertheless doubt pushing boundary scala syntax using operator domainspecificlanguages one big point interest early scalareactive architecture reactive architecture pushed largely lightbend via akka actor framework another big effort way writing code different normal code someone might learn school allowed high level concurrency performance beyond achievable writing code traditional style initial incantation akka actor sacrificed lot scala total lack typesafety actor prohibiting blocking apis many idiosyncracies working akka actor basically language embedded scala convention syntax semantics recently typed actor reactive stream akka developer experience shifted much closer typechecked experience would expect typical scala program think also shift community mood rather treating reactive architecture like generalpurpose solution problem treated one possible approach one specific class problem mostly match experience using technique applicationsfunctional programming functional programming scala best exemplified scalaz cat project two library attempt bring much functional programming technique haskell scala language heavy focus concept like monad applicatives eschewing objectoriented side language purefunctional style two library different style remain heavily used portion community today evangelism died extent usage remains strong everyone recognizes functional programming one possible style write scala applicationsapache spark last big project drove scala early hype apache spark distributed bigdata process framework apache spark leveraged scala functional style serializable lambda take common collection like map filter reduce run distributed compute cluster processing huge amount data apache spark allowed big data processing pipeline written order magnitude le code running order magnitude le time earlier hadoop apis spark proved instant hit apache spark scala killer app huge fraction scala community using scala need interoperate spark way apache spark support developer apis many language sql r python popular original collectionslike apis largely superseded sqllike interface allows better optimizability important factor working huge datasets apache spark often used nevertheless apache spark codebase remains mostly scala dayin trough disillusionment since initial spark definitely backlash scala initial hype died early contributor left community interpersonal unhappiness aggregate individual level well personally know many individual got tired thing hyping moved slightly sour taste mouth hard pinpoint exact time hype died perhaps around even technical level well many organization used technique successfully respective niche others regretted going allin actor allin functional programming finding technique nt fit problem well would liked spend time backing allin investment particular programming paradigm personally know many organization make adjustment even fall early surprised amount hype around technology usage operator library clearly roof sometimes turned even simple task complex brainteasers amount hype saw around reactive architecture functional programming match specialized use case found fit best every scala conference keynote speaker evangelizing approach beall endall future software architecture surprise time others would join realizing trough disillusionmentthe present slope enlightenment scala hype early followed backlash hype midlate leave scala despite apparent downturn public interest usage scala continues increase maintain large number open source library number unique ip downloading library maven central package repository grown last year variation number downloads metric individual package overall match trend quite closely growth nt exponential rocket ship project hoping steady increase usage match subjective experience usage scala continues increase even hype died away maintain growth every year think scala community continue pretty good shape look recent redmonk ranking tiobe ranking show scala stably hovering outside clique mainstream language ranked respectively uncommon obscure hype backlash distant memory see scala flexible language supporting multiple programming style tradeoff use case lot early religiosity conflict transformed people using scala steady work enjoying language way choosea solid platform production usage despite reduction hype scala language lot better place used sbt build tool improved leap bound last year massively faster easier use nt like sbt choice many organization use bazel pant scala mill build tool stable widely used new tool like coursier forming new foundation ecosystem used tool ammonite sbt mill metal project brings scala support vscode sublime text editor languageserver support intellij scala plugin continues improve faster accurate support new tool like ammonite script mill build tool new collection library scala clean huge number old wart significantly improves performance many case eg speedup sjsonnet polish feature like pattern matching string warning suppression continue make life better everyone compiler massively sped code compiling literally twice fast three year ago language specification hardly changed past year amount qualityoflife improvement landed hard overstate talked scalausing engineering organization halving compile time back would showered money make happen individually significantly improved personal experience writing scala many improvement comprehensively list herea broad varied ecosystem hype around original four effort waned still form large active subcommunities within scala ecosystem example everyone may want use pure functional programming individual may want use time library ecosystem surrounding nevertheless varied highquality wellmaintained encounter occasion use pure functional programming find everything need way hype served purpose introducing large number people particular paradigm help achieve critical mass fraction people sustain subcommunity going forward broad range style scala thought boon rather considering way splitting community apart way bringing together community would otherwise never interact without scala community may disparately working haskell python java go system focusing shared rather different scala allows community collaborate thing benefit still preserving thing make subcommunity unique personally default architecting code reactively using actor shipped production code heavily us actor situation called default pure functional programming technique used pretty esoteric construct like free applicatives useful think community whole matured similar way appreciating different style using appropriate without dogmatism plagued early day scalathe future exciting thing think lie scala future scala language relatively good state afternoon writing modern java code enough relieve illusion language caught spending day trying unsuccessfully package python project standalone executable hello azurecli greatest potential lie introducing scala new set people new set use case point completely bound think two main thing stand usability initial four scala effort one thing missing ability new developer start codebase immediately productive nt matter whether using operatorheavy dispatch style actorheavy reactive style purefp catsscalaz style someone trying onboard going hard time need case counterexample developer generally find python easy language get started executable pseudocode call new programmer learn python nonprogrammers learn python people write code whiteboard marker often write python python performance concurrency largescale maintenability questionable ease getting started unmatched ca nt scala easy get started python answering question goal entire suite library maintain many library carboncopies shameless clone python equivalent example ammonite clone ipython repl upickle clone python json module pprint clone python pprint module requestsscala clone kenneth rietz request module oslib clone python o sys shutil module cask clone armin ronacher flask library turn make scala easy get started python python weakness performance concurrency maintainability scala already excellently scala potential language usability flexiblity python performance scalability java go typesafe maintainability far beyond option quite literally best world always use case highconcurrency reactive architecture purefunctional programming best tool job hope going forward developer able onboard onto scala language easy straightforward way need learn advanced technique need comesscala native scalajs demonstrated feasiblity using scala alternate platform compiled javascript instead jvm vibrant ecosystem community brings scala language browser somewhere could never used scalanative promise even bigger revolution compiling scala selfcontained binary executables would allow scala language used scenario startup time resource overhead jvm javascript runtime unacceptable scalajs brought scala browser scalanative promise bring scala host new environment commandline tool like git l rsync etc tolerate startup time jvm sidecar process background daemon significant memory overhead jvm make using scala problematic mobile development io running iphones ipads one ubiquitous consumer computing device world desktop application jvm startup time slow bundling jvm bulky deep integration native library like tensorflow machine learning framework sort program traditionally written unsafe language like c c recent implementation often written rust go whole cottage industry notc programming language like nim zig crystal also trying fill space scalanative promise able fill space brandnew language alreadypopular language existing rich ecosystem library tooling scalanative much difficult make successful scalajs particular scalajs could focus compiler delegate existing javascript runtime scalanative build runtime first principle threading garbagecollection eventloops addition formidable amount compiler work necessary nevertheless successful would massive boon broadening use case scala language usedconclusion amount hype around scala language definitely died year usage seems growing steady clip experience using language improving rapidly exactly would expect language progress hype cycle move faddriven community valuedriven community scala developer using language end unto instead solid tool use accomplish nonscalarelated technical business objective effect mean community mature going forward hope see focus outcome value rather hype weighing tradeoff rather dogmatism celebrating shared core rather arguing difference compiler speedup think way scala community spending effort bikeshedding existing language syntax effort arguing functional v object oriented programming effort trying make alreadyverytypesafe code even typesafe instead inclusively expanding language reach developer could never reach newbie nonprogrammers commandlinetool folk io developer look jetbrains developer survey python see breadth different domain python language used currently scala overwhelmingly used backend service andor spark data pipeline reason use case could nt satisfied scala well community make using scala easy broadlyusable enough anyone grizzled backenddata engineer able pick scala use enjoying conciseness performance typesafety within scala community already know loveabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
34,Lobsters,scala,Scala programming,Cats Effect Ref,https://lewisjkl.com/cats-effect-ref/,cat effect ref,state monad implementation ref overview ref implementation example partially applied type ref get implementation example ioapp ref set implementation example ref update implementation example ref modify implementation example full ref example region sharing conclusion twitter,newcomer functional programming thought mutability prohibited although figured use immutability situation found obvious case work modeling updating inmemory state eg inmemory cache counter wrong think functional programming mandated using immutable value functional programming requires referential transparency long hold mutability fine case inmemory state modeled using state monad provides way represent state updated sequentially case state move serially one value another taking previous state input look state monad however use case need update state concurrently rather sequentially look cat effect ref additionally look zio another ref implementation prefer ref overview ref mutable reference nonblocking accessed modified concurrently modified atomically dealt using pure function ref get atomicity java atomicreference referential transparency using cat effect sync type class show building block combine create ref going walk major operation available ref get set update modify note changed implementation simplify post mostly wish see real implementation ref check ref method constructor ref implementation def f implicit f sync f f ref f fdelay new ref f new atomicreference constructor creates ref filled atomicreference containing initial value within f context maintain purity operation referentially transparent since composed f using delay sync type class effect executed calling function merely return effect f ability run future point create ref true function within ref pure taking advantage delay behavior provided sync type class example val ref io ref io int refof io int note equivalent ref io ref take advantage partially applied type ref get operation simplest operation ref get value atomicreference currently contains ar atomicreference supplied within constructor implementation def get f fdelay arget get operation atomicreference happens single machine instruction mean number thread performing get atomicreference time without contention name atomicreference implies threadsafety hold operation atomicreference cleverly performs operation single machine instruction another key thing note atomicreference backed volatile variable volatile variable read written host computer main memory rather cpu cache mean even program running different cpu behave though running single cpu volatile variable see example val printref ref ref io content refget yield println content printrefunsaferunsync example following create ref using ref io acquire content ref using refget print content console using println content example printref return io unit effect representing computation run future point time case example post effect run immediately calling unsaferunsync typically call explicitly within program rather use ioapp run program ref set operation structured get except performing set operation time operation relies volatile threadsafe nature atomicreference implementation def set f unit fdelay arset example val printref ref ref io refset content refget yield println content printrefunsaferunsync ref update get set operation great alone allow u atomically update value contained inside reference example wanted take whatever value stored ref increment one might tempted something like def getthenset ref ref io int io unit refgetflatmap content refset content val printref ref ref io nonemptylistof getthenset ref getthenset ref parsequence content refget yield println content issue going get inconsistent output running code two separate process working parallel perform getthenset operation process may get value ref process chance increment value using set operation example execution program process get value calling ref get ref get return ref get return ref set set ref set set would expected final output program due get set happening two different operation end potentially incrementing value twice update come implementation def update f f unit modify f operation logically simple modify included modify post worry much implementation read section modify important thing note update update take function f argument called whatever value currently contained inside ref whatever value function f return new value inside ref update work make sense understand modify function ref work key thing understand update provides way atomically perform get set operation example val printref ref ref io refupdate refupdate content refget yield println content printrefunsaferunsync ref modify shown update perform get set operation although yet explain yet seen perform get set get operation although may seem unlikely operation needed common one take example using update increment counter method work unless need atomically access value incremented example want keep track number request http server seen time could use ref update function add one counter every request however update function work want return new request number updating could use update followed get atomic get performed separate machine instruction could lead two request getting id problem modify solves implementation def modify b f b f b tailrec def spin b val c arget val u b f c arcompareandset c u spin else b fdelay spin dive explaining modify method need understand atomicreference compareandset method compare set ca take two parameter value c expect contained atomicreference value u want update atomicreference ca update atomicreference value u value currently held within atomicreference equal value c value c equal value currently held atomicreference compareandset update reference return false indicate ca operation atomic compare set functionality happen single machine instruction let look ref modify method method take function f parameter function accepts value currently stored ref return tuple containing value update ref value return modify method modify method contains tailrecursive stacksafe inner method called spin spin method form called compare set loop reason loop needed modify requires two operation work atomicreference get atomicreference compareandset operation atomic call sequence resulting operation atomic thus atomicreference may get updated call get call compareandset causing compareandset operation fail return false reason need retry operation repeatedly finally succeeds succeed update underlying atomicreference call get compareandset example val printref ref ref io content refmodify current current current yield println content printrefunsaferunsync full ref example full example using ref manage state set bank account import bankaccounts final class bankaccounts ref ref io map string bankaccount def alteramount accountnumber string amount int io option balance refmodify allbankaccounts val maybebankaccount allbankaccountsget accountnumber map bankaccount bankaccountcopy balance bankaccountbalance amount val newbankaccounts allbankaccounts maybebankaccountmap mnumber val maybenewbalance maybebankaccountmap balance newbankaccounts maybenewbalance def getbalance accountnumber string io option balance refgetmap get accountnumber map balance def addaccount account bankaccount io unit refupdate accountnumber account object bankaccounts type balance int final case class bankaccount number string balance balance val example ref ref io mapempty string bankaccount bankaccounts new bankaccounts ref bankaccountsaddaccount bankaccount bankaccountsalteramount bankaccountsalteramount endingbalance bankaccountsgetbalance yield println endingbalance exampleunsaferunsync example still fairly basic certainly intended show would implement real banking software however give idea possible using ref region sharing final note something confusing first working ref whenever working ref operation using forcomprehension may know forcomprehensions syntactic sugar represent series flatmap call followed map end ref operation contained within f effect context need map flatmap result operation access value referred region sharing ref io flatmap region sharing ca nt access value ref contains region sharing convenient give u ability reason code locally word see every possible operation could modifying ref right inside region sharing look anything outside region since anything access ref conclusion hope overview given better intuition ref use within code ref super powerful construct give easy way manage application state way atomic pure ref would recommend checking resource question comment article please reach twitter thanks reading
35,Lobsters,scala,Scala programming,Building a Super Easy Rate Limiter with ZIO,https://medium.com/wix-engineering/building-a-super-easy-rate-limiter-with-zio-88f1ccb49776,building super easy rate limiter zio,building super easy rate limiter zio linda wilson unsplash zio challenge token bucket zio rescue zio api implementation queue using rate limiter using outside zio summary twitter,building super easy rate limiter ziophoto linda wilson unsplashin post show able make efficient nonblocking rate limiter using line code leveraging zio builtin nonblocking concurrency primitive fiber based concurrencythe challengerecently needed implement rate limiter one internal scala service service among thing allows user get live view kafka message fly topic select user selects topic view server start consuming topic stream message back client via websocketnaturally topic throughput far exceeds human eye ability follow brain ability process rate limiting come consumption rate exceeds certain maximum kafka consumer slow downrate limiter throttler easy write several algorithm choose token bucket fixed window sliding log others writing efficient correct concurrent code hardzio rescuefortunately service using zio library typesafe composable asynchronous concurrent programming scala zio come ton building block writing async non blocking concurrent code let see leverage implement rate limiterthe apifirst let define rate limiter api need single function given effect return new effect may suspend maximum throughput rate exceed executing original effect implementationthere data structure provided zio something similar structure bounded queue bounded queue created finite size queue full offer method suspend fiber call take happens reverse calling take empty queue need create bounded queue fiber draining constant rate rate limiter twenty line code necessary boilerplate forcomprehension actually understand mostly need understand two line line line magic happeninglets break queuetakerepeat schedulefixed period forkthe expression right side constructing program executed take element queue repeatedly every period forever interrupted separate fiber light weight logical thread provided zioif omitted fork comprehension hence whole effect returned ratelimitermakewould never finish repeated queuetake would run main fiber effectqueueoffer effectwe modify effect first offer element queue queue full suspend fiber element taken queue line room queue fiber proceeds generate original effectnote b equivalent aflatmap b running two effect sequentially ignoring result first using rate limiterhow use rate limiter contrived example second line comprehension attempt print number fast putstrln effect wrapped limiterratelimit number printed rate exceeding per second initial burst allowed bybuffer note throughput capped without blocking thread using outside ziocan also use rate limiter non zio code yes require boilerplatewe need instance zioruntime run zio effect case default environment fine create like object runtime extends ziodefaultruntimefirst let make async version rate limiter work scala future note since scala future represents already started effect ca nt delayed ratelimit method accepts function return future name parameter future would work well think case future express intent better could also make blocking rate limiter note use effectblocking wrap potentially blocking code zio effect make sure code run separate thread pool non blocking zio operationssummaryto summarize shown using zio able put together concurrent nonblocking rate limiter line code also shown rate limiter might used zio based code traditional future based even blocking applicationsthanks reading comment follow medium twitter
36,Lobsters,scala,Scala programming,Scala Implicits are Everywhere: A large-scale study of the use of Implicits in the wild (2019),https://arxiv.org/abs/1908.07883,scala implicits everywhere largescale study use implicits wild,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
37,Lobsters,scala,Scala programming,What Could Possibly Go Wrong: Polyglot Party with Nextjournal,https://www.innoq.com/en/blog/what-could-possibly-go-wrong/,could possibly go wrong polyglot party nextjournal,hedgehog nextjournalcomjanwhatcouldpossiblygowrong comment read,nextjournal notebook great tool trying thing sharing result enabling others build top also languageagnostic environment allows spin several programming language virtual embed single document data produce shared across runtimes processed visualised within notebook like nextjournal awful lot experimenting trying build clojure wrapper scala propertybased testing library hedgehog pleasant experience environment lends well playing code data encouraging happy share result encourage build top find notebook nextjournalcomjanwhatcouldpossiblygowrong comment please accept cookie agreement see full comment functionality read
38,Lobsters,scala,Scala programming,"LambdaConf 2020 Call for Proposals: Scala, Haskell, Kotlin, Purescript, Rust, Elm, Elixir, F#",https://lambdaconf.zohobackstage.com/LambdaConf2020#/cfp?lang=en,lambdaconf call proposal scala haskell kotlin purescript rust elm elixir f,,
39,Lobsters,scala,Scala programming,A Glossary of Functional Programming,http://degoes.net/articles/fp-glossary,glossary functional programming,glossary abstraction ad hoc polymorphism algebra algebraic data type adt algebraic law algebraic structure applicative apply associativity category theory commutativity composable contravariant functor data modeling declarative programming dependency injection dependent typing deterministic domainspecific language dsl effect rotation existential quantification existential type expression falgebra firstclass flow analysis free structure function functional effect functional programming functionalimperative functor generalized algebraic data type gadts generic programming global reasoning higherkinded type higherorder homomorphism imperative programming indexed monad indirection isomorphism kind lambda lambda calculus lens liskov substitution principle local reasoning map minimal modular monad monad transformer monoid monomorphic natural transformation nominal typing onion architecture optic orthogonal parametric polymorphism parametric reasoning partial function polymorphism prism procedure procedural programming product type profunctor projection propertybased testing pure record recursive data recursive function recursion scheme referential transparency reified semigroup sideeffect state structural typing structure subtyping sum type taglessfinal total traversal type type class type constructor universal quantification universal type value faq,taught functional programming year time experimenting different way teaching core concept time collected converged simple reasonably precise pedagogical definition range functional concept post share definition first ever glossary functional programming enjoy glossary abstraction abstraction precise description way different data type share common structure abstraction allows different data type participate generic programming functional programming abstraction defined algebraic structure usually encoded programming language using type class common example abstraction include monoids functors monad ad hoc polymorphism ad hoc polymorphism language feature allows overloading function operator providing multiple implementation symbol fashion compiler runtime automatically select implementation call based type involved function application example ad hoc polymorphism include method overloading type class algebra algebra set element together set operation element operation algebra defined algebraic law give operation meaning relating example addition integer form simple algebra element integer sole operation addition satisfies assocative commutative law algebraic data type adt algebraic data type data type composed product type record sum type enumeration functional programming algebraic data type used data modeling algebraic law algebraic law universally quantified statement asserts relationship operation algebra example algebraic law addition could assert b c equal b c associativity mainstream programming language algebraic law usually tested using propertybased testing algebraic structure algebraic structure structure defined using algebra applicative applicative functor apply functor allows taking value converting functional effect succeeds specified value view functors dsl applicative add pure return statement dsl apply apply functor functor allows zipping two functional effect together get tuple success view functors dsl apply add way combine two program together one program preserve success associativity associative operator binary operator applied three value always result value regardless order pairwise value combined example addition number associative number b c b c equal b c category theory category theory branch mathematics defines mathematical structure using directed labeled graph category alternative algebraicallydefined structure category theory powerful precise pattern language mathematics computer science functional programming knowledge category theory helpful necessary mastery applied functional programming commutativity commutative operator binary operator produce result matter order operand example addition commutative b equal b number b composable operator composable applied return value example addition operator composable respect integer return another integer added integer similarly boolean negation operator composable possible negate boolean value negated composability allows small number operator reasoned simply immense expressive power contravariant functor contravariant functor type class allows transforming input type functional effect using function contravariant functors often formed polymorphic type accept input function stage pipeline data modeling data modeling act constructing data model domain object people product schedule etc goal data modeling staticallytyped functional programming construct data model precise impossible construct bad data process sometimes called making illegal state unrepresentable declarative programming declarative programming style programming solution constructed specifying goal rather specifying sequential step necessary achieve goal instead declarative programming opposite imperative programming language sql datalog inherently declarative declarative programming practiced programming language typically defining declarative dsl atop imperative implementation dependency injection dependency injection refers framework library language feature architectural pattern facilitates threading dependency throughout application wiring dependency different scenario dependency injection one primary architectural need largescale complex application dependent typing dependent typing method defining type permit type depend value example dependently typed programming language one define type vector whose length equal value example dependently typed programming language include idris coq agda dependently typed programming language allow proving property program compiletime albeit increased development cost deterministic deterministic procedure return output input domainspecific language dsl domainspecific language dsl minilanguage designed solve certain subproblem application functional programming dsl generally embedded mean user dsl use data type operator defined host language construct program dsl effect rotation effect rotation refers construction highly polymorphic data type typically indexed monad simultaneously support multiple functional effect effect supported data type represented different type parameter effect may introduced eliminated using certain operation effect rotation provides much benefit monad transformer substantially improved performance language like scala significantly better type inference existential quantification existential quantification asserts statement hold choice given variable example value list list existentially quantified list type parameter asserting exists unknown type describes type element list without specifying type existential type existential type specific definite type unknown code interacting type programming language existential type used forget information need carried around type parameter scala abstract type member always existential type expression expression value constructed application function operator value parameter function operator called term expression example b expression computes result adding term term b falgebra falgebra generalization algebraic structure come category theory make possible represent algebraic law without universal quantification using morphisms functional programming falgebras appear directly interpreter taglessfinal free monadic program natural transformation algebra coalgebras recursion scheme firstclass firstclass construct created manipulated abstracted using powerful machinery language expose task programming language firstclass mean construct value firstclass construct give programmer much power secondclass construct construct firstclass nonetheless reified obtain benefit firstclass flow analysis typedirected flow analysis process whereby flow information declaration data type function analyzed using type information alone performing flow analysis yield useful information implementation polymorphic declaration example function def foo foo one tell using flow analysis output function must come single input parameter way function return value polymorphic type free structure free structure data structure reifies operation algebra treelike data structure later data structure traversed operation applied concrete process called interpretation free structure example free structure list free monoid type type list provides neutral value empty list append operation list concatenation another example free provides free monad type constructor f f function mathematical function f b f b associate every value set called domain single value set b called codomain given function mapping static change programming language domain codomains valuelevel function type function total map every input output deterministic map input output pure map input output functional effect functional effect immutable data type describes model computation one value computation may require additional feature like optionality logging access context like configuration error state inputoutput using effectspecific operation functional effect transformed composed model solution complex problem solution smaller problem way constructing functional effect together operation effect type form dsl whose capability dictated constructor operation frequently functional effect run interpreted plain value functional effect common functional effect include option maybe model missing value either model failure zio io model sideeffects including asynchronous sideeffects functional programming functional programming style programming solution constructed defining applying mathematical function many program purely functional contain part written functional style well part written procedural style functional programming practiced staticallytyped well untyped programming language functionalimperative functionalimperative hybrid style programming us higherorder function embed imperative model computation inside functional code functionalimperative style relies monad equally powerful abstraction represent stateful sequentiality imperative computation functor functor type class allows mapping success value functional effect using function every functor regarded type dsl term functor sum type correspond different instruction dsl view functors dsl functor provides way change success value dsl program success value applying specified function generalized algebraic data type gadts generalized algebraic data type polymorphic adts whose component type may introduce existential type impose type equality constraint specific type parameter gadts enable easier modeling use typesafe dsl generic programming generic programming style programming us polymorphism forget irrelevant detail data type allows code used across many different data type share common structure generic programming thought defining template specialized concrete type global reasoning global reasoning property code wherein correctness code inferred without considering prior application state possible input higherkinded type higherkinded type precisely called higherkinded generic language feature type parameter may kind higher two mainstream language higherkinded type scala haskell higherorder higherorder refers higherorder function function accept function input return function output example map list higherorder function accepts function one parameter similarly monad type class higherorder type class kind type parameter higherorder typelevel function homomorphism homomorphism special type function f b preserve given algebraic structure example square function return input multiplied semigroup homomorphism preserve example multiplicative semigroup imperative programming imperative programming style programming solution constructed stepbystep instruction later instruction depend result previous instruction procedural programming imperative programming typically done sideeffecting statement whereas functional programming imperative programming typically done monad indexed monad indexed monad generalization monad highly polymorphic data type multiple type parameter form ordinary monad instance possible choice extra type parameter indexed monad allow increased type precision allow operation expressed nonindexed monad example indexed monad included indexed state rio haskell zio scala indirection indirection programming language feature interface type class record function module definition allows multiple implementation required functionality defined provided code requires capability indirection facilitates testability code reuse modularity functional programming paradigm isomorphism isomorphism equivalence two data type information isomorphism defined two function one translate first data type second one translate second data type first function must satisfy roundtrip law order form isomorphism demonstrate two representation contain information functional programming many thing considered equal isomorphism example unit equal isomorphism meaning two different type information kind kind describes structure type type constructor monomorphic type like float boolean take type parameter belong set type denoted star type constructor like list option maybe belong set type constructor take one type return one type denoted star star kind higher typelevel function accept type type constructor return type example give list type constructor type boolean get back type representing list boolean value terminology notation kind allow u talk way different type type constructor similar distinct lambda lambda anonymous function function value name lambda value lambda may passed function returned function language support functional programming provide way encode lambda lambda calculus lambda calculus way expressing arbitrary computation using lambda lambda calculus alternative turing machine calculus computation give meaning term functional programming many different formulation lambda calculus one lens lens optic allow getting setting term product type example lens could allow getting setting name field inside object type person functional context setting term product mean creating new modified product given new value term old product value liskov substitution principle liskov substitution principle say function accepts input type valid pas function subtype without altering correctness function similarly function returning output type b valid function return subtype b liskov substitution principle enables principled reasoning subtyping local reasoning local reasoning property code wherein correctness code inferred locally specified assumption without considering prior application state possible input map map polymorphic data type change one type parameter another type specifying way transform value type example list integer mapped list string specifying way transform integer string welldefined constitute valid functor mapping polymorphic data type identity function must yield something equal original value minimal set operator minimal exist smaller set orthogonal operator expressive power modular factoring solution problem modular divided independent concern called module module know necessary module modularity help tame complexity largescale software development monad monad applicative functor allows combining first functional effect together function take success value first effect return second effect continuation monad represent essence imperative programming first thing second thing depends value computed first thing view functors dsl monad add sequential statement subsequent statement depend previous one monad transformer monad transformer data type add one functional effect atop functional effect example optiont maybet monad transformer add effect optionality functional effect monad transformer stacked atop monad form monad allows building large stack monad transformer layer adding desired functional effect monad transformer significant performance overhead language like scala alternative monad transformer effect rotation monoid monoid semigroup equipped neutral element often called zero appending neutral element element either side return element unchanged monomorphic monomorphic opposite polymorphic refers function take type parameter instead input concrete type data type take type parameter rather defined entirely concrete type natural transformation natural transformation polymorphic function functors nominal typing nominal typing method defining type solely based name two nominal type equal fullyqualified name nominal typing stand contrast structural typing two type different name structure regarded onion architecture onion architecture method architecting program involves gradually translating business logic lowerlayer level edge application logic translated system call application written onion architecture bear similarity multistaged compiler every layer onion contains dsl compiled dsl optic optic value allow getting setting smaller part larger data structure purely functional way functional context setting mean produce new copy old copy modification applied optic allow zooming small part large structure making pinpoint modification without deal boilerplate involved deconstructing reconstructing every level data structure orthogonal roughly speaking set operator orthogonal operator performs function operator functional programming analogue single responsibility principle srp precisely set operator orthogonal exists factoring operator operator expressed composition two operator parametric polymorphism sometimes called generic parametric polymorphism feature programming language allows universally quantifying function data type one type parameter polymorphic function polymorphic data type said parameterized type parameter parametric polymorphism allows creation generic code work across many different data type generic data type like collection parametrically polymorphic code must behave uniformly across choice type parameter allows powerful way reasoning code called parametric reasoning parametric reasoning parametric reasoning type reasoning enables one state fact implementation polymorphic function polymorphic data type based type signature parametric reasoning typically accomplished using flow analysis polymorphic declaration partial function partial function function defined subset domain partial function modeled total function expanding codomain include least one new value indicates function handle input polymorphism polymorphism feature programming language allows variable function take many different form common type polymorphism include parametric polymorphism subtype polymorphism ad hoc polymorphism prism prism optic allow getting setting term sum type example prism could allow getting setting left term inside object type either b either b functional context setting term sum mean creating new sum given new value term procedure programming language procedure named entity contain ordered set instruction machine perform usually called function procedure subroutine common parlance procedure necessarily function mathematical sense word although mathematical function value constitute valid procedure procedural programming procedural programming style programming solution constructed construction invocation procedure procedural programming imperative nature although imperative programming procedural product type product type composition n type referred term product together new type value product type contains value term structs class record tuples example product type table also example product type row table contains value column profunctor profunctor type class defined type constructor two type parameter describes polymorphic data type form functor one type parameter contravariant functor type parameter function example profunctors mapped output channel contramapped input channel profunctors thought generalization function accept input produce output profunctors function projection projection lossy mapping one set another set applied output return equivalent result example pulling age field person case repeated application produce age field extraction term product type regarded projection propertybased testing propertybased testing method testing algebraic law pseudorandomly generating example value testing see law satisfied example propertytesting could generate many integer b c check b c equal b c propertybased testing prove law disprove well ensure trivial law violation pure pure procedure combine input output interact world outside function way observed pure procedure deterministic deterministic procedure pure record record contains n field accessed label called name field associated type record product type although product type record example term tuples accessed ordinal value name recursive data recursive data data type appears value somewhere inside data type common example recursive data include linkedlists tree recursive function recursive function function call functional programming recursive function allow iteration like processing element list accepting socket connection recursion scheme recursion scheme refers many different way traverse recursive data type folding catamorphisms unfolding anamorphism typically recursion scheme refers use fixedpoint data type factor recursion data type minimize boilerplate involved creating different recursion scheme different recursive data type however fundamentally recursive data type constructed deconstructed transformed different scheme referential transparency referential transparency property functional program expression may replaced value computes without changing behavior program referential transparency allows refactoring program without changing behavior necessary sufficient local reasoning reified reified construct nonvalue construct type field package represented value example reified generic store type generic type parameter value runtime similarly lens type reified field provide way treat field record firstclass value passed around stored transformed semigroup semigroup type class single binary operator often called append combine assocative sideeffect sideeffect occurs evaluation expression anything computing value sideeffects interaction observed outside procedure expression common sideeffects include database access file access network access system call modifying mutable memory calling procedure state state refers data used iteratively process information either loop using recursion structural typing structural typing method defining type solely based structure two structural type equal structure structural typing stand contrast nominal typing two type structure regarded different different name structure structure data type set statement know true data type parametrically polymorphic type well scala structure add structure requiring type instance one type class subtyping subtyping method defining type permit subset relation one type defined subset superset another type example dog animal type system subtyping recognize fact dog type subset animal type sum type sum type composition n type together enumeration type case enumeration referred term sum type value sum type contains value exactly one term example value suite enumeration either heart diamond spade club scala enumeration emulated sealed trait term sum type subtypes sealed trait taglessfinal taglessfinal refers way encoding interpretation dsl using parametric polymorphism taglessfinal code written dsl polymorphic data type used interpretation polymorphic code interpreted different way instantiating concrete evaluation type scala taglessfinal refers almost exclusively using indirection provide ad hoc operation across polymorphic effect type total total procedure return output every input total procedure unlike partial procedure always terminate never throw exception traversal traversal optic allow getting setting element collectionlike data structure type type information exists compiletime stored computer memory program compiling type used compiler describe structure variable function ensure program welldefined consistent informally type regarded mathematical set value type boolean example contains value true false ascribe variable type programming language assert value member set described type act constructing value regarded proof assertion correct type class type class languagelevel encoding abstraction type class viewed function type algebraic structure type example ord type class might encode algebraic structure total ordering might allow u access ordering operation type algebraic structure type constructor type constructor type parameterized type construct type type constructor must fully applied parameter result type example list type constructor given type int integer passing type list type constructor construct type namely type list specified element type structure type constructor described kind universal quantification universal quantification asserts statement hold possible choice given variable parametrically polymorphic function data type universally quantify type parameter asserting function data type implementation possible choice type parameter example function def empty list empty universally quantifies type parameter asserting element type function produce list element type namely empty list universal type universal type type variable used univeral quantification programming language universal type introduced parametrically polymorphic function data type declaration value value information exists runtime stored computer memory program executing value used hold transmit information within program across process boundary operating system file system network beyond programming language value constructed literal expression faq question define term find confusing answer sure send add glossary question wikipedia agree definition answer oh question agree definition answer ok question change definition want answer nope idea improve definition please share feedback
40,Lobsters,scala,Scala programming,Beyond Liskov: Type Safe Equality in Scala,http://www.lihaoyi.com/post/BeyondLiskovTypeSafeEqualityinScala.html,beyond liskov type safe equality scala,beyond liskov type safe equality scala equality problem g integer integer seq seq array float array float list seq list vector seq vector type subtypes liskov substitution principle strawman exacttype match existing violation liskov safety beyond liskov substitution heuristic law universal equality make trivial expression discussion constant folding conclusion multiversal equality implicitbased invariant seqcontains,beyond liskov type safe equality scalathe scala language following java heritage allows compare two value equality regardless respective type error prone since refactor change type one value may silently result equality check never return true blog post explores safer equality check one many feature go principle underlie type system subtyping achieving requires fundamental rethinking mean type safe author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programmingthe equality problem scala equality operator defined follows abstract class final def boolean roughly equivalent java definition public class object public boolean equal object obj base scala type hierarchy like object base class java type hierarchy post referring scala type system everything said applies well java well base scala type hierarchy mean every type extends g integer integer integer seq seq seq array float array float array float list list seq list vector vector seq vector scala type hierarchy hierarchy includes subtyping idea type child another type perhaps additional method constraint functionality idea subtyping familiar anyone programming experience given prevalence object oriented language make heavy use concept method take argument mean compile error two value whether chance equal def x int int println x true false true def x int string println x one false false false case seems bit egregious nt point type system help avoid kind bug writing meaningless code always return false programmer likely made error might make sense write function like directly quite easy accidentally end function like refactor eg converting user id ints string vice versa nt type system meant help catch case performing refactor give u compile error rather letting broken halfrefactored code proceed runtime giving meaningless result type subtypes go make sense first discus mean type subtype one way looking type thing know expression program expression string expression specific string like hello expression int expression specific int like expression seq specific seq like list vector expression meaning could know expression string know int vice versa type tell known fact particular expression program allowing compiler eg check make sure passing string int required subtypes mean different level thing know expression program mean expression could anything integer string list etc int mean expression could integer mean expression single integer case consider type something restricts expression particular range value subtype simply range value subset range allowed another type subtyping natural way representing varying amount knowledge various expression within program different compiler may different type subtype hierarchy eg java nt type exact number scala val x x int val x type mismatch found int required val x compilation failed neither java scala type arbitrary integer range like integer present optimizing compiler although possible define type system work without subtyping lose lot flexibility modeling varying amount knowledge expression within programthe liskov substitution principle liskov substitution principle lsp stated follows let phi x property provable object x type phi true object type subtype subtype object type may replaced object type without altering desirable property program correctness task performed etc mean method thing seq able thing list vector method work fine given list vector subtypes seq fundamental principle underlies type system subtyping mostly formalization existing intuition subtyping work dynamicl language without typechecker violation lsp often result runtime exception nameerrors python typeerrors javascript accidentally try perform operation eg call method value support one point ambiguity meant desirable property program point revisit laterstrawman exacttype match coming back unsafeequality problem one immediate solution try enforce callable exact type available left right exactly equal one issue constraint expressible scala language similar language subtyping let u imagine could define function made syntax abstract class final def selftype boolean selftype magical parameter type allows type receiver method would allow method work def x int int println x true false reject def x int string println x compile error compare int string immediately bump issue realize value different type sometimes equal example may write function check whether list vector equal def checkequalsequences existing list int value vector int println existing value defined function checkequalsequences checkequalsequences list vector true list vector two separate type share common supertype seq otherwise unrelated fact every scala type share common supertype fact list vector share seq supertype different string int sharing supertype furthermore bump second issue selftype constraint violates liskov substitution principle see let u consider following definition def validateany x println x validateany true validateany false validateany allowed x type satisfying selftype constraint however earlier saw narrowing type x int string respectively caused compile error def x int string println x compile error compare int string defined int string subtypes thus expect able substitute x x int string without altering desirable property program arguable whether desirable property runtime property compiletime property argued going program compiles program compile would altering desirable property thus selftype constraint violates liskov substitution principle nt end world definitely begs question violate turn several existing part scala language violate lsp way look shortlyexisting violation liskov consider following function def isint x x match case int true case false defined function isint isint boolean true isint omg boolean false isint take argument type pattern match int print something different something else perhaps code write every day even code want write unheard consider following modification def x string x match case int true case false scrutinee incompatible pattern type found int required string case int true compilation failed changed argument type x x string program stopped compiling seemingly violates lsp string subtype expect able substitute without losing desirable property process code stopped compiling however wrote code slightly different way using isinstanceof rather pattern matching compile error go away x x string allowed def x xisinstanceof int true else false defined function boolean true one boolean false def x string xisinstanceof int true else false defined function one boolean false isint semantically identical take may print one two thing depending whether pas int fails compile always print one thing even though semantically identical comparison hopefully clarify compile error complaining pattern matching check known string int invalid rather complaining pattern matching check known string int valid already know answer compile error due presence knowntrivial rather due fundamental type error violates lsp shuffling thing around write code way compiler iscodetrivialornot heuristic figure code code compile run perfectly fine runtime produce valid result albeit one always false string never intsafety beyond liskov substitution fundamental issue liskov substitution principle ensures safety one way possible value type allowed perform desired operation however another definition safety illustrated problem equality pattern matching possible value type result desired operation must trivially known complaint universal equality defined unsafe nt allows u perform equality check invalid rather allows u perform equality check valid trivial return original invalid example def x int string println x one false false false never see two value compared plenty value whencompared always return false false perfectly good return value always returning false likely indicates bug program logic course also plenty possible equality check always return true also likely indicate bug program logic general whenever narrowing type turn okay code snippet error code snippet tell nt anything related traditional definition typesafety traditional typesafety based lsp lsp narrowing type expression valid code always preserve validity code narrowing type code becomes invalid something else amiss insight tell u important thing heuristic law since complaint universal equality triviality rather traditional sense typesafety depends entirely consider trivial example earlier considered code okay def x int int println x okay know return code def x int string println x always return false think probably bug following code def validateuseridouter z int def validateuseridinner x int int println x validateuseridinner z z trivial analysis tell u always return true probably bug well saw code like code review would certain mistake valuable find reject trivial code always produce known result impossible find scenario due halting problem thus trying reject trivial trivial isinstanceofs pattern match etc entirely reliant much analysis compiler upfront better theoretically impossible get complete coverageit universal equality lot possible operation trivial code probably bug earlier saw trivial trivial isinstanceofs patternmatches others example seqcontains def checkinseq x seq xscontains checkinseq seems fine may return true false depending passed next snippet hand def x seq int string xscontains seems invalid know always return false became invalid narrowed type x seq x seq int string like validateuserid function saw earlier many noncontains nonrelated case x option isempty normal isempty always return false like seqcontains noneisempty always return true x int normal always return false always return true x seq int isinstanceof list int typical x vector int isinstanceof list int always return false like seqcontains x match case int true case false typical x string match case int true case false always return false like seqcontains blocked compiler violates lsp x string match case int true case false fact fails compile may sound unreasonable realize upcasting compile x getclass typical return anything x charsequence getclass specific return fewer thing x string getclass ever return classof string like seqcontains sometimes ever return false set case operation wide type expected operation narrow type trivially result single known result probably bug perfect accordance lsp often indicate bug inefficiency program various point time certainly bitten mistake look like case function like validateuseridinner look fine called one place returning trivial result mismatched isinstanceof check always returned false x check type always return false x trivially always two different integer universal equality seems get attention really problem writing code produce trivial result probably bug flagged disallowedwhat make trivial expression far seen many case problematic trivial expression trivially evaluated constant even compile time another name partial evaluator typechecker naftoli gugenheim pointed discussion trying partial evaluate booleans constant nothing typechecking singleton type constantfolding scala already support three thing required identifying problematic trivially constant snippet code question nontrivial ie single primitive literal easy check code question typechecks singleton type already ability code question pure currently ability track compiler thing need add rudimentary purity analysis catch problematic case perhaps annotation pure handle thing like contains noneisempty would give u safety wanted much le invasive change proposal seen pure annotation lie generic type due erasure end decide want trust constant folding one problematic case prohibiting trivial computation sometimes want consider following snippet def thirdofcircle mathpi def timetowaitinmillis may want mathpi constantfold single number performance want write number directly mathpi much informative literal one possible solution require triviallyconstant value wrapped marker method def thirdofcircle const mathpi def timetowaitinmillis const const tell compiler know trivial computation let providing marker function making people use may overall boost readability overall reader immediately identify portion code compute constant rather run constantfolder head try figure snippet code going optimized away constant way get constant folding within const block constant folding outside compiler programmer clear constant folding exists tconclusion traditional definition typesafety based type subtyping lsp deeply ingrained almost staticallytyped language allows u prohibit atcompiletime anyone accidentally trying perform operation expression might support however lsp say nothing another type issue programmer writes code trivially known result likely indicate error oversight essentially something nontrivial compute trivial result probably programmer error universal equality one common case seen issue go far beyond universal equality check thus make sense want similarly general approach mitigate although halting problem mean theoretically impossible find trivial result compile time approach based finding trivial expression handle disparate case without specialcase handling contains fact already machinery necessary compiler singleton type inference need extend slightly let serve doubleduty catching trivial expression reason think proposal multiversal equality implicitbased invariant seqcontains right way go relativelyspecific hack relativelyspecific manifestation problem neither solving core issue based upon strong theoretical foundation add lot additional rule relatively simple core concept subtyping along edge case ergonomic issue complexity using invariant collection typesafe contains method also proposed work throwing away subtyping among collection hierarchy nt address myriad noncollectionrelated case problem exists end goal clear using ability infer singleton type identify trivial snippet code likely programmer error able reuse existing infrastructure around singleton type without needing invasive change language core library adding hint core language type system assist inference nt question long keep mind hint aid inference whole separate subsystem way knowing halting problem prevents general solution liberating know never get perfect need provide level good enough bugfinding improve time balance performance usability ergonomicsabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
41,Lobsters,scala,Scala programming,Require is an Anti-Pattern,https://lewisjkl.com/require-anti-pattern/,require antipattern,better way conclusion,scala require method frequently used better option available get started show example demonstrates require frequently used def transfermoney amount int transferresult require amount amount transfer must greater zero transfer money operation first encountered pattern thought great loved able define front function input look like another nicety rest function could assume required condition true often allowed logic function simpler issue well see several function actually covering entire domain input function really partialfunction caller know cover entire domain caller way knowing restriction exist without looking function directly good chance caller safely call function eg wrapped try thrown exception could actually crash program analyze approach realize like idea locking type like way accomplished better way opensource library called refined support believe ideal way restrict type beyond native definition import eutimepitrefinedapirefined import eutimepitrefinedauto import eutimepitrefinednumeric type positivenonzeroint int refined positive final case class transferresult amounttransferred positivenonzeroint def transfermoney amount positivenonzeroint transferresult transfer money operation transferresult amount transfermoney refined allowed example create new type hold positive nonzero integer mean previously checked require statement built type give u benefit require without drawback enumerated function defined input entire domain caller full visibility restriction imposed conclusion using refined type easy way lock type way transparent caller reach twitter github question comment correction
42,Lobsters,scala,Scala programming,Use := for Assignment (Scala 3),https://github.com/lampepfl/dotty/issues/7598,use assignment scala,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
43,Lobsters,scala,Scala programming,Scala Notes: Case Classes and Case Objects,https://www.jowanza.com/blog/2019/11/17/scala-notes-case-classes-and-case-objects,scala note case class case object,immutable,scala case class functionality class using case keyword compiler generates code enables handy feature go detail feature provide example belowimmutable default case class immutable immutability part zen scala may surprising default case class constructor parameter use val keyword making immutable run ever create case class try mutate one parameter
44,Lobsters,scala,Scala programming,Working with HTTP in Polynote,https://blog.softwaremill.com/working-with-http-in-polynote-d950dcfcd75f,working http polynote,working http polynote recently opensourced spark sttp client downloading okhttp backend circe import import import import uri interpolator traversed optic case class case class polynote sttp client,working http polynotepolynote recently opensourced polyglot notebook support scala spark python sql notebook often used big data machine learning data science time time still need http request fetch json parse explore ithow send http request polynote notebook since dealing scala use sttp client replnotebookfriendly formlet start downloading recent polynote release unpacking either add sttp dependency default notebook copying configtemplateyml configyml adding dependency section dependency scala comsoftwaremillsttpclient comsoftwaremillsttpclient running polynote creating new noteboook adding dependency configuration dependency section folded default using sttp client api okhttp backend provides synchronous backend future io great notebook setting based stable battleproven library moreover parse json using circenow ready start notebooking first need import come sttp macos dictionary yet need three import work comfortably first import sttpclientokhttpquick pull sttp client api implicit instance synchronous backend well quickrequest starting point describing request always read response body stringin application probably want import sttpclient create backend give control allocation resource creating backend connection pool moreover likely use basicrequest starting point default read response body either string string right left depending status code get typesafety unsafe http worldsecond import sttpclientcirce pull sttpcirce integration parse response body jsonfinally import iocircegenericauto automatically derive json codecs case class possible write handwe run first request let try simple oneseems work next let try parsing json visualising result query github api look scala repository sorted star count see safely embed value uri thanks uri interpolator interpolator handle contextsensitive encoding also support optional value collection parameter map etcthe result large json let try parsing several option parse string circe json type represents arbitrary json datatype traversed also using dedicated optic modulehere however parse response data structure interested repository name looking result see item array containing data one project data structure case class githubproject name string case class githubresult totalcount int item list githubproject read response json modify description request contains information response handled use already imported sttpclientcirceasjson come sttpcirce integration json codecs also automatically generated need add anything notebook environment worry much http deserialisation error use asjsonalwaysunsafe throw exception json fetched parsed application probably want use asjson typesafe return either deserialisation error resultnow big data top scala project data science let see popular initial letter scala project guess group response first letter project name count many project group finally visualise result si without much surprise popular initial letter scala project lot starsyou find polynote sttp client website full notebook enjoy
45,Lobsters,scala,Scala programming,"Unit, Functional, Integration? You are doing it wrong",https://blog.7mind.io/constructive-test-taxonomy.html,unit functional integration wrong,unit functional integration wrong summary problem constructive test taxonomy intention axis encapsulation axis isolation axis different kind communication test space axis idea abservations lobster module dependency injection better test dual test tactic mock v dummy upcoming talk functional scala distage conclusion p twitter,unit functional integration wrong summary many engineer pay enough attention test two reason hard make good test easy formalize test good bad created test taxonomy alternative classic unitfunctionalintegration trinity allowing engineer establish useful guideline work test suite problem write test u regularly many u consider test important business logic test establish important contract greatly reduce maintenance cost test equal though wrote start noticing helpful troublesome may say bad test slow unstable fail randomly nonviable survive refactorings demanding require complex precondition met external service running fixture loaded etc etc incomprehensible signal problem help u localize cause though question write better test choose best possible strategy start writing test surprisingly hard answer question think one reason fact miss proper vocabulary improperly use existing one used classifying test using word like unit functional integration also system performance acceptance think something like unit test better functional test integration test worst also know good high coverage usual definition unit test check functionality individual module unit functional test check whether system work according requirement integration test check related program module unit code let assume system following component iloancalculator one implementation loancalculatorimpl iuserrepository two implementation userrepositoryposgresimpl userrepositoryinmemoryimpl iaccountingservice one implementation accountingserviceimpl depends iuserrepository iloancalculator http server exposing rpc api wrote test iaccountingservice wired test loancalculatorimpl userrepositoryposgresimpl integration test seems like involves several component program talk database functional test maybe checking important service system conforms specification unit test maybe check functionality system module thing get interesting case make test abstract add another implementation using userrepositoryinmemoryimpl continue call integration test seems test talk database anymore still involves several component still functional test yes still unit test yes intuitively new implementation many aspect better one likely faster require precondition running database met fewer potential exception something important changed may know call change test taxonomy useless let build better one constructive test taxonomy let assume may assign arbitrary amount tag test several predefined set tag may assign one tag set test case want one test may split may establish full partial order set assign weight element let call set axis try come useful ax intention axis test written intention behind common intention test specification contract behaviour code let call test contractual discover issue code usually write test confirming fix keep test regression test know problem fix due design issue broken external library whatever else may write progression test confirming incorrect behaviour case type test underestimated need check performance code write benchmark first axis called intention possible value contractual regression progression benchmark default guideline may say contractual test important regression regression test important progression one case benchmark lowest importance may introduce weight axis point intention contractual regression progression benchmark encapsulation axis test may test interface knowing anything implementation behind may call blackbox test whitebox test may know implementation check directly sometimes even breaking internal state verify conforms test expectation blackbox test break encapsulation survive many refactorings important property always try write blackbox test avoid whitebox one cost test may use interface also verify sideeffects file created disk hard explicitly express let call effectual test may write always better avoid possible may define encapsulation axis encapsulation blackbox effectual whitebox whitebox test expensive assigned high weight isolation axis test check one software component may single function single class test best issue localization possible may call atomic test check one unsplittable entity test may involve multiple software component interact anything outside program test aggregate group entity may call group test test may communicate outer world database api provider etc etc may call communication test test usually le repeatable slow avoided possible may define isolation axis isolation atomic group communication good communication evil different kind communication may notice least two important communication test subtypes difference test calling facebook api postgresql database control restart database anything facebook test interact something outside developer area control expensive one source pure evil call evil communication test test interact something beyond control may called good communication test test space several ax may build multidimensional space consisting least test class also may use distance zero point simple scalar metric allowing u roughly estimate test better two blue box near zero correspond two test class highest value u contractualblackboxatomic contractualblackboxgroup also may try use following pseudoformula roughly estimate maintenance cost associated test maitenancetime encapsulationweight atomicityweight intentionweight coverage axis taxonomy hard easy build perfect one one propose perfect well may give try useful case unhappy something nothing prevent adding ax altering one presented post every team project need workflow may good idea tailor proper vocabulary specific need proper test taxonomy may make useful guideline help establish good practice reduce maintenance cost try precise forget make guide note idea abservations ax miss zero element would correspond contract expressed design type system allow incorrect state nothing test maintenance cost may nearly zero maybe may hard extend system rigid contract specified type may document test adding abbreviation corresponding test type example cbg may stand contractualblackboxgroup test reader lobster proposed couple interesting alteration taxonomy may add mutability axis may change isolation axis precise isolation expression method class file package library application host intranet internet sound interesting try give shot module dependency injection better test dual test tactic simple powerful tactic help u lot design code test able test interface create dummy mock implementation every single integration point entity communicates outer world abstract test create least two implementation one wired production implementation another one dummy one skip production test run service available etc try isolate integration point business logic avoid combinatoric explosion amount possible configuration approach help enforce encapsulation allows code business logic blazing fast test postopone integration work previously manually even case worth automated mock v dummy many engineer love create mock using automatic mocking framework like mockito usually people say mock mean automatic mock experience general bad idea use automated mock usually work runtime slow truly important break encapsulation rarely survive refactorings prefer create mock manually using inmemory data structure simple concurrency primitive call dummy avoid ambiguity strongly prefer dummy automatic mock cost bit code save lot maintenance effort upcoming talk good module system andor dependency injection framework may useful wish make test fast reliable going make talk functional scala regarding bleedingedge approach testing distage dependency injection framework fp scala may help cut development cost conclusion sometimes may hard design properly may use outdated imprecise vocabulary always good idea set mind free think constrained artifical legacy boundary traditional testing approach taxonomy perfect may good idea scrap think end may notice code quality team productivity increased design become resilent update p would happy know thought idea subject may contact twitter
46,Lobsters,scala,Scala programming,Laziness and Streams - Part 2,https://jjmalina.github.io/posts/laziness-and-streams-pt-2/,laziness stream part,laziness stream part jeremy fairbank function stream javascript purely generating stream http itrue conclusion found way write tail recursive decorator,following laziness stream part inspired jeremy fairbank function stream javascript wanted try implement lazy stream python problem python nonstrict argument like scala operator python lambda keyword use define function single line expression lambda keyword need take argument used nonstrictness operator hack add lot extra syntax allows u simulate nonstrictness build lazy stream implementation scala code basic stream construction map filter class stream object staticmethod def create args args return stream return stream lambda args lambda streamcreate args def init self headnone tailnone selfhead head selftail tail property def empty self return selfhead none def str self value selfhead selfempty else return stream value selftail selftail else def foldright self acc f selfempty return acc return f selfhead lambda selftail foldright acc f def map self f return selffoldright stream lambda b stream lambda f b def filter self f return selffoldright stream lambda b stream lambda b f else b lazy mapping filtering scala streamcreate lambda lambda lambda map lambda filter lambda print get stream stream stream wanted create stream another iterable could write createfromiterator method lazily iterates data create stream staticmethod def createfromiterator iterable iterator iter iterable try value iteratornext except stopiteration return stream return stream lambda value lambda streamcreatefromiterator iterator streamcreatefromiterator range map lambda filter lambda print result stream stream stream however calling next iterator pure since change state iterator side effect make evaluating stream return different result call print result stream stream using iterators create stream ideal forced mutate state lead inconsistent result need different way create stream purely generating stream generate sequence could write function like def rangestream start end def loop current current end return stream return stream lambda current lambda loop current return loop start running print rangestream print stream stream stream stream let say wanted never ending stream fibonacci number write another recursive function def fibonacci def loop n return stream lambda lambda loop n n return loop call fibonacci give u stream never terminates actually use value right implement take function stream take n fibonacci number new stream evaluate def take self n n return stream return stream lambda selfhead lambda selftail take n running print fibonacci take give stream stream stream stream stream stream pattern generating stream always need recursive function function called unfold allows u simplify generating stream def unfold self state f take state function f passed state return either none value state pair result f state result return stream value nextstate result return stream lambda value lambda selfunfold nextstate f implement fibonacci using unfold def fibonacci return stream unfold lambda state state state state state also refactor take using unfold def takeunfold self n def unfolder state remaining stream state remaining return return streamhead remaining streamtail return selfunfold n self unfolder wanted implement python range function could using unfold def streamrange start endnone end none end start start def createrangestream end return return return stream unfold start createrangestream make stream data type play nice rest python may want use loop comprehension implement iter next type wrap stream want able use stream loop implementing iter next def iter self stream type return streamiterator self class streamiterator object def init self stream selfstream stream def next self selfstreamempty raise stopiteration value selfstreamhead selfstream selfstreamtail return value implement container class stream iterator stream immutable data structure iterator need mutated keep track value return next handy iterate stream loop comprehension streamrange print streamrange python fiddle code http itrue conclusion using property nonstrictness faked python using lambda able write purely functional stream data structure lazily constructed evaluated saw used stateful iterator createfromiterator broke referential transparency stream data type returned inconsistent result instead wrote pure helper function called unfold aid constructing stream like fibonacci number big caveat python ignored far try evaluate large stream python exceed max call stack size get error since python tail cail optimization reinterpret recursive code loop way scala unfortunately make python bad fit implementing purely functional data structure look like someone found way write tail recursive decorator might explore another follow post
47,Lobsters,scala,Scala programming,"sttp — an open-source library with simple, type-safe API for defining HTTP requests",https://blog.softwaremill.com/sttp-an-open-source-library-with-simple-type-safe-api-for-defining-http-requests-5655ad976762,sttp opensource library simple typesafe api defining http request,sttp opensource library simple typesafe api defining http request scala http client always wanted adam warski could briefly describe sttp library problem library trying solve akka monix catseffect zio team come idea sttp decide engage developing opensource project anything specific learned working project future plan project development overview proposed change would advice people willing start adventure os,sttp opensource library simple typesafe api defining http requeststhe scala http client always wanted sttp opensource library provides simple typesafe api defining http request asked adam warski background project scala ecosystem need could briefly describe sttp library problem library trying solve sttp client provides programmerfriendly api describing sending http request task common everyday programming api aim simple readable time functional reasonably typesafesttp client wrap number http client library thus integrating easily variety application stack thus use api use akka monix catseffect zio want couple synchronous exploratory team come idea sttp couple great implementation http stack scala java akkahttp asynchttpclient okhttp however scala interface either lowlevel complicated usually simple task sending http request think better lowlevel implementation great programmerfacing api needed improvement hence sttp client project provides better api wrapping existing tested http decide engage developing opensource project often case simply needed kind api quite often project find anything would meet need wrote typical scratch itch anything specific learned working project sure quite lot technical challenge always arise try unify couple implementation single api additional challenge maintaining project build target different scala version scalajs scala native finally interacting user community also demanding sometimes need balance need single user group user overall usability longterm future plan project development time writing finishing work version library brings couple significant breaking change important improved way specifying error handled response websocket overview proposed changesthere also change unified model shared tapir library available would advice people willing start adventure os write something need might wrapper api favorite language tooling library better interface database etc course opensource done yet important step let world know write couple blog post explaining approach better kind problem solves try promoting reddit twitter even great library need marketing get initial spark interest
48,Lobsters,scala,Scala programming,Kleisli Category — From theory to Cats,https://blog.softwaremill.com/kleisli-category-from-theory-to-cats-fbd140bf396e,kleisli category theory cat,kleisli category theory cat franck mahon kleisli category journey wikipediaorg category theory kleisli category category monad lecture series repository solution solution solution solution associativity identity ring bell category kleisli arrow cat usefull,kleisli category theory catsfranck mahon flickrcom cc category journeyfrom wikipediaorgin category theory kleisli category category naturally associated monad tso far good let break piece example way go back sentence end post understand exactly meanslet suppose want handle log method execution handle one single list log way log example leading u category borrowed great video lecture series bartosz milewski code sample available github repositorysolution simplest solution would store log global variable know shrugged worry demonstration purposeswith logacc log accumulator execute function keep log nicely organized know terrible know reading want see functional way solving thing solution second approach pas log one function execution next parameter better function pure least know signature negating function something else pas second element resulting tuple next function concatenated log end course bad function us logic handle log inside break single responsibility principle function difficult memoize switch red light thinking pure function let try something else solution decide return tuple like second example take boolean parameter defer log concatenation point call function pure function log context pas around handle end good except way handle resulting log need keep result execution concatenate log etc get difficult word need better way composing functionssolution function composition take two composable function create single function interested category theory probably already seen example composing function b function b c result function c composition fundamental functional programming three type b c create compose function like function take two function argument return another function type cwith tuple example log context create composing function function take two function taking boolean returning boolean string convert single function take boolean return boolean string example generalized boolean generic type please note string concatenation operation happening within composition composet function know looking function simple function composition associative knowledge string know composet associative string concatenation associativeif associativity let check create identity create identity function need function nothing log word need function take boolean return boolean value empty string tuple easy associativity identity ring bell point know associativity identity word category category object scala type arrow b string instead simple b arrow fact arrow simple transformation b make called kleisli arrow kleisli arrow work many different type tuple type b string defined type impose condition possible word monadic type cat definition kleisli come kleisli enables composition function return monadic value instance option int either string list double without function take option either parameter strange unwieldyso usefull kleisli composing let say function want compose simplest approach would call one one pas result one like could inline call like scala function like compose andthen problem example need match input one function output another make work output wrapper around type eg future cat io get trouble quicklylet wrap value something useful see would typically handle clear pas return value generate process etc know io monad easily flatmap cleaner approach comprehension kleisli something similar many case clear readable way let start verbose version wrap function kleisli type use andthen mechanism used function matching input output side note cat library actually override scala andthen scalaz us andthenk purpose far good better operator cat working kleisli use get much cleaner code addition using andthen approach need wrap kleisli function want use first one enough eg hope throughout tutorial could see kleisli category category naturally associated monad went simple example tuple get category kleisli arrow cat library definition usageenjoy
49,Lobsters,scala,Scala programming,"Scala application lifecycle, from pure Scala to FS2",https://blog.softwaremill.com/scala-application-lifecycle-from-pure-scala-to-fs2-5f2861005603,scala application lifecycle pure scala,scala application lifecycle pure scala previous blog post lifecycle short story resource handling plain scala sample scala di grafter blogpost start stop cat effect world ioapp akka stream monix bracket cat bracket conclusion github repository repository,scala application lifecycle pure scala previous blog post described scala application structure going focus whole lifecycle including initialization shutdownlifecycleduring application startup usually multiple typical operation performed first needed load configuration usually resource file database client created together connection pool http server must started provide apis service application may stream processing eg incoming kafka message also would need started apart thing like monitoring http client connection pool initialization service however one common thing among mentioned operation point usually would shutdown closed file connection socket etc gracefully closed freeing system resourcestake look blogpost short story resource handling describing different approach resource management various technology find detailed description eg cat resource bracketplain scalain vanila scala put initialization main application resource closing however difficult usual way use shutdown hooksample scala di graftermy blogpost describes grafter di one thing want notice includes start stop trait allowing define appropriate logic module level grafter manage lifecycle execute method appropriate point time approach similar one may know spring java ee however would rather propose avoid due quite specific design decisionscats effect worldcats effect allows encapsulate sideeffects io type io string mean run io result string type however without explicit running nothing happen everything lazy think bit lazy future however catseffect includes lot useful featuresresource bracket class allow safe usage resource requiring acquisition release usage wrap use wrapped object automatically closed way consume value without releasing resource info also herecatseffect library provides additional class called ioapp allowing return io application way may wrap side effect however important fact easily combine resource bracket applicationthis also mean application may become composition big comprehension iosthe drawback flatmap resource need use theuse method every leveraged stream need compiled drained get io concern thing like http server kafka consumer long running one scala stream processing solution usually compared akka stream monix integrates easily catseffecthowever another way define operation operation stream provides method allowing evaluate io stream processing streameval also allows convert cat resource bracket using streamresource bracket similar cat bracket define special stream whose element includes acquiring releasing logic consuming element automatically releaseddef bracket f r acquire f r release r f unit stream f r mean cat easily integratedthis way may single forcomprehension end need single compiledrain stream evaluation get io sure approach guarantee resource safe going released application shutdownconclusionremember every opened resource eventually closed fp may help steep learning curvethe presented application structure organization way go may become choice project included gist piece bigger example presented github repository please note provided code example simplification allowing present concept full solution aim present compiling structure running application could greatly improved going productiontake look repository presenting broader example shown concept
50,Lobsters,scala,Scala programming,How to structure your Scala application?,https://blog.softwaremill.com/how-to-structure-your-scala-application-658168fbb827,structure scala application,structure scala application structure object creation style article cakepattern package organization feature chimney test maintaining order archunit keep domain clean event sourcing conclusion next blogpost repository,structure scala application scala powerful language given lot feature allowing realize application various waysin java world history using framework platform define force lot behavior example java ee spring define configure application object lifecycle many thingsin scala tend see smaller library quite flexible many thing like application structure lifecycle fully depend remember great power come great responsibilitythis blogpost focus application organization structure second part focus application flowstructureduring work application decide code related thingsobject creation stylefirst topic decide create object manually using new using dependency injection di library java used using di everywhere every project scala different topic di scala already broadly covered adam warski one articleslet say using pure scala new keyword compose module application let say building application sumo wrestler would need feature related eg diet training plan schedule would create separate package containing separate module question compose main application module traitsthe first option treat application module trait main need extend module application one module need object another one need add field trait whose value overriddenif added selftypes following example already cakepatternmodules classesanother way model module class main includes module field dependency module passed via module constructorswe used approach various project far prefer second one make test cleaner especially around providing module dependenciespackage organizationsecondly would package organization layer feature personally prefer organization feature writing code everything related feature located parent package need jump whole service needed together inside feature package need may course layer package happens layer example comsoftwaremillsumodiet module parent package feature related diet package would contain module definition eg dietmodule inside module would see creation various object packageclass dietmodule database database implicit executioncontext executioncontext lazy val dietrepository new dietrepository database lazy val dietservice new dietservice dietrepository lazy val dietcontroller new dietcontroller dietservice comsoftwaremillsumodietdomain definition domain class depending case multiple file insidecomsoftwaremillsumodietrestor apirest apis controller route class eg protocol role provide rest api definition request response format together converter domain class jsonlibrary dependent schema definition controller may contain logic related api representation appropriate conversionswhen separate api domain database model copying data representation quite tiresome take look chimney library make easier youcomsoftwaremillsumodietpersistence logic related database dao repository case return domain typescomsoftwaremillsumodietapplication application logic service process program logic would called api level level operate domain class may integrate execution repository persistence external service eg http client also feature packagesdepending need may layer eg may using external service client library wrapped another layer operate domain application logictestsbasic unit test located srctest corresponding package test class named basic spec suffix worth keep unit test fast nonpublic logic would worth put test put package private eg private application accessed corresponding spec heavier test like one depending database worth put separate directory eg srcit run independentlymaintaining orderthe important question keep order project initially may solidly designed time mess may appear avoid cycle package enforce check allowing use feature internal class another feature come archunit dsl allowing define check testsandrzej ludwikowski blogpost keep domain clean event sourcing provided example archunit check validate dependency domain packagesconclusionscala usage may give power careful introduce mess project afraid using good old new keyword instantiating dependency di framework may really needed applicationin next blogpost focus application lifecycle including initialization resource managementtake look repository presenting broader example shown concept
51,Lobsters,scala,Scala programming,An open-source Scala library for describing HTTP API endpoints,https://blog.softwaremill.com/an-open-source-scala-library-for-describing-http-api-endpoints-2955dfc929ac,opensource scala library describing http api endpoint,opensource scala library describing http api endpoint tapir typed api description tapir opensource library created softwaremillers kasper kondzielski could briefly describe tapir library problem trying solve tapir solves old problem keep sync http api endpoint documentation code short introduction team come idea library solution would answer need programmerfriendly decide engage developing opensource project adam warski anything specific learned working project openapiswagger magnolia macro future plan project development integration let u know would advice people willing start adventure os benefit get contributing opensource invaluable,opensource scala library describing http api endpointstapir typed api descriptionstapir one youngest opensource library created softwaremillers asked one contributor kasper kondzielski tell u scala library earned mascot could briefly describe tapir library problem trying solve tapir solves old problem keep sync http api endpoint documentation code way work introduces another abstraction layer describing endpoint later description converted either one scala http library openapi specification besides client code easily derived using sttpclient interpreter tapir enables describe endpoint using pure value result important benefit like referential transparency want dig deeper technical detail read short team come idea library idea tapir emerged generate http api documentation able find solution would meet project need decided come solution would answer need programmerfriendlytapir mascot geecon conference kraków decide engage developing opensource project adam warski told tapir middle december back month experience scala mostly single commercial project thought would good idea get involved another project especially opensource library enabled grasp new perspective scala language still learning scala skill improved decided continue work project realized important benefit brings anything specific learned working project many thing learned working tapir mainly little scala experience name specific openapiswagger knew swagger used version know whole openapi specification version admit broadmagnolia amazing library scala type class derivation job without would probably still learning shapeless librarymacros scala macro powerful construct beginning seemed similar groovy ast transformation deeper look showed capability way beyond future plan project development apart fixing bug trying enrich tapir integration would like use tapir lack integration library choice please let u would advice people willing start adventure os look excuse benefit get contributing opensource invaluable example show expert given field contribute project know somebody personally working os go talk sure happy help worry plenty people internet willing share knowledge make first little step
52,Lobsters,scala,Scala programming,GCP Goodies Part 8— Stackdriver debugging,https://blog.softwaremill.com/gcp-goodies-part-8-stackdriver-debugging-f4a8af6cec14,gcp goody part stackdriver debugging,gcp goody part stackdriver debugging web application profiler part cluster http wwwgoogleapiscomauthcloud stackdriver debugger gcp goody,gcp goody part stackdriver flickr cc part series going look last part stackdriver functionality stackdriver debugger purpose going build play application scala deploy small custom made kubernetes cluster connect stackdriver debugger consoleweb applicationas part gcp goody stackdriver created small play application written scala deploy google kubernetes engine cluster source application found herethe important change need make stackdriver debugger work similarly profiler part modifying dockerfile generation proper agent jvm argument passed applicationto create following docker entry sbt code generate u following entry dockerfile another modification setting jvm parameter debugger agent enabled dockerfile one modification change entry point pas name version argument selectable stackdriver debugger web uifor purpose tutorial web application contains simple smthtodebug endpoint call service apisampleservicescala turn call another class called datagenerator whole idea create flow application observe using stackdriver debugger console endpoint accessed get request simply return number string uuids json back userclustersimilarly previous part series going create cluster difference need provide scope cluster operates believe reading doc clouddebugger enabled defaultfirst set variable used along tutorial authenticate gcp gcloud auth logingcloud config set computezone zonegcloud config set project course change value command suit needscreate cluster specific scope please note according google documentation change access scope cluster creation pick clouddebbuger option disable service access gke option google cloud apis cloudplatform gcloud container cluster create name scopeshttps wwwgoogleapiscomauthcloudplatform enablestackdriverkubernetesi highly recommend setting cloudplatform scope instead simply clouddebugger clouddebugger option able fetch docker image form gcr done expose server port world easier testing kubectl expose deployment typeloadbalancer port targetport get external ip address kubectl get servicesso good access service using external ip address time play debugger itselfstackdriver debuggerif done everything correctly application running navigate stackdriver debug gcp console see application already selected application drop control need pas source application somehow get debugger goingthere plethora option choose starting simple local project github gitlab etcof course google provides source code repository solution called cloud source using want fork repository gcp goody using github account try option simply use local file point directory local machine stackdriver magic happenson stackdriver debugger console create break point watch call stack well simply browse current value variable scopethe stackdriver debugger work bit differently debugger could used eg ide stopping execution running program production course though highlight current break point display current snapshot application stateexample call stack variable value break point hit top ability add inplace log point visible stackdriver logging console well saving snapshot application state break pointthis pretty cool ha line code modify docker container add jvm parameter debug production application accessible mannerwatch space gcp goody continuously discover try share blog series
53,Lobsters,scala,Scala programming,Websockets in Scala using sttp,https://blog.softwaremill.com/websockets-in-scala-using-sttp-baefd207c5fb,websockets scala using sttp,backend akka http asynchttpclient okhttp streaming support websocket handler backendnative websockets akkahttp websocket support reactive stream asynchttpclient websocket support okhttp websocket support highlevel websocket interface summing documentation available let u know,reminder sttp programmerfriendly api working http request actual work sendingreceiving data managing connection delegated backend akka http asynchttpclient okhttpbackends additional capability one capability streaming support backends support streaming typically support backendnative type streamsame websockets optional additional characteristic sttp backend hence backend parametrised three type effect wrapper supported stream monixreactiveobservable akkastreamscaladslsource supported websocket handlerssttp expose two websocket interface backendnativea higherlevel scalalike functional websocket f interfacelet look approach detail backendnative websocketsmost backends offer natively kind websocket support however interface expose communicating websockets different case sttpbackend parametrised wshandler type constructor arbitrary unconstraintedsuch handler accepts single type parameter type value returned websocket established type usually roughly determined backend handler vary request requestfor backends support websockets wshanlder parameter nothingt value simple type alias type nothingt x nothinglet explore two backends detailakkahttp websocket supportakkahttp support websockets using reactive stream stream process incoming produce outgoing websocket message type handler case flow message message parameter value stream materalisedhence open websocket using sttpdefined request need pas flow instance example simple handler sends message second print received response console would code setting akka creating flow nothing sttp rather akkastreams end see sttp request used open websocketthe request defined regular sttp request fact normal websocket request defined exactly way difference end need call openwebsocket method instead sendasynchttpclient websocket supportif using asynchttpclientbased backends come different flavor effect wrapper monix task zio task catseffect f effect scala future use asynchttpclient native websockets wellin case handler implementation orgasynchttpclientwswebsocketlistener interface java interface also javalike feeling interacting websocket done imperative procedural waylet see look practice need create listener called websocket message arrived also get disposal orgasynchttpclientwswebsocket instance used send message note listener callback executed netty threadpool cautious run blocking operation essentially escape thread soon possible block networking operationsokhttp websocket supportokhttp websockets supported nearly identical way case asynchttpclient major difference instead orgasynchttpclientwswebsocketlistener instance need provide instance interface slightly different basic idea sameokhttp backends come three flavor synchronous without effect wrapper futurebased highlevel websocket interfacewhen using asynchttpclient backend monixtask ziotask flavor also use scalalike functional interface based lazily evaluated tasksusing approach need use monixwebsockethandler ziowebsockethandler websocket established result sttpclientwswebsocket task instance give access two method def receive task either close websocketframeincoming def send f websocketframe task unit first describes process result receiving single message information websocket closed note message available calling fiber suspended nonthreadblockingway second describes process complete given frame sent websocketwhen creating web socket handler optionally set limit incoming message buffer size case message arrive never received using websocketreceive might want either exhaust available memory fail process pointhow example look using approach let find time error handling builtin anything go wrong resulting task fail summing brings new feature web socket support either use backendnative websocket inferface flow akkastreams websocketlistener asynchttpbackend okhttp use sttp websocket f interface describe asynchronous process send receive message using websocketsall example selfcontained need appropriate sttp backend module try using sttp documentation available comment design feature idea please let u know
54,Lobsters,scala,Scala programming,My Way to Scala — part 1,https://blog.softwaremill.com/my-way-to-scala-part-1-6765b55ad68a,way scala part,way scala part moved java scala softwaremill moving java scala programming scala year previously java developer year decide switch scala first place describe journey scala start keep learning today difficult process moving new language softwaremill help process would advice people thinking learning scala scala center website anything miss java ecosystem scala programmer year starting scala journey coding java year decide switch scala first place describe journey scala start learn keep developing today softwaremill tech blog difficult process moving new language softwaremill help process would advice people thinking learning scala anything miss java ecosystem started programming scala year ago previously java developer year decide switch scala first place describe journey scala start keep learning today coursera course led martin orderski difficult process moving new language softwaremill help process would advice people thinking learning scala famous coursera one,way scala part moved java scalascala programming language specialize softwaremill mean team consists scala developer hire java frontend programmer time seamlessly migrate towards scala benefitting knowhow experience share internally think might want start adventure scala post read thought softwaremillers successfully switched scala make first stepmoving java scalahe programming scala year previously java developer yearswhy decide switch scala first place main motivation write simpler code initially wanted keep java design style much le boilerplate elegant collection operation capability writing fluent test later diving deeper found whole lot additional reason like powerful way deal concurrency flexibility defining abstraction rich type system together functional programming pattern allows achieving much better code correctness expressed within design itselfdescribe journey scala start keep learning today started joined softwaremill discovered scala conference talk blog post wanted experiment managed smuggle language test java project first process learning pretty difficult online resource rich time got speed later softwaremill joined fulltime project got support code review mentoring today keep learning reading blog post joining occasional incompany presentation workshopswhat difficult process moving new language case scala language difficult stage first tooling six year ago used rich set tool around java ecosystem scala minimal buggy ide support many helper tool coding assistance linting formatting etc another difficulty switching mindset functional paradigm next frontier concurrency effect scala offer great potential area take learn properly stack abstraction togetherhow softwaremill help process got lot support code review general mentoring experienced colleague joined scala project really boosted learning process company also encouraged go scala conference able explore new trend talk highly regarded library contributor finally softwaremill helped join advanced functional programming trainingwhat would advice people thinking learning scala first start test code safer experiment second least one person engaged learning make process way robust get scared fancy fp construct first get familiar plain scala general principle example go scala center website look learning material wish available starting journeyis anything miss java ecosystem sometimes miss fast java compilation scala getting better better guess still fair tradeoff anyway ide support also bit catch however decent project like metal doubt matter time last thing uniform community division serve development ecosystemshe scala programmer year starting scala journey coding java yearswhy decide switch scala first place softwaremill well recognized scala community result working kept seeing client approaching u interesting project searching scala engineer sounded like interesting way learn something new become better professional along way also curious try functional programming see way dealing distribution asynchronicity state good promise bedescribe journey scala start learn keep developing today started reading book scala maybe even two got basic still felt far confident language tried coursera course quickly discovered type learning finally found colleague softwaremill agreed help mentoring breakthrough possibility frequent pair programming code review discussion got stuck something simply invaluable saw thing seen abstract mathematical idea used specific project scenario really clicked nowadays usually learn reading different blog post also softwaremill tech blog concept library pattern come across known yet lot list never seems difficult process moving new language sure loss fluency writing code used certain pace programming line code smoothly followed thought idea head suddenly gone seemed stumbled every step made idiom use kind structure case class trait join piece together trying anyway remember frustrating phasehow softwaremill help process think would make colleague apart mentoring mentioned also scala channel slack everyone always happy help went kind question like earth compiler error supposed mean refactor monster become nice readable piece code name funny ascii operator hard search google never left alonewhat would advice people thinking learning scala go recommend making sure got right support beforehand lot question blocker along way save lot time ask real person itis anything miss java ecosystem daily basis sometimes struggle understand concept hard time googling arcane operator miss java verbosity nostalgia kick started programming scala year ago previously java developer yearswhy decide switch scala first place working java mostly javaee several year back looking something fresh better way thing new paradigm etc time fp thing really known regular java developer started digging reading turned perfect addition toolbox back thendescribe journey scala start keep learning today unable use scala work due organizational constraint learning free time started coursera course led martin orderski creator language small pet project still lacking reallife experience language shortly decided start looking new job one goal find company would learn new thing preferably work scala joined softwaremill trigger learning new thing expanding knowledge got chance work scala real project since jvmrelated project working scalawhat difficult process moving new language despite popular opinion internet scala difficult language try mainly seamless compatibility java kind dual nature functional programming v objectoriented programming get hand dirty starting write javalike code scala immediate benefit get conciseness code first thing leave behind type annotation scala infer time still write code objectoriented way used java start learning immutability collection digging deeper functional way thing newer java version even easier functional programming concept already present might familiar eg lambda finally get hooked dive deep fp turn complex endless journey still free fallback javaoop style coding whenever need thathow softwaremill help process helped lot joined regular scala project right start exciting demanding hand love learning new thing big deal important learning scala got support highly scalaskilled coworkers company even though language popular yet could always reach help get tip trick course journey popularity language grown lot skilled people joined scala become main backend programming language softwaremillwhat would advice people thinking learning scala afraid functional programming incantation term understand first come java pretty much know scala already oop flavour get better every day mind seamlessly shift thinking scala way get online course famous coursera one next one learn ecosystem throw scala compiler project try joining scala project better way get real experience
55,Lobsters,scala,Scala programming,Monorepo or Multirepo? – Role-Based Repositories,https://blog.7mind.io/role-based-repositories.html,monorepo multirepo rolebased repository,monorepo multirepo rolebased repository summary problem monorepo good bad coherence cheap workflow isolation build time merge conflict vcs action take time multirepo good bad global refactorings integration solution idea reality sbt intellijidea fails run test dirty tool ammonite script coursier thing sbtprojectmatrix siracha p slide distage twitter update,monorepo multirepo rolebased repository summary lot code always hard find proper approach organize code typically engineer choose monorepo multirepo layout approach wellknown advantage disadvantage significantly affect team productivity possible establish combined workflow keeping advantage multirepo layout giving positive trait monorepo layout created draft tool implementing approach scala project using sbt problem monorepo good bad good point monorepo layout coherence always coherent codebase represents work may build product component together good guarantee compatibility make change build finish fine modify test repositorycomponent may affected change may always perform global operation globally single command sure discrepancy expected actual codebase state cheap workflow may use one ci job easily release deploy component together may easily refactor code significant shortcoming isolation monorepo prevent engineer using code use big project monorepo tendency degrade become unmaintainable time possible enforce strict code review artifact layouting preventing degradation easy time consuming build time case monolithic project monorepo build often test component together may addressed incremental compiler solve issue also may tackled keeping independent project within one repository case multirepo shorcomings see apply merge conflict team working monorepo environment maintain good vcs flow avoid interference good idea teach engineer use git properly discipline come free vcs action take time host huge project like chromium git may take lot time even perform checkout affect huge project huge team outside scope post multirepo good bad multirepo layout always considered first answer monorepo issue enforces strict isolation independent software component allows people quickly build independent component allows people interfere working independent project though multirepo disaster global refactorings affect shared component real pain even simple rename done one click may hard perform kind integration multiple component build comprehensive orchestration solution integration testing deployment setup sophisticated ci flow etc etc case release flow involves several component always real pain thing especially bad explicit implicit dependency component typical case usually least one shared library aka sdk many component aka microservices depend solution idea let assume product online auction platform example consisting several software component iam identity account management service billing billing service analytics analytics service bidding bidding service catalog item catalog service project use one shared sdk named sdk may also assume would several team working project example may assign sdk iam catalog project infrastructure team billing analytics finance team bidding store team imagine magic tool project allowing u choose project want work set corresponding environment prepares workspace component project prepare prepares workspace work billing analytics pull sdk well project prepare billing analytics prepares workspace work sdk iam catalog project prepare infrastructure prepares crossbuild project project prepare platform j jvm native infrastructure tool would need kind declarative description product stored repository rest flexible wish example case want keep source code one repository tool may pull component different repository take care commits etc etc may say repository role time may choose role wish activate may call approach rolebased repository rbr tool would solve problem need perform global refactoring may generate allinone project wish implement quick patch may generate project one component need integrate several component may choose exactly need etc etc reality unfortunately tool polyglot convenient easy use something done bazel far know good solution moment october thing become bad need scala especially bad need work crossplatform scala environment scalajs scala native sbt intellijidea sane way exclude project sbt build according criterion may write something like lazy val conditionalproject condition projectin else null ugly inconvenient hard compose crossplatform project always pain take least twice time build crossproject way example omit scalajs project build example idea frequently fails compile project sbtcrossproject plugin idea run test crossprojects sbt build become verbose hard maintain use crossprojects usually write least redundant expression per artifact created dirty tool prototype approach wish essentially library intended used ammonite script take declarative project definition emits sbt build file may find real project using case want play would need coursier installed clone project may try following command generates pure jvm project sbtgensc generates jvmjs crossproject sbtgensc j generates pure jvm project one component sbtgensc u distage currently sbtgen simple dirty prototype made team happy easy release need may choose work build test also surprisingly sbt startup time lot shorter generate project instead using sophisticated plugins avoid setting duplication encourage use sbtgen next time think organizing code try consider rbr flow even would write code generator may say sure disappointed thing sbtgen need support multirepository layout point source code need kept together build descriptor think functionality incorporated sbt plugins sbtprojectmatrix siracha make sbt project kinda configurable le rigid far actually need p idea role useful many different domain example may fuse microservices flexible monolith check slide may also read project distage module system automatic solver scala allows build multirole application may follow twitter update author similar tool netc j project approached recently may find tool think good proof showing idea viable think need new flexible polyglot build tool supporting rolebased approach bazel computational model suitable tool one day make another post
56,Lobsters,scala,Scala programming,The Hollywood Principle: Functors are Frameworks,https://www.toromtomtom.com/blog/2019/10/01/hollywood.html,hollywood principle functors framework,discussion lobster,recently reading thinking type constructor functional programming often type constructor correspond basic construct category theory functors least programming functor often described something mapped meaning type constructor f functor define function map f f b f b another way think functor f following value type f different value type apply function type b instead lift function another function type f f b lifting essentially thing mapping focus function rather value function applied emphasize swap parameter function lift f b f f b applying first parameter lift obtain lifted function type f f b interesting aspect think control application function long plain function type b apply value type get b however lift function functor apply f transfer responsibility calling original function functor example lift function option functor called lift list functor might called multiple time lift functor like future task might called much later time inversion control pretty much socalled call u call objectoriented programming hollywood principle associated using framework give control rather library retain control thus sense functional type constructor comparable oo framework find interesting way approach functors relative edit discussion lobster
57,Lobsters,scala,Scala programming,sttp2: an overview of proposed changes,https://blog.softwaremill.com/sttp2-an-overview-of-proposed-changes-8de23c94684f,overview proposed change,overview proposed change scala http client priniciple http request described sent remains broadening sttp namespace sttp client sttp tapir akkahttp group id package renaming starting request description ammonite quickstart github issue typesafer model responseas change circe always existing code work github issue change cat twitter github please share feedback github twitter doc also available,overview proposed changessttp scala http client always wanted getting even better last two year got quite lot feedback work sttp bumping major version good opportunity fix problemsthere quite lot breaking change however mostly require mechanical fix priniciple http request described sent remains samebroadening sttp namespacesttp really good name scalarelated http library want broaden meaning scala http client api httprelated scala apis mean sttp include sttp client describing sending request sttp tapir describing endpoint converted server openapi documentation client sttp model upcoming standalone project module sttp repository last project shared dependency client tapir model quite simple far least fully typesafe http metamodels found akkahttp practical side change mean group id sttp client artifact comsoftwaremillsttpclient instead comsoftwaremillsttpthe package sttpclient instead comsoftwaremillsttpanother unplanned change renaming starting request description sttp basicrequest turn good idea name value package caused confusion past simply stopped working sttp toplevel package itselfthis mean ammonite quickstart use sttp client becomes import ivy comsoftwaremillsttpclient import sttpclientquickbasicrequestget uri http httpbinorgip send functional change renames make space tapir model see also github issue modelas already mentioned model separate project also http concept represented class statuscode proper type instead type alias value class header proper type used instead stringsmultipart renamed part generifiedit possible require change code however mostly mechanical updatesresponseas changesone main source confusion parsing response body json using eg circe type responsebody either string either deserializationerror iocirceerror needed represent http serverclient error response code well possible parsing failuresanother problem flexibility parsing body case http clientserver error response limited default could get byte array string somewhat improved parseresponseif mechanism removed basic problem remainedthat assumption body parsed get full flexibility expense slightly verbose type responseas type describes parse body case error case success want represent error either need use responseas either string example either hardcoded need explicitly mentioned type however still reasonable default default asstring response description type responseas either string string nothing return left response code right otherwise also asstringalways always return string type responseas string nothing json improved type hierarchy make clear might two kind error returned def asjson b responseas either responseerror iocirceerror b nothing either signal error might two type error httperror response deserializationerrorexisting code work type changed example val oldrequest request string nothing sttpget uri http examplecom val newrequest request either string string nothing basicrequestget uri http examplecom finally possible dynamically decide body parsed depending status code header using frommetadata base description see github issue detailsother changesredirect loop throw exception instead returning response status code json integration return either responseerror b instead throwing exception case parsing fails case reduced conflict cat importing sttpclient cause namespace clash id type alias renamed identity monaderror moved monad packagecreating functional backends wrapped corresponding effect type creating backend sideeffects creating thread pool affect cat zio monix scalaz backendsbackendclose return f unit f lazy wrapper iotask might mean need update code effect evaluated probably couple change coming stay tuned twitter githuband please share feedback either comment github issue twitter message elsewhere would great could try fullyfunctional passing test version available central repository doc also available try project let u know work
58,Lobsters,scala,Scala programming,Painlessly passing message context through Akka Streams,https://blog.softwaremill.com/painlessly-passing-message-context-through-akka-streams-1615b11efc2c,painlessly passing message context akka stream,painlessly passing message context akka stream jason leung unsplash committablemessage flow flow flowwithcontext sourcewithcontext detaching context source example sourcewithcontext source map mapasync reuniting tuple assource sourcewithcontext source map mapasync assource restriction sourcewithcontext map mapasync collect filter filternot grouped sliding mapconcat mapcontext via part akka source documentation flowwithcontext via flowwithcontext flowwithcontext msgcontext myflow msgcontext full example streaming cassandra event journal well described alpakkakafka documentation poll createstream flow restartsource sourcefromfuture sourcefromtuples sourcewithcontext via projectionflow projectionflow assource journaloffsetdao section akka documentation conclusion sourcewithcontext flowwithcontext,painlessly passing message context akka streamsphoto jason leung unsplashin stream processing pipeline may bump similar problem kind rich message envelope contains business data extra metadata need process data time pas whole message stream metadata needed later without extra tool need directly like following example read committablemessage kafka pas flow value processed pas whole initial message committed using metadata couple problem design code flow polluted kafka import make application logic directly dependent infrastructure layerthe flow difficult reuse outside kafkabased stream also uncomfortable test itthis issue spotlight quite long time finally since akka working solution called flowwithcontext sourcewithcontextdetaching contextakka stream provides special kind source aware separate metadata called context data source allow use combinators operate data hiding rest informationexampleas see sourcewithcontext used wrapper kind source provide recipe decomposition stream element tuples data contextnow stream look like context data def processdata data string processdataasync data string future result map processdata mapasync processdataasync reuniting tuplewhen processing time bring context back hiding done assource method convert sourcewithcontext normal source tuplessourcewithcontext map processdata mapasync processdataasync assource source string msgcontext notused handle context needed example commit message register metric etcrestrictions stream operation available sourcewithcontext fact option quite limited map mapasync collect filter filternot grouped sliding mapconcat mapcontext via hopefully combinators available future check part akka source documentation updatesflowwithcontextthe via combinator give u possibility plug custom flow encapsulate sophisticated logic however implementation flowwithcontext see flow type flowwithcontext however clean dependency msgcontext put application logic layer belongs technical dependency provided externally myflow msgcontext call like see quite elegant kind inversion controlfull example streaming cassandra event journalin beginning article mentioned one motivating usecases context passing carrying kafka offset stream case well described alpakkakafka documentation need copy instead show different casein example stream event stored cassandra using akka persistence let write projection consumes event processingfirst aware streaming cassandra effective streaming kafka underlying consumer actually poll database partitioning scalability manage offset commits manually however following solution good enough many case full example createstream function reused build event projection stream projection provide unique identifier flow message processingthe restartsource outer wrapper guarantee case error consumer try reconnect read last committed messagethe inner source starting sourcefromfuture creates stream event read cassandra journal convert message tuples event metadata sourcefromtuples wrapper convert stream sourcewithcontext allowing via projectionflow provided projectionflow message processing contains dependency cassandra metadata flexibly reused tested processing call assource bring back context finally committedthe implementation journaloffsetdao relevant sort simple daoif want know reading event tag cassandra check section akka documentationconclusionsthe sourcewithcontext flowwithcontext abstraction solve important problem hesitate use keep good separation concern
59,Lobsters,scala,Scala programming,"From @Transactional to type-safe, reasonable transactions",https://blog.softwaremill.com/from-transactional-to-type-safe-reasonable-transactions-a5019906245e,transactional typesafe reasonable transaction,transactional typesafe reasonable transaction lack precision framework needed propagating transaction thread boundary tracking transaction important part business logic precisely track scala slick doobie see describe value java record multiple query compose flatmap inside single transaction reason locally combining sideeffects business decision lift nesting type create description summary implicit propagation explicit immutable data structure using library understand separating description interpretation bootzooka project,transactional typesafe reasonable transactionsevery find working relational database mean working transaction specifying transaction boundary transaction start committhere number approach tame transaction manual fully automatic popular one java world transactional annotation available different flavour javaee springby annotating method transactional specify execute within scope running transaction look simple attractive annotation approach declarative concerned boring detail transaction implementation transactionrelated logic code transaction started committed framework finally transactional context automatically propagated bean invocation might seem convenient one thing le worry really reality quickly verifies worked javaeespring system chance hit problem missing transactional context surprising transaction boundary without going much detail main problem transactional annotation lack precision without looking code entirety sure transaction exactly begin commit transactional method might define transaction boundary might take part broader transaction possible differentiate two scenariosa framework needed decorate code transactionhandling aspect aop work annotate nonprivate method invoke frameworkmanaged proxy invoking method unmanaged bean instance interact transaction context invoking public method another method managed bean propagating transaction context across thread boundary business logic asynchronous tricky leastand morethe three problem identified local reasoning need framework working multithreaded codeare general pain point many javabased system often solved using functional programming precisely library written using style hence alternative know maybe offer something better come transaction tracking transactionsthe crucial observation transaction might seem like technical detail fact usually important part business logic done inside transaction operation performed atomically stored durably isolation leaving system consistent state word acid real impact business functionality system developalso transaction isolation level consequence kind business guarantee system offer consequently might beneficial precisely track operation grouped transaction commitsrollbacks happen often tracking done using type thus verified compiletime let try scala typesafe functional programming language two popular library working relational database slick doobie see comparison feature including alternative although vary detail based concept separating description problem interpretation problem querying updating database using slick doobie first thing need describe database queriedupdatedthe description database operation represented value data class case doobie type value connectionio io need connection database case slick dbioaction simplicity going forward focus doobie alonein scala data class called case class similar lombok value upcoming java recordsfor example description query reading list person object person table would look follows creating instance connectionio class side effect description operation want perform immutable data structure shared freely across thread reused different contextswhat next point need interpret description sideeffects actually run queriesupdates need connection pool way startcommit transaction doobie functionality embedded transactor transactor instance interpret connectionio io sideeffect slick database class manages connection pool contains run method interpret dbioaction future important difference future io represent sideeffecting computation result value type tyou say wait value type io supposed run query transaction getting back result list person yes happening however running sideeffects yet io datatype also description time arbitrary sideeffects connectionio lazily evaluated need interpreted final result side effect actually happennotice io dealing sideeffects different level connectionio value description single series operation run database part transaction io value description single series sideeffect single sideeffect might running entire database transaction consisting number queriesupdates also thing sending email making http service callonce using type system keep track important notion first keeping track creating query description connectionio second keeping track arbitrary side effect io point need run side effect described io invoke builtin interpreter might seem going lot level indirection indeed two additional stage interpreting query description transactional side effect interpreting io real side effect also gain power getting possibility manipulate description run back control codein realworld system encounter first level interpretation connectionio io frequently second io side effect typically preferably done end world eg main methodnotice thanks additional level indirection transaction context propagate compose description operation first pas transact want run themmultiple queriesso far run single query impressing useful main power connectionio description compose take two description create value describes running sequentially done using flatmap note second query may rely result first ignore result insert number row affected happens compose two connectionios interpret using transact transactor run inside single transaction want use concrete implementation databaserelated effect connectionio dbioaction code always create type alias eg type transactional connectionio use insteadbecause connectionios value immutable data class freely reused shared among multiple thread invocation framework need instrument code create query description anywhere get lot freedom flexibility foremost abstraction possibility defining transactionrelated code example code fragment yield connectionio value appearing codebase twice simply extract constant parametrised methodusing mechanism described absolutely precise transaction begin commit long value type connectionio sure dealing single sequence database query yet composed transactional unit see transact transactor place transaction begin execute described query commitother operation might run inside transaction even encapsulating call later sure transaction happen precisely visible codewe reason locally transaction boundary without know given code fragment used called fromcombining sideeffectswhen determining boundary transaction important aspect deciding side effect happen example registering user might two side effect inserting row databasesending welcome emailas email transactional system run together atomically fail independently prepared one fail succeed couple possibility sequence operation different characteristic choosing one ultimately business decision minimises risk inserting user sending email fails still possible send email store user information moreover resourcecostly solution database connection blocked whole duration sending email risk storing user information sending welcome email resourcefriendly always sends email making sure engage user risk storing user information even simple case user information database already unnecessarily allocates database connectionwhichever route choose good news choice expressible using typesafe approach missing one piece though need way lift arbitrary sideeffect scope transaction need way wrap io connectionio luckily possible using ioto connectionio methodthis might bit puzzling first let take look couple exampleswe first define sideeffect printing console lift connectionio interpret inside transaction notice result equivalent original sideeffect running result start transaction allocating connection b run side effect print console c commit transactionwhat email example would look follows create description database operation sequence running query lifted sideeffect run transaction similar longer lift sideeffect connectionio want run inside transaction depending sequence io value get either note order create description important completely arbitrary description created anywhere important final sequencing operation type gymnastics gain clarity preciseness full control sideeffects happen reading code know exactly happen order code run context affect behaviournesting typesgoing might end nesting two type mentioned connectionio io let look possibilitiesfirst value type io connectionio represent well reading type description sideeffecting computation result return description database query result value type tfor example might http service call sideeffect depending result call construct query construct without running compose result query ultimately run transaction flattening side effect using flatmap b shorthand notation aflatmap b mapflatten equivalent flatmap also type going way round connectionio io would reading type description query result description side effect result value type tfor example might read data database depending result create description sideeffect notice however sideeffect necessarily run inside transaction create description inside transaction result use calling code summaryconsidering problem demarcating transaction boundary first looked popular declarative imprecise noncomposable solution next inspected alternative working connectionio io value description sideeffecting operationstransactions provide important business property system hence attempting hide aspect code instead relying implicit propagation transactional context make concept explicitapart benefit working immutable data structure work great multithreaded environment using library framework also able understand given fragment code without know context called communicate clearly intent transaction boundary interact sideeffectsone might say using standard javaee almoststandards spring safer library higher risk becoming abondoned true hand cost swapping library small dealing loosely coupled dependency allencompassing frameworkadditionally get quick feedback compiler case use value incorrect type incorrect connectionio io usagethe type take bit time getting used come term idea separating description interpretation looking type method value quite precisely determine kind effect part transaction method side effect work practice nothing beat looking real code purpose might want take look bootzooka project template scala microserviceweb application us approach described access database
60,Lobsters,scala,Scala programming,Human-readable case class diffs,https://blog.softwaremill.com/human-readable-case-class-diffs-c707e83e08a2,humanreadable case class diffs,humanreadable case class diffs diffx scalatest create library easy use default configuration easily extended collection support straightforward way excluding part product comparison diffx github repository,humanreadable case class diffsbtw dog awesome scala developer tend use lot case class due concise syntax role functional programming approach comparing case class instance typical operation especially test however quite cumbersome show better assertion message comparison without diffx scalatest one popular testing framework scala use shouldbe matcher compare case class function case assertion failure show u expected actual object sound good really closer look reveals hood us tostring method serialize case class instance cause following problem case class contain multiple level nesting hard read printed within single linethere way differentiate empty list list empty stringassuming case class inside disordered collection uniquely identified id way use id pair case class comparison process intelligentlynote sometimes use term product another name case classbecause decided create library would produce pretty diffs based product structure tried stick following assumption simple useworking box default configuration easily extendedcollection supporta straightforward way excluding part product comparisonlet discus point detailseasy usenote since core diffx mechanism comparison use available testing library adapter see enduser usage right support scalatest worry working adding morethere two way start using diffx either importing diffmatcher scope extending diffmatcher trait test first let u define simple case class used example scalatest defining matcher matchto used following way run test enjoy colorful easy grasp diffs best thing readability decreasing linearly compare bigger structure seen first example top page default configuration easily extendedwe ootb support plain type product type coproduct type collection encounter custom type default behavior serialize string approach easily overrided specifying implicit diff instance given type example let u assume want compare localdatetime instance date iso format rather stringscollection supportfor indexed collection diffx default compare element index element missing either side comparison proper message perspective left object emittedthe story little bit different dealing set indexed collection indexing key compare item compare without knowing relation case difference result reporting object missing additional message might helpful luckily way alter behaviorobjectmatcher type class purpose tell whenever two instance considered object domain perspective whereby compared eg would like treat two instance object share value name property would specify following objectmatcher said one might also want compare list welldefined domain relation rather index particularly useful collection different order element achieve behavior need modify diff type class instance list straightforward way excluding part product comparisonthe easiest way ignore part case class specify identical instance diff type class given typehowever approach quite significant downside specify exact path structure would like ignore work based type applied across whole structure also userfriendly one ignore two fieldsthe much powerful way exclude field comparison calling ignore method diff instance since diff instance immutable creates copy modified logic use instance explicitly still would like use implicitly first need summon instance diff type class using derived type class wrapper derived diff person thanks trick later able put modified instance diff type class implicit scope whole process look follows ignore method take lambda given type ignored field u implemented top scala macro refactoring friendly typesafe ignoring multiple field simple calling ignore method multiple time ignore method operates path rather type good precision specifying ignored field addition added macro extension used ignore method traverse collection option eithersif would like give try check diffx github repository
61,Lobsters,scala,Scala programming,Fixtures in Scala — three simple ways to reduce your test code boilerplate,https://blog.softwaremill.com/fixtures-in-scala-three-simple-ways-to-reduce-your-test-boilerplate-5eb60ffe883,fixture scala three simple way reduce test code boilerplate,test fixture documentation chocolate factory using withfixture scalatest using trait using function,test fixtureregarding scalatest documentation test fixture composed object artifact file socket database connection etc test use work multiple test need work fixture important try avoid duplicating fixture code across test code duplication test greater drag test refactoring actual production codethe test fixture might used prepare whole context required test caseinitialize repository service actor system database connection etcgenerate test datatear app disconnect database take another action testin word test fixture way connect test required part application case integration test chocolate factorylet consider demo application chocolate factoryin simple example thechocolate consists chocolatebar packaging also adservice provide text printed packaging packageprinter produce actual packaging given size chocolatebar finally chocolatefactory handle whole process produce chocolatebar call packageprinter packaging return chocolateeven simple example initializing test case might take line code chocolatefactory initialization change teardown action required need change code every test using withfixture scalatestscalatest provides base test class handle fixture example orgscalatestfixtureflatspec might used instead orgscalatestflatspec require implementation withfixture method prepare fixture besides need provide definition fixtureparam type either implement class name fixtureparam make type alias approach drawback need make additional effort share fixture across multiple test suite problematic easy way call withfixture different testcasespecific parameter may eventually make fixtureparam alias function type seems complicating withfixture test case using traitsanother approach us custom trait define required part application might useful especially case application defined trait module want define part fixture separate trait mix appropriately specific test casesin example fixture defined testapp trait need create testapp object test nice syntax even code mix multiple trait concise example new testapp demodata besides need call test explicitly fixture fixture independent part applicationthis approach significant drawback well end day may face complex trait structure fixture difficult reason need know service provided given fixture expressed directly test value parent traitthere easy way parametrize test case may provide additional abstract value trait risk random nullpointerexception broken val initialization complex class structure scala compilerfinally easy way implement teardown kind using functionsyou may use function define test fixture well body fixture function similar case withfixture function scalatest however small difference big advantage approachbut let start example first control declaration fixture function see example add additional parameter provide function name need keep test fixture unit parameter able execute testbesides easily share fixture function across multiple test suite use multiple fixture within single suite well free base class convention flexible approachthe weakness contrast two approach ability mix multiple fixture simple mechanism like trait mixin need use fixture explicitly invent new way combining
62,Lobsters,scala,Scala programming,Scala War Stories with Paul Phillips (2013),https://www.youtube.com/watch?v=v1wrWQcqLpo,scala war story paul phillips,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scala war story paul phillips youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scala war story paul phillips youtube
63,Lobsters,scala,Scala programming,Functional Scala 2019 — London Edition: A free 2-day conference for all things Scala,https://www.eventbrite.com/e/functional-scala-2019-london-edition-tickets-71645713257,functional scala london edition free conference thing scala,note must ticket attend already seating capacity reserved paid ticket help cover expense open free ticket become available existing ticket holder attend official event site http functionalscalacom speaker,note must ticket attend already seating capacity reserved paid ticket help cover expense open free ticket become available existing ticket holder attendcheck official event site http functionalscalacomfunctional scala london edition conference devoted using powerful feature library scala programming language build robust modern software easier understand maintainat conference find talk workshop panel leading open source contributor commercial developer researcher academiaagenda speaker announced ongoing basisspeakersjohn de goeswiem zine elabidineitamar ravidjakub kozłowskipaul phillipsadam fraserpierangelo cecchettochetan khatridejan mijicpierre ricadatalexey soshinoleg nizhniktom sydney kerckhovemore
64,Lobsters,scala,Scala programming,Squeezing extra productivity out of Ammonite Scala REPL,https://blog.softwaremill.com/squeezing-extra-productivity-out-of-ammonite-scala-repl-b4e4001cca07,squeezing extra productivity ammonite scala repl,squeezing extra productivity ammonite scala repl bill oxford unsplash get ammonite link http ammoniteio olderscalaversions configure ammonite predef file preload common dependency available github alternative scala fiddle http wwwjetbrainscomhelpideaworkwithscalaworksheetandammonitehtml next,squeezing extra productivity ammonite scala replphoto bill oxford unsplashdevelopers often need write code snippet check idea help colleague scala offer powerful repl allows running quick sample idea make much smoother useget ammonitethis first thing go link install repl scala version scala recommended example library yet released scala http ammoniteio olderscalaversionsconfigure ammonite predef file preload common dependenciesammonite load predefined script startup excellent feature allowing initialize dependency utils example predefsc file put ammonite import ivy orgtypelevel cat catsimplicitsimport ivy iomonix import ivy devzio import ivy orgtypelevel import ivy orgscalatest orgscalatestimport ivy orgscalacheck import ivy comgithubchocpanda import ivy iochrisdavenport import scalaconcurrentexecutioncontextimplicitsglobalimport scalaconcurrentdurationimport scalaconcurrentfutureimport scalautil failure success import scalaconcurrentawaitimport orgscalacheck arbitrary gen import orgscalacheckmagnoliadef randomobj arbitrary implicitly arbitrary arbitrarysamplegetcurrent version predef file available githublet see got cat zio monix fiddling effect using functional programming abstractionsscalatest scalacheck scalacheckmagnolia assertion random generator scalacheckmagnolia randomobj util defined script instantly create instance case class even complex nested one case class user name string age int address string redefined class user randomobj user user user import useful common typesthe global execution context futurerelated operationsnow need run amm terminal start powercoding alternativesbe sure check scala fiddle web tool similar purpose nice set library quickly includeit possible use ammonite repl sbt console decide able use dependency available project well project class however approach requires manual intervention buildsbt file project compilingthere also intellij idea worksheet integrated ammonite also requiring buildsbt intervention http wwwjetbrainscomhelpideaworkwithscalaworksheetandammonitehtmlwhat next idea repl flow improved maybe suggestion else added predef file please leave comment
65,Lobsters,scala,Scala programming,Easy Parallel Programming with Scala Futures,http://www.lihaoyi.com/post/EasyParallelProgrammingwithScalaFutures.html,easy parallel programming scala future,easy parallel programming scala future creating future awaiting future creating multiple future parallel computation parallel http request single http request sequential http request parallel http using future writing parallel web crawler fetching link sequential crawling parallel crawling conclusion,easy parallel programming scala futuresthe scala programming language come future api future make parallel programming much easier handle working traditional technique thread lock callback blog post dive scala future use work give much flexibility leverage parallelism codeabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming easiest way start trying future via ammonite scala repl begin install ammonite sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm open repl using amm classbased amm classbased loading welcome ammonite repl scala java scalaconcurrent tab await channel promise awaitpermission delayedlazyval syncchannel awaitable executioncontext syncvar batchingexecutorstatics executionexception blocking blockcontext future duration import scalaconcurrent executioncontextimplicitsglobal duration import scalaconcurrent note classbased flag necessary order use future repl flag necessary using scala larger project eg built mill sbt creating future basic building block scalaconcurrentfuture imported simply future future futuretype scalaconcurrentfuture future define lightweight task run thread pool performing computation returning value imported default thread pool executioncontextimplicitsglobal also define thread pool want customize create future use future syntax val f future hello world f future string future success see future already completed printed make sense computation simple would complete almost instantly create future take bit longer using threadsleep val f future threadsleep hello world f future string future completed see future listed completed make sense since take millisecond run however line code val f completes instantly create future run background thread pool continue thing workingawaiting future easily make future perform work via side effect writing disk storing data global variable etc simplest common case future computation return single value end future block want return value future use awaitresult get val f future threadsleep hello world f future string future completed awaitresult f durationinf string awaitresult wait future complete extracting value see val f complete instantly aawaitresult waited second millisecond future became ready even creating single future run background useful need call awaitresult immediately instead code thing future running calling awaitresult work done finally need make use value returned futurecreating multiple future fact future run background mean run multiple future running consider following code slowfunction standin computeintensive operation def slowfunction int threadsleep hello world println slowfunction println slowfunction expect take second run call slowfunction happens sequentially verify using time repl builtin function time def slowfunction int threadsleep hello world println slowfunction println slowfunction unit finiteduration nanosecond see took nanosecond second expected using future instead spin multiple background process running two slowfunction call parallel waiting result together time def slowfunction int threadsleep hello world val future slowfunction val future slowfunction println awaitresult durationinf println awaitresult durationinf unit finiteduration nanosecond time see printed almost simultaneously secnds since two future slowfunction call run parallel backgroundparallel computation working dummy threadsleep function simple nt reflect really daytoday programmer let u consider slightly realistic example want run expensive hash function bcrypt bunch file case every file post folder blog import ivy orgspringframeworksecurity import orgspringframeworksecuritycryptobcryptbcrypt val hash duration time val p oswalk ospwd post osisfile p yield println p bcrypthashpw osreadbytes p bcryptgensalt microoptimizing scala codemd conduct good programming interviewmd scala vector operation nt effectively constant timemd work subprocesses scalamd functional programming md userslihaoyigithubblogpostammonitereleasesjson hash indexedseq string arrayseq duration finiteduration nanosecond use import ivy pull bcrypt implementation orgsprintframeworksecurity use every file ospwd post folder note binary content file string hashing since particular bcrypt library work string arbitrary byte array case see process overall took second nanosecond let see long take running computation parallel future val p oswalk ospwd post osisfile p yield val future p oswalk ospwd post osisfile p yield future println p futuresmap awaitresult durationinf import ivy orgspringframeworksecurity import orgspringframeworksecuritycryptobcryptbcrypt val hash duration time val val future p oswalk ospwd post osisfile p yield future println p bcrypthashpw osreadbytes p bcryptgensalt futuresmap awaitresult durationinf microoptimizing scala codemd conduct good programming interviewmd scala vector operation nt effectively constant timemd work subprocesses scalamd functional programming md userslihaoyigithubblogpostammonitereleasesjson hash indexedseq string arrayseq duration finiteduration nanosecond note earlier two future awaited individually whole list future val future map await see total second second nanosecond expected given future running background threadpool able utilize cpu core order run parallel many case using future easy way make use parallelism minimal extra effort threeline code change unlike thread relatively expensive generally want stay thread performancememory reason future cheap easily without issue generally need worry many allocateparallel http request apart cpubound task future useful parallelizing slow networkbound operation wella single http request example consider following code make http request fetch link wikipedia page val resp requestsget http enwikipediaorgwapiphp params seq action query title albert einstein prop link format json val link ujsonread resptext render indent link string continue plcontinue continue query page pageid n title albert einstein link n title century press archive n title galaxy redshift survey extract actual list link follows val resp requestsget http enwikipediaorgwapiphp params seq action query title albert einstein prop link format json val link ujson read resptext query page obj value filter objcontains link flatmap link arr map title str toseq link seq string seq century press archive galaxy redshift survey priori posteriori aage bohr aarau aargau abba eban abdominal aortic aneurysm abdus salam absentminded professor link list pagetitles feed back title param call apiphp fetch page metadata simplicity let ignore fact wikipedia return first link page defaultsequential http request wanted fetch outgoing link page could simply repeat code loop val nextlinks duration time link link yield println link val resp requestsget http enwikipediaorgwapiphp params seq action query title albert einstein prop link format json ujson read resptext query page obj value filter objcontains link flatmap link arr map title str century press archive galaxy redshift survey priori posteriori abdominal aortic aneurysm abdus salam absentminded professor nextlinks seq iterable string list view century press archive galaxy redshift survey abdus salam absentminded professor view century press archive galaxy redshift survey abdominal aortic aneurysm abdus salam duration finiteduration nanosecond see process took second nanosecond page link fetched sequential http request one otherparallel http using future future fetching parallel val nextlinks duration time val future link link yield future println link val resp requestsget http enwikipediaorgwapiphp params seq action query title albert einstein prop link format json ujson read resptext query page obj value filter objcontains link flatmap link arr map title str toseq futuresmap awaitresult durationinf priori posteriori absentminded professor abdus salam century press archive aargau galaxy redshift survey nextlinks seq iterable string list seq century press archive galaxy redshift survey abdus salam absentminded professor seq century press archive galaxy redshift survey abdominal aortic aneurysm abdus salam duration finiteduration nanosecond spinning new future link link maping list future awaitresult get final output second total duration dropped second note actual request may happen different order due parallelism eg previously saw century press archive fetched first time priori posteriori result aggregated back order requested returned mean long future perform side effect simply return single return value need worry fact running parallel arbitrary orderswriting parallel web crawler far learned use future variety way running code background running two background task parallel running arbitrary list parallel task whether compute networkbound aggregating result leverage skill show future solve one common task common interview question writing parallel web crawler let u assume task follows given title page wikipedia eg albert einstein write program fetch set page within certain number depth link root page performance parallel several way approaching exercise essentially implement traversal graph wikipedia page link traversal either breadthfirst depthfirst many way could implement parallelism consider one approach breadth first traversal parallelized using futuresfetching link begin let u take code earlier fetch link single wikipedia page put function def fetchlinks title string seq string val resp requestsget http enwikipediaorgwapiphp params seq action query title title prop link format json ujson read resptext query page obj value filter objcontains link flatmap link arr map title str toseq defined function fetchlinks call one page like fetchlinks albert einstein seq string list century press archive galaxy redshift survey priori posteriori aage bohr aarau aargau abba eban abdominal aortic aneurysm abdus salam absentminded professor fetchlinks singapore seq string list sg squadron republic singapore air force summit nonaligned movement singapore mutiny national service riot singaporean general election merger referendum singapore race riot singapore race riot singapore sequential crawling next write function simple breadthfirst traversal pagelink graph def fetchalllinks starttitle string depth int val seen collectionmutableset starttitle var currenttitles set starttitle depth val nexttitlelists title currenttitles yield fetchlinks title currenttitles nexttitlelistsflattenfilter seencontains currenttitlesforeach seenadd seentoset call various page traversing pagelink graph various depth fetchalllinks singapore set string set singapore fetchalllinks singapore set string hashset merger referendum singapore national service riot summit nonaligned movement squadron republic singapore air force race riot singapore singapore mutiny singapore race riot singapore singaporean general election sg fetchalllinks singapore set string hashset telephone number singapore summit iranian petrol rationing riot cougar singapore mutiny singaporean municipal commission election ai singaporean municipal commission election abdelillah benkirane k fazlul huq little india riot ad merger referendum singapore singaporean municipal commission election eurocopter cougar singaporean municipal commission election maintain explicit queue link process instead simply process depth link depth link etc get depth wantparallel crawling adding parallelism simple performing batch fetch parallel using future aggregating result using awaitresult val nexttitlelists title currenttitles yield fetchlinks title val future title currenttitles yield future fetchlinks title val nexttitlelists futuresmap awaitresult durationinf final code look like def fetchalllinksparallel starttitle string depth int val seen collectionmutablesetempty string var currenttitles set starttitle depth val future title currenttitles yield future fetchlinks title val nexttitlelists futuresmap awaitresult durationinf currenttitles nexttitlelistsflattenfilter seencontains currenttitlesforeach seenadd seentoset use function way nonparallel version returning result fetchalllinksparallel singapore set string set singapore fetchalllinksparallel singapore set string hashset merger referendum singapore national service riot summit nonaligned movement squadron republic singapore air force race riot singapore singapore mutiny singapore race riot singapore singaporean general election sg fetchalllinksparallel singapore set string hashset telephone number singapore summit iranian petrol rationing riot cougar singapore mutiny singaporean municipal commission election ai singaporean municipal commission election abdelillah benkirane k fazlul huq little india riot ad merger referendum singapore singaporean municipal commission election eurocopter cougar singaporean municipal commission election case output two function identical fetchalllinks singapore fetchalllinksparallel singapore boolean true fetchalllinks singapore fetchalllinksparallel singapore boolean true fetchalllinks singapore fetchalllinksparallel singapore boolean true except parallel version proceeds significantly faster time fetchalllinks singapore finiteduration nanosecond time fetchalllinksparallel singapore finiteduration nanosecond time fetchalllinks singapore finiteduration nanosecond time fetchalllinksparallel singapore finiteduration nanosecond time fetchalllinks singapore finiteduration nanosecond time fetchalllinksparallel singapore finiteduration nanosecond depth parallel crawler take instead depth parallel crawler take instead depth parallel crawler take instead could significant amount speedup webcrawler used realworld scenario requiring threeline code change enable parallelism written amount parallelism get still suboptimal one http request take long time parallel http request batch may completed next batch request start even though page already known thread thread pool already free improving fetchalllinksparallel better handle case left exercise readerconclusion blog post introduced usage scala future way easily starting parallel background task aggregating result covered creating waiting future running two future parallel using future parallelize computebound code hashing file using future parallelize networkbound http code extending parallel http code parallel web crawler performs parallel breadfirst traversal wikipedia pagelink graph blog post intentionally cover know future apart parallel programming future also good model asynchronous code useful eventbased code especially highperformancehighconcurrency scenario even regarding parallelism lot learn configuring threadpools executioncontexts controlling parallelism eg get ratelimited service querying nevertheless many common use case presented enough hopefully blog post give good feel future used simplify parallel programming make parallelism easy intuitive complete code listing parallel web crawler reproduced import scalaconcurrent executioncontextimplicitsglobal duration def fetchlinks title string seq string val resp requestsget http enwikipediaorgwapiphp params seq action query title title prop link format json ujson read resptext query page obj value filter objcontains link flatmap link arr map title str toseq def fetchalllinksparallel starttitle string depth int val seen collectionmutablesetempty string var currenttitles set starttitle depth val future title currenttitles yield future fetchlinks title val nexttitlelists futuresmap awaitresult durationinf currenttitles nexttitlelistsflattenfilter seencontains currenttitlesforeach seenadd seentoset val fetched fetchalllinksparallel singapore fetched set string hashset singaporean municipal commission election november paris attack ai war fort canning hill summit singaporean municipal commission election iranian coup airbus iraq abdelillah benkirane wikipedia maintenance fansur counterterrorism thai military rebellion iranian constituent assembly election k fazlul huq abdelilah benkirane thai popular uprising celcom wikipedia categorization ayer rajah author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
66,Lobsters,scala,Scala programming,CloudState - Towards Serverless 2.0,https://cloudstate.io,cloudstate towards serverless,standard effort reference implementation knative grpc akka cluster graalvm kubernetes section documentation join u lightbend akka crdts knative section documentation,predict serverless computing grow dominate future cloud computing bringing stateful service fast datastreaming power reactive technology cloud native ecosystem break final impediment standing way serverless platform generalpurpose application true elastic scalability high resilience global deployment kubernetes ecosystem serverless movement today focused automation underlying infrastructure extent ignored equally complicated requirement application layer move towards fast data streaming eventdriven stateful architecture creates sort new challenge operating system production stateless function great tool place cloud computing toolkit serverless reach grand vision industry demanding serverless world allowing u build modern datacentric realtime application ca nt continue ignore hardest problem distributed system managing data cloudstate project take challenge pave way serverless consists two thing standard specification protocol user function backend tck reference backend set client api library different language cloudstate reference implementation leveraging knative grpc akka cluster graalvm running kubernetes allowing application scale efficiently manage distributed state reliably scale maintaining global local level data consistency opening whole range new addressable usecases read started cloudstate project limitation current serverless platform way cloudstate addressing new usecases open section documentation join u making vision reality jonas bonér cto cofounder lightbend creator akka talk need serverless evolve handle state kubecon barcelona cloudstate specification protocol reference implementation providing distributed state management pattern suitable serverless computing current supported envisioned pattern include event sourcing conflictfree replicated data type crdts keyvalue storage messaging cqrs read side projection cloudstate polyglot mean service written language support grpc language specific library provided allow idiomatic use pattern language cloudstate used either combination service mesh envisioned integrated serverless technology knative read design architecture technique technology behind cloudstate section documentation watch livecoding screencast james roper learn
67,Lobsters,scala,Scala programming,dotty scala3 adoption report: easy so far,http://appddeevvmeanderings.blogspot.com/2019/08/scala3-dotty-report-easy-to-adopt.html,dotty adoption report easy far,dotty adoption report easy far,dotty adoption report easy far decided use dotty aka scala small machine learning nlu project get feel new feature ecosystem component try keep code simple write understand tend avoid use advanced type feature ok avoid purist fp thinking mind little boilerplate feedback come project complete adoption easy read dotty slide hour read dotty doc site another hour far dotty feature chosen easy adopt eg implicits new syntax via given dotty experimental compiler found bug dotty team fixed within new feature using new feature including implicit function immediately added value objectless toplevel code extension method adts via enums unionintersection type export feature easy learn adopt quickly became used assist gitter dotty channel complex feature dropped use better documented fully implemented sbt support use le macro using sbt syntax extension dependency buildsbt approach worked cat circe zio library needed roadmap team seems listened community migration support backward compatibility editor support box topic discussed multiple venue roadmap schedule appears provide generous onramp period consistent communication feature development process schedule graal dotty related sbt running graal use graal much possible know graal sbt update compilation delta full fast graal also give path along scalanative towards mobile device running io android oracle heavily investing graal allowing graal heavylifting mobile smart move probably part unspoken plan scala relevant mobile device side note graal renewed faith jvmbased language like dotty new syntax feature straightforward pick perhaps code us simpler scala feature conversion may relatively easy although costfree hopefully runtime performance excellent ga experience may overlap large complex code base build maintain initial reaction transition scala may bump along way appear earthshattering overly difficult scala team seem taking reasonable step make easy point think scala success related execution plan v lack strategy adopting dotty back challenge always represent data function way compose fast run new tool toolbox help note project depends zio xtract circe cat
68,Lobsters,scala,Scala programming,Scala Almost Succeeded,https://medium.com/@fommil/scala-almost-succeeded-c3b1028b02c5,scala almost succeeded,still could pain point build compile time http wwwtriplequotecomhydra tooling complexity looking good really hard hire scala developer java caught osborne effect http wwwredditcomrhascalator,still couldscala academic language attracted attention industry promised better scalability multicore computer time java stallingthen nowhere around scala experienced hypergrowth spark general purpose cluster computing frameworkby success mean number developer using scala industry redmonk rating frequency job advert anything go scala since plateaued said scala managed find way almost jvm system even part system library framework written scalathis post opinion scala early success may coming end believe scala community need get back phase growththis attack individual feel spoken negatively person please contact shall endeavour put mind easepain pointsscala developer consistently complain compile time quality tooling language feature complex included codebaseto precise developer complain slow build time time take build project cold also includes startup time resolving downloading dependenciescomplaints tooling anything ranging complexity build tool lack support advanced language feature ide difficulty publish projectthe thing terrifies scala developer cause fiercest debate use shapeless generic programming library partly responsible gave scala exchange workshop evangelising use since regret please forgive compile timesin seen good progress lightbend compilation performance scala compiler fastest scala compiler yet proprietary graalvm technology make even fasterlightbend credit doubled micro optimisation assistance commercial customer laudable achievement lightbend primarily concerned product scala team small four full time developer also responsible maintenance sbtfor anybody needing even faster compiles http wwwtriplequotecomhydra got coveredtwitter rewriting compiler rsc reasonable scala compiler kentucky mule proposed former scala compiler team member still option could takentoolingit took long time academic epfl accept compile time tooling problem scala center set coordinate develop open source library tool benefit scala user early supporter lost faith spent first year working pet project vapourware scaladex spore scastie scala native dotty instead addressing imminent problemsin see project delivered scala center relevant writing faster build tool refactoring tool alternative intellijunfortunately lack industrial engineering experience show decision invent new solution rather contribute incumbent tooling use production example criticise bloop noting unless benefit seen sbt nobody benefit criticise creation metal noting scala user circa using ensime dismissed contribution literally hundred volunteersthis follows tradition reinvention go back scastie reinventing scalafiddle scala native competing graal scala community want better tooling must hold scala center account set coordinate develop ignore exists develop new thing could also say community want better tooling build think fair volunteer dedicate time fulltime job nobody sacrifice family time thatcomplexityin jon pretty released magnolia macro library team replacing complicated shapeless typeclass derivation code simple magnolia alternative faster compilelooking good looking everybody responding main problem scala good shape scala center lightbend delivering value community stepping fix gap ecosystem scala hitting plateau little late believe problem multifaceted really hard hire experienced scala developerswhile scala burning time java caught upscala osborne effecthard hire scala developersa consequence hypergrowth phase vast majority scala developer relative beginner fixed access good training scala inherent complexity mean training course often sufficient developer able navigate language feature runtime environment fragmented often tribal ecosystemone scala selling point compatible java library doubleedged sword although help transition java developer scala make harder people know java learn scala one must learn jvm use much runtime tooling profilers debugger optimisation etc many different style scala mean enough hire train somebody scala play typelevel scalaz different technology stack creating niche within niche entrenched politics caused stack drift apart must come together rather fight unfortunately seen opposite lightbend scala center actively excluded project individual community contribute wrong stackthe politics dirty several member scala compiler team recently engaged platforming prominent contributor keynote removed scala day update scala exchange pressure applied conference organiser update former lightbend executive called boycott recruiter work contributor typelevel opinion worst thing happen scala community small vocal minority decided morally superior represent functional programming community nobody elected lot people unhappy thatthe drama push people away scala also huge disincentive contributor lest seen picking side worse find unemployablejava caught upjava much better support concurrency functional programming proposal add pattern matching languageandroid run stripped version java smartphones planet scala intentionally dropped support android meaning developer targetting largest app store world find alternative language many returned java others moved kotlin better java aware plan scala support android seems like mistake exclude largest market worldthe osborne effectthe osborne effect myth osborne computer corporation went business announced version personal computer version still shop although myth effect real scala academic research project nearly year codename dotty supposed arrive within next year point scala know decomissioned ie bother investing scala wait scala make python thenthe change scala dramatic scala developer need retrained codebases need undergo migration personal contact tell migration estimate range anywhere weekend small project month medium sized project line code year effort larger project million line code assumes free software ecosystem already migrated relying lot volunteer mobilising common causeall compiler tooling improvement made last year thrown away targeting scala compiler even clear ides text editor ready effort support significant whitespace new grammatical construct overstated low level solved lsp scala compiler slower scala compiler capable building core ecosystem library community volunteer contributor expected rewrite project might possible rewrite lack free time leave gap ecosystemscala nightmare anybody maintaining legacy codebase afford risk rewriting codebase scala sorry stay scala pay premium maintain compiler ecosystem access recruitment pool significantly reduced need pay another premium attract retain talenti know lot scala developer project manager concerned scala headed unfortunately official response double moderation code conduct speak negatively scala code conduct originally introduced suppress sexist community tone since used political weapon concern scala met fierce objection threat ban raising concern publicthe passionate proponent within scala community attempted shame dismiss anybody voice concern scala toxic troll fud genuine concern ignored debate silenced individual dismissed banned questioning estimateswhat done believe scala community need speak loudly tell academic custodian scala change name scala launch dotty new language improvement process hand control scala improvement process sip industry let thing consensustop ecosystem contributor originally supported scala already pleading scope reduced fear repeat python perl follow lead seeing aggressive massivelybreaking change proposed pushed negative consensus author fastparse ammoniteif would like discus opinion piece please use http wwwredditcomrhascalator noting official scala channel reddit compromised authoritarian moderation complaint scala future result permanently banned
69,Lobsters,scala,Scala programming,Bootzooka 2019: functional Scala and React,https://blog.softwaremill.com/bootzooka-2019-functional-scala-and-react-3cf8c1a0f1c2,bootzooka functional scala react,bootzooka functional scala react bootzooka bootzooka live source code read documentation backend catseffect magic perfeature module diinscala guide caseclass based configuration pureconfig declarative http api endpoint description swagger ui tapir middlewares http http correlation id support blog sttp backend singleimport use doobiejsonhttp doobie typesafe id lowercasing shapeless standalone variant metric admin endpoint rometheus sttp composable safe sideeffect management simple manipulation deeply nested data structure quicklens frontend stack tool create react app yarn library stack react context api library choice bootzooka manual deployment follow documentation look great start using bootzooka documentation marcin baraniecki softwaremill,bootzooka functional scala reactbootzooka template project scalabased microservice scalareact web applicationit implement basic functionality user registration login profile management password recovery along infrastructure needed integrated sbtwebpack buildunit integration testssql database accesshttp apiemail sendervarious deployment optionsthe goal provide boring part quickly jump development projectbootzooka contains minimal fixed opinionated set library like choice great prefer library functionality minor adjustment problemhowever good keep mind bootzooka one many possibility write backend scala frontend react application possible might want take entirely different approachyou try bootzooka live browse source code read documentationlet take quick look inside backendthe backend based functional scala stack library depend hence easily swapped interoperate thanks catseffect defines set typeclasses used monix tapir doobiethe guiding principle bootzooka backend magic usage every component implementation every functionality userfacing infrastructural navigable main class using gotodefinitionbelow find couple bootzooka feature design decision explained detailperfeature modulesfunctionalities grouped package package contains foomodule trait defines wiring class contained package usually using lazy vals express dependency class package usually using defs example word implement noframework dependency injection using plain constructor see diinscala guide detailscaseclass based configurationpureconfig us popular typesafeconfig file configuration format using conf file make possible read configuration directly case class save lot code moreover configuration logged startup making much easier debug configurationrelated problemsdeclarative http api endpoint description swagger uibootzooka us http server however api endpoint described using tapir description interpreted httproute object documentationan example endpoint description look follows bootzooka also expose documentation endpoint using swagger ui api admin endpoint collected exposed along documentation route httpapi also cors correlationid metric middlewares appliedthe api exposed http doc http id supportspeaking correlation id thanks monix support tasklocal variable possible implement correlation id transparently without need thread method call see blog detailsthe correlation id read xcorrelationid header new one generated request start added message logged processing request yellow part correlation id request message logged processing request id email sent asynchronously background process correlation id setmoreover correlation id added header outgoing http request done using configured sttp backendsingleimport use doobiejsonhttpit quite easy forget exact set import needed make circe autoderivation work needed import doobie metainstances custom type supportedthat bootzooka group functionality three object object extends set trait appropriate library defines implicits support custom type example like use json serializationdeserialization import json object create sql query similarly import doobie object describe http endpoint import member http http instancetypesafe id lowercasingif take look json example notice bootzooka us type tagging eg id user type tag convenient way create subtype given type base type id tag type user tag used compiletime runtime erased base type used technique introduced shapeless standalone variant usedwhen working database common juggle various id easily get mixed tagging type entity correspond make much le errorprone checked compiletime technique used differentiating arbitrary lowercased string metric admin endpointsalong regular api endpoint bootzooka expose administration endpoint first prometheus metric contain jvm process metricshttp server metric provided outgoing http call metric provided sttp custom metric defined metric class second admin endpoint expose version information might useful application deployed various environment quickly verify version application git hash dealing withcomposable safe sideeffect managementbootzooka us lazilyevaluated value wrapper thanks working sideeffects concurrency transaction typesafe two basic datatypes monix task describes arbitrary side effect doobie connectionio describes database operationsthey offer number combinators sequence handle error allocate resource run effect asynchronously example following describes sequence database operation later run single transaction thanks referential transparency code refactored without fear extracting common logic method value change behavior application even refactored fragment contains wrapped sideeffectssimple manipulation deeply nested data structuresusing quicklens modify nested case class without need multiple copy invocation frontendbootzooka ui layer consists view including homepage login register form well secured section available loggedin user stackwe started original bootzooka angularjs served opensource community quite well last year time however noticed great shift towards react also turned developer prefer new angular newest release decided rewrite frontend part wellbootzooka ui relatively small project decided stay javascript typescript becoming popular every day rule typed version code released futuretoolsthe project bootstrapped fantastic create react app hide cumbersome detail like build configuration minification hot reloading hood exposing simple script still allowing developer highly customize setting project needed create react app become de facto industry standard long gone day writing long complicated webpack configuration basic taskswe also prefer using yarn package manager npm hence presence yarnlock file library stackwe aware rapidity change trend frontend world goal keep stack small possible application state management instance implemented using react context api instead redux similar solution transparent structure easy replace library choicesame go styling variety solution like sc cssinjs stayed plain old cs easy customize highly uncoupledfor detail check bootzooka manualdeploymentthere three deployment option available bootzooka outofthebox first create fat jar contains backend frontend code run sbt backendassemblyinvoking java jar start application configured hostport environmental variable used customise configuration specified applicationconfanother option create docker image sbt backenddocker publishlocalthis create bootzooka image locally started together database using provided dockercomposeyml filefinally deploy application heroku follow documentation look great start using bootzooka start using bootzooka simply clone fork repository next might want change name utility run sbt renameproject commycompany myproject fully renamed project waiting new functionality documentation might helpful find way structure post written together marcin baraniecki frontend expert softwaremill
70,Lobsters,scala,Scala programming,Lightweight runtime reflection for Scala and Scala.js and the uncertain Future of TypeTag in Dotty,https://blog.7mind.io/lightweight-reflection.html,lightweight runtime reflection scala scalajs uncertain future typetag dotty,summary also hope post may help convince dotty team support form type tag corresponding ticket discussion tldr usage example scastie introduction type tag distage scastie support concurrency issue guillaume martres georgi krastev scope work starting point undefined behavior scalac help circumvent typetag limitation undefined behavior rescue simple materializer better approach distage repository designing data model gotcha logic behind compile time type lambda kind projector kind projector compile time refinement type runtime subtype check actual implementation rest damn owl repository conclusion septimal mind,summary typetag scalareflect great flawed article provide observation experience building custom type tag depending scalareflect runtime potentially portable dotty providing equality subtype check usage scenario generate type tag compile time check equality subtyping runtime use cast anything need generate type runtime model completely correct though enough purpose also hope post may help convince dotty team support form type tag corresponding ticket dotty bugtracker discussion scala contributor list post targeting knowledge scalareflect unhappy knowledge scala compiler apis nerd tldr usage example add buildsbt librarydependencies fundamentalsreflection try following scastie import izumifundamentalsreflectionmacrortti import izumifundamentalsreflectiontags def combinationtest val tagk list tag val tag int tag val val tag list int tag println list tag int tag combined combined tag equal list int tag combinationtest type id k k def subtypetest case class datum f tagk f int def tag lighttypetag implicitly tagk f tag val element list datum id datum list list val seqelements elementsfilter tag tagk seq tag println element parameterized seq child seqelements subtypetest example produce following output list tag λ list int tag int combined list int combined tag equal list int tag true element parameterized seq child list datum list introduction type tag one attractive feature scala allow overcome type erasure check subtyping equality example import scalareflectruntimeuniverse def check typetag v val tag implicitly typetag tpe println v type tag tag typetag right int int tpe println v exact type right int int tag typetag either int object tpe println v subtype either int object tag check right int int right type scalautilright int int right exact type right int int check right nothing int right type scalautilright nothing int check right xxx right xxx type scalautilright nothing string right xxx subtype either int object scalautilright nothing string typetag let lot essentially scalareflect typetag machinery chunk internal compiler data structure tool exposed directly user though important operation equality check subtype check case may implement whatever else need least semiautomatically concept type tag cornerstone project distage smart module system scala featuring solver dependency injection mechanism type tag allows u turn arbitrary function entity may introspected compile time run time scastie import comgithubpshirshovizumidistagemodelprovidersprovidermagnet val fn providermagnet x int string x get println arity fnarity arity println signature fnargtypes signature list int string println return type fnret return type int string println application fnfunapply seq hi application hi unfortunately current typetag implementation flawed support higherkinded type get typetag list suffer many concurrency issue case typetags occasionaly failing subtype check child parent scalareflect initialization even synchronize literally everything trivial fix worstcase scenario may even see set int set string scalareflect need second initialize moreover still unclear scala support typetags people say hard recommend write custom macro replace typetags scala dotty necessary tried implement lightweight typetag replacement macro guy work scaladotty compiler say complicated task full implmentation subtyping extremely complex guillaume martres yikes full subtyping algorithm extremely complex also carefull georgi krastev doable model good enough many practical usecases despite overcomplicated many subtle discrepancy scala model still hope dotty team consider supporting typetags scala currently implementation support scala though possible port dotty going foreseeable future scope work following feature essential distage useful many different purpose ability combine type tag runtime customtag list combine customtag int ability check two type identical assert customtag list int customtag list combine customtag int ability check one type subtype another assert customtag list int customtag list assert customtag either nothing customtag either unit starting point undefined behavior scalac help circumvent typetag limitation unfortunately way scala request typetag unapplied type type lambda model express syntax work type k either k unit typetag fail fortunately two workarounds undefined behavior rescue simple materializer reason scalac ignores type parameter passed type within macro definition import scalalanguageexperimentalmacros import scalareflectmacrosblackbox import scalareflectruntimeuniverse trait lighttypetag todo def maketag cweaktypetag c blackboxcontext cexpr lighttypetag import cuniverse val tpe implicitly weaktypetag tpe etaexpand convert type taking argument polytypeapi type lambda representation println type tag tpeetaexpand println unbound type parameter tpetypeparams println result type tpeetaexpandresulttypedealias cexpr lighttypetag q null def lighttypetag macro maketag nothing type k v either k v type unit example print type tag unbound type parameter list type result type scalautileither unit time make observation nothing disappeared nothing scala syntactic limitation successfully circumvented got weak type tag unapplied type k undefined logical useful behaviour scala expand nested lambda single lambda better approach previous trick would require u manually write custom materializer every kind want get type tag another approach useful practical usage type lambda may wrapped structural refinement type trait hktag type wrapped k hktag type arg k damn type argument may analyse different wrapped type uniformly outside scope post may find completed working example distage repository designing data model want use macro statically generate nonambigious type identifier following scala feature supported essentially two primary form type applied unapplied let encode sealed trait lighttypetag sealed trait appliedreference extends lighttypetag sealed trait appliednamedreference extends lighttypetag possible define helper structure describing type bound variance sealed trait boundary object boundary case class defined bottom lighttypetag top lighttypetag extends boundary case object empty extends boundary sealed trait variance object variance case object invariant extends variance case object contravariant extends variance case object covariant extends variance boundariesempty optimization default boundary nothing intended make generated tree compact gotcha type bound scala recursive pretty hard restore properly recursion detected boundary loosened appropriately nongeneric type may identified fully qualified name type may prefix case pdt type boundary case abstract type parameter case class namereference ref string boundary boundary prefix option appliedreference extends appliednamedreference time generic type reference recursive structure fully qualified type name list arbitrary type tag representing generic argument case class typeparam ref lighttypetag variance variance case class fullreference ref string parameter list typeparam prefix option appliedreference extends appliednamedreference type lambda may defined case class lambda input list lambdaparameter output lighttypetag extends lighttypetag case class lambdaparameter name string compound type simple case class intersectionreference ref set appliednamedreference extends appliedreference come structural type sealed trait refinementdecl object refinementdecl case class signature name string input list appliedreference output appliedreference extends refinementdecl case class typemember name string ref lighttypetag extends refinementdecl case class refinement reference appliedreference decls set refinementdecl extends appliedreference many way model improved example better use nonemptylist fullreference lambda prefix allowed model invalid etc etc also issue pathdependent type use name instead though job also provides equality check free case tag built kind normal form would happy get improvement proposal logic behind section consider caveat faced design choice made working implementation compile time type lambda kind projector type lambda represented polytypeapi always empty typeargs list least one element typeparams list lambda result type may accessed resulttypedealias method unfortunately following thing require different approach type lambda encoded type projection code produced kind projector plugin providing u way encode type lambda scala sane syntax case takestypeargs return true type instance polytypeapi important call etaexpand processing lambda next thing result type type lambda always applied type lambda parameter visible concrete type following lambda type l list result type would list concrete type type lambda processed argument name need recovered alghoritm recurse result type substituting type parameter corresponding lamda parameter example def toprefix tpef utype option appliedreference def makeboundaries type boundary def tovariance tpes typesymbol variance def makeref tpe type context map string lambdaparameter lighttypetag def makelambda type lighttypetag val aspoly tetaexpand val result aspolyresulttypedealias val lamparams ttypeparamszipwithindexmap case p idx pfullname lambdaparameter idxtostring val reference makeref result lamparamstomap lambda lamparamsmap reference def unpack type context map string lambdaparameter appliednamedreference val tpef tdealiasresulttype val prefix toprefix tpef val typesymbol tpeftypesymbol val b makeboundaries tpef val nameref contextget typesymbolfullname match case value namereference valuename b prefix case none namereference typesymbolfullname b prefix tpeftypeargs match case nil nameref case args val params argszip tdealiastypeconstructortypeparams map case pa typeparam makeref context tovariance paastype fullreference namerefref params prefix val tpe match case polytypeapi makelambda tpe case p ptakestypeargs contextcontains ptypesymbolfullname unpack p context else makelambda p case c unpack c context api allowing u apply partially apply lambda necessary runtime usage cornerstoune type tag combinators def applylambda lambda lambda parameter map string lighttypetag lighttypetag method recursively replace reference lambda argument corresponding type reference parameter map apply λ map int becomes λ map int job mostly mechanical compile time refinement type reason refined type implement refinedtypeapi necessary use internal scalac structure miss something working extractor import c final val universeasinstanceof scalareflectinternaltypes object refinedtype def unapply tpef type option list type list symbolapi tpefasinstanceof anyref match case x itrefinementtyperef xparentsmap asinstanceof type xdeclsmap asinstanceof symbolapi tolist case r refinedtypeapi rparents rdeclstolist case none val type match case refinedtype parent decls runtime subtype check equality check trivial equal model instance would work fine subtype check kinda complicated discus detail may refer actual implementation hard understand even needed perform check right storing following data val basetypes map lighttypetag set lighttypetag val basenames map namereference set namereference use basenames compare namereferences basetypes thing one caveat scalac provide consistent representation base type unapplied type easy figure seq base type list fortunately type name base type reference correspond name type parameter list import scalalanguageexperimentalmacros import scalareflectmacrosblackbox import scalareflectruntimeuniverse val tpe typetag list int tpetypeconstructor tpe type type lambda val basetypes tpetypeconstructorbaseclassesmap tpebasetype element basetypes applied concrete type list list scalacollectionlinearseqops x list x list seq though type name correspond type argument val targs tpeetaexpandtypeparams fortunately type name list reflectruntimeuniversesymbol list type base type may reconstructed using type parameter populate context makeref comparison alghoritm recursive procedure considers possible pair type reference plus basic cornercases primary case def ischild selft lighttypetag thatt lighttypetag boolean selft thatt match case true case tpenothing true case tpeany tpeanyref tpeobject true case fullreference fullreference parentsof sasname contains true else oneofknownparentsisinheritedfrom ctx compareparameterizedrefs ctx case namereference fullreference oneofknownparentsisinheritedfrom ctx case namereference namereference parentsof exists p ischild p thatt case appliednamedreference lambda ischild selft toutput case lambda appliednamedreference ischild soutput case lambda lambda sinput oinput ischild soutput ooutput several helper function required well us basenames transitively fetch parent type name def parentsof namereference set namereference def oneofknownparentsisinheritedfrom child lighttypetag parent lighttypetag boolean basetypesget toseqflattenexists p ischild p parent def issame lighttypetag b lighttypetag boolean b match case appliednamedreference ab appliednamedreference anasname abasname case false trickiest part comparator fullreferences def compareparameterizedrefs self fullreference fullreference boolean def parametershapecompatible boolean selfparameterszip thatparameters forall case p pt psvariance match case varianceinvariant psref ptref case variancecontravariant ischild ptref psref case variancecovariant ischild psref ptref def samearity boolean selfparameterssize thatparameterssize selfasname thatasname samearity parametershapecompatible else ischild selfasname thatasname search lambda potentially compatible result type val moreparents basetypes collect case l lambda b issame loutput selfasname b collect case l lambda linputsize selfparameterssize l map l lcombine selfparametersmap ref flatten moreparents exists l val maybeparent l ischild maybeparent else false real code complicated take care bound lambda parameter also main idea fact simple symbolic computation mocking hard work scala compiler work rest damn owl provided basic insight problem case wish look full implementation may find repository loc necessary feature implemented also logging facility allowing get detailed log happens subtype check would welcome contribution library feel free use post code starting point implementation conclusion possible implement scalareflectlike feature macro though challenging task time many enterprise developer good reflection one attractive scala feature allows u many positive trait dynamic language without giving type safety wrote post hope may help convince dotty team reimplement reflection scala case septimal mind try maintain solution port dotty mentioned earlier possible make completely correct
71,Lobsters,scala,Scala programming,In Defence of (0/:l)(_+_) in Scala (2008),http://rickyclarkson.blogspot.com/2008/01/in-defence-of-0l-in-scala.html,defence l scala,doug posted rather angrysounding exit note method scaladocs,day ago doug posted rather angrysounding exit note scala based two half month indepth look scala language pointed code example writeonly scala l clue meant first part anyway first zero slash colon one new band typed scala interpreter typing realised one ell let change name l bad name call x x kiwifruit l list bit clue scala book remember reading operator name end colon rightassociative word ab shorthand b b shorthand b code rewritten list nt look lot clearer look method scaladocs list one list trait iterable fold longer way writing code way understood immediately listfoldleft still left bewildered version let go bit anonymous function take two value add operator let make two name roll place x get rolled first second listfoldleft x xy anyone still following sum element list list list look like languagestools call reduce notably mapreducehadoop call inject ruby others language make use loop assume must stop getting cocky good code look minute understanding original code understood blog question got mentioned scala mailing list martin odersky scala inventor apologised kind fault included liked two reason z x op look like abbreviation left leaning tree z lower left end least ie something like op op z tree always draw explain fold left z x operand right orderi see point still use foldleft would balk someone else code using took minute understand happily read fold written way discussion scala programmer tried say time taken learn thing nt important useful learned could nt find good way say david maciver unrelated post mailing list said intended much better optimising notation confuse people first minute seeing hinder readability ever really bad mistake could get stop arguing ian clarke write stuff want read used fold lot perhaps someday would quite happily use operator internalised meaning get reading name chose thing rather reading language force course u included used fold considered folding primitive much rather write foldleft rather write plus rest doug blog really surprised nt know two people spend amount time programming language community get different result explanation comfortable haskell longtime java programmer probably advantage come scala largely java minus bad thing plus good thing haskell many place text buffer nt assume scala useful writing web apps desktop apps object orientated programming functional programming scripting encoding mathematical property concurrency discussed mailing list week
72,Lobsters,scala,Scala programming,When do you need Akka Cluster?,https://blog.softwaremill.com/when-do-you-need-akka-cluster-5885d43e901b,need akka cluster,need akka cluster akka cluster antipatterns split brain work distribution blog post merged akka still possible service discovery scaling read cqrs scaling writes optimistic locking single writer principle lightweight transaction single writer principle painting akka sharding ssd drive akka persistence akka persistence typed summary zioakkacluster aecor,need akka cluster time ago friend wrote article akka cluster antipatterns time counterweight post try answer title question slightly different angle official documentation let see use case akka cluster perfect solution maybe perfect best world probably say recommended solutionat first want highlight whatever possible use cluster system quite costly run maintain cluster basic drawback cluster system seed node setupnew application instance simply launched added load balancer must register clustersplit brain nasty thing happen data cluster case split brain always keep mind using clustered solutionsresources minimum number instance cluster system achieve consensus actually cluster microservices need launch least instance cpu core gb per instance end core gb ram production also devteststaging environment aware minimize resource requirement many different way make sure running cluster production also envs way avoid lot unpleasant surprisesother possible drawback name iti could elaborate problem cluster topic article let go back main plotwork distribution project use akka cluster work distribution mechanism launch master node worker node parallelize task across worker node within cluster use case perfectly valid akka cluster question achieve thing cheaper faster believe yes need take advantage message broker distribute work across parallel consumer right default choice highly scalable performant message queue course apache kafka kafka ecosystem topic plenty blog post successfully accomplished number project kafka board work distribution one many kafka use casesa careful reader might say changed one cluster solution another one true question one easier set run unfortunately comparemeasure honest way summarize personal experience case favor kafka cluster operate kafka cluster need read understand quite lot config params akka version would need provide open source split brain resolver release official lightbend split brain resolver merged akka worry providing one although remember split brain still possibleonce set kafka cluster launching new instance consumer piece cake whereas adding new node akka cluster requires sort service discovery next thing worth mentioning single kafka cluster used many different business context akka cluster antipattern recommended create smaller cluster preferable one per context fun fact akka cluster often use kafka cluster communication channel themin nutshell already using akka cluster want parallelise work within context yes akka cluster work otherwise take time analyse solution apache kafka one example depending scale might use something much simpler akka kafkascaling read want easily scale application sound like another legitimate reason use akka cluster ok first let answer exactly want scale endpoint problematic actual bottleneck make sure good monitoring infrastructure provide data guessesmost application readheavy case focus scaling query side good approach migrate architecture towards cqrsquery service stateless scaling requires launch instance architecture allows run dedicated storage per read model query nosql database fastest solution others good old sql fine important thing freedom make decision independently course sort synchronization write side preferable event store read side required cover find hundred articlesbooks topic cluster neededscaling writes scaling writes finally something interesting scaling command service challenging usually want maintain data consistency simply launch two instance application end concurrent writes generally problem solved optimistic locking make sure underlying storage support concurrency control sometimes locking necessary update data idempotent way rather rare situationsingle writer principlewhat optimistic locking feasible use case concurrency control fine long probability concurrent access low otherwise significantly degrade performance contention also scale database support optimistic locking might fast enough handle writes switch distributed database handle load like cassandra scylla might surprised locking mechanism longer possible ok honest cassandra support locking lightweight transaction approach avoided heavy write loadsto overcome problem try achieve single writer principle swp easy grasp method fast consistent contentionfree hardware friendly update essence method writes must go via single point one time since concurrent update worry data consistency swp relatively easy implement single instance application whereas distributed swp completely different story implementing correctly huge challenge suppose might demanding task whole programming career course want make fast reliable reactive philosophy mindfinally time akka cluster cavalry arrivedthe polish cavalry hussar batowskikaczor reproduction paintingakka cluster basically distributed consensus mechanism obviously stuff going hood simplification good enough consensus job u another piece necessary akka sharding get distributed single writer principle one desired distributed system featuresthe next question could exactly shard since want scale maintain consistency perfect candidate sharding domain aggregate responsible maintain business consistency first placeakka cluster akka sharding powerful pair one interesting addition swp name suggests need write something slowest part system io operation programmatically improve writes want go detail appendonly writes effective way save data storage including ssd drive deleting editing simple fsync operation majority database love handle loada perfect way achieve appendonly writes apply event sourcing architecture addressed akka persistence akka persistence typedsummaryakka cluster sharding persistence create ultimate trio building fast resilient scalable distributed application everybody need jump high level awesomeness careful decision however current solution hitting limit akka stack definitely job youas last thought mention case never ever implement distributed consensus probably fail best scenario burn lot money check others leverage akka cluster solution zioakkacluster aecor
73,Lobsters,scala,Scala programming,The lift programming language,https://github.com/lift-project/lift,lift programming language,language setup http wwwjetbrainscomidea documentation extensive documentation building running lift scaladoc,lift language setup install git gitlfs dot latest java sdk clone lift repository directory choice install arithexpr dependency running updatesubmodulessh download install idea intellij http wwwjetbrainscomidea launch intellij welcome screen select configure install scala plugin form plugin repository installation restart intellij intellij welcome screen select open project select buildsbt file lift folder checked able execute computation opencl need build executor library script buildexecutorsh build executor buildexecutorsh script also called sbt running sbt compile finally add executor build directory java library path intellij select run edit configuration left side select default junit right side add vm option djavalibrarypath liftrootlibexecutorbuild proper path system alternatively add executor build directory ldlibrarypath also make possible run test benchmark command line using sbt test script script folder respectively documentation extensive documentation building running lift scaladoc
74,Lobsters,scala,Scala programming,Functional Highlighting for Functional Programming,https://blog.jetbrains.com/scala/2019/07/02/functional-highlighting-for-functional-programming/,functional highlighting functional programming,nightly build overexpression expression match type mismatch code code type ascription type ascription diff make difference improvement improvement overexpression expression conform encountered difficult notice partial highlighting final expression match type mismatch indicate missing implicit value display implicit conversion legacy mode ascribe actual type code code redesign implicits mental model look simple type ascription display display type annotation truly needed type info type ascription type ascription typed expression highlighting type annotation type ascription diff make difference scala type finegrained verticallyaligned improvement improvement literal type method invocation nightly build youtrack,statically typed programming language java scala type type created equal difference type work imperative programming work functional programming article show imperative highlighting mix well functional code present new functional solution new highlighting enabled nightly build scala plugin update definitely worth detailed description feedback welcome always tldr enjoy overexpression expression match type mismatch code code type ascription type ascription diff make difference improvement improvement overexpression expression illustrate problem let first consider following java code ponder semantics much focus syntax code contains type mismatch error actual type expression string conform expected type type add method parameter integer see intellij idea highlight error red squiggly underline particular style depends color scheme particular importance main point expression highlighted way highlighting typemismatch error defacto standard today yet legacy past typical code resembled snippet intellij idea mode came java extended supported language including scala special java typical good old imperative java code finely dispersed mix statement expression naturally limit scope type mismatch highlighting longer case java version code functional code expression longer separated statement go well legacy highlighting geared toward imperative code long underline hardly pretty especially span across multiple line outer error mask inner error process writing expression would constantly underlined solely incomplete pose problem even java let alone scala given typical scala code functional java code problem get worse block expression scala arbitrary amount code even imperative code underlined tip toe apply java recipe directly problem encountered soon started implement typeaware highlighting scala plugin another recipe borrowed java highlight closing brace however solution imperfect many reason first single underlined char difficult notice especially large block code second semantics match java highlighting indicates nonvoid method missing return statement nothing type mismatch even return value block scala worst though solution partial address one special case without addressing underlying problem every expression enclosed block scheme could possibly improved highlighting final expression instead closing brace would make error easier spot would get semantics right block nothing otherwise would interfere writing new code subsequent expression block would underlined match type mismatch find solution let look closely essence type mismatch problem lie expression sometimes may need fix expression fix error time problem somewhere else often case scala type inference name suggests type mismatch type mismatch precisely actual type mismatch expected type insightful underline expression well need underline something type visible whereas expected type may present code actual type almost always inferred scala java highlight type expression already use inlay hint indicate missing implicit value instead underlining expression also use hint display implicit conversion noticeable improvement legacy mode thus ascribe actual type highlight see fit way shift focus expression necessarily source problem actual cause even importantly limit scope highlighting regardless expression length code code like redesign implicits crucial inlay hint represent valid syntax let people employ mental model use read code notation uniform already familiar code ui even complex highlighting look simple achieve need cooperation language example since java syntax lack named argument intellij idea invent extraneous notation apparently valid piece code fortunately scala support named argument box go type ascription chosen representation indeed valid piece code let ask scalac code valid sense compile wonder type mismatch error begin however instead complaining syntax compiler report exactly error exactly place thus inlay hint behaves present code apart syntax question style originally parameter name hint look different code somehow justified java hint represent code scala however hint represent valid code scala hint behave like code provide error highlighting code folding tooltips navigation brace matching use current code style designed implicit hint unanimously voted display like code feel natural make sense type mismatch hint also make sense display existing type annotation hint way uniformity also line implicit hint nice bonus hint support navigation folding tooltips brace matching monospaced font slightly wider compensated added dynamic folding showing type hint truly needed interestingly type mismatch hint type mismatch also provide editing assistance type ascription expression work way type annotation definition often named expression kind hint complement ondemand type info action type ascription type ascription showing type ascription though present code great actually present previously highlighted typed expression expression underlined supposed ascribe type twice scala let expression actual actual better way think type ascription hint blank canvas error highlighting canvas already present much better highlighting right away expression lack ascribed type scala compiler first infer check possible type mismatch type already present compiler skip type inference get right type checking perfectly match highlighting inlay hint interestingly also reduces scope type mismatch underline even without using inlay hint far good ascribed type incompatible example previously highlighted expression though type ascription fact type annotation ascribe actual type expression actual incompatible really difference type annotation type ascription former added declaration definition corresponds explicit type java latter added expression corresponds cast operator java support upcast case type annotation type go first expression follows contrast type ascription expression go first type follows type ascription always specifies actual type type might incompatible expression upcast given type type culprit reduce scope highlighting keep highlighting uniform would work even without using inlay hint diff make difference done good job far need go deeper narrower many scala type comprise type component often original source type mismatch previously compared type indivisible unit technically wrong hardly convenient parse type check constituent type head understand exactly type match highlight truly mismatching part type even show finegrained verticallyaligned tooltip pairwise comparison textbased diff either take syntactic sugar subtyping variance stuff account improvement improvement big picture also special case example handling literal type method invocation although main work completed polishing still progress please use nightly build recent update report bug suggestion youtrack whole seems new highlighting substantial improvement legacy imperative scheme functional code bigger improvement hope feature prove useful scala expect intellij idea language follow
75,Lobsters,scala,Scala programming,Counting to infinity at compile time,https://medium.com/swlh/counting-to-infinity-at-compile-time-2bbdd6446329,counting infinity compile time,counting infinity compile time higher better faster longer previous blog post good fstring blog post matrix etc slow binary stop binary ternary encoding incr treble sum benchmark,counting infinity compile timehigher better faster longerwe saw previous blog post mine introduction counting compile time scala using conventional nat typeunfortunately nat slow really really slow hard limit make scala compiler currently standsfor example rough ready entirelyunscientific benchmark run approximate compile time sum typeclass defined last time number would completely different machine probably right order magnitude sum approx time complete complete complete see le ideal real practical us true asking compiler lot scala compiler famously slow still like nat computation complete reasonable time want scala compiler limiting factor want jvm limiting factorbut first want good forfstringif dedicated reader blog doubt remember long time ago wrote blog post preventing datatoowide exception databasebased codethe overall concept type fstring parameterised flavour nat idea fstring contains string proven length going safe constructor type present class represents database table length mimic column width database never datatoowide exception length evidence stretch way api database invalid data kicked correctly boundary programyou write method fstring use nat typeclasses like following see case important speedy sum particular every time add fstring another add length may never occur code could frequent concatenating first last name address componentsmatricesanother use would encoding matrix dimension multiply two matrix together width one must match height information traditionally represented compile time meaning frequent exception case waiting jump outbut defined matrix parameterised dimension set thing multiplying two invalid matrix compiletime impossibilityin particular data science machine learning large matrix necessary large billion column row large clearly using traditional nat case nonstarteretcand time bounded data size limit exception caused arithmetic problem nat remove entire swathe run time problem codewhy slowrecall algorithm nat sum recursive call taken one layer succ one parameter put top base case recursion terminates side deconstructing reach zero point return whatever calculated otherthe first thing jump algorithm pretty inefficient complexity calculating nm n immediate fix consider unwrap one succ layer time could two want single succ case backup lowpriority implicit final casenow add following flow would improved complexity operation stop point encoding operation sum deconstructing nat binary form operating would deconstruct implicit searching whilst summingbut idea satisfying way approach encode arbitrary binary solution encode etc case manuallyalso turn efficient implementation first extra layer handling two succ layer entirely unscientific benchmark sped local calculation compile time fast would expect expect halving compile time based purely algorithm problem problem encoding number succ many nested type time add one increase nesting entire thing becomes cumbersome compiler handle compareimagine strip four layer succ compiler examine count four layer type nesting unwrap apply four layer type nesting numberwhile decreased complexity numerical algorithm much actual job compiler great one operation every stage instead four like example binary succ problem elegant fit purpose know binary form sum make sum measure efficient try move binary encoding definition natthis becomes extraordinarily simple realise succ encoding unary encoding integer repetition symbol represent magnitude number like tally chart usually unary symbol happens succso replace succ two wrapper one representing one representing binary expansion integer chose zero one respectivelywe choice make though direction encoding run example could one zero zero could zero zero one could encode binary expansion forward backwards initial binary number representing like represents initial unary number also imagine long sum multiplication hand like one primary school remember operate right inwards lowest denomination reason choose reverse binary expansion new nat encoding start lowest denomination outer layerso one x becomes simple arithmetic operation represents number x zero x similarly represents number xlet call new version bnat avoid confusionhere basic setup might look like go ask somethingwhy stop binary binary natural thing software developer reach obvious reason best choice saw trying minimise length expansion number n encoded flavour nat base unary base binary base efficient encoding term base used represent n infinite give number unique symbol suddenly every type deep recursion solved obviously absurd also limiting number symbol succ optimised one symbol typeclasses result simple easy reason aboutwe like balanced trying minimise number symbol used base also minimising length number n base trying balance high base thing compile faster keeping complexity typeclasses low possibleso trying minimise l b l length expansion n base b b chosen base respect bwe know l logb n find minimum b logb n finding minimum b log b log natural logarithmdo math plug wolfram alpha whatever like turn function minimised b e natural logarithm base roughly sadly good u since definitely operate noninteger base scala compilerhandily though give lower value function abandoning binary ploughing full steam ahead provably efficient base ternaryternary encodingsame rule apply binary going produce reverse ternary encoding natural number using three symbol instead two time zero one twothe arithmetic operation represent follows zero x x x basic setup going defining sum tnat need couple utility first serve good example see ternary algorithm look like incran easy way increasing tnat would nice unary case operation wrap succ round ithere incr implementation tnat four case telling u increment possible form tnat say say one x incrone say two x incrtwo say x zero incr x hopefully typelevel function becoming easy deconstructtreblenow working complex structure one thing make sense express zero different way saying since zero represents multiplying allow different representation number would make automatic calculation difficult indeed need safe way wrapping tnat zero trebling safely apply zero number likesumsum nice implement ternary one reason try minimise number symbol used efficiency calculation sum typeclass get really big really fast different case compared succ casesi prevaricated whether include end decided case scared article already long available linked end article mostly grunt work anyway nothing groundbreaking understand approach incr treble figuring sum elbow greasebut exist definition look like let take spinbenchmarkslet dump random number new addition typeclass see fall outwe using following method test recall succ encoding could compile u well far good broken previous record let kick thing billion compiling negligible timequintillions realm long overflow negligible negligible finally hit something take noticeable amount time compile also break github syntax highlighter two random number order succ hitting time calculating let see far push pretty much hit limit suitable use project longer compiler start though time improvement succ pretty good definitely large enough encode string length matrix dimension matter much data processing
76,Lobsters,scala,Scala programming,tAPIr’s Endpoint meets ZIO’s IO,https://blog.softwaremill.com/tapirs-endpoint-meets-zio-s-io-3278099c5e10,tapir endpoint meet zio io,tapir endpoint meet zio io tapir zio bridging gap server interpreter catseffect contains another different typeclasses tapircirce tapir repository describes openapiswagger documentation code repository summary describe,tapir endpoint meet zio iothe basic type tapir library describing http endpoint endpoint e first type parameter type input second third type output case error e case success final type parameter defines streaming requirement example value describes endpoint request path mapped int input case error response mapped string case success json representation pet classa real tapirthe second datatype look blog zio io e io describes process set process might run concurrently interact first type parameter e type result case expected error might occur evaluating computation second type type result case successhence one hand tapir endpoint dedicated separate output correspond error success zio io result either specific typed error successcoincidence think bridging gaplet leverage similarity tapir endpoint e interpreted server client documentationto interpret endpoint server function type f either e provided sideeffects wrapper future iotapir come server interpreter among others adapted work zio say wait designed work catseffect catseffect contains another different implementation io yes however implementation us typeclasses defined catseffect cat io implementation make possible use library defines implementation typeclassesand luckily zio one library work zio without problem twitter confirms along fully working example still might adapt api tapir interpreter work better zio bifunctor io leverage fact library dedicated error channel easy defining extension method endpoint work add method tozioroutes logic endpoint instance convert logic io e function function type io nothing either e using either method provided zio function pas existing interpreter done note result method httproutes task task alias io error type fixed throwable throw kind error needed integrate catseffect typeclasses require error case typed waylet find look like practice define single endpoint getting data pet given id error string returned case success pet data json format apart core tapir apis also using tapircirce integrationnext interpret endpoint server converting tapir description coupled logic function httproutes instance nice clean expose endpoint server code available tapir repository try might noticed also defined another extension method zioserverlogic variant useful creating object contain endpoint description server logic list endpoint converted server invoking toroutesas bonus tapir describes endpoint apart generating server also generate client openapiswagger documentation let try thathere generate openapi yaml matter exposing generated documentation along swagger ui take look code repository thatsummaryboth tapir zio separate typed error channel datatypes describe either endpoint process might end error successusing simple extension method possible leverage zio typed errorsuccess channel use directly interpreting tapir endpoint server
77,Lobsters,scala,Scala programming,"Program for Summer BOB Conference (Aug 21, Berlin) is out",https://bobkonf.de/2019-summer/,program summer bob conference aug berlin,,bob forum developer architect builder explore discover best tool available today building software goal participant leave conference new idea improve development back ranch committed diversity aim exploring wide range tool welcoming friendly crowd diverse people end number support option participant group underrepresented tech available
78,Lobsters,scala,Scala programming,Thread shifting in cats-effect and ZIO,https://blog.softwaremill.com/thread-shifting-in-cats-effect-and-zio-9c184708067b,thread shifting catseffect zio,thread shifting catseffect zio catseffect zio described combinators lazily interpret api error handling available combinators thread shifting daniel spiewak recommends cpuintensive work blocking io call nonblocking io callback lazily catseffect two nonlocal reasoning john de go post async sttp issue always always update changed monix zio shifted back summary yannmoisan walmaaoui available github,thread shifting catseffect ziothe io catseffect zio zio might seem quite similar often case devil detail library define datatypes allow describing asynchronous process general approach process first described immutable value description composed using number combinators allow sequencing process running parallel etc sideeffects captured value evaluated lazily nothing happens interpret description running processhow catseffect zio differ first foremost notable difference api error handling available combinators also difference semantics quite subtle surprisingone difference thread shifting work daniel spiewak recommends application least three thread pool bounded thread pool number cpu cpuintensive workan unbounded thread pool executing blocking io callsa bounded thread pool nonblocking io callbacksdepending task hand pick right pool job hence describing process need way express fact eg blocking effect run blocking pool calculationintensive effect cpu poollet define couple thread pool use later example effect run remember effect evaluated lazily time used print name current thread catseffectcatseffect defines two function thread shifting first ioshift executioncontext specifies effect coming shift run given thread pool example start main thread jump one thread finally one thread operator simply sequence two effect b equivalent aflatmap b second contextshiftevalon executioncontext evaluates given effect given thread pool shift back thread pool backing context shift note two thread pool involved start main middle effect evaluated thread pool passed parameter evalon jump back thread pool backing far good caveat two factnonlocal reasoningfirst adding effect program influence effect come consider following code add additional step middle someeffect might look innocent however notice last effect evaluated different thread pool middle effect clean point also raised john de go post comparing zio cat effect section stable shifting consequence using ioshift reason program local way come threading know implementation detail effect use determine thread pool particular effect going run onasyncanother way creating io value providing asynchronous callback used eg integrating async io library netty netty threadpool way integrates concurrency library catseffect calling callback particular action completefor example effect run asynchronously happens sequence another effect async one run async thread pool might dangerous even lead deadlock example see sttp issue case netty never work nonblocking io thread pool always shift another thread pool using async operationshow fix might seem shifting immediately async operation solves problem indeed exception asynchronous execution well error propagated effect executed unless finalizer effect always run code create asynchronous effect ae always completed exception effect whole fails specify printthread effect always run regardless ae completes successfully using guaranteeas see finalizer also run async thread pool good goal avoid work async thread pool hence need always shift case success error effect using guarantee update default behavior changed monix likely change catseffect wellziozio offer one method changing thread pool zioon executioncontext similarly contextshiftevalon evaluates effect called given thread pool unlike contextshiftevalon fact provide two thread pool one evaluate effect shift evaluation done see evaluating effect zio shift default thread pool operator would correspond shift zio possible encounter first problem nonlocal reasoning async operation let test asynchronous effect completes get shifted back zio default pool hence danger blocking netty thread safe thing also work expected run specific thread pool even though asynchronous effect run dedicated thread pool completes go back one specified originally using onalso case error get desired behaviour summaryzio catseffect evalon might seem remember pay attention thread pool using thanks yannmoisan walmaaoui prompting research issue source code available github
79,Lobsters,scala,Scala programming,"Constraints Liberate, Liberties Constrain (2015)",https://www.youtube.com/watch?v=GqmsQeSzMdw,constraint liberate liberty constrain,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature constraint liberate liberty constrain runar bjarnason youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature constraint liberate liberty constrain runar bjarnason youtube
80,Lobsters,scala,Scala programming,"Comparing the Same Project in Rust, Haskell, C++, Python, Scala and OCaml",http://thume.ca/2019/04/29/comparing-compilers-in-rust-haskell-c-and-python/,comparing project rust haskell c python scala ocaml,comparing project rust haskell c python scala ocaml compiler class table content rust baseline haskell c python rust group scala ocaml think insightful rust baseline another post describing design haskell nfa dfa lr parser abstract syntax tree edward kmett lens c python rust group snapshot testing scala ocaml jane street expect test conclusion,comparing project rust haskell c python scala ocaml final term uwaterloo took compiler class project write compiler substantial subset java team three people language group choice rare opportunity compare implementation large program thing written friend knew highly competent fairly pure opportunity see difference design language choice could make gained lot useful insight rare encounter controlled comparison language perfect much better anecdote people use basis opinion programming language compiler rust first comparison team used haskell expected much terser compiler used similar amount code task true team used ocaml compared team used c expected compiler around larger largely due header lack sum type pattern matching next comparison friend compiler python used le half code power metaprogramming dynamic type friend whose team used scala also smaller compiler u comparison surprised though another team also used rust used time code different design decision end largest difference amount code required within language go think good comparison information project explain source difference compiler size also talk learned comparison feel free use link skip ahead interest table content think insightful rust baseline haskell size depending count interesting reason c size mundane reason python half size fancy metaprogramming rust group size different design decision scala size ocaml size depending count similar haskell think insightful reply amount code compared line byte terrible metric think provide good amount insight case number reason least subjectively well controlled instance different team writing large program ever heard read nobody including knew would ask done nobody trying game metric everyone best finish project quickly correctly everyone exception python project discus later implementing program sole goal passing automated test suite deadline result confounded much group deciding solve differentharder problem project done period month team needed gradually extended pas known unknown test mean helpful write clean understandable code hack everything together passing course test code used anything else nobody would read compiler limited subset java textual assembly useful library standard library allowed parsing helper even standard library mean comparison confounded powerful compiler library used team secret test see run final submission deadline meant incentive write test code make sure compiler robust correct could handle tricky edge case everyone involved student team talk composed people consider quite competent programmer everyone least year full time work experience internship mostly high end tech company sometimes even working compiler nearly programming year enthusiast read lot internet beyond course generated code counted grammar file code generated code counted thus think amount code provides decent approximation much effort project took much would maintain longer term project think smaller difference also large enough rule extraordinary claim like one read say writing compiler haskell take le half code c virtue language rust baseline one teammate written line rust teammate written maybe line rust hackathon project compiler line wc l source line code including blank comment wc c one thing discovered measure related approximately factor project checked minor exception note rest post refer line amount mean wc l result mean really matter unless note difference convert factor wrote another post describing design passed public secret test also included extra feature fun pas test probably added around extra line also around line total unit test test harness haskell haskell team composed two friend written maybe couple thousand line haskell plus reading lot online haskell content bunch similar functional language like ocaml lean one teammate know well seems like strong programmer used haskell compiler line wc l sloc team also significant difference measure ratio compiler line sloc byte implement extra feature passed public secret test important note including test least fair team since thorough correctness line test caught edge case team happened edge case tested course test counting test side v compiler raw line also inclined towards byte reasonable measure amount code haskell project longer line average since lot line dedicated closing brace oneliner function chain split onto bunch line rustfmt digging difference size one friend team came following explain difference used handwritten lexer recursive descent parsing used nfa dfa lexer generator lr parser pas turn parse tree ast abstract syntax tree convenient representation code took substantially code line compared extra line used fancy generic ast type transitioned different type parameter information added pas helper function rewriting probably ast code line implementation build struct literal mutate option field add information pass progress line code code generation mostly attributable abstraction necessary generate combine code purely functional way use mutation string writing difference plus test explain difference line fact file middle pass like constant folding scope resolution close size however still leaf difference byte longer average line guess require code rewrite whole tree every pas use visitor mutation bottom line say setting aside design decision rust haskell similarly expressive maybe slight edge rust ability easily use mutation convenient also interesting learn choice use recursive descent parser handwritten lexer paid risk since professor recommended taught figured would easier right haskell fan object team probably use haskell fullest potential better haskell could done project way le code believe someone like edward kmett could write compiler substantially fewer line haskell friend team use lot fancy super advanced abstraction allowed use fancy combinator library like lens however would come cost difficult would understand compiler people team experienced programmer knew haskell extremely fancy thing chose pursue figured would take time figure would save make code harder teammate write understand seems like real tradeoff claim seen haskell magical compiler devolves something like haskell extremely high skill cap writing compiler long care maintainability people also extremely skilled haskell le generally applicable another interesting thing note start every offering course professor say student use language run school server issue warning team using haskell highest variance mark language many team using haskell overestimating ability crashing burning getting terrible mark language haskell team quite well get perfect like friend c next talked friend team using c knew one person team c used multiple course uwaterloo presumably everyone team c experience project raw line including test code including around line extra feature making size nontest code also around line extra feature passed public test passed secret test presumably implement fancy array vtables required spec take maybe line code dig deeply difference friend speculate mostly explained using lr parser tree rewriter instead recursive descent parser lack sum type pattern matching c used extensively helpful needing duplicate signature header file rust another thing compared compile time laptop compiler take clean debug build clean release incremental debug friend timing hand c build using parallel make said sounded quite similar experience caveat put implementation bunch small function header file save signature duplication cost longer time also measure pure header file line count overhead python one friend extraordinarily good programmer chose project alone python also implemented extra feature fun team including ssa intermediate representation register allocation optimization hand working alone implementing bunch extra feature dedicated least effort code quality example throwing undifferentiated exception error relying backtraces debugging instead error type message like compiler raw line passed public secret test also implemented way extra feature team compare hard determine extra code took many extra feature powerful version simple thing everyone needed implement like constant folding code generation extra feature probably account line least though confident code least twice expressive one large part difference likely dynamic typing astrs alone line type definition many type defined throughout compiler also always constrained type system example need infrastructure ergonomically adding new info ast progress pass accessing later whereas python set new field ast node powerful metaprogramming also explains part difference example although used lr parser instead recursive descent parser case think needed le code instead tree rewriting pas lr grammar included python code snippet construct ast generator could turn python function using eval part reason use lr parser constructing ast without tree rewriting pas would require lot ceremony either generating rust file procedural macro tie grammar snippet rust code another example power metaprogramming dynamic typing line file called visitrs mostly repetitive boilerplate code implementing visitor bunch ast structure python could short line function recursively introspects field ast node visit using dict attribute fan rust statically typed language general inclined point type system helpful avoiding bug performance fancy metaprogramming also make difficult understand code work however comparison surprised expected difference amount code quite large difference general really close needing write twice amount code still think rust worth tradeoff nothing sneeze future inclined hack something together rubypython need get done quickly without team throw away rust group last comparison also interesting friend project rust one teammate know friend good amount rust experience contributed rust compiler done lot reading know teammate project raw line source line including test code generated code extra feature passed secret test public code generation test find time final deadline implement fancier piece spec time size compiler written language strictly le functionality result really surprising dwarfed betweenlanguage difference investigated thus far compared wc l file size listing well spot checking implemented specific thing different code size seems come consistently making different design decision example front end lexing parsing ast building raw line used dfabased lexer lalr parser group similar thing without much code looking weeder file noticed number different design decision chose use fully typed parse tree instead standard stringbased homogeneous parse tree presumably required lot type definition additional transformation code parsing stage complex parser generator used tryfrom trait implementation converting parse tree type ast type validating correctness lead ton line impl block used function returned result type accomplish thing le line overhead also freed u type structure bit making parameter reuse easier thing u single line match branch line impl statement type structured way required le copypasting example used separate isabstract isnative isstatic field whose constraint checking code needed copypasted twice voidtyped method method return type slight modification whereas u void special type came taxonomy modifier mode visibility enums enforced constraint type level constraint error generated default case match statement translated modifier set mode visibility look code analysis pass compiler similarly large talked friend seems implement anything like visitor infrastructure guessing along smaller design difference account size difference part visitor allowed analysis pass pay attention part ast needed instead pattern match entire ast structure saving lot code code generation line looked code seems nearly difference chose intermediate data structure assembly instruction used string formatting directly output assembly required defining type output function instruction operand type used also meant constructing assembly instruction took way code might formatting statement used terse instruction like mov ecx edx needed giant statement rustfmt split line constructed instruction bunch intermediate nested type operand involving level nested parenthesis deepest could also output block related instruction like function preamble one formatting statement full construction instruction team considered using abstraction would make easier option either outputting textual assembly directly emitting machine code however requirement course thing could also accomplished le code better performance using trait method like push reg register another angle considered might make debugging testing easier realized looking generated textual assembly would actually easier read test snapshot testing long inserted comment liberally apparently correctly predicted would take lot extra code real benefit given knew going need bother good comparison intermediate representation c group used extra feature took closer extra line used simple structure making simple type definition construction code used operation close java required meant ir much smaller thus required le construction code resulting assembly since many language operation like call cast expanded many assembly instruction also say really helped debugging since cut lot cruft easy read higher level representation also allowed simple optimization ir c team came really nice design got much benefit much le code overall seems like overall size multiplier due consistently making different design decision large small direction larger code implemented number abstraction added code missed abstraction implemented lead le code result really surprised knew design decision mattered guessed beforehand would lead difference large given surveying people consider strong competent programmer result comparison one learned something think helped read lot write compiler took course could take advantage clever design people come found worked well like ast visitor recursive descent parsing even taught course one thing really made think cost abstraction abstraction may make thing easier extend future guard certain type error need considered fact may end time amount code understand refactor time amount possible location bug le time left spend testing development course unlike real world knew exactly needed implement never touch code afterwards eliminates benefit preemptive abstraction however going challenge extend compiler arbitrary feature tell later pick compiler start choose even setting aside familiarity simply much le code need understand change could potentially choose better abstraction requirement like c team ir knew needed extend thing also solidified taxonomy head abstraction expect remove code given current requirement like visitor pattern abstraction expect add code given immediate requirement may provide extensibility debuggability correctness benefit scala also talked friend mine project previous term using scala project test exact one compiler raw line code counting test passed secret test public test implement extra feature comparing line without extra feature test compiler size one design factor low line count used different approach parsing course allowed use command line lr table generator tool course provided team used team mention saved implement lr table generator also managed avoid writing lr grammar using line python script scraped java grammar web page found online translated input format generator tool still needed tree building scala overall parsing stage came line team use lr parsing lead larger parser recursive descent one rest compiler similarly smaller though without obvious large design difference although dig code suspect probably due difference expressiveness scala rust scala rust similar functional programming feature helpful compiler like pattern matching scala managed memory save code required make rust borrow checker happy scala also miscellaneous syntactic sugar rust ocaml since team interned jane street language considered using ocaml decided rust curious ocaml might turned talked someone else knew interned jane street indeed compiler ocaml two former jane street intern compiler raw line including small amount test code extra feature passed secret test public test like group look like lot size difference due using lr parser generator tree rewriting parsing well regex nfa dfa conversion pipeline lexing frontend lexingparsingast construction line similar ratio byte also used expect test parser used similar snapshot test put expected output outside code parser test line total leaf line line interface file type declaration rest compiler larger count interface file basically size count look like setting aside parsing design decision rust ocaml seem similarly expressive except ocaml need interface file rust conclusion overall glad comparison learned lot surprised many time think overall takeaway design decision make much larger difference language language matter insofar give tool implement different design
81,Lobsters,scala,Scala programming,"sttp, curl, request logging and functional programming",https://blog.softwaremill.com/sttp-curl-request-logging-and-functional-programming-7d290ef3b9a0,sttp curl request logging functional programming,sttp curl request logging functional programming sttp kasper kondzielski source debugging backend wrapper functional programming describe send wrapper immutable value function function higherorder function description interpretation equational reasoning code reuse give try sttp ammonite doc contain quickstart,sttp curl request logging functional programminga brandnew addition sttp ability convert description http request curl command contributed kasper kondzielski feature small might useful development debuggingphoto sourcehere work first describe request using sttp api example call tocurl method get command run terminal debugginghow useful development example debuglog request along curl command necessary reproduce themrequest logging sttp best implemented using backend wrapper separate description request execution example create following logging backend use follows request logged along way reproduce itfunctional programmingwhat functional programming lot sttp first describe request using sttp api need provide backend know send request network finally backend wrapper add functionality backends redirects logging metric etcin word immutable value description request sttp api defines number function add detail value backends function well interpret description send request network finally backend wrapper higherorder function take function backends return function backend separation description interpretation useful technique also core many functional library creating description representing value manipulating using function allows equational reasoning greater code reuse moreover interpreter higherorder interpreter naturally help separating concernsgive try see work practice need core sttp library either use ammonite try repl add project transitive dependency doc contain quickstart case
82,Lobsters,scala,Scala programming,The Interpreter Pattern Revisited (2015),https://www.youtube.com/watch?v=hmX2s3pe_qk,interpreter pattern revisited,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature interpreter pattern revisited youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature interpreter pattern revisited youtube
83,Lobsters,scala,Scala programming,The Evolution of a Scala Programmer,https://medium.com/@olxc/the-evolution-of-a-scala-programmer-1b7a709fb71f,evolution scala programmer,john de go,john de goestypesafe composable asynchronous concurrent high performance resourcesafe testable functional resilient factorial
84,Lobsters,scala,Scala programming,Breaking @tailrec,https://jasonfil.wordpress.com/2019/06/06/breaking-tailrec/,breaking tailrec,register log,site marked private owner would like view need two thing wordpresscom account account need email address password register permission site owner created account log revisit screen request inviteif already great log
85,Lobsters,scala,Scala programming,Scala 2.13,https://github.com/scala/scala/releases/tag/v2.13.0,scala,release summary collection standard library language compiler collection redesign simpler method signature simpler type hierarchy separate module immutable simplified view work alphanumeric method name new faster implementation new concrete collection new abstract collection type new method safer added inplace operation mutable collection java interop moved collection serialization changed scaladev sbtsbt added added errorprone method deprecated added added method added method added deprecated symbolic method multiple argument adding custom collection operation work differently concurrency standard library addition integrated java interop new new use interpolator pattern match new new et al stringops new named element new new new converter function extractor new annotation standard library change library fit profile extends standard library deprecation removal scalaxml scalaparsercombinators scalaswing language change literal type partial unification default byname implicits recursive dictionary byname implicits sip underscore numeric literal procedure syntax deprecated view bound deprecated symbol literal deprecated unicode arrow deprecated syntax disabled default bug compiler deterministic reproducible compilation scaladev optimizer improvement scripting environment integration jep compiler performance performance graph migration compatibility jdk compatibility guide policy sbt maven gradle obtaining scala scalalangorg maven central reporting bug issue tracker usersscalalangorg contributor adriaan moor lukas rytz jason zaugg seth tisue stefan zeiger eugene yokota lightbend commercial support conclusion,delighted announce availability scala release summary improves scala following area collection standard library collection overhauled simplicity performance safety centerpiece release standard library future faster robust elsewhere useful class method added language literal type partial unification byname implicits compiler faster deterministic output improved optimizer learn read collection redesign standard library collection overhauled simplicity performance safety centerpiece release ordinary code used old collection continue work asis except detailed important collection change simpler method signature canbuildfrom transformation method longer take implicit canbuildfrom parameter resulting library easier understand code scaladoc ide code completion also make user code compile faster new buildfrom implicit used handful place need simpler type hierarchy traversable traversableonce remain deprecated alias iterable iterableonce parallel collection separate module result genseq gentraversableonce et al gone immutable scalaseq seq alias collectionimmutableseq alias possiblymutable collectionseq also change type varargs method pattern match array passed varargs defensively copied simplified view work alphanumeric method name symbolic operator alias descriptive alphanumeric method name example alias concat alias prepended alias appended new faster hashmapset implementation immutable mutable version completely replaced substantially outperform old implementation scenario mutable version perform par java standard library implementation new concrete collection new abstract collection type seqmap additional collection change new collection method replaces old collection method argument companion object desired collection type example vector api change enables support collection type including map bitset et al collectionbreakout required canbuildfrom longer exists avoid constructing intermediate collection use view collection instead list vector safer offer safe publication java memory model using releasefence added inplace operation mutable collection filterinplace mapinplace flatmapinplace others method update original collection inplace rather creating new collection hold result java interop moved extension method scala scalajdk explicit converter java scalajdkjavaapi reorganization centralizes toandfromjava converter including collection noncollection type single package added stepper like iterator support efficient unboxed iteration java interop collection serialization changed collection use serialization proxy pattern uniformly whenever possible scaladev sbtsbt classloading environment notably sbt nonforked test execution code change may needed added unfold allows constructing collection iterator initial element repeated optionreturning operation terminating none added collection companion object iterator added lengthissizeis sizecompare allow fluent size comparison without traversing whole collection example xssizeis xssizeis errorprone map method deprecated deprecated filterkeys mapvalues instead use new method name mapview eg viewfilterkeys added lazyzip added tapeach method allows inserting sideeffects chain method call collection view added updatedwith updatewith method map updatedwith immutablemap updatewith mutablemap method allow modifying map entry based current value added maxoption minoption maxbyoption minbyoption method safely handle empty case deprecated symbolic method multiple argument method may disallowed entirely future scala adding custom collection operation work differently see documentation link learn new apis adapt code consult welcome assistance continuing expand improve document concurrency future internally redesigned goal provide expected behavior broader set failure condition provide foundation increased performance support robust application detail updated revised future promise implementation among change handling interruptedexception rejectedexecutionexception improved made global executioncontext batched added synchronous parasitic executioncontext standard library addition integrated java interop old module part standard library provides converter option function type java stream mentioned collection converter javaconverters moved fit new scheme new scalautilusing us loan pattern provide simple form automatic resource management new use interpolator pattern match provides simple string matcher dual simple string interpolator example val day month year new pipe tap chaining operation available via import scalautilchaining example evaluates example println first print return new tointoption et al new extension method string provided stringops parse literal efficiently reject invalid input without throwing exception example tointoption tointoption none todoubleoption new named product element new withright withleft method left right allow upcasting type parameter example left withright string type either int string without write int new orderingdoubletotalordering orderingfloattotalordering new converter function extractor new method provide conversion among optional function partialfunctions extractor object new unused annotation annotation useful suppressing warning xlint standard library change library fit profile option extends iterableonce improves type inference calling overloaded flatmap undeprecate linesiterator avoid conflict jdk stringlines partialfunction overload andthen replaced cloneableserializable trait type alias controlthrowable never suppresses standard library deprecation removal complete list deprecation user likeliest encounter stringbuilding using nonstring type left aka deprecated partialfunctionfromfunction replaces partialfunctionapply right projection either deprecated deprecated usecase scaladoc tag deprecated universal equiv following module longer included distribution scalaxml scalaparsercombinators scalaswing communitymaintained published maven central assorted deprecated method class throughout standard library removed entirely language change primarily library release languagecompiler release regardless language change included feature literal type literal string integer associated literal type see original proposal motivation detail compiler provide instance new typeclass scalavalueof singleton type singleton upper bound prevents widening eg int singleton value singleton type accessed calling method valueof example val one valueof partial unification default byname implicits recursive dictionary extends byname method argument support implicit explicit parameter enables implicit search construct recursive value flagship usecase typeclass derivation detail see byname implicits sip underscore numeric literal underscore used spacer example experimental feature deprecation procedure syntax deprecated deprecated def use instead def unit view bound deprecated deprecated b use instead implicit ev b symbol literal deprecated symbol remain supported singlequote syntax deprecated library designer may wish change apis use string instead deprecated foo use instead symbol foo unicode arrow deprecated particular single arrow operator wrong precedence deprecated use instead postfixops syntax disabled default syntax already deprecated cause error unless feature explicitly enabled error x size use instead xssize adjustment import including wildcard import shadow locally defined identifier underscore longer legal identifier unless backquoted bug val pattern match discard value without incurring warning implicit val also pattern match useless longer add implicit scope nt assume unsound type identliteral pattern match form case x n involve calling equal unsound type x ntype consider rewriting case x ntype make extractor pattern null safe null treated match better typing overloaded higherorder method change key enabler new collection design rework unification object javascala interop namebased pattern matching changed enable immutable seq match automatic etaexpansion zeroargument method longer deprecated improve binary stability extension method macro must explicit return type mixin field trait setter longer jvm final addition object field static support implicitnotfound parameter disallow repeated parameter except method signature valuediscard warning suppressed via type ascription unit x op par xop xop compiler deterministic reproducible compilation compiler generates identical output identical input case reproducible build scaladev optimizer improvement operation collection array optimized including improved inlining scaladoc support setting canonical url help search engine identify relevantrecent version page several version available compiler suggests possible correction unrecognized identifier example list sizzle value sizzle member list int mean size added yimports custom preamble import example yimports x z mean x z root import form import x import import z scalacompiler jar longer depends scalaxml plus change compiler option partition option function v verbose w warning general old flag still exist alias exception breaking change include replaced warnoption woption replaced xprint vprint werror recommended xfatalwarnings promoted deprecation xlint deprecation deprecated xfuture instead use eg removed ynoadaptedargs removed xmaxclassfilelength hardcoded scripting environment integration script runner scala scriptscala longer us fsc compilation daemon default daemon reliable likely removed entirely future release jep style long commandline option supported repl undergone internal refactoring enable future improvement ant support longer bundled compiler performance invested heavily compiler speedup cycle work actually already landed series come addition compiler performance better compared thanks mainly new collection see performance graph also certain kind code compile much faster compiler aggressively prune polymorphic implicits search migration upgrading enable xmigration upgrading request migration advice compiler compatibility like scala series target java minimum also work later jdks jdk see jdk compatibility guide although scala mostly source compatible facilitate crossbuilding binary compatible allows u keep improving scala compiler standard library release fully binary compatible according policy followed since project built sbt must use least sbt use scala move bump scalaversion setting existing project scala also work maven gradle build tool obtaining scala scala release available variety channel including limited bump scalaversion setting sbtbased project download distribution scalalangorg obtain jar via maven central certain package manager homebrew sdkman offer scala reporting bug please file bug encounter issue tracker nt yet sure something bug ask usersscalalangorg contributor big thank everyone helped improve scala reporting bug improving documentation kindly helping others forum meetups submitting reviewing pull request magnificent scala result merging pull request pull request queue managed scala team lightbend adriaan moor lukas rytz jason zaugg seth tisue stefan zeiger eugene yokota thanks lightbend continued sponsorship scala core team effort lightbend offer commercial support scala new collection api developed fruitful collaboration scala center major contribution community release brought contributor according git shortlog sn nomerges thank julien richardfoy lukas rytz jason zaugg p marki stefan zeiger kenji yoshida adriaan moor josh lemer nthportal mile sabin diego e alonsoblas seth tisue guillaume martres marcelo cenerino dale wijnand odd möller martin odersky allan renucci georgi krastev eugene yokota harrison houghton martijn hoekstra viktor klang aaron hawley ólafur páll geirsson rex kerr philippus baalman matthew de detrich isaac levy exoego greg methvin jasper moeys sébastien doeraene wholock aggelos biboudis yuiknk matthias sperl xavier fernández salas ethan pronovost janek bogucki awibisono buildtools mike skells jimin hsieh jonathan frawley xavier guihot chris phelps chanyongmoon cong zhao enno runne lptk pathikrit bhowmick yuval dagan li haoyi guillaume massé christopher hunt kamil kloch marco zühlke danila matveev juliusz sompolski 杨博 yang bo masaru nomura benjamin kurczyk vince arnout engelen tim ruhland nicolas stucki nicolas rinaudo stephen nancekivell ashwin kobenko mikhail song kun anthony tjuatja kbigwheel keto kelebra mcintdan mmocentre psilospore roman svatsan texasbruce timzh valydia veera venky 虎鸣 adianto wibisono alden torres alejandro sellero alessandro buggin alex glukhovtsev alex levenson alexeynm anatolii andrei baidarov andriy plokhotnyuk bakhytzhan karabalin benni callum turnbull chris birchall chujie zeng cody allen daniel dietrich daniel moss daniel slapman david barri david hoepelman denis buzdalov denys shabalin dhanesh dhanesh arole edin dudojević eugene platonov faiz halde gabriel claramunt heikki vesalainen iaroslav zeigerman jack koenig jean michel rouly jeff brower jeff shaw josh kazuhiro serum kentaro tokutomi lionel parreaux magnoliak martin duhem michael steindorfer nafer sanabria narek asadorian oleksii tkachuk oscar boykin pj fanning paolo giarrusso pap lőrinc pavel petlinsky peter fraenkel philip piotr kukielka qiang sima rob norris robin stephenson rui gonçalves ruud welling ryan mcdougall shankarshastri simão martin sperl matthias sujeet kausallya gholap uttej guduru vincent de haan vladimir parfinenko vlastimil dort yang bo zizheng tai ccjoywang esarbe howtonotwin jvican conclusion thank contributor entire scala community may find scala joy code
86,Lobsters,scala,Scala programming,6 reasons why not to use Akka Cluster for interservice communication in a microservice architecture,https://blog.softwaremill.com/6-reasons-why-not-to-use-akka-cluster-for-interservice-communication-in-a-microservice-architecture-2736d5223573,reason use akka cluster interservice communication microservice architecture,reason use akka cluster interservice communication microservice architecture akka cluster http seed akka management blog post running akkacluster kubernetes cluster state deployment split brain resolver http docakkaiodocsakkacurrentimagesmemberstatespng network partition recommended binary compatibility binary compatible nt atmostonce testability akka team say akka use akka cluster http docakkaiodocsakkacurrentclusterusagehtml whenandwheretouseakkacluster distributed monolith summary instead akka grpc cluster client akka,reason use akka cluster interservice communication microservice architectureakka cluster powerful tool allowing model high performance stateful application quite recently encountered client system combining multiple different service single akka cluster let discus today bad idea akka designed scenariohttp imagine system composed microservices would work single akka cluster seed first akka cluster requires seed node initial contact point node joining deploying microservice number one going join seen scenario dedicated service created sole purpose seed service scenario service tightly coupled nothing practice deployed special seed node service downif using kubernetes mesos similar system akka management extension allow manage seed discovery automatically read take look grzegorz kocur blog post running akkacluster cluster state deployment split brain resolvereach akka cluster node specific current state assignedsource http docakkaiodocsakkacurrentimagesmemberstatespngwhen node intentionally shut make sure notifies cluster fact akka managment kubernetes usually automatically use package common scenario custom prestop hook however notify cluster shut intentional node go unreachable state happens case shut half microservices cluster well may consider split brain may conclude network partition depending algorithm split brain resolver result may remaining working part get shut assuming second part cluster working containing majoritybe aware service cluster tied cluster state need make sure lifecycle related operation properly executed also mean often shut part system mean service tightly coupledakka cluster setting named autodowning making unreachable node go automatically directly status however recommended use production environment especially using cluster singleton sharding akka binary compatibilitylet say reach moment would like use new scalajdk version new fresh microservice however single akka cluster simple node must binary compatible concern akka version service also scala java version still using java serialization nt requirement compatible akka version often lead creation common project many people consider sharing code service antipattern may say small lib solving one particular problem often go control growing biggest project onceakka default us atmostonce message delivery semantics may best choice interservice communication depending project course special mixin called atleastoncedelivery however need akka persistence order able use testabilitycurrently developer use standard untyped actor connect different service cluster usually fetch actorref service located different application path mean interface communication include type information expected message need switch backandforth repository see command handled may lead implementation error make test writing process much difficult people may strive share code fetching actorref wrap trait introduce test actor mock however cause infamouscommon module grow introduces coupling akka team say sosince akka documentation includes new section use akka cluster general recommend using akka cluster actor messaging different service would result tight code coupling service difficulty deploying independent one main reason using microservices architecturesource http docakkaiodocsakkacurrentclusterusagehtml whenandwheretouseakkaclusterit clearly state using akka cluster interservice communication wrong way may lead distributed monolithsummaryi deny system different service connected single akka cluster working making money however choice akka cluster main method communication best thing often lead tighter coupling service resulting often overhead related development management deploymentswhat instead well lot option good old rest http apis binary grpc even akka grpc however also base microservices architecture message use eg apache kafkaone may ask cluster client feature allowing connect cluster another actor system well akka deprecated superseded akka grpc removed
87,Lobsters,scala,Scala programming,"ZIO adds asynchronous stack traces, full execution traces & fiber ancestry traces",https://www.slideshare.net/jdegoes/error-management-future-vs-zio,zio add asynchronous stack trace full execution trace fiber ancestry trace,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
88,Lobsters,scala,Scala programming,First Beta Release of an In-Memory Machine Learning Software in Scala,https://picnicml.github.io,first beta release inmemory machine learning software scala,doddlemodel doddlemodel compare existing solution gitter installation getting started doddlemodel doddlebeamexample feature preprocessing metric baseline model linear model model selection miscellaneous use case contributing document roadmap performance doddlemodel native linear algebra library breeze netlibjava breeze memory parallelism benchmark linear regression logistic regression softmax classifier core maintainer awesome contributor resource,doddlemodel doddlemodel inmemory machine learning library summed three main characteristic compare existing solution doddlemodel take position scikitlearn scala consequence much lightweight eg spark ml fitted model deployed anywhere simple application concurrent distributed system built akka apache beam framework choice training estimator happens inmemory advantageous unless dealing enormous datasets absolutely fit ram chat u gitter installation project published scala version add dependency sbt project definition librarydependencies seq iogithubpicnicml doddlemodel latestversion add optionally utilize native library significant performance boost orgscalanlp breezenatives note latest version displayed maven central badge v prefix removed sbt definition getting started complete list code example example serve trained doddlemodel pipeline implemented apache beam see doddlebeamexample feature preprocessing metric baseline model linear model model selection miscellaneous use case contributing want help u document make deciding much easier sure also check roadmap performance doddlemodel developed performance mind native linear algebra library breeze utilizes netlibjava accessing hardware optimised linear algebra library note breezenatives dependency need added sbt project definition tl dr seeing something like info successfully loaded mean blaslapackarpack implementation used information see breeze documentation memory encounter javalangoutofmemoryerror java heap space increase maximum heap size xms xmx jvm property eg use initial maximum heap space note maximum heap limit jvm least theory make sure use jvm memory needed error still occurs using hyperparameter search cross validation see next section parallelism limit number thread running one time thus memory consumption cross validation hyperparameter search fixedthreadpool executor used default maximum number thread set number system core set dmaxnumthreads jvm property change eg allow thread use benchmark experiment ran multiple time iteration implementation fixed hyperparameters selected way model yielded similar test set performance linear regression implementation rmse training time prediction time scikitlearn doddlemodel logistic regression implementation accuracy training time prediction time scikitlearn doddlemodel softmax classifier implementation accuracy training time prediction time scikitlearn doddlemodel core maintainer collaborative project possible without awesome contributor core team currently consists following developer resource
89,Lobsters,scala,Scala programming,"Renaissance Suite, a benchmark suite for the JVM",https://renaissance.dev/,renaissance suite benchmark suite jvm,,renaissance benchmarking suite contains range modern workload comprising various popular system framework application made jvm renaissance benchmark exercise range programming paradigm including concurrent parallel functional objectoriented programming
90,Lobsters,scala,Scala programming,Linkerd's design principles,https://linkerd.io/2019/04/29/linkerd-design-principles/,linkerd design principle,already linkerd move jvm rust keep simple minimize resource requirement work linkerd design principle documentation cloud native computing foundation github slack twitter mailing list dimitry b,tl dr service mesh need design principle think built linkerd around three core principle designed reduce operational human running service mesh launched linkerd last september marked substantial departure linkerd gone jvm config file setup tuning process ranged intricate complex linkerd could installed second without configuration application change would work mention linkerd literally order magnitude smaller faster little month already linkerd reception change resoundingly positive move jvm rust huge part success linkerd important decision codifying set core product design principle principle based lesson learned year helping company around world get linkerd production user getting tremendous value linkerd paying heavy price get price time spent configuring understanding tuning operating linkerd address design process started writing set design principle would ensure right user principle brief keep simple linkerd operationally simple low cognitive overhead operator find component clear behavior understandable predictable minimum magic minimize resource requirement linkerd impose minimal performance resource cost data plane layer work linkerd break existing application require complex configuration get started something simple three principle one thing common reduce operational cost running linkerd whether measured compute resource far importantly time spent human being principle require linkerd stay true goal keeping cost running service mesh low possible focus cost critical linkerd fundamentally product human being operator sres platform owner seen way reducing operational cost nt nice reflection actual human being going spend time energy project u minimize operational cost would user tremendous disservice detail principle example action check linkerd design principle documentation linkerd community project hosted cloud native computing foundation feature request question comment love join rapidlygrowing community linkerd hosted github thriving community slack twitter mailing list come join fun image credit dimitry b
91,Lobsters,scala,Scala programming,No More Orphans,https://blog.7mind.io/no-more-orphans.html,orphan,orphan eliminating dependency implicit priority optional typeclass instance aux pattern last corner case scala bug implementation companion repository logstage distage catseffectresource,orphan ever created library scala fp ecosystem may faced tough choice library support cat scalaz library usable without fp library add integration refined enumeratum slick shapeless circe argonaut popular library choice come set tradeoff choose settle cat scalaz user may forced import shim use library choose dependency fp lib catsscalaz user write missing instance integration may choose provide orphan implicits implicits defined outside type companion object separate module mylibcats mylibscalaz unlike implicit instance defined companion object orphan implicits imported picked compiler user forced manually find import instance whenever want interact library import catsimplicits import mylibinteropcats library foundational application database driver effect system nearly every file user application might repeat magic import worse still library might even library export orphan import tax compound every library follows pattern import otherlibadapterscats import xyzlibinstancescirce aaaaah user experience suffers proportionally library degree modularization fewer instance provided core module magic import required use library way get rid magic import eschew integration module completely add integration every library companion object right core module would give library heavy dependency footprint consisting library brought define instance two forcing user depend every scala library really good idea another way cake eat well yeah eliminating dependency start actually pretty ok idea depend every library right core module want user depend library sbt happily let u add dependency passed library user using optional scope librarydependencies orgtypelevel catseffect optional following way integration work optional dependency degrade gracefully user depend optional library function toplevel object mention optional type extension method type mention optional type extension method implicit conversion type tofrom optional type work nonorphan instance optional typeclasses type companion object nonorphan instance optional type typeclasses companion object optional dependency alone already provide rich integration external library without forcing unnecessary dependency user need need define typeclass instance optional type typeclasses add optional dependency stop trait myresource f def acquire f def release f unit user without catseffect dependency able call make method wo nt see implicit conversion user catseffect get implicit syntax automatically without import object myresource def make f acquire f release f unit myresource f new myresource f define nonorphan extension method implicit class tocats f private val myresource myresource f extends anyval def tocats catseffectresource f define nonorphan implicit conversion implicit def fromcats f catsresource catseffectresource f myresource f user without catseffect dependency able call make method affected implicit conversion val resource myresourcemake try try resourceacquire ok resourcetocats degrade gracefully compile error symbol type catseffectresource missing classpath symbol required value mylibmyresourcecatsresource make sure type resource classpath check conflicting dependency ylogclasspath full rebuild may help myresourceclass compiled incompatible version catseffect resourcetocats typeclasses happens try add optional instance typeclass package mylib trait mymonad f def pure f def flatmap b fa f f f b f b case class mybox get object mybox implicit val mymonadforbox mymonad mybox new mymonad mybox override def pure mybox mybox override def flatmap b fa mybox f mybox b mybox b f faget implicit val optionalcatsfunctorformybox catsfunctor mybox new catsfunctor mybox def map b fa mybox f b mybox b mybox f faget without cat dependency implicit search mentioning mybox start failing object withoutcats implicitly mymonad mybox symbol type catsfunctor missing classpath implicitly ordering mybox int symbol type catsfunctor missing classpath implicitly mybox unit mybox unit symbol type catsfunctor missing classpath oh broke scala seems like attempt creating optional instance end breaking compiler scalac break trying find implicits mybox following implicit priority compiler eventually try search mybox companion object suitable implicits check implicit definition find class know implicits argument result type loudly complain abort compilation proceed need fool scalac somehow need way hide real type implicits required library missing time reveal type present picked implicit search optional typeclass instance naive way hiding type work generic parametrization successfully obscure type bytecode return type become javaobject scala compiler see crash anyway object mybox extends myboxfunctor catsfunctor trait myboxfunctor f implicit val optionalcatsfunctorformybox f mybox new catsfunctor mybox def map b fa mybox f b mybox b mybox f faget asinstanceof f mybox error symbol term root cat missing classpath type must bound late scalac done inspecting mybox implicits need typelevel function provide u correct type library present pas otherwise function surprisingly easy write though class gimmecatsfunctor functor f object gimmecatsfunctor implicit val gimmecatsfunctor gimmecatsfunctor catsfunctor new gimmecatsfunctor catsfunctor pas type parameter implicit assign catsfunctor parameter effectively going use version aux pattern implicit def optionalcatsfunctorformybox f implicit gim gimmecatsfunctor f f mybox new catsfunctor mybox def map b fa mybox f b mybox b mybox f faget asinstanceof f mybox work handle defining optional instance foreign typeclasses library type instance library typeclasses foreign type look similar object mymonad implicit def optionalmymonadfromcatsmonad f catsmonad implicit f mymonad f val masinstanceof catsmonad f new mymonad f override def pure f mpure override def flatmap b fa f f f b f b mflatmap fa f private sealed trait catsmonad private object catsmonad implicit val get catsmonad catsmonad null assign catsmonad summon accordingly use asinstanceof result since already know type underneath never need actual instance catsmonad set instance null save user heap allocation lastly making machinery private ensures way mess scheme cause failed cast two pattern let u define optional nonorphan instance work import user need however still class implicits treated specially implicits implement multiple typeclasses signature like classa classb last corner case suppose want add another optional instance mybox time implement multiple typeclasses single implicit object mybox implicit def optionalcatssemigroupalsemigroupkinvariantformybox f catssemigroupalsemigroupkinvariant f mybox new impllsemigroupalsemigroupkinvariant mybox def combinek x mybox mybox mybox def product b fa mybox fb mybox b mybox b mybox faget fbget def imap b fa mybox f b g b mybox b mybox f faget asinstanceof f mybox trait impllsemigroupalsemigroupkinvariant k extends catssemigroupal k catssemigroupk k catsinvariant k private sealed trait catssemigroupalsemigroupkinvariant f private object catssemigroupalsemigroupkinvariant implicit val get catssemigroupalsemigroupkinvariant impllsemigroupalsemigroupkinvariant null seems work fine first summon instance project cat object withcats implicitly semigroupk mybox implicitly semigroupal mybox however project without cat would break using implicits mybox object withoutcats implicitly mymonad box error symbol type catssemigroupal missing classpath error symbol required trait mylibimpllsemigroupalsemigroupkinvariant problem trait impllsemigroupalsemigroupkinvariant defined library externally scalac always find successfully inspect notice broken since superclass missing classpath changing trait type alias work either private object catssemigroupalsemigroupkinvariant type impllsemigroupalsemigroupkinvariant k catssemigroupal k catssemigroupk k catsinvariant k implicit val get catssemigroupalsemigroupkinvariant impllsemigroupalsemigroupkinvariant null error symbol type catssemigroupal missing classpath error symbol required type mylibcatssemigroupalsemigroupkinvariantimpllsemigroupalsemigroupkinvariant scalac always find type alias look inside breaking scheme one option available move trait separate module mylibcatssupport depend optionally core module user add module cat instance otherwise even cat dependency would trade one inconvenience another sure import orphan every file anymore still find include special integration module must way define optional composite instance without creating separate module need add guarding implicit reveal type catssemigroupalsemigroupkinvariant private sealed trait catssemigroupalsemigroupkinvariant f private object catssemigroupalsemigroupkinvariant implicit def get implicit havecats catsisavailable catssemigroupalsemigroupkinvariant impllsemigroupalsemigroupkinvariant null private sealed trait catsisavailable private object catsisavailable implicit def get f gimmecatsfunctor catsisavailable null instance catsisavailable exist gimmecatsfunctor typeclass defined previously reveal catsfunctor summons succesfully happen cat dependency current project mention impllsemigroupalsemigroupkinvariant type argument result since inspected deeply implicit actually considered havecats guard ensures considered unless correct unbroken noncats project object withoutcats implicitly mymonad box success one minor oddity left instance found summoned intersection type object withcats implicitly invariant mybox semigroupal mybox error could find implicit value parameter e catsinvariant mylibmybox catssemigroupal mylibmybox error implicitly invariant mybox semigroupal mybox time actual scala bug fortunately u fixed seemingly noop transformation declaring result type x x applying type id type alias presumably construct actually nothing type type optionalinstance implicit def optionalcatssemigroupalsemigroupkinvariantformybox f catssemigroupalsemigroupkinvariant optionalinstance f mybox object withcats implicitly invariant mybox semigroupal mybox success may tedious create new class foreign type want declare optional instance extract pattern reusable piece get rid asinstanceof call process carefully crafting equality evidence may find one possible implementation pattern companion repository blog post repository also host final version mybox mymonad test suite showcasing correct implementation pattern library currently use pattern logstage us trick provide cat ziofriendly structural logging algebra box without making either mandatory dependency distage us support dependency injection catseffectresource cat io zio outofthebox still perfectly usable without effect wrapper hope library follow reduce wildcard import tax community favor optional typeclass instance
92,Lobsters,scala,Scala programming,Did Functional Programming get it wrong?,https://medium.com/@reinman/monoids-to-groupoids-492c35105113,functional programming get wrong,beyond programming language need one hardware box programming language well bad programming language built computation compute graph function call grow pulling rabbit hat function first class object function live anyway function float round space category compute graph category hidden cat functional programming monad either writing function monad elusive kleisli talgebraseilenbergmoore programming language also flavor cat beyond monolithic programming language category first class object cat first class object cat dual use enter convergent hardware duality code data work established correspondence traditional programming database first major flaw fp schema second major flaw fp side effect transaction database actually exist reason cat around cat live cam categorical abstract machine cam persistent memory multics,want know deep rabbit hole go beyond programming languagesin old day developer relied fancy programming language express computation given wild proliferation language year clear new approach needed programming language hide lot sausagemakingprogramming language unfortunately monolithic approach need one hardware box programming language well bad programming language built thatwhat really want control computation compute graph actually get run hardware could treat program like data structure enter functional programming fpfunction call grow upthe selling point sound alluring eg writing function function basic widget programming going clear back lambda calculus regardless programming language could almost always count function basic building blocksthe venerable function callnow coder traditionally would assemble function one function call another better yet introduce parent function orchestrates call child function unfortunately basically end rigid function call graphtree work fine situation foo bar grow complexity time start create issuespulling rabbit hatseventually say might want assign processor function maybe using python library scala requires splitting foo bar apart somehow rather violent manner developer must go back code break hardwired call convert queue say rabbit whatever set whatever magic needed pull yes fp fan another word queue pipe bigger problem want flexibility codehey silicon valley hate interrupt wine tasting basic building block software industry troublefunctions first class objectsthe first step toward greater flexibility realizing function probably treated like data unlike widget lean manufacturing world aws lambda head direction really want amazon billing department watching function live anyway something even bigger lacking little chain function might actually need data structurefunction call graphhah used letting compiler etc handle forgotten function float round space although function first class object many programming language still need surrounding infrastructure connect make usablecategory compute graphmathematically speaking function supposed held something called category cat computing category manifest compute graph better explanation graph versus category see heremeow meow warning wonky terminology ahead may suggest executive summary instead category function containershidden catsbut last time actually stumbled across category coding probably tend chain function directly category baked deep inside wall programming language even think cat bit like movie matrix around u yet developer rarely allowed play directly justifiable criticism haskell claim category theory yet pretty good job hiding thingshaskell programmer trying find catfunctional programminghowever functional programming fp probably ran across something mysterious called monad help wire function togetherhanding thing infrastructurewhat monad monad word yeah tossing strange terminologyin fp either writing function something else like gluing wiring function together simply put monad industrygeneric term something else monad two job orchestration function executionshuttling data around functionstechnically monad mathematical handler computation used categoriesthe elusive kleislihow use monad actually use uppercase functional programming something special see fp let create cat scratch offer special somewhat hidden compute graph called kleisli technically monad crunch bit code spit kleisli effect final compute graphthe idea first package code build final compute graphthat still lot sausagemaking make pytorch trivial comparisonso much like tensorflow really touch category compute graph directly instead let monad processingmonads kinda like code proxy live one level programming language convert piece code section compute graphvarious programming language kinda approach time converting high level code assembly confused terminology really boilerplate feature programming language kinda monadic sortstalgebraseilenbergmooreokay fine kleisli stuff go compute graph functional programming named function monad software industry tends conflate functional programming language compute category obviously related quite thingprogramming world compute graph quite sameprogramming language also flavor cat specifically code life syntax category use monad map compute catsthis actually main reason programmer bother ugly category theory terminology first place eg describe map operation programming world machine worldunfortunately see terminology rather daunting convention say programing language quasi algebra live strange world called eilenbergmoore em kinda like library use monad pick goody em stuff compute graph although sound like math fluff engineeringlike approach building softwaremonads map bit code section compute grapheach monad different thing compute graphbeyond monolithic programming languagesfunctional programming probably would gone differently could push monad cloud directly like tensorflow etc never worked way starter fp intimately tied single programming language yet complex task often need languagemore one programming language hinted earlier foo bar language dirty secret cat bigger single programming language sorry haskell fan temptation reaching shiny new programming language work category theory quite make sense cat require radical new approachcategories first class objectsthe better answer start treating cat first class object build free add want requires new type machine explain moment first need explore data side morecats dual useas may guessed cat really data model fact cat awesome data obviously graph also relational model fact notion relational join sql functional programming pretty crazy right normally think joining code way joining databut could enter convergent hardwarethe key understanding category theory really going look major trend hardware storage ram transient ram converge difference database world traditional programming get fuzzy fact persistent memory creature play traditional programming database world simultaneously call fixed point math termsduality code datathis implies database traditional programming going collide someday merge much wow allows u clean lot redundancy old silicon valley tech stack getting quite outdated sort new programming model arise category unique play database traditional programing world timehence cat ragehow worksfunction memoization illustrates well perfect get idea nutshell function call relational join trying achieve much thing imagine function parameter table column imagine function call relation get pretty cosmic mean convergent memory possiblenow established correspondence traditional programming database convergent memory proof start see big hole functional programming major flaw fp schemaspecifically category theory start ask functionalrelational design uh ohbefore build database need build good data model schema schema represented category course functional programming lack categoriesso gon na put schema nowhere good sure frustrated developer chasing advanced type theory like hott leaving haskell idris language least type support schema eventually run full circle back boring old entityrelation diagram inmemory structure try repackage new second major flaw fp side effectslack good schema design forgivable next flaw much costly database convergence mean functional programming longer ignore side effect must properly manage transaction functional programming expert routinely embarrass screaming stateless purity rigor simultaneously ignoring huge chunk applied category database industry handle trivial thing like state management find something work please let u know yes fpers transaction database actually exist reason mysterious monad shadow category theory convergent hardware exposing lot cargo cult nonsensecats aroundthese wild idea new cat lurking around computer science long time however better understanding category plus right hardware pull offthe elephant roomwhere cat live cambecause convergence property category managed something called categorical abstract machine cam cam bit eldritch creature part database part operating system part programming language thus cat work better persistent memory architectureocaml tried build cam inflexible truth lot programming language system gone road borrow element operating system particular hence connection window monad nixos also going direction heavy functional focusperhaps famous example multics believe stumbled cam without good grasp category theory right hardware got pretty far head nonetheless multics still regarded genesis project modern computingmore recently wall street risk analytics system heavily functional going road running simulation
93,Lobsters,scala,Scala programming,Scala 2.13.0-RC1,https://github.com/scala/scala/releases/tag/v2.13.0-RC1,scala,scala note binary compatibility library scala http collection change julienrf license change language change compiler change compiler option change concurrency change standard library change deprecation linting change merged pr closed bug performance graph contributor obtaining scala,scala scala almost delighted present first release candidate crew community contributor mainly polishing improved simplified scala collection library first shipped sort change got well see ask library maintainer test publish library soon possible crucial validate release candidate enable go forward note detailed technical release note documenting change since nt yet combined friendlier release note covering whole yet follow time see also note binary compatibility usual scala prereleases binary compatible scala version including milestone break binary compatibility unless really necessary library scala library published added http collection change learn collection change since adapt code take look document document still expanded improved biggest recent collection change since integrate converter make unified collection serialization optin instead optout new mutablehashset mutablehashmap implementation add collisionproofhashmap mutable hashmap degrades redblack tree worst case change lazylist always evaluate element order lazy emptyornot status improved performance small vector add immutable treeseqmap seqmap implemented via customized intmaphashmap pair create trait collectionseqmap scalaparallelcollections module published thank julienrf license change license changed apache language change accept underscore numeric literal separator etaexpand method expected type x op par xop xop precise inference overloaded method argument type align disallow repeated param except method signature byname implicits align detection implicit recursion sip enforce explicit return type macro compiler change extension method overload overloaded emit mixin forwarders bridge avoid needing generic signature upgrade asm improved jdk compat make object field static move postsuper init clinit capable inliner usability compiler suggests possible name notamembererror compiler option change replace warnoption woption promote deprecation xlint deprecation deprecate xfuture remove xmaxclassfilelength hardcode concurrency change significant performance improvement future making global ec batchedexecutor performance add synchronous parasitic executioncontext standard library change restore use linesiterator avoid conflict jdk stringlines replace cloneableserializable trait type alias provide simple string matcher dual simple string interpolator introduce andthen overload combine two partial function converter among optional function partialfunctions extractor object add iterableops tapeach method change using implement loan pattern controlthrowable never suppresses deprecation linting make postfixops syntax error warning unless feature explicitly enabled deprecate symbol literal deprecate unicode arrow deprecate proxy deprecate lint deprecate usecase scaladoc tag deprecate channel syncchannel syncvar delayedlazyval deprecate scalacompatplatform deprecate universal equiv annotation unused suppress warning allow suppressing valuediscard warning via type ascription unit change detail see merged pr closed bug see also note previous milestone compiler performance better integration new collection library show performance graph nice improvement contributor big thank everyone helped improve scala reporting bug improving documentation spreading kindness discussion around scala submitting reviewing pull request magnificent release brought contributor according git shortlog sn nomerges thank lukas rytz p marki jason zaugg josh lemer diego e alonsoblas adriaan moor kenji yoshida stefan zeiger nthportal guillaume martres georgi krastev viktor klang dale wijnand seth tisue exoego rex kerr julien richardfoy eugene yokota harrison houghton mile sabin yuiknk philippus odd möller aaron hawley allan renucci jasper moeys sébastien doeraene xavier guihot chanyongmoon matthias sperl anthony tjuatja enno runne song kun benjamin kurczyk ashwin kobenko mikhail li haoyi martijn hoekstra mike skells 虎鸣 alden torres andrei baidarov andriy plokhotnyuk benni callum turnbull chris birchall chris phelps cody allen daniel dietrich daniel slapman denis buzdalov denys shabalin jack koenig jean michel rouly lptk lionel parreaux martin duhem narek asadorian pj fanning philip qiang sima ruud welling ryan mcdougall shankarshastri sperl matthias uttej guduru vincent de haan vlastimil dort yang bo ccjoywang mdedetrich psilospore texasbruce timzh obtaining scala scala release available variety channel including limited
94,Lobsters,scala,Scala programming,Scalar 2019 whiteboard voting results,https://blog.softwaremill.com/scalar-2019-whiteboard-voting-40b31e4f7f7,scalar whiteboard voting result,scalar whiteboard voting scalar current trend future scala claim say depends say definitely alive concrete favourite scala coming doobie slick circe intellij metal akka httpstreams would like using daily sbt mill fury zio monix monocle us constructor macwire trust education performance experience scalar beyond annual event shape scala community u follow u twitter update email scala time,scalar whiteboard votingscalar might memory remain form traditional whiteboard voting result uncover current trend future scalawhile waiting video talk come let dive right vote first board day one pressing question tagless final really dead claim say depends say definitely notthe majority scalar attendee seem seem tagless final alive v yet sure tagless final definitely hope talk hallway track cleared thing related note asked favourite effect wrapper scala gloss discussion whether future effect wrapper discus vote opinion quite balanced lazy wrapper task io zio lead comparing eager one represented future however abstract effect f lead suspect even effect abstract end people use concrete one takeaway next year ask favourite concrete effect wrapper also contrast favourite reality one effect wrapper might favourite completely one might commonly usedmoving second board scala coming anticipated feature intersectionunion type winner feature also attract attention coming back future reality connecting relational database asking question year row result previous edition result combined together first year doobie overtook slick wrapping board day everybody favourite subject json ides surprisingly year seen new major player area json getting old looking year circe strengthening lead term ides intellij clear leader competition catching recent development metal think might see status quo shaken future second day scalar fresh set whiteboard voting however probably partly due party day turnout bit smaller starting serverside http streaming library category akka httpstreams clear winner getting runnerup combo userswe also wanted find kind tool library people would like use already mentioned might different library using daily turn people quite happy sbt looking forward trying mill fury presumably going back gradle maven also small group waiting perfect build tool discovered build tool invented library lot proposition three mentioned library one theme common functional people would like try zio monix monocle hopefully already happily coding new stack final voting board got attention gloss dependency injection scala vote overwhelming majority us constructor rightly also macwire guice reader monad user small group surprisingly spring user final question open biggest problem scala occasion express frustration everybody enjoys complaining got quite lot response top one work make scala even better three main area trust making sure company big small trust scala stable quality futureproof platformeducation lowering learing curve scala blogging conferencing writing book creating programmerfriendly apisperformance compilation speed constant problem scala programmer maybe dotty help maybe answer use graalvm theme mind see next year experience scalar beyond annual event shape scala community u missed scalar make sure follow u twitter sign update emailif like receive weekly digest scala news consider subscribing scala time send u recent article curate content sent weekly
95,Lobsters,scala,Scala programming,38 lines of code towards better data validation in Scala,https://blog.softwaremill.com/38-lines-of-code-towards-better-data-validation-in-scala-c933e5a88f76,line code towards better data validation scala,problem nested monad userservicebetterlegacyscala file solution line code eithert design decision article type class tagless final find detail conclusion final remark thread article monad transformer,problemlet assume standard architecture repository service want save user implementation quite simple sake brevity use future scala default library obviously better monad future probably known everyone develops scala applicationssuddenly new requirement appears able save user user name need introduce validation validation error code evolves probably know exception reserved exceptional situation use either try monad prefer former one besides sealed trait validationerror appropriate case class extend represent validation errorshowever need client fulfilled seems application requirement regarding user age client external service determines whether user old enough given country oh name least charactersbelow result naïve approach kind code difficult reason extend test everything mixed validation rule database external service call responsibility separationwe try make refactoring implement helper method hide part lowlevel logic even code look cleaner simpler avoid nesting validation logicwe need validate name length first need call database name invalid thus get rid embracing ifthere need call ageservice user already exists validation fail anywaywhen another requirement come lot time spent analysis current logic resulting code even complicated need somehow untangle code make simple possiblenested monadsas may already noticed validation example sequential one path name valid check user existif user exist check ageif age fine put user databasecan make use either monadic nature perform validation sequence step either rightbiased every flatmap transform right valuewell need handle another level monadlike type cope nested monad type future either f alternatively either future f future side note obviouslyfuture monad monad circumstance convenient exampleusing nested monad validation step towards right direction however case need unpack monad perform operation datanot easy lot boilerplate unintuitive helper function choose one best solution able produce repository source blogpost userservicebetterlegacyscala file far optimalthis good time expose problem need handle two monadic type simultaneously difficult quite generic problem good idea extract additional abstraction solve helper function object lib whatever probably scala community already took care ready use solution well obviously let pretend spoiler nested monad bound together behave like single monadthe solutionbefore present line code mentioned title show part userservice applicationhere clear separation validation action saveuser methodvalidation performed sequence step easy reason business logic validation step separate method single responsibility validation helper method build validationresult object encompass two kind type theeither monad rightbiased future validationresult type behaves like monad well use comprehension build final validation result kind type handle two type monad behaves like monad called monad transformerwhen validation result build call onsuccess method perform final action case saving user repository line codeit large chunk code put gist want show everything one place find whole implementation data validation monad transformer relies cat bound special kind monad use example slick dbioaction quick look code listing go detailsfeel free copy gist use project likethe line code contain microlibrary data validation top either use quite heavily project line scala code difference validationresult validationresultops different signature additional function version contains code required example presented articlethere need publish separate library decide use sooner later may want extend custom wrapper helpersin order use validationresultlib need create object let call validation extends provide implicit instance monad given type monad import validation ready gofor purpose code example prepared afuturesvalidation object see themonad type come cat library cat provides also standard instance monad future implicit implementation simplein project recently worked package object performed validation slick dbioaction monad case dbread alias dbioaction nostream read thus sure type level validation include database readsas see implement instance themonad used custom monad implicit monad scope required perform monadic operation validationresult eithert work cat libraryeithertunsurprisingly thevalidationresult mainly wrapper theeithert monad transformer however two main advantage using instead pure eithertthe language specific type name directly tell u handling validationthe monad type hidden case theeithert need provide monad type compiler type inference get lost thevalidationresult specific monad type provided implementation validationresultlibeithert provides useful method handling theeither value nested monad let say either however operation eithert require implicit argument might functor applicative monad depending function defines basic operation might performed mbasically monad applicative functor implementation validationresultlib need provide implicit value def cat monad simply cover casesmonad requires three function pure flatmap tailrecm former two function sufficient define monad cat requires tailrecm well design decision unrelated definition monad theoretically subset function sufficient create monad however want go detail recommend chapter functional programming scala maybe article may surprised kind using implicit parameter operation known design pattern functional programming say hello type classestype classestype class way ad hoc polymorphism put simple way adding behavior fit kind api consist three component quote functional programming simplified type class defined trait take least one generic parameter generic type instance type class type want extendinterface method expose user new apihave look code type class used heavily cat library monad future defined cat handle operation future adapted monad trait function required monadthe validationresultlib us similar approach inside microlibrary care kind monad used witheither want perform monadic operation itthis kind abstracting monad type also reification another pattern known functional programming tagless finaltagless finalthe main goal tagless final parametrizing monad type handle generic parameter pattern consists three element well find detail initial instruction set aka algebralanguagedsl defines set operation performthe description solution use operation defined first pointthe interpreter implement initial instruction set particular monadclassic example tagless final usually made repository service example userrepository call def finduser id string option user monad type unknown repository service us itin validationresultlib quite different situation however type parameter suggests might tagless final pattern well let check yes seems match initial operation set set function required perform monadic operation pure flatmap tailrecm whole library code inside validationresultlib trait description solution use initial operation set extend language finally futuresvalidation object interpreter implement initial set operation given monadthere two main advantage using approach validationresultlib written use different language context tagless final copy code asis implement interpreter given type monadbecause monad type fixed traitlevel need parametrize method monad type type inference fails using tagless final advantage mainly better abstraction isolation important note using pattern microlibrary using code service repository etcconclusions final remarksin post showed line code towards better data validation scala helped lot project recently working lot boilerplate spaghettilogic leaky abstraction gone however kind approach even lead better code maintainability drawbacksthe first case using either similar type validation fail fast approach first check fails validation terminated first error useful case prevents unnecessary call database external service however situation want know validation error first one case cat provides validated applicative alternative either monadthere also problem related theexecutioncontext need passed almost operation many monadic type example future see thread reddit implicit instance monad future created fly implicit def monad implicit ec executioncontext value monad future create new instance need executioncontext well contextual overhead probably small acceptable case however circumstance may lead performance issuesbesides performance issue might come circumstance using monad transformer related broader problem jvm well designed pattern functional programming may read topic article monad transformer john de goesso tradeoff significant improvement code readability maintainability v slight performance issue might occur circumstance choose wisely
96,Lobsters,scala,Scala programming,Fun with mutually-recursive typeclass resolution,https://medium.com/permutive/fun-with-mutually-recursive-typeclass-resolution-85934995197c,fun mutuallyrecursive typeclass resolution,fun mutuallyrecursive typeclass resolution graphql sangria box shapeless problem first attempt dependent type rescue book,fun mutuallyrecursive typeclass resolutionat permutive recently started experimenting graphql via sangria process write instance sangriasinputtype hand wondering could derived automaticallyi subsequently discovered sangria support box slightly verbose way fun way demonstrating power shapeless scala compiler thought write anyway problemsangria requires define value describe input type accept example accept list keyvalue pair might write manual control sometimes useful allows add metadata like description field however found instance input type sufficiently simple would prefer scrap boilerplate use api like fact sangria code basically manual transcription type want represent would suggest possible first attemptif domain type representing input value want derive type look like inputtype first attempt might look something like fact first encoding attempted couple problem examine sangria type closely find encoding failed capture coercedscalaresult annotation string turn break thing would force u use raw seq instead list domain class would appear derived inputtype actually parameterised type function dependent type dependent type rescue instead try following encoding basic instance definition lowestpriorityinstances intentionally omitted moment see provide instance basic type directly recursively resolve option list etcbut composite domain class see motivating example need derive list inputfield let try defining typeclass produce value see need get list field domain class turn list inputfield use shapeless slightly scary piece code us shapeless generic obtain representation domain class hlist heterogeneous list field type labelled bit mean extract name field lazy help stop scala compiler giving prematurely recursively resolving implicits want know shapeless highly recommend book friend underscore note mutually recursive typeclass resolution toinputtype tofieldlist remains derive instance tofieldlist arbitrary hlist done typeclass resolution lastly need function summon appropriate instance go call following promised gist want see code
97,Lobsters,scala,Scala programming,Final Tagless seen alive,https://blog.softwaremill.com/final-tagless-seen-alive-79a8d884691d,final tagless seen alive,video blog post constraining effect wrapper tracking effect detail final tagless way constrain effect wrapper various blog describes concrete give capability sequential composition wrapping sideeffecting sync catseffect final tagless way track effect finegrained effect tracking depends track effect binary level exactly zio environment dependency injection hidden explicit complement hidden different final tagless good way track effect oleg nizhnik functional programming expert understand fashion doobie slick detailed effect tracking wrapping,follow scala community probably heard john de go talk death final tagless worry available online video blog post definitely recommend watching talk start gentle clearly presented motivation use functional effect first place show john experienced teacher one talk make rethink fashion industry assumption held farthe talk contains fair amount critique socalled final tagless encoding however construct used two purpose constraining effect wrapper tracking effect detail john talk covered together deserve separate treatment separate criticismfinal tagless way constrain effect wrappersas john mention beginning talk idea programming interface rather concrete implementation wellunderstood used pervasively language java scala think used defining interface service making code dependent implementation interfacerepeating john console example start sideeffecting version console service passed constructor parameter usage site trait console def putstrln line string unit def getstrln string object liveconsole extends console def putstrln line string unit println line def getstrln string scalaiostdinreadline class main console console def run string consoleputstrln good morning name val name consolegetstrln consoleputstrln great meet name name first step improve code introduce control side effect wrapping io datatype well motivated john talk various blog repeat argument end following code trait console def putstrln line string io unit def getstrln io string object liveconsole extends console def putstrln line string io unit ioeffect println line def getstrln io string ioeffect scalaiostdinreadline class main console console def run io string consoleputstrln good morning name name consolegetstrln consoleputstrln great meet name yield name note mainrun method build data structure describes effectful operation sideeffects contained clearly see method side effect one use io use io value without fear referentiallytransparent wayso far good final tagless sight improve well io datatype quite rich describe sequential computation wrap side effect run computation parallel race two computation nondeterministically etc might want restrict know looking signature method class kind operation performed chosen sideeffects wrapperthe problem using concrete implementation io instead programming interface let fix need somehow express code dependent wrapper specific interface instead using concrete implementation start parametrising interface abstract wrapper call f trait console f def putstrln line string f unit def getstrln f string liveconsole main interacting f wrapper calling method eg flatmap mainrun forcomprehension need something way express fact f support given set method introducing dependency liveconsole mainhowever working effect wrapper either abstract concrete quite different working regular service hence going introduce dependency way make easy work within scala done adding implicit parameter instead regular one give capability f effect wrapper used extension method available type specific implicit value scopewhat kind dependency need introduce main need sequential composition describing operation first run one effectful computation second one monad give u liveconsole need way wrapping sideeffecting computation sync catseffect using cat represents code becomes class main f monad shorthand notation class main f implicit fm monad f trait console f def putstrln line string f unit def getstrln f string class liveconsole f sync extends console f def putstrln line string f unit sync f effect println line def getstrln f string sync f effect scalaiostdinreadline class main f monad console console f def run f string consoleputstrln good morning name name consolegetstrln consoleputstrln great meet name yield name whole idea behind final tagless instead using concrete effectful wrapper declare kind interface needed wrapper particular class methodfinal tagless way track effectswe extend idea presented track kind side effect code us detail scala give u quite wide range possibility question finegrained effect tracking course depends first option track effect seen first code snippet liveconsole implementation uncontrolled unconstrained side effect case printingreading console improving track side effect binary level effect effect looking method signature know declared pure eg f list user statistic declared side effect f list user io sentemails making jump tracking effect effectno effect distinction make biggest difference code base many case stop herehowever want go track method signature kind effect exactly method use io mean effect could want know mean using database sending email interacting console various effect system scala want solve also zio environment proposed possibile solution contender space include side note zio environment injecting dependency dependency injection tracking effect distinct thing first one dependency injection creating static object graph module graph dependency hidden use siteseffect tracking making dependency explicit use site dependency become part interface reader monad alternative dependency injection complement ithow extend final tagless track effect john shown example instead passing console f constructor parameter main require another constraint effect wrapper f method trait console f def putstrln line string f unit def getstrln f string object console def apply f implicit f console f console f f class liveconsole f sync extends console f def putstrln line string f unit sync f effect println line def getstrln f string sync f effect scalaiostdinreadline object main def run f monad console f string console f putstrln good morning name name console f getstrln console f putstrln great meet name yield name console dependency hidden main user explicit dependency must provided caller method creating object graph hence usesite also need console dependency onwe clear mainrun side effect us effect wrapper additionally kind sideeffects exactly interacts console note sync monad constraint different nature console constraint first one describe capability f effect wrapper form lawful true typeclasses second say anything new f constraint possible sideeffects constraint considered typeclass first place also one john point final tagless good way track effect might might criticism final tagless john talk course valid however applies using final tagless effect tracking constraining effect wrapper zio environment answer might need track effect application might well case knowing function side effect sufficient using plain old io abstract f know shortcoming final tagless thanks john excellent talk still wait field report using zio environment real project potential shortcoming already pointed oleg nizhnik refer twitter thread instead repeating herewhat would add necessity use cake pattern let call quite intrusive change might require adapting codebase simple using plain old class methodsdo functional programming expert understand john say talk need understand trifunctor zio r e form profunctor ra type parameter pair profunctor even use zio would argue true final tagless use way constrain effect wrapper need thorough understanding type class higher kinded type monad typeclass hierarchyit sufficient understand coding interface instead implementation preferable open alternative way expressing dependency case parameter implicit type constraint interesting quest find concept generalise typeclass pervasive monad applicatives differ monad free equivalent tagless final profunctor etc necessary start using themfashion final tagless definitely victim hype fashion used everything end monstrosity seen john talk def genfeed f monad logging userdatabase profiledatabase rediscache geoipservice authservice sessionmanager localization config eventqueue concurrent async metricsmanager f feed couple year ago free monad fashionable thing use functional programming community using main way structure program turned cumbersome amount boilerplate needed greatly exceeded benefit bringhowever free monad found niche turn good choice representing generalpurpose abstraction example describing database operation connectionio doobie dbioaction slick describing concurrent program io zio task monix behavior akkatyped kind abstraction much convenient work valuebased representationyes iotask another realisation code interface idea describing computation using io create description computation value using io primitive later interpreted io primitive given specific meaning theory multiple io interpretation correspond multiple interface implementationsthe niche final tagless constraining effect wrapper john talk show quite well tracking effect detail applicationi quite sure niche emerge zio environment situation need detailed effect trackingwrapping upall tool proper use neither final tagless free monad constructorbased dependency injection zio environment used everythingthere many way realise code interface idea scala basic set instruction use build application logic instruction take various form calling method dependency passed parameter constructor based dependency injection final tagless dependency passed implicit capabilitiesfree monad instruction represented valuesreader monad convenient way passing single dependencysumming zio environment interesting combination optimized reader monad cake pattern final tagless dead
98,Lobsters,scala,Scala programming,"Beautiful, Simple, Testable Functional Effects for Scala",http://degoes.net/articles/zio-environment,beautiful simple testable functional effect scala,see accompanying talk death finally tagless released today cover zio environment zio library untestable effect taglessfinal dark side taglessfinal massive rampup type class abuse big bang tedious repetition stubborn repetition completely uninferrable fake parametric guarantee summary taglessfinal module pattern module composition reader monad effect rotation zio environment previous material zio core environment console environment delightful functional effect composable performant fully inferable concise modular incremental summary zio project page zio microsite gitter chatroom p wiem zine elabidine itamar ravid regis kuckaertz kai skillsmatter beautiful simple testable functional effect scala john de go,see accompanying talk death finally tagless released today cover zio environment today functional effect system scala zio library work incredibly powerful provide effect data type unifies synchronous asynchronous concurrent resource effect support automatic error propagation across boundary way faster powerful scala future welldocumented reasonably easy use sometimes come equipped concurrent data structure fiberbased concurrency model compositional interruption timeouts efficient global computation also purely functional showcase power pure functional programming solve modern business problem unfortunately dark secret functional effect system box live full promise functional programming despite referentially transparent really testable untestable effect functional programming ordinarily give u incredible ability easily test software reason quite simple functional programming function map input output function total return output every input deterministic return output input free side effect compute return value interact outside world surprisingly many property also hold function return functional effect functional effect turn immutable data structure describes effect without actually executing functional program construct compose data structure together using operation like map flatmap resulting data structure model entire effectful application application main function data structure translated stepbystep effectful operation describes simplest way build functional effect describe effect using data structure store thunk scala terminology hold arbitrary hunk effectful scala code data type called io exactly class io val unsafeinterpret def map b f b flatmap fandthen ioeffect def flatmap b f io b io b ioeffect f sunsafeinterpret unsafeinterpret object io def effect eff new io eff construct pure function return functional effect model effect quite simply def putstrln line string io unit ioeffect println line val getstrln io string ioeffect scalaiostdinreadline function total deterministic free side effect anything effectful merely build data structure describes effectful operation using map flatmap build describes whole effectful program example following io program asks user input print back val program io string putstrln good morning name name getstrln putstrln great meet name yield name evaluate program scala repl find actually anything except construct io value immutable data structure however nonfunctionally interpret program effect describes calling unsafeinterpret function programunsafeinterpret way avoid something nonfunctional forever least make vast majority code purely functional benefit increased power abstraction refactoring testability well theory big problem testability test need call function verify output match expectation unfortunately io value like program value compared io value reason embed arbitrary hunk scala code inside function scala function compared equality although scala function equal hashcode like ojbects meaningful implementation based function rather based reference constructed object easy way see comparing value two putstrln value constructed text output putstrln hello putstrln hello false even though io value represent program scala know function sensibly compared equality limitation scala rather fundamental limitation computation turing complete language know sure two function equal even look implementation mean functional effect system provide u lot concrete tangible benefit asynchronicity concurrency resourcesafety etc give u increased power abstraction refactoring make easier test effectful code part solve problem part gain benefit called parametric reasoning scala functional programmer used taglessfinal technique popularized haskell taglessfinal taglessfinal often use type class model effect although possible use record approach seems popular scala instead interacting putstrln getstrln directly define type class describe console capability type class parameterized effect type trait console f def putstrln line string f unit val getstrln f string object console def apply f implicit f console f console f f define instance type class io implicit val consoleio console io new console io def putstrln line string io unit ioeffect println line val getstrln io string ioeffect scalaiostdinreadline write program polymorphic effect type express capability require effect using type class constraint commonly modeled using context bound desugar implicit parameter list def program f console monad f string console f putstrln good morning name name console f getstrln console f putstrln great meet name yield name since program polymorphic effect type instantiate concrete data type io support required capability example val programio io string program io assumes suitable instance monad type class defined io required scala comprehension desugars map flatmap machinery place becomes fairly straightforward define data type testing case class testdata input list string output list string case class testio run testdata testdata def map b f b testio b flatmap testiovalue f def flatmap b f testio b testio b testio run match case f run object testio def value testio testio test data type define instance console type class simply pull line input test data writes line output test data left exercise reader define monad instance instantiate polymorphic program test effect val programtest testio string program testio finally long last testability regained write fast deterministic unit test thoroughly test application logic ci build complete quickly refactor confidence unfortunately benefit come considerable cost dark side taglessfinal taglessfinal approach robust many people quite happy using technique build production business application however technique suffers number drawback explored section follow massive rampup demonstrated article taglessfinal technique faint heart requires advanced knowledge scala programming language functional programming model functional construct scala particular competently use taglessfinal common scenario understand functional effect parametric polymorphism higherkinded type type class scala encoding type class instance scala encoding partial type application aka type lambda monad hierarchy topic one coworker casually introduce another coworker lunch break possible sneak taglessfinal code base combination training mentorship required type class abuse although use type class taglessfinal indeed earliest encoding used ml type class used seminal finally tagless paper overwhelmingly common scala community reason type class give nicer syntax help thread many constraint throughout application unfortunately abuse concept type class type class fundamentally abstraction let u talk way data type similar describing similarity algebraic law algebraic law let u write generic code across many different data type share mathematicallyprecise definition similar structure making functional code principled way ad hoc polymorphism taglessfinal type class general algebraic law law represents serious abuse construct type class impediment teaching type class scala developer big bang wish use taglessfinal test method deep inside code base method us future maybe io make small series rote change instead perform big bang style refactoring involves commitment taglessfinal lot work obtain testability single method big bang refactoring improve code base often odds need shipping software friendlier business make change incrementally pay need today tedious repetition constraint type class propagated implicit parameter list context bound provide compact syntax implicit parameter list method polymorphic effect requires lot different type class still unwieldly ef genfeed f monad logging userdatabase profiledatabase rediscache geoipservice authservice sessionmanager localization config eventqueue concurrent async metricsmanager f feed unfortunately following functional programming best practice pushing dependency edge requiring little possible every method find engaging tedious repetition similar list context bound def cachefeed f monad logging userdatabase profiledatabase rediscache config eventqueue concurrent async metricsmanager feed feed f unit developer try work around tedium creating module class declare set dependency every method inside many method require le full set constraint across method technique make easier deal tedium cost overly constraining method making weakening socalled parametric reasoning stubborn repetition lot repetition taglessfinal program repetition prof stubborn abstraction ideally two method set type class constraint like able create something represent set constraint use remove duplication across two method def f allconstraints def f allconstraints unfortunately scala mechanism abstract across duplicated parameter list repetition quite tedious unavoidable due limitation scala programming language completely uninferrable one reason writing haskell purescript exceedingly pleasant universal flawless type inference scala enough type inference make joy compared java many type scala infered full inference higherkinded type system presence subtyping still researchgrade would love able take advantage type inference taglessfinal program writing equivalent def genfeed unfortunately type class constraint inferred even theory actually type parameter value implicit parameter list language anything implicit asking compiler infer arbitrary implicit parameter list unreasonable type full list constraint every time get constraint wrong error message fail nonobvious implicit found method found error lack full type inference taglessfinal program make writing exercise discipline selfcontrol raise knowledge skill barrier becoming proficient writing program style fake parametric guarantee oftentouted benefit taglessfinal provides u parametric reasoning claim without merit example look following method signature able tell type work effect provides monad therefore free effect may use monad operation map flatmap ap def innocent f monad f unit however since scala restrict procedural effect mean embed anywhere even supposedly pure code like def innocent f monad f unit println guarantee monad f point worse still trivial write helper method embed effect applicative even applicative strict nonlazy version point def effect f applicative f applicative f point map effect helper method violates neither scalazzi pure functional subset scala applicative law may use helper method contaminate original definition innocent def innocent f monad f unit println guarantee effect systemexit trivially embedding raw effect executed creation f unit effect inside applicative large code base whatever happen happen testament fact common practice among new user effect system accidentally embed effect inside function pas map flatmap fact effect monad encourage antipattern well embed effect inside lazy version monad point operation benefit parametric reasoning apply taglessfinal program discipline yet lot technique fewer drawback also provide reasoning benefit discipline summary taglessfinal taglessfinal benefit experienced functional programmer deployed many productionworthy application using technique however looking drawback hard recommend taglessfinal scala shop opinion technique never go mainstream machinery ceremony involved encouraging taglessfinal may push people away functional programming scala lure long argued technique work well programming language like monad transformer haskell simply work well scala make work need find technique give u similar benefit without cost next section present one technique believe exceptionally wellsuited scala testability primary concern possible take page java want write testable code java use interface provide different implementation live test scenario case preceding example create simple scala trait represent console capability trait console def putstrln line string io unit val getstrln io unit ordinary interface difference method return functional effect actually describe easy teach scala developer probably used interface scala whatever programming language knew scala program requires console capability simply accept console parameter def program c console io unit cprintln good morning name name creadline cprintln good meet name yield provide either test production instance console ensuring reliably test program technique work reasonably well tiny program program require one service try scale technique becomes quite unpleasant def program sn servicen foo localhost b bar sn yield z pain result u thread n service method manually pas subset service method call indeed pain dependency injection invented solve surprising take objectoriented approach solving testability problem end dependency injection territory fortunately using module pattern least make step toward something usable module pattern module pattern involves placing service inside module trait provide easier composition sometimes pattern identified hasxyz naming example hasconsole use pattern first define module contains single field appropriate service type trait hasconsole def console consoleservice define service type normal trait consoleservice def putstrln line string io unit val getstrln io unit personally avoid extraneous typing prefer choose simplified naming convention organizational style use shortname module put service definition inside companion object module example trait console def console consoleservice object console trait service def putstrln line string io unit val getstrln io unit case module pattern able take advantage intersection type compose multiple module single module module composition scala firstclass support intersection type meantime use operator provides pseudointersection type operator enables u create type must satisfy multiple requirement case use create module contains many service def program modulen foo localhost b bar yield z notice dramatic reduction amount work necessary thread service throughout application method take single service parameter using intersection type bundle together module dependency single module pas service dependency stack simply pas bundle due scala support subtyping free pas method require called contravariance satisfying improvement predecessor still painful passing single parameter way top application bottom fortunately functional programming provides extremely simple elegant solution problem reader monad reader monad monadic data structure used automated passing environment one level application lower level every level application access environment even local modification environment vary level application desired reader monad explained elsewhere go depth work present simple reference implementation case class reader r provide r self def map b f b flatmap readerpoint f def flatmap r b f reader b reader r b r f selfprovide r provide r object reader def point reader reader def environment r reader r r reader identity def access r f r reader r environment r map f reader r effect requires environment r produce value type example reader config string effect requires config produce value type string extract string reader first provide config requires case class config servername string port int val servername reader config string readeraccess config servername val name servernameprovide config localhost reader mean effect work environment equivalent saying requires environment extract value type effect supplying value example unit val tempfile reader string readerpoint tmptempfiledat val file tempfileprovide note reader definition model reader effect effect like input output modeled previous io data type however ignore fact one squint hard enough one see path forward final simplification module pattern us reader monad pas module def program reader modulen string foo localhost b bar yield z step far away reader monad transformer add reader effect base monad including io monad however monad transformer slow scala adding overhead per layer clumsy ergonomics bad type inference instead using technique called effect rotation bake reader effect base effect monad yielding data type highperformance thoughtful design data type opening door delightful ergonomics flawless type inference approach taken zio environment new feature zio quite possibly defining feature impending release zio library zio environment zio environment us functional effect data type three type parameter zio r e interpretation type parameter follows type environment required run effect range bundle module configuration detail indicating requirement type error effect may fail range throwable custom data type may may extend throwable exception nothing indicating effect fail type value effect may succeed anything effect run forever run error could also nothing everyone may comfortable using full zio data type library defines three type synonym common case type uio zio nothing type task zio throwable type io e zio e meaning type follows effect require specific environment fail effect require specific environment fail throwable effect fail e type alias companion object used construct value type example tasksucceed construct task int course really zio throwable int hierarchy power allows user start task possibly uio type handle error get something type uio gradually migrate either io zio maybe type alias us offer combination type suited application post talk e parameter since find previous material zio including scaladoc microsite extensive documentation failure success value rather focus method help use new r type parameter take look use method solve testability problem core environment zio environment add two new primitive function couple helper based sealed trait zio r e def provide environment r zio e object zio def accessm r e f r zio r e zio r e def access r e f r zio r nothing accessm ziosucceed def environment r zio r nothing r access identity core function zio provide allows feed r effect requires r eliminate requirement changing environment type parameter zioaccessm allows effectfully access part environment like function whose input requires fed anything including therefore requirement effect whose environment requirement different zio unit e type indicating effect requires unit value helper function zioaccess allows noneffectfully access part environment zioenvironment give whole environment really understand core method help u solve testability problem let revisit console example time using zio environment console environment make console program testable going start defining module associated service class seen substantial change time around import scalazzio trait console def console consoleservice object console trait service def println line string uio unit val readline io ioexception string trait live extends consoleservice import scalaiostdinreadline def println line string uioeffecttotal scalaiostdinprintln line val readline ioeffect readline refineordie justioexceptions object live extends live note console service println function return uio unit fail readline function return io ioexception string might fail ioexception wanted le precise also eliminate need think type could use task everywhere familiar scala developer used future yet think typed error console companion object hold implementation live version test implementation consoleservice interface could live inside test package notice polymorphic type higherkinded type type class type class instance implicits monad literally interface implementation method return functional effect next step define helper function make using module easier step necessary convenient show technique package object console def println line string zio console nothing unit zioaccessm console println line val readline zio console ioexception string zioaccessm consolereadline package object called console defines println readline function return functional effect functional effect defined using zioaccessm give u access set module want case need console module reflected return type using helper function build purely functional zio program import console val program zio console ioexception string println good morning name name readline println good meet name yield name notice simplicity definition without final tagless machinery basic understanding functional effect comprehension necessary write code like need unsafely interpret data structure effect represents generally first provide required environment using zio provide method since effect requires console since already written implementation consolelive easily provide program production environment val programlive io ioexception string programprovide consolelive notice use type synonym io ioexception string course expands zio ioexception string indicating effect longer requires specific environment ready run program default runtime system zio defaultruntimeunsaferun programlive nearly easy test program construct implementation consoleservice interface testing object testconsole extends console val console consoleservice run program using test service val programtest programprovide testconsole defaultruntimeunsaferun programtest zio environment two primitive provide accessm additional type parameter able completely solve testability problem way requires tiny fraction knowledge skill taglessfinal get even better delightful functional effect taglessfinal number drawback beyond massive ramp curve next section look zio environment stack taglessfinal composable like taglessfinal zio environment composable compose requirement horizontally using operator type intersection trait console def console consoleservice trait logging def logging loggingservice trait persistence def persistence persistenceservice val program zio console logging persistence programerror unit performant like taglessfinal even greater extent zio method monomorphic zio environment highperformance tried emulate zio environment technique another effect type using readert monad transformer would suffer much performance penalty tried emulate zio typed error well using eithert monad transformer could suffer much performance penalty thanks effect rotation zio give benefit reader either monad transformer without cost far better ergonomics type inference fully inferable experienced functional programmer used generally like taglessfinal personally find one compelling benefit zio environment type inference thanks careful design appropriate use variance zio fully inferable fact far aware approach testable functional effect scala demonstrated fully inferable mean use many different module call function module scala compiler infer proper environment example val program putstrln good morning name name getstrln savepreferences name logdebug saved name configuration putstrln good meet name yield case scala infer environment console persistence logging scala infer type give explicit type annotation incorrect hint scala provides eventually lead correct type signature even believe providing toplevel type signature able infer local signature ide insert toplevel signature ask scala correct type intentionally inserting wrong type tremendous benefit productivity make working zio effect extremely pleasant experience concise full inference zio extremely concise however inference actually necessary concision zio environment us type parameter scala type alias mean eliminate duplication method signature trait console def console consoleservice trait logging def logging loggingservice trait persistence def persistence persistenceservice type programenv console logging persistence val zio programenv apperror unit val zio programenv apperror string fact want create custom effect type environment error type easy type program zio console logging persistence apperror val program unit val program string type synonym like especially combined associated companion object make possible beginner rapidly become productive large code base enable beginner expert alike avoid repeating make code maintenance easier le costly predictable modular zio environment need build monolithic environment rather individual layer application supply local environment lower layer example technique shown def zio e def zio e b val localenvironment val localenvironment val globalenvironment val globalenvironment one technique provide vertical modularity time technique may emerge achieving modularity taglessfinal possible quite difficult hacky relying creating local type class instance comparison modularity something approach like free mtl excel incremental unlike taglessfinal code base us abstraction merely using base functional effect like task modified everysoslightly allow testability something deep stack example let say database call deeply embedded everywhere inside program deeply nested code def mycode task unit result databasequery q yield would like able test application logic without connecting real database slow test may fail unrelated reason order need merely refactor databasequery function require database module simple introduction type synonym leave code unchanged type taskdb zio database throwable def taskdb unit result databasequery q yield code stay exactly change needed make type synonym could called task want update type signature single method wanted make testable ideal world everything would always testable needed make legacy code testable would resource necessary make effect testable yet real world often time luxury making greenfield code fully testable day one giant refactorings legacy code zio environment let u make pinpoint change pay cost testing need test today result help u deal real world code base meet need business summary functional effect enormously beneficial solving modern business problem yet seen approach way functional effect implemented gain benefit pure functional code functional effect give u ability abstract program refactor without changing meaning easily test functional effect way compare two effect equality solution like taglessfinal help u reintroduce testability functional application along benefit like parametric reasoning however come massive ramp curve integrate well scala ergonomics boilerplate ceremony unpleasant alienating developer new approach pioneered zio environment allows u regain testability without additional ramp time beyond ramp required functional effect friendly beginning functional programmer unlike taglessfinal new approach fully inferable modular used incrementally need first time feel like scala idiomatic solution testable functional effect something fast fully inferable low barrier entry like give try head zio project page find zio microsite gitter chatroom today first release candidate rc zio published mean nearly stable api focus documentation polish performance hope zio released sometime march line enjoy least full year backwardcompatible tweak finetunings enhancement microsite still using future fence functional effect system perfect time jump give zio one functional effect system try might find live without one p huge thanks wiem zine elabidine work zio environment itamar ravid regis kuckaertz kai early feedback zio environment project skillsmatter opportunity present work scala matter london beautiful simple testable functional effect scala published february john de go
100,Lobsters,scala,Scala programming,Tapir – a Scala library for creating typed API descriptions,https://blog.softwaremill.com/describe-then-interpret-http-endpoints-using-tapir-ac139ba565b0,tapir scala library creating typed api description,describe interpret http endpoint using tapir akkahttp play finch swagger openapi annotating akkahttp route generating scala code annotation severe drawback value function description monix zio interpretation describing endpoint input error output success output tapir scala library creating typed api description tapir endpoint description method path interpreting server akkahttp business logic doc doc doc openapi documentation serialize served eg using swagger ui try home booksexample summing sttp description typesafe github gitter documentation code kasper kondzielski felix palludan hargreaves star github,describe interpret http endpoint using tapirthere shortage great http server library scala akkahttp play finch name popular one however common pain point generating documentation eg swagger openapi solution emerged annotating akkahttp route generating scala code yaml file writing yaml documentation hand let honest nobody want writing yaml file hand annotation severe drawback left one defining theme functional programming using value function focusing two construct common pattern emerges separating description eg side effect see monix task io zio interpretationlet apply approach http endpoint describing endpointwhat http endpoint first request parameter method endpoint serf get post etc request path query parameter header course body input endpoint endpoint map input applicationspecific type according applicationspecific formatsthen response parameter status code header body typically request either succeed fail returning different type status codesbodies case hence specify endpoint error output success outputsthese three component input error output success output basis endpoint described using tapir scala library creating typed api descriptionstapir wild well actually zoo goal tapir provide programmerfriendly discoverable api humancomprehensible type afraid write look practice tapir endpointseach endpoint description start endpoint value empty endpoint type endpoint unit unit unit nothing first three type parameter describe type input error output success output initially unit mean inputouput type parameter relates streaming covered later post let add input output take empty endpoint start modifying happening got two input parameter added endpointin method json body map case class book string header hold authentication token two input represented tuple book string also one output parameter added endpointout method boolean endpoint type represented type itselfto sum created description endpoint given input output parameter description instance endpoint class regular case class hence immutable reuseable take partiallydefined endpoint customize see fitmoreover input output used jsonbody book header string xauthtoken plainbody boolean also case class instance implementing endpointinput trait likewise shared reusedmethods pathsbut endpoint seems bit incomplete path method let specify well type come first specify endpoint us post method part description correspond value request hence contribute typesimilarly path bind information within path path constant bookadd overall type stay sameanother endpoint might course use information path eg finding book id case use pathcapturing input path string instead constant path last part might need explaining come string method implicit conversion one tapir convert literal string constantpath endpointinput input method defined combine two input oneinterpreting serverhaving description endpoint great well one obvious wish turn servercurrently tapir support interpreting endpoint akkahttp route directive httproutes use akkahttp herein order turn description server need provide business logic actually happen endpoint invoked description contains information extracted request format input parse applicationspecific data etc lack actual code turn request responselet take another look endpoint e endpoint e take parameter type return either e plus akkaland thing probably happen asynchronously response available point future described using plain word function f future either e logic need provide turn endpoint server tapirserverakkahttp add toroute extension method endpoint given business logic addbooklogic return akkahttp route completely normal route nested within route alternatively endpoint interpreted directive combined directive usualdocs doc docswe started documentation first let add metadata endpoint get humanreadable description addition detail provided endpoint description note extracted description book json body val code readable way work plain old scala value immutable case class manipulate much likesecond added metadata description endpoint body header well example value appropriate typeto interpret endpoint documentation proceed similarly import extension method call endpoint however proceed two stepsfirst interpret endpoint openapi documentation getting instance openapi case class tapir contains model openapi construct represented case class thanks intermediate step documentation adjusted tweaked extended needsecond serialize openapi model yaml yaml served eg using swagger uido try hometo try add following dependency project tapircore library transitive dependency tapirakkahttpserver module depends quite obviously akkahttp like interpret using use dependency instead start code available example repository booksexample contains endpoint definition server also expose documentation client callscustomize explore summing upthis concludes introduction tapir much cover codecs medium type streaming multipart form generating sttp client mention done far creating description endpoint using tapir api using couple different input output interpreted description server generated openapi documentation itall opearations typesafe important feature far mentioned compiler check business logic provided match type input output match declaredexpected endpoint type ontapir young project active development suggestion idea problem either create issue github ask gitter doubt something work probably mean documentation code unclear improved benefit allfinally like thank two early tester contributor project help kasper kondzielski felix palludan hargreavesstayed tuned article tapir think project interesting please star github
101,Lobsters,scala,Scala programming,Closing the Gap Between Specification and Programming: VDM++ and Scala,http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=CF73DD3EB3173C356B7F9C793235CFBA?doi=10.1.1.432.1999&rep=rep1&type=pdf,closing gap specification programming vdm scala,,obj length filter flatedecode stream p
102,Lobsters,scala,Scala programming,Scala with Explicit Nulls,https://gist.github.com/abeln/9f79774bac111d99b3ae2cb9016a33e6,scala explicit null,scala explicit null content pull request type union new type hierarchy unsoundness http equality reference equality working null java interop nullification function javanull improving precision version checker framework tostring binary compatibility flowsensitive type inference nonstable path logical operator inside condition algorithm unsupported idiom local type inference http language kotlin todos,scala explicit null content proposal accompanying pull request describe modification scala type system make reference type anything extends anyref nonnullable mean following code longer typecheck val x string null error found null required string instead mark type nullable use type union val x stringnull null ok read detail new type hierarchy two type hierarchy respect null depending whether erasure erasure null longer subtype reference type additionally null subtype directly opposed anyref erasure null remains subtype reference type forced jvm unsoundness new type system unsound respect null mean still instance expression nonnullable type like string value null unsoundness happens uninitialized field class start null class c val f string foo f def foo string string null field null else val c new c cf field null enforcing sound initialization nongoal proposal however type system nullability explicit use sound initialization scheme like one proposed liufengyun biboudis http eliminate particular source unsoundness equality unsoundness need allow comparison form x null x null even x nonnullable reference type value type escape hatch know x nullable even type say nt val x stringnull null x null ok x nullable string hello null ok string reference type null error int value type reference equality recall null direct subtype opposed anyref however also need allow reference equality comparison val x string null x eq null ok could return true unsoundness implement moving eq ne method anyref new trait refeq extended anyref null trait refeq def eq refeq boolean def ne refeq boolean class anyref extends refeq class null extends refeq working null make working nullable value easier propose adding utility standard library far found following useful extension method nn cast away nullability implicit class nonnull x tnull extends anyval def nn x null throw new nullpointerexception tried cast away nullability value null else xasinstanceof mean given x stringnull xnn type string call usual method course xnn throw npe x null implicit conversion fromto nullable array implicit def array tnull array aasinstanceof array implicit def array array tnull aasinstanceof array tnull similar method matrix higher dimension eg tonullable useful java apis often return nullable array additionally array invariant neither array array tnull way go one need cast example suppose want write function sort array def sort anyref ordering array array error copyof expects array tnull return array tnull val array javautilarrayscopyof alength nn scalautilsortingquicksort fix error use implicit conversion turn third line val array javautilarrayscopyof alength nn course also unsound could end null value java interop compiler load java class two way source bytecode either case java class loaded patch type member reflect java type remain implicitly nullable specifically patch type field argument type return type method nullification function patching nullification function nf type nf r rjavanull r reference type subtype anyref nf r r r value type subtype anyval nf tjavanull type parameter nf c r c r javanull c javadefined nf c r c nf r javanull c nt javadefined nf b nf nf b nf b nf nf b nf otherwise type javanull alias null magic property see illustrate rule nf example first two rule easy nullify reference type value type class c string int x class c val stringnull val x int rule nullify type parameter java type parameter always nullable following code compiles class c foo return null class c def foo tnull notice rule sometimes conservative witnessed class inscala val c c bool c val b bool cfoo longer typechecks since foo return boolnull rule reduces number redundant nullable type need add consider class box get class boxfactory box makebox class box def get tjavanull class boxfactory def makebox box javanull suppose boxfactory string notice calling makebox return box string javanull box stringjavanull javanull rule seems first glance unsound box null inside sound calling get box string return stringjavanull per rule notice rule correct need patch javadefined class transitively appear argument return type field method accessible scala code compiled absent crazy reflection magic think java class must visible typer first place patched rule needed java code might use generic defined scala opposed java class boxfactory box makebox box scala defined class boxfactory def makebox box tjavanull javanull case since box scaladefined nf applied type argument rule applies get box tjavanull javanull needed nullability function applied modularly java class scala one need way tell box contains nullable value rule recurse structurally component type implementation rule n compiler bit involved presentation specifically implementation make sure add null top level type eg nf b b javanull opposed javanull b javanull javanull enable method chaining javareturned value special javanull alias type javanull null fromjava javanull behaves like null except allows unsound member selection assume somejavamethod original java signature string somejavamethod val string somejavamethod trim substring tolowercase unsound trim substring tolowercase return stringjavanull typer notice javanull allows member selection go however somejavamethod return null first member selection would throw npe without javanull chaining becomes cumbersome val ret somejavamethod val ret null val tmp rettrim tmp null val tmpsubstring null additionally need handle else branch javanull also special way user directly write javanull type sense javanull similar kotlin platform type nondenotable instead user write null restrictive val stringnull somejavamethod strim substring error trim member stringnull javanull however inferred val somejavamethod stringjavanull inferred strim substring ok user want use javanull nonlocally eg passing another method need either cast away nullability use vanilla null consequence first two bullet val somejavamethod stringjavanull inferred def foo stringnull foo allowed within foo work strict null looking implicit conversion ajavanull b ca nt find also look implicit conversion b done ease interop java improving precision nullification function sometimes conservative example consider trim method javalangstring return copy string leading trailing whitespace omitted public string trim vanilla application nullification turn def trim stringjavanull however inspecting function contract javadoc reveals nonnull string begin strim fact never return null null strim throw point view scala preferable precise signature trim return type string general problem many method java standard library particular method commonlyused class like string class address maintaining whitelist method need special treatment nullification eg nullify argument return type currently whitelist hardcoded dotty plan use annotated version java jdk nullability annotation produced checker framework hat tip liufengyun werner dietl suggesting tostring tostring method special case chose trade away soundness precision usability tostring special even though life scalaany actually come javalangobject could principle overriden return null however changing tostring signature return stringjavanull would break much existing scala code additionally assumption tostring unlikely return null mean signature tostring remains def tostring string binary compatibility strategy binary compatibility scala binary predate explicit null leave type unchanged compatible unsound concretely problem interpret return type foo compiled eg scala class old def foo string two option def foo string def foo stringnull first option unsound second option match handle java method however approach tooconservative presence generic class old def id x x class old def id x tnull tnull x instantiate old value type id return nullable value even though nt val old boolean val b oid true b booleannull really option unsound conservative unsoundness kick scala code used return null value hypothesize null used infrequently scala library go first option using unported scala library produce null user wrap hopefully rare api typesafe wrapper unported library class old def foo string null user code explicitnull world def foowrapper old stringnull ofoo ok string stringnull val old val foowrapper offending api consumes null user cast null literal right type cast succeed since runtime null subtype reference type unported library class old pas string null signal special case def foo string unit user code explicitnull world val old ofoo nullasinstanceof string ok cast succeed runtime flowsensitive type inference added simple form flowsensitive type inference idea p stable path know p nonnull compared null literal information propagated else branch ifstatement among place example val stringnull null string stringnull similar inference made else case test p null null stringnull else string exactly considered comparison purpose flow inference eq ne isinstanceof null kick type test null val stringnull sisinstanceof null string test sisinstanceof string currently nt infer nonnullness nonstable path p nt stable inferring nonnullness potentially unsound var stringnull hello null null true null logical operator also support logical operator val stringnull val stringnull null null string string null null stringnull stringnull else string string inside condition also support type specialization within condition taking account shortcircuiting val stringnull null slength string slength string null slength string slength stringnull else stringnull algorithm let nn cond truefalse set path termrefs compiler infer nonnull cond truefalse respectively define nn basically de morgan law nn p null true nn p null false p p stable nn p null true p p stable nn p null false nn b true nn true nn b true nn b false nn false nn b false nn b true nn true nn b true nn b false nn false nn b false nn true nn false nn false nn true nn cond otherwise type cond else compute nn cond true nn cond false type branch knowledge path nn cond true nonnullable ditto else branch path nn cond false propagate nullability fact within condition typing b type compute nn true type b augmented context fact nn true similarly typing b type compute nn false type b augmented context fact nn false unsupported idiom nt support reasoning nonstable path flow fact related nullability x x inferred tracking aliasing nonnullable path val stringnull val stringnull null string inferred string inferred local type inference explicit nullability interacts local type inference way suppor sam type sam type consider snull sam type well allows trait def foo x int int val snull x int x inferred nullable union dotty currently never infers union type instead union eagerly widened see def foo intstring val x foo x inferred changed inference rule union form tnull inferred def stringnull hello val x x stringnull inferred otherwise nullable type stringnull would collapsed loses much information nullable union prototype compiler currently nt allow union prototype def bar array stringint int bar array bar array found array int required array string int int notice type array synthesized array int even though correct type array stringint could inherited problem compiler see prototype array stringint int outer type union discard prototype switch synthesis see http done changed behaviour nullable union used prototype def bar array stringnull null bar array hello ok inferred type parameter via prototype stringnull language kotlin todo todos bootstrap dotty new type system port standard library new type system figure present javanull eg type error support flowsensitive type inference tasty flowsensitive type inference patternmatching val x stringnull x match case null case x string inferred use checker framework whitelist nonnullable java method recognize nonnull annotation
103,Lobsters,scala,Scala programming,"Serverless Model Serving: OpenWhisk, Apache Spark and MLeap",https://www.jowanza.com/blog/2018/11/11/serverless-machine-learning-openwhisk-mleap,serverless model serving openwhisk apache spark mleap,livy,year ago wrote blog livy somewhat designed solve problem could example create generic spark job take parameter http return response however limitation approach overhead submitting spark job finite capacity spark cluster using resource could spent crunching number fitting model much better use job calculate value oneoff http request went searching alternative way solve problem eventually came across mleap mleap project among thing us model fit mllib serializes zip file json binary reuse scala python api instead running spark job utilize tb model write play server scala flask django guess one python discovered gear started turn wondered could take step deploy mleap model serverless function around time started use openwhisk project clicked could probably run mleap model using custom container openwhisk blog post serf howto serving mlleap model serverless function openwhisk creating custom container deploying ibm cloud function toward end blog get limitation offer alternative
104,Lobsters,scala,Scala programming,Security in Scala: Refined Typed and Object Capabilities,https://wsargent.github.io/ocaps/slides/#1,security scala refined typed object capability,,
105,Lobsters,scala,Scala programming,"Cross-Platform, Language Design",http://lampwww.epfl.ch/~doeraene/thesis/doeraene-thesis-2018-cross-platform-language-design.pdf,crossplatform language design,,obj type pattern patterntype painttype tilingtype bbox xstep ystep resource length filter flatedecode stream endstream endobj obj type pattern patterntype painttype tilingtype bbox xstep ystep resource length filter flatedecode stream endstream endobj obj type pattern patterntype painttype tilingtype bbox xstep ystep resource length filter flatedecode stream endstream endobj obj goto chapter endobj obj acknowledgment endobj obj goto chapter endobj obj abstract endobj obj goto endobj obj introduction endobj obj goto endobj obj software endobj obj goto endobj obj overview endobj obj goto endobj obj contribution endobj obj goto endobj obj crossplatform language semantics endobj obj goto endobj obj building foundation portability endobj obj goto endobj obj primitive numeric type endobj obj goto endobj obj boxed class primitive type endobj obj goto endobj obj runtime reflection endobj obj goto endobj obj structural type endobj obj goto endobj obj compiletime overloading endobj obj goto endobj obj compromising name performance undefined behavior endobj obj goto endobj obj evaluating portability endobj obj goto endobj obj expanding universe interoperability endobj obj goto endobj obj motivation endobj obj goto endobj obj scala type javascript type endobj obj goto endobj obj type correspondence endobj obj goto endobj obj manipulating value javascript type endobj obj goto endobj obj creating javascript value endobj obj goto endobj obj completeness endobj obj goto endobj obj related work endobj obj goto endobj obj conclusion endobj obj goto endobj obj lesson learned endobj obj goto endobj obj scalajs ir simple language portability interoperability endobj obj goto endobj obj overview endobj obj goto endobj obj definition endobj obj goto endobj obj class definition endobj obj goto endobj obj type endobj obj goto endobj obj method name type reference endobj obj goto endobj obj typing class member endobj obj goto endobj obj typing class definition endobj obj goto endobj obj typing term endobj obj goto endobj obj property ir endobj obj goto endobj obj type soundness endobj obj goto endobj obj closed world endobj obj goto endobj obj conclusion endobj obj goto endobj obj ir javascript claiming performance endobj obj goto endobj obj compilation pipeline endobj obj goto endobj obj compiling scala file sjsir file endobj obj goto endobj obj base linking endobj obj goto endobj obj optimization ir endobj obj goto endobj obj emitting javascript code endobj obj goto endobj obj parallel incremental wholeprogram optimizer endobj obj goto endobj obj motivation endobj obj goto endobj obj knowledge query endobj obj goto endobj obj knowledge query oo functional language endobj obj goto endobj obj diffing program run endobj obj goto endobj obj parallel implementation endobj obj goto endobj obj result endobj obj goto endobj obj limitation endobj obj goto endobj obj related work endobj obj goto endobj obj conclusion endobj obj goto endobj obj encoding javascript endobj obj goto endobj obj expressionbased statementbased endobj obj goto endobj obj exotic behavior scala object endobj obj goto endobj obj character endobj obj goto endobj obj longs endobj obj goto endobj obj overloaded constructor endobj obj goto endobj obj reference j global variable endobj obj goto endobj obj metaobject protocol endobj obj goto endobj obj array endobj obj goto endobj obj integer endobj obj goto endobj obj survey existing implementation endobj obj goto endobj obj improvement runtimelong endobj obj goto endobj obj using optimizing compiler endobj obj goto endobj obj correctness endobj obj goto endobj obj related work endobj obj goto endobj obj conclusion endobj obj goto endobj obj performance result endobj obj goto endobj obj effect performance configuration various platform endobj obj goto endobj obj e feature versus e across engine endobj obj goto endobj obj comparison handwritten j across engine endobj obj goto endobj obj conclusion endobj obj goto endobj obj perspective endobj obj goto appendixa endobj obj scalajs ir specification reference endobj obj goto endobj obj syntax endobj obj goto endobj obj syntax type endobj obj goto endobj obj syntax method name endobj obj goto endobj obj syntax class member declaration endobj obj goto endobj obj syntax term endobj obj goto endobj obj typing rule endobj obj goto endobj obj subclass relationship endobj obj goto endobj obj helper function endobj obj goto endobj obj subtyping relationship endobj obj goto endobj obj typing member class definition endobj obj goto endobj obj typing term endobj obj goto appendixb endobj obj runtimelong annotated predicatequalified type endobj obj goto section endobj obj bibliography endobj obj goto section endobj obj curriculum vitae endobj obj goto r fit endobj obj length filter flatedecode stream z v ri ez l endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename imagesepflpdf ptexpagenumber ptexinfodict r matrix bbox resource colorspace r r procset pdf extgstate r length filter flatedecode stream w ʀ j
106,Lobsters,scala,Scala programming,CoSMeDis: Distributed Social Media with Formally-Verified Confidentiality,https://www.ieee-security.org/TC/SP2017/papers/201.pdf,cosmedis distributed social medium formallyverified confidentiality,,obj length filter flatedecode stream xڝz v ѷ qf 䡚 k kf u j j n kœ j ѫ anvx ȃj n fs쇬 q
107,Lobsters,scala,Scala programming,Concurrent Data Representation Synthesis (2012),http://cse.iitd.ernet.in/~sbansal/csl862-soft/readings/concurrent_data_representation_synthesis.pdf,concurrent data representation synthesis,,obj length filter flatedecode stream f ǳ f py v q u ޢ f jų q ucw f p c ʶ q e k x u p endstream endobj obj length filter flatedecode stream j v aw h eg n c h ic zσ כd q 껀 u q ry mk krh ȏ f endstream endobj obj length filter flatedecode stream xpq dw c u r χ ޕ nx v p b ǭ
108,Lobsters,scala,Scala programming,Exploring Tagless Final pattern for extensive and readable Scala code (2017),https://blog.scalac.io/exploring-tagless-final.html,exploring tagless final pattern extensive readable scala code,introducing tagless final repo language bridge interpreter benefit extensibility composability real life example summary link twitter feed,post try share functional pattern stumbled upon recently tagless final pattern try address vital problem every software engineer make sure program write correct try explain tagless final work applied practice keeping thing earth practical possible course invent scratch would like share learned maybe popularize solutionkudos oleg kiselyov describing pattern depth john de go inspiring write postlet get startedintroducing tagless finaltagless final allows build subset host language sound typesafe predictable designed properly subset make easy write correct program hard write incorrect one fact invalid state expressed later solution written hosted language safely run return value hosting languagefor u scala hosting language pattern also applies ecosystem tagless final seen composite pattern build top inspired many pattern like type class free monad might spot similarity conceptual level scala implementation distinct part language defines subset operation hosted language allowsbridges helper express scala value business logic languageinterpreters dual bridge run logic expressed language get final value official lingo using naming make explanation simpler let explore simple example basic math find whole code repolanguagelanguage heart dsl defines hosted languageabove defined basic operation trait type definitely caught eye language parameterized wrapper type internal type type parameter useful u later wrapper allow u change package operate type wrapper make sure api typesafeconsider method called return wrapper string contrast consequence call toupper int make api much harder use incorrectly fact combine two method set would need method covert type one fairly standard stuff one method create wrapper x value set operation valuesbridgeshaving language place need bridge gap hosting language scala hosted language build interface generic bridge see take implicit language build expression calling apply return result wrapped desired wrapper class although trait might seem confusing taking look example hopefully clear thing bridge really simple take single scala value number int convert expression language since operating given l represent incorrect logic like incrementing string approach bridge fine grained build simple expression easily combine simple expression bigger one follow coarse grained approach express bigger algorithm straight awayinterpreterswe defined metalanguage expressed problem language time make run instance interpreter like first need define wrapper u need anything fancy operate plain value nowrap literally default type parameterized done simply need implement interface nothing fancy herenote david barri pointed comment nowrapid type alias might tricky use production code due eager evaluation concern stick simplicityhaving item place run together simple enough bother wrapper first place ever played free monad probably build multiple specialized interpreter give example let build another one time build utility interpreter helpful later stage new interpreter prettyprint math expression lisplike syntax easily spot mistake codeso far good reiterate defined possible operation form language trait defined helper convert scala value expression using language implemented metalanguage run code every element plain scala thanks way composed achieve nice propertiesbenefitsextensibilityyou probably familiar expression problem one classical concept computer science long story short interface set implementation interface want able easily add operation interface new interface implementationsideally usually oop make hard add interface method easy add implementation fp hand easy add new method harder add implementationsthis big deal every programmer even though might think every day useful software static written left unchanged year software need evolve hence extensibility important factor picking patternstagless final find closer fp part extensibility spectrum ok case tool easily safely modify language presume common operation creating interpreter might harder agree cool thing always need update change made nonbreaking way least keeping damage minimum explain work let go back example one math operation add let say wanted another one called multiply could go add new method language would really simple unfortunately also caused ripple effect throughout system would update every interpreter us language good let something else insteadconceptually created child language whole api parent also new thing point thing parentdefine bridge build interface see required bit writing could le delegatedinherited interpretwithmul definition good part point touch older part run beforecomposabilityanother interesting property emerges pattern composability ability combine small part bigger powerful entity new propertieslet discus simple example using original language able express logic like code compiles fine something could better performance optimal form operation simply would much simpler performantof course difference huge language would api call db query difference would much bigger conceptually would like simplify expression convenient form naively one case flattening many nested inccalls single addbut tagless final approach brings u moving part language bridge interpreter add optimization language could mean dsl would constant flux mentioned would prefer touch defined languageadding optimization bridge plausible unfortunately call time know much shape building even worse user language build bridge make distributing improved version harder left one place interpreter figure something end user able optin optimization easily find helpfulone interesting solution problem interpreter composability recap idea interpreter take expression custom language turn plain scala value would write specific interpreter take expression turn plain scala result would happen bridge could interpret output later onin short instead interpreting say scala int interpret rewritten interpretationof course code simplistic get idea interpretation process collect detailed information expression make decision based thathere output see expression rewritten different form later new form interpreted usualreal life examplehaving explained pattern let build something solves typical problem toy example use slick make simple query databasewe start language define basic operation person case class together helper class pas data around make api typesafethen follow routine get u slick interpreterour interpreter anything fancy keep table definition internally call state accumulated form queryobj passed around reach final point run query executed retrieve dataand tada used tagless final slicksummaryand applied pattern scala wrote code extended composed easei hope post inspired take look tagless final way inspired thanks time keep hacking linksdo like post want stay updated follow u twitter subscribe feed software consultant always looking problem solve although focus scala related technology moment last year also got hand dirty working android javascript apps goal solve problem learn something working team follow boy scout rule always check module cleaner state checked think rule good extend also aspect software development try improve communication pattern process practice thing might seem nontechnical vital success
110,Lobsters,scala,Scala programming,Functional Programming for Mortals,https://leanpub.com/fpmortals/read,functional programming mortal,book functional programming scalaz source code red book copyleft notice libre free software source available copyleft creative common attribution sharealike international thanks road lead lambda free monad good option future unsuck adts win classy monad transformer optimizing tagless final index state continuation monad practicality introduction abstracting execution higher kinded type kind projector pure functional programming total deterministic inculpable comprehension syntax sugar assignment http filter better summary unhappy path gymnastics fallback logic early exit incomprehensible application design specification drone google container engine interface algebra business logic initial update act unit test contextual parallel initial act summary data functionality data recursive adts function adts exhaustivity alternative product coproducts union type totalitarian iotaz convey information simple share counting complexity prefer coproduct product scalacheck optimisation functionality polymorphic function syntax simulacrum instance fundamentally broken implicit resolution quirk implicit resolution type alias used modelling description browser data jurl functionality contributed scala standard library module summary scalaz typeclasses le agenda appendable thing effectivelyonce delivery objecty thing implied law substitution mappable thing functor foldable mapreduce traverse align variance apply bind apply bind applicative monad identity homomorphism interchange mappy left identity right identity associativity non divide conquer plus lone wolf zippy optional cothings cobind comonad cozip bithings summary scalaz cheatsheet combine thing scalaz data type jmh type variance covariance contrarivariance bug compiler limitation subtyping god called monad evaluation memoisation tagging natural transformation container maybe either validation higher kinded either eager const optimised collection list lot clustering algorithm priority queue discrete interval summary advanced monad always motion effect side effect scalafix stack safety example stack safe stack safe monad transformer library two li haoyi implicit function wrong index state transformer stack ambiguous implicits free lunch smock advanced monad really philip stark peter latency number extensible effect falgebras iotaz explicitly forbidden running effect parallel breaking law get parallelism default cary robbins bug scala compiler two creating running fail feature summary typeclass derivation magnolia shapeless running example lot repeat limitation scala compiler scalacheck lot arbitrary arity lot iotaz example magnolia example json fully automatic derivation shapeless shapeless value example equal runtime example example terrible idea one compatible complicated derivation example dark side derivation much common cause slow compiles performance java microbenchmark harness jmh summary wiring application overview blaze shim dsl thank gitter chat room typeclass cheatsheet haskell data function typeclasses record function generalised adts haskell free monad style module evaluation lazily evaluated next step course functional programming third party license scala license scalaz license,wise hatred foolish world getting closely interconnected learn tolerate learn put fact people say thing like live together way live together die together must learn kind charity kind tolerance absolutely vital continuation human life bertrand russell book book typical scala developer probably java background sceptical curious functional programming fp paradigm book justifies every concept practical example including writing web application book us scalaz popular stable principled comprehensive functional programming framework scala book designed read cover cover order presented rest chapter earlier chapter encourage coding style later discredit similar learn theory gravity child progress riemann einstein maxwell become student physic computer necessary follow along studying scalaz source code encouraged complex code snippet available source code want practical exercise encouraged implement scalaz example application using partial description presented book also recommend red book reading teach write fp library scala first principle copyleft notice book libre follows philosophy free software use book like source available redistribute book distribute version mean print photocopy email upload website change translate charge remix delete bit draw book copyleft change book distribute version must also pas freedom recipient book us creative common attribution sharealike international cc bysa license original code snippet book separately licensed may use without restriction excerpt scalaz related library maintain license reproduced full appendix example application dronedynamicagents distributed term snippet book available without restriction thanks diego esteban alonso blas raãºl raja peter neyens degree rãºnar bjarnason tony morris john de go edward kmett help explaining principle fp kenji yoshida jason zaugg main author scalaz paul chiusano mile sabin fixing critical bug scala compiler thanks reader gave feedback early draft text material particularly helpful understanding concept book thanks juan manuel serrano road lead lambda pere villega free monad dick wall josh suereth good erik bakker option future unsuck noel markham adts win sukant hajra classy monad transformer luka jacobowitz optimizing tagless final vincent marquez index state gabriel gonzalez continuation monad yi lin wei zainab ali tutorial hack tower meetups helpul soul patiently explained thing merlin edmund noble fabio labella adelbert chang michael pilquist paul snively daniel spiewak stephen compall brian mckenna ryan delucchi pedro rodriguez emily pillmore aaron vargo tomas mikula jeanbaptiste giraudeau itamar ravid ross baker alexander konovalov harrison houghton alexandre archambault christopher davenport jose cardona isaac elliott practicality set project us library presented book use recent version scala fpspecific feature enabled eg buildsbt scalaversion thisbuild scalacoptions thisbuild seq language ypartialunification xfatalwarnings librarydependencies seq comgithubmpilquist simulacrum orgscalaz scalazcore addcompilerplugin orgspiremath kindprojector addcompilerplugin orgscalamacros paradise cross crossversionfull order keep snippet short omit import section unless told otherwise assume snippet following import import scalaz scalaz import simulacrum introduction human instinct sceptical new paradigm put perspective far come shift already accepted jvm start quick recap last year java introduced collection api allowing u write method abstracted mutable collection useful writing general purpose algorithm bedrock codebases problem perform runtime casting public string first collection collection return string collectionget response developer defined domain object business logic effectively collectionofthings collection api became implementation detail java introduced generic allowing u define collection thing abstracting container element generic changed wrote java author java generic compiler martin odersky created scala stronger type system immutable data multiple inheritance brought fusion object oriented oop functional programming fp developer fp mean using immutable data much possible mutable state still necessary evil must isolated managed eg akka actor synchronized class style fp result simpler program easier parallelise distribute improvement java scratching surface benefit fp discover book scala also brings future making easy write asynchronous application future make return type everything need rewritten accomodate including test subject arbitrary timeouts problem similar java way abstracting execution much way abstracting collection abstracting execution say want interact user command line interface read user type write message trait terminalsync def read string def write string unit trait terminalasync def read future string def write string future unit write generic code something simple echo input synchronously asynchronously depending runtime implementation could write synchronous version wrap future worry thread pool using work could awaitresult future introduce thread blocking either case lot boilerplate fundamentally dealing different apis unified solve problem like java common parent using higher kinded type hkt scala language feature higher kinded type allow u use type constructor type parameter look like c way saying whatever c must take type parameter example trait foo c def create int c int list type constructor take type eg int construct type list int implement foo using list object foolist extends foo list def create int list int list implement foo anything type parameter hole eg either string unfortunately bit clunky create type alias trick compiler accepting type eitherstring either string type alias define new type use substitution provide extra type safety compiler substitute eitherstring either string everywhere technique used trick compiler accepting type one hole would otherwise think two like implement foo eitherstring object fooeitherstring extends foo eitherstring def create int either string int right alternatively kind projector plugin allows u avoid type alias use syntax tell compiler type hole object fooeitherstring extends foo either string def create int either string int right finally one weird trick use want ignore type constructor define type alias equal parameter proceeding understand id int thing int substituting int id valid type constructor use id implementation foo object fooid extends foo id def create int int want define terminal type constructor c defining construct type parameter like id implement common interface synchronous asynchronous terminal trait terminal c def read c string def write string c unit type x x object terminalsync extends terminal def read string def write string unit object terminalasync extends terminal future def read future string def write string future unit think c context say context executing know nothing c anything c string need kind execution environment let u call method returning c able something including calling another method terminal also need way wrapping value c signature work well trait execution c def chain b c c f c b c b def create b b b c b letting u write def echo c terminal c e execution c c string echain tread string echain twrite unit ecreate share echo implementation synchronous asynchronous codepaths write mock implementation terminal use test without timeouts implementation execution execution future reusable generic method like echo code echo horrible implicit class scala language feature give c method call method flatmap map reason become clearer moment method take implicit execution c nothing flatmap map used seq option future object execution implicit class ops c c c def flatmap b f c b implicit e execution c c b echain c f def map b f b implicit e execution c c b echain c f andthen ecreate def echo c implicit terminal c e execution c c string treadflatmap string twrite map unit reveal used flatmap method name let u use comprehension syntax sugar nested flatmap map def echo c implicit terminal c e execution c c string tread twrite yield execution signature trait scalaz called monad except chain bind create pure say c monadic implicit monad c available addition scalaz id type alias takeaway write method operate monadic type write sequential code abstract execution context shown abstraction synchronous asynchronous execution also purpose rigorous error handling c either error managing access volatile state performing io auditing session pure functional programming functional programming act writing program pure function pure function three property total return value every possible input deterministic return value input inculpable direct interaction world program state together property give u unprecedented ability reason code example input validation easier isolate totality caching possible function deterministic interacting world easier control test function inculpable kind thing break property side effect directly accessing changing mutable state eg maintaining var class using legacy api impure communicating external resource eg file network lookup throwing catching exception write pure function avoiding exception interacting world safe f execution context previous section abstracted execution defined echo id echo future might reasonably expect calling echo perform side effect pure however use future id execution context application start listening stdin val futureecho future string echo future broken purity longer writing fp code futureecho result running echo future conflates definition program interpreting running result application built future difficult reason expression referentially transparent replaced corresponding value without changing behaviour pure function referentially transparent allowing great deal code reuse performance optimisation understanding control program impure function referentially transparent replace echo future value val futureecho since pesky user type something different second time define simple safe f execution context final class io val interpret def map b f b io b io f interpret def flatmap b f io b io b io f interpret interpret object io def apply io new io lazily evaluates thunk io data structure reference potentially impure code actually running anything implement terminal io object terminalio extends terminal io def read io string io iostdinreadline def write string io unit io println call echo io get back value val delayed io string echo io val delayed reused definition work done map string compose additional program much would map future io keep u honest depending interaction world prevent u accessing output interaction impure code inside io evaluated interpret value impure action application composed io program interpreted main method also called end world book expand concept introduced chapter show write maintainable pure function achieve objective comprehension comprehension ideal fp abstraction sequential program interact world since using lot going relearn principle scalaz help u write cleaner code chapter try write pure program technique applicable nonfp codebases syntax sugar simple rewrite rule also called syntax sugar contextual information see comprehension use show reify feature repl print code look like type inference scala import scalareflectruntimeuniverse scala val b c option scala show reify j b k c yield j k re readaflatmap readbflatmap j readcmap k plus j plus k lot noise due additional sugarings eg rewritten plus etc skip show reify brevity repl line reify manually clean generated code become distraction reify j b k c yield j k aflatmap bflatmap j cmap k j k rule thumb every called generator nested flatmap call final generator map containing yield body assignment assign value inline like ij j val keyword needed reify j b ij j k c yield ij k aflatmap bmap j j j flatmap case j ij cmap k ij k map b introduces ij flatmapped along j final map code yield unfortunately assign generator requested language feature implemented http scala initial getdefault yield initial console error expected found workaround limitation defining val outside scala val initial getdefault scala yield initial create option initial assignment scala initial option getdefault yield initial val assign single value anything work case pattern match scala val first second hello world first string hello second string world scala val list list int scala val head tail list head int tail list int list true assignment comprehension scala val maybe option hello world scala entry maybe first entry yield first re hello careful miss case runtime exception totality failure scala val tail list caught scalamatcherror list filter possible put statement generator filter value predicate reify j b j k c yield j k aflatmap bwithfilter j j flatmap j cmap k j k older version scala used filter traversablefilter creates new collection every predicate withfilter introduced performant alternative accidentally trigger withfilter providing type information interpreted pattern match reify int yield awithfilter case int true case false map case int like assignment generator use pattern match left hand side unlike assignment throw matcherror failure generator filtered fail runtime however inefficient double application pattern compiler plugin bettermonadicfor produce alternative better desugarings scala compiler example interpreted reify int yield amap int instead inefficient double matching best case silent filtering runtime worst case highly recommended finally yield compiler use foreach instead flatmap useful sideeffects reify j b println j aforeach bforeach j println j summary full set method supported comprehension share common super type generated snippet independently compiled trait would roughly look like trait forcomprehensible c def map b f b c b def flatmap b f c b c b def withfilter p boolean c def foreach f unit unit context c comprehension provide map flatmap lost implicit scalazbind available provide map flatmap often surprise developer inline future calculation comprehension run parallel import scalaconcurrent import executioncontextimplicitsglobal future expensivecalc j future anotherexpensivecalc yield j flatmap spawning anotherexpensivecalc strictly expensivecalc ensure two future calculation begin parallel start outside comprehension val future expensivecalc val b future anotherexpensivecalc j b yield j comprehension fundamentally defining sequential program show far superior way defining parallel computation later chapter spoiler use future unhappy path far looked rewrite rule happening map flatmap consider happens context decides proceed option example yield called j k defined j b k c yield j k b c none comprehension shortcircuits none tell u went wrong many function wild take option parameter actually require parameter exist alternative throwing runtime exception use comprehension giving u totality return value every input def namedthings somename option string somenumber option int option string name somename number somenumber yield number name verbose clunky bad style function requires every input make requirement explicit pushing responsibility dealing optional parameter caller def namedthings name string num int num name use either left cause comprehension short circuit extra information much better option error reporting scala val right scala val b right scala val c either string int left sorry c scala j b k c yield j k left sorry c lastly see happens future fails scala import scalaconcurrent scala import executioncontextimplicitsglobal scala futurefailed int new throwable j future println hello yield j scala awaitresult f durationdurationinf caught javalangthrowable future print terminal never called like option either comprehension short circuit short circuiting unhappy path common important theme comprehension express resource cleanup way try finally good fp put clear ownership responsibility unexpected error recovery resource cleanup onto context usually monad see later business logic gymnastics although easy rewrite simple sequential code comprehension sometimes want something appears require mental summersault section collect practical example deal fallback logic say calling method return option successful want fallback another method like using cache def getfromredis string option string def getfromsql string option string getfromredis key orelse getfromsql key asynchronous version api def getfromredis string future option string def getfromsql string future option string careful extra work cache getfromredis key sql getfromsql key yield cache orelse sql run query pattern match first result type wrong cache getfromredis key re cache match case cache wrong type case none getfromsql key yield re need create future cache cache getfromredis key re cache match case futuresuccessful cache case none getfromsql key yield re futuresuccessful creates new future much like option list constructor early exit say condition exit early successful value want exit early error standard practice oop throw exception def geta int val geta require must positive rewritten async def geta future int def error msg string future nothing futurefailed new runtimeexception msg geta b error must positive else futuresuccessful yield b want exit early successful return value simple synchronous code def getb int val geta else getb translates nested comprehension dependency asynchronous def getb future int geta c futuresuccessful else b getb yield b yield c implicit monad ie monadic scalaz let u create value calling apure scalaz provides monad future pure future call futuresuccessful besides pure slightly shorter type general concept work beyond future therefore recommended geta c future else b getb yield b yield c incomprehensible context comprehending must stay mix context scala def option option int scala def future future int scala option b future yield b console error type mismatch found future int required option b future nothing help u mix arbitrary context comprehension meaning well defined nested context intention usually obvious yet compiler still accept code scala def geta future option int scala def getb future option int scala geta b getb yield b console error value member option int want take care outer context let u write code inner option hiding outer context exactly monad transformer scalaz provides implementation option either named optiont eithert respectively outer context anything normally work comprehension need stay throughout create optiont method call change context future option optiont future scala val result optiont geta b optiont getb yield b result optiont future int optiont future completed run return u original context scala resultrun re future option int future completed monad transformer also allows u mix future option call method return plain future via liftm optiont provided scalaz scala def getc future int scala val result optiont geta b optiont getb c getcliftm optiont yield b c result optiont future int optiont future completed mix method return plain option wrapping futuresuccessful pure future followed optiont scala def getd option int scala val result optiont geta b optiont getb c getcliftm optiont optiont getdpure future yield b c result optiont future int optiont future completed messy better writing nested flatmap map hand clean dsl handle required conversion optiont future def liftfutureoption f future option optiont f def liftfuture f future fliftm optiont def liftoption option optiont opure future def lift liftoption option combined operator applies function right value left visually separate logic transformer scala val result geta liftfutureoption b getb liftfutureoption c getc liftfuture getd liftoption e lift yield e b c result optiont future int optiont future completed often called thrush operator uncanny resemblance cute bird like symbolic operator use alias approach also work either others inner context lifting method complex require parameter scalaz provides monad transformer lot type worth checking one available application design chapter write business logic test purely functional server application source code application included example directory along source however recommended read source code final chapter significant refactors learn fp specification application manage justintime build farm shoestring budget listen drone continuous integration server spawn worker agent using google container engine gke meet demand work queue drone receives work contributor submits github pull request managed project drone assigns work agent processing one job time goal app ensure enough agent complete work cap number agent whilst minimising total cost app need know number item backlog number available agent google spawn node host multiple drone agent agent start register drone drone take care lifecycle including keepalive call detect removed agent gke charge fee per minute uptime rounded nearest hour node one simply spawn new node job work queue must reuse node retain minute get value money app need able start stop node well check status eg uptime list inactive node know time gke belief addition api talk directly agent know individual agent performing work drone server accidentally stop agent whilst performing work inconvenient requires human restart job contributor manually add agent farm counting agent node equivalent need supply node agent available failure mode always take least costly option drone gke json rest api oauth authentication interface algebra codify architecture diagram previous section firstly need define simple data type capture millisecond timestamp simple thing exist either java scala standard library import scalaconcurrentduration final case class epoch millis long extends anyval def finiteduration epoch epoch millis dtomillis def e epoch finiteduration millis emillis millis fp algebra take place interface java set valid message actor akka layer define sideeffecting interaction system tight iteration writing business logic algebra good level abstraction design system trait drone f def getbacklog f int def getagents f int final case class machinenode id string trait machine f def gettime f epoch def getmanaged f nonemptylist machinenode def getalive f map machinenode epoch def start node machinenode f machinenode def stop node machinenode f machinenode used nonemptylist easily created calling tonel list returning option nonemptylist otherwise everything familiar good practice fp encode constraint parameter return type mean never need handle situation impossible however often conflict law liberal accept although agree parameter general possible agree function take seq unless handle empty seq otherwise course action would exception breaking totality causing side effect prefer nonemptylist list nonempty property learn typeclass hierarchy see better way request nonemptyness business logic write business logic defines behaviour considering happy path need worldview class hold snapshot knowledge world designing application akka worldview would probably var stateful actor worldview aggregate return value method algebra add pending field track unfulfilled request final case class worldview backlog int agent int managed nonemptylist machinenode alive map machinenode epoch pending map machinenode epoch time epoch ready write business logic need indicate depend drone machine write interface business logic trait dynagents f def initial f worldview def update old worldview f worldview def act world worldview f worldview implement module module depends module algebra pure function abstracted f implementation algebraic interface tied specific type eg io called interpreter final class dynagentsmodule f monad drone f machine f extends dynagents f monad context bound mean f monadic allowing u use map pure course flatmap via comprehension access algebra drone machine respectively using single capital letter name common naming convention monad algebra implementation business logic run infinite loop pseudocode state initial true state update state state act state initial initial call external service aggregate result worldview default pending field empty map def initial f worldview db dgetbacklog da dgetagents mm mgetmanaged mgetalive mt mgettime yield worldview db da mm mapempty mt recall chapter flatmap ie use generator allows u operate value computed runtime return f returning another program interpreted runtime flatmap safely chain together sequential sideeffecting code whilst able provide pure implementation test fp could described extreme mocking update update call initial refresh world view preserving known pending action node changed state remove pending pending action taking longer minute anything assume failed forget asked def update old worldview f worldview snap initial changed symdiff oldalivekeyset snapalivekeyset pending oldpending changed filternot case started snaptime started update snapcopy pending pending yield update private def symdiff set b set set union b intersect b concrete function like symdiff need test interpreter explicit input output could move pure code standalone method stateless object testable isolation happy testing public method preferring business logic easy read act act method slightly complex split two part clarity detection action need taken followed taking action simplification mean perform one action per invocation reasonable control invocation may choose rerun act action taken write scenario detector extractor worldview nothing expressive way writing else condition need add agent farm backlog work agent node alive pending action return candidate node would like start private object needsagent def unapply world worldview option machinenode world match case worldview backlog managed alive pending backlog aliveisempty pendingisempty option managedhead case none backlog stop node become stale work however since google charge per hour shut machine minute get money return nonempty list node stop financial safety net node maximum lifetime hour private object stale def unapply world worldview option nonemptylist machinenode world match case worldview backlog alive pending time alivenonempty alive pendingkeys collect case n started backlog time started tominutes n case n started time started n tolisttonel case none detected scenario occur write act method schedule node started stopped add pending noting time scheduled action def act world worldview f worldview world match case needsagent node mstart node update worldcopy pending map node worldtime yield update case stale node nodesfoldleftm world world n mstop n update worldcopy pending worldpending n worldtime yield update case worldpure f needsagent stale cover possible situation need catchall case nothing recall chapter pure creates monadic context value foldleftm like foldleft iteration fold may return monadic value case iteration fold return f worldview monadic find lifted method behave one would expect taking monadic value place value unit test fp approach writing application dream delegate writing implementation algebra team member focusing making business logic meet requirement application highly dependent timing third party webservices traditional oop application create mock method call test actor outgoing mailbox fp mocking equivalent providing alternative implementation dependency algebra algebra already isolate part system need mocked ie interpreted differently unit test start test data object data val machinenode val machinenode val managed nonemptylist val epoch epoch val epoch epoch min val epoch epoch min val epoch epoch hour val needsagents worldview managed mapempty mapempty import data epoch string interpolator written jon contextual library giving u compiletime safety around string constructor type import javatimeinstant object epochinterpolator extends verifier epoch def check string either int string epoch try right epoch instantparse toepochmilli catch case left format implicit class epochmillisstringcontext sc stringcontext val epoch prefix epochinterpolator sc implement algebra extending drone machine specific monadic context id simplest implementation simply play back fixed worldview isolated state system use var store state class mutable state worldview var started stopped int private val drone id new drone id def getbacklog int statebacklog def getagents int stateagents private val machine id new machine id def getalive map machinenode epoch statealive def getmanaged nonemptylist machinenode statemanaged def gettime epoch statetime def start node machinenode machinenode started node def stop node machinenode machinenode stopped node val program new dynagentsmodule id write unit test using flatspec scalatest create instance mutable import member implicit drone machine use id execution context therefore interpreting program return id worldview assert trivial case check initial method return value use static implementation business logic generate initial world view val mutable new mutable needsagents import mutable programinitial shouldbe needsagents create advanced test update act method helping u flush bug refine requirement remove changed node pending val world worldview managed map mapempty val mutable new mutable world import mutable val old worldcopy alive mapempty pending map time programupdate old shouldbe world request agent needed val mutable new mutable needsagents import mutable val expected needsagentscopy pending map programact needsagents shouldbe expected mutablestopped shouldbe mutablestarted shouldbe would boring go full test suite following test easy implement using approach request agent pending shut agent node young shut agent backlog node shortly incur new cost shut agent pending action shut agent backlog old shut agent even potentially work old ignore unresponsive pending action update test synchronous isolated test thread could running test parallel designed test suite akka test would subject arbitrary timeouts failure would hidden logfiles productivity boost simple test business logic overstated consider application time interacting customer refining updating fixing business rule everything else implementation detail parallel application designed run algebraic method sequentially obvious place work performed parallel initial definition initial could ask information need time instead one query time opposed flatmap sequential operation scalaz us apply syntax parallel operation dgetbacklog dgetagents mgetmanaged mgetalive mgettime also use infix notation dgetbacklog dgetagents mgetmanaged mgetalive mgettime parallel operation return value monadic context apply function result return rewriting initial take advantage def initial f worldview dgetbacklog dgetagents mgetmanaged mgetalive mgettime case db da mm mt worldview db da mm mapempty mt act current logic act stopping node sequentially waiting result proceeding could stop node parallel update view world disadvantage way failure cause u shortcircuit updating pending field reasonable tradeoff since update gracefully handle case node shut unexpectedly need method operates nonemptylist allows u map element f machinenode returning f nonemptylist machinenode method called traverse flatmap get nonemptylist machinenode deal simple way stopped nodestraverse mstop update stoppedmap worldtime tolisttomap update worldcopy pending worldpending update yield update arguably easier understand sequential version summary algebra define interface system module implementation algebra term algebra interpreter concrete implementation algebra fixed f test interpreter replace sideeffecting part system giving high amount test coverage data functionality oop used thinking data functionality together class hierarchy carry method trait demand data field exist runtime polymorphism object term relationship requiring class inherit common interface get messy codebase grows simple data type become obscured hundred line method trait mixins suffer initialisation order error testing mocking highly coupled component becomes chore fp take different approach defining data functionality separately chapter cover basic data type advantage constraining subset scala language also discover typeclasses way achieve compiletime polymorphism thinking functionality data structure term rather relationship data fundamental building block data type final case class also known product sealed abstract class also known coproducts case object int double string etc value method field constructor parameter prefer abstract class trait order get better binary compatibility discourage trait mixing collective name product coproducts value algebraic data type adt compose data type xor exclusive boolean algebra product contains every type composed coproduct one example product abc b c coproduct xyz x xor xor z written scala value case object type b string type c int product final case class abc atype b b c c coproduct sealed abstract class xyz case object x extends xyz case object extends xyz final case class z b b extends xyz recursive adts adt refers call recursive algebraic data type scalazilist safe alternative stdlib list recursive icon contains reference ilist sealed abstract class ilist final case class inil extends ilist final case class icon head tail ilist extends ilist function adts adts contain pure function final case class userconfiguration accepts int boolean adts contain function come caveat translate perfectly onto jvm example legacy serializable hashcode equal tostring behave one might reasonably expect unfortunately serializable used popular framework despite far superior alternative common pitfall forgetting serializable may attempt serialise entire closure function crash production server similar caveat applies legacy java class throwable carry reference arbitrary object explore alternative legacy method discus scalaz library next chapter cost losing interoperability legacy java scala code exhaustivity important use sealed abstract class abstract class defining data type sealing class mean subtypes must defined file allowing compiler know pattern match exhaustivity check macro eliminate boilerplate eg scala sealed abstract class foo final case class bar flag boolean extends foo final case object baz extends foo scala def thing foo foo foo match case bar true console error match may exhaustive would fail following input baz def thing foo foo foo match show developer broken add new product codebase using xfatalwarnings otherwise warning however compiler perform exhaustivity checking class sealed guard eg scala def thing foo foo foo match case bar flag flag true scala thing baz scalamatcherror baz class baz thing console remain safe use guard sealed type xstrictpatmatanalysis flag proposed language improvement perform additional pattern matcher check alternative product coproducts another form product tuple like unlabelled final case class atype b c equivalent abc example best use final case class part adt lack name awkward deal case class much better performance primitive value another form coproduct nest either type eg either xtype either ytype z equivalent xyz sealed abstract class cleaner syntax define nested either type create alias type ending colon allowing infix notation association right type l r either l r xtype ytype z useful create anonymous coproducts put implementation source file type accepted string long boolean yet another alternative coproduct create custom sealed abstract class final case class definition simply wrap desired type sealed abstract class accepted final case class acceptedstring value string extends accepted final case class acceptedlong value long extends accepted final case class acceptedboolean value boolean extends accepted pattern matching form coproduct tedious union type explored dotty nextgeneration scala compiler macro totalitarian iotaz exist alternative way encoding anonymous coproducts convey information besides container necessary business information data type used encode constraint example final case class nonemptylist head tail ilist never empty make scalaznonemptylist useful data type despite containing information ilist product type often contain type far general allowed traditional oop would handled input validation assertion final case class person name string age int require namenonempty age break totality nt instead use either data type provide right person valid instance protect invalid instance propagating note constructor private final case class person private name string age int object person def apply name string age int either string person namenonempty age right new person name age else left bad input name age def welcome person person string personname look wonderful personage person person yield welcome person refined data type clean way restrict value general type refined library providing suite restriction content data install refined add following buildsbt librarydependencies eutimepit refinedscalaz following import import eutimepitrefined import refinedapirefined refined allows u define person using adhoc refined type capture requirement exactly written refined b type two parameter written infix scala example either string int string either int conventional refined written infix since refined b read meet requirement defined import refinednumericpositive import refinedcollectionnonempty final case class person name string refined nonempty age int refined positive underlying value obtained value construct value runtime using refinev returning either scala import refinedrefinev scala refinev nonempty left predicate isempty fail scala refinev nonempty sam right sam add following import construct valid value compiletime get error provided value meet requirement scala val sam string refined nonempty sam sam scala val empty string refined nonempty console error predicate isempty fail complex requirement captured example use builtin rule maxsize following import import refinedw import refinedbooleanand import refinedcollectionmaxsize capturing requirement string must nonempty maximum size character type name nonempty maxsize w final case class person name string refined name age int refined positive w notation short syntax much simpler scala support literal type type name nonempty maxsize easy define custom requirement covered refined library example dronedynamaicagents need way ensuring string contains applicationxwwwformurlencoded content create refined rule using java regular expression library sealed abstract class urlencoded object urlencoded private val valid pattern patterncompile p alnum p xdigit z implicit def urlvalidate validateplain string urlencoded validatefrompredicate validmatcher find identity new urlencoded simple share providing functionality adts minimal set dependency make easy publish share developer using simple data modelling language make possible interact crossdiscipline team dba ui developer business analyst using actual code instead hand written document source truth furthermore tooling easily written produce consume schema programming language wire protocol counting complexity complexity data type count value exist good data type least amount complexity need hold information conveys value builtin complexity unit one value called boolean two value int value string effectively infinite value find complexity product multiply complexity part boolean boolean value boolean boolean boolean value find complexity coproduct add complexity part boolean boolean value boolean boolean boolean value find complexity adt type parameter multiply part complexity type parameter option boolean value boolean none fp function total must return value every input exception minimising complexity input output best way achieve totality rule thumb sign badly designed function complexity return value larger product input source entropy complexity total function number possible function satisfy type signature output power input unit boolean complexity boolean boolean complexity option boolean option boolean complexity boolean int mere quintillion going sextillion int boolean big implementation assigned unique number would require gigabyte represent reality int boolean something simple like isodd iseven sparse bitset function used adt could better replaced coproduct labelling limited set function relevant complexity infinity introduce restrictive data type validation closer point input refined previous section ability count complexity type signature one practical application find simpler type signature high school algebra go type signature algebra complexity simply replace either b b b b b b rearranging convert back example say designed framework based callback managed work situation created type signature c b c c convert rearrange c c b c c c b c c c b convert back type get much simpler need ask user framework provide either b c line reasoning used prove equivalent also known currying prefer coproduct product archetypal modelling problem come lot mutually exclusive configuration parameter b c product boolean b boolean c boolean complexity whereas coproduct sealed abstract class config object config case object extends config case object b extends config case object c extends config complexity better model configuration parameter coproduct rather allowing invalid state exist complexity data type also implication testing practically impossible test every possible input function easy test sample value scalacheck property testing framework random sample data type low probability valid sign data modelled incorrectly optimisation big advantage using simplified subset scala language represent data type tooling optimise jvm bytecode representation example could pack boolean option field array byte cache value memoise hashcode optimise equal use switch statement pattern matching much optimisation applicable oop class hierarchy may managing state throwing exception providing adhoc method implementation functionality pure function typically defined method object package object math def sin x double double javalangmathsin x mathsin however clunky use object method since read insideout left right addition function object steal namespace define sin somewhere else get ambiguous reference error problem static method v class method sort developer put method trait requiring user mix cake pattern going straight hell leak internal implementation detail public apis bloat bytecode make binary compatibility basically impossible confuses ide autocompleters implicit class language feature also known extension methodology syntax little boilerplate get familiar style scala implicit class doubleops x double def sin double mathsin x scala sin re double often best skip object definition go straight implicit class keeping boilerplate minimum implicit class doubleops x double def sin double javalangmathsin x implicit class syntax sugar implicit conversion implicit def doubleops x double doubleops new doubleops x class doubleops x double def sin double javalangmathsin x unfortunately runtime cost time extension method called intermediate doubleops constructed thrown away contribute gc pressure hotspot slightly verbose form implicit class avoids allocation therefore preferred implicit final class doubleops private val x double extends anyval def sin double javalangmathsin x polymorphic function common kind function polymorphic function life typeclass typeclass trait hold state type parameter least one abstract method primitive combinators may contain generalised method derived combinators may extend typeclasses one implementation typeclass given type parameter property known typeclass coherence typeclasses look superficially similar algebraic interface previous chapter algebra coherent typeclass coherence primarily consistency consistency give u confidence use implicit parameter would difficult reason code performs differently depending implicit import scope typeclass coherence effectively say import impact behaviour code additionally typeclass coherence allows u globally cache implicits runtime save memory allocation gaining performance improvement reduced pressure garbage collector typeclasses used scala stdlib explore simplified version scalamathnumeric demonstrate principle trait ordering def compare x int def lt x boolean compare x def gt x boolean compare x trait numeric extends ordering def plus x def time x def negate x def zero def ab x lt x zero negate x else x see key feature typeclass action state ordering numeric type parameter ordering abstract compare numeric abstract plus time negate zero ordering defines generalised lt gt based compare numeric defines ab term lt negate zero numeric extends ordering write function type numeric typeclass def signofthetimes implicit n numeric import n time negate ab longer dependent oop hierarchy input type ie demand input numeric vitally important want support third party class redefine another advantage typeclasses association functionality data compiletime opposed oop runtime dynamic dispatch example whereas list class one implementation method typeclass method allows u different implementation depending list content therefore offload work compiletime instead leaving runtime syntax syntax writing signofthetimes clunky thing clean downstream user prefer see method use context bound since signature read cleanly def signofthetimes numeric use implicitly numeric everywhere defining boilerplate companion typeclass object numeric def apply implicit numeric numeric numeric numeric obtain implicit le noise def signofthetimes numeric val n numeric import n time negate ab still worse u implementors syntactic problem insideout static method v class method deal introducing ops typeclass companion object numeric def apply implicit numeric numeric numeric numeric object ops implicit class numericops implicit n numeric def nplus def ntimes def unary nnegate def ab nabs duplicated orderingops def nlt def ngt note x expanded xunary syntax sugar define unary extension method write much cleaner import numericops def signofthetimes numeric tab good news never need write boilerplate simulacrum provides typeclass macro annotation automatically generates apply ops even allows u define alternative usually symbolic name common method full import simulacrum typeclass trait ordering def compare x int op def lt x boolean compare x op def gt x boolean compare x typeclass trait numeric extends ordering op def plus x op def time x op unary def negate x def zero def ab x lt x zero negate x else x import numericops def signofthetimes numeric tab custom symbolic op pronounced like method name eg pronounced angle instance instance numeric also instance ordering defined implicit val extends typeclass provide optimised implementation generalised method implicit val numericdouble numeric double new numeric double def plus x double double double x def time x double double double x def negate x double double x def zero double def compare x double double int javalangdoublecompare x optimised override def lt x double double boolean x override def gt x double double boolean x override def ab x double double javalangmathabs x although using unary ops could infinite loop method exist already double class method always used preference extension method indeed scala compiler performs special handling primitive convert method call raw dadd dmul dcmpl dcmpg bytecode instruction respectively also implement numeric bigdecimal class avoid scalabigdecimal fundamentally broken import javamath bigdecimal bd implicit val numericbd numeric bd new numeric bd def plus x bd bd bd xadd def time x bd bd bd xmultiply def negate x bd bd xnegate def zero bd bdzero def compare x bd bd int xcompareto could create data structure complex number final case class complex r derive numeric complex numeric exists since instance depend type parameter def val implicit def numericcomplex numeric numeric complex new numeric complex type ct complex def plus x ct ct ct complex xr yr xi yi def time x ct ct ct complex xr yr xi yi xr yi xi yr def negate x ct ct complex xr xi def zero ct complex numeric zero numeric zero def compare x ct ct int val real numeric compare xr yr real real else numeric compare xi yi observant reader may notice ab mathematician would expect correct return value ab complex scalamathnumeric try much generalise beyond real number good lesson smaller well defined typeclasses often better monolithic collection overly specific feature implicit resolution discussed implicits lot section clarify implicits work implicit parameter method request unique instance particular type implicit scope caller special syntax typeclass instance implicit parameter clean way thread configuration application example foo requires typeclass instance numeric typeable available well implicit handler object take two type parameter def foo numeric typeable implicit handler string implicit conversion implicit def exists one use implicit conversion enable extension methodology compiler resolving call method first check method exists type ancestor javalike rule fails find match search implicit scope conversion type search method type another use implicit conversion typeclass derivation previous section wrote implicit def derived numeric complex numeric implicit scope possible chain together many implicit def including recursively basis typeful programming allowing computation performed compiletime rather runtime glue combine implicit parameter receiver implicit conversion provider implicit resolution first normal variable scope searched implicits order local scope including scoped import eg block method outer scope including scoped import eg member class ancestor eg member super class current package object ancestor package object using nested package import fails find match special scope searched look implicit instance inside companion package object outer object nested repeated ancestor performed order given parameter type expected parameter type type parameter one two matching implicits found phase implicit resolution ambiguous implicit error raised implicits often defined trait extended object try control priority implicit relative another specific one avoid ambiguous implicits scala language specification rather vague corner case compiler implementation de facto standard rule thumb use throughout book eg prefer implicit val implicit object despite temptation le typing quirk implicit resolution implicit object companion object treated implicit val implicit resolution fall short hierarchy typeclasses like ordering numeric write function take implicit ordering call primitive type instance numeric defined numeric companion compiler fail find implicit resolution particularly hitormiss type alias used shape implicit parameter changed example implicit parameter using alias type value list option probably fail find implicits defined raw list option shape changed thing thing thing modelling finish chapter practical example data modelling typeclass derivation combined algebra module design previous chapter dronedynamicagents application must communicate drone google cloud using json rest service use authentication many way interpret focus version work google cloud drone version even simpler description every google cloud application need oauth client key set http consoledevelopersgooglecomapiscredentials project projectid obtaining client id client secret application obtain one time code making user perform authorization request browser yes really browser need make page open browser http redirecturi callbackuri promptconsent responsetypecode scope scope accesstypeoffline clientid clientid code delivered callbackuri get request capture application need web server listening localhost code perform access token request post host wwwgoogleapiscom contentlength contentlength contenttype applicationxwwwformurlencoded useragent googleoauthplayground code code redirecturi callbackuri clientid clientid clientsecret clientsecret scope scope granttypeauthorizationcode give json response payload accesstoken bearertoken tokentype bearer expiresin refreshtoken refreshtoken bearer token typically expire hour refreshed sending http request valid refresh token post host wwwgoogleapiscom contentlength contentlength contenttype applicationxwwwformurlencoded useragent googleoauthplayground clientsecret clientsecret granttyperefreshtoken refreshtoken refreshtoken clientid clientid responding accesstoken bearertoken tokentype bearer expiresin userland request server include header authorization bearer bearertoken substituting actual bearertoken google expires recent bearer token expiry time guidance refresh token persist session expired manually user therefore onetime setup application obtain refresh token include refresh token configuration install headless server drone implement auth endpoint refresh simply provides bearertoken user interface data first step model data needed create adt field exactly name required server use string long brevity could use refined type leak business model import refinedapirefined import refinedstringurl final case class authrequest redirecturi string refined url scope string clientid string prompt string consent responsetype string code accesstype string offline final case class accessrequest code string redirecturi string refined url clientid string clientsecret string scope string granttype string authorizationcode final case class accessresponse accesstoken string tokentype string expiresin long refreshtoken string final case class refreshrequest clientsecret string refreshtoken string clientid string granttype string refreshtoken final case class refreshresponse accesstoken string tokentype string expiresin long avoid using javaneturl cost us dns resolve hostname part performing tostring equal hashcode apart insane slow method throw io exception pure change depending network configuration deterministic refined type string refined url allows u perform equality check based string safely construct url needed legacy api said high performance code would prefer skip javaneturl entirely use third party url parser jurl even safe part javanet extremely slow scale functionality need marshal data class defined previous section json url postencoded form since requires polymorphism need typeclasses jsonformat simple json library study detail later chapter written principled fp ease readability primary design objective consists json ast encoder decoder typeclasses package jsonformat sealed abstract class jsvalue final case object jsnull extends jsvalue final case class jsobject field ilist string jsvalue extends jsvalue final case class jsarray element ilist jsvalue extends jsvalue final case class jsboolean value boolean extends jsvalue final case class jsstring value string extends jsvalue final case class jsdouble value double extends jsvalue final case class jsinteger value long extends jsvalue typeclass trait jsencoder def tojson obj jsvalue typeclass trait jsdecoder def fromjson json jsvalue string either flatmap use comprehension whereas stdlib either support flatmap prior scala spoken disjunction angry rabbit scalaeither contributed scala standard library creator scalaz tony morris created unsafe method added either need instance jsdecoder accessresponse jsdecoder refreshresponse making use helper function implicit class jsvalueops j jsvalue def geta jsdecoder key string string put instance companion data type always implicit scope import jsonformat jsdecoderops object accessresponse implicit val json jsdecoder accessresponse j acc jgetas string accesstoken tpe jgetas string tokentype exp jgetas long expiresin ref jgetas string refreshtoken yield accessresponse acc tpe exp ref object refreshresponse implicit val json jsdecoder refreshresponse j acc jgetas string accesstoken tpe jgetas string tokentype exp jgetas long expiresin yield refreshresponse acc tpe exp parse string accessresponse refreshresponse scala import jsonformat jsdecoderops scala val json jsparser accesstoken bearertoken tokentype bearer expiresin refreshtoken refreshtoken scala jsonmap accessresponse accessresponse bearertoken refreshtoken need write typeclasses url post encoding following reasonable design url query keyvalue pair unencoded form final case class urlquery params list string string typeclass trait urlquerywriter def tourlquery urlquery typeclass trait urlencodedwriter def tourlencoded string refined urlencoded need provide typeclass instance basic type import javaneturlencoder object urlencodedwriter implicit val encoded urlencodedwriter string refined urlencoded identity implicit val string urlencodedwriter string refinedunsafeapply urlencoderencode implicit val url urlencodedwriter string refined url svaluetourlencoded implicit val long urlencodedwriter long refinedunsafeapply stostring implicit def ilist k urlencodedwriter v urlencodedwriter urlencodedwriter ilist k v val raw mmap case k v ktourlencodedvalue vtourlencodedvalue intercalate refinedunsafeapply raw deduction use refinedunsafeapply logically deduce content string already url encoded bypassing check ilist example simple typeclass derivation much derived numeric complex underlying numeric representation intercalate method like mkstring general urlencodedwriter making use single abstract method sam type scala language feature full form implicit val string urlencodedwriter string new urlencodedwriter string override def tourlencoded string string scala compiler expects class single abstract method receives lambda fill boilerplate automatically prior sam type common pattern define method named instance typeclass companion def instance f string urlencodedwriter new urlencodedwriter override def tourlencoded string f allowing implicit val string urlencodedwriter string instance pattern still used code must support older version scala typeclasses instance need provide one method note lot bug around sam type interact language feature revert nonsam variant strange compiler crash dedicated chapter typeclass derivation calculate instance urlquerywriter automatically well clean already written write boilerplate type wish convert import urlencodedwriterops object authrequest implicit val query urlquerywriter authrequest urlquery list redirecturi aredirecturivalue scope ascope clientid aclientid prompt aprompt responsetype aresponsetype accesstype aaccesstype object accessrequest implicit val encoded urlencodedwriter accessrequest ilist code acodetourlencoded redirecturi aredirecturitourlencoded clientid aclientidtourlencoded clientsecret aclientsecrettourlencoded scope ascopetourlencoded granttype agranttypetourlencoded tourlencoded object refreshrequest implicit val encoded urlencodedwriter refreshrequest r ilist clientsecret rclientsecrettourlencoded refreshtoken rrefreshtokentourlencoded clientid rclientidtourlencoded granttype rgranttypetourlencoded tourlencoded module concludes data functionality modelling required implement recall previous chapter define component need interact world algebra define business logic module thoroughly tested define dependency algebra use context bound show response must jsdecoder post payload must urlencodedwriter trait jsonclient f def get jsdecoder uri string refined url header ilist string string f def post p urlencodedwriter jsdecoder uri string refined url payload p header ilist string string ilistempty f note define happy path jsonclient api get around error handling later chapter obtaining codetoken google server involves starting http server local machine obtaining port number making user open web page browser allows log google credential authorise application redirect back local machine capturing code informing user next step closing http server model three method userinteraction algebra final case class codetoken token string redirecturi string refined url trait userinteraction f def start f string refined url def open uri string refined url f unit def stop f codetoken almost sound easy put like also need algebra abstract local system time trait localclock f def f epoch introduce data type use refresh logic final case class serverconfig auth string refined url access string refined url refresh string refined url scope string clientid string clientsecret string final case class refreshtoken token string final case class bearertoken token string expires epoch write client module import httpencodingurlquerywriterops class f monad config serverconfig user userinteraction f client jsonclient f clock localclock f def authenticate f codetoken callback userstart params authrequest callback configscope configclientid useropen paramstourlqueryforurl configauth code userstop yield code def access code codetoken f refreshtoken bearertoken request accessrequest codetoken coderedirecturi configclientid configclientsecret pure f msg clientpost accessrequest accessresponse configaccess request time clocknow expires time msgexpiresinseconds refresh refreshtoken msgrefreshtoken bearer bearertoken msgaccesstoken expires yield refresh bearer def bearer refresh refreshtoken f bearertoken request refreshrequest configclientsecret refreshtoken configclientid pure f msg clientpost refreshrequest refreshresponse configrefresh request time clocknow expires time msgexpiresinseconds bearer bearertoken msgaccesstoken expires yield bearer summary algebraic data type adts defined product final case class coproducts sealed abstract class refined type enforce constraint value concrete function defined implicit class maintain lefttoright flow polymorphic function defined typeclasses functionality provided via context bound rather class hierarchy typeclass instance implementation typeclass simulacrumtypeclass generates ops companion providing convenient syntax typeclass function typeclass derivation compiletime composition typeclass instance scalaz typeclasses chapter tour typeclasses scalazcore use everything dronedynamicagents give standalone example appropriate criticism naming scalaz functional programming general name follow convention introduced haskell programming language based category theory feel free set type alias verb based primary functionality easier remember learning eg mappable pureable flatmappable introduce typeclass hierarchy peek four important method control flow perspective method use typical fp application typeclass method given functor map f b f b applicative pure â f monad flatmap f f b f b traverse sequence f g â g f know operation return f run sequentially comprehension flatmap defined monad f context f thought container intentional effect output flatmap allows u generate new effect f b runtime based result evaluating previous effect course type constructor f effectful even monad f often data structure using least specific abstraction reuse code list either future need transform output f map introduced functor chapter ran effect parallel creating product mapping functional programming parallelisable computation considered le powerful sequential one monad functor applicative defining pure let u lift value effect create data structure single value sequence useful rearranging type constructor f g need g f eg list future int need future list int sequence agenda chapter longer usual jampacked information perfectly reasonable attack several sitting remembering everything would require superhuman power treat chapter way knowing look information notably absent typeclasses extend monad get chapter later scalaz us code generation simulacrum however brevity present code snippet typeclass equivalent syntax available import scalaz scalaz available scalazsyntax package scalaz source code appendable thing typeclass trait semigroup op def append x def value f n int f typeclass trait monoid extends semigroup def zero def multiply value f n int f n zero else value n typeclass trait band extends semigroup known tie fighter operator advanced tie fighter upcoming section exciting semigroup defined type two value combined operation must associative meaning order nested operation matter ie b c b c monoid semigroup zero element also called empty identity combining zero give zero probably bringing back memory numeric chapter implementation monoid primitive number concept appendable thing useful beyond number scala hello world re string hello world scala list list re list int list band law append operation two element idempotent ie give value example anything one value unit least upper bound set band provides method yet user make use guarantee performance optimisation viktor klang lightbend fame lay claim phrase effectivelyonce delivery message processing idempotent operation ie bandappend realistic example monoid consider trading system large database reusable trade template populating default value new trade involves selecting combining multiple template rule merge policy two template provide value field work already done u another system job combine template order create simple template schema demonstrate principle keep mind realistic system would complicated adt sealed abstract class currency case object eur extends currency case object usd extends currency final case class tradetemplate payment list javatimelocaldate ccy option currency otc option boolean write method take template list tradetemplate need call val zero monoid tradetemplate zero templatesfoldleft zero job done get zero call must instance monoid tradetemplate although generically derive later chapter create instance companion object tradetemplate implicit val monoid monoid tradetemplate monoidinstance b tradetemplate apayments bpayments accy bccy aotc botc tradetemplate nil none none however want monoid option append content eg scala option none re option int scala option option re option int whereas want rule override default monoid option implicit def lastwins monoid option monoidinstance case none none none case none case none case winner winner none everything compiles try scala import javatime localdate ld scala val template list tradetemplate nil none none tradetemplate nil eur none tradetemplate list ldof usd none tradetemplate list ldof none true tradetemplate nil none false scala templatesfoldleft zero re tradetemplate tradetemplate list usd false needed implement one piece business logic monoid took care everything else u note list payment concatenated default monoid list us concatenation element happens desired behaviour business requirement different would simple case providing custom monoid list localdate recall chapter compiletime polymorphism different implementation append depending e list e base runtime class list introduced typeclasses chapter said one implementation typeclass given type parameter eg one monoid option boolean application orphan instance lastwins easiest way break coherence could try justify locally breaking typeclass coherence making lastwins private get plus typeclass see better way implement monoid get tagged type see even better way using lastoption instead option data model please break typeclass coherence home kid objecty thing chapter data functionality said notion equality break many thing put adt problem jvm designed java equal defined javalangobject whether make sense way remove equal way guarantee implemented however fp prefer typeclasses polymorphic functionality even concept equality captured compiletime typeclass trait equal f op def equal f f boolean op def notequal f f boolean equal indeed triple equal typesafe double equal compiled type side comparison catch lot bug equal implementation requirement objectequals commutative implies reflexive f f transitive implies throwing away universal concept objectequals take equality granted construct adt stopping u compiletime expecting equality none continuing trend replacing old java concept rather data javalangcomparable order according typeclass trait order f extends equal f op def order x f f ordering override def equal x f f boolean order x orderingeq op def lt x f f boolean op def lte x f f boolean op def gt x f f boolean op def gte x f f boolean def max x f f f def min x f f f def sort x f f f f sealed abstract class ordering object ordering case object lt extends ordering case object eq extends ordering case object gt extends ordering order implement equal term new primitive order typeclass implement primitive combinator derived combinator implied law substitution typeclass added instance order override equal performance reason must behave identically original thing order may also discrete allowing u walk successor predecessor typeclass trait enum f extends order f def succ f f def pred f f def min option f def max option f op def succn n int f f op def predn n int f f op def fromtol f f list f op def fromsteptol f step int f list f op def fromto f f ephemeralstream f op def fromstepto f step int f ephemeralstream f scala re list int list scala u re list char list n p q r u lightsaber syntax functional programmer clumsy random fromsteptol elegant civilised age discus ephemeralstream next chapter need know potentially infinite data structure avoids memory retention problem stdlib stream similarly objectequals concept tostring every class make sense java would like enforce stringyness compiletime exactly show achieves trait show f def show f f cord def show f f string explore cord detail chapter data type need know efficient data structure storing manipulating string mappable thing focusing thing mapped traversed sense functor typeclass trait functor f def map b fa f f b f b def void fa f f unit map fa def fproduct b fa f f b f b map fa f def fpair fa f f map fa def strengthl b f f b f b map f b b def strengthr b f f b b f b map f b def lift b f b f f b map f def mapply b f f b f b map f ff b ff abstract method map must compose ie mapping f g mapping composition f g famap f map g famap fandthen g map also perform noop provided function identity ie x x famap identity fa famap x x fa functor defines convenience method around map optimised specific instance documentation intentionally omitted definition encourage guessing method looking implementation please spend moment studying type signature following reading def void fa f f unit def fproduct b fa f f b f b def fpair fa f f def strengthl b f f b f b def strengthr b f f b b f b harder def lift b f b f f b def mapply b f f b f b void take instance f always return f unit forgets value whilst preserving structure fproduct take input map return f b ie tuples content result applying function useful wish retain input fpair twin element tuple f strengthl pair content f b constant left strengthr pair content f constant b right lift take function b return f f b word take function content f return function operates f directly mapply mind bender say f function b value get f b similar signature pure requires caller provide f b fpair strengthl strengthr look pretty useless useful wish retain information would otherwise lost scope functor special syntax implicit class functorops f functor self f def b b b f b functor f map self b def b b b f b b way replacing output constant scalaz provides additional functionality syntax rather typeclass binary compatibility version scalaz released possible add method typeclasses release series scala therefore worth reading typeclass source syntax example application nasty hack even admit defined start stop return input def start node machinenode f machinenode def stop node machinenode f machinenode allowed u write terse business logic mstart node update worldcopy pending map node worldtime yield update stopped nodestraverse mstop update stoppedmap worldtime tolisttomap update worldcopy pending worldpending update yield update hack push unnecessary complexity implementation better let algebra return f unit use mstart node worldcopy pending map node worldtime stopped nodestraverse mstop update stoppedmap worldtime tolisttomap update worldcopy pending worldpending update yield update foldable technically foldable data structure walked produce summary value however undersells fact onetypeclass army provide would expect see collection api many method going split beginning abstract method typeclass trait foldable f def foldmap b monoid fa f f b b def foldright b fa f z b f b b b def foldleft b fa f z b f b b b instance foldable need implement foldmap foldright get functionality typeclass although method typically optimised specific data structure foldmap marketing buzzword name mapreduce given f function b way combine b provided monoid along zero b produce summary value type b enforced operation order allowing parallel computation foldright require parameter monoid meaning need starting value z way combine element data structure summary value order traversing element right left therefore parallelised foldright conceptually foldright scala stdlib however problem stdlib foldright signature solved scalaz large data structure stack overflow listfoldright cheat implementing foldright reversed foldleft override def foldright b z b op b b b reversefoldleft z right left op left right concept reversing universal workaround used data structure say want find small number stream early exit scala def issmall int boolean scala tostreamfoldright false el acc issmall el acc javalangstackoverflowerror scalacollectioniteratortostream scalaz solves problem taking byname parameter aggregate value scala foldright false el acc issmall el acc re boolean true mean acc evaluated unless needed worth baring mind operation stack safe foldright require evaluation element also get stackoverflowerror ephemeralstream scala foldright el acc el acc javalangstackoverflowerror scalazfoldable anonfun foldr foldleft traverse element left right foldleft implemented term foldmap instance choose implement basic operation since usually implemented tail recursion byname parameter law foldable foldleft foldright consistent foldmap monoidal operation eg appending element list foldleft prepending element list foldright however foldleft foldright need consistent fact often produce reverse simplest thing foldmap use identity function giving fold natural sum monoidal element leftright variant allow choosing based performance criterion def fold monoid f def sumr monoid fa f def suml monoid fa f recall learnt monoid wrote scala templatesfoldleft monoid tradetemplate zero know silly written scala templatestoilistfold re tradetemplate tradetemplate list usd false fold work stdlib list already method called fold thing special way strangely named intercalate insert specific element performing fold def intercalate monoid fa f generalised version mkstring scala list foo bar intercalate re string foo bar foldleft provides mean obtain element traversal index including bunch related method def index fa f int option def indexor fa f default int def length fa f int def count fa f int length fa def empty fa f boolean def element equal fa f boolean scalaz pure library total function whereas list throw exception foldableindex return option convenient indexor returning default value provided element similar stdlib contains us equal rather illdefined jvm equality method really sound like collection api course anything foldable converted list def tolist fa f list also conversion stdlib scalaz data type toset tovector tostream traversablelike toilist useful predicate check def filterlength fa f f boolean int def fa f p boolean boolean def fa f p boolean boolean filterlength way counting many element true predicate return true element meet predicate may exit early seen nonemptylist previous chapter sake brevity use type alias nel place nonemptylist also seen ilist previous chapter recall alternative stdlib list impure method like apply removed split f part result b splitby def splitby b equal fa f f b ilist b nel def splitbyrelation fa f r boolean ilist nel def splitwith fa f p boolean list nel def selectsplit fa f p boolean list nel def findleft fa f f boolean option def findright fa f f boolean option example scala ilist foo bar bar faz gaz baz splitby charat re f foo b bar bar f faz g gaz b baz noting two value indexed b splitbyrelation avoids need equal must provide comparison operator splitwith split element group alternatively satisfy satisfy predicate selectsplit selects group element satisfy predicate discarding others one rare occasion two method share type signature different meaning findleft findright extracting first element left right respectively match predicate making use equal order distinct method return grouping def distinct order fa f ilist def distincte equal fa f ilist def distinctby b equal fa f f b ilist distinct implemented efficiently distincte make use ordering therefore use quicksortesque algorithm much faster naive listdistinct data structure set implement distinct foldable without work distinctby allows grouping result applying function element example grouping name first letter make use order extracting minimum maximum element extremum including variation using pattern first map another type use different type order comparison def maximum order fa f option def maximumof b order fa f f b option b def maximumby b order fa f f b option def minimum order fa f option def minimumof b order fa f f b option b def minimumby b order fa f f b option def extremum order fa f option def extremaof b order fa f f b option b b def extremaby b order fa f f b option example ask string maximum length maximum length element scala list foo fazz maximumby length re option string fazz scala list foo fazz maximumof length re option int concludes key feature foldable takeaway anything expect find collection library probably foldable already probably conclude variation method already seen first method take semigroup instead monoid def semigroup fa f option def b semigroup fa f f b option b def semigroup fa f option def semigroup fa f option returning option account empty data structure recall semigroup zero method read pt typesetting typeclass contains lot semigroup variant monoid method shown suffixed make sense data structure never empty without requiring monoid element importantly variant take monadic return value already used foldleftm first wrote business logic application know foldable def foldleftm g monad b fa f z b f b g b g b def foldrightm g monad b fa f z b f b g b g b def foldmapm g monad b monoid fa f f g b g b def findmapm monad b fa f f option b option b def allm g monad fa f p g boolean g boolean def anym g monad fa f p g boolean g boolean traverse traverse happens cross functor foldable trait traverse f extends functor f foldable f def traverse g applicative b fa f f g b g f b def sequence g applicative fga f g g f def reverse fa f f def zipl b fa f fb f b f option b def zipr b fa f fb f b f option b def indexed fa f f int def zipwithl b c fa f fb f b f option b c f c def zipwithr b c fa f fb f b f option b c f c def mapaccuml b fa f z f b f b def mapaccumr b fa f z f b f b beginning chapter showed importance traverse sequence swapping around type constructor fit requirement eg list future future list foldable able assume reverse universal concept reverse thing also zip together two thing traverse getting back none one side run element using zipl zipr decide side truncate length match special case zip add index every entry indexed zipwithl zipwithr allow combining two side zip new type returning f c mapaccuml mapaccumr regular map combined accumulator find old java way make u want reach var refer map using mapaccuml example say list word want blank word already seen filtering algorithm allowed process list word second time scaled infinite stream scala val freedom campaign freedom everyone deserves freedom user individually collectively control program split tolist scala def clean string string stolowercasereplaceall scala freedom mapaccuml setempty string seen word val cleaned clean word seen cleaned seen cleaned else word intercalate re string campaign freedom everyone deserves user individually collectively control program finally like provides variant method data structure empty accepting weaker semigroup instead monoid apply instead applicative recall semigroup provide empty apply provide point align align merging padding anything functor looking align meet data type spoken hurray sealed abstract class b final case class aa extends nothing final case class b bb b extends nothing b final case class b aa bb b extends b ie data encoding inclusive logical b b typeclass trait align f extends functor f def alignwith b c f b c f f b f c def align b f b f b f b def merge semigroup f f f def pad b f f b f option option b def padwith b c f option option b c f f b f c alignwith take function either b c return lifted function tuple f f b f c align construct two f merge allows u combine two f semigroup example implementation semigroup map k v defers semigroup v combining two entry result combining value consequence map k list behaves like multimap scala map foo list merge map foo list bar list re map foo list bar list map k int simply tally content merging scala map foo merge map foo bar re map foo bar pad padwith partially merging two data structure might missing value one side example wanted aggregate independent vote retain knowledge vote came scala map foo pad map foo bar re map foo bar none scala map foo bar pad map foo re map foo bar none convenient variant align make use structure def alignswap b f b f b f b def aligna b f b f b f option def alignb b f b f b f option b def alignthis b f b f b f option def alignthat b f b f b f option b def alignboth b f b f b f option b make sense type signature example scala list alignswap list re list scala list aligna list re list scala list alignb list re list none scala list alignthis list re list none none scala list alignthat list re list none none none scala list alignboth list re list none note b variant use inclusive whereas variant exclusive returning none value side value either side variance must return functor moment discus ancestor previously ignored invariantfunctor also known exponential functor method xmap say given function b function b convert f f b functor short name covariant functor since functor popular get nickname likewise contravariant really contravariant functor functor implement xmap map ignores function b contravariant hand implement xmap contramap ignores function b typeclass trait invariantfunctor f def xmap b fa f f b g b f b typeclass trait functor f extends invariantfunctor f def map b fa f f b f b def xmap b fa f f b g b f b map fa f typeclass trait contravariant f extends invariantfunctor f def contramap b fa f f b f b def xmap b fa f f b g b f b contramap fa g important note although related theoretical level word covariant contravariant invariant directly refer scala type variance ie prefix may written type signature invariance mean possible map content structure f f b using identity see safely downcast upcast b depending variance functor map may understand contract give f way turn b give f likewise contramap read give f way turn b give f consider example application introduce domain specific type alpha beta gamma etc ensure mix number financial calculation final case class alpha value double faced problem typeclasses new type use value json document write instance jsencoder jsdecoder however jsencoder contravariant jsdecoder functor derive instance filling contract give jsdecoder double way go double alpha give jsdecoder give jsencoder double way go alpha double give jsencoder object alpha implicit val decoder jsdecoder alpha jsdecoder double map alpha implicit val encoder jsencoder alpha jsencoder double contramap value method typeclass type parameter contravariant position method parameter covariant position return type typeclass combination covariant contravariant position might invariant functor example semigroup monoid invariantfunctor functor contravariant apply bind consider warmup act applicative monad apply apply extends functor adding method named ap similar map applies function value however ap function context value typeclass trait apply f extends functor f op def ap b fa f f f b f b advanced tie fighter flown darth vader appropriate since look like angry parent sad pikachu worth taking moment consider mean simple data structure like option following implementation ap implicit def option apply option new apply option override def ap b fa option f option b f match case ff famap ff case none none implement ap must first extract function ff b f option b map fa extraction function context important power apply brings allowing multiple function combined inside context returning apply find applyx boilerplate allows u combine parallel function map combined output typeclass trait apply f extends functor f def b c fa f fb f b f b c f c def b c fa f fb f b fc f c f b c f def read contract promising give f f b way combining b c give f many us contract two important constructing typeclasses product type c constituent b performing effect parallel like drone google algebra created chapter combining result indeed apply useful special syntax implicit class applyops f apply self f def b fb f b f b apply f self fb b b def b fb f b f apply f self fb def b fb f b applicativebuilder f b class applicativebuilder f apply b f b f b def tupled f b apply f b def c cc f c c sealed abstract class c c f c exactly used chapter dgetbacklog dgetagents mgetmanaged mgetalive mgettime operator many name call cartesian product syntax others call cinnamon bun admiral ackbar macaulay culkin prefer call scream operator munch painting also sound cpu make parallelising thing syntax left bird right bird offer convenient way ignore output one two parallel effect unfortunately although syntax clear problem new applicativebuilder object allocated additional effect work iobound memory allocation cost insignificant however performing cpubound work use alternative lifting arity syntax produce intermediate object def f apply b c fa f fb f b f b c f c def f apply b c fa f fb f b fc f c f b c f def f apply used like dgetbacklog dgetagents mgetmanaged mgetalive mgettime directly call applyx apply f dgetbacklog dgetagents mgetmanaged mgetalive mgettime despite commonly used effect apply work well data structure consider rewriting foo datafoo option string bar databar option int yield foo barshows datafoo databar show want combined output tuple method exist op tuple def b fa f fb f b f b def b c fa f fb f b fc f c f b c def datafoo tuple databar option string int also generalised version ap two parameter def b c fa f fb f b f f b c f c def b c fa f fb f b fc f c f f b c f def along lift method take normal function lift f context generalisation functorlift def b c f b c f f b f c def b c f b c f f b f c f def apf partially applied syntax ap def apf b f f b f f b finally forever def forever b fa f f b repeating effect without stopping instance apply must stack safe get stackoverflowerror bind bind introduces bind synonymous flatmap allows function result effect return new effect function value data structure return new data structure joined typeclass trait bind f extends apply f op def bind b fa f f f b f b def flatmap b fa f f f b f b bind fa f override def ap b fa f f f b f b bind f x map fa x override def b c fa f fb f b f b c f c bind fa map fb b f b def join ffa f f f bind ffa identity def mproduct b fa f f f b f b def ifm b value f boolean f b f f b f b join may familiar user flatten stdlib take nested context squash one derived combinators introduced ap require consistency bind see later law consequence parallelisation strategy mproduct like functorfproduct pair input output inside f ifm way construct conditional data structure effect scala list true false true ifm list list re list int list ifm ap optimised cache reuse code branch compare longer form scala list true false true flatmap b b list else list produce fresh list list every time branch invoked kind optimisation possible fp method deterministic also known referentially transparent method return different value every time called impure break reasoning optimisation otherwise make f effect perhaps one drone google algebra mean output call algebra cached rather reference operation cached performance optimisation ifm noticeable data structure pronounced difficulty work branch explore concept determinism value caching detail next chapter bind also special syntax implicit class bindops f bind self f def b b f b f b bind f bind self b def b f f b f bind f bind self f map wish discard input bind want run effect discard output applicative monad functionality point view applicative apply pure method monad extends applicative bind typeclass trait applicative f extends apply f def point f def pure f point typeclass trait monad f extends applicative f bind f many way applicative monad culmination everything seen chapter pure point commonly known data structure allows u create effect data structure value instance applicative must meet law effectively asserting method consistent identity fa pure identity fa fa f ie applying pure identity nothing homomorphism pure pure ab pure ab ab b ie applying pure function pure value applying function value using pure result interchange pure fab fab pure f f fab f b ie pure left right identity mappy map fa f fa pure f monad add additional law left identity pure bind f f right identity abind pure associativity fabind f bind g fabind f bind g fa f f f b g b f c associativity say chained bind call must agree nested bind however mean rearrange order would commutativity example recalling flatmap alias bind rearrange machinestart machinestop yield true machinestop machinestart yield true start stop noncommutative intended effect starting stopping node different stopping starting start commutative stop commutative rewrite machinestart machinestart yield true machinestart machinestart yield true equivalent algebra general making lot assumption google container api reasonable choice make practical consequence monad must commutative applyx method allowed run parallel cheated chapter ran effect parallel dgetbacklog dgetagents mgetmanaged mgetalive mgettime know commutative among come interpreting application later book provide evidence effect fact commutative asynchronous implementation may choose sequence operation safe side subtlety deal ordering effect effect deserves dedicated chapter advanced monad divide conquer divide contravariant analogue apply typeclass trait divide f extends contravariant f def divide b c fa f fb f b f c b f c fa fb f def z f f z f z def b c fa f fb f b f c b f c def divide say break c b given f f b get f c hence divide conquer great way generate contravariant typeclass instance product type breaking product part scalaz instance divide equal construct equal new product type foo scala case class foo string int scala implicit val fooequal equal foo divide equal equal string equal int foo foo foos fooi scala foo foo foo bar re boolean false mirroring apply divide also terse syntax tuples softer divide may reign approach world domination def f f f def generally encoder typeclasses provide instance divide rather stopping contravariant make possible derive instance case class similarly decoder typeclasses provide apply instance explore dedicated chapter typeclass derivation divisible contravariant analogue applicative introduces conquer equivalent pure typeclass trait divisible f extends divide f def conquer f conquer allows creating trivial implementation type parameter ignored value called universally quantified example divisible equal conquer inil string return implementation equal empty list string always true plus plus semigroup type constructor plusempty equivalent monoid even law whereas isempty novel allows u query f empty typeclass trait plus f op def plus f b f f typeclass trait plusempty f extends plus f def empty f typeclass trait isempty f extends plusempty f def isempty fa f boolean tie interceptor almost tie although may look surface behaves like scala list list re list scala list list re list best think operating f level never looking content plus convention ignore failure first therefore used mechanism early exit losing information failurehandling via fallback scala option option re scala option option re scala optionempty int option re example nonemptylist option int want ignore none value failure pick first winner call scala nonemptylist none none none re option int fact know plus realise need break typeclass coherence defined locally scoped monoid option section appendable thing objective last argument swapped note use tie interceptor ccy otc argument swapped implicit val monoid monoid tradetemplate monoidinstance b tradetemplate apayments bpayments bccy accy botc aotc tradetemplate nil none none applicative monad specialised version plusempty typeclass trait applicativeplus f extends applicative f plusempty f typeclass trait monadplus f extends monad f applicativeplus f def unite foldable t f f def withfilter fa f f boolean f unite let u fold data structure using outer plusempty f monoid rather inner monoid list either string int mean left string value converted empty everything concatenated convenient way discard error scala list right left boo right unite re list int list scala val boo either string int left boo boofoldmap apure list re list string list scala val n either string int right nfoldmap apure list re list int list withfilter allows u make use comprehension language support discussed chapter fair say scala language builtin language support monadplus monad returning foldable moment reveal method discus earlier typeclass trait foldable f def msuml g plusempty fa f g g def collapse x applicativeplus x f x msuml fold using monoid plusempty g collapse foldright using plusempty target type scala ilist option optionempty int option fold re option int us monoid option int scala ilist option optionempty int option msuml re option int us plusempty option monoid scala ilist collapse option re option int lone wolf typeclasses scalaz standalone part larger hierarchy zippy typeclass trait zip f def zip b f b f b f b def zipwith b c fa f fb f b f b c implicit f functor f f c def ap implicit f functor f apply f op def apzip b f f f b f f b core method zip le powerful version functor f provided zipwith behave like indeed apply f created zip f functor f calling ap apzip take f lifted function f f b producing f b similar functorfproduct typeclass trait unzip f op unfzip def unzip b f b f f b def first b f b f def second b f b f b def b c x f b c f f b f c def h x f b h core method unzip first second allowing selecting either first second element tuple f importantly unzip opposite zip method repeated application unzip save boilerplate example handed bunch nested tuples unzip id handy way flatten scala unzip id re nutshell zip unzip le powerful version divide apply providing useful feature without requiring f make many promise optional optional generalisation data structure optionally contain value like option either recall disjunction improvement scalaeither also see maybe improvement scalaoption sealed abstract class maybe final case class empty extends maybe final case class extends maybe typeclass trait optional f def pextract b fa f f b def getorelse fa f default def orelse fa f alt f f def isdefined fa f boolean def nonempty fa f boolean def isempty fa f boolean def tooption fa f option def tomaybe fa f maybe method familiar except perhaps pextract way letting f return implementation specific f b value example optional option pextract return option nothing ie none scalaz give ternary operator thing optional implicit class optionalops f optional fa f def x x conditional x new conditional x final class conditional x x def none x x optional f isdefined fa else none example scala val knockknock option string knockknock tumbleweed cothings cothing typically opposite type signature whatever thing necessarily inverse highlight relationship thing cothing include type signature thing wherever cobind typeclass trait cobind f extends functor f def cobind b fa f f f b f b def bind b fa f f f b f b def cojoin fa f f f def join ffa f f f cobind also known coflatmap take f b act f rather element necessarily full fa substructure created coflatten compelling usecases cobind rare although shown functor permutation table f b difficult argue method le important others method parameter map b contramap b xmap b b ap f b bind f b cobind f b comonad typeclass trait comonad f extends cobind f def copoint p f def point f copoint also copure unwraps element context id type alias encountered chapter instance comonad reach id extract value contains similarly name comonad value effectively value strategy another example comonad nonemptylist copoint return head element cobind operates tail list effect typically instance comonad since would break referential transparency interpret io comonad allows navigation element data structure eventually returning one view data consider neighbourhood hood short list containing element left left element focus element right right final case class hood left ilist focus right ilist left right ordered nearest focus head recover original ilist via toilist object hood implicit class ops hood hood def toilist ilist hoodleftsreverse hoodfocus hoodrights write method let u move focus one left previous one right next def previous maybe hood hoodlefts match case inil empty case icon head tail hood tail head hoodfocus hoodrights def next maybe hood hoodrights match case inil empty case icon head tail hood hoodfocus hoodlefts head tail repeatedly applies optional function hood calculate view hood take list def f hood maybe hood ilist hood f hood match case empty inil case r icon r rmore f def position hood hood val left hoodmore previous val right hoodmore next hood left hood right implement comonad hood implicit val comonad comonad hood new comonad hood def map b fa hood f b hood b hood faleftsmap f f fafocus farightsmap f def cobind b fa hood f hood b hood b fapositionsmap f def copoint fa hood fafocus cojoin give u hood hood ilist containing possible neighbourhood initial ilist scala val middle hood ilist ilist scala middlecojoin re hood hood hood hood hood hood hood hood hood hood indeed cojoin position override direct performant implementation override def cojoin fa hood hood hood fapositions comonad generalises concept hood arbitrary data structure hood example zipper unrelated zip scalaz come zipper data type stream ie infinite data structure discus next chapter one application zipper cellular automaton compute value cell next generation performing computation based neighbourhood cell cozip typeclass trait cozip f def cozip b x f b f f b def zip b f b f b f b def unzip b f b f f b def b c x f b c f f b f c def h x f h f f h although named cozip perhaps appropriate talk symmetry unzip whereas unzip split f tuples product tuples f cozip split f disjunction coproducts disjunction f bithings sometimes may find thing two type hole want map side example might tracking failure left either want something failure message functor foldable traverse typeclasses bizarro relative allow u map way typeclass trait bifunctor f def bimap b c fab f b f c g b f c op def leftmap b c fab f b f c f c b op def rightmap b fab f b g b f op def umap b faa f f b f b b typeclass trait bifoldable f def bifoldmap b monoid fa f b f g b def bifoldright b c fa f b z c f c c g b c c c def bifoldleft b c fa f b z c f c c g c b c c def b semigroup fa f b f g b option typeclass trait bitraverse f extends bifunctor f bifoldable f def bitraverse g applicative b c fab f b f g c g b g g f c def bisequence g applicative b x f g g b g f b although type signature verbose nothing core method functor foldable bitraverse taking two function instead one often requiring function return type result combined monoid semigroup scala val either string int left fail val b either string int right scala bbimap touppercase re either string int right scala abimap touppercase re either string int left fail scala b re either string int right scala re either string int left fail scala string slength re either int int left scala abifoldmap length identity re int scala bbitraverse future slength future re future either int int future completed addition revisit monadplus recall monad ability filterwith unite see separate bifoldable content monad typeclass trait monadplus f def separate g bifoldable b value f g b f f b useful collection bithings want reorganise collection collection b scala val list list either int string list right hello left left right world scala listseparate re list int list string list list hello world summary lot material explored standard library polymorphic functionality put perspective trait scala stdlib collection api typeclasses scalaz normal fp application touch small percentage typeclass hierarchy functionality coming domainspecific algebra typeclasses even domainspecific typeclasses specialised clone something scalaz ok refactor later help included cheatsheet typeclasses primary method appendix inspired adam scalaz cheatsheet help valentin kasas explains combine n thing scalaz data type love good data structure answer nobody data structure awesome chapter explore collectionlike data type scalaz well data type augment scala language useful semantics additional type safety primary reason care lot collection disposal performance vector list thing performance characteristic different vector constant lookup cost whereas list must traversed performance estimate including claim chapter taken pinch salt modern processor design memory pipelining jvm garbage collection invalidate intuitive reasoning based operation counting hard truth modern computer empirical performance test specific task shock surprise eg lookup list often faster practice vector use tool jmh performance testing collection presented persistent add remove element still use old version structural sharing essential performance persistent data structure otherwise entire collection rebuilt every operation unlike java scala collection hierarchy data type scalaz collection much simpler understand polymorphic functionality provided optimised instance typeclasses studied previous chapter make lot easier swap implementation performance reason provide type variance many data type invariant type parameter example ilist subtype ilist b b covariance problem covariant type parameter class list list subtype list easy accidentally lose type information scala list hello list list world re list list hello world note second list list char compiler unhelpfully inferred least upper bound lub compare ilist requires explicit widen permit heinous crime scala ilist hello ilist ilist world console error type mismatch found char required string scala ilist hello widen ilist widen ilist world widen re ilist hello world similarly compiler infers type product serializable strong indicator accidental widening occurred due covariance unfortunately must careful constructing invariant data type lub calculation performed parameter scala ilist hello world re ilist hello world another similar problem arises nothing type subtype type including sealed adts final class primitive null value type nothing function take nothing parameter run function return nothing never return nothing introduced mechanism enable covariant type parameter consequence write unrunnable code accident scalaz say need covariant type parameter mean limiting writing practical code run contrarivariance hand contravariant type parameter trait thing expose devastating bug compiler consider paul exscalac team demonstration call contrarivariance scala paste trait thing def f x thing seq int byte def f x thing list int short scala f new thing seq int f new thing list int re re expected compiler finding specific argument call f however implicit resolution give unexpected result scala paste implicit val thing seq int new thing seq int override def tostring implicit val thing list int new thing list int override def tostring scala implicitly thing seq int implicitly thing list int re re implicit resolution flip definition contravariant type rendering useless typeclasses anything requires polymorphic functionality behaviour fixed dotty limitation subtyping scalaoption method flatten convert option option b option b however type system unable let u write required type signature consider following appears correct subtle bug sealed abstract class option def flatten b option b option b introduced flatten shadowing introduced class equivalent writing sealed abstract class option def flatten b c option b option b constraint want workaround limitation scala defines infix class along implicit evidence always creates witness sealed abstract class extends implicit def conforms new def apply x x sealed abstract class extends implicit def tpequals new def apply x x used require two type parameter exactly used describe subtype relationship letting u implement flatten sealed abstract class option def flatten b implicit ev option b option b match case none none case value ev value final case class value extends option case object none extends option nothing scalaz improves liskov aliased leibniz sealed abstract class liskov b def apply b def subst f p f b f def andthen c liskov b c liskov c def onf x fa x x b object liskov type b liskov b type b liskov b implicit def refl implicit def isa b b implicit def witness b lt b b type signature simplified sealed abstract class leibniz b def apply b def subst f p f f b def flip leibniz b def andthen c leibniz b c leibniz c def onf x fa x x b object leibniz type b leibniz b implicit def refl leibniz implicit def subst b implicit f b b implicit def witness b f b b generally useful method implicit conversion scalaz evidence principled stdlib liskov named barbara liskov liskov substitution principle fame foundation object oriented programming gottfried wilhelm leibniz basically invented everything century believed god called monad eugenio moggi later reused name know scalazmonad god mere mortal evaluation java strict evaluation language parameter method must evaluated value method called scala introduces notion byname parameter method syntax parameter wrapped zero argument function called every time referenced seen byname lot typeclasses scala also byneed evaluation value lazy keyword computation evaluated produce value unfortunately scala support byneed evaluation method parameter calculation lazy val throw exception retried every time accessed exception break referential transparency limit discussion lazy val calculation throw exception scalaz formalises three evaluation strategy adt sealed abstract class name def value object name def apply new name def value sealed abstract class need extends name object need def apply need new need private lazy val def value final case class value value extends need weakest form evaluation name giving computational guarantee next need guaranteeing evaluation whereas value precomputed therefore exactly evaluation wanted superpedantic could go back typeclasses make method take name need value parameter instead assume normal parameter always wrapped value byname parameter wrapped name write pure program free replace name need value vice versa change correctness program essence referential transparency ability replace computation value value computation functional programming almost always want value need also known strict lazy little value name language level support lazy method parameter method typically ask byname parameter convert need internally getting boost performance lazy capital l often used core scala library data type byname semantics misnomer stuck generally pretty lazy talk laziness good seek clarification kind laziness discussed lazy name provides instance following typeclasses monad comonad align zip unzip cozip byname lazy free lunch appear scala convert byname parameter lazy val bytecode object allocation overhead rewriting everything use byname parameter ensure cost overhead eclipse saving benefit unless possibility evaluating high performance code run tight loop always evaluates suffer memoisation scalaz capability memoise function formalised memo make guarantee evaluation diversity implementation sealed abstract class memo k v def apply z k v k v object memo def memo k v f k v k v memo k v def nilmemo k v memo k v memo k v identity def arraymemo v null classtag n int memo int v def doublearraymemo n int sentinel double memo int double def immutablehashmapmemo k v memo k v def immutabletreemapmemo k scalaordering v memo k v memo allows u create custom implementation memo nilmemo memoise evaluating function normally remaining implementation intercept call function cache result backed stdlib collection implementation use memo simply wrap function memo implementation call memoised function scala def foo n int string println running n wibble else wobble scala val mem memoarraymemo string val mfoo mem foo scala mfoo running evaluated re string wobble scala mfoo re string wobble memoised function take one parameter must tupled method memoised version taking tuple scala def bar n int int string hello val mem memoimmutablehashmapmemo int int string val mbar mem bar tupled scala mbar re string hello memo typically treated special construct usual rule purity relaxed implementation pure requires implementation memo referential transparent evaluation k v may use mutable data perform io implementation memo eg lru distributed cache without declare effect type signature functional programming language automatic memoisation managed runtime environment memo way extending jvm similar support unfortunately optin basis tagging section introducing monoid built monoid tradetemplate realised scalaz wanted monoid option oversight scalaz often find data type implement fundamental typeclass multiple valid way default implementation want simply defined basic example monoid boolean conjunction v disjunction monoid int multiplication v addition implement monoid tradetemplate found either breaking typeclass coherency using different typeclass scalaztag designed address multiple typeclass implementation problem without breaking typeclass coherency definition quite contorted syntax use clean trick compiler allowing u define infix type erased runtime type tagk object tag inline val k tagkind idtagkind inline def apply k final class tagof private tag def tagof new tagof sealed abstract class tagkind type def apply private scalaz object idtagkind extends tagkind type inline override def apply useful tag provided tag object object tag sealed trait first val first tagof first sealed trait last val last tagof last sealed trait multiplication val multiplication tagof multiplication sealed trait disjunction val disjunction tagof disjunction sealed trait conjunction val conjunction tagof conjunction first last used select monoid instance pick first last nonzero operand multiplication numeric multiplication instead addition disjunction conjunction select respectively tradetemplate instead using option currency use option currency tagslast indeed common use builtin alias lastoption type lastoption option tagslast letting u write much cleaner monoid tradetemplate final case class tradetemplate payment list javatimelocaldate ccy lastoption currency otc lastoption boolean object tradetemplate implicit val monoid monoid tradetemplate monoidinstance b tradetemplate apayments bpayments accy bccy aotc botc tradetemplate nil tag none tag none create raw value type lastoption apply tag option calling tag none chapter typeclass derivation go one step automatically derive monoid tempting use tag markup data type form validation eg string personname avoided check content runtime value tag used typeclass selection purpose prefer refined library introduced chapter constrain value natural transformation function one type another written b scala syntax sugar b scalaz provides similar syntax sugar f g function type constructor f g f g called natural transformation universally quantified care content f type f g naturaltransformation f g trait naturaltransformation f g def apply fa f g def compose e f e f e g def andthen h f g h f h example natural transformation function convert ilist list scala val convert new ilist list def apply fa ilist list fatolist scala convert ilist re list int list concisely making use syntax sugar scala val convert î ilist list tolist scala val convert lambda ilist list tolist however daytoday development far likely use natural transformation map algebra example dronedynamicagents may want implement google container engine machine algebra offtheshelf algebra bigmachines instead changing business logic test use new bigmachines interface may able write transformation machine bigmachines return idea chapter advanced monad isomorphism sometimes two type really thing causing compatibility problem compiler know know typically happens use third party code something already isomorphism help u isomorphism defines formal equivalent relationship two type three variant account type different shape object isomorphism trait iso arr b def arr b def arr b type isoset b iso b type b isoset b object isoset def apply b b b b trait arr f g def arr f g def arr g f type isofunctor f g naturaltransformation f g type f g isofunctor f g object isofunctor def apply f g f g g f f g trait arr f g def arr f g def arr g f type isobifunctor f g f g type f g isobifunctor f g type alias isoset isofunctor isobifunctor cover common case regular function natural transformation binatural convenience function allow u generate instance existing function natural transformation however often easier use one abstract template class define isomorphism example val listilistiso list ilist new isofunctortemplate list ilist def fa list fromlist fa def fa ilist fatolist introduce isomorphism generate many standard typeclasses example trait isomorphismsemigroup f g extends semigroup f implicit def g semigroup g def iso f g def append f f f isofrom gappend isoto isoto allows u derive semigroup f type f f g semigroup g almost typeclasses hierarchy provide isomorphic variant find copying pasting typeclass implementation worth considering isomorphism better solution container maybe already encountered improvement scalaoption called maybe improvement invariant unsafe method like optionget throw exception typically used represent thing may present without giving extra context may missing sealed abstract class maybe object maybe final case class empty extends maybe final case class extends maybe def empty maybe empty def maybe def fromoption oa option maybe def fromnullable maybe null empty else empty companion method preferred creating raw empty instance return maybe helping type inference pattern often referred returning sum type multiple implementation sealed trait never use specific subtype method signature convenient implicit class allows u call value receive maybe implicit class maybeops self def maybe maybejust self maybe typeclass instance thing align traverse monadplus isempty cobind cozip zip unzip optional delegate instance depending monoid band equal order show addition maybe functionality supported polymorphic typeclass sealed abstract class maybe def cata b f b b b b match case f case empty b def cata identity def toleft b b b b cata left b def toright b b b b cata right b def b b b b toleft b def b b b b toright b def orzero implicit monoid getorelse azero def orempty f applicative plusempty f cata applicative f point plusempty f empty cata terser alternative map f getorelse b simpler form map identity ie getorelse toleft toright symbolic alias create disjunction explained next section taking fallback empty case orzero take monoid define default value orempty us applicativeplus create single element empty container forgetting already get support stdlib collection foldable method scala re int scala maybeempty int orzero re int scala maybeempty int orempty ilist re ilist int scala ilist re ilist int scala list foldable re list int list method defined oop style maybe contrary chapter lesson use object implicit class common theme scalaz reason largely historical text editor failed find extension method work seamlessly intellij ensime scalaide corner case compiler would fail infer type able find extension method stdlib defines implicit class instance add method value conflicting method name prominent example turning everything concatenated string true functionality provided typeclass instance method otherwise provided optional sealed abstract class maybe def getorelse however recent version scala addressed many bug le likely encounter problem either improvement scalaeither symbolic common speak either disjunction sealed abstract class b final case class extends nothing final case class b b b extends nothing b type disjunction b b object def left b b def right b b b def fromeither b e either b b corresponding syntax implicit class eitherops val self final def left b b self final def right b b self allowing easy construction value note extension method take type side wish create string int int must pas string calling right scala string re string int scala hello left int re string int hello symbolic nature make read well type signature shown infix note symbolic type scala associate left nested must parenthesis eg b c rightbiased ie flatmap applies typeclass instance monad monaderror traverse bitraverse plus optional cozip depending content equal order semigroup monoid band addition custom method sealed abstract class b self def fold x l x r b x x self match case l case b r b def swap b self match case case b b def bb b x bb bb getorelse x optional def c bb b x c bb c bb orelse x optional def aa semigroup bb b semigroup x aa bb aa bb def toeither either b final class switchingdisjunction x right x def left x x def x right x new switchingdisjunction x right fold similar maybecata requires left right side mapped type swap swap left right right left alias getorelse appears similarly maybe also get alias orelse combining disjunction left taking preference right right right give right right left give left left right give left left left give left toeither provided backwards compatibility scala stdlib combination allow convenient syntax ignore content pick default based type scala foo re int foo scala fooswap re int validation first sight validation aliased happy elvis appears clone disjunction sealed abstract class validation e final case class success extends validation nothing final case class failure e e e extends validation e nothing type validationnel e x validation nonemptylist e x object validation type e validation e def success e validation e success def failure e e validation e failure def failurenel e e e validationnel e failure nonemptylist e def lift e f boolean fail e validation e def liftnel e f boolean fail e validationnel e def fromeither e e either e validation e convenient syntax implicit class validationops self def success x validation x validationsuccess x self def successnel x validationnel x success def failure x validation x validationfailure x self def failurenel x validationnel x validationfailurenel x self however data structure complete story validation intentionally instance monad restricting successbiased version applicative traverse bitraverse cozip plus optional depending content equal order show semigroup monoid big advantage restricting applicative validation explicitly situation wish report failure whereas disjunction used stop first failure accommodate failure accumulation popular form validation validationnel nonemptylist e failure position consider performing input validation data provided user using disjunction flatmap scala paste final case class credential user username name fullname final case class username value string extends anyval final case class fullname value string extends anyval def username string string username inisempty empty username left else incontains username contains space left else username right def realname string string fullname inisempty empty real name left else fullname right scala u username sam halliday r realname yield credential u r re username contains space use syntax scala username sam halliday realname credentialsapply re username contains space still get back first failure disjunction monad applyx method must consistent flatmap assume operation performed order compare scala paste def username string validationnel string username inisempty empty username failurenel else incontains username contains space failurenel else username success def realname string validationnel string fullname inisempty empty real name failurenel else fullname success scala username sam halliday realname credentialsapply re failure nonempty username contains space empty real name time get back failure validation many method disjunction fold swap plus extra sealed abstract class validation e def append f e semigroup b semigroup x f b f b def disjunction e append aliased type signature prefers success case failure failure give failure failure success give success success failure give success success success give success disjunction convert validated b b disjunction mirror validation validationnel convert validation allowing easy conversion sequential parallel failure accumulation validation performant fp equivalent checked exception input validation avoiding stacktrace requiring caller deal failure resulting robust system one slowest thing jvm create exception due resource required construct stacktrace traditional use exception input validation parsing thousand time slower equivalent function written validation people claim predictable exception input validation referentially transparent occur every time however stacktrace inside exception depends call chain giving different value depending call thus breaking referential transparency regardless throwing exception pure mean function total encountered data encoding inclusive logical learnt align sealed abstract class b object type b b final case class aa extends nothing final case class b bb b extends nothing b final case class b aa bb b extends b def apply b b b b b convenient construction syntax implicit class theseops self final def wrapthis b b self final def wrapthat b b self implicit class thesepairops b self b final def b typeclass instance monad bitraverse traverse cobind depending content semigroup monoid band equal order show many method come expect disjunction validation sealed abstract class b def fold x x b x q b x x def swap b def append x semigroup b semigroup x x def x semigroup c x c x b c append possible arrangement data never thrown away case always converted flatmap rightbiased taking semigroup left content combine rather break early convenient way binding two creating tuple right dropping data present although tempting use return type overuse antipattern main reason use combine split potentially infinite stream data finite memory convenient function exist companion deal ephemeralstream aliased fit single line anything monadplus type estream ephemeralstream object def concatthisstream b x estream b estream def concatthis f monadplus b x f b f def concatthatstream b x estream b estream b def concatthat f monadplus b x f b f b def unalignstream b x estream b estream estream b def unalign f monadplus b x f b f f b def merge semigroup higher kinded either coproduct data type confused general concept coproduct adt wrap disjunction type constructor final case class coproduct f g run f g object coproduct def leftc f g x f coproduct f g coproduct x def rightc f g x g coproduct f g coproduct x typeclass instance simply delegate f g popular use case coproduct want create anonymous coproduct multiple adts eager builtin scala tuples basic data type like maybe disjunction eagerlyevaluated value type convenience byname alternative name provided expected typeclass instance sealed abstract class b def def b sealed abstract class b c def def b def c def sealed abstract class lazyoption private final case class lazysome extends lazyoption private case object lazynone extends lazyoption nothing sealed abstract class lazyeither b private case class lazyleft b extends lazyeither b private case class lazyright b b b extends lazyeither b astute reader note lazy misnomer data type perhaps bynametuplex bynameoption bynameeither const const constant wrapper value type along spare type parameter b final case class const b getconst const provides instance applicative const monoid available implicit def applicative monoid applicative const new applicative const def point b b b const b const monoid zero def ap b c fa const b fbc const b c const c const fbcgetconst fagetconst important thing applicative ignores b parameter continuing without failing combining constant value encounter going back example application dronedynamicagents first refactor logicscala file use applicative instead monad wrote logicscala learnt applicative know better final class dynagentsmodule f applicative drone f machine f extends dynagents f def act world worldview f worldview world match case needsagent node mstart node worldcopy pending map node worldtime case stale node nodestraverse node mstop node node map stopped val update stoppedstrengthr worldtime tolisttomap worldcopy pending worldpending update case worldpure f since business logic requires applicative write mock implementation f const string case return name function called object constimpl type f const string private val new drone f def getbacklog f int const backlog def getagents f int const agent private val new machine f def getalive f map machinenode epoch const alive def getmanaged f nonemptylist machinenode const managed def gettime f epoch const time def start node machinenode f unit const start def stop node machinenode f unit const stop val program new dynagentsmodule f interpretation program assert method called call expected method import constimpl val alive map val world worldview managed alive mapempty programact world getconst shouldbe stopstop alternatively could counted total method call using const int imap string int test gone beyond traditional mock testing const test asserts called without provide implementation useful specification demand make certain call certain input eg accounting purpose furthermore achieved compiletime safety taking line thinking little say want monitor production node stopping act create implementation drone machine const calling wrapped version act final class monitored u functor program dynagents u type f const set machinenode private val new drone f def getbacklog f int const setempty def getagents f int const setempty private val new machine f def getalive f map machinenode epoch const setempty def getmanaged f nonemptylist machinenode const setempty def gettime f epoch const setempty def start node machinenode f unit const setempty def stop node machinenode f unit const set node val monitor new dynagentsmodule f def act world worldview u worldview set machinenode val stopped monitoract world getconst programact world strengthr stopped monitor pure running produce side effect run program constimpl extracting call machinesstop returning alongside worldview unit test monitor stopped node val underlying new mutable needsagents program val alive map val world worldview managed alive mapempty val expected worldcopy pending map val monitored new monitored underlying monitoredact world shouldbe expected set used const something look like aspect oriented programming popular java built top business logic support monitoring concern without complicate business logic get even better run constimpl production gather want stop provide optimised implementation act make use implementationspecific batched call silent hero story applicative const let u show possible need change program require monad longer use const must write full mock able assert called certain input rule least power demand use applicative instead monad wherever collection unlike stdlib collection api scalaz approach describes collection behaviour typeclass hierarchy eg foldable traverse monoid remains studied implementation term data structure different performance characteristic niche method section go implementation detail data type essential remember everything presented goal gain high level understanding data structure work collection data type provide le list typeclass instance shall avoid repeating list often variation monoid traverse foldable monadplus isempty cobind comonad zip unzip align equal order show data structure provably nonempty able provide provide semigroup instead monoid plus instead isempty list used ilist nonemptylist many time familiar codify classic linked list data structure sealed abstract class ilist def ilist def ilist ilist def tolist list def tonel option nonemptylist final case class inil extends ilist final case class icon head tail ilist extends ilist final case class nonemptylist head tail ilist def b nonemptylist nel b head tail def b ilist nonemptylist source code scalaz reveals inil implemented sealed abstract case class inil private extends ilist object inil private val value inil nothing new inil nothing def apply ilist valueasinstanceof ilist exploit jvm implementation detail avoid object allocation creating inil optimisation manually applied zeroparameter class indeed scalaz full many optimisation nature debated accepted presented evidence significant performance boost risk semantic change main advantage ilist stdlib list unsafe method like head throw exception empty list addition ilist lot simpler hierarchy much smaller bytecode footprint furthermore stdlib list terrifying implementation us var workaround performance problem stdlib collection design package scalacollectionimmutable sealed abstract class list extends abstractseq linearseq generictraversabletemplate list linearseqoptimized list case object nil extends list nothing final case class b override val head b private scala var tl list b extends list b list creation requires careful slow thread synchronisation ensure safe publishing ilist requires hack therefore outperform list nonemptylist icon yes data structure level difference icon part ilist adt whereas nonemptylist outside typeclass instance always provided level adt entry avoid complexity ephemeralstream stdlib stream lazy version list riddled memory leak unsafe method ephemeralstream keep reference computed value helping alleviate memory retention problem removing unsafe method spirit ilist sealed abstract class ephemeralstream def headoption option def tailoption option ephemeralstream private implementation object ephemeralstream extends ephemeralstreaminstances type estream ephemeralstream def emptyephemeralstream estream def con estream estream def unfold b start b f b option b estream def iterate start f estream implicit class conswrap e estream def h estream con h e object def unapply x estream option estream xsisempty none else xshead xstail use word stream data structure nature come legacy stream used marketing department alongside reactive manifesto implementing framework like akka stream con unfold iterate mechanism creating stream convenient syntax put new element head byname estream reference unfold creating finite possibly infinite stream repeatedly applying function f get next value input following f iterate creates infinite stream repeating function f previous element estream may appear pattern match symbol matching syntax con although estream address value memory retention problem still possible suffer slow memory leak live reference point head infinite stream problem nature well need compose effectful stream exists corecursivelist corecursion start base state produce subsequent step deterministically like ephemeralstreamunfold method studied def unfold b b b f b option b estream contrast recursion break data base state terminates corecursivelist data encoding ephemeralstreamunfold offering alternative estream may perform better circumstance sealed abstract class corecursivelist type def init def step maybe object corecursivelist private final case class corecursivelistimpl init step maybe extends corecursivelist type def apply init step maybe corecursivelist corecursivelistimpl init step corecursion useful implementing comonadcojoin like hood example corecursivelist good way codify nonlinear recurrence equation like used biology population model control system macro economics investment banking model immutablearray simple wrapper around mutable stdlib array primitive specialisation sealed abstract class immutablearray def b classtag immutablearray b immutablearray b object immutablearray final class stringarray string extends immutablearray char sealed class array extends immutablearray final class ofref anyref array extends final class oflong array long extends long def fromarray x array immutablearray def fromstring str string immutablearray char array unrivalled term read performance heap size however zero structural sharing creating new array therefore array typically used content expected change way safely wrapping raw data legacy system dequeue dequeue pronounced like card linked list allows item put onto retrieved front con back snoc constant time removing element either end constant time average sealed abstract class dequeue def frontmaybe maybe def backmaybe maybe def dequeue dequeue def dequeue con def dequeue snoc def con dequeue def snoc dequeue def uncons maybe dequeue def unsnoc maybe dequeue private final case class singletondequeue single extends dequeue private final case class fulldequeue front nonemptylist fsize int back nonemptylist backsize int extends dequeue private final case object emptydequeue extends dequeue nothing object dequeue def empty dequeue emptydequeue def apply dequeue def fromfoldable f foldable fa f dequeue way work two list one front data another back consider instance holding symbol fulldequeue nonemptylist ilist nonemptylist ilist visualised note list holding back reverse order reading snoc final element simple lookup backhead adding element end dequeue mean adding new element head back recreating fulldequeue wrapper increase backsize one almost original structure shared compare adding new element end ilist would involve recreating entire structure frontsize backsize used rebalance front back always approximately size rebalancing mean operation slower others eg entire structure must rebuilt happens occasionally take average cost say constant dlist linked list poor performance characteristic large list appended together consider work go evaluating following b c d e f g creates six intermediate list traversing rebuilding every list three time except g shared stage dlist difference list efficient solution scenario instead performing calculation stage represented function ilist ilist final case class dlist f ilist ilist def toilist ilist f ilistempty def dlist dlist dlist x f asf x object dlist def fromilist ilist dlist dlist x x simplified implementation stack overflow bug fix chapter advanced monad equivalent calculation symbol created via dlistfromilist b c e f g toilist break work rightassociative ie fast appends b c d e f g utilising fast constructor ilist always free lunch memory allocation overhead slow code naturally result rightassociative appends largest speedup ilist operation leftassociative eg b c d e f g difference list suffer bad marketing called listbuilderfactory probably standard library iset tree structure excellent storing ordered data every binary node holding element le one branch greater however naive implementation tree structure become unbalanced depending insertion order possible maintain perfectly balanced tree incredibly inefficient every insertion effectively rebuilds entire tree iset implementation tree bounded balance meaning approximately balanced using size branch balance node sealed abstract class iset val size int match case tip case bin l r lsize rsize object iset private final case class tip extends iset private final case class bin l iset r iset extends iset def empty iset tip def singleton x iset bin x tip tip def fromfoldable f foldable order x f iset xsfoldleft empty b insert b iset requires order order instance must remain call internal assumption invalid leading data corruption ie assuming typeclass coherence order unique iset adt unfortunately permit invalid tree strive write adts fully describe valid type restriction sometimes situation achieved inspired touch immortal instead tip bin private stop user accidentally constructing invalid tree insert way build iset therefore defining constitutes valid tree sealed abstract class iset def contains x implicit order boolean def union iset implicit order iset def delete x implicit order iset def insert x implicit order iset match case tip isetsingleton x case self bin l r oorder x match case lt balancel linsert x r case gt balancer l rinsert x case eq self internal method balancel balancer mirror study balancel called value inserting le current node also called delete method def balancel left iset right iset iset left right match balancing requires u classify scenario occur go possible scenario visualising left right left side page balanced structure right also known rotated tree filled circle visualise tip three column visualise left value right field bin diamond visualise iset first scenario trivial case left right tip fact never encounter scenario insert hit delete case tip tip singleton second case left bin containing tip need balance anything create obvious connection case bin lx tip tip tip bin left tip third case start get interesting left bin containing bin right case bin lx tip bin lrx tip bin lrx singleton lx singleton happened two diamond sitting lrx lose information lose information reason based size balancing always tip rule following scenario balancer produce tree shape diamond bin fourth case opposite third case case bin lx tip tip bin lx singleton fifth case full tree side left must use relative size decide rebalance case bin lx lr tip llsize lrsize bin lx bin lr tip case bin lx bin lrx lrl lrr tip bin lrx bin lx lrl bin lrr tip first branch llsize lrsize second branch llsize lrsize sixth scenario introduces tree right left empty create obvious connection scenario never arises insert left always nonempty case tip r bin tip r final scenario nonempty tree side unless left three time size right simple thing create new bin case lsize rsize bin l r however left three time size right must balance based relative size lr like scenario five case bin lx lr r llsize lrsize bin lx bin lr r case bin lx bin lrx lrl lrr r bin lrx bin lx lrl bin lrr r concludes study insert method iset constructed surprise foldable implemented term depthfirst search along left right appropriate method minimum maximum optimal data structure already encodes ordering worth noting typeclass method implemented efficiently would like consider signature foldableelement typeclass trait foldable f def element equal fa f boolean obvious implementation element defer almost binarysearch isetcontains however possible element provides equal whereas contains requires order iset unable provide functor reason practice turn sensible constraint performing map would involve rebuilding entire structure sensible convert datatype ilist perform map convert back consequence possible traverse iset applicative iset imap sealed abstract class b val size int match case tip case bin l r lsize rsize object type imap b b private final case class tip b extends b private final case class bin b key value b left b right b extends b def apply order b x b b def empty b b tip b def singleton b k x b b bin k x tip tip def fromfoldable f foldable order b fa f b b familiar indeed imap alias lightspeed operator another sizebalanced tree extra value b field binary branch allowing store keyvalue pair key type need order suite convenient method provided allow easy entry updating sealed abstract class b def adjust k f b b implicit order b def adjustwithkey k f b b implicit order b stricttree tree stricttree tree implementation rose tree tree structure unbounded number branch every node unfortunately built standard library collection legacy reason case class stricttree rootlabel subforest vector stricttree tree byneed version stricttree convenient constructor class tree rootc need forestc need stream tree def rootlabel rootcvalue def subforest forestcvalue object tree object node def apply root forest stream tree tree object leaf def apply root tree user rose tree expected manually balance make suitable case useful encode domain knowledge hierarchy data structure example artificial intelligence rose tree used clustering algorithm organise data hierarchy increasingly similar thing possible represent xml document rose tree working hierarchical data consider using rose tree instead rolling custom data structure fingertree finger tree generalised sequence amortised constant cost lookup logarithmic concatenation type data ignore v sealed abstract class fingertree v def fingertree v def fingertree v def right fingertree v fingertree v object fingertree private class empty v extends fingertree v private class single v v v extends fingertree v private class deep v v v left finger v spine fingertree v node v right finger v extends fingertree v sealed abstract class finger v final case class one v v v extends finger v final case class two v v v extends finger v final case class three v v v extends finger v final case class four v v v extends finger v sealed abstract class node v private class v v v extends node v private class v v v extends node v tie bomber admittedly sending proton torpedo bit overreaction thing regular monoid tie fighter visualising fingertree dot finger box node box within box adding element front fingertree efficient deep simply add new element left finger finger four rebuild spine take element adding end reverse appending also efficient adding one element time case two deep tree retain outer branch rebuilding spine based possible combination two finger value middle skipped v shown adt description implicit measurer reducer v every element adt storing typeclass instance adt considered bad style also increase memory requirement bit every entry implementation fingertree almost decade old due rewrite reducer extension monoid allows single element added class reducer c monoid def unit c c def snoc c c append unit c def con c c append unit c example reducer ilist provide efficient con implicit def reducer reducer ilist new reducer ilist override def unit ilist ilistsingle override def con ilist ilist reducer called canactuallybuildfrom honour similarly named stdlib class since effectively collection builder indseq use int v get indexed sequence measure size allowing u perform indexbased lookup comparing desired index size branch structure final class indseq val self fingertree int object indseq private implicit def sizer reducer int def apply indseq another use fingertree ordered sequence measure store largest value contained branch ordseq final class ordseq order val self fingertree lastoption def partition ordseq ordseq def insert ordseq def x ordseq ordseq object ordseq private implicit def keyer reducer lastoption tag def apply order ordseq ordseq typeclass instance useful incrementally building ordered sequence duplicate access underlying fingertree needed cord common use fingertree intermediate holder string representation show building single string thousand time faster default case class implementation nested tostring build string every layer adt final case class cord self fingertree int string override def tostring string val sb new javalangstringbuilder selfmeasure selfforeach sbappend locally scoped side effect sbtostring example cord string instance return three string middle quote either side implicit val show show string cord fingertreethree therefore string render written source code scala val foo stostring re string foo scala sshow re cord foo heap priority queue priority queue data structure allows fast insertion ordered element allowing duplicate fast access minimum value highest priority structure required store nonminimal element order naive implementation priority queue could final case class vip private val peek maybe x ilist def push implicit order vip peek match case maybejust min min vip ajust min x case vip peek x def pop implicit order maybe vip peek strengthr reorder private def reorder implicit order vip xssorted match case inil vip maybeempty ilistempty case icon min rest vip minjust rest object vip def fromlist order x ilist vip vip maybeempty x reorder push fast reorder therefore pop relies ilistsorted costing n log n scalaz encodes priority queue tree structure every node value le child heap fast push insert union size pop uncons peek minimumo operation sealed abstract class heap def insert implicit order heap def implicit order heap insert def union heap implicit order heap def uncons implicit order option heap minimumo strengthr deletemin def minimumo option def deletemin implicit order heap object heap def fromdata f foldable order f heap private final case class ranked rank int value private final case class empty extends heap private final case class nonempty size int tree tree ranked extends heap size memoized adt enable instant calculation foldablelength cost bit per entry variant heap could created smaller footprint slower foldablelength heap implemented rose tree ranked value rank depth subtree allowing u depthbalance tree manually maintain tree minimum value top advantage encoding minimum value data structure minimumo also known peek free lookup def minimumo option match case empty none case nonempty treenode min minvalue inserting new entry compare current minimum replace new entry lower def insert implicit order heap match case empty nonempty treeleaf ranked case nonempty size tree treenode min minvalue nonempty size treenode ranked stream tree insertion nonminimal value result unordered structure branch minimum encounter two subtrees equal rank optimistically put minimum front case nonempty size treenode min treenode ranked treenode ranked t lazy val treeleaf ranked val sub treenode ranked else treenode ranked else treenode ranked stream nonempty size treenode ranked minvalue sub t case nonempty size treenode min rest val treeleaf ranked nonempty size treenode ranked minvalue rest avoiding full ordering tree make insert fast producer adding queue penalised however consumer pay cost calling uncons deletemin costing log n must search minimum value remove tree rebuilding fast compared naive implementation union operation also delay ordering allowing order foo correctly capture priority want heap foo use tag provide custom order foo custom heap foo custom diev discrete interval efficiently encode unordered integer value inclusive interval diev efficient encoding interval element enum getting efficient content become denser sealed abstract class diev def interval diev def value diev def diev diev def interval diev def value diev def diev diev def interval vector def contains value boolean def contains interval boolean object diev private final case class dievector enum interval vector extends diev def empty enum diev def fromvaluesseq enum value seq diev def fromintervalsseq enum interval seq diev updating diev adjacent interval merged ordered unique representation given set value scala dievfromvaluesseq list re diev int scala dievfromvaluesseq list reverse re diev int great usecase diev storing time period example tradetemplate previous chapter final case class tradetemplate payment list javatimelocaldate ccy option currency otc option boolean find payment dense may wish swap diev representation performance reason without change business logic used monoid list specific method would however provide enum localdate otherwise useful thing oneand recall foldable scalaz equivalent collection api nonempty collection far seen nonemptylist provide simple data structure oneand wrap collection turn final case class oneand f head tail f nonemptylist could alias oneand ilist similarly create nonempty stream dlist tree structure however may break ordering uniqueness characteristic underlying structure oneand iset nonempty iset iset guaranteed first element may also iset summary chapter skimmed data type scalaz offer necessary remember everything chapter think section planted kernel idea world functional data structure active area research academic publication appear regularly new approach old problem implementing functional data structure literature good contribution scalaz ecosystem advanced monad know thing like advanced monad order advanced functional programmer however developer yearning simple life idea modest put context scalaconcurrentfuture complicated nuanced monad chapter chapter study important implementation monad always motion future biggest problem future eagerly schedule work construction discovered introduction future conflates definition program interpreting ie running future also bad performance perspective every time flatmap called closure submitted executor resulting unnecessary thread scheduling context switching unusual see cpu power dealing thread scheduling instead work much parallelising work future often make slower combined eager evaluation executor submission mean impossible know job started finished subtasks spawned calculate final result surprise u performance monitoring future based framework solid earner modern day snake oil merchant furthermore futureflatmap requires executioncontext implicit scope user forced think business logic execution semantics time future star war character would anakin skywalker fallen chosen one rushing breaking thing without thinking effect side effect call sideeffecting method business logic future id either const etc write answer monad delay execution interpreted entrypoint refer io mutation effect world captured type system opposed hidden sideeffect simplest implementation monad io formalising version wrote introduction final class io val interpret object io def apply io new io implicit val monad monad io new monad io def point io io def bind b fa io f io b io b io f fainterpret interpret interpret method called entrypoint application def main args array string unit programinterpret however two big problem simple io stack overflow support parallel computation problem overcome chapter however matter complicated internal implementation monad principle described remain true modularising definition program execution capture effect type signature allowing u reason reuse code scala compiler happily allow u call sideeffecting method unsafe code block scalafix linting tool ban sideeffecting method compiletime unless called inside deferred monad like io stack safety jvm every method call add entry call stack thread like adding front list method completes method head thrown away maximum length call stack determined x flag starting java tail recursive method detected scala compiler add entry hit limit calling many chained method get stackoverflowerror unfortunately every nested call flatmap add another method call stack easiest way see repeat action forever see survives longer second use forever apply parent monad scala val hello io println hello scala apply io forever hello interpret hello hello hello hello javalangstackoverflowerror javaiofileoutputstreamwrite monadioio anon anonfun bind monadioio anon anonfun bind scalaz typeclass monad instance implement stack safe bindrec requires constant stack space recursive bind typeclass trait bindrec f extends bind f def tailrecm b f f b f b override def forever b fa f f b need bindrec program essential general purpose monad implementation way achieve stack safety convert method call reference adt free monad sealed abstract class free object free private final case class return extends free private final case class suspend extends free private final case class gosub b free f free b extends free b type suspend return gosub tip hat basic command name pausing completing continuing subroutine respectively free adt natural data type representation monad interface return represents point gosub represents bind flatmap adt mirror argument related function called church encoding free named generated free example could set drone machine algebra chapter generate data structure representation program return useful end chapter trampoline free general need setting algebra deferred calculation thunk get trampoline implement stack safe monad object free type trampoline free implicit val trampoline monad trampoline bindrec trampoline new monad trampoline bindrec trampoline def point trampoline return def bind b fa trampoline f trampoline b trampoline b gosub fa f def tailrecm b f trampoline b trampoline b bind f case tailrecm f case b point b bindrec implementation tailrecm run bind get b although technically tailrec implementation us constant stack space call return heap object delayed recursion called trampoline every time bind stack bounce back heap star war reference involving bouncing duel dooku shall speak convenient function provided create trampoline eagerly done byname delay also create trampoline byname trampoline suspend object trampoline def done trampoline return def delay trampoline suspend done def suspend trampoline trampoline unit private val unit trampoline unit suspend done see trampoline codebase always mentally substitute simply adding stack safety pure computation get interpreting free provided run instructive although necessary understand freerun implemented resume evaluates single layer free go run completion following trampoline used synonym free make code easier read sealed abstract class trampoline def run go f f def go f trampoline trampoline tailrec def trampoline tresume match case f case r r tailrec def resume trampoline match case return case suspend tmap return case gosub return f f resume case gosub suspend f tmap f case gosub gosub g f z g z f resume case likely cause confusion nested gosub apply inner function g pas outer one f function composition example stack safe dlist previous chapter described data type dlist final case class dlist f ilist ilist def toilist ilist f ilistempty def dlist dlist dlist x f asf x however actual implementation look like final case class dlist f ilist trampoline ilist def toilist ilist f ilistempty run def dlist dlist dlist x suspend asf x f instead applying nested call f use suspended trampoline interpret trampoline run needed eg toilist change minimal stack safe dlist rearrange concatenation large number list without blowing stack stack safe io similarly io made stack safe thanks trampoline final class io val tramp trampoline def unsafeperformio tramprun object io def apply io new io trampolinedelay implicit val monad monad io bindrec io new monad io bindrec io def point io io def bind b fa io f io b io b new io fatramp f tramp def tailrecm b f io b io b heard like monad made monad monad monadically bind monadically binding interpreter unsafeperformio intentionally scary name discourage using except entrypoint application time get stack overflow error scala val hello io println hello scala apply io forever hello unsafeperformio hello hello hello hello using trampoline typically introduces performance regression v regular reference free sense freely generated free beer always benchmark instead accepting sweeping statement performance may well case garbage collector performs better application using free reduced size retained object stack monad transformer library monad transformer data structure wrap underlying value provide monadic effect example chapter used optiont let u use f option comprehension f gave program effect optional value alternatively get effect optionality monadplus subset data type extension monad often referred monad transformer library mtl summarised section explain transformer useful work effect underlying transformer typeclass optionality f maybe maybet monadplus error f e eithert monaderror runtime value f b readert monadreader journal multitask f w writert monadtell evolving state f statet monadstate keep calm carry f e theset â control flow f b f b contt â monadtrans transformer general shape f providing least instance monad hoist therefore monadtrans typeclass trait monadtrans def liftm f monad f f typeclass trait hoist f extends monadtrans f def hoist monad n f n f f n another example higher kinded type say take two type parameter first also take type parameter written second take type parameter written liftm let u create monad transformer f example create optiont io string calling liftm optiont io string hoist idea natural transformation generally three way create monad transformer underlying using constructor single value using pure monad syntax f using liftm monadtrans syntax due way type inference work scala often mean complex type parameter must explicitly written workaround transformer provide convenient constructor companion easier use maybet optiont maybet lazyoptiont similar implementation providing optionality option maybe lazyoption respectively focus maybet avoid repetition final case class maybet f run f maybe object maybet def f applicative v maybet f maybet maybejust v pure f def empty f applicative maybet f maybet maybeemptypure f providing monadplus implicit def monad f monad new monadplus maybet f def point maybet f maybetjust def bind b fa maybet f f maybet f b maybet f b maybet farun cata f run maybeemptypure f def empty maybet f maybetempty def plus maybet f b maybet f maybet f orelse b monad look fiddly delegating everything monad f rewrapping maybet plumbing monad write logic handle optionality f context rather carrying around option maybe example say interfacing social medium website count number star user start string may may correspond user algebra trait twitter f def getuser name string f maybe user def getstars user user f int def f implicit twitter f twitter f need call getuser followed getstars use monad context function difficult handle empty case def star f monad twitter name string f maybe int maybeuser tgetuser name maybestars maybeusertraverse tgetstars yield maybestars however monadplus context suck maybe f orempty forget def star f monadplus twitter name string f int user tgetuser name orempty f star tgetstars user yield star however adding monadplus requirement cause problem downstream context one solution either change context program maybet f lifting monad f monadplus explicitly use maybet return type cost slightly code def star f monad twitter name string maybet f int user maybet tgetuser name star tgetstars user liftm maybet yield star decision require powerful monad v returning transformer something team decide based interpreter plan using program eithert optional value special case value may error know anything error eithert lazy variant lazyeithert allows u use type want error value providing contextual information went wrong eithert wrapper around f b final case class eithert f b run f b object eithert def either f applicative b b eithert f b def leftt f functor b fa f eithert f b def rightt f functor b fb f b eithert f b def pureleft f applicative b eithert f b def pure f applicative b b b eithert f b monad monaderror typeclass trait monaderror f e extends monad f def raiseerror e e f def handleerror fa f f e f f raiseerror handleerror selfdescriptive equivalent throw catch exception respectively monaderror addition syntax dealing common problem implicit final class monaderrorops f e self f implicit val f monaderror f e def attempt f e def recover f e f def emap b f e b f b attempt brings error value useful exposing error subsystem first class value recover turning error value case opposed handleerror take f therefore allows partial recovery emap either map apply transformation fail monaderror eithert implicit def monad f monad e new monaderror eithert f e e def monad f monad e new monaderror eithert f e e def bind b fa eithert f e f eithert f e b eithert f e b eithert farun fold left b pure f b f b run def point eithert f e eithertpure def raiseerror e e eithert f e eithertpureleft e def handleerror fa eithert f e f e eithert f e eithert f e eithert farun case e f e run case right rightpure f surprise rewrite monadplus example monaderror inserting informative error message def star f twitter name string implicit f monaderror f string f int user tgetuser name orerror user name found f star tgetstars user yield star orerror convenience method maybe sealed abstract class maybe def orerror f e e e implicit f monaderror f e f cata fpoint fraiseerror e common use implicit parameter block instead context bound signature typeclass one parameter also common practice name implicit parameter primary type case f version using eithert directly look like def star f monad twitter name string eithert f string int user eithert tgetuser name map user name found star eithertrightt tgetstars user yield star simplest instance monaderror perfect testing business logic requires monaderror example final class mocktwitter extends twitter string def getuser name string string maybe user namecontains maybeemptyright else name wobble connection error left else user name justright def getstars user user string int usernamestartswith w else star replaced heart left unit test star might cover case scala star wibble scala star wobble connection error scala star fish user fish found scala star fommil star replaced heart seen several time focus testing pure business logic without distraction finally return jsonclient algebra chapter trait jsonclient f def get jsdecoder uri string refined url header ilist string string f recall coded happy path api interpreter algebra work f monaderror get define kind error tangential concern indeed two layer error define interpreter eithert io jsonclienterror object jsonclient sealed abstract class error final case class servererror status int extends error final case class decodingerror message string extends error cover io network problem server status problem issue modelling json payload choosing error type community undecided best strategy error type e monaderror one school thought say pick something general like string school say application adt error allowing different error reported handled differently unprincipled gang prefers using throwable maximum jvm compatibility two problem adt error application level awkward create new error one file becomes monolithic repository error aggregating adts individual subsystem matter granular error resolution often log try give need adt error adt value every entry allows different kind recovery performed compromise error adt string intermediary format json good choice understood logging monitoring framework problem stacktrace hard localise piece code source error sourcecode li haoyi include contextual information metadata error final case class meta fqn string file string line int object meta implicit def gen implicit fqn sourcecodefullname file sourcecodefile line sourcecodeline meta new meta fqnvalue filevalue linevalue final case class err msg string implicit val meta meta although err referentially transparent implicit construction meta appear referentially transparent natural reading two call metagen invoked implicitly creating err produce different value location source code impact returned value scala println err hello world meta meta comacme console scala println err hello world meta meta comacme console understand appreciate sourcecode method macro generating source code u write explicitly clear happening scala println err hello world meta comacme console meta meta comacme console scala println err hello world meta comacme console meta meta comacme console yes made deal macro devil could also write meta manually go date quicker documentation readert reader monad wrap f b allowing program f b depend runtime value familiar dependency injection reader monad fp equivalent spring inject without xml reflection readert alias another generally useful data type named mathematician heinrich kleisli type readert f b kleisli f b final case class kleisli f b run f b def dimap c f c g b implicit f functor f kleisli f c kleisli c run f c map g def c k kleisli f b c implicit f bind f kleisli f c def c k b f c implicit f bind f kleisli f c kleisli k object kleisli implicit def kleislifn f b k kleisli f b f b krun people call fish operator always bigger fish hence also called kleisli arrow implicit conversion companion allows u use kleisli place function provide parameter bind common use readert provide environment information program dronedynamicagents need access oauth refresh token able contact google obvious thing load refreshtokens disk startup make every method take refreshtoken parameter fact common requirement martin odersky proposed implicit function better solution program algebra provides configuration needed eg trait configreader f def token f refreshtoken reinvented monadreader typeclass associated readert ask token refreshtoken typeclass trait monadreader f extends monad f def ask f def local f fa f f implementation implicit def monad f monad r new monadreader kleisli f r r def point kleisli f r kleisli fpoint def bind b fa kleisli f r f kleisli f r b kleisli monad f bind farun f def ask kleisli f r r kleisli pure f def local f r r fa kleisli f r kleisli f r kleisli f andthen farun law monadreader change invocation ie ask ask ask usecase say configuration read decide later want reload configuration every time need eg allowing u change token without restarting application reintroduce configreader law oauth implementation could first move monad evidence onto method def bearer refresh refreshtoken implicit f monad f f bearertoken refactor refresh parameter part monad def bearer implicit f monadreader f refreshtoken f bearertoken refresh fask parameter moved monadreader value immediate caller simply want thread information readert reserve implicit parameter block entirely use typeclasses reducing mental burden using scala method monadreader local def local f fa f f change run program fa within local context returning original use case local generate make sense domain giving u nested logging leaning meta data structure previous section define function checkpoint def traced fa f implicit f monadreader f ilist meta f flocal metagen fa use wrap function operate context def foo f foo traced getbar bartofoo automatically passing anything explicitly traced compiler plugin macro could opposite opting everything default access ask see breadcrumb trail exactly called without distraction bytecode implementation detail referentially transparent stacktrace defensive programmer may wish truncate ilist meta certain length avoid equivalent stack overflow indeed appropriate data structure dequeue local also used keep track contextual information directly relevant task hand like number space must indent line pretty printing human readable file format bumping two space enter nested structure four space eight space tab two space exactly two space magic number hardcode every number wrong finally request monadreader application provide one always return readert def bearer implicit f monad f readert f refreshtoken bearertoken readert token caller receives readert token parameter hand call accessrun token get back f bearertoken admittedly since many caller revert regular function parameter monadreader use may wish refactor code later reload config value needed intermediate caller want locally scope variable dotty keep implicit already readert monadreader writert opposite reading writing writert monad transformer typically writing journal final case class writert f w run f w object writert def put f functor w value f w w writert f w def putwith f functor w value f w w writert f w wrapped type f w journal accumulated w one associated monad two monadtell monadlisten typeclass trait monadtell f w extends monad f def writer w w v f def tell w w f unit def fa f w w f def fa f f w f typeclass trait monadlisten f w extends monadtell f w def listen fa f f w def written fa f f w monadtell writing journal monadlisten recover writert implementation implicit def monad f monad w monoid new monadlisten writert f w w def point writert monoid w zero point def bind b fa writert f w f writert f w b writert farun case wa f runmap case wb b wa wb b def writer w w v writert w v point def listen fa writert f w writert farunmap case w w w obvious example use monadtell logging audit reporting reusing meta error reporting could imagine creating log structure like sealed trait log final case class debug msg string implicit meta extends log final case class info msg string implicit meta extends log final case class warning msg string implicit meta extends log use dequeue log journal type could change authenticate method def debug msg string implicit meta dequeue log dequeue debug msg def authenticate f codetoken callback userstart debug started webserver params authrequest callback configscope configclientid url configauthwithquery paramstourlquery useropen url debug user visiting url code userstop debug stopped webserver yield code could even combine readert trace get structured log caller recover log written something however strong argument logging deserves algebra log level often needed point creation performance reason writing log typically managed application level rather something component need concerned w writert monoid allowing u journal kind monoidic calculation secondary value along primary program example counting number time something building explanation calculation building tradetemplate new trade price popular specialisation writert monad id meaning underlying run value simple tuple w type writer w writert id w object writert def writer w v w writer w writert id w v def tell w w w writer w unit writert w final implicit class writerops self def set w w w writer w writert w self def tell writer unit writerttell self allows u let value carry around secondary monoidal calculation without needing context f nutshell writert monadtell multitask fp statet statet let u put get modify value handled monadic context fp replacement var write impure method access mutable state held var might signature f return different value every call breaking referential transparency pure fp function take state input return updated state output underlying type statet f associated monad monadstate typeclass trait monadstate f extends monad f def put f unit def get f def modify f f unit get put f must immutable type modify escape hatch update mutable data structure mutability impure allowed within io block statet implemented slightly differently monad transformer studied far instead case class adt two member sealed abstract class statet f object statet def apply f f f statet f point f private final case class point f run f extends statet f private final case class flatmap f b statet f f statet f b extends statet f b specialised form trampoline giving u stack safety want recover underlying data structure run sealed abstract class statet f def run initial implicit f monad f f match case point f f initial case flatmap point f g f initial case x g x run case flatmap flatmap f g h flatmap f x flatmap g x h run initial statet straightforwardly implement monadstate adt implicit def monad f applicative new monadstate statet f def point point point f def bind b fa statet f f statet f b flatmap fa f def get point point f def put point point f pure mirrored companion statet object statet def statet f applicative statet f monadtransliftm providing f statet f constructor usual common variant statet f id giving underlying type signature scalaz provides type alias convenience function interacting state monad transformer directly mirroring monadstate type state statet id object state def apply f state statet id f def state state state def get state state def put state unit state def modify f state unit example return business logic test dronedynamicagents recall chapter created mutable test interpreter application stored number started stoped node var class mutable state worldview var started stopped int implicit val drone drone id new drone id implicit val machine machine id new machine id val program new dynagentsmodule id know write much better test simulator state take opportunity upgrade accuracy simulation time recall core domain object view world final case class worldview backlog int agent int managed nonemptylist machinenode alive map machinenode epoch pending map machinenode epoch time epoch since writing simulation world test create data type capture ground truth everything final case class world backlog int agent int managed nonemptylist machinenode alive map machinenode epoch started set machinenode stopped set machinenode time epoch yet rewritten application fully make use scalaz data type typeclasses still relying stdlib collection urgency update straightforward type used pure fp manner key difference started stopped node separated interpreter implemented term state world write test assert world worldview look like business logic run interpreter mocking contacting external drone google service may implemented like import state get modify object stateimpl type f state world private val new drone f def getbacklog f int getmap backlog def getagents f int getmap agent private val new machine f def getalive f map machinenode epoch getmap alive def getmanaged f nonemptylist machinenode getmap managed def gettime f epoch getmap time def start node machinenode f unit modify w wcopy started wstarted node def stop node machinenode f unit modify w wcopy stopped wstopped node val program new dynagentsmodule f rewrite test follow convention state world running program belief world state world running program belief running program example request agent needed val world managed map set set val worldview managed map map val stateimplprogramact run pending map set would forgiven looking back business logic loop state initial true state update state state act state use statet manage state however dynagents business logic requires applicative would violating rule least power require powerful monadstate therefore entirely reasonable handle state manually passing update act let whoever call u use statet wish indexedstatet code studied thus far scalaz implement statet instead type alias point indexedstatet type statet f indexedstatet f implementation indexedstatet much studied extra type parameter allowing input state output state differ sealed abstract class indexedstatet f def run initial implicit f bind f f object indexedstatet def apply f f f indexedstatet f wrap f private final case class wrap f run f extends indexedstatet f private final case class flatmap f b indexedstatet f f indexedstatet f b extends indexedstatet f b indexedstatet monadstate although monad following example adapted index state vincent marquez consider scenario must design algebraic interface int string lookup may networked implementation order call essential first attempt api may look something like trait cache f def read k int f maybe string def lock f unit def update k int v string f unit def commit f unit runtime error update commit called without lock complex design may involve multiple trait custom dsl nobody remembers use instead use indexedstatet require caller correct state first define possible state adt sealed abstract class status final case class ready extends status final case class locked iset int extends status final case class updated value int string extends status revisit algebra trait cache type f indexedstatet def read k int f ready ready maybe string def readlocked k int f locked locked maybe string def readuncommitted k int f updated updated maybe string def lock f ready locked unit def update k int v string f locked updated unit def commit f updated ready unit give compiletime error try update without lock cread cupdate wibble ccommit yield error found indexedstatet locked ready maybe string error required indexedstatet ready error cupdate wibble error allowing u construct function composed explicitly including state def wibbleise monad c cache f ready ready string clock creadlocked wibble cupdate ccommit yield introduced code duplication api defined multiple read operation def read k int f ready ready maybe string def readlocked k int f locked locked maybe string def readuncommitted k int f updated updated maybe string instead def read status k int f maybe string reason subtyping broken code would compile inferred type signature f nothing ready maybe string cread cupdate wibble ccommit yield scala nothing type subtype type thankfully code make runtime would impossible call bad api since user need remember add type ascription another approach would stop compiler inferring nothing scalaz provides implicit evidence assert type inferred nothing use instead def read status k int implicit nn notnothing f maybe string choice three alternative apis prefer left personal taste api designer indexedreaderwriterstatet wanting combination readert writert indexedstatet disappointed transformer indexedreaderwriterstatet wrap r f w r reader semantics w monoidic writes parameter indexed state update sealed abstract class indexedreaderwriterstatet f r w def run r r implicit f monad f f w object indexedreaderwriterstatet def apply f r w f r f w type readerwriterstatet f r w indexedreaderwriterstatet f r w object readerwriterstatet def apply f r w f r f w abbreviation provided otherwise honest type long look like part api type irwst f r w indexedreaderwriterstatet f r w val irwst indexedreaderwriterstatet type rwst f r w readerwriterstatet f r w val rwst readerwriterstatet irwst efficient implementation manually created transformer stack readert writert indexedstatet f theset theset allows error either abort calculation accumulated partial success hence keep calm carry underlying data type f b error type requiring semigroup enable accumulation error final case class theset f b run f b object theset def f functor b f theset f b def f functor b b f b theset f b def f functor b ab f b theset f b implicit def monad f monad semigroup new monad theset f def bind b c fa theset f b f b theset f c theset farun case awrapthis c point f case b f b run case b f b runmap case wrapthis c case c c case c c def point b b b theset bwrapthatpoint f special monad associated theset regular monad wish abort calculation return value accumulate error return also contains successful part calculation theset also thought different angle need error similarly writert may secondary calculation computing along primary calculation b theset allows early exit something special demand like charlie bucket found last golden ticket threw away chocolate bar b contt continuation passing style cps style programming function never return instead continuing next computation cps popular javascript lisp allow nonblocking io via callback data available direct translation pattern impure scala look like def foo input next unit unit next dosomestuff input make pure introducing f context def foo f input next f unit f unit refactor return function provided input def foo f input f unit f unit contt container signature monad instance final case class contt f b run f b f b def run f f b f b run f object indexedcontt implicit def monad f b new monad contt f b def point contt def bind c fa contt f b f contt f b c contt cfb farun f run cfb convenient syntax create contt monadic value implicit class conttops f monad self f def cps b contt f b contt afb self afb however simple callback use continuation brings nothing pure functional programming already know sequence nonblocking potentially distributed computation monad bind kleisli arrow see continuation useful need consider complex example rigid design constraint control flow say modularised application component perform io component owned different development team final case class final case class final case class final case class final case class def io def io def io def io goal produce given whereas javascript lisp would reach continuation solve problem io could block chain function def simple io lift simple continuation form using convenient cps syntax little bit extra boilerplate step def contt io cps def contt io cps def contt io cps def flow io run buy u firstly worth noting control flow application left right author want postprocess receive right downstream ie want split add constraint change definition flow perhaps code defined framework using possible process output modifying remaining barx method however contt modify process result next continuation defined def contt io contt next next yield process limited map return value bind another control flow turning linear flow graph def elsewhere contt io def contt io contt next next check io else elsewhererun yield stay within original flow retry everything downstream def contt io contt next next check io else next yield one retry infinite loop example might want downstream reconfirm potentially dangerous action finally perform action specific context contt case io let u error handling resource cleanup def contt io ensuring cleanup cps order spaghetti accident diagram look like spaghetti happens start messing control flow mechanism discussed section simple implement directly edit definition flow therefore typically need use contt however designing framework consider exposing plugin system contt callback allow user power control flow sometimes customer really want spaghetti example scala compiler written using cps would allow principled approach communication compiler phase compiler plugin would able perform action based inferred type expression computed later stage compile similarly continuation would good api extensible build tool text editor caveat contt stack safe used program run forever great kid get contt complex variant contt called indexedcontt wrap f b f c new type parameter c allows return type entire computation different return type component b equal c monad missing opportunity generalise much possible indexedcontt actually implemented term even general structure note extra final case class indexedcontst w f c b run w f b f c type indexedcontt f c b indexedcontst id f c b type contt f b indexedcontst id f b b type contst w f b indexedcontst w f b b type cont b indexedcontst id id b b w comonad contt actually implemented type alias companion object exist type alias convenient constructor admittedly five type parameter perhaps generalisation far overgeneralisation consistent sensibility continuation transformer stack ambiguous implicits concludes tour monad transformer scalaz multiple transformer combined call transformer stack although verbose possible read feature reading transformer example construct f context set composed transformer type ctx statet eithert io e know adding error handling error type e monaderror ctx e managing state monadstate ctx unfortunately practical drawback using monad transformer companion monad typeclasses multiple implicit monad parameter mean compiler find correct syntax use context monad compose general case mean order nesting transformer important interpreter must lifted common context example might implementation algebra us io need wrap statet eithert even though unused inside interpreter performance cost associated layer monad transformer worse others statet particularly bad even eithert cause memory allocation problem high throughput application need talk workarounds syntax say algebra trait lookup f def look f int data type final case class problem bad int final case class table last int want use business logic def foo f l lookup f implicit e monaderror f problem monadstate f table f int old sget llook oldlast eraiseerror problem else pure f yield first problem encounter fails compile error value flatmap member type parameter f table error old sget error tactical solution problem obvious make parameter explicit def f monad l lookup f e monaderror f problem monadstate f table f int require monad passed implicitly via context bound however mean must manually wire monaderror monadstate calling calling another method requires implicit second solution leave parameter implicit use name shadowing make one parameter explicit allows upstream use implicit resolution calling u still need pas parameter explicitly call inline final def shadow b c b b f b c c f b def f monad l lookup f implicit e monaderror f problem monadstate f table f int shadow e e could shadow one monad leaving one provide syntax available call method inline final def shadow b f b b f def f l lookup f implicit e monaderror f problem monadstate f table f int shadow e e third option higher upfront cost create custom monad typeclass hold implicit reference two monad class care trait monaderrorstate f e implicit def e monaderror f e implicit def monadstate f derivation typeclass given monaderror monadstate object monaderrorstate implicit def create f e implicit monaderror f e monadstate f new monaderrorstate f e def e monaderror f e def monadstate f want access e get via f fe def f monad l lookup f implicit f monaderrorstate f problem table f int old fsget llook oldlast feraiseerror problem else pure f yield like second solution choose one monad instance implicit within block achieved importing def f l lookup f implicit f monaderrorstate f problem table f int import fe composing transformer eithert statet monaderror monadstate whereas statet eithert provide workaround study implicit derivation companion transformer make sure outer transformer provides everything need rule thumb complex transformer go outside chapter presenting transformer increasing order complex lifting interpreter continuing example say lookup algebra io interpreter object lookuprandom extends lookup io def look io int io utilrandomnextint want context type ctx statet eithert io problem table give u monaderror monadstate mean need wrap lookuprandom operate ctx odds getting type correct first attempt approximately one firstly want make use liftm syntax monad us monadtrans lift starting f g f final class monadops f monad fa f def liftm g monadtrans g f important realise type parameter liftm two type hole one shape another shape create type alias shape type f statet eithert f problem table type f eithert f problem type f statet f table abstract monadtrans lift lookup f lookup g f g monad transformer def liftm f monad g monadtrans f lookup f new lookup g f def look g f int flookliftm g allowing u wrap eithert statet val lookupliftm io lookuprandom val lookup ctx lookupliftm eithert io problem another way achieve single step use monadio enables lifting io transformer stack typeclass trait monadio f extends monad f def liftio ioa io f monadio instance common combination transformer boilerplate overhead lift io interpreter anything monadio instance therefore two line code interpreter definition plus one line per element algebra final line call def liftio f monadio io lookup io new lookup f def look f int iolookliftio f val l lookup ctx lookupliftio lookuprandom compiler plugin automatically produce liftm liftio additional boilerplate arises chapter would great contribution ecosystem performance biggest problem monad transformer performance overhead eithert reasonably low overhead every flatmap call generating handful object impact high throughput application every object allocation matter transformer statet effectively add trampoline contt keep entire callchain retained memory application care allocation bounded network io always measure performance becomes problem solution use monad transformer least transformer data structure big advantage monad typeclasses like monadstate create optimised f application provides typeclasses naturally learn create optimal f next two chapter deep dive two structure already seen free io free lunch industry craves safe highlevel language trading developer efficiency reliability reduced runtime performance time jit compiler jvm performs well simple function comparable performance c c equivalent ignoring cost garbage collection however jit performs low level optimisation branch prediction inlining method unrolling loop jit perform optimisation business logic example batching network call parallelising independent task developer responsible writing business logic optimisation time reducing readability making harder maintain would good optimisation tangential concern instead data structure describes business logic term high level concept machine instruction perform high level optimisation data structure nature typically called free structure generated free member algebraic interface program example free applicative generated allows u batch deduplicate expensive network io section learn create free structure used free monad fundamentally monad describes sequential program every step depends previous one therefore limited modification know thing already run next thing going run trendy circa write fp program term free much exercise understand free code able write use lot boilerplate create free structure shall use study free learn generate boilerplate refresher free data structure representation monad defined three member sealed abstract class free def mapsuspension f free def foldmap monad f object free implicit def monad monad free private final case class suspend extends free private final case class return extends free private final case class gosub b free f free b extends free b type def liftf value free suspend value suspend represents program yet interpreted return pure gosub bind free freely generated algebra make explicit consider machine algebra trait machine f def gettime f epoch def getmanaged f nonemptylist machinenode def getalive f map machinenode epoch def start node machinenode f unit def stop node machinenode f unit define freely generated free machine creating adt data type element algebra data type input parameter corresponding element parameterised return type name object machine sealed abstract class ast final case class gettime extends ast epoch final case class getmanaged extends ast nonemptylist machinenode final case class getalive extends ast map machinenode epoch final case class start node machinenode extends ast unit final case class stop node machinenode extends ast unit adt defines abstract syntax tree ast member representing computation program freely generated free machine free machinesast ie ast free machine easy make mistake since latter compile meaningless define liftf implementation machine free ast context every method simply delegate freeliftt create suspend def liftf new machine free ast def gettime freeliftf gettime def getmanaged freeliftf getmanaged def getalive freeliftf getalive def start node machinenode freeliftf start node def stop node machinenode freeliftf stop node construct program parameterised free run providing interpreter natural transformation ast foldmap method example could provide interpreter map io construct io unit program via free ast def program f monad machine f f unit val interpreter machinesast io val app io unit program free machinesast machinesliftf foldmap interpreter completeness interpreter delegate direct implementation easy write might useful rest application using free context already io implementation want use def interpreter f f machine f ast f î ast f case gettime fgettime case getmanaged fgetmanaged case getalive fgetalive case start node fstart node case stop node fstop node business logic need machine also need access drone algebra recall defined trait drone f def getbacklog f int def getagents f int object drone sealed abstract class ast def liftf def interpreter want ast combination machine drone asts studied coproduct chapter higher kinded disjunction final case class coproduct f g run f g use context free coproduct machinesast droneast could manually create coproduct would swimming boilerplate wanted add third algebra scalazinject typeclass help type f g inject f g sealed abstract class inject f g def inj fa f g def prj ga g option f object inject implicit def left f g f coproduct f g implicit derivation generate inject instance need letting u rewrite liftf work combination asts def liftf f implicit ast f new machine free f def gettime freeliftf iinj gettime def getmanaged freeliftf iinj getmanaged def getalive freeliftf iinj getalive def start node machinenode freeliftf iinj start node def stop node machinenode freeliftf iinj stop node nice f g read ast member complete f instruction set syntax intentional compiler plugin automatically produce scalazfree boilerplate would great contribution ecosystem painful write boilerplate potential typo ruin day two member algebra type signature might notice putting together let say program wrote abstracting monad def program f monad machine f drone f f unit existing implementation machine drone create interpreter val machinesio machine io val droneio drone io val machinesast io machinesinterpreter machinesio val droneast io droneinterpreter droneio combine larger instruction set using convenience method naturaltransformation companion object naturaltransformation def f g h fg f g hg h g coproduct f h g type ast coproduct machinesast droneast val interpreter ast io naturaltransformationor use produce io val app io unit program free ast machinesliftf droneliftf foldmap interpreter gone circle could used io context program first place avoided free put pain example free might useful testing mock stub might sound hypocritical propose free used reduce boilerplate given much code written however tipping point ast pay many test require stub implementation ast liftf defined algebra create partial interpreter val machinesast id stub map machinenode epoch case machinesgetalive mapempty val droneast id stub int case dronegetbacklog used test program program free ast machinesliftf droneliftf foldmap shouldbe using partial function total function exposing runtime error many team happy accept risk unit test since test would fail programmer error arguably could also achieve thing implementation algebra implement every method overriding need case case basis library smock powerful purpose short example define stub using type inference trick found scalaz source code reason stub separate class need provide type parameter f g inferred left hand side expression object mocker final class stub def apply f g pf partialfunction f g f g new f g def apply fa f pfasinstanceof partialfunction f g fa def stub stub new stub monitoring typical server application monitored runtime agent manipulate bytecode insert profilers extract various kind usage performance information context free need resort bytecode manipulation instead implement sideeffecting monitor interpreter complete control runtime introspection one case justify use sideeffect monitoring visible program referential transparency still hold also argument used team use sideeffecting debug logging argument allowing mutation implementation memo example consider using ast ast val monitor î demoast demoast run match case dronegetbacklog jmxabstractfactorybeansingletonproviderutilimplcount backlog coproductrightc case coproduct record method invocation would use vendorspecific routine real code could also watch specific message interest log debugging aid attach monitor production free application mapsuspension monitor foldmap interpreter combine natural transformation run single foldmap monitorandthen interpreter monkey patching engineer used request bizarre workarounds added core logic application might want codify corner case exception rule handle tangentially core logic example suppose get memo accounting telling u urgent bob using node run year end stop machine possibility discus bob using machine superimportant account hack business logic put release production soon possible monkey patch map free structure allowing u return precanned result freepure instead scheduling instruction special case instruction custom natural transformation return value val monkey î machinesast free machinesast case machinesstop machinenode freepure case freeliftf eyeball work push prod set alarm next week remind u remove revoke access server unit test could use state target context keep track node stopped type set machinenode val machinesast state mockerstub unit case machinesstop node statemodify node machine liftf machinesast stop machinenode foldmap monkey foldmap exec setempty shouldbe setempty along test node affected advantage using free avoid stopping node sure catch usage instead go business logic look usage stop application context io could course implement logic machine io implementation advantage using free need touch existing code instead isolate test temporary behaviour without tied io implementation freeap applicative despite chapter called advanced monad takeaway use monad unless really really section see freeap free applicative preferable free monad freeap defined data structure representation ap pure method applicative typeclass sealed abstract class freeap def hoist g f g freeap g def foldmap g applicative f g g def monadic free def analyze monoid f f î object freeap implicit def applicative applicative freeap private final case class pure extends freeap private final case class ap b value b function freeap b extends freeap def pure freeap pure def lift x freeap method hoist foldmap like free analogue mapsuspension foldmap convenience generate free freeap monadic especially useful optimise smaller applicative subsystem yet use part larger free program like free must create freeap asts def lifta f implicit ast f new machine freeap f def gettime freeaplift iinj gettime batching network call opened chapter grand claim performance time deliver philip humanised version peter latency number serve motivation focus reducing network call optimise application computer human timescale human analogy cache reference sec one heart beat branch mispredict sec yawn cache reference sec long yawn mutex lockunlock sec making cup tea main memory reference sec brushing teeth compress byte zippy min scala compiler ci pipeline send byte network hr train london edinburgh ssd random read day weekend read sequentially memory day long weekend round trip within datacenter day long u vacation read sequentially ssd day short eu holiday disk seek week term university read sequentially disk month fully paid maternity norway send packet ca netherlands ca year term although free freeap incur memory allocation overhead equivalent second humanised chart every time turn two sequential network call one batch call save nearly year applicative context safely optimise application without breaking expectation original program without cluttering business logic luckily main business logic requires applicative recall final class dynagentsmodule f applicative drone f machine f extends dynagents f def act world worldview f worldview begin create lift boilerplate new batch algebra trait batch f def start node nonemptylist machinenode f unit object batch sealed abstract class ast final case class start node nonemptylist machinenode extends ast unit def lifta f implicit ast f new batch freeap f def start node nonemptylist machinenode freeaplift iinj start node create instance dynagentsmodule freeap context type orig coproduct machinesast droneast val world worldview val program new dynagentsmodule dronelifta orig machineslifta orig val freeap programact world chapter studied const data type allows u analyse program surprising freeapanalyze implemented term const sealed abstract class freeap def analyze monoid f î foldmap î const x const f x getconst provide natural transformation record node start analyze program get node need started val gather î orig î ilist machinenode case coproduct machinesstart node ilistsingle node case ilistempty val gathered ilist machinenode freeapanalyze gather next step extend instruction set orig extended includes batchast write freeap program start gathered node single network call type extended coproduct batchast orig def batch node ilist machinenode freeap extended unit nodestonel match case none freeappure case node freeaplift coproductleftc batchstart node also need remove call machinesstart natural transformation val nostart î orig freeap extended case coproduct machinesstart freeappure case freeaplift coproductrightc two program need combine recall syntax apply val patched batch gathered freeapfoldmap nostart putting together single method def optimise orig freeap orig freeap extended batch origanalyze gather origfoldmap nostart optimise every time call act main loop matter plumbing coyoneda functor named mathematician nobuo yoneda freely generate functor data structure algebra sealed abstract class coyoneda f def run implicit f functor f f def trans g f f g coyoneda g object coyoneda implicit def functor f functor coyoneda f private final case class map f b fa f f b extends coyoneda f def apply f b sa f f b map f b sa f def lift f sa f map f sa identity also contravariant version sealed abstract class contravariantcoyoneda f def run implicit f contravariant f f def trans g f f g contravariantcoyoneda g object contravariantcoyoneda implicit def contravariant f contravariant contravariantcoyoneda f private final case class contramap f b fa f f b extends contravariantcoyoneda f def apply f b sa f f b contramap f b sa f def lift f sa f contramap f sa identity api somewhat simpler free freeap allowing natural transformation trans run taking actual functor contravariant respectively escape free structure coyo cocoyo useful utility want map contramap type know convert data type functor want commit final data structure early example create coyoneda iset recall iset functor use method require functor convert ilist later want optimise program coyo cocoyo provide expected boilerplate algebra def liftcoyo f implicit ast f new machine coyoneda f def gettime coyonedalift iinj gettime def liftcocoyo f implicit ast f new machine contravariantcoyoneda f def gettime contravariantcoyonedalift iinj gettime optimisation get using coyoneda map fusion contramap fusion allows u rewrite avoiding intermediate representation example x list thousand element save two thousand object allocation map data structure however arguably lot easier make kind change original function hand wait scalazplugin project released automatically perform sort optimisation extensible effect program data free structure help make explicit give u ability rearrange optimise data free special appears sequence arbitrary algebra typeclasses example free structure monadstate available ast liftf complicated usual account type parameter monadstate inheritance monad object monadstate sealed abstract class ast final case class get extends ast final case class put extends ast unit def liftf f implicit ast f new monadstate free f bindrec free f def get freeliftf iinj get def put freeliftf iinj put val delegate freefreemonad f def point delegatepoint give u opportunity use optimised interpreter example could store atomic field instead building nested statet trampoline create ast liftf almost algebra typeclass restriction f appear parameter instruction ie must possible algebra instance functor unfortunately rule monaderror monoid reason free encoding work algebra typeclasses quite subtle consider happens create ast monaderror f contravariant position ie parameter object monaderror sealed abstract class ast f e final case class raiseerror f e e e extends ast f e final case class handleerror f e fa f f e f extends ast f e def liftf f e implicit ast f e f monaderror f e come interpret program us monaderrorast must construct coproduct instruction say extend drone program type ast coproduct monaderrorast ast string droneast fails compile ast refers algebra entirely made covariant functor signature ie f return position impossible interpret resulting type program selfreferential indeed name algebra using root falgebras f functor thanks edmund noble initiating discussion ast free program grows performance degrades interpreter must match instruction set n cost alternative scalazcoproduct encoding us optimised data structure perform dynamic dispatch using integer assigned coproduct compiletime historical reason free ast algebra typeclass called initial encoding direct implementation eg io called finally tagless although explored interesting idea free generally accepted finally tagless superior use finally tagless style need high performance effect type provides monad typeclasses covered chapter also still need able run applicative code parallel exactly cover next parallel two effectful operation almost always want run parallel map collection effect returning single effect achieved traverse delegate running fixed number effect scream operator combining output delegating however practice neither operation execute parallel default reason f implemented monad derived combinator law must satisfied say typeclass trait bind f extends apply f override def b c fa f fb f b f b c f c bind fa map fb b f b word monad explicitly forbidden running effect parallel however f monadic may implement parallel use tag mechanism create instance applicative f parallel conveniently assigned type alias applicativepar object applicative type par f applicative î f tagsparallel monadic program request implicit par addition monad def foo f monad applicativepar f unit traverse syntax support parallelism implicit class traversesyntax f self f def partraverse g b f g b implicit f traverse f g applicativepar g g f b tagunwrap ftraverse self tag f implicit applicativepar io scope choose sequential parallel traversal val input ilist string def network string io int inputtraverse network io ilist int one time inputpartraverse network io ilist int parallel similarly call parapply partupled using scream operator val fa io string val fb io string val fc io string fa fb partupled io string string fa fb fc parapply case b c b c io string worth noting applicative program def foo f applicative f unit use f parallel context get parallelism default traverse converting raw parallel version f must handled manually glue code painful therefore often easier simply request form applicative def foo f applicative applicativepar f unit breaking law take daring approach parallelism optout law must sequential monad highly controversial work well majority real world application must first audit codebase including third party dependency ensure nothing making use implied law wrap io final class myio val io io extends anyval provide implementation monad run parallel delegating parallel instance object myio implicit val monad monad myio new monad myio override def b c fa myio fb myio b f b c myio c applicative iopar faio fbio f use myio context instead io get parallelism default wrapping existing type providing custom typeclass instance known newtyping newtyping complementary allows u request specific typeclass variant domain model whereas newtyping allow u define instance implementation thing different insertion point newtype macro cary robbins optimised runtime representation efficient extends anyval make easy delegate typeclasses wish customise example customise monad delegate plus newtype class myio io io object myio implicit val monad monad myio implicit val plus plus myio derived completeness naive inefficient implementation applicativepar toy io could use future object io type par io parallel implicit val parapplicative new applicative par override def b c fa par fb par b f b c par c tag io val forked future tagunwrap fa interpret val b tagunwrap fb interpret val awaitresult forked durationinf f b due bug scala compiler treat instance orphan must explicitly import implicit final section chapter see io actually implemented io io fastest asynchronous programming construct scala ecosystem time faster future io free data structure specialised use general effect monad sealed abstract class io e object io private final class flatmap extends io e private final class point extends io e private final class strict extends io e private final class synceffect extends io e private final class fail extends io e private final class asynceffect extends io e io two type parameter bifunctor allowing error type application specific adt jvm must interact legacy library convenient type alias provided us exception error type type task io throwable scalazioeffectio high performance io john de go separate lifecycle core scalaz library must manually added buildsbt librarydependencies orgscalaz scalazioeffect use deprecated scalazeffect scalazconcurrency package prefer scalazioeffect variant typeclasses data type creating multiple way create io cover variety eager lazy safe unsafe code block object io eager evaluation existing value def e io e lazy evaluation pure calculation def point e io e lazy evaluation sideeffecting yet total code block def sync e effect io e lazy evaluation sideeffecting code block may fail def syncthrowable effect io throwable create failed io def fail e error e io e asynchronously sleep specific period time def sleep e duration duration io e unit convenient task constructor object task def apply effect task iosyncthrowable effect def effect task ionow effect def fail error throwable task iofail error def fromfuture e io task future ec executioncontext task common constructor far dealing legacy code taskapply taskfromfuture val fa task future string task impure code taskfromfuture fa executioncontextglobal task string pas around raw future eagerly evaluates must always constructed inside safe block note executioncontext implicit contrary convention recall scalaz reserve implicit keyword typeclass derivation simplify language executioncontext configuration must provided explicitly running io interpreter called rts runtime system implementation beyond scope book instead focus feature io provides io data structure interpreted end world extending safeapp implementing run trait safeapp extends rts sealed trait exitstatus object exitstatus case class exitnow code int extends exitstatus case class exitwhendone code int timeout duration extends exitstatus case object donotexit extends exitstatus def run args list string io void exitstatus final def main array string unit call run void type value like scalanothing however scala compiler infers nothing fails correctly infer type parameter causing confusing error message whereas void fail fast compilation void error type mean effect fail say handled error point integrating legacy system control entry point application extend rts gain access unsafe method evaluate io entry point principled fp code feature io provides typeclass instance bifunctor monaderror e bindrec plus monadplus e form monoid applicative iopar e addition functionality typeclasses implementation specific method sealed abstract class io e retries action n time success def retryn n int io e exponential backoff def retrybackoff n int factor double duration duration io e repeat action pause invocation fails def repeat b interval duration io e b cancel action complete within timeframe def timeout duration duration io e maybe run release success failure note io void unit fail def bracket b release io void unit use io e b io e b alternative syntax bracket def ensuring finalizer io void unit io e ignore failure success eg ignore result cleanup action def ignore io void unit run two effect parallel def par b io e b io e b possible io terminated state represents work intended discarded neither error success utility related termination terminate whatever action running given throwable bracket ensuring honoured def terminate e throwable io e run two effect parallel return winner terminate loser def race io e io e ignores termination def uninterruptibly io e fiber io may spawn fiber lightweight abstraction jvm thread fork io supervise incomplete fiber ensure terminated io action completes def fork io fiber e def supervised error throwable io e fiber join back io interrupt underlying work trait fiber e def join io e def interrupt throwable io unit use fiber achieve form optimistic concurrency control consider case data need analyse also need validate optimistically begin analysis cancel work validation fails performed parallel final class baddata data data extends throwable nostacktrace analysis data fork validate data fork valid valid baddata data else iounit result yield result another usecase fiber need perform fire forget action example low priority logging network promise promise represents asynchronous variable set exactly complete error unbounded number listener get variable final class promise e private ref atomicreference state e def complete io boolean def error e e io boolean def get io e interrupt listener def interrupt throwable io boolean object promise def make e io e promise e promise something typically use application code building block high level concurrency framework operation guaranteed succeed error type e left free type parameter caller specify preference ioref ioref io equivalent atomic mutable variable read variable variety way write update final class ioref private ref atomicreference def read e io e write immediate consistency guarantee def write e io e unit write eventual consistency guarantee def writelater e io e unit return true immediate write succeeded false abort def trywrite e io e boolean atomic primitive updating value def compareandset e prev next io e boolean def modify e f io e def modifyfold e b f b io e b object ioref def apply e io e ioref ioref another building block used provide high performance monadstate example create newtype specialised task final class statetask val io task extends anyval object statetask def create initial task monadstate statetask ref ioref initial yield new monadstate statetask override def get new statetask refread override def put new statetask refwrite make use optimised monadstate implementation safeapp program depends optimised mtl typeclasses object faststate extends safeapp def program f implicit f monadstate f int f exitstatus def run unused args list string io void exitstatus statemonad statetaskcreate output program statemonad io yield output realistic application would take variety algebra typeclasses input optimised monadstate constructed way break typeclass coherence two instance type may managing different state would prudent isolate construction instance entrypoint monadio monadio previously studied simplified hide e parameter actual typeclass trait monadio e def liftio io io e implicit monad minor change boilerplate companion algebra accounting extra e trait lookup f def look f int object lookup def liftio f monad e io lookup io e implicit monadio f e new lookup f def look f int mliftio iolook summary future broke go manage stack safety trampoline monad transformer library mtl abstract common effect typeclasses monad transformer provide default implementation mtl free data structure let u analyse optimise easily test program io give u ability implement algebra effect world io perform effect parallel high performance backbone application typeclass derivation typeclasses provide polymorphic functionality application use typeclass need instance business domain object creation typeclass instance existing instance known typeclass derivation topic chapter four approach typeclass derivation manual instance every domain object infeasible real world application result hundred line boilerplate every line case class useful educational purpose adhoc performance optimisation abstract typeclass existing scalaz typeclass approach scalazderiving producing automated test derivation product coproducts macro however writing macro typeclass requires advanced experienced developer fortunately jon magnolia library abstract handrolled macro simple api centralising complex interaction compiler write generic program using shapeless library implicit mechanism language within scala language used write program type level chapter study increasingly complex typeclasses derivation begin scalazderiving principled mechanism repeating lesson chapter magnolia easiest use finishing shapeless powerful typeclasses complex derivation logic running example chapter show define derivation five specific typeclasses example exhibit feature generalised typeclass trait equal type parameter contravariant parameter position op def equal boolean requesting default value type testing typeclass trait default type parameter covariant return position def default string typeclass trait semigroup type parameter covariant contravariant position invariant op def append x typeclass trait jsencoder type parameter contravariant position need access field name def tojson jsvalue typeclass trait jsdecoder type parameter covariant position need access field name def fromjson j jsvalue string school thought say serialisation format json xml typeclass encoders decoder lead typeclass decoherence ie one encoder decoder may exist type alternative use algebra avoid using implicit language feature entirely although possible apply technique chapter either typeclass algebra derivation latter involves lot boilerplate therefore consciously choose restrict study encoders decoder coherent see later chapter usesite automatic derivation magnolia shapeless combined limitation scala implicit search commonly lead typeclass decoherence scalazderiving scalazderiving library extension scalaz added buildsbt val derivingversion librarydependencies orgscalaz scalazderiving derivingversion providing new typeclasses shown relation core scalaz typeclasses scalaz applicative divisible inherit invariantapplicative proceed quick recap core scalaz typeclasses typeclass trait invariantfunctor f def xmap b fa f f b g b f b typeclass trait contravariant f extends invariantfunctor f def contramap b fa f f b f b def xmap b fa f f b g b f b contramap fa g typeclass trait divisible f extends contravariant f def conquer f def b c fa f fb f b f c b f c def typeclass trait functor f extends invariantfunctor f def map b fa f f b f b def xmap b fa f f b g b f b map fa f typeclass trait applicative f extends functor f def point f def b c fa f fb f b f b c f c def typeclass trait monad f extends functor f op def bind b fa f f f b f b typeclass trait monaderror f e extends monad f def raiseerror e e f def emap b fa f f e b f b repeat simplest way derive typeclass reuse one already exists equal typeclass instance contravariant equal providing contramap object equal implicit val contravariant new contravariant equal def contramap b fa equal f b equal b faequal f f user equal use contramap single parameter data type recall typeclass instance go data type companion implicit scope final case class foo string object foo implicit val equal equal foo equal string contramap scala foo hello foo world false however typeclasses instance contravariant particular typeclasses type parameter covariant position may functor instead object default def instance string new default def default implicit val string default string instance right implicit val functor functor default new functor default def map b fa default f b default b instance fadefaultmap f derive default foo object foo implicit val default default foo default string map foo typeclass parameter covariant contravariant position case semigroup may provide invariantfunctor object semigroup implicit val invariant new invariantfunctor semigroup def xmap b semigroup f b g b new semigroup b def append x b b b f maappend g x g call xmap object foo implicit val semigroup semigroup foo semigroup string xmap foo generally simpler use xmap instead map contramap final case class foo string object foo implicit val equal equal foo equal string xmap foo implicit val default default foo default string xmap foo implicit val semigroup semigroup foo semigroup string xmap foo monaderror typically thing write polymorphic value contravariant thing read polymorphic value functor however much expected reading fail example default string mean simply derive default string refined nonempty import eutimepitrefinedrefinev import eutimepitrefinedapi import eutimepitrefinedcollection implicit val ne default string refined nonempty default string map refinev nonempty fails compile error polymorphic expression instantiated expected type error found either string string refined nonempty error required string refined nonempty error default string map refinev nonempty error recall chapter refinev return either compiler reminded u typeclass author default better functor provide monaderror default string implicit val monad new monaderror default string def point default instance aright def bind b fa default f default b default b instance fa f default def handleerror fa default f string default default instance fadefaulthandleerror e f e default def raiseerror e string default instance eleft access emap syntax derive refined type implicit val ne default string refined nonempty default string emap refinev nonempty disjunction fact provide derivation rule refined type implicit def refined default p implicit v validate p default refined p default emap refinev p disjunction validate refined library required refinev refinedscalaz extension refined provides support automatically deriving typeclasses refined type following import import eutimepitrefinedscalaz contravariant monaderror string implicit scope however due limitation scala compiler rarely work practice must write implicit def refined derivation typeclass similarly use emap derive int decoder long protection around nontotal toint stdlib method implicit val long default long instance implicit val int default int default long emap case n intminvalue n n intmaxvalue ntointright case big big fit bit left author default typeclass might want reconsider api design never fail eg following type signature typeclass trait default def default would able define monaderror forcing u provide instance always succeed result boilerplate gain compiletime safety however continue string return type general example fromiso typeclasses scalaz method companion signature similar following object equal def fromiso f g equal f g equal f object monad def fromiso f g monad f g monad f mean type f way convert g instance call equalfromiso obtain instance f example typeclass user data type bar define isomorphism string int import isomorphism final case class bar string int object bar val iso bar string int isoset b b bi bar derive equal bar already equal tuples object bar implicit val equal equal bar equalfromiso iso fromiso mechanism also assist u typeclass author consider default core type signature form unit f default method fact isomorphic kleisli f unit readert monad transformer since kleisli already provides monaderror f one derive monaderror default string creating isomorphism default kleisli private type sig unit string private val iso kleisliiso î sig default instance î default sig ddefault implicit val monad monaderror default string monaderrorfromiso iso giving u map xmap emap making use far effectively free divisible applicative derive equal case class two parameter reused instance scalaz provides tuples tuple instance come specific typeclass contravariant divisible equal instance implicit val divisible new divisible equal def divide z equal equal f z equal z val f val f def conquer equal true implementing divisible compiler require u provide contramap directly optimised implementation derived combinator override def contramap b fa f f b f b conquer unit fa c f c added divisible scalaz divisible able build derivation way call method directly data type final case class bar string int object bar implicit val equal equal bar divisible equal equal string equal int b b bi equivalent type parameter covariant position applicative object bar implicit val default default bar applicative default default string default int bar must careful break typeclass law implement divisible applicative particular easy break law composition say following two codepaths must yield exactly output dupe dupe dupe dupe dupe similar law applicative consider jsencoder proposed instance divisible new divisible jsencoder def divide b c fa jsencoder fb jsencoder b f c b jsencoder c c val b f c jsarray ilist fatojson fbtojson b def conquer jsencoder jsnull one side composition law string input get jsarray jsarray jsstring hello jsstring hello jsstring hello jsarray jsstring hello jsarray jsstring hello jsstring hello different could experiment variation divide implementation never satisfy law input therefore provide divisible jsencoder would break mathematical law invalidates assumption user divisible rely upon aid testing law scalaz typeclasses contain codified version law typeclass write automated test asserting law fails remind u fact val divisible jsencoder val jsencoder string jsencoder string val e equal jsencoder string hello hello assert ddividelawcomposition e hand similar jsdecoder test meet applicative composition law final case class comp string b int object comp implicit val equal equal comp implicit val decoder jsdecoder comp def composetest j jsvalue val applicative jsdecoder applicative jsdecoder val fa jsdecoder comp jsdecoder comp val fab jsdecoder comp string int apoint c ca cb val fbc jsdecoder string int int string apoint swap val e equal jsdecoder int string j j assert aapplylawcomposition fbc fab fa e test data composetest jsobject ilist jsstring hello b jsinteger composetest jsnull composetest jsobject ilist jsstring hello composetest jsobject ilist b jsinteger reasonably confident derived monaderror lawful however test pass small set data prove law satisfied must also reason implementation convince satisfy law try propose corner case could fail one way generating wide variety test data use scalacheck library provides arbitrary typeclass integrates testing framework repeat test randomly generated data jsonformat library provides arbitrary jsvalue everybody provide arbitrary adts allowing u make use forall feature forall sizerange j jsvalue composetest j test give u even confidence typeclass meet applicative composition law checking law divisible monaderror also get lot smoke test free must restrict forall sizerange limit jsobject jsarray maximum size element avoids stack overflow larger number generate gigantic json document decidable alt divisible applicative give u typeclass derivation product built tuples decidable alt give u coproducts built nested disjunction typeclass trait alt f extends applicative f invariantalt f def alt f f f def z f f z f z def z f f f z f z def def typeclass trait decidable f extends divisible f invariantalt f def z f f z f z def z f f f z f z def def four core typeclasses symmetric signature typeclass method given signature return applicative f f z f z alt f f z f z divisible f f z f z decidable f f z f z supporting covariant product covariant coproducts contravariant product contravariant coproducts write decidable equal letting u derive equal adt implicit val decidable new decidable equal def z equal equal f z equal z f f match case case case false adt sealed abstract class darth def widen darth final case class vader string int extends darth final case class jarjar int string extends darth product vader jarjar equal object vader private val g vader string int d di implicit val equal equal vader divisible equal equal string equal int g object jarjar private val g jarjar int string di d implicit val equal equal jarjar divisible equal equal int equal string g derive equal whole adt object darth private def g darth vader jarjar match case p vader p case p jarjar p implicit val equal equal darth decidable equal equal vader equal jarjar g scala vader hello widen jarjar hello widen false scalaz provide decidable equal box late addition typeclasses applicative eligible alt want use kleisliiso trick extend isomorphismmonaderror mix alt upgrade monaderror default string alt default private type k kleisli string unit implicit val monad new isomorphismmonaderror default k string alt default override val g monaderror k string override val iso def alt default default default instance primitive alt alt much primitive applicative ap often make sense use primitive following override override def ap b fa f f f b f b fa f abc abc override def alt f f f case case forget implement infinite loop runtime letting u derive default darth object darth private def f e vader jarjar darth emerge implicit val default default darth alt default default vader default jarjar f object vader private val f string int vader vader implicit val default default vader alt default default string default int f object jarjar private val f int string jarjar jarjar implicit val default default jarjar alt default default int default string f scala default darth default vader returning scalazderiving typeclasses invariant parent alt decidable typeclass trait invariantapplicative f extends invariantfunctor f def z f z f z def z f f z g z f z def def def typeclass trait invariantalt f extends invariantapplicative f def z f f z g z f z def def def supporting typeclasses invariantfunctor like monoid semigroup arbitrary arity deriving two problem invariantapplicative invariantalt support product four field coproducts four entry lot boilerplate data type companion section solve problem additional typeclasses introduced scalazderiving effectively four central typeclasses applicative divisible alt decidable get extended arbitrary arity using iotaz library hence z postfix iotaz library three main type tlist describes arbitrary length chain type prod tlist product cop tlist coproducts way example tlist representation darth previous section import iotaz tlist type dartht vader jarjar tnil type vadert string int tnil type jarjart int string tnil instantiated val vader prod vadert prod hello val jarjar prod jarjart prod hello val vaderi copinject vader cop dartht val darth cop dartht vaderiinj vader hello able use scalazderiving api need isomorphism adts iotaz generic representation lot boilerplate get moment object darth private type repr vader jarjar tnil private val vaderi copinject vader cop repr private val jarjari copinject jarjar cop repr private val iso isoset case vader vaderiinj case jarjar jarjariinj case vaderi case jarjari object vader private type repr string int tnil private val iso isoset prod d di p vader phead ptailhead object jarjar private type repr int string tnil private val iso isoset prod di d p jarjar phead ptailhead way call deriving api equal possible scalazderiving provides optimised instance deriving equal object darth implicit val equal equal darth deriving equal xcoproductz prod need equal vader need equal jarjar isoto isofrom object vader implicit val equal equal vader deriving equal xproductz prod need equal string need equal int isoto isofrom object jarjar implicit val equal equal jarjar deriving equal xproductz prod need equal int need equal string isoto isofrom typeclasses deriving api wrapped need recall name chapter allows lazy construction avoiding unnecessary work typeclass needed avoiding stack overflow recursive adts able default typeclass need provide instance deriving default case wrapping existing alt helper object default implicit val deriving deriving default extendedinvariantalt monad calling companion object darth implicit val default default darth deriving default xcoproductz prod need default vader need default jarjar isoto isofrom object vader implicit val default default vader deriving default xproductz prod need default string need default int isoto isofrom object jarjar implicit val default default jarjar deriving default xproductz prod need default int need default string isoto isofrom solved problem arbitrary arity introduced even boilerplate punchline deriving annotation come derivingplugin generates boilerplate automatically need applied top level adt deriving equal default sealed abstract class darth def widen darth final case class vader string int extends darth final case class jarjar int string extends darth also included scalazderiving instance order semigroup monoid instance show arbitrary available installing scalazderivingmagnolia scalazderivingscalacheck extra welcome example finish study scalazderiving fully worked implementation example typeclasses need know new data type aka snake road containing two higher kinded structure share type parameter sealed abstract class b type def def b b object type apair b b def unapply b p b pt b pt def apply b z az z bz b z b typically use context id tc tc typeclass meaning value instance typeclass value without knowing anything value addition method deriving api implicit evidence form pairedwith fa allowing iotaz library able perform zip traverse operation prod cop ignore parameter use directly equal default could define regular fixedarity decidable wrap extendedinvariantalt simplest approach choose implement decidablez directly performance benefit make two additional optimisation perform instance equality eq applying equalequal allowing shortcut equality identical value foldableall allowing early exit comparison false eg first field match even request equal remaining value new decidablez equal inline private final def quick b boolean aasinstanceof anyref eq basinstanceof anyref def dividez z tlist fa tlist tc prod fa g z prod implicit ev pairedwith fa equal z g g zip tc case fa quick favalueequal def choosez z tlist fa tlist tc prod fa g z cop implicit ev pairedwith fa equal z g g zip tc match case false case fa quick favalueequal default unfortunately iotaz api traverse analogy coptraverse requires u define natural transformation clunky syntax even kindprojector plugin private type k kleisli string unit new isomorphismmonaderror default k string altz default type sig unit string override val g monaderror k string override val iso kleisliiso î sig default instance î default sig ddefault val extract î namef string avaluedefault def applyz z tlist fa tlist tc prod fa f prod z implicit ev pairedwith fa default z instance tcstraverse extract map f val always î namef maybe avaluedefaulttomaybe def altlyz z tlist fa tlist tc prod fa f cop z implicit ev pairedwith fa default z instance tcscoptraverse namef id always map f headmaybe found semigroup possible define semigroup general coproducts however possible define one general product use arbitrary arity invariantapplicative new invariantapplicativez semigroup type l namef val appender î l id case fa favalueappend def xproductz z tlist fa tlist tc prod fa f prod z g z prod implicit ev pairedwith fa new semigroup z def append z z z f g g appender jsencoder jsdecoder scalazderiving provide access field name possible write json encoder decoder earlier version scalazderiving supported field name clear advantage using magnolia support dropped remain focused typeclasses lawful alt decidable magnolia magnolia macro library provides clean api writing typeclass derivation installed following buildsbt entry librarydependencies compropensive magnolia typeclass author implement following member import magnolia object myderivation type typeclass def combine ctx caseclass typeclass typeclass def dispatch ctx sealedtrait typeclass typeclass def gen typeclass macro magnoliagen magnolia api class caseclass tc def typename typename def construct b f param tc b def constructmonadic f monadic b f param tc f b f def parameter seq param tc def annotation seq class sealedtrait tc def typename typename def subtypes seq subtype tc def dispatch b value handle subtype tc b b def annotation seq helper final case class typename short string full string class param tc type ptype def label string def index int def typeclass tc ptype def dereference param ptype def default option ptype def annotation seq class subtype tc type stype def typename typename def index int def typeclass tc stype def cast stype def annotation seq monadic typeclass used constructmonadic automatically generated data type map flatmap method import mercator make sense use magnolia typeclasses abstracted divisible decidable applicative alt since abstraction provide lot extra structure test free however magnolia offer feature scalazderiving provide access field name type name annotation default value example json design choice make regard json serialisation include field null value decoding treat missing v null differently encode name coproduct deal coproducts jsobject choose sensible default include field value jsnull handle missing field null value use special field type disambiguate coproducts using type name put primitive value special field xvalue let user attach annotation coproducts product field customise format sealed class json extends annotation object json final case class null extends json final case class field f string extends json final case class hint f string extends json magnolia limited one annotation family encoding likeforlike comparison shapeless next section example jsonfield type sealed abstract class cost final case class time string extends cost final case class money jsonfield integer int extends cost start jsencoder handle sensible default object jsmagnoliaencoder type typeclass jsencoder def combine ctx caseclass jsencoder jsencoder val empty ilistempty string jsvalue val field ctxparametersfoldright empty p acc ptypeclasstojson pdereference match case jsnull acc case value plabel value acc jsobject field def dispatch ctx sealedtrait jsencoder jsencoder ctxdispatch sub val hint type jsstring subtypenameshort subtypeclasstojson subcast match case jsobject field jsobject hint field case jsobject ilist hint xvalue def gen jsencoder macro magnoliagen see magnolia api make easy access field name typeclasses parameter add support annotation handle user preference avoid looking annotation every encoding cache array although field access array nontotal guaranteed index always align performance usually victim tradeoff specialisation generalisation object jsmagnoliaencoder type typeclass jsencoder def combine ctx caseclass jsencoder jsencoder new jsencoder private val anns ctxparametersmap p val null pannotationscollectfirst case jsonnulls true getorelse false val field pannotationscollectfirst case jsonfield name name getorelse plabel null field toarray def tojson jsvalue val empty ilistempty string jsvalue val field ctxparametersfoldright empty p acc val null field anns pindex ptypeclasstojson pdereference match case jsnull null acc case value field value acc jsobject field def dispatch ctx sealedtrait jsencoder jsencoder new jsencoder private val field ctxannotationscollectfirst case jsonfield name name getorelse type private val anns ctxsubtypesmap val hint sannotationscollectfirst case jsonhint name field jsstring name getorelse field jsstring stypenameshort val xvalue sannotationscollectfirst case jsonfield name name getorelse xvalue hint xvalue toarray def tojson jsvalue ctxdispatch sub val hint xvalue anns subindex subtypeclasstojson subcast match case jsobject field jsobject hint field case jsobject hint xvalue ilistempty def gen jsencoder macro magnoliagen decoder use constructmonadic type signature similar traverse object jsmagnoliadecoder type typeclass jsdecoder def combine ctx caseclass jsdecoder jsdecoder case obj jsobject ctxconstructmonadic p ptypeclassfromjson objget plabel getorelse jsnull case fail jsobject def dispatch ctx sealedtrait jsdecoder jsdecoder case obj jsobject objget type match case jsstring hint ctxsubtypesfind typenameshort hint match case none fail valid hint obj case sub val value objget xvalue getorelse obj subtypeclassfromjson value case fail jsobject type obj case fail jsobject def gen jsdecoder macro magnoliagen adding support user preference default field value along optimisation object jsmagnoliadecoder type typeclass jsdecoder def combine ctx caseclass jsdecoder jsdecoder new jsdecoder private val null ctxparametersmap p pannotationscollectfirst case jsonnulls true getorelse false toarray private val fieldnames ctxparametersmap p pannotationscollectfirst case jsonfield name name getorelse plabel toarray def fromjson j jsvalue string j match case obj jsobject import mercator val lookup objfieldstomap ctxconstructmonadic p val field fieldnames pindex lookup get field case maybejust value ptypeclassfromjson value case pdefault match case default default case none null pindex missing field field left case none ptypeclassfromjson jsnull case fail jsobject def dispatch ctx sealedtrait jsdecoder jsdecoder new jsdecoder private val subtype ctxsubtypesmap sannotationscollectfirst case jsonhint name name getorelse stypenameshort tomap private val typehint ctxannotationscollectfirst case jsonfield name name getorelse type private val xvalues ctxsubtypesmap sub subannotationscollectfirst case jsonfield name name getorelse xvalue toarray def fromjson j jsvalue string j match case obj jsobject objget typehint match case jsstring h subtypeget h match case none fail valid h obj case sub val xvalue xvalues subindex val value objget xvalue getorelse obj subtypeclassfromjson value case fail jsobject typehint field obj case fail jsobject def gen jsdecoder macro magnoliagen call jsmagnoliaencodergen jsmagnoliadecodergen method companion data type example google map api final case class value text string value int final case class element distance value duration value status string final case class row element list element final case class distancematrix destinationaddresses list string originaddresses list string row list row status string object value implicit val encoder jsencoder value jsmagnoliaencodergen implicit val decoder jsdecoder value jsmagnoliadecodergen object element implicit val encoder jsencoder element jsmagnoliaencodergen implicit val decoder jsdecoder element jsmagnoliadecodergen object row implicit val encoder jsencoder row jsmagnoliaencodergen implicit val decoder jsdecoder row jsmagnoliadecodergen object distancematrix implicit val encoder jsencoder distancematrix jsmagnoliaencodergen implicit val decoder jsdecoder distancematrix jsmagnoliadecodergen thankfully deriving annotation support magnolia typeclass author provides file derivingconf jar containing text jsonformatjsencoderjsonformatjsmagnoliaencodergen jsonformatjsdecoderjsonformatjsmagnoliadecodergen derivingmacro call userprovided method deriving jsencoder jsdecoder final case class value text string value int deriving jsencoder jsdecoder final case class element distance value duration value status string deriving jsencoder jsdecoder final case class row element list element deriving jsencoder jsdecoder final case class distancematrix destinationaddresses list string originaddresses list string row list row status string fully automatic derivation generating implicit instance companion data type historically known semiauto derivation contrast fullauto gen made implicit object jsmagnoliaencoder implicit def gen jsencoder macro magnoliagen object jsmagnoliadecoder implicit def gen jsdecoder macro magnoliagen user import method scope get magical derivation point use scala final case class value text string value int scala import jsmagnoliaencodergen scala value hello tojson re jsobject text hello value may sound tempting involves least amount typing two caveat macro invoked every use site ie every time call tojson slows compilation also produce object runtime impact runtime performance unexpected thing may derived first caveat self evident unexpected derivation manifest subtle bug consider would happen deriving jsencoder final case class foo option string forgot provide implicit derivation option might expect foo hello look like would instead type get hello magnolia derived option encoder u confusing would rather compiler tell u forgot something full auto therefore recommended shapeless shapeless library notoriously complicated library scala reason reputation take implicit language feature extreme creating kind generic programming language level type entirely foreign concept scalaz try limit use implicit language feature typeclasses sometimes ask compiler provide u evidence relating type example liskov leibniz relationship inject free algebra scalazcoproduct algebra necessary understand shapeless functional programmer chapter becomes much skip next section install shapeless add following buildsbt librarydependencies comchuusai shapeless core shapeless hlist coproduct data type package shapeless sealed trait hlist final case class h hlist head h tail extends hlist sealed trait nnil extends hlist case object hnil extends hnil def h h h h hnil h sealed trait coproduct sealed trait h coproduct extends coproduct final case class inl h coproduct head h extends h final case class inr h coproduct tail extends h sealed trait cnil extends coproduct implementation generic representation product coproducts respectively sealed trait hnil convenience never need type hniltype shapeless clone isoset datatype called generic allows u move adt generic representation trait generic type repr def repr def r repr object generic type aux r generic type repr r def apply implicit g generic aux grepr g implicit def materialize r aux r macro many type shapeless type member repr aux type alias companion make second type visible allows u request generic foo type foo without provide generic representation generated macro scala import shapeless scala final case class foo string b long generic foo foo hello re string long hnil hello hnil scala generic foo hello hnil re foo foo scala sealed abstract class bar case object irish extends bar case object english extends bar scala generic bar irish re englishtype irishtype cniltype inl irish scala generic bar inl irish re bar irish complementary labelledgeneric includes field name scala import shapeless labelled scala final case class foo string b long scala labelledgeneric foo foo hello re string keytag symbol tagged string string long keytag symbol tagged string b long hnil hello hnil scala sealed abstract class bar case object irish extends bar case object english extends bar scala labelledgeneric bar irish re irishtype keytag symbol tagged string irish irishtype englishtype keytag symbol tagged string english englishtype cniltype inl irish note value labelledgeneric representation generic representation field name exist type erased runtime never need type keytag manually use type alias type fieldtype k v v keytag k v want access field name fieldtype k ask implicit evidence witnessaux k allows u access value k runtime superficially need know shapeless able derive typeclass however thing get increasingly complex proceed increasingly complex example example equal typical pattern follow extend typeclass wish derive put shapeless code companion give u implicit scope compiler search without requiring complex import trait derivedequal extends equal object derivedequal entry point shapeless derivation method gen requiring two type parameter deriving r generic representation ask genericaux r relating r instance derived typeclass r begin signature simple implementation import shapeless object derivedequal def gen r derivedequal implicit g genericaux r equal equal r equal gto gto reduced problem providing implicit equal r r generic representation first consider product r hlist signature want implement implicit def hcons h equal hlist derivedequal derivedequal h implement head tail compiler able recurse method reach end list need provide instance empty hnil implicit def hnil derivedequal hnil implement method implicit def hcons h equal hlist derivedequal derivedequal h equal h equal equal equal implicit val hnil derivedequal hnil true coproducts want implement signature implicit def ccons h equal coproduct derivedequal derivedequal h implicit def cnil derivedequal cnil scalaz shapeless share many type name mixing often need exclude certain element import eg import scalaz coproduct scalaz import shapeless cnil never called typeclass like equal type parameter contravariant position compiler know provide stub implicit val cnil derivedequal cnil syserror impossible coproduct case compare two thing align inl inr implicit def ccons h equal coproduct derivedequal derivedequal h case inl inl equal h equal case inr inr equal equal case false noteworthy method align concept conquer hnil hlist coproduct however get advantage implementing decidable must start scratch writing test code test thing simple adt sealed abstract class foo final case class bar string extends foo final case class faz b boolean int extends foo final case object baz extends foo need provide instance companion object foo implicit val equal equal foo derivedequalgen object bar implicit val equal equal bar derivedequalgen object faz implicit val equal equal faz derivedequalgen final case object baz extends foo implicit val equal equal baztype derivedequalgen compile error ambiguous implicit value error value hnil object derivedequal type derivedequal hnil error value cnil object derivedequal type derivedequal cnil error match expected type derivedequal r error equal baztype derivedequalgen error welcome shapeless compilation error problem evident error compiler unable work r get caught thinking something else need provide explicit type parameter calling gen eg implicit val equal equal baztype derivedequalgen baztype hnil use generic macro help u let compiler infer generic representation final case object baz extends foo implicit val generic generic baztype implicit val equal equal baztype derivedequalgen baztype genericrepr point ignore red squigglies trust compiler point shapeless departs ide support reason fix problem type signature def gen r derivedequal implicit g genericaux r equal desugars def gen r implicit r derivedequal r g genericaux r equal scala compiler solves type constraint left right find many different solution derivedequal r constraining genericaux r another way solve use context bound rather present fully working version feel important show obvious code fails reality shapeless another thing could reasonably done sealed derivedequal trait derived version valid sealed trait compatible sam type living edge expect get cut mind longer need implicit val generic explicit type parameter call gen wire deriving adding entry derivingconf assuming want override scalazderiving implementation scalazequalfommilderivedequalgen write deriving equal sealed abstract class foo deriving equal final case class bar string extends foo deriving equal final case class faz b boolean int extends foo deriving equal final case object baz replacing scalazderiving version mean compile time get slower compiler solving n implicit search product n field coproduct n product whereas scalazderiving magnolia note using scalazderiving magnolia put deriving top member adt shapeless must add entry however implementation still bug fails recursive type runtime eg deriving equal sealed trait atree deriving equal final case class leaf value string extends atree deriving equal final case class branch left atree right atree extends atree scala val leaf leaf hello val leaf leaf goodbye val branch branch branch val atree branch branch val atree branch branch scala assert error javalangnullpointerexception error derivedequal shape derivedequal anonfun hcons reason happens equal tree depends equal branch depends equal tree recursion bang must loaded lazily eagerly scalazderiving magnolia deal lazy automatically shapeless responsibility typeclass author macro type cached strict lazy modify type inference behaviour allowing u achieve laziness require pattern follow use cached strict entry point lazy around h instance best depart context bound sam type entirely point sealed trait derivedequal extends equal object derivedequal def gen r implicit g genericaux r r cached strict derivedequal r equal new equal def equal quick rvaluevalueequal gto gto implicit def hcons h hlist implicit h lazy equal h derivedequal derivedequal h new derivedequal h def equal h h quick hvalueequal tequal implicit val hnil derivedequal hnil new derivedequal hnil def equal unused hnil unused hnil true implicit def ccons h coproduct implicit h lazy equal h derivedequal derivedequal h new derivedequal h def equal h h match case inl inl quick hvalueequal case inr inr tequal case false implicit val cnil derivedequal cnil new derivedequal cnil def equal unused cnil unused cnil syserror impossible inline private final def quick b boolean aasinstanceof anyref eq basinstanceof anyref optimised using quick shortcut scalazderiving call without runtime exception example default new snare implementation typeclass type parameter covariant position create hlist coproduct value must provide value cnil case corresponds case coproduct able provide value sealed trait deriveddefault extends default object deriveddefault def gen r implicit g genericaux r r cached strict deriveddefault r default new default def default rvaluevaluedefaultmap gfrom implicit def hcons h hlist implicit h lazy default h deriveddefault deriveddefault h new deriveddefault h def default head hvaluedefault tail tdefault yield head tail implicit val hnil deriveddefault hnil new deriveddefault hnil def default hnilright implicit def ccons h coproduct implicit h lazy default h deriveddefault deriveddefault h new deriveddefault h def default hvaluedefaultmap inl orelse tdefaultmap inr implicit val cnil deriveddefault cnil new deriveddefault cnil def default valid coproduct left much could draw analogy equal decidable see relationship alt point hnil hcons ccons little learned example like semigroup skip encoders decoder example jsencoder able reproduce magnolia json encoder must able access field name class name annotation user preference default value case class begin creating encoder handle sensible default get field name use labelledgeneric instead generic defining type head element use fieldtype k h instead h witnessaux k provides value field name runtime method going return jsobject rather returning jsvalue specialise create derivedjsencoder different type signature jsencoder import shapeless labelled sealed trait derivedjsencoder r def tojsfields r r ilist string jsvalue object derivedjsencoder def gen r implicit g labelledgenericaux r r cached strict derivedjsencoder r jsencoder new jsencoder def tojson jsobject rvaluevaluetojsfields gto implicit def hcons k symbol h hlist implicit k witnessaux k h lazy jsencoder h derivedjsencoder derivedjsencoder fieldtype k h new derivedjsencoder fieldtype k h private val field kvaluename def tojsfields ht fieldtype k h ht match case head tail val rest ttojsfields tail hvaluetojson head match case jsnull rest case value field value rest implicit val hnil derivedjsencoder hnil new derivedjsencoder hnil def tojsfields h hnil ilistempty implicit def ccons k symbol h coproduct implicit k witnessaux k h lazy jsencoder h derivedjsencoder derivedjsencoder fieldtype k h new derivedjsencoder fieldtype k h private val hint type jsstring kvaluename def tojsfields ht fieldtype k h ht match case inl head hvaluetojson head match case jsobject field hint field case v ilistsingle xvalue v case inr tail ttojsfields tail implicit val cnil derivedjsencoder cnil new derivedjsencoder cnil def tojsfields c cnil syserror impossible pattern emerged many shapeless derivation library introduce default implicit trait producthint def null field string boolean def fieldname field string string object producthint implicit def default producthint new producthint def null field string false def fieldname field string field user supposed provide custom instance producthint companion package object terrible idea relies fragile implicit ordering source typeclass decoherence derive jsencoder foo get different result depending producthint foo scope best avoided shapeless selects codepaths compiletime based presence annotation lead optimised code expense code repetition mean number annotation dealing subtypes must manageable find writing amount code change three annotation one containing customisation parameter case class json null boolean field option string hint option string extends annotation user annotation must provide three value since default value convenience method available annotation constructor write custom extractor change magnolia code object json object null def unapply j json boolean jnulls object field def unapply j json option string jfield object hint def unapply j json option string jhint request annotation json case class sealed trait get access annotation must write hcons ccons dealing case evidence generated annotation present therefore introduce lower priority implicit scope put evidence also request annotationsaux json j evidence obtain hlist json annotation type must provide hcons ccons dealing case annotation support one annotation must write four time much code let start rewriting jsencoder handling user code annotation code us json fail compile good safety net must add j type derivedjsencoder thread annotation tojsobject method hcons ccons evidence provides instance derivedjsencoder nonetype annotation move lower priority deal annotation json higher priority note evidence j listed r important since compiler must first fix type j solve r sealed trait derivedjsencoder r j hlist def tojsfields r r anns j ilist string jsvalue object derivedjsencoder extends def gen r j hlist implicit g labelledgenericaux r j annotationsaux json j r cached strict derivedjsencoder r j jsencoder new jsencoder def tojson jsobject rvaluevaluetojsfields gto j implicit def hnil derivedjsencoder hnil hnil new derivedjsencoder hnil hnil def tojsfields h hnil hnil ilistempty implicit def cnil derivedjsencoder cnil hnil new derivedjsencoder cnil hnil def tojsfields c cnil hnil syserror impossible private jsonformat trait implicit def hcons k symbol h hlist j hlist implicit k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h nonetype j new derivedjsencoder fieldtype k h nonetype j private val field kvaluename def tojsfields ht fieldtype k h anns nonetype j ht match case head tail val rest ttojsfields tail annstail hvaluetojson head match case jsnull rest case value field value rest implicit def ccons k symbol h coproduct j hlist implicit k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h nonetype j new derivedjsencoder fieldtype k h nonetype j private val hint type jsstring kvaluename def tojsfields ht fieldtype k h anns nonetype j ht match case inl head hvaluetojson head match case jsobject field hint field case v ilistsingle xvalue v case inr tail ttojsfields tail annstail add type signature six new method covering possibility annotation note support one annotation position user provides multiple annotation anything first silently ignored running name thing arbitrarily call annotated annotation custom annotation field object derivedjsencoder extends implicit def hconsannotated k symbol h hlist j hlist implicit annotation json k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h nonetype j implicit def cconsannotated k symbol h coproduct j hlist implicit annotation json k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h nonetype j implicit def hconsannotatedcustom k symbol h hlist j hlist implicit annotation json k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h json j implicit def cconsannotatedcustom k symbol h coproduct j hlist implicit annotation json k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h json j private jsonformat trait implicit def hconscustom k symbol h hlist j hlist implicit k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h json j implicit def cconscustom k symbol h coproduct j hlist implicit k witnessaux k h lazy jsencoder h derivedjsencoder j derivedjsencoder fieldtype k h json j actually need hconsannotated hconsannotatedcustom anything since annotation case class mean anything encoding product used cconsannotated therefore delete two method cconsannotated cconsannotatedcustom defined new derivedjsencoder fieldtype k h nonetype j private val hint fieldgetorelse type jsstring kvaluename def tojsfields ht fieldtype k h anns nonetype j ht match case inl head hvaluetojson head match case jsobject field hint field case v ilistsingle xvalue v case inr tail ttojsfields tail annstail new derivedjsencoder fieldtype k h json j private val hintfield fieldgetorelse type def tojsfields ht fieldtype k h anns json j ht match case inl head val ann annsheadget hvaluetojson head match case jsobject field val hint hintfield jsstring annhintgetorelse kvaluename hint field case v val xvalue annfieldgetorelse xvalue ilistsingle xvalue v case inr tail ttojsfields tail annstail use head get may concerned recall type meaning method total safe use hconscustom cconscustom written new derivedjsencoder fieldtype k h json j def tojsfields ht fieldtype k h anns json j ht match case head tail val ann annsheadget val next ttojsfields tail annstail hvaluetojson head match case jsnull annnulls next case value val field annfieldgetorelse kvaluename field value next new derivedjsencoder fieldtype k h json j def tojsfields ht fieldtype k h anns json j ht match case inl head val ann annsheadget hvaluetojson head match case jsobject field val hint type jsstring annhintgetorelse kvaluename hint field case v val xvalue annfieldgetorelse xvalue ilistsingle xvalue v case inr tail ttojsfields tail annstail obviously lot boilerplate looking closely one see method implemented efficiently possible information available codepaths selected compiletime rather runtime performance obsessed may able refactor code annotation information available advance rather injected via tojsfields method another layer indirection absolute performance could also treat customisation separate annotation would multiply amount code written yet additional cost compilation time downstream user optimisation beyond scope book possible people ability shift work runtime compiletime one appealing thing generic programming one caveat need aware labelledgeneric compatible scalaz workaround say want effectively ignore tag add following derivation rule companion encoder decoder object jsencoder implicit def tagged jsencoder z jsencoder z jsencoder contramap tagunwrap object jsdecoder implicit def tagged jsdecoder z jsdecoder z jsdecoder map tag would expect able derive jsdecoder something like tradetemplate chapter final case class tradetemplate otc option boolean tagslast object tradetemplate implicit val encoder jsencoder tradetemplate derivedjsencodergen instead get compiler error error could find implicit value parameter g labelledgenericaux r error implicit val encoder jsencoder tradetemplate derivedjsencodergen error error message helpful always workaround introduce evidence h z lower priority implicit scope call code compiler found first place object derivedjsencoder extends private jsonformat trait derivedjsencodertype workaround http implicit def hconstagged k symbol h z hlist j hlist implicit k witnessaux k h lazy jsencoder h z derivedjsencoder j derivedjsencoder fieldtype k h z nonetype j hcons k h implicit def hconscustomtagged k symbol h z hlist j hlist implicit k witnessaux k h lazy jsencoder h z derivedjsencoder j derivedjsencoder fieldtype k h z json j hconscustom k h thankfully need consider product since coproducts tagged jsdecoder decoding side much expect based previous example construct instance fieldtype k h helper field k h h supporting sensible default mean write sealed trait derivedjsdecoder def fromjsobject j jsobject string object derivedjsdecoder def gen r implicit g labelledgenericaux r r cached strict derivedjsdecoder r jsdecoder new jsdecoder def fromjson j jsvalue j match case jsobject rvaluevaluefromjsobject map gfrom case fail jsobject implicit def hcons k symbol h hlist implicit k witnessaux k h lazy jsdecoder h derivedjsdecoder derivedjsdecoder fieldtype k h new derivedjsdecoder fieldtype k h private val fieldname kvaluename def fromjsobject j jsobject val value jget fieldname getorelse jsnull head hvaluefromjson value tail tfromjsobject j yield field k head tail implicit val hnil derivedjsdecoder hnil new derivedjsdecoder hnil private val nil hnilright string def fromjsobject j jsobject nil implicit def ccons k symbol h coproduct implicit k witnessaux k h lazy jsdecoder h derivedjsdecoder derivedjsdecoder fieldtype k h new derivedjsdecoder fieldtype k h private val hint type jsstring kvaluename def fromjsobject j jsobject jfieldselement hint jget xvalue case xvalue hvaluefromjson xvalue case hvaluefromjson j map h inl field k h else tfromjsobject j map inr implicit val cnil derivedjsdecoder cnil new derivedjsdecoder cnil def fromjsobject j jsobject fail jsobject type field j adding user preference via annotation follows route derivedjsencoder mechanical left exercise reader one final thing missing case class default value request evidence big problem longer use derivation mechanism product coproducts evidence never created coproducts solution quite drastic must split derivedjsdecoder derivedcoproductjsdecoder derivedproductjsdecoder focus attention derivedproductjsdecoder use map faster field lookup sealed trait derivedproductjsdecoder r j hlist hlist private jsonformat def fromjsobject j map string jsvalue anns j default string r request evidence default value defaultaux duplicate method deal case default value however shapeless merciful provides defaultasoptionsaux letting u handle default runtime object derivedproductjsdecoder def gen r j hlist hlist implicit g labelledgenericaux r j annotationsaux json j defaultasoptionsaux r cached strict derivedproductjsdecoder r j jsdecoder new jsdecoder def fromjson j jsvalue j match case jsobject rvaluevaluefromjsobject ofieldstomap j map gfrom case fail jsobject must move hcons hnil method onto companion new sealed typeclass handle default value object derivedproductjsdecoder implicit def hnil derivedproductjsdecoder hnil hnil hnil new derivedproductjsdecoder hnil hnil hnil private val nil hnilright string def fromjsobject j stringymap jsvalue hnil default hnil nil implicit def hcons k symbol h hlist j hlist hlist implicit k witnessaux k h lazy jsdecoder h derivedproductjsdecoder j derivedproductjsdecoder fieldtype k h nonetype j option h new derivedproductjsdecoder fieldtype k h nonetype j option h private val fieldname kvaluename def fromjsobject j stringymap jsvalue anns nonetype j default option h head jget fieldname match case maybejust v hvaluefromjson v case defaultshead match case default default case none hvaluefromjson jsnull tail tfromjsobject j annstail defaultstail yield field k head tail longer use deriving product coproducts one entry derivingconf file oh forget add support object derivedproductjsdecoder extends private jsonformat trait derivedproductjsdecodertype implicit def hconstagged k symbol h z hlist j hlist hlist implicit k witnessaux k h lazy jsdecoder h z derivedproductjsdecoder j derivedproductjsdecoder fieldtype k h z nonetype j option h z hcons k h implicit def hconscustomtagged k symbol h z hlist j hlist hlist implicit k witnessaux k h lazy jsdecoder h z derivedproductjsdecoder j derivedproductjsdecoder fieldtype k h z json j option h z hconscustomtagged k h complicated derivation shapeless allows lot kind derivation possible scalazderiving magnolia example encoder decoder possible magnolia consider xml model xmlformat deriving equal show arbitrary sealed abstract class xnode deriving equal show arbitrary final case class xtag name string attrs ilist xattr child ilist xtag body maybe xstring deriving equal show arbitrary final case class xattr name string value xstring deriving show xderiving equal monoid arbitrary final case class xchildren tree ilist xtag extends xnode deriving show xderiving equal semigroup arbitrary final case class xstring text string extends xnode given nature xml make sense separate encoder decoder pair xchildren xstring content could provide derivation xchildren shapeless want special case field based kind typeclass well option field could even require field annotated encoded name addition decoding wish different strategy handling xml element body multipart depending type semigroup monoid neither many developer believe xml simply verbose form json angle bracket instead curlies however attempt write round trip converter xnode jsvalue convince u json xml different specie conversion possible casebycase basis example urlquerywriter along similar line xmlformat dronedynamicagents application could benefit typeclass derivation urlquerywriter typeclass built urlencodedwriter instance field entry support coproducts typeclass trait urlquerywriter def tourlquery urlquery trait derivedurlquerywriter extends urlquerywriter object derivedurlquerywriter def gen repr implicit g labelledgenericaux repr cr cached strict derivedurlquerywriter repr urlquerywriter crvaluevaluetourlquery gto implicit val hnil derivedurlquerywriter hnil urlquery ilistempty implicit def hcons key symbol remaining hlist implicit key witnessaux key lv lazy urlencodedwriter dr derivedurlquerywriter remaining derivedurlquerywriter fieldtype key remaining case head tail val first keyvaluename urldecoderdecode lvvaluetourlencoded head value val rest drtourlquery tail urlquery first restparams reasonable ask line actually improvement line manual instance application need decision taken case case basis completeness urlencodedwriter derivation written magnolia object urlencodedwritermagnolia type typeclass urlencodedwriter def combine ctx caseclass urlencodedwriter refinedunsafeapply ctxparametersmap p plabel ptypeclasstourlencoded pdereference tolistintercalate def gen urlencodedwriter macro magnoliagen dark side derivation fully automatic derivation anger fear aggression dark side derivation easily flow quick join fight start dark path forever dominate compiler consume ancient shapeless master addition warning fully automatic derivation mentioned magnolia shapeless much worse fully automatic shapeless derivation common cause slow compiles also painful source typeclass coherence bug fully automatic derivation def gen implicit call recurse entry adt way implicit scope work imported implicit def higher priority custom instance companion creating source typeclass decoherence example consider code gen implicit import derivedjsencoder xderiving jsencoder final case class foo string final case class bar foo foo might expect fullauto encoded form bar hello look like used xderiving foo instead foo hello worse yet implicit method added companion typeclass meaning typeclass always derived point use user unable opt fundamentally writing generic program implicits ignored compiler depending scope meaning lose compiletime safety motivation programming type level first place everything much simpler light side implicit used coherent globally unique typeclasses fear boilerplate path dark side fear lead anger anger lead hate hate lead suffering performance silver bullet come typeclass derivation axis consider performance compiletime runtime compile time come compilation time shapeless outlier uncommon see small project expand one second compile one minute compile investigate compilation issue profile application scalacprofiling plugin addcompilerplugin chepflscala scalacprofiling scalacoptions seq ystatistics typer p scalacprofiling noprofiledb produce output generate flame graph typical shapeless derivation get lively chart almost entire compile time spent implicit resolution note also includes compiling scalazderiving magnolia manual instance shapeless computation dominate work problem shapeless derivation compiler get stuck infinite loop must killed runtime performance move runtime performance answer always depends assuming derivation logic written efficient way possible know faster experimentation jsonformat library us java microbenchmark harness jmh model map geojson google map twitter contributed andriy plokhotnyuk three test per model encoding adt jsvalue successful decoding jsvalue back adt failure decoding jsvalue data error applied following implementation magnolia shapeless manually written equivalent optimisation result operation per second higher better powerful desktop computer using single thread jsonformatjmh run wi encode benchmark mode cnt score error unit geojsonbenchmarksencodemagnolia thrpt ops geojsonbenchmarksencodeshapeless thrpt ops geojsonbenchmarksencodemanual thrpt ops googlemapsapibenchmarksencodemagnolia thrpt ops googlemapsapibenchmarksencodeshapeless thrpt ops googlemapsapibenchmarksencodemanual thrpt ops twitterapibenchmarksencodemagnolia thrpt ops twitterapibenchmarksencodeshapeless thrpt ops twitterapibenchmarksencodemanual thrpt ops see manual implementation lead followed magnolia shapeless performance manual instance decoding jsonformatjmh run wi decode success benchmark mode cnt score error unit geojsonbenchmarksdecodemagnoliasuccess thrpt ops geojsonbenchmarksdecodeshapelesssuccess thrpt ops geojsonbenchmarksdecodemanualsuccess thrpt ops googlemapsapibenchmarksdecodemagnoliasuccess thrpt ops googlemapsapibenchmarksdecodeshapelesssuccess thrpt ops googlemapsapibenchmarksdecodemanualsuccess thrpt ops twitterapibenchmarksdecodemagnoliasuccess thrpt ops twitterapibenchmarksdecodeshapelesssuccess thrpt ops twitterapibenchmarksdecodemanualsuccess thrpt ops tighter race second place shapeless magnolia keeping pace finally decoding jsvalue contains invalid data intentionally awkward position jsonformatjmh run wi decode error benchmark mode cnt score error unit geojsonbenchmarksdecodemagnoliaerror thrpt ops geojsonbenchmarksdecodeshapelesserror thrpt ops geojsonbenchmarksdecodemanualerror thrpt ops googlemapsapibenchmarksdecodemagnoliaerror thrpt ops googlemapsapibenchmarksdecodeshapelesserror thrpt ops googlemapsapibenchmarksdecodemanualerror thrpt ops twitterapibenchmarksdecodemagnoliaerror thrpt ops twitterapibenchmarksdecodeshapelesserror thrpt ops twitterapibenchmarksdecodemanualerror thrpt ops thought seeing pattern magnolia shapeless win race decoding invalid geojson data manual instance win google map twitter challenge want include scalazderiving comparison compare equivalent implementation equal tested two value contain content true two value contain slightly different content false jsonformatjmh run wi equal benchmark mode cnt score error unit geojsonbenchmarksequalscalaztrue thrpt ops geojsonbenchmarksequalmagnoliatrue thrpt ops geojsonbenchmarksequalshapelesstrue thrpt ops geojsonbenchmarksequalmanualtrue thrpt ops googlemapsapibenchmarksequalscalaztrue thrpt ops googlemapsapibenchmarksequalmagnoliatrue thrpt ops googlemapsapibenchmarksequalshapelesstrue thrpt ops googlemapsapibenchmarksequalmanualtrue thrpt ops twitterapibenchmarksequalscalaztrue thrpt ops twitterapibenchmarksequalmagnoliatrue thrpt ops twitterapibenchmarksequalshapelesstrue thrpt ops twitterapibenchmarksequalmanualtrue thrpt ops expected manual instance far ahead crowd shapeless mostly leading automatic derivation scalazderiving make great effort geojson fall far behind google map twitter test false test jsonformatjmh run wi equal benchmark mode cnt score error unit geojsonbenchmarksequalscalazfalse thrpt ops geojsonbenchmarksequalmagnoliafalse thrpt ops geojsonbenchmarksequalshapelessfalse thrpt ops geojsonbenchmarksequalmanualfalse thrpt ops googlemapsapibenchmarksequalscalazfalse thrpt ops googlemapsapibenchmarksequalmagnoliafalse thrpt ops googlemapsapibenchmarksequalshapelessfalse thrpt ops googlemapsapibenchmarksequalmanualfalse thrpt ops twitterapibenchmarksequalscalazfalse thrpt ops twitterapibenchmarksequalmagnoliafalse thrpt ops twitterapibenchmarksequalshapelessfalse thrpt ops twitterapibenchmarksequalmanualfalse thrpt ops runtime performance scalazderiving magnolia shapeless usually good enough realistic writing application need able encode value json per second single core jvm problem look c unlikely derived instance bottleneck even manually written escape hatch powerful therefore dangerous easy introduce typo bug even performance regression accident writing manual instance conclusion hokey derivation ancient macro match good hand written instance side kid could spend lifetime asyncprofiler investigating cpu object allocation flame graph make implementation faster example optimisation actual jsonformat codebase reproduced optimised jsobject field lookup inclusion xmap map contramap relevant typeclasses fair say codebase primarily focus readability optimisation still achieves incredible performance summary deciding technology use typeclass derivation feature chart may help feature scalaz magnolia shapeless manual deriving yes yes yes â law yes â â â fast compiles yes yes â yes field name â yes yes â annotation â yes partially â default value â yes caveat â complicated â â painfully â performance â â â hold beer prefer scalazderiving possible using magnolia encoders decoder performance larger concern escalating shapeless complicated derivation compilation time concern manual instance always escape hatch special case achieve ultimate performance avoid introducing typo bug manual instance using code generation tool wiring application finish apply learnt wire example application implement http client server using pure fp library source code dronedynamicagents application available along source code http githubcomfommilfpmortals example folder necessary computer read chapter many reader may prefer explore codebase addition text part application left unimplemented exercise reader see readme instruction overview main application requires implementation dynagents algebra trait dynagents f def initial f worldview def update old worldview f worldview def act world worldview f worldview implementation already dynagentsmodule requires implementation drone machine algebra require jsonclient localclock algebra etc etc etc helpful get complete picture algebra module interpreter application layout source code dda algebrascala dynagentsscala mainscala interpreter dronemodulescala googlemachinesmodulescala http jsonclientscala encoding urlencodedscala urlencodedwriterscala urlqueryscala urlquerywriterscala accessscala authscala refreshscala interpreter blazeuserinteractionscala interpreter blazejsonclientscala o browserscala time epochscala localclockscala sleepscala signature algebra summarised trait sleep f def sleep time finiteduration f unit trait localclock f def f epoch trait jsonclient f def get jsdecoder uri string refined url header ilist string string f def post p urlencodedwriter jsdecoder uri string refined url payload p header ilist string string f trait auth f def authenticate f codetoken trait access f def access code codetoken f refreshtoken bearertoken trait refresh f def bearer refresh refreshtoken f bearertoken trait f method jsonclient transparently trait userinteraction f def start f string refined url def open uri string refined url f unit def stop f codetoken trait drone f def getbacklog f int def getagents f int trait machine f def gettime f epoch def getmanaged f nonemptylist machinenode def getalive f machinenode epoch def start node machinenode f unit def stop node machinenode f unit note signature previous chapter refactored use scalaz data type know superior stdlib data type xderiving order arbitrary final case class epoch millis long extends anyval deriving order show final case class machinenode id string deriving equal show final case class codetoken token string redirecturi string refined url xderiving equal show configreader final case class refreshtoken token string extends anyval deriving equal show configreader final case class bearertoken token string expires epoch deriving configreader final case class token refreshtoken server serverconfig deriving configreader final case class appconfig drone bearertoken machine xderiving urlencodedwriter final case class urlquery params ilist string string extends anyval typeclasses typeclass trait urlencodedwriter def tourlencoded string refined urlencoded typeclass trait urlquerywriter def tourlquery urlquery derive useful typeclasses using scalazderiving magnolia configreader typeclass pureconfig library used read runtime configuration hocon property file without going detail implement algebra need know dependency graph dynagentsmodule final class dynagentsmodule f applicative drone f machine f extends dynagents f final class dronemodule f h f extends drone f final class googlemachinesmodule f h f extends machine f two module implementing one use refresh algebra google another reuses nonexpiring bearertoken drone final class f token refreshtoken h jsonclient f localclock f refresh f implicit f monadstate f bearertoken extends f final class bearerjsonclientmodule f monad bearer bearertoken h jsonclient f extends f far seen requirement f applicative f monad f monadstate f bearertoken requirement satisfied using statet task bearertoken context however algebra one interpreter using task final class localclocktask extends localclock task final class sleeptask extends sleep task recall algebra provide liftm companion see chapter monad transformer library allowing u lift localclock task desired statet task bearertoken context everything consistent unfortunately end story thing get complicated go next layer jsonclient interpreter using different context final class blazejsonclient f h client task implicit f monaderror f jsonclienterror monadio f throwable extends jsonclient f object blazejsonclient def apply f implicit f monaderror f jsonclienterror monadio f throwable task jsonclient f note blazejsonclient constructor return task jsonclient f jsonclient f act creating client effectful mutable connection pool created managed internally requires monadstate blazejsonclient requires monaderror monadio context likely combination statet eithert task jsonclienterror bearertoken monad stack monad stack automatically provide appropriate instance monadstate monaderror nested need think hardcoded implementation interpreter returned eithert task error blazejsonclient would make lot harder instantiate must forget need provide refreshtoken googlemachinesmodule could ask user legwork nice provide separate oneshot application us auth access algebra authmodule accessmodule implementation bring additional dependency thankfully change f context final class authmodule f monad config serverconfig userinteraction f extends auth f final class accessmodule f monad config serverconfig h jsonclient f localclock f extends access f final class blazeuserinteraction private pserver promise void server task ptoken promise void string extends userinteraction task object blazeuserinteraction def apply task blazeuserinteraction interpreter userinteraction complex part codebase start http server sends user visit webpage browser capture callback server return result safely shutting web server rather using statet manage state use promise primitive ioeffect always use promise ioref instead statet writing io interpreter since allows u contain abstraction use statet would performance impact entire application would also leak internal state management main application would become responsible providing initial value also use statet scenario need semantics provided promise main ugliest part fp making sure monad aligned tends happen main entrypoint main loop state initial true state update state state act state good news actual code look like old fget updated aupdate old changed aact updated fput changed ssleep yield f hold state world monadstate f worldview put method called step repeat forever calling step f forever unit two approach take explore first simplest construct one monad stack algebra compatible everything get liftm added lift larger stack code want write oneshot authentication mode def auth name string task unit config readconfig serverconfig name server ui blazeuserinteraction auth new authmodule config ui codetoken authauthenticate client blazejsonclient clock new localclocktask access new accessmodule config client clock token accessaccess codetoken putstrln got token token yield run readconfig putstrln library call think task interpreter algebra read runtime configuration print string screen code compile two reason firstly need consider monad stack going blazejsonclient constructor return task jsonclient method require monaderror jsonclienterror provided eithert therefore construct common monad stack entire comprehension type h eithert task jsonclienterror unfortunately mean must liftm everything return task add quite lot boilerplate unfortunately liftm method take type shape h take type shape h need create type alias help compiler type ht f eithert f jsonclienterror type h ht task call liftm ht receive task config readconfig serverconfig name server liftm ht ui blazeuserinteraction liftm ht auth new authmodule config ui codetoken authauthenticateliftm ht client blazejsonclient h liftm ht clock new localclocktask access new accessmodule config client clock token accessaccess codetoken putstrln got token token liftm ht yield still compile clock localclock task accessmodule requires localclock h simply add necessary liftm boilerplate companion localclock lift entire algebra clock localclockliftm task ht new localclocktask everything compiles second approach wiring application complex necessary conflict monad stack need main loop perform analysis find following needed monaderror f jsonclienterror us jsonclient monadstate f bearertoken us monadstate f worldview main loop unfortunately two monadstate requirement conflict could construct data type capture state program leaky abstraction instead nest comprehension provide state needed need think three layer call f g h type ht f eithert f jsonclienterror type gt f statet f bearertoken type ft f statet f worldview type h ht task type g gt h type f ft g bad news work one layer time task want f go step type taliftm ht liftm gt liftm ft likewise lifting algebra call liftm multiple time get sleep f type val sleep f import sleepliftm liftm liftm liftm new sleeptask get localclock g two lift val localclock g import localclockliftm liftm liftm new localclocktask main application becomes def agent bearer bearertoken task unit config readconfig appconfig blaze blazejsonclient g val bearerclient new bearerjsonclientmodule bearer blaze val drone new dronemodule bearerclient val refresh new refreshmodule configmachinesserver blaze val oauthclient new configmachinestoken blaze refresh val machine new googlemachinesmodule oauthclient val agent new dynagentsmodule drone machine start agentsinitial val fagents dynagentsliftm g ft agent step fagents forever unit run start yield eval bearer run yield outer loop using task middle loop using g inner loop using f call run start eval bearer provide initial state statet part application run reveal eithert error call two application entry point safeapp object main extends safeapp def run args list string io void exitstatus argscontains machine auth machine else agent bearertoken invalid epoch attempt void map case exitstatusexitnow case err exitstatusexitnow run runmain fommilddamain machine info running fork fommilddamain machine info service bound address info created new window existing browser session info header host connection keepalive useragent info post http info got token elided yay blaze implement http client server third party library interpreter client server algebra called blaze need following dependency val librarydependencies seq blazejsonclient need import import import entityencoder mediatype import contenttype import import blazeclientconfig client module summarised final class client f val shutdown f unit implicit f monaderror f throwable def fetch req request f f response f f f request response data type final case class request f method method uri uri header header body entitybody f def withbody implicit f monad f entityencoder f f request f final case class response f status status header header body entitybody f made final case class header header list header final case class header name string value string final case class uri object uri total use guaranteed url def unsafefromstring string uri final case class status code int def issuccess boolean type entitybody f f byte entitybody type alias stream library stream data type thought effectful lazy pullbased stream data implemented free monad exception catching interruption stream take two type parameter effect type content type efficient internal representation batching data example although using stream f byte actually wrapping raw array byte arrives network need convert header url representation version required def convert header ilist string string headersfoldright list case key value acc key value acc def convert uri string refined url urivalue already validated string get post method require conversion response type factor single function handler import jsonclienterror final class blazejsonclient f private h client task implicit f monaderror f error monadio f throwable extends jsonclient f def handler jsdecoder resp task task error respstatusissuccess tasknow jsonclientservererror respstatuscode left else text respbodythrough compilefoldmonoid re jsparser text flatmap leftmap jsonclientdecodingerror yield re convert stream task byte stream task string compilefoldmonoid interpreting task combining part using monoid string giving u task string parse string json use jsdecoder create required output implementation get def get jsdecoder uri string refined url header ilist string string f iliftio hfetch task uri convert uri header convert header handler emap identity get plumbing convert input type call fetch client handler give u back task error need return f therefore use monadioliftio create f error emap push error f unfortunately try compile code fail error look something like error could find implicit value parameter error f catseffectsync scalazioeffecttask basically something missing cat reason failure using different core fp library scalaz thankfully scalazioeffect provides compatibility layer shim project provides seamless implicit conversion get code compile dependency librarydependencies seq comcodecommit shim orgscalaz scalazioeffectcats import import shim import scalazioeffectcatz implementation post similar must also provide instance entityencoder task string refined urlencoded thankfully entityencoder typeclass provides convenience let u derive one existing string encoder implicit val encoder entityencoder task string refined urlencoded entityencoder task string contramap string refined urlencoded value withcontenttype contenttype mediatype applicationxwwwformurlencoded difference get post way construct task method uri convert uri header convert header withbody payloadtourlencoded final piece constructor case calling configuration object object blazejsonclient def apply f implicit f monaderror f jsonclienterror monadio f throwable task jsonclient f blazeclientconfigdefaultconfig map new blazejsonclient blazeuserinteraction need spin http server lot easier sound first import import import import import need create dsl effect type import private val dsl new task import dsl use dsl create http endpoint rather describe everything done simply implement endpoint similar http dsl private object code extends queryparamdecodermatcher string code private val service httpservice task httpservice task case get root code code return type pattern match task response task implementation want take code put ptoken promise final class blazeuserinteraction private pserver promise throwable server task ptoken promise throwable string extends userinteraction task private val service httpservice task httpservice task case get root code code ptokencomplete code ok seems worked go back console definition service route enough need launch server blazebuilder private val launch task server task blazebuilder task bindhttp localhost mountservice service start binding port make operating system assign ephemeral port discover port actually running querying serveraddress field implementation start stop method straightforward def start task string refined url server launch updated pservercomplete server updated taskunit else servershutdown fail server already running yield mkurl server def stop task codetoken server pserverget token ptokenget iosleep servershutdown yield codetoken token mkurl server private def mkurl server task string refined url val port saddressgetport refinedunsafeapply http localhost port private def fail string string taskfail new ioexception nostacktrace sleep necessary avoid shutting server response sent back browser io mess around come concurrency performance finally create blazeuserinteraction need two uninitialised promise object blazeuserinteraction def apply task blazeuserinteraction promisemake void server task widenerror throwable promisemake void string widenerror throwable yield new blazeuserinteraction could use io void instead since rest application using task ie io throwable widenerror avoid introducing boilerplate would distract u thank congratulation reaching end learnt something book please tell friend book marketing department word mouth way reader find get involved scalaz joining gitter chat room ask advice help newcomer expert contribute next release typeclass cheatsheet typeclass method given invariantfunctor xmap f b b f b contravariant contramap f b f b functor map f b f b apply ap f f b f b â f f b b c f c alt f f b b c f c divide f f b c b f c decidable f f b c b f c bind bind f f b f b â join f f â f cobind cobind f f b f b â cojoin f â f f applicative point â f divisible conquer â â f comonad copoint f â semigroup append â plus plus f f â f monadplus withfilter f boolean f align align f f b â f b â merge f f â f zip zip f f b â f b unzip unzip f b â f f b cozip cozip f b â f f b foldable foldmap f b b â foldmapm f g b g b traverse traverse f g b g f b â sequence f g â g f equal equal â boolean show show â string bifunctor bimap f b c b f c â leftmap f b c f c b â rightmap f b b c f c bifoldable bifoldmap f b c b c c monadplus separate f g b â f f b bitraverse bitraverse f b g c b g g f c â bisequence f g g b â g f b haskell scalaz documentation often cite library paper written haskell programming language short chapter learn enough haskell able understand source material attend haskell talk functional programming conference data haskell clean syntax adts linked list structure data list nil con list list type constructor type parameter separate data constructor nil empty list con cell con take two parameter separated whitespace comma parameter bracket subtyping haskell thing nil type con type construct list roughly translated scala sealed abstract class list object nil def apply list def unapply list option unit object con def apply head tail list list def unapply list option list ie type constructor like sealed abstract class data constructor apply unapply note scala perform exhaustive pattern match encoding scalaz use use infix nicer definition might use symbol instead con data list nil list infixr specify fixity infix infixl infixr left right associativity respectively number loose tight specifies precedence create list integer typing haskell already come linked list fundamental functional programming get languagelevel square bracket syntax data infixr convenient multiargument value constructor instead ultimately adts need hold primitive value common primitive data type char unicode character text block unicode text int machine dependent fixed precision signed integer word unsigned int fixed size float double ieee single double precision number integer natural arbitrary precision signed nonnegative integer tuples also known unit field io inspiration io implemented runtime honorary mention data bool true false data maybe nothing data either b left right b data ordering lt eq gt like scala haskell type alias alias expanded form used interchangeably legacy reason string defined linked list char inefficient always want use text instead finally define field name adts using record syntax mean contain data constructor curly bracket use double colon type annotation indicate type raw adt data resource human int string data company company string resource record syntax data resource human serial int humanname string data company company companyname string employee resource note human data constructor resource type name record syntax generates equivalent field accessor copy method construct adam human adam field access serial adam copy eve adam humanname eve efficient alternative single field data definition use newtype runtime overhead newtype alpha alpha underlying double equivalent extends anyval without caveat limitation record syntax field name used different data type however workaround enabling language extension allowing u use name human company language duplicaterecordfields data resource human serial int name string data company company name string employee resource lot language extension uncommon small project haskell extremely conservative new language feature optin long period time accepted language standard function although necessary good practice explicitly write type signature function name followed type example foldl specialised linked list foldl b b b b function curried haskell parameter separated final type return type equivalent following scala signature def foldleft b f b b b b list b observation keyword need declare type introduced need name parameter make terse code infix function defined parenthesis need fixity definition infixr regular function called infix position surrounding name backticks following equivalent infix function called like regular function keep surrounded bracket curried either left right often giving different semantics invert half function typically written general parameter first enable maximum reuse curried form definition function may use pattern matching one line per case may name parameter using data constructor extract parameter much like scala case clause fmap b maybe maybe b fmap f f fmap nothing nothing underscore placeholder ignored parameter function name infix position maybe maybe maybe empty empty empty empty define anonymous lambda function backslash look like greek letter î following equivalent pattern matched haskell function syntax sugar nested lambda function consider simple function creates tuple given three input tuple b c b c implementation desugars tuple b c b c body function create local value binding let clause following equivalent definition map linked list apostrophe valid identifier name map b b explicit map f foldr map map b f b terser making use currying map f foldr map map f let binding map f let map f foldr map actual implementation map map f x x f x map f x else keywords conditional statement filter bool filter filter f head tail f head head filter f tail else filter f tail alternative style use case guard filter f head tail f head head filter f tail otherwise filter f tail pattern matching term case unfoldr maybe b b unfoldr f b case f b b b unfoldr f nothing guard used within match example say want special case zero unfoldrint maybe int int unfoldrint f b case f b unfoldrint f otherwise unfoldrint f nothing finally two function worth noting application operator b b infixr function composition b c b c infixr function stylistic alternative nested parenthesis following equivalent putstrln show putstrln show tendency prefer function composition instead multiple putstrln show typeclasses define typeclass use class keyword followed name typeclass type parameter required member clause dependency typeclasses ie applicative requires functor exist call constraint use notation class functor f b f f b infixl class functor f applicative f pure f f b f f b infixl class applicative f monad f f b f f b infixr provide implementation typeclass instance keyword wish repeat type signature instance function useful clarity must enable instancesigs language extension language instancesigs data list nil list defined elsewhere list list list map b list list b flatmap list b list list b foldleft b b b list b instance functor list b list list b f map f instance applicative list pure nil nil nil f foldleft nil f instance monad list f list flatmap f list typeclass constraint function use notation example define something similar applicative f b c f f b f c f fa fb f fa fb since introduced monad good time introduce notation inspiration comprehension f b g c h pure b c desugars f g b h c pure b c parameter flipped monad f f f b f b flip infixl stdlib flip b c b c unlike scala need bind unit value provide yield returning example putstr hello putstr world yield translates putstr hello putstr world nonmonadic value bound let keyword namereturn io string namereturn putstr first name first getline putstr last name last getline let full first last putstrln pleased meet full pure full finally haskell typeclass derivation deriving keyword inspiration scalazderiving defining derivation rule advanced topic easy derive typeclass adt data list nil list deriving eq ord record function scala typeclasses algebra defined trait interface typeclasses injected implicit feature algebra passed explicit parameter languagelevel support haskell algebra data algebra somewhat confused scala name concept haskell called record function record function consider console introduction rewrite haskell data console console println text readln text business logic using monad constraint echo monad console echo c line readln c println c line production implementation console would likely type console io scalaz liftio function inspired haskell function name lift console io advanced monad stack two additional language extension make business logic even cleaner example recordwildcards allows u import field data type using echo monad console echo console line readln println line namedfieldpuns requires imported field listed explicitly boilerplate make code easier read echo monad console echo console readln println line readln println line whereas scala encoding may called finally tagless haskell known mtl style record function without going detail scala developer understand research paper performance benefit generalised adts haskell alternative mtl style extensible effect also known free monad style module haskell source code arranged hierarchical module restriction content module must live single file top file declares module name convention use directory disk organise code file would go sillytreehs default symbol file exported choose export specific member example tree type data constructor fringe function omitting sapling module sillytree tree fringe data tree leaf branch tree tree fringe tree fringe leaf x x fringe branch left right fringe left fringe right sapling tree string sapling leaf interestingly export symbol imported module allowing library author package entire api single module regardless implemented different file import exported member sillytree roughly equivalent import sillytree syntax want restrict symbol import provide explicit list parenthesis import import sillytree tree fringe import tree type constructor data constructor fringe function want import data constructor pattern matcher use tree want import branch constructor list explicitly import sillytree tree branch fringe name collision symbol use qualified import optional list symbol import import qualified sillytree fringe call fringe function type sillytreefringe instead fringe change name module importing import qualified sillytree fringe function accessed tfringe alternatively rather select want import choose import import sillytree hiding fringe default prelude module implicitly imported add explicit import prelude module version used use technique hide unsafe legacy function import prelude hiding head use custom prelude disable default prelude noimplicitprelude language extension evaluation haskell compiles native code virtual machine garbage collector fundamental aspect runtime parameter lazily evaluated default haskell treat term promise provide value needed called thunk thunk get reduced much necessary proceed huge advantage lazy evaluation much harder trigger stack overflow disadvantage overhead compared strict evaluation haskell allows u opt strict evaluation per parameter basis haskell also nuanced strict evaluation mean term said weak head normalform whnf outermost code block reduced normal form term fully evaluated default evaluation strategy roughly corresponds normal form example term normal form foo x x whereas normal form reduced reduces x x reduces foo bar reduces foobar foo reduces foo following term whnf outer code reduced even though inner part foo x f oo bar following whnf reduces x x reduces foo bar reduces foobar default evaluation strategy perform reduction passing term parameter language level support allows u request whnf term evaluates whnf call function value b b infixr use exclamation mark data parameter data strictlist strictnil strictlist data employee employee name text age int strictdata language extension enables strict parameter data module another extension bangpatterns allows used argument function strict language extension make function data parameter module strict default going extreme use nfdata typeclass normal form evaluation class nfdata rnf nfdata b b subject availability nfdata instance cost strictness haskell behaves like strict language may perform unnecessary work opting strictness must therefore done great care measured performance improvement doubt lazy stick default big gotcha lazy evaluation io action performed populates lazy data structure action performed data structure evaluated fail unexpected part code outside resource handling logic avoid gotcha read strict data structure performing io thankfully gotcha affect developer writing lowlevel io code third party library pipessafe conduit provide safe abstraction typical haskeller raw byte text primitive strict lazy variant next step haskell faster safer simpler language scala proven industry consider taking course functional programming ask question qfpl chat room freenodenet additional learning material enjoy using haskell understand value would bring business tell manager way small percentage manager commission haskell project able attract functional programming talent many team everybody happy third party license source code book copied free libre software project license project require following text distributed source presented book scala license copyright c epfl copyright c lightbend inc right reserved redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution neither name epfl name contributor may used endorse promote product derived software without specific prior written permission software provided copyright holder contributor express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall copyright owner contributor liable direct indirect incidental special exemplary consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage scalaz license copyright c tony morris runar bjarnason tom adam kristian domagala brad clow ricky clarkson paul chiusano trygve nick partridge jason zaugg right reserved redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution neither name copyright holder name contributor may used endorse promote product derived software without specific prior written permission software provided author express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall author liable direct indirect incidental special exemplary consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage
111,Lobsters,scala,Scala programming,Futures in Scala 2.12 (part 2): Missing canonical combinators: zipWith,http://viktorklang.com/blog/Futures-in-Scala-2.12-part-2.html,future scala part missing canonical combinators zipwith,click missing canonical combinators zipwith benefit click,second several post describing evolution scalaconcurrentfuture scala previous post click missing canonical combinators zipwith able join two future together produce new future contains tuple result available zip operation look something like val future string val future int val zippedfuture future string int zip want tuple want combine result two future create something else typically mean combine zip map reason use partialfunction literal yes made otherwise code use arguably uglier syntax tuple value extraction val combinedfuture future string zip map case string int string int like dislike allocation tuples lack genericity see zip specialization xzipwith well perhaps help share signature said zipwith def zipwith u r future u f u r implicit executor executioncontext future r allows u express example val combinedfuture future string string int string int benefit le type le read fewer allocation fewer asynchronous step general zip click next part blog series cheer
112,Lobsters,scala,Scala programming,Imitating Scala Futures with Go channels (in Go and Clojure),http://tindaloscode.blogspot.com/2017/03/imitating-scala-futures-with-go.html,imitating scala future go channel go clojure,,scala future abstraction one favourite feature language simple elegant powerful make beginner attempt mimic go simplistic domain let assume two function take time http call naturally return future need aggregate result scala way go way rather clunky compared scala solution main problem polymorphic type lump code would need redefined every time function signature change generic version us explicit type casting nicest code ever written go generic golang expert could suggest improvement clojure way clojure borrowed goroutine channel idea golang yet difference clojure go version term brevity striking result independent factor one clojure dynamically typed hence need hassle neither function signature generic rather lack two functional language map list comprehension way terse go forloops third factor asyncgo return channel containing result function executed go need create slice channel first loop slice function create anonymous function go block function executed result put channel lot hassle generic many go problem would go away rob pike explicitly said generic hopefully someone force instead
113,Lobsters,scala,Scala programming,Futures in Scala 2.12 (part 1): Missing canonical combinators: flatten,http://viktorklang.com/blog/Futures-in-Scala-2.12-part-1.html,future scala part missing canonical combinators flatten,missing canonical combinators flatten benefit bonus click,first several post describing evolution scalaconcurrentfuture scala missing canonical combinators flatten one u futureusers grown tired old flatmap identity boilerplate unnesting future val future future future x val flattenedfuture future x futureflatmap identity great news starting scala scalaconcurrentfuture flattenmethod following signature def flatten implicit ev future future allowing write val future future future x val flattenedfuture future x futureflatten benefit le type le read require executioncontext bonus allocate function instance flatmap identity scala def sameinstance first second first eq second sameinstance first second boolean scala sameinstance int identity identity boolean false click next part blog series cheer
114,Lobsters,scala,Scala programming,"""Scala 3 as a new Programming Language"" – departure of yet another Scala contributor",https://medium.com/@fommil/scala-3-considered-as-a-new-programming-language-a335ff67e075,scala new programming language departure yet another scala contributor,scala new programming language dear scala found another think world think way u get divorce thing public interest fpmortals scala step change sure good news everybody reasonable scala compiler fury ensime scalaz doubt higher performance scala,scala new programming languagedear scala found another think world think way u get divorce old klangian love letterafter year commercial scala thing public interest moving thank everybody pleasure hacking blast wrap fpmortals focusing thingsscala hugely successful industrial language experienced scala developer assured job within week arriving major city world scala cutting edge compared java c also trusted enough used highly critical systemsscala innovation step change language feature tooling change ever seen language upgrade especially like union type move towards dependent type pleased see presentation compiler taken seriously although sure good news everybody work floss project touched around million line scala code unfortunately see project worked public private able migrate therefore believe community fracture legacy scala innovative scala camp legacy road much slower pace like javathe innovator path mean hunting greenfield project rebooting floss projectsperhaps going legacy could good opportunity double stability performance tooling commercial investment reasonable scala compiler mission reducing language footprint would address concern many scala developer combine fury simple sourcedependency build tool dependency hell problem become tractableintellectually lean towards option clean room implementation ensime using scalaz would interesting challenge multiple levelsbut taking step back scala actually like new programming language forced consider alternative rust allegedly friendly programming language community doubt lot consideration toolinghaskell notoriously principled passionate contributorsgo able spin rest service achieve ridiculously high performance short space time go developer get shit donekotlin simplified scala superior tooling believe become powerful force jvm androidi gone haskell higher performance scala although quite rust go level instead emphasising correctness kind software like write community highly biased towards intellectual curiosity plenty floss tooling challenge remaining solved ticking box maybe see
115,Lobsters,scala,Scala programming,Your Server as a Function (2013),https://monkey.org/~marius/funsrv.pdf,server function,,obj length filter flatedecode stream xڥ j ӎ mo ĭ fsd b
116,Lobsters,scala,Scala programming,Rolling Your Own Monad To Deal With Nested Monads In Scala,http://www.geekabyte.io/2018/07/rolling-your-own-monad-to-deal-with.html,rolling monad deal nested monad scala,thought working nested monad within future monad scala encode failure future use monad transformer amsterdam scala meetup group devlaam monad sequencing computation problem nested monad monad comprehension scala yield work thought working nested monad within future monad scala rolling monad conclusion cat comment section previous post,thought working nested monad within future monad scala wrote nested context technically accurate nested monad usually end creeping scala codebase nested context end leading unwieldy code base hard read hard work post mentioned two technique used regain readability dealing nested monad since post used future monad focus first suggested technique encode failure future second technique use monad transformer blogpost inspired talk gave amsterdam scala meetup group find slide talk way discussion ensued talk devlaam suggested alternative technique dealing situation basically create monadic structure wrap around value nested context would allow u regain readability able use comprehension created monadic structure post explore idea rolling monad applied third approach dealing clunkiness working nested monad scala previous post future either e would nested monad would used illustration refresher quick recap updated code snippet used illustration objective look user id email convert id author id use author id lookup associated post provided function look user id email def getidbyemail email string future either string int future emailendswith gmailcom right else emailendswith yahoocom right else left user given email convert id author id def converttoauthorid id int future either string int future id id right id else left author id use author id lookup associated post def getpostsbyauthorid id int future either string list string future id right list post title post title else left post found monad sequencing computation problem nested monadsfor purpose post safely approximate definition monadlike structure scala type flatmap apply method qualified approximate definition reality monad method certain type signature also law need satisfied something regarded monad since intend turn post yet another monad tutorial stick approximate definition thing quickly point also without going detail motivation monad monad provide u mechanism chaining function application caveat intermediate value generated output function may may form allows easily fed input next function computation chain basically situation three function want take value generated getidbyemail function pas input second function converttoauthorid second function take value use generate another value would fed function getpostsbyauthorid computes final value intermediate value generated function guaranteed right away neither guaranteed valid guaranteed right away function processed asynchronous fashion value materialised time also guaranteed valid value used next function instance possible user id exist given email hence value returned calling getidbyemail never possibly one fed converttoauthorid function future either le monad scala flatmaps still sequence three computation together following code val result future either string list string getidbyemail gmailcom flatmap case right id converttoauthorid id flatmap case right authorid getpostsbyauthorid authorid case left err future left err case left err future left err println awaitresult result dealing nested monad sequencing taking output feeding input next function end clunky totally away manually checking validity intermediate value even use flatmaps supposed allow u sequence kind computation without directly worry checking intermediate value valid usable input next function monad comprehension scalain scala comprehension without yield portion signifies iteration example x list x println x loop list containing number number even printed basic idea iteration would expect syntax us keyword especially experience java c javascript etc similar construct denotes iteration hand comprehension yield portion stop iteration construct scala sequencing computation functors thing map method monad thing flatmap method example x option option yield x taking value first option monad take value second option monad add value together return new value option monad nothing iteration operation could written without using comprehension option flatmap x option map x seen directly using flatmaps map sequence computation usually lead code easy read happens scala provides comprehension pleasant syntax writing computation would normally written chaining flatmaps map essence comprehension provides pleasant syntactic sugar flatmaps map nice thing comprehension usage limited option future try type standard library monadic structure also used custom type long custom type defines set subset certain method method include map flatmap withfilter filter exact mechanism work consult yield work essence minimal type map flatmap defined easily used comprehension sequence monadic computation insight help u problem started dealing nested monad scala lead third alternative different two specified thought working nested monad within future monad scala idea create custom type wrap nested context want deal make sure implement map flatmap method custom type making monadic defined method use custom type easily within comprehension let see look practice rolling monadgoing back original set function getidbyemail string future either string int converttoauthorid int future either string int getpostsbyauthorid int future either string list string computation want perform look user id email convert id author id use author id lookup associated post create custom type wrap nested future either e dealing custom type would look like case class futureofeither e value future either e def map b f b future either e b valuemap case right thing right f thing case left err left err def flatmap b f future either e b future either e b valueflatmap case right thing f thing case left err futuresuccessful left err defined map flatmap futureofeither class use comprehension together set function return future either e look like val id futureofeither getidbyemail gmailcom authorid futureofeither converttoauthorid id post futureofeither getpostsbyauthorid authorid yield post way regain ability simply chain computation using comprehension improves readability case think write futureofeither front method could end tiresome use extension method via scala implicit class machinery reduce verbosity adding method future either e type automatically convert futureofeither implicit class would look like implicit class pointsyntax e value future either e def point futureofeither e futureofeither value implicit class implicit scope would enable ability write code follows val id getidbyemail gmailcom point authorid converttoauthorid id point post getpostsbyauthorid authorid point yield post said le verbose remove obfuscation futureofeither front actual function involved computation full code snippet make use approach presented import scalaconcurrentexecutioncontextimplicitsglobal import scalaconcurrentduration import scalaconcurrent await future import scalalanguageimplicitconversions case class futureofeither e value future either e def map b f b future either e b valuemap case right thing right f thing case left err left err def flatmap b f future either e b future either e b valueflatmap case right thing f thing case left err futuresuccessful left err lookup user id email def getidbyemail email string future either string int future emailendswith gmailcom right else emailendswith yahoocom right else left user given email def converttoauthorid id int future either string int future id id right id else left author id def getpostsbyauthorid id int future either string list string future id right list post title post title else left post found implicit class pointsyntax e value future either e def point futureofeither e futureofeither value val id futureofeither getidbyemail gmailcom authorid futureofeither converttoauthorid id post futureofeither getpostsbyauthorid authorid yield post println awaitresult using extension method val id getidbyemail gmailcom point authorid converttoauthorid id point post getpostsbyauthorid authorid point yield post println awaitresult conclusionthe approach rolling monad would involve write separate monadic wrapper unique monadic stack appears codebase example post stack future either e could also well future option stack list option stack combination monad come cost manually set machinery code unique case nested monad said could considered homegrown alternative use monad transformer would involve include library like cat project looking approach able identify dealing stack monad would still recommend introducing cat going monad transformer cat monad transformer basically toolkit useful abstraction make functional programming scala principled le tedious may say fun use cat find area derive value apart helping deal stack monad case use cat whatever reason may would rather go rolling monad yes requires write boilerplate infrastructurelike code still beat deal nested flatmaps map day mentioned comment section previous post continually learning lookout best practice deal scenario like find better approach might based machinery provided upcoming scala another abstractionpattern would definitely update post expect another post learn new approach dealing nested monad situation scala better still avoid nested monad first place got insight around topic perhaps another technique please hesitate share comment section appreciated
117,Lobsters,scala,Scala programming,The Last Hope for Scala's Infinity War,https://www.youtube.com/watch?v=v8IQ-X2HkGE,last hope scala infinity war,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote last hope scala infinity war john de go youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote last hope scala infinity war john de go youtube
118,Lobsters,scala,Scala programming,Introducing Accessible Scala,https://www.scala-lang.org/blog/2018/06/14/accessible-scala.html,introducing accessible scala,describetestscala want try online demo vscode extension next describetestscala emacspeak talk u scala contributor gitter,thursday june guillaume scala proudly welcoming environment scala center demonstrating supporting development accessible scala tool blind partiallysighted developer see sam halliday one goal remove noise introduced various delimiters current solution texttospeech engine would read def foo wibble string b wobble int def space foo open square bracket capital colon space wibble close square bracket open bracket colon space string comma space b colon space wobble open square bracket capital close square bracket close bracket colon space int space equal space indeed description necessary enable precision editing however following would convey information efficiently def foo parameterized context bounded wibble string b wobble return int since one way pronounce scala source code open community proposition find extensive test case describetestscala find description could improved send u pull request expected form reading scala loud make syntactic element le intimidating beginner need mentally associate syntax concept covariant also help sighted developer describe scala orally example context pair programming however notice example type parameter delimiters absent verbal description expression get complex audible form become ambiguous difficult decipher overcome limitation verbal description created technique called cursor idea simple cursor location navigate abstract syntax tree source code node navigate parent node sibling left right first child navigate code described verbally selected illustrated example arrow exp represents highlighted text alt arrow keyboard shortcut applied navigate private class speaks private val alt right private class speaks val alt private class val speaks val equal created online demo adjust volume let try cursor technique hear description want try try web browser via online demo tip work best google chrome also created vscode extension try project search accessible scala extension manager video hello world demo video coverage demo next hope excited online demo would like hear feedback verbal description would like invite scala community improve quality project join effort improving description create pr describetestscala another area would need help create integration emacspeak emacs plugin widely used blind developer know emacs lisp well want participate please reach u talk u thought opinion accessible scala join u scala contributor contribute discussion also gitter channel
119,Lobsters,scala,Scala programming,"Comparing Languages for Engineering Server Software: Erlang, Go, and Scala with Akka",http://www.dcs.gla.ac.uk/~trinder/papers/sac-18.pdf,comparing language engineering server software erlang go scala akka,,obj endobj obj filterflatedecodeid index info rlength rsize stream b bd endstream endobj startxref eof obj stream endstream endobj obj endobj obj endobj obj endobj obj stream pj b ypt z b v sn w
120,Lobsters,scala,Scala programming,Thoughts On Working With Nested Monad Within The Future Monad In Scala,http://www.geekabyte.io/2018/05/thoughts-on-dealing-with-having-another.html,thought working nested monad within future monad scala,end nested context within future nesting context within future bad monad compose encode failure future use monad transformer scalaz cat eithert conclusion rolling monad deal nested monad scala,post nested context specifically future accurately nested monad within future monad eg future either e future option etc nested context could easily lead hard read hence hard maintain codebase sort context nesting impact limited future would using future reference post strictly seem form appears particular scala codebase work day job also post would use monad context interchangeable mean thing would also mention term like monad monad stack monad transformer comprehension without providing explanation term thrust post expound concept share recent thought regarding nested context within future reader familiar concept still able follow along though end nested context within future end future either future option play application future jsresult developing scala using standard library ie cat scalaz sooner later would end usedeal future almost inevitable would perform asynchronous operation like making remote http call executing database query library framework use operation would likely return result operation future since also want make use scala type system model program properly end api encode result asynchronous action future plain value future value type either option etc example http request get value type successfully return value fail exception e using scala type system model application descriptive possible make use either type capture possibility error instead api return future end return type future either e go first embedded context within future submission post often nested context future code smell avoided cost since lead hard read code conclusion borne experience scala code base work riddled nested future rest post make case nesting context within future bad make case let u imagine two function getidbyemail function retrieves user id given email getpostsbyid function retrieves list post given user id two function return value future either let u imagine implementation two function follows getidbyemail import scalaconcurrent await future import scalalanguageimplicitconversions import scalaconcurrentexecutioncontextimplicitsglobal def getidbyemail email string future either string int future emailendswith gmailcom right else emailendswith yahoocom right else left user given email getpostsbyid import scalaconcurrent await future import scalalanguageimplicitconversions import scalaconcurrentexecutioncontextimplicitsglobal def getpostsbyid id int future either string list string future id right list post title post title else left post found make use two function retrieve list post given email implementation make use function might look like val result getidbyemail mee gmailcom flatmap case right id getpostsbyid id map case right post post case left error future left error case left error future left error println awaitresult result updated initially case right book book know code look like always leaf bad taste mouth combination nested mapflatmap coupled together pattern matching make code easy read snippet using two function return nested context future yet already code read easily first glance happens throw third fourth function mix get unwieldy really quickly anything improve readability try using comprehension since know provides syntax sugar map flatmaps maybe help improving readability let u see first attempt using comprehension work well intended following code val result id getidbyemail mee gmailcom post getpostsbyid id yield post println awaitresult result lead following compilation error error type mismatch found either string int required int post getpostsbyid id reason get error due fact monad compose possibility wrangle code still using comprehension make compile turn pull incarnation would look like val result eitheranidvalue getidbyemail dadepo outlookcom yield id eitheranidvalue yield post getpostsbyid id yield post println awaitresult result updated initially book getpostsbyid id know want write neither want read code like perform operation technically involves two step look id email use found id lookup associated post kind code functional programming scala lead want anything two code snippet come conclusion function return type future either e future option something similar usually code smell seen lead unnecessary convoluted unwieldy code deal better way currently make two proposition preventing avoiding unwieldy code nested context lead encode failure future use monad transformer let explore two proposition encode failure future future type scala come mechanism encoding error within although might robust way definitely option done calling failed method instance exception representing error example futurefailed new unsupportedoperationexception implemented mechanism used encode exceptional scenario instead using either option jsresult etc leading simpler return type form future represents type returned value interest mean function used easily comprehension caveat recover block need introduced take care situation exception encountered applying approach would see getidbyemail getpostsbyid method take following form def getidbyemail email string future int emailendswith gmailcom futuresuccessful else emailendswith yahoocom futuresuccessful else futurefailed new exception user given email def getpostsbyid id int future list string id futuresuccessful list post title post title else futurefailed new exception post found code make use two method would look like val result id getidbyemail dadepo outlookcom post getpostsbyid id yield post recover case e exception futuresuccessful egetmessage println awaitresult result updated initially book getpostsbyid id better still make readable break two step like val futureresult id getidbyemail dadepo outlookcom post getpostsbyid id yield post val result futureresult recover case e exception futuresuccessful egetmessage println awaitresult result updated initially book getpostsbyid id personally think approach encoding error future result readable code drawback though approach undermines type safety since effectively remove exception type system make easier user forget handling possible exception emanate future recover step hence leading thing blowing runtime still inclined adopt approach deal cumbersomeness nested context within future second approach us monad transformer explained next use monad transformer approach help dealing nested context within future use monad transformer type like future either b accurately described monad inside another monad stack monad due nature monad stack way lend convenient usage within comprehension way make le cumbersome make use monad transformer effectively creates monad combination two monad resulting monad intent purpose treated single standalone monad entity scala standard library give u monad type like future list option try etc monadic monad true lawabiding sense monad give u tool effectively deal stack monad make use monad transformer would need bring library like scalaz cat post make use cat code snippet rest post show monad transformer provided cat make programming type like future either e le cumbersome adding cat project use sbt would look like librarydependencies orgtypelevel catscore currentversionnumber scalacoptions seq xfatalwarnings ypartialunification cat added make use eithert monad transformer let u getidbyemail getpostsbyid function initial form return either inside future getidbyemail import scalaconcurrent await future import scalalanguageimplicitconversions import scalaconcurrentexecutioncontextimplicitsglobal import scalaconcurrentduration import catsdataeithert import catsinstancesfuture def getidbyemail email string future either string int future emailendswith gmailcom right else emailendswith yahoocom right else left user given email getpostsbyid import scalaconcurrent await future import scalalanguageimplicitconversions import scalaconcurrentexecutioncontextimplicitsglobal import scalaconcurrentduration import catsdataeithert import catsinstancesfuture def getpostsbyid id int future either string list string future id right list post title post title else left post found eithert monad transformer make use two method comprehension following manner val result id eithert getidbyemail mee gmailcom post eithert getpostsbyid id yield post println awaitresult resultvalue see remove boilerplate clunkiness working nested either future problem solved conclusion monad transformer approach definitely robust way deal stack monad type future either e make working easier without sacrificing type safety definitely recommend using monad transformer approach encoding failure scenario future case use library like scalaz cat think encoding exceptional scenario future would way go would lead readable code compared nested mapflatmap pattern matching would required otherwise far two approach think come dealing another monad nested future monad scala chance know best practice regarding dealing stack monad scala please share comment updatespublished rolling monad deal nested monad scala look approach creating wrapper monad mean making working nested monad easier
121,Lobsters,scala,Scala programming,Bifunctor IO: A Step Away from Dynamically-Typed Error Handling,http://degoes.net/articles/bifunctor-io,bifunctor io step away dynamicallytyped error handling,growing number novel feature scale bay even competitive library io bifunctor io type error recoverable error nonrecoverable error principled error model benefit dynamicallytyped error feature lost error benefit resource leak benefit change needed benefit error debunking myth bifunctor io myth composition destroys specific error type mitigation library jon pretty myth recover error often myth error type encapsulation leak myth push complexity user myth bifunctor io reflect runtime sourcing claim even language like haskell scalazzi subset myth bifunctor io let use impure code myth bifunctor io eithert last blog post final word bifunctor io,bifunctor io subject currently one hottest topic scala functional programming community inspiring fear awe equal measure well proliferation ticket pull request blog post occasion scalaz io new bifunctor design challenge assumption error handling effect type functional programmer scala community trying decide design help u write better software scalaz greenfield design present unique opportunity reexamine every assumption functional programming scala bifunctor design join innovation effect system finegrained interruption resource safety fiber concurrency well growing number novel feature intended radically improve fp scala fiber interruption hotly debated first introduced scala io scale bay even competitive library moved direction scalaz io bifunctor io design going change way manage error scala effect type interesting footnote history functional programming scala contributor certainly biased believe bifunctor io introduces typed error stay going greatly improve ability reason software bifunctor io help u describe property code type system drove many u staticallytyped fp post going give overview design debunk common myth decide increased precision useful io many library including scalaz prior io task immutable data type model effectful program run forever fails throwable computes like everything else purely functional programming io method excepting unsafeperformio equivalent total deterministic free side effect use io value build io value way use string value build string value similar programming immutable list map data structure common functional programming except instead modeling data structure type model io operation socalled effect inside application main function convert io effect model performing operation scala execution function ship every effect system run effect easily unsafeperformio myprogram running effect purely functional impure language like scala necessary least ideally one place application mentioned earlier io fail throwable produce bifurcation remind either e indeed io data type effectful version either e e type either untyped loosely typed effect type throw exception course notion failure exactly like notion failure either e failure value merely shortcircuits remainder computation unless failure handled behaves similar exception way matter ordinary value semantically anyway always implementation effect type ship equivalent following two error management function object io function defined io companion object def fail throwable io trait io method defined io data type def attempt io throwable type b either b two function allow produce value describes failed computation iofail well handle value describes failed computation ioattempt satisfy obvious property eg iofail attempt iopoint left iopoint lift pure io generalpurpose effect type like io usually model effect purely functional program io represent type effect reasonably high performance tends foundation functional program built fp program may use effect type type usually end translated io lot programming language iolike type including course haskell scala effect type inspired purescript typescript kotlin many language interestingly every io data type language bifurcated model computation either effect fails dynamicallytyped error succeeds value type bifunctor io came bifunctor design io late recently upgraded scalaz io support new design design io e immutable data type model effectful program run forever fails e computes io e bifunctor define instance type class bifunctor defined let map value also error e bifunctor capability data type essential allows lift program produce one class error program produce another typically larger class error bifunctor io two core error management function nearly unchanged become significantly general object io def fail e e e io e trait io e def attempt io e instead forced fail io poorly typed throwable create io value model failure error type including string number adts even typelevel set make sense different circumstance functional program mix match many different type error different level application varying response local need part application attempt function becomes polymorphic new error type allowing choose type error represents compiletime guarantee attempted io fail way summon value arbitrary type existence easily choose error type attempted effect nothing equivalent void scalaz haskell purescript others thus proving failure impossible power approach demonstrated following snippet def right v void vfold absurd identity val io io e val io void e ioattempt void val io void void e void val io void e right snippet prof intuitive fact repeated attempt fail fact express guarantee compiletime using type communicate rich information developer quite remarkable powerful error management change minor way resulting ramification error model profound explore however must talk different type error type error two class error application recoverable error recoverable error refer error expect happen occasionally example perform http request expect sometimes succeed server network issue expect error happen want build code way acknowledges failure scenario want graceful fallback level application perhaps locally edge nonrecoverable error nonrecoverable error refer error expect happen example user configured jre memory stack lot ordinary nonrecursive code stack overflow producing stackoverflowerror normal error expect happen sane way recover java convention use exception recoverable error error nonrecoverable error subclass throwable error type supported jvm language like erlang c recoverable error modeled ordinary value nonrecoverable error explicit representation resolve outside application logic crash erlang undefined behavior c distinction failure scenario expect happen failure scenario expect happen extremely important failure scenario expect happen recovered application code staticallytyped functional programming ability guarantee compiletime expected failure handled least tracked know consequence interacting code failure scenario expect happen sanely recovered reason precisely expect error know occur error whether make sense continue remedial action permit welldefined recovery attempting recover unexpected error put program undefined state undefined precisely know error occurred mean know state application external environment know error mean know recover nonrecoverable error almost always defect sometimes occur catastrophic reason outside direct control programmer running memory c program may overwrite arbitrary piece memory defect java program may try allocate memory reserved heap catastrophic erlang actor may make false assumption data defect distinction recoverable nonrecoverable error fully informs design scalaz io error model next section introduce error model talk implication principled error model scalaz io error model distinction recoverable nonrecoverable error explicit distinction form foundation error model recoverable error staticallytyped modeled e type parameter io e effect type io e fail e recovered yield io e type including uninhabited type like nothing scalaz void type type system tell effect fail nonrecoverable error weakly typed include full range runtime error jvm type extends throwable execution io e may fail due nonrecoverable defect possibly catastrophic error outside control program nonrecoverable error name suggests recoverable case language like c erlang one error occurs fiber running effect terminated error model implies aside nontermination exactly three possible outcome running effect io e effect fails due unhandled e created iofail effect terminated due nonrecoverable throwable effect computes section follow dive specific error model covering practical benefit developer benefit dynamicallytyped error distinguishing feature error model allows u move away dynamicallytyped error programming io provides compiletime guarantee failure type alone must assume effect may fail reason time even already handled fail specific way io e know possible recoverable failure scenario handle failure scenario others express type choosing suitable sum type e effect fail express io void equivalent effect may truly fail reason express io throwable e even heaven forbid io anyref e one practical application among many suppose want rest api return error json format case simply express requirement type def serve handler httprequest io void json type demand handler pas serve function handle error encode json worry code forgetting handle error knowing transcribe error required json format another example suppose evaluator spreadsheet application domainspecific scripting language case want know precisely evaluation may fail failure expected must handle different failure different way case model evaluator follows sealed trait evaluationerror case class parseerror line int expected list symbol extends evaluationerror case class typeerror expected type actual type extends evaluationerror case class runtimeerror function string extends evaluationerror def evaluate script string io evaluationerror unit staticallytyped value staticallytyped error let u use compiler prove property program case staticallytyped error prove effect fail specific way fail vary proposition different part program flexibility vary type error feature lost error programming language lossy error model lossy mean possible exception swallowed following snippet two error swallowed try try try throw new error finally throw new error finally throw new error catch case e error println e scala java developer know error caught reported outermost catch block one fact clear structure one exception reported two lost forever scalaz io dramatically improves broken error model guaranteeing error lost whether recoverable error modeled e nonrecoverable error result defect catastrophic runtime error guarantee provided hierarchy supervisor supervisor function throwable io void unit receive unhandled error fiber root fiber run application main function default supervisor overridden default supervisor print stack trace error console supervisor specified application forking effect example want run work separate fiber call specify supervisor fiber fiber logerror yield example supervisor merely log error file ensure defect program know happened sensible choice include logging remote server restarting fiber returning diagnostic information api supervisor hierarchical specify supervisor forking effect inherit supervisor fiber performed forking supervisor hierarchy provides modular way dealing unhandled error lower level application decide supervise child simply delegate parent benefit resource leak scalaz io builtin primitive called bracket structured version try finally bracket primitive allows acquire resource one effect use resource another effect finally close resource different effect using primitive quite simple openfile datacsv bracket closefile handle use resource resource acquired bracket always released even body fails due unhandled e defect code fiber interruption catastrophic external error resource safety let build bulletproof longlived application resilient failure whether expected unexpected benefit change needed remarkable property scalaz io bifunctor design generalizes existing dynamicallytyped error effect type socalled nonexceptional effect type existing effect type may fail time reason model type effect type use following type alias type task io throwable one notable exception difference definition task dynamicallytyped error effect preferred migration option moving scalaz scalaz io task monix task catseffect io difference relates defect handled older error model conflate recoverable error nonrecoverable error work fix error type throwable type encourage user write code like iopoint map throw error surprise attempt scalaz io defect code caught similar erlang c many realworld programming language since use value represent failure functional programming case io value constructed iofail throwing exception pure code considered defect fiber running effect terminated cause termination course passed fiber supervisor logged otherwise made visible depending context might decide restart fiber fails due defect similar supervision actor system aside one difference user prefer using throwable wish introduce typed error selectively simply use io throwable default effect type change error handling necessary bifunctor design completely subsumes older design benefit error discussed previously io also model effect fail following snippet creates type synonym type unexceptional io void effect type unexceptional recoverably fail meaning fail nonrecoverable defect code catastrophic error like outofmemoryerror see io e generalizes nonexceptional effect type dynamicallytyped effect type word bifunctor design scalaz io strictly expressive effect type effect type fall elegantly special case developer complain bifunctor design really complaining gained ability precise required precise rather like complaining optional type like use alternative bifunctor design introduce specialcase type nonexceptional stronglytyped effect type example catseffect probably get uio nonexceptional effect type may point get bifunctor bio proliferation effect type massive redundancy implementation unnecessary bifunctor design single generalized type io e capable modeling everything debunking myth bifunctor io bifunctor design scalaz io effect type new much documentation subject recently main source documentation code result design subject lot speculation next section want debunk perceive common myth around bifunctor design arguably myth instead strong bias toward dynamicallytyped error handling read blog probably prefer static type share bias regard myth composition destroys specific error type myth state composing two effect io io b result error type era distinction stated simply composing effect lead loss precise error type myth false user define error type compose required use common supertype composition example easily combine two effect io io b different error lossless way using disjunction type technique demonstrated following snippet val io io b left b right yield b general error type always compose completely lossless way using sum type case may want builtin sum type like either shown snippet case convenient define custom sum type previously introduced evaluationerror sealed trait evaluationerror case class parseerror line int expected list symbol extends evaluationerror case class typeerror expected type actual type extends evaluationerror case class runtimeerror function string extends evaluationerror others still may prefer use typelevel set represent error make easy add subtract error still providing ability handle error mitigation library jon pretty based totalitarian provides convenient powerful solution managing set error look scalazmitigation near future bug jon something myth recover error often myth state typed error useful code recover type error true recoverable error conflated nonrecoverable error error expected therefore recovered neither appear type signature affect development experience example take following snippet code yield fail recoverable way type io void type mean compose effect error type know looking type signature operation fail recoverable error expect happen need deal program reflected error type myth error type encapsulation leak myth state staticallytyped error leak implementation detail true fact poor api design leak implementation detail let take following api def read id string io filenotfoundexception bytevector api state read fail filenotfoundexception however may want abstract different way reading resource inmemory versus http example want abstract reading filenotfoundexception poor way represent failure instead design api follows def read id string io resourcenotfound bytevector possibly even simply def read id string io void option bytevector whether effect may fail recoverable way part api public contract reflected clearly type api design requires skill type alone stop u making bad design choice even without typed error free design apis leak implementation detail example consider following api def resolve path string task file api resolve path file resource javautilfile however file represents local file could easily generalized uri something similar must abstract different resource location file poor choice one would suggest possible return file file leak implementation detail therefore use anyref return value let implementation vary way possible leak implementation detail type error channel mean use dynamicallytyped error connection whatsoever typed error leaking implementation detail completely orthogonal myth push complexity user myth state using typed error push complexity user myth conflates inherent complexity incidental complexity inherent complexity complexity inherent task properly modeling domain example wish precisely model domain json value must sum type support boolean null number array object number type must support arbitrary precision sealed trait json case object jnull extends json case class jbool value boolean extends json case class jnum value bigdecimal extends json case class jarr value list json extends json case class jobj value map string json extends json complexity inherent complexity intrinsic problem precisely modeling json value incidental complexity complexity arises problem domain implementation decision could otherwise without sacrificing correctness example dependency injection framework much incidental complex way passing argument function precisely modeling data type always come cost due inherent complexity stated differently making illegal state unrepresentable requires work want precisely describe effect may fail require work complexity inherent precise error handling design like scalaz io let choose precise want flexibility describe infallible effect effect fail predefined way need use flexibility decide precision add sufficient value legacy design remove choice forcing dynamicallytyped error model offer ability make illegal error state unrepresentable antithetical goal drive u staticallytyped functional programming myth bifunctor io reflect runtime myth state effect type reflect runtime vague enough warrant sourcing claim io need reflect describe capability runtime good bad take innocent throw turn lie prevent argument catch defect exception thrown pure code user attempt recovery also argument fix failure type throwable jvm argument incoherent seen examining implication consistently reflecting runtime jvm support parametric polymorphism mean io erased runtime equivalent io anyref type erasure lack type safety scala mean value type io guarantee io value actually compute reflect runtime io data type would necessary avoid using parametric polymorphism entirely feature supported jvm impossible enforce io actually produce anything type reflecting runtime would argue take one innocent accidental coercion turn io lie prevent additionally jvm us null optionality option maybe reflecting runtime would argue embracing null optionality expecting null everywhere interface io functional programming even language like haskell requires set assumption scala assumption include runtime reflection coercion exception side effect null forth without assumption often called scalazzi subset scala scalaz would program fearfully constantly checking runtime class every value testing make sure value null obsessively trycatching fearing function like def identity may generate novel runtime reflection principled development requires sane assumption pragmatic development requires know assumption go wrong scalaz error model provides single package even though design assumes work scalazzi defect captured reported supervisor myth bifunctor io let use impure code myth state bifunctor design automatically catch defect use effect type java code impure scala code true code including exception throwing impure code trivially imported io fact three utility function scalaz def syncthrowable eff io throwable function import code may throw throwable value properly translating iofail value def syncexception eff io exception function import code may throw exception value properly translating iofail value def synccatch e eff pf partialfunction throwable e io e function import code may throw userdefined range error properly translating iofail value function let safely interact dysfunctional code performs sideeffects throw exception import code pure value interface functional code wrapping unsafe code try safely convert exception value something many scala developer already scalaz method use change much else myth bifunctor io eithert myth state bifunctor io unnecessary since already achieve benefit stacking eithert monad transformer top ordinary io two flaw argument older effect type f monix task catseffect io scalaz io task eithert io e two error channel overlapping instance monaderror one error type fixed throwable two conflicting way failing two conflicting way recovering failure contrast io e single error channel scalaz bifunctor io functionally equivalent eithert uio e infallible effect type uio although scalaz io could redesigned infallible would mean much performance penalty recapturing error handling using eithert monad transformer discussed last blog post monad transformer practical scala scalaz io brings something genuinely new table eithert clean typed single error channel highperformance wrapped package generalizes existing effect type final word like change scalaz including fiber concurrency model finegrained interruption resource safety bifunctor design io requires rethinking assumption new model require precise since free stick throwable error empower describe failure scenario precisely vary effect fail different level application benefit error model many include able model infallible effect nonexceptional io use effect way familiar using throwable everywhere gradually incorporate typed error wherever useful guarantee resource leak even event nonrecoverable error never lose error unlike error model strong compiletime guarantee effect fail myth new bifunctor design expected since scarcity documentation without good documentation always question new design work tradeoff hopefully blog post succeeds making bifunctor design accessible convinced bifunctor design value vote foot support project like scalaz io encourage contribution like luka jacobowitz bifunctor io contribute issue pull request favorite effect type scalaz io may first one adopt design look thing last greatly look forward seeing others adopt improve upon design benefit entire scala functional programming community
122,Lobsters,scala,Scala programming,EvilPlot — A combinator based plotting library for Scala,https://medium.com/@CiboEng/evilplot-a-combinator-based-plotting-library-for-scala-4531f00208,evilplot combinator based plotting library scala,evilplot combinator based plotting library scala getting started first plot import import import val new import import import val jump ahead bit default doc code,evilplot combinator based plotting library scalaby david hahnas data scientist cibo technology lot data visualization truthfully everyone cibo lot data visualization proper data visualization key work software stack mostly scala well known plotting library exist r python ecosystem since many u knew r satisfied plotting need unsatisfying serializing typed structured data scala csv r make simple plot maintaining large r codebase mostly plot started smell bit better wayexisting plotting library jvm largely modeled apis existing r python one felt could make something powerful extensible scala programmer oo side brain valued principle open extension closed modification fp side brain told u combinator pattern excellent way starting well defined initial building block combining higher higher order capabilitiesthus evilplot born evilplot open source combinator based pure scala plotting library run jvm browser via scalajs rendering either html canvaswe need data visualization better thing constantly implementing new minor variation plot evilplot design based belief handful primitive structure exist define graphic paired concept plot share information across ax label plot element express plot ever want combining small set graphical primitive higher higher order plotting capability thus open future without constantly messing around apigetting startedto get going evilplot need add buildresolvers resolverbintrayrepo cibotech public librarydependencies comcibo evilplot use instead using scalajsour first plotevilplot building larger graphical capability smaller one mean making simple plot easy spend lot time going feature get started let make first plot simple scatter plot sequential xvalues random yvaluesimport comciboevilplotplot import comciboevilplotplotaestheticsdefaulttheme import comciboevilplotnumericpointval data seqtabulate point itodouble scalautilrandomnextdouble scatterplot data render write new file tmpplotpng break evilplot us implicit theming system let control appearance plot wholesale case using builtin one import itscatterplot return plot object description data plotted plot point little circle screen component like ax background etc case used component get point screen finally render plot return drawable object think drawable fully specified description scene render perform sideeffects simply construct scene given plot sizethis plot interesting course probably add ax know range data label audience know talking easy well import comciboevilplotplot import comciboevilplotplotaestheticsdefaulttheme import comciboevilplotnumericpoint val data seqtabulate point itodouble scalautilrandomnextdouble scatterplot data xaxis yaxis frame xlabel x ylabel render adding thing simply matter calling additional method plot specifies exactly type component want addjump ahead bitlet take look complex example demonstrates evilplot power case plot distribution phi psi dihedral angle alanine dipeptide calculated molecular dynamic simulation six simulation total run different temperature using different parameter setsyou look example pick several building block using acontourplot create contour data simulation also make histogram angle phi psi individual plot evilplot let u add plot border easily even mark initial point plot use overlay compose multiple layer complex plot finally whole thing wrapped facet give u grid plot shared ax understandfacets alaninedataalldihedralsmap map p contourplot p surfacerenderer surfacerenderercontours dodgerblue overlay scatterplot pshead pointrenderer pointrendererdefault crimson topplot histogram psmap x rightplot histogram psmap frame toplabels alaninedatatempsmap k k k rightlabels seq xbounds ybounds xaxis tickcount yaxis tickcount xlabel phi ylabel psi render hopefully example convinces easy start simple visual compose complexity top using plot combinators first saw base plot customized using plotrenderers saw simple plot plot combinators add additional feature piecebypiece next saw multilayer plot expressed evilplot simply applying overlay function seq plot plot finally saw build multivariate faceted display plot easily regardless complicated individual plot arethis bit get started take look doc code continue journeydavid hahn data scientist cibo technology build software automate repetitive part data science make rigorous scientific work easy
123,Lobsters,scala,Scala programming,Towards Scala 3,http://www.scala-lang.org/blog/2018/04/19/scala-3.html,towards scala,dotty come scala new scala reference section dotty website sip migration scalafix language server protocol v code plugin scala intellij plugin sbt stability community build initial open source project try getting started macro help http githubcomlampepfldotty,thursday april martin odersky scala month away time consider roadmap beyond secret work dotty last year intended explore new scala could look like stage commit dotty become scala course statement invite many followup question answer already give today expect question answer thing shape come intent publish final scala soon scala current release schedule might still change mean early scala scala main focus smoothing migration scala defining migration tool shim library targeted deprecation among others new scala scala pioneered fusion objectoriented functional programming typed setting scala big step towards realizing full potential idea main objective become opinionated promoting programming idiom found work well simplify possible eliminate inconsistency surprising behavior build strong foundation ensure design hang well together consolidate language construct improve consistency safety ergonomics performance main language change either implemented projected listed reference section dotty website many new feature submitted sip process subject approval worth emphasizing scala scala fundamentally language compiler new nearly everything scala programmer already know scala applies scala well ordinary scala code also work scala minor change migration previous scala upgrade scala binary compatible scala mostly source compatible difference exist however scala code use scala artifact scala compiler understands classfile format source compiled scala upwards scala scala share standard library small tweak possible crossbuild code scala provide guide defining shared language subset compiled version scala compiler language option let compile scala code time highlight necessary rewriting migration warning compiler perform many rewriting automatically using rewrite option migration automatic rewriting also offered scalafix tool convert source crossbuildable language subset without requiring scala installed compiler scala compiler dotc used compile growing set library number year ides ide support provided dotc implement lsp language server protocol including standard operation completion hyperlinking advanced one find reference rename v code plugin incorporating operation jetbrains also released first version scala support scala intellij plugin intend work improvement repl friendly repl supported compiler doc revamped scaladoc tool generates doc viewing browser future also ide build tool dottyscala plugin sbt also work scala integration build tool stability community build contains initial open source project compiled nightly using scala plan add lot project build final release plan use period developer preview ensure core project published scala incorporated scala regression test scala test suite keep including new test near future plan build scala tool using previous version dotc compiler far tool built first current scala compiler dotc basing build exclusively scala advantage let u dog try usability scala new language feature larger scale try start working dotty see getting started guide dotty release published every week expect featurefreeze release developer preview scala first half macro stay tuned release another blog post specifically issue help scala developed completely open http githubcomlampepfldotty get involved fixing opening issue making pull request participating discussion
124,Lobsters,scala,Scala programming,Design and Implementation of Optimizing Type-centric Compiler for High-Level Language (2017),https://infoscience.epfl.ch/record/232671/files/EPFL_TH7979.pdf?version=1,design implementation optimizing typecentric compiler highlevel language,,obj metadata r page r type catalog endobj obj author petrashko dmytro creationdate creator pdflatex keywords moddate producer acrobat distiller window subject title design implementation optimizing typecentric compiler highlevel language trapped false endobj obj type metadata subtype xml length r stream design implementation optimizing typecentric compiler highlevel language petrashko dmytro endstream endobj obj count kid r r r r r r r type page endobj obj endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r parent r type page endobj obj count kid r r r r r r r r r parent r type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource xobject r rotate type page endobj obj content r cropbox mediabox parent r resource colorspace indexed devicegray r procset pdf imageb imagei xobject r rotate type page endobj obj length stream q w n q cm q q endstream endobj obj bbox filter flatedecode length resource extgstate r r font r r r procset pdf text property r subtype form stream wy tr n
125,Lobsters,scala,Scala programming,Scala Native 0.3.7 released,https://github.com/scala-native/scala-native/releases/tag/v0.3.7,scala native released,new build tool api duhemm maven mill bloop line code improved cross project sjrd portablescala readme instruction library improvement adamsinger densh xuweik ekrich xuweik xuweik schrepfler eatkins eatkins ekrich tooling improvement ekrich sjrd densh xuweik densh leetibbert andreipozolotin duhemm densh densh bugfixes pbatko densh shadaj densh felixgborrego kazy contributor,release focus stability compatibility improvement keeping backwards binary compatibility previous release series new build tool api contributed duhemm scala native supported integration sbt build tool since day also official way compile link application release provide new api aimed simplifying integration scala native toolchain party build tool eg maven mill compilation server eg bloop reference integration requires line code run whole scala native pipeline llvm link final executable improved cross project contributed sjrd scala native cross project born generalization scalajs cross project since original release scalanativesbtcrossproject project moved portablescala organization contains project shared scalajs scala native api remains fully compatible previous iteration one need update plugin dependency migrate see readme instruction additionally updated cross project contain ability remove suffix one platform example lazy val bar crossproject jsplatform jvmplatform nativeplatform withoutsuffixfor jvmplatform crosstype setting lazy val barjs barjs lazy val barjvm barjvm lazy val barnative barnative jvm project id bar used without suffix sbt shell ie barcompile would compile jvm subproject library improvement add binding cpioh adamsinger densh add support xuweik add support posix setenv unsetenv ekrich add javatextparseexception xuweik add javalangsystem setint setout seterr xuweik add binding timeh schrepfler eatkins add support javalang process processbuilder eatkins add binding termiosh ekrich tooling improvement improve rebuild workflow scala native build ekrich migrate portablescala cross project infrastructure sjrd densh java compatibility xuweik densh automatically discover llvmclang binary leetibbert nt include class file scalalib packaged jar andreipozolotin build api duhemm densh nt depend fastparse tool jar densh bugfixes fix undefined overflow primitive x pbatko make unchecked cast work cfunctionptr densh fix crash writing socket closed client shadaj nt add synthetic suffix impl class name densh fix inconsistent behaviour bufferedinputstream felixgborrego fix inconsistent behaviour regular expression empty string kazy contributor according git shortlog sn nomerges people contributed release denys shabalin andrei pozolotin eric k richardson kenji yoshida ethan atkins jocelyn boullier leetibbert martin duhem felix garcia borrego shadaj laddad srepfler srdan sébastien doeraene pawel batko thank
126,Lobsters,scala,Scala programming,Unifying Analytic and Statically-Typed Quasiquotes,https://infoscience.epfl.ch/record/232427/files/[v.2.10]%20qq_unif_popl18.pdf,unifying analytic staticallytyped quasiquotes,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream ĳ j km endstream endobj obj length filter flatedecode stream e b z n ck vhs r endstream endobj obj length filter flatedecode stream gz fl kc ҵl jzb ڋ s链
127,Lobsters,scala,Scala programming,Helper code to mimic Clojure fns in Scala,http://www.elangocheran.com/blog/2018/03/helper-code-to-mimic-clojure-fns-in-scala/,helper code mimic clojure fns scala,code snippet implementing clojure fns functionality scala http http effective program year clojure rich hickey expectation show portion expected actual value need see focus dataoriented programming parting thought scala effective program year clojure language age like,finished year stint writing scala stopped missing writing clojure knowledge clojure continues heighten inform programmer sensibility one thing appreciated scala good medium might practically find allow writing clojure without writing clojure liked think scala canvas painted clojure idea scala make amenable many style programming least fp oop possible write code imagining clojure code would look like writing scala syntax interestingly faithfully people implicitly pun intended acknowledged code good scala code know scala programmer agree good scala code put val top function body us immutable collection exclusively prefers function object method make function small stateless composable later want simply release code wrote scala fill perceived gap scala seq abstraction perception based accustomed using clojure code snippet implementing clojure fns functionality scala note following code snippet apache licensed go ahead use wherever would like see fit first code snippet perhaps interesting two provide implementation scala clojure mergewith partitionby copyright google llc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license seq util function object sequtil implement clojure mergewith param param param f tparam k tparam v return def mergewith k v map k v map k v f v v v map k v val val val allkeys def foldfn map k v k k k k k f k k else k k k else k k val init map k v val result allkeysfoldleft init foldfn result loosely based clojure mergewith allows return map type different input map type since scala statically typed probably really make sense use argument foldleft type reduction initial value different type need guaranteed param map merge create output map akin init val foldleft param input map param initw fn initialize output map value new key param f merge value new map value output map tparam k key type input output map tparam v key type input map tparam w key type output amp return def mergeleftwith k v w map k w map k v initw k w f w v w map k w val val val allkeys def foldfn map k w k k k k k f k k else k k k else val newval f initw k k k newval val init map k w val result allkeysfoldleft init foldfn result implement clojure partitionby fn scala seqs given seq fn segment entire seq order seqofseqs inner seq value produce output value f applied note implementation use lazy seqs lazy vals param seq param f set possible output value must implement tparam return def partitionby seq seq f seq seq seqisempty val emptyseq seq seqempty seq emptyseq else seqtailisempty val onlyelem seqhead val oneelemseq seq seq onlyelem seq oneelemseq else val firstelem seqhead var currfnval f firstelem var currseq seq seq var result seq seq seq e seq seq val fnval f e fnval currfnval currseq currseq e else currfnval fnval result result currseq currseq seq e result result currseq result code originated fact something simple partitionby exist scala really way cleanly finish task working without going implementing soon mergewith followed mergeleftwith created offer version start initial value analogy mergewith like reduce initial value argument mergeleftwith like using clojure reduce initial value argument aka scala foldleft second code snippet useful reducing boilerplate inevitably surround use option scala also added prettyprinting function used testing copyright google llc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license object langutil given two operand concrete option type binary function return result operation option default way param param param op tparam u tparam v return def optiongenericop u v option u option u op u u v option v match case b option op b case none none none case none none case none none case none redundant provide logical equivalent option boolean param def optionand option boolean option boolean option boolean optiongenericop x boolean boolean x provide logical equivalent option boolean param param return def optionor option boolean option boolean option boolean optiongenericop x boolean boolean x prettyprinting util fns def prettyprintablemap k v map k v string val key mkeystoseq val kvlines keysmap k k k kvlinesmkstring n def prettyprintablesortablemap k v b map k v keysortby k b implicit ord mathordering b string val key mkeystoseqsortby keysortby val kvlines keysmap k k k kvlinesmkstring n def prettyprintablesortablemap k ordered k v map k v string val key mkeystoseqsorted val kvlines keysmap k k k kvlinesmkstring n topic whether ceremonial code required scala liberal use option partially present java due java careful embrace fp really see effective program year clojure rich hickey articulates well inherent tradeoff make choice programming language merely tool mean brilliantly articulates opinionperspective practical speaks sensibility found boilerplate code scala slowing would like amount perceived benefit got return much benefit term confidence code came various unit integration test speaking test underestimate utility prettyprinting function reason created convert clojure code wrote used expectation testing library library amazing especially logic requires data structure library radically different fluent testing library benefit lie real benefit occurs spend time using test fail necessarily look back test code rather look test output gather clue failed expectation following error output reprint test code causing failure provided value plugged code necessary instead printing actual value equal expected value e neatly print using line break horizontal spacing value line tell many time seen test error output reproduces default java object printing large detailed object side side without even line breaking importantly awesomely show portion expected actual value need see terminal color get different color reprinting original test code expected value actual value possibly think scala data structure diff ing library share clojure proud focus dataoriented programming best could recreate expectation scala create helper test function one comparing set one comparing map one comparing seqs etc differing value would print separate line would line could easily see diverge seqs testing fns would additionally iterate seqs print index last congruent first divergent element seqs ultimately le time spend sifting error message faster unitintegration test faster get back interesting productive work intended parting thought scala found strange stepped previous role used scala heavily basically started writing scala code clojure really punished created couple semistateful oopy class first scala program make look obvious got critiqued made code confusing decided write clojure code scala syntax result highlevel code used scala object class lieu clojure namespaces wrote function statelessly vals blocklocal function definition occurring code function used scala case class represent clojure heterogenous map clojure record avoided typical oop plain java class used java interface substitute clojure protocol combined helper fnscode main code test code felt pretty comfortable scala arguably may quicker pace getting code written many scala programmer around inevitably got caught compiler error type representation riddle felt trying scala right way whatever value right way imbibed hey least better java popular selling point heard scala year agree nothing wish say topic rich say much insightfully talk effective program year clojure know future hold programming language still optimistic declaring clojure language age like like loading related
128,Lobsters,scala,Scala programming,LMS-Verify: Abstraction without Regret for Verified Systems Programming (2017),http://lampwww.epfl.ch/~amin/pub/lms-verify.pdf,lmsverify abstraction without regret verified system programming,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g endstream endobj obj annots r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r r procset pdf text subtype form type xobject length stream r z r j q r c h j endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj endobj obj ascent capheight charset loponequoterightseven descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream hn hh x v xu ݶ rk c zepk u ʭ b endobj obj filter flatedecode length stream endstream endobj obj filter flatedecode length stream endstream endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj r r r r r r r endobj obj r endobj obj filter flatedecode length stream j k筯 sy j n pn w ņhru j oo ԡw endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width endobj obj baseencoding winansiencoding difference asteriskmath dagger type encoding endobj obj ascent capheight charset asteriskmathdagger descent flag fontbbox r fontname italicangle missingwidth stemv type fontdescriptor endobj obj filter flatedecode subtype length stream jz g endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj difference fi dollar quoteright parenleft parenright comma hyphen period slash zero one two three four five six seven eight nine colon c f j l p r b c e f g h k l n p q r u v w x endash type encoding endobj obj endobj obj ascent capheight charset acfjmprtaatbccoloncommaddollareeightendashffifivefourghhypheniklmnnineoonepparenleftparenrightperiodqrssevensixslashtthreetwouvwxyzero descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream v jj
129,Lobsters,scala,Scala programming,"Squid: Type-Safe, Hygienic, and Reusable Quasiquotes (2017)",https://infoscience.epfl.ch/record/231700/files/scala17main-scala17main16-p-bdc7425-34084-final.pdf,squid typesafe hygienic reusable quasiquotes,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj name r openaction r outline r pagemode useoutlines page r type catalog endobj obj r fit goto endobj obj filter flatedecode length stream c wj pn ņij l endstream endobj obj annots r r r r r r r r r r r r r r r content r r r mediabox parent r resource colorspace r extgstate r font r r r r r r r r r pattern r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text subtype form type xobject length stream endobj obj filter flatedecode length stream endstream endobj obj filter flatedecode length stream endstream endobj obj goto border c h rect subtype link type annot endobj obj uri type action uri http border c h rect subtype link type annot endobj obj uri type action uri http border c h rect subtype link type annot endobj obj uri type action uri http border c h rect subtype link type annot endobj obj citescalaqq goto border c h rect subtype link type annot endobj obj citescalaqq goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj fsqq goto border c h rect subtype link type annot endobj obj fsqq goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj citelms goto border c h rect subtype link type annot endobj obj citelms goto border c h rect subtype link type annot endobj obj uri type action uri http githubcomepfldatasquid border c h rect subtype link type annot endobj obj basefont qtqzdjlinlibertinet encoding r firstchar fontdescriptor r lastchar subtype tounicode r type font width r endobj obj filter flatedecode length stream z k dw l z b zr e f x e q z p cei e v r j sv n endstream endobj obj difference arrowright bullet copyright type encoding endobj obj filter flatedecode length stream endobj obj endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj difference zero one two three four five six seven eight nine type encoding endobj obj endobj obj ascent capheight charset eightfivefournineonesevensixthreetwozero descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream r v b onj ȡ uw p ݕ 强n n r v k v c
132,Lobsters,scala,Scala programming,"Isolated Actors for Race-free, Concurrent Programming (2010)",https://infoscience.epfl.ch/record/151999/files/EPFL_TH4874.pdf,isolated actor racefree concurrent programming,,obj stream endstream endobj obj stream endstream endobj obj stream g z qc kp ʣoז ʵ ef endstream endobj obj stream qb q j endstream endobj obj stream f ei s p 蔜
133,Lobsters,scala,Scala programming,Typesafe Abstractions for Tensor Operations (2017),https://www.cs.jhu.edu/~tongfei/paper/17-typesafe-tensors.pdf,typesafe abstraction tensor operation,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream ur ԏ pc e al ɥ q g u kt n n ub yq endstream endobj obj length filter flatedecode stream dڋ k vc p n ȧ
134,Lobsters,scala,Scala programming,In Defense of OOFP,https://alexn.org/blog/2018/02/12/in-defense-oofp.html,defense oofp,type class table content background collectionstrawman scala center proposal tribulation canbuildfrom let lazy scala collection rework performance new collection road scala actual fp culturre liked criticism canbuildfrom scala collection library case longest suicide note history current scaladoc listmap listscala martin odersky writing listscala collectionstrawman tl dr complex hierarchy list rob norris tl dr seq supertypes daniel spiewak proposal traversable catstraverse tl dr using typeclasses tl dr oop v constrained parametric polymorphism typeclasses monoid datafoldable catsfoldable pro con liskov substitution principle tl dr case study monix iterant scala world tale two monix stream catseffect iterator stream stream typeclasses super power functor end stack overflow important task coeval io tl dr liskov substitution principle oop strike back seq vtable tl dr iterator v foldable traverse iterator foldable traverse iterator state monad vector queue array selfbalancing tree hamt tl dr seq love seq seq return observablebuffersliding covariance tl dr seq input foldable sequence set observablestartwith iterator iterable tl dr conclusion,article oop hierarchy comparisson type class using example scala standard collection involved recent debate around redesign table content background scala hybrid language time greatest strength weakness collectionstrawman represents redesign scala standard collection planned shipped scala part scala center proposal moment writing two blog post explaining upcoming change scala blog tribulation canbuildfrom let lazy scala collection rework performance new collection also receiving criticism article represents like redesign criticism oop hierarchy warranted even love fp road scala like many others scala community attracted scala seemed better expressive language stricter static type check java language worked coming python time scala seemed like breath fresh air yes came scala looking better oop language got great combination smalltalkesque oop feature mixed actual fp culturre article liked written back honest much changed really sold standard collection spite internal complexity problem leaked call site first time felt need standard data structure met even exceeded criticism plenty complain current implementation best summarize canbuildfrom checkout classic stackoverflow issue scala collection library case longest suicide note history author rightfully complains method signature list scary understand def map b f b implicit bf canbuildfrom repr b scala core developer first tried hide signature take look current scaladoc listmap see documentation trick actual sourcecode ide tell different story see listscala essence canbuildfrom clever abstraction martin odersky explains however point agree complexity justified difficult understand historically created issue people callsites coda hale writing back replacing scalacollectionmutablehashmap javautilhashmap wrapper produced orderofmagnitude performance benefit one loop led heinous code method took builder canbuildfrom would immediately land u mutablehashmap ended using explicit external iterators whileloop number concept explain new member team even simplest usage collection surprising implicit parameter builder typeclasses operator overloading return type inference etc etc take look listscala collectionstrawman signature look like def map b f b list b brings justice everybody complained year tl dr canbuildfrom clever solution exaggerated problem longer worry beware clever solution problem complex hierarchy awesome infographic showing complex implementation list rob norris indeed disaster nicer way saying list collectionstrawman refactoring credit go rob norris indeed vastly simplified actually understandable question left answered looking infographic wonder capacity still code sharing immutable collection mutable version lazy strict ideally code sharing mutable immutable lazy strict hope extra careful time around tl dr complex oop hierarchy clever may brings complexity beyond reason counterproductive subtype polymorphism seq supertypes daniel spiewak made good attempt proposal recent impression short introduction criticism always care asymptotic property data structure never case seq make sense even concept example daniel give proposal def foo seq int mythingy val new mythingy idx islength taccumulate idx showed code asked bigo complexity could tell answer depends runtime type good example showing frequent booby trap beginner paying attention data structure go saying choosing collection deliberate intentional thing want select collection match complexity bound problem encouraging even enabling user work term generic type throw away information wrong much antipattern much respect opinion know coming however disagree choosing collection type mean committing implementation mean specializing bad idea many case arguing also like arguing haskell traversable catstraverse nb arguing merit haskell traversable type class compare iterable tl dr oop interface might expose leaky operation booby trap eg seq indexing specific oop interface vigilance design always needed using typeclasses actually separate argument merit stick scalaz separation functionality implementation typeclasses much easier understand faster easier extend need topdown hierarchy collection ready break back compatibility right like spiewak suggestion year ago builder iterableonce symptom deeper problem poor design choice argument amongst familiar typeclasses yield better design standard collection instead oop hierarchy interface reuse example import catsfoldable def foo f foldable list f int mythingy implicitly foldable f foldleft list new mythingy accumulate ah getting somewhere astute reader notice point mean exposure extra f type parameter actually need oop well ok syntax heaviness artifact scala language haskell issue also clearly visible typeclasses foldable traversable generic also strictly le capable iterable yes iterator side effecting highly efficient flexible protocol tl dr typeclasses nice playing well parametric polymorphism scala syntax heavier using oop although issue haskell oop v constrained parametric polymorphism typeclasses let imagine function sum number import scalamathnumeric def sum list seq implicit numeric listfoldleft azero aplus note already using numeric type class exposed scala standard library actually best type class could use need monoid ignore meet haskell datafoldable also described catsfoldable fold arbitrary datastructures eg could sum number import catsfoldable import scalamathnumeric def sum f list f implicit f foldable f numeric ffoldleft list azero aplus nb using f type name name implicit parameter nothing special convention better pro describing foldleft method f longer required make f data type generic reusable clear case unfamiliar typeclass based design trust one con method make f clearly visible exposing type system level longer subtyping longer liskov substitution principle parametric polymorphism move dispatch cost compile time good bad tl dr scala actually pick choose best approach lead choice paralysis however lot drama case study monix iterant scala world talk titled tale two monix stream described design upcoming monixtailiterant wonderful data structure modelling stream make use typeclasses defined catseffect able describe asynchronous computation presentation describe made use typeclasses actual restriction placed operation beginner fp design via typeclasses highly recommend second part presentation gist suppose want pure iterator also capable deferring evaluation given f eg monixevaltask catseffectio also capable streaming event asynchronous source could describe like sealed trait iterant f case class next f first rest f iterant f stop f unit extends iterant f case class suspend f rest f iterant f stop f unit extends iterant f case class halt f error option throwable extends iterant f data structure resembles list defers evaluation f data type capable suspending side effect note actual type class restriction defined data structure capable asynchronous processing case f capable asynchronous processing thus also equivalent async iterators javascript ixnet lazy f lazy thus equivalent scala stream java stream able resource handling close open connection case interruption following stop thus making safer plain iterators typeclasses super power simple data structure possibly super power answer defers hard work f data type whose capability defined via type class import catseffectsync def map f fa iterant f f b implicit f sync f iterant f b def loop current iterant f iterant f current match case next rest stop next f b restmap loop stop case suspend rest stop suspend restmap loop stop case halt e halt e loop fa part implicit f sync f restriction f defining capability need f implement map operation thus need functor instance however map used fact recursively due scala strict language map strictly evaluated end stack overflow require catseffectsync implies functor sync suspends evaluation map law see process go add restriction want operation depending need data structure thus making data structure reusable important f get exposed via type system compile time obvious given f g iterant f composed iterant g iterant task see task composed iterant coeval see coeval iterant io see io unless convert data type explicitly example trigger compile time error val task iterant task int val io iterant io int nope ca nt task io tl dr constrained parametric polymorphism via typeclasses give super power effectively outsourcing processing pluggable data type various capability restriction operation liskov substitution principle oop strike back last example make think parametric polymorphism implies exposing f type parameter compile time homogeneity top scala looking opportunity optimize performance due runtime optimized laziness io data type like haskell want process item batch possible example like stream array array contiguous memory block find way work array screwed term throughput case class nextbatch f batch array rest f iterant f stop f unit extends iterant f array allowed scala list vector well harm would still better throughput might well use scala seq case class nextbatch f batch seq rest f iterant f stop f unit extends iterant f wait somebody told u oop suck standard collection hierarchy let use type parameter like f case class nextbatch f seq batch seq rest f iterant f stop f unit extends iterant f oh wait work unless expose seq iterant well sealed trait iterant f seq case class nextbatch f seq batch seq rest f iterant f stop f unit extends iterant f seq suck due type getting complicated scala compiler giving ugly look right also heterogeneity val nextbatch array io halt none iounit ooops compatible list array trigger error val nextbatch list io iounit screw let backtrack point need type class restriction data structure case class nextbatch f seq batch seq rest f iterant f stop f unit implicit seq foldable seq extends iterant f better right wrong passing typeclass instance around effectively vtable congratulation oop encoding extra garbage tl dr constrained parametric polymorphism either expose data type type parameter making type complicated saying goodbye heterogeneity end shitty oop substitute iterator v foldable traverse many people impression substitute classic iterator foldable traverse typeclasses understandable type class really potent really generic great actually phil freeman opinion creator purescript language include whole new language feature order implement one instantiation traverse say j fixed adding thing simply false big difference iterator allows pause processing current iteration cycle finished processing next item pullbased protocol user completely charge user responsible advancing cursor next item whenever want destructive manner also make error prone flexible nonetheless example think work val io iterable io int iosfoldleft io acc elem acc e elem yield e short answer work stream big blow process backpressure fold digress iterating array nextbatch might prove tricky doable example mapeval implementation need pop item array process f monadic context continue left def mapeval f fa iterant f f f b implicit f sync f iterant f b def loop index int fa iterant f iterant f b fa match case nextbatch batch rest stop val eval index batchlength restmap loop else f batch index map next fpure loop index fa stop suspend eval stop case loop fa well array indexed indexing would death list turn perfectly capable abstraction iterating array list vector classic iterator case class nextcursor f cursor iterator rest f iterant f stop f unit extends iterant f express def mapeval f fa iterant f f f b implicit f sync f iterant f b def loop fa iterant f iterant f b fa match case nextbatch batch rest stop loop nextcursor batchiterator rest stop case nextcursor cursor rest stop val eval cursorhasnext restmap loop else f batchnext map next fpure loop fa stop suspend eval stop case suspends execution nextcursor sideeffectful suspend fdelay loop fa funit foldable traverse tree fall forest one around hear side effect iterator interface relies side effect thus incompatible functional programming however mutation properly suspended encapsulated referential transparency preserved really matter work typeclasses pure function first intuition something like trait iteratortypeclass f def next fa f option f variation state monad yes got state evolve performance characteristic decomposition head tail operation needed type class vector effectively constant time worse list queue amortized constant time worse list array linear n time tail aka change job yes iterator efficient win wide margin actually horrible type class like popular relies list encoding efficient pure typeclass equivalent actually trait iteratortypeclass f type pointer def start fa f pointer def next fa f cursor pointer option pointer sample instance array object arrayiterator extends iteratortypeclass array type pointer int def start fa array def next fa array cursor int cursor falength none else fa cursor cursor leak implementation detail bad array instance sort selfbalancing tree changed hamt case pointer would sort node link neighbor wise exposing like haskell binary compatibility anyway even support dynamic linking tl dr iterator actually beat pure typeclass based solution performance flexibility encapsulation also lowerlevel impure error prone sorely needed sometimes seq love actually like seq never regretted using everybody agrees mentioned section people advising usage always care asymptotic property data structure never case seq make sense even concept disagree seq return returning seq function give freedom change implementation work well preserve backwards binary compatibility user might care traverse fold n operation sequence real usecase monix observablebuffersliding operator return observable emits buffer item collect source observable resulting observable emits buffer every skip item containing count item source observable completes current buffer get signaled downstream source trigger error current buffer dropped error get propagated immediately count skip possibility case skip count item dropped overlap call equivalent buffer count case skip count overlap buffer happens number element repeated count skip case skip count skip count element start getting dropped window param count maximum size buffer emitted param skip many item emitted source observable skipped starting new buffer note skip count equal operation buffer count final def buffersliding count int skip int observable seq liftbyoperator new bufferslidingoperator count skip fact change list array done without breaking backwards compatibility consequence user since chunk meant small manageable user care able traverse fold convert something else infamous program interface implementation mantra oop developer like repeat much actually need capability often golden also note using supertype seq interface due covariance return type always allowed override specific type implementing class eg go seq list liskov substitution principle still applies tl dr perfectly valid usecases seq return type seq input necessity seq foldable need traverse collection aggregating item final result seq also implies item come sequence order matter repetition allowed example set seq set allow repetition ordering another realworld usecase also monix observablestartwith operator creates new observable emits given element also emits event source prepend operation final def startwith b elems seq b observable b observablefromiterable elems self might used iterator however result pure might used iterable author operator felt input sequence important getting back predictable result ordering important implied operator note implementation care traversal via iterator loop tl dr yes perfectly valid usecases seq input conclusion summary canbuildfrom clever solution exagerated problem longer worry complex oop hierarchy clever may brings complexity beyond reason counterproductive subtype polymorphism oop interface might expose leaky operation booby trap eg seq indexing specific oop interface vigilance design always needed typeclasses nice playing well parametric polymorphism scala syntax heavier using oop although issue haskell scala actually pick choose best approach lead choice paralysis however lot drama constrained parametric polymorphism via typeclasses give super power effectively outsourcing processing pluggable data type various capability restriction operation constrained parametric polymorphism either expose data type type parameter making type complicated saying goodbye heterogeneity end shitty oop substitute iterator actually beat pure typeclass based solution performance flexibility encapsulation also lowerlevel impure error prone sorely needed sometimes perfectly valid usecases seq return type perfectly valid usecases seq input yes people genuinely enjoying scala oop new collection thanks reading
135,Lobsters,scala,Scala programming,Humble Book Bundle: Functional Programming,https://www.humblebundle.com/books/functional-programming-books,humble book bundle functional programming,bundle looking feb feb u learn work charity,bundle looking bundle live feb feb bundle sold leading u raised learn work charity return homepage use search bar click link related bundle sale
136,Lobsters,scala,Scala programming,When types are eating away your sanity,http://narkisr.com/posts/04-02-2018-types-mismatch/,type eating away sanity,intro bringing back sanity magic x convert type summary simple made easy dozer scala,introiv programming java year every project kept seeing pattern public class personto public string name public integer age public class personmodel public string name public integer age public boolean isregistered public class servicea public void personsservice string json personto person parse json personmodel model process person persist model lucky set conversion logic place iv seen lot duplicated code ignores issue copy past logic public class persontoconvertor personmodel public personmodel convert personto person pleasure conversion logic return personmodel public class personmodelconvertor personto public personto convert personmodel person pleasure conversion logic return personto simple json personto personmodel conversion chain conversion part system expect get data certain shape form better oop modelingstill simple example imagine pile pile code deal issue matter programming javahaskellgoelm end day slurping data system cost younot data typesstructure change may find huge refactoring movingshaking lot typesmethodsfunctions around ripple effect wait alternative bringing back sanityas matter fact almost functional dynamic language require wacky conversion work raw data defn servicea json json parse process persist parsed person simple hashmap datastructure manipulate defn process person assoc person isregistered false oh wait simple cheating type checking code making sure correct allin word rich hickey like ask question true every bug found field audience reply someone wrote audience reply got written got written yes interesting fact passed type checker mind case verifying structure data component make sense enter clojurespec sdef name string sdef age integer sdef person skeys req name age allows u check validity run time check different part system conform specification otherswe magic x convert type shorter way converting type code generation generate type convertor nt write manually business nt generated bound multiple type increasing maintenance cost addition maintain whole set tool schema freeautomated mapping library similar code generation still maintain huge set mapping type also type themself nt go away still multiple type describing entitywe work raw parsed data matching json class cc def unapply option option aisempty none else agetasinstanceof object extends cc map string object l extends cc list object extends cc string object extends cc double object b extends cc boolean map list jsonparsefull jsonstring l language mapget language language language lang language name langget name b active langget isactive completeness langget completeness yield name active completeness imagine logic n json document system get ugly pretty quicklysummarywhen using type context unstructured data aware tradeoff system deal huge variety jsoncsv random html spending lot time juggling type conversion instead focusing business logic itselfits hard quantify exaggerated number experience large java project language better type system might get away le still considerable overheadsimple made easydozer example automated bean bean mapping framework parse json scala using standard scala class
137,Lobsters,scala,Scala programming,Unification of Compile-Time and Runtime Metaprogramming in Scala (2017),https://infoscience.epfl.ch/record/226166/files/EPFL_TH7159.pdf,unification compiletime runtime metaprogramming scala,,obj stream
138,Lobsters,scala,Scala programming,Genetic Programming + Proof Search = Automatic Improvement (2015),https://link.springer.com/content/pdf/10.1007%2Fs10817-017-9409-5.pdf,genetic programming proof search automatic improvement,,âãïó obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream e æ öšk
139,Lobsters,scala,Scala programming,LambdaConf 2018: Call for Proposals,https://lambdaconf2018.dryfta.com/en/abstract-submission,lambdaconf call proposal,,event website either suspended unavailable use visitor attendee please contact event organizer correct link website dryfta support team
140,Lobsters,scala,Scala programming,Stainless Scala - verification framework,https://github.com/epfl-lara/stainless,stainless scala verification framework,stainless scala pure scala imperative documentation development link license license relation inox relation leon,stainless verification framework subset scala programming language support contractdriven verification well termination checking higherorder functional program local imperative feature see pure scala imperative detail supported fragment documentation get started see documentation chapter development build project run sbt universal stage go well binary get generated frontendsscalactargetuniversalstagebinstainlessscalac information available documentation link link license stainless released apache license see license file information relation inox stainless relies inox solve various query stemming program verification inox support modelcomplete query featurerich fragment let stainless focus program transformation soundness contract termination checking relation leon stainlessinox stack grown leon codebase subsumes verification termination checking feature leon new project aim provide stable principled implementation verification technique underlying leon featurewise stainless already outgrown leon verification provides new feature higherorder contract contractbased termination checking
141,Lobsters,scala,Scala programming,Reducing Microservice Complexity with Kafka and Reactive Streams,https://www.youtube.com/watch?v=k_Y5ieFHGbs,reducing microservice complexity kafka reactive stream,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature reducing microservice complexity kafka reactive stream jim riecken youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature reducing microservice complexity kafka reactive stream jim riecken youtube
143,Lobsters,scala,Scala programming,"Constraints are for methods, not data",https://brianmckenna.org/blog/constraints_are_for_methods,constraint method data,,wrote post couple year ago team work found gain two thing making type polymorphic use place reason ca nt often point count x possible implementation type signature topic called parametricity covered pretty well elsewhere strive polymorphic possible get maximum advantage see common mistake scala code put constraint wrong place artificially limiting benefit prefixtree data type code used encoded class like sealed abstract class prefixtree prefix def add prefixtree case class node prefix prefix child prefixtree extends prefixtree case class child prefix suffix vector prefixtree extends prefixtree case class end prefix extends prefixtree case class empty prefix extends prefixtree constructor prefixtree took evidence able calculate prefix type adding element would look evidence got construction time wanted add isempty method ideally type signature would mention prefix since nt need talk element tree check whether tree empty sadly type prefixtree already mention prefix failed implementation could start using method prefix return boolean depended upon element within tree obtained goal put instead encode data type slightly differently sealed trait prefixtree def add implicit p prefix prefixtree case class node prefix child prefixtree extends prefixtree case class child suffix vector prefixtree extends prefixtree case class end extends prefixtree case class empty extends prefixtree change taking prefix constraint away constructor moving method wanted add isempty method without talking prefix done thing codebase lot better benefit reasoning also reuse method take bit practice scala please remember simple advice constraint belong method data
144,Lobsters,scala,Scala programming,"So, what's wrong with SBT?",http://www.lihaoyi.com/post/SowhatswrongwithSBT.html,wrong sbt,wrong sbt http unifying blank line unwanted data model grid http hierarchy bazel many layer interpretation layer layer layer layer layer layer library multiple layer interpretation fastparse scalatags layer layer layer layer layer layer three semantic duplication layer layer layer layer layer layer layer layer layer layer layer layer layer layer layer inner platform layer layer global mutable execution model mutable execution layer layer layer global namespacing prefix key project name http layer layer layer layer inner platform lack caching bazel singleprocessclasspath architecture http conclusion ton doc,wrong sbt sbt default build tool scala programming community build scala using tool vast majority community us sbt despite nobody seems like sbt people say confusing complicated opaque post deeply analyze exactly sbt people nt like build consensus around problem foundation make thing better futureabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming sbt used called simple build tool however anything simple eventually irony grew great bear retroactively renamed scala build tool acronym sbt officially name nt stand anything sbt widely used widely panned choice quote sbt seen around community sbt syntax honestly sinful look like something german would come yr ago submarine sbt bizarre abstraction unreadable syntax huge frustrating obstacle adopting scala especially one first thing encounter start difficult know get sbt something nt slight variant something already formulaic solution large project module watching source eg compile even one module often freeze second nothing responding change task like testonly also suffer usually sec lag comment nt always objective peerreviewed analysis judgement subjective fact wrong people understanding incomplete confusion frustration real sbt lot superficial issue thing problematic user skin deep easily fixed thing like difference run test myproject myprojecttest run leaking implementation detail like deftask taskvalue http syntactic bug like lazy val j jvm crossproject allowed unusual evaluation order foovalue expression superficial syntactic problem easy fix many already way sbt already deprecated zoo operator favor unifying foo bar foobar syntax sbt blank line problem thankfully ancient history however turn complaint sbt syntax probably least sbt problem build tool post dig deep exactly make sbt confusing complicated slow analysis come away clear picture exactly feature designchoices make sbt pick bad reputation better build tool whether future version sbt entirely new tool might work avoid pitfallsunwanted data model core sbt built around grid task every task applied every subproject overall result grid possible task invalidthe grid example consider set valid tasksubproject combination project worked typical scalajs clientserver webapp shared core library corejs corejvm client server compile run test console assembly fastoptjs assembly restart cell indicate one valid meaningful fastoptjs corejvm project obviously invalid others technically valid meaningless never want run assembly corejvm subproject server subproject need deployed sbtrevolver restart command similarly useless corejvm subproject thus difficult know task defined subprojects sbt let combine combination later error task defined end happening practice user team using sbt end making adhoc whitelist tasksubproject combination meaningful ammtest run start test console ammtest assembly give executable jar play everything else ammtest probably nt work nt touch apart violating rule make illegal state unrepresentable causing people structuredocument cell grid validmeaningful project fact settingstasks flat namespace result silly name collision http sbt data model actually grid dimensional grid described affect point except meaning sbt data model even confusing description make seem even grid filled invalid meaningless cellsthe hierarchy data model would better fit build grid hierarchy fundamentally software project laid hierarchy file grouped together folder class grouped together nested package method grouped class controlflow structure nested grouped together method niche case crossbuilding crosstesting project matrix really want model multidimensional grid exception norm even case may think modelling thing grid also modelled hierarchy without difficulty example fact compile test subproject within build form nice grid corejs corejvm client server compile test form nice hierarchy core jvmsrc main test jssrc main test clientsrc main test serversrc main test nt hypothetical arrangement probably already organizing thing hierarchy disk good enough filesystem good enough build tool course countless filesystem hierarchy fit poorly gridbased datamodel resulting mostlyinvalid grid one shown heterogenous hierarchy would allow define exactly part build operation avoiding proliferation invalid action well avoiding name collision caused sbt flat namespace bazel right thing buildtask hierarchy match precisely folderstructure filesystem different folder different operation available depending folder contains poking around huge tasksubproject grid filled invalid meaningless cell nothing inherently wrong multidimensional grid case modelling chess game grid exactly want building software project casetoo many layer interpretation sbt unusual execution model basically three layer layer run scala code construct seq setting get passed subproject layer interpret seq setting operation create task graph layer interpret task graph actually work scheduling work topological order caching necessary totally separate phase execution sbt build layer run sequentially previous layer completes overlap layer pretty deep complicated trying trace layer scala code constructing seq setting subproject difficult following interpretation layer setting figure end bound key difficult figuring layer sbt going execute task told execute along dependency difficult effectively writing sbt code need aware three layer interpretation head alone already nontrivial understand layer isolation nt terribly hard follow trying follow three time definitely extremely challenging thus surprise sbt harder follow straightline code run toptobottom thing need directlyother library multiple layer interpretation sbt scala library multiple layer interpretation personally written including fastparse asks construct parser structure interpreted parse input scalatags asks construct frag structure interpreted render html however case two layer interpretation case one layer thin enough nt worry scalatags layer may contain pretty complex scala code use construct html structure layer simple basically taking html data structure constructed spitting string fastparse opposite profile fastparse layer reasonably complex interpreting parser object parse input controlflow programcounter fastparse layer simple generally use full scala constructing parser object even though theory scalatags fastparse despite twolayered execution model simple enough migrated onelayer execution model uservisible change basically never find debugging problem scalatag layer execution fastparse layer many library based around multiple layer interpretation library structured monadically tend construct foomonad object interpreted eg using scalaz unsafeperformsync actual work however library two layer interpretation seen library three layer interpretation deep complicated sbt layer semantic duplication sbt layer interpreter basically fullfledged programming language walk sequence instruction manipulating mutating reassigning variable taskkeys settingkeys result several concept layer look strikingly similar concept layer directly executing scala code construct seq setting sbt mysettingkey v scala val myvalue sbt foo bar assignment v scala val foo bar sbt foo mutation v scala var foo foo sbt scopedelegation letting fall back broader scope v scala lexical scopedelegation also let access value defined broader scope fundamentally understanding concept scoping mutation overriding programming language difficult sbt flavor concept similar enough normal scala difficult pick also different enough leverage existing scala programming language experience help fact similarbutdifferent add additional confusion programmer mistake one overall complexity layer evaluation semantics notquitethesame similarity normal scala semantics add huge load anyone trying understand sbt work scala pretty good developer tool intellij scalaide ensime let jump definition see value used generally navigate around callgraph dependencygraph scala program however tool apply layer sbt interepretation stack since level plain scala problem layer eg setting bound layer thing executing redundantly cached properly tool like intellijscalaideensime use example one common issue sbt sure action task bound may look librarydependencies comlihaoyi utest wonder ing add something librarydependencies jump definition librarydependencies see turn jumping librarydependencies brings val librarydependencies settingkey seq moduleid declares managed dependency tell nothing value librarydependencies problem meaning librarydependencies nt layer plain scala layer seq setting interpreter thus intellij would bring definition librarydependencies layer idea layer layer bound librarydependencies actually computed layer layer longer writing scala code scala tooling longer applies scala editor ca nt jump layer settingkey taskkey value assigned scala debugger ca nt step seq setting interpreter ca nt put printlns setting see settingkey taskkey bound particular point layer execution basically full programming language interpreted within outer scala program ton redundant concept strange interlayer interaction zero tooling often known inner platform sbt library us multilayer execution model probably library seen deepest layer number rather writing scala code stuff end programming metainterpreter running scala along two strange unspecced programming language tool support zip classfiles jar lesson learned want use interpreter pattern library minimize interpretation layer execution model possible simple possible push much logic possible one layer eg layer scalatags layer fastparse programmer focus logic layer without programming multiple layer clear sbt need metainterpreter library worked muchsimpler layer convinced build tool domain special enough need layer flexibility future buildtools take special care minimize layered interpretation complexityglobal mutable execution modelmutable execution sbt execution model nt multilayered also mutable interpretation layer sbt interprets seq setting create task graph mutable taskkeys settingkeys bound tasksvalues using point seq point definition since defined layer layer even start later setting seq append taskkeys settingkeys assigned earlier seq using later setting seq even overwrite earlier binding using theoretical concern part reason jumptodefinition key like librarydependencies nt give anything useful definition librarydependencies settingkey saw earlier val librarydependencies settingkey seq moduleid declares managed dependency apart different layer interpretation unlike mutable var declaration scala someone assign later declares managed dependency var librarydependencies seq moduleid null programmed time using var foo foo null would get jumptodefinition experience useless experience jumping around sbt code scala programmer nt programming using mutable var foo foo null declaration confusing fragile make harder find value actually coming rather jumping definition scan code definition use site find line code actually initializing damn thing fact exactly feel like trying debug sbt build global namespacing apart mutable key defined sbt global ensure key unique name across universe possible key defined may defined future naturally impossible best perhaps prefix key project name hope nobody project name nothing hope best error like http pop someone go rename key familiar anyone ever programmed environment single global namespace writing bash script working c prefix name try avoid collision textbook solution old problem turn problem solution applies sbt well fact sbt pure scala layer immutable functional mostly irrelevant lot sbt logic layer seq setting interpreter programmer spend time understanding modifying debugging code running layer layer apart strange inner platform programminglanguage turn programming language centered around global mutable variable wonder people find confusing lack caching default nothing sbt cached wrong default building project rarely ever want thing build tool inherently involve many different thing reading protobuf definition generating scala source code resolving maven coordinate fetching thirdparty dependency shading thirdparty dependency avoid package conflict compiling source code classfiles zipping classfiles jar bundling javascript file using webpack minifying bundled javascript using uglifyjs generating docker image containing jar j bundle thing varied task lot common figure dependency right order parallel nt dpeend avoid unless new input sbt hit first two point fails last one caching sbt pretty adhoc different task need homebrew caching logic nt want recompute unnecessarily make sure nt accidentally collide someone else cache filesystem often people bother caching eg resulting regenerating source file working sometimes even thing cached cached halfway eg sbtassembly task avoids work building jar input nt change still print bunch stuff absolutely nothing sometimes caching logic buggy eg resulting sbt trying reresolve ivy dependency taking forever even though nothing changed thing want cache opening console running final executable vast majority thing cached default even makefiles primitive avoid running command input command change tablestakes build tool sbt make adhoc effort around slowest command avoid becoming totally unusable really fall short bazel right thing everything cached default handled transparently build tool neither person creating command eg javac person integrating command build need worry besingleprocessclasspath architecture default everything stuffed sbt plugins live classpath includes additional compiler scalajs scalanative packagers sbtassembly publishing logic sbtsonatype sbtpgp dependencyresolvers sbtcoursier always struck bit strange build tool meant let downloadcompilerun arbitrary piece code managed way scalajs optimizer coursier dependency resolver arbitrary piece code downloadedcompiledrun way code turn small tradeoff want type safe access one tool need tool compiled provided even compile code compiler check type however gain typesafe access lose many thing unable load one version plugins eg http easily build plugin part build use sbt metabuild pushing logic metabuild mean may run huge amount code even look main build build step live dependency graph cachedbuiltparallelized automatically build tool presumably reason using build tool first place leaning heavily plugins end considerable amount code need remember include main build run arbitrary unmanaged change part main build end bunch plugins godknows influencing main build mysterious way interacting possibly breaking mechanism even imagine description could apply easily pile adhoc bash script correct solution give typesafety make extra tool part normal build managed structured like anything else scalajs optimizer could resolved fetched executed part normal execution build step code zip classpath uberjar code resolve dependency using coursier could part normal build may want structural plugins code include part build file define common structure subgraphs task graph relevant particular project code defining shape task graph heavy lifting delegated normal build step minimizing amount unstructuredunmanaged logic go plugins maximize amount code manage structured principled way part build build tool aboutconclusion sbt lot problem lot angst complaint confusion sbt scala community many people complaining coming position ignorance fact provide wrong problem report solution understanding sbt incomplete incorrect confusion frustration real lot noise made sbt confusing superficial syntax sbt stuck scala doc true problem see least problem sbt people used get confused complain sbt nt enough doc sbt ton doc yet people still confused someone diving sbt nt going realize confused metainterpretation model wo nt even know thing exists hence associate unhappiness thing see unusual syntax old version scala docsite nt understand want make thing better fixing superficial problem reported problem discussed post deep nt thing send pr help fix fundamental sbt datamodel executionmodel cachingmodel extensionmodel argued broken changed thing would still sbt something else entirely tooling one biggest pain point scala community sbt biggest hole scala tooling tripping newbie frustrating oldtimer year whether fix issue sbt new tool replace sbt nt matter hopefully analysis help build consensus around real problem actually take step fix goodabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
145,Lobsters,scala,Scala programming,Effekt: Extensible Algebraic Effects in Scala,http://files.b-studios.de/effekt.pdf,effekt extensible algebraic effect scala,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream ĳ j km endstream endobj obj length filter flatedecode stream e ٺ u p lsi sej dg诔 r ϛ ԅ q z x ξ
146,Lobsters,scala,Scala programming,Bootstrapping the Web with Scala Native (Part 1),http://www.spantree.net/blog/2017/08/29/bootstrapping-web-scala-native.html,bootstrapping web scala native part,last wrote commandline tool scalafmt scalac repo getting web standard jdk library faa function service rfc handling request cgi apache httpd nginx single dockerfile last blog post measuring performance gatling bokeh load simulation result plotting code pythonbased cgi app apache next step repository richardwhaling,scala native advanced significantly since last wrote including new garbage collector substantially broader coverage posix jdk binding term use case making rapid progress commandline tool like scalafmt even scalac hand building something like backend rest api remains something frontier post begin explore improvised approach web programming scala native show performance benchmark ass robustness approach one caveat everything show github repo rough researchgrade code still really rough part expect smooth clean api validated architecture entire project considered highly experimental importantly instability impediment limitation ascribed quality code infrastructure architecture scala native getting web reframe topic post scala native immediately obvious set web application noted scala native excellent cposix interop well implementation subset standard jdk library although enough substitute servlet container like tomcat jetty say want build web app scala native stuck posix posix network programming hard often forget newer programming language framework platform wide use today java net go node provide robust web server capability box others ecosystem application server standard interface eg rack ruby wsgi python sort capability take many personyears engineering time stabilize many otherwise mature language never make leap point astute reader might ask nt generic interface mounting http service separate particular platform implementation indeed project attempt one current favorite alex elli faa function service project provides lightweight wrapper around docker container however sort generic applicationgateway pattern least old web even ietf specification rfc mount script executable service http may know better common gateway interface cgi handling request cgi web server implement cgi much common older server popular venerable apache httpd rarely implemented newer server like nginx typically server special directory document hierarchy full script executables well configuration mechanism routing different request url script request received route script server creates new instance script handle request typically fork exec script receives request url metadata environment variable request body present eg post request form data piped script stdin file handle script process input writes response stdout including http header script terminates approach benefit drawback request dedicated process shared persistent state none challenging concurrent programming issue arise architecture runtime linkage server handler language implement handler protocol c perl bash awk common one point best programming model extremely straightforward read stdin write stdout implementation build chain route handler like object main def main args array string unit routerinit get welcome dinosaur get hello request hello world get request requestpathinfo match case seq case seq x hello x case seq x hello case hello yall get bye request requestparamsgetorelse seqempty map x bye x mkstring dispatch matching inbound request handler straightforward scala patternmatching capability def dispatch unit val request routerparserequest val match h handler method pattern handler thishandlers requestmethod method requestpathinfostartswith pattern yield h val besthandler matchesmaxby patternsize val response besthandlerhandler request k v responseinferheaders systemoutprintln k v systemoutprintln systemoutprintln responsebodytostring downside approach shared persistent state limitation go concerning create brandnew process http request c program lightweight script pretty minimal typically ten millisecond fork load executable modern platform like ruby java however starting virtual machine loading dependency take second completely unacceptable fortunately u scala native compact binary behave much like c least test see work look repository see package scala native executable apache single dockerfile compact self contained distribution since mostly elaboration technique described last blog post wo nt go detail instead let move benchmark measuring performance comparing performance various web server almost always controversial benchmark compare performance dozen server term response time request per second generally privilege server highly optimized trivial load worse metric like mean response time hide lot important information service time time fail heartbeat cause cascading failure modern cluster attempt holistically characterize performance load measured dimension percentile median response time percentile response time maximum response time used scalabased tool called gatling simulate load python library called bokeh chart result load simulation result plotting code repo running everything laptop like controlled run dedicated box future post baseline ran trivial pythonbased cgi app apache result look like honestly great median response time simultaneous user go one second user becomes basically unusable beyond user contrast scala native apache substantially better typical response time ranging light load go past user worstcase response go toward second begin time second user work harden apache could entirely usable lowtraffic sidecar service like health check metric scraper said also clear get much better performance another approach comparison ran test suite nodejs generally outstanding sort thing indeed light load median response time literally chart m maintaining superior performance timeouts start become serious problem around simultaneous user next step lead u question node much faster apache biggest difference architectural node handle request single process us asynchronous io handle multiple concurrent request indeed node approach substantially faster apache without scala native application code running lead u wonder scala native application would perform similar approach concurrency next post series start close gap using nginx request multiplexing binary protocol anyone curious partial implementation repository meantime nt hesitate reach twitter richardwhaling question comment
148,Lobsters,scala,Scala programming,Why I'm Excited About Scalaz 8,http://degoes.net/articles/scalaz8-is-the-future,excited scalaz,highest adoption scalaz slamdata quasar analytics compiler joined scalaz development team missing standard library modularity algebraic ct data optic scheme effect dataoptics dataschemes dataopticsschemes principled teaser performance deep attempt broad deep flatmap repeated map narrow deep flatmap shallow attempt scalaz great code unveiling scalaz effect system scale bay sam halliday functional programming scala mortal matryoshka summary,historically functional programming scala faint heart jvm built java objectoriented functional scala allows functional programming functionalfirst programming language like haskell purescript thing easy programming language like monad transformer library profunctor optic downright tricky scala fullblown functional programming scala really push boundary possible language jvm platform thankfully since least scala ecosystem library make functional programming scala easier practical mature library highest adoption scalaz scalaz pioneered many technique enable purely functional programming jvm trampolined monadic computation rich history delivering principled approach problem facing realworld functional programmer among reason company slamdata chose scalaz power quasar analytics compiler easily largest purely functional scala open source application existence current version scalaz featurecomplete widely deployed library functional programming scala also showing sign age know better way model thing like type class lens several new abstraction proven enough become viable mainstream use fortunately commercial scala developer scalaz active development happy announce request several existing contributor joined scalaz development team much work scalaz ready use excited potential post share reason might missing standard library vision scalaz always provide batteriesincluded environment functional programming scala mean scalaz provides standard building block used construct describe functional solution standard library fp functional programming staticallytyped categorytheoretic variant popularized haskell relies tool bag abstraction monad monoids well essential data type like list effectencapsulating io structure broad consensus tool bag includes following definition implementation standard type data structure like list optional data map algebraic structure like ring monoids ct structure like monad natural transformation optic like prism lens recursion scheme like catamorphisms anamorphism lowlevel effect system concurrency primitive abstraction data type solve problem allow construct describe solution rigorous precise powerful way functional programming known scalaz heading direction providing abstraction data type one meticulously engineered fullyintegrated library need go one place effect system another optic third functors monoids standard abstraction data structure bakedin beautifully integrated thoroughly tested ready power functional programming awesomeness application scalaz missing standard library functional programming scala modularity opposite strategy scalaz modularity strategy whereby would standard library split dozen library solve one part overall problem extreme case example could scalazfunctor library defines functor well scalazfunctorsyntax providing syntax forth primary purpose modularity enable different part whole evolve independently example split large business application different component dependency different team specialize different component independent work practice however two argument find compelling taking scalaz approach functional programming abstraction data type inextricably intertwined user want functional abstraction evolve together unified whole trying modularize abstraction data type inextricably intertwined exercise mindnumbing tedium example highlevel chunking fp standard library different module maintained versioned independently algebraic ct data optic scheme effect yet data structure permit instance combinators depend ct algebraic indeed type class require specific data structure theory create new library area overlap maintain modularity however data functionality depend ct algebraic need one data structure traversed recursive corecursive always define useful optic need library dataoptics dataschemes dataopticsschemes done yet since combinators write library rely ct algebraic need even library general attempting modularize n deeply intertwined abstraction data type require n additional library cleanly represent instance combinators depend overlapping functionality module example mean library modern development stack way github scala jvm never designed finegrained dependency ignoring fact imposes astronomical cost development far outweigh perceived benefit perceived benefit actually benefit either example user never want recent version one part fp standard library eg optic older version another part fp standard library eg ct interdependency cherrypicking make sense module actually slow development release make creation globally consistent version set difficult rare module independently versioned released difficult would find set version work probably know answer one experience alternative unholy mess recognize core abstraction data type functional programming work best intentionally designed consistent unified wellintegrated whole versioned released together backed comprehensive suite automated test guarantee piece fit together perfectly user want scalaz appears delivering functional programming scala always meant principled scalaz long history eschewing ad hoc principled type class generally required law instance required comply law hack edge case strongly discouraged seen far scalaz raising bar mean provide principled library functional programming mean learning mistake made earlier version library well mistake made functional programming library concretely mean probably expect following scalaz one unsafe method unsafeperformio entire library called automatically part safeapp main function purely functional program function pure total lawless type class dependency dangerously unsafe data type whose method often partial impure still use course library make invalid instance matter tempting might example scala broken future monad worse comonad instance defined bogus function whose law satisfied valid instance type class example tailrecm function monad monad implement constant stack space everyone prefers principled approach functional programming scala prefer generous helping unsafe convenience method lawless type class dependency common dangerous scala data type downright invalid instance type class function whose law satisfied instance quite understandable argument thing programmer sometimes must interface legacy code pound square nail round hole break law throw caution wind personally prefer foundational standard library cut corner matter tempting might principled engineering standard library let cut corner need confidence erratic behavior caused standard library teaser scalazeffect current contribution scalaz yet released active development shiny new effect system purely functional scala program need something like haskell io data structure allows functional program model interaction external effectful system referentially transparent way date effect system scala fallen one two category pure slow inexpressive fast expressive impure unprincipled wanted long time build solution fast principled time powerful expressive enough build highperformance concurrent realworld functional application going pay cost flatmap every effect fp application better get something amazing return functional programmer sold composability reasonability scalazeffect goal provide much expressiveness strong guarantee even nonfunctional programmer want switch purely functional programming result effort allnew io data type unlike prior version io scalaz competing alternative type satisfies following property method io safe referentially transparent implicit hackery propagate nasty junk like executor service io handle synchronous asynchronous code need care implementation detail io super fast runtime system executes io action application main function main interpretive loop zeroallocation code path leftassociated bind touch slow heap strictly necessary io new forkjoin concurrency framework spawn fiber joined killed supervised lawful deterministic nonblocking fashion provides strong guarantee fiber leak io bracket primitive ironclad guarantee resource acquisition release even presence concurrency fiber interruption io semantics compatible javascript paving way scalajs implementation hope write shortly launch jvm version io fiber interrupted instantly point computation without significant performance penalty ensuring resource wasted io fiber utilize thread near future also transparently yield fiber case resource starvation allowing fiber transparently scale well past limit native thread addition io implemented fast mvar used nonblocking communication fiber lawful type class hierarchy describe feature io including concurrency plan implement first real stm scala nearly modern application combination feature pay cost purely functional programming several time write massively concurrent nonblocking fast correct program leak thread resource relatively minor cost flatmap becomes irrelevant apps welcome nextgeneration purely functional programming scala performance performance top mind developing scalazeffect code still development feature add point say scalaz effect system one fastest effect system jvm following benchmark run latest version scala builtin future monix task cat io whet appetite deep attempt benchmark measure performance recovery deeply nested thrown exception distance throw catch large benchmark depth size mode cnt score error unit cat na thrpt ops future crashed monix na thrpt ops scalaz na thrpt ops broad deep flatmap benchmark measure performance broad deep bind generated effectful recursive code benchmark depth size mode cnt score error unit cat na thrpt ops future na thrpt ops monix na thrpt ops scalaz na thrpt ops repeated map benchmark measure performance repeated map benchmark depth size mode cnt score error unit cat na thrpt ops future na thrpt ops monix na thrpt ops scalaz na thrpt ops narrow deep flatmap benchmark measure performance narrow deep bind benchmark depth size mode cnt score error unit cat na thrpt ops future na thrpt ops monix na thrpt ops scalaz na thrpt ops shallow attempt benchmark measure performance recovery shallow thrown exception distance throw catch small benchmark depth size mode cnt score error unit cat na thrpt ops future crashed monix crashed scalaz na thrpt ops scalaz great code unified batteriesincluded architecture commitment principled design hopefully powerful correct effect system beginning many scalaz resource currently work unveiling scalaz effect system scale bay one conference speak year around miss sam halliday writing book functional programming scalaz entitled functional programming scala mortal confused functional programming scala scalaz soon fantastic resource help become proficient fp leading scala fp library revamping popular workshop advanced functional programming scala new workshop titled mastering functional programming scala scalaz help individual team quickly come speed leveraging scalaz write robust performant realworld software using pure fp current plan try get company matryoshka library folded scalaz ensuring scalaz productionready package recursion scheme tightly integrated rest standard library data structure lens already fp scala never better time start learning scalaz wellsupported great company summary although scala never really designed functional programming carefully chosen subset language proven adept realworld functional programming make practical powerful functional programming library like scalaz language quirk wart looking wellpaying fpfriendly job usually find many opportunity scala community scalaz next saga longstanding tradition innovation building learning work countless others aim missing standard library functional programming scala rigorous principled design serf foundation correctbyconstruction business application nextgeneration effect system working aspires combine timetested design effect system haskell purescript renewed emphasis performance cleanly solving messy resource concurrency problem real world functional programming scala may particularly easy scalaz going make tremendously simpler simultaneously raising bar term power precision composability even performance resource learning extending scalaz multiplying making excellent time functional programming holdout become familiar technology truly exciting time scala fp community
149,Lobsters,scala,Scala programming,Rise and fall of JVM languages,https://blog.frankel.ch/rise-fall-jvm-languages/,rise fall jvm language,infoq groovy scala principle functional programming scala eclipse ceylon commit frequency jep improve scala compilation time,every post predicting death java language funny thing none writes date honest probably true fate every language disappear oblivion precisely used le le new project question replace last week saw another article infoq least one told possible replacement kotlin got thinking state jvm language trend note trend nothing technical merit flaw language started developing java late time java really cool every young developer wanted work socalled new technology either net java older developer stuck cobol studied c c school memory management java much easier happy everyone groovy came existence remember time learned ignored need scripting language context developing enterprisegrade application long lifespan team many developer static typing huge advantage dynamic typing create test check type system net loss time create script websphere administrator choice python tcl scala incepted one year later remember heard much later opposition groovy decided give try main reason long interest creating better code read readable maintainable scala statically typed looking followed coursera course principle functional programming scala three main consequence questioned way write java code example automatically generate getters setter designing class decided scala made easy write code unreadable developer including myselfi started looking alternative language groovy scala came second generation count java first jvm language including casual glance became convinced much traction worth investing time year ago decided teach basic android able understand development context mobile developer oh boy year developing java ee spring application surprise pleasant one like sent backwards decade past android api low even mention testing app locally quick search around found kotlin mentioned lot place finally decided give try fell love immediately kotlin could improve existing crap api something better even elegant thanks extension function dug language started using kotlin serverside project well spring framework announced integration kotlin google io google announced support kotlin android post personal experience opinion formed prefer comfort reading post agree feel free stop reading point couple interesting thing note google recognized search term ie programming language scala groovy kotlin ceylon extend ceylon assume ceylon popular location extend afraid enough google searchesscala far popular followed groovy kotlin real clue scalethe kotlin peak may correlated google support announcement google iomost search scala kotlin originate china groovy much balanced regarding locationsscala search strongly correlate term spark kotlin search term android digging bit may uncover interesting fact xtend dead never living never read post never listend conference talk neitherin red hat gave ceylon eclipse foundation creating eclipse ceylon private actor giving away software foundation might interpreted different way case despite reassuring talk around move good sign future ceylonin pivotal stopped sponsoring groovy moved apache foundation believe groovy wide enough support base unique niche jvm scripting also good sign correlate commit frequency core groovy committers number commits drastically decrease point stopping someinterestingly enough scala kotlin recently invaded space transpiling javascript compiling nativein java jep proposal enhance language type inference feature already provided scala kotlin however limited local variablesinterestingly enough effort improve scala compilation time keeping subset language raise question keep scala ditch powerful feature macro great forecast cent groovy niche scripting leaf java scala kotlin vying pure application development space serverside jvmscala also carved space scala developer generally consider language superior java kotlin migrate another one however due spring google announcement kotlin may replace scala language developer go dissatisfied javakotlin android battle scala ignored area past invest future given kotlin far ahead gamekotlin rise mobile intended move rather nice unexpected surprise jetbrains used way forward soon noticed trendkotlin interoperability java killer feature may convince manager migrate legacy project start new project kotlin nonbreaking backward compatibility java much interested opinion dear reader even especially disagree please courteous provide fact prove point
150,Lobsters,scala,Scala programming,"Domain models, Algebraic laws and Unit tests",http://debasishg.blogspot.com/2017/06/domain-models-algebraic-laws-and-unit.html,domain model algebraic law unit test,law cat scalacheck github repo functional reactive domain modeling,domain model domain element form algebraic abstraction honoring certain law get rid many explicitly written unit test checking law course squint hard discover lawful abstraction hide behind concrete domain element consider simple abstraction money keep track amount various currency scala import money import money usd scala val money usd lawsmoney add aud scala val n add money aud n lawsmoney add usd scala val p add n money usd p lawsmoney value money base currency usd scala ptobasecurrency bigdecimal debit amount scala val q money usd q lawsmoney usd scala val r add p q r lawsmoney valuation money done term base currency usually usd one possible implementation money following part elided future explanation sealed trait currency case object usd extends currency case object aud extends currency case object jpy extends currency case object inr extends currency class money private law val item map currency bigdecimal def tobasecurrency bigdecimal itemsfoldleft bigdecimal case ccy amount moneyexchangeratewithusdget ccy getorelse bigdecimal amount override def tostring itemstolistmkstring object money final val zeromoney new money mapempty currency bigdecimal def apply amount bigdecimal ccy currency new money map ccy amount def add money amount bigdecimal ccy currency final val exchangeratewithusd map currency bigdecimal map aud jpy inr usd needle say quite number unit test check addition money including boundary case adding zeromoney hard see type money form monoid add operation speak bit loosely say money monoid add operation monoid law every instance need honor associativity left identity right identity model element need honor law algebra always recommended include verification law part test suite besides validating sanity abstraction one sideeffect verifying law get rid many explicitly written unit test operation form monoid automatically verified verifying law monoid money define monoid money using cat val moneyaddmonoid monoid money new monoid money def combine money n money money add n def empty money zeromoney implementation previously elided add operation money using monoid map object money def add money amount bigdecimal ccy currency new money mitems map ccy amount verify law monoid money using scalacheck helper class cat offer import cat import kernellawsgrouplaws import orgscalacheck arbitrary gen import arbitraryarbitrary class moneyspec extends catsspec def specification validating law money money form monoid addition implicit lazy val arbcurrency arbitrary currency arbitrary genoneof aud usd inr jpy implicit def moneyarbitrary arbitrary money arbitrary running test suite verify monoid law monoid money info specification validating law money info info money info form monoid addition monoid law must hold money info monoidassociativity info monoidcombineall info monoidcombineall nil id info monoidcombinealloption info monoidcombinen id info monoidcombinen info monoidcombinen info monoidisempty info monoidleftidentity info monoidrightidentity info monoidserializable summary strive find abstraction domain model constrained algebraic law check law part test suite find get rid quite explicitly written unit test checking law abstraction course use property based testing unit test case want take look full code base github repo next post take next step towards modeling generic algebraic code using monoid pattern example code written parametric form without depending specialized concrete type robust easier test easier reason also discussed length book functional reactive domain modeling plan supplement material covered example code pattern
151,Lobsters,scala,Scala programming,Twitter forks Scala,https://github.com/twitter/reasonable-scala,twitter fork scala,rsc goal nongoals status documentation credit write scala compiler scratch compiling scala blazingly fast scala apps instant startup time,rsc reasonable scala compiler also known rsc experimental scala compiler focused compilation speed project developed language tool team twitter rsc fork reimplementation scala compiler believe performanceoriented rewrite provide unique perspective compilation cost introduced various scala feature idiom something currently hard quantify existing compiler rsc mission complement official compiler assist evolution experiment aiming discover actionable insight scala compiler architecture language design help compiler developer lightbend epfl optimize compiler benefit entire scala community goal dramatically improve scala compilation performance study compilation time overhead various scala feature identify subset scala compiled reasonable speed facilitate knowledge transfer scala compiler nongoals status documentation credit project inspired work martin odersky grzegorz kossakowski denys shabalin martin inspiringly showed day age still possible write scala compiler scratch greg unexpectedly demonstrated compiling scala blazingly fast denys shockingly revealed scala apps instant startup time
152,Lobsters,scala,Scala programming,sbt 1.0.0,http://www.scala-sbt.org/1.0/docs/sbt-1.0-Release-Notes.html,sbt,sbt release sbt bug fix enhancement internal contributor sbt bug fix dwijnand zinc zinc jvican zinc jvican cunei lm laughedelic leonardehrenfried dwijnand improvement alternative watch mode stringbean contributor sbt bug fix kczulko cunei lm dpratt dwijnand dwijnand dwijnand guillaumebort zinc dwijnand lm cunei internal contributor sbt bug fix jroper dwijnand duhemm duhemm util watchsource duhemm io sbt feature fix change compatibility implication migrating sbt scala dwijnand dropped dreprecations migrate buildsbt migrate feature fix improvement zinc jvican jroper valydia xuweik romaniakovlev scope scope delegation lm jvican lm jvican zinc smarter jvican jvican io duhemm io zinc krever zinc gheine internals jvican dwijnand detail major change zinc classbased name hashing sbtsbt zinc lukeindykiewicz rebooted jvican jrudolph io dwijnand duhemm jvican lm duhemm lm jvican jsuereth lm jvican zinc jvican jvican lm lm lm contributor credit,sbt releasessbt hotfix release sbt series bug fixesenhancementinternalcontributorsa huge thank everyone helped improve sbt zinc using reporting bug improving documentation porting build porting plugins submitting reviewing pull request release brought contributor according git shortlog sn nomerges sbt zinc librarymanagement util io website eugene yokota kenji yoshida xuweik jorge vicente cantero jvican dale wijnand leonard ehrenfried antonio cunei brett randall guillaume martres arnout engelen fulvio valente jens grassel matthias kurz olegych philippus baalman sam halliday tim underwood tom thank sbt hotfix release sbt series bug fixesfixes recompiling loop source generator sbtbuildinfo present dwijnand fix undercompilation inheritance source zinc fix compilation packageprotected object zinc jvican workaround java returning null getgenericparametertypes zinc jvican fix test detection regression sbt filter nested objectsclasses list restoring compatibility cunei us scala build definition includes fix runtime reflection empty package member java fix extra ivy style pattern lm laughedelic fix destination file exist error message including file name leonardehrenfried fix jdk warning illegal reflective access library management module ivy dwijnand improvementsadds sbtwatchmode system property allow switching back old polling behaviour watch see detail alternative watch modesbt introduced new mechanism watching source change based nio watchservice java platform namely macos led long delay change picked alternative watchservice platform planned sbt meantime option select watch service added new sbtwatchmode jvm flag added following supported value polling default macos poll filesystem change mechanism used sbt nio default platform use nio based watchservice experiencing long delay nonmacos machine try adding dsbtwatchmodepolling sbt option stringbean contributorsa huge thank everyone helped improve sbt zinc using reporting bug improving documentation porting build porting plugins submitting reviewing pull request release brought contributor according git shortlog sn nomerges sbt zinc librarymanagement util io website eugene yokota dale wijnand michael stringer jorge vicente cantero jvican alexey alekhin antonio cunei andrey artemov jeffrey olchovy kenji yoshida xuweik dominik winter long jinwei arnout engelen justin kaeser leonard ehrenfried sakib hadžiavdić thank sbt hotfix release sbt series bug fixesfixes terminal echo issue kczulko fix deliver task add makeivyxml sensibly named task cunei replaces deprecated use okurlfactory fix connection leak lm dpratt refixes false positive dsl checker setting key dwijnand fix run bgrun picking change directory classpath dwijnand fix change value crossscalaversion dwijnand fix sbt server missing message guillaumebort refixes consoleproject zinc dwijnand add jvm flag sbtgigahorse enabledisable internal use gigahorse workaround npe javanetauthenticator used conjunction repository override lm cunei add jvm flag sbtserverautostart enabledisable automatic starting sbt server sbt shell also add new startserver command manually start server internalcontributorsa huge thank everyone helped improve sbt zinc using reporting bug improving documentation porting plugins submitting reviewing pull request release brought contributor according git shortlog sn nomerges sbt zinc librarymanagement website dale wijnand eugene yokota kenji yoshida xuweik antonio cunei david pratt karol cz kczulko amanj sherwany emanuele blanco eric peter guillaume bort james roper joost de vries marko elezovic martynas mickevičius michael stringer răzvan flavius panda peter vlugter philippus baalman wiesław popielarski thank sbt hotfix release sbt series bug fixesfixes command support cross building command added sbt traveres subprojects respecting crossscalaversions however longer accepted command argument brings back support jroper fix addsbtplugin use correct version sbt cross building dwijnand fix run compile task including runtime configuration reimplementing run term bgrun show actual potential option inspect duhemm includes base directory watched source duhemm add attempt workaround intermittent nullpointerexception arround logging util reverts bad forward porting watchsourcethe watch source feature went major change sbt sbt using nio however clear migration path rectifying sbt first sbtwatchsource new alias sbtinternaliosource hopefully easy enough remember key named watchsources next def apply base file def apply base file includefilter filefilter excludefilter filefilter constructor added companion object sbtwatchsource backward compatiblity sbt add support append instance file seq watchsource directory want watch watchsources watchsource sourcedirectoryvalue list file watchsources sourcedirectoryvalue scala get duhemm io sbt fix change compatibility implicationssee migrating sbt also sbt us scala build definition plugins also requires jdk many case class replaced pseudo case class generated using contraband migrate copy foo xxx withfoo xxx example updateconfiguration retrieveconfiguration publishconfiguration refactored use builder pattern zinc drop support scala earlier scala must use scala must use latest patch release recommended config xyz must directly assigned capitalized val like val xyz config xyz capture lh identifier configuration use shell later change publishto otherresolvers settingkeys taskkeys dwijnand pathrelativizefile basefile file renamed iorelativizefile basefile file pathfinder method renamed allpaths method pathfinderx mapper moved def pair pathfinder number method sbtpath relativeto rebase flat longer default namespace virtue mixed sbt package object use sbtiopath access sbt renames global scope component zero disambiguate globalscope sbt us configref place string used reference configuration updatevalueconfiguration pas configuration implicitly convert configref change sourceartifacttypes docartifacttypes set string seq string setting renames early command feature command early command drop sbt style hyphenseparated key name use publishlocal instead publishlocal log option error warn info debug added shorthand early error etc sbtprocess sbtprocessextra dropped use scalasysprocess instead incoptionsvaluewithnamehashing option removed name hashing always testresultvalue called testresult scripted plugin crossversioned must use depending dropped dreprecations sbt style build trait deprecated sbt removed please migrate buildsbt auto plugins build trait work well together feature largely subsumed multiproject buildsbt sbt style project constructor restricted two parameter setting parameter work well auto plugins use project instead sbt style key dependency operator removed please migrate operator source confusion many user long removed doc formally deprecated since sbt nonauto sbtplugin trait dropped please migrate autoplugin auto plugins easier configure work better remove settingssets method project along addsetsbtfiles drop deprecated inputtask apply method inputtask dsl method use definputtask defspacedelimited parsed drop deprecated projectreference implicit lift use rootproject uri rootproject file localproject string drop deprecated seq dsl method use seq pas setting without wrapping drop deprecated fileseq file setting enrichment use value defsetting drop deprecated subprocess apply overload use subprocess forkoptions runjvmoptions drop toerror opt option string unit equivalent opt foreach syserror used wrap scalarun run replacement scalarunrun failed foreach sys error getmessage featuresnew incremental compiler called zinc detail interactive shell add network api detail fixesimprovementsscala center contributed javafriendly zinc api overhaul zinc internal api good scala integration build tool zinc jvican scala center contributed binary format zinc internal storage see scala center contributed static validation buildsbt see library management api parallel artifact download see startup log level dropped error script mode using scalas replace cross building support sbtdoge allows build project multiple different combination cross scala version cross built correctly behaviour changed update scala version project support scala version scala version post fixed force change project v argument added print verbose information project setting changed along cross scala version jroper ivylogginglevel dropped updateloggingquiet ci environment detected add logging name different buildsbt matching sbt file used valydia add ability call aggregate current project inside build sbt file xuweik add new global setting asciigraphwidth control maximum width ascii graph printed command like inspect tree default value corresponds previously hardcoded value character romaniakovlev revamped documentation scope added scope delegation port sbtcrossbuilding command plugin cross building see add support crossversioned exclusion jvican add new offline mode ivybased library management lm jvican number feature related dependency locking see improved eviction warning presentation see better main class detection zinc smarter faster startup sbt use java refection discover autoimport jvican faster startup reuse global instance parsing jvican add interactionservice sbtcorenext keep compatibility sbt add new watchservice abstract pollingwatchservice java nio io duhemm behalf scala center add variant iocopyfile iocopydirectory accept sbtiocopyoptions see detail pathdirectory pathcontentof donated sbtnativepackager io apidiff feature used debug zinc us scala implementation borrowed dotty zinc krever zinc internal make extractapi use perruncaches zinc gheine internalsadopted scalafmt formatting source code using neoscalafmt scala center contributed redesign scripted test framework batch mode execution scripted reuses sbt instance run sbt test reduces ci build time jvican sbt built using sbt dwijnand detail major changeszinc classbased name hashinga major improvement brought zinc grzegorz kossakowski commissioned lightbend classbased name hashing speed incremental compilation scala large project zinc name hashing track code dependendencies class level instead source file level github issue sbtsbt list comparison adding method existing class project scalatest andhaveword class optionresultmatcher class scalascala platform class scalascala matchcodegen class depends factor class organized see improvement reason speedup compiles fewer source file untangling class source file example adding method scalascala platform class sbt name hashing used compile source new zinc compiles source zinc api changesjava class xsbticompile package incoptions hide constructor use factory method xsbticompilefooof renames ivyscala ivyscala key scalamoduleinfo scalamoduleinfo xsbtireporter log take xsbtiproblem parameter call log problemposition problemmessage problemseverity delegate older log xsbimaybe changed corresponding java class javautiloptional javautilsupplier javautilfunction remove unused resident option zinc lukeindykiewicz sbt includes server feature allows ides tool query build setting invoke command via json api similar way interactive shell sbt implemented shell command server also shell command listens human input network input user minimal impact server march rebooted server feature make small possible worked collaboration jetbrains jastice work intellij sbt interface narrow feature list sbt thing originally wanted long term hope see better integration ide sbt ecosystem using system example ides able issue compile task retrieve compiler warning json event type xsbtiproblem message category severity warn message pure expression nothing statement position may omitting necessary parenthesis position line linecontent offset pointer pointerspace sourcepath tmphellohelloscala sourcefile file tmphellohelloscala level warn another related feature added bgrun task example enables server process run background run test static validation buildsbtsbt prohibits value call inside body expression anonymous function task sbtunchecked annotation used override check static validation also catch forget call value body task jvican eviction warning presentationsbt improves eviction warning presetation warn may incompatibility among library dependency warn library evicted warn comgooglecodefindbugs warn run evicted see detailed eviction warning warn found version conflict library dependency suspected binary incompatible warn warn comtypesafeakka selected warn deheikoseeberger depends warn comtypesafeakka depends warn comtypesafeakka depends warn warn run evicted see detailed eviction warning sbtcrossbuilding jrudolph sbtcrossbuilding plugin author plugin add cross command sbtversion switch command similar switching multiple sbt version across major version sbt merges command sbt feature provides useful migrate plugins sbt switch sbtversion plugincrossbuild shell use plugin build sbt scala version need make change specific sbt version include binary sbt version number used postfix run command across multiple sbt version set crosssbtversions vector run compile forward ported copyoptionssbt io add variant iocopyfile iocopydirectory accept sbtiocopyoptions copyoptions example pseudo case class similar builder pattern import sbtio io copyoptions iocopydirectory source target following iocopydirectory source target copyoptions withoverwrite false withpreservelastmodified true withpreserveexecutable true io dwijnand library management api parallel artifact downloadsbt add library management api coauthored eugene yokota lightbend martin duhem duhemm scala center api aim abstract apache ivy well alternative dependency resolution engine ivy cached resolution coursier parallel artifact download ivy engine contributed jorge jvican scala center also introduces gigahorse okhttp network api us square okhttp artifact download well lm duhemm lm jvican jsuereth lm binary format zinc internal storagejorge jvican scala center contributed binary format zinc internal storage using google procol buffer new format provides u three main advantage backwards forward binary compatibility analysis format level faster serializationdeserialization analysis file provides better way make analysis file machineindependent zinc jvican dependency lockingdependency locking feature still progress jorge jvican scala center added number related feature would work together allow dependency locking frozen mode ivybased library management make sure resolution always intransitive lm add support specify resolver dependency lm add managed checksum tell ivy skip checksum process lm contributorstoo many people thank see credit
153,Lobsters,scala,Scala programming,Integrating Eta into your Scala projects,https://blog.eta-lang.org/integrating-eta-into-your-scala-projects-a8d494a2c5b0,integrating eta scala project,integrating eta scala project pull pull plugin prerequisite motivation available github cagov note project setup sbteta instruction data file implementation haskell integration post line line jwt java wrapper type documentation blog post series line line line previous post firstname line allows embed eta existing project use jvm language documentation turn gitter irc slack google group github twitter thanks reading stay tuned tutorial update,integrating eta scala projectsvia sbt pluginconnecting eta scala using sbtwe already shown pull haskell package pull java code eta post show conveniently push eta code scala using sbt pluginprerequisitesmotivationto provide context around want integrate eta scala project first place going setup project around specific problem project available github want see directly build scratch understand piece togetherimagine existing scala web service track data writes database find slowing response time scale building new microservice handle data instead take care database transaction moreover use communication channel say kafka communicate data processingin post simply reading writing file make easy run locally minimal effort modify project make microservice kafka consumernow let talk going process datahere sample data id firstname jerrold lastname hache email cagov gender male ipaddress event click note pretty printed reading pleasure individual json object compacted single lineas see user data primary payload number time clicked something interestinglet assume bug old version main service gave u inaccurate number click particular le actual numberthe job microservice make firstname field capital lettersmake lastname field capital lettersfix number click adding processingproject setupstart new sbt project sbt new minimum scala buildname something project exampletemplate applied examplethe project structure look something like example src main scala example helloscala test scala example hellospecscala project buildproperties add sbteta plugincreate new fileprojectpluginssbtadd following line addsbtplugin comtypelead sbteta setup etlas projectcreate srcmaineta directory tree make current working directory mkdir p srcmaineta cd srcmainetainitialize etlas project following instruction difference shown etlas initpackage name default eta example package build library executableyour choice source directory none src specify choice default none guessing dependency generating license generating setuphs generating changelogmd generating examplecabal copy content data file srcmainresourcesdatajsongreat project structure ready look something like example src main eta changelogmd license setuphs examplecabal scala example helloscala project pluginssbt let take look solve problem aboveimplementationcreate srcmainetaexampletransformhs following content seen already simple example end haskell integration post explains similar eta code linebyline explaining bit different example make sure read firstline javathe java module standard library provides many helper function working java foreign function interface ffi line jstring jstringthis main function work type signature indicates take jstring return jstring jstring eta type map java javalangstring referred jwt java wrapper type type used working java ffi consult documentation blog post series ffi informationline tojava transform fromjavathis implementation fixjson function note make mention argument fixjson express pipeline function pipeline constructed operator function composition read righttoleftit mean take input jstring fixjson pas fromjavatake result fromjava pas transformtake result transform pas tojavatake result tojavaand make output fixjsonnote concise code eta functionalfirst language basic pattern functional programming extremely easy express clear readline transform text texthere use keyword declare helper function expression allows u break apart large fixjson function invidual piece glue together using operator endtext eta equivalent java javalangstring fromjava tojava overloaded function allow convert jwts eta typesline json json key firstname string ttoupper key lastname string ttoupper key event key click integral explained end previous post us lens dsl haskell declaratively express transformation rulessome interesting feature code expression strongly typed tried glue together lens make sense eta compiler allow program compileno need check whether field exists json check field null check right type underlying implementation simply apply change find match mean data missing firstname field code throw exception instead simply apply uppercase transformation string move online export java static etaexampletransformfixjson fixjson jstring jstringthis one powerful feature eta import java method eta also export use jvm languagethis allows embed eta existing project use jvm languagethis declaration particular generate new java class form package etaexample public class transform public static string fixjson string arg code generated eta compiler invoke eta runtime system information foreign export declaration consult update srcmainetaexamplecabal add dependency library needed compile program also mention couple configuration option library exposedmodules exampletransform builddepends base aeson lensaeson lens text defaultlanguage defaultextensions rename srcmainscalaexamplehelloscala srcmainscalaexamplemainscala replace content package exampleimport javaiofileimport javaioprintwriterimport scalaiosourceimport etaexampletransformobject main extends app val writer new printwriter new file outputjson sourcefromresource datajson getlinesforeach json writerwrite transformfixjson json n writerclose read datajson resource process linebyline calling fixjson method exported previous step writes resulting output outputjson file created directory program open terminal root sbt project run sbt sbt info etlas checking maven dependency info etlas resolving dependency first time using eta note take time download compile eta dependency wait patiently future invocation fasteronce done inside sbt console compile run program compile run check resulting outputjson see json successfully transformed turnnow seen integrate eta scala think way introduce projectshere question ask want guage whether eta help project deal lot complex data transformation project benefit static type checking converting runtime error compiletime error without getting way want spend le time testing debugging time writing code substance want push work compiler sip coffee answered yes question find eta extremely helpfulif issue please reach u gitter irc slack google group github twitterthanks reading stay tuned tutorial update
154,Lobsters,scala,Scala programming,"Scala Vector operations aren't ""Effectively Constant"" time",http://www.lihaoyi.com/post/ScalaVectoroperationsarentEffectivelyConstanttime.html,scala vector operation nt effectively constant time,scala vector operation nt effectively constant time book blog post stackoverflow answer official scala documentation scala vector work blog post official scala documentation n n n multiplication constant argument effectively constant realworld performance good due cache effect actual benchmark bigo actual benchmark actual benchmark official scala documentation actual benchmark intmaxvalue go formal definition reductio ad absurdum max size input mattered earlier invalid given definition asymptotic bigo complexity constant factor mattered earlier constant factor mattered part deux python conclusion,scala vector operation nt effectively constant timeone oftrepeated fact scala language immutable vector implemented using tree make many operation take n time given maximum size element never take step perform given operation call effectively constant time fact found way book blog post stackoverflow answer even official scala documentation logic sound good surface totally incorrect taking logic even one two step illustrates post walk logic incorrect explore absurd conclusion reach logic taken true demonstrate scala vector operation effectively constant timeabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programminghow scala vector work scala vector implemented balanced tree value leaf except instead binary commonly seen tree used implement vector node tree contains child instead otherwise operation vector tree work similar binary tree work looking element index within vector example involves starting root tree walking node node find element interested also bookkeeping nt change gist approach balanced binary tree n item n node deep would n node need walk get root element interested scala vector tree would n item walk hence lookup index operation n balanced binary tree n scala vector scala vector immutable perhaps unlike many binary tree implementation affect lookup described since lookup mutate tree turn many operation immutable binary tree also n size tree operation like create new tree one element inserted create new tree one element removed create new tree one element replaced take n immutable binary tree eg immutable binary avltree described wo nt go detail case take word lot resource online going detail blog post explaining inserting simplified immutable binary tree take n time since scala vector immutable balanced tree rather binary tree operation lookup insert remove replace take n time instead n time given max size machine integer jvm mean never take step perform operation vector far true uncontroversial according official scala documentation make operation take effectively constant time widely repeated claim entirely incorrect rest blog post illustrates whyo n n n straightforward way seeing scala n vector operation really logarithmic n asymptotic bigo analysis reduce one turn require trick highschool math verybasics bigo notation n logk n logk arbitrary constant k simple math unrelated bigo notation datastructures scala language given k n becomes n resolve n n know scala n vector operation n vector operation apply multiplication constant rule kg g k nonzero k g n find scala vector operation n none rule particularly novel complex exotic something firstyear college student able figure part first homework bigo notation turn scala n vector operation simply logarithmic take log n time perform vector n itemsarguments effectively constant unfortunately nt end discussion many argument seen justifying scala vector operation effectively constant despite obvious analysis go various argument seen explain wrongbut realworld performance good due cache effect one point often muddle discussion scala vector performance fact scala vector actually reasonably fast fast seen actual benchmark overall terrible part due thing like cachelocality branching tree mean element leaf stored relativelycompact array make traversing manipulating substantially faster working binary tree traversal follow considerable number pointer upanddown order advance single element improvement cache locality real effect measured however cache effect similar thing irrelevant analyzing asymptotic bigo performance operation data structure scenario want analyze behavior data structure idealized setting similarly actual benchmark bigo analysis irrelevant compared hard number fast code actually running neither analysis encompassing useful way question discussing idealized asymptotic bigo performance performance actual benchmark case official scala documentation single concrete number found lot term like constant log linear clearly describing asymptotic bigo performance cacheeffects similar thing would turn actual benchmark canandshould disregarded similarly programmer discus compare various datastructures programming language without concrete application benchmark mind often term asymptotic bigo performance various operation could using heretofore unheard analysis technique one two described someone rigorously describes technique assume using one wellknown approach mentioned know talking idealized asymptotic bigo performance characteristic scala vector official documentation colloquially bigo analysis near complete picture world cacheeffects significant constant factor choose analyze performance datastructures must follow rule analysis make sense thus rule bigo notation scala n vector operation log n effectively constant intmaxvalue go given scala vector operation take n step complete given max size vector scala signed integer value never take step complete operation true uncontroversial invalid claim constant therefore runtime operation effectively constant reasoning fall apart consider formal definition bigo notation let f g two function defined subset real number one writes f x g x x infinity positive constant sufficiently large value x absolute value f x multiplied absolute value g x note defined x infinity x x x infinity thus fact scala vector running jvm us machineintegers ca nt go entirely irrelevant bigo notation mentioned someone formallydefines rigorous new analysis approach replace bigo notation actualbenchmarks two tool analyze thingsreductio ad absurdum one way disproving argument find flaw logic another common approach use logic prove something absurd possibly correct since know endresult false reached endresult using argument therefore know must flaw argument even know exactly flaw turn using argument show n effectively constant prove sort absurd result section explore selection themwhat max size input mattered earlier shown discussing aymptotic bigo complexity considering vector operation performance showed n go logic used shown effectively constant invalid given definition asymptotic bigo complexity let say ran thought experiment imagine could perform asymptotic bigo analysis maximum size input eg n true n go certain constant given size limit jvm machine integer many rate growth also grow certain constant given size limit turn given limit n n operation complete step n operation complete step constant ca nt n n operation running jvm machineintegers called effectively constant even try limit reasoning small constant defines small perhaps nt count small think pretty small argument valid need reason f x enough call f effectively constant f x nt need accept x also effectively constant claim think many would agree absurd nt able provide former unwilling accept latter accept f x go n limited jvm machineintegers logic bunkwhat constant factor mattered earlier shown given definition bigo complexity constant factor performance entirely irrelevant given n equivalent n equivalent n rule bigo analysis however could run thought experiment constant factor matter bigo analysis could shift balance logarithmic effectively constant turn given n algorithm logarithmic n n algorithm effectively constant prove sort crazy thing let consider single n vector lookup effectively constant however perform five vector lookup given five vector lookup take time long single vector lookup combined bigo complexity five lookup n n logarithmic shown single vector lookup effectively constant five consecutive vector lookup logarithmic clearly absurdwhat constant factor mattered part deux taking logic let u imagine n algorithm say binary search implemented say python first approximation cpubound python code run slower equivalent java scala code decided constant factor matter could say algorithm implemented java would n given already said n logarithmic n effectively constant leave n least say better effectively constant count time taken run algorithm number way wallclock cputime assembly instruction etc whatever x use still find algorithm java us le x algorithm python thus shown logarithmic algorithm implemented python becomes effectively constant implemented java clearly absurd conclusion illustrates precisely constant factor considered bigo analysisconclusion scala immutable vector operation well related map set operation logarithmic time take execute grows logarithmically size vector seen proved highschool math basic bigo notation accept logic arguing scala vector operation effectively constant time could prove none make sense basic problem effectively constant thing rigorous definition broadlyaccepted meaning bigo notation thing bigo constant time smallo bigomega smallomega bigtheta notation le common wellknown rigorously defined meaning amortized assuming integer operation expected n worstcase welldefined property people throughout computersciencesoftwareengineering community understand coming entirely different angle per operation item collection operation take cpu cycle per input element also thing useful rigorous broadly understood effectively constant given maximum size input rigorous useful definition definition seen ascribed full hole lead absurd conclusion shown surprising given first line formal definition state x infinity feel good come novel datastructures practice fare better came also feel good optimize work well underlying hardware however abuse wellestablished notation think know better think better approach analyzing algorithm performance rigorously define properly discussed ensure satisfactory answer hole described toe line accept scala vector operation log n execution time logarithmic number item involvedabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
155,Lobsters,scala,Scala programming,Stackless Function Composition,https://mpilquist.github.io/blog/2017/03/11/stackless-function-composition/,stackless function composition,coyoneda cat encodes map fusion directly free monad yoneda lemma embedding coyoneda free stack safe function composition generalized stack safe function composition nickstanch pointed con snoc n traversal stack safe function benchmark conclusion,last fall spent lot time optimizing internals free monad used extensively modeling various algebra notably algebra supporting stream algebra supporting pull almost operation user performs stream pull result one bounce trampoline inside free optimization free pay big time article look one optimization map fusion operator fusion act condensing successive invocation operation single invocation hence map fusion act condensing successive map invocation single map context free map fusion mean fa free f f b g b c famap f map g result internal structure famap f andthen g result significant performance improvement free program lot successive map operation especially map implemented term flatmap pure condense multiple bounce trampoline single bounce coyoneda already data structure provides map fusion arbitrary type constructor coyoneda simplified implementation coyoneda based one defined cat sealed abstract class coyoneda f self type pivot val pivot f pivot val transform pivot def map b f b coyoneda f b new coyoneda f b type pivot selfpivot val pivot selfpivot val transform f compose selftransform def run implicit f functor f f fmap pivot transform object coyoneda def apply f b fa f f b coyoneda f b type pivot new coyoneda f b type pivot val pivot f pivot fa val transform pivot b f def lift f fa f coyondea f apply f fa identity coyoneda f store value f x x along function x form functor coyoneda f mapping result extending transformation function function passed map sense coyoneda encodes map fusion directly hide away f x x incrementally build transformation function composing function passed map composition complete coyoneda unwrapped mapping composed transformation pivot f x via single invocation map go detail theoretical underpinnings coyoneda interested great starting point free monad yoneda lemma rúnar bjarnason pretty powerful get map fusion functor lifting value coyoneda passing coyoneda function operate functor unwrapping via run embedding coyoneda free want go bit free embed map fusion inside map method embed coyoneda inside free mechanical embedding general idea add another constructor free representing map addition standard constructor like pure suspend bind map constructor wrap coyoneda implement map operation free either extends coyoneda transformation map called map instance construct new coyoneda map called constructor something like trait free f def map b f b free f b match case map coyoneda map coyonedamap f case map coyondea free f b f object free case class map coyoneda coyoneda f extends free f lose current definition coyoneda lose stack safety normally get stack safety monad interpret free free reassociating leftnested flatmaps map implemented term flatmap pure work fine coyoneda backed version lost stack safety due dependence scala function composition coyoneda map consider val z coyoneda int coyoneda identity int foldleft z acc accmap runapply foldleft z acc accmap runapply foldleft z acc accmap runapply javalangstackoverflowerror anonfun compose anonfun compose anonfun compose caused implementation compose trait r def apply r def compose g r x apply g x def andthen g r x g apply x call compose andthen return new function call apply previous function resulting stack frame composition stack safe function composition map fusion optimization hinge function composition compose function stack safe way use type aligned sequence sequence function output type function sequence compatible input type next function sequence need fancy typelevel function dependent type implement rather use simple con list final class b private private val f list extends b override def apply b fsfoldleft x f f x asinstanceof b override def compose c g c c b new gasinstanceof f object def apply b f b b f match case f b f case new fasinstanceof nil represent type level sequence list enforce type alignment property via type signature compose list always least one element thanks apply call compose result consing function type aligned sequence finally implement apply applying function turn using output previous function input next normal function composition stack safe foldleft identity int acc acccompose javalangstackoverflowerror mcii spapply mcii anonfun compose anonfun compose composition stack safe foldleft identity int acc acccompose definition sufficient restore stack safety coyoneda free need wrap inside definition coyoneda map generalized stack safe function composition provides stack safe compose inherits default andthen dangerous hope provide general purpose stack safe function wrapper extending support stack safe compose andthen arbitrary interleavings requires u store type aligned sequence data structure constant time con snoc operation standard library collection support vector correction nickstanch pointed scalacollectionimmutablequeue con snoc n traversal benchmark updated include queue based implementation final class b private private val f vector extends b override def apply b fsfoldleft x f f x asinstanceof b override def compose c g c c b new gasinstanceof f override def andthen c g b c c new f gasinstanceof object def apply b f b b f match case f b f case new vector fasinstanceof seems perfect stack safe compose andthen unfortunately terribly slow composed function going made small number composition function uncommon compose function vector effectively constant time con snoc large constant factor example single element vector allocate array internally constant factor end dominating performance result solution work fortunately data structure performs better con snoc concat amortized uncons n traversal negligible constant factor small collection import final class b private private val f catenable extends b override def apply b fsfoldleft x f f x asinstanceof b override def compose c g c c b new gasinstanceof f override def andthen c g b c c new f gasinstanceof object def apply b f b b f match case f b f case new catenablesingle fasinstanceof stack safe function benchmark let confirm performance assumption jmh benchmark state scopethread class functionbenchmark val f identity int benchmark def f benchmark def f benchmark def f benchmark def f benchmark def f benchmark def f compose f benchmark def f compose f benchmark def f compose f benchmark def f compose f benchmark def f compose f benchmark def f andthen f benchmark def f andthen f benchmark def f andthen f benchmark def f andthen f benchmark def f andthen f benchmark def foldleft f acc acc compose f benchmark def foldleft f acc acc compose f benchmark def foldleft f acc acc compose f benchmark def foldleft f acc acc compose f benchmark def foldleft f acc acc compose f benchmark def foldleft f acc acc andthen f benchmark def foldleft f int int acc acc andthen f benchmark def foldleft f acc acc andthen f benchmark def foldleft f acc acc andthen f benchmark def foldleft f acc acc andthen f benchmark def foldleft f acc acc compose f else acc andthen f benchmark def foldleft f int int acc acc compose f else acc andthen f benchmark def foldleft f acc acc compose f else acc andthen f benchmark def foldleft f acc acc compose f else acc andthen f benchmark def foldleft f acc acc compose f else acc andthen f running test via jmh run wi result info benchmark mode cnt score error unit info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops info thrpt ops based test faster small composition large collection slower slower small composition equal slower large composition beat beat bad stack safety come runtime performance cost one area investigation dynamic algorithm switch composition stack reach certain depth conclusion check source might notice free map fusion ended merging map fusion able get comparable performance gain simpler optimization cover use case eagerly evaluate bind pure f structure stepping free give u performance boost map fusion cover use case avoids minor constant factor performance hit
156,Lobsters,scala,Scala programming,Scala Design Success: Generics,http://soc.github.io/lessons-learned/generics.html,scala design success generic,click redirected,click redirected
157,Lobsters,scala,Scala programming,Extending Safe C Support in Leon (2017),https://infoscience.epfl.ch/record/227942/files/Extending%20Safe%20C%20Support%20In%20Leon.pdf,extending safe c support leon,,obj length filter flatedecode stream u 큊 e endstream endobj obj type objstm n first length filter flatedecode stream
158,Lobsters,scala,Scala programming,Using cats with reactive-kafka,http://www.iravid.com/posts/using-cats-with-reactive-kafka.html,using cat reactivekafka,current job motivating example creating optional producer carrying around context add type parameter summary,current job big fan using kafka replicate data service fact kafka single important input mechanism service structure using cqrs internal state determined entirely content command topic process topic use akka stream specifically wonderful reactivekafka library written several service form realized although akka stream reactive kafka capable expressive still duplicating copious amount code batch committing structuring graph atleastonce processing etc apart issue around conditionally producing topic touch moment get post going like start motivating example showing use reactivekafka motivating example provide context talking service continually performs following set action read message kafka topic deserialize json message using playjson validation convert message result write result database produce output message another topic commit offset original message map nicely akka stream graph let see look first import definition import akkadone import akkastreamscaladsl import akkakafka consumersettings akkaconsumersettings producersettings akkaproducersettings import akkakafkascaladsl import playapilibsjson import scalaconcurrent executioncontext future data type deserialize kafka case class message object message implicit val read read message data type result validation case class result object result def frommessage msg message either string result sort storage mechanism trait database def write result result future unit always using byte array kafka point carrying around big type provided library fix everything byte array type consumersettings akkaconsumersettings array byte array byte type producersettings akkaproducersettings array byte array byte type committablemessage consumermessagecommittablemessage array byte array byte type producermessage p producermessagemessage array byte array byte p type producerresult p producermessageresult array byte array byte p def toproducermessage kafkamsg committablemessage result result desttopic string producermessage committablemessage graph object processinggraph def apply consumersettings consumersettings producersettings producersettings db database implicit ec executioncontext runnablegraph consumercontrol future done consumercommittablesource consumersettings subscriptionstopics input json deserialization mapconcat kafkamsg jsonparse kafkamsgrecordvalue validate message match case jssuccess v list kafkamsg v case e jserror nil message validation mapconcat case kafkamsg msg resultfrommessage msg match case right result list kafkamsg result case left err nil database write mapasync case kafkamsg result dbwrite result map kafkamsg result producermessage creation map case kafkamsg result toproducermessage kafkamsg result output topic output via producerflow producersettings message commit mapasync messagepassthroughcommittableoffsetcommitscaladsl tomat sinkignore keepboth problem like point formulation drop message stream whenever error mapconcat stage might look fine first real problem commit offset thus reread message happen restart choose drop message since feed producerflow stage either effectful type give actual producermessage word optional produce carry around committablemessage even though working message result also mean hard separate business logic kafka logic stage deal domain data type message result kafka data type difficulty show testing stage would mock kafka data type run integration test solve problem let tackle separately creating optional producer begin must say going reimplement functionality reactivekafka far understand way want current interface provided library let assume simplicity validation procedure return option instead either def frommessage msg message option result write message kafka topic use producermessage data type type contains destination topic partition data metadata passthrough p data type attached producer result since option functor instance use map convert result using toproducermessage val kafkamsg committablemessage val mayberesult option result val maybeproducermessage option producermessage result mayberesultmap toproducermessage kafkamsg great actually write topic let assume plain old futurebased function writing def produce p producermsg producermessage p future producerresult p use produce option let pattern match work way case val result future producerresult p maybeproducermessage match easy case run function case pm produce pm case none desired return type future producerresult p trouble none case producermessage write return futurefailed new nosuchelementexception going use function mapasync akka stream mean going stream supervision using recover combinator catch specific exception replace placeholder element possible dirty instead let adjust return type future option producerresult p make sense optional producermessage mean get optional producerresult adjusted expression val result future option producerresult p maybeproducermessage match case pm produce pm map case none futuresuccessful none look much better mapasync unwrap future running stream continue working option throughout stream operation called traverse taking option producermessage running function producermessage future producerresult inside turning future option producermessage abstractly work f g b g applicative functor f traversable functor traverse form def traverse f g b fa f f g b g f b typeclasses included cat import required implicits use syntax enrichment import catsimplicits important ec scope otherwise applicative instance future ca nt derived implicit val ec executioncontext val result future option producerresult p maybeproducermessagetraverse produce added benefit work effect traverse instance includes either e try list even playjson jsresult capture generic produce another method import catstraverse def producef f traverse p fpm f producermessage p implicit ec executioncontext future f producerresult p fpmtraverse produce use stream without dropping bad message consumercommittablesource consumersettings subscriptionstopics input json deserialization map kafkamsg kafkamsg jsonparse kafkamsgrecordvalue validate message aseither message validation changed keep either map case kafkamsg maybemsg kafkamsg maybemsgflatmap resultfrommessage database write changed use traverse mapasync case kafkamsg mayberesult mayberesult traverse dbwrite map kafkamsg result producermessage creation map case kafkamsg result resultmap toproducermessage kafkamsg output topic output changed use producef mapasync producef message commit changed use traverse look bit noisier boilerplate added closure mapasync maybeproducerresult maybeproducerresulttraverse producerresult producerresultmessagepassthroughcommittableoffsetcommitscaladsl tomat sinkignore keepboth note change validation database write topic output commit stage completeness version producef using raw kafkaproducer kafkaclients package def producef f traverse producer kafkaproducer topicname topicname message f producermessage implicit ec executioncontext future f producerresult message traverse val promise promise producerresult producersend trecord new callback suppresswarnings array orgwartremoverwartsnull def oncompletion recordmetadata recordmetadata exception exception unit exception null promisefailure exception else promisesuccess recordmetadata tpassthrough promisefuture producerresult tuple recordmetadata carrying around context deal problem boilerplate carrying around original kafka message begin examine data type working committablemessage result second element changing add type parameter see get type message committablemessage type parameter usually functors val functor new functor message def map u fa message f u message u f turn cat u covered helpfully provides functor instance import catsimplicits val ourmsg message result kafkamsg result val mapped message string ourmsgmap tostring unless monoid instance left side tuple write applicative monad instance get traverse instance mean val ourmsg message result kafkamsg result val mappedfuture future message string ourmsgtraverse r future rtostring mean carry context remember tuple kafka message value future exciting given fact traversable functors compose rewrite database writing stage succinctly want traverse two layer given message f f traverse instance well make clear scalac need use catsdatanested wrap value type f g example work message either string result database write type annotation added clarity mapasync msg message either string result reminder committablemessage either string result val result future message either string result nested msg traverse dbwrite map value result traverse call following descended message functor descended either functor applied dbwrite function resulting message either string future result value finally flipped layer future top future message either string result wrap unwrap nested data type unfortunate least tucked away nicely inside stage trying implicitly derive traverse λ ɑ message f ɑ work summary retrospect think clear example construct functors traversables show mundane code surrounding infrastructure cat make ton boilerplate disappear close post graph look like improvement consumercommittablesource consumersettings subscriptionstopics input json deserialization map kafkamsg kafkamsg jsonparse kafkamsgrecordvalue validate message aseither message validation map map flatmap resultfrommessage database write mapasync msg nested msg traverse dbwrite map msg producermessage creation map case kafkamsg result resultmap toproducermessage kafkamsg output topic output mapasync producef message commit mapasync maybeproducerresult maybeproducerresulttraverse producerresult producerresultmessagepassthroughcommittableoffsetcommitscaladsl tomat sinkignore keepboth still dismantle message stage solved using specialized stage producing topic committing etc since pattern akka stream graph reactivekafka common service write ended packaging wrapper library along typeclass mechanism deserializing serializing message useful combinators syntax enrichment akka stream make graph declarative clear library published currently ping twitter itrvd interest try opensource thanks reading
159,Lobsters,scala,Scala programming,What the heck is a parser-combinator?,http://www.kimpel.com/2017/02/28/what-the-heck-is-a-parser-combinator/,heck parsercombinator,background basic scala fastparse li haoyi fastparse link wikipedia parsercombinator using c net building external dsl c git real world haskell using parsec library monad c conclusion,background basic recent project engagement assigned job migrate cobolbased mainframe application new environment core theme specifically project follows rehosting approach reasoning type approach agreed upon customer mainly due time cost course scope effort transformation quite huge many task involved complete application run completely different platform activity include migrating database flat file network database etc data common data store microsoft sql server replatforming cobol source code commodity hardware running virtualized environment using micro focus adjusting db access layer reflect change redesign batch processing job control list really task involved post want focus jcl job control language portion managed transform script new environment idea keep scripting fashion chose microsoft powershell target platform time cost mind typically want reduce effort much one way achieve automation minimize manual effort much possible came idea automatically translating jcl statement corresponding least similar m powershell command first started spreadsheet created list majority jcl statement tried understand main purpose behind statement used looked pattern statement meaningful way implementing future platform scala fastparse achieved started think easy flexible way translate jcl powershell idea born use parser understand jcl script colleague presented interesting project li haoyi named fastparse fastparse parsercombinator library scala let quickly easily write recursive descent text binary data parser scala li also wrote great post parsing using parsercombinators link short parsercombinator much powerful way parsing structured text data structure great advantage simple regular expression since find pattern also return contextual information paragraph back custom structure wikipedia lot additional information interested matter fact really simple easy use library create scala script read jcl file convert powershell script high degree automatic translation give example sample line jcl code note note comment written tell typical jcl line always start sign first column actual command start column column starting column content command case actual comment note step identify process line code would look like read line code jcl use regular expression find suitable pattern note section identified parse line code using corresponding fastparse clause convert equivalent m powershell command fastparse clause used scala library look like val note p note note val noteclause p start dollar w note w identifier anycharrep end syntax highlight clause enclosed start end statement w simply one whitespaces note specified another clause since upper lower case identifier look actual content store variable make use later exclamation mark specifies required anycharrep specifies character repetitive fashion clause executed like val success notestmt index noteclauseparse line notestmt null println format notestmt first line actually executes fastparse clause case success return actual note notestmt variable printed new file powershell file created earlier script simple println statement show real power tool par content also return one many even including list structured information back easy clever way another example run val p start dollar w run w rufile equal identifier rep sep comma anycharrep end val success runoptions index line runoptions null runopt runoptions folder filename available runopt first line show original jcl command run command allows script execute external file ie typically cobol program rufile option tell command cobol program located folder filename see fastparse clause definition folder filename structure simply repetitive identifier specification separator specified sign executing clause folder filename stored runopt variable simply loop parsercombinator using c net mentioned fastparse library scala great love simple yet powerful way creating parsercombinator environment however key background passion microsoft development stack always wondered whether something similar c net framework little bit research investigation found couple interesting tool library building external dsl c interesting blog creating external dsl domain specific language blog seems pretty outdated however source control git tiny c monadic parser framework quite uptodate real world haskell using parsec focus haskell approach also quite interesting implementation net library monad c c library monad full set parsercombinators based haskell parsec library listed tool library found first interesting work wanted accomplish reused lot sprache implementation created jcl powershell logic top look like step took implement custom logic created new console app demo purpose could use project type reused library functionality like parse parser result etc logic added new class called main program actually read source file line code source parsed processed approach pretty similar scala fastparse however clause implementation bit different c code sample transformation look like global envment dev public static readonly parser jclcommand jcltext open parsechar parsechar many command parsecharexcept many text parsechar many content parsecharexcept many text select new jclcommand command content public static readonly parser jclcommand globaltext variablename parsecharexcept many text parsechar openbrack parsechar filepath parsecharexcept many text closebrack parsechar select new jclcommand variablename filepath first line sample jcl statement actually defines global variable named envment assigns value dev using jcltext c clause first determine actual jcl command used along option parameter specified c call clause quite simple yet powerful var p jcltexttryparse line pwassuccessful tryparse method take line code try parse successful know valid jcl type statement process ignore matter comment line powershell positive case use globaltext clause parse option section global command see definition quite straight forward code look variable name sign content section ie example typically looking file path specified global variable enclosed bracket source actually implement logic simple var globalval globaltexttryparse pvaluecontent globalvalwassuccessful sbappend stringformat globalvalvaluecommand globalvalvaluecontent n globalsadd globalvalvaluecommandtolower else sbappend line n using stringbuilder actually create new powershell script finally written new file case parse job successful append p logic stringbuilder sb comment section also write target file regularly tracking purpose future state sme validate happening old new world globalsadd command simply add name global variable hashset easily reference global variable subsequent section powershell script conclusion leveraging parsercombinators extremely powerful reduces amount code implemented looking expression process content way another recommend tool library since typically quite easy implement add much value interesting see similarity different programming language enormous learning curve quite low fastparse syntax defining clause look cleaner visually observable however best part awesome parsercombinator approach really appreciated actual project also available favorite development stack net happy parsing let know question
160,Lobsters,scala,Scala programming,Underscore open-sourced all their Scala books,http://underscore.io/books/,underscore opensourced scala book,,learn write robust performant idiomatic scala focused guide established developer
161,Lobsters,scala,Scala programming,"Announcing Dotty 0.1.2-RC1, a major step towards Scala 3",http://www.scala-lang.org/blog/2017/05/31/first-dotty-milestone-release.html,announcing dotty major step towards scala,important bootstrap try scastie sbt example project standalone installation http githubcomlampepfldottyreleases homebrew scastie scastie technology preview release note release schedule version number explanation next step odersky darkdimius smarter felixmulder nicolasstucki liufengyun olivierblanvillain community build http githubcomlampepfldotty,wednesday may dmitry petrashko today excited release dotty version release serf technology preview demonstrates new language feature compiler supporting important dotty project name language compiler slated become scala ongoing development transparently developed open source software dotty project started year ago reached major milestone achieving bootstrap showing new compiler could compile today reached another milestone first release codebase development stop future part regular timebased release try several alternative use sbtdotty plugin get standalone installation try online scastie sbt using sbt newer sbt new setup new sbt project dotty compiler detail using dotty sbt see example project standalone installation release available download release section dotty repository http githubcomlampepfldottyreleases also provide homebrew package installed running brew install lampepflbrewdotty scastie scastie online scala playground support dotty try without installing anything technology preview technology preview demonstrates new language feature planned scala also ship tool help try dotty platform see full release note release schedule starting release adopting timebased release schedule nightly build published wanting forefront development every week release candidate cut based latest nightly build every week latest release candidate becomes release end week milestone promoted stable release see full version number explanation next step coming week month plan work following topic want get hand dirty good moment get involved join team contributor including martin odersky odersky dmitry petrashko darkdimius guillaume martres smarter felix mulder felixmulder nicolas stucki nicolasstucki liu fengyun liufengyun olivier blanvillain olivierblanvillain others dotty set library built every nightly snapshot currently includes scalatest squants algebra join community build make sure regression suite includes library get started see http githubcomlampepfldotty
162,Lobsters,scala,Scala programming,Scala: Tribulations of CanBuildFrom,http://www.scala-lang.org/blog/2017/05/30/tribulations-canbuildfrom.html,scala tribulation canbuildfrom,blog post github repo transforming element collection type constructor different arity sorted collection implicit builder escape hatch summary,tuesday may julien richardfoy canbuildfrom probably infamous abstraction current collection mainly criticised making scary type signature ongoing collection redesign blog post github repo opportunity try alternative design post explains many problem solved canbuildfrom alternative solution implemented new collection transforming element collection useful think string collection char element use common collection operation like find etc string value however map method challenging one transforms char element something might might char return type map method string value ideally want get back string transform char another char want get seq b transform char different type b way currently work welcome scala openjdk server vm java type expression evaluation try help scala foo map c ctoint scalacollectionimmutableindexedseq int vector scala foo map c ctoupper string foo feature limited map method flatmap collect concat others also work moreover string collection type need feature bitset map example current collection rely canbuildfrom implement feature map method defined follows def map b f char b implicit bf canbuildfrom string b implicit canbuildfrom parameter resolved fix return type resolution driven actual b type b char fixed string otherwise immutableindexedseq drawback solution type signature map method look cryptic new design solve problem defining two overload map method one handle char char transformation one handle transformation type signature map method straightforward def map f char char string def map b f char b seq b call map function return char first overload selected get string otherwise second overload selected get seq b scala solution would worked well user would required explicitly write type argument supplied f function scala type inference improved anymore necessary thus got rid cryptic method signature still supporting feature returning different type result according type transformation function type constructor different arity collection hierarchically organized essentially generic collection iterable three main kind collection seq set map k v worth noting map k v take two type parameter k v whereas collection type take one type parameter make difficult generically define level iterable operation return map k v specialized instance consider case map method want generically define iterable return type use method inherited list want return type list b inherited hashmap k v want return type hashmap l w clear want abstract type constructor concrete collection difficulty always take number type parameter second problem solved canbuildfrom current collection look type signature generic map method iterable def map b f b implicit bf canbuildfrom repr b return type inferred resolved canbuildfrom instance callsite repr b type actually drive implicit resolution repr list parameter fixed list b repr hashmap b tuple k v fixed hashmap k v new design solve problem defining two hierarchy iterableops collection whose type constructor take one parameter mapops collection whose type constructor take two parameter simplified version iterableops trait iterableops cc def map b f b cc b cc type parameter stand collection type constructor list concrete collection extends iterableops list set correct selftype constructor similarly simplified version mapops trait mapops k v cc extends iterableops k v iterable def map l w f k v l w cc l w hashmap k v concrete collection extends mapops k v hashmap set correct selftype constructor note mapops extends iterableops consequently inherits map method selected transformation function passed map return tuple sorted collection third challenge sorted collection like treeset treemap instance collection define order iteration according ordering relationship type element consequence transform type element eg using familiar map method implicit ordering instance new type element available canbuildfrom solution relies implicit resolution mechanism implicit canbuildfrom treeset x treeset x instance available type x implicit ordering x instance also available new design solve problem introducing new branch hierarchy one defines transformation operation require ordering instance element type resulting collection trait sortediterableops cc def map b ordering f b cc b however mentioned previous section need also abstract kind type constructor concrete collection consequently total four branch kind sorted sorted cc iterableops sortediterableops cc mapops sortedmapops summary instead one map method support use case described section previous one specialized hierarchy overload map method one supporting specific use case benefit type signature immediately tell story look actual implicit resolution know result get calling map implicit builder current collection fact canbuildfrom instance available implicit scope useful implement separately collection generic operation work collection type example use case new design still experimenting solution support feature far decision put implicit builder collection implementation might provide optional dependency instead seems use case could supported even without implicit builder could use existing collection instance navigate companion object providing builder could use companion object directly get builder breakout escape hatch previously seen current collection want transform collection new collection rely available implicit canbuildfrom instance get builder target collection implicit search driven type initial collection type element target collection available implicit instance designed make sense common case however sometimes default behavior want instance consider following program val x list int nil val xswithsquares map int int xsmap x x x x try compile get compile error implicitly resolved builder produce list int int instead desired map int int could convert list int int map int int would inefficient large collection fix issue using breakout escape hatch val x list int nil val xswithsquares map int int xsmap x x x x collectionbreakout breakout selects canbuildfrom instance irrespective initial collection type requires target type known case via explicit type ascription new design direct equivalent breakout solution example consists using view avoid construction intermediate collection val x list int nil val xswithsquares map int int xsviewmap x x x x map practice expect usage breakout could adapted new design using view followed explicit call however area remains explore summary article reviewed feature built top canbuildfrom explained design decision made new collection support feature without canbuildfrom
163,Lobsters,scala,Scala programming,Rust: A Scala Engineer's Perspective,https://beachape.com/blog/2017/05/24/rust-from-scala/,rust scala engineer perspective,rusty spiral staircase bit rust librariestools scala one enumeratum valueenums free monad tagless final frunk shapeless cat scalaz requestbin rusqbin cog forewarning scala wart ergonomics initiative overview thing happy battery included get started rust one shell command documentation website editoride microsoft studio code rust plugin rustup toolchain component type system port quickcheck higher kinded polymorphism pi value type another post type inference macro rust macro system hooking sbt scalameta fairly powerful tool procedural macro custom derives rust compiletime optimisation home page official site rust defeat gccc knucleotide labelledgeneric frunk benchmark code benchmark code syntax rustlazy lazystatic reference interoperability c ffi scalanative smooth current zeitgeist ergonomics initiative stackoverflow survey rfc repo thing adjusted semicolon significance ownership model stack v heap page note note mutability thing wish different async io tokio hyper trait object tracking rfc string cross compiling golang guide rustonraspberrydocker odd headscratchers actually need scoping lifetime brace issue gim tracking rfc rusti conclusion hlist type generic labelledgeneric frunk,year anniversary first line rust code coming getting year since wrote first line scala code thought would good idea summarise scalatinted perspective rust experience tm one year rusty spiral staircase jano de cesare objective language v language comparison written post part experience dump part waymark scala devs exploring thinking exploring rust bit written rust librariestools well scala one intent purpose scala engineer get paid far strongest language used rust side project library smaller utility scala side author enumeratum brings flexible enums valueenums scala library also dabbled writing macrobased library make thing like free monad tagless final nicer use rust side written frunk rust functional programming toolbelt roughly port shapeless bit catsscalaz mixed pretty funky thing type system blogged also wrote rust port requestbin called rusqbin based hyper small wip async client microsoft cognitive service called cog forewarning biased towards scala mostly gotten used scala wart said make effort try neutral possible talk rust mean rust stable use scala stable stuff write regard rust might changed time read ongoing ergonomics initiative overview thing happy battery included devenvironmentsetup experience rust amazing rust community striven make super easy get started rust show literally one shell command set everything need rustup managing rust toolbelts different versionschannels rust cargo managing build publishing cratesio includes among thing rustfmt formatting code run cargo project via cargo fmt rustdoc generating beautiful documentation website tool support doc test zero additional configurationsetup run part cargo test coming scala set fuss right gate breath fresh air feel like big win productivity know reason scala modular approach think would nice rubbed scala language editoride first started rust used intellij rust plugin later switched microsoft studio code rust plugin interface well rust language server installable rustup toolchain component feel lightweight offer assistance need type system lean towards functional programming paradigm side scala probably love following rust type system inheritance data type bottom type used much sparingly universal equality null trait basically haskell typeclasses many primary type instead int isize well essentially rust lot good thing scala type system one thing currently missing rust first class support higherkinded type hkt honest miss much way emulate extent rust ownershipmemory model tends push towards thinking granularly valuesreferences something perhaps conflict kind programming typically involving hktbased abstraction still sound unacceptable know get quite far building reuseable abstraction using rust trait associated type burnsushi port quickcheck available writing enforcing law interesting thing pipeline well higher kinded polymorphism pi value type adding functionality using rust trait familiar territory written typeclasslike stuff scala fact rust trait system feel lot similar haskell typeclass system scala something pro con scoping implementation given type example written introguide rust trait system another post type inference rust scala local type inference overall work pretty much way need write type function parameter scala leave return type compiler infer rust leave assumed unit macro rust macro system le powerful scala quite useful keeping code dry importantly integrates really well rest language fact enabled available box without additional dependenciesflags compared scala macro rust macro feel like natural part language run quite often readingusing rust library rust code base often see macro declared used immediately purpose code generation eg deriving trait implementation list numeric type tuples n element something scala user generally done outofband hooking sbt using another templating astbased tool hand scala usual refrain write macro compare approach two language taken feel scala may overambitious term giving developer power thus leading deprecation apis maintained due complexity indeed scala metaprogramming toolkit going another reform migration scalameta simplicity macro work based series pattern rust macro api may feel limiting first stick likely find accomplish initially thought example fact buildrestructure macro argument recursively call macro even call another macro fairly powerful tool said addition legacy macro system rust soon getting procedural macro similar scala devs used seeing get peek procedural macro like looking custom derives used implement derive labelledgeneric rust compiletime optimisation think news anyone rust fast efficient home page official site say run blazingly fast feature zerocost abstraction rustfaithfuls loudly trumpted rust defeat gccc knucleotide month ago even completely buy faster c part big jump say rust performance ballpark c least reason yes language implementation different compiler make difference etc particularly impressed rust compiler though sure llvm ability compile abstraction away operation enable zero overhead personal anecdote wrote labelledgeneric frunk expected performance difference using abstraction conversion structs versus writing conversion hand using nonnegligible difference shapeless version scala land benchmark code jmh benchmark result info benchmark mode cnt score error unit info avgt nsop info avgt nsop info avgt nsop info avgt nsop surprise rust manages compile frunk labelledgenericbased nontrivial multistep unoptimised using stack effort spent transform structs zerocost abstraction using labelledgeneric conversion add zero overhead writing transform hand benchmark code cargo benchmark result test bench nsiter test bench nsiter test bench nsiter test bench nsiter note rust v scala labelledgeneric benchmark completely applestoapples rust version need instantiate new source object every run move semantics illustrate performance difference labelledgenericbased v handwritten conversion two language syntax overall rust syntax similar scala sure small adjustment let let mut v var val using angle bracket instead square one etc overall language feel similar clike language heavily inspired ml scala people probably rejoice thing like enum available coming soon scala via dotty well partial destructuring eg assuming struct point x let point x p handful thing miss muscle memory beginning either implemented library done slightly differently lazy value rustlazy lazystatic method option foreach try let x myoption use x instead others plain missing byname parameter big deal fordo comprehension keyword argument last two hurt oh rust type trait named way scala camelcase identifier binding method use snakecase still find make code look longer big problem find reference help unsure likely pick reading library code anyways swift able find conclusive evidence credit given suggest influence scala rust interoperability c rust make working c smooth possible sticking mantra keeping thing safe reference take look section rust book deal ffi taken rust book link name snappy extern fn snappymaxcompressedlength sourcelength sizet sizet let x unsafe snappymaxcompressedlength syntax might look familiar played around scalanative taken scala native homepage extern object stdlib def malloc size csize ptr byte extern val ptr stdlibmalloc since calling ccode unsafe wrt memory threadsafety rust requires wrap ccalls unsafe wish hide user wrap call another function taken rust book pub fn validatecompressedbuffer src bool unsafe snappyvalidatecompressedbuffer srcasptr srclen sizet calling rust code c also smooth something scala native yet implement current zeitgeist current feel rust community community since librariesframeworks welcoming helpful also difficult quantify list observation rust stable year old yet official ergonomics initiative reduce friction asked hand full question stackoverflow gotten prompt helpful answer time rust loved language stackoverflow survey rust feel community driven got lively rfc repo since started tinkering seen least rfcs make language type macro custom derives syntax try thing adjusted semicolon scala semicolon optional almost everything expression therefore return value return val x assignment return unit certain thing nt return anything though import statement block import combeachape return nothing object hello return nothing rust semicolon nonoptional significance statement end semicolon return unit get turned expression thus return value taken rust book let x statement let let xsquared x x let xcube xsquared x expression assigned xcube xsquared x let z semicolon suppresses expression assigned z x ownership model stack v heap rust memoryownership model main killer feature give tighter control way program consumes memory maintaining memorysafety without ship garbage collector runtime get decide whether pas thing value reference well mutability binding including pattern matching also matter thing get allocated scala perhaps jvmbased language set rule decide whether something get put stack heap thus incur future cost garbage collection general time something get allocated stack primitive escape method field object reference object get allocated heap might fun runtime trick runtime environment like escape analysis overall get choose rust choose allocate thing heap instantiating inside transferring ownership data structure box vecs etc choose work plain value get pick abstraction based cost want pay feature guarantee offer safe multithread access page great reference point either way rust ownership system compile time make sure get data race caused instance modifying naked value different thread access control scala give user level control naturally adjustment made however contrary experience others find ownership stuff hard understand get used experience scala rich type system meant lifetime annotation stuff quite easy come grip maybe c c comsci course university helped note glasshalffull kind person guess say rust force take control rather give control matter perspective note find lot clone get compiler back maybe something quite right mutability mutability deserves mentioned separately coming year scala pretty much language stress immutability referential transparency road enlightenment writing first let mut mut self feel dirty took get used idea hey rome right help remember rust focused speed efficiency near actually zerocost abstraction thanks strict ownership model data race due mutability problem thing wish different async io scala framework deal sort io embraced nonblocking io utilising kind wrapper data type future task io usually monad separate description program execution identify type effect talking scary dirty outside world allows block executing thread waiting stuff happen data come back choosing suitable execution strategy rust land widelyused library seen redis client hyper various thing built rusoto rocket etc blocking work okay stuff like singleuser utility suboptimal application io heavy need serve large number concurrent user application thread get tied waiting data leaving unable serve request end potentially huge thread pool à la old school java servlet apps seems go rust spirit efficiency said know advance made area tokio tokenised io async io framework expose futurebased api making lot progress look productionready hyper defacto http client server framework going hit soon bring futuresbased api based tokio likely hope cascade libs based hyper also painful transform return future function every transformation cause concrete type object get chained tagged arbitrary closure type since writing result type nonoptional rust current solution declare return type box future le efficient runtime boxed trait object necessitate dynamic dispatch heap allocation hopefully soon impl trait released address issue tracking rfc string rust number way represent string string runtime string value content allocated heap str string lifetime static str string static lifetime baked binary vec mostly gotten used understand purpose one hope ergonomics initiative make situation better understand since string ubiquitous idea maybe ranting cross compiling obviously scala devs used compiling running binary everywhere thanks jvm mostly p expect rust compiles native machine code wish crosscompilation tool better box example like golang moment depending target platform crosscompilation rust bit involved several option adding target toolchain via rustup possibly installing package specifically target platform guide using prebuilt docker container hold settingsenvironment variablesinstallations needed compile target platform see rustonraspberrydocker using cross cargo tool seems like automates use case building raspberry pi tried first last one look winner would awesome see something like included default part rustup cargo odd headscratchers thing still quite get actually need ref opinion ref unnecessarily confusing tell mostly used binding pointer pattern matching match someint ref println none unreachable mut handing reference something bound let mut need mut instead us mut reason prove point fn nonempty mut string bool slen let mut string hello tostring hello mut string ca nt hello string scoping lifetime brace somehow managed code way deadlock using rwlock lifetimescoping behaviour brace used pattern matching opinion nonintuitive interested issue gim know thing pipeline wish rust yesterday higher kinded type specialisation aka finding specific implementation trait according type value call site right implement rust trait clash every implementation write specialisation remedy tracking rfc repl rusti think rust missing trick supplying one outofthebox especially got strong devenvsetup game kind comprehension working container type libs builtin would nice conclusion concludes take like use rust scala dev perspective one year overall happy year ago decided look rust fun exciting ride felt like every month getting new toy could immediately use type macro custom derives game changer made ergonomic write hlist type hand made genericlabelledgeneric practical respectively overall believe lot thing rust scala engineer like community friendly diverse easily find library interest get involved shameless plug contribution frunk always welcome side project write small system utility program microcontroller online resource easy find case rust really say hard get started
164,Lobsters,scala,Scala programming,Warts of the Scala Programming Language,http://www.lihaoyi.com/post/WartsoftheScalaProgrammingLanguage.html,wart scala programming language,wart scala programming language wart universal equality lincon atkinson blog eq multiversal equality running jvm scalajs scala native typeerasure implicits scala design pattern wart weak etaexpansion scalamock caller zeroparameter method decide many parens use needing curliescase destructuring anonymous function slated go away convoluted desugaring forcomprehensions ammonite scala repl forcomprehensions syntax restriction abstractnonfinal case class class implicit parameter list onenlmax conflating total destructuring partial patternmatching lincon atkinson blog conclusion six year ago,wart scala programming languagescala current favorite generalpurpose programming language however definitely share flaw deep tradeoff design language others trivial silly issue cause frustration far beyond level sophistication wart post explore opinion wart scala programming language hopefully raise awareness existence problem build desire fix broader communityabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming think scala disproportionate ratio superficialwarts deepdesignproblems many language relatively clean superficial syntax semantics hide crazy unpredictable core logic scala opinion relatively elegant core logic overlaid gnarly messy superficial syntax semantics every problem programming language wart many problem arise deep design decision tradeoff often nt correct solution proposed solution often come share often unsolved problem however many problem simply incidental exist particular reason particular benefit around obvious solution would noncontroversial really fixed year ago though second best time fix start today post cover thing nt consider wart set stage exploring incomplete list thing consider wart scala programming language wart people complain something nt mean wart thing scala language nt consider wart universal equality val x hello x string hello val int x boolean false scala let compare two value equality via operator forward java equal method hood defined def equal boolean allows sort human mistake go uncaught compile time example never return true regardless value x compiler able figure tell u example short mistake obvious larger example much le obvious eg example lincon atkinson blog foobar tolist list f b r false despite fact seems letting obvious class error clear correct way fixing programming language follow exact behavior java c etc let compare value willynilly even type mean never equal haskell eq typeclass seems like want restricting comparison type make sense scala people come similarbutdifferent idea multiversal equality proposal unsafeness equality problem making mistake like common experience eg refactoring code change string id class fix compile error equality check invalid without compiler help need go hunt manually furthermore sure solution make thing better solution nt trivial obvious enough make consider wartrunning jvm scala traditionally run jvm run javascript scalajs recently llvm scala native heart ecosystem tooling run jvm give scala benefit jvm good stack trace monitoringdeployment tool fast jit good garbage collector tremendous ecosystem library also give scala constraint jvm boxing everywhere resulting unnecessary gc pressure diskheavy binary format classfiles jar tremendously slow startup time nontrivial program example ammonite scriptrunner mediumsized commandline tool spends half second classloading running script counting actual programlogic run however reliance jvm deep enough core feature scala language debatable whether scala would able achieve success without piggybacking jvm offer would nice slowly reduce reliance happening scalajs scalanative hard tradeoff ca nt consider warttypeerasure val x list x list int list val xasinstanceof list string list string list println ylast javalangclasscastexception javalanginteger cast javalangstring init clinit jvm javascript platform using scalajs generic type erased mean asinstanceof isinstanceof patternmatch always considered equal result behavior cast list int list string without error though give warning crash runtime try extracta value already casted list behavior clearly unsafe result weird hardtotrackdown problem however clear correct behavior could noterase generic type like c contains performance cost compiling jvm javascript make interop erased jvm library le convenient could erase even like scalajs even toplevel type partially erased runtime meaning example run perfectly fine without error scalajs val x list val xasinstanceof list string println ylast full erasure scalajs javascript type also allows several interesting feature phantomtypes zerooverhead wrappertypes difficultimpossible jvm without jumping hoop also allows much aggressive optimization since optimizer longer need keep adding guard throw classcastexceptions get cast wrong cost get confusing error message write invalid cast experience basically nonissue practice since typical scala program tend rely cast lastly could argued full erasure help enforce parametricityencapsulation longer check class something calling method thus forced rely whatever abstract interface provided hence nt know correct answer good argument erasure le erasure good thing without obvious betterway nt consider wartimplicits scala allows implicit parameter passed manually also automatically passed function require based type example following case call repeat function twice passing count manually passing implicitly via implicit val c def repeat string implicit count int count defined function repeat repeat hello string hellohello repeat hello could find implicit value parameter count int val repeat hello compilation failed implicit val c c int repeat hello string hellohellohello scala also allows implicit conversion used define automatic conversion type another case class name string require snonempty defined class name val name hello name name hello val name javalangillegalargumentexception requirement failed scalapredef require name init init clinit implicit def autoname string name name defined function autoname val name hello name name hello val name javalangillegalargumentexception requirement failed scalapredef require name init autoname init clinit behavior may confusing unintuitive hardtodebug sometimes also form basis large number common scala design pattern scala would nt scala without implicits actual implementation implicits contains many strange corner case addition outright bug implicits core scala nt think could considered wart wart wart somewhere spectrum design issue outright bug thing think obvious solution would easy relatively uncontroversial fix nonetheless cause annoyance frustration disproportionate given trivial issue wart going discus weak etaexpansion scala maintains distinction function method general method thing call object whereas function object however since similar thing call give way easily wrap method function object called eta expansion def repeat string int defined function repeat repeat hello string hellohello val func repeat func string int string lambda func hello string hellohellohello use underscore assign repeat value func function object call happen automatically without based expected type place method used example expect func string int string assign repeat without val func string int string repeat func string int string lambda func hello string hellohellohello stubbing argument individually val func repeat func string int string lambda work bunch annoying limitation firstly even though fully convert method repeat string int string value using partially convert val func repeat hello missing parameter type expanded function x error repeat hello x val func repeat hello compilation failed unless know expected type func case partially convert val func int string repeat hello func int string lambda provide type partiallyappliedfunctionargument manually repeat hello int int string lambda bit strange easily convert entire repeat method function without specifying type convert function already know one argument provided strictly information repeat hello case repeat case yet somehow type inference got worse furthermore fundamental issue know repeat method take two argument ca nt val func repeat missing argument list method repeat object unapplied method converted function function type expected make conversion explicit writing repeat repeat instead repeat val func repeat compilation failed since compiler already know repeat method nt argument provided convert force go dance ask provide expected type func already know type repeat language firstclass function like python work fine def repeat return func repeat func hello hellohellohello lack automatic etaexpansion result people writing weird code work around example scalamock drawline interact turtle create mock turtle object val mockedturtle mock turtle set expectation mockedturtlesetposition expects mockedturtleforward expects mockedturtlegetposition expects returning exercise system test drawline mockedturtle weird foo dance something purely restriction etaexpansion sure good implementationreasons nt work nt see reason nt work languagesemantics point view user point view method function thing call scala generally successful asking think distinction however case like think nt good reason compiler nt try bit harder figure want giving asking pepper expected type place compiler already information need work put method need use information nt presentcallers zeroparameter method decide many parens use scala let leave emptyparens list calling function look kind cute calling getters def getfoo defined function foo getfoo int getfoo int however nt really make sense consider work language python def getfoo return getfoo func getfoo func getfoo int nt getfoo without parens int calling int parens give int however scala method special shown method empty parens list treated even specially furthermore feature really nt make sense start pushing def bar defined function bar bar int bar int bar int bar int bar int bar int bar int take parameter val bar compilation failed really behavior expect staticallytyped language call method number argument list n thing regardless earth type bar scala community like think definitionside variance better java usesite variance scala providing definitionsite parens every caller bar pick choose many parens want pas think solution clear method called many set parenthesis defined excluding implicits method call missing parens etaexpanded appropriate function value concretely mean given two function object thing def head def next currently behave like val thinghead work val thinghead compile error function called val thingnext work val thingnext work thereafter behave like val thinghead work val thinghead compile error function called val thingnext compile error found expected val thingnext work notably take away ability control many emptyparens function called rather shift decision user function author function since author function already decides everything else name argument return type implementation giving author decision emptyparens would unprecedented noparens property function would still possible author function would need define without parens already possible def baz defined function baz baz int baz int take parameter val baz compilation failed reason heard feature let call java getfoo method without parens seems like exceedingly weak justification language feature thoroughly break expectation staticallytyped language problem one option would allow usesite optional emptyparentheses java callsites scala callsites particular annotation optionalparens def foo would limit scope behavior mild javainterop quirk one many rather wart affecting core scala programming languageneeding curliescase destructuring anonymous function scala let create anonymous function x x syntax seq map x x seq int list want function work eg tuples nt work seq map x x missing parameter type note expected type requires oneargument function accepting consider pattern matching anonymous function case x val seq map x x missing parameter type val seq map x x compilation failed need swap similarbutannoyinglydifferent case syntax seq map case x x seq int list two change needing strange case destructure tuple ca nt compiler see getting b c function need tuple b c function convert automatically needing curly bracket rather parens even demanded case keyword reason seq map case x x nt work happily limitation slated go away future version however right definitely unnecessary trivial annoyance writing scala scala add bunch extension method every value codebase javalangassertionerror assertion failed scalapredef assert scalapredef ensuring ensuring init clinit hello string hello println yo yo really nt experience extension method rarely ever used someone want use import function write extension nt make sense pollute methodnamespace every value existance add unused functionalityconvoluted desugaring forcomprehensions scala let write forcomprehensions converted chain flatmaps map shown val x z x int int z int x j k z yield j k option int desugar x j k z yield j k desugared xflatmap yflatmap j zmap k j k nicely formatted desugared code try ammonite scala repl verify forcomprehension get transformed convenient way implementing nested loop list happily work thing nt list option shown future many thing also assign local value within forcomprehension eg x j foo k z yield j k foo option int syntax bit wonky nt need val ca nt define defs class run imperative command without println debug simple local assignment work may expect code transformed something like desugared xflatmap yflatmap j val foo zmap k j k turn instead get converted something like desugar x j foo k z yield j k foo desugared xflatmap ymap j val foo j foo flatmap x int int x scalaunchecked match case j foo zmap k j k foo although roughly equivalent end result case output format tremendously convoluted wastefully inefficient eg creating takingapart unnecessary far tell reason generated simpler version code shown aboveforcomprehensions syntax restriction mentioned defs class imperative statement generator forcomprehension scala seq println j seq console error expected found j seq rather arbitrary restriction far tell nt serve purpose force put random prefix statement make thing compile scala seq println j seq yield j seq int list really nt reason nt work outofthebox convert say seq def debug println debug debug j seq debug j k seq yield j k seq flatmap def debug println debug debug seq flatmap j debug j seq map k j k abstractnonfinal case class inherit case class extend new functionality case class foo int defined class foo foo foo foo foo int class bar extends foo defined class bar new bar int even declare abstract case class force someone inherit rather instantiating directly want case class allow inheritance label final far tell nobody people nt inherit case class declare case class abstract rememebr mark final literally programmer ever seen making good use abstract case class inheritance probably martin odersky think disallow force people use normal class want inherit themclasses implicit parameter list nt work class foo int defined class foo new foo foo foo class bar implicit int defined class bar new bar argument allowed nullary constructor bar implicit int val new bar compilation failed new bar bar bar one straddle line wart bug definitely fixed class defined one argument list nt magically sprout two know presence absence comment affect logic program object foo def bar x println foo bar x x def bar println foo bar defined class foo val baz baz int foo bar baz foo bar x foo bar baz foo bar foo bar wooo baz foo bar x foo bar wooo baz foo bar foo bar wooo hoo baz foo bar x see code behaves differently line foo bar baz unless line line comment newlines newline filled comment foobar x get called newline filled comment overload foobar get called place language syntax case class x x int int new x class x int int new defined class x x x defined class class z x int int found value val int compilation failed class w x int woohoo int defined class w full listing place comment change behavior newlines found onenlmax rule scalaparse grammar nt immediate answer correct solution sure make comment like nt affect semantics scala program conflating total destructuring partial patternmatching following example also lincon atkinson blog compiles without warning fails exception runtime val b c true bar else scalamatcherror bar class javalangstring init clinit basic problem scala see val b c nt mean two thing mean help extract value help check tuple help extract value fail runtime tuple currently assumes latter case make sort destructuring assignment unchecked thus extremely unsafe example least happily fails exception following exhibit problem instead truncates data silently losing b seq yield b seq string list though following also fails exception seq map case b b scalamatcherror class javalanginteger anonfun scalacollectiontraversablelike anonfun map scalacollectionimmutablelistforeach scalacollectiontraversablelikemap scalacollectiontraversablelikemap scalacollectionimmutablelistmap init clinit interpretation make sense match block partialfunctions expect fall next handler nt match nt make much sense case like nowhere fall correct solution would look something like default assume user want help extract value help check tuple require special keyword user want help extract value fail runtime tuple possible syntax might using case scala developer already associate partial function pattern match case b seq yield b case val b c true bar else would indicate want perform partial fail runtime match earlier noncase example b seq yield b val b c true bar else could verify pattern match complete otherwise fail compile timeconclusion wart listed inherent core scala language type value class trait function implicits none particularly deep controversial list obviously neither objective comprehensive nevertheless wart annoying far beyond level sophistication especially pose barrier newbie six year ago nt learned tune noise jump hoop able work scala elegant core nt capability contribute fix hopefully publishing able raise awareness community problem add pressure day sharp corner sanded reveal scala true elegance favorite wart scala language let u know comment author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
165,Lobsters,scala,Scala programming,Leaving Scala After Six Years of Development,http://soc.github.io/six-years-of-scala-development/departure.html,leaving scala six year development,click redirected,click redirected
166,Lobsters,scala,Scala programming,Scala Design Failure: Implicit Numeric Conversions,http://soc.github.io/lessons-learned/implicit-numeric-conversions.html,scala design failure implicit numeric conversion,click redirected,click redirected
167,Lobsters,scala,Scala programming,When the Scala compiler doesn't help,http://latkin.org/blog/2017/05/02/when-the-scala-compiler-doesnt-help/,scala compiler nt help,scala compiler nt help scala example setup bug example setup bug symbol literal example setup bug example setup bug example setup scalatest bug root cause type system feel loose much syntax optional scoped nowarn pragma update reddit,scala compiler nt help may scala much scala power come flexibility generality language mold quite extensively suit particular problem domain coding style downside scala sometimes permissive accommodating fault often hear haskell f user attest sense compiles work experience generally case scala illustrate point let walk example distilled honesttogoodness isweari mnotmakingthisup bug team encountered example setup following nonsensical code compiles warning error val b c foo bar else bug crash matcherror runtime always super broken compiler let expression multiple return branch scala try helpful picking first common ancestor type branch type whole expression case one branch type string type option int compiler decides developer really want whole ifelse expression type serializable since specific type claim string option descendant guess b c also serializable far compiler concerned assignment whole mess b c proven invalid get nary warning destined fail runtime example setup dashed test le boiled something like compiled error warning foobar tolist list f b r bug comparison surprisingly returning false figure syntax highlighting problem clearer foobar tolist list f b r see character list typo meant type missed quotation mark typed turn syntax blah actually valid scala represents symbol literal recall helpful compiler behavior mentioned example instead yelling putting symbol middle char list compiler generalizes assumes really wanted start list first common ancestor char symbol comparing list char list also raise objection theory impossible work example setup simple method definition class work fine class widget def dothething synchronized somebody make small change add log line start method class widget def dothething info doin sweet thing synchronized jolly good get much simpler think code reviewer would glaze middle big pr compiler best code reviewer also happy change raise objection bug three scala feature come play method body without bracket consist single expression statement expression class definition outside member definition become part primary constructor member definition primary constructor content intermingle ordering restriction resulting code really act like class widget executes within widget constructor synchronized def dothething info doin sweet thing previously body dothething method silently bumped body primary constructor oops example setup another example add one thing gone awry quick background scala shorthand syntax represent anonymous argument lambda function number language perl mathematica powershell name similar capability allows one use following shorthand actually quite nice val lst list line rewritten lstmap lstforeach println like lstmap lstforeach println let say come across code like want add one little thing counter loop val lst list let add one thing lstforeach println yay var j lstforeach j println println looped j time compiler happy look good right bug fast code print following looped time counter incremented looping list j println lambda expression increment j yield lambda one nothing invoke println function argument passed foreach lambda invokes println j part executed along way obtaining argument explicit pseudocode equivalent var j val f j return println lstforeach f note everything would worked fine shortcut syntax avoided fullfledged lambda syntax capture whole bracketed code lambda work expected var j lstforeach j println println looped j time example setup one twofer consider following two test case executed scalatest def bar bar test foo bar baz foobarbaz test short string unequal long string moved line long familiar scalatest using matcher mean lh equal rh fail given code would think test would pas test would fail bug compile run find exactly opposite happens test fails test pass cause unexpected result stray expression statement position test bar actually return unit string might assume quick inspection declare scala method without ie def bar like example opposed def bar indicates compiler method unit return type ie void method bar string simply ignored unit returned lh string test fact foo baz test fails test see another manifestation problem due implementation detail scalatest matcher dsl code short string actually represents complete expression whose type kind curried lambda function expects rh value nonetheless complete expression statement position value get thrown away similarly unequal long string complete valid string expression also get ignored thus test really two expression nothing considered pas also worth noting sometimes scala expression flow across line break unreasonable see review assume work fair example bar method first line test trigger warning compiler certainly good warning issued explain enough next section root cause see basic theme example representing aspect scala personally care type system feel loose due kind automatic generalization demonstrated never feel fully confident compiler back always wondering screwed typewise compiler telling call oldfashioned type safety supposed one compiler strong suit readily acknowledge powerful type system capability scala offer hinge behavior devs fully rely advanced usage personally prefer safety something stricter much syntax optional one hand scala syntax dynamic flexible scala great crafting dsl accommodates wide range coding style sound nice theory found practice lead headache team setting everybody end writing personal brand scala code take constant policing maintain uniform style much variation syntax code review become difficult since visual pattern accustomed syntactic style neccessarily carry reviewing rule mistake always result error might shift another supported form example would prevented method simply required primary constructor content required come method definition example would prevented single syntax lambda function rule subtle overloaded first part example would easier catch return type annotation andor method definition required second part example would prevented method required around argument scalatest inviting people use magical dsl nobody actually reason scoped nowarn pragma like language scala fatal warning flag promote warning error way suppress individual warning result abstinence kind situation either commit never introducing single warning kind else benefit fatal warning real world expected big project pick warning deprecation useful warning indeed fixed whatever reason team decides fixed yet ideally one could suppress particular issue maintaining protection fatal warning provide new problem instead left situation build log already sullied bunch known warning nobody notice new one eg example introduced update interesting discussion reddit number comment along line rely type inference use linter nobody us syntax anyway etc fully agree indeed looking implement kind thing ci system style guide expect effort help comment making broader point though get remarkably flexible powerful language return using scala safely confidently mean avoiding flagship language feature opting experimental compilation flag maintaining small constellation plugins please enable javascript view comment
168,Lobsters,scala,Scala programming,Introduction to programming with dependent types in Scala,https://stepik.org/course/ThCS-Introduction-to-programming-with-dependent-types-in-Scala-2294/,introduction programming dependent type scala,ccwiki,public user contribution licensed ccwiki license attribution required
169,Lobsters,scala,Scala programming,Building Scala Projects: Maven vs. SBT,http://www.hammerlab.org/2017/04/06/scala-build-tools/,building scala project maven v sbt,building scala project maven v sbt ryan williams outline sbt pant maven sbt better suited maven scala project need tl dr build logic app logic scala project source scala project build java xml considered harmful motivating example releasing artifact multiple scala version spark adam regexing pom carefully excepting hit adam case bad state affair famously badsloppy thing contagious presumably better spoon scalabinaryversiondependent dependency expressed spark dev list discussion appendix sbt maven central beyond crosspublishing hammerlabsbtparent good keyvalue style configuration succinct sufficient common case example hammerlabgenomicutils considerably remaining project configuration necessary advanced language feature deployed block factored reused hammerlabsbtparent hammerlabsparkgenomics hammerlabsbtparent plugin ecosystem parity maven bad inscrutable poorlydocumented abstraction method setting key answer ivy resolution related configuration spark sbt build example repo sbt gitter room gitter sbt gitter room dwijnand excellent blog post conclusion hammerlaborg public slack channel appendix trying failing scalacrosspublish maven rewriting pom fake xpaths rewriting bunch tag using xml parser coloring inside line vanzin clouderalivy problem described vanzinmultiscala maven classifier knew know b pant pant,building scala project maven v sbt apr ryan williams outline worked scala year project ranging size loc built sbt pant maven recently surveyed current state three tool concluded sbt better suited maven scala project need following discussion theoretical practical pro con tl dr build logic app logic buildpackagerelease logic complicated deserves sophisticated tool abstraction much code build scala project source scala project build many reason project use scala lanuages reason also favor configuring project build scala sbt allows instead python pant javaxml maven many case increased expressiveness safety important configuring build workflow writing businesslogicheavy application code java xml considered harmful instead prominent scala project maven build shoehorned logicless xml apis presented javabeanbased plugins sacrifice expressive power fail support essential task invariably rely bashspaghetti scriptsdir fill functionality gap complete encapsulation failure would never tolerated project source yet ubiquitous mavenscala project build motivating example releasing artifact multiple scala version glaring problem mavenbuilds two project used worked year spark adam motivated investigation release version several module eg running shellscript toggle current scala version project mavencontrolled releaseprocesses run application script regexing pom case shellscript us sed comb regular expression pomxml file repository rewriting instance viceversa carefully excepting hit adam case spark release flow temporarily rewrite pom use scala release discard change release git tag tree leaving git history like adam pom change made small branch anchored git tag becomes canonical scmpointer release see second nested round pomregexing also happens order publish different spark majorversions well bad state affair workflow distressing several reason parsing xml witih regexs famously badsloppy thing xml parsing question integrated maven resort bash script fork sed despite project otherwisedeep buyin maven projectmanagement abstraction pipeliningautomation releaseprocesses pushed lowestcommondenominator workflowmanagement tool bash spark one biggest popular active apache project hope runofthemill scala project best releaseworkflow come people copy script every scala project create contagious little googling implies scala project fact copying version script around apache zeppelin github star eclipse foundation project called geomesa star apache bahir star apache flink star list seems go presumably better maven provides deep set abstraction designing buildscapes project configured entirely project object model pom xml file rich ecosystem plugins support xmlspecification workflow one may desire opinionated set default phase goal plugins added project default assumed framework would allow express trivial modification one basic pom attribute artifact version would also suffice wrong spoon attempted make work maven myriad way nest property eg scalaversionprefix artifact tag similarly scalabinaryversiondependent dependency expressed nest property version tag similarly override either tag inside profile define either tag term environment variable use versionsmavenplugin rewrite either tag upgradefork versionsmavenplugin able rewrite either tag write maven plugin scratch purpose create profile invokes versionsmavenplugin followed buildrelease task latter ideally operating module whose artifactversion changed make project root pomonly parentmodule ie packaging pom packaging add jarpackaged submodules artifact mi use mavenreleaseplugin andor mavendeployplugin override artifactversion released according usersupplied configuration eg profile property use classifier per suggestion spark dev list discussion approach failed discussion specific failuremodes sketch idea actually accomplishing maven found appendix suffice say blocked many novel frustrating way accomplishing something simple began evaluating alternative maven scalaprojectmanagement need sbt sbt make crosspublishing artifact different scala version trivial put front task cli run scalaversions configured project build example sbt publishsigned sonatyperelease build jar pom source javadocjars testsjars desired corresponding source javadocjars arbitrary scalabinaryversions publishes lot maven central beyond crosspublishing sbt clearly went way make crosspublishing trivial added power configuring build scala also proved invaluable short order ported several dozen scala project sbt factoring repeated buildconfiguration hammerlabsbtparent along way plan use sbt scala project forseeable future recommend others drill specific pro con good sbt get several crucial thing right keyvalue style configuration succinct sufficient common case consider example hammerlabgenomicutils setting projectlevel field organization orghammerlabgenomics name utils version equivalent pomxml block would look like groupid orghammerlabgenomics groupid artifactid utils artifactid version version comparably verbose reality pom would boilerplate supporting value considerably expressing remaining project configuration deps libsvalue htsjdk add dependency referenced name declared parent plugin addsparkdeps add dependency spark kryo testscoped dependency hammerlabsparktests publishtestjar publish test jar attendant source javadoc jar point scala code made least lean expressing simple attribute markuplanguage necessary advanced language feature deployed block factored reused hammerlabsbtparent includes implementation many repeated configuration block factored concise reuse across project example wild many convenience found buildsbts module hammerlabsparkgenomics reading hammerlabsbtparent implementation plugin ecosystem parity maven seem functional plugins important task maven ecosystem area sbt plugins exist go beyond observed possible maven world eg sbtpack onestep creation tarballs make installed bad sbt lot usable point past learning curve remains steep note class issue hit inscrutable poorlydocumented abstraction sbt decomposes work task setting specialcases task command howwhether composecombine three others including remarkably hard understand however even within characterization incorrect assumption caveat warranted bit feeling around dark still inevitable attempting nontrivial pipelining gem sbt design lazilyeval computationdependencygraph compiled statically task reference taskssettings using macromagic associated value method setting key far tell one tried discus howwhy work way remotely accessible nonsbtcommitter answer discussion seen anywhere incidentally also linked sbtcoverage gim implementation ivy resolution sbt us latest win heuristic resolving conflicting version dependency newest version library found dependency tree used maven hand us nearest win strategy version declared dependency closer root dependency tree favored discrepancy lead unexpected problem moving maven sbt maintaining parallel build see related configuration spark sbt build discussion example repo sbt gitter room gitter low moment able get help sbt gitter room particularly dwijnand thanks among thing recommended excellent blog post starting point understanding sbt designapi helpful conclusion away daily indignity trying serialize simple buildlogic maven uncooperative pom framework boon ability create release maintain scala project hope travelogue help others similar situation realizing wantedneeded much languagetooling configuring build writing code later seek build important epiphany led revelation missing functionality larger jvmecosystemprojectmanagement universe hope touch subsequent post feel free drop hammerlaborg repos linked public slack channel discus appendix trying failing scalacrosspublish maven following note couple attempt set mavenbased workflow crosspublishing differing scalabinaryversioned artifact rewriting pom several thing explored involved rewriting pom like changescalaversionsh perhaps real xml parser way somehow betterintegrated maven workflow end day found approach suboptimal high level maven pick pomchanges new invocation run feel like basic breach dependencyworfklowmanagement contract case attempt nevertheless unworkable plugin wide use thing sort like required crosspublishing scalabinaryversioned artifact investigation found facilitate much improvement status quo maven phase par pom xml rewrite appropriate version tag fake xpaths writes pom back taking care preserve whitespace pomformatting idiosyncracies subsequent mvncli invocation pick value rewritten pom sound like improvement would basically require two action run rewriting artifact using new function similar one pomhelper updating scalabinaryversion property typically used qualifying dependency digging found plugin add overhead value splice must version dependency aware endresult would still unsatisfying rewritethepomthenrunagain state affair gave approach like versionsmavenplugin plugin used similar pom manipulation might desire eg rewriting bunch version tag using xml parser also like versionsmavenplugin unfortunately operation picked subsequent maven invocation break byoplugin prototyped custom maven plugin pom rewrite similar discussed stymied one wanted write plugin scala generated kind error corresponding empty serps made feel one ever attempted much likely workable also mentioned also pursuing pomrewriting approach appreciating really wanted altogether different model discussed coloring inside line couple approach sought use existing mavenplugin xml apis want also failed thought might solve crosspublishing pom scalabinaryversion wanted publish parent pom wrapped submodules course almost everything would reused module pom want thing like dependency specified parent however ran aground scalaversionprefix set parentpom published childimplementation module inevitably inherited whatever set back needing crosspublish parent pom repeat dependency child pom discussion early draft post vanzin pointed attempt solving problem used production clouderalivy time writing understanding face problem described per vanzinmultiscala maven classifier afaict classifier made solve scala release require jar different name binary content different dependency specified pom seems require separate pom therefore separate group artifact version tuples knew know think one could write maven plugin instead rewriting pom requiring maven reboot used apis like mavenprojectsetartifactid modify internal maven state would govern usual phase operated could profile ideally defined parentpom scala project inherited minimize boilerplate activated custom plugin phase changed artifact scalabinaryversion proceeding requested phase without messing transient pom change maven reboots b pant mentioned start post also experimented porting repos pant pant design desirable property tool aware explicit tracking caching workflownodes input output support caching output globally eg across organization automatic analysispruning dependency etc however opensource community supportbase around significantly smaller maven sbt felt like write plugins python proved dealbreaker given option write build logic scala instead hope great feature pant become accessible soon tool incorporate
170,Lobsters,scala,Scala programming,There are more types than classes,http://typelevel.org/blog/2017/02/13/more-types-than-classes.html,type class,type class one value class many variable type value infinite type method type parameter outside must necessarily anything informationhiding type level many call type variable copy one value class many variable type tell two apart call class call type type real class give rise type type disappear type come back previous article class concrete source value runtime type test mechanism work type typeclass pythonjavascript c type class runtime thinking type class lead incorrect conclusion licensing creative common attribution unported license follow back blog,type class programmer incautious use word type concept type sufficiently abstract specific tempted understand analogy much begin confuse analogy sameness colloquial runtime type fair approximation class make tempting equate type class interface trait sort thing name class rest article type system much richer interesting class system even java appreciate richness must stop thinking type class stop drawing conclusion weak analogy luckily compiler readily reveal unlike class type ask simple question one value class many variable type val greeting string hi constructed string assigned variable also constructed char array string various detail immediately handed string forgotten value class string several class really string javaioserializable charsequence comparable string objectanyref seems like lot class one value genuine class greeting though implied greeting also five type ask compiler verify type truth hold entirely separately class truth scala greeting string greeting javaioserializable greeting charsequence greeting comparable string greeting anyref string javaioserializable charsequence comparable string anyref hi hi hi hi hi exhausted class quite done type scala greeting greetingtype greetingtype hi greetingtype like five type tested strict subtype string class name call compiles subtype b def conformance b unit scala conformance greetingtype string scala conformance string greetingtype console error type argument string greetingtype conform method conformance type parameter bound b fine accept object identity represented type level without universe imploding inventing theory object identity hold though scala val salutation greeting salutation string hi fine salutation another name greeting right scala conformance salutationtype string scala implicitly greetingtype salutationtype console error prove greetingtype salutationtype seven spare spelling induction new variable defined like salutation yield new alias distinct type object variable find type literal hi scala val literalhithere shapelesswitness hi literalhithere shapelesswitnessaux string hi shapelesswitness anon scala conformance greetingtype literalhitheret console error type argument greetingtype literalhitheret conform method conformance type parameter bound b scala conformance literalhitheret greetingtype console error type argument literalhitheret greetingtype conform method conformance type parameter bound b local variable strictly compiletime abstraction anyway seen number match end type class confusion maybe scala oddity anyhow even begun demonstrate overwhelming richness type model blindingly outshines paucity class model let go value infinite type method type parameter small program greeting add small method def pickgreeting g grt g rand int grt scala pickgreeting greeting string hi seems like g must string argument passed pickgreeting string case must return value according implementation perspective call outside pickgreeting implementation string indeed implementation perspective matter also part program see thing quite differently ask thought matter adding body def pickgreeting g grt g rand int implicitly g string grt console error prove g string implicitly g string fact g bear direct relationship string replace implicitly conformance g string console error type argument g string conform method conformance type parameter bound b conformance g string conformance string g console error type argument string g conform method conformance type parameter bound b conformance string g let apply pigeonhole principle imagine list every class ever ever imagine somehow class string abstractfactorymethodproxybuilder classpath available program next imagine time inclination try test every last one class implicitly g javaxswingjframe implicitly g abstractfactorymethodproxybuilder ad finitum search futile every class listofeveryclass give compiler error got string since g equal anything list must something else appear list list contains class g must something class must necessarily anything seems like might convenient say well program g ever string substitution therefore even compiler see however thinking like miss second key advantage type parameterization one based multiplicity substitution typesafety caller blindness implementation typeparameterized class method required treat type parameter uniquely uniformly without prejudice compiler enforces making implementation blind parameter like g could use caller outside told whose type contain g like list g g g g g like argument pickgreeting informationhiding type level find informationhiding useful tool implementing correct program find fresh unique mysterious type induced introduction type parameter operation language permit default via argument value type parameter leak abstraction includes testing value class converting string comparing value supposedly utter mystery equality ability create default value also leak function always permitted ask need caller make default design choice taken away object equal little better typesafety reflectionbased call total type erasure desirable feature rather design leak give programmer much freedom abstract informationhiding wish many call put another way implementing code scope type parameter implementation must equally valid possible g substitution including one invented yet call universal quantification merely declaration type parameter yield distinct call consider two consecutive call pickgreeting pickgreeting greeting pickgreeting externally two g type however possibility writing demand another level uniqueness treatment typechecking pickgreeting definition whatever g like string might something else next call like int example recursion might even two different thing time nothing hold two either may unbounded number substitution given type parameter within single program single point time g may two invocation pickgreeting might choice treat g type call separate type may infinitely many call many type incidentally happens singleton type time val greeting come scope induces separate singleton type easy enough arrange unbounded number scope entry particular program practical type parameter phenomenon though type variable copy suppose like wait compute greeting define typeandclass represent conveniently like coyoneda id help sealed abstract class later type val val f def later later later new later type val val f later val later n listfill n hi mkstring many class involved type later obviously overall class string output type int type many type first difference int scala implicitly int console error prove int implicitly int unrelated much reason g unrelated string previous example thing code following val may know embodied member almost think argument val scala string hi hi hi scala string hi hi hi scala console error type mismatch found underlying type required scala implicitly console error prove like every call pickgreeting induces new g type simple val copy induce new unique type matter value matter variable value singleton type still one value class many variable reference type preceding delicate seems var allo scala allof alloi console error type mismatch found later string required val later string allof alloi done differently use mutable var instead immutable val enough throw wrench work suppose another value later string type val bhello later olleh reverse substitution string f take string argument string bhello compatible type allo var assignment work sense mutation occurs type also mutates int string quite right type mutate suppose assignment happened middle line code could compile could imagine sequence event permitted allof evaluates function n int listfill n hi mkstring allo bhello assignment occurs alloi bhelloi evaluates string olleh attempt pas olleh n int argument complete evaluation get stuck make difference concrete substitution make g make difference whether assignment could ever happen specific program compiler take possibility declared var def allo get treatment lest think nonfunctional program get fun reference allo get new type member failing line code two allo reference working two incompatible type since number reference variable program also get picture also occurs existential type parameter equally expressive type member accordingly java also generates new type occurrence expression existential type tell two apart simply say must working two separate concept runtime shape property value end flying around program actually run call class compiletime staticallydiscoverable shape property expression fly around program written call type case var revealing maybe type always given mutable variable demonstrating hold true one run program class nearly good enough prove true run program type refuse apply term type class concept live name statement two type another level power entirely two value class extraordinarily weak comparison tempting use term runtime type refer class however case scala type system featuring parametric polymorphism class dissimilar type similarsounding term lead false intuition helpful analogy detriment learning aid type compiletime class runtime type real phase versus key strength type scala similar type system static nature type mean truth represent must universally possible case test case need strength phase separation forbids u taking account anything known program without running need think term could happen pretty sure class give rise type appears overlap class greeting type greeting class string also type string want type represent static truth expression program make sense include model class type system define class also define associated type family type use class construct value new blob would like assign much specific meaning expression compile time know right expression make value class blob assign type blob type disappear common way throw away type information scala especially popular objectoriented style val absgreeting charsequence greeting absgreeting value greeting five class however two five type threw away three statically lost type namely greetingtype acquired new one namely absgreetingtype value constructed expression naturally cast type specifying precise identity move abstract context ironically best way preserve information pass abstract context take advantage purely abstract parameter type member scala pickgreeting greetingtype greeting greetingtype hi implementation must treat argument abstract type g caller know specific greetingtype must come process type come back feature scala let use class get back type information via dynamic runtime test absgreeting match case hiagain string conformance hiagaintype string compile name type test feature poorly chosen conclusion affect type indeed proven statically type test occurs class level compiler tell limitation sometimes def g grt g rand int g magic match case ok g ok case sys error failed console warning abstract type pattern g unchecked since eliminated erasure case ok g ok reflecting runtime class back compiletime type subtle art compiler often explain exactly got wrong def g grt g rand int g grt match case string surely type g string right case grt console error type mismatch found string surely type g string right required g surely type g string right touched upon mistake previous article worth taking least one look let examine tempting mistake string final class true g contain specific class string first case match example given trait myawesomemixin g string myawesomemixin case succeeds instantiated would need create subclass string implemented myawesomemixin pattern match enough evidence say g exactly string still classbased type could like serializable javaioserializable greeting instead feel like pattern match confirms serializable possibility instead denying need g string code compile need g string true surely type g string right string could simply upcast g however even g string unproven subclass string infinitely many subtypes string including g created entry every abstract existential type bounded string every singleton type string variable definition mistake confusing demonstration one case proof pattern matching tell u great deal one value grt argument little type g know sure grt type g also type string type overlap least one value type system know something sure know class concrete source value parlance functional scala concrete class often called data constructor creating value must ultimately concrete class bottom abstraction indirection used hide potentially messy detail scala def g g new g console error class type required g found def g g new g something else like take argument g let construct g truly essential role class play encapsulate instruction constructing concrete value various type safe program feature class use scala class leave fingerprint value construct without fail merely auxiliary part primary function value factory like made class blah sticker back pattern matching type test work checking fingerprint construction runtime type test mechanism work type fingerprint come class type type test work classy type like string myawesomemixin also work specific singleton type construction also leaf object identity fingerprint test use classtag typeclass change restriction add classtag typetag context bound also prevent type parameter working type scala implicitly reflectclasstag console error classtag available implicitly reflectclasstag judicious use classtag great solution excessive use type test abstract context many type class confine expressivity type small classreflective box set free pythonjavascript c type class runtime javascript general runtime classification value called type meant classify builtin category like string number like typeof hi string typeof number typeof object defining class new class keyword extend partition new type instead subdivides one separate classification class foo class bar typeof new foo object typeof new bar object new foo constructor function foo new bar constructor function bar treat javascript definition word type analogous usage article yes javascript runtime type javascript conveniently get away static type uninteresting one type opportunity interesting typelevel modeling least part standard language hence javascript free repurpose word type flavor class type tool make much use javascript come back scala haskell ml family et al need word static concept thinking type class lead incorrect conclusion setting aside goal principled definition term separation one make sense practitioner scala consider practicality type class different behavior equal unequal according different rule lot type class need different word distinguish saying compiletime type runtime type practical one want speak unwieldy qualifier every time refer commonlyused concept given sampling richness type system article necessary know full richness appreciate remember difference two type static compiletime class dynamic runtime article tested scala shapeless firefox licensing unless otherwise noted content licensed creative common attribution unported license stephen compall feb follow back blog
171,Lobsters,scala,Scala programming,Scala Native v0.1 is here!,https://www.scala-lang.org/blog/2017/03/14/scala-native-0.1-is-here.html,scala native,scala native llvm llvm intermediate representation included website road ahead github issue brought lamp scala center,tuesday march denys shabalin excited announce first release scala native optimising aheadoftime compiler scala built top llvm compiler infrastructure unlike reference implementation scala generates bytecode run top java virtual machine scala native toolchain produce standalone native executables open door scala used environment fullblown virtual machine usually overkill commandline tool resourceconstrained hardware application video game etc achieve goal developed wholeprogram optimising compiler generates llvm intermediate representation representation used generate efficient platformdependent machine code project reached point feature completeness term coverage scala language support whole language including advanced feature method dispatch via structural type even macro included exciting feature got support whole scala language negligible semantic difference effortless zerocost interoperability native code outofthebox support existing scala ides seamless integration sbt build tool crosspublishing infrastructure jvm j native platform support core subset jdk base library information available website road ahead list known issue upcoming feature available via github issue brought project brought collaboration lamp scala center
172,Lobsters,scala,Scala programming,"Contraband, an alternative to case class",http://eed3si9n.com/contraband-an-alternative-to-case-class,contraband alternative case class,limitation case class updateoptions contraband graphql evolving data json codec generation sjsonnew contraband doc,question thinking express data api data represented java scala convert data wire format json evolve data without breaking binary compatibility limitation case class sealed trait case class idiomatic way represent datatypes scala impossible add field binary compatible way take example simple case class greeting see would expand class companion object package comexample class greeting name string override def equal boolean override def hashcode int override def tostring string def copy name string name greeting object greeting def apply name string greeting def unapply v greeting option string next add new field x package comexample class greeting name string x int override def equal boolean override def hashcode int override def tostring string def copy name string name x int x greeting object greeting def apply name string greeting def unapply v greeting option string int see copy method unapply method break binary compatibility workaround sbt code handrolls pseudo case class updateoptions contraband graphql query language json api developed facebook made dialect graphql schema language called contraband sbt plugin generate pseudocase class targeting either java scala previously called sbtdatatype martin duhem worked last year contraband greeting example would look like package comexample target scala type greeting name string would generate edit manually package comexample final class greeting private val name option string extends serializable override def equal boolean match case x greeting thisname xname case false override def hashcode int name override def tostring string greeting name protected def copy name option string name greeting new greeting name def withname name option string greeting copy name name def withname name string greeting copy name option name object greeting def apply name option string greeting new greeting name def apply name string greeting new greeting option name instead copy would use withname foo also note graphqlcontraband string would map scala option string also similar protocol buffer singular field mean zeroorone evolving data let see evolve data add new field x package comexample target scala type greeting name string since x int since contraband denote field version name using since would generate edit manually package comexample final class greeting private val name option string val x option int extends serializable private def name option string name none def withx x option int greeting copy x x def withx x int greeting copy x option x object greeting def apply name option string greeting new greeting name none def apply name string greeting new greeting option name none def apply name option string x option int greeting new greeting name x def apply name string x int greeting new greeting option name option x omitted equal hashcode tostring withname point overload apply generated version json codec generation adding jsoncodecplugin subproject generate sjsonnew json code contraband type lazy val root project file enableplugins contrabandplugin jsoncodecplugin setting scalaversion librarydependencies sjsonnewscalajson sjsonnew codec toolkit let define code support sray json ast scala json messagepack backend thing specify schema package comexample target scala codecpackage comexamplecodec codectypefield type fullcodec customjsonprotocol type greeting name string since x int since generate greetingformat trait used backendindependent json codec repl session demonstrates greetingtojson roundtrip scala import sjsonnewsupportscalajsonunsafe converter compactprinter parser import sjsonnewsupportscalajsonunsafe converter compactprinter parser scala import comexamplecodeccustomjsonprotocol import comexamplecodeccustomjsonprotocol scala import comexamplegreeting import comexamplegreeting scala val g greeting bob g comexamplegreeting greeting bob none scala val j convertertojsonunsafe g j scalajsonastunsafejvalue jobject lscalajsonastunsafejfield scala val compactprinter j string name bob scala val x parserparseunsafe x scalajsonastunsafejvalue jobject lscalajsonastunsafejfield scala val h converterfromjsonunsafe greeting x h comexamplegreeting greeting bob none scala assert g h target language java scala given contraband dialect graphql might able reuse tooling cross language well interest detail contraband available contraband doc
174,Lobsters,scala,Scala programming,The myth of using Scala as a better Java,http://appliedscala.com/blog/2017/myth-of-scala-as-better-java/,myth using scala better java,dependency injection practical event sourcing scala database access scalikejdbc quill blog post json serialization previous post conclusion leanpub,people talk experience scala often say possible use scala better java indeed many company especially one adopted scala around nt want give familiar tooling simply integrated scala existing workflow based maven time calling scala improved version java questionable least justifiable however longer case part contemporary scala shop nt use maven build tool nt use spring di container rarely ever resort classical design pattern use dependency injection arguably popular scala web framework play came nt provide infrastructure proper di possible build solution based thirdparty library nothing enforced version shipped google guice compromise di solution everyone scala world eager bring back java annotation luckily nt necessary play framework always possible replace guice another runtime solution go completely different route use socalled compiletime dependency injection compiletime di make service class accept lower level dependency constructor parameter scala constructor parameter accessible regular method time service could completely stateless approach also advocated several java net expert mean mainstream interestingly scala developer advantage javac user significantly simplify implementation combining macrobased library lazy definition trait appcomponents lazy val userdao wire userdao lazy val sessiondao wire sessiondao lazy val userservice wire userservice lazy val authservice wire authservice example taken practical event sourcing scala us function called wire come macwire library compilation phase function analyze class invoke constructor passing already initialized service argument addition making value lazy ensures compiler developer take care initialization order surprisingly approach become popular recent year made play team consider promoting default upcoming version framework database access another typical aspect development interacting database java first came great see language sane api querying database available box however using plain jdbc involves writing much boilerplate hardly anybody day instead mainstream java approach use orm using orm usually create domain class annotate describe class map database schema return orm provides simple method persisting retrieving domain object performing objectrelational mapping automatically along way approach certainly look great theory practice lead numerous problem people java community pointed writing plain sql manually actually much better relying orm generate necessary statement prominent example library called jooq allows developer write typesafe sql code using java method createselectfrom book bookpublishedineq orderby booktitle however approach common java particular library quality alternative people continue using orms interestingly orms never really taken scala scala beginner like make point possibility using hibernate one selling point language yet nobody seems need popular scala library dealing database scalikejdbc slick quill similar jooq rather hibernate scala user advantage java colleague library rely heavily scala feature macro implicit parameter string interpolation present java consider following example us scalikejdbc class userdao def getuser usercode string try option user try nameddb auth readonly implicit session sql select user usercode usercode map userfromrs headoption apply code may appear vulnerable sql injection actually sql string get converted typesafe preparedstatement behind scene getuser method also us scala feature namely try option better communicate expected result type already explained using expression combining monadic structure make code clearer see blog post detail important thing nobody anything like java simply language nt support json serialization popular library serializing parsing json java jackson jackson included lowlevel dependency many probably jsonrelated library used universally virtually everyone jackson us reflection api mapping field default behaviour adjusted via annotation public class name jsonproperty firstname public string firstname since everything java world revolves around concept javabeans default jackson assumes class contain private mutable field getterssetters accessingmutating interestingly jackson umbrella also contains subproject called jacksonmodulescala definitely user experience show scala developer prefer using something else scala famously several actively developed json library based reflection let take look one popular one playjson scala nt usually make data class mutable instead create case class make immutable case class tag id uuid text string serialize json simple add implicit value type writes companion object object tag implicit val writes jsonwrites tag nt need implement special marker interface register class anywhere basically type class action surprisingly nt really need know fact use always check previous post though another interesting thing jsonwrites helper method macrobased rather reflectionbased java developer use library java nt support type class macro conclusion let wrap thing simple conclusion scala developer tend use spring dependency injection hibernate database access reflectionbased library json serialization instead usually rely solution based specific scala feature existing java consequently scala better java distinct language ecosystem best practice approach encounter person still belief better java myth please send article nt change mindset nt know else finally want learn scala practical way check book bundle leanpub
175,Lobsters,scala,Scala programming,Scala Collections: Why Not? (2014),https://www.youtube.com/watch?v=uiJycy6dFSQ,scala collection,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scala collection youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scala collection youtube
177,Lobsters,scala,Scala programming,Rewriting Duolingo's engine in Scala,http://making.duolingo.com/rewriting-duolingos-engine-in-scala,rewriting duolingo engine scala,meet duolingo engine session generator duolingo incubator overview rewrite technical debt system redesign overview aws codebase refactor overview performance memory management threadsafe dynamic typing scala java virtual machine putting together functional programming scala referential transparency side effect referential transparency immutability case class pattern matching monad developing scala le verbosity le boilerplate fewer bug stack infrastructure finatra guice mockito aws elastic beanstalk testing launching new session generator final thought,recently profoundly refactored engine drive duolingo lesson post talk engineering choice experience pain point rewriting highly complex system highlight redesigned architecture refactored code python scala latency dropped engine uptime increased meet duolingo engine session generator duolingo world popular language learning app million user time writing core duolingo experience user learn bitesized lesson consists several interactive exercise internally call challenge given lesson exercise user see order responsibility session generator backend module get data one language course counting duolingo incubator sprinkle machine learning magic proceeds serve sequence exercise tailored need million user overview rewrite rewriting code complicated necessary process even though halt development new feature may take several month eventually technical debt built must addressed case familiar term technical debt like financial debt borrow money making engineering decision let develop something quickly long term though development start stall accumulated shortcut point time pay session generator existed since day one duolingo lived pain come rapid growth startup unsurprisingly built lot technical debt next section talk indicator made u decide time come rewrite decision made address issue system redesign overview course session generator history often added dependency shared resource needed piece data data store needed cache expensive computation decision ultimately evolved architecture resembling following many problem architecture numerous hard dependency marked red session generator would fail respective network connection failed addition represent additional network call added total latency redesigning architecture main guiding principle remove many shared resource possible resulting design simple robust new architecture course data need processing step shared among user course processed offline serialized file aws amazon cloud storage service need fetch file stable cheap data store cache hand user data leverage personalization requires fewer processing step shared fetched api server injected request sent session generator codebase refactor overview one major decision made rewrite session generator scala duolingo backend session generator originally written python python easy understand especially useful developer sort background however come drawback performance python considerably slower c java example memory management python generally threadsafe prevents developer using inmemory cache full potential dynamic typing actual problem complex system dynamic typing increase number runtime bug since definition interface module weaker interpreter able catch typerelated bug result excessive number deploy find bug fix iteration turn slows engineering effort decided port codebase scala staticallytyped functional programming language built top java virtual machine mean use existing java library scala widely used big data application high complexity characteristic session generator seemed like good fit one main concern scala steep learning curve however highly complex system learning curve system steeper programming language improving readability maintainability higher priority regard scala good job present next section putting together let dive specific part session generator implementation development process scala functional programming scala aside learning new syntax main challenge learning scala python java background getting used functional programming mention thing developer know order get started functional programming note scala tutorial mean able write imperative code scala since multiparadigm although might using full potential referential transparency side effect one pillar functional programming referential transparency referentially transparent function one output always input like algebraic function nothing else example function referentially transparent io function example fetch user database get data time user might changed email print something code something computing output called side effect method return unit type scala equivalent void certainly side effect since computation done order fulfill sideeffected procedure return nothing immutability referential transparency go hand hand immutability side effect mutate state idea dealing immutability scala code idea use val instead var defining variable since val reassigned val x x error reassignment val x particular use case class instance case class nonreassignable attribute val hashable allows nice thing pattern matching straight box idea use immutable collection package scalacollectionimmutable default collection scala therefore need explicitly import scalacollectionmutable want use corresponding mutable collection val x set immutable x error value member scalacollectionimmutableset int x val x scalacollectionmutableset mutable x x scalacollectionmutableset int set idea use control structure need mutable state particular avoid loop prefer use transformation method map flatten flatmap filter collect fold etc val x list xmap creates new immutable list scalacollectionimmutableset int set idea write loop control structure try recursive approach monad name monad come category theory want go mathematical formality instead start example illustrates usage option monad option monad wrapper object null example first try fetch value x map yielding x existed entry none otherwise short gracefully dealing nullpointerexception val somemap map string int val optionalx option int stringtointmapget x val optionaly option int stringtointmapget x int optionalx int optionaly yield x yield x none pure functional programming requires u separate evaluation execution code monad express code chain data transformation evaluation ultimately run middleware execution particularly useful achieving purity io operation inherently sideeffected let see example future monad trying fetch data data access layer asynchronously futurex futurey hold state async call waiting fetched error foryield chain sum operation receive response yield future x futurex futurey successful propagate error otherwise val futurex future int dalgetasync x val futurey future int dalgetasync x int futurex int futurey yield x yield futurevalue x futureexception developing scala scala language seems learned pain point language proposes solve le verbosity scala number thing remove verbosity example infers type whenever possible write val x instead val x int functional nature also allows developer write oneliners many situation write list comprehension list map even write entire class definition class person val name string getters setter name created hood one last thing worth mentioning scala many thing implicitly told example passing argument implicitly write every time def greet name string implicit greeting greeting unit println greetingvalue name implicit val hello new greeting value hello greet john hello john greet mary hello mary le boilerplate scala remove lot boilerplate code example provides tool developer need write errorprone control structure loop mutating state addition scala code need handle trivial edge case everywhere example treat option monad make sense instead treating null pointer place go exception future monad fewer bug static typing allows compiler catch number error compile time exception enhanced fact scala powerful generic typing system java moreover using option future monad common runtime exception explicitly treated code finally le verbosity le boilerplate ultimately make complex code easier read since code tends representative actual application logic together immutability referential transparency code easier reason debug stack infrastructure stack chose us finatra http server guice dependency injection framework mockito testing framework stack deployed aws elastic beanstalk amazon orchestration service automatically handle rolling deployment load balancing autoscaling monitoring testing mixture functional programming le boilerplate stack offer dependency injection unitintegrationfeature test box result le time spent writing application code logic time writing test rewrite able write test virtually every single method improves stability serf documentation thorough test suite also helped u seamlessly integrate component developed separately launching new session generator launch rewrite obtained decrease average latency going old session generator rewrite duolingo lesson time spent downloading course data whenever inmemory cache expires rewrite also considerably stable degraded performance old infrastructure around hour per quarter rewrite dropped zero downtime first couple month obviously expect keep availability service forever number indicates new infrastructure much robust additional positive result number bug go developer confident deploying code without breaking site thanks improved testing suite ability detect compiletime error development final thought rewrite able produce faster reliable session generator fewer bug cleaner codebase initially thought would take long time onboard developer practice time taken considerably le anticipated two main pain point process documentation certain scala library often either missing scattered around across web trouble java integration example integration would support nice scalaspecific feature using option future monad supporting optional parameter finally still early say well rewrite help reduce future technical debt far thing looking good
178,Lobsters,scala,Scala programming,There's Immutable And Then There's Immutable,http://blog.jenkster.com/2017/01/theres-immutable-and-then-theres-immutable.html,immutable immutable,,following brainwave scientist writes something important blackboard large friendly letter writes erase leaf room grab coffee five minute later return another scientist cheerfully cleaning blackboard removing trace worldchanging idea see note yelp first one said rub reply second thought meant get rid blackboard realise content important may immutability take scala instance put object scalacollectionimmutablelist list guaranteed never change always oneelement list object object special guarantee still mutable case list wall object blackboard one firmly nailed like blackboard object change meaning similarly recent javascript spec objectfreeze many say make javascript object immutable technically key change pointer associated key change thing point might objectfreeze freeze toplevel property case might better named objectfrosting blackboard fixed written movable feast seems odd coming language immutability core concept like clojure haskell language give access immutable list anything like affect need know need trust behave rely guarantee language try write blackboard find transported another room identical blackboard free whatever like mine remains untouched sadly seems like two meaning depending first heard new meaning need know implementation detail say part data fixed subject change sound immutable confess struggle see value immutable frosting seems like made easy language implementor valuable still record definition immutability unambiguous useful call pure function immutable argument always get result sound obvious day ago thought meaningful meaning could
179,Lobsters,scala,Scala programming,"Making the move from Scala to Go, and why we're not going back",https://movio.co/blog/migrate-Scala-to-Go/,making move scala go going back,scala go loved scala first place pure function tdd slow compilation acknowledged thoroughly described sword fight slow deployment tooling ensime intellij scala plugin idea sbt development global scala community nonscala blog post lawrence krubner email coda hale scala team linkedin paul phillips long talk json ast debate need alternative love scala coursera go made sense simple learn hour moocs code retreat mariolike platform game future signal syscalls mutexes language spec simpler code readable code keynote strong syntax content type abstract table post channel goroutines made job much easier cheaper term resource case study synchronized actor system parallel processing ordered output simple strategy serverside backpressure compiles fast run fast fast microservice panacea devdone deployed le minute cheap box last least tooling kt kubemrr sql chart flowbro go thing,update blogpost received lot attention since published including hacker news golang weekly scala time thank unfortunately reader considered strictly attack scala community andor biased episode language war red squad intention explained within text movio us scala squad use scala main language hosted scala downunder two year ago scala community taught u lot past year scala go coexist moviohere story chose migrate scala go gradually rewrote part scala codebase go whole movio host much broader diverse set opinion post account movio cinema red squad scala remains primary language squad moviowhy loved scala first placewhat made scala attractive easily explained consider background succession favorite language time u see largely came stateful procedural worldwith scala coming onto scene functional programming gained hype really clicked u pure function made deterministic test easy tdd gained popularity also spoke issue software qualityi think first time appreciated positive aspect strong type system scala personally coming myriad php silent error whimsical behavior felt quite empowering confidence supported typechecking wellthoughtout test code meant top would keep meant refactoring otherwise breaking typechecking test yes java gave well without beauty fp baggage eethere elusive quality make scala extremely sexy nerd allows create operator override existing one essentially unary binary function nonalphanumeric identifier also extend compiler via macro userdefined function called compiler enrich thirdparty library via implicit class also known pimp library patternbut scala without problemsslow compilationthe slowness scala compiler issue acknowledged thoroughly described martin odersky source constant frustration coupled big monolith complex dependency tree complicated resolving mechanism year great engineer babysitting adding property model class one core module would still mean coffee break sword fight importantly became rare acceptable coding feedback loop time ie delay codetestrefactor iteration slow deploymentsslow compile time big monolith meant really slow ci turn lengthy deploys luckily smart engineer movio cinema blue squad able parallelize module test different node bringing overall ci time hour little minute great success still issue agile deploymentstoolingide support poor ensime trouble multiple scala version project different version different module made impractical support optimize import nongrepbased jump definition like meant opensource communitydriven ides eg vim emacs atom would lessthanideal feature set language seems complex make tooling even ambitious attempt scala integration struggled multiple project build notably jetbrains intellij scala plugin jumptodefinition taking u outdated jar rather modified file seen broken highlighting code using advanced language feature tooon lighter side thing able identify exactly whether programmer using idea sbt based purely loudness laptop fan macbook pro real problem anyone hoping embark extended programming session away power outletdevelopments global scala community nonscala criticism objectoriented programming lingering office time reached mainstream status someone shared blog post lawrence krubnersince become easier float idea alternative nonoop language example one stage several u learning haskell among experimentsthough old news famous yammer moving away scala email coda hale scala team started make lot sense mindset shifted consider quote lot complexity waved away something library author really need know library api bubble top since feature resolve specific call site engineer need accurate mental model library work shift cargoculting snippet code magic talisman functionality since bigger player followed twitter linkedin notable examplesthe following quote raffi krikorian twitter would done differently four year ago use java used scala part rewrite would take engineer two month fully productive writing scala code paul phillips departure scala core team long talk discussing painted disturbing picture state language one stark contrast image hadfor disturbing literature find whole vanguard scala community json ast debate reading developed left u feeling like need alternativeuntil go came spotlight though seemed real alternative scala u simply plausible option raising bar consider quote popular coursera blog post love scala coursera personally found compilation reload time pretty acceptable tight php edittest loop acceptable given typechecking nicety get scala one blog post yes scalac slow hand dynamic language require incessantly rerun test code work type error syntax error null dereferencing rather sip coffee scalac work go made senseit simple learnit took u six month including hour moocs able get relatively comfortable scala contrast picked go two week fact first time got code go code retreat month ago able code basic mariolike platform game also feared lowerlevel language would force u deal unnecessary layer complexity hidden highlevel abstraction scala eg future hiding thread interestingly review thing like signal syscalls mutexes actually bad thing socalled fullstack developer first time ever actually read language spec unsure something work simple spec readable averagesized brain actually mean lot part frustration scala java feeling never able get full context given problem domain due complexity approachable complete guide language strengthens confidence making assumption following piece code justifying decisionmaking rationalesimpler code readable codeno map flatmap fold generic miss perhaps two weeksit hard explain preferable obtain expressiveness without actually go ing experience pun intended however rus cox golang tech lead good job go balance section keynote gopherconas turned flexibility led devs writing code others actually struggled understand would tough decide one feel ashamed smart enough grasp logic annoyed unnecessary complexity flip side occasion one would feel special understanding applying concept would hard others smartness disparity devs really bad team dynamic complexity lead invariably thisin term code complexity nt case squad smart people taken continue take extreme funny part dependency hell ubiquitous scalaland includes javaland ended using project deemed complex codebase eg scalaz via transitive dependenciesconsider randomly selected example scala library using continue maintain strong syntax file purpose without theoretical physicist content type broke github linter abstract table would explain foreignkey signature still scala happiness train read post great curiosity originally posted site find wholeheartedly agreeing todaychannels goroutines made job much easierit fact channel goroutines cheaper term resource compared threadpoolbased future promise resource memory cpu also easier reason codingto clarify point think language different approach basically job reach point equally comfortable working either perhaps fact make simpler go usually one limited set tool work use repeatedly get chance master scala way many option evolve frequently get superseded become proficient withcase studyrecently struggling issue process billing informationthe data came stream persisted mariadb database persisting directly impractical due high rate data consumption buffer aggregate persist buffer full timeoutfirst made mistake making persist function synchronized guaranteed bufferfullbased invocation would run concurrently timeoutbased invocation however stream digest persist function run concurrently manipulated buffer synchronize function end resorted actor systemas akka module dependency anyway job ensure adding buffer clearing buffer message processed actor would never run concurrently fine get needed learn actor system teach newcomer import dependency akka properly configured code configuration file etc furthermore stream came kafka consumer wrapper needed provide digest function consumed message ran future circumventing issue mixing future actor required extra head scratching timeenter channelsbuffer kafkamsg buffersize timeout timemillisecond select case kafkamsg channel buffer append buffer kafkamsg len buffer buffersize persist case timeafter timeout persist func persist insert buffer buffer buffer done kafka sends channel consuming stream persisting buffer never run concurrently timer reset timeout millisecond message receivedfurther reading illustrative channel example parallel processing ordered outputa simple strategy serverside backpressureit compiles fast run fastgo run fastour go microservices currently build second lesstest second including integration test run ci infrastructure le half minute looking unacceptable outputting docker containerdeploy via kubernetes new container second le key factor small image feedback loop one second daily struggle computer made u productive happymicroservice panacea devdone deployed le minute cheap boxeswe found go microservices great fit distributed systemsconsider well fit requirement tinysized container average go docker container v scalalowmemory footprint mileage may vary recently major success rewriting crucial µs scala go going worstcase scenario usagefast start fast shutdown binary need start vmfor u fatter scala image meant money spent cloud bill crucially container orchestration delay rescheduling container different kubernetes node requires pulling image registry bigger image time take mention pulling latest image locally laptop last least toolingin red squad diverse choice ides go play really well tool also steadily improving time new tool created oftenmy personal favourite item little go rebellion first time ever make tooling selection open source project currently using work ktkafka tool consuming producing getting info kafka topic composes nicely jqkubemrrkubernetes mirror bashzsh autocompletion kubectl parameter eg pod name sqlmysql pipe sends query one many mysql instance local remote behind ssh tunnel output conveniently processing composes nicely chart another tool written quick adhoc chartingflowbrorealtime afterthefact visualization kafkabased distributed systemsso go thing fast much wise enough comment yet movio use case subset long diverse list requirementschoose based use case example main focus around data science might better python stackdepending ecosystem come library using might exist mature java example kafka maintainer providing client library java go version naturally lag behind jvm versionsour microservices generally one tiny specific thing reach certain level complexity usually spawn new microservices complex logic might cumbersome express simple tool go provides far problem usgolang certainly good fit squad see go p
180,Lobsters,scala,Scala programming,Becoming More Functional,http://m50d.github.io/2017/01/23/becoming-more-functional.html,becoming functional,comment powered disqus comment powered,becoming functional people rscala http wwwredditcomrscala sometimes ask make scala functional advanced technique learn list aimed people already follow twitter scala style guide http twittergithubioeffectivescala want know go assume scalaz http githubcomscalazscalaz scope ca nt find scaladocs cat learning scalaz http may useful reference thing also use kindprojector http githubcomnonkindprojector syntax tends readable even one nt actually using kindprojector use type represent data avoid branching type help keep track distinction code value two different state make two different type eg month ago bug passed graph function expected graph filtered another function first solution make filtered graph unfiltered graph different type else generally sign want adt sealed trait datastructure full option either especially state one field affect another eg b left match construct easy write unsafely http aselectorsubtlety often replaced fold eg never match option either unless need tailrec might worth defining fold method custom sealed trait find writing fold identity one branch see whether datatype defines specialized method use case eg option getorelse use shapelessbased typeclass derivation avoid write boilerplate custom datatypes particularly applicable walk object graph like problem eg json serialization much safer reflection higherperformance since happens compile time rather run time give error try eg include file json output tentative use matryoshka http githubcomslamdatamatryoshka avoid boilerplate custom treelike datatypes want enable traversal replace general foldleft friend specific operation foldleft generalpowerful method make hard reason http wwwlihaoyicompoststrategicscalastyleprincipleofleastpowerhtml le powerful general imperative loop though least reduces scope variable make explicit exactly threaded iteration one first step making codebase functional replacing looping construct foldleft call next step often replace specificconstrained construct sometimes simply method case eg find forall exists groupby min max partition scalaz separate also see use reduce often suml may need define monoid instance type use shapelessscalaz http githubcomtypelevelshapelesscontrib derive one map followed suml foldmap foldleft body includes flatmap usually traverse sequence sometimes simplified traverse followed map suml foldmapm traverse followed map flatten traversem foldleft accumulates modifies secondary parameter along primary operation often clearest way express using writer state see next section case often rewrite foldleft traverse use standard yield enabled type secondary parameter concern often code manage secondary concern well primary thing often applicationwide crosscutting concern eg audit logging database transaction management async io error handling think effect tension making thing explicit enough reader understands code actually nt confused magic http subtle difference handling different effect aop approach ensuring happy path primary concern code remains clear difficulty handle error happen approach scala yield offer useful third way one write chain applicative builder syntax using instead want accumulate failure still return result value even failure use scalaz writer writer use yield accumulate failure earlier validation always return value even failure need pas readonly context value businesslogic layer even though going used low level scalaz reader might appropriate used replacement global constant object singleton even form dependency injection beware overusing object contains business logic would leave global static object move towards reader style actually need pas different value occasion eg test stub imo conventional dependency injection relatively benign form magic provided use constructor injection rather field injection object constructor field still behave expected scala anything concise ensures object still easily constructed normally eg unit testing possibility tooling eg find reference knowing di mechanism ensure visible marker class constructed di reader immediately see class instantiated nonstandard way spring example component class myservice autowired somedependency somedependency green field project macwire http githubcomadamwmacwire good purescala option said manual object construction lightweight enough scala generally prefer di hand appreciate theoretical elegance cake pattern find much codelevel overhead use practice piece effectful code ca nt wo nt model detail still want able pas around value ie control effect happen use scalaz task want async io use scalaz task usually better using akka actor since task typesafe keep reasoning function rather think message async task need access isolated piece state concurrently safely use traditional java tool eg atomicinteger longadder concurrenthashmap atomicreference actor useful two piece state need access concurrently also always keep sync ime need akka distribution functionality also use standard library future beware nt control effect happen future effect inside nt generally value pas around control actually happen rather effect eg web request start immediately future instantiated future would make sense pure computation async general probably overhead worth case working simultaneously rather waiting simultaneously http yosefkcomblogworkingsimultaneouslyvswaitingsimultaneouslyhtml async shine thing like external web request case usually want control io happens operation need happen kind block context eg database transaction represent operation value pas single method openclose ca nt path forget match often good replacement magic proxiesinterceptors based method annotation xml pointcuts similar simplest value could function task created using taskdelay case careful allow context escape eg file handle closed end block tentative theoretical technique avoiding http nt think practical library yet want declarativeintrospectabletestable way express command define custom adt sealed trait want allow composite command connected function pas around eg series database operation executed single transaction free monad way without boilerplate define primitive operation adt eg load save building composite operation using yield syntax supported without code tentative want allow composite command ensure executed parallel consider freeap good way writing partially parallel command structure open research area fetch http probably current state art hoping explore possibility coming tierney http project tentative combining multiple yield oriented type theory considering lately effect ever problematic two effect interact eg implicit pervasive unmanaged state mutation fine implicit pervasive unmanaged asynchronicity fine interaction extremely difficult debug http traditional imperative programming allows working one effect time technique previous section provide huge advance make practical work two effect one effect managing via yield one implicit pervasive global effect probably enough program even many library potentially deal userdefined effect ever accept callback similar demonstrated fact technique dealing really developed last year least scala haskell handle io explicitly managed effect without technique haskell program would expend yield equivalent managing io difficulty expressing explicit managementsequencing effect least code also performing io certainly everything section tentativeexperimental however limit two effect seems decidedly inelegant become practical issue codebase get large enough want manage many effect explicitly double flatmap flatmap flatmap similar construct involving map eg flatmap map often sign using monad transformer simplest way work monad transformer usually define single consistent stack use throughout application eg eithert writert task vector auditevent validationerror application need record audit event report validation error perform async io define type alias stack helper method lifting single effect complete stack type action eithert writert task vector auditevent validationerror def log ae auditevent action unit eithertrightu validationerror writertput tasknow vector ae need write code reused different effect stack different part application different effect stack eg withwithout database access writing library used userprovided effect stack write stackgeneric form using typeclass constraint def log f ae auditevent implicit mt monadtell f vector auditevent f unit mttell vector ae also put f type parameter service class accept dependency parameterized f class myservice f monadtell auditevent dependentservice dependentservice f also let instantiate minimal f unit test eg writer vector auditevent full stack required real dependentservice real service alternatively look one various free coproduct library freek http githubcomprojectseptemberincfreek seems momentum behind paperdoll http effort home please enable javascript view comment powered disqus comment powered disqus
181,Lobsters,scala,Scala programming,Compiling Scala For Performance (2010),https://infoscience.epfl.ch/record/150270/files/EPFL_TH4820.pdf,compiling scala performance,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream psw q
182,Lobsters,scala,Scala programming,A Beginner-Friendly Tour through Functional Programming in Scala,http://degoes.net/articles/easy-monads,beginnerfriendly tour functional programming scala,totality determinism purity unfamiliarity jargon motivation impractical fp totality determinism purity console io extensibility perk pure quasar analytics summary,essential core functional programming quite simple build program composing function context function refer computer science function hunk machine code rather mathematical function totality function must yield value every possible input determinism function must yield value input purity function effect must computation return value together property give unprecedented ability reason code call function input always get valid value value every time call function input function try anything else funky like launch nuclear missile tiny idea profoundly simplifying effect largescale software engineering mean le brain keep track order understand behavior program fact understand behavior program understanding behavior individual part without keep head one time function programming always reputation simple think several factor unfamiliarity functional programming quite different type programming professional used unfamiliar seem difficult best compare functional programming experience learning program first time rather experience say learning new programming language modestly different one already know jargon lot jargon functional programming immutability recursion induction hylomorphism transducer functor list go concept necessarily hard scarysounding name lot experience programming imperative way help understand new terminology motivation experience people learn thing easily clearly see useful accomplishing goal people yet although situation improving people learn functional programming share knowledge others much motivation core concept functional programming might add functional programming sometimes associated advanced staticallytyped functional programming case people learning functional programming really learning two thing functional programming advanced type system imperative programming language relatively simple type system however one program functionally untyped programming language program imperatively advanced type system two necessarily linked many u functional programmer would like show people excited functional programming yet content write geared functionallycurious even beginner functional programmer rather write interest tends intermediate advanced functional programming intended useful people programming functionally year trying experiment going demonstrate idea functional programming help u build realworld program going way hopefully somewhat aware factor functional programming blog post people functional programmer maybe people know little wish understood hopefully find useful useful hope find inspiring inspiring enough invest effort necessary push forward knowledge functional programming despite difficult might seem know maybe post seem easy impractical fp canonical example power functional programming following generic sort function def sort ordering list list match case nil nil case val partition sort sort beautiful example demonstrates functional programming simplifying effect reason software looking code probably convince following sorted empty list empty list sorted nonempty list first element subsequent element concatenation sort element le followed concatenation followed concatenation sort element le every part function reasoned independently believe piece correct trust correctness whole moreover sort function function mathematical sense easy test reuse send list function expect return sort list know function always return output input test stated quite simply assert sort int nil nil assert sort int nil nil fact stated much powerfully functional programming topic another post explaining benefit functional programming one case seem simple enough big stretch imagine benefit might scale example move beyond toy example fact number one objection functional programming work toy example fails utterly realworld programming let take simplest realworld problem think function return value succeed totality defined function total deterministic happens drop totality requirement well function need return anything practically speaking mean function either run forever escape need return value using mechanism supported host language typically throwing exception function never return run forever clearly broken runaway loop due edge condition similar exception day exception programmer used return value indicate success failure function c code example write long sequence code looked like int parseconfig config cfg filehandle handle char byte handle newhandle handle fileopen configcfg handle null return char byte fileread handle byte null return return world introduction exception handling seemed almost magical programmer could avoid tangling errorhandling concern application logic benefit shortcircuiting behavior exception main problem exception language support guarantee occur mean occur everywhere mean sufficiently long period time occur virtually everywhere even java unchecked exception thrown anywhere often contain checked exception inside null proliferation exception lead defensive aggressive exception handling even case make sense lead bug bizarre edge case fortunately easily achieve totality clean code requires machinery older programming language supported develop idea let take function return first element list def head list ashead function total depending list pas function may may return first element list pas empty list function never return instead throw exception make function total function need introduce data structure model concept optionality something might might let call maybe sealed trait maybe final case class value extends maybe final case class notthere extends maybe data structure turn head pseudofunction real function def head list maybe match case nil notthere case think code us function consider possibility function return function always return since consider possibility reasoning code us head function simpler containing fewer case analyze maybe data structure provide power exception however one information error perhaps ok case head function know error going work well function solve problem introduce new data structure called result model concept exceptionality sealed trait result e final case class error e error e extends result e final case class success e value extends result e type let u make function like fileopen total function def fileopen path string result fileerror filehandle information exception provide u however lot different operation perform return result look like would need lot boilerplate reminiscent day exception def parseconfig result fileerror config fileopen configcfg match case error e error e case success handle fileread handle match case error e error e case success byte made function fileopen fileread total simplifies reasoning time introduced additional boilerplate make code harder read recapture detangling shortcircuiting benefit exception need recognize pattern code study code minute able see following pattern dox match case error e error e case value x doy x match case error e error e case success doz match case error e error e case success z dow w match examine type doy doz dow must discover accept result e previous operation using produce new result e b suggests factor duplication introducing chain method def chain e b result result e f result e b result e b result match case error e error e case success f indeed use chain method original parseconfig method def parseconfig result fileerror config chain fileopen configcfg handle chain fileread handle byte reduces boilerplate calling chain every result e achieve shortcircuiting benefit exception errorhandling logic factored chain method application logic need concern use structure like result model exceptional case eventually find need utility function look like change result e b using provided function f def change e b result result e f b result e b result match case error e error e case success success f maplike function similar mapping element array different type like programming objectoriented style make function chain change method result class sealed trait result e def change b f b result e b match case error e error e case success success f def chain b f result e b result e b match case error e error e case success f final case class error e error e extends result e final case class success e value extends result e make code read little better def parseconfig result fileerror config fileopen configcfg chain handle fileread handle chain byte call change chain method map flatmap respectively scala provides handy syntax simplify way code look def parseconfig result fileerror config handle fileopen configcfg byte fileread handle yield point regained totality function full benefit exception shortcircuiting untangled concern needed chain function aka flatmap result data structure rest fall place naturally note chain function accepts function parameter parameter supplied anonymous function capture arbitrary reference context help demonstrate technique never really emerged c code c firstclass function garbage collection reference counting quite probable pattern would emerged without input functional programming community remaining requirement function determinism purity let take look requirement next section determinism purity function deterministic compute return value notoriously difficult reason example used library probably created perform io inside constructor class logging private outputstream ostream public logging file file ostream new fileoutputstream file constructor may throw exception unexpected another example url class java may perform network connection place instance class data structure whoa happens equal hash code method may trigger resolution address addition unexpected nature impure function know nondeterminism make testing reasoning function particularly difficult may forced mock code reason external state affect behavior function pure deterministic function anything dirty behind scene count always return output input mean code easier test easier understand try make function total deterministic pure quickly hit wall try perform inputoutput effect wall convinced many functional programming impractical realworld software fact wall long since shattered rather go path let look simple example io see bootstrap solution console io let say developing console program need read input console write output console many useful problem solved console program figure make console program deterministic pure generalize type program think problem may come following idea instead calling function deterministic pure build data structure describes console effect comprise program suppose consoleio description program start need way describe effect writing output console one approach might look like sealed trait consoleio final case class writeline line string extends consoleio approach bit simple build program writes single line text console def helloworld consoleio writeline hello world total deterministic pure useful describe program writes single line text console text change course even fed parameter function ultimately program single effect console fortunately pretty easy extend structure support multiple effect sequence one way sealed trait consoleio final case class writeline line string consoleio extends consoleio using approach construct complex description effectful program example def infinitehelloworld consoleio writeline hello world infinitehelloworld introduced thunk avoid blowing stack construction structure would describe program writes hello world infinite number time console infinite program like useful fix problem adding another term consoleio one allows program termination sealed trait consoleio final case class writeline line string consoleio extends consoleio final case object end extends consoleio construct example description program repeat printing certain line text certain number time def printtextntimes text string n int consoleio n end else writeline text printtextntimes text n function total pure deterministic course actually print anything console get soon enough currently describe program write text console easy enough extend approach read text console sealed trait consoleio final case class writeline line string consoleio extends consoleio final case class readline process string consoleio extends consoleio final case object end extends consoleio notice constructing readline value requires supply function given line input read console return another consoleio representing rest effectful program pas function readline promise point future someone give u string line input console use return rest program structure sufficiently powerful u describe interactive program example following program asks name print hello followed name def socialprogram consoleio writeline hello name readline name writeline hello name end remember function total deterministic pure one imagine building complex description effectul program using structure fact program requires console io effect could described structure notice program described consoleio simply terminates point program return value want composable program program produce thing program depend need generalize end term accept value type necessitate add new type parameter consoleio thread term end result look slightly complex sealed trait consoleio final case class writeline line string consoleio extends consoleio final case class readline process string consoleio extends consoleio final case class endwith value extends consoleio consoleio description program read write console terminate value type let u build program produce value consumed program using structure build hello program time return name user program val usernameprogram consoleio string writeline hello name readline name writeline hello name endwith name capability missing consoleio ability change return value type example want build another console program return name user return many character name reusing usernameprogram currently possible need something powerful capture notion list would able map element change result type precisely capability need consoleio add map function directly consoleio sealed trait consoleio def map b f b consoleio b map f final case class writeline line string consoleio extends consoleio final case class readline process string consoleio extends consoleio final case class endwith value extends consoleio final case class map v consoleio f extends consoleio given consoleio map consoleio b given function b write new program usernamelenprogram computes number character user name writing following snippet def usernamelenprogram consoleio int usernameprogrammap length addition map utility endwith changed longer need return value program map whatever value return value example consoleio string map consoleio int specifying function string int however endwith could still used construct pure program performs effect composed program still useful although original purpose therefore rename pure follows sealed trait consoleio def map b f b consoleio b map f final case class writeline line string consoleio extends consoleio final case class readline process string consoleio extends consoleio final case class pure value extends consoleio final case class map v consoleio f extends consoleio capability build reuse description console io program without limitation restriction description total deterministic pure therefore benefit enhanced ability functional code easier understand easier test easier change safely easier compose ultimately however convert description program actual actually perform effect mean indeterminism impurity typically process called interpretation one write straightforward indeterministic impure interpreter consoleio using code similar following def interpret program consoleio program match case writeline line next println line interpret next case readline process interpret process readline case pure value value case map v f f interpret v better way shall cover think interesting enough able describe effectful program satisfy requirement totality determinism purity easily converted realworld program perform effect note conversion could happen end program haskell happens outside main function haskell runtime however language level fp machinery baked always effectfully interpret program entry point program ensure maximum totality determinism pureness throughout vast majority program edge nasty little layer may hard reason faithfully translates description program executable effect substrate extensibility approach work well world set effect fixed case far console io reading writing line console however real world program set effect consideration far complex benefit ability compose program different effect union effect first step recognize additional structure essence break description console program part produce value writeline expect value readline rest program consists pure boilerplate either changing one program another mapping value return map chaining two program together fashion second depends value output first chain flatmap make sense study following type sealed trait consoleio def map b f b consoleio b map f def flatmap b f consoleio b consoleio b chain f final case class writeline line string extends consoleio unit final case class readline extends consoleio string final case class pure value extends consoleio final case class chain v consoleio f consoleio extends consoleio final case class map v consoleio f extends consoleio different admittedly confusing way represent thing using new structure interactive program becomes little complex express def usernameprogram consoleio string chain unit string writeline name chain string string readline name chain unit string writeline hello name pure name model consoleio sort genericlooking chain map pure term really talk effect console program two additional term describe effect readline writeline effect simplified model interpreter model bit involved def interpret program consoleio program match case writeline line println line case readline readline case pure value value case map v f f interpret v case chain v f interpret f interpret v formulation may seem different key insight term describe effect rest pure machinery machinery abstracted another class reused possible effect type example sealed trait sequential f def map b f b sequential f b map f b f def flatmap b f sequential f b sequential f b chain f b f final case class effect f fa f extends sequential f final case class pure f value extends sequential f final case class chain f v sequential f f sequential f extends sequential f final case class map f v sequential f f extends sequential f sealed trait consolef final case class writeline line string extends consolef unit final case class readline extends consolef string type consoleio sequential consolef sequential class directly reference consoleio reused may different effect type allows u cleanly separate effect computational machinery new version hello world program def usernameprogram consoleio string chain consolef unit string effect consolef unit writeline name chain consolef string string effect consolef string readline name chain consolef unit string effect consolef unit writeline hello name pure name take advantage scala notation add single implicit class make easier wrap effect inside effect constructor end following simplification def usernameprogram consoleio string writeline name effect name readline effect writeline hello name effect yield name approach simplified even example adding helper function term writeline readline forth helper make program even simpler def usernameprogram consoleio string writeline name name readline writeline hello name yield name major difference imperative program structure roughly syntax differs little case however built description program total deterministic pure effect outside world aside utilizing memory cpu compute structure moreover clean separation actual set effect extended mean take two program different effect combine together program effect need sort eitheror term say one effect console io another file io sealed trait eitheror f g final case class isleft f g left f extends eitheror f g final case class isright f g right g extends eitheror f g type compositeprogram sequential eitheror consoleio fileio interpreter written structure quite simply reuse interpreter individual effect type console versus file developed first principle without jargon abstraction see actually legendary free monad strike terror unsuspecting scala developer everywhere bad let take look perk abstraction wrap tour perk pure common reaction sort encoding effect point really practical benefit come style describing effectful program type program describe exactly capable reasoning code becomes tremendously simpler hunk machine code embedded everywhere literally anything instead precisely describe exactly effect program requires declarative fashion advanced version describe effect one layer abstraction translate effect lower level abstraction separate description program actually example web program build html description interpreted html dom node html canvas node pdf server mock dependency external dependency file system network system apis etc described data structure easily traverse data structure make sure feed right value return right response unlike mocking library approach totally typesafe require runtime support inspect program run example add logging line print instruction succeeded log line quite detailed replace need manual logging moreover since weaved act composing interpreter logging truly overhead disabled boilerplate overhead sound good beyond logging add whole aspect program runtime example adding authentication authorization auditing program composing together interpreter company produce secure version quasar analytics project without tampering code base like aspectoriented programming type safe much flexible addition benefit get tangible benefit able reason total pure deterministic code even presence effect least majority code benefit cascade new development maintaining existing code adding test fixing bug adding team member much summary hope least covered post made sense hope glimpse write full program using total deterministic pure function approach lead benefit starting discover nothing else call learn functional programming persevere spite strange name incomplete documentation confusing type power functional programming tremendous power experience take time learn functional programming end becoming passionate never return old way functional programming give developer ability write software simpler way result cleaner code lower cost maintenance lower technical debt easier composition easier reasoning much intrigued urge stick get stuck please know numerous member functional programming community back help get next level value value type type lambda lambda see side partner
183,Lobsters,scala,Scala programming,The Man Who Knew Infinity: Coding Ramanujan’s Taxi,https://medium.freecodecamp.com/the-man-who-knew-infinity-coding-ramanujans-taxi-52e4c3696e53,man knew infinity coding ramanujan taxi,man knew infinity coding ramanujan taxi man knew infinity ramanujan taxi first crack implementing ramanujan taxi github better third time charm amazing movie amazing man found author geoffrey bourne retirety thanks reading enjoyed article feel free hit clap button help others find,geoffrey bourneramanujan leftthe man knew infinity coding ramanujan taxihave see movie read book man knew infinity new movie star dev patel jeremy iron explores indian mathematician srinivasa ramanujan profound understanding ingenuity love maththe film inspired intellectual emotional level really drew attention particular five second scenethe scene take place ramanujan mentor friend gh hardy quip taken taxi number find number rather dull one ramanujan passionately reply hardy interesting number smallest number expressible sum two cube two different way ramanujan able see beyond simple taxi cab number depth expression behind known ramanujan taxi thought problem fascinating wondered code implementation would look little realize many optimization layer algorithm onionthe taxi ramanujan took least moviefirst crack implementing ramanujan taxii started straight forward implementation written scala code performance timing found github begin bruteforce implementation looping though combination find achieve performance four loop used calculate value equal le parameter n bound search fieldthis bruteforce implementation performance kinda suck better betterfirst question ask always need calculate value remember equation using solve get thus know calculate value directly instead looping value next implementation scala replaces fourth loop calculation version performance since get skip final loop neat third time charmwe done yet third best yet enhancement consider need solve value thing understand calculate value equal le n essentially possible value also sum equal sum sum given pair integer match sum another pair integer essence found pairif store every combination sum corresponding pair sum two pair mean found first pair list considered next example iterate combination store sum pair continuing iterate see another sum arise time pair two different pair summing found ramanujan taxi solves third version use hashmap store sum key corresponding list pair sorted set value list contains one pair got winner implementation performance since need two loop calculate combination neat suspect forth optimization need calculate value derive b loop offset loop n performancealso another challenge rewrite implementation functional programming pattern leave explorean amazing movie amazing manafter watching man knew infinity awe ramanujan genius implementing taxi algorithm several performance optimization got glimpse beauty saw hardy interesting number ramanujan taxi almost century old still making new discovery mathematician emory university found number relates elliptic curve surface object important today string theory quantum physicsi expect scratched surface ramanujan taxi cab number man amazing geniusabout author geoffrey bourne ceo retirety helping people near retirement find better way retirethanks reading enjoyed article feel free hit clap button help others find
184,Lobsters,scala,Scala programming,Experiment using Scala code for configuration - didn't quite work,http://robey.lag.net/2012/03/26/why-config.html,experiment using scala code configuration nt quite work,configgy wrong reloading config file fix post last year pattern work ostrich sleight hand basic trait cloc postscript,first started playing scala dismayed state server configuration java world lot java server still using property file worse xml xml meant easily parsed computer really hard human read edit tends hide useful information baroque syntax line noise python world still clinging windowsera ini file ruby world invented something called yaml odd syntax alex feinberg pointed use term config overly general post talking specifically configuration used bootstrap cluster machine running server code shared configuration required multiple server cluster different problem obviously wellserved solution work jvm gone many iteration config file format previous job moved perl c java private company terrified open source shared none learned thought time spead bestpractices around wrote configgy lazily couple month learned scala configgy core idea behind configgy config file text file primarily readable human unambiguous minimal syntax server configuration really set string key value value bools ints string list string able take block keyvalue set nest subsystem isolated configuration api similarly minimal like typesafe hashtable allow subsystem subscribe configuration value get notified changed end result pretty successful used twitter several year example chunk config file might look like port timeoutmsec log filename varlogkestrelkestrellog roll daily level info unfortunately gone wrong direction took mounting evidence coworkers convince wrong problem configgy show config file example pasted schema port int place declare definition config file key document separately text file really ambitious available type sufficient duration really common server configuration specify timeouts real support drop sly hint field name like msec millisecond hope people paying close attention extending available type never cover case roll field possible value simple way define new enumerated type like problem show daily use validation validate config file cause server crash hour start nothing forcing timeoutmsec int may throw exception minute later code first try call toint default default timeout one configgy supported providing default value api know editing config file especially write original code one biggest fault get section lot say reloading config file configgy lot code support reloading config file fly allowing server subscribe key change behavior config file reloaded seemed really clever time experience taught coworkers really bad idea practice often change config file fly ask server reload importantly murphy law tell u answer something broken middle night need fixed immediately crisis code effectively untested regularly using part server trust enough depend crisis crisis want tool used confident take couple incident reloading config file actually fix server behavior policy becomes fix config file offline restart server ability reload configuration became another moving part something think would never actually use crunch could probably solved adding automated testing change config file asks server reload rerun suite test seem worth practical matter server need startup cleanly kind unclean shutdown kill fire must tested need feature reloading config file change file kill server running new config fix read post last year pattern know heading one obvious way define set named typesafe field write scala trait config file scala file compile evaluate server start config trait builder creates server config like trait serverconfig extends server var port int var timeout option duration none def apply server new server port timeout apply method assembles server configuration config file new serverconfig port timeout important line look like configgy version executed part constructor schema config trait every field type declared trait enforced scala compiler need specialized type like enum make one especially like readable timeouts become unambiguous duration specified millisecond could use second want work key eval component utileval make easier compile execute scala code inside jvm scala already expose functionality scala compiler run jvm repl need linebyline compilation api arcane marked serviceable part inside label eval class simplifies scala val eval new eval eval comtwitterutileval comtwitterutileval scala eval int int result evaluating config file new serverconfig object similar calling apply return fullyinitialized server object loading config file starting server boil val eval new eval val config serverconfig eval serverconfig new file val server server config serverstart add exception handling log error end code inside runtimeenvironment ostrich use bootstrap server startup config file deployed server sleight hand two problem listed solved simple solution validation default value add little bit code finish config file compiled executed valid result evaluation config object serverconfig example sideeffects safely evaluated compile time last phase build executes server jar special validate option compiles config file exit succeeds config file valid crash server production example field default value always want case defined basic config trait allows mark field required default value optional lazily computed trait serverconfig extends config server var port required int var timeout optional duration implicits handle conversion normal type required optional type optional type use scala option class config file look config trait fit completely one file le code line according cloc incredible improvement configgy postscript post little overdue better late never wrote important share knowledge even work carefully avoided naming coworkers writing post disturbed flow deserve callouts john kalucki first spelled implementation default value bad matt freels ed ceaser implemented first draft config class pulled help iterate nick kallen opened eye danger depending server shutdown reload behavior
185,Lobsters,scala,Scala programming,Introducing the Scala Platform Process,http://www.scala-lang.org/blog/2016/11/28/spp.html,introducing scala platform process,infrastructure governance predictable release process modified version contract collective code construction contract contract predictable release process current draft committee need help scala contributor discourse forum create scala platform proposal scala contributor discourse forum get hand dirty submit spp meeting scala process youtube channel,monday november jorge vicente cantero blog today happy release initial plan scala platform process unfamiliar previous call scala platform idea simple reduce scala standard library small core open decision popular library shipped distribution scala basic idea scala platform scala platform logical continuation modularization effort began scala ultimately scalalibrary small core consists scala type come think part language collection class defined directly scala package modularization xml swing parser combinators made easier community maintainer step spp continue opening standard library community involvement however bringing many open source library together easy easy ensure essential library continue developed come proposed initial draft call scala platform process goal scala platform process simple provide infrastructure building continuous integration releasing well help project governance process guideline recruit contributor try make easier platform library author ensure maintenance release library scale beyond alone infrastructure infrastructure scala center provides includes sbtplatform plugin bundle together many task required scala platform library configuring automatic nightly build automatic release stable version git tag found mima compatibility check pgp signature artifact scala platform key integration drone setup writing sbt script configuration oftentimes tedious manage continuous integration ci provided drone epfl cluster ci integration come default scala template requires minor customization yet allows user remotely configure build store token send notification act certain event new change forwarded corresponding platformrelease branch release manager release every night anything go wrong notify maintainer via email error log governance scala platform process also establishes process policy enable outside contributor company industrial user contribute back module help along maintenance goal policy create evolve friendly community around module provide way library synchronize release update still providing stability guarantee user process offer contract maintaining contributing module well predictable release process aforementioned policy best summed slightly modified version contract pieter set rule made zeromq successful collective code construction contract contract process perhaps succinctly motivated goal taken directly specification dead link meant provide reusable optimal collaboration model open source software project specific goal maximize scale diversity community around project reducing friction new contributor creating scaled participation model strong positive feedback relieve dependency key individual separating different skill set larger pool competence required domain allow project develop faster accurately increasing diversity decision making process support natural life cycle project version experimental stable allowing safe experimentation rapid failure isolation stable code reduce internal complexity project repository thus making easier contributor participate reducing scope error enforce collective ownership project increase economic incentive contributor reduces risk hijack hostile entity example contract set rule developer interaction happens someone submits patch user create pullrequests motivate maintainer evolve document apis deal bad actor case conflict modification process focus minor scala platform requirement licensing module choose opensource license long compatible module already platform one yet mozilla public license recommended complete description rule available predictable release process predictable release process allows potential contributor easily reason release consists three release pipeline nightly beta tester early adopter stable user bug fix case critical bug found nightlies published automatically every night stable version platform library released cyclically every week release ready release process asks module use semantic versioning reflect breaking behaviour therefore major release happen every month new scala version released maintainer want experiment major change use experimental annotation whose semantics documented module also need crosscompiled latest two scala major version order ensure longterm compatibility bug fix accepted released major platform release last month module fall unmaintained removed every major release current draft think benefit policy twofold help maintainer contributor organize make easier outside contributor company organization engage development library help scala platform committee member drafted process scala platform specification policy open discussion hope scala community help u improve committee scala platform committee exclusively composed member scala community set direction platform review proposal community decide module join platform member committee dedicated developer long record contribution scala ecosystem development language major opensource project selected represent serve broad interest scala community personal viewpoint dale wijnand dwijnand aleksandar prokopec lars hupel larsrh marius eriksen mariusae bill venners bvenners konrad malawski ktoso pathikrit bhowmick pathikrit alexander podkhalyuzin alefas mathias doenitz sirthias rex kerr ichoran david hall dlwh need help make scala platform successful need help community get involved make suggestion improve scala platform policy scala contributor discourse forum create scala platform proposal discus give feedback current proposal scala contributor discourse forum process designed feedback early give feedback proposal encourage get hand dirty submit spp meeting stay tuned follow regular spp meeting broadcast live youtube scala process youtube channel
186,Lobsters,scala,Scala programming,Typelevel in 2016,https://www.youtube.com/watch?v=ZSbn3XMg6oQ,typelevel,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scalabythebayio mile sabin keynote typelevel youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scalabythebayio mile sabin keynote typelevel youtube
187,Lobsters,scala,Scala programming,The Neophyte's Guide to Scala Part 11: Currying and partially applied functions,http://danielwestheide.com/blog/2013/01/30/the-neophytes-guide-to-scala-part-11-currying-and-partially-applied-functions.html,neophyte guide scala part currying partially applied function,,
188,Lobsters,scala,Scala programming,Java and Scala's Type Systems are Unsound,http://io.livecode.ch/learn/namin/unsound,java scala type system unsound,unsound playground nada amin ross tate scala,unsound playground oopsla award nada amin ross tate broke java scala type system try running example throw cast exception even though contain cast read paper java scala type system unsound learn example work come example use save icon update url permalink code language would like break java scala class unsound static class constrain b extends static class bind b extends upcast constrain b constrain b b return b static u u coerce constrain u super constrain null bind u bind new bind u return bindupcast constrain public static void main string args string zero unsound integer string coerce binbash set e v pick version export export path javahomebin path check version java version compile cat unsoundjava javac unsoundjava run java unsound
189,Lobsters,scala,Scala programming,Scala 2.12 – extended release notes,http://get-scala.org/2.12,scala extended release note,click redirected,click redirected
190,Lobsters,scala,Scala programming,"""Why I quit working on Scala documentation""",https://groups.google.com/d/msg/scala-internals/r2GnzCFc3TY/x3PmIq4cAgAJ,quit working scala documentation,,use google group discussion please enable javascript browser setting refresh page
191,Lobsters,scala,Scala programming,Subtype type classes don't work,http://typelevel.org/blog/2016/09/30/subtype-typeclasses.html,subtype type class nt work,subtype type class nt work scala symposium free problem cat scalaz desugar arguably comprehension one solution scato scalaz however prioritizing implicits basehierarchy compromise cat scalaz cat scalaz tut licensing creative common attribution unported license follow adelbertc back blog,subtype type class nt work update comprehensive version blog post published scala symposium available free acm opentoc service corresponding talk found common encoding type class scala relies subtyping singular fact give u certain cleanliness code cost problem consider following hierarchy type class similar hierarchy found cat scalaz trait functor f trait applicative f extends functor f trait monad f extends applicative f trait traverse f extends functor f purpose demonstration using cat rest post argument apply scalaz also assume syntax accompanying hierarchy allowing u call method like map flatmap traverse directly f provided f appropriate type class instance functor monad traverse respectively import cat import catsimplicits one important consequence use comprehension method parameterized monad def foo f monad f int monad f pure b monad f pure yield b notice due comprehension desugar also call map since type class hierarchy encoded via subtyping scala know monad f implies functor f well consider case want abstract data type monad traverse ignore fact even using traverse ca nt even call map def foo f monad traverse f int monad f pure map identity console error value map member type parameter f int def foo f monad traverse f int monad f pure map identity console error missing argument list method identity object predef unapplied method converted function function type expected make conversion explicit writing identity identity instead identity def foo f monad traverse f int monad f pure map identity already trouble order call map need f functor instance via monad also via traverse precisely reason work encoding type class us subtyping monad f functor f similarly traverse f functor f implicit resolution attempt find functor f decide monad f traverse f bail even though instance may arguably compiler way knowing problem generalizes anytime compiler decides implicit ambiguous method call fact nt actually use functor irrelevant def bar f applicative functor f int applicative f pure def callbar f monad traverse f int bar f console error ambiguous implicit value value evidence type catstraverse f value evidence type catsmonad f match expected type catsfunctor f def callbar f monad traverse f int bar f map easy enough arbitrarily pick one instance call map function call thread implicit explicitly def foo f monad traverse f int monad f map monad f pure identity def callbar f monad traverse f int bar monad f monad f bar monad f traverse f foo terrible bar though already starting see get unwieldy could passed monad f traverse f second parameter corresponds bar functor f constraint pas monad f first parameter satisfy applicative f implicit resolution disambiguate functor f pas explicitly also pas everything else explicitly become implicit resolver two constraint three four five trouble end asked monad let try using comprehension def foo f monad traverse f int monad f pure b monad f pure yield b console error value map member type parameter f int b monad f pure also broken comprehension desugar map call inevitable lead comprehension breaking drastically reduces ergonomics anything monadic map could call flatmap monad directly quickly becomes cumbersome def foo f monad traverse f int val monad f mflatmap mpure mmap mpure b b problem arise ask two type class share common superclass example two monad error plus reader state writer ambiguous monad monadplus monad ambiguous monad alternative traverse ambiguous functor monadrec monadplus ambiguous monad suggests every type class one subclass quite limiting readily demonstrated extremely useful applicative traverse type class solution le remains open problem scala interesting alternative prototyped scato making way scalaz received positive feedback gist encoding completely throw notion subtyping encoding hierarchy via member instead trait functor f def map b fa f f b f b trait applicative f def functor functor f def pure f def b c fa f fb f b f b c f c definition elided space trait monad f def applicative applicative f trait traverse f def functor functor f relation type class danger implicit ambiguity however reason monad f longer implies functor f currently anyway use implicit conversion reencode hierarchy implicit def applicativeisfunctor f applicative functor f implicitly applicative f functor implicit def traverseisfunctor f traverse functor f implicitly traverse f functor back square one syntax functor implicit class functorops f fa f implicit f functor f def map b f b f b fmap fa f def foo f applicative traverse f int implicitly applicative f pure map identity console error value map member type parameter f int implicitly applicative f pure map identity console error missing argument list method identity object predef unapplied method converted function function type expected make conversion explicit writing identity identity instead identity implicitly applicative f pure map identity since implicits equal priority compiler know one pick however scala mechanism prioritizing implicits solves problem object prioritized needed tut irrelevant demonstration trait functor f def map b fa f f b f b prioritize implicit conversion functor brevity trait implicit def applicativeisfunctor f applicative functor f implicitly applicative f functor trait extends implicit def traverseisfunctor f traverse functor f implicitly traverse f functor object functor extends trait applicative f def functor functor f def pure f def b c fa f fb f b f b c f c definition elided space trait traverse f def functor functor f syntax functor implicit class functorops f fa f implicit f functor f def map b f b f b fmap fa f def foo f applicative traverse f int implicitly applicative f applicative implicitly traverse f traverse implicitly functor f also functor syntax implicitly applicative f pure map identity implicit resolution treat implicits subtypes higher priority organize conversion appropriately prevent ambiguity mean applicativeisfunctor lower priority traverseisfunctor applicative traverse instance scope compiler looking functor traverseisfunctor win one thing note baked implicit hierarchy functor general mean superclass aware subclass convenient usability perspective companion object considered implicit resolution modularity perspective strange case would prevent extension hierarchy external source solved removing hierarchy superclass removing functor extends come cost needing import use site bring implicits scope trait functor f def map b fa f f b f b trait applicative f def functor functor f def pure f def b c fa f fb f b f b c f c trait traverse f def functor functor f implicit class functorops f fa f implicit f functor f def map b f b f b fmap fa f separate type class definition trait implicit def applicativeisfunctor f applicative functor f implicitly applicative f functor trait extends implicit def traverseisfunctor f traverse functor f implicitly traverse f functor object prelude extends need import get implicit conversion scope import prelude def foo f applicative traverse f int implicitly applicative f implicitly traverse f implicitly functor f implicitly applicative f pure map identity prelude could provided base library external library type class still extend hierarchy provide prelude developed form seen basehierarchy scalaz win sure encoding certainly cumbersome started solves problem ran compromise another thing try make compromise two continue use subtyping blessed subset hierarchy use member branching type class trait functor f def map b fa f f b f b implicit class functorops f fa f implicit f functor f def map b f b f b fmap fa f trait applicative f extends functor f def pure f def b c fa f fb f b f b c f c trait monad f extends applicative f trait traverse f def functor functor f def foo f applicative traverse f int implicitly applicative f pure map identity work even messier alternative decide type class get live subtype hierarchy doomed blessed express relationship member maybe pro outweigh con pull request change filed cat scalaz convinced story though maybe another solution yet discovered reading open ticket cat scalaz documenting subtyping problem discussion around scato encoding scalaz found article tested scala cat using tut licensing unless otherwise noted content licensed creative common attribution unported license adelbert chang sep follow adelbertc back blog
192,Lobsters,scala,Scala programming,Modern Functional Programming: Part 2,http://degoes.net/articles/modern-fp-part-2,modern functional programming part,architecture modern functional program look like quasar analytics engine company equivalent architecture talk lambdaconf onion architecture pattern name free edge oliver charles tangled concern introspection overspecified operation talk free applicatives free applicatives mocking library freek effcats free transformer worked example higherorder category theory denotational semantics recursion scheme conclusion edit repository denis mikhaylov,late last year wrote thought architecture modern functional program look like post generated vigorous discussion community perhaps railed io monad advocated free monad used pervasively quasar analytics engine one open source project company develops since chance read response look equivalent architecture built upon monad transformer library mtl even talk recent experiment lambdaconf result sequel original post consists newlyminted trickedout recommendation architecting modern functional program along new way thinking structure architecture onion architecture modern architecture functional programming henceforth call onion architecture similarity pattern name involves structuring application series layer center application semantics encoded using language domain model beginning center layer translated one language lowerlevel semantics outermost layer application final language application environment example programming language standard library foreign function interface possibly even machine instruction toplevel program final language application trivially executed mapping onto environment course involves running effect application requires perform useful work free edge onion architecture implemented objectoriented programming functional programming however limitation type system objectoriented programming language generally imply implementation final pragmatically speaking mean objectoriented program written using onion architecture benefit sort runtime introspection transformation within functional programming choice monad transformer library mtl something equivalent final approach though note type class mtl subverted build free structure free monad something equivalent initial approach even possible mix match mtl free within program come mixed tradeoff expect shown oliver charles mtl indeed quite simply implement onion architecture without help free however following caveat apply tangled concern mtl implies linear stack monad since interpreter logic go type class instance involves tangling concern example logging interpreter must also delegate interpreter expose semantics logging class introspection mtl allow introspection structure program purpose applying dynamic transformation one mean program fragment optimized implication limitation explored new way discovered use free monad overspecified operation monad class mtl must overspecified performance reason one operation semantically composite others type class must still express instance provide high performance implementation technically implication important enough call separately free monad none drawback free monad permit decoupling interpreter one interpreter produce result operation interpreted result fact free monad permit unlimited introspection transformation structure program edit informationtheoretic limit see talk free applicatives support sequential code like free monad allow unbounded peekahead free monad allow minimal specification semantic layer since performance optimized via analysis transformation second benefit previously discussed optimization program via free applicatives also recently demonstrated mocking library expose composable typesafe combinators building expectation something demonstrated apparently impossible using monad transformer reason endorse free monad direction future however functional programming language derived approach reduce eliminate boilerplate inherent original approach see freek effcats scala example opinion wonderful polymorphism monad type class mtl best thing mtl rather transformer clearly superior early free program built nonetheless free equivalent mechanism dubbing free transformer ft go headtohead mtl even allows developer target mtl free portion code free transformer oldfashioned free code monomorphic functor type functor injection becomes polymorphic functor injection special case polymorphic functors whose capability described type class fortunately replicate success type class mtl straightforward fashion let say creating semantic layer describe console input first step define type class describes operation algebra class console f readline f string writeline string f unit trait console f def readline f string def writeline line string f unit notice unlike mtl console necessarily monad weakening allows u create instance data type capture structure operation provide context composing allows code polymorphic type data structure used represent operation course monadic instance may defined free code requires monadic applicative composition use additional constraint myprogram forall f console f monad f f unit def myprogram f console monad f unit law type class like specified embedding functor suitable computational context free name transformer come fact functors compose nested outer functor transforms inner functor yield new composite functor free program usually built compositional functors free transformer approach allows maximum polymorphism fact enough polymorphism lot code need care whether implement free monad transformer worked example let work simple example onion architecture using free monad free transformer approach abstracting functor operation suppose building banking service following requirement account may listed balance account may shown cash may withdrawn account multiple cash may transferred one account another first step create type class represent operation available domain model data data type transferresult either error tuple amount amount class banking f account f nonemptylist account balance account f amount transfer amount account account f transferresult withdraw amount f amount case class value case class value type transferresult either error amount amount trait banking f def account f nonemptylist account def balance account account f amount def transfer amount amount account account f transferresult def withdraw amount amount f amount next step create data structure representing operation independent computational context data bankingf account nonemptylist account balance account amount transfer amount account account transferresult withdraw amount amount instance bankingbankingf banking bankingf account account id balance balance id transfer f transfer f id withdraw withdraw id sealed trait bankingf case class account next nonemptylist account extends bankingf case class balance next amount extends bankingf case class transfer amount amount account account next transferresult extends bankingf case class withdraw amount amount next amount extends bankingf create instance free automatically derived suitable functor instance bankingfree banking f banking free f account liftf account balance liftf balance transfer f liftf transfer f withdraw liftf withdraw implicit def bankingfree f implicit f banking f banking free f new banking free f def account free f nonemptylist account freeliftf faccounts def balance account account free f amount freeliftf fbalance account def transfer amount amount account account free f transferresult freeliftf ftransfer amount def withdraw amount amount free f amount freeliftf fwithdraw amount point define highlevel program operate business domain without tangling concern banking protocol socket communication logging example forall f inject bankingf f free f amount example account b balance head return b def example f inject bankingf free f amount faccounts b fbalance ashead yield b defined highlevel program formally express meaning program term next layer onion let first introduce notion interpreter give one layer semantics defining term another type interpreter f g forall f free g infixr type interpreter type interpreter f g f free g type f g interpreter f g interpreter f g f g provides meaning term f attaching sequential program g word interpreter define meaning one layer onion term another definition interpreter possible useful suffices example interpreter composed horizontally feeding output one interpreter second interpreter vertically feeding value two interpreter appending choosing one output using notion sequential interpretation helpful able define interpreter produce value done using constlike construct shown type halt f f unit type halt f f unit interpreter f g produce value simply f halt g f halt g interpreter used purely effect arise frequently weaving aspect free program let say create following onion banking defined term protocol want log protocol defined term socket communication logging defined term file io finally top level define file io socket communication term purely effectful semanticless iolike monad rather take time define interpreter realistic fashion provide type signature bankinglogging bankingf halt loggingf bankingprotocol bankingf protocolf protocolsocket protocolf socketf loggingfile loggingf filef execfile filef io execsocket socketf io val bankinglogging bankingf halt loggingf val bankingprotocol bankingf protocolf val protocolsocket protocolf socketf val loggingfile loggingf filef val execfile filef io val execsocket socketf io implementing interpreter wire together using bunch seemingly unfamiliar utility function ship free implementation later final composed program achieves complete separation concern domain achieving clarity modularity semantic rigor seldom seen world software development opinion clarity modularity semantic rigor rather specific reliance free monad future functional programming let take peek structure approach see gain additional insight powerful higherorder category theory spend time writing program using free become quite good composing interpreter build interpreter long identify similarity various utility function free liftf lift f free f f free f function standard functor hierarchy point fact similarity coincidental due language limitation notion functor baked functional programming library quite specialized limited beyond world lie another one far powerful abstract u even express properly programming language today world free form higherorder monad capable mapping applying joining ordinary lowerorder functors want express notion current programming language introduce entirely new set abstraction mirror functor hierarchy abstraction would look something like class forall f g functor f functor g f g f g class forall f g functor f functor g product f g product f g class forall f functor f f f class forall f functor f f f class trait def f functor g functor fg f g f g trait extends def f functor g functor product f g product f g trait extends def f functor f f trait extends def f functor f f trait extends composing interpreter together becomes matter using ordinary functor machinery albeit lifted work higherorder higherorder abstraction stop functor hierarchy everywhere every bit machinery categorytheoretic basis example define higherorder category class forall f functor f f f forall f g h functor f functor g functor h g h f g f h trait def f functor f f def f functor g functor h functor gh g h fg f g f h advantage recognizing abstraction pulling type class make code way generic example write code compose manipulate interpreter depend free operate suitable computational context freeap discovery whole new way building program may depend ability see past crippled notion category theory baked library notion ultimately rooted limitation programming language denotational semantics denotational semantics mathematical compositional way giving meaning program meaning program whole defined meaning term comprising program denotational semantics provide unprecedented ability reason program composable modular fashion onion architecture provides way specifying whole program using denotational semantics meaning one domain precisely compositionally defined term another domain recursion scheme recursion scheme generic way traversing transforming data structure defined using fixedpoint type capable factoring recursion data structure recursion scheme useful lot place really shine complex analysis transformation recursive data type used compiler translating higherlevel layer program ast lowerlevel layer intermediate language assembly language performing various analysis optimization know recursion scheme start using free monad eventually discover free fixedpoint type describing valueproducing program whose unfolding structure depends runtime value mean leverage suitablygeneric recursion scheme analyze transform free program program written using onion architecture viewed compiler source language incrementally progressively translated target language one composable intermediate language onion architecture program compiler recall rise fall domain specific language dsl held enormous promise costly implement maintain free combined suitably powerful type system provides way create typesafe domainspecific language give precise semantics without usual overhead conclusion onion architecture proven enormously useful tool structuring largescale functional program composable modular way architecture isolates separate concern separate domain allows rigorous treatment program semantics onion architecture implemented many way prefer implementation using freelike structure better separation concern potential program introspection transformation combined free analogue mtl type class approach becomes easier use much polymorphic architecture connection denotational semantics surprising emergence higherorder abstraction category theory arise composing interpreter natural applicability recursion scheme promising glimpse future functional programming clear think free future functional programming free structure insufficiently rich mere special case something far general enough point way postfree world distinctly algebraic future programming get way high performance zero boilerplate going need new library likely whole new programming language still lot development possible current programming language lot people working space stay tuned please share thought edit please see repository example implementation scalacats constructed denis mikhaylov
193,Lobsters,scala,Scala programming,"Compose Conference Melbourne, 2016",https://www.youtube.com/playlist?list=PLNoHgLVTxtaqo1c_V2I-8wkDrCGImb9v5,compose conference melbourne,,
194,Lobsters,scala,Scala programming,From first principles: Why I bet on Scala.js,http://www.lihaoyi.com/post/FromfirstprinciplesWhyIbetonScalajs.html,first principle bet scalajs,first principle bet scalajs scalajs largest commercial user scala language google web toolkit pyjs opal ruby coffeescript typescript many alternative involvement scalajs http githubcomscalajsscalajs living coding scalajs crossplatform development scalajs handson scalajs ebook library framework documentation meetups conference scala fiddle thing change sep roll implementation using c f sebastien talk scaladays j scala react angular vue thousand yolo yes stay perfect ide support javascript dom apis webstorm dart typescript purescript brython rapydscript coffeescript webstorm seamless javascript interop javascript dom apis clunky interop clojurescript google web toolkit javascript native interface heavy smooth interop roll chipmunkjs see freely mix scalascala code scalajavascript interop code work intended look perfectly natural chipmunkjs easily make use library javascript ecosystem reactjs angular vue chipmunkjs dealing javascript apis often pleasant scalajs raw javascript perfect ide support perfect scala compatibility compatibility status quo implemented runtime reflection implemented behaves strangely implemented behaves mostly correct behave default implemented behaves perfectly pyjs scalajs compatibility small list thing done mean using scalajs writing scala mean writing library application code usually reason ca nt work scalajs katai struct parsergenerator netlogo compiler mean need know scalajs scalajs scala javascript dom apis reactjs mean book like purescript book dart programming language handson scalajs crossplatform ecosystem urweb entire application functional programming binary serialization snippet constant helper within larger application anemic ecosystem past google web toolkit guava seems gwt support apache common testng joda time google gson personal theory gwt simply nt compatible enough normal java crosscompiling library reality compatibility plenty bootstrapping scalajs ecosystem perfect scala compatibility scalatags dec relatively straightforward porting scalatags demonstrates advantage scalajs scala mustachejava twirl utest scalarx upickle test framework serialization library thing scalaz david barri commit alexander myltsev shapeless commit bootstrapping scalajs ecosystem takeaway bootstrapping google web toolkit opal ruby utest boopickle scalatags scalarx shapeless scalaz scalajsreact scalajsangular reactjs angular sealess javascript interop building crossplatform library easy everyone could library listing wixaccord matter course static optimizability compiling dynamic language profileguided optimization compiletojs compiletojs language realistically ship runtime pypyjs even massive company like google apple microsoft trouble forcing heavyweight languageruntime every browser adobe flash silverlight native client matter time ideal compiletojs language want language compiler know asmuchaspossible code compiling start running dart documention google closure clojurescript difference jvm clojure google web toolkit deferred binding static type scala method resolution order linearization order case study opal opal ruby fiddle fiddle revenge static type scalajs able generate different optimized code depending know type slowdown even though compiling dynamicallytyped javascript staticallytyped scala end massive performance advantage dynamicallytyped ruby opal ruby static type help compiletojs language even though javascript nt statically typed theory could write clever analyzer typeinference rubypython code try figure going annotating type theory could try provide compiletime feature java try wean people dependency runtime reflection case end different rubypythonjava language fact would look lot like scala last release even sep time real optimizer existed scalajs able generate fast efficient code example faster twoyearold opal rubytojs compiler solving real problem problem web development refactoring painful typescript elm scalajs typechecked html scalatags typechecked ajax call autowire typechecked ajax call autowire reimplementing code two different language suck microservice python treat number default javascript treat number nodejs elm purescript difficult declare nontrivial abstraction general able specify abstraction precisely turn dangerous confusing abstraction boring welldefined building block anyone understand scalajs solves real problem programming environment let write entire clientserver web application backend database query ajaxlayer browser code coherent codebase single highlevel language sharing code freely client server everything compilerchecked throughout correctness urweb conclusion bet scalajs back sep thought stood best chance solving good many chronic problem plagued web development dawn internet urweb coffeescript typescript google web toolkit j scala react angular vue thousand none yes real meaningful ordersofmagnitude improvement every metric sun graft static type onto python real problem urweb,first principle bet scalajsthree year ago downloaded nascent scalajs compiler tried use toy project since matured greatly compiler rocksolid huge ecosystem library vibrant community adopted largest commercial user scala language playing key role shaping evolution language measure success one key people evangelized built foundation opensource community ecosystem exists however three year ago late first got involved project thing different compiler unstable buggy slow generated incredibly bloated inefficient javascript ecosystem library tool nobody using adoption enterprise clearly lot thing people see reason use scalajs apply back put effort post explore reason whyabout author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming many compiletojavascript language world virtually every widelyused language compiletojavascript version level quality google web toolkit pyjs opal ruby language designed specifically javascript target coffeescript typescript scalajs one probably one robust productionready compiletojs language last three year played large role investing time effort evangelizing scalajs building ecosystem community today however scalajs always solid productionready platform today first got involved sketchy new project many bug problem using real world use case would unheard spent considerable time giving talk telling people scalajs good never talked core reason started working scalajs longbefore good measure scalajs one many alternative post tell story involvement scalajs although many people scala community think scalajs person actually never contributed seriously core compiler http githubcomscalajsscalajs rather contribution mostly community ecosystem evangelism way living coding scalajs crossplatform development scalajs scalajs two big breakout presentation reached view online first time broader scala community chance see scalajs thing existed use early community came people watched talk got started scalajs via handson scalajs ebook point ecosystem mostly self sustaining even though people continue think scalajs person nt actively using contributing evangelizing scalajs year people taken building library framework writing documentation evangelizing meetups conference even new scala fiddle built replace existing one showing age probably still individual spent time telling people use scalajs never really told people started using scalajs especially early thing rough performance aspect poor many nicety exist today exist thing change first got involved scalajs sep time wanted make physicsplatformer game would eventually become roll prototyped implementation using c f played newfangled window touchscreen computer early screenshot satisfied possible market peoplewithwindowstouchscreencomputers decided try port game web could run platform done enough javascript know nt really enjoy working actively pythoncoffeescript website work knew scala freelance project done college came across sebastien talk scaladays decided sideproject platformgame small enough risk using unknown technology fine september scalajs sep different scalajs exists right aug easiest way compare scalajs aug scalajs sep look number date aug sep version editrefresh time helloworld code size dev dev performance slowdown library dozen j scala none framework react angular vue none user thousand test suite scala compiler suite yolo enterprise use yes core maintainer frontend engineer looking compiletojs language aug backend scala engineer looking way reuse scala skill working web aug version scalajs paint pretty attractive picture contrast sep version scalajs look near nice fact engineer looking making something real sep rather messing around would insane choose scalajs time however thing nt change turn property scalajs even back made attractive platform developer experiment stay every characteristic language platform created equal characteristic easy change others hard change path change straightforward willing put possibly month grunt work still characteristic basically frozen matter many engineer much money throw trying change clear make progress way scalajs changed sep aug fall mostly first two bucket relatively easy test suite well write one leverage existing test others use scalajs team ended reusing partest scala compiler parallel testing suite editrefresh time taking long cache thing nt need recompute every single time instant speedup others difficult straightforward library write need unit test library html generation library serialization library binding javascript library lot work much work ca nt sit crank simple version library week month quite collection user well product good shape problem nobody know go tell people post mailing list forum twitter show conference meetups obviously product trying sell nt ready due issue wo nt work really good shape need user spend time effort get however characteristic stayed scalajs last three year fall last bucket going change time soon none competitor saw scalajs really get right since basically frozen unlikely suddenly able get right near future despite poorly sep version scalajs compare aug thing entirely unchanged throughout time go one turnperfect ide support live ide start working codebase happily sacrifice multiple day trying get ide set comfortable working codebase even involves figuring set sambasshfsshare ubuntu vm onto window host rest teamcompanyworld us vim emacs ssh time invested setting pay really quickly time saved ide find thing first thing noticed first started using scalajs back sep perfect ide support get ide everything expect working language like java scala c immediate errorhighlighting inline documentation autocomplete help explore unfamiliar apis learn use nt get ide support writing scala code interacting scala standard library scala code got ide support interacting javascript dom apis javascript library ide support level dedicated webides like webstorm better scalajs know type various function involved know type return code start become le trivial loop chained attribute access funtion call javascript ides tend fail providing help guess type particular spot nt know eg method show autocomplete box scalajs way typeinference work well known standardized code even knotty scalajs code ide would able provide perfect assistance building productionready ide massive undertaking even providing good plugin existing ide perhaps one personyear work want support vim emacs sublime atom eclipse intellij signing lot work issue every compiletojs language language like dart typescript probably people working fulltime various custom ide integration people working scalajs total corporate backing afford lesswellfinanced fortheweb language purescript various pythontojavascript converter brython rapydscript entirely unable allocate necessary resource provide decent ide support nt stop using hopefully really like vimemacssublime text without codeintelligence lastly dynamic language like javascript popular variant like time coffeescript tremendous amount effort going ides like webstorm due dynamic nature language much help autocomplete errorhighlighting etc limited case scalajs time since one person also unable allocate time resource provide custom ide support project nt need far editor concerned scalajs code scala code like editor provides scala support intellij eclipse vim emacs sublime atom provides justasgood support scalajs outofthebox scalajs intellij plugin scalajs ide almost scalajs tool general standardscala ides tool work fine tooling ide support always major issue creating new language whether compiletojs incredible upfront cost young language without community corporate backing also heavy ongoing maintenance cost time scalajs saw rightoutofthebox born perfect ide tool support multiple existing wellmaintained ides entirely free added maintenance cost great bargain seamless javascript interop section used simple code example show ide help working scalajs code however one thing notice code nt really scalascala code scala code interacting javascript dom apis using normal function attribute furthermore look le exactly equivalent javascript code scala import dom val paragraph documentcreateelement p paragraphinnerhtml strong work strong documentgetelementbyid playground appendchild paragraph javascript var paragraph documentcreateelement p paragraphinnerhtml strong work strong documentgetelementbyid playground appendchild paragraph fact scala vals javascript use var import top two snippet entirely identical scala javascript language superficially similar attribute access calling function define anonymous inline function etc scalajs code normal idiomatic scala code also look almost exactly normal idiomatic javascript code obviously hold get advanced start comparing advanced scala implicits trait typeclasses advanced javascript dealing prototype using library like reactjs however even baselevel similarity already great trying figure interoperate themclunky interop many language fortunate example create element clojurescript compared javascript let paragraph createelement jsdocument p set paragraph innerhtml b bold b var paragraph documentcreateelement p paragraphinnerhtml strong work strong conversion two snippet mechanical something need phd perform nevertheless clear using javascript apis clojurescript looking like clojurescript look almost nothing like javascript represents mapping something everyone wish learn clojurescript internalize google web toolkit javatojavascript interop also clunky different reason traditional way happened javascript native interface system let define way java method call javascript code magic comment within java source file package mypackage public myutilityclass public static int computeloaninterest int amt float interestrate int term public static native void exportstaticmethod wndcomputeloaninterest entry mypackagemyutilityclass computeloaninterest ifi public native void dosomething comcompanyappclientmyclass dosomethingelse ljavalangstring immediate someobjonclick function comcompanyappclientmyclass dosomethingelse ljavalangstring click comment nonjava nonjavascript syntax look like odd hybrid java javascript c bad heavily documented well specified lot note faq use look nevertheless could nt help feel even scalajs interoperability javascript world far smootherheavy smooth interop meaty example look logic roll physicsplatform game animating moving cloud background begin defining scala class take javascript cpvect object coming popular chipmunkjs library class cloud widest cpvect call scala function creates javascript image object using data loaded scala resource bundle object val cloudimg domextensions image scalajsbundleapply spritescloudsvg model cloud pair scala double representing velocity javascript cpvect representing position initialize random double scala mathrandom function class cloud var po cpvect val vel double val cloud seqfill widestx widesty toint new cloud widest mathrandom mathrandom mathrandom update scala forloop translates foreach method call arithmetic update javascript attribute x cpvect object def update cloud cloud cloudposx cloudvel cloudposx cloudposx widestx lastly scala function draw us scala forloop draw everything using javascript object x javascript cpvect object def draw ctx cloud cloud ctxdrawimage cloudimg cloudposx cloudposy see freely mix scalascala code scalajavascript interop code work intended look perfectly natural call function back forth also freely pas around scala object javascript object readwrite attribute call method everything work expected restricted standard library javascript apis example make heavy use class attribute function defined thirdparty chipmunkjs library feel natural use scala scala code see indication javascript objectfunctionattribute scala objectfunctionattribute source code compiler know ide know right thing case wish know simply matter jumping definition thing unsure ctrl b intellij seeing example jumping cpvect brings u definition jsname cpvect class vect var x double var double extends jsobject extends jsobject clear unambiguous marker javascript class represented cpvect javascriptland x attribute mutable javascript attribute seamless interop rare world compiletojs language especially specifically designed coffeescript typescript scalajs javascriptinterop code fit perfectly scalascala code also fit almostperfectly javascript code find stackoverflow mix match scala objectsfunctionsattributes javascript objectsfunctionsattributes awkwardness going one another always better easier interop level interop scalajs result two surprising benefit easily make use library javascript ecosystem using new library done without writing binding want write binding provide typechecking ide autocomplete done incrementally asneeded minute result many people published binding use thus scalajs need replacement widelyused library like jquery reactjs angular vuejs use real thing written javascript want leverage mature chipmunkjs physic engine instead writing go ahead dealing javascript apis often pleasant scalajs raw javascript due seamless interop combined perfect ide support get working javascript type scalajs sure difference child childnodes read type signature htmlcollection v nodelist description right autocomplete menu without google across multiple stackoverflowmdn page figure one want case since started working sep even hello world resulted reallyslow javascript test user library already javascriptinterop experience already bestinclass compiletojs world already clear knockon advantage bestinclass javascript interop would many perfect scala compatibility another thing surprised started working scalajs much scala work say scalajs nt language look like scala scala sorta rather basically fullfledged scala edge case difference scalaonjvm rare inconsequential enough go long time without bumping even noticing difference real scalathe compatibility status quo language many feature used used le try convert language javascript natural every feature supported amount harder support others easy support le important yet feature difficult support important enough put effort make happen since implementing feature requires effort natural author compiletojs language would prioritize feature others dealing compiletojs language degree compatibility feature language roughly broken four category implemented ca nt even try use nt exist eg scalajs runtime reflection never probably never way thing implemented behaves strangely might work would hope eg scalajs accessing outofbounds array possible return undefined rather throwing exception jvm probably expect probably want grand scheme thing annoyance debugging work around life go implemented behaves mostly correct perfect probably want eg scalajs float behave double default behavioral difference result float arithmetic scalajs different result normal scalajvm unlikely ever notice implemented behaves perfectly example would scalajs implementation ints may know javascript scalajs compiles simply integer single number type represents doubleprecision floating point value nevertheless way make behave like integer scalajs jump hoop tick box make sure programmer using scalajs treat integer forget general language kind compiletojs functionality added feature falling bucket falling bucket enough falling bucket make cute demo look fine demo actually try use compiletojs functionality quickly bump thing missing broken example tried use pyjs pythontojavascript compiler crosscompile trivial string mangling routine string long cut middle replace immediately bumped fact pyjs strs behave differently python strs unicode function common almost serious program need deal nonenglish word nt exist nevermind trying advanced python thing like decorator multipleinheritance etc even basic nt work apart language compatibility also standard library pythontojavascript compiler may work pythonthelanguage almost certainly going work c extension module make python standard library rewritten javascript python compiler deal given many c extension module live standard library python ruby many common dynamic language surprise none tojavascript compiler really support tiny fraction themscalajs compatibility scalajs basically every feature scala language bucket small list thing scattered throughout bucket short enough list single page many switch use move bucket exchange performance penalty rather listing work scalajs list nt work vast majority scala work perfectly multiple inheritance extensionmethods typeclasses macro work perfectly furthermore bulk scala standard library written scala java native library dependency wo nt work scalajs ie bucket empirically tend far empirically reimplementing java package typical scala program depends done much much easier reimplementing c module typical python program depends practically mean mean using scalajs writing scala full scala narrow subset language language feature used almost standard library many thirdparty library use scalajs would scalaonthejvm mean writing library application code usually reason ca nt work scalajs unless touch processesfilesystemnetworking us runtime reflection turn library large portion application code often run scalajs automatically without needing lift finger applies toy example large realworld codebases like katai struct parsergenerator netlogo compiler mean need know scalajs scalajs scala write scala write scalajs sure want deal javascript dom apis interoperate reactjs learn interface library library scala writing deal scala run jvm deal jvm library want something odd like crosscompile codebase different scala version versionspecific thirdparty dependency versionspecific compatibility shim scalajs traditional scala mean book like purescript book dart programming language book walk semantics language tutorial like handson scalajs gently introduce using scalajs scalajs book explains object work function work type system work controlflow structure learn old scala book tutorial apart saving time writing book also greatly reduces onboarding cost nontrivial number scalajvm developer already know everything work even start scalajs compatibility normal scalaonthejvm topnotch scalajs always truly scala even started using project sep compatibility normal scala far exceeded language compiletojs version provided fact even need know scalajs write scala code run browser code write deal jvmspecific thing like filesystem theory automatically valid scalajs turn practice indeed case crossplatform ecosystem one big selling point scalajs always ability write crossplatform code run browser server javascript runtime jvm feature normal language added compiletojs functionality lack personally find incredibly surprising already going effort compile language x javascript running x server nt natural next step stop copypasting algorithm businesslogic servercodebase browsercodebase would however whatever reason nt happened vast majority existing compiletojs language past even language specifically meant crosscompilation problem different angle urweb example library crossplatform despite worked year try make crossplatform language foolang run browser state building crossplatform ecosystem library tool hard scalajs crossplatform code run browserjs serverjvm fact life boring easy forget rare broader webdevelopment community whether talking entire application library functional programming binary serialization thing even snippet constant helper within larger application crosscompiled fact crosscompiled thus massive ecosystem library use scalajs many cribbed scalajvm javascript ecosystem worksanemic ecosystem past look compiletojs language like notice one thing common none standard way writing code run original runtime jvm mri cpython cli javascript reason straightforward none compatible enough complete enough really let write full javarubypythonc etc described functionality within nt work work really bucket part particular language work well enough work perfectly order take arbitrary code crosscompile run host runtime javascript take special care write gwt java opal ruby brython python want work browser example take plain old java random java project totally sure wo nt work google web toolkit probably best compatibility listed although guava seems gwt support searching gwt library google return handful purposemade gwt want use common java library like apache common testng joda time google gson luck hard say concretely case especially someone nt deeply involved gwt development past speculate personal theory gwt simply nt compatible enough normal java crosscompiling library reality normal java turn pretty different java learn school make use feature like runtime reflection serialization dependency injection filesystembased external configuration dsl file eg xml config filebased html template classloader manipulation eg loading config file logger detection bytecode manipulation aspectj aop probably learn stuff school probably nt even going use stuff linebyline java code working nontrivial java codebase end using thing daybyday thing gwt nt support could port daybyday work run gwt describes gwt guess reasoning applies opal ruby dozen pythontojs compiler compatible enough take normal real world ruby python run j sure run programming ruby python realworld work requires running realworld code end come compatibility vibrant crossplatform ecosystem library exist compiletojs version language foo must compatible foo written wild crossplatform ecosystem java python ruby module run browser nt materialized desire run code browser plenty code nt work itbootstrapping scalajs ecosystem scalajs born rich ecosystem library perfect scala compatibility meant potential support many library common scala ecosystem scalajs gwt technically support moreorless subset language reflection filebased configdsls etc way code written wild mean scalajs support much scala code tends use reflection filebased configdsls etc gwt support java code tends use first library ported scalajs scalatags html templating library dec scalatags basic stringoperations stitch together html string properly escaping thing reason nt able stitch together html string browser well could stitch together html blob jvm actual change make happen turned relatively straightforward hour effort widelyused nontrivial realworld scala library working scalajs porting scalatags demonstrates advantage scalajs scala plenty html templating library java scala however javabased library eg mustachejava tend html template separate file loaded runtime tend use reflection interpolating variable attribute within template scala templating engine like scalatags others like twirl tend magic compiletime thus even though scalajs gwt restriction around reflection loading file scala library work scalajs equivalent java library nt work gwt month scalatags ported followed utest cross scalajvmjs test framework let simultaneously test code platform crosscompiled version scalarx changepropagation library appeared new upickle cross scalajvmjs serialization library utest upickle written specifically scalajs compatibility traditional testframeworks serialization library use reflection nt work scalajs scalarx existing jvm library happened work basicallyunchanged dependency future atomics ported followed wealth crossplatform test framework serialization library thing built member community started porting existing scala library famed feared scalaz functionalprogramming library ported david barri june line build config code change commit july alexander myltsev similarly ported shapeless commit typelevel programming library dec incomplete listing fledgling ecosystem looked like diagram taken talk gave bootstrapping scalajs ecosystem scala exchange london since ecosystem grown much larger even ability scalajs sustain broad deep ecosystem obvioustakeaways bootstrapping nt quite show rich thriving ecosystem demonstrate one thing writing crossplatform library scalajs run browser javascript server jvm possible really easy easy way unique scala trying port java library google web toolkit ruby library opal ruby simply work easily compiletojs system compatible enough way language written wild listing library every sort utest boopickle designed start crossplatform scalatags scalarx originally written jvm later crosscompiled scalajs author shapeless scalaz also originally written jvm later crosscompiled scalajs author instead random thirdparty needed use scalajsreact scalajsangular binding thirdparty javascript library compiletojs language library supporting javascript side often none run javascript original runtime jvm mri ruby cpython due compatibility reason make difficult task scalajs many sort fact many basically free huge complex scala library like shapeless scalaz ported scalajs line config equally huge battletested javascript library like reactjs angular made available scalajs via sealess javascript interop rather build crossplatform ecosystem scratch scalajs able leverage existing scala javascript ecosystem benefiting paying cost neither although library started working scalajs pretty early library sort started appearing clear different earlier compiletojs language building crossplatform library easy everyone could fact everyone aug obvious scalajs library ecosystem great library listing scalajs website list le crossplatform functional programming library crossplatform serialization library crossplatform testing library addition various uncategorized utility library library wixaccord listed main site dozen scalajs specific library binding existing javascript library new scala library adding scalajs support matter course however even back dec early even rich ecosystem materialized unique potential scalajs allow rich crossplatform ecosystem exist already obviousstatic optimizability one wellknown fact staticallytyped language far easier traditional compiler using type knowledge variable within program contain function define thus better able generate code respect behavior javascript however traditional compilation target many modern runtimes use justintime jit compiler rather traditional aheadoftime compiler nonetheless turn unintuitively traditional static aheadoftime optimizeability incredibly valuable language trying compiletojs despite javascript statically typed scalajs benefit greatly resultcompiling dynamic language try compile dynamicallytyped language traditional aheadoftime compiler end generated code ton check ton branch ton hashtablelookups make sure behavior generated code match exactly behavior interpreted version even user funky dynamic thing like monkeypatching class runtime language semantics defined foobar call whatever method bar defined type foo object much except look bar every time case someone pass differentlytyped foo object since last saw whether interpreter looking generate native code look still slow trick try speed thing overall uphill battle simply nt know foo runtime trying generate code compiletime simply nt information necessary make fast turn many modern language longer using traditional compiler many including java openjdkhotspot javascript firefoxionmonkey c net clr using justintime jit compiler basically defer much meat compilation runtime theory information real usage pattern make better profileguided optimization really important dynamic language like javascript since often nt know eg inline method call see method actually called really know runtime however turn even traditional static language like java c enough dynamism runtimeclassloading virtual method dispatch still see large benefit jit compilation runtime optimization language tend used server case javascript shipped heavyweight installation need installed computer thus jit compiler complex huge piece software size nt matter used however niche scalajs targeting compiletojs world compiletojs language different compiletojs language realistically ship runtime heavyweight runtime ship hurt downloadpageload time first time user downloads even get cached often get cleared need get downloaded theory practice project like pypyjs impressive feat engineering right ship heavyweight runtime end taking second download initialize megabyte code reasonable internet connection probably longer user mobile patchy coffeeshop wifi enough problem although huge python community would love reuse existing python knowledge run python browser nobody using pypyjs practical even massive company like google apple microsoft trouble forcing heavyweight languageruntime every browser adobe flash worked way microsoft silverlight google native client however effort clearly decline example world mobileweb smartphones technology long dead already desktopweb matter time hence want compiletojs language result good user experience choice compiler eliminate much unnecessary code possible aheadoftime get sent user air jit compiler great server javascript wo nt requirement really call traditional aheadoftime optimizing compiler language work well compiler ideal compiletojs language want language compiler know asmuchaspossible code compiling start running turn idea particularly groundbreaking revolutionary many existing compiletojs language community already know dart community documention tell avoid runtime reflection avoid calling functionapply avoid overriding nosuchmethod dynamic feature make hard optimizer treeshaker call eliminate unused code result heavy executables google closure world confused clojure something else entirely write javascript certain restricted subset javascript documented order optimizer know code optimized going outside subset result optimizer breaking code clojurescript community difference jvm clojure include thing like reified var reduces dynamism possible code compared clojure jvm google web toolkit javatojs compiler support runtime reflection instead providing deferred binding mechanism provides subset functionality still preserving static analyzeability optimizeability codebase unintuitively codesize benefit compiletojs source language similar javascript equally important factor want language static thus optimizeable wellestablished fact seen existing compiletojs language static betterstatic type scala first glance scala look similar common dynamic language ruby python particular rubypython support declaring local variable without type annotation scala rubypython support operator overloading scala rubypython support monkey patching class add additional method scala support extending class via implicit extension method rubypython support multiple inheritance class specified method resolution order case diamond inheritance scala support multiple inheritance trait specified linearization order rubypython support runtime reflection eg inspect class hierarchy pickling object scala support compiletime reflection eg inspect class hirarchy generating pickler macro superficially scala code often look like python code added curly brace ruby code end converted curly brace however one major difference case rubypython magic happens runtime scala magic implicits macro trait etc happens compile time ahead time code run importantly relevant phase compilation happened magic worry trying compile language like python javascript would account fact runtime someone somewhere may monkeypatch class method thought calling changed underneath even though fieldmethod appear used anywhere code somewhere json serializer using via getattr via methodmissing b see somewhere code may actually two number someone may pas two object add overridden two object kind consideration make impossible optimize thing inline method sure implementation optimize integer arithmetic operation sure even dealing integer first place case study opal take example let see opal ruby compiler compiles small snippet code compare scalajs compiler tiny function add two number ruby def foo b b end write javascript may write something like function foo b return b however code opal generates instead opal generates following generated opal function rbplus lh rh return typeof lh number typeof rh number lh rh lh rh opaladdstubs return opaldefn opalobject foo function ːfoo b var self return rbplus b arity nil foo obviously lot code necessary opal nt know compile time whether b number x point something else thus rather generating javascript code b need generate call function runtime performs check whether b number falling back lh rh function call hand scalajs write def foo int b int b get compiled approximate code fooiii function b return b scalajs know b ints anything else thus able generate b extra make sure overflow ints double without additional check guard see go fiddle hit ctrl j show generated javascript cmd f search foo find function within mass generated standard library code scala thus scalajs allows operator overloading ruby happens pas something int foo say point object x attribute first need define thing case class point x int int def point point x otherx othery need change function signature take point rather ints def foo point b point b compiling modified function result following generated javascript foolpointlpointo function b return pluslpointlpoint b fiddle hit ctrl j show code cmd f foo find code function among standard library javascript check ifstatements one thing ints another thing point scalajs know taking ints generates simple b javascript code taking something complex generates pluslpointlpoint b code similar opal function rbplus lh rh return typeof lh number typeof rh number lh rh lh rh function one key difference opal always check whether two thing added number choose scalajs knowing thing write code always perform correct operation without checksrevenge static type scalajs able generate different optimized code depending know type x obscure property scala language basic one scala know x whether ints point something else generate correct code accordingly dynamic language nt know x thus optimization available scala available dynamic language like ruby python even staticlanguageswithdynamicparts javawithruntimereflection matter turn opal usage rbplus associated overhead result slowdown performing arithmetic operation opal v raw javascript huge loss comparison arithmetic scalajs compiled code would write hand raw javascript performance identical normal code nt show drastic difference integerarithmetic dynamic check still end significant slowdown even though compiling dynamicallytyped javascript staticallytyped scala still end massive performance advantage dynamicallytyped ruby opal ruby community want code slower javascript plenty issue raised tracker elsewhere complaining arithmetic performance choice given constraint dynamic language advanced feature simply best solution possible one many place scala compiletime magic turn major advantage language runtime magic language feature operator overloading turn faster implemented compiletime implemented runtime apart obvious slowdown scalajs also codesize advantage ab le code rbplus b one many many optimization staticallytyped language let compiler available dynamic language optimization inlining constantfolding escapeanalysis allocationsinking renaming classesfunctionsvariables shorter name deadcoderemoval similarly depend static analyzeability code written overall sort static optimization main driver reduced helloworld code size sep aug speed penalty period time revelation static type help compiletojs language even though javascript nt statically typed one big reason optimistic scalajs compared alternative like ruby python scala really provide potential optimizer lot information use speedup compressdown code get sent overthewire someone browser lastly staticness feature difficult graft existing language try perform advanced codeanalysis want pythonruby code bump crazydynamic part language really much analyze try tell people use crazydynamic part language eg avoiding runtimereflection java fundamentally python community full people using getattr ruby community full people using monkeypatching java community full people using javareflect good luck getting everyone change theory could write clever analyzer typeinference rubypython code try figure going practice would need start annotating type help along restricting dynamic thing properly specifying typesystem behaves predictably theory could try provide compiletime feature java try wean people dependency runtime reflection instead using reflection serialization provide macro people use instead using external file html template dsl make language bit flexible dsl could embedded within java code compiled together case end different rubypythonjava language fact would look lot like scala thus even start felt scalajs advantage scalajvm platform much le dynamic pythonruby scala community much le fond using dynamic runtimereflection java community even though technically still available thought time came really crank dynamic feature crank optimization effort scalajs would unique spot compiletojs language ever incredible optimizer core scalajs team put together last three year shown true every release generated javascript get bit smaller faster eg last release speeding operation longs making probably fastest long number language running browser would possible scala static optimizability even sep time real optimizer existed scalajs already able generate fast efficient code example faster twoyearold opal rubytojs compiler bad prerelease version project made one person month solving real problem section le individual feature make scalajs attractive feature make scalajs attractive replacement javascript know javascript problem big complex good part make small portion overall language even good part wise programmer finding using le le language lot welldefined terribly unintuitive behavior map parseint nan bashing javascript easy bashing javascript fun bashing javascript cathartic however done bashing javascript come next picking compiletojs language ideally want pick language apart javascript really solves deep problem face webdevelopment field problem problem web development everyone list gripe web development different fine spent year working random website ontheside almost two year working large pythoncoffee web codebase professionally mine following section discus exactly problem entail well scalajs provides real solution help solve themrefactoring painful refactoring large sprawling javascript codebase incredibly difficult main failure mode deleted something nt actually unused oops something broken hope test coverage catch renamed something renamed use site missed one important feature broken nt delete something actually unused burned scared would happen dead code lying around codebase confuse newcomer veteran alike first two case something break immediately third case save technical debt increase likelihood something breaking later case really great silly mistake number time seen silly mistake cause emergency work ridiculous ca nt really blame engineer best optimizing blend risk progress think bring value company case would helped something anything perform basic check code validate something sane function calling exists name expect meant take argument giving variable referring really exists possible implement basic version javascript done becomes difficulttoimpossible check property method object would require object type javascript nt solve problem really want typechecker turn almost compiletojs language typechecker solves problem nt matter writing typescript elm scalajs feedback always refactoring easy compared raw javascript scalajs however go even typed compiletojs language providing typechecked html scalatags library let generate html scalajs running browser scalajvm running server code run platform eg scalatags template div floatleft p cow p hear moo generates html div style float left p cow p p hear moo p div templating library isomorphic universal kind cool described however also cool typo html get caught compile time div floatelft p cow p hear moo value elft member object float floatelft compilation failed dvi floatleft p cow p hear moo found value dvi dvi compilation failed still make highlevel mistake putting wrong text template using wrong cs class html tag trivial mistake like guaranteed caught compiler free mind spend time thinking important highlevel thing note scalatags library nt baked scalajs scalatags simply library written scala think better way html templating better syntax use faster implementation way catch bug compiletime go ahead implement typechecked ajax call one common problem everyone face ajax routescalls mess route defined config file server call done via string url javascript jajax apilist data inputboxvalue oncomplete function re however nt actually know apilist valid route someone rename apilistall passing single string data right thing someone make take array string since last saw code nt know rather nt know push code production customer start complaining button broke scalajs library like autowire allow really easily define typechecked ajax call autowire define ajax controller method scalajvmserver code call directly scalajsbrowser code ajax api list inputboxvalue call serializationdeserialization argument return type handled mess call way nonexistent controller method wrong number argument wrong argument type get compilation error everyone experience differ experience working ajax call large web application one fragile errorprone part renaming deleting refactoring ajax route terrifying experience avoid due nontrivial likelihood breakage scalajs autowire library suddenly working ajax route controller safe simple method call codebase thanks tiny thirdparty scala library think better way autowire another library free implement reimplementing code two different language suck sometimes need functionality browser server may want inputvalidation logic performed clientside rechecked serverside perhaps want prerender html page server ability rerender browser without making unnecessary round trip maybe want share library common helper function manipulating whatever domainspecific data dealing example let say find javascript browser code need move python server function charwidth return dummy function truncateatwidth string desiredwidth var width width var stringlength width width charwidth string var start var end stringlength start end var mid parseint mathfloor start end var actualwidth width mid actualwidth desiredwidth end mid else actualwidth desiredwidth start mid else return stringsubstring parseint mid overshot probably close enough start mid return stringsubstring parseint start else return stringsubstring parseint mid purpose code try cut string certain desiredwidth taking account different character different width screen represented charwidth dummy function perhaps previously using truncate text javascript ui want truncate text server embedding email send people server written python could run truncateatwidth separate nodejs microservice attendant deployment monitoring exception reporting etc infrastructure may decide microservices nt good fit try reimplementing code python import math def charwidth return dummy def truncateatwidth string desiredwidth width width range len string width width charwidth string start end len string start end mid int mathfloor start end actualwidth width mid actualwidth desiredwidth end mid elif actualwidth desiredwidth start mid else return string int mid overshot probably close enough start mid return string int start else return string int mid seems easy enough run manual test work perhaps write unit test put ci work push find input python truncateatwidth function infinitelooping input taken production cluster feeling adventurous take two snippet code try figure behaving differently done ca nt bothered skip past spoiler debugging find problem python treat number integer default javascript treat number doubleprecision floating point fix course something like def truncateatwidth string desiredwidth range len string width width charwidth string start end len string start end float len string start end mid int mathfloor start end mid float int mathfloor start end actualwidth width mid actualwidth desiredwidth end mid look like solved problem hooray done reimplementing code different language debugging code second time different language get privilege maintaining exact code two language keeping sync bugfixes improvement happen oh joy tiny function dealing much bit math bit string stuff already bumping subtle difference two language larger piece code need reimplement would ordersofmagnitude bug fix subtleincompatibilities discover often nt happen javascript code written frontend people totally separate python code written backend people never shall meet implementing feature one platform alreadyimplemented way life idea could somehow reuse code written one platform never even cross anyone mind wasteful implementation reimplementation part backgroundnoise webdevelopment chronic pain part life ever since dawn internet particular pain point solved running nodejs server actually nt mind working javascript fullstack though brings frontend javascript problem backend well notably using one new dedicated compiletojs language like elm purescript similar would solve unless willing run language nodejs server possible nt know many people actually great compatibility original scala language ability easily write crossplatform code run client server scalajs solves chronic pain point serverside language clientside language write code run reuse whatever helper functionality need none code written javascript pure blissit difficult declare nontrivial abstraction dealing nontrivial codebase often want abstract away common pattern easily reuse could simple procedure performs action function computing result class instantiate thing never abstract much abstraction pay usage preferably abstraction used time least worthwhile defining nevertheless size codebase grows find using abstraction intricate detailed pattern end used enough worth abstracting following example abstraction helped create frontend codebase maintain represents abstract model stringtokenizing text input allows user configure render token render input well generate potential autocompletes wire together var tokenizerinput reactcreateclass proptypes placeholder reactproptypesstring tokenlist reactproptypesarray rendertoken reactproptypesfunc onadd reactproptypesfunc onremove reactproptypesfunc onchange reactproptypesfunc logchange reactproptypesfunc essentially skeleton stringtokenizing autocompleting selectinputbox parametrized kind thing selecting allows plug various callback happen user performs different interaction turn various kind function argument pas need deal kind thing need fit together specific way tokenlist array thing rendertoken take single thing return kind ui element onadd take array thing return nothing side effect etc etc thing vary instance tokenizerinput relationship parameter must follow exact model code aswritten worked obviously shown one two usesites working great nevertheless still pretty mysterious u exactly requirement class typical dynamiclanguage fashion simply beat callsites debuggingconsolelog stick could click around without crashing may fine probably would nt future maintenance took multiple people including original author quite lot time figure exactly relationship various parameter get writing way hopefully future user class could understand ended something like represents abstract model stringtokenizing text input allows user configure render token render input well generate potential autocompletes wire together tokenizer create operates single kind data refer data rendertoken renderoption function labeled type must operate kind data instance tokenizer populatedtokendata take array data var tokenizerinput reactcreateclass proptypes placeholder reactproptypesstring string tokenlist reactproptypesarray data rendertoken reactproptypesfunc data reactelement onadd reactproptypesfunc data void onremove reactproptypesfunc data void onchange reactproptypesfunc data string void logchange reactproptypesfunc data boolean void turn act specifying damn thing come typeannotation syntax furthermore syntax others reading code found useful figuring even spent time working untyped pythoncoffeescript basically map precisely scala type system represents abstract model stringtokenizing text input allows user configure render token render input well generate potential autocompletes wire together class tokenizerinput data placeholder string tokenlist seq data rendertoken data reactelement onadd seq data unit onremove data unit onchange seq data string unit logchange data boolean unit turn semirigorous system typecomments came javascript exactly typesystem generic would support language generic type formulation would happened default rather needing hour intricate codeanalysis order achieve point view scala even java programmer type signature complex generic class argument based generic type hand language without type signature interplay various argument callback callback argument fit together entirely nonobvious reading implementation code common way understand code dynamic language tell trying derive relationship implementation code usesites argument difficult case ended successfully documenting fauxtypesignatures comment case wo nt lucky general able specify abstraction precisely turn dangerous confusing abstraction boring welldefined building block anyone understand insidious difficulty pinning particular abstraction though followon effect abstraction difficult describe impossible check consistency people tend favor copypaste code safer trying work poorlydescribed potentiallyunsafe abstraction like hesistance refactoring described totally reasonable behavior long run result codebase sprawling much difficult keep consistent particular painpoint nt matter whether typesystem talking scala java c typescript something else would help u define interface abstraction precise way notably painpoint pythontojavascript rubytojavascript compiler would help notatall even assuming perfect performant rubytojavascript compiler possible sprawling coffeescript codebase converted sprawling ruby codebase wo nt make defining rigorous abstraction le difficult actually end rewriting class scalajs time immature probably worth additional buildcomplexity one class nevertheless clear problem scalajs would solvedscalajs solves real problem hopefully section convinced problem see web development real many chronic pain annoyance web developer lived long part life longer register thing painful think solved right tool solve something like coffeescript perfectly respectable compiletojs language allows shared clientserver code nodejs solve problem web development worse brings clientside problem serverside codebase way scalajs provides something many people long dreamed programming environment let write entire clientserver web application backend database query ajaxlayer browser code coherent codebase single highlevel language sharing code freely client server everything compilerchecked throughout correctness project like urweb dream face seemingly insurmountable problem ecosystem tooling adoption scalajs problem solved start even scalajs potential obvious many people tried thing time might actually work conclusion bet scalajs back sep thought stood best chance solving good many chronic problem plagued web development dawn internet nt purest attempt honor may go project like urweb pragmatic perhaps coffeescript typescript mature probably google web toolkit judged well positioned succeed purer attempt failed succeed helping pragmatic project succeeded helped le make rapid progress mature project stagnated recap table summarizes much scalajs project improved last three year since first got involved date aug sep version editrefresh time helloworld code size performance slowdown library dozen j scala none framework react angular vue none user thousand test suite scala compiler suite none yolo enterprise use yes core maintainer real meaningful ordersofmagnitude improvement every metric sun faster smaller code quicker development cycle library user developer considering using scalajs serious statistic matter matter lot aug scalajs far better tool sep scalajs every way possible however every developer value tool based stability functionality provide right maybe hobbyist researcher perhaps willing play longgame investment potential future capability case may willing tolerate currentweakness hope future gain perhaps due underlying characteristic unique tool position hobbyist first looked scalajs list unique characteristic saw already discussed characteristic unique scalajs among compiletojs language even among potential language could possible compiletojs post discussed think characteristic important compiletojs language none existing compiletojs language aware characteristic think likely pick time soon ca nt graft static type onto python ruby make suitable compiletojs language even would nt solve many real problem web development ca nt make java ecosystem developer use le runtime reflection ruby ecosystem developer use le monkeypatching ca nt create multiple ides tooling ecosystem custom dialect haskellonjavascript urweb custom language certainly doable definitely fall difficult category work item matter many engineer much money throw trying change clear make progress even scalajs still version code bloated compiler slow ecosystem nonexistent characteristic scalajs already clear trying use furthermore many topline metric improved time effort characteristic deep fundamental language something change overnight even month year effort advantage saw scalajs compiletojs language thought good shot solving long last many chronic pain plagued web development since dawn time many people dream strived goal past time different last three year evolution shown perceivedadvantages real scalajs would gotten today without factor mean revolutionized industry steady growth left optimistic right path move web development field forward slowly one codebase time used scalajs good bad experience compiletojs language framework trying reinvent web development let u know comment author haoyi software engineer author many opensource scala tool ammonite repl mill build tool enjoyed content blog may also enjoy author book handson scala programming
195,Lobsters,scala,Scala programming,Comparing Scala to F#,http://mikhail.io/2016/08/comparing-scala-to-fsharp/,comparing scala f,functional programming scala specialization implicit parameter underscore lambda tailrecursion mark call name lack type inference functional v objectoriented style usage operator partial application singledirection dependency conclusion reddit lobster,f scala quite similar language foot view functionalfirst language developed virtual machine imperative language dominate c net java jvm still lingua franca alternative getting stronger background net ecosystem f first two started learning time scala seems traction largely due successful product framework like spark akka play decided broaden skill set pick scala knowledge started functional programming scala specialization coursera following coursera note language feature scala find interesting vice versa missing compared f particular order want share note scala v f blog post post updated based comment mark lewis giacomo citi implicit parameter parameter function marked implicit def work implicit int print mean call function without specifying value parameter compiler try figure value according extensive set rule eg implicit val v somewhere work print aware similar feature language know pretty sure understand well enough yet time think implicits characteristic scala powerful tool used many valid scenario abused shoot one foot underscore lambda underscore used represent parameter lambda expression without explicitly naming employeessortby dateofbirth think brilliant short readable tuple value represented sort array tuples like profitbyyearsortby look bit hairy probably used meaning obvious example sure sort year f underscore used different sense something ignore make sense would love shorter way writing lambda empoyees listsort fun e edateofbirth hint tailrecursion mark recursive function scala marked tailrec annotation would result compilation error function tailrecursive guarantee get nasty stack overflow exception tailrec def boom x int int x else boom code compile recursion optimized compiler feature sound reasonable although must admit never needed f code yet call name call function f parameter value evaluated function body style function substitution model known call value default scala alternative defer evaluation parameter marking symbol def callbyname x int println x x style known call name evaluation defered parameter actually used parameter never used value never evaluated code val option int val b getorelse set b error thrown even though dividing zero function parameter parameter getorelse passed name f alternative defaultarg work way following code blow let let b defaultarg b boom get deferred evaluation passing function let defaultargfunc f unit match v v none f let defaultargfunc fun essentially happens scala scala syntax arguably cleaner lack type inference slowly moving towards language design flavour start type inference scala type inference seems quite limited yes explicitly define type local value time function return type def max int b int b else b specify type input parameter quite bummer people used short typeless code f haskell ocaml others matter type inference f play another significant role automatic type generalization f compiler would make type generic possible based implementation let max b b else b type function people make generic getgo compiler help case functional v objectoriented style f scala running top managed objectoriented virtual machine time language enable developer write functional code functional programming mean operating immutable data structure pure free side effect operation without questioning find pure functional scala code written much objectoriented style compared f class object ubiquitous scala example given martin odersky course f example refrain class unless needed f official guidance never expose nonabstract class f api scala really heavy inheritance even introduced quasimultiple inheritance trait stream inherits list nothing subtype every type used covariance trick operation usually defined class method instead separate function example following scala code word filter c cisletter would filter string letter isletter defined method char think essential type usage operator look like scala culture incline towards usage different operator arithmetic operation also different class standard library domainspecific code basic one nice eg list concatenation others look awkward eg stream concatenation akka stream sweetness bcast merge bcast merge go quite extreme similar scalaz library default would use operator unless sure every reader able instantly understand mean partial application huge difference f function curried default scala function thus f partial application work time let add b b let add let sum scala function def add int b int b curried underscore come rescue val int int add val sum note miss type inference parameter order important f short syntax partially apply parameter left right scala put position give flexibility singledirection dependency f compiler allow circular dependency use function defined expert f book say managing dependency circularity one difficult fundamental problem good software design file f project presented f compiler compilation order construct earlier file refer declaration later file mechanism enforce layered design software carefully organized layer one layer refer layer cyclic way help write code reusable organized component possible independent combined tangle spaghetti code think huge f force structure code way avoid mutual dependency different function type module reduces complexity coupling make developer avoid design pitfall nothing like scala conclusion course cover distinction instance active pattern type provider computation expression f type class higher kinded type macro scala obviously scala f capable language still picking basic similar many aspect made several different choice along language design tradeoff p overheard twitter f bad language attached bad opposite scala actually update thanks everyone great comment please check reddit lobster see
196,Lobsters,scala,Scala programming,Practical Limitations of Scala,https://www.youtube.com/watch?v=hzf3hTUKk8U,practical limitation scala,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature functional programming terrible youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature functional programming terrible youtube
197,Lobsters,scala,Scala programming,"Martin Odersky, Spark -- the Ultimate Scala Collections",https://www.youtube.com/watch?v=NW5h8d_ZyOs,martin odersky spark ultimate scala collection,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature bdsbtb martin odersky spark ultimate scala collection youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature bdsbtb martin odersky spark ultimate scala collection youtube
198,Lobsters,scala,Scala programming,Dotty - A next generation compiler for Scala,http://dotty.epfl.ch/,dotty next generation compiler scala,try dotty brew latest release scastie create dotty project sbt dotty example project,try dotty mac user install dotty brew brew install lampepflbrewdotty linux window user download latest release optionally add path folder bin system environment variable path compile scala source code dotc helloscala start repl run dotr try dotty browser scastie create dotty project fastest way create new project dotty using sbt create dotty project sbt new dotty project cross compiles scala sbt new documentation see dotty example project
199,Lobsters,scala,Scala programming,"Understand and implement laziness with examples in Scala, JavaScript, Swift and Racket",http://matt.might.net/articles/implementing-laziness/,understand implement laziness example scala javascript swift racket,laziness language laziness byname versus byneed laziness swift implementing byneed laziness implementing laziness etaexpansion combinator work strict language like javascript lazy parameter lazy parameter swift lazy parameter javasscript extending language byname parameter jspahrsummers implementing laziness racket implementing byneed racket related page real world haskell excellent guide okasaki classic exercise,laziness language language strict language compute value expression immediately language like haskell lazy every expression evaluation wait first use language like scala strict default lazy explicitly specified given variable parameter scala even never seen language make easy demonstrate difference following scala program val x print foo print bar print x print foo bar following scala program lazy val x print foo print bar print x print bar foo since delay computation x actually needed laziness laziness made laziness made lambda anonymous function closed lexical scope let translate scala example earlier javascript language lack laziness var x consolelog foo consolelog bar consolelog x expected print foo bar wanted make x lazy wrapping definition x anonymous function use x invocation function var x function return consolelog foo consolelog bar consolelog x print bar foo demonstrate subtlety let change scala example earlier lazy val x print foo print bar print x print x print bar foo print foo twice lazy cached result course var x function return consolelog foo consolelog bar consolelog x consolelog x print foo twice call x byname versus byneed two reasonable interpretation laziness byname interpretation computation value delayed necessary computation repeated time used byneed interpretation computation value delayed necessary result cached subsequent us scala lazy keyword provides byneed laziness simply wrapping value anonymous function provides byname laziness laziness swift swift provides lazy attribute variable work field class structs swift block notation closure make little le verbose fake laziness swift prior example swift would let x int print foo return print bar print x print x javascript print foo twice swift also provides autoclosure attribute type provide byname variable autoclosure useful byname parameter covered momentarily use autoclosure byname variable would lift side effect leading following func footen int print foo return let x autoclosure int footen print bar print x print x would end printing foo twice clearly explicit closure form convenient implementing byneed laziness get byneed laziness javascript create helper function memothunk cache value noargument anonymous procedure receives function memothunk f var cached false var result return function cached return result cached true result f return result change prior example var x memothunk function return consolelog foo consolelog bar consolelog x consolelog x print bar foo swift implement memothunk well func memothunk f var cache nil return let x cache return x else cache f return cache run analogous code let x int memothunk print foo return print bar print x print x print bar foo implementing laziness etaexpansion implementing laziness language like javascript requires modifying point definition point use exception case computation suspended already produce procedure case achieve laziness etaexpansion point definition etaexpansion functionproducing expression wrapped anonymous function pass argument directly expression consider expression exp evaluates function take one argument javascript function x return exp x behaves identically exp absence side effect exp assuming exp terminates etaexpansion play key role derivation combinator work strict language like javascript lazy parameter language allow definition explictly lazy parameter function lazy parameter evaluated used language allow explicitly marked lazy parameter lazy parameter byname contrast lazy language like haskell every parameter implicitly byneed consider code scala def printtwice x int print twice print x print x printtwice print foo print foo twice however mark parameter x byname def printtwice x int print twice print x print x printtwice print foo print twice foo foo clear supply code block pas anything type int printtwice print twice lazy parameter swift apple language swift byname parameter marked autoclosure func printtwice x autoclosure int print twice print x print x printtwice implicitly wrap closure around argument printing twice course evaluation argument side effect side effect repeated following code func ten int print ten return printtwice ten print twice ten ten language design standpoint seems swift designer wanted allow lazy parameter still force programmer consider fact argument wrapped procedure carry cost lazy parameter javasscript unfortunately lazy parameter require care javascript way modify funtion whenever called argument automatically wrapped closure rather user must remember wrap argument closure every point use extending language byname parameter byname parameter convenient way extending language new construct example suppose scala construct could add one laziness currying def mywhile cond boolean body unit cond body mywhile cond body use var x mywhile x print x x x print swift might add togglable assert construct var assertsenabled bool true func assert cond autoclosure bool assertsenabled cond println assert failed exit exitfailure way fine use assert expensivetest know cost test paid assertion enabled first swift support extending language seem fluid scala closest could get custom form func mywhile cond autoclosure bool body cond body mywhile cond body body var int mywhile body print twitter jspahrsummers pointed somewhat confusingly uncurrying actually make work swift func mywhile cond autoclosure bool body cond body mywhile cond body var int mywhile print implementing laziness racket racket implicit support manual byneed laziness form promise racket wrap delay around expression converted promise applying force promise carry computation computation already completed return cached value example earlier look like racket define x delay begin display foo display bar display force x display force x print bar foo would nice course could write definelazy x begin display foo display bar display x display x get effect racket course need create definelazy understand possible first need know even variable racket macroexpanded instance define macro called three expand following code definesyntax three stx display three print mind take failed shot macrogenerating macro definesyntax definelazy stx syntaxcase stx var value withsyntax var generatetemporaries var begin definesyntax var force var define var delay value definelazy macro defines macro orginal variable var assigns special temporary variable var delay original expression value macro definition force temporary variable var code work fine prior example subtle mistake code show try something else suppose try lazily define procedure definelazy f λ x x display f expect print initial horror printed procedure examining original code reveals use f function position becomes classic macro expansion instead expanding f macro expands f oops fix need syntaxcase discriminate two case definesyntax definelazy stx syntaxcase stx var value withsyntax var generatetemporaries var begin definesyntax var stx syntaxcase stx f arg force f arg force var define var delay value definition code definelazy f λ x x display f behaves exactly expected printing implementing byneed racket using technique straightforward create definebyneed form racket turn parameter function definition byneed parameter case code definebyneed h b c b h error fail print error fail never get evaluated make definebyneed work redefinition function macroexpand parameter definition definelazy definesyntax definebyneed stx syntaxcase stx f v body withsyntax f generatetemporaries f begin definesyntax f syntaxrules arg f delay arg define f v letsyntax v lambda stx syntaxcase stx arg force v arg force v body related page functional programming nonfunctional programmer recommendation learning purely lazy language like haskell real world haskell bryan osullivan john goerzen stewart learning scala martin odersky written excellent guide coauthor lex spoon bill venners purely functional data structure okasaki classic blog exercise implement definebyname racket implement lambdabyneed racket get byname ycombinator work factorial definebysomething f f f define fact lambdasomething f lambdasomething n n n f n display fact print hint think expression need delayed
200,Lobsters,scala,Scala programming,Parallel Programming,https://www.coursera.org/learn/parprog1/,parallel programming,,every smartphone computer boasting multiple processor use functional idea facilitate parallel programming becoming increasingly widespread course learn fundamental parallel programming task parallelism data parallelism particular see many familiar idea functional programming map perfectly data parallel paradigm start nut bolt effectively parallelize familiar collection operation build parallel collection productionready data parallel collection library available scala standard library throughout apply concept several handson example analyze realworld data popular algorithm like kmeans clusteringlearning outcome end course able reason task data parallel program express common algorithm functional style solve parallel competently microbenchmark parallel code write program effectively use parallel collection achieve performance recommended background least one year programming experience proficiency java c ideal experience language cc python javascript ruby also sufficient familiarity using command line course intended taken functional program design scala http
201,Lobsters,scala,Scala programming,"Freek, a freaky simple Free to combine your DSL seamlessly",https://github.com/ProjectSeptemberInc/freek,freek freaky simple free combine dsl seamlessly,freek freaky simple free combine dsl seamlessly http perevillegacomfreekandfreemonads http bintraycomprojectseptemberinc freek freaky simple free combine dsl seamlessly projectseptember debasish gosh functional reactive domain modeling projectseptember emm scala eff freer monad extensible effect idris eff port pr http githubcomprojectseptemberincfreekblobmastersrctestscalaappspecscala compiletime dependency injection,freek freaky simple free combine dsl seamlessly pere villega wrote really cool introduction freek free could even move finger really good one even relying previous version api idea still http perevillegacomfreekandfreemonads thanks lot pere current version version published bintray http bintraycomprojectseptemberinc first scala support crosscompiling depends cat added freekitfreekito helper reduce freek boilerplate basic case added transpile flatten free program combining free program added operator combine group interpreter renamed fx dsl nildsl nildsl represent better fact freek general effect manipulating dsl renamed helped program dslmake renamed coproductk copk renamed onionp onion introduced removed unneeded specific oniont implicit converter build introduced new model coproductk improve compiletime globally n n introduced program f fx help scalac infer output coproductk using new optimized model result type program based freek prg prgcop prgcop based new dslmake prg optimized implicit order introduced coproductkappendk make robust combine program containing subprogram beta reintroducing operator combine program program wip evaluating freeko prg equivalent freek prg oniont renamed dropright peelright prepend wrap replaced type prg log kv file nildsl cop type prg log kv file nildsl simplify whole api introduced oniont manipulation dropright prepend replaces freenion oniont generalized onion embedding structure type tc free provides new interpret function solving orderredundancy issue dsl v interpreter renames interpreter combining operator combining interpreter product sum freek freaky simple free combine dsl seamlessly freek helper trick make straightforward manipulate free dsl without hiding free project developed projectseptember kindly accepted opensource license make open free possible contribution comment welcome freek outofthebox use project buildsbt scalaversion resolvers resolverbintrayrepo projectseptemberinc maven scalacoptions seq ypartialunification running librarydependencies seq comprojectseptember freek orgspiremath kindprojector commilessabin pluginssbt addsbtplugin melessis bintraysbt kindprojector plugin nt required make higherkinded type nicer ca nt anything else advising use required weird compiling error scalac powerful enough unify type correct would expect freek scala better merged thanks mile sabin fantastic work nt worry using plugin seriously job compiletime helping scalac infer type right wo nt impact runtime worry case combine dsl operator imagine following dsl sealed trait log case class logmsg level loglevel msg string extends log unit object log def debug msg string logmsg debuglevel msg def info msg string logmsg infolevel msg sealed trait kv object kv final case class get key string extends kv string final case class put key string value string extends kv unit sealed trait fileio object fileio final case class getfile name string extends fileio file final case class deletefile name string extends fileio unit want build program manipulates dsl together program use log kv file sumcoproduct dsl represent dsl summing freek provides following notation type prg log kv file nildsl val prg dslmake prg please note nildsl required end coproduct represents nonexisting dsl complain ugly symbol scala elegant way combine type word ca nt used case val prg dslmake prg way instantiate value represents prg type might seem artificial actually completely required convince scalac infer right coproduct combining dsl inferred coproduct represented prgcop used tutorial freek prg lift operation forcomprehension want write program based dsl using free monad efficient way describe business logic without supposing executed going use dsl lifted free monad free dsl using classic monadic flow ie forcomprehension forcomprehension compile successfully every line type thus need lift free dsl combined free type free prgcop prgcop sum dsl used program summary need conversion dsl free dsl free prgcop done trivial way using freek prg forcomprehension type prg log kv file nildsl val prg dslmake prg type shown doc omit scala infer thing def program id string free prgcop file logdebug searching value id id freek prg name kvsget id freek prg file fileget name freek prg logdebug found file file freek prg yield file every line lifted freek prg free prgcop prgcop build real hidden sumcoproduct type combining dsl specialized implementation shapeless coproduct higherkinded structure called copk shapeless representation nt allow manipulate f need remind prg alone facility combine dsl real type combining dsl prgcop whole forcomprehension describes program result type free prgcop people think implicit conversion avoid write freek prg believe experience inference forcomprehension nt logical scala soon manipulate complex program implicit conversion make inference break hardly understandable error combine interpreter using operator previous program describes sequence operation nt suppose executed data representation program description computation need interpret description effectful execution done interpreter freek interpreter freek nothing else classic natural transformation aka functionk f g helper manipulate multiple combined dsl defined seamlessly let suppose use async execution context based scala future fancy define interpreter per dsl val loginterpreter new log future def apply log match case loglogmsg lvl msg future println lvl msg val fileinterpreter new file future def apply db match case fileget name future filemanagerget name case filedelete name future filemanagerdelete name val kvsinterpreter new kv future val storage def apply db match case kvsget id future storageget id case kvsput id value future storageput id value combine interpreter big interpreter executing program mean able interpret dsl log kv file effectful computation need interpreter product kvsinterpreter loginterpreter fileinterpreter freek combine interpreter using operator val interpreter kvsinterpreter loginterpreter fileinterpreter remark equivalent nildsl end sequence type value interpreter actually type interpreter wrapper around c r c copk want access underlying naturaltransformationfunctionk prg future call interpreternat execute program using interpret program free prgcop right could use simply foldmapcompile interpreternat freek provides smarter function called interpret make order dsl v interpreter relevant shown documentation val fut programinterpret interpreter return future unit combine program together operator superor big interest free program call free program inside free program case logically need combine dsl program one single dsl lift free bigger dsl introduce new dsl program new dsl object db sealed trait dsl case class findbyid id string extends dsl entity new program object dbservice import db type prg logdsl dbdsl nildsl val prg dslmake prg program type indicated doc omit scala infer thing def findbyid id string free prgcop entity logdebug searching entity id id freek prg re findbyid id freek prg logdebug search result re freek prg yield re combine program prepend one dsl existing combination dsl new program use operator also semantics seq type prg log kv file dbserviceprg val prg dslmake prg type indicated doc omit scala infer thing def id string free prgcop file logdebug searching value id id freek prg name kvsget id freek prg e dbfindbyid id expand prg file fileget efile freek prg logdebug found file file freek prg yield file please note nildsl end brought dbserviceprg also appends list dsl end use expand function instead freek findbyid operation expand function allows use program defined smaller dsl one bigger dsl dsl redundancy order remarked log redundant prg dbserviceprg might issue declaring sequence interpreter might also wonder happens nt respect order dsl sequence interpreter using classic foldmapcompile execute free program would respect exact order redundancy interpreter v dsl pain freek interpret really becomes interesting order redundancyagnostic previous combined program val dbinterpreter kvsinterpreter loginterpreter fileinterpreter val return future unit manipulate stack result type ok till focused dsl side f free f nice tool combine different dsl interpret result type previous sample simple return type dsl return type often represents result operation business logic including error type let define kind dsl sealed trait foo final case class string extends foo option int final case class int extends foo xor string int final case object extends foo unit final case class int extends foo xor string option int sealed trait bar final case class string extends bar option string final case class int extends bar xor string string see return type option int xor string int general want write program like freek prg result option string freek prg result xor string string yield see clearly option type line nt try solve naively program end something like opti freek prg result option string opti match case freek prg result xor string string case none return yield ugly still need unify xor string string option string common type natural approach stack complex return type able manage case order matter naturally xor string option string option xor string string order matter naturally depends business rule may know classic approach use monadtransformers optiont xort work well freek freek also provides new typesafe facility called onion oniont make bit trivial onion stack monadstraverses onion way manipulate stack monadic traversable structure like type stack f g h fghi must monad traversables allow feature provided onion represent using onion facilty build onion like type f g h bulb could get stack general nt need type stack layer bulb terminator onion stack like nildsl combination dsl let go back original program try type unification every line freek prg result option string freek prg result xor string string yield forcomprehension need unify type every line free prgcop option free prgcop xor string free prgcop xor string option type xor string option bulb free prgcop layer expect enough need something want oniont missing link option monad transformer called optiont xor monad transformer called xort onion freek provides oniont tc f onion freaky nt nt worry nt see time like monad transformer let say loud oniont monad transformer onion stack monadic traversable layer embedded result type monad tc f like free f finally able lift free prgcop option xor string oniont free prgcop victory oniont let give example type prg bar foo logdsl nildsl type xor string option bulb type indicated doc omit scala infer thing val prg oniont free prgcop int freek prg oniont freek prg oniont loginfo toto freek prg oniont prg oniont freek prg oniont freek prg oniont yield remark oniontt used case lift oniont free prg execute oniont value prg type oniont free prgcop want execute free monad weird oniontstuff simple would monad transformer access underlying free value val fut prgvalueinterpret interpreter freeko prg lazy ok writing freek prg oniont line boring right freek provides shortcut called freeko combine call one single freeko still evaluation requires type crafting see weird case nt hesitate report program freeko type prg bar foo logdsl nildsl type xor string option bulb type indicated doc omit scala infer thing val prg oniont free prgcop int freeko prg freeko prg loginfo toto freeko prg prg freeko prg freeko prg yield ok enough simplification combine subprogram together finally combine existing program together also define local program debasish gosh asked would define local program reuse bigger program let take classic example great book functional reactive domain modeling clearly related freek domain define local program repository dsl sealed trait repo case class query string extends repo xor string account case class store account account extends repo xor string account case class delete string extends repo xor string unit repository local program object repo type prg repo log nildsl val prg dslmake prg type xor string bulb define local program reusable program def update string f account account query freeko prg store f freeko prg yield sealed trait foo foo use repo subprogram object foo type prg foo logdsl repoprg def subfoo free prgcop sealed trait bar bar use repo subprogram object bar type prg bar logdsl repoprg val prg dslmake prg def subbar free prgcop see nildsl nt used barprg fooprg prepends element dsl coproduct sequence dsl repoprg already coproduct sequence dsl combine program type list xor string option bulb combine program using type prg logdsl barprg fooprg val prg dslmake prg type indicated doc omit val prg oniont free prgcop int foosubfoo freeko prg barsubbar freeko prg repoupdate freeko prg yield make difference please remind following like operator scala seq prepends element dsl coproduct sequence dsl like operator scala seq appends coproduct sequence dsl combine group interpreter val foointerpreters barinterpreter loginterpreter repointerpreter val barinterpreters foointerpreter loginterpreter repointerpreter val interpreter foointerpreters barinterpreters like operator scala seq appends sequence interpreter unstack result peelright sometimes free returning onion xor string option bulb want manipulate hidden option program using dropright unstack option onion xor string option bulb return xor string bulb layer option access option naturally lift line program level example could following val prg oniont free prgcop xor string bulb option iopt freek prg oniont peelright iopt match case freek prg oniont peelright case none freek prg oniont peelright need peel layer use need peel layer use also wrap f wrap existing onion f difference oniont onion free prgcop f want lift info oniont free prgcop onion contains f use free prgcop f oniont free prgcop f oniont free prgcop f onion contain f use free prgcop f onion instead freek prg oniont peelright write freek prg instead freek prg oniont write freek prg instead freek prg oniont write freek prg bored adding free prg line use freekit trick type prg log nildsl val prg dslmake prg remark pas value prg object extends freekit prg val prg aopt loginfo aopt aopt aopt match case loginfo yield case none loginfo yield yield work basic case naturally soon embedded forcomprehension scalac inference make le efficient bored adding free prg oniont line use freekito trick type prg log nildsl val prg dslmake prg remark pas value prg object mo extends freekito prg need create type reify onion type option bulb val prg loginfo yield work basic case naturally soon embedded forcomprehension scalac inference make le efficient reminding motivation projectseptember love typesafe functional programming also like concept free monad decouples completely description program execution free cost term performance shortterm structure allocation domain io much bottleneck aspect use concept without remorse also believe current implementation improved progressively using theoretical even brutal tool like compiler pluginoptimizations want push concept cat scalaz free f representation already optimized right associated structure embeds coyoneda trick removing dependency functor use dsl f free f free generic way manipulate dsl convert computation thus used represent sort effect combination context specialized interesting approach scala world emm clever idea represent stack effect nice implementation idea stolen freek interesting use existing structure many implicits meaning cost compiletime questioning pure monadic nature tbd scala eff theoretical deeply interesting implementation based freer monad extensible effect paper oleg kiselyov friend nextgen effect management also requires aware developer certainly next step evangelization please note eric recently introduced model eff got inspired latest compiletime optimized copk model power os idris eff port personal toy idris almost nice scala almost monster experiment showing could work nextgen imho let patient make grow free concept start enter mind people want use enhancement tribute patch recent patch released milessabin changed lot way build typeintensive library nt limited terrible issue pr merged scala change thing lot without freek would much uglier le fun use thanks milessabin deeper sample found appspec http githubcomprojectseptemberincfreekblobmastersrctestscalaappspecscala way also called compiletime dependency injection end
202,Lobsters,scala,Scala programming,Scala-native,https://github.com/scala-native/scala-native,scalanative,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
203,Lobsters,scala,Scala programming,Odersky: Scala – The Road Ahead,http://www.slideshare.net/Odersky/scala-days-nyc-2016,odersky scala road ahead,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
204,Lobsters,scala,Scala programming,Linearizability Testing Manual,http://www.cs.ox.ac.uk/people/gavin.lowe/LinearizabiltyTesting/manual.pdf,linearizability testing manual,,obj length filter flatedecode stream ԭ pg fύ endstream endobj obj length filter flatedecode stream z p n وo
206,Lobsters,scala,Scala programming,Scala vs. Node.js as a RESTful backend server,http://developers.redhat.com/blog/2015/04/22/scala-vs-node-js-as-a-restful-backend-server/,scala v nodejs restful backend server,scala v nodejs restful backend server v nodejs webpack browserify npm scala ceylon scala strongly typed pattern matching foryield concurrency akka jdk interoperability scalajs nodejs javascript number package http githutinfo typesafe documentation article stack overflow asynchronous library,scala v nodejs restful backend server v involved fullstack development especially stack involving single page apps choosing go single page webapp backend concern change backend job think ruby python java etc emphasis placed frontend stack time spent javascript le backend language since ui logic resides liberating sens allows one freedom language deficiency become le problem decide language based like backend html templating framework since longer involved think python tornado template jsf jade three drastically different templating choice none matter going single page app browser goto server nodejs great many reason including easy sharing code module across server ui webpack browserify first class asynchronous support consistent language environment npm one best packagedependency manager opinion exists last year however coworker encouraged give scala try rabbit hole went come somewhat mixed opinion get let first go positive experience java perfectly practical language long history solid mission critical usage begin dabble language language feature java syntax begin pale comparison java begin address syntactical shortcoming alternative like jython jruby groovy ceylon one prominent jvm language industry scala scala drastic shift mindset approach even compared java especially compared developing javascript different mindset scala given available language construct implicits open bit magical world case class pattern matching encourage write highly structured code case class great benefit potentially nothing nodejs term selfdocumentation like option think le brilliant great way handle none null value next best experience existential operator somevar coffeescript however simplistic comparison scala first class asynchronous concurrency support syntax initially difficult let say difficult found surprisingly close coffeescript quite respect good thing scala allows write highly expressive yet compact code language enough praise scala though let get difference experience writing backend scala v nodejs remember comparison development experience backend scala nodejs considering language comparison language may various pro con scala strongly typed emphasize ultimately feel like breath fresh air developing backend could say javascript syntactically defined type rapid prototyping experience development typing case class mystery database returning field operate pattern matching become accustomed construct want use everywhere javascript standard ifelse switch statement operate similar fashion little encountered raw power pattern matching scala foryield get accustomed yield scala wonder lived without nodejs give eventemitter promise clean thing considerably touch power conciseness yield scala concurrency scala provides access akka open whole new world opportunity backend also jvm provides great deal apis creating handling thread process something would typically directly many webapp backends need jdk interoperability scala necessarily compete nodejs npm number active repository github scala access java library major point want use commonslang go ahead jooq compelling reason certain library simply better java think salesforce api example restful api generated typed api access layer wsdl scalajs due overwhelming feedback received community post included scalajs benefit going scala backend scalajs may well killer reason allowing go full scala stack effectively match functionality full javascript stack nodejs get type safety power scala language nodejs javascript first calm negative reaction meant positive statement javascript mean one choose module bundler like webpack browserify unify backend frontend environment able develop module used backend browser nice ability important ability use npm module browser least one rely filesystem one browserified note functionality achieved scalajs well scala unify environment similar way may come matter personal preference number package warrant strong consideration depending application creating take look http githutinfo language top active repository javascript scala come around make mistake pretty solid coverage anything want scala typesafe created great deal production quality library term thirdparty javascript hard beat documentation article stack overflow looking amount content web pertaining two language found great deal difficulty many time finding solution certain problem scala encountered issue definitely growing repository knowledge found also relying people could talk directly experience scala bit contrast javascript popular language net flooded problem solution tutorial technique scala community anywhere close language like javascript even java matter asynchronous library nearly every database io library need asynchronous box made promisification case nature nodejs landscape well defined scala given certain backends scala written thread per request model fine api call block mean every database api library asynchronous forked asynchronous labeled experimental may work fine point nearly guaranteed asynchronous library find functionality need find forked async library may labeled experimental experience never ultimately particular issue finding needed scala term async library availability well defined notice list reason liking scala primarily language specific reason liking nodejs primarily practical nature believe important difference scala syntax cryptic infuriating time want love beauty syntax language construct scala provides accept gray hair believe construct combined strongly typed system attracts scala backend make scala compelling alternative nodejs backend world like language likely use either language cover gamut possible apps want create little either language save complicated concurrency part consideration becomes experience feel stylistic approach language use feel develop nodejs still strong draw despite benefit scala imagine one could rapidly prototype scala faster nodejs scripting language nodejs quick setup quick compile restart package management work gotchas depending size scope project nodejs much lower threshold entrance term resource requirement across spectrum flip side larger javascript app grows easier app derail unless structured solid design followed scala going much structured basis refactor avoid possible rabbit trail spaghetti code good bad code written language said easier write bad code certain language others may issue people whatsoever scala provide language construct write cleaner code long run personally issue particularly javascript regard well versed comfortable javascript scala much nicer deal regard one answer nodejs may scalajs typescript ultimate conclusion exposed scala backend restful server experienced scala offer wholeheartedly suggest antiquated java syntax turned away many javascriptscripting devs scala gaining steam momentum maybe fast nodejs stay learning scala make better javascript developer long run ability choose two backends provide much greater sense freedom related
207,Lobsters,scala,Scala programming,"Scala Native coming ""soon""",http://www.scala-native.org/,scala native coming soon,,time hellonative hello native real user sys scala native compiled aheadoftime via llvm mean sluggish warmup phase common justintime compiler code immediately fast ready action
208,Lobsters,scala,Scala programming,Scala-bility: Scala.js and React: Building an Application for the Web,http://scala-bility.blogspot.com/2015/05/scalajs-and-react-building-application.html,scalability scalajs react building application web,scalatags scalajsreact scalacss github deployment heroku handson scalajs small official tutorial,scalajs integrated implement basic spreadsheet web page suggesting good support scala establishment principal developer scalajs collaborator martin odersky epfl sébastien doeraene amsterdam getting sample application let talk motivation scalajs basically web continues powerful platform application development despite many problem feature desktop mobile phone match example install process web application negligible user perspective load web page first time already also web application connect via hyperlink rest call unfortunately web jvm language traditionally limited serverside functionality clientside dominated javascript trouble developer perspective two language mean lot extra complexity ca nt share code pas object runtime client server end writing serialization validation logic language would preferable implement web application single language possible given browser understand javascript one possibility run javascript serverside approach nodejs take however javascript meet many complaint essentially untyped ca nt take advantage solidity scalability jvm providing serverside long would better use language side take advantage performance jvm safety typing also fp principle crossing mainstream past ten year made possible though use convert one source language scala case scalajs javascript one big challenge web programming coordinating event element view clientside updated model serverside change desktop apps often used web take bit work often employ help mvc modelviewcontroller web framework general term getting change propagate automatically like opposed manually making call view time reactive programming particular form reactive programming capturing relationship composable way value change time signal related approach use message passing system like akka keep component loosely coupled case key goal avoid inefficiency blocking operation hazard mutable data making overall system functional web programming used cover system bring fp reactive programming web including another advantage react developer concentrate reusing component rather template messy logic tends accumulate component typically written jsx javascript extension language translated actual javascript using preprocessor instance consider score text top left libanius app see screenshot jsx would written javascript plus syntactic sugar notice score variable passed using component jsx watch src build using standard react far however way scalajs firstly exists scala library haoyi li called scalatags includes scala equivalent html tag attribute let assume file quizscreenscala writing view core code may start looking bit like jsexport object quizscreen jsexport def main target htmldiv val quizdata ajax call targetappendchild span class alignleft score quizdatascore view code notice span scala method scalatags library imported assuming configured sbt use scalajs see converted javascript sbt calling fastoptjs good thing scalajs compiler keep target javascript small eliminating code included library used stop happening entry point quizscreen necessary use jsexport annotation object main method guarantee main callable javascript seen react way scalajs way combine good option use scalajsreact library david barri scoretext component look like val scoretext reactcomponentb string scoretext render scoretext span classname alignleft score scoretext build compare jsx version scala code concise notice render method present also possible use react lifecycle method necessary like componentdidmount initializing component notice also us scala span specialized version scalatags used first extra symbol look intimidating remember used tag used attribute imported like import japgollyscalajsreactvdomprefix classic javascript react component hold state seen reference thisstate getinitialstate method might look like getinitialstate function return data scala version let u define state clearly strongly typed language example state quizscreen look like case class state usertoken string currentquizitem option quizitemreact none prevquizitem option quizitemreact none scoretext string chosen option string none status string best centralize state screen like pas component rather subcomponent separate state object could get hand way compose component classic react central component quizscreen object quizscreen component contains scoretext component along various bit piece code show put together val quizscreen reactcomponentb unit quizscreen initialstate state generateusertoken backend new backend render state backend statecurrentquizitem match show page quiz item case currentquizitem quizitemreact div span id headerwrapper scoretext statescoretext span classname alignright button id deletebutton onclick backendremovecurrentwordandshownextitem currentquizitem delete word questionarea question currentquizitemprompt currentquizitemresponsetype currentquizitemnumcorrectresponsesinarow span currentquizitemallchoicesmap choice div p button classname responsechoicebutton classname cssclassforchosen choice statechosen currentquizitemcorrectresponse onclick backendsubmitresponse choice currentquizitem choice previousquizitemarea stateprevquizitem statustext statestatus case none statequizended div loading else div congratulation quiz complete score statescoretext buildu central component quizscreen contains component implementation shown also access state backend backend contains logic bit extended example code observe submitresponse called backend button clicked user code invoked class backend scope backendscope unit state def submitresponse choice string curquizitem quizitemreact scopemodstate copy chosen choice val url processuserresponse val response quizitemanswerconstruct scopestateusertoken curquizitem choice val data upicklewrite response val sleepmillis double responseiscorrect else ajaxpost url data foreach xhr settimeout sleepmillis updatestatefromajaxcall xhrresponsetext scope def updatestatefromajaxcall responsetext string scope backendscope unit state unit val curquizitem scopestatecurrentquizitem upickleread datatoclient responsetext match case quizitemdata datatoclient val newquizitem quizitemdataquizitemreact set new quiz item switch curquizitem prevquizitem position scopesetstate state scopestateusertoken newquizitem curquizitem quizitemdatascoretext backend method submitresponse make ajax post call server collect result update state object react framework take care rest ie updating dom reflect change state making ajax call upickle library haoyi li used serializationdeserialization also used server side scalajs application core server side spray server simple router defined recognizes call processuserresponse made object server extends simpleroutingapp def main args array string unit implicit val system actorsystem lazy val config configfactoryload val port configgetint libaniusport startserver port port get route shown post path processuserresponse extract requestentityasstring e complete val quizitemanswer upickleread quizitemanswer e upicklewrite quizserviceprocessuserresponse quizitemanswer processuserresponse path extract post data using upickle pass call quizservice singleton contains midtier business logic relies core libanius library run main backend functionality quiz wo nt go detail logic note historical reason future portability relies simple file hold quiz data rather database system back spray server quizscreen page initially loaded route used get pathsingleslash complete httpentity mediatypes texthtml quizscreenskeletonrender quizscreen mentioned quizscreen clientside described fact serverside quizscreen make call clientside quizscreen like object quizscreen val skeleton html head link rel stylesheet href quizcss script src appjsdepsjs body script src appfastoptjs div cl center id container script comorandalibaniusscalajsquizscreen main tag scalatags main call last script tag recall clientside use jsexport make quizscreen main available jsexport def main unit quizscreen render documentgetelementbyid container also notice skeleton two included javascript library appfastoptjs scalajs application fastoptjs file final output fastoptjs task containing javascript code generated scala code appjsdepsjs scalajs application jsdepsjs contains additional javascript library case thing incorporates reactwithaddonsminjs essential sbt configuration used starting point scalajs project us basic dependency including scalatags upickle serialization utest testing import sbtkeys name libanius scalajs frontend set javascript environment nodejs assuming installed rather default rhino scalajsstage global fastoptstage cause jsdepsjs file generated including react skip packagejsdependencies false val app crossprojectsettings unmanagedsourcedirectories compile basedirectoryvalue shared main scala librarydependencies seq comlihaoyi scalatags comlihaoyi utest comlihaoyi upickle scalaversion testframeworks new testframework utestrunnerframework jssettings librarydependencies seq orgscalajs scalajsdom comgithubjapgollyscalajsreact core comgithubjapgollyscalajsreact extra comlihaoyi scalarx react reactwithaddonsjs reactjs reactminjs reactwithaddonsminjs jsdependencies orgwebjars react reactwithaddonsjs commonjsname react jvmsettings librarydependencies seq iospray spraycan iospray sprayrouting comtypesafeakka akkaactor orgscalaz scalazcore lazy val appjs appjssettings make libanius core jar available unmanagedbase basedirectory sharedlib lazy val appjvm appjvmsettings make sure appfastoptjs appjsdepsjs quizcss libanius core jar applicationconf shared source code copied server see special thing scalajs clientserver sbt configuration divided three part j jvm shared j folder contains code compiled scalajs jvm folder contains regular scala code used serverside shared folder contains code configuration accessible j jvm achieved using crossproject builder scalajs construct two separate project j one jvm one far assuming generated javascript run browser however scalajs also work headless runtimes like nodejs phantomjs ensure run commandline serverside important testing notice scalajsstage global fastoptstage line grand overview web application let look directory structure see slim application really key source file libaniusscalajsreact buildsbt app j src main scala comorandalibaniusscalajs quizscreenscala target jvm src main resource applicationconf scala comorandalibaniussprayserver quizscreenscala quizservicescala serverscala target shared lib src main resource quizcss scala comorandalibaniusscalajs clientserverobjectsscala quizitemreact notice quizscreen serverside clientside former call latter one thing nt mention yet quizcss file used clientside quizscreen oldfashioned cs file course also possible use le file furthermore nt anticipate graphic designer want change style could even go whole way making application type safe write style scala scalacss full code frontend libanius github writing deployment heroku may supported indefinitely full tutorial scalajs see handson scalajs haoyi li also small official tutorial
209,Lobsters,scala,Scala programming,Scala API for Google Cloud Dataflow,https://github.com/spotify/scio,scala api google cloud dataflow,scio apache beam google cloud dataflow apache spark scalding page feature tensorflow algebird breeze scala future quick start java development kit jdk template documentation getting started beam programming guide scio scalding spark scio beam dataflow scioexamples example page big data rosetta code artifact license http,scio ecclesiastical latin ipa ˈʃio ˈʃiːo verb know understand knowledge scio scala api apache beam google cloud dataflow inspired apache spark scalding scio future version depend apache beam orgapachebeam earlier version depend google cloud dataflow sdk comgoogleclouddataflow see page list breaking change feature scala api close spark scalding core apis unified batch streaming programming model fully managed service integration google cloud product cloud storage bigquery pubsub datastore bigtable jdbc tensorflow tfrecords cassandra elasticsearch parquet io interactive mode scio repl type safe bigquery integration algebird breeze pipeline orchestration scala future distributed cache provided google cloud dataflow quick start download install java development kit jdk version use template quickly create new scio job repository sbt new switch new repo default sciojob build cd sciojob sbt pack run included word count example targetpackbinwordcount outputwc list result file inspect content l l wc cat documentation getting started best place start scio new apache beam distributed data processing check beam programming guide first detailed explanation beam programming model concept experience scala data processing library check comparison scio scalding spark finally check document relationship scio beam dataflow example scio pipeline test found scioexamples lot direct port beam java example see page sidebyside explanation also see big data rosetta code common data processing code snippet scio scalding spark artifact scio includes following artifact sciocore core library sciotest test utility add project test dependency scioavro addon avro also used standalone sciobigquery addon bigquery also used standalone sciobigtable addon bigtable sciocassandra addons cassandra scioelasticsearch addons elasticsearch scioextra extra utility working collection breeze etc best effort support sciojdbc addon jdbc io scioparquet addon parquet sciotensorflow addon tensorflow tfrecords io prediction license copyright spotify ab licensed apache license version http
210,Lobsters,scala,Scala programming,Scala.js is Important for Cloud Services,http://underscore.io/blog/posts/2016/03/21/serverless-scale-summit.html,scalajs important cloud service,example production scale summit scalajs scalajs post conclusion,people using serverless architecture would guessed getting significant benefit scala great fit kind architecture use jvm thanks scalajs javascript runtimes post small observation regarding example production scale summit year convened session serverless architecture session attracted something like people attendee interested sharing experience group plenty seemed experimenting interested three four already significant production use aws lambda service launched preview month ago example one company triggering lambda function based sale event function update another data store something like call minute reliability problem service time cheaper equivalent prelambda solution place scalajs scalajs come aws lambda support node well jvm runtime scalajs scala javascript compiler great javascript interoperability mean write lambda service scala deploy lambda node environment experimenting far look like start time node significantly smaller jvm example previous post described running scala function aws lambda noted second cold start time compiling service scalajs running lambda show latency anywhere near moment anecdotal comparing exactly service scalajs scala potential gain running node maybe surprise aws launching service one use destroying different set need compared longrunning process conclusion aws lambda used company seeing benefit sample size small technically advanced group scala good position kind service use scalajs target node runtime probably going turn good default route need access jvmonly facility jdbc example think jvm jit going benefit target jvm case writing scala
211,Lobsters,scala,Scala programming,How Many Websites Provide RSS / Web Syndication Feeds,https://vhf.github.io/blog/2016/03/21/rss-usage-on-the-web/,many website provide r web syndication feed,builtwith published november halfjokingly said working commoncrawl wdc extraction framework structured data forked wdc framework parsing html regex bad idea daplab parquet feedstransformscala let work extracted feed crawled url let quickly recap hostnames provide web syndication feed,became interested web syndication feed recently old technology nobody talk anymore everybody still provides taking look google trend show u much people lost interest r since peak popularity old technology people seem lost interest still rely people abandoning web syndication advent cm eg huge popularity wordpress static website generator publishing platform eg medium provide syndication feed default r nt look dead became interested finding many website actually provide least one xml syndication feed builtwith pretty nifty trend section state million visited website r feed give u pretty good idea let see could basically two option actually crawling web costly lengthy process relying existing web crawl data enters commoncrawl commoncrawl nonprofit founded exciting project crawling ton web page releasing obtained dataset publicly free latest dump published november contains billion web page amounting highly compressed html halfjokingly said mining commoncrawl answer question week ago two colleague mine mentioned lunch desire mine common crawl research coincidence thinking though mostly fun month would nt able combine effort single common crawl run probably would nt mined dataset satisfy curiosity working commoncrawl mentioned latest common crawl data hosted decided process directly spot instance using wdc extraction framework actually choice pretty obvious u syndication feed thing wanted extract commoncrawl colleague interested extracting structured data embedded html page exactly wdc framework designed also wanted extract html anchor pointing wikipedia page forked wdc framework modified extract different thing thus needing go commoncrawl dataset commoncrawl dump consists html web page want extract part eg link rel alternate href blogatomxml title something type applicationatomxml either rssatom type attribute rel alternate attribute although parsing html regex bad idea constructing fullblown dom tree page would require far much time processing power regular expression used match feed link type applicationrssxmlapplicationatomxmlapplicationrssapplicationatomapplicationrdfxmlapplicationrdftextrssxmltextatomxmltextrsstextatomtextrdfxmltextrdftextxmlapplicationxml rel alternate wdc framework wrote result bucket csvgz format whole run budgeted aws instance spawned instance core run modified wdc framework using spot instance saved u money took around hour process whole common crawl dump costed le right target interesting course postprocessing data extracting result bucket look like together short explanation result various extraction total gzipped tsv anchor pageurl anchor text wikipediaurl gzipped tsv feed pageurl linktag linktype gzipped tsv url pageurl gzipped text data quintuplet n subject predicate object page extractorused gzipped json anchorpages url pageurl content fullhtmlpage n gzipped tsv stats arcfilename arcfilepos detectedmimetype hostip htmlheadmeta htmlmfadr htmlmfgeo htmlmfhcalendar htmlmfhcard htmlmfhlisting htmlmfhrecipe htmlmfhresume htmlmfhreview htmlmfspecies htmlmfxfn htmlmicrodata htmlrdfa mimetype recordlength referenceddata timestamp totaltriples uri first step course sync bucket locally backup na done triggered security warning network admins office downloading almost full speed proceeded copy data daplab hadoop cluster daplab awesome project aiming providing powerful data processing cluster freemium premium basis company afford cluster researcher scientist etc also organize weekly hacking session anyone attend get access cluster free research lab partnering daplab since beginning daplab infrastructure nice complement lab hadoop cluster advertising post promise data hdfs let process keep mind blog post xml syndication feed thing extracted anchor rdf triple etc vfelder daplab hdfs dfs l head found item gzipped tsv file nt want work format compression gzip slow csvtsv ideal query data also file bit much node cluster convert gzipped tsv snappycompressed parquet file converting gunzip csv file snappy parquet file parquet better suited querying eg using hive csv parquet file contain schema csv nt parquet file store data column csv rowbased column parquet file compressed column compressed according data type snappy also offer great advantage compared gzip snappy compression order magnitude faster gzip snappy happily trade compression readwrite speed running job load terabyte data hdfs cluster care fast readwrite sparing tb le file mean throughput long file processing core course assume decompressing file take decompression alone file take cumulated one hour course whole process distributed run parallel still constitutes overhead compared working file could chosen avro schema basic need query column parquet made sense remember tsv schema pageurl linktag linktype good thing saved whole link tag realized run might interesting extract possible attribute wrote short scala script spark extract thing go csvgz snappyparquet feedstransformscalapackage infoexascalewdctools import comnetaporteruriuri import orgapachesparksqltypes stringtype structfield structtype import orgapachespark sparkconf sparkcontext sql import orgapachesparksqlfunctions import scalalanguagepostfixops object feedstransform def main args array string val conf new sparkconf setappname transformfeeds set sparksqlparquetcompressioncodec snappy val sc new sparkcontext conf val sqlcontext new sqlsqlcontext sc val feedschema structtype array structfield page stringtype true structfield tag stringtype true structfield type stringtype true val df sqlcontext read format comdatabrickssparkcsv option header false schema feedschema load csvgz url eg http examplecom foohtml made uri crash implement regex based check val hostnamepattern http http r val gethost string string page string val prefiltered hostnamepattern findfirstin page prefilteredisempty println prefiltering failed page else val prefilteredstring prefilteredget try val host uriparse prefilteredstring host hostisempty println parsing failed page prefiltered prefilteredstring else hostget catch case e throwable val exception etostring println caught exception extract rel val relpattern rel r val getrel string string tag string tag match patternmatching regex match nice case relpattern captured captured case extract href val hrefpattern href r val gethref string string tag string tag match case hrefpattern captured captured case extract title val titlepattern title r val gettitle string string tag string tag match case titlepattern captured captured case transform lowercase val getlctype string string str string strtolowercase create spark sql userdefined function scala function val sqlgethost udf gethost val sqlgetrel udf getrel val sqlgethref udf gethref val sqlgettitle udf gettitle val sqlgetlctype udf getlctype df add hostname column based page column withcolumn hostname sqlgethost col page add rel column based tag column withcolumn rel sqlgetrel col tag add href column based tag column withcolumn href sqlgethref col tag add title column based tag column withcolumn title sqlgettitle col tag replace type column lowercase version withcolumn type sqlgetlctype col type output parquet file csvgz input file coalesce write parquet hdfs home folder writeparquet uservfelderfeedsfeedsparsedparquet total csvgz converted snappyparquet additional column take bad could create hive table like create external table xiwdcfeeds page string type string tag string hostname string rel string href string title string stored parquet location uservfelderfeedsfeedsparsedparquet mean data table nt moved hive table location stay hive load data directly file drop table data wo nt affected also performed csvgz snappyparquet conversion hostname extraction contains crawled url scala program similar one listed found hive nice run query spark sql equally nice generally offer better performance also allows run query directly ipython notebook writing blog post get query result rework directly python first part blog post writting markdown ipython notebook running pyspark rest post playing data directly ipython writing pysparksql query executing directly ipython running pyspark cluster got handy sh alias using spawn notebook screen alias ipysparkipythonopts notebook nobrowser iplocalhost pyspark master yarnmaster conf sparkuiport shuf n numexecutors executorcores drivermemory executormemory work extracted feed crawled url first import sparksql libs pysparksql import sqlcontext pysparksqlfunctions import def h n helper function display number humanreadable way return format n spark context already running ipython pyspark sqlcontext sqlcontext sc stored feed url snappy compressed parquet file read parquet everything else taken care feed sqlcontextreadparquet uservfelderfeedsfeedsparsedparquet url sqlcontextreadparquet uservfelderurlsurlsparsedparquet crawl said dump url let check also number web page used extraction total number url h urlscount total number url nice seems data match feed url file include two column page hostname respectively original url web page hostname url single web page provide several feed interested number website provide least one feed take distinct hostnames url crawled lot url interested number distinct hostnames compare two number distinctfeedscount feedsselect hostname distinct count distincturlscount urlsselect hostname distinct count hostnames least one feed h distinctfeedscount hostnames processed h distincturlscount hostnames processed hostnames least one feed format float distinctfeedscount distincturlscount ok around crawled website provide least one xml feed average many feed per webpage totalfeedscount feedscount totalurlscount urlscount float totalfeedscount totalurlscount would interesting see standard feed implement pysparksql import column typesgrouped feed select type col type groupby type count orderby desc count typesgroupedshow type count applicationxml textxml applicationrdfxml applicationatom applicationrdf applicationrss textrdf textrssxml textrss textrdfxml let basic stats rssfeeds typesgrouped filter type like r agg count sum collect rsstotal rssfeeds asdict value atomfeeds typesgrouped filter type like atom agg count sum collect atomtotal atomfeeds asdict value feedswithtype typesgrouped agg count sum collect feedswithtypetotal feedswithtype asdict value r h rsstotal atom h atomtotal atom r rsspc float rsstotal feedswithtypetotal atompc float atomtotal feedswithtypetotal r format rsspc atom format atompc atom r alternatetotal feed select rel type rel like alternate type like r type like atom count format float alternatetotal rsstotalatomtotal question answered let quickly recap common crawl excellent free dataset wdc framework cool tool requires tweaking possible extract fair amount data dump le url got different host processing data really fast daplab cluster ipythonpyspark setup last alternatetotal query take hostnames provide web syndication feed r popular syndication format far atom link tag pointing r atom feed also specify rel alternate html standard recommends
212,Lobsters,scala,Scala programming,Publishing scala.js libraries on Sonatype,https://www.querki.net/u/jducoeur/scala-notes/#!Creating-a-Scalajs-Open-Source-Project,publishing scalajs library sonatype,,
213,Lobsters,scala,Scala programming,Getting into Scaladoc Development,http://www.scala-lang.org/blog/2016/03/17/getting-into-scaladoc-dev.html,getting scaladoc development,heathercmiller vladureche scaladoc scaladoc work see docfactoryscala see htmlfactoryscala see entityscala htmlfactoryscala generate doc begin entityscala htmlfactoryscala lib see change really begin scaladev scalacontributors gitter,thursday march felix mulder blog past month working new scaladoc coming along nicely together heathercmiller vladureche overhauled overall look scaladoc well added bunch useful feature like complete member search new scala center recently announced one thing discussed lower entry barrier important open source project blog post aim exactly scaladoc lot thing want doc love help pique interest read scaladoc new major version scala scheduled later year currently doc tool generates site like one new search functionality allows look called class trait object package member like method even val var new search taxing big library like collection result shown almost instantaneously nevertheless got progress bar showing actually happening scaladoc work scaladoc tool quite easy understand basically three thing happen specified want documented scaladoc compiles source using first step compiler frontend fill tree structure known universe information source class member doc string etc see docfactoryscala copy needed asset location ie script cssfiles see htmlfactoryscala traverse universe tree toplevel entity create htmlpage using entity class see entityscala bulk step carried inside htmlfactory class htmlfactoryscala look complete overview generate doc simple git clone git githubcom scalascalagit cd scala ant doc ant docslib want standard library begin markup entity page defined entityscala looking change html want look first want add static asset remember htmlfactory need copy destination sure add new resource libresources htmlfactoryscala current static asset located lib directory want put new thing also indexjs etc live see change two option changed markup need regenerate doc ant docsclean ant doc change script style sheet use small makefile root project makefile simply copy resource location generated doc cp srcscaladocscalatoolsnscdochtmlresourcelib indexcss indexjs templatecss templatejs diagramscss diagramsjs buildscaladoclibrarylib regenerating doc time pain want generate single file ant quickbin buildquickbinscaladoc pathtosourcefilescala lastly open pull request test change really begin still lot thing considered release ready laundry list thing need general async thing able parallelize generation doc page cs cleanup lot thing necessary anymore could simply deleted mobile doc look decent mobile still ton landscape kill layout good package overview list right idea welcome desktop keyboard navigation entity page ie member better keyboard navigation search result minor layout issue showing existence companion classtraitobject maybe believe companion object boolean going home tonight full list idea thing found scaladev comment issue reach one u felixmulder heathermiller vladureche scalacontributors gitter interested knowing
214,Lobsters,scala,Scala programming,Announcing Scala.js 0.6.8,https://www.scala-js.org/news/2016/03/18/announcing-scalajs-0.6.8/,announcing scalajs,start using default method getting started tutorial release note release note github drop support strong mode scalajs strong mode discontinued new java library bug fix github,mar pleased announce release scalajs release mostly bugfix release important change fixed jsdepsminjs produced anymore upgrading upgrade implementation standard library scala drop support strong mode release also contains important although invisible change prepare scala start using default method encode trait required substantial change scalajs although work done earlier release scalajs first version able support scala getting started new scalajs head tutorial release note upgrading earlier please also read release note contains breaking change minor release backward source binary compatible previous release series library compiled earlier version used without change however forward compatible library compiled used project using please report issue github drop support strong mode scalajs introduced experimental support strong mode proposal team since strong mode experiment discontinued removed strong mode support scalajs sbt setting scalajsoutputmode therefore deprecated behavior new java library javautilproperties systemgetproperties friend along support option sbt setting javaoptions bug fix among others following bug fixed release jsenv timeouts start early jsdepsminjs produced anymore upgrading find full list github
215,Lobsters,scala,Scala programming,Scala.js for large and complex frontend apps,https://www.youtube.com/watch?v=NPWDKEQLjpI,scalajs large complex frontend apps,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scalajs large complex frontend apps youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scalajs large complex frontend apps youtube
216,Lobsters,scala,Scala programming,Announcing The Scala Center,http://www.scala-lang.org/blog/2016/03/14/announcing-the-scala-center.html,announcing scala center,scala center center search trend redmonk ranking spark kafka akka finagle cat play structure center scalajs please contribute scala center gitter channel,monday march martin odersky heather miller blog today launched new initiative scala center act open source foundation scala engage developer opensource community effort improve language tool documentation also help developer learn language massive open online course seminar activity center scala seen steady rise adoption reflected number open scala job dead link wwwindeedcomjobtrendsscalahtml search trend redmonk ranking language currently rank overall estimate half million developer using scala scala technology choice vibrant opensource ecosystem including popular platform framework spark kafka akka finagle cat play name large user base diversity project built scala mean many demand language tool set also large pool capable motivated contributor first mission scala center consult user community define common goal organize contribution resource achieve goal scala quite unique way combine functional objectoriented programming element make quite different language requires conscious investment learning language reap benefit learning scala done right much internalizing syntax usually deeply affect way developer think activity pioneered open online education registration moocs coursera scala center take enlarge effort integrating specialization teach functional programming data analysis using scala spark structure center scala center designated unit epfl independent scala research group lamp first two officer executive director heather miller principal engineer jon pretty center funded epfl group industrial member initial industrial founding member center goldman sachs ibm lightbend nitro verizon keen welcome member future center aim helping complementing existing entity scala ecosystem particular lightbend formerly typesafe continue maintain evolve stable scala distribution lightbend founding member center engineer looking forward participating project existing open source project platform work center help making open source library discoverable using package index also step take evolution project common interest subject available resource one specific project look like enough interest pledge funding scalajs scalajs developed far lab epfl specifically doeraene nicolas stucki help outside contributor including lightbend scala center logical platform put great work stable basis please contribute starting rough direction expect detail working become clearer gained experience activity soliciting community help time funding contribute would like work project useful community large please join u scala center gitter channel get involved
217,Lobsters,scala,Scala programming,[Survey] Functional Programming Paradigm,http://goo.gl/forms/rkOshVDDZE,survey functional programming paradigm,,functional programming paradigm surveythe form functional programming paradigm survey longer accepting responsestry contacting owner form think mistake
218,Lobsters,scala,Scala programming,Deploy Playframework (Play!) to AWS Elastic Beanstalk with Jenkins,https://www.davemaple.com/articles/deploy-playframework-elastic-beanstalk-jenkins/,deploy playframework play aws elastic beanstalk jenkins,playframework aws elastic beanstalk step preparing playframework project java se container type customize reverse proxy using instruction step creating configuring jenkins instance install jenkins outlined article oracle jdk aws elastic beanstalk deployment plugin git plugin step preparing aws account step configuring aws elastic beanstalk build step step kick as comment powered disqus comment powered,playframework lightweight highperformance web application platform perfect stateless web tier amazing compliment aws elastic beanstalk article outline use jenkins build deploy playframework application aws elastic beanstalk article assumes playframework version tested step preparing playframework project make change playframework project order prepare deployment elastic beanstalk using new java se container type create directory named dist top level project inside ebextensions directory procfile tell elasticbeanstalk launch app populate procfile following changing binajmoss reflect application name defined buildsbt dconfigfileconfliveapplicationconf typesafe configuration file appropriate environment web binajmoss dconfigfileconfliveapplicationconf ok ready deploy elasticbeanstalk java se container use nginx reverse proxy application default proxy port application requires custom nginx conf totally customize reverse proxy using instruction step creating configuring jenkins instance nt jenkins instance aws want install jenkins outlined article also want install oracle jdk jenkins instance openjdk version drop support encryption cipher elastic beanstalk plugin depends next install typesafe activator build playframework project sudo cd opt sudo wget http sudo unzip sudo ln activator sudo touch etcprofiledactivatorsh sudo chmod x etcprofiledactivatorsh sudo echo export path path optactivator etcprofiledactivatorsh sudo source etcprofiledactivatorsh sudo chown jenkins optactivatoractivator sudo chgrp jenkins optactivatoractivator activator installed system want install aws elastic beanstalk deployment plugin ready create jenkins job setup source code management connect repository use github git plugin check source next create build step going build project zip file distribution use execute shell step following bash command optactivatoractivator clean dist mv targetuniversal zip targetelasticbeanstalkzip finally add additional build step aws elastic beanstalk need little prep work part step preparing aws account aws need create jenkins access keysecret key pair authority manage elastic beanstalk resource also need provision bucket using upload build grant jenkins user permission upload resource easy way apply policy directly bucket following example policy version id statement sid effect allow principal aws arn aws iam userjenkins action deleteobject getobject putobjectacl putobject resource arn aws ajmossartifacts note example policy bucket named ajmossartifacts step configuring aws elastic beanstalk build step ok configure jenkins build step aws elastic beanstalk configure section aws credential region enter access key secret key aws region elastic beanstalk vpc located application environment enter name eb resource want deploy packaging configure root object targetelasticbeanstalkzip leave includes excludes blank uploading configure bucket upload build well key prefix essentially directory within build jenkins job live version deployment configure build named currently using gitcommit buildtag include git commit hash plus build tag jenkins check zero downtime elastic beanstalk spin copy existing environment execute deployment swap dns entry typically always promote test environment later live leave blank step kick as click build enjoy one click deployment elastic beanstalk application please enable javascript view comment powered disqus comment powered
220,Lobsters,scala,Scala programming,Scala+LLVM,http://greedy.github.io/scala-llvm/,scalallvm,scala llvm code github mailing list scalallvm google group contributing paper compiling scala llvm abstract download download working draft download presentation slide comment question greedy csunmedu,scala llvm site main location information llvm backend scala development geoff reedy code code developed github mailing list scalallvm google group discussion project contributing contribution welcome idea paper compiling scala llvm paper presented second scala workshop held stanford june abstract paper describes ongoing work implement new backend scala compiler target low level virtual machine llvm llvm aim provide universal intermediate representation compiler target framework program transformation analysis llvm also provides facility aheadoftime justintime native code generation targeting llvm allows u take advantage framework compile scala source code optimized native executables discus design implementation backend also outline additional work needed produce robust backend download download working draft download presentation slide comment question email greedy csunmedu
221,Lobsters,scala,Scala programming,Getting started with Shapeless,http://jto.github.io/articles/getting-started-with-shapeless/,getting started shapeless,shapeless care doc wiki gitter stackoverflow shapeless source code incomplete guide shapeless feature hlist practical le practical polymorphic function generic type thing tuples lens monocle abstracting arity may source always navigating source understating source typelevel quicksort scala conclusion twitter,playing scala year shapeless couple year library community one among reason keep scala attractive pointed little doc would nt hurt agree little resource available people discovering shapeless type level programming scala hopefully post help newcomer understand library basic shapeless care taken shapeless readme shapeless type class dependent type based generic programming library scala shapeless toolkit leverage scala type system profit may use precise type like statically sized list list size known compile time may also use hlist better tuple generally shapeless used make compiler work scrape boilerplate gain little extra typesafety doc much far wiki good place start specifically community try inclusive possible likely find help gitter channel stackoverflow work well lot example found shapeless source code example specifically educational purpose pretty much everything shapeless demonstrated incomplete guide shapeless feature list shapeless feature use along short description earth example obviously lot discover basically feature consider essential nontrivial project hlist hlist certainly popular feature hlist list type every element statically known compile time may see tuples steroid beauty hlist compared tuples find essential list method like take head tail map flatmap zip etc plus bunch method specific hlist little demo hlist useful may realize yet believe soon see hlist everywhere already wrote practical le practical use case shapeless also provides way turn case class hlist later polymorphic function explain polymorphic function let start simple example take previously defined hlist happens want map first element int second element string third user map function would probably look like pas much function element hlist unpractical also defining map way mean need several definition map one hlist size want pas map function work int string user let compiler apply element hlist something like clearly f polymorphic function interestingly define function could define generic map work h type h h hlist sadly exist scala made language provides monomorphic function create function whose domain type parameter int ca nt create function whose domain int string user generally ca nt create function whose domain type trivial exercise try define identity function type impossible back map function course f could function handle least upper bound element hlist example type f would generally function type useful already mentioned map defined hlist mean shapeless provides polymorphic function simple example think code rather easy understand notice polymorphic function perfectly typesafe careful forget implicit keyword silly mistake make time time sometimes take realize scalac refuse map hlist note polymorphic function use implicit parameter generic generic simple way convert case class product type like tuples hlist viceversa code fairly simple generic often used automatically derive typeclasses instance case class see post type thing real world example generic great way avoid writing macro great nt want maintain poorly written macro tuples shapeless provide syntax tuples use hlist method tuples code rather obvious hlist method become available tuples simply importing import shapelesssyntaxstdtuple nifty lens shapeless provides simple lens implementation basic example directly taken shapeless example need lens time time already shapeless project useful advanced usage consider dedicated library like monocle abstracting arity specific feature per say based hlist generic shapeless provides way create function arbitrary arity let say created class contains hlist may want force hlist user create instance myclass without using hlist directly well provide bunch apply method rather annoying write instead note actually passing tuple apply method stricter compiler option need extra pair parenthesis myclass hello may source always made far blog post may want learn shapeless given little doc currently available resort reading source code learn luckily easy navigate shapeless source found organized navigating source shapeless source divided enough find pretty much everything need know understating source everything shapeless apart macro pretty much work model wish understand hlist work already written article typelevel quicksort scala understand hlist everything follow really suggest take time understand hlist built map hlist even plan use shapeless conclusion article meant give overview basic use case anything unclear covered article let know comment ping twitter try improve time know resource shapeless type level programming happy link
222,Lobsters,scala,Scala programming,"Of Algebirds, Monoids, Monads, and other Bestiary for Large-Scale Data Analytics (2013)",http://www.michael-noll.com/blog/2013/12/02/twitter-algebird-monoid-monad-for-large-scala-data-analytics/,algebirds monoids monad bestiary largescale data analytics,algebird scalding summingbird hadoop storm goal article algebird motivating example first look algebird algebird beyond trivial example bloom filter hyperloglog wait minute stackoverflow thread want journey rabbit hole post started squarecog posco algebird scalding teddunning tdigest pandora box scala functors monoids monad category theory implicits type class aaargh jose gilgado monad monoid category endofunctors get one use magma jabberwocky tl dr version monoids monad monoid monad monoids monoid duck typing type class monoids detail noop associative commutative transcript sam ritchie summingbird talk cufp example monoids additive monoid standard type use monoid look one monoid axiom algebird scalding summingbird parallelized mapreduce divide conquer sritchie paddleguru transcript sam ritchie summingbird talk cufp cufp slide summingbird monad monad wikipedia state monad io monad storm storm tutorial monad detail definition monad algebird monad algebird monad law monad elephant example monad algebird default monoid view semigroups monad use monad look one computation description algebird creating monoid ordering ordered orderedsemigroupscala go creating monad monadscala key algebraic structure algebird defined algebird small algebird faq error find type class type combine different monoids monad really everywhere monad clojure whole series blog post covering monad summary algebird scalding summingbird twittereng reference monad monoids functional programming scala monad metaphor monad monoid category endofunctors problem second answer monad elephant functors applicatives monad picture monad law summingbird category theory introduction category theory free pdf,ever asked monoids monad particularly seem attractive field largescale data processing twitter recently opensourced algebird provides jvm library work algebraic data structure algebird already used big data tool scalding summingbird mean use algebird mechanism plug data structure eg bloom filter hyperloglog directly largescale data processing platform hadoop storm post show get started algebird introduce monoids monad address question get interested first place goal article main goal article spark curiosity motivation algebird concept monoid monad category theory general word want address question big deal care theoretical concept help daily work explain little bit various concept monoids focus post doubt rather err side grossly oversimplifying topic get point across even expense correctness much better resource available online offline teach full detail various item discus said compiled list reference end article starting point understand following concept full detail accurate thorough explanation could come motivating example first look algebird simple example monoids monad based starter example algebird scala max max max comtwitteralgebirdmax int max alternative javalike read ugly syntax reader unfamiliar scala scala max max max comtwitteralgebirdmax int max happening basically boxing two number int value max adding behavior max turn operator function return largest boxed conceptually similar following native scala code native scala scala max max int alternative javalike syntax scala max int point may ask alright big deal native scala example look actually better least thought first simplicity example deceptive lot meet eye first sight beyond trivial example admittedly first example used dull data structure int programming language come builtin functionality add two integer right would hardly convinced value tool like algebird allowed particularly simple thing would require understand sophisticated concept monoids monad much effort little value would say let use different example adding int value indeed trivial imagine working largescale data analytics make heavy use bloom filter application based highlyparallel tool hadoop storm create work many bloom filter parallel money question combine add two bloom filter easy way monoids come play val first bloomfilter val second bloomfilter first second uh performing operation bloom filter instance notably data processing pipeline based common function map flatmap foldleft reduceleft monad come play val filter seq bloomfilter val summary filter flatmap magic happens reduceleft magic combining two hyperloglog instance intuitively could say general idea adding two bloom filter quite similar would add two set b adding would mean creating union set b algebird address problem abstraction nutshell turn data structure monoid semigroup algebird allows put good use work data structure nicely used dealing int double list use largescale data processing tool hadoop storm wait minute case asking following question magic algebird simply something like custom max int class defines method similar following snippet actually bounded type parameter ordering understand latter take look stackoverflow thread algebird implemented like hint nope scala case class max val int def max thisi thati else defined class max scala max max max max max answer yes yes similar implementation quite different analogy provides significantly algebrafu spirit want goal post build data structure twitteruser accompanied max twitteruser monoid view want use two implementing analytics fictional popularity contest twitter like let popularity contest twitter user follower win val barackobama twitteruser barackobama val katyperry twitteruser katyperry val ladygaga twitteruser ladygaga val miguno twitteruser miguno participate olympic spirit val taylorswift twitteruser val winner max twitteruser max barackobama max katyperry max ladygaga max miguno max taylorswift assert winnerget katyperry figuring monoids monad algebird objective article course instead using algebird monoids could also project numberoffollowers field user perform analytics directly int value point however intentionally wanted simple example use case see much understand going behind scene distraction avoided least personal experience journey rabbit hole section entertainment feel free skip post started following twitter folk well twitter dmitriy ryaboy squarecog oscar boykin posco lately talked lot data analytics twitter powered monoids monad tool algebird scalding form code foundation analytics infrastructure example conversation mowhat come thing apparently spreading like contagious disease throughout data analytics code another trigger discussion involing ted dunning mapr teddunning work new data structure called tdigest ted asked whether tdigest associative relate semigroups monoids finally heck semigroups first place dangerous series event began take place side first thought hey coincidentally started pick scala around month ago given algebird written scala might turn interesting finger exercise note focus finger exercise top knew use algebird extends interesting big data tool storm scalding could turn would learn something learning sake could put practical use daily work combination two factor general interest practical applicability eventually caused give curiosity decided put hour two aside read monoid thingies figure whether could leverage algebird purpose might notice point started quite innocently realize moment opening pandora box otherwise quiet peaceful swiss scala functors monoids monad category theory implicits type class aaargh started seemingly innocent journey calm park lane quickly turned opening gate functional programming category theory hell struggle understand thing like functors semigroups monoids algebraic structure mother could love top quickly realized thing implemented scala general algebird particular meant take beginner scalafu whole new level end took full weekend grasp concept point say right know enough dangerous learning curve reminded lot following famous picture figure learning curve common editor image courtesy jose gilgado feel like vi curve brick wall experience else could right said still fear hit finally made initial brick wall may still spiral control like emacs curve picture sitting front keyboard frantically interacting favorite search engine stackoverflow wikipedia usual suspect scala book monad internet monad monoid category endofunctors hmm ok monoid internet monoid semigroup identity semigroup number question mark increase anxiety level internet algebraic structure consisting set together associative binary operation alright see mathematical definition see soup greek letter still get one use internet example haskell programming language censored serious note past day really tour de force felt would recursively dive one new term concept yet new term concept point brain would run stack overflow actually reading magma co contravariance scala bounded type parameter original question tried find answer make long story short really deep rabbit hole alice sight fully surrounded semigroups monoidal diabolical jabberwocky big night given question comment blog post folk least found consolation fact apparently alone finally end hole bit light next section want share learned far hope prove helpful start brief introduction monoids monad followed apply learned algebird handson tl dr version monoids monad michael abridged relation monoids monad monad monoid blend oi depending typesettings pun intended blend easier harder see doubt squint grossly simplified rule thumb monoid want attach operation data object say adding two bloom filter want provide monoid form data object eg monoid bloom filter data structure way combine juggle custom data structure like would plain integer number monad want create data processing pipeline turn data object stepbystep desired final output eg aggregating raw record summary statistic want build one monad model data pipeline particularly want run pipeline largescala data processing platform hadoop storm intent section give highlevel idea concept use section help determine whether want venture rabbit hole want add yet another variant pool monoidmonad article time felt need explain least briefly various concept good better understand use tool algebird course ran across blatant mistake side please let know monoids monoid monoid structure consists set object number binary operation method combining adding number small catch way combine object set must adhere rule described next section one way explain monoid context programming kind adapter bounded view type imagine data structure type say list find way use way conforms monoid law see next section say type form monoid monoid instance binary operation picked behaves like concept addition additive monoid view note tried highlight previous paragraph given type multiple monoidal form additive monoid example might monoids additive variant also sorry forward reference type form monoid monad one dualheaded hydra wellknown list read monoid look like monoid quack like monoid must monoid notion related concept duck typing language python scala algebird implemented static type system though achieve adhoc polymorphism typically use type class achieve similar effect nifty feature type class allow retroactively add polymorphism even existing type control example seq list provided scala standard library thus control figure monoid seen bounded view analogy looking original type different monoidal angle combining two value type law pinkcolored monoid view whatever particular monoid might actually monoids detail monoid set object together binary operation satisfies three axiom listed one way express monoid scala would following trait used type class important see part contract monoid thus e must also adhere monoid law trait monoid def e def op b closure b result operation b also forall b bullet b scala could express axiom following function signature def op b associativity b c equation b c b c hold forall b c bullet b bullet c bullet b bullet c scala could express axiom op b op c op b op c identity element exists element e could also call zero draw link addition element equation e e hold exists e forall e bullet bullet e scala could express axiom following might note capture idea noop e op op e note binary operation satisfying three axiom qualifies data structure monoid necessarily need additionlike operation move look example monad want mention one thing binary function monoid learned must associative helpful binary function commutative even though optional feature would required make monoid transcripted reply sam ritchie summingbird talk cufp question associativity one nice thing monoids commutativity also important example noncommutative datastructures answer baked algebra noncommutativity help data skew particular important noncommutative application twitter want build list monoid key userid time value list tweet timeline ordering matter good get nondeterministic order building list parallel good example associativity commutativity important source transcript sam ritchie summingbird talk cufp example monoids number set object add method combining integer addition e op integer multiplication e op list concatenate e nil op concat set union e set op union also sophisticated example course max int beginning article monoid algebird defines additive monoid standard type seq seq concatenation monoid plus op mean concatenation zero identity element e empty seq class seqmonoid extends monoid seq override def zero seq override def plus left seq right seq left right make instance seqmonoid available implicit value scalaspecific implementation action need done ie related abstract concept monoids effect statement add monoid view seq defined seq instance code define monoid type algebird forget statement algebird complain following implicitnotfound error message find monoid type class implicits need used notion type class implemented scala implicit def seqmonoid monoid seq new seqmonoid algebird actually includes method monoid type class seqmonoid extends key functionality shown use monoid look one whenever data structure back set object eg int data structure list data structure begin checking whether define one monoids data structure start looking operation perform two instance data structure satisfy three monoid axiom closure associativity identity element latter give monoid noop function one thing turn semigroup monoid find monoids data structure hooray practical side mean mean use data structure code expects monoid said think monoid adapter shape monoidcompatible aspect data structure allows fit data structure peg monoid hole hole algebird scalding summingbird twitter supported tool also mean plug data structure big data analytics tool hadoop storm might huge seller productivity gain new data structure data structure monoid form mean plug data structure directly largescale data processing platform hadoop storm secondly general term signifies associativity monoid operation operation data structure parallelized order utilize multiple cpu core efficiently speaking code mean run operation foldleft reduceleft parallelization support yet another reason monoids monad attractive big data tool hadoop storm code run many core per machine many machine cluster word data structure monoid form mean plug data structure directly largescale data processing platform hadoop storm hence monoids enable mapreduce divide conquer let quote sam ritchie sritchie former twitter engineer founder paddleguru cool idea way go sport concrete practical application monoids twitter well actually quoting transcript talk one cool feature visit tweet want reverse feed thing embedded tweet mapreduce graph come see impression find key tweet emit tuple tweetid map url long since map monoid run parallel contain list viewed map long since popular tweet embedded million website use countminsketch note reader sam bessalah point transcript wrong said accountment sketch approximate data structure deal scale summingbird layer speaker sam ritchie show stage filter event generates keyvalue pair emits event twitter advertising also built summingbird various campaign built building backend using monoid express need majority work ui work frontend remember solve system problem part vision source transcript sam ritchie summingbird talk cufp see cufp slide summingbird detail thirdly compose monoids instance form product two monoids tuple type product also monoid lastly combine monoidal data structure monad see benefit feature monad provide point might guess reason ted dunning asked whether tdigest data structure working associative turned semigroup monoid one two mystery solved monad monad update reader pointed section explains rather monad used really concur even skip discussion monad law etc intentionally post already quite long focus motivation article see indepth introduction monoids monad question interested first place use course understand need detail added list reference literature end article read leisure course think important piece information mentioned directly something happens plain wrong please let know difficult write article topic way understood beginner time also plea expert monad structure defines way combine function represents computation defined sequence transformation turn original input final output one step time think like function chaining similar h g f x interesting aspect case monad type value piped function chain may change along way instance may start int end double bloomfilter different monoid always retain original type closure requirement see monoid law one best analogy monad found following adapted wikipedia compare monad physical assembly line conveyor belt monad transport piece input material data functional unit function data transform piece one step time think skeleton car turned final car sequence step web server log file raw data turned business information increase ad impression emea market month figure monad seen data processing pipeline monad used turn original input final output one step time sticking analogy monad enables decorate processing step assembly pipeline additional context environment instance monad could carry state information used function pipeline would example state monad alternatively monad could log going within function file database would example io monad game developer could use monad carry representation state game environment current level function pipeline would model player interact environment look monad detail let u take brief detour storm implementing bolt storm ie storm version functional unit data processing pipeline come across prepare execute method see storm tutorial public class triplebolt extends baserichbolt private outputcollectorbase collector note storm provides context literal context value collector value bolt functional unit data processing pipeline override public void prepare map conf topologycontext context outputcollectorbase collector thiscollector collector storm version monad fn function discus next section override public void execute tuple input int val inputgetinteger int tripled val collectoremit input new value tripled collectorack input rest omitted note storm provides environmental information context bolt one example could point finger code say would good place use monad specific case would say would primarily kind iomonad collector instance allows bolt write output downstream bolt via network communication monad detail one way capture concept monad scala basically definition monad algebird important see part contract monad thus apply flatmap must also adhere monad law trait monad also called unit paper return haskell def apply v also called bind paper haskell def flatmap u fn u u alright going apply box value monad example int monad list word goodol constructor monad flatmap turn potentially different type parameter u also boxed type monad ie u plain english mean list monad ever produce another list monad type element list monad may change way happens controlled second parameter flatmap function u example int u double list monad fn int list itodouble itodouble ie u ran combination input list int would get output list double note flatmap provides boxing instance input value function fn via currying way fn may leverage information functionality embedded monad including function beyond contractually required flatmap one example monad ie monad algebird flatmap function monad call get function monad monad also kind adapter view similar way described monoids still see similar monoids monad try squinting harder similar monoid law discussed monad law rule actually similar monoid brother decided discus monad law post feel already long may update post later point though meantime take look following reference monad law haskell remember return haskell mean constructor apply scala haskell flatmap monad elephant series blog post james iry scala hope notice similarity identity rule monad similar identity element e monoids monoids monad function must associative example monad beginning section monad already mentioned statemonad iomonad well may still bit vague let u look concrete maybe simpler example collection type typically monad example take list constructor list act unit give list box instance list appropriate flatmap function map built flatmap constructor implementation monad list algebird implicit val list monad list new monad list def apply v list v def flatmap u list fn list u mflatmap fn see monad list simply adapter existing apply flatmap function list list scala already ship monad look feel move next section one interesting facet monad monoid form algebird instance provides default monoid view semigroups monad semigroup monad class monadsemigroup implicit monad monad sg semigroup extends semigroup import monadoperators def plus l r lv l rv r yield sgplus lv rv monoid monad class monadmonoid implicit monad monad mon monoid extends monadsemigroup monoid lazy val zero monad monzero group ring field default automatic monoid view however algebraic structure must check groupringfield law hold monad use monad look one already seen monad thought composable computation description mean use build powerful data processing pipeline pipeline powerful term feature functionality also parallelized one reason monad attractive field largescale data processing code run many core many machine time might say almost coding transform one value another value agree think idea picture monad monad everywhere see beginning article originates two two mystery solved yay algebird finally getting close productive algebird figure previous tl dr section monoids monad still maybe bit long recall original goal beginning post build data structure twitteruser accompanied max twitteruser monoid view using algebird wanted use two implementing analytics simple popularity contest twitter let popularity contest twitter user follower win val barackobama twitteruser barackobama val katyperry twitteruser katyperry val ladygaga twitteruser ladygaga val miguno twitteruser miguno participate olympic spirit val taylorswift twitteruser val winner max twitteruser max barackobama max katyperry max ladygaga max miguno max taylorswift assert winnerget katyperry let start creating monoid first step create data structure twitteruser create monoid view want build max monoid twitteruser eventually must come way order twitteruser value either use ordering ordered trait scala either way work let say go ordered route must answer design question consider ordering behavior defining feature twitteruser general need behavior max twitteruser monoid view general feature would add twitteruser directly needed monoid also decide add case add ordering behavior twitteruser directly show implement option small note futureproof make numfollowers long intmaxvalue billion le potential number twitter user planet earth happy let one slip though case class twitteruser val name string val numfollowers int extends ordered twitteruser def compare twitteruser int val c thisnumfollowers thatnumfollowers c thisnamecompareto thatname else c code mean twitteruser support comparison operation like defined compare method ordered trait scala twitteruser foo twitteruser bar boolean false case compare method also used monoidal binary function max twitteruser monoid build next section work compare satisfies three axiom described section monoids creating max monoid twitteruser simple leverage factory method provided algebird called maxmonoid zero element twitteruser monoid traditionally also called mzero academic paper use intminvalue practice would typically constrain numfollowers twitteruser anyways negative value would val zero twitteruser minuser intminvalue monoid algebird type class hence use implicits make monoid available rest code implicit def twitterusermonoid monoid max twitteruser maxmonoid zero ok maybe feel bit like cheating monoid created behind scene maxmonoid maxmonoid algebird code zero property def monoid zero implicit ord ordering monoid max monoidfrom max zero l r ordgteq lget rget l else r still pretty straightforward would say lot magic long know implicits type class scala work generally max algebird semigroup monoid type could come would notion zero element used max existence zero element one thing separate semigroup monoid see algebird orderedsemigroupscala object max defines implicit def semigroup specific type int long also defines monoid behavior type notion zero element case zero element hence support semigroup also monoid behavior would wanted add compare monoid original type algebird code example use case definition max list monoid may notice us ordering ordered example ignore small difference key point compare method defined part max list monoid instead ducttaped list directly implicit def listmonoid ordering monoid max list monoid list nil new ordering list tailrec final override def compare left list right list int left right match case nil nil case nil case nil case lh lt rh rt val c ordering compare lh rh c compare lt rt else c go one monoid view twitteruser else find another monoid form one question ask working data structure take look algebird code notice many type list quite algebraic form one thing want mention may consider creating additive monoid twitteruser ie monoid support like operation come good example result adding two value would make sense eg could add usernames meaningful way said one case adding two twitteruser value would make sense capture idea one follows ie create relationship link two keep mind though monoids friend must adhere closure principle start twitteruser value perform monoid operation end result must always another twitteruser value course relationship modeled code twitteruser monoid defined creating monad sufficient understanding monad algebird implement monad leave exercise reader starting point monadscala algebird however good idea kind monad could showcase perhaps something related twitter match twitteruser monoid example please let know comment key algebraic structure algebird following table juxtaposition key algebraic structure notably implemented algebird help navigate algebird code base also figure algebraic structure data type might support ie turn semigroup even monoid think general notion adding one thing another operation two list int instance could concatenation two instead say trying add individual int element list together operator defined algebird small algebird faq error find type class type run error mean trying use operation supported algebraic structure working specific example set algebird monoid form thus support additionlike operation multiplicationlike operation scala set set console error find ring type class scalacollectionimmutableset int set set combine different monoids theory combine different monoids max int min int form product must exist appropriate algebraic structure product right instance following code work algebird ship algebraic structure max int min int scala max min console error find semigroup type class product serializable max min monad really everywhere one thing yet investigated detail using monad compare pattern abstraction instance use monad clojure author jim duey actually wrote whole series blog post covering monad quick initial search observed clojure developer apparently use different construct achieve similar effect insight share please feel free reply post summary hope post contributes little bit understanding rather abstract concept monoids monad put good practical use via tool algebird scalding summingbird one lesson learned working monoids monad nice opportunity read formal concept category theory time realize put practical use engineering notably largescala data analytics side want thank twitter engineering team twittereng making tool available open source community also sparking interest practical application algebraic structure category theory general shoutout various people wrote blog post topic shared insight place stackoverflow see reference section end article said lot new information swallow short period time quest worth many thanks reference monad monoids tried categorize reference easy advanced read course highly subjective mileage may vary easy read functional programming scala p chiusano r bjarnason published manning includes chapter monoids monad implement scala monad metaphor daniel spiewak monad monoid category endofunctors problem question stackoverflow starting monad etc recommend read second answer first monad elephant series blog post james iry scala functors applicatives monad picture aditya bhargava monad law haskell remember return haskell mean constructor apply scala haskell flatmap wikipedia article algebraic structure found selective reading help understanding try understand section article notably liked juxtaposition semigroups monoid group ring etc highlighted similarity difference later discovered algebird code structured similarly tell semigroup monoid easier time navigating code advanced read summingbird category theory speaking experience would say need understand full detail category theory link contain information need gain enough understanding monoids monad productive short period time however used reference fill gap remained reading source remember jump back forth academic reference handson resource introduction category theory harold simmons novice category theory preferred text category theory computing science see unlike latter though book simmons available free category theory computing science michael barr charles well available free pdf seems seminal work category theory worth read interested mathematical foundation theory page
223,Lobsters,scala,Scala programming,Evening w/ Martin Odersky! (Scala in 2016) +Spark Approximates +Twitter Algebird,https://www.youtube.com/watch?v=_-I_X-k3D8A,evening w martin odersky scala spark approximates twitter algebird,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature evening w martin odersky scala spark approximates twitter algebird youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature evening w martin odersky scala spark approximates twitter algebird youtube
224,Lobsters,scala,Scala programming,Martin Odersky: Scala in 2016,http://files.meetup.com/18712511/Scala2016.pdf,martin odersky scala,,ðäæ obj length r filter flatedecode stream q ª ïðoñ wÿæmüæ
225,Lobsters,scala,Scala programming,Pipe |> Operator in Scala,https://medium.com/@anicolaspp/operator-in-scala-cbca7b939fc0,pipe operator scala,f scala scala scala functional composition scala pipe operator scala f scala pipe f pipeops pipe implicit conversion scala c developer pipe f x x scala map map map f item f item scala map map square filter map scala scala conclusion scala f scala scala green heart hacker noon ami accepting submission discus advertising sponsorship read page likemessage u facebook tweetdm hackernoon latest tech story trending tech story,code exchange earlier week coworker saw weird symbol code rapidly asked seemed surprised finding pipe forward operator f hasmy friend learning scala want use construct scala lack let see add construct every scala objectfunctional compositionusing make easy compose function code becomes simpler write understand otherslet see example make use composition simpler write well could write something like redefined instead nested function call apply function object another linearlyi know actually make sense something like scala implement easilypipe operator scalalet take look f defines mimic scala let see defined class pipe receives value type apply function f calling method also defined object pipeops implicit conversion pipe object want please take look article implicit conversion scala c developer information implicitonce defined use object let see practiceadded original writing new way defining pipe isadded original writing end herein transform pipe apply passed function f x x scala implicit help lot processmaplet see could define map functionmap applies function f item item signature little disturbing since normally would send f second parameter item first one order take advantage scala syntax sugar however nothing wrong another way define mapwe call map let see another example various operatorsnote defined square composed filter map using operator without using code look like follows normally define kind function scala essentially samelet compare current definition way would natural scala languageconclusionswe seen scala composes function function composed f using also saw implement operator scala comparing define function using pipe forward operator sure people actually using since scala another constructor code styling enable another set possibility yet still use benefitshope piece useful enjoyed please recommend green heart others benefit ithacker noon hacker start afternoon part amifamily accepting submission happy discus advertising sponsorship opportunitiesto learn read page likemessage u facebook simply tweetdm hackernoonif enjoyed story recommend reading latest tech story trending tech story next time take reality world granted
226,Lobsters,scala,Scala programming,ScalaDays schedule hints at upcoming native backend including AOT compiler and runtime for Scala,http://event.scaladays.org/scaladays-nyc-2016#!#schedulePopupExtras-7571,scaladays schedule hint upcoming native backend including aot compiler runtime scala,training registration closed conference sold still seat left fast track akka scala advanced scala register training writing email scaladays triforkcom fast track akka scala seat left please contact scaladays triforkcom want attend training prerequisite trainer advanced scala seat left please contact scaladays triforkcom want attend training objective audience prerequisite trainer apache spark workshop sold please contact scaladays triforkcom want waiting list training course objective audience prerequisite setup requirement trainier advanced akka scala sold please contact scaladays triforkcom want attend training prerequisite trainer,training want get scala day new york register inperson training course scala day conference training twoday training take place thursday friday may pm day course designed developer level proficiency lightbend reactive platform training take place ama executive conference center new york broadway new york ny closed conference sold still seat left fast track akka scala advanced scala register training writing email scaladays triforkcom fast track akka scala seat left please contact scaladays triforkcom want attend training twoday course introduces experienced application developer reactive akka toolkit runtime methodology enable creation realworld actorbased system scala single jvm course extensive handson work successive exercise build upon prior lesson learned produce fully functional application eventdriven resilient conclusion course prerequisite code example exercise written scala basic knowledge scala covered fast track scala course required student bring laptop java higher installed participated course know design scalable faulttolerant application using akka actor know configure test tune akka application know best practice designing asynchronous eventdriven system using akka confident start using akka production system trainer katrin shechtmankatrin scala functional junkie since daily using scala akka lightbend spends much free time unsolicited coding proud torontonian scala fighter coorganizer toronto scala meet advanced scala seat left please contact scaladays triforkcom want attend training already programming experience scala want understand advanced feature course designed help developer fully understand topic advanced objectfunctional programming power scala type system implicits etc course also cover leverage feature create welldesigned library dsl utilizing proven best practice objective participated course understand aspect objectfunctional approach know able apply advanced feature scala type system fully understand implicits type class confident creating library dsl scala audience application library developer wishing master scala prerequisite student taking course full understanding concept taught fast track scala least month fulltime handson development scala setup requirement complete exercise course student need install following class trainer patrick premont alejandro lujan toro functional programming architect lightbend patrick architect develops software using functional programming paradigm specializes scala game development aias senior software developer training lead lightbend alex split time architecting building webbased software using lightbend stack scala akka play coaching others effectively use techologies rare combination technical business expertise alex ability build extraordinary software effectively meet core business need client add incredible people skill alex build usable functional software excels training others adopt lightbend stack apache spark workshop sold please contact scaladays triforkcom want waiting list training course twoday course designed teach developer implement data processing pipeline analytics using apache spark developer use handson exercise learn spark core sqldataframe streaming mllib machine learning apis developer also learn spark internals tip improving application performance additional coverage includes integration mesos hadoop reactive framework like akka objective participated course understand use spark scala apis implement various data analytics algorithm offline batchmode eventstreaming application understand spark internals understand spark performance consideration understand test deploy spark application understand basic integrating spark mesos hadoop akka audience developer wishing learn write datacentric application using spark prerequisite experience scala completion fast track scala course experience sql machine learning big data tool helpful required setup requirement trainier petro verkhogliad long tranpetro vekhogliad certified instructor spark workshop work lightbend software developer hold msc computer science petro passionate functional programing application ailong programming fiddling code year ever since dad bought idea could write code realworld work instead playing simcity sparked young imagination one first program built qbasic script calculate expected wage paper route advanced akka scala sold please contact scaladays triforkcom want attend training twoday advanced course building distributed reactive application using akka scala intended developer already strong understanding fundamental building application using akka scala single jvm looking learn scale multiple node party system course extensive handson work successive exercise build upon prior lesson learned produce fully functional application eventdriven resilient conclusion course prerequisite basic knowledge akka covered fast track akka scala course well basic knowledge scala covered fast track scala course least two month practical experience developing akka scala student bring laptop java higher installed participated course know use akka remoting clustering feature understand integrate party system know create restful http layer confident start using akka large scale trainer wade waldron michael nashwith bachelor computer science honour software engineering university saskatchewan wade spent last year building rock solid software game strong focus test driven design domain driven design service oriented architecture event driven architecture agile development wade strives another software developer strong believer software craftsmanship commitment code readability maintainability shine though work also author recently published book applied akka patternsfor thirty year michael designed developed shipped consulted software development project client shape size advocate software craftsmanship expertise project management architecture michael amongst earliest adopter lightbend reactive platform year experience working scala akka spray wealth knowledge experience unrelenting passion software development make extremely valuable trainer
227,Lobsters,scala,Scala programming,Martin Odersky: Scaling DOT to Scala – Soundness,http://scala-lang.org/blog/2016/02/17/scaling-dot-soundness.html,martin odersky scaling dot scala soundness,last blog post recap problem bad bound loophole caused scaling dotty plugging loophole soundiness advocated simulate sk combinators,wednesday february martin odersky blog last blog post introduced dot minimal calculus underlies much scala dot much academic exercise give u guideline design sound type system full scala recap problem bad bound argued previous blog post danger pathdependent type system like face inconsistent bound alias instance might type alias scope part program another part type member known connect two part end allowing assigning string int vice versa unsound crash runtime classcastexception problem obvious practical compile time analysis dot scala ensures type good bound type contain abstract type member bound refined elsewhere several independent refinement might lead together bad bound problem barring whole program analysis specific point program figure straightforwardly dot problem resolved insisting every path prefix p type pt runtime concrete value way check good bound object created new check easy object created know class insist nested type class alias consistent bound far good loophole caused scaling want scale dot result full scala several loophole open come fact prefix type selection might value constructed new run time loophole classified three category prefix value might lazy never instantiated anything lazy val p p pt note trying access lazy value p would result infinite loop using p type force evaluation might never evaluate p since p initialized new bad bound would go undetected prefix value might initialized null val p null pt problem similar first one p initialized new know nothing bound prefix might type type projection associated runtime value fact construct soundness issue case look discussion issue dotty repository github issue work fundamentally way construct type type member bad bound say use left subtyping turn expression type expression type use right subtyping turn expression expression type nothing def f x pt x def g x pt nothing x taken together g f x convert every expression expression type nothing since nothing subtype every type mean convert arbitrary expression type choose feat impossible promise course promise usually broken runtime failing classcastexception plugging loophole get back soundness need plug loophole necessary measure taken pull request pull request tightens rule override lazy value lazy value override implement nonlazy value tightens rule lazy value appear path must final must concrete type known consistent bound allows type projection concrete type known consistent bound look like sufficient plug soundness problem plug need make type system track nullability detail nullability tracking nice feature right added incentive implementing would help ensure type soundness one subcase nullability checking much harder others object reference xf might null run time field f yet initialized lead soundness problem roundabout way issue identified fact scala guarantee program run completion without aborting every field eventually initialized every nonnull field good bound therefore way initialized field f could cause soundness problem program question would never get initialize f either go infinite loop abort exception systemexit call reaching initialization point f valid question whether type soundness guarantee extend class program might want draw line resort runtime check exclude program soundness guarantee give research community coined term soundiness kind approach advocated necessary restriction type projection problematic invalidate idiom typelevel programming instance cute trick making type system turing complete simulate sk combinators would longer work since one relies unrestricted type projection hold encoding typelevel arithmetic ease transition continue allow unrestricted type projection flag even though potentially unsound current dotty compiler flag language import language could something different compiler eg unsafe maybe find rule le restrictive one still sound one aspect nonnegotiable fundamental deviation principle laid dot need proven mechanically correct like dot achieved lot dot proof make sure backslide experience past year taught u one thing meta theory type system many surprise store one might think mechanical proof essential
228,Lobsters,scala,Scala programming,Type all the things!,http://jto.github.io/articles/type-all-the-things/,type thing,giving explicit type every element class obvious benefit extra safety documentation make compiler work manage resource automatically mandubian everything hlist shapeless anorm scrapping boilerplate basic anorm anorm join conclusion,post demonstrate type absolutely everything scala program demonstrate benefit give technique scrap boilerplate giving explicit type every element class first thing first mean type absolutely everything let take simple example say defined following case class look perfectly reasonable pretty similar code every scala developer writing everyday would write okay go little extra step give type every field case class would bother adding boilerplate definition site expect also make harder create new instance user let explain obvious benefit fair probably see couple obvious benefit may thinking worth going require lot work intend convince otherwise benefit huge amount extra work tiny even make compiler work reduce work extra safety obviously first benefit extra type safety example impossible pas something else userid following function may feel like much huge ask believe proper type everything make job easier everyday especially refactoring example wo nt fear change function parameter anymore nothing break compiler guarantee simple thing make program significantly robust especially codebase grows larger documentation let say stumble upon following method long well nt know change suddenly becomes obvious best thing doc always date moreover type propagate inside code mean everything necessarily least basic doc make compiler work manage resource automatically one pretty simple trick came mandubian work future real application probably define multiple executioncontext example may executioncontext db call default executioncontext everything non blocking sadly executioncontext tricky manage could easily use default execution context db call accidentally make thing worse screwing executioncontext cause really bad bug horribly easy randomly observe thread starvation production passing wrong executioncontext application suddenly stop anything second user happy bug happens hard find cause therefore really hard fix luckily solution problem extremely simple give type executioncontext simplified example play app working let say define method asynchronously call database call site import executioncontext compiler automatically pick proper one everything hlist one probably favorite trick may know shapeless provides automatic conversion case class hlist using generic familiar hlist probably realized pretty amazing thing type hlist unique case le treat hlist sorted map value indexed type give proper type every field case class much reduce amount code write show couple example using anorm like simplicity library use naively end writing quite lot boilerplate let say define simple parser untypeduser class see write explicit pattern match extract field user class obviously quickly becomes tedious number class field class grows moreover easy mix order field sake proving point although example trivial confident nt catch bug turn anorm object hlist using following function use conjunction generic got rid boilerplate still risk mixing field firstname lastname use typed user problem mixed field fixed since every field type fairly confident mixing field anymore sadly introduced quite lot boilerplate since declare new anormrowparser type luckily shapeless save u scrapping boilerplate basic anorm simple solution use shapeless automatically derive instance column class extending anyval relevant code usage breaking change user class would cause compilation error parser note possible derive entire parser using labelledgeneric implementation left exercise reader anorm join come join clause anorm particularly tedious parse entire row match manually group data together etc let say defined new class getting row db would typically look like think agree horrible nt type everything also much error prone strong typing hlist greatly simplify thing better every way mostly easier select field type using hlist type indexed map work field type making mistake grouping unlikely code shorter simpler safer another benefit customized parser type example may special logic extracting age different every int based anyval case could simply explicitly define column age derive class conclusion hopefully convinced typing everything way go convinced yet encourage try real application applied philosophy last year every project never go back benefit cost minimal brainer
229,Lobsters,scala,Scala programming,"A Small, Nice Thing",http://codahale.com/a-small-nice-thing/,small nice thing,small nice thing clojure complexity scala ruby python javascript go clojure complexity scala python ruby javascript go clojure tl dr updated january michalmigurski colby anthonybriggs updated january lindvall,small nice thing stop smell rose jan lately programming clojure enjoying quite bit first lisp return dynamic typing many way first truly functional language used anger one thing enjoying clojure regularity effect composability consider taking two sequence number adding element together pairwise fashion left begin array ccc array right left begin array ccc array right left begin array ccc array right purely syntactic perspective usually simple task syntactic complexity often misleading learning new programming language often stop consider many concept would need explained novice familiar underlying domain complexity scala scala need explain tuples regular method notation zipped dotlessparenlessinfix method notation eg placeholder syntax ie different character elsewhere anonymous function would probably include talk contextually distinguishable everything else need explain scalaz semigroups typeclasses thirdparty dependency management tool import implicit method infix method notation c c lot way golf scala require large number concept explain ruby azip b map x x ruby would require explanation method invocation zip map method block parameter destructuring infix notation python sum zip b python need explain list comprehension function invocation sum zip javascript amap function x return x b javascript requires method invocation map anonymous function notation return keyword infix operator array access go make int len x range x b go unsurprisingly bit verbose need explain make slice type notation len short variable declaration ie range loop index expression assignment clojure clojure need explain sexpressions map literally clojure referring function simple using symbol complexity happens need add third list number c scala b c zippedmap scala handle relatively gracefully requiring receiver another infix operator anonymous function python sum zip b c python need additional parameter zip sum operates iterables zip return list tuples form almost identical ruby azip b c map x z x z ruby need additional parameter zip another addition javascript amap function x return x b c javascript add another array access addition bad go make int len x range x b c go handle situation similarly clojure like python clojure remains almost exactly original add c additional parameter map variadic avoids tuple nesting seen ruby scala like python sum neither infix clojure thing binary like map variadic function either map fixed arity would possible unlike python though clojure example require list comprehension python map function longer considered pythonic tl dr regularity clojure programming language provides many opportunity composition compared programming language turn allows concise expression common bit code think nice updated january changed python example use list comprehension assured idiomatic way thing thanks michalmigurski cleaned confusing sentence second paragraph thanks colby included infix notation ruby concept changed python example use sum seems pretty nice thanks anthonybriggs updated january changed second ruby example use multiple argument zip thanks lindvall
230,Lobsters,scala,Scala programming,Talk Proposals for the Northeast Scala Symposium 2016,https://github.com/nescalas/proposals-2016,talk proposal northeast scala symposium,northeast scala symposium talk proposal ne scala proposal closed proposal due day ticket go sale meetup voting open voting close winner announced day talk day unconference talk length faq talk get voted guaranteed ticket talk nt voted still give day unconference good idea submit multiple proposal video talk published open issue submit talk closed directory formatting sample proposal last year proposal,northeast scala symposium talk proposal ne scala select speaker talk proposed peer later open voting select talk want see proposal closed proposal due january day ticket go sale january noon meetup voting open january sooner voting close january winner announced january day talk march day unconference march time philadelphia time eastern standard talk length following number talk selected voting long minute medium minute lightning minute timing include time audience question speaker chooses leave time faq q talk get voted guaranteed ticket yes still pay even conference organizer pay together q talk nt voted still give day unconference course yes please q good idea submit multiple proposal hard say one proposal get danger splitting vote hand tally vote informally take votesplitting partially account nt want lose popular speaker equallysplit vote q video talk published yes unless speaker object day though different question open issue organizer answer also ask question pull request submit talk closed repository submit pull request adding file proposal directory basic talk including oneparagraph summary length specify either minute long minute medium minute lightning formatting use markdown format copy sample proposal sample see last year proposal multiple proposal go separate file filename nt really matter want suggestion lastname nameofthetalkmd ensure filename extension md markdown please nt worry much exact formatting figure
231,Lobsters,scala,Scala programming,LambdaConf 2015,https://www.youtube.com/playlist?list=PLE7tQUdRKcybh21_zOg8_y4f2oMKDHpUS,lambdaconf,,
233,Lobsters,scala,Scala programming,Puzzle to unlock all LambdaConf 2015 videos on functional programming,https://twitter.com/lambda_conf/status/679031128284467200,puzzle unlock lambdaconf video functional programming,,detected javascript disabled browser would like proceed legacy twitter yes
234,Lobsters,scala,Scala programming,Moving a team from Scala to Golang,http://jimplush.com/talk/2015/12/19/moving-a-team-from-scala-to-golang/,moving team scala golang,http codahalecomdownloadsemailtodonaldtxt http wwwquoracomislinkedingettingridofscala http wwwquoracomistwittergettingridofscala http wwwlinkedincompulsescalawayoutowenrubel sean berry http twittercomjimplush,scala long part crowdstrike stack primary language fact helped lead adoption scala first started develop application back fact one pro decision making process wanting come crowdstrike several early developer interested adopting well seemed nice fit come company called gravity also heavy scala user primary language used enjoyed saw power thought could prevent issue saw scala crowdstrike grew high scale analytics batch job hadoop chief architect hi bissel lambda architecture cool kid recent quote one senior engineer prompted finally write post describing transitioning stack go new service default go developer choice instead waiting end post clarify scala leaving stack completely fact complement go shine scala big part machine learning analytics stack interop java project use ability provide nice dsl analyst use still make scala solid choice becoming specialized tool v core development language going take lens technical director lens need scale company early day engineer engineer business grows maintainable code base people cross project easily get new hire speed rapidly remember first saw potential issue scaling scala gravity back close end day major issue reported production affecting large customer several u started investigating able track source issue problem idea code first came across strange symbol seen project spaceship operator someone said loud hell implicit magic going immediately apparent cmdb traverse method yielded nothing ide find symbol ide improved since quick googling yielded nothing well stumped source pulled developer wrote code unreachable vacation figure noticed new library included called scalaz hour later tracked mystery symbol grok going made fix life good blip turned fix taken minute fix took hour point started seeing split engineering team scala powerful language come academic root give enough flexibility easily start writing writeonce type code scala developer typically travel two path better java camp heart applicative functors camp better java camp like terseness scala standard feature make scala generally enjoyable java functional programming new scala code main focus heart applicative functors camp really take new functional world begin expand knowledge deeper path bring already functional background place like haskell based experience start split camp excellent programmer say one side superior semifunctional side potentially generalist working across language may want learn lambda calculus theory work api server example code sample project one advanced scala developer start may look say awesome say wtf thousand line like something whole team could work half team want anything developer wrote brilliant person fact divided half team problem luckily caught code review rejected based internal guideline never made production scaling engineering team split becomes apparent trying get new hire speed scala lot rough edge already around getting build environment sbt pain ide environment pain release upgrade pain slow build time add top heavy dose functional concept required proficiency ramp time grows dev output slows upfront training existing developer required slows thing well sbt also real sore spot always one person actually know heck sbt debug everyone issue aware scala scalaz mutually exclusive seen issue without also question scala hard never someone able learn language investment make investment something hope paying somehow line whether faster time market higher performancelower cost increased stability specialized place seen happen scala general case discussed scale wanted invest doc guideline example project reality think investment would come back v go unique company worked twitter gone growing pain well company talked conference people know working scala common theme fact high performing small team going scala trying grow engineering organization uphill battle already invested jvm solid choice borrows concept scala make java easier work reference larger team seeing issue yammer http codahalecomdownloadsemailtodonaldtxt linkedin moving scala http wwwquoracomislinkedingettingridofscala former twitter platform vp heard saying may better choice available made choice scala similar reason http wwwquoracomistwittergettingridofscala also see trend twitter latest os project released java heron distributedlog etc fact telling line hero release read written industrystandard language javacpython efficiency maintainability easier community adoption scala way article http wwwlinkedincompulsescalawayoutowenrubel funny tweet subject go enters picture one go reason existence make developer productive limit number way something opinionated view world compiler level pushed back go adoption internally worried splintering even another language people learn already quite technology play internal policy looking adopting new technology least people willing support production issue much prod ing thanks sean berry getting past number dug go world saw solved lot issue scala organizational scaling level fast build time small binary one file built formatting great tooling built test framework race detector visual profilers nice concurrency model wow sold sample project go successful another another expanded number developer go started become language choice people wanted write jump go project know immediately miss immutable type great feature scala sure think maintainability side story great overlook go seen faster ship time better stability better test coverage written one benefit go widening pool background hire take someone language background ramped go week scala side jvm learning curve java world container black magic jvm tuning profiling tool new developer hired ramped week v month lot service operate extremely high scale across several division majority service written go one last holdout move go wrote first project said afterward wow read library knew exactly read scala version library four time still idea see guy like much one senior engineer previously worked one largest web property world process complete bottom initiative development team pushed move go process hundred thousand message per second terabyte data per day golang service try equate go simplicity weakness seen opposite pretty powerful stuff go power simplicity error handling seemingly annoying first actually lead robust error handling stability application code throw something hope get caught somewhere google also major investor technical alignment open access additional resource leverage bash scala scalaz love validationnel give real world context scala production environment year two company still use scala love hacking scalding ambitious project coming likely scala based sold anymore core language trying scale fast growing engineering team always exception team really love scala make work company go sits place happens need small ish high performance service light transformation shuffling data around putting apis front data supporting system go make easy interested hearing chatting follow twitter http twittercomjimplush hiring update marius one twitter scala guru also seems getting keen go code review would solved issue someone else would stumbled symbol asked clarity understanding would help introduced library team easier surprise unfortunately gravity required code review place code review place crowdstrike however given every person every code review guarantee
235,Lobsters,scala,Scala programming,Rock-solid Shell Scripting in Scala,https://vimeo.com/148552858,rocksolid shell scripting scala,handsonscalacom lihaoyigithubioammonite,talk given scala exchange dec want learn scala ammonite check book handson scala programming handsonscalacom people using scala use build highperformance typesafe application people talk scala let scaleup server code developer maintainability unfortunately underneath application usually life ratsnest bashscripts thing keep everything running nt need case ammonite lihaoyigithubioammonite project aim scale scala targeted code run one machine written single person lifetime le second li show scala excellent language programming inthesmall want rename file count line java code source tree traditionally would reach bash could reach scala instead presentation slide
236,Lobsters,scala,Scala programming,Quill: Compile-time Language Integrated Query for Scala,http://getquill.io/,quill compiletime language integrated query scala,,freelibre compiletime language integrated query scala
237,Lobsters,scala,Scala programming,Introduction to Property-based Testing using ScalaCheck,https://blog.codecentric.de/en/2015/11/introduction-to-property-based-testing-using-scalacheck-2/,introduction propertybased testing using scalacheck,,checkreverse method job nice thing implementation simple hinted earlier point though might want exchange implementation better version one problem naive reverse approach every string check need twice memory perform actual equality check growing adoption palindromecheckingservice however user want larger larger string checked palindromicity reaching million char length want check large string unthinkable allocate twice memory certainly better quick round white board come alternative way check palindromicity keep track two index starting left right palindrome idea work way towards middle comparing character go start implementation first try come def checkindices string boolean tailrec def loop int j int boolean j match case j j true case j j false case j j loop loop test need property pretty sure checkreverse correct implementation use reference property checkindices forall maybepalindrome checkreverse checkindices say string generated maybepalindrome checkindices method return result checkreverse define maybepalindrome val maybepalindrome gen string genoneof palindromegen arbitrary string note use oneof method gen create generator sometimes produce palindrome sometimes arbitrary string let test new palindrome checker test info palindromecheckindices exception raised property evaluation info info exception javalangstringindexoutofboundsexception string index range forgot empty string okay easy let fix run test test info exception raised property evaluation info info exception javalangstringindexoutofboundsexception string index range another error time handling palindrome even number char investigating come conclusion forgot consider happens two index never meet pas due even number char next step current algorithm would continue j swapped position continue index run char leading stringindexoutofboundsexception fix add another case implementation def checkindices string boolean tailrec def loop int j int boolean j match additional case check adjacent index case j j j case j j true case j j false case j j loop additional check palindrome sisempty loop feeling lucky run test test info palindromecheckreverse ok passed test info palindromecheckindices ok passed test info passed total failed error passed success randomly generated string implementation checkindices returned result reference implementation checkreverse
238,Lobsters,scala,Scala programming,An asynchronous programming facility for Scala,https://github.com/scala/async,asynchronous programming facility scala,scalaasync quick start use modern scala compiler add dependency sbt example maven example enable compiler support sbt example maven example start coding limitation must directly control flow async expression must nested within comparison direct use api,scalaasync dsl enable direct style programming composing value wrapped scala future quick start include scalaasync existing project use library published maven central sbt project add following build definition buildsbt projectbuildscala use modern scala compiler scalaasync scala required add dependency sbt example librarydependencies orgscalalangmodules scalaasync librarydependencies orgscalalang scalareflect scalaversionvalue provided maven project add following make sure use correct scala version suffix match project scala binary version maven example dependency groupid orgscalalangmodules groupid artifactid artifactid version version dependency dependency groupid orgscalalang groupid artifactid scalareflect artifactid version version scope provided scope dependency enable compiler support async add xasync scala compiler option sbt example scalaoptions xasync maven example project plugin groupid groupid artifactid scalamavenplugin artifactid version version configuration args arg xasync arg args configuration plugin project start coding import scalaconcurrentexecutioncontextimplicitsglobal import scalaasyncasync async await val future async val future boolean async true val async await await else async async mark block asynchronous code block usually contains one await call mark point computation suspended awaited future complete default async block operate scalaconcurrent future promise system adapted alternative implementation future pattern consider following example def slowcalcfuture future int def combined future int async await slowcalcfuture await slowcalcfuture val x int awaitresult combined line defines asynchronous method return future line begin async block compilation content block analyzed identify await call transformed nonblocking code control flow immediately pas line computation async block executed caller thread line begin triggering slowcalcfuture suspending calculated finished trigger suspend finally add result complete combined turn release line unless already timed important note line nonblocking parallel wanted parallelize two computation could rearrange code follows def combined future int async val slowcalcfuture val slowcalcfuture await await limitation await must directly control flow async expression await nested local method object class lambda async list foreach x await f x invalid await must nested within try catch finally implementation restriction may lifted future version comparison direct use future api computation could also expressed directly using higherorder function future def slowcalcfuture future int val slowcalcfuture val slowcalcfuture def combined future int yield async approach two advantage use map flatmap code directly reflects programmer intent require u name result advantage even pronounced mix control structure async block async block compiled single anonymous class opposed separate anonymous class closure required generator forcomprehension reduces size generated code avoid boxing intermediate result
239,Lobsters,scala,Scala programming,"Scala's Creator Odersky: Proposal to Add Records to Dotty, the Next-Gen Scala Compiler",https://github.com/lampepfl/dotty/issues/964,scala creator odersky proposal add record dotty nextgen scala compiler,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
240,Lobsters,scala,Scala programming,Call for Presentations: Compose 2016,https://mail.haskell.org/pipermail/haskell-cafe/2015-November/122245.html,call presentation compose,haskellcafe call presentation compose new york feb gershomb gmailcom http wwwcomposeconferenceorg http http http easychairorgconferences info composeconferenceorg information haskellcafe mailing list,haskellcafe call presentation compose new york feb gershom b gershomb gmailcom wed nov utc compose conference typed functional programmer focused specifically haskell ocaml f related technology held new york thursday friday feb registration open shortly http wwwcomposeconferenceorg get sense compose check great talk conference http call presentation recognize deadline tight feel free submit proposal idea lesspolished side http audience compose haskell ocaml f sml developer looking increase skill learn new technology library presentation aimed teaching introducing new idea tool also interested presentation aiming taking complex concept program derivation putting productive use however proposal anything suspect audience may find interesting welcome following type talk would welcome librarytool talk exploring us powerful toolkit library parsing testing data access analysis anything else production system experience report deploying functional technique real system insight revealed mistake made lesson learned theory made practical locked away paper mean hard accessible lecture classic result matter u today talk include simply introducing principle field research help audience read future abstract machine program derivation branchandbound algorithm sky limit also welcome proposal formal tutorial tutorial aimed smaller audience beginnertonovice understanding ideally include handson exercise due date submission december send notice acceptance december prefer submission via easychair website http easychairorgconferences please suggest title describe topic intend speak talk either minute please indicate much time would prefer take additional information may included expertise interesting element topic going might included public abstract furthermore abstract nt feel final nt worry work polish want discus proposal submitting nail intend speak please feel free contact u info composeconferenceorg happy work even new inexperienced speaker help talk great diversity would like put emphasis soliciting diverse set speaker anything distribute information cfp encourage submission underrepresented group would greatly appreciated welcome contribution encourage apply best gershom information haskellcafe mailing list
241,Lobsters,scala,Scala programming,My Five Years of Scala,http://m50d.github.io/2015/11/16/my-five-years.html,five year scala,comment powered disqus comment powered,five year scala scala broad church generalpurpose programming language ultimately must let give advice year scala rather different described http avoid npes avoid exception avoiding npes great first step scala idiom applies reasoning exception even fan exception advise using control flow make much harder reason code reading even good ide automated refactoring often leave unwarranted throw declaration using scalaz unfortunatelynamed type yield perfect balance explicitness conciseness construct like please enable javascript view comment powered disqus comment powered disqus
242,Lobsters,scala,Scala programming,5 years of Scala and Counting – Debunking some myths about the language and its environment,http://manuel.bernhardt.io/2015/11/13/5-years-of-scala-and-counting-debunking-some-myths-about-the-language-and-its-environment/,year scala counting debunking myth language environment,programming scala killer feature year without nullpointerexception empowered code organization one class one file context switch evil shrink hide embody john maeda law trait good evil play framework case class swiss army knife scala r e p l immutability future even annoying thing one quickly miss coming back java scala debunking scala myth good ide support scala intellij idea scala ide ensime atom scala many complex feature novice developer hard time getting speed would argue much le scala language architectural choice made people building project annotation sbt build tool jungle weirdlooking arrow sbt really annoying issue book scala compiler sooo sloooow let show xkcd comic make fun xkcd comic scala compiler java compiler throw objectorientation knowledge window need become mathematician know monad get started advice learning scala book get book programming scala programming scala scala action programming scala scala example pdf get project play framework use repl installing scala playing start functional reactive web application try many new thing,started using scala year ago instead java starting never quite finishing read first edition programming scala first present test first attempt scala code would quite soon invade small utility class knew take project many rant scala one complain rather applaud post intended developer curious scala heard time ago never quite got look put feeling well showstopper scala aficionado course welcome read share consists part favourite killer feature debunking scala myth still float around jvm communitysome advice learning scala let get started killer feature year without nullpointerexception well almost seen mean handful occurences compared mountain stacktraces leading infamous javalangnullpointerexception polluting server log life mere thought nullpointerexception upset bringing back memory hour wasted starring screen wondering another programmer erred err human progammer ever caned forgetting nullability reference responsibility language forgeo unfortunate turn event offering design alternative work like apple product year ago going elaborate scala design choice eradicating nullpointerexception combination option type firstclass function suffice say stick following simple rule almost guaranteed see nullpointerexception scala code npe erradication rule never ever ever ever initialze variable null potentially undefined state must modelled option periodnpe erradication rule always treat undefined case right beginning cheat calling rogue get optionnpe erradication rule using java library wrap result provides option unsafejavaresult many library tend sometimes without much warning return null use scala follow rule plagued myriad nullpointerexceptions deserve empowered code organization one class one file scala care many class put one file since class often happen order magnitude smaller java counterpart uncommon see many class live scala file opposite would honestly feel weird waste time still use package scala hierarchy deep lefthand file browser editor crowded file java use file browser sort matter kind editor using interesting result possibility organizing code entire logical construct selfcontained one single file scrolled back forth hence avoiding jump one file another end day form context switch know context switch evil shrink hide embody scala make possible apply john maeda law shrink hide embody example nesting function def somecomplexfunction parameter parameter def thefirststep something possibly parameter def anotherstep something else perhaps parameter thefirststep thesecondstep instead def somecomplexfunction parameter parameter thefirststep parameter anotherstep parameter private def thefirststep parameter parameter private def anotherstep parameter parameter outside somecomplexfunction nobody care thefirststep anotherstep reused need pollute class allowing nest function possible reduce complexity time contextualize intermediary step one function word reading class want able focus big picture use additional mental effort order filter noise mechanism much powerful convention placing smaller function towards end class prepending private keyword since still solve problem contextualizing still need look around use ide function used feature order relate one function another trait good evil one myth surrounding scala allowing multiple inheritance open pandora box almost certainly doom large enough project practice seen deep class hierarchy scala project trait often used tool composing related code neat example found play framework trait controller extends result bodyparsers httpprotocol status headernames contenttypes requestextractors rendering controller mvc application many concern deal type starting result trait cover one concern original source code one line blog read nicely case class swiss army knife scala case class arguably killer feature scala language especially coming pojoland case point case class point x int int z int get free point classa constructor taking least two parameter called named parametersgetters x za hashcode methodan equal methoda method creating immutable copy immutable instance look repl session read eval print loop later scala case class point x int int z int defined class point scala point x point point scala z point point scala int member case class immutable immutability future quick define make head spin yes java ides generate getters constructor simultaneous stroke key let honest noise make harder focus solving business problem even truth told written java seems like long time easy forget little thing make writing scala code enjoyable java one need semicolon type inference tuples pattern matching good overview annoying thing one quickly miss coming back java scala debunking scala myth good ide support scala started using scala regular basis intellij idea ide kind support language went beyond simple syntax highlighting old macbook pro crashed every minute presentation compiler kept giving false positive got used restart ide every minute learned differentiate working broken code really broken code trusting sbt scala compiler thing much better unless crazy type gymnastics idea well top thing come scala project eclipse picked scala ide think others followed well ensime project provides support many different text editor emacs vim sublime atom good support atom scala many complex feature novice developer hard time getting speed one criticism scala language feature complicated understand make hard novice scala developer join existing scala project work team would argue much le scala language architectural choice made people building project hard find right balance shipping feature building maintainable code base tech lead whatever want call role keep eye quite thing experience reducing usage fancy library exotic language feature enforce consistent way thing key building maintainable codebase many people involved course need firm grasp language tooling order tell apart useful fancy exotic everyone team new language platform interesting ride technological barrier easily found language platform even java given enough loadtime weaving bytecode modification proxy etc promoted annotation newcomer hard time grasping magic run trouble currently working project one system written grail gorm grail orm ie grail top spring top hibernate confusing everyone contrary would argue scala project easier newcomer general consensus avoid thing runtime meaning newcomer count compiler telling code wrong rather walk incredibly long stacktraces often understanding really going sbt build tool jungle weirdlooking arrow build tool sbt seen amazing evolution past year used rather frustrating experience work especially larger code base dependency resolution would take eon luckily sbt rolled dependency resolution engine fix really annoying issue come weirdlooking syntax sbt build file used thing got much better well heck even find funny arrow current project build file show want dive depth sbt book scala compiler sooo sloooow let show xkcd comic make fun going display xkcd comic since switched macbook pro late compilation time issue anymore compiler gotten faster sbt good support incremental compilation course still slower java anymore kind slow impact productivity development initializing spring bean whatever happens java project start day really loop take much longer case wondering slower scala compiler much phase java compiler throw objectorientation knowledge window scala functional programming language mean good part objectoriented programming discarded contrary since scala also fullblown objectoriented language good part oo used well mutually exclusive seen novice scala developer get much functional fever forget openclosedprinciple cramming function object scala equivalent static hardwiring place undermining testability code need become mathematician know monad get started ok myth blame militant functional wing scala community mean sure mean well easy scare people let lurred reading one monad tutorial another tutorial another trying wrap head around endofunctors whatsonot unless mathematician eat monad maple syrup breakfast course heard thing seriously let scared category type theory fancysounding word need theoretical background order learn become fluent scala developer know bothered look thing year language like epyhpany throwing code written fact monading place idea thing building using called end word video advice learning scala want learn scala ready want learn new language think much early criticism scala got java community unfair part due many java developer never bothering learn another language java staying quite comfortably within bound language venturing outside welldefined space perspective language going look evil break language bareer book quite interesting get book started learning scala first look possible programming scala book turned bit long detailed skipped big part read programming scala turned work quite nicely many good scala book pick one scala action programming scala thought reading whole book put always download scala example pdf get project let honest learning new programming language requires work much easier purpose beyond learning language small project like learning new spoken language really learn much faster travel live bit language country found many people started learn scala starting project play framework come surprise web framework play framework exception act gateway drug new programming language interesting play apis java scala slowly transition one provided architect application correctly especially term database access use force repl even getting started working ide exploring scala repl read eval print loop make thing easy possible copypaste code snippet website repl evaluate entirety repl also code completion builtin pressing tab key make possible explore type highly recommend installing scala playing start functional put much pressure advice outlined third chapter reactive web application start imperative slowly transition immutable declarative code take time get familiar syntax start working paradigm shift much nicer experience comfortable enough syntax know fall back imperative programming style declarative one suit yet try many new thing tempting start working many scala feature implicit parameter implicit conversion trait infix notation function higherorder function lazy value well feature related typelevel programming name fact may better take one step time recap hope managed convince scala evil wish much fun
245,Lobsters,scala,Scala programming,What Haskell can learn from Scala,https://skillsmatter.com/skillscasts/6592-what-haskell-can-learn-from-scala,haskell learn scala,web performance agility curious mashup september online meetup,meetup web performance agility curious mashup next september online meetup
246,Lobsters,scala,Scala programming,Akka without the Actors,http://eng.localytics.com/akka-streams-akka-without-the-actors/,akka without actor,akka actor akka stream wrong actor actor lose type safety actor compose well actor often create opacity actor need tuning still dark art better way reactive stream stream terse compact flowgraph dsl flow data transparent stream autotuning result picked along way github issue mapmapasync problem people discussed,welcome localytics engineering blog hope post super interesting wanted drop note say hiring scala engineer right interested check job description enough business enjoy article akka actor aim provide simple highlevel abstraction concurrency parallelism made good use localytics found practice cumbersome lowlevel looked alternative approach give attractive option fell lap akka stream following explores stream simpler higherlevel solution wrong actor initial aversion came much boilerplate find actor based code every line code another liability waiting come back bite le write better let see hello world look like actor package main import akkaactor actorsystem actor prop class helloactor extends actor def receive partialfunction unit case string println case println even supposed object program def run unit val system actorsystem helloworld val actor systemactorof prop helloactor name helloactor actor hello world systemshutdown besides verbosity subtle yet serious problem lurking actor code example underlying problem actor lose type safety note return type receive method actor locked defining abstract member required akkaactoractor class type like unit show point code leveraging compiletime checking arguably biggest benefit statically typed language actor compose well quoting noel welsh underscoreio default actor hardcode receiver message send create actor sends message actor b want change receiver actor c basically luck actor often create opacity around flow data program reason compose far better way spend effort tracing path message clicking one actor another due lack transparency actor need tuning better managing thread pool still dark art nt settle better way giving hope getting ready begrudgingly subject another microservice gripe listed chief software architect andrew rollins gave impassioned talk reactive stream one regular engineering lunchandlearn session angel sang saw light come sky answer looking bit googling experimenting decided bet success microservice akka stream library found solved major problem actor based code following way stream terse compact virtually boilerplate provided dsl suit need using build nontrivial production service postprocesses billion record day expect dsl suit vast majority usecases take look stream version hello world example package main import akkaactoractorsystem import akkastreamactormaterializer import akkastreamscaladsl import scalaconcurrentexecutioncontextimplicitsglobal object streamprogram def run unit implicit lazy val system actorsystem example implicit val materializer actormaterializer source list hello world map string runwith sinkforeach println oncomplete case systemshutdown typesafe implementation materialized actor map stage punctuates element source list int list program would fail compile map stage explicitly call string stream designed composability mind let say wanted scale hello world app saying hi everyone solar system make larger system many smaller part package main import akkaactoractorsystem import akkastreamactormaterializer import akkastreamscaladsl import scalaconcurrentexecutioncontextimplicitsglobal object streamprogram val sayflow flow string string unit flow string map val shoutflow flow string string unit flow string map val sayandshoutflow flow string string unit flow implicit b import flowgraphimplicits val broadcast badd broadcast string val merge badd merge string broadcast sayflow merge broadcast shoutflow merge broadcastin mergeout def run unit implicit lazy val system actorsystem example implicit val materializer actormaterializer source list hello world via sayandshoutflow runwith sinkforeach println oncomplete case systemshutdown make trivial change data flow even runtime program call cumulative ordered operation simple chaining call via minimal use flowgraph dsl achieve interesting thing sayandshout flow individual element processed multiple way flow data transparent look implementation run method example make good argument clear day eat hat stream autotuning akka stream implement reactive stream pattern hood furthestdownstream stage dictate pace data moving stream ensures backpressure propagates intervention required principle wellillustrated slide typesafe reactive stream presentation also seems like appropriate time come clean admit title post lie akka stream us actor hood implement reactive stream pattern beauty get benefit actor without worry code result first told jacob schlather resident akkatuning expert actor proponent want use actor code challenged keep cpu usage percent reasoning many service slowest work io one biggest win get free cpu bound work waiting io complete thrilled find first crack streamsbased implementation averaged percent cpu consumption absolutely tuning current cpu profile streambased service production came free thanks reactive stream implementation akka stream give service significant amount network io stream remarkable underlying implementation smart enough optimize around slower part maximize use available resource next question mind scale tripled amount work service without scale hardware throughput increased along today service keep incoming data pipeline using quarter resource required nonstreambased service comparable work thrilled outcome picked along way definitely challenge along way takeaway make next streamsbased project easier build use conflate mapconcat going faster stage slower stage conflate used build accumulation stream element kick downstream consumer moving slower upstream producer package main import akkaactoractorsystem import akkastreamactormaterializer import akkastreamscaladsl import scalaconcurrentexecutioncontextimplicitsglobal object conflatecomparison val faststage flow unit unit unit flow unit map println fast stage val slowstage flow unit unit unit flow unit map threadsleep println slowwww stage val conflateflow flow unit unit unit flow unit conflate list l u u l mapconcat identity val withconflate source unit unit source listfill via faststage via conflateflow via slowstage val withoutconflate source unit unit source listfill via faststage via slowstage def run source unit unit unit implicit lazy val system actorsystem example implicit val materializer actormaterializer srunwith sinkignore oncomplete systemshutdown might never stream unit like real life code comparing output program make behavior conflate mapconcat apparent scala conflatecomparisonrun conflatecomparisonwithoutconflate fast stage fast stage fast stage fast stage slowwww stage fast stage fast stage slowwww stage slowwww stage fast stage fast stage slowwww stage slowwww stage fast stage fast stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage scala conflatecomparisonrun conflatecomparisonwithconflate fast stage fast stage fast stage fast stage fast stage fast stage fast stage fast stage fast stage fast stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage slowwww stage note second run using conflate mapconcat fast work first soon slow stage ca nt keep fast stage conflate kick example build list result fast stage flattened back individual stream element handoff slow stage consumes really nice way optimize resource usage around slow step program use io dispatcher file based io blocking io operation one took digging major performance boost finding github issue stream library provides synchronousfilesource given file object find working inputstream file local disk need manually example would specific section stream note call withattributes package main import akkaactoractorsystem import akkautilbytestring import akkastream actormaterializer actorattributes import akkastreamio import javaio inputstream bytearrayinputstream import akkastreamscaladsl import scalaconcurrentexecutioncontextimplicitsglobal object streamfile def run unit implicit lazy val system actorsystem example implicit val materializer actormaterializer val new bytearrayinputstream hellonworld getbytes inputstreamsource withattributes actorattributesdispatcher akkastreamdefaultfileiodispatcher via framingdelimiter bytestring n maximumframelength intmaxvalue allowtruncation true map runwith sinkforeach println oncomplete systemshutdown use mapmapasync deliberately distant past thought anything word async meant fast since learned error way found lesson confirmed implementation async operation great io cpu bound work overhead creating future allocating thread needle cost net loss acking work inside stream challenging done simply dsl almost showstopper service question queue consumer process large amount work per queue message pulling work defeat point stream nt know work end know tack queue message acknowledged bit googling showed exactly solved problem problem people clearly encountered tim harper went far extending core component provided akka stream library work provides version support acknowledgement discussed point beginning consider different route altogether came simple hack create one element stream message concatenate stream containing work done message flatten message specific stream using concat strategy process single stream could argue dirty far exactly need shown equally simple better alternative sticking package main import akkaactoractorsystem import akkautilbytestring import akkastream actormaterializer actorattributes import akkastreamio import javaio inputstream bytearrayinputstream import akkastreamscaladsl import scalaconcurrentfuture import scalaconcurrentexecutioncontextimplicitsglobal object ackedfilestream class queuemessage str string def ack unit println acked lazy val stream new bytearrayinputstream strgetbytes sealed trait element case class stringelement string extends element case class queueelement qm queuemessage extends element def filestream queuemessage source stringelement future long inputstreamsource mstream via framingdelimiter bytestring n maximumframelength intmaxvalue allowtruncation true map stringelement def run l list string unit implicit lazy val system actorsystem example implicit val materializer actormaterializer source lsmap new queuemessage map qm filestream qm concat source list queueelement qm flatten flattenstrategyconcat runwith sinkforeach r element r match case queueelement qm qmack case stringelement println oncomplete systemshutdown small example actually representative work stream dequeueing message point remote input source streaming source work line acking queue message completion file creating separate stream file concatenating queue element end stream guaranteed queue message arrive sink exactly last line input stream produced element type family provide type consistency stream sink running code yield follows scala val s list hellonworld hellonagain scala ackedfilestreamrun s hello world acked hello acked said done akka stream huge success u cut boilerplate increased readability maintainability reduced time spent tuning performance picked trick make next stream based service faster build experience akka stream share comment
247,Lobsters,scala,Scala programming,Review of Scala Static Analysis Tools,http://blog.codacy.com/2015/10/02/review-of-scala-static-analysis-tools/,review scala static analysis tool,coding style databricks paypal scala best practice alexandru leif wickland scalastyle matthew farwell scalastyle http custom rule scalastyle website add following line projectpluginssbt create configuration file configurationxml http wwwscalastyleorgconfigurationhtml usage wartremover wartremover brian mckenna easily extend add following line projectpluginssbt configuration http githubcompuffnfreshwartremover usage http githubcompuffnfreshwartremover wart usage abide abide nicolas voirol typesafe scalaabide github great tool scapegoat scapegoat stephen samuel linter linter matic potočnik list implemented check code example reported warning one use codacy conclusion page ultimate guide code review codacy get started,past reviewed different coding style scala programming language offer review scala static analysis tool also saw last couple month apparition new one databricks paypal great scala best practice alexandru mention leif wickland said coding standard automatically uniformly applied coding standard agree codacy believe enforcement guideline outsourced tool today going review main static analysis linters exist scalastyle actively developed matthew farwell scalastyle probably popular tool extensive list check good documentation used student martin odersky class coursera one biggest advantage scalastyle also possibility adapt different workflow besides command line run scalastyle compiler plugin sbt maven gradle supported integrate ide intellij eclipse scalastyle cover issue ranging code style best practice example scalastyle rule check null used check return used check boolean expression simplified check function define mutable variable check used check number line file etc full list rule found http also easily add custom rule scalastyle way go looking wellrounded tool enforce style best practice visit scalastyle website feel free integrate flavor choice maven eclipse sbt etc familiar sbt follow next step experience beauty add following line projectpluginssbt addsbtplugin orgscalastyle scalastylesbtplugin resolvers sonatypereleases http osssonatypeorgcontentrepositoriesreleases create configuration file get default configuration file configurationxml inspect feel free change like know configuration file visit http wwwscalastyleorgconfigurationhtml check something like check level warning class orgscalastylefilewhitespaceendoflinechecker enabled true wise man said ca nt please everyone tool usually lot customization builtin nt like pattern change enable false usage sbt scalastyle like result targetscalastyleresultxml wartremover wartremover maintained brian mckenna cover great list wart well documented note several name referring check static code analysis common check pattern often reference tool name wartremover check called wart customization treated firstclass feature easily extend tool example wartremover wart avoid usage nothing avoid asinstanceof isinstanceof avoid usage monad avoid usage return avoid optionget etc follow instruction try wartremover add following line projectpluginssbt addsbtplugin orgbrianmckenna sbtwartremover configuration wartremover configuration done pluginssbt check http githubcompuffnfreshwartremover usage detail example show wart enabled except couple would want disable add pluginssbt wartremovererrors wartsallbut wartenumeration wartfinalcaseclass available wart check http githubcompuffnfreshwartremover wart usage sbt compile tool integrated sbt compilation process compile code using sbt show errorsissues abide abide created nicolas voirol maintained le actively others typesafe abide tool aim provide user simple framework lintlike rule creation verification abide rule designed small selfcontained unit logic abstract concern traversal optimization away rule writer abide yet released really great tool would deserve blog post may complex tool start really worth get right interested check scalaabide github follow great documentation great tool scapegoat scapegoat maintained stephen samuel another great tool sbt integration configuration usage similar tool well documented recommend check scapegoat inspection see suit project linter linter maintained matic potočnik tool support sbt integration take look list implemented check nice code example reported warning one use ultimately personal choice depending need project working quoting scapegoat documentation problem running multiple analysis tool codebase fact could beneficial total set possible warning union inspection enabled tool worst case warning might generated multiple tool probably want combine one tool cover wide range possible error ensure code remains clean consistent however one bigger criterion choose workflow integration disrupts development process probably quickly stop checking result make sure integrate make sense ide precommit hook continuous integration tool etc shameless plug looking tool make easier enforce coding standard without manually configure everything locally take look codacy apply several abovementioned tool plus rule continuous manner save time code review help merge confidence documentation every issue make also easier improve skill onboard developer faster scala magic conclusion find several active welldocumented scala static analysis tool analyze code guide development process enforce strict standard manage complexity detect semantic problem undeniably great help team developing scala without definitely give try scared number issue start small deactivating lot check increase slowly time let know go comment happy scala coding check page review static analysis tool different coding language published ebook ultimate guide code review based survey developer enjoy codacy codacy used thousand developer analyze billion line code every day getting started easy free use github bitbucket google account sign get started
248,Lobsters,scala,Scala programming,Scala Creator Martin Odersky: Strawman Proposals for New Collections Architecture Wanted,https://github.com/lampepfl/dotty/issues/818,scala creator martin odersky strawman proposal new collection architecture wanted,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
249,Lobsters,scala,Scala programming,We're Doing It All Wrong (2013),http://www.youtube.com/watch?v=TS1lpKBMkgg,wrong,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature pacific northwest scala wrong paul phillips youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature pacific northwest scala wrong paul phillips youtube
250,Lobsters,scala,Scala programming,"Let a 1,000 flowers bloom. Then rip 999 of them out by the roots.",http://www.gigamonkeys.com/flowers/,let flower bloom rip root,let flower bloom rip root gave talk scaling software let thousand flower bloom jack dorsey claimed tweet alex roetter garden overrun monorepi chris fry nandini ramani think engineering effectiveness build model weeding garden,let flower bloom rip root september past eleven month tech lead engineering effectiveness group engineering effectiveness name elsewhere might called developer tool developer productivity engineering infrastructure developer efficiency provide tool process allow rest twitter engineer job focusing thing used twitter engineer super twitter specific build tool continuous integration system source control recently gave talk scale conference team like engineering effectiveness scale work essay extended dance remix talk tl dr however industry mostly know consequently massively underinvest making engineering orgs actually effective every software company start single line code written first developer grows twitter facebook company happens industry part know scale software know build abstraction modularize code manage large code base deploy software handle demand million even billion user also know scale organization putting necessary management structure allow thousand people work together le efficiently hand argue really yet good handle scale area exists intersection engineering human place group like engineering effectiveness work worse often seems even understand importance scaling go first line code thousand engineer working million line code rate bit twitter history would suggest scaling software let thousand flower bloom first line written interim ceo jack dorsey later claimed tweet originally wanted write python c ocaml soon hired rail core contributor went ruby rail started simple rail app grew eventually probably largest monolithic rail app planet known monorail however twitter ruby long twitter acquired fiveperson search company whose technology stack java based time nine twitter engineer handful ops people adding five new engineer came code base way working immediately increased diversity engineering style practice within twitter let thousand flower bloom also year first scala written twitter main product twittercom rail app search using java folk experimenting scala let thousand flower bloom someone started repo called science time creating new repo new project one big deal however repo grew become main repository java code included search code ad code associated data science code need operate data structure defined ad code platform group moving toward scala partly scala could made look like ruby java could ad team going direction alex roetter svp engineering engineer personally led effort convert scala code ad team already written java also around time couple engineer started trying make science googlestyle monorepo homegrown build system pant let thousand flower bloom finally arrive year quadrennial soccer world cup excitement cup high twitter bit high fact le every time someone scored goal tweet per second would spike knock site gooooaaaaallll fail whale gooooaaaaallll fail whale consequently aftermath world cup decided really needed move monorail onto jvm based service oriented architecture around time marius eriksen principal engineer others working new scala rpc library finagle soon became standard around new service written effort began earnest started teaching ruby developer scala could write service replace monorail ad side data scientist started work scala dsl writing map reduce job became scalding soon three kind scala written twitter scala written people wished ruby scala written people wished java scala written people wished haskell let thousand flower bloom yet despite diversity perhaps made real progress reliability scaling software fast forward four year next world cup totally different story handled massive tweet volume basically without million tweet shellacking brazil semifinal peak tweet per minute shortly fifth goal lot thing obviously happened four year discussed including lot specific work runup world cup point figure scale software garden overrun around time celebrating success handling world cup traffic thing coming head internal tool front science repo grown one two monorepi monorepo formed scala service spun offthemonorail effort started separate repos eventually consolidated single repo birdcage order make easier finagle developer upgrade library client together might ask scala developer decided needed monorepo move code science make another monorepo good question tooling issue build system science exgoogle engineer inspired blaze build system time birdcage made pant know build scala pant view inherited google repository organized odds scala repos built scala build organized also perhaps nerd posturing fan java fan scala real issue job team called developer productivity somewhat involved charter people say really work necessary get scala code science make another monorepo force java scala partisan find way get along unfortunately finagle also really taken eventually code science started taking dependency finagle code birdcage took dependency library science update one side published consumed side time consuming process one hop project multiple back forth hop two monorepi situation could visualized suggested eponymous monorepi twitter account somewhere along way someone decided would easier convert birdcage use pant since learned build scala deal mavenstyle layout however point prior pant open sourced throw wall fashion picked engineer company square foursquare moved forward meantime enough people whose job take care thing science still original internally developed version fact evolved independently open source version however time wanted move birdcage onto pant open source version moved ahead one birdcage folk chose make matter insufficient version pant worked entirely reliably consequently different team evolved cargoculted strategy making work well enough get team included running script washpants aggressively wiped state pant cached run speed build also started using thrift data interchange format agree thrift compiler use whether published thrift idl jar already compiled artifact definitely people opinion bunch engineer nobody position make time work make stick let thousand flower bloom indeed say mess arrived twitter april work ab experimentation system full conversion birdcage pant fact completed year half later late svp engineering chris fry declared would move code monorepo basically meant merging science birdcage may said definitely monorepo july gone twitter couple week announcement new head engineering alex roetter last seen excising scala code ad code base reaffirmed goal date came went monorepo month became head engineering roetter decided enough enough hired new vp bos nandini ramani head new organization engineering effectiveness would subsume old developer productivity group team order expand scope work could support rest twitter engineering recruited ee couple month since reinvigorated renamed engineering effectiveness team finishing project like monorepo consolidation also thinking take actually provide worldclass tool support twitter engineer happened could twitter scale software well yet much trouble software built help u job think engineering effectiveness think big part problem good thinking make engineer effective software especially backend software measure goodness number query per second handle number incident experience amount hardware buy run thing easy measure even fairly easy tie financial implication business effectiveness hand hard measure even really know make people productive thus talk engineer though thing even study lead notion engineer pointed strongly notion office agree think possible affect productivity least possible harm twitter ee motto speed three thing trying affect across twitter engineering unlike famous triple fast cheap good believe pick two fact feed building thing right let go faster building faster give time experiment find way right thing everybody enjoys building good stuff lot engineering effectiveness actually affect quality speed joy one place start simple time saving assume certain amount time engineer spend every day waiting thing put productive give people effectiveness boost eliminating time assuming standard standard save everyone five minute day get speed gain obviously save everyone five minute day every day working something everyone us time easy depends obviously much time currently induced tool process also possible save time removing thing periodically eat larger amount time extra hour spent every couple week debugging problem due confusing error message log equivalent five minute day thus total time year another dramatic way influence effectiveness help stay flow state assume heard psychological state flow aka everything clicking concentrate solve hard problem etc generally thought take fifteen minute get flow instant lose interrupted modern open plan office inimical flow essay another day present concern whether tool provide engineer helping keep flow fact thing breaking flow even using simple analysis time saving went one way save people fifteen minute day break flow one le time per day flow conducive tool probably provide way boost saving fifteen minute since flow powerful state losing flow costly flow also obviously name game come increasing developer joy bad flowbreaking interruption something much worse sapping effectiveness know dune fear mind killer fear manifest context software development would say tech debt tech debt mind killer tech debt lack quality slows u make u miserable break flow sap live financial debt small amount taken eye wide open good thing also like financial debt compound time little bit technical debt taken ten hundred engineer left book killing thousand engineer engineering effectiveness team often intimate relationship tech debt often pile tooling people whose job work tool tend something hacked together well enough get something done good news cleared accumulated tech debt tool team well positioned help team tackle tech debt lead really massive gain effectiveness nt gotten quite yet one dream ee twitter establish standing cruft slaying army would experienced senior folk chop dive section code base make code people working better another area engineering effectiveness team help coordinate engineer push good way thing stamp bad way whether code review test code write design doc anything else however expect ee team get involved question better make sure strong senior engineer part team making decision recommendation affect lot engineer finally psychological aspect providing good tool engineer believe really impact overall effectiveness one hand good tool pleasure work basis alone provide good tool reason many company provide awesome food employee make coming work every day much pleasure good tool play another important role tool use software spend day writing software bad tool corrosive psychological effect suggesting maybe actually know write good software intellectually may know different group working internal tool main feature product tool use get way obviously poorly engineered hard doubt overall competence build model take given thing increase quality software engineering org produce speed produce joy engineer experience work increasing real way ultimately benefit company lack better term call simple model total effectiveness engineering org e total effectiveness org eng total number engineer ee number engineer devoted engineering effectiveness style team b boost first ee engineer give remaining effectiveness represents additional ee engineer scale total productivity boost one ee engineer would add boost b le one seems likely new ee engineer smaller effect previous one obviously simple model like model wrong may useful assuming total number engineer le given two interesting parameter model scaling factor boost b frankly great idea set pretty sure le one would mean total boost would grow square root number ee engineer ie double total boost would square number ee engineer seems bit steep fall say reasonable guess b think way discussed ee folk help boost effectiveness engineer simple time saving helping keep engineer flow removing tech debt encouraging supporting good practice increasing joy providing excellent tool seems like across board effectiveness boost reasonable perhaps even conservative look graph total effectiveness depending many engineer devote effectiveness work assuming b say seem fairly conservative value later play model put value first plot see engineering org ten people fact worth devote engineer tooling maximum ten engineer worth get devote zero engineer engineering effectiveness small engineering org individual engineer probably automate thing bugging making simple tradeoff quickly time spend automation paid time saved automation worth dedicating anyone look closely chart however see look like straight line actually slightly curved devote one engineer ee work lose work gain back bit engineer making nine effective problem nine engineer benefit add enough make lost work ee engineer one hundred engineer parameter curve start bend noticeably enough engineer effectiveness gain make cost couple ee engineer model suggests devote two engineer ee bring total productivity engineer worth free engineer worth work however get thousand engineer small gain per engineer start add even though additional ee engineer adding le le effectiveness boost parameter right thousand person engineering org devote quarter engineering effectiveness yielding total effectiveness equivalent engineer price assume model still work engineering org grows another order magnitude engineer want third engineer ee style work giving total effectiveness equivalent engineer ee admit hard time imagining ee org bigger twitter also trouble imagining person engineering team note even step engineer optimal number ee engineer grew much faster total number engineer payoff disproportionately large important underinvest supporting engineer weeding garden one caveat however order engineering effectiveness engineer able boost effectiveness across engineering thing need standardized saw big investment engineering effectiveness work start pay work lot engineer may work person engineering org tool process working used hundred one hundred relevant number tearing flower root come engineering org get certain size benefit obtain investing making engineer slightly productive start swamp slight gain one team might get thing slightly different way thousand flower phase people planted kind exotic blossom lovely even well adapted local microclimate need able decide one going first class nurtured member garden one weed get delicate balance get right everyone would love make decision thing bring consistency long choose current preferred way thing hand thing sufficiently chaotic lot people happy someone come make decision thing actually make decision work need engineer good technical judgment technical chop get ahead chaos dig accumulated tech debt probably piled tool good news time deliver real improvement quality speed joy engineer earn little trust make decision goal pick set tool process support support heck invest probably think need focus relentlessly making tool process support awesome get senior engineer involved early make good choice engineering org get buy make reality get behind twitter may need invest even get garden back shape behind way really work well get flower blooming people team need find way get work done get point flower tend awesome people use real reason overwhelmed trying get existing stuff working time treat team going way chance learn something product offering quite meet need word garden tidy well tended pretty new volunteer sprout freak afraid going overrun garden watch grow look like might valuable contribution garden start nurture like rest flower middle twitter engineering effectiveness team year old still operating somewhat weed whacker mode lot opportunity dramatically improve effectiveness twitter engineer simply making existing tool better maybe year sophisticated model theory get everything sorted scale back ee style team take nearly many people tend wellmaintained garden whip one shape think path twitter took grew one ten hundred thousand developer different path company taken take future perhaps learn u consequence investing enough soon enough supporting engineer meantime wish quality speed joy work pleasant time tending garden correction earlier version essay said pant picked extwitter engineer company fact one company became major user pant extwitter employee also mistakenly identified world cup match germany brazil final semifinal
251,Lobsters,scala,Scala programming,Learn implicits: Type classes,http://engineering.monsanto.com/2015/09/23/implicits-typeclasses/,learn implicits type class,caution sprayjson documentation say spray json package object helper method project context bound post much much longer one,series scala implicits seen everyday us implicits one crucial pattern combine technique type class caution please excuse name type class resembles neither type class way useful understanding pattern called type class historical reason type class extend functionality class without actually changing full type safety pattern often used add functionality class control also useful crosscutting concern serialization crosscutting concern sprayjson provides practical example type class pattern let see implement json serializationdeserialization builtin class documentation say object tojson method add couple import import sprayjson import defaultjsonprotocol two import add implicits compiler magic hat import sprayjson brings everything spray json package object including implicit def pimpany new pimpedany private json class pimpedany def tojson implicit writer jsonwriter jsvalue writerwrite last article ready first line view turn anything pimpedany every object world implement tojson warned kind breadth view safe surprise way activate view calling tojson intermediate class invisible never even see terrible name useful type return value tojson calling tojson transforms object jsvalue representation json data two method jsvalue prettyprint compactprint return string transmit save serialize every single object like easy declaration def tojson implicit writer jsonwriter jsvalue tojson method take implicit parameter jsonwriter type want convert json must jsonwriter must magic hat scope tojson called jsonwriter would compiler find one jsonwriter trait single method write trait jsonwriter def write obj jsvalue sprayjson defines trait along jsonreader deserialization jsonformat together jsonformat one create typically sprayjson builtin jsonformat implementation many common type lurk defaultjsonprotocol bring implicit scope import defaultjsonprotocol jsonformats know serialize deserialize json instance implicit jsonformat string type class parlance instance jsonformat type class string use like import sprayjson import defaultjsonprotocol val pony fluttershy val json ponytojson implicits resolve val pony fluttershy val json new pimpedany string pony tojson defaultjsonprotocolstringjsonformat desugared syntax look like serialization language without implicits use type class pattern add whole feature serialization class want generic way without changing class usual type string int seq map option etc serialization code defaultjsonformat class make tojson work define implicit val type jsonformat called providing instance jsonformat type class write hand use helper method sprayjson even project make compiler generate case class detail way outside scope post kicker make jsonformat myclass get serializationdeserialization myclass call tojson myclass seq myclass map string myclass option map myclass list myclass without writing extra code killer feature type class pattern composes one generic definition jsonformat list mean list jsonformatable also jsonformatable could string int long myclass name format also format list trick instead implicit val jsonformat list implicit def defaultjsonformat implicit def listformat jsonformat new rootjsonformat list def write list list def read value jsvalue list first understand new syntax inside type parameter colon followed type class called context bound good luck finding documentation without knowing special name shorthand type exists magic hat jsonformat contextbounds notation expands implicit def listformat implicit jsonformat new rootjsonformat list def write list list def read value jsvalue list implicit parameter ensures write function inside listformat able call tojson element list implicit def work way view convert single type another instead supplier implicit value give compiler jsonformat list long compiler supply jsonformat one definition composes jsonformats magic hat compiler call many implicit function many time needed produce implicit parameter desperately desire work type complicated want let say want serialize option map string list int import sprayjson import defaultjsonprotocol val option map string list int map applejack list fluttershy list val json atojson println jsonprettyprint compiler us implicit function option map list along implicit vals string int compose jsonformat option map string list int get passed tojson serialization occur use jsonformats explicitly code becomes import sprayjson import sprayjson defaultjsonprotocol djp val option map string list int map applejack list fluttershy list val json new pimpedany option map string list int tojson djpoptionformat djpmapformat djpstringjsonformat djplistformat djpintjsonformat println jsonprettyprint whew lot magic compiler composition u property implicit parameter make type class pattern useful much magic also mean hard understand rarely need create type style jsonformat often want create new type class instance jsonformat myclass time need find right one import either way familiarity pattern essential using sprayjson many library sprayrouting library writing restful service us pattern lot thing including returning data avoid pitfall method overloading call magnet pattern try get read post much much longer one ultimately pattern used different property way type class pattern culmination scala implicit feature post make sense well way scala mastery posted september jorge montero jessica kerr
252,Lobsters,scala,Scala programming,A millisecond isn't fast,http://jvns.ca/blog/2015/09/10/a-millisecond-isnt-fast-and-how-we-fixed-it/,millisecond nt fast,kamal marhubi avi hyperloglogscala hardly anything omg computer fast latency number every programmer know time faster speed hll presentation,hi friend first time today going tell day work machine learning stripe yesterday collaboration kamal marhubi profiling work mad performance used think millisecond fast work code run verylargenumber time distributed split task individual task run code million time wrote benchmark slow code found could process record meant processing million thing would take hour slow code kind complicated originally thought reasonable amount time heart sad yesterday avi best looked damn slow millisecondrecord depth code open source show profiled using visualvm optimization found spending time densehll x mystery scala speak code block twitter algebird library estimate size hyperloglog lazy val zerocnt z var count int var re double goto loop avoid closure val arr array byte varray val arrsize int arrsize var idx int idx arrsize val mj arr idx mj count re else re javalangmathpow mj idx count re hyperloglogscala little inscrutable going explain code arrsize case basically something like floating point operation take still new performance optimization discussed kamal decided outrageous since loop hardly anything omg obvious target javalangmathpow mj look like hardest thing note java pretty fast normal operation like adding multiplying number go really fast computer fast note latency number every programmer know great useful case like many cpu instruction take nanosecond something order microsecond definitely millisecond kamal tried two thing replacing mathpow mj mj writing lookup table since mj byte possible value calculate mj every possible value front final performance number benchmark picked mathpow mj lookup table literally make code time faster changing one line avi simultaneously came conclusion made pull request speed hll presentation hooray learning intuition code slower best able say code take process record amazing even amazing actually fix interested rest day work reason worked someone understanding machine learning model work u wrote sql query help someone risk team find account suspicious activity wrangled scala performance generate training set machine learning model without tearing hair
253,Lobsters,scala,Scala programming,"Ammonite-Shell, a shell running on the JVM",http://lihaoyi.github.io/Ammonite/#Ammonite-Shell,ammoniteshell shell running jvm,scala language repl script library use existing project system shell li haoyi ammoniterepl scala script scala script ammoniterepl scala script unstable version ergonomic improvement configurability ipython zsh ammoniteops superior debugging tool fun interesting thing older scala version latest feature unstable release pretty printing syntax highlighting artifact loading feature ammoniteshell ammonite cookbook mailing list gitter channel latest feature unstable release configuration ammoniteops pprint truncates configuration scala script scala script scala script predef file saveload session renamedscripts multiplescripts import file import file scala script scalaz google guava scalaz shapeless coursier repository apis utility time grep browse builtins pipeoperators grep builtins gitter channel import ivy load thirdparty jar subprocess api ref debugging remote repl instantiating ammonite wootjs webserver akka http microservice example terminal continuous integration script haoyi blog resume older scala version latest feature unstable release repl bash script jvm ivy dependency import file within ammoniterepl import ivy ammoniterepl scalatags magic import magic import multistage script path eugene yokota scopt multiple main method import ivy requestsscala upickle json api builtins repl bash ammoniterepl watch reload ammoniteops path operation extension ammoniterepl one path doc doc doc reading resource doc doc doc doc doc doc doc doc doc using scala running jvm system operation java apis never remember syntax write ifstatement bash obviously fail hard year beyond bash shell scripting typed oo language design decision tradeoff ammoniterepl freebsd documentation path path path ammoniteops ammoniteops ammoniterepl ammoniteops pipe extension chaining spawning subprocesses scala scala documentation piping google guava import ivy script file scala jvm bash zsh fish ipython faster shellout subprocesses ammonite xonsh jvm project jigsaw java project valhalla date time math network thread import ivy jython akkahttp snakeyaml jit import ivy ammoniteshell download ammonite ammoniterepl scala script requestsscala upickle ammoniteops scraping html jsoup apache poi bufferedimage thumbnailator opennlp online play framework script file scalikejdbc li haoyi laszlo mero google summer code contributor dotty repl introduction functional stream scala scala meta talk ammonite module jupyterscala dynaml shapeless tryshapelesssh us ammonite sbt plugin genywritable oslib alex archambault piotr kwiecinski patreon page chip mgedigian aeffrig script debug repl ammonite argument script script argument watch reload source ammoniteshell predef coursier apache spark pprint script argument olivier roland remote repl espen wiborg emanresusername armanbilge emanresusername rorygraves mallman jhnsmth jhnsmth tom dyas jordan gwyn roman tkalenko greg dorrell roman tkalenko timothy dettrick geny roman tklalenko coderabhishek julie pitt julie pitt block input coderabhishek ammoniteops repl api repl api desugar simon scarduzio coderabhishek coderabhishek coderabhishek magic import script argument scala script coderabhishek github release unstable version browse desugar ammoniterepl coderabhishek internals documentation embedding grep time browse ammoniteshell ammoniterepl pipe operation ammoniteops grep rob norris aish fenton 杨博 browse ammoniteshell reading resource clark kampfe commandlineundo jimfs constructing path coderabhishek saheb thirstycrow coderabhishek history search ammonite cookbook eric torreborre seniapsm script argument time spawning subprocesses grep ian mcintosh matthew edward saveload session johannes rudolph sanjiv sahayam patrick premont reduce unnecessary memory footprint ammoniteshell remote repl viacheslav blinov ammoniteshell invoking file environment variable compiler flag johannes rudolph johannes rudolph alexandre archambault debugging lot lot erik osheim laszlo mero standalone distributable syntax highlighting highlighted prettyprinting show laszlo mero configuration script file laszlo mero configuration multiline editing feature cd wd ammoniteops come ref spawn subprocesses laszlo mero http,ammonite let use scala language scripting purpose repl script library use existing project standalone system shell modernized scala repl syntax highlighting multiline editing ability load maven artifact directly repl many qualityoflife improvement missing default scala repl lightweight programming scala create script run easily command line without overhead setting project waiting sbt slow startup time rocksolid filesystem library scala deal filesystem easily existing scala project application easily would bash python script modern replacement bash system shell provides system shell highlevel scala language letting seamlessly mix system operation real code without hassle frustration trying write complex code bash use ammonite probably find follow book author helpful using ammonite fullest ammonite project li haoyi use ammonite enjoyed please chip support development amount help u develop ammonite best possible repl script runner scala community goal ammonite liberate scala code heavyweight project using lightweight ammonite runtime want run scala open ammoniterepl run interactively want run later save scala script run later video overview project motivation check talk already working scala longer drop python bash scripting need use scala script scripting need avoid overhead working multiple language project usable standalone click link jump straight doc scroll around browse navigation bar left wondering ammonite contains bunch fun thing whether interactive ammoniterepl scala script also take look people using ammonite wild see people talk available bulk page describes latest stable release ammonite willing live edge also publish unstable version commits get pushed pullrequests land master branch ammoniterepl improved scala repl reimplemented first principle much featureful default repl come lot ergonomic improvement configurability may familiar people coming ides repls ipython zsh combined ammoniteops replace bash system shell also used alone superior version default scala repl debugging tool many fun interesting thing want use ammonite plain scala shell download standalone ammonite executable scala also available older scala version sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm try latest feature unstable release sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm alternatively macos install ammonite via brew brew install ammoniterepl also download bootstrap script downloaded committed version control file amm curl l http amm chmod x amm run ammonite via amm command give access ammoniterepl pretty printing syntax highlighting input output artifact loading inrepl nice feature want use ammonite filesystem shell take look ammoniteshell sure ammonite check ammonite cookbook fun idea want initialization code available repl add ammonitepredefsc question come hang mailing list gitter channel get help also try ammonite existing sbt project add following buildsbt librarydependencies val version scalabinaryversionvalue match case case comlihaoyi ammonite version test cross crossversionfull sourcegenerators test deftask val file sourcemanaged test value ammscala iowrite file object amm extends app ammonitemainmain args seq file taskvalue optional required source command work fullclasspath test updateclassifiers test value configuration find configurationname testname get module flatmap artifact collect case f aclassifier source f try latest feature unstable release librarydependencies comlihaoyi ammonite test cross crossversionfull simply hit sbt projectnametest run main method test scope sbt projectnametest runmain amm activate ammonite repl also pas string main call containing command import want executed start every run along configuration want ammonite available project simply add snippet new file note ammoniterepl support window even though ammoniteops see interested detail want try hand making work ammoniterepl support many feature default repl including seqfill seqfill foo seq seq string list list foo foo foo list foo foo foo list foo foo foo list foo foo foo list foo foo foo list foo foo foo list foo foo foo list foo foo foo list foo foo foo list foo foo foo case class foo int string seq string defined class foo foo nil foo foo list foo cow hear moo seq weigh twice much look good barbecue foo foo cow hear moo list weigh twice much look good barbecue ammoniterepl us pprint display output default mean everything nicely formatted fit within width terminal copypasteable default ammonite truncates prettyprinted output avoid flooding terminal want disable truncation call show expression prettyprint full output also pas optional height parameter control much want show truncation seqfill seq int list show seqfill ammonitepprintshow seq int list show seqfill height ammonitepprintshow seq int list replpprinter replpprinter copy defaultheight seqfill seq int list ammoniterepl intelligently truncates output beyond certain size request full output printed ondemand print certain number line even change implicit pprintconfig subsequent line use new configuration ammonite default ship custom implementation readline provides ammonite syntax highlight code entering well output echoed response make much easier work larger snippet input color configurable easily turn color entirely via configuration stack trace similarly highlighted easier reading use arrow navigate line within snippet enter executes code last line multiline snippet meaning take time space code nicely fix mistake anywhere snippet history multiline meaning rerunning multiline snippet trivial even tweak long gone day desperately trying cram everything single line curse quietly notice mistake earlier line longer able fix painstakingly crafting multiline snippet painstakingly fish line individual line history run use altleftright move forwardbackwards one word time hold shift select text delete compose used eg shiftup selects text current cursor column one row tab shifttab work blockindent dedent section code expect desktop editor like sublime text intellij enhances multiline editing experience letting nicely layout morecomplex repl command way format code editor readlinestyle navigation hotkeys like ctrlw delete word escleftright navigate one word leftright still work comfortable console like bash python ipython even default scala console trouble exact hotkeys work ammonite apart browsing commandline history also perform history search entering search term pressing pull recent history line term underlined continue press cycle match backspace continue typing character refine search want press tab command character left right end search let continue working currentlydisplayed command pressing enter end search immediately submit command run also kick history search using ctrlr use ctrlr cycle match enter block input many independent line ammoniterepl simply wrap multiple line curly brace ammonite wait close evaluating content val x val x x int int int see content block unwrapped evaluated toplevel statement use eg declare mutually recursive function class companionobjects without forced squeeze everything onto single line nt want unwrapping behavior simply add another set curlies block evaluated normal block single expression val x val x int ammonite commandline editor allows undo redo portion edits ctrl undo last change altesc redo last change block typing deletes navigation count one undo make much convenient recover botched copypastes bulkdeletions ammonite provides set magic import let load additional code repl session import start toplevel inside repl command scala script let load scala script repl example given small script defining one value want myscriptsc val elite load repl session using import filemyscript myscriptelite int script subfolder simply use import filemyfoldermyscript script outer folder import filemyscript want import content script one go import filemyscript myscript import file elite int trivial example myscriptsc file contain anything want vals function defs class object trait import script documentation script work check scala script section subtlety dealing file import worth remembering note also perform file import predef file resolved relative file path useful predef large want break multiple file note script file imported multiple time reused even script imported multiple time compiled toplevel definition statement evaluated want run code def function script importing call repeatedly want reload script use ammonite saveload session functionality sesssave session importing script sessload ing reset script reimporting import thing inside script one chain import filemyscript rather must always import scriptobject first import thing script object import filemyscript myscript renamedscripts multiplescripts rename script onimport find name colliding import file myscript foobarscript foobarscript import multiple script import file myscript myotherscript behave would expect import work note importing multiple script name explicitly use wildcard import import file nt work similar import file except dump definition import script repl session useful using script hold set common import using import file import script nt propagate import script repl alternatively also useful want split ammonitepredefsc file multiple script eg want break predefsc two script ammonitepredefsc ammonitehelpersc could use import file import filehelper within predefsc file bring helper object scope within predefsc within repl import exechelper properly dump definition helpersc local scope often want dealing predef file see doc scala script script file work general let import ivy dependency maven central anywhere else example loading scalaz using ammoniterepl import ivy orgscalaz scalaz scalaz option option option int note different portion ivy import org library version format used represent scala dependency similar sbt dependency syntax want java dependency load using org library version format eg load google guava java library import ivy comgoogleguava comgooglecommoncollect val bimap immutablebimapof one two three bimapget string one bimapinverseget two int well org library version syntax loading scala library crosspublished full scala version eg rather import orgscalamacrosparadisesettings error object scalamacros member package org import ivy orgscalamacros orgscalamacrosparadisesettings boolsetting key value boolean false want load compiler plugin using import plugin ivy compiler plugins imported without plugin loaded import ivy orgspiremath trait f defined trait type either string error found type need use import plugin ivy import plugin ivy orgspiremath trait tc f defined trait tc type tceitherstr tc either string defined type tceitherstr importing plugins nt affect runtime classpath import plugin ivy comlihaoyi import scalatagstext error found value scalatags make ammonite ideal trying new library tool pull project like scalaz shapeless immediately start working repl import ivy comchuusai shapeless lol list hnil int string list int hnil lol list hnil string lol import shapelesssyntaxsingleton even nontrivial web framework like finagle akkahttp simply pulled run repl import ivy comtwitter import comtwitterfinagle comtwitterutil var servercount var clientresponse val service new service httpxrequest httpxresponse def apply req httpxrequest future httpxresponse servercount futurevalue httpxresponse reqversion httpxstatusok val server httpxserve service val client service httpxrequest httpxresponse httpxnewservice val request httpxrequest httpxmethodget requesthost wwwscalalangorg val response future httpxresponse client request responseonsuccess resp httpxresponse clientresponse respgetstatuscode awaitready response servercount int clientresponse int serverclose ammoniterepl configured set default resolvers add using coursier repository apis import ivy comambiata error failed resolve ivy dependency interprepositories seq coursierapiivyrepositoryof http defaultpattern import ivy comambiata import comambiatamundane including repository need authentication import coursierapi credential mavenrepository interprepositories seq mavenrepository http nexuscorpcomcontentrepositoriesreleases withcredentials credentialsof user pas need detailed control importing eg attribute classifier exclusion fall back using interploadivy deps coursierapidependency function configure dependency heart content import o interploadmodule printedscriptpath loadivyadvancedsc serializer let statically add maven ivy repository used artifact resolution mechanism yet allow credential registration import repo http jitpackio import ivy comgithubjupyter import jupyter nb prefixing url pattern ivy import repo ivy http dlbintraycomtypesafeivyreleases defaultpattern required ivy repository maven repository require prefix ammonite repl contains bunch builtin import definition default includes repl object representing repl api aliased repl allows eg replhistory use autocomplete typeof repl object see available utility tool time grep browse independent repl extremely useful imported default ammonite repl order provide rich consistent repl experience want disable import run repl clean namespace core implicits needed result prettyprintingtypeprinting work pas defaultpredef false repl main api nodefaultpredef repl commandline ammonite contains range useful builtins implemented normal function repl interp object eg replhistory replwidth replfrontend change frontend terminal implementation etc trait replapi readwritable prompt shell use change repl prompt time val prompt ref string frontend repl used take user input modifiable val frontend ref frontend display help text nt know use repl def help string last exception thrown repl null nothing yet thrown useful want additional information thrown exception printed stack trace eg many exception additional metadata attached want show stack trace exception nt normally print eg seeing stack ctrlc interrupt happened via lastexceptionprintstacktrace def lastexception throwable history command entered shell including previous session def fullhistory history history command entered shell current session def history history get type object useful finding method def typeof weaktypetag type get type object representing type useful finding method def typeof weaktypetag type throw away current scalatoolsnscglobal get new one def newcompiler unit access compiler crazy thing really want def compiler scalatoolsnscglobal access presentation compiler even crazier thing really want def interactivecompiler scalatoolsnscinteractiveglobal show import added bring value scope command user run includes import builtin predef user predef file def fullimports import show import added scope command user entered far excludes import builtin predef user predef file def import import class wrapping enabled list name previous command current command actually reference told scalac eg session like val n n int val p p int n p int would returned empty list called line val n val p would returned seq called line n p defines n defines p referenced line def usedearlierdefinitions seq string control thing prettyprinted repl feel free shadow definition change thing look implicit def tprintcolorsimplicit pprinttprintcolors implicit def codecolorsimplicit codecolors val pprinter ref pprintpprinter implicit def pprinterimplicit pprinter current width terminal def width int current height terminal def height int def show unit let configure prettyprinting value default simply disables truncation print entire thing set parameter well want def show width integer null height integer null indent integer null unit function used manipulate current repl session checkpointing progress reverting earlier checkpoint deleting checkpoint name frame get pushed stack default saved frame accessible simply calling load provide name save ing checkpoint later load ed directly providing name load unnamed checkpoint garbage collected together classloader associated data longer accessible due restore named checkpoint kept forever call delete really want go away def sess session def load replload def clipboard clipboard trait replload load command repl evaluates one another def apply line string unit load executes scriptfile specified path compilation unit separated n evaluated sequentially error happens print error message console def exec path ospath unit trait session current stack frame def frame list frame checkpoint current work placing future work frame name provided used quickly recover checkpoint later def save name string unit discard last frame effectively reverting session last save ed checkpoint name provided instead reverts session checkpoint name def load name string sessionchanged reset last save point pas num reset many savepoints since last one def pop num int sessionchanged deletes named checkpoint allowing garbage collected longer accessible def delete name string unit trait clipboard read content system clipboard return system clipboard content readable string empty string otherwise def read string set content system clipboard param data new content clipboard def write data internalswritable unit available part repl object imported scope default additional functionality available interp object also available script trait interpapi running script watch mode rerun main script file change default happens script file call watch arbitrary file script may depend def watch p ospath unit generalization watch allows watching arbitrary value content file path def watchvalue v color used render ammonite repl terminal rendering miscellaneous info message running script val color ref color tool related loading external script code repl def load interpload resolvers use loading jar def repository ref list repository function chained called coursier fetch object right run val resolutionhooks mutablebuffer fetch fetch exit ammonite repl also use ctrld exit def exit throw ammoniteexit exit ammonite repl also use ctrld exit def exit value throw ammoniteexit value function chained called exitvalue repl exit val beforeexithooks mutablebuffer configures current compiler compiler nt initialized yet register configuration callback applies compiler end initialized later def configurecompiler c scalatoolsnscglobal unit unit preconfigures next compiler useful tuning option used parsing yrangepos def preconfigurecompiler c scalatoolsnscsettings unit unit trait loadjar load jar file directory jvm classpath def cp jar ospath unit load jar url jvm classpath def cp jar javaneturl unit load one jar file directory jvm classpath def cp jar seq ospath unit load library mavenivy coordinate def ivy coordinate dependency unit trait interpload extends loadjar def module path ospath unit def plugin loadjar apart core builtins repl ammonite repl also includes many helper strictly necessarily useful almost repl session repl also import pipeoperators ammoniteops default make easy use tool like grep interactively import builtins repl tool useful strictly necessary ammonite provides src builtin let easily peek source code various function class use read doccomments inspect implementation help figure use src accepts two kinda input method call foobar case try bring concrete implementation method bar also leave method argument empty using arbitrary expression foo case try bring implementation foo runtime class src work scala java apis standard library well thirdparty dependency src open source file using le pager default wish change pas replacement command second argument eg src vim eg src seq vim flag used within sbt project src requires following sbt setting order make source code thirdparty dependency available optional required source command work fullclasspath test updateclassifiers test value configuration find configurationname testname get module flatmap artifact collect case f aclassifier source f ammonite also automatically downloads source jar library import via import ivy make browsable via src src experimental may always able find source code particular method class source location brings may line away source really want furthermore src also find source within local script sbt project likely already access via text editor anyway nevertheless work bulk case try come gitter channel face issue bash time l amm ammtemplatesh appveyoryml buildsbt buildsc ci deploykey git github gitignore integration internalsdocs license mill ops project readme readmemd shell sshd terminal travisyml real user sys time l lsseq concurrentdurationfiniteduration git ammtemplatesh integration readme github appveyoryml internalsdocs readmemd gitignore buildsbt mill shell travisyml buildsc ops sshd license ci target amm deploykey project terminal nanosecond bash provides time command use see long command took run ammoniteshell provides time function serf purpose bash version spit time adhoc table format stuck together output command ammoniteshell time instead return tuple containing expression evaluated time taken evaluate bash l grep gitignore readme readmemd hometravisbuildlihaoyiammonitegitignore hometravisbuildlihaoyiammonitereadme hometravisbuildlihaoyiammonitereadmemd bash l grep gitignore readme readmemd hometravisbuildlihaoyiammonitegitignore hometravisbuildlihaoyiammonitereadme hometravisbuildlihaoyiammonitereadmemd ammonite provides grep command let easily perform adhoc search within list shown ammonite grep used via flatmap filter case display match found highlighted additional context match used simply return relevant item general useful manual exploration useful script want deal list matched result later default ammonite grep match string literal want match via regex append r string literal turn regex bash l grep g az readme readmemd hometravisbuildlihaoyiammonitereadme hometravisbuildlihaoyiammonitereadmemd ammonite grep nt limited filesystem thing collection object piped grep example grep used quickly search jvm system property sysprops grep osos r value member scalasyssystemproperties val sysprops grep osos r compilation failed even use ammonite grep dig method object even large messy object fartoomany method go hand hunting want forgot want think raw name typeof replcompiler member grep raw value member reflectruntimeuniversememberscope val typeof replcompiler member grep raw compilation failed general ammonite grep serf purpose grep bash shell quick dirty way explore large amount semistructured data probably nt want build enterprise business logic top grep string matching working though grep quick way find item interest collection thing anything large sift hand yet sure exactly want browse utility let open fartoolarge data structure le pager letting page large quantity text navigating around searching without needing spam terminal output content losing earlier work outputspam simple call browse whatever value want eg thousand line lsrec result show dealing large blob data want dig manually might normally format nicely write file open vim le editor sublime text browse make process quick convenient customize browse call like would show call pprintpprintln call eg setting optional width color indent also choose viewer program case nt want use le eg command would open vim haoyiammonite browse viewer vim color pprintcolorsblackwhite apart using viewer vim also set color black white vim default nt display ansi color nicely also pas seq string viewer want pas additional flag editor course use editor would like emacs nano subl desugar allows easily see compiler code get run example call desugar see list converted listapply true false converted predefarrayassoc true minus greater false defaultwrite default defaultseqishw etc injected implicits comprehension filter converted relevant withfilter map call general trouble understanding combination implicit parameter implicit conversion macro odd scala feature desugar could see left magic happens desugar work scala ammonite allows save work half way letting discard future change returning state world saved defined memoryhogging variable nt need loaded wrong version thirdparty library reluctant reload repl reloading slow fear ammonite save important work whatever want later simply discard jar loaded variable defined val veryimportant veryimportant int replsesssave val oopsdontwantthis oopsdontwantthis int let try new cool new library import ivy comlihaoyi veryimportant int oopsdontwantthis int import scalatagstextall div hello render string div hello div oh maybe nt want scalatags replsessload veryimportant int oopsdontwantthis error found value oopsdontwantthis import scalatagstextall error found value scalatags apart plain save load simply discard everything recent save also provide name function let stop working branch go something else able come back later continue left val x x int int replsesssave xy initialized val z x z int replsesssave first z replsessload xy initialized val z x z int replsesssave second z z int replsessload first z z int replsessload second z z int lastly replsesspop function without argument behaves replsessload reseting last savepoint however pas number session frame like pop allow reset session even earlier save point replsesspop would put two savepoints ago replsesspop would put three savepoints ago letting reach earlier savepoints even give name passing large number like replsesspop would reset session way start ammonite save load functionality implemented via java classloaders original scala repl provides autocomplete except basic scenario value complete ammoniterepl get autocompleteanywhere support get modern ide seq map x x getclass asinstanceof isinstanceof tostring hashcode equal unary unary unary todouble tofloat tolong toint tochar toshort tobyte compareto doublevalue futu scalacollectionparallelfuturethreadpooltasks scalacollectionparallelfuturetasks scalaconcurrentimplfuture promisecompletingrunnable scalaconcurrentimplfuture scalaconcurrentfuture scalaconcurrentfuturetaskrunner scalaconcurrentfuture internalcallbackexecutor scalaconcurrentfuture class javautilconcurrentfuture javautilconcurrentfuturetask waitnode javautilconcurrentfuturetask comsuncorbaseimplorbutilclosurefuture ammonite also allows autocomplete third party dependency pulled via import ivy make easy navigate public package repository find name version dependency want none example work standard scala repl true hang ctrlc interrupted traditional scala repl nt handle runaway code give option kill process losing work ammoniterepl let interrupt thread stop runawaycommand keep going val x x int trigger compiler crash trait bar super object hashcode error javalangassertionerror assertion failed x int default scala repl throw away work compiler crash nt make sense compiler dumb string array byte pipe ammonite simply swap broken compiler new one let continue work apart feature ammonite repl fix large number bug default scala repl including limited ammonite configured via scala code live ammonitepredefsc file passed sbt initialcommands passed commandline executable predef anything put predefsc executed load ammonite repl handy place put common import setup code even call import ivy load thirdparty jar compilation predef cached first run noticeably slow initialization repl example thing configure set shell prompt something else replprompt change terminal front end default ammonite linuxosx jlinewindows window replfrontend frontend unix replfrontend frontend window replfrontend frontend ammonite changing color used ammonite interpcolors ammoniteutilcolorsblackwhite interpcolors ammoniteutilcolorsdefault one time interpcolors prompt fansicolorred interpcolors ident fansicolorgreen interpcolors type fansicoloryellow interpcolors literal fansicolormagenta interpcolors prefix fansicolorcyan interpcolors comment fansicolorred interpcolors keyword fansiboldon interpcolors selected fansiunderlinedon interpcolors error fansicoloryellow default value seeing ref defined trait stableref get current value stableref instant time def apply set value stableref always value def update unit trait ref extends stableref return function used get value ref point time def live set value ref always value byname argument point time def bind unit see signature basically interact ref two way either getting setting value value binding value expression evaluated every time ref value needed example latter use bind set prompt always include current working directory replpromptbind wdtostring common practice shell modification make include eg current branch git call ammonite subprocess api current timestampuser similarly possible apart configuration rest shell ref configuration scala compiler take place separately compiler configuration mechanism access compiler compiler modify setting see fit example action disabling default scala import list lol string list lol interpconfigurecompiler settingsnoimportsvalue true list lol predef import disappear error found value list interpconfigurecompiler settingsnoimportsvalue false list lol string list lol disabling scala languageimport enforcement object x extends dynamic error extension type scaladynamic need enabled interpconfigurecompiler settingslanguagetrytoset list dynamic object x extends dynamic defined object x thing still work enabling warning disabled default list match case list double int interpconfigurecompiler settingsnowarningsvalue false list match case list double warning fruitlesstypetestwarningmessageblahblahblah note refer replcompiler interactive repl use interpconfigurecompiler scriptspredef replcompiler may null script cached replcompilersettingsnowarningsvalue boolean false want change always present place ammonitepredefsc ammonite also support javaopts environment variable passing argument jvm run inside eg pas custom memory limit via bash javaopts amm start repl letting use megabyte memory ammonite repl plainoldscalaobject like scala object easily used within existing scala program useful thing like interactive debugging hosting remote repl interact longlived scala process instantiating ammonite inside existing program serve powerful interactive console use ammonite inside existing scala program need first add dependency librarydependencies comlihaoyi ammonite cross crossversionfull instantiate code anywhere within program package ammoniteintegration object testmain def main args array string unit val hello hello break debug repl ammonitemain predefcode println starting debugging run hello hello foovalue foo def foo configure instantiated repl passing argument main call eg redirect inputoutput stream run predef configure ammonite used tool debug scala program conveniently opening repl point within program interact live program data similar pdbipdb python first add ammonite classpath eg sbt snippet librarydependencies comlihaoyi ammonite cross crossversionfull note unlike snippet given leave test may want ammonite available within main project unit test anywhere within program place breakpoint via package ammoniteintegration object testmain def main args array string unit val hello hello break debug repl ammonitemain predefcode println starting debugging run hello hello foovalue foo def foo program reach point pause open ammonite repl value provided bound name gave interact value normal scala value within repl use ctrld exit exit repl continue normal program execution note name given must plain scala identifier example used debug change wootjs webserver case added debug statement within websocket frame handler inspect value taking part clientserver data exchange also put run statement inside conditional make break certain interesting situation eg bug occur see bind value interested name inside debug repl repl free explore interactively debug call return default unit also return custom value passing argument exit exit repl value returned debug used rest scala application ammonite also used remotely connect running application interact realtime similar erlang erl remsh command useful eg multiple scalajava process running nt sure whenif want inspect debugging one ammonite leave ssh server running process connecttodisconnectfrom one leisure working inprocess scalajava object method class interactively without change code restart process add breakpoints instrumentation add ammonitesshd classpath example sbt librarydependencies comlihaoyi ammonitesshd cross crossversionfull add repl server application import ammonitesshd val replserver new sshdrepl sshserverconfig address localhost publicfacing shell port available port passwordauthenticator pwdauth publickeyauthenticator replserverstart start application able connect using ssh like ssh repl localhost interact running app invoke stop method whenever want shutdown ammonite sshd server example sshd repl server embedded akka http microservice example interact code live inspecting value calling method running system try different thing see work put final bit application code example app located local machine free connect remote node running code security note probably unsafe run server publicly host production publicfacing application insist probably want keybased authentication available supplying publickeyauthenticator sshserverconfig despite perfectly possible run production infrastructure simply leave host set localhost rely machine ssh access keep unwanted user would first ssh onto machine ssh ammonite repl running localhost typically organization already bastion firewall necessary infrastructure allow trusted party ssh access relevant machine running localhost let leverage gain security property without reimplement scala scala script lightweight file containing scala code directly run command line unlike normal scala project scala script let save run code without setting buildfile project scala script useful writing small piece code much quicker write deploy fullfledged sbt project creating ammonite script matter creating myscriptsc scala code running terminal deploying script matter copying script file whereever want run running project folder worrying jar file uberjars worrying compiling code script automatically compiled first time run subsequently start quickly minimal overhead writing running scala code nt get much easier example ammonite continuous integration script written sc scala script haoyi blog resume example using scala script simple simple task file without hassle setting heavyweight sbt project begin download ammonite scriptrunner scala also available older scala version sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm try latest feature unstable release sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm read learn scala script work ammonite defines format allows load external script repl used save common functionality used later date simplest case script file simply sequence scala statement eg myscriptsc print banner println hello world common import import sysprocess import collectionmutable common initialization code val x println x write scala code want ammonite script including toplevel statement definition eg println val x valid normal scala project need wrap sort toplevel statement expression boilerplate object foo wrapper done automatically ammonite matter running script repl bash eg bash amm myscriptsc hello world x code stand alone script depend script often depend third party library much code already written nt make sense reinvent everything ammonite script allow import script like bash python script furthermore let cleanly depend third party library since ammonite run jvm mean ivy dependency ammonite ensure relevant dependency always downloaded used never need worry remembering install thing running script like scripting language ammonite script allow break script multiple file import order use file unlike normal scala project need set srcmainscala folder create build file thing simply split script two file import one using import file basicsc val basicvalue fileimportsc import filebasic val fileimportval basicbasicvalue defining simple val basicsc importing fileimportsc course use defined fileimportsc import another file indirectfileimportsc import filefileimport val indirectfileimportval fileimportfileimportval importing file many deep want use segment start import file import thing outside current script enclosing folder eg import filefoo import script file foosc make available use file import inside scala script behave file import within ammoniterepl characteristic easily make use external ivy artifact right script without needing set separate build file simply use import ivy would ammoniterepl available script use eg make use scalatags library import ivy comlihaoyi scalatagstextall val rendered div moo render need detailed control importing eg attribute classifier exclusion fall back using interploadivy deps coursierapidependency function import o interploadmodule printedscriptpath loadivyadvancedsc serializer note use function script need multistage script listed interploadivy call need earlier block default everything script compiled executed single block use magic import load script ivy artifact script run load hardcoded script artifact eg load different script depending runtime variable want load different script ivy artifact depending runtime value use runtimeequivalent magic import import cp becomes interploadcp import file becomes interploadmodule import ivy becomes interploadivy plainoldscalafunctions let pas path script load load different ivy artifact depending runtime value additionally overloaded version interploadcp take seq path classpath entry variant much efficient adding multiple classpath entry since function get run current compilation block compiled need split script two compilation block use result loaded code subsequent block print banner println welcome xyz custom repl val scalazversion interploadivy orgscalaz scalazcore scalazversion necessary ammonite process interploadivy continuing common import import scalaz import scalaz use scalaz general necessary often usually able load want using magic import nevertheless sometimes may find needing get hood use loading function directly happens using multistage script way go often calling script external commandline eg bash need pas argument configure behavior ammonite done defining main method eg argssc val x main def main int string path ospath ospwd hello pathlast script run command line amm argssc moo hello moomoomoo ammonite toplevel definition execute first eg setting x main method called argument passed note returnvalue script prettyprinted default quote string may nicely formatindent list datastructures want avoid default prettyprinting behavior annotate main method returning unit add printlns argssc val x main def main int string path ospath ospwd unit println hello pathlast amm moo hello moomoomoo ammonite also pas named argument using demarcate amm argssc moo hello moomoomoo ammonite default argument behave would expect ie allow omit calling argument parsed using scoptread typeclass provides parser primitive like int double string well basic datastructures like seqs taken commaseparated list common type like path pas wrong number argument argument fails deserialize script fail error message main method get automatically called loadmodule loadexec script within ammonite repl get imported scope like method value defined script call normally vararg argument work would expect well allowing one argument passed commandline aggregated seq function use also allows use custom argumentparser eg eugene yokota excellent scopt library defining function taking string main def entrypoint args string case ammonite take argument forward main method unchecked unvalidated point deal raw seq string however wish note vararg argument passed byname eg via args foo ammonite passing argument come script file ammonite argument come script file given script amm predefcode println welcome argssc moo welcome hello moomoomoo ammonite ammonite argument go left argssc script argument go right argssc script argument right also empty nt want pas argument script want define script shebang line run ammonite particular argument use binbash exec amm predef println welcome pas predef flag ammonite running script via argssc want pas different set argument run script using amm eg amm predef println hello argssc moo note singleline usrbinenv amm predef shebang may work system osx portable would work linux multiple main method single main method argument pas script get used argument main multiple main method first argument script used select main method call eg given multimainsc val x main def maina println hello x main def functionb int string path ospath ospwd println hello pathrelativeto ospwd call via amm multimainsc maina amm multimainsc functionb hello document script doc annotation default script multimainsc val x main def maina println hello x main def functionb int string path ospath ospwd println hello pathrelativeto ospwd result usage message need specify subcommand call running multimainsc available subcommands maina functionb int string path ospath default ospwd add doc via multimaindocsc val x main def maina println hello x doc explains function main def functionb int doc many time repeat string make long originally string doc string repeat path ospath ospwd println hello pathrelativeto ospwd shown part usage message need specify subcommand call running multimaindocsc available subcommands maina functionb explains function int many time repeat string make long originally string string repeat path ospath default ospwd ammonite allows load java scala library use via import ivy syntax also come bundled basic library eg requestsscala making http call upickle library json api dealing common json format example tiny script offer two main method one shorten github link using requestsscala gitio api one pull list releasenames given github project using requestsscala upickle json package github api usrbinenv amm httpapisc import ivy comlihaoyi comlihaoyi lazy val jsonplaceholderbase option systemgetenv jsonplaceholder getorelse http jsonplaceholdertypicodecom main def addpost title string body string ujsonread requestsget jsonplaceholderbaseposts data seq title title body body userid text objget id map numtoint getorelse main def comment postid int val json ujsonread request get jsonplaceholderbasecomments postid postid text val name item jsonarr name itemobjget name yield namestr namesmkstring run amm script see amm httpapisc need specify main method call running httpapisc available main method def shorten longurl string def listreleases project string run two function using chmod x make file executable via httpapisc shorten http wwwgithubcom http httpapisc listreleases lihaoyiammonite snaphot commit apart bundling thirdparty library convenience ammonite also provides builtins use script inspect manipulate interpreter note much smaller set functionality set builtins available repl wo nt thing like replprompt replhistory thing really make sense interactive repl trait interpapi running script watch mode rerun main script file change default happens script file call watch arbitrary file script may depend def watch p ospath unit generalization watch allows watching arbitrary value content file path def watchvalue v color used render ammonite repl terminal rendering miscellaneous info message running script val color ref color tool related loading external script code repl def load interpload resolvers use loading jar def repository ref list repository function chained called coursier fetch object right run val resolutionhooks mutablebuffer fetch fetch exit ammonite repl also use ctrld exit def exit throw ammoniteexit exit ammonite repl also use ctrld exit def exit value throw ammoniteexit value function chained called exitvalue repl exit val beforeexithooks mutablebuffer configures current compiler compiler nt initialized yet register configuration callback applies compiler end initialized later def configurecompiler c scalatoolsnscglobal unit unit preconfigures next compiler useful tuning option used parsing yrangepos def preconfigurecompiler c scalatoolsnscsettings unit unit trait loadjar load jar file directory jvm classpath def cp jar ospath unit load jar url jvm classpath def cp jar javaneturl unit load one jar file directory jvm classpath def cp jar seq ospath unit load library mavenivy coordinate def ivy coordinate dependency unit trait interpload extends loadjar def module path ospath unit def plugin loadjar want code loaded run script place ammonitepredefscriptsc distinct repl predefined code life ammonitepredefsc want code preinitialized repl script place ammonitepredefsharedsc two way main way run ammonite script repl bash apart loading script within ammoniterepl also run script using ammonite executable external shell eg bash sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm amm pathtoscriptsc type value import defined script available command entered repl loading script also make ammonite script selfexecutable using shebang example script named hello need add sc extension amm command need path usrbinenv amm println hello world make executable run external shell eg bash chmod x pathtoscript pathtoscript ammonite also support javaopts environment variable passing argument jvm run inside eg pas custom memory limit via bash javaopts amm pathtoscriptsc let use megabyte memory watch reload ammonite provides w watch flag tell exit script completes instead watch file run rerun change use flag via amm w foosc within script also flag file want ammonite watch via interpwatch p path function useful iterating script together external data file script depends want script working intended useful able poke around repl script run order see value stored variable method available via autocomplete run script using predefp flag amm predef foosc run script normal completion open repl value defined script imported ready use poke around within repl wish using predefp run script open interactive repl combined watchw flag amm watch predef foosc open repl script run exit repl watch script file file script depends rerunning script repl change predefp used include script file predef running script repl useful range thing apart serving debug repl script load script ammonite repl using import file syntax example import myscriptsc file access x value x nt work yet compilation failed found value x val x nt work yet import filemyscript welcome xyz custom repl myscriptx refer definition module int import myscript x work int also import module associated definition want import x nt work yet compilation failed found value x val x nt work yet import filemyscript myscript welcome xyz custom repl x int note default script imported via file encapsulated import inside myscript performs available outside myscriptsc import filemyscript myscript welcome xyz custom repl import file mutablebuffer x found value mutable val mutablebuffer x compilation failed see even though collectionmutable imported inside myscriptsc use outside importing want make everything import definition available default importing use exec import instead file import execmyscript welcome xyz custom repl import exec mutablebuffer x mutablebuffer int arraybuffer see mutable available x even though directly import file import useful defining reusable module common function definition exec import useful alias common setup get repl environment way want course file import via import file import exec import scala script way rule apply ammonite scala script run normal scala code though simple sourcetosource transformation applied first turn script syntax allows toplevel expression defs vals etc valid scala syntax nt happens roughly general due scala slow compiler scala script rely heavily caching achieve reasonable performance first run modified script fewseconds overhead due scala compiler subsequent run script fastish overhead spinning jvm although much slower scripting language like bash start python practice acceptable many use case probably want find xargs amm foosc large number file overhead add individual script fine furthermore ammonite make really easy include sort recursiveiterative logic inside single script use l lsrec ammoniteops traverse filesystem work multiple file within process avoids duplicating startup overhead file manipulating existing sbt project like access class ammonite script achieve running script sbt requires adding ammonite sbt project creating bridge class pas argument sbt ammonite main class add ammonite dependency buildsbt librarydependencies comlihaoyi ammonite test cross crossversionfull test directory create class like package ammoniteintegration object ammonitebridge def main args array string unit ammonitemainmain args run script using sbt test run pathtoscriptsc already started sbt repl run without quote test run pathtoscriptsc running script sbt project achieved ammonitemainmain array predefcode println welcome filesc ammoniteops library make common filesystem operation scala concise easytouse bash shell robust enough use large application without getting messy life repo ammonite repl easily used standalone normal sbtmaven project get started ammoniteops add buildsbt librarydependencies comlihaoyi ammoniteops set example common operation ammoniteops import ammoniteops pick directory want work relative process working dir val wd pwdopstarget testclasses delete file folder exists rm wd make folder named folder mkdir wdfolder copy file folder particular path cp wdfolder copy file folder another folder particular path also cpover copy path stomp anything cpinto wdfolder list current directory val listed l wd write file without pain necessary enclosing directory created automatically write package examplenclass foo n createfolders true write package examplenclass bar n createfolders true rename scala file inside folder java file l mv case r xscala xjava list file folder val renamed l linecount java file recursively wd val linecount lsrec wd ext java readlines size sum find concatenate java file directly working directory mkdir wd target l ext java read write wdtarget bundledjava example make heavy use ammoniteops path operation extension achieve minimal concise syntax see ammoniteops replaces common mess boilerplate def removeall path string def getrecursively f javaiofile seq javaiofile flistfilesfilter isdirectory flatmap getrecursively flistfiles getrecursively new javaiofile path foreach f println f fdelete throw new runtimeexception failed delete fgetabsolutepath new javaiofile path delete removeall targetfolderthing single sleek expression rm pwdtargetfolderthing handle common case recursively deleting folder notfailing file nt exist etc note ammoniteops support window experimentally even ammoniterepl mean use convenient filesystem operation command scala program run window try let know problem ammonite us stronglytyped datastructures represent filesystem path two basic version path absolute path starting root relpath relative path rooted anywhere generally almost command take absolute path number useful operation performed absolute path created way get process current working directory convention directory code care may differ pwd called wd val wd pwd path nested inside wd wdfolderfile path starting root rootfolderfile path space special character wd folder filetxt one level wd wdup two level wd wdupup note inbuilt operation change pwd general need simply defining new path eg val target pwdtarget sufficient need made use pwd builtin path number path built ammonite pwd current working directory process ca nt changed java need another path work convention define wd variable root root filesystem home home directory current user tmp tmpdir creates temporary filefolder return path relpaths represent relative path basically data structure path except represent number ups relative path applied created following way path folderfile val folderfile val folderfile path file get converted relpath implicit val file relative difference two path val target pwdtargetfile assert target relativeto pwd targetfile get resolved automatically val minus pwd relativeto target val ups upup assert minus ups general apis take relative path main purpose combined absolute path order create new absolute path eg val target pwdtargetfile val rel target relativeto pwd val newbase rootcodeserver assert newbaserel rootcodeservertargetfile relative path come inbuilt val target roottargetfile assert targetup roottarget note path relative absolute always expressed canonical manner assert rootfolderfileup tostring folder folderfile assert folderfileup tostring folder folderfile nt need worry canonicalizing path comparing equality otherwise manipulating ammonite path transparent datastructures always access segment ups directly nevertheless ammonite defines number useful operation handle common case dealing path definition thistype represents type current path eg path return path relpath return relpath similarly compare subtract path type apart relpaths number data structure convertible relpaths spliced path using string symbol array convertible relpath seq convertible relpath apart builtins like pwd root home also construct ammonite path string javaiofiles javaniofilepaths val relstr hellocowworld val absstr helloworld assert relpath relstr hellocow path also allows path starting expanded become home directory path absstr roothelloworld also pas javaiofile javaniofilepath object instead string constructing path val reliofile new javaiofile relstr val absniofile javaniofilepathsget absstr assert relpath reliofile hellocow path absniofile roothelloworld path reliofile rootbase rootbasehellocow trying construct invalid path fails exception val relstr hello intercept javalangillegalargumentexception path relstr val absstr hello intercept javalangillegalargumentexception relpath absstr val toomanyupsstr hello intercept patherrorabsolutepathoutsideroottype path toomanyupsstr see attempting parse relative path path absolute path relpath throw exception uncertain kind path getting could use basepath parse val relstr hellocowworld val absstr helloworld assert filepath relstr hellocow filepath absstr roothelloworld convert basepath either path relpath patternmatch type decide want case also pas second argument path base path parsed relative path base used coerce absolute path val relstr hellocowworld val absstr helloworld val basepath filepath filepath relstr assert path relstr rootbase rootbasehellocow path absstr rootbase roothelloworld path basepath rootbase rootbasehellocow path pwd last example wanted common behavior converting relative path absolute based current working directory pas pwd second argument path apart passing string javaiofiles javaniofilepaths also pas basepaths parsed early convenient way converting absolute path nt already one general ammonite picky distinction relative absolute path nt allow automatic conversion based currentworkingdirectory way many filesystem apis bash java python even case uncertain eg taking user input string either handle possibility basepath explicitly choose convert relative path absolute using base add boilerplate overall result robust filesystem code nt contain bug like one path nt interesting serve base use perform filesystem operation concise easy use way quick tour core capability ammoniteops provides import ammoniteops let pick working directory val wd path pwdopstarget testclasses make sure empty rm wd mkdir wd reading writing file done read write write string traversable string array byte write wd cow write wd seq cown hear moo write weigh twice much getbytes reading either read string readlines get vector string readbytes get array byte read wd cow read wd cownhear moo readlines wd vector cow hear moo readbytes wd weigh twice much getbytes operation mirrored readresource readresourcelines readresourcebytes conveniently read file classpath val resourcepath resourcetestammoniteopsfolder filetxt read resourcepath length readbytes resourcepath length readlines resourcepath length read resource relative particular class including current class passing getclass val relresourcepath resource getclass folder filetxt read relresourcepath length readbytes relresourcepath length readlines relresourcepath length default write fails already file place use writeappend writeover want appendtooverwrite existing file writeappend wd ni eat grass writeover wd cownhere stand read wd cowni eat grass read wd cownhere stand create folder mkdir behaves mkdir p bash creates parent necessary val deep wdthisisverydeep mkdir deep writing file also creates necessary parent write deepdeeeep filetxt cow createfolders true l provides listing every direct child given folder file folder included l wd seq wd wd wdthis lsrec thing recursively lsrec deep seq deepdeeeep deepdeeeep filetxt move file folder mv remove rm l deep seq deepdeeeep mv deepdeeeep deeprenameddeeeep l deep seq deeprenameddeeeep mvinto let move file particular folder rather particular path mvinto deeprenameddeeeep filetxt deep l deeprenameddeeeep seq l deep seq deep filetxt deeprenameddeeeep mvover let move file particular path something stomp mvover deep filetxt deeprenameddeeeep l deep seq deeprenameddeeeep read deeprenameddeeeep cow content filetxt rm behaves rm rf bash deletes anything file folder even folder filled content rm deeprenameddeeeep rm deep filetxt l deep seq stat path find information file folder exists val info stat wd infoisdir false infoisfile true infosize ammonite provides implicit conversion path stat use attribute directly wd size definition isomorphic main difference ops called two way rm filepath rm filepath latter syntax allows use easily command line remembering close parenthesis hassle indentation signifies nesting eg addition write also writeappend writeover operation predefined strongly typed feel free jump implementation look else available shortlist one may interest l path doc returning vector path lsiter path returning iterator path lsrec path doc lsreciter read path doc returning string readlines path readbytes path returning seq string array byte also use various read command reading resource reading javaioinputstreams write path content doc let write string array byte seqs rm path doc roughly bash rm rf mv src dest doc cp src dest doc roughly bash cp r exists path doc stat path doc statposix path doc ln src dest doc kill processid doc general operator sensiblesafe default rm cp recursive rm ignores file nt exist operation create file folder mkdir write mv automatically create necessary parent directory write also stomp existing file default need use writeover general make operation much easier use default cover use case without needing special flag fiddling ammoniteops contains set extension method common type serve purpose make thing concise turn scala relativelyconcise language one tight bash script still maintaining high level typesafety maintainability come scala code extension apply traversable seqs list array others thing f alias thing map f thing f alias thing flatmap f thing f alias thing filter f thing f alias thing reduce f thing f alias thing foreach f behave exactly implementation sole purpose make thing concise commandline thing f alias f thing let flip around function argument fit nicely ammonite pipeline f thing alias f thing another syntaxsaving extension make easy call function without constantly opening closing bracket nothing else real value ammonite fact pipe thing together easily could bash longer need write ream boilerplate accomplish simple task chain listed top readme fun example move file inside py folder l wd py mvall case py x dx find dotfiles current folder val dot l wd last find name largest file current working directory lsrec wd x xsize x sortby take sorted list common word scala source file def txt lsrec wd ext scala read def freq seq string groupby x x mapvalues length toseq val map txt split freq sortby see often compose elaborate operation entirely naturally using available pipe without needing remember special flag technique another example ensure nt scala file current working directory line character long excluding generated source srcmanaged folder def longlines p path p readlines p zipwithindex val fileswithtoolonglines git lsfiles ammoniteopspwd outline path ammoniteopspwd ext scala longlines srcmanaged assert fileswithtoolonglineslength addition manipulating path filesystem also manipulate resource path order read resource java classpath default path used load resource absolute using threadcurrentthread getcontextclassloader also pas classloader explicitly resource call val content read resourcetestammoniteopsfolder filetxt assert contentscontains file content lols val cl getclassgetclassloader val read resource cl testammoniteopsfolder filetxt assert file content lols want load resource relative particular class pas class resource relative getclass get something relative current class val cl classof roottestammoniteopstesting val content read resource cl folder filetxt assert contentscontains file content lols val read resource getclass folder filetxt assert file content lols case reading resource performed pas leading slash getresource foobar call case classloader getresource passing leading slash never valid case class getresource passing leading slash equivalent calling getresource classloader ammoniteops ensures use two valid case api without leading slash two case leading slash redundant case class getresource replaced classloader getresource invalid leading slash classloader getresource note read path ca nt write perform filesystem operation since really file note also resource belong classloaders may multiple classloaders application eg running servlet repl make sure use correct classloader class belonging correct classloader load resource want else might find ammoniteops provides easy syntax anyone want spawn subprocesses eg command like l git commit wip provided operator used follows import ammoniteops import ammoniteopsimplicitwd l buildsbt log ops readme repl terminal echo module project readmemd target shell int l commandresult buildsbt echo log module ops project readme readmemd repl target terminal short let run command would bash dump output standardout similar way returning zero returncode upon successful command completion let run git command edit file via vim open ssh session even start sbt python shell right scala repl throw interactiveshelloutexception returncode nonzero hand intended programmatic usage rather printing stdout return commandresult contains standard output standard error err subprocess provide helper method retrieve stdout stderr list line val re l opssrctestresourcestestdata assert resoutlines seq filetxt single string val re l opssrctestresourcestestdata assert resoutstring array byte unix val re echo abc val listed resoutbytes assert listed getbytes listedtoseq throw shelloutexception containing commandresult returncode nonzero val ex intercept shelloutexception l doesnotexist val re commandresult exresult assert resexitcode reserrstringcontains file directory case end commandresult used however like also use backticks execute command nt valid scala identifier eg sshadd enter passphrase usershaoyisshidrsa lastly also pas argument subprocess call string symbol seqs string git branch ghpages history master speedip int git branch commandresult ghpages history master speedip git checkout master already master commandresult readmeindexscalatex branch uptodate originmaster git checkout master readmeindexscalatex already master branch uptodate originmaster int val stuff list readmemd buildsbt stuff list string list readmemd buildsbt l gitignore stuff gitignore buildsbt readmemd ammoniteops currently provide many convenient way piping together multiple process support may come future someone find useful enough implement call subprocesses way compatible normal terminal mean easily call thing like vim open text editor python open python terminal sbt open sbt prompt python python default sep gcc compatible apple llvm darwin type help copyright credit license information print hello world hello world int sbt info loading global plugins info updating file globalplugins info resolving orgfusesourcejansi jansi info done updating info set current project haoyi build file usershaoyi ammonite let pas environment variable subprocess call pas named argument invoke subprocess ia val bash c echo hello envarg assert seq val bash c echo hello envarg assert seq val bash c echo hello envarg assert seq hello envarg val bash c echo hello envarg assert seq invoke file disk using way invoke shell command val re commandresult rootbinbash c echo hello envarg assert resoutstringtrim ammonite current working directory sideeffect unlike bash instead argument command invoking passed explicitly implicitly val l pwd explicitly implicitly import ammoniteopsimplicitwd val l note passing explicitly need use commandname order parse properly limitation scala syntax nt likely change another limitation invoking file need call apply explicitly rather relying plainfunctioncall syntax unix val output apply scriptfolderechowithwd hello rootusr assert outputoutlines seq hello usr ammoniteshell rocksolid system shell replace bash interface operating system using scala primary command scripting language running jvm apart system operation ammoniteshell provides fullrange java apis usage commandline including loading library maven central would want use ammoniteshell instead bash possible reason include never remember syntax write ifstatement bash sick googling set inconsistent adhoc command obviously need flag nrk sort file size seen bash dynamicsloppy nature fail hard nt want future work fall victim bug think technology improved last year modern system shell better shell forefather none apply likely wo nt interested bullet point strike chord read get started discussion project exists take look presentation slide beyond bash shell scripting typed oo language presented scala bay check section design decision tradeoff begin using ammoniteshell simply download default predefsc configure repl usable system shell downloading ammoniterepl executable mkdir p ammonite curl l ammonitepredefsc http gitiovhakq sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm freebsd simply install package pkg install ammonite compile shellsammonite port directory sure setup predefsc correctly though start using ammonite replacement bash ammoniteshell nt backwards compatible bash nt even language giving access scala instead quirky bash scripting language nevertheless lot thing expect bash turn ammoniteshell bash pwd hometravisbuildlihaoyiammonite bash pwd instead called wd instead subprocess print stdout wd simply variable holding working directory see path syntax also different absolute path wd must start root path segment must quoted scala string symbol apart however basically documentation path go syntax semantics path detail navigate around filesystem using cd instead bash cd bash pwd hometravisbuildlihaoyiammonite bash cd target bash pwd hometravisbuildlihaoyiammonitetarget bash cd bash pwd hometravisbuildlihaoyiammonite cd target path hometravisbuildlihaoyiammonitetarget wd path hometravisbuildlihaoyiammonitetarget cd path hometravisbuildlihaoyiammonite wd path hometravisbuildlihaoyiammonite bash l amm ammtemplatesh appveyoryml buildsbt buildsc ci deploykey integration internalsdocs license mill ops project readme readmemd shell sshd target terminal git ammtemplatesh integration readme github appveyoryml internalsdocs readmemd gitignore buildsbt mill shell travisyml buildsc ops sshd license ci target amm deploykey project terminal bash l syntax tweaked slightly become l apart basically thing listing file folder behaves similarly bash l project buildproperties pluginssbt project target buildproperties pluginssbt project target bash l projecttarget configclasses stream configclasses stream use quoted symbol string syntax defining path otherwise behaves identically press tab point halfway filename autocomplete like bash listing recursively done via lsrec instead find bash find opssrcmain opssrcmain opssrcmainscala opssrcmainscalaammonite opssrcmainscalaammoniteops opssrcmainscalaammoniteopspackagescala opssrcmainscalaammoniteopsshelloutscala opssrcmainscalaammoniteopsfileopsscala opssrcmainscalaammoniteopsextensionsscala scalaammonite ammonite ammonite scalaammoniteops ammoniteops ammoniteops scalaammoniteops extensionsscala scalaammoniteops fileopsscala scalaammoniteops shelloutscala scalaammoniteops packagescala ammoniteops filtermapextscala ammoniteops lsseqscala ammoniteops filtermapextscala ammoniteops lsseqscala l lsrec command function defined ammoniteops ammoniteshell us ammoniteops provide nice api use filesystem operation default setup import ammoniteops ammoniterepl give nice pathcompletion shown also provides additional commandlinefriendly functionality top default ammoniteops command bash mkdir targettest bash echo hello targettesthellotxt bash cat targettesthellotxt hello bash l targettest hellotxt bash cp targettesthellotxt bash l targettest hellotxt bash mv targettesthellotxt bash l targettest bash rm rf targettest write targettest hellotxt hello read targettest hellotxt string hello l targettest lsseq hellotxt cp targettest hellotxt targettest l targettest lsseq hellotxt mv targettest hellotxt targettest l targettest lsseq rm targettest ammonite allows piping similar bash unlike bash ammonite variety pipe use different thing thing f alias thing map f thing f alias thing flatmap f thing f alias thing filter f thing f alias thing reduce f thing f alias thing foreach f example get dotfiles current directory bash l grep git github gitignore travisyml hometravisbuildlihaoyiammonitegit hometravisbuildlihaoyiammonitegithub hometravisbuildlihaoyiammonitegitignore hometravisbuildlihaoyiammonitetravisyml using pipe basically performs filter path coming left case checking path first character last segment path character slightly verbose bash bash equivalent shown much find largest file given directory tree bash find replsrc l sort nrk head find replsrc file directory resumedocx systemshellpng highlightingpng lastly perform recursive line count scala file current directory tree bash find opssrcmain name scala xargs wc l opssrcmainscalaammoniteopspackagescala opssrcmainscalaammoniteopsshelloutscala opssrcmainscalaammoniteopsfileopsscala opssrcmainscalaammoniteopsextensionsscala total example use ammonite pipe check section extension chaining ammonite provides convenient way spawn subprocesses using command cmd spawn subprocess command cmd commandline argument print stdout stderr take input current console return exit code done cmd spawn subprocess similar using return stdout subprocess string throw exception exit code nonzero example use bash command run standalone bash script bash ammonite bash bash opssrctestresourcesscriptsecho hello hello note apart quoting path segment symbol also need quote hello string make thing slightly verbose traditional shell also make much clearer argument literal v variable passing single argument argument scala allows leave parenthesis shown bash git branch head detached master master bash date fri jul utc use ammoniteops support spawning subprocesses call external program even interactive one like python sbt python python default sep gcc compatible apple llvm darwin type help copyright credit license information print hello world hello world int sbt info loading global plugins info updating file globalplugins info resolving orgfusesourcejansi jansi info done updating info set current project haoyi build file usershaoyi ammoniteshell us scala command scripting language although command seem short concise full power language available time let thing difficult infeasible using traditional shell like bash since ammoniteshell run scala code perform math mathpow double assign thing value vals x x int define reusable function addmul int addmul int addmul int make use mutable var conditionals loop total total int ammoniteshell everything typed value stream byte case bash mean assign variable call method like programming language git ammtemplatesh integration readme github appveyoryml internalsdocs readmemd gitignore buildsbt mill shell travisyml buildsc ops sshd license ci target amm deploykey project terminal val count fileslength count int case scala annotate type git ammtemplatesh integration readme github appveyoryml internalsdocs readmemd gitignore buildsbt mill shell travisyml buildsc ops sshd license ci target amm deploykey project terminal val count int fileslength count int often required eg earlier example since scala type inference may make code clearer furthermore make mistake type annotated help compiler give specific error message fact variable typed mean try perform wrong operation variable get error even code run git ammtemplatesh integration readme github appveyoryml internalsdocs readmemd gitignore buildsbt mill shell travisyml buildsc ops sshd license ci target amm deploykey project terminal l type mismatch found int required string val l compilation failed fact ammoniteshell us typed structured value instead byte stream make lot thing easier example common data structure like array map present number int number int numberssum int number numberssum int val score map txt scala score map string int map txt scala score txt int naturally data structure typed trying put wrong sort value inside result compilation error code get chance run val myvalue myvalue string number myvalue nt work type mismatch found string required int val number myvalue nt work compilation failed number myvalue also nt work type mismatch found string required int val number myvalue also nt work compilation failed need convert string int number myvaluetoint int number myvaluetoint number toint general apart filesystemspecific command able anything would expect able scala shell java project documentation nt intended full tutorial scala language check scala documentation want learn apart pipe operator described earlier section piping ammoniteshell allows call valid scala method value scala example using normal scala collection operation deal list file counting many file exist extension script test testdata scriptsecho scriptsechowithwd testammonite testdata filetxt testammoniteops yoghurt curd cream cheesetxt testammoniteopsfolder amtxt btxt testammoniteopsfolder filetxt val extensioncounts allfilesgroupby ext mapvalues length extensioncounts collectionmapview string int mapview txt java apis likewise available import javautil import javautil val date new date date date fri jul utc dategetday int fact ammoniteshell allows ask published thirdparty javascala library usage shell downloaded automatically cached made available use eg load popular library like google guava using shell import ivy comgoogleguava load maven central downloading http downloaded http downloading http downloaded http downloading http downloading http downloaded http downloaded http import ivy load maven central import comgooglecommoncollectimmutablebimap work import comgooglecommoncollectimmutablebimap work val bimap immutablebimapof one two three bimap immutablebimap int string bimapget string one bimapinverseget two int joda time downloaded http downloading http downloading http downloaded http downloaded http import ivy import orgjodatime datetime period duration import orgjodatime datetime period duration val dt new datetime dt datetime val plusperiod dtplus perioddays plusperiod datetime dtplus new duration datetime see section import ivy learn write script way write command load using import file read check documentation script file ammoniteshell take fundamentally different architecture traditional shell even moremodern shellalternatives significant difference include command scripting language standard wellknown application language scala rather one speciallydesigned shell shell run jvm execute integratewith arbitrary javajvm code library section examine decision consequence turn incumbent space looking traditional system shell like bash zsh fish well popular nonsystem repls like pythonipython repl use scala command scripting language unusual among shell many reason firstly shell implement purpose built language bash zsh fish even obscure one like xonsh implement language secondly language extremely dynamic apart popular language repls python ruby javascript tend dynamical interpreted language scala fall opposite end spectrum statically typed compiled scala brings many change using traditional dynamic interpreted repl language code entered shell take time compile first command easily take compile even compiler warm second delay command begin executing compiled code run extremely fast computeintensive code easily run faster scala v python bash paid cost compiling many mistake get caught even command begin executing le valuable small command execute quickly slower command processing data nice get error compilation rather execution apart difference scala dynamic language python ruby etc repl usage scala even away sort adhoc ultradynamic language often associated traditional shell bash sh zsh etc particular scala provides set proper data structure work rather bytestreams unicode string proper number like int double absolute path relative relpaths array map iterators sort handy datastructures many command return object field sound simple realize none bashzshfish behave way scala generalpurpose language math work string write nontrivial algorithm quickly easily surprising coming python repl simple task difficulttoimpossible traditional system shell like bash scala run code process shellout subprocesses ammonite using syntax command like l rm simple function living inprocess rather separate process reduces overhead compared spawning new process time cause additional risk command cause process crash hard entire shell fails bash command would fail latter set tradeoff would also present many shellreplacements written dynamic language like xonsh written python earlier set hand pretty unique ammonite using scala positive negative point list running ammonite directly jvm different shell work scripting language interpreter implemented c like running code directly bytecode jvm negative get jvm boot time although initial severalsecond delay due scala compiler slowness also due cost jvm classloading initialization helloworld jvm project load instantly one us large number classfiles take longer contrast shell written c load basically instantly get jvm bloat ammonite implemented thousand line code wrap become jar file already larger shell get larger bundle jvm along general jvm classfile format bloated inefficient way exclude numerous unneeded part jvm initial download project jigsaw help finally land java ammonite us hundred megabyte last count memory ordersofmagnitude interpreter written c python jvm traditionally pointerheavy memoryintensive platform running code show project valhalla would help also scheduled land java general jvm traditionally used serverside platform longrunning service slowstartup bloated diskmemory footprint symptom running jvm also upside though ammonite code run ridiculously fast paid compilation faster python bash trivial multiplier really make different dealing nontrivial data set computation take minute ammonite might take hour done python repl mean moderatelylarge computation may require special tool library optimization perform python might trivial implement naively ammonite still enjoying reasonable speed ammonite make use jvm apis lot jvm generalpurpose platform general purpose language java thus apis sort thing dealing date time math network thread many thing may always need capability nice disposal necessary ammonite make use javajvm library excellent infrastructure used java developer download manage library import ivy away need parse python source ast load jython need highperformance web server load akkahttp need data someone stored yaml file load snakeyaml parse nt even need download manage library import ivy ammonite java excellent dependencymanagement infrastructure download along transitive dependency cache locally make available code pro con running ammonite jvm gain heavy startupmemory overhead also get access highperformance jit massive ecosystem available package overall ammoniteshell blur line programming language repl like ipython ruby irb system shell like bash zsh like system shell ammoniteshell provides concise filesystem operation pathcompletion easy spawning subprocesses like programming language repls provides fullfledged generalpurpose language use rather crippled cutdown commandlanguage available system shell goal provide something general enough use system shell generalpurpose programming language traditionally always tension deciding write script bash already using bash shell getting complicated ca nt follow logic bash rewrite python write python need deal argumentparsing forwarding bash python bash annoying since script python use pythonipython shell instead bash dealing thing use pythonipython shell basic filesystem operation becomes impossible traditionally really good answer dilemma whether use bash python write script whether use bash python shell always something frustrating setup ammoniteshell dilemma use concise generalpurpose language shell would script large small ammoniteshell concisely deal file commandline language use write maintainable script large small language use write rocksolid application code ammonite scala repl script meant extended load arbitrary javascala module internet via import ivy using thirdparty code extend repl anything wish tool like ammoniteshell simply module like simple install java download ammonite onto linuxosx machine try one fun snippet work directly ammoniterepl save scala script want something permanent ammonite come builtin way make http request java scala module quite well example welcome ammonite repl import ammoniteops import ammoniteops val resp requestsget http apigithubcomreposscalascala val parsed upicklejsonread resptext asinstanceof upicklejsobj parsed upicklejsobj obj arraybuffer id num name str scala fullname str scalascala owner obj arraybuffer login str scala k v parsedvalue write pwdtargettempk upicklejsonwrite v l pwdtargettemp lsseq lsseq usershaoyidropbox personal workspaceammonitetargettemparchiveurl usershaoyidropbox personal workspaceammonitetargettempassigneesurl usershaoyidropbox personal workspaceammonitetargettempblobsurl usershaoyidropbox personal workspaceammonitetargettempbranchesurl example use requestsscala library download url use upickle ammoniteops parse json write file upickle ammoniteops bundled ammonite repl used internally small example illustrates potential find needing scrape website bulkdownload large quantity data website httpjson api start within matter second using ammonite result given nicely structured data deal using java scala library tool used rather forced munge around bash sometimes may find need get data somewhere without nice json api mean need fall back scraping html every website api every website meant accessed programmatically nt mean ca nt using library like jsoup quickly easily get computer extract useful information html meant human using ammonite repl interactively without needing set annoying project scaffolding import ivy orgjsoup import orgjsoup import jsoup import collectionjavaconversions make java collection easier use val doc jsoupconnect http enwikipediaorg get docselect selectelements id firstheading class firstheading lang en main page docselect huge messy selectelements id style background fontfamily inherit fontweight bold solid textalign left color span class mwheadline id today featured article span id style background fontfamily inherit fontweight bold solid textalign left color span class mwheadline id didyouknow know span docselect map text easily pull bit want collectionmutablebuffer string arraybuffer today featured article know news day today featured list today featured picture area wikipedia wikipedia sister project wikipedia language navigation menu wanted scrape headline newssite scrape video game review gaming site nt need worry setting project installing library stuff simply load library like jsoup right ammonite repl copy example website start scraping useful information le minute ammonite repl run java virtual machine mean use create desktop gui application like anyone else us java example create helloworld interactive desktop app using swing import javaxswing javaawtevent val frame new jframe hello world window val button new jbutton click buttonaddactionlistener new actionlistener def actionperformed e actionevent buttonsettext clicked button buttonsetpreferredsize new javaawtdimension framegetcontentpaneadd button framepack framesetvisible true run inside ammonite repl without installing anything show following window single button clicked change text although small demo use ammonite experiment gui programming without needing go hassle setting environment project rigmarole run code right console even interact gui live console eg running snippet code add another action listener keep count many time clicked button var count buttonaddactionlistener new actionlistener def actionperformed e actionevent count framesettitle click count immediately becomes visible title window even clicking button still access count console count int level live interactivity traditionally hard come world desktop gui application ammonite repl totally seamless apart writing code often find dealing document spreadsheet various sort often rather tedious would nt cool could deal thing programmatically turn opensource java library apache poi let ammoniterepl quickly easily load library get work favorite document example extracting data old resume docx format import ivy orgapachepoi import ammoniteops prepare deal file import orgapachepoixwpfusermodel bring msword apis scope import collectionjavaconversions make use java collection easier val path pwdammsrctestresourcestestdata resumedocx val docx new xwpfdocument new javaiobytearrayinputstream readbytes path docxget tab getallembedds getparagrapharray getallpackagepictures getparagraphpos getallpictures getparagraphs getbodyelements getparagraphsiterator getbodyelementsiterator getparent getclass getpart getcommentbyid getpartbyid getcomments getparttype getdocument getpicturedatabyid docxgetparagraphsmap gettext collectionmutablebuffer string arraybuffer haoyi li education massachusetts institute technology cambridge bachelor science degree computer science gpa sep jun work dropbox san francisco ca docxgethyperlinksmap geturl array string array http http wwwgithubcomlihaoyiscalatags http wwwgithubcomlihaoyiscalarx http wwwgithubcomlihaoyiscalajsfiddle http wwwgithubcomlihaoyimetascala http wwwgithubcomlihaoyimacropy http wwwgithubcomlihaoyi http wwwgithubcomlihaoyi see loading apache poi library single command reading resume file one two immediately start exploring document data model see inside interest even get tabcompletion method document making really easy interactively explore thing word document offer small example easily thing vein apache poi let createmodifysave docx file addition reading meaning automatically perform batch operation large number document library also provides mechanism load excel spreadsheet powerpoint slide deck meaning easy programmable access great bulk microsoftoffice file find dealing perform lot image operation java use bufferedimage want access lowlevel detail readwrite individual pixel using draw shape perform transforms anything could possibly want image also simple library like thumbnailator basic thing like renamingresizingrotating nt need pixelperpixel access example using thumbnailator resize folder image put somewhere else import ivy netcoobird import netcoobirdthumbnailator import netcoobirdthumbnailator val image l pwdammsrctestresourcestestdataimages image lsseq lsseq usershaoyidropbox personal workspaceammonitereplsrctestresourcestestdataimagesgettingstartedpng usershaoyidropbox personal workspaceammonitereplsrctestresourcestestdataimageshighlightingpng usershaoyidropbox personal workspaceammonitereplsrctestresourcestestdataimagessystemshellpng val dest pwdtargetthumbnails dest path usershaoyidropbox personal workspaceammonitetargetthumbnails mkdir dest image thumbnailsof itostring size tofile destilast tostring val thumbnail l dest thumbnail lsseq lsseq usershaoyidropbox personal workspaceammonitetargetthumbnailsgettingstartedpng usershaoyidropbox personal workspaceammonitetargetthumbnailshighlightingpng usershaoyidropbox personal workspaceammonitetargetthumbnailssystemshellpng imagesmap size original image file pretty big seq long list thumbnailsmap size thumbnailed image file much smaller seq long list word machine learning sound big intimidating like something need spend year getting phd understand could machinelearning whatever mean spare time minute two turn many java library help basic ammonite repl getting started easy one example get started using opennlp project naturallanguage processing minute example found online show extract english name raw string using nlp import ivy orgapacheopennlp load opennlp val tokendataurl http val tokendata requestsget tokendataurl import opennlptoolstokenize let get started opennlp val str hi mike see book peter smith import javaiobytearrayinputstream val tokenmodel new tokenizermodel new bytearrayinputstream tokendatatext val tokenizer new tokenizerme tokenmodel val token tokenizertokenize str tplems array string array hi import opennlptoolsnamefind turn need test data val namedataurl http val namedata http namedataurl asbytes namedata httpresponse array byte httpresponse array val namemodel new tokennamefindermodel new bytearrayinputstream namedatabody val namefinder new namefinderme namemodel namefinder namefinderme opennlptoolsnamefindnamefinderme val name namefinderfind token name array opennlptoolsutilspan array person person opennlptoolsutilspanspanstostrings name token woohoo name array string array mike peter smith took comparison earlier cookbook recipe one still le step bad something installs multiple thirdparty module pull training data internet natural language processing extract english name text blob obviously go deep field would definitely lot reading understanding blindly following tutorial like probably would find worth time set proper project nevertheless quick run perform basic nlp fun way get started whether decide take possible ammonite repl singlefile play framework application import ivy comtypesafeplay comtypesafeplay comlihaoyi import playcoreserver playapiroutingsird playapimvc val server nettyserverfromrouter new serverconfig rootdir new javaiofile port sslport none address mode playapimodedev property systemgetproperties configuration playapiconfiguration playservernetty map maxinitiallinelength maxheadersize maxchunksize logwire false eventloopthreads transport jdk optionchild map case get p hello action resultsok hello try println requestsget http text finally serverstop ammonite scriptrunning capability also used way set lightweight scala project without needing sbt ide get started example singlefile play framework test spin http server make single http request print response shuts server run via amm playframeworksc although hello world example easily keep server running instead exiting test request extend functionality possibly splitting multiple script file ammonite great database job complicated sql alone example us scalikejdbc update row import ivy orgscalikejdbc chqoslogback mysql classforname commysqljdbcdriver import scalikejdbc connectionpoolsingleton jdbc mysql localhostdatabase root implicit val session autosession val user sql select id email user map r rslong id rsstring email listapply user list long string list foo bar bar baz def isnormalised email string boolean def normaliseemail email string string val userswithinvalidemail usersfilternot case id email isnormalised email userswithinvalidemail list long string list foo bar bar baz userswithinvalidemailforeach case id email val updatedemail normaliseemail email sql update user set email updatedemail id id updateapply ammonite primarily maintained li haoyi lot help laszlo mero summer google summer code help many contributor active gitter channel mailing list people would using ammonite latest version scala ammonite also provides standalone executables older version scala scala sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm ammonite also used old version scala embedded sbt project without special modification also given number talk ammonite conference ammonite terminal module used base dotty repl finishing school new scala concept michael pilquist used ammonite introduction functional stream scala screencasts eugene burmako used ammonite scala meta talk scaladays new york yeghishe piruzyan ammonite module project try assemble common module loaded ammonite repl jupyterscala alex archambault us fork ammonite jupyter kernel dynaml machinelearning repl us ammonite repl shapeless project tryshapelesssh instantrepl built using ammonite seems twitter us ammonite within monorepo monorepi codebase yang bo thoughtworks created sbt plugin export classpath sbt project ammonite script elastichttps wwwelasticco us ammonite management repl inside elastic cloud enterprisehttps wwwelasticcoproductsece product scaladoc various project although best read documentation page learn use project scaladoc still useful reference support scala handle sigint reading user input bsp support ammonite script fix position update first line script inline hardcoded predef metadata avoid compiling every time support scala bump pprint fastparse upickle request fix main method handling script run via classbased bump oslib upickle requestsscala version compatibility genywritable interface started publishing bootstrap script easily committed version control downloadlaunch ammonite via amm bump upickle support scala support scala added thin flag providing user code cleaner classpath without ammonite dependency fix regression source builtin autocomplete import ivy statement add support scala nt keep resolution involving snapshot artifact version interval resolution cache ammonite switch coursier fix various issue classbased wrapper classbased nt print thing marked private replace scalajhttp requestsscala bundled http library fix regression stty handling preventing ctrlc interrupt user code making running subcommands ammonite prompt seem buggy fix missingrequirementerror starting ammonite fix nosuchfileexception starting ammonite clean machine bump oslib version note backwardsincompatible change ammoniteopswrite longer creates enclosing folder default pas createfolders true flag make order argument ammoniteopslns swapped consistency underlying java apis core ammoniteops extracted standalone project oslib ammoniteops namespace remains backwards compatibility continues contain extension method shorthand syntax oslib generalpurpose scripting programming use oslib upgrade fastparse upickle support scala removed scalaz dependency fix frontendutils width height window fix passing empty parameter script avoid unnecessarily recompiling synthetic predef file changing working directory improve repl performance preserving compiler tty metadata across command improvement jline repl autocomplete print correct ammonite version repl start bust script cache amm run different folder avoid unwanted caching script compilation depends filesystem path support scala hide uninteresting autocomplete option tabcompletion bump jline version crosspublish scala classbased input wrapping sparkserialization friendliness refactor ammoniterepl module properly usable without main ammonite package thanks alex archambault crosspublish scala undocumented feature magic importing url ammonite repl feauture removed ammonite repl back experimentally import url http rawgithubusercontentcomlihaoyiammonitemasterammsrctestresourcesscriptsannotationsc remote content url wrapped remote object accessed later remoteproduct list note functionality experimental may subject change removal future fix issue running lsrec path including inaccessible file would throw javaniofileaccessdeniedexception thanks piotr kwiecinski ammonite crosspublished support scala ammonite repl print additional newline output command visually separate command make easier skim command history terminal copypasted elsewhere fix issue comment identifier properly backticked causing repl stop working correctly recently launched patreon page raise money fund future development ammonite enjoyed using ammonite use day day please chip support project output default colored console interactive noncolored otherwise default people would happy script colored output default scriptrunner interactive following rule much script info output like compiling watching change message colored cliflag color set true false force color happy default behavior replcolors builtin moved interpcolors allows finegrained customize color eg error message info message running script using import file empty script file longer cause spurious error cache properly invalidated script import file deleted w watch watch predef file well mean make change predef eg crashing trying fix ammonite rerun script automatically improved error handling failure within predef longer show large stack trace containing irrelevant stack frame predef file longer cause problem autocomplete repl parse error within file show proper filename rather console ctrl c interrupt place exception useful stack trace repllastexception help debug code interrupted ctrl c longer crash repl perform entering command code start running ammonite repl warms compiler typing first command make likely compilation fast take moment enter command nt significantly effect time taken otherwise import ivy longer fails find source dependency instead merely printing warning interploadexec interploadapply moved replloadexec replloadapply available running script never really welldefined semantic run within script using replloadexec replloadapply within predefsc repl still possible interpwatch builtin work folder well file watching file within folder restarting script change fix regression broke binding variable main run make watch flag robust file deleted mtimeing make properly rerun script file watched folder renamed display doc annotation script main method part script help text thanks mgedigian use part import ivy call load scala library crosspublished full scala version eg rather thanks aeffrig ammonite support opening script debug repl script run script scope loaded poke around interactively command line flag predef predeffile predefcode predef respectively reflect using custom predef file much common custom predef code snippet ammonitemain argument predef renamed predefcode new argument predeffile added match commandline interface predef previously predeffile add file addition existing predefsc predefscriptsc ammonite want replace predef ammonite new flag nohomepredef disables predef ammonite predef file stand alone ammonitepredefsharedsc gone want back adding import execpredefshared within predefsc predefscriptsc file also import others file predefsc predefscriptsc way ammonite load linux http proxy environment variable jvm sysprops default running standalone executable using ammonite within sbt project need manually eg calling ammonitemainproxyfromenvsetpropproxyfromenv within predefcode pas ammonitemain ammonite script show usage text bashlinux format rather scala format better fit scripting ecosystem modified way ammonite argument script get passed rather separating ammonite args script args argument script file used ammonite argument script file get forwarded script main method renamed src builtin source reduce chance name collision pas script argument via foo foo error message script consistently colored rather mostly uncolored sometimes turning red script without main method properly show error argument passed error message script reliably sent stderr rather stdout code within ammonite repl script run within context ammonite package let u avoid littering toplevel package namespace miscellaneous name like file sess remove foo bar baz implicit syntax chainableconversions implicit cool simple enough worth including default reenable foo show syntax repl regressed fix crash autocomplete subsystem caused regression fixed issue downstream script would properly recompile script import changed ensure importing script twice via diamonddependency end compiling twice instead us first version compiled path longer automatically expands home directory consistency filesystem apis use pathexpanduser manually add w watch watch reload flag let run script repeatedly every time change code via amm w foosc useful actively working script greatly reduces iteration time also manually include file wish watch eg iterating external data config file fix scalacclasspath error loading typelevelcats experimental support source builtin brings source code method class see implementation read docstring importing file within predef properly make available within repl way import predef required ammoniteshell tweaked slightly using please update ammonitepredefsc new predef code fix regression show browse builtins caused default configuration unusable force prettyprinting scalaxmlelem use xml tostring rather treating case class since caseclass representation borked due weirdness class improve prettyprinting path relpaths result subprocesses filelistings default repl previously improvedprettyprinters limited ammoniteshell pasting multiple separate multiline statement subsequent statement longer stomp earlier one terminal output fix error message running script ammonite find main method specify first nonscript arg start fix crash trying prettyprint value whose tostring empty string ammonite us alex archambault coursier library dependency resolution downloading hopefully fix many perennial nondeterministic ivy resolution problem provide greater flexibility loading ivy dependency eg excludes classifier etc fix experimental apache spark support run basic spark command ammonite script well repl look sparksc script repository example get started spark support currently experimental feel free contribute fix notice something missing wrong upgrade pprint fix large number issue previous implicitmacro based prettyprinter introduced new interpconfigurecompiler builtin let configure compiler way robust case caching latelazy initialization fixing use interpconfigurecompiler instead replcompiler configure safely properly run import hook multiblock script block defined allowing add resolversrepositories performing import ivy subsequent block fix revamped script argument passed running script script file must always first argument amm command argument script file get delegated script main method unless present case argument get delegated script get passed ammonite allows define main method vararg string accepts argument default letting use custom arg parser input string fix return value ammonite script main method exit call get prettyprinted default script completes make composing script much convenient main method use printing output commandline also used scala code imported script disable annotate main method returning unit exit cleanly used script without failing nullpointerexception addition existing use repl avoid crash nonexistent path classpath thanks olivier roland default rsa ammonite remote repl enable keybased auth thanks espen wiborg ammonite anonymously log time start repl session count many command get run allow author understand usage pattern prioritize improvement wish disable pas noremotelogging commandline flag remoteloggingfalse argument main fix classloader related problem multistage script main nicer error message try run nonexistent script ammoniteopspath string resolve home directory current user many improvement classpath scanning recompilation logic greatly reduce time taken start ammonite sbt project avoid many existing problem stale compilation cache fix crash try run empty script miscellaneous info message go stderr rather stdout nt get mixed script output pipe file make startup banner configurable via command line flag crosspublish scala bump version apachesshd emanresusername avoid filealreadyexistsexception compiling script parallel armanbilge add beforeexithooks register cleanup code emanresusername add sleep shelloutexecutestream reduce spinning rorygraves add overloaded version loadjarcp take sequence path mallman automatically publish standalone executable scala thanks jhnsmth bytecode class defined repl accessible via getclassgetclassloadergetresource thanks jhnsmth fix crash working hadoop ammonite thanks tom dyas ctrlu ctrlk cut beginningend current line rather entire input block thanks jordan gwyn crosspublished scala help roman tkalenko investigated fixed gnarly classpath bug handle multiline shebang line thanks greg dorrell fix nullpointerexception nosavethenload situation repl thanks roman tkalenko use console sshd stream redirection avoid interthread spillage stdout thanks timothy dettrick tweak default import avoid ambiguous import reported allow configuration sshd console classloader use rsa host key instead dsa fix properly setting context classloader running cached script make iter version file operation return geny generator rather iterators avoid problem leaking file handle fix hole ammoniteopspath allowing invalid path empty segment constructed fix thanks roman tklalenko upgrade fansi reduce memory usage update fastparsescalaparse dependency running script ammonite print compiling foosc message compiled first time want case silence using switch thanks coderabhishek predeffile switch allows multiple input allowing pas multiple file get evaluated predef import ivy longer cache snapshot version thanks julie pitt deprecate ammoniteopscwd preference ammoniteopspwd help clear confusion cwd local wds thanks julie pitt set default heap limit megabyte amm standalone executable longer grows default system memory typically multiple gigabyte unnecessarily need give memory start amm avoid unwrapping block script leaving unwrapping block input feature interactive repl cmd line switch make ivy log silent though failure still thrown exception thanks coderabhishek added show typeof back default repl import since pretty useful writeover ammoniteops properly truncate file thing written shorter original ammonite longer incorrectly allows multiple expression evaluated line compilation error multiple statement block longer redundant semicolon prefixed onto improved linenumberreporting certain case use import file fix publication artifact non ammonite version actually avoid importing repl api function local scope real hygienified default namespace avoiding importing repl api function local scope instead leaving inside repl object backwards incompatible change separated apis available script load resolvers interp object available repl repl object repl available running script unless pas replapi flag command line want maintain old behavior eg backwardscompat put import repl ammonitepredefsc import interp ammonitepredefsharedsc bring everything back scope predefsc applies interactive repl want predef code applies script use predefscriptsc want predef code applies use predefsharedsc added version desugar scala nt print thing prettilyaccurately version better nothing changed syntax import file segment outside current directory import file foo import filefoo make lot shorter mitigates problem caused filename long use javaopts environment variable pas flag jvm starting ammonite thanks simon scarduzio running script outside current working directory tree well script nonalphanumeric symbol file path work thanks coderabhishek script without sc run directly command line rather throwing indexoutofboundsexception thanks coderabhishek modularized ammonite internals main module ammonite broken smaller module maintainability visible outside world sure report bug backwards incompatibly change extension script predef file scala sc avoid problem sbt discovering trying failing compile normal scala file script file vastly faster run cached fixed overhead instead seeing faster classpath scanning much aggressive robust caching thanks coderabhishek working gsoc fixed performance regression greatly sped pasting text repl behavior ctrl p ctrl n tweaked consistent readline implementation magic import exist provide much intuitive way importing file depending ivy artifact without fumbling old loadfoo function required loadmodule loadexec loadivy largely superseded import file import exec import ivy way pas script argument script totally revamped faster intuitive provide better error message thing go wrong added new toplevel docsite chapter scala script reflects promotion quick hack pain neck actually use something actually feel pretty nice use tried running ammonite script earlier totally turned worth another shot ammonite work window exception interactive repl using ammonitefrontend thanks coderabhishek worked gsoc started continuous deployment ammonite project artifact executables set commits get pushed merged master published immediately documentationsite updated standalone executable uploaded github release ivy artifact uploaded maven central instruction downloadinginstalling shown unstable version section pr get merged published become available within hour two author anyone else begin using fix error silently swallowed fixed loadexec predefscala cause npe fixed default using ammonite inside sbt project us old ammonite storage folder inmemory storage system restores behavior fix regression causing backspace work performing historysearch internal refactoring made browse use process current working directory implicit path scope since time nt matter make welcome banner welcome ammonite repl customizable fixed bug triggering autocomplete resulted broken repl session introduced desugar helper ammoniterepl letting easily see compiler transforming code get run prefix root import package reduce chance naming collision improved source location error message failure script filename matching name script instead mainscala line number matching original line number instead line number synthetic code thanks coderabhishek failure script run using ammonite command line via loadmodule show meaningful error irrelevant internal stacktraces wrapper name greatly simplified name wrapper object script match name script eg myscript rather based code hash eg placed synthetic code package loaded script go ammonitescripts code entered repl go ammonitesession wrote basic internals documentation case people want read internal working ammonite way easier digging ton code changed interface embedding ammonite make configuring ammonite repl invoking programmatically much consistent moved tool grep time browse ammoniteshell base ammoniterepl made imported default everyone enjoy default imported various pipe operation ammoniteops aliasing map filter etc make convenient use tool like grep base repl massive internal refactors try clean ammonite codebase get ready future work find bug please report fixed repl requires two carriage return move new line compiler setting set predef get preserved session start replacing compiler thanks rob norris fixed fixed resolver pattern local ivy thanks aish fenton fixed kill command ammoniteops thanks 杨博 unknown ansi escape code escape character removed rather messing repl rendering write generalized work combination array traversable iterator eg write foo iterator iterator array string write longer insert newlines item default introduced browse helper ammoniteshell letting easily open large data structure external editor like vim emacs browse without spamming console improved error message invalid path segment make specific suggest alternative user trying broke filepath subtrait basepath trait differentiate basepaths filesystem path constructed javaniofilepath javaiofiles relpath path ca nt resourcepath pathmaketemp renamed tmp tmpdir arrowkeys work properly previously odd case creating b c code instead b c code converted stringencoding method take scalaiocodec instead string charset letting pas either type implicitly converted improved performance various read command competitive javanio read readlines take optional charset passed via read file charset string readlines file charset string default make read resource read threadcurrentthreadgetcontextclassloader default fixing reorganize reading resource ammoniteops allow proper handling absolute relative resource passing class classloaders make read work inputstreams renamed inputpath readable appropriate name work two different nonpath entity resource inputstreams bump upickle pprint published scala thanks clark kampfe fixed stack overflow lsing large directory fixed regression preventing running script via amm using relative path ammonite robust interacting compiler plugins fixed import nt get improperly collapsed defining value called repl longer borks session improved readlineemulation ammonitefrontend ctrlt altt properly transpose character word killring properly aggregate multiple consecutive kill added asserts rm cp mv prevent removing root folder copyingmoving folder commandlineundo via ctrl redo via escalt supported pageup pagedown fnup fndown mac scroll history used startend input allowing use pageuppagedown quickly scroll history lot multiline block experimental support ammoniteops window nt tested basic ci pass try let know problem change around ammoniteops definition path wrap javaniofilepath thus used window multiple drive virtual filesystems jimfs construction path various type string javaniofilepath javaiofile much well behaved consistent see constructing path detail readresource rootfoo read resourcefoo parser improvement fix bug trying write multiline snippet cp mv mode wrapping content automatically shifted onto new line avoid problem copying pasting thrown exception made available repl repllastexception variable case need metadata want stacktrace nonprintedbydefault exception eg threaddeath due ctrlc thanks coderabhishek fixed ammonite repl confused singleton type improve prettyprinting rangeinclusive thanks saheb fix shadowing behavior type vals pressing backspace drop historybrowsing properly preserving edits press enter without entering character added support multiline prompt thanks thirstycrow fix lsing empty directory give error thanks coderabhishek implemented history search also known reverseisearchctrlr fixed error due function type byname parameter fixed javautilnosuchelementexception head empty list ammoniterepl fixed nosuchelementexception thrown repl using type alias refer shapeless coproduct warning enabled flag compilersettingsnowarnvalue false stopped ivy spitting countless useless unknown resolver null warning resolving dependency fixed edge case around import shadowing sequencing started ammonite cookbook example using ammonite repl useful work fixed support artifact resolvers load library published maven central eric torreborre fixed javautilnosuchelementexception noneget shifttab without selection f seniapsm fix performance regression causing slowness c ping large snippet added ability pas script argument ammonite script external command line eg bash iteratorreturning command like l lsrec readlines renamed lsiter lsreciter readlinesiter help cut cryptic operator added time command ammoniteshell roughly equivalent bash time command allowing easy timing simple command lsrec expose basic configurability recursion allowing skip directory controlling prepostorder result path relpaths longer permit path segment path relpaths u vector string instead seq string segment datastructure promising consistent semantics prettyprinting result l properly get truncated large crossbuild refactor commandresult type returned operator properly capture raw byte output stdout stderr exit code see spawning subprocesses detail added new grep command added support word navigation ctrlarrow linux thanks ian mcintosh moved initialization call ammonitereplrun ammoniterepldebug ammonitemainrun ammonitemaindebug fixed def tab autocomplete crasher thanks matthew edward fixed inputheight bug around multiline selection would case prompt fly console multilineselect tabindent shifttabdedent work pressing enter submits input cursor bottom added powerful saveload session api letting save work point time return later compiledcodecaches properly invalidated change projectcode using ammonite repl existing sbt project simplify way shelling run file subprocesses work align documentation update fastparsescalaparse fix perennial classpath problem thanks johannes rudolph fix wildcardimports java library like joda guava added mit license slightly robust tab completion thanks sanjiv sahayam properly handly eof standard input thanks patrick premont swapped garbage collector reduce unnecessary memory footprint allow splicing seq string subprocess argument fix source packaging causing problem ensime allow shebang line make ammonite script conveniently executable robustify linebreakinglogic pathcompletion work using ammonite filesystem shell ammonite filesystem functionality cd wd pathcompletion pulled ammoniterepl available separately ammoniteshell improve prettyprinting l lsrec command ammonite used remote repl alreadyrunning scala process letting ssh poke around time running thanks viacheslav blinov fix execution file via symbol current working directory loadivy properly attempt load artifact local ivycache ivylocal folder fetching maven central wrote good amount documentation ammoniteshell using ammonite bash replacement provide way invoking file passing environment variable documented existing approach setting compiler flag fixed bug readline reimplementation causing barelyfull line terminal mess cursor positioning line redrawing remove object autocomplete list helpful trim useless member default import list fix filehandleleak usage readlines lslsrec fix bug fix running ammonite using openjdk thanks johannes rudolph support home end key thanks johannes rudolph fix incorrect syntax highlighting support loading compiler plugins thanks alexandre archambault use ammonite debugging tool like python pdb placing interactive breakpoint anywhere within normal scala application lot lot terminal improvement courtesy erik osheim last delimited block script loaded via loadmodule get name dumped repl environment letting create semblance hygiene thanks laszlo mero remove embarrassing debug println left behind autocomplete code fix pathseparator ammoniterepl least basicallyrunnable window although buggy update robust version pprint fix fix ca nt fix typo fix bad wrapping long line ammoniterepl fix crasher running repl new machine readded support minus feature nt work eg scopeaware typeprinting added standalone distributable come bundled scala letting quickly load experiment library without sbt user input syntax highlighting default exception stack trace highlighted well make easier read prettyprinting extracted separate project aside greatly improved many common case eg sealed trait hierarchy prettyprinted rather falling back tostring exposed show function default letting prettyprint value custom configuration wrappingwidth truncationheight color fixed case pprinttprint causing compilation error persistent data stored ammonite folder includes ammonitehistory ammonitepredefscala various cache thanks laszlo mero define ammonitepredefscala configuration file executed first thing ammonite repl loaded useful common import loadivying library configuration repl added ability load arbitrary script file via loadexec loadmodule thanks laszlo mero configuration previously passed repls constructor done inrepl multiline editing feature via custom terminal interface behave like readline added convenience removed ability reload class using loadivy longer cause existing value lazily recomputed added cd wd builtins make working filesystem operation via ammoniteops pleasant evaluated value type unit longer echoed user performance improvement startup time repl come thirdparty library resolution via loadivy cached first call letting eg load library ammonitepredefscala without waiting slow ivyresolution every startup standardized use ref configuration including ability bind live value expression allows trivially spawn subprocesses letting run git command edit file via vim open ssh session even start sbt python shell right scala repl fix prettyprinting higherkinded type drop support ammonite many collection pprints much lazier avoid stringifying whole collection going get truncated anyway type get printed semiqualified depending scope simple highlighting define custom tprint provide custom printing type operatornamed twoparam generic type printed infix default allow predef parameter passed mainrun call letting configure initialization command import compilation error expression longer show synthetic code message ivy module loading let configure verbosity level defining macro repl using subsequent line work output line truncated past certain length configurable thanks laszlo mero lot improvement ctrlc ctrld handling make behave like repls fix pprint derivation fails nested case class fix exception trying use ammonite repl cross building scala autocomplete result sorted alphabetically fixed fix nothing echoed multiple import importing thing java package work properly capture exception expose repl repllastexception including exception causing failure page contains documentation latest stable version ammonite ammonite also publishes unstable version latest available direct download sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm cygwin run following sed cygpath w usrlocalbinamm latest build also run window batch save following ammbat http usage sbt project librarydependencies comlihaoyi ammonite test cross crossversionfull ammonite also provides standalone unstable executables older version scala scala sudo sh c echo usrbinenv sh curl l http usrlocalbinamm chmod x usrlocalbinamm amm unstable version contain brandnew feature currently worked caveat unstable feature subject change experimentation generally work automated test suite pretty comprehensive still morelikely bug numbered release pullrequest get merged master published unstable version automatically within hour two merged notice problem know fix send pr get merged use published unstable version fix next numbered release
254,Lobsters,scala,Scala programming,spm - Scala Package Manager,https://github.com/FGRibreau/spm,spm scala package manager,join github today sign file permalink spm scala package manager setup mac osx debianubuntu option feature init install usage todo origin resource reload reload,spm scala package manager based sbt npmlike dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time spm scala package manager setup mac osx brew update brew install curl jq dialog curl http rawgithubusercontentcomfgribreauspmmasterspm usrlocalbinspm chmod x usrlocalbinspm debianubuntu aptget update aptget install curl jq dialog curl http rawgithubusercontentcomfgribreauspmmasterspm usrlocalbinspm chmod x usrlocalbinspm option usage spm command command one init install start version feature init quickly start new scala project install install multiple dependency time install latest dependency one matching dependency found spm install directly without dialog multiple matching dependency found spm ask choice usage spm init spm install scalaz amqpclient todo save specified directly install library inside lib folder everything else origin want quickly bootstrap scala project install deps god sake spm scala package manager based sbt npmlike resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
256,Lobsters,scala,Scala programming,"Automated reasoning in F#, Scala, Haskell, C++, and Julia",https://phdp.github.io/posts/2015-04-05-automated-reasoning.html,automated reasoning f scala haskell c julia,automated reasoning f scala haskell c julia ml family c julia might get return type declaration point conclusion,automated reasoning f scala haskell c julia need simplify following expression e time x time luckily u wo nt remember elementary school arithmetic harris excellent handbook practical logic automated reasoning begin simple algorithm exactly complicated pretty good barometer painful programming language kind hybrid probabilistic logic statistical relational approach work compare implementation harris simple algorithm f scala haskell c julia programming language hurt writing post competition avoided talking language dislike sum type discussed length awesome useful problem many many others ml family harris book us ocaml popular language solver f haskell scala share root ocaml f closest thing ocaml dialect start f sum type expression expression either var string constant integer addition made two expression multiplication also made two expression type expr var string const int add expr expr mul expr expr simplify single component expression function take expression use pattern matching select right approach based type value example add constant x expression return x let e match e add const x add x const mul x const mul const x x mul x const mul const x const add const const b const b mul const const b const b e recursive function simplify entire expression let rec simplify e match e add x add simplify x simplify mul x mul simplify x simplify e return value string expression reduced constant let exprstr e match e const x string x expression could simplified constant operator sends result left right example log sqrt computes log square root result nice allows natural lefttoright flow functional programming entrypoint let main argv add mul add const mul const var x const const simplify exprstr printf f main return success à la c almost ocaml version harris book key trick define expression expr variable string constant integer addition multiplication made two expression important objectoriented programming language focus hierarchy object sum type define type series alternative sum type important another reason provide easy way express thing like function might return integer example haskell want data structure map key value import datamap map import qualified datamap map capital mapfromlist finland helsinki france paris japan tokyo south korea seoul arrakis arrakeen lookupcapitals country case maplookup country capital capital capital country capital nothing country even country point keyvalue store return value key present example map take country string return capital string however try take value map lookup function haskell return maybe type either string string provided found map nothing key absent use pattern matching deal possibility lookupcapitals function one common mistake programming return null deal properly solution sum type return wrapped value handling possibility explicitly pattern matching solves type many language would solve exception trycatch apparatus ghci lookupcapitals arrakis capital arrakis arrakeen ghci lookupcapitals canada canada even country speaking haskell code algorithm data expr var string const int add expr expr mult expr expr expr expr e case e add const x x add x const x add const const b const b mult x const const mult const x const mult x const x mult const x x mult const const b const b e simplify expr expr simplify e case e add x add simplify x simplify mult x mult simplify x simplify e e add mult add const mult const var x const const simplify e main putstrln case const x show x could simplify expression constant quite similar f decided add type explicitly simplify haskell smart enough deduce type without arguably thing worth explaining operator operator force haskell evaluate expression right operator priority reminds parenthesis absolutely right x value x log sqrt exp log sqrt exp operator reduce visual clutter opinion f easier read operator enforces lefttoright reading natural reading code insideout let z exp sqrt log although trivial simulate operator haskell x f f x valid haskell z exp sqrt log something bit different scala also static functional programming language sum type greater integration objectoriented paradigm evident object simplify sealed abstract class expr override def tostring show case class variable name string extends expr case class const value int extends expr case class add left expr right expr extends expr case class mult left expr right expr extends expr def evalone e expr expr e match case add const r r case add l const l case add const const b const b case mult const r const case mult l const const case mult const r r case mult l const l case mult const const b const b case e def eval e expr expr e match case add l r evalone add eval l eval r case mult l r evalone mult eval l eval r case e def show e expr e match case const x print x case print expression could simplified constant def main args array string var e add mult add const mult const variable x const const var eval e print everything object scala thus define function simplify method inside singleton object named function evalone eval since bit odd function named simplify inside simplify object c understand every corner c monstrous standard huge surely many feature must something solve simple problem cleanly well wellknown lacuna c see open efficient type switch c library built implement pattern matching effort directed creator c language said use boost library solution based standard library contrived b boost almost standard nt want rely thirdparty library include iostream include string include boostvarianthpp forward declaration struct add struct mult variant expression using expr boost variant int std string boost recursivewrapper add boost recursivewrapper mult base class binary operation class binaryop expr mleft mright public build binary operation left right expression binaryop expr const left expr const right mleft left mright right return expression left side expression auto left const expr const return mleft return expression right side expression auto right const expr const return mright defines add operator struct add public binaryop add expr const left expr const right binaryop left right defines mult operator struct mult public binaryop mult expr const left expr const right binaryop left right overload simplify creating expression auto operator expr const lh expr const rh expr return add lh rh auto operator expr const lh expr const rh expr return mult lh rh visitor addition struct addvisit public boost staticvisitor expr auto operator int lh int rh const expr return expr lh rh template typename r auto operator int lh r const rh const expr return lh expr rh add expr lh expr rh template typename l auto operator l const lh int rh const expr return rh expr lh add expr lh expr rh template typename l typename r auto operator l const lh r const rh const expr return add expr lh expr rh visitor multiplication struct mulvisit public boost staticvisitor expr auto operator int lh int rh const expr return expr lh rh template typename r auto operator int lh r const rh const expr return lh expr lh expr rh mult expr lh expr rh template typename l auto operator l const lh int rh const expr return rh expr rh expr lh mult expr rh expr lh template typename l typename r auto operator l const lh r const rh const expr return mult expr lh expr rh struct public boost staticvisitor expr auto operator add const const expr return boost applyvisitor addvisit aleft aright auto operator mult const const expr return boost applyvisitor mulvisit mleft mright template typename auto operator const const expr return expr struct simplify public boost staticvisitor expr auto operator add const const expr auto left boost applyvisitor simplify aleft auto right boost applyvisitor simplify aright auto addlr boost applyvisitor addvisit left right return boost applyvisitor addlr auto operator mult const const expr auto left boost applyvisitor simplify mleft auto right boost applyvisitor simplify mright auto mullr boost applyvisitor mulvisit left right return boost applyvisitor mullr template typename auto operator const const expr return expr struct printexpr public boost staticvisitor std string auto operator int n const std string return std tostring n auto operator expr const const std string return expression could simplified constant auto main int const auto e expr expr expr x expr expr const auto boost applyvisitor simplify e std cout boost applyvisitor printexpr std endl return boost variant action biggest qualm type clever headerheavy code get see big chunk developer lifework unroll eye every time small mistake made otherwise ok substitute proper sum typespattern matching want know code work need read bit visitor pattern julia julia attempt build fast flexible replacement rpythonmatlab issue dynamic language elegant way switch type fair really static language either see previous section however julia support multipledispatch based type annotation clear quite different f scalahaskell approach language possible define sum type pattern matching constructor julia define function type annotation let interpreter dispatch based runtime type information multiple dispatch supported julia performance allows interpreter compile optimized function use best one adding predictability keeping language dynamic reason algorithm julia abstract expr type const unlike pattern matching dispatch type need expression operator julia like c could used match macro overkill inelegant first thought good enough way simulate sum type pattern matching matter julia ecosystem feature useful build solver logic theorem proving system etc etc pretty nice technical computing platform unfortunately julia well simple example think oddity language would soon bite u return type declaration allowed yes big deal first question correctness return float thinking returning integer awful also since annotation allowed return value also impossible add annotation higherorder function function taking function input concrete example firstorder logic predicate mapping object boolean function mapping object object like solve pre object bool solve fun object object instead test type return value inside function said julia young might get return type declaration point conclusion sum type pattern matching awesome let world 世界 print hello world
257,Lobsters,scala,Scala programming,Testing without mocking in Scala,http://engineering.monsanto.com/2015/07/28/avoiding-mocks/,testing without mocking scala,polyconf port adapter flow data duana,unit testing java mocking framework replace class necessary code test test mock framework transfer easily scala ok functional side scala make mocking unnecessary someone told day polyconf mock sound code cry please structure differently use mock structure code differently easier said done follows practical example removing need mock object time separating concern interface business logic say identityservice return username based access token internally call accesstokenservice retrieving information access token interprets result success provides identity anything else mean proceed anonymously return identity code look like class identityclient jsonclient jsonclient def fetchidentity accesstoken string future option identity jsonclientgetwithoutsession path identity params accesstoken accesstoken map case jsonresponse okstatus json identityfrom json case none test want say inner call return success provide returned identity fails return none unittest need mock jsonclient getwithoutsession method check ugh mocking secret recognize part method test interface part business logic interface testable integration test check assumption path structure input output service business logic part unittestable separate two port adapter instead passing general jsonclient let pas function contains interface code function need access token return future response class identityclient howtocheck string future jsonresponse def fetchidentity accesstoken string future option identity howtocheck accesstoken map case jsonresponse okstatus json identitymapper json case none meanwhile real interface code shipped handy object somewhere object realaccesstokenservice def reallycheckaccesstoken jsonclient jsonclient accesstoken string future jsonresponse jsonclientgetwithoutsession path identity params accesstoken accesstoken production code instantiate accesstoken client using object test free provide fake function implementation without duplicating specific particular interface return identity val jsonbody map identity map id externalusername tojson val identityclient new identityclient future jsonresponse okstatus jsonbody awaitresult identityclientfetchidentity anaccesstoken identity externalusername test construct expected response provides function return matter checking argument although could pas function whatever want purpose test jsonclient object mock technically function passed fake different mock work minimal example test perfect yet show passing instead passing object make testing easier scala check sample code see difference example illustrates portsandadapters architecture removing interface code created port like hole like java interface realjsonclient contains adapter plug hole hook reallife system function passed test adapter fit hole flow data portsandadapters style let u drop different implementation io happens middle code avoid io middle code even better cleaner way restructuring code possible view gather data make decision output instead passing call accesstokenservice make call pas result function test object dentityclient def fetchidentity accesstokeninfo future jsonresponse future option dentity accesstokeninfomap case jsonresponse okstatus json identityfrom json case none function datain dataout need instantiate class object code even easier test mock fake construct input pas import dentityclient return identity val jsonbody map identity map id externalusername tojson val accesstokeninfo future jsonresponse okstatus jsonbody awaitresult fetchidentity accesstokeninfo identity externalusername real world use realaccesstokenservice gather input calling datain dataout function instead passing gather input passing input data simplest structure sample code whenever see mocking scala look opportunity separate decisionmaking code interface code consider style instead thanks duana asking question providing example posted july jessica kerr
258,Lobsters,scala,Scala programming,Optimistic Future Composition,http://semisafe.com/coding/2015/07/14/play_basics_optimistic_future_composition.html,optimistic future composition,previous post github limitation current api creating controller endpoint basic implementation tell something new finding place new data setting stage gathering data close good enough good enough test next,previous post added actor handle concurrency sensible manner inside play application post add another api endpoint relying existing actor model creating new method operating future source code tutorial series available github code specifically post since code build previous post grab current state project part four finished update original version post defined incorrect projection augmented ticketblock code fixed commits github version line perfectly limitation current api existing api listing ticket block work practical way get information ticket block either know id field ahead time list ticket block ever created take minute think api likely used safely assume user desire behavior flow similar select event want attend inspect block ticket available purchase event place order x ticket block current api good even support displaying block still ticket available purchase need api endpoint supply ticket block information given event including amount ticket still available purchase create new api endpoint probably follow pattern get event eventidticketsblocks end goal mind get started bother adding endpoint route file yet need create controller definition first creating controller endpoint since resource path root event add new method event controller create method named ticketblocksforevent new method contain boilerplate code verify event exists correct event make new method call event instance requesting future ticketblocks associated event import comsemisafeticketoverlordsticketblock snip def ticketblocksforevent eventid long actionasync request val eventfuture eventgetbyid eventid eventfutureflatmap event eventfold futuresuccessful notfound jsontojson errorresponse notfound event found e val ticketblocks future seq ticketblock eticketblockswithavailability ticketblocksmap tb ok jsontojson successresponse tb basic implementation defined requirement ticketblockswithavailability method fill basic implementation event case class def ticketblockswithavailability future seq ticketblock thisidfold futuresuccessful nil seq ticketblock eid val basicblocks ticketblocklistforevent eid basicblocks add ticketblocklistforevent def listforevent eventid long future seq ticketblock val blocklist tablefilter tb tbeventid eventid result dbrun blocklist tell something new remarkably unremarkable code required retrieve ticketblock given event one small detail ignored none supply actual ticket available returned ticket block open ticketisserscala add following case class case class availabilitycheck ticketblockid long serve message used communicate issuer actor request current availability ticket block add support directly ticketissuer actor inside ticketissuer simply forward request ticketissuerworker exists def receive case order order placeorder order case availabilitycheck checkavailability case newticketblock tidforeach createworker def checkavailability message availabilitycheck val workerref workersget messageticketblockid workerreffold sender actorfailure ticketblockunavailable messageticketblockid worker worker forward message adding support ticketissuerworker slightly involved due multiple receive state def initializing actorreceive snip case availabilitycheck ticketblockid val failureresponse ticketblockunavailable ticketblockid sender actorfailure failureresponse def normaloperation availability int actorreceive snip case availabilitycheck sender availability def soldout actorreceive snip case availabilitycheck sender finding place new data code availabilitycheck place revisit ticketblockswithavailability method event class currently method return future seq ticketblock current design ticketblock include count available ticket count update ticketblock model include option quantity available ticket using option allows u include value ignore time case class ticketblock id option long eventid long name string productcode string price bigdecimal initialsize int salestart datetime saleend datetime availability option int none also need update projection ticketblockstable class handle fact field unrelated database table update mistake original version code update appears later github version yes post coming unit testing update original version post used following projection work reading database totally break writes def id eventid name productcode price initialsize salestart saleend none ticketblockapply tupled ticketblockunapply correct code following def id eventid name productcode price initialsize salestart saleend ticketblockapply option long long string string bigdecimal int datetime datetime none tupled tb ticketblock ticketblockunapply tb map case b c e f g h b c e f g h setting stage ticketblock augmented support new optional field update ticketblockswithavailability method actually include available quantity adding core logic start supporting code know need perform ask request actor turn requires timeout existing timeout placing order action people wait come availability ticket user unlikely patient create new parameter applicationconf named ticketavailabilityms since original timeout second appending unit parameter parameter defined add timeout event controller import akkautiltimeout import playapiplaycurrent import scalaconcurrentduration snip def ticketblocksforevent eventid long actionasync request val eventfuture eventgetbyid eventid eventfutureflatmap event eventfold futuresuccessful notfound jsontojson errorresponse notfound event found e val timeoutkey ticketoverlordstimeoutsticketavailabilityms val configuredtimeout currentconfigurationgetint timeoutkey val resolvedtimeout configuredtimeoutgetorelse implicit val timeout timeout resolvedtimeoutmilliseconds val ticketblocks future seq ticketblock eticketblockswithavailability ticketblocksmap tb ok jsontojson successresponse tb gathering data leave timeout implicit val turn implicitly passed ask request ticketblockswithavailability import akkautiltimeout import akkapatternask snip def ticketblockswithavailability implicit timeout timeout future seq ticketblock idfold futuresuccessful nil seq ticketblock eid val basicblocks ticketblocklistforevent eid val issuer ticketissuergetselection val blockswithavailability future seq ticketblock basicblocksflatmap block val updatedblocks seq future ticketblock block block blockid blockid availabilityraw issuer availabilitycheck blockid availability availabilityrawmapto int updatedblock availabilitymap blockcopy availability option yield updatedblock transform seq future future seq futuresequence updatedblocks blockswithavailability code retrieves list ticket block new database method iterate block retrieved database make request ticketissuer availability ticket block result sequence future one availabilitycheck performed close good enough inverting sequence future common standard library includes futuresequence method code used type signature seemed wanted unfortunately futuresequence function give first sign trouble future result failure cause whole sequence become failure want happen fact would prefer opposite really care block respond information coming back user better information coming back actually expect future fail due way raise exception via actor failure type allow create new futurelike object called optimisticfuture package comsemisafeticketoverlords import scalaconcurrentfuture import playapilibsconcurrentexecutionimplicits object optimisticfuture def sequence source seq future future seq val optioned sourcemap f fmap optionapply recover case none option futuresequence optioned map flatten new code performs map sequence wrapping successful result option use recover method discard failure replace none could easily use try either instead option really concerned failure occurred option sequence exists flatten discard none entry new utility object create future seq want contains successful future def ticketblockswithavailability implicit timeout timeout future seq ticketblock idfold futuresuccessful nil seq ticketblock eid val basicblocks ticketblocklistforevent eid val issuer ticketissuergetselection val blockswithavailability basicblocksflatmap block val updatedblocks seq future ticketblock block block blockid blockid availabilityraw issuer availabilitycheck blockid availability availabilityrawmapto int updatedblock availabilitymap blockcopy availability option yield updatedblock use utility class get successful result optimisticfuturesequence updatedblocks blockswithavailability enough implemented create route endpoint get event eventidticketsblocks controllerseventsticketblocksforevent eventid long good enough test making curl request verify first event return expected ticket block curl w n result ok response unexpected valid response coming back sure new code run exact curl command without restarting application curl w n result ok response id eventid name general admission productcode price initialsize salestart saleend availability happened actor selection load ticketissuer demand problem readable short period time initializes designed service attempted use actor call fail fixing later post meantime actually serf illustrate failing future generating ticketblockunavailable failure actually suppressed optimisticfuture next post covered handling sequence future result required build response converted single future containing result task completed successfully useful pattern aggregating result disparate party service may may ever return result part take break back end give user interface sorely needed makeover
259,Lobsters,scala,Scala programming,Managing concurrent state with Akka and Play,http://semisafe.com/coding/2015/06/22/play_basics_async_futures_and_actors.html,managing concurrent state akka play,part github racing failure locking increasing throughput updating worker pool best practice actor separation dogma state better next,part built api learned access database inside play application post take deeper look concurrent request utilizing asynchronous tool disposal fix concurrency bug introduced last section source code tutorial series available github code specifically post since code build previous post grab current state project part three finished racing failure start post looking concurrency problem exists current implementation ticket overlord user attempt place order following step performed json body parsed order case class current amount available ticket queried order saved database enough ticket available response converted json represent graphically tracking state available ticket diagram bit simplistic server easily expected handle multiple connection time ignoring asynchronous nature slick call database illustrate two connection see happens best case scenario order processed expected first order removing five ticket available pool causing second order fail check six ticket still available purchase best case scenario possibility flow see logic check many ticket available ran succession resulted race condition allowing ticket oversold since running airline problem ignored fact slick request asynchronous simplicity diagram reality async nature amplifies race condition locking may thinking gee thanks teaching standard comp sci fundamental could cover basic data structure next answer yes kind going use actor queue since default mailbox actor function queue use ensure critical section consisting step step performed atomically start creating class named ticketissuer comsemisafeticketoverlords package extends akkaactoractor package comsemisafeticketoverlords import akkaactoractor class ticketissuer extends actor def placeorder order order get available quantity compare order amount place order possible send completed order back originator possible send failure result def receive case order order placeorder order fairly straight forward example actor skeleton receive function expects one type message order class indicating order placed fill placeorder function look familiar logic nearly identical written order controller need create new case class representing error condition ticket available case class insufficientticketsavailable ticketblockid long ticketsavailable int extends throwable rest placeorder function snip import akkaactorstatus failure actorfailure import playapilibsconcurrentexecutionimplicits import scalaconcurrentfuture snip def placeorder order order important val origin sender get available quantity future val availabilityresult ticketblockavailability orderticketblockid availabilityresultmap availability compare order amount availability orderticketquantity place order val createdorderresult future order ordercreate order createdorderresultmap createdorder send completed order back originator origin createdorder else possible send failure result val failureresponse insufficientticketsavailable orderticketblockid availability origin actorfailure failureresponse major difference original code controller version returning response directly assuming ask utilized call actor either respond expected order created akkaactorstatusfailure renamed actorfailure avoid ambiguity failure associated try fact sender reassigned local value origin beginning placeorder also important sender actually sender function common mistake assume value safe reference point origin utilized send createdorder message back actually two future deep mean value returned sender inside createdorderresultmap likely actorref would assigned saved value origin open order controller make change support new method placing order start initializing actor directly controller import playapilibsconcurrentakka import playapiplaycurrent import comsemisafeticketoverlordsticketissuer import akkaactorprops snip object order extends controller val issuer akkasystemactorof prop ticketissuer name ticketissuer snip know actor exist need replace existing create function order code utilizes ticketissuer actor could request actorselection path userticketissuer previously declared val end located since actorref stored locally need snip import akkapatternask import akkautiltimeout import scalaconcurrentduration snip def create actionasync parsejson request val incomingbody requestbodyvalidate order incomingbodyfold error fold error original version val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage futuresuccessful badrequest jsontojson response order implicit val timeout timeout val orderfuture issuer order convert successful future json set default timeout proceed send ask message ticketissuer ask return future result people complaining say akka actor type safe know orderfuture future definitely future order force mapto method future val orderfuture issuer order mapto order something code change later reason future cast future order mapto future becomes failure handled normal error recovery code changing thing value second totally arbitrary probably short people used camp overnight concert ticket wait least second website order process open confapplicationconf add following line end user configurable timeout ticket order order controller remove line hardcoded value replace logic use configuration value present every configurable value option still need arbitrary default value val timeoutkey ticketoverlordstimeoutsissuer val configuredtimeout currentconfigurationgetint timeoutkey val resolvedtimeout configuredtimeoutgetorelse implicit val timeout timeout resolvedtimeoutseconds ready tackle actual response actor utilize map future transform future order future result snip convert successful future json orderfuturemap createdorder ok jsontojson successresponse createdorder delete point still looking good let honest future sunshine rainbow result dystopian society dog cat live together machine enslaved u new robot overlord force u vacuum apartment work chanting like disembodied robotic voice future really caused exception thrown handle latter case recover method snip import comsemisafeticketoverlordsinsufficientticketsavailable import playapilogger snip orderfuturemap createdorder ok jsontojson successresponse createdorder recover case ita insufficientticketsavailable val responsemessage enough ticket remaining complete order quantity remaining itaticketsavailable val response errorresponse errorresponsenotenoughtickets responsemessage badrequest jsontojson response case unexpected loggererror unexpected error placing order unexpectedtostring val response errorresponse internalservererror unexpected error occurred internalservererror jsontojson response recover method allows u transform throwable content failure different type future case expected failure enough ticket process order also potential case something unexpected occurs log wrap standard json response increasing throughput code longer suffers race condition order concurrent request still present async action database access library although race condition exists two concurrent action operate ticket block problem concurrent action operating different ticket block create new class comsemisafeticketoverlords package named ticketissuerworker base definition actor differ slightly add constructor parameter ticket block id package comsemisafeticketoverlords import akkaactoractor import akkaactorstatus failure actorfailure import playapilibsconcurrentexecutionimplicits class orderroutingexception message string extends exception message class ticketissuerworker ticketblockid long extends actor def placeorder order order val origin sender ticketblockid orderticketblockid val msg issuerworker ticketblockid recieved order ticket block orderticketblockid origin actorfailure new orderroutingexception msg else val availresult ticketblockavailability ticketblockid availresultmap availability availability orderticketquantity val createdorder ordercreate order createdordermap origin else val failureresponse insufficientticketsavailable orderticketblockid availability origin actorfailure failureresponse def receive case order order placeorder order logic inside ticketissuerworker almost identical original ticketissuer extra logic guarantee placing order ticket block assigned instantiation building block add worker ticketissuer actor start creating var member ticketissuer map actorrefs utility function adding child actor worker given ticket block id general try avoid use var scala inside actor acceptable within reason import akkaactor actorref prop snip class ticketissuer extends actor var worker map long actorref def createworker ticketblockid long workerscontains ticketblockid val worker contextactorof prop classof ticketissuerworker ticketblockid name ticketblockidtostring worker worker ticketblockid worker snip function check see already local reference ticket block reference exist new actor instantiated reference added local mapping retrieval later logic defined add prestart method ticketissuer prestart method called every time actor started restarted making suitable setting initial state actor override def prestart val ticketblocksresult ticketblocklist ticketblocks ticketblocksresult block ticketblocks id blockid createworker id utilize new ticketissuerworker class need replace placeorder method ticketissuer def placeorder order order val workerref workersget orderticketblockid workerreffold need new type error actorref exist yet initialized worker worker forward order new placeorder method extract actorref correct worker pass along actual order placed notice instead tell ask use forward performs tell operation pass along original sender reference allows worker actor reply originator request using local sender result still unhandled error condition create class exception case class ticketblockunavailable ticketblockid long extends throwable update placeorder code one time def placeorder order order val workerref workersget orderticketblockid workerreffold sender actorfailure ticketblockunavailable orderticketblockid worker worker forward order finish change remaining add new error condition order controller inside recover block right unavailable case snip import comsemisafeticketoverlordsticketblockunavailable snip case tba ticketblockunavailable val responsemessage ticket block orderticketblockid available val response errorresponse errorresponseticketblockunavailable responsemessage badrequest jsontojson response snip requires new errorresponse value defined value work example code us updating worker pool one thing may noticed system create worker actor ticketissuer actor started restarted mean able access place order new ticket block without restarting system inconvenient create case class named ticketblockcreated place class definition ticketissuer case class ticketblockcreated ticketblock ticketblock also modify ticketissuer receive function accept ticketblockcreated message using content argument createworker function defined earlier def receive case order order placeorder order case ticketblockcreated tidforeach createworker way respond signal new ticketblock created update create method ticketblock send message since ticketblock object local reference issuer actorref need use actorselection method snip import akkaactoractorselection import playlibsakka snip def create newticketblock ticketblock future ticketblock val insertion table returning tablemap id newticketblock dbrun insertion map resultid val createdblock newticketblockcopy id option resultid val issuer actorselection akkasystemactorselection userticketissuer issuer ticketblockcreated createdblock createdblock application running stop start running start anything interact application try creating fresh ticket block curl curl w n http h contenttype applicationjson name vip admission eventid productcode price initialsize salestart saleend result ok response id eventid name vip admission productcode price initialsize salestart saleend based response curl appears successful received good response back ticket block id look activator log window tell different story akka applicationuserticketissuer message comsemisafeticketoverlordsnewticketblock actor akka applicationdeadletters actor akka applicationuserticketissuer delivered dead letter encountered logging turned adjusted configuration setting akkalogdeadletters akkalogdeadlettersduringshutdown happened instantiate ticketissuer actor inside order controller since nothing interacted object yet none member value instantiated including actor solution encapsulate reference ticketissuer inside companion object creating companion object follow another best practice actor creating prop method prop method unifies actor created instead requiring differing code depending actor requires instantiation parameter snip import playapilibsconcurrentakka import playapiplaycurrent snip object ticketissuer def prop prop ticketissuer private val reference akkasystemactorof ticketissuerprops name ticketissuer def getselection akkasystemactorselection userticketissuer guarantee ticketissuer actor instantiated code call also removing need code know resides userticketissuer part replace getselection call ticketblock local reference order following code val issuer ticketissuergetselection downside instantiating actor still ondemand first time code path hit requires access ticket block depending much required actor start many ticket block need worker created may delay actual response cover actual correct recommended way later post method good enough separation dogma state scala generally advised use var val suffice define one eclipse even color red way saying probably said time var appropriate already saw map ticketissuerworker reference current ticketissuerworker code every time order placed database query gather amount available ticket followed second database query create order async call root still race condition ticketissuerworker canonical source ordering ticket actually maintain ticket count internally within worker inside ticketissuerworker class outside function definition move availability query placeorder prestart make availablilty private var private var availability override def prestart val availabilityfuture ticketblockavailability ticketblockid availabilityfutureonsuccess case result availability result modify placeorder method decrement availability amount order availability future moved prestart method every access availability value queued locked actor receive path availability orderticketquantity availability orderticketquantity val createdorder ordercreate order createdordermap origin else snip safe use var since used represent internal state actor accessible anything externally fact one single concurrent path accessing var maintains safety concurrency issue better ticketissuerworker functioning properly probably find safe way get rid var also return appropriate message starting currently request come prestart run database call finish response appear ticket block sold opposed correct message currently unavailable use actor become functionality actor really three possible state initialization normal operation sold define three separate actorreceive function accept either order message new case class addtickets ticket added ticket block also factor routing validation placeorder receive method utilize def validaterouting requestedid long ticketblockid requestedid val msg issuerworker ticketblockid recieved order ticket block requestedid sender actorfailure new orderroutingexception msg false else true case class addtickets quantity int def initializing actorreceive case addtickets availability contextbecome normaloperation availability case order order validaterouting orderticketblockid val failureresponse ticketblockunavailable orderticketblockid sender actorfailure failureresponse def normaloperation availability int actorreceive case addtickets newquantity contextbecome normaloperation availability newquantity case order order placeorder order availability def soldout actorreceive case addtickets availability contextbecome normaloperation availability case order order validaterouting orderticketblockid val failureresponse insufficientticketsavailable orderticketblockid sender actorfailure failureresponse replaces previous definition receive def receive initializing notice end replaced previous definition receive statement indicating actor begin initializing behavior use contextbecome method change behavior communicate current availability value remove need var removed need modify placeorder method one time account def placeorder order order availability int val origin sender validaterouting orderticketblockid availability orderticketquantity val newavailability availability orderticketquantity contextbecome normaloperation newavailability val createdorder ordercreate order createdordermap origin else val failureresponse insufficientticketsavailable orderticketblockid availability origin actorfailure failureresponse finally update prestart method safely pas initial availability actor override def prestart val availabilityfuture ticketblockavailability ticketblockid availabilityfutureonsuccess case result self addtickets result give u fully operational concurrency safe actor manages internal state without use var next system safely handle many concurrent request ticket block isolated one covered reading configuration parameter conf file handling failure case future also learned handling asynchronous action managing state actor good general overall performance play application part take quick look composing future multiple source
260,Lobsters,scala,Scala programming,Easy Performance Wins With Scalaz,http://runarorama.github.com/blog/2015/06/18/easy-performance-wins-with-scalaz/,easy performance win scalaz,jumping thread pool jumping trampoline making fewer jump fast caliper,found using scalaconcurrentfuture code get really easy performance gain switching scalazconcurrenttask instead particularly chaining map flatmap call comprehension jumping thread pool every future basically work need submitted thread pool call futureaflatmap futureb future future b need submitted thread pool even though running concurrently could theoretically run thread context switching take bit time jumping trampoline scalazconcurrenttask bit control submit work thread pool actually want continue thread already executing task say taskaflatmap taskb taskb default continue running thread already executing taska explicitly want dip thread pool say taskfork work since task concurrently running computation description sequential list instruction may include instruction submit work thread pool work actually executed tight loop task run method loop called trampoline since every step task every subtask return control loop jumping trampoline lot faster jumping thread pool whenever composing future map flatmap switch task make code faster making fewer jump sometimes know want continue thread want spend time jumping trampoline every step demonstrate use ackermann function necessarily good use case future show difference well defined positive n def ackermann int n int int n match case n case ackermann case n ackermann ackermann n function supposed terminate positive n modestly large recursive definition overflow stack could use future alleviate jumping thread pool instead making stack frame step import scalaconcurrentfuture import scalaconcurrentexecutioncontextimplicitsglobal def ackermannf int n int future int n match case future n case future ackermannf flatmap identity case n x future ackermannf n x z future ackermannf r z yield r since actual concurrency going make instantly faster switching task instead using trampoline instead thread pool import scalazconcurrenttask task def ackermannt int n int task int n match case n case suspend ackermannt case n suspend ackermannt n flatmap x suspend ackermannt x even making many jump back trampoline suspend actually need suspend return control trampoline step need enough time avoid overflowing stack let say know large stack grow keep track many recursive call made jump trampoline need def ackermanno int n int task int def step int n int stack int task int stack maxstack suspend ackermanno n else go n stack def go int n int stack int task int n match case n case step stack case n internalrec step n stack result step internalrec stack yield result go n fast comparison using caliper made pretty graph horizontal axis number step vertical axis mean time number step took thousand run graph show task slightly faster future submitting thread pool blue yellow line marked future task respectively small task get step macbook future task cross μs threshold difference probably due fact future running computation task partially constructed front explicitly run later future thread might waiting work overhead taskrun seems catch u around step honestly difference two line something would care real application jump trampoline instead submitting thread pool green line marked trampoline thing one two order magnitude faster jump trampoline really need red line marked optimized gain another order magnitude compared original naïve version always go thread pool difference running program mhz machine running ghz machine measure without using taskfuture line track optimized red line pretty closely shoot infinity around however many frame fit stack space program crash point summary smart trampoline v thread pool future v task optimize stack size go millisecond microsecond much effort second millisecond week hour case may
261,Lobsters,scala,Scala programming,Writing AWS Lambda Functions in Scala,https://aws.amazon.com/blogs/compute/writing-aws-lambda-functions-in-scala/,writing aws lambda function scala,tim wagner aws lambda general manager sean reque aws lambda software developer scala getting started scala download scala simple build tool sbt writing first lambdainscala function testing scala function scala programming model,tim wagner aws lambda general manager sean reque aws lambda software developer aws lambda java support also make easy write lambda function jvmbased language let take look scala getting started scala old hand scala skip step process get running scala window machine platform similar first need download scala simple build tool sbt next open command line prompt want development chose c tmp keep simple run sbt autoupdate depending setting might need admin privilege succeed create following directory structure c tmplambdademo project src main scala example inside project subdirectory create file named pluginssbt following content addsbtplugin sbtassembly inside tmplambdademo peer src project add file named buildsbt following content javacoptions seq source target xlint lazy val root project file setting name lambdademo version scalaversion retrievemanaged true librarydependencies comamazonaws awslambdajavacore librarydependencies comamazonaws awslambdajavaevents mergestrategy assembly case pathlist metainf x mergestrategydiscard case x mergestrategyfirst ready start scala lambda writing first lambdainscala function let start simple function extract object key name amazon event return make function easy debug wire bucket see event processing working endtoend point able start modifying code whatever additional analysis transformation like actual content object extend example process argument type event source first c tmplambdademosrcmainscalaexampleaddmainscala add following sample code package example import scalacollectionjavaconverters import javaneturldecoder import class main def key string string urldecoderdecode keyreplace def getsourcebuckets event javautillist string val result eventgetrecordsasscalamap record asjava println result return result next fire sbt lambdademo execute compile command followed assembly command end jar file c version may differ depending try example discus programming model first let complete process creating testing lambda function via cli console illustrated look like console using default suggestion memory duration role basic execution note handler examplemain getsourcebuckets click create lambda function ready test testing scala function point lambda function working behaves like lambda function use test invoke put sample event see happyfacejpg key name put event sample result test function end end click go function list add bucket event source upload sample file go amazon cloudwatch log page check result see similar output start extending code retrieve transform content file add event source etc sure keep execution role permission consistent aws operation perform scala code scala programming model writing lambda function scala requires dealing javaisms point entry exit notice code use javautillist asscala asjava converter necessary builtin lambda serializer understand native scala type since java scala share primitive lambda function parameter return type like ints string work fine language without explicit conversion java collection pojos specifically de serialization require little work coexist scala still employ scala lambda function using lambda byte stream interface serialization library jackson scala module add library project buildsbt file add following line dependency section librarydependencies comfasterxmljacksonmodule example us scala jackson module defines scala class nameinfo us byte stream interface deserialize argument passed lambda function scala class output greeting message result package example case class nameinfo firstname string lastname string class main import javaio inputstream outputstream printstream val scalamapper import comfasterxmljacksondatabindobjectmapper import comfasterxmljacksonmodulescaladefaultscalamodule new objectmapper registermodule new defaultscalamodule def greeting input inputstream output outputstream unit val name scalamapperreadvalue input classof nameinfo val result greeting namefirstname namelastname outputwrite resultgetbytes invoking function input like firstname robert lastname dole produce greeting robert dole result hope article help fan scala lambda enjoy together happy lambda scala coding tim sean
262,Lobsters,scala,Scala programming,Scala School,https://twitter.github.io/scala_school/,scala school,scala approach also,language scala school started series lecture twitter prepare experienced engineer productive scala programmer scala relatively new language draw many familiar concept thus lecture assumed audience knew concept showed use scala found effective way getting new engineer speed quickly written material accompanied lecture found useful right approach think make sense approach teaching scala improved java instead new language experience java expected focus interpreter objectfunctional style well style programming emphasis placed maintainability clarity expression leveraging type system lesson require software scala repl reader encouraged follow along also go use lesson starting point explore language also learn elsewhere
263,Lobsters,scala,Scala programming,Learning Slick 3.0 and Evolutions with Play Framework 2.4,http://semisafe.com/coding/2015/06/12/play_basics_database_access.html,learning slick evolution play framework,part github initial data model play convention traditional style guide rest endpoint model normalized response part reading incoming data ticketblocks routing defining schema evolution slick slick conflict jdbc dependency creating schema database engine applying evolution http data access slick slick creating dao creating table definition slickjodamapper retrieving record retrieving subset record adding new record answer always tying together verification shower rinse repeat wait actually want people order thing migrating schema http querying single value healthy dose skepticism next,part covered route controller client side scripting led basic useful result post walk required read write maintain database ticket overlord technology using slick evolution source code tutorial series available github code specifically post since code build previous post grab current state project part two finished initial data model dive database code need sketch class intend persist database basic example going create two class event concert festival monster truck rally etc ticketblock event could different grouping ticket different pricing going ignore seat plan everything general admission could vip package early bird pricing two class sketch basic class model look like taking simplistic approach data model event would realistically link venue correct address geo information adequate easily transfer model case class start creating new package namespace comsemisafeticketoverlords app directory different current layout controller view package default play convention differs traditional style guide personally leave controller use java naming convention everything else find work best organization new ticketoverlords package create scala class named eventscala package comsemisafeticketoverlords import orgjodatimedatetime case class event name string start datetime end datetime address string city string state string country string create second class named ticketblockscala package comsemisafeticketoverlords import orgjodatimedatetime case class ticketblock name string productcode string price bigdecimal initialsize int salestart datetime saleend datetime look like modeled earlier couple practical problem first problem anything resembles natural key store database reference via api request also need relation connect ticketblock event since manytoone relationship ticketblock event add event id field ticketblock well updated event class definition look like case class event id long name string start datetime end datetime address string city string state string country string updated ticketblock class definition look like case class ticketblock id long eventid long name string productcode string price bigdecimal initialsize int salestart datetime saleend datetime rest endpoint model model class defined start build api interact become data access layer code api first done similar api work previous post use new api verify data layer working expected api going support creating reading operation want class create event ticketblock retrieve event ticketblock id retrieve event ticketblocks get started creating event controller controller using ok badrequest result used previously play includes response type http response format would like return also worth mentioning data type event seq personally default list goto collection type good idea possible generalize data type case function care one bit resulting collection list vector something else entirely package controller import playapimvc import playapilibsjsonjson import comsemisafeticketoverlordsevent object event extends controller def list action request val event seq event ok jsontojson event def getbyid eventid long action request val event option event eventfold notfound jsontojson event found e ok jsontojson e def create action request parse json post body val incomingevent event save event get copy back val createdevent event created jsontojson createdevent noticed error state json serializer found type seq comsemisafeticketoverlordsevent output ide previous post solve adding formatter event companion object package comsemisafeticketoverlords import playapilibsjson json format import case class definition object event implicit val format format event jsonformat event normalized response recall part json envelope used wrap result named availabilityresponse create generic version controllersresponses package named endpointresponse package controllersresponses case class errorresult status int message string case class endpointresponse result string response option error option errorresult since intended converted json response sent would good time add companion object json formatter package controllersresponses import playapilibsjson json format case class errorresult status int message string object errorresult implicit val format format errorresult jsonformat errorresult case class endpointresponse result string response option error option errorresult object endpointresponse implicit val format format endpointresponse jsonformat endpointresponse unfortunately eclipse telling u problem response class implicit format type make sense since literally anything take advantage fact member value already jsvalue stay jsvalue converted json snip import playapilibsjson json format jsvalue snip case class endpointresponse result string response jsvalue error option errorresult object endpointresponse implicit val format format endpointresponse jsonformat endpointresponse need make response option since jsvalue jsnull value used place none little ugly case class accepts response error time mitigate somewhat creating two object apply method return endpointresponse successresponse always result ok errorresponse always result ko snip import playapilibsjson json format jsvalue jsnull snip object errorresponse def apply status int message string endpointresponse ko jsnull option errorresult status message object successresponse def apply successresponse jsvalue endpointresponse ok successresponse none instantiate endpointresponse without needing worry result value matching wrong response portion populated another improvement make successresponse object requirement passing jsvalue add extra code calling side improved adding type parameter successresponse apply function implicit writes value used apply function snip import playapilibsjson json format jsvalue jsnull writes snip object successresponse def apply successresponse implicit w writes endpointresponse ok jsontojson successresponse none automatically pick json writes apply called based current implicit scope add event controller unify action response package controller import playapimvc import playapilibsjsonjson import comsemisafeticketoverlordsevent import controllersresponses object event extends controller def list action request val event seq event ok jsontojson successresponse event def getbyid eventid long action request val event option event eventfold notfound jsontojson errorresponse notfound event found e ok jsontojson successresponse e def create action request parse json post body val incomingevent event save event get copy back val createdevent event created jsontojson successresponse createdevent reading incoming data controller capable output turn attention create action first line expects json body post request match event class accomplish change action action parsejson tell play expecting json body matching contenttype enter function value requestbody transformed jsvalue jsvalue type validate method return jsresult value folded safely access actual data note invalidjson constant arbitrary value added errorresponse object def create action parsejson request val incomingbody requestbodyvalidate event incomingbodyfold error val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage badrequest jsontojson response event save event get copy back val createdevent event created jsontojson successresponse createdevent one thing fix call list getbyid return value valid id already exist system calling create action data passed via json idea expected id value change case class option id field outgoing incoming case safely handled case class event id option long name string start datetime end datetime address string city string state string country string case class ticketblock id option long eventid long name string productcode string price bigdecimal initialsize int salestart datetime saleend datetime ticketblocks everything need except data access logic write ticketblocks controller contains identical functionality package controller import playapimvc import playapilibsjsonjson import comsemisafeticketoverlordsticketblock import controllersresponses object ticketblocks extends controller def list action request val ticketblocks seq ticketblock ok jsontojson successresponse ticketblocks def getbyid ticketblockid long action request val ticketblock option ticketblock ticketblockfold notfound jsontojson errorresponse notfound ticket block found tb ok jsontojson successresponse tb def create action parsejson request val incomingbody requestbodyvalidate ticketblock incomingbodyfold error val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage badrequest jsontojson response ticketblock save ticket block get copy back val createdblock ticketblock created jsontojson successresponse createdblock also need create json formatter ticketblock companion object snip import playapilibsjson json format snip object ticketblock implicit val format format ticketblock jsonformat ticketblock routing thing left api side add action route file open confroutes add post route create action two get route list getbyid action event resource post event controllerseventscreate get event controllerseventslist get event eventid controllerseventsgetbyid eventid long ticket block resource post ticketsblocks controllersticketblockscreate get ticketsblocks controllersticketblockslist get ticketsblocks blockid controllersticketblocksgetbyid blockid long first time required parameter extracted url path seen argument prepended colon validated match expected data type request made defining schema evolution api defined ready create database schema management play support component called evolution used enabled default must explicitly add dependency evolution include evolution library would normally add following buildsbt file librarydependencies evolution note used word normally going using slick access database change thing add support evolution update buildsbt file match dependency librarydependencies seq test cache w orgwebjars jquery comtypesafeplay playslickevolutions dependency slick implicit requirement playslickevolutions directly add requirement later worth noting slick conflict jdbc dependency jdbc present need remove since must explicitly add evolution incorrect information applicationconf started version like repo go ahead clear line evolution configuration present creating schema evolution create table need create sql script defining schema structure start creating directory confevolutionsdefault create file named directory default directory named default database configuration file connecting multiple database database set evolution inside two section ups down used upgrade downgrade schema respectively add following sql create event ticketblock table ups create table event id integer autoincrement primary key name varchar start datetime end datetime address varchar city varchar state varchar country char create table ticketblocks id integer autoincrement primary key eventid integer name varchar productcode varchar price decimal initialsize integer salestart datetime saleend datetime foreign key eventid reference event id down drop table exists ticketblocks drop table exists event since raw sql take advantage vendor specific feature datatypes database using example going use database engine mysql compatibility turned add database library dependency version listed recent version time writing librarydependencies seq test cache w orgwebjars jquery comtypesafeplay playslickevolutions included database project need define configuration connecting open confapplicationconf file database configuration section may notice something similar database configuration declare many datasources want convention default datasource named default dbdefaulturl jdbc mem play dbdefaultusersa dbdefaultpassword go ahead delete using slick database configuration slightly different slickdbsdefaultdriver slickdbsdefaultdbdriver slickdbsdefaultdburl jdbc dboverlord modemysql slickdbsdefaultdbusersa slickdbsdefaultdbpassword url differs bit commented example instead using inmemory database writing filesystem make easier inspect data multiple development session production would want change something like mysql postgres sample development work fine persistence applying evolution application currently running inside activator start point browser http see message presented evolution stating database schema sync need updated hit apply button may notice new file project db directory newly created database activator console load ticketoverlords open browser populated form pointing location database form populated point filesystem path project dboverlord appended connect get interactive database web application allows explore schema perform manual query useful prototyping sql query debugging general data issue use interactive browser insert first event insert event name start end address city state country value kojella paper st palm desert ca u data access slick database defined class modeled api pas data http interact database going using slick slick one different data access library available scala add slick support project need add playslick library buildsbt librarydependencies sequence already included earlier added evolution dependency worth explicitly adding librarydependencies seq test cache w orgwebjars jquery comtypesafeplay playslickevolutions comtypesafeplay playslick creating dao going write data access function member model class companion object people prefer put database related code separate data access object later post illustrate beneficial given code controller know need list getbyid create method start adding object event implicit val format format event jsonformat event def list seq event def getbyid eventid long option event def create event event event signature look similar controller started make sense controller really perform much way logic creating table definition inside event object create table definition map existing table structure schema created earlier pairing event case class already created snip import playapidbslickdatabaseconfigprovider import slickdriverjdbcprofile import playapiplaycurrent import playapidbdbapi snip object event implicit val format format event jsonformat event protected val dbconfig databaseconfigproviderget jdbcprofile current import dbconfig import dbconfigdriverapi class eventstable tag tag extends table event tag event def id column long id oprimarykey oautoinc def name column string name def start column datetime start def end column datetime end def address column string address def city column string city def state column string state def country column string country def val table tablequery eventstable def list seq event def getbyid eventid long option event def create event event event table created column definition defining native scala data type column indicating primary key id column note since using required sql column name upper case query function correctly lower case addition created val named table represents tablequery defined event table save u typing future also notice code actually compile reason using orgjodatimedatetime date slick natively support datetime natively support javasqltimestamp solve creating implicit mapping function create new object named slickmapping comsemisafeticketoverlords package package comsemisafeticketoverlords import orgjodatimedatetime import javasqltimestamp import playapidbslickdatabaseconfigprovider import slickdriverjdbcprofile import playapiplaycurrent object slickmapping protected val dbconfig databaseconfigproviderget jdbcprofile current import dbconfig import dbconfigdriverapi implicit val jodadatetimemapping mappedcolumntypebase datetime timestamp dt new timestamp dtgetmillis t new datetime t code import slickmappingjodadatetimemapping file using datetime type within slick table definition slickmapping function work fine purpose extensive joda date time usage slickjodamapper library tototoshi next portion fill definition respect querying table defined tuple column require returned perform query match database directly actually want retrieve database useful large field deprecated column want code concerned def id name start end address city state country eventapply tupled eventunapply since event class expects id option append modifier column indicating slick case function give u mappedshape allows u transform tuple directly event case class intend work general retrieving record start fill three data access function list function straight forward slick support function directly tablequery result def list seq event val eventlist tableresult dbrun eventlist actually work get compile error expected type match actual type type mismatch found scalaconcurrentfuture seq eventdaothiseventstable tableelementtype expands scalaconcurrentfuture seq comsemisafeticketoverlordsevent required seq comsemisafeticketoverlordsevent fails compile since dbrun return future instead raw value new default behavior slick familiar database access library anorm may le accustomed behavior wrapping query future anyways slick performs database request asynchronously allows code blocked time intensive database query make sense since database operation take time normal computation fail generally ruin day assume best happen since really care content result yet simply pas future caller consider method done import scalaconcurrentfuture snip def list future seq event val eventlist tableresult dbrun eventlist retrieving subset record getbyid function slightly complex actually starting interact data result actually future desired result def getbyid eventid long future option event val eventbyid tablefilter f fid eventid resultheadoption dbrun eventbyid start filtering data match predicate supplied eventid match row id done applying transformation call headoption method execute query returning first result result adding new record add record database syntax change somewhat treat table definition collection modifier indicating value want returned record inserted def create newevent event future event val insertion table returning tablemap id newevent val insertedidfuture dbrun insertion val createdcopy future event createdcopy successfully insert record future long fine function need actual value copy original case class updated id field faced future containing value need direct access generally two option use awaitresult block future completes ever ever answer always except maybe unit test utilize map future transform future long create new future event typing compiler may warn need implicit execution context recommend importing generic one scalaconcurrentexecutioncontextimplicitsglobal work correct context use one provided play import playapilibsconcurrentexecutionimplicits snip def create newevent event future event val insertion table returning tablemap id newevent val insertedidfuture dbrun insertion val createdcopy future event insertedidfuturemap resultid neweventcopy id option resultid createdcopy tying together everything required read event database need update event controller utilize new data access method starting list method import scalaconcurrentfuture import playapilibsconcurrentexecutionimplicits snip def list action request val eventfuture future seq event eventlist val response eventfuturemap event ok jsontojson successresponse event response map future giving u ability transform one future another unfortunately compile either able return future directly action defined case happens frequently switching action expect future result simple changing method definition action actionasync def list actionasync request val eventfuture future seq event eventlist val response eventfuturemap event ok jsontojson successresponse event response two remaining method controller end object like object event extends controller def list actionasync request val eventfuture future seq event eventlist val response eventfuturemap event ok jsontojson successresponse event response def getbyid eventid long actionasync request val eventfuture future option event eventgetbyid eventid eventfuturemap event eventfold notfound jsontojson errorresponse notfound event found e ok jsontojson successresponse e def create actionasync parsejson request val incomingbody requestbodyvalidate event incomingbodyfold error val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage futuresuccessful badrequest jsontojson response event save event get copy back val createdeventfuture future event eventcreate event createdeventfuturemap createdevent created jsontojson successresponse createdevent notice create method custom body handler well async well since create method alternate return path badrequest response result need wrapped futuresuccessful method verification use curl verify endpoint work expected notice date millisecond since epoch make easiest interact javascript client side use terminal date command convert readable version shave millisecond curl w n result ok response id name kojella start end address paper st city palm desert state ca country u date r thu apr pdt also verify creating event work expected using curl well could better three day festival dedicated meat stick curl w n http h contenttype applicationjson name austin satay limit start end address skewer ave city austin state tx country u result ok response id name austin satay limit start end address skewer ave city austin state tx country u finally ensure new event retrievable id curl w n result ok response id name austin satay limit start end address skewer ave city austin state tx country u shower rinse repeat event type reading writing database repeat process ticketblock type real difference two object ticketblock contains foreign key reference event class snip import playapidbslickdatabaseconfigprovider import slickdriverjdbcprofile import playapiplaycurrent import playapidbdbapi import slickmappingjodadatetimemapping import scalaconcurrentfuture import playapilibsconcurrentexecutionimplicits snip object ticketblock implicit val format format ticketblock jsonformat ticketblock protected val dbconfig databaseconfigproviderget jdbcprofile current import dbconfig import dbconfigdriverapi class ticketblockstable tag tag extends table ticketblock tag ticketblocks def id column long id oprimarykey oautoinc def eventid column long eventid def name column string name def productcode column string productcode def price column bigdecimal price def initialsize column int initialsize def salestart column datetime salestart def saleend column datetime saleend def event foreignkey tbevent eventid eventtable id def id eventid name productcode price initialsize salestart saleend ticketblockapply tupled ticketblockunapply val table tablequery ticketblockstable def list future seq ticketblock val blocklist tableresult dbrun blocklist def getbyid blockid long future option ticketblock val blockbyid tablefilter f fid blockid resultheadoption dbrun blockbyid def create newticketblock ticketblock future ticketblock val insertion table returning tablemap id newticketblock dbrun insertion map resultid newticketblockcopy id option resultid update ticketblocks controller reference new data access method import scalaconcurrentfuture import playapilibsconcurrentexecutionimplicits snip object ticketblocks extends controller def list actionasync request val ticketblocks future seq ticketblock ticketblocklist ticketblocksmap tb ok jsontojson successresponse tb def getbyid ticketblockid long actionasync request val ticketblockfuture future option ticketblock ticketblockgetbyid ticketblockid ticketblockfuturemap ticketblock ticketblockfold notfound jsontojson errorresponse notfound ticket block found tb ok jsontojson successresponse tb def create actionasync parsejson request val incomingbody requestbodyvalidate ticketblock incomingbodyfold error val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage futuresuccessful badrequest jsontojson response ticketblock save ticket block get copy back val createdblock future ticketblock ticketblockcreate ticketblock createdblockmap cb created jsontojson successresponse cb use new endpoint add first ticket block kojella event corresponds event id curl w n http h contenttype applicationjson name general admission eventid productcode price initialsize salestart saleend result ok response id eventid name general admission productcode price initialsize salestart saleend wait actually want people order thing looking accomplished far proud result realize never created mechanism customer place order would successful ticket store people could buy ticket returning original data model diagram add order class keep track customer purchase ticket respective ticket block create new case class comsemisafeticketoverlords package named order need make change raw data model optional key foreign key ticketblock addition make sense timestamp generated client side make option populated server sending database package comsemisafeticketoverlords import orgjodatimedatetime case class order id option long ticketblockid long customername string customeremail string ticketquantity int timestamp option datetime migrating schema defined native class defines order add database schema could easily edit existing sql file good time make first schema migration create new file confevolutionsdefault named content evolution sql migration format initial one add sql required change state current schema match desired target ups create table order id integer autoincrement primary key ticketblockid integer customername varchar customeremail varchar ticketquantity integer timestamp datetime foreign key ticketblockid reference ticketblocks id down drop table exists order load http presented new notice database need evolution hit apply button database schema updated support new order class old data still create style companion object one minor difference instead passing timestamp value directly create function overwrites new datetime giving current date time value snip import playapilibsjson json format import playapidbslickdatabaseconfigprovider import slickdriverjdbcprofile import playapiplaycurrent import playapidbdbapi import slickmappingjodadatetimemapping import scalaconcurrentfuture import playapilibsconcurrentexecutionimplicits snip object order implicit val format format order jsonformat order protected val dbconfig databaseconfigproviderget jdbcprofile current import dbconfig import dbconfigdriverapi class orderstable tag tag extends table order tag order def id column long id oprimarykey oautoinc def ticketblockid column long ticketblockid def customername column string customername def customeremail column string customeremail def ticketquantity column int ticketquantity def timestamp column datetime timestamp def ticketblock foreignkey oticketblock ticketblockid ticketblocktable id def id ticketblockid customername customeremail ticketquantity timestamp orderapply tupled orderunapply val table tablequery orderstable def list future seq order dbrun tableresult def getbyid orderid long future option order dbrun tablefilter f fid orderid resultheadoption def create neworder order future order val nowstamp new datetime val withtimestamp newordercopy timestamp option nowstamp val insertion table returning tablemap id withtimestamp dbrun insertion map resultid withtimestampcopy id option resultid create package controller import playapimvc import playapilibsjsonjson import scalaconcurrentfuture import playapilibsconcurrentexecutionimplicits import comsemisafeticketoverlordsorder import controllersresponses object order extends controller def list actionasync request val order orderlist ordersmap ok jsontojson successresponse def getbyid orderid long actionasync request val orderfuture ordergetbyid orderid orderfuturemap order orderfold notfound jsontojson errorresponse notfound order found ok jsontojson successresponse def create actionasync parsejson request val incomingbody requestbodyvalidate order incomingbodyfold error val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage futuresuccessful badrequest jsontojson response order save order get copy back val createdorder ordercreate order createdordermap co created jsontojson successresponse co finally add order resource post order controllersorderscreate get order controllersorderslist get order orderid controllersordersgetbyid orderid long place first ticket order using curl curl w n http h contenttype applicationjson ticketblockid customername rutiger simpson customeremail rutiger semisafecom ticketquantity result ok response id ticketblockid customername rutiger simpson customeremail rutiger semisafecom ticketquantity timestamp querying single value successfully placed first order still problem implementation ticket limited resource ticket block sell gone system account allows user place order regardless many existing order already placed solve adding method named availability ticketblock object see amount ticket still available block def availability ticketblockid long future int val order ordertable oticketblockid ticketblockid yield oticketquantity val quantityleft tablefilter id ticketblockid map tb tbinitialsize orderssum val queryresult dbrun quantityleftresultheadoption queryresultmap flattengetorelse also need update order controller check available ticket creating order notenoughtickets arbitrary value errorresponse object worth pointing use flatmap instead map availability response want result future code path also return future would result future future result later would need flattened anyways way code cleaner path return future expected snip import comsemisafeticketoverlords order ticketblock snip def create actionasync parsejson request val incomingbody requestbodyvalidate order incomingbodyfold error val errormessage invalid json error val response errorresponse errorresponseinvalidjson errormessage futuresuccessful badrequest jsontojson response order val availfuture ticketblockavailability orderticketblockid availfutureflatmap availability availability orderticketquantity save order get copy back val createdorder ordercreate order createdordermap co created jsontojson successresponse co else val responsemessage enough ticket remaining complete order quantity remaining availability val response errorresponse errorresponsenotenoughtickets responsemessage futuresuccessful badrequest jsontojson response verify succeeds supposed curl w n http h contenttype applicationjson ticketblockid customername walter bishop customeremail wbishop bannedroboticscom ticketquantity result ok response id ticketblockid customername walter bishop customeremail wbishop bannedroboticscom ticketquantity timestamp also verify fail many ticket ordered curl w n http h contenttype applicationjson ticketblockid customername peter bishop customeremail pbishop bannedroboticscom ticketquantity result ko response null error status message enough ticket remaining complete order quantity remaining healthy dose skepticism worked orms form autogenerated code probably reasonable well deserved distrust anything build code slick sql slick allows display query string retrieved directly query object use inspect sql generated recently created availability method import playapilogger snip loggerinfo query quantityleftresultheadoptionstatements val queryresult dbrun quantityleftresultheadoption snip next time make request check log see following sql output displayed info application query list select initialsize ticketblocks select sum select ticketquantity order ticketblockid id bad autogenerated code based highly scientific method running code airplane refusing double check result feel could faster used query instead select initialsize coalesce sum ticketquantity ticketblocks tb left join order oticketblockidtbid tbid ticketblockid group initialsize luckily u slick support ability make raw sql query well needed def availability ticketblockid long dbrun val query sql select initialsize coalesce sum ticketquantity ticketblocks tb left join order oticketblockidtbid tbid ticketblockid group initialsize int queryheadoption map getorelse curl overorder one time verify work intended next epic novel post looking back lot thing able accomplish improved api reusability consistency creating common response type learned accept url path parameter well post body data including validating json known data type built schema using evolution migrated second version learned use slick access data scala sql learned interact return future result next post cover asynchronous response using actor close giant concurrency bug introduced noticed giant concurrency bug right right
264,Lobsters,scala,Scala programming,Everything You Ever Wanted to Know About Sealed Traits in Scala,http://underscore.io/blog/posts/2015/06/02/everything-about-sealed.html,everything ever wanted know sealed trait scala,algebraic data type structural recursion exhaustiveness checking inner life sealed final word followup,sealed trait essential idiomatic scala code many developer hazy detail working post describe want use use correctly increase quality code algebraic data type explain sealed term lowlevel semantics find much useful start big picture important use sealed defining algebraic data type despite fancy name algebraic data type way modelling data term two pattern logical or list nil logical ands head tail functional programming lingo call logical sum type logical product type algebraic data type really really important standard library chock full option list try example probably think place use work common example modelling different type user might structure like account admin normal user account certain property like emailaddress username admins probably property unique accesslevel complex definition algebraic data type defined entirely term ands or using simple pattern mechanically translate description algebraic data type code go detailed scala implementation sum product type pattern let see quick example list described sealed trait list lotsa method final case class head tl list extends list final case class nil extends list nothing notice use sealed final structural recursion algebraic data type really useful define using sealed trait sealing trait actually get u time look write code us algebraic data type also fancy name structural recursion basic idea simple let start familiar example option option none sum type element x product type albeit simple one containing single field write match expression option need one case one none case something element x code anoption match case none dononecase case x dosomecase x generalise pattern algebraic data type branch sum type logical get case pattern matching product type logical requires u extract something element structural recursion way mechanically convert description algebraic data type code mechanically convert algebraic data type skeleton using type seen three neat thing model general class data using algebraic data type mechanically convert algebraic data type scala definition mechanically write scala code use algebraic data type via structural recursion still said sealed get u let seal deal finally explain importance exhaustiveness checking define algebraic data type using sealed trait allow compiler perform exhaustiveness checking simpler word mean compiler shout u miss case structural recursion example scala console scala option match case none yeah console warning match may exhaustive would fail following input option match exhaustiveness checking extremely useful may used java apis sometimes return null perhaps ruby us nil scala use option know easy forget check null nil case exhaustiveness checking completely prevents type error also extremely useful refactoring code example extend algebraic data type say add new type user compiler tell u every place code base need updated exhaustiveness checking allows u make stronger guarantee correctness code write code way let compiler check u sealed come inner life sealed sealed trait extended within file defined allows compiler perform exhaustiveness checking pattern match trait compiler must know possible subtypes check given jvm allows code loaded runtime compiler scan whole program collect possible subtypes even could would prevent separate compilation rather slow small example illustrates first declare sealed trait subtypes sealed trait base final case class subtypeone int extends base final case class subtypetwo b option string extends base see compiler provides exhaustiveness checking declare instance type base get warning incomplete pattern match expect scala subtypeone base match case subtypeone console warning match may exhaustive would fail following input subtypetwo subtypeone base match good idea turn warning error xfatalwarnings compiler flag point lot scala programmer hazy sealed transitive meaning although base sealed mean subtypeone subtypetwo sealed hence get exhaustiveness checking match value type subtypeone subtypetwo example get warning missing none case instead getting matcherror exception runtime scala subtypetwo oops match case subtypetwo none yeah scalamatcherror subtypetwo oops class subtypetwo let clear going matching value type subtypetwo type base subtypetwo sealed therefore compiler guarantee know everything subtypetwo could subtypes defined another file thus get exhaustiveness checking might argue compiler give u warning none case since option sealed would give unpredictable behaviour general would sometimes get checking sometimes depending exactly defined type match much better predictable semantics build complicated system lead surprise unexpected runtime crash note get exhaustive checking example declare type base exhaustiveness checking controlled entirely type expression matched scala subtypetwo oops base match case subtypetwo none yeah console warning match may exhaustive would fail following input subtypeone subtypetwo subtypetwo oops base match final word final modifier similar semantics sealed sealed trait extended defining file final class extended anywhere seems odd quirk final class get exhaustiveness checking despite make case class algebraic data type final example standard library see example reason firstly find descriptive also open optimisation possibility sealed though know opportunity taken advantage finally declaring type almost always use base type eg option instead subtype eg none lack exhaustiveness checking rarely issue look standard library see sealed abstract class often used used sealed trait example believe sealed abstract class lead slightly faster implementation easier java interoperation practice like minimise number concept use trait generally useful abstract class prefer update made far check followup post
265,Lobsters,scala,Scala programming,First experiments with Apache Spark at Snowplow,http://snowplowanalytics.com/blog/2015/05/21/first-experiments-with-apache-spark/,first experiment apache spark snowplow,may post spark example project release apache spark data modeling loading snowplow data spark performing simple aggregation snowplow data spark performing funnel analysis snowplow data snowplow repo sparkcontext support wildcards transforming data analysis eventtransformer ingesting directly elasticsearch spark dataframe loading json formatted data spark dataframe sqlcontext schema simple aggregation snowplow data count number event per day udf note bug workarounds fixed count number user per day count number session per day note function yet supported rdd pairrdd reflection next step dynamodb spark streaming,talked may post spark example project release snowplow interested apache spark three thing data modeling ie applying business rule aggregate eventlevel data format suitable ingesting business intelligence reporting olap tool realtime aggregation data realtime dashboard running machinelearning algorithm eventlevel data beginning journey getting familiar apache spark using spark first time past week post share back community learnt cover loading snowplow data spark performing simple aggregation snowplow data spark performing funnel analysis snowplow data tried write post way easy followalong people interested getting spark learning curve assuming git vagrant virtualbox installed get started simply clone snowplow repo switching featuresparkdatamodeling branch vagrant vagrant ssh onto box host git clone http githubcomsnowplowsnowplowgit host cd snowplow host git checkout featuresparkdatamodeling host vagrant vagrant ssh guest cd tutorial also assumes snowplow enriched event file stored locally pathtodata enriched event stored tsv format documented first open scala console repl guest sbt console give u access library loaded part sparkdatamodeling project need later step first define sparkcontext paste scala console import orgapachespark sparkcontext sparkconf import sparkcontext val sc val conf new sparkconf setappname myappname setmaster local master local running locally new sparkcontext conf define indir path directory data file spark support wildcards load data val indir pathtodata val input sctextfile indir wanted load data directly would change directory path value val indir snowploweventsenrichedgoodrun case must awsaccesskeyid awssecretaccesskey environment variable set aws account credential aws account need permission transforming data analysis look data look like moment scala inputfirst string snowplowanalyticscomanalyticsindexhtmlthe snowplow analytics cookbookhttp schema iglu data schema iglu data utma data element long string tsvs value json tidy eventtransformer object import comsnowplowanalyticssnowplowdatamodelingsparkeventseventtransformer val jsons input map line eventtransformertransform line filter issuccess flatmap tooption note eventtransformer originally written convert snowplow enriched event format suitable ingesting directly elasticsearch part realtime flow transformation make data easy work spark data look like scala jsonsfirst string geolocation appid snowplowweb platform web etltstamp collectortstamp dvcetstamp event pageview eventid txnid null nametracker clojure vtracker vcollector vetl userid useripaddress userfingerprint domainuserid domainsessionidx networkuserid geocountry au georegion null geocity null geozipcode null geolatitude geolongitude georegionname null ipisp exetel iporganization json string returned load spark dataframe easily manipulate data across dimension loading json formatted data spark dataframe create sqlcontext import orgapachesparksqlsqlcontext val sqlcontext new sqlcontext sc load json formatted data dataframe two different way continuing work console used implicitly convert rdd dataframe import sqlcontextimplicits val df sqlcontextjsonrdd jsons alternatively saved data file could load data directly dataframe way val df sqlcontextload pathtosavedjsonfiles json look data returning schema scala dfprintschema root appid string nullable true brcolordepth string nullable true brcookies boolean nullable true brfamily string nullable true brfeaturesdirector boolean nullable true brfeaturesflash boolean nullable true brfeaturesgears boolean nullable true brfeaturesjava boolean nullable true brfeaturespdf boolean nullable true brfeaturesquicktime boolean nullable true brfeaturesrealplayer boolean nullable true brfeaturessilverlight boolean nullable true brfeatureswindowsmedia boolean nullable true brlang string nullable true brname string nullable true brrenderengine string nullable true brtype string nullable true brversion string nullable true brviewheight long nullable true brviewwidth long nullable true collectordate string nullable true collectortstamp string nullable true array nullable true element struct containsnull true utma string nullable true utmb string nullable true utmc string nullable true utmz string nullable true spark sql inferred schema json file fit schema simple aggregation snowplow data illustrate simple aggregation spark count number event per day count number user per day count number session per day count number event per day set crude function todate get date collectortstamp column containing date time iso format make udf todate use column dataframe udf take function object define todate anonymous function import orgapachesparksqlfunctionsudf val todate string tsplit val todateudf udf todate val dfwithdate dfwithcolumn collectordate todateudf dfcol collectortstamp note bug concerning registering udfs certain context like sbt console using workarounds current spark release version though since fixed alternatively aggregation also done using rdds without udfs see go dataframe rdd group new column count event per group scala dfwithdate groupby collectordate count show collectordatecount show method dataframes useful quickly see result operation dataframe however display top row count number user per day first get distinct user per day unique user per day get one row per user per day repeat group day count user group scala dfwithdate select domainuserid collectordate distinct groupby collectordate count show collectordatecount count number session per day principle counting number user per day session defined unique combination domainuserid domainsessionidx scala dfwithdate select domainuserid domainsessionidx collectordate distinct groupby collectordate count show collectordatecount note also exists countdistinct function use aggregate group like scaladfwithdate groupby collectordate agg countdistinct domainuserid domainsessionidx show collectordatecount distinct domainuserid domainsessionidx however behaviour inconsistent select distinctgroupby count approach took prior null value taken account countdistinct analyse eventlevel data often interested understanding sequence event occur funnel analysis one simplest example sequencing event define funnel made three event example three page view event event identified via unique page url want aggregate event corresponding one session single field summarises journey funnel session first define url funnel val url map analyticsindexhtml b pricingindexhtml c withdefaultvalue next want group event session collect pageurlpath pageview event unfortunately aggregation spark dataframes work basic predefined function count used standard function udafs yet supported spark sql map dataframe rdd using map method scala import orgapachesparksqlrow import orgapachesparksqlrow scala val eventsrdd df filter event pageview orderby collectortstamp select domainuserid domainsessionidx pageurlpath map case row duid string dsid long url string seq duid dsidtostring url case row duid string none url string seq duid null url eventsrdd orgapachesparkrddrdd seq string mappartitionsrdd map console note triple equality symbol test equality event ordered date time order url visited important constructing funnel use pattern matching take care null domainsessionidx value since type long next group session scala val eventsbysession eventsrdd groupby r r r eventsbysession orgapachesparkrddrdd string string iterable seq string shuffledrdd groupby console return pairrdd key session tuple domainuserid domainsessionidx value iterable row corresponding session example scala eventsbysessiontake foreach println compactbuffer list compactbuffer list analyticsrecipescustomeranalyticscustomerlifetimevaluehtml compactbuffer list compactbuffer list compactbuffer list productindexhtml list analyticsindexhtml list analyticstoolssqlindexhtml list analyticsconceptscontextsindexhtml list analyticsconceptsigluindexhtml list analyticsconceptssnowplowdatapipelineindexhtml looking five element eventsbysession rdd first four session one url visited whereas six url visited fifth session displayed row still contains domainuserid domainsessionidx field used group need remove obsolete field keep pageurlpath pageurlpath mapped corresponding funnel letter defined url map join funnel letter together single string summarised funnel journey field function funnel url change recalculate funnel field session eventsbysession rdd passing new url map urltoletter argument import orgapachesparkrddrdd def reducetofunnelletter grpdevents rdd string string iterable seq string urltoletter map string string rdd string string string grpdeventsmapvalues map case seq duid dsid url urltoletter url mkstring apply reducetofunnelletter function get scala val session reducetofunnelletter eventsbysession url session orgapachesparkrddrdd string string string mappartitionsrdd mapvalues console scala sessionstake foreach println b c ba b example first session shown visit url interested third visit url corresponding seventh visit url url single session convert pairrdd dataframe needed scala case class session domainuserid string domainsessionidx string funnel string defined class session scala val funneldf session map session session flatten row todf funneldf orgapachesparksqldataframe domainuserid string domainsessionidx string funnel string scala funneldfshow domainuseriddomainsessionidxfunnel b c ba b b c spark inferred schema using reflection case class defines schema table data dataframe use terse declarative code analyse data example look longest funnel journey scala val tolength udf string tlength int tolength orgapachesparksqluserdefinedfunction userdefinedfunction integertype scala funneldf orderby tolength funnel desc show domainuseriddomainsessionidxfunnel bbaaa baaa aaa ca ba ba bb aa b c c b b b c b b c next step number way build computation outlined funnel analysis example might want define funnel step funnel simply page view identified page url path want flexibility build funnel event type use combination field snowplow data identify step funnel code would need flexible accept nested eventtoletter mapping sort form val eventtoletter map map event pageview pageurlpath map event pageview pageurlpath pricingindexhtml b map event transaction tiname cone pendulum c withdefaultvalue next step internship focusing marketing attribution data particular going compute identify filter transform data spark loading dynamodb visualising using stack give lot flexibility explore different approach visualizing marketing attribution data parallel another intern snowplow figuring run spark streaming kinesis perform type realtime computation visualization realtime stay tuned blog post due course
266,Lobsters,scala,Scala programming,Indiegogo: Record All LambdaConf 2015 Talks,https://www.indiegogo.com/projects/record-all-lambdaconf-2015-talks,indiegogo record lambdaconf talk,,
267,Lobsters,scala,Scala programming,Effects,http://m50d.github.io/2015/04/21/effects.html,effect,comment powered disqus comment powered,effect pure function look almost programming language today programming language differ handling effect part program consist something substituting function call return value equivalence http conalnetblogpoststheclanguageispurelyfunctional thing effect captured value lazily represents performing effect manipulation value could modelled effect assembly language http rather machine code paradoxically extreme example machinecode program consists entirely effect even anywhere put value equivalently machinecode program value obvious possible way nothing sequence byte modern languagues make finergrained distinction haskellstyle functional language common value eg generaterandomnumber interpreted first specific context eg rng int general context eg io int several layer finally reach stage general effect talk effect inherently adopt certain perspective thing something common treated similarly sense already assuming haskell worldview bias come hopefully enlightening programmer school maybe shed new light certain language design decision unsurprisingly different programming language take different approach managing effect interesting language adopts quite different attitude two effect seem quite similar mostly use java python scala example language familiar aware language distinctive position area mention apology misunderstand feature le familiar language compiling list example ax emerged effect appears locally source code effect magic completely invisible language simply manages effect almost always also implicit safe concise verbose effect appears globally function call function effect occurs implicit call function performs effect look like function call singlefunction effect must resolved single function usually parent function might call child function ca nt split across multiple function scope ie starting one function finished another sibling function specialcased http function effect must handled differently function perhaps language support perhaps generic effect visible function call effectness abstracted lanugage whether use effect safe language enforces effect handled correctly unsafe programmer also found distinct class semisafe effect handling construct simple rule followed ensure effect handled safely language also permit invoking effect unsafely perhaps eg legacy library example memory management java python scala magic implicit safe language day automatic garbage collection c verbose implicit unsafe c canonical example language manual memory management programmer explicitly call malloc free responsible ensuring called correctly allocation ownership implicit beyond function scope way know whether function allocate memory new data structure free existing one outofband information like comment c semiconcise semigeneric semisafe c often feel like several language nowcommon construct verbose provided use right construct smart pointer stack allocation raii follow rule memory safety enforced memory management appears globally interesting mix memory management information sometimes visible function definition smart pointer reference always abstracting memory management generically interesting theory raii mean memory nonmemory resource managed way eg template polymorphic kind resource using template handle smart pointer theory even abstract referenceness seen limited use technique practice part complexity template system rust concise singlefunction safe rust big selling point memory manually managed safety enforced via borrow checker lifecycle function parameter visible function signature clear exactly lifecyclepolymorphic function rust nt abstraction need treat effect completely generically ie higherkinded type level abstraction borrowed v owned v shared resource might possible nonmemory resource java python using manual resource verbose implicit unsafe programmer must explicitly free resource usually requires try finally block correctly python using destructors magic implicit safeish python us reference counting deterministic ish destruction possible rely object destructors free resource risk turning relatively benign memory leak perilous resource leak even seen code early java garbage collection make unsafe possible eg hit o file handle limit program never run memory never close file python using statement concise singlefunction semisafe use specific statement give resource block scope safely relies programmer using statement resource ca nt cleanly passed across function boundary belong particular block java using trywithresources concise singlefunction safe python compiler warn programmer forgets use statement autocloseable object scala using scalaarm concise generic semisafe resource abstraction make possible pas resource safely across function boundary since ordinary parameterized type abstract like effect python case user explicitly call managed resource c using raii concise implicit safe c resource usually managed via object construction destruction since object lifecycles already managed carefully sake memory management get management resource free go dispose concise heard extreme claim nice must investigate error handling java using checked exception verbose specialcased safe java enforces exception caught propagated explicitly language level exception distinct rest type sysetm impossible abstract whether function throw handling possibilty error single function call requires slightly clunky try catch block python java using unchecked exception scala c using exception concise implicit unsafe function might throw exception might caught scala using either concise generic semisafe possibleerrors ordinary paramaterized type abstract like effect user must ensure code return error rather throwing use catching construct wrap legacy library c using error code verbose specialcased unsafe though gcc warnunusedresult error code passed value type actual value meaning language ca nt enforce checked correctly propagating error usually requires manual code ca nt abstracted since standardization different error code might mean go verbose specialcased safe c re err syntax enforces error handled rust concise semigeneric safe scala language builtin mechanism risk legacy code throwing exception errorness sort abstracted via macro http language lack higherkinded type ca nt express fully effectgeneric function file io java python mainstream scala magic implicit unsafe language function might read write file reading writing file usually inherently safe presence multithreading require careful manual step ensure correctness scala using io concise generic semisafe using ordinary value encapsulate io abstract effect language enforces io value composed correctly programmer need take care wrap legacy library call perform io haskell concise generic safe scala builtin language feature library explicit io random number generation interestingly exactly file io java python mainstream scala magic implicit unsafe scala using rng concise generic semisafe haskell concise generic safe database access javascala jdbc python mysql module verbose implicit unsafe function might access database programmer must manually manage transaction boundary javascala spring jdbc template conciseish singlefunction semisafe since java nt firstclass function sometimes hard abstract away boilerplate often best approach define superclass extended user code spring jdbc safe database accessed within class force database access happen single block ca nt eg pas open transaction function javascala hibernatejpa python django magic singlefunction implicit unsafe approach offer two possibility transaction boundary either method scoped via transactional case database access happen single block programmer must ensure transactional method access database sessioninview ie one transaction per web request case transaction implicitly threaded function controlled cause problem asyncmultithreaded code scheduled task run outside context particular web request scala squeryl concise singlefunction unsafe squeryl intransaction block similar abstraction slightly friendlier automated refactoring since ordinary method call rather annotation otherwise behave scala doobie verbose generic safe follows parameterized type approach database code used fully generically passed function code verbose offer jdbclike row interface orm async java callback verbose singlefunction unsafe language support callbackbased async nt require languagelevel support inherently singlefunction callback ca nt composedchained programmer ensure correct thing happen code run different thread java quasar python various async library go concise implicit safe relatively new model green threading thread transition automatically implicitly managed runtime relies runtime ensure correctness threaddependent code make eg ffi call ie calling c library difficult programmer control thread transition erlang concise specialcased safe erlang make explicit distinction message function call giving programmer control context switch happen perhaps used telecom ie realtime making harder abstract sync v async scala using future concise generic safe scala parameterized type custom construct eg audit logging custom construct nature ca nt handled magically section mechanism language offer extending custom effect language verbose implicit unsafe always possible implement effect hand even language nt offer anything java using spring aop aspectj python using decorator concise singlefunction unsafe saw approach database section possible use custom effect easy python since decorator function java implementation verbose point use simple annotation scala using custom monad concise generic semisafe custom effect another effect provided define primitive effectually type system enforce composed correctly thought started thinking issue reading piece async javascript particularly call magic approach http jlongstercomstoptryingtocatchme struck fact go favour magicimplicit style async despite taking verbosespecialcased approach error handling thought contradiction present haskell tradition go far managing io explicitly long advocated magicimplicit approach memory management partly language playing strength prejava day c resource management looked envy often observed product necessity since c programmer manage memory explicit resource made sure great tool explicitly managing resource similarly haskell great tool concisely generically operating explicit effect monad surely factor decision manage io explicit effect conversely unmanaged mutable state cost garbage collection lower conventional language doubt similar consideration apply go design decision alien seem perhaps important case error handling java checked exception seem like languageappropriate approach verbose safe could java motto practice user turned away partly verbosity partly hard abstract eg callback context ca nt help wondering lesson haskell tradition managing many thing explicitly improves safety robs functional language greatest strength conciseness ocaml worse language haskell lack higherkinded type many use case starting think best option available hand scala experience convinced retrofitting effect like io option even one incorrectly annotated library destroys value approach lot library maybe takeaway perfect language haskell always better choice financial computation python better one quick dirty script scala fan even unsatisfying make compromise end rather use scala whole system write part multiple language home please enable javascript view comment powered disqus comment powered disqus
268,Lobsters,scala,Scala programming,Introduction to scalaz-stream,https://gist.github.com/djspiewak/d93a9c4983f63721c41c,introduction scalazstream,introduction scalazstream prerequisite transforming running process running stream composition infinity finding performing action callback resource safety merging concurrency scodecbits project coordination flipping scalaznetty netty nio framework backpressure wikipedia article backpressure open issue learning gitter room issue twitter,introduction scalazstream every application ever written viewed sort transformation data data come different source network file user input large hadron collider come many source merged aggregated interesting way produced many different output sink network file graphical user interface might produce output big data dump end world right program shuts might produce incrementally every application fit model scalazstream project attempt make easy construct test scale program fit within model say everything providing abstraction around stream data really notion number data sequentially pulled unspecified data source top abstraction scalazstream provides large number tool manipulating slicing transforming merging outputting totally word tool generally referred combinators clean orthogonal serving minimal targeted purpose easytounderstand rule guarantee among combinators tool merging stream interesting way often involving concurrency scalazstream make easy model data transformation run parallel taking full advantage multicore hope soon multiserver distributed evaluation however scalazstream make attempt guess problem make sense run concurrently sort granularity seems best want concurrency scalazstream make easy get must ask central tenant whole library design result code clean wellfactored surprise come time evaluate article introduce basic principle scalazstream particular focus useful thing easily testable scalable fashion knowledge advanced functional programming eg scalaz assumed nt need wellversed category theory benefit power cleanliness scalazstream article well help get started prerequisite scalazstream depends scalaz library technical reason present two outstanding supported version scalaz latter course contemporaneous numerous feature absent also incompatibility force certain project use older version one project stuck scalaz reason need use version scalazstream otherwise nt already dependency direct indirect scalaz free upgrade use thus sbt configuration look like following resolvers scalaz bintray repo http dlbintraycomscalazreleases librarydependencies orgscalazstream scalazstream scalazstream class module contained within scalazstream package far useful type package process represents sequential stream get mean moment sufficient get dependency setup transforming running process scalazstreamprocess type represents possibly infinite sequential stream stuff stuff depends two type parameter give process example def foo p process nothing string look like p stream string value know first parameter nothing effect within stream controlling existence nonexistence effect central design philosophy scalazstream significant part make powerful useful tool think effect something like reading file receiving data ajax request really anything involves dealing outside world def foo p process task request ah something interesting nothing replaced task mean somewhere inside p talking outside world rather talk outside world actually go evaluate p bit also notice second type parameter request guessing look bit like stream external request coming sort server u possibly http protocol would guess stream unbounded since going want continue processing request forever rather someone asks u stop unbounded infinite stream tremendously useful tool easy say stream represents request ever receive stream first class thing manipulate get hand around nice indeed getting ahead stream nt interesting ca nt thing really scalazstream manipulation transformation data effect process well answer nearly everything seq familiar scala collection library feel home working process map flatmap filter take drop collect zip function available work exactly would expect example let create simple process hardcoded data bit trivial transformation val p process val result p collect case one case two case three filter length map touppercase pretty standard stuff collecting input int filtering mapping p vector list would expect result contain something like vector three process may look like collection result variable type process nothing string effect harmed making stream nt really contain anything rather result know compute sequence data result pipeline operation nt actually done work yet want ask work need put bit effort running stream resultstosourcerunlogrun vector three tosource bit weird actually something often need scalazstream actually nt understand run process nt effect tosource take effectless stream make pretend effect even though nt runlog work runlogrun obviously clumsy incantation essence runlog instructs process compile pipeline single atomic operation case task run produce seq string would course seq int input process result contained int data seq request contained request second sentence paragraph implies though runlog alone actually run process distinction get even weirder use run interpreter rather runlog since neither actually run process instead produce single atomic operation case task determined first type parameter given process run produce final output good reason convoluted dance get complex aspect framework good news practice really nt spend lot time running process would run process completion compose another process practice program one instance runlogrun conventionally runrun discard individual result right end program one spot code outside test course say prunrun process p probably something wrong look builtin combinator allows compose process effectively composition infinity coming back process composition also ability merge stream together using standard combinators like zip example val name process one two three val nums process name zip nums process one two three recall earlier process represents possibly infinite stream data exploit functionality scalastream otherwise different process slightly cooler way val name process one two three def nums n int process nothing int process n nums n name zip nums process one two three obviously far le concise first version feel awesome important point getting comfortable working infinite stream data alluded earlier infinite stream request example infinite stream enormously convenient tool conceptual level model entire program composition stream program sort server meant run killed must sort infinite stream stream plural inside program rule exception scalazstream used course given scalazstream allows representation infinite stream familiar collection operation nt make sense def nums n int process nothing int process n nums n nums length nt compile ca nt ask length process possible implement length function tried use infinite process would hang forever note also nt possible index process example ask fourth element scalazstream stream interesting really one particular piece data within stream find hunting around tool treat process vector even list probably adjust way using library get much embracing stream paradigm finding ton useful yet simple transformation process collectionlike singleprocess transformation like collect implemented powerful abstraction called implicitly added process type find builtin singleprocess transformation object similarly nearly twoprocess transformation like zip implemented powerful abstraction called tee similarly implicitly exposed find builtin twoprocess transformation scalazstreamtee object sure whether particular function exists process go hunting module perhaps find looking performing action insisting along process represents possibly infinite sequence stuff stuff could data could effect effect talking outside world way receiving data outside world otherwise useful thing effect encapsulated inside functor process evaluating ton terminology short way looking effect managed first two type parameter process example process nothing int contain effect process task int probably talk outside world complicated way perhaps involves concurrency process burrito int contains effect apparently contains effect related consumption chipotle function convenience time going dealing process type form process task fill data type task general effect possible also effect allows concurrent composition stream said tremendously useful able restricted effect like burrito effect stream perform eat delicious meal stream becomes much easier test nt worry mocking database stubbing network client stream trying test possibly talk database network task effect talk database network burrito effect secret magic protip terrifyingly easy testing back program need level talk database read network channel launch missile task come example pair action read write stdout respectively def put ln string task unit task println ln val get task string task consolereadline reading someone else code might also see action constructed using taskdelay nt worry much difference taskdelay taskapply using using scalazstream difference two constructor mostly meaningless may well use shorter one put action stream simply turn val p process eval put hello world process p process task unit nt really produce useful value though perform action say run println interpret p calling prunrun would get classic result printed console process contain effect composed using exact tool using play around process contain effect power scalazstream example could write echo terminal following way val line process repeateval get val p line flatmap line process eval put line nt seen repeateval yet much like eval except keep evalling forever line process task string represents every line user ever enter via stdin flatmap infinite stream line one eval put action line actually pattern effectful destination data common scalazstream us higherorder design provide firstclass manifestation form sink sink task simply equivalent process task task unit say stream function function performs action simple idea powerful enough represent everything would want terminal point data processing val line process repeateval get val stdout process constant put tosource val p line stdout snippet exactly thing previous example flatmap difference lifting put sink stdout type sink task string using combinator connect line sink end effect substantially concise incidentally constant tosource bit nt magic way specific sink fact saw tosource constant constructor creates process nothing given value type case put process infinite stream one value case precisely want stdout sink way print stdout nt vary time however sink example network load balancer abstracting several destination might want different write function stream go along since sink process clearly enough power support kind thing nt need tosource bit faerie dust convert process nothing task unit process task task unit pretending effect type task remember value put effect value may produce effect type task unit effect lift infinite stream using constant rather repeateval combinator similar wrote earlier flatmap fact almost precisely thing repeatedly take value left source function right sink applies function value evaling result stream thus p type process task unit infinite stream effect produce result course nt useful value clearly interested effect reason run p probably going use runlog would give u task seq unit instead use run produce task unit effectively discarding data produced process keeping effect run hit ctrlc reading line one time user immediately echoing back callback common situation asynchronous code run api structured around callback listener system example using java nio library accept connection server channel passing channel listener invoked connection established example something like simplified pseudocode val channel channelaccept new connectionlistener def ready connection connection unit read data connection def failed throwable maybe log scalazstream nt provide clean way interacting sort apis would nt useful framework writing practical asynchronous application magic address situation wrapped taskasync constructor thus far task action constructed using taskapply take block code run future time probably different thread taskasync little different constructor take function turn receives callback callback invoked task completed rather waiting definite block code run completion creates task wait listener notified modify example produce task connection using taskasync val accept task connection task async cb channelaccept new connectionlistener def ready connection connection cb right connection def failed throwable cb left accept effect asynchronously without blocking accepts incoming connection channel connection received used complete task invoking cb right connection right come scalaz either type similar scalaeither hit error complete task error invoking cb left simple even work stream asynchronous effect easily work stream synchronous effect val server process task connection process repeateval accept server stream every connection channel ever receive connection received asynchronously without blocking thread sacrificing throughput nice abstraction starting see scalazstream bring real tangible value real world application modeling server infinite stream connection make simple write function work connection filter undesired one nt worry crazy asynchronous loop thread forking madness everything work simple concise resource safety one useful feature scalazstream surrounding effect ability guarantee resource safety even face interrupt shutdown error like would nt practically useful provide mechanism opening network channel without also providing way guaranteeing channel inevitably closed feature satisfied oncomplete oncomplete bit weird beast combinator process take another process parameter parameter right hand side guaranteed run exactly left hand side completes completes mean run completion hit error even interrupted concurrent process bit like finally tryfinally block trick though oncomplete parameter run left hand side never run first place thus construct finalizers using oncomplete seem like always going hit fact sometimes run scalazstream project future plan alleviate confusion try careful attach oncomplete top level process composition ie process within right side inside flatmap grabbing resource releasing finalizer straightforward though ca nt safely eval instead going use slightly lowerlevel await val p process task array byte processawait connect channel val read process repeateval task async channelaccept read oncomplete process eval task channelclose new thing first await constructor process performs effect case connect pass result effect body function given function us result effect compute new process case read get returned body value produced process within body await value produced process returned await namely p example thus await way computing stream based result single effect eval constructor simply defined term await def eval f effect f process f await effect process speaking eval example earlier contains bit read process eval nt typo eval constructor come two flavor without underscore difference eval produce value computed effect eval performs effect like eval throw away value really useful finalizer since want clean resource effect nt care producing value really interesting bit though oncomplete magic happens finalization connect effect completes produce channel finalizer right side oncomplete guaranteed run exactly invariant library preserve regardless error interrupt get channel also get chance dispose oncomplete building complex application scalazstream necessitates lot resource allocation deallocation oncomplete combinator tool tame mess allows keep resource management local guaranteed never worry resource leaking weird concurrent exception interrupt thing caused another process way side town produce stream data require resource management compute use stream safely without worry detail resource acquired might might released naturally provides excellent foundation file readwrite api convenience scalazstream provide several function within scalazstreamio module satisfy use case example following process read line footxt file computes length line writes length foolengthstxt val p process task unit io linesr footxt map length io linesw foolengthstxt resource safe incremental word reading entire footxt file memory computing length writing whole thing fact footxt could arbitrarily large program would naturally take longer complete would nt use memory try writing hand another example would replicating unix cat utility using scalazstream def cat file string unit def put ln string task unit task println ln val stdout process constant put tosource io linesr file stdout runrun sideeffect pun intended scalazstream probably easiest way read write file scala equivalent code using scalaiosource dramatically verbose easier get wrong addition resource unsafe use combinators others like time really simple scriptish thing need mash data file andor slurp back merging concurrency outside really straightforward trick file read like basically useful application multiple source data multiple sink need populate depending data program state scalazstream would truly useless library nt provide way bringing data multiple source aggregating transforming feeding back various sink reading new source fortunately scalazstream go well beyond minimum feature checkbox combinators merging stream powerful simple form backbone concurrency support last bit worth dwelling moment discussed process possibly infinite sequence stuff key word sequence process containing value b c order evaluated must finish computing go back start computing b turn must finish start computing c process pipeline operation sequence note significant difference akka flow work nice make easy reason effect performed oneaftertheother furthermore make easy enforce strong ordering effect one needed put order process problem strongly sequential paradigm concurrency must somehow achieved way merge combinators become significant two strongly sequential stream neither one concurrency computation however merge together single strongly sequential stream exact interleaving two stream nondeterministic say two stream process b c process x z could merged single stream process b x c z perhaps process x b c z process x z b c others never see b see output stream see z see x exact interleaving two stream value allowed float concurrency come since defining merge operation interleave two stream without constraining mutual ordering scalazstream free run merge parallel fact surface run stream simultaneously using function called stepasync function technically part public api lowlevel unsafe recommended use merge operation allow either side race ahead side constrained scheduling fairness ie wo nt allow one side hog thread sense think merge operation run process fast go producing result available order arrive think precisely semantic want concurrency multicore throughput optimization also combining multiple data source one example let imagine writing sort social medium analytics application grabbing data various social medium platform searching company name performing sort sentiment analysis content reporting result data store well realtime output feed actually relatively common thing company actually way representative scalazstream used write highly concurrent application def computesentiment text string double tool val facebook process task post talk facebook somehow get data realtime val twitter process task tweet twitter streaming api ftw val fbtext facebook map text val twtext twitter map content merge two feed process together val sentiment fbtext merge twtext filter contains evil corp map computesentiment val datastore sink task double val streaming sink task json sentiment observe datastore map json score streaming nt blink miss merge combinator magic function exactly way described taking data stream fast produce merging single output stream presumably facebook twitter stream involve sort network connection external api formulation using merge neither stream wait one twitter giving u data faster facebook run twitter stream faster pushing result merged output process arrive like many combinators scalazstream eg zip filter merge actually implemented general abstraction called wye similar tee except nondeterministic lot extremely useful combinators implemented via wye scalazstreamwye module addition wyemerge two others use daily basis wyemergehaltboth similar wyemerge except resulting stream end soon either input stream end wyeinterrupt allows remotely kill stream useful testing quick sidebar observe combinator also new work almost exactly like except nt consume value stream really nice allows wire multiple sink stream one seeing value also allows easily debug process since pretty trivial inject sink print value stdout flow stream without disrupting stream example val stuff process task value without debugging stuff flatmap dothingswithstuff filter throwstuffaway debugging using stdout sink earlier stuff observe stdout flatmap dothingswithstuff filter throwstuffaway noninvasive easy write logging sink time drop using observe anyway coming back analytics example one thing may notice merging twitter facebook stream perform sentiment analysis make lot sense code structure standpoint since processed twitter facebook stream producing text handle uniform way however even though merge combinator racing two input stream output merge strongly ordered merge combinator nt somehow produce stream magically run parallel set obvious point optimize run computesentiment parallel implicit observation nt really care order people tweet post evil corp care posted sentiment conveyed presumably analytics performing social medium footprint going agnostic whether reordered one person tweet relative another person unrelated facebook post happened almost time thus since nt really care order output least within sort reasonably small time window inform scalazstream ok relax sequentiality bit gaining concurrency throughput result clear trying get concurrency within single stream talking running two stream simultaneously talking running multiple transformation element single stream concurrently directly conflict scalazstream promise process sequence achieve apparently desirable result answer another combinator mergemergen combinator kind golden hammer scalazstream concurrency support powerful hammer indeed following simplified type signature def mergen p process task process task process task bit like flattening seq take stream stream run inner stream concurrently producing output single flattened stream fast becomes available course real risk outer stream stream contains stream might run fast giving u new work ready ultimately running u memory order avoid case real mergen take tuning parameter maxopen used reign concurrency required use mergen solve asynchronous computesentiment problem nt really stream stream regular old stream answer need bit juggling call computesentiment order effectively inform scalazstream trying run thing parallel val aboutus process task string fbtext merge twtext filter contains evil corp val p process task process task double aboutus map text task computesentiment text map process eval val sentiment process task double mergemergen p obviously lot bulkier sort make sense since something specialized computesentiment remember core tenant scalazstream must explicit whenever want nondeterministic behavior going jump cliff based guess might want one thing another need tell want uncertain term unpack lifting computesentiment text task might seem bit weird since course task usually represents effect like talking filesystem launching missile rival corp however think concurrency sort like effect like talking filesystem want clear really want asynchronous otherwise might accidentally read write file wrong order test suite might need sort crazy timeout order properly check thing running thing parallel effect need controlled reason effect scalazstream make explicit lifting computesentiment text task eval task process contains one sentiment analysis outer process represents filtered twitter facebook stream merged bunch inner stream perform sentiment analysis feed mergen scalazstreammerge module result single stream sentiment contains sentiment analysis stream strongly ordered sequential going magically change ordering u came mergen order almost certainly nt line aboutus stream sentiment analysis certain text fragment might take bit longer fragment quicker fragment going win race produce sentiment analysis faster course within bound fairness scheduling something mergen take great pain get right get idea want relax sequentiality process run thing parallel using mergen work bit order convince scalazstream really sure absolutely get done one interesting thing pattern applies uniformly lot natural use case parallel processing within single stream example obvious way model server would stream stream inner stream represent data coming particular client outer stream connection different client common pattern sort serverside programming use mergen collapse stream together handling connection parallel mergen within maxopen bound val server process task process task bytevector mergemergen server io filechunkw firehosebin bytevector type something might see fair bit floating around scalazstream think like functional fast array byte want read look scodecbits project need explicitly fork thread handle client connection would need traditional server implementation describe scalazstream semantically want say handling client connection parallel go u composable combinators make sort thing easy predictable coordination flipping let think following realworld sort use case get called outside world perhaps server socket ui def receivedata data string unit going get called lot ideally want process stream data scalazstream get data receive process bit tricky question since process nt provide mutable insert function append two process together using operation return new process without modifying old one inject data stream answer surprisingly straightforward classical use queue every time receivedata get called take value dump queue somewhere else process source data queue allowing u process firehose data receive using clean compositional framework pretty natural solution problem something seem familiar anyone done serverside development given already understand safely create process mutable source task ftw nt difficult implement val q new arrayblockingqueue string never ever unbounded queue def receivedata data string unit qoffer data val received process task string process repeateval task qtake far good however notice one really ugly thing middle qtake blocking operation course suspend thread eating cpu resource eating member finite thread pool sort thing enough process simultaneously major thread starvation problem course could use qpoll maybe employ sort timeout taking threadsleep turning busywait neither particularly appealing solution answer problem found inside scalazstream turn use case common scalazstream custom queue implementation one nt ever block work magic taskasync nt really need care high level usage standpoint scalazstream queue look exactly regular queue except never ever block thread waiting data throughput extremely good even dozen hundred queue floating around application val q asyncboundedqueue string still bad idea unbounded queue def receivedata data string unit qenqueueone data run enqueueone return task need run val received process task string qdequeue simple enqueue data using either enqueueone take single value return task unit using enqueue sink sink task string example anyway using enqueue sink make lot sense trying take one process dump data queue later processing using enqueueone make sense usecases like trying interface sort external notifier calling qdequeue give u process read value sequentially queue nothing magical resulting stream still process fact look much like repeateval process implemented first attempt top arrayblockingqueue real difference qdequeue process never going block queue empty instead running thread harmed stopping process soon new data available queue received immediately spring back life handle data arrives perfect sort us real world scalazstream application asyncboundedqueue one commonly applied tool unfortunately cool asyncboundedqueue nt solve every problem weakness asyncboundedqueue becomes apparent ever try use one qdequeue stream time traditional queue dequeuing multiple thread simultaneously give thread data may seem bit obvious said way abstraction scalazstream make appear bit unintuitive val q asyncboundedqueue int mentioned important specify bound val left qdequeue val right qdequeue process qenqueue runrun put bunch data queue val left map left merge right map right take runlogrun uh could anything result end going nondeterministic ran time got following result vector left right right left left vector left right right left left vector right left right left left vector left right right left left get picture point never see value received left right getting different data fact getting different data guaranteed get different data one process dequeues value atomic operation process allowed get data important property queue bit surprising case sometimes really really need queue multiple subscriber receiving data example writing group chat application chat server need something inside feed incoming message back client equally one randomlyselected client scalazstream nt blind usecase provides special construct called topic fit bill use build simple group chat server mentioned val connection process task process task exchange bytevector bytevector netty server new inetsocketaddress localhost map case client client val room asynctopic bytevector room shared multiqueue message raw byte val server process task unit mergemergen connection map client client flatmap ex val incoming exread roompublish val outgoing roomsubscribe exwrite incoming merge outgoing new thing really straightforward built seen weirdest one whole netty server thing nt something built scalazstream built top scalazstream available scalaznetty project basically scalazstream wrapper around netty nio framework simple api already seen bytevector nt yet seen exchange something built scalazstream really pair source sink read side exchange process task bytevector write side sink task bytevector directly represents bidirectional nature socket connection semantically want able read data client put chat room simultaneously listening new data chat room writing back client topic come create chat room towards top using asynctopic bytevector topic simply multiqueue defining property subscribe topic many time want subscriber get data note data backlog saved new client see old message irc hipchat subscribe topic dump content directly write side client exchange simultaneously taking read side client dumping publish topic really enqueue sink want read write client simultaneously merge side operation finally want able handle multiple client connection simultaneously run mergen whole server produce final result simple declarative resourcesafe backpressure backpressure one thing people nt really think first time work distributed application multiple service threading data one place another problem scale nt occur simple test bed nonetheless enormously important question answer anyone done distributed service scale backpressure usually first worry deservedly good news scalazstream design support backpressure extremely elegant seamless wikipedia article backpressure uncharacteristically uninformative especially given importance modern system architecture simply put backpressure come accepting fact server finite resource write server handle thousand connection per second open faucet bit crank million ten million hundred million per second server going start falter world massive scale data distribution need think seriously mean receive request fast u keep also essential property ddos attack talking something matter security much matter availability performance backpressure notion server failing keep somehow signal back client unable keep load need ease bit correctly designed system client would slow signal throughput reduction back data source word rather single point system become overloaded backed entire system slows gracefully handle maximum handle without attempting bite chew imagine turn somewhat hard problem solve distributed system architecture need careful way design service also client service since backpressure absolutely good client ignore server desperate plea slow see also ddos attack firstclass support backpressure increasingly important feature framework deal stream data scalazstream exception good news scalazstream designed ground naturally support backpressure without configuration tweaking user fact one example thus far natively supported graceful backpressure without explicit configuration part magic exists scalazstream pullbased evaluation model use one scalazstream interpreter eg runlog run run stream sequentially interpreter work following way inputhasnext request next thing data effect input evaluate effect associated thing repeat straightforward intuitive fact probably way would write process interpreter given information library work however something profound buried pseudocode request next thing done processing current thing give process stronglysequential nature also defines native support backpressure server written using scalazstream struggling keep data flow forced upon u service naturally going take longer handle thing interpreter take longer evaluate thing take longer request next thing everything chain slows remember scalazstream fully lazy framework magic lookahead computes thing nt asked yet thus slow request slow input slows backpressure propagates course thing become bit complicated concurrency external push data source deal already seen thing work though example mergen sort disrupts pull model bit since running whole bunch process without waiting u request next thing ok though inside mergen bounded queue data waiting pulled output stream something similar inside merge soon bounded queue fill mergen stop longer run constituent process thus mergen given stream constituent process run fast u internal queue fill prevent mergen running away memory turn slows constituent process since mergen one pulling turn slows upstream data source logic applies external interface point using asyncboundedqueue precisely important always always supply finite bound create asyncboundedqueue never ever create unbounded queue unbounded queue basically black hole fill fill fill ultimately eat server memory event data coming faster handle always bound queue nt afraid give small bound generally go single digit bound inappropriate unbounded queue appropriate server unbounded memory server unbounded memory exist infinite universe universe live bound queue always bound queue hinted earlier one example article support backpressure box without configuration u true one example nt support backpressure chat server contrary expectation lack backpressure nt coming fact using netty nio fact nio support backpressure extremely gracefully thanks way tcp designed lack backpressure actually come fact using topic problem topic multiqueue many subscriber publisher becomes really tricky question backpressure semantics even make sense one subscriber running slowly want slow subscriber publisher slow fairness thing really tricky question hard get right present topic punting whole mess basically ignoring backpressure inside topic completely unbounded queue queue fill service start slowing careful open issue address design flaw present fixed good news going use queue heck lot use topic queue support backpressure exactly way want long nt give infinite bound learning plenty learn scalazstream best way learn jump foot experience ask question twitter gitter room file issue find bug behavior think wrong maybe wrong scalazstream active development lot idea vetted toyed thing changing evolving speak within month even article outdated absolute best way achieve guru status scalazstream dive source code start patching thing plenty work plenty easy point entry code base outside three complex function wyeapply nondeterminismnjoin stepasync scalazstream codebase remarkably straightforward surprise nt afraid poke around thing see happens incidentally reading github gist warned comment system gist connected sort notification comment gist probably wo nt ever see twitter much effective place ask question
269,Lobsters,scala,Scala programming,"Scala: Where it came from, Where it's going",http://www.slideshare.net/Odersky/scala-days-san-francisco-45917092,scala came going,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
270,Lobsters,scala,Scala programming,Verified TimSort Sketch,http://m50d.github.io/2015/03/01/verified-timsort-sketch.html,verified timsort sketch,comment powered disqus comment powered,verified timsort sketch commentors lobster story http lobsterssbloktoanhaskellimplementationoftimsortexhibitsthesamebugaspythonandjavaimplementations interested implementation timsort verified language type level would look like scala programmer volunteered provide one full proof like published paper http wwwenvisageprojecteutimsortspecificationandverification rather sketch critical example might look like scala recall loop invariant given key private invariant forall int runlen runlen concise notation scala nt opted go way produce explicit invariantwitness type trait loopinvariant runlen int n stacksize n runlen runlen n runlen runlen runlen n runlen runlen n runlen n n else n runlen n runlen n break invariant established mergeat n ifelse branch another piece poor fit scala know branch taken type level move branch implicit instance new trait trait loopstep runlen please enable javascript view comment powered disqus comment powered disqus
271,Lobsters,scala,Scala programming,16 Months of Functional Programming,http://www.vasinov.com/blog/16-months-of-functional-programming/,month functional programming,immutable state function option pattern matching oneliners comprehension type system laziness infinite data structure ahead immutable state immutability function firstclass citizen option pattern matching oneliners comprehension type system type variance laziness infinite data structure ahead,like share experience functional programming article feel like learned past month computer science computer system general past year thanks foray scala world functional programming reason functional programming force learn much challenge every assumption writing software oftentimes believe common thing done different way functional programming concept introduces better way blow away happened month ago quit startup looking interesting project work happened get consulting gig later turned fulltime obsession functional programming mqtt broker distributed system one thing impacted working exposure scala felt like whatever idea writing program relearn everything scratch article want cover functional programming concept made impression goal spark interest engineer already quite experienced language like java ruby python worry understand scala code use article sole purpose demonstrate functional programming concept broad stroke also keep mind scala purely functional language mean thing might seem awkward mixed oop abstraction try point whenever come immutable state function option pattern matching oneliners comprehension type system laziness infinite data structure ahead immutable state initial experience scala somewhat typical started work pretty big project assumption scala like java cool feature rubylike capability oh boy wrong early code mutable state place could understand immutable list variable good modify value list modify map keep state loop order demonstrate benefit immutability show two version program one java one scala following java program filter list user active flag sort id pull last name sorted object list public class user private final int id private final string firstname private final string lastname private final boolean active going omit constructor getters setter brevity public static list string activebyid list user u list user user new arraylist user user u u ugetactive usersadd u collectionssort user new comparator user public int compare user user b return agetid bgetid list string finalusers new arraylist string user u user finalusersadd ugetlastname return finalusers list user inputusers new arraylist user inputusersadd new user nick smith false inputusersadd new user ken pratt true inputusersadd new user jack sparrow true list user activeusersbyid activebyid inputusers pretty typical prejava code collection mutated based set action also whole program somewhat verbose every part activebyid telling computer want data opposed describing data flow start finish program look like written functionally case class user id int firstname string lastname string active boolean def activebyid u seq user usfilter active sortby id map lastname val activeusersbyid activebyid seq user nick smith false user ken pratt true user jack sparrow true look lot cleaner imperative version largely state keep track activebyid accepts one argument pass chained function part language important note filter sortby map arbitrary well defined studied functional programming practitioner rubyist would immediately notice code similar would write ruby yes code might look similar underlying mechanism immutability different problem ruby enforce immutability every variable data structure potentially mutated make trustworthy scala vals readonly variable immutable collection actually well immutable immutability bring table practical standpoint end cleaner code smaller margin error always know collection readonly variable richer abstraction another huge benefit immutability write concurrent program without worrying thread stepping toe modifying variable collection function lot functional programming function exactly big surprise different kind function technique function composition used functional programming pure function one main pillar functional programming pure function function depends input parameter also must return specific result without mutating outside state sin x double string great example pure function depend input parameter always return expected result since rely outside world make pure function easily testable le bug prone obviously abstraction directly implemented pure function example think inputoutput operation logging db reading writing etc functional programming model abstraction allow u deal impure abstraction pure way result cleaner composable code function scala firstclass citizen mean class method declared called top used data type pas function function make function return function store variable data structure also work literal form without naming example val ints seq intsfilter n n n n full form n n function literal without name check whether number even pas around another function argument use return value function nested inside function useful feature implementing recursive call subroutine want put higher level scope def tolist list annotationtailrec def go stream l list list match case empty l case con h go h l go list reverse example want go scope tolist specific parent function could function level tolist function named go currying partial function application purely mathematical concept nicely applied functional language allows u store partially invoked function variable pas function trait resource case class user id int extends resource case class record case class formattedrecord def loadrecordsfor r resource since long list record def formatrecords f long list record since long list formattedrecord val userrecordsloader loadrecordsfor user long formatrecords userrecordsloader systemcurrenttimemillis example two generic function loadrecordsfor formatrecords partially apply loadrecordsfor user save userrecordsloader another part program call formatrecords userrecordsloader first parameter since latter match signature perfectly kind function composition come handy lot situation make code le rigid option pattern matching option data type abstraction represents optional value outset might seem like big deal everyday work extremely powerful mechanism represent null empty corrupt object variable value option container either contain value certain type represented contain anything represented none applied around whole program powerful abstraction allows u eliminate countless edge case result null pointer exception type incompatibility whenever null value extracted consider following example case class project id string name string priority int description option string object projectsaccessor find id string option project val project projectsaccessorfind trying retrieve project record database know project specific id exists instead returning null throwing exception either going return project none defined option project return type find method container type allow u use another powerful tool called pattern matching pattern matching way process data based structure example wanted process result find method example extract name project something like projectsaccessorfind match case p pname case none basically matching result find see project exists exists return name otherwise return empty string first might look like switchcase structure java actually different pattern matching add custom logic pattern projectsaccessorfind match case p contains ppriority pname case p name default project pname case p none case none also match result directly based actual structure object def descriptionwrapper p project p match case project none description case project id project id description way writing complex logic lot compact straight forward compared statement bulky switchcases oneliners comprehension one greatest thing advanced function composition technique bring table function chaining instead manually reiterating data collection bunch loop one elegant expression oneliner example case class participant name string score int active boolean val p seq participant jack true participant tom true participant bob false psfilter score filter active map copy active false oneliner grabbed participant whose score lower still active changed active status selected participant false final output statement list participant jack false dozen situation similar oneliners save functional programmer time dramatically reduce amount code program oneliner becomes dense always break technique called comprehension example could rewritten equivalent statement loser p loserscore activeloser loser activeloseractive deactivatedloser activelosercopy active false yield deactivatedloser much verbose oneliner case logic get dense really help code readability yet keep benefit immutability function chaining type system coming world ruby programming strict typing scala felt like burden outset using javaist kept adding verbose type everywhere using generic function needle say right way functional language advanced type system property traditional programmer would never use type system allow flexible well composable program let go type inference ability programming language deduce type expression without explicit type annotation scala actually awesome type inference certain case sometimes hold hand give hint type use situation let look real example always need type annotation signature method def namestartswith n seq string n string seq string scala ca nt infer type generic collection ca nt say seqempty nsfoldleft seqempty string nt need anonymous function l r rstartswith n r l else l type inference work really well list declaration val name seq bob alice ann namestartswith name return list ann alice example demonstrates side type inference scala still explicitly define type case like pas function l r type annotated purely functional language like haskell hardly ever define type program compiler smart enough infer type bound another important concept functional programming basically mean support class hierarchy generic type declaration java use generic order define type runtime still keep code type safe example define generic list element use interface java public interface mylist want define list say map know implementation map would use upper bound type generic public interface mylist extends map use list fill hashtable linkedhashmap hashmap treemap word default descendant map interface custom child inheriting map list element well however type used type bound example using upper bound scala def converttoints anyval e seq f int seq int esmap f anyval parent class double float int many others function simply define want child anyval type safety top defining upper bound define lower bound like int would match int parent also combine type bound different generic function signature int one important property advanced type system type variance java class list list object list string unrelated invariant different story array covariant meaning string subtype object since array mutable end arraystoreexception runtime exception case scala array invariant default immutable collection container type covariant since immutable potential type error discovered compile time opposed runtime another possible option define container contravariant contravariance mean container parent type subtype container child type work reality case class invariantcontainer case class covariantcontainer case class contravariantcontainer class person class user extends person class admin extends user val invariantcontainer user invariantcontainer user work val invariantcontainer user invariantcontainer admin nt work val covariantcontainer user covariantcontainer user work val covariantcontainer user covariantcontainer admin work val contravariantcontainer user contravariantcontainer user work val contravariantcontainer user contravariantcontainer admin nt work val contravariantcontainer user contravariantcontainer person work covariance cotravariance widely used collection implementation function type trickery last advanced type feature want mention called view bound say need perform operation number represented string ie v would simple case like either convert string number hand complicated case write custom converter still explicitly invoke data conversion one type another weaklytyped language like ruby interpreter would dynamically convert string integer probably going surprised hear possible similar thing scala without loosing type safety get work scala function let use standard mathmin function define implicit converter type implicit def strtoint x string xtoint mathmin scala search implicit conversion string int finding strtoint based signature apply conversion string passed mathmin without explicitly invoking strtoint define implicit conversion compiler would throw exception wanted write magical function search implicit conversion simple define view bound tell compiler search implicit conversion implicit def strtoint x string xtoint def halfit int x x halfit result halfit expected int view bound either asks int something viewed int case string implicitly converted int laziness infinite data structure concept lazy evaluation directly exist nonfunctional language pretty easy grasp think typical ifstatement def expensiveoperation val foo val b foo b expensiveoperation true else false imperative language operator evaluates argument b expensiveoperation lazily meaning expensiveoperation get executed b true would get executed b return false lazy evaluation scala allows define similar behavior context define variable lazy meaning get executed accessed first time opposed normal variable get executed defined lazy variable executed value cached case class order name string price int case class user id int order seq order lazy val cheaporders seq order ordersfilter price lazy val expensiveorders seq order ordersfilter price example case class user abstraction contains list shopping order cheaporders expensiveorders get evaluated case class initialization like normal val would would get executed call directly use method problem expensive computation db call make calling method multiple time execute multiple time lazy variable get cached called make effective optimization case another example delayed execution byname function parameter normally function parameter get executed right passed however case want execute function parameter absolutely necessary think heavy computation trait person case class user extends person case class admin extends person def loadadminsorusers needadmins boolean loadadmins seq admin loadusers seq user seq person needadmins loadadmins else loadusers three byname parameter potentially expensive db operation want executed pas value would normally arrow symbol mean passing function opposed return value function call whenever need laziness byname parameter used implement one powerful construct functional programming infinite data structure imperative programming data structure predefined size work fine case sometimes know size data structure end delayed execution becomes possible define data structure general form without filling data actually sound great theory actually work let use infinite data structure called stream generating prime number java order generate prime would write function would generate prime number limit would call function generate list n prime number pas elsewhere need different list prime somewhere recalculate list scratch scala would like val prime stream int def generateprimes stream int stream int shead generateprimes stail filter shead generateprimes streamfrom syntax probably make much sense important right important data structure say want get first five prime number greater piece cake stream primesfilter take tolist chain function return list expected cool thing pas prime around function anywhere program without executed also chain action top like filter example pas expression around without generating actual result need allows u come composable abstraction mold program like playdoh ahead hopefully got interested functional programming reading article certainly exciting write fully recognize much learn master field humbling pleasant kind way goal start digging deeper intricacy functional programming typed lambda calculus type theory category theory also want learn haskell purely functional programming language surely teach thing two let know enjoyed article feedback thank reading join reddit discussion
273,Lobsters,scala,Scala programming,First C# 7 Design Notes,https://github.com/dotnet/roslyn/issues/98,first c design note,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
274,Lobsters,scala,Scala programming,"Early bird registration opens for LambdaConf 2015 (May 22 - 24, Boulder CO)",http://degoesconsulting.com/lambdaconf-2015,early bird registration open lambdaconf may boulder co,ranjit jhala jared roesch gershom bazerman john de go chris allen sharon steed sergii dymchenko richard eisenberg andrew cherry paige bailey chandu tennety alejandro serrano mena joe nash phil freeman alex gremm steven proctor adam foltzer cryptol mark farrell brian mckenna idris idrismode idrisvim andi mcclure deian stefan lio hail doug mcilroy marconi lanna paul phillips brendan mcadams alejandro serrano mena adelbert chang adam pingel daniel spiewak brian l troutwine gershom bazerman john de go richard feldman marconi lanna riccardo terrell joe nash rob norris justin campbell zeeshan lakhani colt frederickson chris allen nick heiner aysylu greenberg priyatam mudivarti david greenberg jon sterling andrew cherry emiliano firmino chandu tennety derek chenbecker andré van delft anatoliy kmetyuk wwwsubscriptlangorg mike stew oconnor harold carr vlad patryshev matt farmer joseph tel abrahamson joseph tel abrahamson ron toland rahul kavale jeanrémi desjardins kris nuttycombe pawel szulc alex burkhart,haskell liquidhaskell refinement type haskell ranjit jhala haskell many delightful feature perhaps beloved type system allows developer specify verify variety program property compile time however many property typically depend relationship program value impossible least cumbersome encode within haskell type system refinement type enable specification verification valuedependent property extending haskell type system logical predicate drawn efficiently decidable logic talk start high level description refinement type next present overview liquidhaskell refinement type checker haskell particular describe kind property checked ranging generic requirement like like totality head crash termination mergesort loop forever application specific concern like memory safety code segfault data structure correctness invariant various library like container hscolour bytestring text vectoralgorithms xmonad rust introduction rust got type system programming jared roesch workshop intended deep dive rust starting basic advanced type level programming rust new experimental programming language currently designed mozilla research language active community language inspired several variant ml haskell c well novel research idea performance safety programming language one key feature reification memory explicit part language semantics provides low level control memory allocation without sacrificing safety garbage collection goal workshop show use rust write high level code provides excellent safety performance haskell art program derivation parallel computation gershom bazerman program derivation practice beginning specification function series mechanical step deriving efficient implementation algebra programming approach pioneered richard bird oege de moor lambert merteens derive efficient functional program series algebraic manipulation much schoolchildren take typical algebraic function solve x simplify earlymid school research turned attention problem parallel computing developed many foundation called mapreduce workshop run famous nifty algorithm derivation parallel sequential alike attendee walk away weird trick level equational reasoning everyday programming context hopefully enough intuition dive deeply rich body literature purescript learn functional programming purescript john de go workshop designed programmer skill level want learn functional programming purescript ideal learning functional programming language simple clean semantics run platform compiles ubiquitous javascript workshop learn mean think functionally write functional code explore core concept purescript end written first functional program simple game able call rookie functional programmer else instructor promise buy coffee haskell modeling data haskell beginner chris allen pattern modeling data obvious widely covered haskell require application basic algebraic datatypes explore approach dual purpose introducing thinking term algebraic datatypes haskell audience expected know haskell conversation stuttering teach talking human sharon steed developer trained communicate thing goal mind talking something like say computer type code responds giving back want nine time ten work perfectly difficult thing talking client project updating superior progress pitching investor milliondollar idea talking people requires special set skill namely empathy little bit storytelling industry filled brilliant mind great idea mass disruption best brightest know tell compelling story takeaway workshop learning value listener use vulnerability improve social connection prolog introduction constraint logic programming sergii dymchenko constraint logic programming paradigm allows solving hard combinatorial problem minimal programming effort workshop learn basic prologbased constraint logic programming system eclipse solve several puzzle get hint constraint logic programming useful reallife project haskell practical introduction haskell gadts richard eisenberg burgeoning haskeller soon discovers proper use descriptive type help capture realworld idea catch error aid refactoring speed development indeed make programming fun haskeller drunk welltyped koolaid go answer even type generalized algebraic datatype gadt core allows compiler make different assumption type within different branch pattern match leveraging power allows programmer encode detailed invariant datatype algorithm invariant checked compile time clever use gadts also let remove certain us unsafecoerce long proved safe workshop handson interactive tutorial using haskell gadts practical setting f freya f http system andrew cherry freya stack library f designed let get close http functional typed way well providing useful set abstraction http also offer graph based approach modelling http response enabling creation wellbehaved http application simply correctly take tour stack exercise various part individually diving write complete http application see easy write application take full advantage http standard look way extending application past world rfcs world hypermedia graph session comfortable building application using freya almost certainly come great idea freya graph based approach logical design could extended even introduction clojure programming language longing paige bailey grab repl prettiest pair parenthesis beginnerfriendly workshop even never coded learn think clojure would want get opportunity handson experimentation zach oakes nightmod developer tool making livemoddable game clojure relatively new powerful dynamic lisp dialect compiles many target environment including jvm javascript clr important single principle behind clojure simplicity abstraction simple orthogonal mean compromise power la carte polymorphism careful support name namespaces reference succession model wide selection small composable protocol make clojure programming swift surgical accurate perfect game development ready brave programmer time get atomic clojurescript datadriven webapps clojurescript om chandu tennety om flavor facebook reactjs take advantage immutable data structure make virtual domdiffing algorithm much faster clojurescript environment work simple example get understanding state represented passed component order build fast functional uis haskell developing web application haskell alejandro serrano mena web development easy fun haskell course type safe let take birdseye tour creating web application haskell scratch initial project creation deployment cloud end workshop deployed small server notetaking workshop divided four slot dealing different facet web development first simple routing building html returned client adding database capability using persistent esqueleto next step taking input user via digestive functors finally deployment heroku considered along integrating middleware application elm adventure elm writing adventure game elm joe nash elm functional reactive language compiles html cs javascript haskelllike syntax thanks combination smart language design innovative webbased tool incredibly easy write interactive application elm workshop cover basic concept language syntax dive hotswapping editor timetravelling debugger build adventure game using functional reactive technqiues purescript purelyfunctional web apps using react purescript phil freeman react popularized idea user interface pure function application state approach perfectly suited language like purescript workshop learn use react purescript create clean wellfactored web application workshop assumes basic knowledge purescript related language haskell reason considered continuation earlier purescript workshop beginner haskell introduction haskell focus highperformance computing alex gremm workshop give introduction haskell programming language work basic concept functional programming specifically haskell implementing simple diffusion algorithm convergence check using naive implementation learn identify performance bottleneck overcome order achieve highperforming sequential code erlang introduction erlang steven proctor heard nothing else erlang probably heard something otp people chanting process thread process really cheap ohmmmm workshop get overview erlang syntax otp process management cheap erlang process really implement markov chain generator state possible transition represented process cryptol intro cryptol highassurance crypto engineering adam foltzer cryptol open source pure functional language expressing reasoning bitprecise computation particularly cryptographic algorithm like haskell built upon polymorphic static type system offer similar mathematical function sequence comprehension notation type system feature size polymorphism arithmetic type predicate designed express constraint naturally arise cryptographic specification advanced type system restricted domain cryptol enables theoremdriven development style correctness property expressed directly language tandem development specification specification evolves property continually fuzztested random quickcheckstyle testing even sent external sat smt solver mathematical proof correctness workshop give quick introduction cryptol language geared toward folk working knowledge typed functional programming together implement classical cryptosystem learn basic syntax semantics language program express check correctness property implementation using quickcheck smt finally demonstrate cryptol specification zuc stream cipher used lte communication show theoremdriven development approach reveals bug required revision cipher typed racket introduction typed racket mark farrell workshop give introduction typed racket give overview feature type system go example typing old untyped racket code provide accompanying typing exercise people try also discus current issue trusting typed racket eg sketchy example mixing typed untyped code finally discus need add type annotation significant number existing racket module try get people interested contributing typed racket prior experience using lisplike functional programming language schemeracket could asset understanding content workshop though none required idris write idris brian mckenna idris dependently typed programming language unlike dependently typed system idris designed specifically writing executable program workshop slowly walk writing program using dependent type motivate us around correctness expressivity workshop modeled similarly lambdaconf new example demonstrate idris capable prerequisite knowledge familiarity algebraic data type important idris repl installed optionally interactive editor configuration emacs idrismode vim idrisvim emily introducing emily simplifying functional programming andi mcclure emily experimental language project focusing simplifying basis programming language model language operation composition functionlike entity equivalent combinators state mean function object class variable scope interface generally interchangeable goal make fp language capability accessible entrylevel fpwary programmer mean simple concept configurable scriptinglanguagelike syntax haskell building secure system haskell deian stefan modern particular web userspecific often sensitive information unfortunately protecting user data notoriously difficult framework provide way declaring enforcing applicationspecific security policy response developer often specify enforce security policy adhoc fashion eg strewing security check throughout codebase even one manages get check right place application rely third party library may expose vulnerability case happen malicious recent headline alone serve highlight existing approach application plagued privacy leak talk first describe lio haskell library building secure system lio information flow control ifc provides apis specifying policy data allowed readwrite data enforces policy code leveraging haskell monad strong type system describe hail web framework built top lio make easy specify policy declarative way defining application data type hail application construction protect user privacy integrity haskell haskell nugget power series brought life doug mcilroy operation power series showcase elegance expressiveness overloading lazy evaluation simple oneliners sum product integral derivative functional composition functional inverse etc vividly embody underlying mathematics even improve upon banishing subscript series solution differential equation come practically free generating function actively generate scala new scala marconi lanna programming scala martin odersky et al one comprehensive de facto reference scala however book originally published scala updated since second edition covering scala meantime scala major release numerous fresh advanced feature wait third edition programming scala describe latest greatest scala feature introduced last year talk present main feature introduced scala well exciting peek beyond scala future none virtual filesystem change everything paul phillips talk paul phillips expands idea keynote deliver compelling vision properly conceived implemented virtual file system ability literally change every single thing interact computer scala skeptic look scalaz gateway drug practical exploration brendan mcadams seen corner local software development neighborhood fp purist shamelessly peddling scalaz unsuspecting developer lured promise free monoids semigroups endofunctors developer soon seem lost throe ecstatic coding skeptical stubbornly practical among u might ring little true especially read rod serling voice image gibbering horror lurking depth mathematical perfection swim eye true value world scalaz possible use tool good little bit evil fun use learning evil profit without getting hopelessly lost opium den fp talk look gateway drug scalaz validation nonemptylist monad transformer work practical standpoint value real world application use without advanced math phd fun really code tool haskell pattern functors wandering around fixpoints free monad generic alejandro serrano mena free monad generic programming fixpoints coproducts data type usually considered advanced topic haskell programmer talk look concept unifying lens combining enriching pattern functors pattern functor strippeddown description data type shape constructor remain recursive structure gone using haskell manipulate pattern functors create new data type various like functional programming adelbert chang shortly adelbert chang entered college computer science major contemplated changing major several time usually direction physic mathematics changed introduced functional programming mysterious beautiful talk adelbert elaborate early perspective computer science math physic discus ended enamored functional programming scala axle spirebased dsl adam pingel axle scalaembedded domainspecific language built spire talk cover architecture objective project live coding example show design pattern abstract algebra apply range domain including machine learning bioinformatics game theory statistic data visualization various selfish purity functional programming make everyday job easier daniel spiewak functional programming toooften viewed academic discipline fp imposes constraint seem aesthetic pedantic practical almost motivating example fp involve oneliners mapping list handwaving endomorphisms rather something earth talk take different approach functional programming make thing easier make easier write code test code design component abstraction make turnaround time faster bug rarer even improves application throughput talk explains possible precisely never work serious application without fp also touch briefly fp work nt work common industrial language like java javascript gain benefit expanding toolset bit erlang faulttolerance cheap making system probably wo nt fall brian l troutwine building computer system reliable hard functional programming community invested lot time energy upfrontcorrectness guarantee type like unfortunately absolutely correct software timeconsuming write expensive result faulttolerant system achieve systemtotal reliability accepting subcomponents fail planning failure firstclass concern system company embrace wave asaservice architecture failure subsystem become pressing concern using example heavy industry aeronautics telecom system talk explore design faulttolerance functional programming technique get u way none abstract method general gershom bazerman programming abstraction abstraction surely programming need keep reinventing even recognize see across many domain something abstract necessarily useless even though definitionally removed specific use even case often teach functional programming met response taught abstraction good certain realm mathematics category theory often elicit similar response talk investigation consider abstraction process applying next great functional programming language john de go john clue next great functional programming language like happy hop stage rant type class nominative typing data module pattern matching recursion well basically everything else associate functional programming john argue make radical progress cheaply building correct software need take one step backward two step forward embracing dependenttyping total function turingcomplete compiler host language automated proof search attend talk question assumption functional programming heckle either way welcome elm shipping production web app elm richard feldman happens take coffeescript web app designed edit novel scratchrewrite elm turn result faster robust massively easier maintain elm simple design mean even functional programming novice quickly get speed static type inference pervasive immutability firstclass frp system excellent language also great introductory fp language javascript developer pick talk dive nut bolt shipping production web app elm including question like choose elm transition imperative architecture frp extent leverage javascript library ecosystem without sacrificing functional invariant come see pleasant functional programming browser scala idiomatic scala option match marconi lanna scaladoc page option say idiomatic way use scalaoption instance treat collection monad use map flatmap filter foreach lessidiomatic way use scalaoption value via pattern matching talk show use option monad idiomatic functional style leveraging comprehensive set higherorder function solve coding situation concise declarative manner talk never pattern match option f building concurrent faulttolerant scalable application f using akkanet riccardo terrell writing correct concurrent faulttolerant scalable application simple task struggle generally result using wrong tool wrong level abstraction actor based concurrency model aim simplify process actor model mathematical model concurrent computation originated carl hewitt peter bishop richard steiger actor programming one widely applicable programming model provides support concurrency improving distribution error detection fault tolerance good fit kind programming problem find faced today increasingly distributed world actor raise abstraction level provide better platform build correct concurrent scalable application presentation introduce concept architecture immutability isolation asynchronous processing utilizing tool akkanet net port popular jvm framework akka goal provide solid knowledge foundation actor model following presentation attendee take enough material start use leverage actor model write successful concurrent application haskell accelerating haskell gpgpu programming haskell joe nash many machine device come equipped powerful graphical processing unit gpus unit hundred processing core exploited accelerate application offloading applicable code gpu instead cpu talk cover basic concept general purpose programming gpus show exploited functional programming language haskell via accelerate library scala program value pure composable database access scala rob norris fp often glibly described programming function equivalently say fp programming value function value failure value effect value indeed program treated value talk explores consequence idea programsasvalues looking doobie purefunctional database library scala examine lowlevel implementation via free monad algebra jdbc type show naturally enables expressive safe highlevel api familiar lightweight composable abstraction including streaming result set trivial compatibility pure library like remotely even market database layer talk provide practical outline general solution dealing terrible apis like jdbc principled way various make hello world justin campbell many language strength weakness different community surrounding evaluate new language technology pragmatic introducing thing production let talk language exploration discus learn new language consideration introducing thing production come idea ruby ecosystem plan dipping toe elixir go haskell ruby rust scala session lispflavored erlang meaning lfe zeeshan lakhani enjoy lispbased language built sexpressions homoiconicity like writing syntactic abstraction pattern matching could use lisp write faulttolerant highlyavailable distributed datastore welcome wonderful world lfe lispflavored erlang cover basic lfe toolchain macro system intermediate representation step core erlang ending beam erlang virtual machine scala scalaz level scalaz foo colt frederickson scalaz massive library full many critical fp abstraction bit dense dipped scalaz couple thing either validation sure else use talk haskell learn haskell le year chris allen haskell known hard result pedagogy catching different way thinking structuring program make teaching others something effective enjoyable right imagination make programming language nick heiner used typing code editor seeing computer something run familiar easy take granted go sequence character something machine execute knowing help program effectively empower create programming language give overview pipeline text editor machine behavior dive look specific tool help u create programming language also discus different language design decision static versus dynamic typing see implemented behind scene end ready bring new language world clojure loom functional graph clojure aysylu greenberg graph ubiquitous data structure algorithm analyzing fascinating loom opensource clojure library provides many graph algorithm visualization discus graph represented functional world bridge gap procedural description algorithm functional implementation learn way loom integrates graph representation clojureclojurescript fullstack fp datomic clojure clojurescript priyatam mudivarti happens prototype app entirely fp choosing functional database building http apis designing template possible day stay entirely fp land talk share experience building functional prototype clojure clojurescript using following library datomic ring om garden discus trade popular database web toolkits template engine even le sas favor simpler library embrace immutable data sequence value none dynamic v static discussion without sounding like lunatic david greenberg type remain highly contentious issue programmer industry rail python massive community drive highprofile hightraffic successful business github reddit dropbox clearly dynamic language better choice java c unless course count myriad business powered statically typed language eg java statement infuriate engineer academic know hindleymilner type system type system reduce defect improve code quality talk take look type system different lens type system actually business decision frequently cast emotional decision none type theory meaning explanation jon sterling heart intuitionistic type theory lie intuitive semantics called meaning explanation crucially meaning explanation taken definitive type theory core notion longer proof verification explore type theory sort arise naturally enrichment logical theory judgement contrast modern prooftheoretic type theory interpret judgement proof logic proposition verification expect following question answered difference judgement proposition meaning explanation difference proof verification socalled semantical approach type theory speaker view immediately philosophically acceptable modern syntactic one also provides basis future partiality effect may treated naturally refinement behavioral typing rather mean termlevel monad similar kludge none http functional programming andrew cherry http fascinating standard one use every day many different way reasoning http mean look approach taken model http layer particularly functional programming graph proof type system fair game ooerlang ooerlang programmerfriendly approach oop erlang emiliano firmino objectoriented programming oop dominates industry developer experience oo new functional programming help bring functional programming developed ooerlang extension erlang fully support oo simpler syntax previous approach talk present implemented ooerlang start using clojurescript bird eye view clojurescript chandu tennety bird travel thousand mile year migrate flying hour little food rest comparison migrating database seems like paltry feat birdwave way visualize amazing phenomenon bird migration using clojurescript om allowed app written declarative concise manner taking full advantage javascript interoperability well clojure awesome builtin feature persistent data structure async module also prepare dazzled dataviz powerhouse bird harmed creation birdwave talk scala scalazstreams functional approach compositional streaming io derek chenbecker serious announcer voice world gone mad data one library stand alone fight sloppy unsafe processing serious announcer voice scalazstream library brings type safety flexibile composition powerful abstraction world streaming data processing talk start basic building block move advanced technique covering good bad ugly along way scala reactive programming algebra andré van delft anatoliy kmetyuk r reactive programming growing delivered many language construct library tool scala programmer use thread timer actor future promise observables async construct others still seems u state art mature reactive programming relatively hard confidence correct operation depends mainly extensive testing better support reasoning correctness would useful address timing dependent issue algebra communicating process acp potential improve let one concisely specify event handling concurrency facilitates reasoning parallel system acpbased extension scala named subscript show help describing internal behavior akka actor combine future information see wwwsubscriptlangorg scala cat fresh look functional programming scala mike stew oconnor cat library aim fill gap scala standard library think necessary pure functional programming scala way scalaz attempt fill role project intends create functional library intends create community welcoming opportunity start library like scratch give u many delicious opportunity rethink past decision allowing u innovate unexpected way haskell programming math harold carr design pattern useful way organize software unfortunately gangoffour like pattern composable due sideeffects pure ie sideeffects language function composed make possible leverage pattern mathematics talk show algebra function composition identity function isomorphism co product gluing function compose functors show algebra relates realworld programming goal talk provide initial intuition apply pattern math programming motivate continue studying perhaps looking uber pattern category theory note knowing pattern necessary getting work done functional language talk give glimpse may useful talk illustrates idea using haskell aimed fp beginner none introduction intuitionistic type theory vlad patryshev traditionally computer science set assumed basis type theory together boolean logic version type theory need set boolean logic intuitionism enough principle excluded middle required underlying math topos theory required even aware existence theory described using diagram traditional tricky deduction rule resulting theory turn dependent type simple reallife example two illustrate none case cuttingedge matt farmer story road le traveled talk going take look impact choosing le common technology like scala clojure organizational level elemica include thing worked well u thing nt work well myth two able dispell along way land process figuring worthwhile endeavor haskell give freedom forgeddaboutit free really mean joseph tel abrahamson haskell community often abuzz free monad stick around long enough also see notion free monoids free functors yonedacoyoneda free seminearrings etc clearly freedom larger concept free f f free f talk explores briefly origin freedom category theory explains mean free x thing x talk little bit useful free structure exist haskell haskell finally tagless dsl mtl joseph tel abrahamson finally tagless dsl dsl embedding technique pioneered oleg kiselyov jaques carrette chungchieh sense dual notion freemonad interpreter mtl popular monad library haskell happens unbeknownst finally tagless dsl talk explores finally tagless dsl style offer show use concept extend effecttyping vocabulary mtl clojure clojure v design pattern ron toland talk look design pattern oop translate clojure unnecessary embedded language others easier build scala simple collection distributed processing functional way rahul kavale presentation talking way functional programming idea affect fit distributed computing world introduction apache spark idea implemented quiet successfully talk implementing live coding distributed collection abstraction using basic principle functional programming start computation simple memory collection evolve fully distributed collection property like fault tolerance etc scala computation expression scala jeanrémi desjardins computation expression generalization donotation idiom bracket provide single notation us least powerful abstraction order translate sugared code desugared code flexible way possible present project working implement computation expression scala particular show notation help write asynchronous code little cognitive overhead various parametricity essence information hiding kris nuttycombe introductory talk designed help student new functional programming understand type parameter enable u easily reason behavior function create apis enforce invariant typelevel constraint cover principle universal existential quantification review example reasoning behavior function type discus implication compositionality api design example haskell discus principle generalize even code written unityped language scala monad asking right question pawel szulc entering world functional programming one quickly introduced concept monad concept reason really hard grasp comprehend querying internet monad likely learn need know category theory understand monad asking right question first thing came mind struggling dilemma well right question talk looking right question answering talk hope find knowing understanding concept able apply daily programming routine rust rust trust alex burkhart rust aim build solid foundation building safe software system faster ensure fewer mistake enter code base immutability default concept null proven memory safety rust state art compiler help developer catch error early possible without paying penalty runtime developer write high level code modern language without sacrificing expressiveness development time execution speed explore rust concept ownership key providing compiletime safety guarantee apply even face concurrency allowing easily write multithreaded program correctly first time rust released may start building better software today
275,Lobsters,scala,Scala programming,PayPal Scala Style Guidelines,https://github.com/paypal/scala-style-guide/blob/develop/README.md,paypal scala style guideline,paypal scala style guideline scalastyleconfigxml master whitespace line length name function class variable acronym package object class public method throwables import ordering location predef predef value modifier function public function scaladoc parameter list calling function anonymous function exception rule passing named function calling function logic flow match statement option comprehension akka ask tell test cascade scaladoc comment annotation scaladoc must must must must reading declaration indentation,paypal scala style guideline repository contains style guideline writing scala code paypal goal style guide repository style guideline clear agree style guideline change guideline learn scala evolves keep scalastyleconfigxml project line guide much possible repository follows gitflow new style guideline open pull request develop discus pr comment official guideline live master whitespace use two space indentation add newline end every file line length use maximum line length character name function class variable use camel case function class variable name class start upper case letter value function start lower case example class myclass val myvalue def myfunction int myvalue acronym use camel case acroynms example httputil consistency includes class name like ttl json well common term db io follow normal camelcasing rule val httpiojsontoxmlparser new httpiojsontoxmlparser package object package name lowercase underscore file name package object must match specific name package example compaypalmypackage package object file named mypackagescala file structured like package compaypal package object mypackage class public method limit number public method class throwables prefer noncase class defining exception error unless plan pattern matching exception providing cause desirable mandatory define option note use ornull class crazyexception msg string cause option throwable none extends exception msg causeornull class supercrazyerror msg string cause option throwable none extends error msg causeornull import ordering intellij code style configuration allows automatic grouping import namespace use following ordering add intellij configuration found preference code style scala java blank line scala blank line akka spray import blank line comebay compaypal also regularly run intellij optimize import edit optimize import code merging develop maintain import cleanliness location import file go top right package name time break rule import name object inside class example package mypackage import abcd import dcba class myclass import utils import myclasscompaniona object myclasscompanion case class object utils case class case class predef never import anything inside scala predef object automatically imported redundant manually import intellij often try import aware value use val default var limited local variable private class variable usage well documented including consideration developer must make respect concurrency one common usage var inside akka actor example usage class myactor extends actor local state actor represents current sum integer received must marked private never accessed outside processing single message ensure concurrency safe additionally nt acquire lock access variable might block message processing unnecessarily follow rule related concurrency nt need lock anyway private var sum int override def receive receive case int sum sum modifier optional variable modifier declared following order override access privateprotected final implicit lazy example private implicit lazy val somesetting function rule follow function always put space character function signature always put space function signature public function public function method including inside object must return type scaladoc including function overview information parameter information return value see scaladoc section detail complete example function inside object object myobject return static integer return number def myfunction int parameter list function parameter list fewer character put parameter line def add int b int int function long complex parameter list follow rule put first parameter line function name put rest parameter new line aligned first parameter function multiple parameter list align opening parenthesis previous one align parameter example def lotsofparams areallylongparameternameone int areallylongparameternametwo int areallylongparameternamethree int areallylongparameternamefour int implicit adder adder reader reader int function name character try shorten name ca nt start parameter list next line indent everything space def averylongmethodthatshouldhaveashorternameifpossible aparam int anotherparam int athirdparam int implicit iparam foo bar bar string case function return type still written directly following last closing parenthesis calling function calling function numerous argument place first parameter line function align remaining parameter first foobar someverylongfieldname andanotherverylongfieldname string function long name start parameter list second line indent space amuchlongermethodnamethatshouldprobablyberefactored aparam anotherparam athirdparam choice whether place closing parenthesis directly following last parameter new line dangling style alongmethodnamethatreturnsafuture aparam anotherparam athirdparam map re alongmethodnamethatreturnsafuture aparam anotherparam athirdparam map re anonymous function anonymous function start line preceding code declaration start note space argument listed line note use brace argument list start function body next line argument type necessary use make code clearer though complete example example option map number println number plus one number exception rule use parenthesis underscore anonymous function single binary operation single method invocation input two fewer unary method input example val list list list string listfilter length listfilter contains passing named function function take single argument argument underscore omitted example preferred option map println calling function prefer dot notation except specific scenario matcher akka pipeto example option someint map println preferred option someint map println rule exception java scala interoperation primitive scala java booleans example directly compatible require implicit conversion one another normally handled automagically scala compiler following code would reveal compiler error option true foreach somemethodthattakesajavaboolean named parameter necessary achieve underscore used resolve implicit conversion avoid confusion please also add note scala java conversion taking place option true foreach somemethodthattakesajavaboolean lol java logic flow general logic handle choice two outcome prefer use match match statement match type follow rule pattern matching exhaustive explicitly handle failuredefault case rather relying runtime matcherror specific match block case statement partial function case class used pattern matching extend common sealed trait compiler warning generated inexhaustive matching indent case statement level put one space right closing short single line expression line case long single line multiline expression line case indented one level case add extra newlines case statement filter case statement line make line excessively long complete example option match case int val intermediate doworkon domoreworkon intermediate case option flow option value constructed using match keyword follows def stuff int int option match case none case number stuff number fold operator generally used simple singleline pattern acceptable fold def stuff int int option fold stuff similarly simple pattern acceptable map getorelse def stuff int int option map stuff getorelse enforce expected type signature match guarantee consistent type match outcome eg none case could return int case could return string creating option use opt value constant use instead val dothisforconstants hello val notthisforconstants goodbye opt val dothisforeverythingelse foo opt val notthisforeverythingelse bar comprehension comprehension generally wrapped parenthesis order recover flatmap etc instead separate comprehension variable perform additional operation val useraddress address loadaddress yield address useraddressrecover recover loadaddress exception flatmap pull info address etc addition performing additional operation result yield part result comprehension code separated brace begin newline example address loadaddress return option yield address match case case none akka ask tell prefer tell ask msg msg preferred msg msg test write test using specification single class extends specification put specification file inside specification follow rule create single trait inside specification class extends commonimmutablespecificationcontext cascade people name trait context group test class case class object discretion grouped test class case class object go inside specification class extend context trait method inside test class wrapped apply commonimmutablespecificationcontext execute hook automatically test execute concurrently default change execute sequentially good reason document reason comment example rule code class mytest extends specification override def add equal add trait context extends commonimmutablespecificationcontext case class add extends context def apply add must beequalto scaladoc comment annotation class object trait method documented generally follow documentation guideline provided scala documentation style guide scaladoc rule class instantiated via method companion object must include scaladoc documentation code example abstract class documented example intended implementation implicit wrapper class must include scaladoc documentation code example public protected packageprivate method must include scaladoc documentation private method documented however left discretion developer level documentation method must include throw annotation throw exception normal operation use best judgment otherwise err toward documentation rather le reading several recommendation adapted scala documentation style guide including declaration indentation guideline presented document supersede style recommendation
276,Lobsters,scala,Scala programming,On Currying and Partial Function Application,http://www.vasinov.com/blog/on-currying-and-partial-function-application/,currying partial function application,currying partial function application use case conclusion currying partial function application use case block default parameter value type inference varargs conclusion,currying partial function application important concept functional programming however new functional programming often unclear differ former used latter article like go distinction two concept greater detail explanation web show real world example going use scala code snippet currying partial function application use case conclusion currying nutshell currying process decomposing function multiple argument chained sequence function one argument exactly mean consider following function calculates ycoordinate straight line function three argument want transform function chain function taking single parameter use currying function f b x represented composition three map take one argument g x function return another function expression right side pipearrow symbol equivalent scala mean argument x mapped another function think shorter way define function function h b map b another function finally function j map initial function f b x let create function calculates ycoordinate line go angle yay converted general function straight line curried function preset property reused later another last bit general definition curried function basically thing defined without implementation detail definition see function f take three argument x z return value n curried version function return another function map x another function z n map yet another function z n finally return value n pretty tedious explanation important understand essence currying simple example comparing partial function application curried function look code scala use multiple parameter list implement currying def line int b int x int int x b def curriedline int b int x int int line b x def defaultline x int int curriedline x defaultline return curriedline method currying work signature int int int int mean curriedline take integer parameter return another function take remind something exact definition curried function discovered moment ago x z n scala convert function curried function applying curried def line int b int x int int x b def curriedline line curried version curriedline equivalent previously defined curriedline int int int int signature partial function application partially applied function really similar currying first glance significant difference consider function straight line partial application function result another function two argument third argument fixed set advance partially applied function preset value thing general notation see major difference currying partial application partially applied function always return value original function opposed sequentially mapping argument nested function last one return value original function partially applied function look like scala def line int b int x int int x b def partialline b int x int line b x partialline return signature partialline int int int thing z n discovered shortcut creating partially applied function scala use underscore symbol def partialline line int int code generate exactly partially applied function use case use currying partial function application code following example going somewhat scalafocused rest article lot case directly applied functional language obvious benefit currying partial function application ability create specialized function based general function without introducing new code repeating one used basically want use partially applied function specialized function unless dealing block dynamic default parameter value smart type inference multiple varargs case better use currying go every single one show block currying used partially applied function last argument method function function enjoy syntactic superiority block common scala program example take look foldleft method traversableonce scala trait def foldleft b z b op b b b var result z foreach x result op result x result currying allows u use block syntax anywhere code consider following example computes square integer vector foldleft vector int without currying code would look like vector foldleft vector int obviously appealing clean curried version default parameter value another good use case currying referring parameter subsequent parameter default value example case class resource createdat long case class record def loadrecordsfor r resource since long rcreatedat list record val r resource systemcurrenttimemillis val r loadrecordsfor r want load record sort resource default interested record created resource created however case want load resource record created say past day situation provide optional parameter offset search range custom date loadrecordsfor r systemcurrenttimemillis problem solution still use extra set parenthesis even okay using default parameter value since want function call look even cleaner use implicits case class resource createdat long case class record def loadrecordsfor r resource implicit since long rcreatedat list record val r resource systemcurrenttimemillis val r loadrecordsfor r way thanks scala syntactic sugar function call remain clean yet ability set custom parameter way currying way use implicit parameter scala example compile def loadrecordsfor r resource implicit since long type inference currying really useful type inference consider following function def customop b op op b say want make function call like customop b b compiler throw error insufficient type information specify type hand customop int b b like customop int b int b curried version function allows compiler infer type def customop b op op b customop b b even shorter customop nice clean work curried function get executed two stage making compiler infer type twice set argument varargs last least reason use currying multiple varargs varargs injected parameter let say want create custom println method optionally capitalizes passed string since always want pas string first customize output use currying def printlncap s string implicit capitalize boolean false ssmap println capitalize scapitalize else printlncap foo bar output foo bar printlncap foo bar true output foo bar pretty neat huh multiple set varargs used currying def productofsums int b int int assum bssum productofsums return conclusion hopefully discovered new trick deepened understanding functional programming reading article fun write learned thing process let know correction always open feedback
277,Lobsters,scala,Scala programming,Remotely is a purely functional remoting library for reasonable people,http://oncue.github.io/remotely/,remotely purely functional remoting library reasonable people,verizongithubioremotely,redirecting verizongithubioremotely
278,Lobsters,scala,Scala programming,Reactive Streams v1.0.0.RC1 release,https://github.com/reactive-streams/reactive-streams/blob/v1.0.0.RC1/README.md,reactive stream release,reactive stream goal design scope reactive manifesto api technology compatibility kit tck api component note http specification publisher code subscriber code http subscription code code asynchronous v synchronous processing subscriber controlled queue bound legal,reactive stream purpose reactive stream provide standard asynchronous stream processing nonblocking backpressure latest preview release available maven central dependency groupid orgreactivestreams groupid artifactid reactivestreams artifactid version version dependency dependency groupid orgreactivestreams groupid artifactid reactivestreamstck artifactid version version scope test scope dependency goal design scope handling stream live data whose volume special care asynchronous system prominent issue resource consumption need carefully controlled fast data source overwhelm stream destination asynchrony needed order enable parallel use computing resource collaborating network host multiple cpu core within single machine main goal reactive stream govern exchange stream data across asynchronous boundary think passing element another thread threadpool ensuring receiving side forced buffer arbitrary amount data word backpressure integral part model order allow queue mediate thread bounded benefit asynchronous processing would negated communication backpressure synchronous see also reactive manifesto therefore care taken mandate fully nonblocking asynchronous behavior aspect reactive stream implementation intention specification allow creation many conforming implementation virtue abiding rule able interoperate smoothly preserving aforementioned benefit characteristic across whole processing graph stream application noted precise nature stream manipulation transformation splitting merging etc covered specification reactive stream concerned mediating stream data different processing element development care taken ensure basic way combining stream expressed summary reactive stream standard specification streamoriented library jvm process potentially unbounded number element sequence asynchronously passing element component mandatory nonblocking backpressure reactive stream specification consists following part api specifies type implement reactive stream achieve interoperability different implementation technology compatibility kit tck standard test suite conformance testing implementation implementation free implement additional feature covered specification long conform api requirement pas test tck api component api consists following component required provided reactive stream implementation publisher subscriber subscription processor publisher provider potentially unbounded number sequenced element publishing according demand received subscriber response call publishersubscribe subscriber possible invocation sequence method subscriber given following protocol onerror onsubscribe onnext onerror oncomplete note specification use binding word capital letter http term emit signal send interchangeable specification use signal term synchronously synchronous refer executing calling thread specification publisher code public interface publisher public void subscribe subscriber super id rule number onnext signaled publisher subscriber must exceed cumulative demand signaled via subscriber subscription publisher may signal le onnext requested terminate subscription calling oncomplete onerror onsubscribe onnext onerror oncomplete signaled subscriber must signaled sequentially concurrent notification publisher fails must signal onerror publisher terminates successfully finite stream must signal oncomplete publisher signal either onerror oncomplete subscriber subscriber subscription must considered cancelled terminal state signaled onerror oncomplete required signal occur subscription cancelled subscriber must eventually stop signaled invoking publishersubscribe must return normally legal way signal failure reject subscriber via onerror method publishersubscribe may called many time wanted must different subscriber time see publisher may support multisubscribe choose whether subscription unicast multicast publisher may reject call subscribe method unable unwilling serve rejecting must calling onerror subscriber passed publishersubscribe instead calling onsubscribe publisher must produce element starting oldest element still available sequence subscriber may produce stream element temporarily differing rate different subscriber stateful publisher overwhelmed bounded finite number underlying resource exhausted shutdown failed state subscriber code public interface subscriber public void onsubscribe subscription public void onnext public void onerror throwable public void oncomplete id rule subscriber must signal demand via subscriptionrequest long n receive onnext signal subscriber suspect processing signal negatively impact publisher responsivity recommended asynchronously dispatch signal subscriberoncomplete subscriberonerror throwable must call method subscription publisher subscriberoncomplete subscriberonerror throwable must consider subscription cancelled received signal subscriber must call subscriptioncancel given subscription onsubscribe signal already active subscription subscriber must call subscriptioncancel longer valid publisher without publisher signaled onerror oncomplete subscriber must ensure call subscription take place thread provide respective external synchronization subscriber must prepared receive one onnext signal called subscriptioncancel still requested element pending see subscriptioncancel guarantee perform underlying cleaning operation immediately subscriber must prepared receive oncomplete signal without preceding subscriptionrequest long n call subscriber must prepared receive onerror signal without preceding subscriptionrequest long n call subscriber must make sure call onxxx method happenbefore processing respective signal ie subscriber must take care properly publishing signal processing logic subscriberonsubscribe must called based object equality invoking onsubscribe onnext onerror oncomplete must return normally legal way subscriber signal failure cancelling subscription case rule violated associated subscription subscriber must considered cancelled invoker must raise error condition fashion adequate runtime environment see jmm definition happenbefore section http subscription code public interface subscription public void request long n public void cancel id rule subscriptionrequest subscriptioncancel must called outside subscriber context subscription represents unique relationship subscriber publisher see subscription must allow subscriber call subscriptionrequest synchronously within onnext onsubscribe subscriptionrequest must allow unbounded recursion subscriberonnext subscriptionrequest subscriberonnext subscriptionrequest synchronously perform heavy computation would impact caller responsivity subscriptioncancel must synchronously perform heavy computation must idempotent must threadsafe subscription cancelled additional subscriptionrequest long n must nops subscription cancelled additional subscriptioncancel must nops subscription cancelled subscriptionrequest long n must register given number additional element produced respective subscriber subscription cancelled subscriptionrequest long n must signal onerror javalangillegalargumentexception argument cause message must include reference rule andor quote full rule subscription cancelled subscriptionrequest long n may synchronously call onnext subscriber subscription cancelled subscriptionrequest long n may synchronously call oncomplete onerror subscriber subscription cancelled subscriptioncancel must request publisher eventually stop signaling subscriber operation required affect subscription immediately subscription cancelled subscriptioncancel must request publisher eventually drop reference corresponding subscriber resubscribing subscriber object discouraged see specification mandate disallowed since would mean store previously cancelled subscription indefinitely subscription cancelled invoking subscriptioncancel may cause publisher stateful transition shutdown state subscription exists point see subscriptioncancel must throw exception must signal onerror subscriber subscriptionrequest must throw exception must signal onerror subscriber subscription must support unbounded number call request must support demand sum requested sum delivered javalanglongmaxvalue demand exactly javalanglongmaxvalue may considered publisher effectively unbounded demand becomes higher publisher must signal onerror javalangillegalstateexception given subscriber cause message must include reference rule andor quote full rule feasibly reachable current forseen hardware within reasonable amount time element per nanosecond would take year fulfill demand subscription shared exactly one publisher one subscriber purpose mediating data exchange pair reason subscribe method return created subscription instead return void subscription passed subscriber via onsubscribe callback code public interface processor r extends subscriber publisher r id rule processor represents processing subscriber publisher must obey contract processor may choose recover onerror signal chooses must consider subscription cancelled otherwise must propagate onerror signal subscriber immediately mandated good idea cancel processor upstream subscription whenif last subscriber cancel subscription let cancellation signal propagate upstream asynchronous v synchronous processing reactive stream api prescribes processing element onnext termination signal onerror oncomplete must block publisher however handler process event synchronously asynchronously take example nioselectorthreadorigin map f filter p consumeto tonioselectoroutput async origin async destination let assume origin destination selector event loop subscriptionrequest n must chained destination origin implementation choose following us pipe character signal async boundary queue schedule r represent resource possibly thread nioselectorthreadorigin map f filter p consumeto tonioselectoroutput example consumer map filter consumeto asynchronously schedule work could event loop trampoline separate thread whatever nioselectorthreadorigin map f filter p consumeto tonioselectoroutput final step asynchronously schedule adding work nioselectoroutput event loop map filter step synchronously performed origin thread another implementation could fuse operation final consumer nioselectorthreadorigin map f filter p consumeto tonioselectoroutput variant asynchronous stream place different tradeoff including performance implementation complexity reactive stream contract allows implementation flexibility manage resource scheduling mix asynchronous synchronous processing within bound nonblocking asynchronous pushbased stream order allow fully asynchronous implementation participating api method defined interface return void subscriber controlled queue bound one underlying design principle buffer size bounded bound must known controlled subscriber bound expressed term element count turn translates invocation count onnext implementation aim support infinite stream especially high output rate stream need enforce bound along way avoid outofmemory error constrain resource usage general since backpressure mandatory use unbounded buffer avoided general time queue might grow without bound publisher side maintains higher rate subscriber extended period time scenario handled backpressure instead queue bound controlled subscriber signaling demand appropriate number element point time subscriber know total number element requested p number element processed n maximum number element may demand signaled p n case subscriber also know number element b input buffer bound refined p b n bound must respected publisher independent whether source represents backpressured case source whose production rate example clock tick mouse publisher must choose either buffer drop element obey imposed bound subscriber signaling demand one element reception element effectively implement stopandwait protocol demand signal equivalent acknowledgement providing demand multiple element cost acknowledgement amortized worth noting subscriber allowed signal demand point time allowing avoid unnecessary delay publisher subscriber ie keeping input buffer filled without wait full roundtrips legal project collaboration engineer kaazing netflix pivotal redhat twitter typesafe many others code offered public domain order allow free use interested party want create compatible implementation detail see copying
279,Lobsters,scala,Scala programming,wrote a lobste.rs twitter bot that tweets stories with score greater than 10,https://twitter.com/lobstersbot,wrote lobster twitter bot tweet story score greater,,detected javascript disabled browser would like proceed legacy twitter yes
281,Lobsters,scala,Scala programming,ScalaZ - Getting to grips with the Free Monad,http://polygonalhell.blogspot.com/2014/12/scalaz-getting-to-grips-free-monad.html,scalaz getting grip free monad,,
282,Lobsters,scala,Scala programming,Systems Programming at Twitter,http://monkey.org/~marius/talks/twittersystems/#1,system programming twitter,system programming twitter facebook october history lesson twitter evolves late architecture system software stack programming datacenter language tool concurrent system desideratum detour little scala scala value static typing inference function value value object value object method container polymorphic pattern matching composition composition combinators flatmap flatmap gratuitous example concurrent programming future future future applying hollywood principle promise composition motivating example thumbnail extractor flatmap rescue getthumbnail flatmap failure combining many future collect simple web crawler functional style modular decomposition service service simple service filter filter sketch example filter filter stackable filter typesafe finagle rpc system finagle client server proxy putting together observability diagnostics observability diagnostics stats viz tracing githubcomtwitterzipkin zipkin profiling pprof web practice good practice ugly aside thrift githubcomtwitterscrooge open source githubcomtwitter githubcomtwitterutil githubcomtwitterfinagle scala school effective scala,system programming twitter facebook october marius eriksen twitter inc press space enter navigate next slide left arrow go backwards history lesson twitter evolves pure rubyonrails app mysql lot memcache materialized timeline memcaches social graph moved service delayed work queue starting move timeline serving system project godwit started move twitter ruby rail work begin shared serving infrastructure infrastructure matures ton work put porting application tfe go online tfe serf traffic year api traffic served new stack new work happens context work late architecture many open source component memcache redis mysql etc necessarily heterogeneous organized around service distinct responsibility isolated distributed computation data rpc system multiplexing http frontend crucial modularity load balancing system software stack programming datacenter concern include partial failure deep memory hierarchy split heap dynamic topology change variance latency tail heterogeneous component operator error taming resulting complexity central theme work language tool mismatch world view language tool target single computer application demand simultaneous use datacenter language designed serial execution world inherently concurrent concurrent system source concurrency world know client overlapping schedule highcapacity system efficient server must handle request simultaneously fanout fanin coordination server also client desideratum yet magic scaling sprinkle must program locally communicate globally clean concurrent programming model simple safe modular program uniform programming model message passing architecture high concurrency fault tolerant performant protocol support largely agnostic support http thrift memcache redis mysql observability diagnostics profiling optimization detour little scala scala use scala heavily system work hybrid fpoo language expressive statically typed rich type system run jvm interoperates java going introduce enough language grasp following example point language idea technique matter scala happens language value val int val string hello world static typing inference val map one two scala compiler work u using integer string must map int string function value val f int int x x f value object val itostring tostring true true scala pure object oriented language every value object multitude method invocation syntax value object method case class stock ticker string price double def stock price otherprice val goog stock goog val aapl stock aapl aapl goog true goog aapl false container polymorphic val stock seq stock goog stock aapl typed seq stock known c template new trick type class stockssorted seq stock aapl work ordering defined stock pattern matching important tool writing declarative program val newstate state match case idle busy case busy n busy compiler provide exhaustiveness check u guaranteeing function total every time see case partial function composition algebra learned two function g f compose h shorthand h x g f x scala pay attention type val f int string val g string float val h int float g compose f g compose f shorthand like algebra composition took two thing f g combine together make new thing h call widget combinators combinators probably use every day instance collection val l seq val x x val l map l map x x seq flatmap flatmap combinator versatile tool trait seq def flatmap b f seq b seq b name suggest combination map flatten def flatmap b f seq b map f flatten flatmap expanding seq flatmap x seq x x seq conditionals seq flatmap x x seq x else seq seq gratuitous example flatmap sufficiently important syntax sugar eg lazily compute pythagorean triple z streamfrom x streamrange z streamrange x z x x z z yield x z concurrent programming future future placeholder result usually computed concurrently long computation network call reading disk computation fail connection failure timeout div zero future represent concurrent execution future kind container empty full failed wait val f future val result f failure would result exception prefer using try fget match case return re case throw exc applying hollywood principle call call val f future string f onsuccess loginfo onfailure exc logerror exc promise future readonly promise writable future val p promise int val f future int p success failure psetexception new myexc composition motivating example far shown nothing rephrasing callback see future compose trait webpage def imagelinks seq string def link seq string def fetch url string future webpage build style thumbnail extractor def getthumbnail url string future webpage thumbnail extractor def getthumbnail url string future webpage val promise new promise webpage fetch url onsuccess page fetch pageimagelinks onsuccess p promisesetvalue p onfailure exc promisesetexception exc onfailure exc promisesetexception exc promise yuck variant alltoofamiliar callbackhell flatmap rescue want def getthumbnail url string future webpage must first fetch page find first image link fetch image link either operation fail getthumbnail also fails starting smell like flatmap trait future def flatmap b f future b future b getthumbnail flatmap def getthumbnail url string future webpage fetch url flatmap page fetch pageimagelinks failure compose well must recoverable flatmap need dual whereas flatmap operates value rescue operates exception trait future def rescue b f exception future b future b recovering error val f fetch url rescue case connectionfailed fetch url combining many future collect object future def collect f seq future future seq useful fanout operation eg fetch thumbnail def getthumbnails url string future seq webpage fetch url flatmap page futurecollect pageimagelinks map u fetch u simple web crawler def crawl url string future seq webpage fetch url flatmap page futurecollect pagelinks map u crawl u map pps ppsflatten apocryphal functional style emphasize declare meaning computation prescribe computed semantics liberated mechanic enhances modularity simple alter implementation without affecting existing code modular decomposition service service seen use future concurrent programming see network programming fit picture rpc dispatch request wait succeeds fails function type service req rep req future rep server implement client make use simple service server val multiplier futurevalue client multiplier onsuccess re println result r filter many common behavior service agnostic particular service common one retries timeouts exception handling stats filter compose service conceptually want alter behavior service agnostic service filter sketch val timeout filter val service service req rep val servicewithtimeout timeout andthen service filter function type filter reqin service reqout repin future repout example filter given request service dispatch timeout second val timeout req service service req within attempt authenticate request dispatching succeeds val auth req service isauth req service req else futureexception autherr filter stackable val timeout filter val auth filter val service service timeout andthen auth andthen service filter typesafe service requires authenticated request val service service authreq rep bridge filter val filt filter httpreq httprep authhttpreq httprep authenticate serve val authservice service httpreq httprep filt andthen service finagle rpc system finagle crude recap partial failure message passing future service finagle make possible client provide service server consume add behavior largely configurable load balancing connection pooling retrying timeouts rate limiting monitoring stats collection protocol agnostic codecs implement wire protocol manages resource client val client clientbuilder name loadtest codec http host build client service httpreq httprep client httprequest get server val service req futurevalue httpres codeok blah serverbuilder name httpd codec http bindto build service proxy val client clientbuilder serverbuilder client putting together recently wanted add speculative execution easy val backupreq filter req service val reqs seq service req timerdolater delay service req flatten futureselect reqs flatmap case return re seq othercancel futurevalue re case throw seq observability diagnostics observability diagnostics distributed environment standard tool loose efficacy difficult reason measure debugging process interaction vital stats liberally export stats important diagnostics optimization etc statsincr reqs statsaddmetric latencyms available curl host portstatstxt counter reqs metric latencyms viz tracing rpc tracing based dapper sigelman barroso et al tracerecord pc load letter tracetimefuture search rpc searchquery hello world tracing support introduced zero code change required user code zipkin trace aggregation system open source githubcomtwitterzipkin zipkin profiling situ cpu heap contention profilers incredibly useful optimization diagnostics curl host portpprofprofile pprof profile welcome pprof help type help pprof top total sample ljavalangobject lorgapachecommonscodecbinarybasencodec resizebuffer ljavautilarrays copyof ljavautilarrays copyofrange pprof web practice good emphasizing declarativedata flow style programming future combinators result robust modular safe simple system system big really finagle creates promise style programming also encouragesenforces modularity simple build higher level combinators eg generic hashring sharding stats speculative execution custom load balancer everything uniform lot implementor leeway tracing cancellation threadbiasing pool etc zero user code change practice ugly thing nt fit neatly cancellation hairy instance important clean separation sometimes troublesome eg always retry request different host layering never actually clean world messy abstraction result greater garbage collector pressure jvm good aside thrift custom thrift transport tracing soon request multiplexing service multiplexing compression upnegotiated fully compatible clientsservers thrift code generator scrooge githubcomtwitterscrooge produce scalaidiomatic structs service ifaces return future legacy generator future iface support open source true open source project lot external contribution tumblr foursquare stumbleupon serious deployment system software infrastructure githubcomtwittergithubcomtwitterutilgithubcomtwitterfinagle scala school effective scala
283,Lobsters,scala,Scala programming,"LambdaConf, May 22-24: Call for Proposals Now Open",http://degoesconsulting.com/lambdaconf-2015/,lambdaconf may call proposal open,ranjit jhala jared roesch gershom bazerman john de go chris allen sharon steed sergii dymchenko richard eisenberg andrew cherry paige bailey chandu tennety alejandro serrano mena joe nash phil freeman alex gremm steven proctor adam foltzer cryptol mark farrell brian mckenna idris idrismode idrisvim andi mcclure deian stefan lio hail doug mcilroy marconi lanna paul phillips brendan mcadams alejandro serrano mena adelbert chang adam pingel daniel spiewak brian l troutwine gershom bazerman john de go richard feldman marconi lanna riccardo terrell joe nash rob norris justin campbell zeeshan lakhani colt frederickson chris allen nick heiner aysylu greenberg priyatam mudivarti david greenberg jon sterling andrew cherry emiliano firmino chandu tennety derek chenbecker andré van delft anatoliy kmetyuk wwwsubscriptlangorg mike stew oconnor harold carr vlad patryshev matt farmer joseph tel abrahamson joseph tel abrahamson ron toland rahul kavale jeanrémi desjardins kris nuttycombe pawel szulc alex burkhart,haskell liquidhaskell refinement type haskell ranjit jhala haskell many delightful feature perhaps beloved type system allows developer specify verify variety program property compile time however many property typically depend relationship program value impossible least cumbersome encode within haskell type system refinement type enable specification verification valuedependent property extending haskell type system logical predicate drawn efficiently decidable logic talk start high level description refinement type next present overview liquidhaskell refinement type checker haskell particular describe kind property checked ranging generic requirement like like totality head crash termination mergesort loop forever application specific concern like memory safety code segfault data structure correctness invariant various library like container hscolour bytestring text vectoralgorithms xmonad rust introduction rust got type system programming jared roesch workshop intended deep dive rust starting basic advanced type level programming rust new experimental programming language currently designed mozilla research language active community language inspired several variant ml haskell c well novel research idea performance safety programming language one key feature reification memory explicit part language semantics provides low level control memory allocation without sacrificing safety garbage collection goal workshop show use rust write high level code provides excellent safety performance haskell art program derivation parallel computation gershom bazerman program derivation practice beginning specification function series mechanical step deriving efficient implementation algebra programming approach pioneered richard bird oege de moor lambert merteens derive efficient functional program series algebraic manipulation much schoolchildren take typical algebraic function solve x simplify earlymid school research turned attention problem parallel computing developed many foundation called mapreduce workshop run famous nifty algorithm derivation parallel sequential alike attendee walk away weird trick level equational reasoning everyday programming context hopefully enough intuition dive deeply rich body literature purescript learn functional programming purescript john de go workshop designed programmer skill level want learn functional programming purescript ideal learning functional programming language simple clean semantics run platform compiles ubiquitous javascript workshop learn mean think functionally write functional code explore core concept purescript end written first functional program simple game able call rookie functional programmer else instructor promise buy coffee haskell modeling data haskell beginner chris allen pattern modeling data obvious widely covered haskell require application basic algebraic datatypes explore approach dual purpose introducing thinking term algebraic datatypes haskell audience expected know haskell conversation stuttering teach talking human sharon steed developer trained communicate thing goal mind talking something like say computer type code responds giving back want nine time ten work perfectly difficult thing talking client project updating superior progress pitching investor milliondollar idea talking people requires special set skill namely empathy little bit storytelling industry filled brilliant mind great idea mass disruption best brightest know tell compelling story takeaway workshop learning value listener use vulnerability improve social connection prolog introduction constraint logic programming sergii dymchenko constraint logic programming paradigm allows solving hard combinatorial problem minimal programming effort workshop learn basic prologbased constraint logic programming system eclipse solve several puzzle get hint constraint logic programming useful reallife project haskell practical introduction haskell gadts richard eisenberg burgeoning haskeller soon discovers proper use descriptive type help capture realworld idea catch error aid refactoring speed development indeed make programming fun haskeller drunk welltyped koolaid go answer even type generalized algebraic datatype gadt core allows compiler make different assumption type within different branch pattern match leveraging power allows programmer encode detailed invariant datatype algorithm invariant checked compile time clever use gadts also let remove certain us unsafecoerce long proved safe workshop handson interactive tutorial using haskell gadts practical setting f freya f http system andrew cherry freya stack library f designed let get close http functional typed way well providing useful set abstraction http also offer graph based approach modelling http response enabling creation wellbehaved http application simply correctly take tour stack exercise various part individually diving write complete http application see easy write application take full advantage http standard look way extending application past world rfcs world hypermedia graph session comfortable building application using freya almost certainly come great idea freya graph based approach logical design could extended even introduction clojure programming language longing paige bailey grab repl prettiest pair parenthesis beginnerfriendly workshop even never coded learn think clojure would want get opportunity handson experimentation zach oakes nightmod developer tool making livemoddable game clojure relatively new powerful dynamic lisp dialect compiles many target environment including jvm javascript clr important single principle behind clojure simplicity abstraction simple orthogonal mean compromise power la carte polymorphism careful support name namespaces reference succession model wide selection small composable protocol make clojure programming swift surgical accurate perfect game development ready brave programmer time get atomic clojurescript datadriven webapps clojurescript om chandu tennety om flavor facebook reactjs take advantage immutable data structure make virtual domdiffing algorithm much faster clojurescript environment work simple example get understanding state represented passed component order build fast functional uis haskell developing web application haskell alejandro serrano mena web development easy fun haskell course type safe let take birdseye tour creating web application haskell scratch initial project creation deployment cloud end workshop deployed small server notetaking workshop divided four slot dealing different facet web development first simple routing building html returned client adding database capability using persistent esqueleto next step taking input user via digestive functors finally deployment heroku considered along integrating middleware application elm adventure elm writing adventure game elm joe nash elm functional reactive language compiles html cs javascript haskelllike syntax thanks combination smart language design innovative webbased tool incredibly easy write interactive application elm workshop cover basic concept language syntax dive hotswapping editor timetravelling debugger build adventure game using functional reactive technqiues purescript purelyfunctional web apps using react purescript phil freeman react popularized idea user interface pure function application state approach perfectly suited language like purescript workshop learn use react purescript create clean wellfactored web application workshop assumes basic knowledge purescript related language haskell reason considered continuation earlier purescript workshop beginner haskell introduction haskell focus highperformance computing alex gremm workshop give introduction haskell programming language work basic concept functional programming specifically haskell implementing simple diffusion algorithm convergence check using naive implementation learn identify performance bottleneck overcome order achieve highperforming sequential code erlang introduction erlang steven proctor heard nothing else erlang probably heard something otp people chanting process thread process really cheap ohmmmm workshop get overview erlang syntax otp process management cheap erlang process really implement markov chain generator state possible transition represented process cryptol intro cryptol highassurance crypto engineering adam foltzer cryptol open source pure functional language expressing reasoning bitprecise computation particularly cryptographic algorithm like haskell built upon polymorphic static type system offer similar mathematical function sequence comprehension notation type system feature size polymorphism arithmetic type predicate designed express constraint naturally arise cryptographic specification advanced type system restricted domain cryptol enables theoremdriven development style correctness property expressed directly language tandem development specification specification evolves property continually fuzztested random quickcheckstyle testing even sent external sat smt solver mathematical proof correctness workshop give quick introduction cryptol language geared toward folk working knowledge typed functional programming together implement classical cryptosystem learn basic syntax semantics language program express check correctness property implementation using quickcheck smt finally demonstrate cryptol specification zuc stream cipher used lte communication show theoremdriven development approach reveals bug required revision cipher typed racket introduction typed racket mark farrell workshop give introduction typed racket give overview feature type system go example typing old untyped racket code provide accompanying typing exercise people try also discus current issue trusting typed racket eg sketchy example mixing typed untyped code finally discus need add type annotation significant number existing racket module try get people interested contributing typed racket prior experience using lisplike functional programming language schemeracket could asset understanding content workshop though none required idris write idris brian mckenna idris dependently typed programming language unlike dependently typed system idris designed specifically writing executable program workshop slowly walk writing program using dependent type motivate us around correctness expressivity workshop modeled similarly lambdaconf new example demonstrate idris capable prerequisite knowledge familiarity algebraic data type important idris repl installed optionally interactive editor configuration emacs idrismode vim idrisvim emily introducing emily simplifying functional programming andi mcclure emily experimental language project focusing simplifying basis programming language model language operation composition functionlike entity equivalent combinators state mean function object class variable scope interface generally interchangeable goal make fp language capability accessible entrylevel fpwary programmer mean simple concept configurable scriptinglanguagelike syntax haskell building secure system haskell deian stefan modern particular web userspecific often sensitive information unfortunately protecting user data notoriously difficult framework provide way declaring enforcing applicationspecific security policy response developer often specify enforce security policy adhoc fashion eg strewing security check throughout codebase even one manages get check right place application rely third party library may expose vulnerability case happen malicious recent headline alone serve highlight existing approach application plagued privacy leak talk first describe lio haskell library building secure system lio information flow control ifc provides apis specifying policy data allowed readwrite data enforces policy code leveraging haskell monad strong type system describe hail web framework built top lio make easy specify policy declarative way defining application data type hail application construction protect user privacy integrity haskell haskell nugget power series brought life doug mcilroy operation power series showcase elegance expressiveness overloading lazy evaluation simple oneliners sum product integral derivative functional composition functional inverse etc vividly embody underlying mathematics even improve upon banishing subscript series solution differential equation come practically free generating function actively generate scala new scala marconi lanna programming scala martin odersky et al one comprehensive de facto reference scala however book originally published scala updated since second edition covering scala meantime scala major release numerous fresh advanced feature wait third edition programming scala describe latest greatest scala feature introduced last year talk present main feature introduced scala well exciting peek beyond scala future none virtual filesystem change everything paul phillips talk paul phillips expands idea keynote deliver compelling vision properly conceived implemented virtual file system ability literally change every single thing interact computer scala skeptic look scalaz gateway drug practical exploration brendan mcadams seen corner local software development neighborhood fp purist shamelessly peddling scalaz unsuspecting developer lured promise free monoids semigroups endofunctors developer soon seem lost throe ecstatic coding skeptical stubbornly practical among u might ring little true especially read rod serling voice image gibbering horror lurking depth mathematical perfection swim eye true value world scalaz possible use tool good little bit evil fun use learning evil profit without getting hopelessly lost opium den fp talk look gateway drug scalaz validation nonemptylist monad transformer work practical standpoint value real world application use without advanced math phd fun really code tool haskell pattern functors wandering around fixpoints free monad generic alejandro serrano mena free monad generic programming fixpoints coproducts data type usually considered advanced topic haskell programmer talk look concept unifying lens combining enriching pattern functors pattern functor strippeddown description data type shape constructor remain recursive structure gone using haskell manipulate pattern functors create new data type various like functional programming adelbert chang shortly adelbert chang entered college computer science major contemplated changing major several time usually direction physic mathematics changed introduced functional programming mysterious beautiful talk adelbert elaborate early perspective computer science math physic discus ended enamored functional programming scala axle spirebased dsl adam pingel axle scalaembedded domainspecific language built spire talk cover architecture objective project live coding example show design pattern abstract algebra apply range domain including machine learning bioinformatics game theory statistic data visualization various selfish purity functional programming make everyday job easier daniel spiewak functional programming toooften viewed academic discipline fp imposes constraint seem aesthetic pedantic practical almost motivating example fp involve oneliners mapping list handwaving endomorphisms rather something earth talk take different approach functional programming make thing easier make easier write code test code design component abstraction make turnaround time faster bug rarer even improves application throughput talk explains possible precisely never work serious application without fp also touch briefly fp work nt work common industrial language like java javascript gain benefit expanding toolset bit erlang faulttolerance cheap making system probably wo nt fall brian l troutwine building computer system reliable hard functional programming community invested lot time energy upfrontcorrectness guarantee type like unfortunately absolutely correct software timeconsuming write expensive result faulttolerant system achieve systemtotal reliability accepting subcomponents fail planning failure firstclass concern system company embrace wave asaservice architecture failure subsystem become pressing concern using example heavy industry aeronautics telecom system talk explore design faulttolerance functional programming technique get u way none abstract method general gershom bazerman programming abstraction abstraction surely programming need keep reinventing even recognize see across many domain something abstract necessarily useless even though definitionally removed specific use even case often teach functional programming met response taught abstraction good certain realm mathematics category theory often elicit similar response talk investigation consider abstraction process applying next great functional programming language john de go john clue next great functional programming language like happy hop stage rant type class nominative typing data module pattern matching recursion well basically everything else associate functional programming john argue make radical progress cheaply building correct software need take one step backward two step forward embracing dependenttyping total function turingcomplete compiler host language automated proof search attend talk question assumption functional programming heckle either way welcome elm shipping production web app elm richard feldman happens take coffeescript web app designed edit novel scratchrewrite elm turn result faster robust massively easier maintain elm simple design mean even functional programming novice quickly get speed static type inference pervasive immutability firstclass frp system excellent language also great introductory fp language javascript developer pick talk dive nut bolt shipping production web app elm including question like choose elm transition imperative architecture frp extent leverage javascript library ecosystem without sacrificing functional invariant come see pleasant functional programming browser scala idiomatic scala option match marconi lanna scaladoc page option say idiomatic way use scalaoption instance treat collection monad use map flatmap filter foreach lessidiomatic way use scalaoption value via pattern matching talk show use option monad idiomatic functional style leveraging comprehensive set higherorder function solve coding situation concise declarative manner talk never pattern match option f building concurrent faulttolerant scalable application f using akkanet riccardo terrell writing correct concurrent faulttolerant scalable application simple task struggle generally result using wrong tool wrong level abstraction actor based concurrency model aim simplify process actor model mathematical model concurrent computation originated carl hewitt peter bishop richard steiger actor programming one widely applicable programming model provides support concurrency improving distribution error detection fault tolerance good fit kind programming problem find faced today increasingly distributed world actor raise abstraction level provide better platform build correct concurrent scalable application presentation introduce concept architecture immutability isolation asynchronous processing utilizing tool akkanet net port popular jvm framework akka goal provide solid knowledge foundation actor model following presentation attendee take enough material start use leverage actor model write successful concurrent application haskell accelerating haskell gpgpu programming haskell joe nash many machine device come equipped powerful graphical processing unit gpus unit hundred processing core exploited accelerate application offloading applicable code gpu instead cpu talk cover basic concept general purpose programming gpus show exploited functional programming language haskell via accelerate library scala program value pure composable database access scala rob norris fp often glibly described programming function equivalently say fp programming value function value failure value effect value indeed program treated value talk explores consequence idea programsasvalues looking doobie purefunctional database library scala examine lowlevel implementation via free monad algebra jdbc type show naturally enables expressive safe highlevel api familiar lightweight composable abstraction including streaming result set trivial compatibility pure library like remotely even market database layer talk provide practical outline general solution dealing terrible apis like jdbc principled way various make hello world justin campbell many language strength weakness different community surrounding evaluate new language technology pragmatic introducing thing production let talk language exploration discus learn new language consideration introducing thing production come idea ruby ecosystem plan dipping toe elixir go haskell ruby rust scala session lispflavored erlang meaning lfe zeeshan lakhani enjoy lispbased language built sexpressions homoiconicity like writing syntactic abstraction pattern matching could use lisp write faulttolerant highlyavailable distributed datastore welcome wonderful world lfe lispflavored erlang cover basic lfe toolchain macro system intermediate representation step core erlang ending beam erlang virtual machine scala scalaz level scalaz foo colt frederickson scalaz massive library full many critical fp abstraction bit dense dipped scalaz couple thing either validation sure else use talk haskell learn haskell le year chris allen haskell known hard result pedagogy catching different way thinking structuring program make teaching others something effective enjoyable right imagination make programming language nick heiner used typing code editor seeing computer something run familiar easy take granted go sequence character something machine execute knowing help program effectively empower create programming language give overview pipeline text editor machine behavior dive look specific tool help u create programming language also discus different language design decision static versus dynamic typing see implemented behind scene end ready bring new language world clojure loom functional graph clojure aysylu greenberg graph ubiquitous data structure algorithm analyzing fascinating loom opensource clojure library provides many graph algorithm visualization discus graph represented functional world bridge gap procedural description algorithm functional implementation learn way loom integrates graph representation clojureclojurescript fullstack fp datomic clojure clojurescript priyatam mudivarti happens prototype app entirely fp choosing functional database building http apis designing template possible day stay entirely fp land talk share experience building functional prototype clojure clojurescript using following library datomic ring om garden discus trade popular database web toolkits template engine even le sas favor simpler library embrace immutable data sequence value none dynamic v static discussion without sounding like lunatic david greenberg type remain highly contentious issue programmer industry rail python massive community drive highprofile hightraffic successful business github reddit dropbox clearly dynamic language better choice java c unless course count myriad business powered statically typed language eg java statement infuriate engineer academic know hindleymilner type system type system reduce defect improve code quality talk take look type system different lens type system actually business decision frequently cast emotional decision none type theory meaning explanation jon sterling heart intuitionistic type theory lie intuitive semantics called meaning explanation crucially meaning explanation taken definitive type theory core notion longer proof verification explore type theory sort arise naturally enrichment logical theory judgement contrast modern prooftheoretic type theory interpret judgement proof logic proposition verification expect following question answered difference judgement proposition meaning explanation difference proof verification socalled semantical approach type theory speaker view immediately philosophically acceptable modern syntactic one also provides basis future partiality effect may treated naturally refinement behavioral typing rather mean termlevel monad similar kludge none http functional programming andrew cherry http fascinating standard one use every day many different way reasoning http mean look approach taken model http layer particularly functional programming graph proof type system fair game ooerlang ooerlang programmerfriendly approach oop erlang emiliano firmino objectoriented programming oop dominates industry developer experience oo new functional programming help bring functional programming developed ooerlang extension erlang fully support oo simpler syntax previous approach talk present implemented ooerlang start using clojurescript bird eye view clojurescript chandu tennety bird travel thousand mile year migrate flying hour little food rest comparison migrating database seems like paltry feat birdwave way visualize amazing phenomenon bird migration using clojurescript om allowed app written declarative concise manner taking full advantage javascript interoperability well clojure awesome builtin feature persistent data structure async module also prepare dazzled dataviz powerhouse bird harmed creation birdwave talk scala scalazstreams functional approach compositional streaming io derek chenbecker serious announcer voice world gone mad data one library stand alone fight sloppy unsafe processing serious announcer voice scalazstream library brings type safety flexibile composition powerful abstraction world streaming data processing talk start basic building block move advanced technique covering good bad ugly along way scala reactive programming algebra andré van delft anatoliy kmetyuk r reactive programming growing delivered many language construct library tool scala programmer use thread timer actor future promise observables async construct others still seems u state art mature reactive programming relatively hard confidence correct operation depends mainly extensive testing better support reasoning correctness would useful address timing dependent issue algebra communicating process acp potential improve let one concisely specify event handling concurrency facilitates reasoning parallel system acpbased extension scala named subscript show help describing internal behavior akka actor combine future information see wwwsubscriptlangorg scala cat fresh look functional programming scala mike stew oconnor cat library aim fill gap scala standard library think necessary pure functional programming scala way scalaz attempt fill role project intends create functional library intends create community welcoming opportunity start library like scratch give u many delicious opportunity rethink past decision allowing u innovate unexpected way haskell programming math harold carr design pattern useful way organize software unfortunately gangoffour like pattern composable due sideeffects pure ie sideeffects language function composed make possible leverage pattern mathematics talk show algebra function composition identity function isomorphism co product gluing function compose functors show algebra relates realworld programming goal talk provide initial intuition apply pattern math programming motivate continue studying perhaps looking uber pattern category theory note knowing pattern necessary getting work done functional language talk give glimpse may useful talk illustrates idea using haskell aimed fp beginner none introduction intuitionistic type theory vlad patryshev traditionally computer science set assumed basis type theory together boolean logic version type theory need set boolean logic intuitionism enough principle excluded middle required underlying math topos theory required even aware existence theory described using diagram traditional tricky deduction rule resulting theory turn dependent type simple reallife example two illustrate none case cuttingedge matt farmer story road le traveled talk going take look impact choosing le common technology like scala clojure organizational level elemica include thing worked well u thing nt work well myth two able dispell along way land process figuring worthwhile endeavor haskell give freedom forgeddaboutit free really mean joseph tel abrahamson haskell community often abuzz free monad stick around long enough also see notion free monoids free functors yonedacoyoneda free seminearrings etc clearly freedom larger concept free f f free f talk explores briefly origin freedom category theory explains mean free x thing x talk little bit useful free structure exist haskell haskell finally tagless dsl mtl joseph tel abrahamson finally tagless dsl dsl embedding technique pioneered oleg kiselyov jaques carrette chungchieh sense dual notion freemonad interpreter mtl popular monad library haskell happens unbeknownst finally tagless dsl talk explores finally tagless dsl style offer show use concept extend effecttyping vocabulary mtl clojure clojure v design pattern ron toland talk look design pattern oop translate clojure unnecessary embedded language others easier build scala simple collection distributed processing functional way rahul kavale presentation talking way functional programming idea affect fit distributed computing world introduction apache spark idea implemented quiet successfully talk implementing live coding distributed collection abstraction using basic principle functional programming start computation simple memory collection evolve fully distributed collection property like fault tolerance etc scala computation expression scala jeanrémi desjardins computation expression generalization donotation idiom bracket provide single notation us least powerful abstraction order translate sugared code desugared code flexible way possible present project working implement computation expression scala particular show notation help write asynchronous code little cognitive overhead various parametricity essence information hiding kris nuttycombe introductory talk designed help student new functional programming understand type parameter enable u easily reason behavior function create apis enforce invariant typelevel constraint cover principle universal existential quantification review example reasoning behavior function type discus implication compositionality api design example haskell discus principle generalize even code written unityped language scala monad asking right question pawel szulc entering world functional programming one quickly introduced concept monad concept reason really hard grasp comprehend querying internet monad likely learn need know category theory understand monad asking right question first thing came mind struggling dilemma well right question talk looking right question answering talk hope find knowing understanding concept able apply daily programming routine rust rust trust alex burkhart rust aim build solid foundation building safe software system faster ensure fewer mistake enter code base immutability default concept null proven memory safety rust state art compiler help developer catch error early possible without paying penalty runtime developer write high level code modern language without sacrificing expressiveness development time execution speed explore rust concept ownership key providing compiletime safety guarantee apply even face concurrency allowing easily write multithreaded program correctly first time rust released may start building better software today
284,Lobsters,scala,Scala programming,An example of functional design,http://futurice.com/blog/an-example-of-functional-design,example functional design,tl dr future functional http mybackendapifoo solution functional future comparison jobba haxl stitch nt single dragon free monad free monad free structure general stackoverflow functional programming scala redis use implicit context redis mget scalaz conclusion,tl dr monad tutorialis future functional access backend resource could build small library using scala future directly scala future javascript promise functional question immediately followed metaquestion mean functional functional mean map filter reduce yes future functional construct yet defining property functional program referential transparency property enables u reason equationally fancy word need example start simple example def f b boolean int val list int list true false true map f ask first third element list l f referentially transparent val list int list f true f false f true answer yes f true f true always scala nt enforce referential transparency ca nt hundred percent sure likely function booleans ints referentially transparentbut reason similarly program involving future def g b boolean future int b foo else bar def b future list int futuretraverse list true false true g sure resulting list first third value always b resolve successfully trick question answer depends manually evaluate expression futuretraverse list true false true g futuresequence list true false true map g futuresequence list g true g false g true futuresequence list foo bar foo see first third element foo val foo defined def foo webclientget http mybackendapifoo may result vary two request made endpoint contrary previous example futurecomputations usually kind side effectsin small example issue easy work around try imagine larger system granular backend api one make hundred backend request compose final result let take twitter example fetch user feed tweet author fetch author information get avatar url like rendered feed result consistent ie author always avatar going even like make backend request possible api might even support fetching multiple user information single request like leverage nt want sacrifice clarity code could take account manually def usersfeed userhandle userhandle implicit ec executioncontext future html feed fetchfeed userhandle usersdata fetchusersdata feeduniqueuserhandles yield renderfeed feed usersdata ok like render two user feed top def twousersfeed userhandle b userhandle implicit ec executioncontext future html feeda usersfeed feedb usersfeed b yield feeda feedbyou lose desired property consistent result referential transparency also lose property making request possible difficult use multivalued request composable coderather like write granular code property def singletweet tweet tweet implicit ec executioncontext future html author fetchuser tweetauthor yield rendertweet tweet author def usersfeed userhandle userhandle implicit ec executioncontext future html feed fetchfeed userhandle renderedtweets futuretraverse feedtweets singletweet yield renderfeed feed renderedtweets solution functional futurehow proceed actually quite obvious familiar common fp design practice future nt pure construction merely functional looking wrapper sideeffectful callbackbased operation future nt composable way want want separate backend access let frontend developer specify fetch result backend developer fetch plain future nt work add another level abstraction introducing new type job frontend def singletweet tweet tweet job html author fetchuser tweetauthor yield rendertweet tweet author def usersfeed userhandle userhandle job html feed fetchfeed userhandle renderedtweets jobtraverse feedtweets singletweet yield renderfeed feed renderedtweets backend package object executor def execute job job implicit ec executioncontext future already implicitly decided job future api similar difference first construct job computation execute contrary future construction execution highly interleavedwith separation construction execution frontend application developer could compose job specify backend developer could work implementation execute method implementation written referentially transparent way also automatically optimising executionwhat trick one might ask primitive building block future could virtually everything job ask json document backend restricting job implementation made fully referentially transparent explained later object future def apply body implicit ec executioncontext future object job def fetch url url implicit read read job val f future launchnuclearmissiles val j jobfetch jsvalue http apigithubcomorgsfuturice comparison jobba haxl stitchjobba haxl stitch similar library yet couple difference worth pointing already familiar themhaxl haskell library facebook make concurrency implicit using applicative functorsget soundness modularity free implicit cachingconcurrently fetch data multiple heterogeneous sourcesimplicitly batch multiple request data source single requeststitch scala library twitter almost make concurrency implicit using applicative functorsdo nt get soundness modularity free implicit cachingconcurrently fetch data multiple heterogeneous sourcesimplicitly batch multiple request data source single requestunluckily stitch nt open source nt soundness modularity property another way say execution referentially transparent already three reason make library use scala rule haxl want referential transparency library use rule stitch also environment bit simpler nt batch api single source type json http take advantage simplifies internals jobba scala library u make concurrency implicit using applicative functorsget soundness modularity free implicit cachingconcurrently fetch data single heterogenous sourceimplicitly batch multiple request data source single requesthere dragonsthe implementation job us approach haxl stitch free monad good explanation free monad free structure general stackoverflow wo nt repeat themthe idea make data type needed operation nt perform anything executor evaluator interpreter take description computation execute itthis problem quite similar par example chapter functional programming scala abstract even though using free monad could totally different implementation execute method par example author change definition par data type provide fully nonblocking par implementation using actorsone simple definition job could sealed trait job case class purejob value extends job case class blockedjob f job job job extends job case class fetchjob url url read read extends job could implement primitive operation job api def flatmap f job job job job job match case purejob value f value case blockedjob f job def pure value purejob value def map f job job job job match case purejob value purejob f value case blockedjob x pure f x job def fetch url url implicit read read job fetchjob url read already perform local optimisation syntax structure build upunfortunately make forcomprehensions work need define map flatmap member method job real definition job trait interleaved sealed trait job def flatmap f job job blockedjob f def map f job blockedjob x purejob f x case class purejob value extends job override def flatmap f job job f value override def map f job purejob f value case class blockedjob f job job job extends job case class fetchjob url url read read extends job defined job data structure could look singletweet job look like scala singletweet tweet phadej fun prog fun job html blockedjob fetchjob userphadej map implemented using flatmap see blockedjob outer constructor resulting job anonymous unary function make flatmapnext let write simple executor simply squash job future purejob futuresuccessful blockedjob futureflatmap def execute job job implicit ec executioncontext future job match case purejob value futuresuccessful value case blockedjob f job execute job flatmap value execute f value case fetchjob url read execution fetchjob place magic start happen could simply perform actual fetch every fetchjob really cache fetchjobs go def execute job job implicit cache fetchcache ec executioncontext future job match case purejob value futuresuccessful value case blockedjob f job execute job flatmap value execute f value case fetchjob url read cachecached url read webclientget url read using get soundness modularity yet skeptic notice could rewrite original singletweet def singletweet tweet tweet implicit cache fetchcache ec executioncontext future html author fetchuser tweetauthor yield rendertweet tweet author implicit def implicit ctx jobbacontext executioncontext def singletweet tweet tweet implicit ctx jobbacontext future html author fetchuser tweetauthor yield rendertweet tweet author get benefit true example application three cache appglobal inmemory redis cache backend response requestlocal inmemory cache consistency three could implemented using implicit context affect fetch operation performedthe type job jobbacontext future definition resembles par implementation would work well implicit context well enoughwhy use implicit contextusing future directly implicits affect structure computation ca nt change structure computation built future ca nt bundle multiple fetch one eg leverage redis mget command achieve must make job structure richer add jobtypes sealed trait job def flatmap f job job blockedjob f def map f job mapjob f case class mapjob f job job extends job case class pairjob job job jobt job extends job purejob blockedjob fetchjob previously mapjob quite simple expose map operation directly via pure flatmap pairjob need explanation continue simpler job definition moment try build concurrent job def twotweets tweet b tweet job html htmla singletweet htmlb singletweet b yield htmla htmlb scala twotweets tweet phadej fun prog fun tweet futurice rt phadej fun prog fun job html blockedjob blockedjob fetchjob userphadej would expect see fetchjob userfuturice clearly could perform fetch concurrently even bundled one applicative functors come rescue need modify twotweets definition using scalaz magical operator def applicativetwotweets tweet b tweet job html singletweet singletweet b htmla htmlb htmla htmlb using actually worse first scala applicativetwotweets tweet phadej fun prog fun tweet futurice rt phadej fun prog fun job html blockedjob blockedjob blockedjob fetchjob userphadej let define ap applicative using pairjob ie remember composed job applicatively see computation original structure scala applicativetwotweets tweet phadej fun prog fun tweet futurice rt phadej fun prog fun job html mapjob pairjob mapjob fetchjob userfuturice mapjob fetchjob userphadej point redo executor totally change execution strategy make first traverse job structure picking visible fetchjobs bundle fetch together single redis mget command replace fetchjobs result wrapped purejobs simplify structure job loop single purejob hand call executor onionexecutor peel structure making job smaller smaller every iterationlet work two tweet job stepbystep see two fetchjobs userfuturice userphadejnext bundle together single mget hopefully return u two value futurice phadejafter substitute value job started job html mapjob pairjob mapjob purejob author futurice mapjob purejob author phadej job nt anything blocking computation reduce final html nt blockedjobs example job mean could render two tweet using single iteration executor loop single mget real version job also failedjob sometimes thing go wrong allconclusionabove showed one construct powerful computation abstraction using free structure essentially made embedded language turn embeds host language pure computation asynchronous resource retrieval control execution using future directly importantly execution strategy used referentially transparent also add primitive need
285,Lobsters,scala,Scala programming,A farewell note to a programming language,http://matthiasnehlsen.com/blog/2014/12/04/Farewell-Scala/,farewell note programming language,birdwatch scala play framework iteratee library clojure clojurescript om,dear scala remember first met back thought functional approach fresh different believed made first project success comfortable good part soon started working team writing scala immense syntax started drowning first took compliment tried please offering work way liked noticed something particular instead try everybody darling offering every software development paradigm known man found particularly gruesome working seasoned java developer yeah sure oop long time whatever worth mean good idea recreate java scala little bit le boilerplate well year working scala team single day felt shared mindset develop system even approach problem say one develop powerful system plenty proof otherwise heart longer even sure ever last year wrote little application called birdwatch scala play framework initially something show interviewing job whole thing developed life like cute little stray dog sudden showed porch really know sure look hungry feed decides stick around know find making regular appointment dog spa know kind story cute though complaining never felt compelled put much work server side implementation part already spent workday writing scala also server side implementation look deceptively simple actually hard understand depth us iteratee library find library difficult understand even difficult explain people next impossible grasp source code matter due diligence prefer rely library code read understood well case could fix even smallest bug huge red flag spent time working different client initially angularjsjavascript version another version reactjsjavascript even another one reactjsscalajs flirting clojure logical next step write client clojurescript om quickly abandoned one like liked clojurescript experience much wanted abandon altogether dear scala favor allclojure version met another programming language first time feel like met soul mate far programming language go sorry follow heart writing sudden might ask good question day yet another recruiter approached scala project happens often even care look project time different felt need make clean break considering career decided scala would part matter high demand impressive daily rate freelance gig happier project clojure brings unfortunate observation made conj little surprised number people spoke wished could code clojure pay rent sum thing dear scala definitely two u need take break found better match mean anyone else follow example blindly though may get people thinking whatever language currently using happy may want look better fit know people life mine short working something love cheer matthias
286,Lobsters,scala,Scala programming,Effective Scala,http://twitter.github.io/effectivescala/,effective scala,marius table content introduction formatting whitespace naming import brace pattern matching comment type generic return type annotation variance type alias implicits collection hierarchy use style performance java collection concurrency future collection control structure recursion return loop comprehension functional programming case class algebraic data type option pattern matching partial function destructuring binding laziness call name object oriented programming dependency injection trait visibility structural typing error handling handling exception garbage collection java compatibility twitter standard library future offerbroker acknowledgment language 日本語 русский 简体中文 introduction scala several large library formatting scala style guide whitespace naming import brace pattern matching comment scaladoc type generic type level programming scala return type annotation variance type alias implicits collection collection design document hierarchy use style performance java collection concurrency future finagle collection control structure recursion go statement considered harmful return loop comprehension functional programming case class algebraic data type option pattern matching custom extractor partial function destructuring binding laziness call name future section object oriented programming cake pattern dependency injection trait visibility singleton class type structural typing error handling handling exception garbage collection heapster gcprof java compatibility twitter standard library util finagle future discussed concurrency section aside style obviates need synchronization volatility declaration cancellation local offerbroker actor synchronousqueue example simple connection pool example sieve eratosthenes sieve eratosthenes acknowledgment yourkit back finagle heap balancer back,marius eriksen twitter incmarius twittercom marius table content introduction formatting whitespace naming import brace pattern matching comment type generic return type annotation variance type alias implicits collection hierarchy use style performance java collection concurrency future collection control structure recursion return loop comprehension require assert functional programming case class algebraic data type option pattern matching partial function destructuring binding laziness call name flatmap object oriented programming dependency injection trait visibility structural typing error handling handling exception garbage collection java compatibility twitter standard library future offerbroker acknowledgment language 日本語 русский 简体中文 introduction scala one main application programming language used twitter much infrastructure written scala several large library supporting use highly effective scala also large language experience taught u practice great care application pitfall feature embrace eschew employ purely functional style avoid word found effective use language guide attempt distill experience short essay providing set best practice use scala mainly creating high volume service form distributed system advice thus biased advice herein translate naturally domain law deviation well justified scala provides many tool enable succinct expression le typing le reading le reading often faster reading thus brevity enhances clarity however brevity blunt tool also deliver opposite effect correctness think always reader program scala writing java haskell python scala program unlike one written order use language effectively must phrase problem term use coercing java program scala inferior way original introduction scala assume reader familiar language resource learning scala living document change reflect current best practice core idea unlikely change always favor readability write generic code expensive clarity take advantage simple language feature afford great power avoid esoteric one especially type system always aware trade offs make sophisticated language requires complex implementation complexity begets complexity reasoning semantics interaction feature understanding collaborator thus complexity tax sophistication must always ensure utility exceeds cost fun formatting specific code formatting long practical little consequence definition style inherently good bad almost everybody differs personal preference however consistent application formatting rule almost always enhance readability reader already familiar particular style grasp yet another set local convention decipher yet another corner language grammar particular importance scala grammar high degree overlap one telling example method invocation method invoked whitespace without parenthesis nullary unary method parenthesis furthermore different style method invocation expose different ambiguity grammar surely consistent application carefully chosen set formatting rule resolve great deal ambiguity man machine adhere scala style guide plus following rule whitespace indent two space try avoid line greater column length use one blank line method class object definition naming use short name small scope j k expected loop use longer name larger scope external apis longer explanatory name confer meaning futurecollect futureall use common abbreviation eschew esoteric one everyone know ok err defn whereas sfri common nt rebind name different us use vals avoid using overload reserved name typ instead type use active name operation side effect useractivate usersetactive use descriptive name method return value srcisdefined srcdefined nt prefix getters get per previous rule redundant sitecount sitegetcount nt repeat name already encapsulated package object name prefer object user def get id int option user object user def getuser id int option user redundant use usergetuser provides information userget import sort import line alphabetically make easy examine visually simple automate use brace importing several name package import comtwitterconcurrent broker offer use wildcards six name imported eg import comtwitterconcurrent nt apply blindly package export many name using collection qualify name importing scalacollectionimmutable andor scalacollectionmutable mutable immutable collection dual name qualifiying name make obvious reader variant used eg immutablemap use relative import package avoid import comtwitter import concurrent favor unambiguous import comtwitterconcurrent put import top file reader refer import one place brace brace used create compound expression serve us module language value compound expression last expression list avoid using brace simple expression write def square x int x x def square x int x x even though may tempting distinguish method body syntactically first alternative le clutter easier read avoid syntactical ceremony unless clarifies pattern matching use pattern matching directly function definition whenever applicable instead list map item item match case x x case none default collapse match list map case x x case none default clear list item mapped extra indirection elucidate comment use scaladoc provide api documentation use following style servicebuilder build service standard scaladoc style servicebuilder build service resort ascii art visual embellishment document apis add unnecessary comment find adding comment explain behavior code ask first restructured becomes obvious prefer obviously work work obviously apology hoare type generic primary objective type system detect programming error type system effectively provides limited form static verification allowing u express certain kind invariant code compiler verify type system provide benefit course error checking raison use type system reflect goal must remain mindful reader judicious use type serve enhance clarity unduly clever obfuscates scala powerful type system common source academic exploration exercise eg type level programming scala fascinating academic topic technique rarely find useful application production code avoided return type annotation scala allows omitted annotation provide good documentation especially important public method method exposed return type obvious omit especially important instantiating object mixins scala compiler creates singleton type example make trait service def make new service def getid return type service compiler creates refinement type object service def getid int instead use explicit annotation def make service new service author free mix trait without changing public type make making easier manage backwards compatibility variance variance arises generic combined subtyping variance defines subtyping contained type relates subtyping container type scala declaration site variance annotation author common library especially collection must prolific annotator annotation important usability shared code misapplication dangerous invariant advanced necessary aspect scala typesystem used widely correctly aid application subtyping immutable collection covariant method receive contained type downgrade collection appropriately trait collection def add u u collection u mutable collection invariant covariance typically invalid mutable collection consider trait hashset def add u item u following type hierarchy trait mammal trait dog extends mammal trait cat extends mammal hash set dog val dog hashset dog treat set mammal add cat val mammal hashset mammal dog mammalsadd new cat longer hashset dog type alias use type alias provide convenient naming clarify purpose alias type selfexplanatory int clearer type intmaker int intmaker since short us common type however class concurrentpool k v type queue concurrentlinkedqueue v type map concurrenthashmap k queue helpful since communicates purpose enhances brevity use subclassing alias trait socketfactory extends socketaddress socket socketfactory function produce socket using type alias type socketfactory socketaddress socket better may provide function literal value type socketfactory also use function composition val addrtoinet socketaddress long val inettosocket long socket val factory socketfactory addrtoinet andthen inettosocket type alias bound toplevel name using package object package comtwitter package object net type socketfactory socketaddress socket note type alias new type equivalent syntactically substituting aliased name type implicits implicits powerful type system feature used sparingly complicated resolution rule make difficult simple lexical examination grasp actually happening definitely ok use implicits following situation extending adding scalastyle collection adapting extending object pimp library pattern use enhance type safety providing constraint evidence provide type evidence typeclassing manifest find using implicits always ask way achieve thing without help use implicits automatic conversion similar datatypes example converting list stream better done explicitly type different semantics reader beware implication collection scala generic rich powerful composable collection library collection high level expose large set operation many collection manipulation transformation expressed succinctly readably careless application feature often lead opposite result every scala programmer read collection design document provides great insight motivation scala collection library always use simplest collection meet need hierarchy collection library large addition elaborate hierarchy root traversable immutable mutable variant collection whatever complexity following diagram contains important distinction immutable mutable hierarchy iterable collection may iterated provide iterator method thus foreach seq collection ordered set mathematical set unordered collection unique item map associative array also unordered use prefer using immutable collection applicable circumstance make program easier reason since referentially transparent thus also threadsafe default use mutable namespace explicitly import scalacollectionmutable refer set instead import scalacollectionmutable val set mutableset make clear mutable variant used use default constructor collection type whenever need ordered sequence necessarily linked list semantics use seq constructor val seq seq val set set val map map one two three style separate semantics collection implementation letting collection library use appropriate type need map necessarily redblack tree furthermore default constructor often use specialized representation example map use object map key corollary method constructor receive generic collection type appropriate typically boil one iterable seq set map method need sequence use seq list word caution default traversable iterable seq type scope defined scalapackage scalacollection version opposed map set defined predefscala scalacollectionimmutable version mean example default seq type immutable mutable implementation thus method relies collection parameter immutable using traversable iterable seq must specifically requireimport immutable variant otherwise someone may pas mutable version style functional programming encourages pipelining transformation immutable collection shape desired result often lead succinct solution also confusing reader often difficult discern author intent keep track intermediate result implied example let say wanted aggregate vote different programming language sequence language num vote showing order vote least could write val vote seq scala java scala scala python val orderedvotes vote groupby map case count countsfoldleft toseq sortby reverse succinct correct nearly every reader difficult time recovering original intent author strategy often serf clarify name intermediate result parameter val votesbylang vote groupby case lang lang val sumbylang votesbylang map case lang count val countsonly count map case count count lang countsonlysum val orderedvotes sumbylangtoseq sortby case count count reverse code nearly succinct much clearly express transformation take place naming intermediate value structure data operated naming parameter worry namespace pollution style group expression val orderedvotes val votesbylang performance high level collection library higher level construct generally make reasoning performance difficult stray instructing computer directly word imperative style harder predict exact performance implication piece code reasoning correctness however typically easier readability also enhanced scala picture complicated java runtime scala hide boxingunboxing operation incur severe performance space penalty focusing low level detail make sure using collection appropriate use make sure datastructure unexpected asymptotic complexity complexity various scala collection described first rule optimizing performance understand application slow operate without data profile application proceeding focus first hot loop large data structure excessive focus optimization typically wasted effort remember knuth maxim premature optimisation root evil often appropriate use lower level collection situation require better performance space efficiency use array instead list large sequence immutable vector collection provides referentially transparent interface array use buffer instead direct sequence construction performance matter java collection use scalacollectionjavaconverters interoperate java collection set implicits add asjava asscala conversion method use ensures conversion explicit aiding reader import scalacollectionjavaconverters val list javautillist int seq asjava val buffer scalacollectionmutablebuffer int listasscala concurrency modern service highly concurrent common server coordinate thousand simultaneous operation handling implied complexity central theme authoring robust system software thread provide mean expressing concurrency give independent heapsharing execution context scheduled operating system however thread creation expensive java resource must managed typically use pool creates additional complexity programmer also high degree coupling difficult divorce application logic use underlying resource complexity especially apparent creating service high degree fanout incoming request result multitude request yet another tier system system thread pool must managed balanced according ratio request tier mismanagement one thread pool bleeds another robust system must also consider timeouts cancellation require introduction yet control thread complicating problem note thread cheap problem would diminished pooling would required timed thread could discarded additional resource management would required thus resource management compromise modularity future use future manage concurrency decouple concurrent operation resource management example finagle multiplex concurrent operation onto thread efficient manner scala lightweight closure literal syntax future introduce little syntactic overhead become second nature programmer future allow programmer express concurrent computation declarative style composable principled handling failure quality convinced u especially well suited use functional programming language encouraged style prefer transforming future creating future transformation ensure failure propagated cancellation signalled free programmer thinking implication java memory model even careful programmer might write following issue rpc time sequence print result val p new promise list result var result list result nil def collect dorpc onsuccess result result result result resultslength collect else psetvalue result onfailure psetexception collect p onsuccess result printf got result sn resultsmkstring programmer ensure rpc failure propagated interspersing code control flow worse code wrong without declaring result volatile ensure result hold previous value iteration java memory model subtle beast luckily avoid pitfall using declarative style def collect result list result nil future list result dorpc flatmap result resultslength collect result result else futurevalue result result collect onsuccess result printf got result sn resultsmkstring use flatmap sequence operation prepend result onto list proceed common functional programming idiom translated future correct requires le boilerplate le error prone also read better use future combinators futureselect futurejoin futurecollect codify common pattern operating multiple future combined throw exception method return future future represent successful failed computation therefore important error involved computation properly encapsulated returned future concretely return futureexception instead throwing exception def divide x int int future result return futureexception new illegalargumentexception divisor futurevalue xy fatal exception represented future exception include one thrown resource exhausted like outofmemoryerror also jvmlevel error like nosuchmethoderror condition one jvm must exit predicate scalautilcontrolnonfatal twitter version comtwitterutilnonfatal used identify exception returned futureexception collection subject concurrent collection fraught opinion subtlety dogma fud practical situation nonissue always start simplest boring standard collection serf purpose reach concurrent collection know synchronized one jvm sophisticated machinery make synchronization cheap efficacy may surprise immutable collection use referentially transparent reasoning concurrent context simple mutation immutable collection typically handled updating reference current value var cell atomicreference care must taken apply correctly atomics must retried var must declared volatile order published thread mutable concurrent collection complicated semantics make use subtler aspect java memory model make sure understand implication especially respect publishing update use synchronized collection also compose better operation like getorelseupdate implemented correctly concurrent collection creating composite collection especially error prone control structure program functional style tend require fewer traditional control structure read better written declarative style typically implies breaking logic several small method function gluing together match expression functional program also tend expressionoriented branch conditionals compute value type yield computes comprehension recursion commonplace recursion phrasing problem recursive term often simplifies tail call optimization applies checked tailrec annotation compiler even translate code regular loop consider fairly standard imperative version heap fixdown def fixdown heap array int n int unit var k int n k var j k j n heap j heap j j heap k heap j return else swap heap k j k j every time loop entered working state dirtied previous iteration value variable function branch taken return middle loop correct position found keen reader find similar argument dijkstra go statement considered harmful consider tail recursive implementation tailrec final def fixdown heap array int j int j return val j heap heap else heap heap swap heap fixdown heap j every iteration start welldefined clean slate reference cell invariant abound much easier reason easier read well also performance penalty since method tailrecursive compiler translates standard imperative loop return say imperative structure also valuable many case well suited terminate computation early instead conditional branch every possible point termination indeed fixdown return used terminate early end heap return used cut branching establish invariant help reader reducing nesting get making easier reason correctness subsequent code array accessed bound point especially useful guard clause def compare anyref b anyref int eq b return val systemidentityhashcode compare systemidentityhashcode b return slow path use return clarify enhance readability would imperative language avoid using return result computation instead def suffix int return st else return nd else return rd else return th prefer def suffix int st else nd else rd else th using match expression superior either def suffix int match case st case nd case rd case th note return hidden cost used inside closure seq foreach elem elemislast return process implemented bytecode exception catchingthrowing pair used hot code performance implication loop comprehension provides succinct natural expression looping aggregation especially useful flattening many sequence syntax belies underlying mechanism allocates dispatch closure lead unexpected cost semantics example item container item return may cause runtime error container delay computation making return nonlocal reason often preferrable call foreach flatmap map filter directly use fors clarify require assert require assert serve executable documentation useful situation type system express required invariant assert used invariant code assumes either internal external example val stream getclassgetresourceasstream someclassdata assert stream null whereas require used express api contract def fib n int require n functional programming value oriented programming confers many advantage especially used conjunction functional programming construct style emphasizes transformation value stateful mutation yielding code referentially transparent providing stronger invariant thus also easier reason case class pattern matching destructuring binding type inference lightweight closure methodcreation syntax tool trade case class algebraic data type case class encode adts useful modelling large number data structure provide succinct code strong invariant especially used conjunction pattern matching pattern matcher implement exhaustivity analysis providing even stronger static guarantee use following pattern encoding adts case class sealed trait tree case class node left tree right tree extends tree case class leaf value extends tree type tree two constructor node leaf declaring type sealed allows compiler exhaustivity analysis since constructor added outside source file together pattern matching modelling result code succinct obviously correct def findmin ordered tree tree tree match case node left right seq findmin left findmin right min case leaf value value recursive structure like tree constitute classic application adts domain usefulness much larger disjoint union particular readily modelled adts occur frequently state machine option option type container either empty none full value provides safe alternative use null used instead null whenever possible option collection one item embellished collection operation use write var username option string none username foobar instead var username string null username foobar since former safer option type statically enforces username must checked emptyness conditional execution option value done foreach instead optisdefined operate optget write opt foreach value operate value style may seem odd provides greater safety call exceptional get brevity branch taken use pattern matching opt match case value operate value case none defaultaction missing default value use getorelse operate opt getorelse defaultvalue overuse option sensible default null object use instead option also come handy constructor wrapping nullable value option getclassgetresourceasstream foo option inputstream assumes value none getresourceasstream return null pattern matching pattern match x match pervasive well written scala code conflate conditional execution destructuring casting one construct used well enhance clarity safety use pattern matching implement type switch obj match case str string case addr socketaddress pattern matching work best also combined destructuring example matching case class instead animal match case dog dog dog format dogbreed case animalspecies write animal match case dog breed dog format breed case otherspecies write custom extractor dual constructor apply otherwise use may place use pattern matching conditional execution default make sense collection library usually provide method return option avoid val x list match case head head case nil default val x listheadoption getorelse default shorter communicates purpose partial function scala provides syntactical shorthand defining partialfunction val pf partialfunction int string case even may composed orelse val tf int string pf orelse case odd tf odd tf even partial function arise many situation effectively encoded partialfunction example argument method trait publisher def subscribe f partialfunction unit val publisher publisher int publishersubscribe case isprime println found prime case count ignore rest situation might otherwise call returning option attempt classify throwable logging type classifier throwable option javautillogginglevel might better expressed partialfunction type classifier partialfunction throwable javautillogginglevel affords greater composability val classifier val classifier val classifier classifier orelse orelse case javautillogginglevelfinest destructuring binding destructuring value binding related pattern matching use mechanism applicable exactly one option lest accept possibility exception destructuring bind particularly useful tuples case class val tuple val char digit tuple val tweet tweet tweeting timenow val tweet text timestamp tweet laziness field scala computed need val prefixed lazy field method equivalent scala lest field private lazy val field computation roughly shorthand var thefield none def field thefieldisdefined thefieldget else thefield computation thefieldget ie computes result memoizes use lazy field purpose avoid using laziness laziness required semantics case better explicit since make cost model explicit side effect controlled precisely lazy field thread safe call name method parameter may specified byname meaning parameter bound value computation may repeated feature must applied care caller expecting byvalue semantics surprised motivation feature construct syntactically natural dsl new control construct particular made look much like native language feature use callbyname control construct obvious caller passed block rather result unsuspecting computation use callbyname argument last position last argument list using callbyname ensure method named obvious caller argument callbyname want value computed multiple time especially computation side effecting use explicit function class sslconnector mkengine sslengine intent remains obvious caller left without surprise flatmap flatmap combination map flatten deserves special attention subtle power great utility like brother map frequently available nontraditional collection future option behavior revealed signature container flatmap b f container b container b flatmap invokes function f element collection producing new collection flattened result example get permutation two character string nt character repeated twice val char z val perm char flatmap char flatmap b b seq c c format b else seq equivalent concise forcomprehension roughly syntactical sugar val perm char b char b yield c c format b flatmap frequently useful dealing option collapse chain option one val host option string val port option int val addr option inetsocketaddress host flatmap h port map p new inetsocketaddress h p also made succinct val addr option inetsocketaddress h host p port yield new inetsocketaddress h p use flatmap future discussed future section object oriented programming much scala vastness lie object system scala pure language sense value object distinction primitive type composite one scala also feature mixins allowing orthogonal piecemeal construction module flexibly put together compile time benefit static type checking motivation behind mixin system obviate need traditional dependency injection culmination component style programming cake pattern dependency injection use however found scala remove much syntactical overhead classic constructor dependency injection rather use clearer dependency still encoded constructor type class construction syntactically trivial becomes breeze boring simple work use dependency injection program modularization particular prefer composition inheritance lead modular testable program encountering situation requiring inheritance ask would structure program language lacked support inheritance answer may compelling dependency injection typically make use trait trait tweetstream def subscribe f tweet unit class hosebirdstream extends tweetstream class filestream extends tweetstream class tweetcounter stream tweetstream streamsubscribe tweet count common inject factory object produce object case favor use simple function specialized factory type class filteredtweetcounter mkstream filter tweetstream mkstream publictweets subscribe tweet publiccount mkstream dm subscribe tweet dmcount trait dependency injection preclude use common interface implementation common code trait quite contrary use trait highly encouraged exactly reason multiple interface trait may implemented concrete class common code reused across class keep trait short orthogonal lump separable functionality trait think smallest related idea fit together example imagine something io trait ioer def write byte array byte def read n int array byte separate two behavior trait reader def read n int array byte trait writer def write byte array byte mix together form ioer new reader interface minimalism lead greater orthogonality cleaner modularization visibility scala expressive visibility modifier important use define constitutes public api public apis limited user inadvertently rely implementation detail limit author ability change crucial good modularity rule much easier expand public apis contract poor annotation also compromise backwards binary compatibility code private class member marked private private val x int visible instance class subclass case want private private val x int limit visibility particular instance scala compiler also able translate private simple field access since access limited statically defined class sometimes aid performance optimization singleton class type common scala create singleton class type example def foo new foo bar baz situation visibility constrained declaring returned type def foo foo bar new foo bar baz caller foo see restricted view foo bar returned instance structural typing use structural type normal use convenient powerful feature unfortunately efficient implementation jvm however due implementation quirk provide nice shorthand reflection val obj anyref objasinstanceof def close close error handling scala provides exception facility use commonplace error programmer must handle error properly correctness instead encode error explicitly using option comtwitterutiltry good idiomatic choice harness type system ensure user properly considering error handling example designing repository following api may tempting trait repository key value def get key key value would require implementor throw exception key absent better approach use option trait repository key value def get key key option value interface make obvious repository may contain every key programmer must handle missing key furthermore option number combinators handle case example getorelse used supply default value missing key val repo repository int string repoget getorelse defaultstring handling exception scala exception mechanism checked compiler statically tell whether programmer covered set possible exception often tempting cast wide net handling exception however exception fatal never caught code try operation catch case almost always wrong would catch fatal error need propagated instead use comtwitterutilnonfatal extractor handle nonfatal exception try operation catch case nonfatal exc garbage collection spend lot time tuning garbage collection production garbage collection concern largely similar java though idiomatic scala code tends generate shortlived garbage idiomatic java code byproduct functional style hotspot generational garbage collection typically make nonissue shortlived garbage effectively free circumstance tackling gc performance issue watch presentation attila illustrates experience gc tuning scala proper tool mitigate gc problem generate le garbage act without data unless something obviously degenerate use various java profiling tool include heapster gcprof java compatibility write code scala used java ensure usage java remains idiomatic oftentimes requires extra effort class pure trait exactly equivalent java counterpart sometimes separate java apis need provided good way get feel library java api write unittest java compilation also ensures javaview library remains stable time scala compiler volatile regard trait contain implementation directly usable java extend abstract class trait instead directly usable java trait animal def eat animal def eatmany animal seq animal animal foreach eat abstract class javaanimal extends animal twitter standard library important standard library twitter util finagle util considered extension scala java standard library providing missing functionality appropriate implementation finagle rpc system kernel distributed system component future future discussed briefly concurrency section central mechanism coordination asynchronous process pervasive codebase core finagle future allow composition concurrent event simplify reasoning highly concurrent operation also lend highly efficient implementation jvm twitter future asynchronous blocking operation basically operation suspend execution thread network io disk io example must handled system provides future result said operation finagle provides system network io future plain simple hold promise result computation yet complete simple container placeholder computation could fail course must also encoded future exactly one state pending failed completed aside composition let revisit mean composition combining simpler component complicated one canonical example function composition given function f g composite function x g f x result applying f x first applying g result written scala val f int itostring val g string ss val h g compose f int string scala h javalangstring function h composite new function combine f g predefined way future type collection container either element find standard collection method eg map filter foreach since future value deferred result applying method necessarily also deferred val result future int val resultstr future string result map itostring function itostring invoked integer value becomes available transformed collection resultstr also pending state time list flattened val listoflist list list int val list list int listoflistflatten make sense future val futureoffuture future future int val future future int futureoffutureflatten since future deferred implementation flatten return immediately return future result waiting completion outer future future future int inner one future future int outer future fails flattened future must also fail future like list also define flatmap future defines signature flatmap b f future b future b like combination map flatten could implement way def flatmap b f future b future b val mapped future future b map f val flattened future b mappedflatten flattened powerful combination flatmap define future result two future sequenced second future computed based result first one imagine needed two rpcs order authenticate user id could define composite operation following way def getuser id int future user def authenticate user user future boolean def isidauthed id int future boolean getuser id flatmap user authenticate user additional benefit type composition error handling builtin future returned isauthed fail either getuser authenticate extra error handling code style future callback method respond onsuccess onfailure ensure return new future chained parent future guaranteed completed parent enabling pattern like acquireresource onsuccess value computesomething value ensure freeresource freeresource guaranteed executed computesomething allowing emulation native try finally pattern use onsuccess instead foreach symmetrical onfailure better name purpose also allows chaining always try avoid creating promise instance directly nearly every task accomplished via use predefined combinators combinators ensure error cancellation propagated generally encourage dataflow style programming usually obviates need synchronization volatility declaration code written tailrecursive style subject stackspace leak allowing efficient implementation loop dataflowstyle case class node parent option node def getnode id int future node def gethierarchy id int node list node nil future node getnode id flatmap case n node parent gethierarchy parent n node case n futurevalue n node reverse future defines many useful method use futurevalue futureexception create presatisfied future futurecollect futurejoin futureselect provide combinators turn many future one ie gather part scattergather operation cancellation future implement weak form cancellation invoking future cancel directly terminate computation instead propagates level triggered signal may queried whichever process ultimately satisfies future cancellation flow opposite direction value cancellation signal set consumer propagated producer producer us oncancellation promise listen signal act accordingly mean cancellation semantics depend producer default implementation cancellation hint local util local provides reference cell local particular future dispatch tree setting value local make value available computation deferred future thread analogous thread local except scope java thread tree future thread trait user def name string def incrcost point int val user new local user user currentuser rpc ensure user incrcost user ensure block refer value user local time callback added thread local local convenient almost always avoided make sure problem sufficiently solved passing data around explicitly even somewhat burdensome local used effectively core library common concern threading rpc trace propagating monitor creating stack trace future callback solution would unduly burden user local inappropriate almost situation offerbroker concurrent system greatly complicated need coordinate access shared data resource actor present one strategy simplification actor sequential process maintains state resource data shared messaging actor sharing data requires communicating actor offerbroker build three important way first communication channel broker first class send message via broker actor directly secondly offerbroker synchronous mechanism communicate synchronize mean use broker coordination mechanism process sent message process b b agree state system lastly communication performed selectively process propose several different communication exactly one obtain order support selective communication well composition general way need decouple description communication act communicating offer persistent value describes communication order perform communication act offer synchronize via sync method trait offer def sync future return future yield exchanged value communication obtains broker coordinate exchange value offer channel communication trait broker def send msg offer unit val recv offer creating two offer val b broker int val sendof bsend val recvof brecv sendof recvof synchronized process sendofsync process recvofsync offer obtain value exchanged selective communication performed combining several offer offerchoose def choose ofs offer offer yield new offer synchronized obtains exactly one ofs first one become available several available immediately one chosen random obtain offer object number oneoff offer used compose offer broker offertimeout duration offer unit offer activates given duration offernever never obtain offerconst value obtains immediately given value useful composition via selective communication example apply timeout send operation offerchoose offertimeout brokersend value sync may tempting compare use offerbroker synchronousqueue different subtle important way offer composed way queue simply example consider set queue represented broker val new broker int val new broker int val new broker int let create merged queue reading val anyq offer int offerchoose anyq offer read first available queue note anyq still synchronous still semantics underlying queue composition simply possible using queue example simple connection pool connection pool common network application often tricky implement example often desirable timeouts acquisition pool since various client different latency requirement pool simple principle maintain queue connection satisfy waiter come traditional synchronization primitive typically involves keeping two queue one waiter connection one connection waiter using offerbrokers express quite naturally class pool conns seq conn private val waiter new broker conn private val returnconn new broker conn val get offer conn waitersrecv def put c conn returnconn c private def loop connq queue conn offerchoose connqisempty offernever else val head rest connqdequeue waiterssend head map loop rest returnconnrecv map c loop connqenqueue c sync loop queueempty conns loop always offer connection returned offer send one queue nonempty using persistent queue simplifies reasoning interface pool also offer caller wish apply timeout use combinators val conn future option conn offerchoose poolget map conn conn offertimeout map none sync extra bookkeeping required implement timeouts due semantics offer offertimeout selected longer offer receive pool pool caller never simultaneously agreed receive send respectively waiter broker example sieve eratosthenes often useful sometimes vastly simplifying structure concurrent program set sequential process communicate synchronously offer broker provide set tool make simple uniform indeed application transcends one might think classic concurrency problem concurrent programming aid offerbroker useful structuring tool subroutine class module another important idea csp one example sieve eratosthenes structured successive application filter stream integer first need source integer def integer int offer int val b new broker int def gen n int unit bsend n sync ensure gen n gen brecv integer n simply offer consecutive integer starting n need filter def filter offer int prime int offer int val b new broker int def loop insync onsuccess prime bsend sync ensure loop else loop loop brecv filter p return offer remove multiple prime p finally define sieve def sieve val b new broker int def loop offer int prime ofsync bsend prime sync loop filter prime loop integer brecv loop work simply read next prime number applies filter excludes prime loop recurses successive prime filtered sieve print first prime val prime sieve foreach println primessync besides structured simple orthogonal component approach give streaming sieve priori need compute set prime interested enhancing modularity acknowledgment lesson herein twitter scala community hope faithful chronicler blake matheny nick kallen steve gury raghavendra prabhu provided much helpful guidance many excellent suggestion yourkit good profiler back finagle heap balancer back
287,Lobsters,scala,Scala programming,Scala OOP Galore,http://www.vasinov.com/blog/scala-oop-galore/,scala oop galore,class object abstract class trait case class implicit class next class referentially transparent object abstract class undesirable trait composition inheritance diamond problem article another great read case class implicit class three limitation refinement next,scala hybrid programming language implement major functional programming oop concept always one way something scala sometimes feel overwhelming first started programming scala year ago confused many different oop construct ranging straightforward regular abstract class trait object case class article like give overview different oopinspired structure scala used real life keeping program functional ie stupid animal fish tank example assume reader know scala java dynamic language like ruby python class object abstract class trait case class implicit class next class scala us classbased inheritance surprise basic class core oop model class could helpful organizing code however use like would use java class significant problem would arise called mutable state mean instance method referentially transparent nono functional programming consider following basic example scala class written java style class logger var context string generic def context string thiscontext context def info string println info context def error string println error context val l new logger linfo test message output info generic test message lcontext controller linfo test message output info controller test message implemented custom constructor set instance variable custom value problem pretty obvious function info error referentially transparent since return different result depending hidden mutable state context variable changed inside outside object latter true need explicitly define setter getters issue fixed least two path follow first way use constructor private instance variable change new class instance created going use custom primary constructor brevity class logger private var context string generic def info string println info context def error string println error context val l new logger controller linfo test message output info controller test message following line generate error variable context class logger accessed logger lcontext model linfo test message output info controller test message outside object change state context solution little better best logger internal method still potentially modify context resulting broken referential transparency also read instance variable anymore without creating getters scala almost never want ultimate solution eliminate mutable state use readonly variable thing changed previous example class signature class logger val context string generic way instance variable modified internally externally still read access happens point program need change property class instance like almost everything functional programming create new instance class avoid mutable state one big surprise coming java javalike language scala static class member provides singleton construct called object member static separation concern scala could considered objectoriented java object object special type class instantiated make singleton object member static example object object cache extends legacyjavaredisadapter val new redisinmemoryadapter def get k string option string aget k match case v string v case none def set k string v option boolean storageset k v cacheset testkey testvalue return true cacheget testkey return testvalue cacheget nonexistentvalue return none normally use object purpose use singleton java logging caching utility great example singleton choose implement dependency injection case scala overkill another great use object shared resource control like managing pool connection database whole application writing file first glance object like traditional singleton meet eye make really attractive usable contrast antipatterny java singleton one important distinction object polymorphic extend implement oop construct see example extended arbitrary legacy java class scala application polymorphism mean easily inject object dependency without tight coupling headache global state associated java singleton another big distinction object traditional singleton scala object take care boilerplate code hard overstate imagine need implement getinstance method every one singleton need instantiate singleton instance class approach promotes single responsibility principle make easy testing said object later introduce oop concept abstract class abstract class scala similar java subclassed never instantiated also abstract class constructor type parameter case would want use abstract class scala planning inheriting java code want distribute compiled form case abstract class preferable like untyped lambda calculus hierarchy since casetocase inheritance case class prohibited scala required constructor argument general rule thumb stick scala trait circumstance trait discussed later article example abstract class scala abstract class basemodel db database table string val id int abstract value val tablehelper db table def tojson string abstract method def get tget id def save option int tsave tojson def update boolean tupdate tojson def delete boolean tdelete id case class posttemplate title string body string class post val id int val template posttemplate extends basemodel posttemplate new database post def tojson id id title templatetitle body templatebody val p new post posttemplate scala oop galore scala hybrid ptojson return id title scala oop galore body scala hybrid java one inherent limitation abstract class concrete class object inherit one abstract class limiting multiple inheritance promoting inheritance composition case undesirable scala problem allows multiple inheritance trait trait coming language allows mixins eg module ruby trait look familiar nutshell component class stacked together trait akin java interface allowed method implementation one big difference class trait trait support constructor parameter type parameter trait supposed minimal focus one responsibility way multiple trait stacked together oop principle called composition inheritance generally good practice follow allows better extensibility flexibility program example trait scala trait boldable def bold text string string text def unbold text string string trait italicizable def italicize text string string text def unitalicize text string string object markdownwrapper extends boldable italicizable def boldanditalic text string string bold italicize text markdownwrapperwrapwithboldanditalic scala rock return scala rock scala solve multiple inheritance problem trait also known diamond problem solution fairly straightforward us overridden member right left implementation right always win implementation left example trait genericstream val stream stream int trait integerstreams extends genericstream override val stream streamfrom val oddsstream stream int streamfrom val evensstream stream int streamfrom trait fibonaccistream extends genericstream override val stream stream int streamscanleft object funkymath extends integerstreams fibonaccistream def generateintegers n int list anyval streamtake n tolist generateintegers use fibonaccistreamstream implementation case get multiple inheritance work must use override keyword otherwise get compile exception conflicting member learn trait article dig trait us explains delegating super work another great read trait cake pattern scala way dependency injection case class case class immutable dataholding entity primarily used pattern matching might seem weird beginner scala developer outset start using practice case class almost like class extra property short initialization syntax without new keyword property make really easy decompose using pattern matching case class primary constructor automatically use vals parameter immutable default builtin tostring method generates string case class name constructor argument builtin equality comparison mean compare two instance case class like caseclassa caseclassa without implementing equal hand hashcode method based case class constructor argument builtin copy method make copy case class instance custom parameter value rewritten example caseclassa copy someparameter return new instance caseclassa modified someparameter example case class used real world trait resource def fullpath string case class folder name string path option string none extends resource def fullpath string path match case p list p name mkstring case none name case class file name string folder option folder none extends resource def fullpath string folder match case f list ffullpath name mkstring case none name val resource vector resource file folder example dev folder tmp folder bin usr file zshrc resource foreach case f file println file ffullpath case f folder println folder ffullpath code output file folder tmp folder usrbin file zshrc example pretty self explanatory two case class folder file created default constructor value case class inherit trait abstract fullpath method define resource vector contain resource folder file polymorphism win finally loop vector match element based case class example act like type extremely powerful tool save ton boilerplate code make program lot readable case class magically instantiated without new keyword lie beyond syntactic sugar case class called companion object automatically created default constructor happens background folder case class previous example case class file name string folder option folder none extends resource def fullpath string folder match case f list ffullpath name mkstring case none name object folder def apply name string folder option folder none new file name folder object folder created automatically scala type folder tmp really happens initialize folder object first apply method also called factory method creates instance case class helpful starter need write new keyword every time initialize case really reduces visual clutter complex hierarchy second reason define companion object regular class case class really helpful situation want something constructor argument advanced example pas two different entity companion objectcase class pair end instance defined primary constructor import scalautil failure success try case class product name string url option string case class user name string fullname string age int object customer def apply u user p product option customer try require uage require unamematches new customer u p match case success c c case failure e none case class customer username string projectname string age int def u user p product uname pname uage customer user vasily vasily vasinov product amazon none code return customer vasily amazon firstly defined custom constructor customer case class call primary constructor decomposed value product user instance secondly created custom companion object apply method match custom constructor case class method static parameter checking return customer success none failure pretty cool huh pattern quite popular scala code good reason code becomes better separated readable implicit class implicit class really powerful extension tool class anyone coming ruby recognize implicit class alternative monkey patching ruby would write something like wanted extend existing class without introducing new class class fixnum def odd self end def even self end end return false example like usually used show power ruby certainly impressive scala something similar better consider following example object intsandbox extends app implicit class intwithhelpers val x int def isodd x def iseven x return false defined implicit intwithhelpers class single constructor value type int instructs compiler implicitly convert int scope intwithhelpers inherits int member one huge difference scala ruby scala applies implicit current scope mean import implicit class wherever need without littering global namespace allows le collision compact dsl remember three limitation creating implicit class first defined inside another trait class object second one nonimplicit argument constructor lastly another object member scope name implies case class implicit since companion object name fair ruby notice proposed change spec add local monkey patching called refinement exists experimental feature ruby expected exist future version ruby next probably got pretty good feel possible scala term functional oop recommend looking production code example experimenting different scenario require objectoriented technique certainly hidden thing oop structure described article leave explore please share feedback correction always hugely appreciated
288,Lobsters,scala,Scala programming,Operating Apache Samza at Scale,http://engineering.linkedin.com/samza/operating-apache-samza-scale,operating apache samza scale,logcentric system apache kafka kafka isr paxos understandability samza apache samza interesting nearline calculation simple samza application kafka lingo mirroring message apache yarn resource management hudson artifactory binary repository metric metric metric graphite rrd whisper influxdb yaml riemann cabot hardware configuration moving forward,linkedin use logcentric system called apache kafka move ton data around familiar kafka think publishsubscribe system model message log entry however difficult developer spend time thinking problem domain relevant application addition complex fault tolerant semantics required work log kafka isr paxos term understandability samza apache samza framework give developer tool need process message incredibly high rate speed still maintaining fault tolerance allows u perform interesting nearline calculation data without major architectural change samza ability retrieve message kafka process way output result back kafka simple samza application look bit like although samza designed work many type streaming system linkedin primarily depend kafka message stream diving run samza linkedin let start kafka related terminology kafka lingo every day linkedin kafka ingesting half trillion message terabyte might picturing massive cluster magically handle number message without falling really accurate really graph cluster handle specific type message control flow message cluster cluster mirroring message directed graph cluster ability fail data center usually provision cluster topology keep message around data center go completely offline datacenter concept local aggregate kafka cluster local cluster mirrored across data center aggregate cluster one datacenter go shift traffic another without skipping beat horizontal layer topology refer tier tier set cluster across multiple data center perform function example diagram shown local tier aggregate tier local tier set local cluster every data center aggregate tier set aggregate cluster every datacenter also another tier refer offline aggregate tier production aggregate tier mirrored offline aggregate tier batch processing example mapreduce job utilizes hadoop allows u separate production batch processing different datacenters since single local cluster single aggregate cluster within datacenter would result huge cluster reliability risk split local cluster several cluster different category data example application metric message contains sample cpu usage tracking event example advertisement impression event message sent different cluster local aggregate cluster kafka could probably handle single huge cluster every type message throw splitting thing give u better chance elegantly dealing complex failure also another term refer pipeline pipeline path message travel source destination example metric pipeline might work first production application produce message say something like memory used host message sent application production metric local tier message mirrored production metric aggregate tier aggregate metric offline tier finally metric consumed long term storage system designed display pretty graph emit alert employee path producer consumer across datacenters refer pipeline many message share common pipeline nice way quickly describe message going came samza fit another set kafka cluster dedicated samza job mirrored aggregate tier kafka cluster samza associated cluster run apache yarn launching samza job may notice diagram kafka samza share hardware past colocated kafka samza hardware however ran issue samza job would interfere kafka page cache separated onto different hardware future like explore locality samza kafka example task paired partition leader partial isr would share rack work well u moment resource management although modular design samza make simple support almost resource manager future yarn currently option time writing job launch samza job link yarn application master api api samza work yarn request resource container run samza task task fails samza job negotiates yarn find replacement resource get point starting samza job run yarn time linkedin built internal tooling designed simplify automate software building testing utilize write build deploy samza job first developer creates samza project linkedin tooling creates version control repository git subversion depending developer preference every time commit repository automated tooling build project using hudson create samza job package test post commit task finished job package automatically versioned uploaded artifactory binary repository job package available artifactory tool install small set file onto host yarn resourcemanager one file script tell yarn download job package artifactory unpack job working directory launch samza application master metric metric metric job running yarn job nt yet time monitor everything luxury using something call ingraphs accomplish ingraphs similar open source graphite backend based rrd whisper influxdb samza job start linkedin default metric produced kafka consumed ingraphs since samza job easily produce ten thousand metric per second introduced default metric blacklist keep thing bit quieter engineer actually need data holding onto historical metric making easily accessible everything young generation size process callback latency extremely valuable tool nt overlooked able visualize metric useful even important ability create alert take action based metric another application linkedin call autoalerts autoalerts language mostly yaml alerting metric similar functionality alert related feature riemann cabot alert minimum maximum threshold defined example screenshot threshold message per second per task defined minimum threshold job throughput task go value appropriate action taken automatic remediation oncall notification every alert create escalation path alert simply send email thing nt need immediate attention minor hardware failure successfully failed alert nonresponsive load balancer would escalated central network operation center would engage appropriate person oncall service metric monitor vary example threshold set application master heap size heap size fall certain threshold know good chance job trouble also several alert yarn including number unhealthy nodemanagers jvm metric number active resource master regard high availability also graph number job killed yarn failed reason outside samza also monitor disk iop byte available cpu memory network usage local interface rack switch uplink also hardwarespecific alert boolean alert health ssds one particular type alert like emphasize capacity alert threshold set based historical growth lead time order hardware alert go know time plug current capacity growth projection model provides estimate much hardware need order since currently limited memory rapid growth aim keep memory use samza job time word double size cluster every time order hardware platform matures growth slows relative total size cluster expect slowly increase target probably settling around peak traffic still unexpected growth addition metric monitor also graph ton data point without setting threshold many monitoring system handle mysterious subtle problem encountered ability quickly skim thousand data point glance often uncovers root problem least point u general direction need investigate hardware configuration order new hardware kafka broker use standard linkedin kafka configuration kafka broker samza exactly regular broker except relaxed threshold low number underreplicated partition far current scale found job usually memory bound node run samza task primarily look healthy ram core ratio currently aim core hardware thread per core ram per server moving forward expect change likely network next limiting factor job utilize samza keyvalue store typically use pcie based ssd terabyte two available space unlike ssds zookeeper cluster typically nt worry gc pause long overall throughput remains high moving forward although nt many stability issue samza like make entire system robust grow larger one thing improving soon handle job task isolation experimented cgroups namespaces various form yet settle path make u completely happy mostly come disk isolation another area like explore selfservice model developer minimal interaction reliability engineering create new samza application overview operate samza linkedin significant amount success working samza plan use many new task upcoming year
289,Lobsters,scala,Scala programming,Colossus: I/O and Microservice library for Scala,http://tumblr.github.io/colossus/,colossus io microservice library scala,http,redirected automatically follow http
290,Lobsters,scala,Scala programming,colossus - I/O and Microservice library,https://github.com/tumblr/colossus,colossus io microservice library,colossus http tumblrgithubiocolossus google group json serialization plaintext license http,colossus colossus lightweight io framework building scala service full documentation found http tumblrgithubiocolossus general discussion q check google group colossus take part techempower web framework benchmark json serialization plaintext test overview find repo colossus framework colossusmetrics highperformance metric library depend colossus colossusexamples simple example run colossustestkit small library containing useful tool testing colossustests unit integration test colossus colossusdocs markdown documentation license copyright tumblr inc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
291,Lobsters,scala,Scala programming,Type-safe transducers in Clojure. And Scala. And Haskell.,http://blog.podsnap.com/ducers2.html,typesafe transducer clojure scala haskell,tl dr update glossary initial fretting statetype rue despond update thanks twittersphere transducer blog post strangeloop talk brief glossary bother typed transducer clojure earlier post controversy slapless type function definition contravariant invariant covariant contravariant trick compromise typed clojure local type inference post slightly better variadic comp far prettier haskell scala haskell either conclusion tutorial,tl dr noted earlier transducer properly annotated clojure using coretyped probably trick necessary make work transducer scala require trick different one oh lovely haskell update led clojure gazette eric normand usually discriminating nt worry waste little time per previous batch update various subsequent post le topic clear wee bagatelle meant authoritative particular nobody try approach use scala obvious better one beginning fourth post series somewhat zanier one occupies remainder post series transducer post helped clarify thought referential transparency bug detection type system language evolution morbidly curious possible way person wrong topic might enjoy reading glossary transducerish term initial fretting stateful transducer statetype transducer scala rue despond update thanks twittersphere apparently confused difference universal existential type happily nt seem alone promise figure anyway would probably natural certainly concise stick traitapply solution scala try emulate haskell style interesting though attempt may hood complicated function still class apply method anyway haskell type nt acknowledge transducer might state scala clojure version nt either acceptable culture transducer wo nt explain transducer canonical introduction rich hickey blog post explanation strangeloop talk contributed brief glossary may possibly helpful bother typed transducer clojure end earlier post noted despite controversy subject transducer type defined coretyped walk bit nt panic tdefalias reducingfn ttfn variance contravariant r variance invariant r r tdefalias transducer ttfn variance covariant b variance contravariant tall r reducingfn r reducingfn b r manner fairly evocative way haskell type reducingfn r r r type transducer b forall r reducingfn r reducingfn b r representation may explanatory anyway graphical illustration rich talk explanation main point neither triumphal riposte transducer yet another thing nt good example superiority dynamic typing without type going figure transducer eventually doubt going understand type alone might even better go untyped since good flailing trial error educational value le attractive option writing code meant something real type system helpful use transducer incredibly powerful point confounded mysterious bug creation get confused funny reversed order composition stare despairingly long stack trace containing multiple anonymous function festoon code printlns fancy logging macro headslap moment occurs slapless get detail annotation bit take given accept also reason special composition function compt transducer artificial goal going take sequence string representing integer like parse multiply something integer calculate sqrt n finally add root three transducer ignoring simplicity zero one argument alternative returned function tann tparsei transducer tint tstr defn tparsei rf fn result input rf result integerparseint input tann trepn transducer number number defn trepn rf fn result input rf rf result input input tann troot transducer double number defn troot rf fn acc rf acc pow double taking transducer type function given annotation make sense first transducer transforms function reduces integer one reduces string last transforms function reduces double one reduces integer one middle nt change type go well able compose transducer apply reducing function reduce reduce compt troot trepn tparsei nt get past typechecking domain x b b x argument tany number tany tany number tany tany tint tany tany tstr tany squinting last line slightly number number tint tstr see problem transducer reversed easy mistake make function function strewn also easy fix timely specific error wo nt pretend particularly elegant error get used reading hell lot timely specific exception stack trace runtime back straight narrow get result wanted user tcf compt tparsei trepn troot tall r r double r r string r user reduce compt troot trepn tparsei type function definition reducingfn transducer seem pretty useful make tdefalias reducingfn ttfn variance contravariant r variance invariant r r tfn indicates making type function ie function type return another type two type take type reducing r type reducing since ought able substitute function know consume number general function encounter ints reducingfn contravariant liskov substitution principle hand exact opposite true value returned function recipient want int going happy old number could handle short subtype r appears argument suggesting contravariance return type suggesting variance invariant transducer type function return type function consumes one reducingfn return another tdefalias transducer ttfn variance covariant b variance contravariant tall r reducingfn r reducingfn b r someone expecting transducer consumes particular kind reducingfn happy transducer consumes supertype reducingfn ie transducer contravariant type reducingfn used argument since reducingfns contravariant type reduce transducer must covariant contrast transducer covariant type reducingfn return since reducingfn contravariant type consumes transducer must contravariant b phew might come relief transducer nt give damn type r reduced advertise apathy time promising wo nt mess r need keyword indicating socalled existential type tdefalias transducer ttfn variance covariant b variance contravariant tall r reducingfn r reducingfn b r trick compromise typed clojure may wondered define special trepn repeating number could fact created general version tann nocheck trep tall transducer since clojure still dynamically typed underneath annotation exactly definition however actually use trep need inform typed clojure exactly existential variant really want instantiating tcf compt tparsei tinst trep tint troot typed clojure performs local type inference read limitation post reference contains gist nothing ever inferred working backwards return type function need provide crutch language kind automatic type inference perform local variety like ocaml haskell much fuller job course vast majority language none whatsoever oddity one mentioned earlier using clojure normal comp well consider type simple composition function b c b c b c make sense first function applied convert b second convert b c let compose function b c c b c b b c e e c b c b pattern pretty clear nt obvious annotation would capture type variadic possibility instead coretyped suggests x b x b b x b b mean succeeding function signature even limited composition type challenge coretyped function even slightly polymorphic eg tcf comp identity identity fail error roughly like user tcf comp identity identity type error polymorphic function comp could applied argument polymorphic variable b c domain b c b argument tall x x x tall x x x noted allowed instantiate specific version polymorphic type user tcf tinst identity long long long user tcf comp tinst identity long tinst identity long long long summary comp identity identity fails identity polymorphic comp tinst identity long tinst identity long succeeds instantiated specific type comp tinst identity long tinst identity long tinst identity long fails comp called three argument haskell type inference course sophisticated also make problem easier eschewing variadics favor currying one composition function take one argument happens return another function b c b c thus least two reason haskell easily deduce id id id id c c first nonlocal type inference second nt deal variadic function slightly better variadic comp ca nt much local type inference write comp let coretyped check arbitrary series composed transformation trick usual need go easy type checker use macro simplify need check defmacro comp f ifnot f comp comp comp f comp c b c b unwinds comp c comp b c b failure succeeds user tcf comp tinst identity long tinst identity long tinst identity long long long general transducer transducer b course polymorphic even specific seeming one like trepn transducer long long still r polymorphism type reduced thus comp trepn trepn fail familiar could applied argument error fortunately know transducer nt care r without loss actual generality lie user tcf comp tinst trepn tinst trepn number number lied make right casting polymorphism back tann nocheck lieagain tall b tany tany tany b tany tall r r r r b r def lieagain identity user tcf lieagain comp tinst trepn tany tinst trepn tany tall r r number r r number r combine two lie devariadification single macro defmacro compt tds let map list tinst tany tds lieagain comp demonstrated way compose transducer know need compt far prettier haskell much say transducer type definition type reducingfn r r r type transducer b forall r reducingfn r reducingfn b r essentially clojure everything else easier write fully general transducer tdub num transducer tdub f r b f r b trep transducer trep f r b f f r b b tparse read transducer string tparse f r f r read troot transducer double integer troot f r f r pow frominteger compose special effort tparse trep tdub troot reducingfn double r reducingfn string r foldl tparse trep tdub troot double scala haskell either let start unambitiously trying compose identity function scala seems run problem clojure scala identity compose identity console error type mismatch found nothing nothing required nothing identity compose identity going slightly different problem identity defined polymorphically identity time see repl type information erased deliberately erased instantiating function context type information available put back explicitly composition work composed function used polymorphically scala def ia identity compose identity ia scala ia int scala ia double chain composition manner look bit like haskell scala identity int compose identity int compose identity int int int really quite different scala compose method class rather standalone function le sugary rendition make clear scala identity int compose identity int compose identity int int int ok scala oo nature give u set tool completely different got clojure homoiconicity deployed qualitatively similar purpose case safe reasonably attractive transducer fact seen transducer scala implemented trait delegate virtual transform method eg type reducingfn r r r trait transducert b def transform r reducingfn r reducingfn b r make transducert act like function would add apply method make chained composition pretty compose method def apply r transform def compose c transducer c transducer c b val new transducer c b override def transform r reducingfn c r reducingfn b r rf rf work amusing try define transducer existential type using semimystical forsome annotation scala us purpose haskell forall typed clojure type reducingfn r r r type b r reducingfn r reducingfn b r type transducer b b r forsome type r honest nt know possible without intermediate ternary type assist creating simple transducer modify individual element cargo write mapping intermediate ternary type def b r f b b r rf reducingfn b r r r rf r f def mapping b b r forsome type r use like val tparsei transducer int string mapping string stoint def transducer double int mapping int mathpow nice far let try reducing something easy scala println list foldleft int tparsei console error type mismatch found int required string huh maybe trouble understanding scala println list foldleft int tparsei int j int ij console error type mismatch found int int int required transducerexistentialreducingfn int r forsome type r expands r forsome type r int r forsome type r different better maybe work cast explicitly ternary type scala println list foldleft int tparseiasinstanceof int string int little ugly whenever something even slightly ugly scala introduce implicit make confusing instead hence implicit class transducerops b transducer b def transform r rf reducingfn r b r rf coerce automatically hoisting transducer transducerop container class since already crossed rubicon let bring slick unicode along ride def r transform r scala println list foldleft int tparsei finally going want chained function composition let put method plus nifty symbol implicit class def compose c transducer c transducer c b comp def c transducer c transducer c b compose scala println list foldleft double tparsei trepeat x double double xy suspect trickery road flesh standard library transducer function get sequence work ended performing multiple coercion def sequence b transducer b data seq seq b val reducingfn b seq b r b r b val reducingfn seq b reducingfn b r forsome type r asinstanceof reducingfn seq b datafoldleft seq b datacompanionemptyasinstanceof seq b scala println sequence tparsei trepeat list list conclusion type one transducer obscure much harder understand callback however combine several transducer working program business reconciling checking type challenging language know haskell handle gracefully building entire system haskell might intimidating transducer bit bracing word normally applied haskell easy transducer invented clearly work unityped clojure find wondering one function abstraction far project large enough require many developer argument find beautiful might carry day believe capable type framework would least reduce frequency bug typed clojure point telling someone use transducer obviously improve life seem case little macro cleverness nudge problem coretyped sweet spot interesting play transducer scala many people given industrial effort gone scala centrality type checking language hardly surprising better job typed clojure margin victory slimmer would expected even latest release intellij plugin many type error nt show complete compilation general get forsome ilk nt wealth straightforward advice available hie thee course twittercurated tutorial good get
293,Lobsters,scala,Scala programming,Reactive Streams & Akka HTTP: Connect to the World,http://spray.io/msug/#/,reactive stream akka http connect world,reactive stream akka http http sprayiomsug hardware base changing new opponent amdahl law old tool nt cut lowlevel selected concurrency abstraction reactive stream basic common us stream structuring scaling business logic common problem backpressure critical point async boundary async boundary dynamic pushpull async boundary everywhere pipeline processing done right continuous pipeline across machine reactive stream project reactive stream status akka need http module akka http akkaio akka promise http akkaio distribution implies integration akkahttp origin sprayio spray feature spray weakness akkahttp spray reactive stream stream akkahttp http stream interface http server api simple http server basic http client api http model http request http response http model uri http entity http entity exemplary http header io stack akkaio akkahttpcore akkahttp serverside routing dsl serverside api layer overview api layer responsibility routing dsl show code predefined directive spray realworld example spray best practice sbtrevolver akkahttp roadmap,reactive stream akka http msug munich mathias doenitz presentation http sprayiomsug hardware base changing new opponent amdahl law parallelisation key old tool nt cut thread programmed directly high memory overhead startingstopping expensive interthread communication entirely left user locksmutexessemaphores synchronized volatile little sync race condition wrong result much sync deadlock poor performance hard use correctly lowlevel selected concurrency abstraction reactive stream basic stream ephemeral flow data item command element kind focused describing transformationand combinationcomposition possibly unbounded size common us stream bulk data transfer realtime data source batch processing large data set monitoring analytics structuring scaling business logic common problem backpressure critical point async boundary async boundary data element flow downstream demand flow upstream data item flow demand recipient control incoming data rate data flight bounded signaled demand dynamic pushpull push behavior consumer faster pull behavior producer faster switch automatically batching demand allows batching data async boundary everywhere actor thread cpu network node application pipeline processing done right continuous pipeline across machine reactive stream project participant engineer netflix twitter red hat pivotal typesafe reactive stream status reactive stream api close completion tck technology compatibility kit available several implementation various state progress scala akkastream currently idiomatic apis still evolving significantly lot new ground broken akka need http module nt feature creep highlevel connection actor heart akka toolkit runtime building highly concurrent distributed faulttolerant eventdriven application jvm source http akkaio akka promise build powerful concurrent concurrent distributed distributed application easily source http akkaio distribution implies integration sub system akkaremoting akkacluster external system akkahttp http successfulintegration protocol date akkahttp origin sprayio embeddable http stackentirely built akka actor focus http integration layer rather web application server clientside fully integrated typesafe stack threadpools config debugging etc spray feature immutable caseclassbased http model fast lightweight http client server powerful dsl serverside api definition fully async nonblocking actorfriendly modular testable scala actor way spray weakness handling chunked request clunky incomplete dealing large message entity difficult highlevel routing dsl sometimes unintuitive mistake caught compiletime deep implicit structure sometimes hard debug missing feature eg websocket support akkahttp spray acrosstheboard polishing addressing weakness java apis simplified module structure core improvement based reactive stream stream akkahttp request one http connection response one http connection chunk chunked message byte message entity http stream interface http server api case class bind connectionsink sink incomingconnection localaddress inetsocketaddress case class incomingconnection remoteaddress inetsocketaddress requestsource source httprequest responsesink sink httpresponse simple http server val connectionsink foreachsink incomingconnection conn connrequestsourcemap case httprequest get uripath ping httpresponse entity pong case httpresponse entity unknown resource connect connresponsesink run io http httpbind connectionsink localhost basic http client api case class connect remoteaddress inetsocketaddress case class outgoingconnection remoteaddress inetsocketaddress localaddress inetsocketaddress processor httpclientflow trait httpclientflow extends flow httprequest httpresponse http model case class based data model highlevel abstraction thing http fully immutable little logic predefines common medium type status code encoding charsets cachecontrol directive etc open extension eg custom medium type http request case class httprequest method httpmethod httpmethodsget uri uri uri header immutableseq httpheader nil entity requestentity httpentityempty protocol httpprotocol httpprotocols extends httpmessage http response case class httpresponse status statuscode statuscodesok header immutableseq httpheader nil entity responseentity httpentityempty protocol httpprotocol httpprotocols extends httpmessage http model uri case class uri proper rfc scheme string compliant authority authority immutable path path uri model query query fast fragment option string custom parser http entity sealed trait httpentity sealed trait responseentity extends httpentity sealed trait requestentity extends responseentity used message request response type messageentity requestentity sealed trait bodypartentity extends httpentity used message well bodyparts sealed trait universalentity extends httpentity http entity object httpentity case class strict contenttype contenttype data bytestring extends universalentity case class default contenttype contenttype contentlength long data source bytestring extends universalentity case class chunked contenttype contenttype chunk source chunkstreampart extends messageentity case class closedelimited contenttype contenttype data source bytestring extends responseentity case class indefinitelength contenttype contenttype data source bytestring extends bodypartentity exemplary http header case class acceptcharset charsetranges immutableseq httpcharsetrange extends httpheader case class cachecontrol directive immutableseq cachedirective extends httpheader case class setcookie cookie httpcookie extends httpheader case class rawheader name string value string extends httpheader io stack akkaio bridge gap java nioand akka actor stream provides msgbasedas well streambased api support tcp udp ssltls akkahttpcore directly sits top akka io performs tcp http translation cleanly separated layer actor provided akka extension implement http essential higherlevel feature like file serving akkahttp provides higherlevel server clientside apis unmarshalling custom type httpentities marshalling custom type httpentities de compression gzip deflate routing dsl serverside routing dsl internal dsl interfacelayer application typesafe yet flexible much routing behavior definition small simple building block directive highly composable serverside api layer overview api layer responsibility request routing based method path query entity un marshalling domain object encoding decoding compression authentication authorization caching serving static content restful error handling routing dsl show code import scalaroutingdsl val connectionsink foreachsink runroute path order hexintnumber id get complete received get order id put complete received put order id io http httpbind connectionsink localhost predefined directive spray alwayscache anyparam anyparams authenticate authorize autochunk cache cachingprohibited cancelallrejections cancelrejection clientip complete compressresponse compressresponseifrequested cookie decoderequest decompressrequest delete deletecookie detach dynamic dynamicif encoderesponse entity extract failwith formfield formfields get getfrombrowseabledirectories getfrombrowseabledirectory getfromdirectory getfromfile getfromresource getfromresourcedirectory handleexceptions handlerejections handlewith head headervalue headervaluebyname headervaluepf hextract host hostname hprovide jsonpwithparameter listdirectorycontents logrequest logrequestresponse logresponse maphttpresponse maphttpresponseentity maphttpresponseheaders maphttpresponsepart mapinnerroute maprejections maprequest maprequestcontext maprouteresponse maprouteresponsepf method noop oncomplete onfailure onsuccess optionalcookie optionalheadervalue optionalheadervaluebyname optionalheadervaluepf option overridemethodwithparameter parameter parametermap parametermultimap parameter parameterseq pas patch path pathprefix pathprefixtest pathsuffix pathsuffixtest post produce provide put rawpath rawpathprefix rawpathprefixtest redirect reject rejectemptyresponse requestencodedwith requestentityempty requestentitypresent respondwithheader respondwithheaders respondwithlastmodifiedheader respondwithmediatype respondwithsingletonheader respondwithsingletonheaders respondwithstatus responseencodingaccepted rewriteunmatchedpath routerouteresponse scheme schemename setcookie unmatchedpath validate realworld example spray lazy val route encoderesponse gzip pathendorsingleslash get redirect doc pathprefix api path toparticles get parameter max int max validate max query parameter max must complete toparticlesservice max mapto seq article tokenauthenticate user path ranking get countandtime user ranking parameter fixed mobile sm mm data rankingdescriptor descr complete rankingservice ranking descr mapto rankingresult path account post authorize userisadmin entity accountdetails detail complete accountservice newaccount detail mapto opresult path account intnumber accountid get put delete pathprefix proxytodjango pathprefix doc respondwithheader cachecontrol maxage transformresponse withcontenttransformed getfromresourcedirectory docroot pathrewriter appendfileext cacheifenabled encoderesponse gzip getfromresourcedirectory public best practice keep route structure clean readable pull logic custom directive let api layer leak application use un marshalling infrastructure think error handlingreportingright start use sbtrevolver fast dev turnaround testing route clientside apis json support akkahttp roadmap agree specify reactive stream api finish initial release new akka module akkastream akkahttpcore client serverside akkahttp serverside akkahttp clientside add websockets support client serverside move play onto akkahttp incrementally
296,Lobsters,scala,Scala programming,Everything I Ever Learned about JVM Performance Tuning @twitter,http://www.infoq.com/presentations/JVM-Performance-Tuning-twitter,everything ever learned jvm performance tuning twitter,infoq homepage presentation everything ever learned jvm performance tuning twitter summary bio conference related sponsored content,infoq homepage presentation everything ever learned jvm performance tuning twitter everything ever learned jvm performance tuning twitter summary attila szegedi discus performance problem encountered twitter running java scala application presenting solve jvm tuning bio attila szegedi software engineer working twitter core system library group author dynalink dynamic linker framework language jvm contributor mozilla rhino javascript runtime jvm well one principal developer freemarker templating language runtime conference qcon practitionerdriven conference designed team lead architect project management program includes two tutorial day led industry expert author three conference day track speaker covering wide variety relevant exciting topic software development today event u similar opportunity learning networking tracking innovation occurring enterprise software development community recorded dec related sponsored content
298,Lobsters,scala,Scala programming,Scala Implicits : Type Classes Here I Come,http://debasishg.blogspot.se/2010/06/scala-implicits-type-classes-here-i.html,scala implicits type class come,daniel orthogonality design context bound syntax,discussion type class scala daniel twitter day suddenly discovered one unfinished post topic anything new get know rant thought value type class based thinking add design space started post published thought orthogonality design time back let start gof adapter pattern object adapter us highly recommended composition technique bind abstraction example also used discussing orthogonality design case class address int street string city string state string zip string want adapt interface labelmaker ie would want use address labelmaker trait labelmaker def tolabel value string adapter interface transformation case class addresslabelmaker extends labelmaker address def tolabel address address import address format street city state zip addresslabelmaker tolabel address monroe street denver co incidental complexity introduce design client point focus shifted adapter class addresslabelmaker wrap original abstraction address instance lead identity crisis address instance typical problem wrapper based idiom identity adaptee lost within identity adaptor brave enough adaptee aggregate member another object obviously entire composition adapter idiom break conclusion object adapter nt compose class variant adapter pattren worse sense wiring inheritance right start make entire design much rigid coupled enter type class structure adapter pattern adaptee wrapped adapter leading identity loss adaptee discussed earlier let take different approach see abstract adapter away client usage type class approach exactly offer way composing abstraction type system language selects appropriate adapter instance compile time user program explicitly adaptee consider function printlabel take argument print label using labelmaker supply def printlabel lm labelmaker lmtolabel order make label address need define adapter scala first class module support object syntax let define module defines semantics convert address labelmaker object labelmaker implicit object addresslabelmaker extends labelmaker address def tolabel address address string import address format street city state zip note make adapter scala object implicit qualifier compiler supply implicit argument find one appropriate instance within lexical scope need labelmaker argument printlabel implicit well def printlabel implicit lm labelmaker lmtolabel using scala context bound syntax make implicit argument unnamed def printlabel labelmaker implicitly labelmaker tolabel nt supply implicit argument instead use context bound syntax compiler automatically pick appropriate instance enclosing lexical scope example implicit object addresslabelmaker need scope function call printlabel complain nt find one hence alerted compile time look evil run time failure want print label address printlabel address monroe street denver co incidental complexity client code form adapter object abstraction explicit supply object want print label get rid indirection well look various abstraction constitute surface area entire design modularity speaks client program type class definition type class instance nicely abstracted away eye compiler let see haskell come far discussing type class without mentioning haskell let make amends see design fit pure functional world haskell labelmaker type class let define haskell class labelmaker tolabel string corresponds labelmaker trait definition scala want make address labelmaker instance type class address instance labelmaker address tolabel address h c st z show h c st z corresponds implicit object addresslabelmaker definition scala scala first class support executable module added feature nt haskell oh btw address definition haskell record syntax type houseno int type street string type city string type state string type zip string data address address houseno houseno street street city city state state zip zip define printlabel us type class generates string label printlabel labelmaker string printlabel tolabel corresponds scala definition printlabel little observation note one place haskell much le verbose scala implemnetation instance definition type class added verbosity scala without purpose offer definite advantage corresponding haskell definition scala case name instance explicitly addresslabelmaker instance unnamed case haskell haskell compiler look dictionary global namespace qualifying instance picked scala case search performed locally scope method call triggered explicitly named instance scala inject another instance scope picked use implicit consider example another instance type class address generates label special way object speciallabelmaker implicit object addresslabelmaker extends labelmaker address def tolabel address address string import address format street city state zip choose bring special instance scope instead default one generate label address special way import speciallabelmaker printlabel address monroe street denver co nt get feature haskell type class scala haskell type class define set contract adaptee type need implement many people misinterpret type class synonymously interface java programming language interface focus subtype polymorphism type class focus change parametric polymorphism implement contract type class publishes across unrelated type type class implementation two aspect defining contract instance need implement allow selection appropriate instance based static type checking language offer haskell us class syntax implement though class completely different concept one associate oo programming scala used trait implement feature extension trait object implement instance mentioned earlier haskell us global dictionary implement scala lookup enclosing scope invocation give additional flexibility scala select instance bringing local scope
299,Lobsters,scala,Scala programming,Typesafe’s Commitment to the Scala Ecosystem,http://typesafe.com/blog/typesafes-commitment-to-the-scala-ecosystem,typesafe commitment scala ecosystem,typelevel scala future scala ecosystem roadmap share comment filter tag,typesafe welcome work mile sabin typelevel founder undergoing typesafe rest scala community improve enhance scala compiler typesafe fully committed open source development model today announcement prime example power open source benefit come passionate community beyond one individual company deliver nt read yet please take look typelevel scala future scala ecosystem scala language developed open year today used major enterprise startup research effort personal project one language combine widespread industrial adoption cutting edge language research led number benefit also differing need desire priority natural tension industry need stability advanced user community desire innovation typesafe focused improving stability simplicity performance scala language based feedback broader community belief improving area open scala language broader audience always easy balancing disparity providing newcomer enterprise shop need advanced user scala community want proven tough problem solve talking mile sabin typelevel contributor intention fork scala support initiative define solution believe model stable main branch scala language compiler complemented advanced experimental branch serve need innovator industrial adopter alike applaud intention typelevel people keep branch merge compatible standard scala open integrate new feature proven future release scala fact lot engineering typesafe put scala platform providing robust extensible basis future enhancement recently released roadmap scala evolution work closely scala community move scala ecosystem forward martin odersky chairman cofounder typesafe share comment filter tag
300,Lobsters,scala,Scala programming,Typelevel Scala and the future of the Scala ecosystem,http://typelevel.org/blog/2014/09/02/typelevel-scala.html,typelevel scala future scala ecosystem,typelevel scala future scala ecosystem tl dr scala august licensing creative common attribution unported license follow milessabin back blog,typelevel scala future scala ecosystem tl dr typelevel forking scala call stakeholder scala ecosystem collaborate creation independent nonprofit open source foundation safeguard interest entire scala community last week tweeted following question much interest would community sponsored fork scala toolchain rts fav mile sabin milessabin august generated lively response twitter privately response sometimes perplexed typically excited invariably positive want provide background question sketch direction positive answer lead scala community matured number different strand development language emerged typesafe scala compiler focused stability compatibility java lampepfl dotty compiler focused providing practical implementation dot calculus scalajs compiler focused targeting javascript backend platform scala virtualized compiler focused language virtualization staging scalameta system aim provide portable metaprogramming facility across variety scala compiler several research private variant scala compiler development use variety academic commercial organization ides provide scala variant le accurately approximate typesafe scala compiler targeting jvm generally suitable use scala community large near term typesafe scala compiler current roadmap release compiler due early modest goal consistent typesafe focus beyond next step roadmap mention many thing interest however clear long way earliest see light day typesafe motivation focusing stability java compatibility easy understand typesafe commercial entity product sell jvmbased enterprise middleware space primary software offering akka play probably javafriendly scala project significance simple arithmetic tell large proportion probably large majority potential customer associated consultancy training support mainly java enterprise wholly largely java codebases development team context easy see emphasis scala complement java rather successor paramount whilst entirely reasonable meet need many nevertheless significant constituency core scala community whose need fully met constituency segment scala community put greater emphasis typeful functional programming style strong interest current development functional programming wider world beyond scala project gathered typelevel umbrella prime example constituency producer consumer project continually find running limitation current scala sometimes limitation minor amenable simple workarounds many passed scala folklore limitation serious worked around cumbersome encoding otherwise elaborate confusing hack unfortunate consequence elegant solution important problem obscured layer cruft exist sidestep quirk current compiler make frustrating many limitation comparatively easy remove fix purely syntactic instance type constructor partial application huge importance scalaz user clunky encoding type lambda could given first class syntactic support without impact scala semantics completely binary compatible way similarly syntactic support singleton type literal value see would enormous value shapeless spire user addition literal byte short would welcomed spire scodec many others fix whilst affecting semantics would conservative way program valid compiled typesafe scala compiler would meaning binary representation compiled fix place mind intend create new scala distribution conservative fork typesafe scala compiler focus meeting need part scala community coalesced around typelevel stack conservative fork aim merge compatible typesafe scala compiler key objective feed pull request many resolve long standing scala bug feature request back typesafe scala compiler goal language continues evolve pace saw couple year ago difference optin process priority set community course devil detail forking compiler small part story many way important surrounding ecosystem library part initiative intend publish compatible build least typelevel library taking lead typesafe community build attempt track ecosystem coherence time building selection community library development scala compiler evolves scalajs ported selection important community library compiler welcome participation party individual organization share general goal want contribute development compiler would like library framework part typelevel community build early day hope enough enthusiastic participation able produce useful binary well end year anticipate number objection initiative split community fragment language observed earlier already several variant language existence clear long time different section community different interest afraid acknowledging fact attempting ignore arguably already counterproductive instead embrace diversity sign healthy vigorous platform community resource expertise pull disagree community around typelevel project contains many able scala programmer planet u deep understanding scala type system semantics specified implemented compiler construction general typesafe scala compiler internals particular intimately familiar scala toolchain many u using scale year day job also intimately familiar issue seek address one face daily also existence proof scala compiler variant number fulltimeequivalent people working project really small believe practice matched exceeded open inclusive enthusiastic open source project underestimate difficulty maintaining binary andor merge compatibility really fully expect challenging part whole exercise said benefit year experience scala binary compatibility issue know combination communitybuild style model along effective use migration manager already component typelevel sbt plugin enormously helpful keeping top issue real risk care needed one thing sure though try never know possible fork conservative certainly true restricting change merge compatible typesafe scala compiler put fairly strict limit many highly desirable change fall well beyond people want explore possibility think completely reasonable think two mutually exclusive merge compatible typelevel compiler meet many immediate need want enable people push done scalameta scala virtualized dotty believe infrastructure community build mima help mergecompatible typelevel compiler stay close typesafe compiler also great assistance people want experiment radical change minimum community build infrastructure enable people work bare compiler core set compatible library well believe infrastructure would also benefit scala virtualized scalameta dotty brings final part message become clear u many distinct stakeholder scala ecosystem mixture shared divergent interest good thing something jointly strive support end believe time formation independent nonprofit open source foundation safeguard interest entire scala community call organization individual want see flourishing scala ecosystem join u project licensing unless otherwise noted content licensed creative common attribution unported license mile sabin sep follow milessabin back blog
301,Lobsters,scala,Scala programming,Why Datazenit went Reactive,https://typesafe.com/blog/code-size-is-down-performance-is-up--why-datazenit-went-reactive-,datazenit went reactive,code size performance datazenit went reactive,code size performance datazenit went reactive
303,Lobsters,scala,Scala programming,Guide to Dependency Injection in Scala,http://di-in-scala.github.io/,guide dependency injection scala,table content introduction back top comment dependency injection di macwire available github dependency injection motivation behind guice approach subcut scaldi spring guice running example manual dependency injection back top comment advantage manual di v using macwire wiring back top comment macwire scala macro github page work using implicit parameter simple scoping back top comment modularising object graph creation back top comment thin cake pattern expressing dependency via abstract member thin cake pattern expressing dependency via selftypes composing module multiple implementation back top comment testing back top comment interceptor back top comment advanced scoping back top comment macwire factory back top comment factory function factory traitmodules wiring using factory method accessing object graph dynamically back top comment playmacwire multiple instance back top comment using different type using qualifierstags mile sabin scalaz di akka back top comment akka injecting service traitmodule injecting actor tagging comment back top comment comment powered disqus comment powered poole jekyll,table content introduction back top comment dependency injection di popular pattern encourages loose coupling service client service implementation guide describes dependency injection using scala language construct much possible remaining practical help macwire library necessary dependency injection simple concept implemented using relatively simple construct avoid overcomplicating overusing container framework without thoroughly analysing cost guide available github think something missing clear enough done better nt hesitate send pull request dependency injection di decoupling client service code client may happen another service service need expose information dependency need instead creating dependent service implementation inside service reference dependent service injected make code easier understand testable reusable mean injecting dependency vary approach approach one using passing dependency constructor parameter possibility include setterfield injection using service locator hence essence di summarised using constructor parameter important aspect di inversion control service implementation created outside service eg container external wiring code using new directly create dependency allowed inside service yet sold di recommend reading motivation behind guice us java base language idea apply universally approach numerous framework approach implementing di various language various platform couple alternative pure scalamacwire approach presented using framework subcut mix service locatordependency injection pattern scaldi similar subcut spring spring popular java di framework much also work scala guice another popular java di framework using pure scala running example provide code example throughout guide need running example suppose creating system train station goal call method prepare load compose car dispatch next train order need instantiate following service class class pointswitcher class traincarcoupler class trainshunter pointswitcher pointswitcher traincarcoupler traincarcoupler class cranecontroller class trainloader cranecontroller cranecontroller pointswitcher pointswitcher class traindispatch class trainstation trainshunter trainshunter trainloader trainloader traindispatch traindispatch def prepareanddispatchnexttrain dependency class expressed constructor parameter dependency form object graph need wired manual dependency injection back top comment approach often dismissed easily dependency injection hand requires bit typing thing manually free constraint framework may impose hence lot flexibility gained using di somehow create wire object graph create instance given class appropriate dependency using framework task delegated container nothing keep u simply writing code object graph created late possible may example end world main class application used di container using manual di without macwire soon rediscover benefit main method application specific manualdi version example object trainstation extends app val pointswitcher new pointswitcher val traincarcoupler new traincarcoupler val trainshunter new trainshunter pointswitcher traincarcoupler val cranecontroller new cranecontroller val trainloader new trainloader cranecontroller pointswitcher val traindispatch new traindispatch val trainstation new trainstation trainshunter trainloader traindispatch trainstationprepareanddispatchnexttrain advantage manual di first advantage approach presented typesafety dependency resolution done compiletime sure dependency met runtime reflection needed slight startuptime benefit need scan classpath also remove lot magic code annotation scan using plain scala constructor parameter possible navigate place instance created process creating object graph clear application also simple use easily packaged eg fatjar container start framework fight creating instance object complex choosing implementation depends configuration thanks flexibility manual di easily run arbitrary code compute dependency use val v lazy val defining dependency using vals one drawback dependency used initialised null referenced vals calculated top bottom solved using lazy vals calculated ondemand right initialisation order calculated automatically hence manualdi example becomes object trainstation extends app lazy val pointswitcher new pointswitcher lazy val traincarcoupler new traincarcoupler lazy val trainshunter new trainshunter pointswitcher traincarcoupler lazy val cranecontroller new cranecontroller lazy val trainloader new trainloader cranecontroller pointswitcher lazy val traindispatch new traindispatch lazy val trainstation new trainstation trainshunter trainloader traindispatch trainstationprepareanddispatchnexttrain using macwire wiring back top comment manual di course silver bullet manually writing new instance creation code class using correct parameter may tedious macwire wire method help wire scala macro generates new instance creation code using macwire code becomes simpler object trainstation extends app lazy val pointswitcher wire pointswitcher lazy val traincarcoupler wire traincarcoupler lazy val trainshunter wire trainshunter lazy val cranecontroller wire cranecontroller lazy val trainloader wire trainloader lazy val traindispatch wire traindispatch lazy val trainstation wire trainstation trainstationprepareanddispatchnexttrain new dependency added service order parameter change objectgraph wiring code altered macro take care introducing new service must added list new instance creation code generated wire compile time compare byte code generated example identical generated code typechecked usual way keep typesafety manual approach usage wire macro mixed creating new instance hand may needed discussed earlier creating new instance straightforward access wire import comsoftwaremillmacwire detail integrate macwire project see github page wire work given class wire macro first try find constructor annotated inject nonprivate primary constructor finally apply method companion object determine dependency needed dependency look value conforms parameter type enclosing methodclassobject first try find unique value declared value current block argument enclosing method anonymous function try find unique value declared imported enclosing type finally try find unique value parent type traitsclasses parameter marked implicit ignored macwire handled normal implicit resolution mechanism value either val lazy val noparameter def long return type match compiletime error occurs multiple value given type declared enclosing blockmethodfunction argument list enclosing type parent parameter marked implicit implicit lookup fails find value value given type using implicit parameter similar effect one described achieved using implicit parameter implicit value constructor parameter marked implicit instance marked implicit object graph wired scala compiler create proper constructor call class definition become class pointswitcher class traincarcoupler class trainshunter implicit pointswitcher pointswitcher traincarcoupler traincarcoupler class cranecontroller class trainloader implicit cranecontroller cranecontroller pointswitcher pointswitcher class traindispatch class trainstation implicit trainshunter trainshunter trainloader trainloader traindispatch traindispatch def prepareanddispatchnexttrain wiring object trainstation extends app implicit lazy val pointswitcher new pointswitcher implicit lazy val traincarcoupler new traincarcoupler implicit lazy val trainshunter new trainshunter implicit lazy val cranecontroller new cranecontroller implicit lazy val trainloader new trainloader implicit lazy val traindispatch new traindispatch implicit lazy val trainstation new trainstation trainstationprepareanddispatchnexttrain however using implicits like two drawback first intrusive mark constructor parameter list class wired implicit may desireable cause person reading code wonder parameter implicit secondly implicits used many place scala rather different purpose adding large number implicits described may lead confusion still style may perfect fit usecases course simple scoping back top comment far dependency declared lazy vals making essentially singleton scope single app usage note singleton global sense create multiple copy object graph however sometimes want create new instance dependency usage sometimes called dependent scope achieve simply declare instance def instead lazy val example needed new instance train dispatcher time code would become object trainstation extends app lazy val pointswitcher wire pointswitcher lazy val traincarcoupler wire traincarcoupler lazy val trainshunter wire trainshunter lazy val cranecontroller wire cranecontroller lazy val trainloader wire trainloader note def instead lazy val def traindispatch wire traindispatch station share service except train dispatch new instance create usage lazy val trainstationeast wire trainstation lazy val trainstationwest wire trainstation trainstationeastprepareanddispatchnexttrain trainstationwestprepareanddispatchnexttrain hence using scala construct implement two scope singleton dependent modularising object graph creation back top comment thin cake pattern point creating whole object graph end world become unpractical code large hard read somehow divide smaller piece luckily scala trait fit perfectly task used split object graph creation code trait purpose task also called module part object graph created everything later recombined putting necessary trait together may various rule divide code module good place start consider creating prewired module perpackage package contain group class sharing implementing specific functionality probably class cooperate way hence wired additional benefit shipping package code also wired object graph fragment clear code used requirement actually using wired module needed wiring done different way however module usually exist standalone often depend class module two way expressing dependency expressing dependency via abstract member module trait possible leave dependency undefined abstract member abstract member used wiring either manually using wire macro specific implementation given module combined end application compiler verify dependency defined abstract member defined note declare abstract member defs later implemented vals lazy vals left defs using def keep option possible wiring example code divided follows class grouped package package shunting class pointswitcher class traincarcoupler class trainshunter pointswitcher pointswitcher traincarcoupler traincarcoupler package loading class cranecontroller class trainloader cranecontroller cranecontroller pointswitcher pointswitcher package station class traindispatch class trainstation trainshunter trainshunter trainloader trainloader traindispatch traindispatch def prepareanddispatchnexttrain package corresponding traitmodule note dependency shunting loading package expressed using abstract member package shunting trait shuntingmodule lazy val pointswitcher wire pointswitcher lazy val traincarcoupler wire traincarcoupler lazy val trainshunter wire trainshunter package loading trait loadingmodule lazy val cranecontroller wire cranecontroller lazy val trainloader wire trainloader dependency module def pointswitcher pointswitcher package station trait stationmodule lazy val traindispatch wire traindispatch lazy val trainstation wire trainstation dependency module def trainshunter trainshunter def trainloader trainloader object trainstation extends app val module new shuntingmodule loadingmodule stationmodule modulestrainstationprepareanddispatchnexttrain implement dependency way consistent naming convention needed abstract member reconciled implementation byname naming value class initial letter lowercase good example convention approach part similar cake pattern hence name thin cake pattern expressing dependency via selftypes another way expressing dependency using selftypes extending traitmodules way creates much stronger connection two module instead looser coupled abstract member approach however situation desirable eg moduleinterface multiple implementation see example could express dependency shunting loading module station module extending traitmodule instead using abstract member package shunting trait shuntingmodule lazy val pointswitcher wire pointswitcher lazy val traincarcoupler wire traincarcoupler lazy val trainshunter wire trainshunter package loading trait loadingmodule lazy val cranecontroller wire cranecontroller lazy val trainloader wire trainloader dependency expressed using abstract member def pointswitcher pointswitcher package station dependency expressed using extends trait stationmodule extends shuntingmodule loadingmodule lazy val traindispatch wire traindispatch lazy val trainstation wire trainstation object trainstation extends app val module new shuntingmodule loadingmodule stationmodule modulestrainstationprepareanddispatchnexttrain similar effect would achieved using selftype approach also useful create bigger module multiple smaller one without need reexpress dependency smaller module simply define biggermoduletrait extending number smallermoduletraits composing module module also combined using composition nest module member use dependency defined nested module wire object example add plugin train management application allow gathering statistic package stats class loadingstats trainloader trainloader class shuntingstats trainshunter trainshunter class statsmodule shuntingmodule shuntingmodule loadingmodule loadingmodule import shuntingmodule import loadingmodule lazy val loadingstats wire loadingstats lazy val shuntingstats wire shuntingstats note import statement bring dependency defined nested module scope shortened using experimental module annotation module traitsclasses member nested module annotaiton taken account automatically wiring package loading module trait loadingmodule package shunting module trait shuntingmodule package stats class loadingstats trainloader trainloader class shuntingstats trainshunter trainshunter class statsmodule shuntingmodule shuntingmodule loadingmodule loadingmodule lazy val loadingstats wire loadingstats lazy val shuntingstats wire shuntingstats scenario import necessary multiple implementation back top comment often case multiple implementation functionality need choose one depending configuration modelled least two way firstly single module contains conditional logic choosing right implementation suppose two option train shunting either traditional one using teleportation config flag package shunting trait trainshunter class pointswitcher class traincarcoupler class traditionaltrainshunter pointswitcher pointswitcher traincarcoupler traincarcoupler extends trainshunter class teleportingtrainshunter extends trainshunter trait shuntingmodule lazy val pointswitcher wire pointswitcher lazy val traincarcoupler wire traincarcoupler lazy val trainshunter configmodern wire teleportingtrainshunter else wire traditionaltrainshunter def config config secondly module multiple implementation case create interfacemodule containing abstract member implemented proper module interfacemodule also useful expressing dependency without relying naming convention creating strong link package shunting trait trainshunter class pointswitcher class traincarcoupler class traditionaltrainshunter pointswitcher pointswitcher traincarcoupler traincarcoupler extends trainshunter class teleportingtrainshunter extends trainshunter trait shuntingmodule lazy val pointswitcher wire pointswitcher def trainshunter trainshunter trait traditionalshuntingmodule extends shuntingmodule lazy val traincarcoupler wire traincarcoupler lazy val trainshunter wire traditionaltrainshunter trait modernshuntingmodule extends shuntingmodule lazy val trainshunter wire teleportingtrainshunter object trainstation extends app val traditionalmodules new traditionalshuntingmodule loadingmodule stationmodule val modernmodules new modernshuntingmodule loadingmodule stationmodule traditionalmodulestrainstationprepareanddispatchnexttrain modernmodulestrainstationprepareanddispatchnexttrain downside approach module stack must known compile time chosen dynamically possible create different stack couple config option increasing config option number stack grows exponentially interfacetraitmodule implementationtraitmodule fact part approach taken cake pattern expressing dependency however result quite lot boilerplate code good use needed testing back top comment individual component tested providing mockstub implementation dependency moreover using thin cake pattern module integrationtested using wiring defined module course need provide implementation mockstub dependency expressed abstract member however also possible override dependency provide alternative implementation testing implementation used wire graph fragment defined module example test shunting module could mock point switcher interacts external system write integration test main code package shunting trait shuntingmodule lazy val pointswitcher wire pointswitcher lazy val traincarcoupler wire traincarcoupler lazy val trainshunter wire trainshunter test class shuntingmoduleittest extends flatspec work given val mockpointswitcher mock pointswitcher val moduletotest new shuntingmodule mock implementation used wire graph override lazy val pointswitcher mockpointswitcher moduletotesttrainshuntershunt verify mockpointswitcher switch interceptor back top comment interceptor useful implementing crosscutting concern part almost every di frameworkcontainer direct support interceptor scala thin library layer provided macwire easy write use interceptor using interceptor twostep process first declare intercepted ideally involve implementation interceptor way secondly define interceptor behaviour implement first part define abstract interceptor apply selected value let say want audit point switch car coupling event external system need intercept method call pointswitcher traincarcoupler service package shunting trait shuntingmodule lazy val pointswitcher pointswitcher logevents wire pointswitcher lazy val traincarcoupler traincarcoupler logevents wire traincarcoupler lazy val trainshunter wire trainshunter def logevents interceptor declared want apply logevents interceptor pointswitcher traincarcoupler service note far implementation mentioned way using abstract interceptor trait apply method returning instance type passed parameter point course specify implementation late possible last point main entry point application object trainstation extends app val module new shuntingmodule loadingmodule stationmodule lazy val logevents proxyinginterceptor ctx println calling method ctxmethodgetname ctxproceed modulestrainstationprepareanddispatchnexttrain specified want create proxying interceptor create java proxy given behaviour method invocation note could use service defined module handling proxied call testing may useful skip interceptor also easily done providing noop interceptor implementation class shuntingmoduleittest extends flatspec work given val moduletotest new shuntingmodule lazy val logevents noopinterceptor advanced scoping back top comment especially web application useful scope singleton dependent eg scope tied duration request scope tied user session like interceptor lot di containersframeworks contain support different scope may seem magical however fact pretty simple macwire contains general skeleton defining scope similar interceptor scope trait defines two method apply applied instance create scoped value get get current underlying value scope scope life cycle entirely managed implementor similarly interceptor usage scope declarative using abstract scope value definition provided late main application entry point example java servletbased web project make train dispatch sessionscoped new dispatch session would first need declare usage session scope package station trait stationmodule extends shuntingmodule loadingmodule lazy val traindispatch traindispatch session wire traindispatch lazy val trainstation trainstation wire trainstation def session scope starting application need provide implementation scope two implementation shipped default noopscope useful testing threadlocalscope hold current scoped value threadlocal variable hence implementation useful synchronous web framework threadlocal scope need associated storage request object trainstation extends app val module new shuntingmodule loadingmodule stationmodule lazy val session new threadlocalscope implement filter attache session scope use filter server modulestrainstationprepareanddispatchnexttrain example session scope implementation see macwire site factory back top comment factory function simplest form factory function parametrized way create object also think partially wired dependency let say trainloader additionally requires carloader dependency parametrized cartype type train car load coal refrigerated chemical etc convenience create type alias function entirerly optional definition trainloader class becomes type carloaderfactory cartype carloader class trainloader cranecontroller cranecontroller pointswitcher pointswitcher carloaderfactory carloaderfactory wire trainloader usual either manually using macwire however course need dependency type carloaderfactory defined somewhere extending loadingmodule get trait loadingmodule lazy val cranecontroller wire cranecontroller lazy val trainloader wire trainloader lazy val carloaderfactory ct cartype wire carloader wire expand new carloader ct also logic instantiate carloader dependency module def pointswitcher pointswitcher factory traitmodules also create factory defining method directly traitmodules method parameter also used wiring using wire let say trainstation requires name class trainstation name name trainshunter trainshunter trainloader trainloader traindispatch traindispatch def prepareanddispatchnexttrain expose parametrized train station module defining method name parameter trait stationmodule def trainstation name name wire trainstation lazy val traindispatch wire traindispatch dependency module def trainshunter trainshunter def trainloader trainloader retrieving instance train station combined module provide name method parameter together dependency looked usual way used create trainstation instance wiring using factory method using macwire also possible wire object factory method instead constructor example suppose instance trainloader need created using special method pass numeric parameter crane situation use wirewith package loading class trainloader cranecontroller cranecontroller pointswitcher pointswitcher xaxiscoefficient double yaxiscoefficient double object trainloader def createdefault cranecontroller cranecontroller pointswitcher pointswitcher new trainloader cranecontroller pointswitcher trait loadingmodule lazy val cranecontroller wire cranecontroller lazy val trainloader wirewith trainloadercreatedefault dependency module def pointswitcher pointswitcher accessing object graph dynamically back top comment would great able define typesafe way whole object graph application upfront case necessary access extend dynamically first usecase integrating web framework often needed access wired instance byclass second usecase dynamically creating instance class name known runtime plugins usecases realised wired class created given instance module containing object graph using wiredinmodule macro vals lazy vals parameterless defs available train station management application plugin system could use dependency object graph could instantiate plugins follows trait trainstationplugin def init unit object trainstation extends app val module new shuntingmodule loadingmodule stationmodule val wired wiredinmodule module val plugins configpluginclassesmap pluginclass wired wireclassinstancebyname pluginclass asinstanceof trainstationplugin pluginsforeach init modulestrainstationprepareanddispatchnexttrain instance wired also extended new instance instance factory using withinstances withinstancefactory method example integrating dependency injection macwire play framework see playmacwire activator multiple instance back top comment case couple object type want use dependency example assume train station need two train loader one regular freight one liquid freight class trainstation trainshunter trainshunter regulartrainloader trainloader liquidtrainloader trainloader traindispatch traindispatch wiring code need create two instance lazy val regulartrainloader new trainloader lazy val liquidtrainloader new trainloader lazy val trainstation new trainstation trainshunter regulartrainloader liquidtrainloader traindispatch perfectly good solution using manual dependency injection everything work expected one downside entirely typesafe mixup regular liquid train loader passing argument trainstation constructor everything still compile fine however try use macwire implicits compilation fail macwire chance knowing instance used need somehow differentiate instance compiler able tell go using different type first solution give two dependency distinct type however course always possible case might example trait subclass class trainstation trainshunter trainshunter regulartrainloader trainloader regular liquidtrainloader trainloader liquid traindispatch traindispatch lazy val regulartrainloader new trainloader regular lazy val liquidtrainloader new trainloader liquid lazy val trainstation wire trainstation also typesafe solution able mix two dependency passing argument trainstation using qualifierstags another solution use tagging macwire inspired work mile sabin present scalaz tag scala trait usually empty one instance type x tagged tag type x tagged x depending syntax prefer add tag instance using xtaggedwith method available type declaration brough scope importing comsoftwaremillmacwire tag follow proper subtyping rule x x use tagged instance untagged one required hand x subtype x distinct safe using wrong instance wrong tag tag incur zero runtime overhead purely compiletime construct train station dependency wiring expressed following way trait regular trait liquid class trainstation trainshunter trainshunter regulartrainloader trainloader regular liquidtrainloader trainloader liquid traindispatch traindispatch lazy val regulartrainloader wire trainloader taggedwith regular lazy val liquidtrainloader wire trainloader taggedwith liquid lazy val trainstation wire trainstation note use form tagging instance eg one scalaz macwire require use tag distribution thing macwire wiring regular scala subtype check di akka back top comment akka popular toolkit building concurrent reactive application main building block used akkabased system actor common question using akka dependency injection actor typical usecase passing datasource actor injecting service current bestpractice defining actor instantion code actor instance need external dependency provide method companion object returning prop describing create new actor instance remember actor instance created multiple time even singleton actor import akkaactor actor prop class reactivetraindispatch trainloader trainloader traindispatch traindispatch extends actor def receive object reactivetraindispatch def prop trainloader trainloader traindispatch traindispatch prop new reactivetraindispatch trainloader traindispatch using macwire could already simplify code bit using wire inside prop prop wire reactivetraindispatch however still need repeat dependency prop method signature alternative move propscreating code traitmodule assuming reactivetraindispatch life station package class reactivetraindispatch trainloader trainloader traindispatch traindispatch extends actor def receive trait stationmodule lazy val reactivetraindispatchprops prop wire reactivetraindispatch previous example lazy val traindispatch wire traindispatch lazy val trainstation wire trainstation dependency module def trainshunter trainshunter def trainloader trainloader going actorsystem also value defined module create actor factory without need intermediate prop value factory may want explicit call create single multiple actor class reactivetraindispatch trainloader trainloader traindispatch traindispatch extends actor def receive trait stationmodule def createreactivetraindispatch actorsystemactorof prop wire reactivetraindispatch actor system module dependency def actorsystem actorsystem previously injecting actor apart service actor often depend actor holding reference via actorrefs common way obtain reference actor sending via message however want inject actorref actor time creation via constructor well problem course multiple actor reference type manual di thing easy pas actorref need proper constructor argument however using macwire want manual approach typesafe use tagging modelling actor creation factory actor typically created explicitly needed unlike service object graph could model dependency well class reactivetraindispatch trainloader trainloader traindispatch traindispatch loadlistener actorref loadlistener extends actor def receive trait stationmodule def createreactivetraindispatch loadlistener actorref loadlistener actorsystemactorof prop wire reactivetraindispatch actor system module dependency def actorsystem actorsystem previously usage statically checked actorref type val loadlistener actorsystem actorof prop loadlisteneractor taggedwith loadlistener val reactivetraindispatch module createreactivetraindispatch loadlistener comment back top comment please enable javascript view comment powered disqus comment powered created using poole jekyll
304,Lobsters,scala,Scala programming,"Scala's Either, Try and the M word",http://mauricio.github.io/2014/02/17/scala-either-try-and-the-m-word.html,scala either try word,option one thing nserror nsexception case using compose exception thunking pas name named function word left unit,since covered option previously time show type like option prevalent scala standard library third party code also see type part larger set object name start unfortunately shuts people hear type yet either one thing look either scala doc see say disjoint union math disjoint union collection two set item common translate scala imagine set different type item instance two type saying return either string int mean could return int string different type share much fact usually use completely different thing would ever care using something like one common case use exception wrote objectivec code somewhere past life probably seen nserror object lying around codebase never seen objectivec despair nserror object used throughout objectivec apis give better information error happened tried something nserror exception object throw raise catch rescue nserror object objectivec nsexception class meant meant convey information code failed whatever wanted exception ask exception exceptional case something really broken nserror used case exceptional case something happens frequency handle gracefully main goal make clear type use method could two different outcome common enough care make sure code capable handling let get code sealed trait either l r def isleft boolean def isright boolean def fold x leftfunction l x rightfunction r x x match case right value rightfunction value case left value leftfunction value case class right r value r extends either nothing r override def isleft false override def isright true case class left l value l extends either l nothing override def isleft true override def isright false pattern mostly seen base sealed trait case class use pattern match value also fold method used produce output computation case mostly shortcut pattern matching let look example using case class user id int name string password string case class serviceresponse status int message string class serviceclient val user map int user def userdetails id int password string either serviceresponse user usersget id match case scalasome user userpassword password right user else left serviceresponse view user detail case scalanone left serviceresponse user exist simple serviceclient class could http client talking external service external service could respond specific error code depending client asking asking error code need exception http work could success receive user data get one nonsuccess http response code message message make either useful looking user user scenario could easily model interaction using option would lose ability show detailed message produced server client app would see user without knowing actually going let fold data class eitherspecification extends specification val service new serviceclient map user john doe either fold val message serviceuserdetails none fold response password match responsestatus responsemessage user user username message password match view user detail fold val message serviceuserdetails none fold response user exist responsestatus responsemessage user user username message user exist user exist return user detail val message serviceuserdetails fold response come user user username message user john doe see folding either specially nice build output message based object returned could command line app webapp anywhere render message case whenever method could possibly return two different type either using try compose exception previously either also used handle exception case call method could possibly raise exception would use either left error right expected value since scala usage replaced use try try wrap computation could either result value exception thrown think specialization either would use either whenever return one thing try always one thing error specific like mean using try error case much simpler either let look could implement object try def apply f try try success f catch case nonfatal e failure e sealed trait try def flatmap u f try u try u def map u f u try u def foreach u f u unit def issuccess boolean def isfailure boolean def getorelse f f case class success value extends try override def flatmap u f try u try u try f value catch case nonfatal e failure e override def map u f u try u try u f value override def foreach u f u unit f value override def getorelse f value override def issuccess true override def isfailure false case class failure nothing exception throwable extends try override def flatmap u f try u try u override def map u f u try u override def foreach u f u unit override def issuccess false override def isfailure true pattern one sealed trait two case class like option main advantage using try able compose value without caring inside like schrodinger cat story keep working box delay opening completely necessary know happening map flatmap computation matter success failure use map flatmap compose value wait something let look bit usage try failure ca nt parse number val result try abc toint resultisfailure must betrue success par number val result try toint resultissuccess must betrue result match case success v v case failure e throw new illegalstateexception come using try bit different using either option wrap computation around instead creating success failure manually given know computation fail use try apply method companion object automatically wrap correct value error return try u write try abc toint look like running abc toint sending parameter reality scala compiler know expecting u function automatically wrap code closure called thunking lazy parameter since evaluated given method scala lingo also see people calling pas name since instead sending computed value sending named function turn produce computed value nonfatal reference trycatch block mean want catch exception actually recoverable error like jvm error really safe caught use nonfatal try make sure try catch well catch exception recover good also manually build try success failure well would like working concurrent system handling future promise likely make heavy use try result computation let composing composable map val result try toint map v v v map v v result match case success v v case failure e throw new illegalstateexception come composable flatmapfor comprehension val result v try toint k try toint z try toint yield v k z result match case success r r case failure e throw new illegalstateexception come fail mapping one try failure val result try abc toint map v v v resultisfailure must betrue fail flatmap one try failure val result v try toint k try joe toint z try toint yield v k z resultisfailure must betrue since map flatmap implemented manually map call also use comprehension flatmap result making possible wrap computation could possibly fail important feature using try exception information stored whoever need unwrap value end chain error prone catch exception e throw new someotherexception e way code actually need value error use try intermediate step computation top level code grab value look real error infinite chain bogus exception behave accordingly word well came far seen pattern already let look look like trait monad def flatmap u f monad u monad u def unit value b monad b monad container value container must flatmap also find called bind unit v operation type declaration enough u figure two method mean flatmap mean transforming value inside monad another value still inside type monad necessary keep ir wrapped think schrodinger cat want delay decision knowing inside box much possible something like val result v try toint k try toint z try toint yield v k z would true dealing option composing many option might none somewhere want care necessary look inside box know flatmap mean monad unit v well use wrap value v success r even list v yes list monad well scala monad flatmap implemented directly one version unit v usually going constructor apply method companion object still two operation map using map everywhere well map special case flatmap could write map option def map r f e r option r flatmap v f v monad implementation would look like def map u f u monad u flatmap v unit f v exactly code actually need map defined well nice shortcut common pattern well define something monad use monad law first associativity monadflatmap f flatmap g monadflatmap v f v flatmap g associativity using option could associative val multiplier int option int v v v val divider int option int v val original originalflatmap multiplier flatmap divider originalflatmap v multiplier v flatmap divider matter flatmap inside another flatmap result produced produce exactly value second left unit law definition unit x flatmap f f x would become following option left unit val multiplier int option int v v v val item flatmap multiplier item multiplier getting monad running flatmap function calling function wrapped x value third law right unit law let look definition monadflatmap unit monad turn would defined follows option right unit val value flatmap v v value last one mean monad running flatmap unit unit x validate law go unit test would replace function call actual code check expression generated compatible would mathematical equation guarantee container object respect law monad place see anything specially complicated monad container type follows collection rule important right unit rule instance allows u use monad forcomprehensions used container type aside debate try u full monad problem think unit x success x exception would raised try execute left unit law since flatmap correctly wrap exception f x might able still assume correct unit tryapply would issue case try might pure monad close enough use much way see post check whole list monad scala check one
305,Lobsters,scala,Scala programming,Scala in Vim,http://lauris.github.io/vim/2014/08/21/scala-in-vim/,scala vim,intellij idea vimperator plugin vimium xmonad vi editing mode bash datazenit syntax highlighting vimscala vim screencasts sbt integration sbtvim autocomplete neocompletevim youcompleteme refactoring feature summary neovim,long time vim user however last year using le le day favor intellij idea superb fully featured ide really vim felt right got past steep learning curve quite time true vim junkie used everything installed vimperator plugin firefox vimium chrome configured window manager xmonad use vimlike key binding enabled vi editing mode bash glorious time many advanced useful feature like autocomplete refactoring code hinting debugging integration development tool importantly rapidly growing project code base time slowly allured towards ide keep code base head needed tool quickly explore inspect code maybe became lazier ide helped lot one best quality great ide everything work box need spend eternity configure even spend time actually programming still missed lot vim especially key binding unbeatable performance let revisit vim time particularly scala development currently developing datazenit scala loving would love even could take old friend syntax highlighting little nice package vimscala derek wyatt also guy convinced use vim first place vim screencasts plugin provides bare essential scala like syntax highlighting file type detection also goody like sorting import screenshot sbt integration plugin sbt integration vim called sbtvim honestly give much prefer sbt related activity terminal autocomplete back day autocomplete huge problem vim none plugins working flawlessly always pain set little research seems currently best autocomplete plugin neocompletevim successor neocomplcache made shougo sadly provide support scala next candidate youcompleteme val markovic bit better autocomplete plugins mostly thanks clientserver architecture compiled component bad news serious scala support box way get real autocomplete scala use eclim also option last checked year ago eclim basically headless instance eclipse integrated vim went route worked feel right good thing eclim example support eclipse feature autocomplete choose wide variety supported language conclusion nothing changed much sure autocomplete work language still silver bullet refactoring feature story pretty much autocomplete eclim provides useful feature like automatic import basic refactoring code validation work vim plugin least knowledge summary willing use something like eclim live without intelligent feature vim used scala development case always ready want something luck ides plugins vim integration least support vi key binding usually even worse experience people trying improve vim give second wind one project neovim project seek aggressively refactor vim idea turn let hope best mean use vim course vim still best text editor many use case perfect still using almost every day need idelike feature want code really fast also get pretty decent experience programming python ruby cc language vim much scala
307,Lobsters,scala,Scala programming,George Orwell’s six rules for Scala programmers,http://hilton.org.uk/blog/george-orwell-rules-scala,george orwell six rule scala programmer,politics english language george orwell use objectoriented design pattern design pattern prefer concise name value remove unnecessary word class method name seven ineffective coding habit many programmer henney also publishes fiction never use mutable state use immutability passive voice never use scalaz haskell idiom domaindriven design break rule rather write unmaintainable code phil campbell,essay politics english language george orwell considers decadence language end essay writes defence english language especially concerned scrapping every word idiom outworn usefulness think following rule cover case never use metaphor simile figure speech used seeing print never use long word short one possible cut word always cut never use passive use active never use foreign phrase scientific word jargon word think everyday english equivalent break rule sooner say anything outright barbarous two thing might know george orwell advice writer george orwell real name eric blair really writing scala programming english trust wikipedia pseudonym thing writing scala however selfevident consider rule individually use objectoriented design pattern never use metaphor simile figure speech used seeing print orwell first rule clearly design pattern design pattern useful technique objectoriented programming scala restrict programming style objectoriented programming functional programming offer alternative idiom patternbased objectoriented design scala programmer would well keep mind orwell cleverly predicted present day decade objectoriented design created inertia hinders adoption functional programming commercial software development incidentally book design pattern published predates java stop generation java programmer misunderstanding book advice always program interface implementation refers class public member java interface prefer concise name value never use long word short one orwell next rule concern naming within local scope caution unnecessarilylong name short name make code read fluently reduce linewrapping stand contrast longer function class name note invitation use abbreviation value parameter name rather ensure command english vocabulary choose shorter precise two synonym remove unnecessary word class method name possible cut word always cut apis feature classnaming methodnaming style verbose meaning lost orwell third rule deal problem urging scala programmer avoid making name long possible presentation seven ineffective coding habit many programmer kevlin henney point meaningless name like managercontrollerproxy mention managercontrollerproxyfactory explains result gratuitously added word like homeopathy done diluted meaning gone curiously henney also publishes fiction like orwell never use mutable state use immutability never use passive use active orwell fourth rule may confusing first realise passive voice metaphor mutable state link clear definition given wikipedia page emphasis clause passive voice grammatical subject express theme patient main verb person thing undergoes action state changed reference functional programming first clue orwell wrote essay six rule specifically scala programmer never use scalaz haskell idiom never use foreign phrase scientific word jargon word think everyday english equivalent next rule follows immediately first mention functional programming prohibiting lapse language stand longest rule result specifically separately condemning coding style programming language haskell scientific word category theory jargon monad functor orwell arguing functional programming merely demand done within standard scala idiom without dragging discipline written english code us unnecessary theoretical terminology look pompous fails achieve original goal jargon computer science mathematics especially inappropriate business software language better derived domaindriven design break rule rather write unmaintainable code break rule sooner say anything outright barbarous finally last rule warning take rule seriously context barbarous literary way saying unmaintainable ultimate parallel prose bad code code whose meaning rapidly fade moment written photo phil campbell
309,Lobsters,scala,Scala programming,"Types of `map` function in Haskell, Scala, and Clojure",http://missingfaktor.blogspot.de/2014/08/types-of-map-function-in-haskell-scala.html,type map function haskell scala clojure,,
310,Lobsters,scala,Scala programming,Creek: A Vector Co-processor written in CHISEL,http://zhehaomao.com/project/2014/08/03/creek.html,creek vector coprocessor written chisel,creek vector coprocessor chisel github,creek vector coprocessor creek floatingpoint vector coprocessor developed order learn computer architecture chisel hardware description language basic functional block coprocessor streaming floatingpoint adder multiplier unit unit four pipelined vector lane operate singleprecision floating point number functional block along memory controller connected crossbar switch seven vector register effectively small sequentialaccess memory vector register support simultaneous read writes allows higher degree parallelism becomes programmer responsibility schedule operation way fast writer overwrite value slow reader trying read viceversa fast reader try read value slow writer yet updated coprocessor also control flow instruction instruction issued one another special instruction pause coprocessor instruction allows host processor take back control copy data memory coprocessor memory write new instruction restart coprocessor chisel source code verilog fpga glue code test software project available github
311,Lobsters,scala,Scala programming,Awesome Big Data A Curated List,https://github.com/onurakpolat/awesome-bigdata,awesome big data curated list,awesome big data awesomephp awesomepython awesomeruby hadoopecosystemtable bigdata rdbms mysql postgresql oracle database teradata framework bistro ibm stream apache hadoop tigon pachyderm polyaxon distributed programming addthis hydra amplab simr apache apex apache beam apache crunch apache datafu apache flink apache gearpump apache gora apache hama apache mapreduce apache pig apache reef apache apache spark apache spark streaming apache storm apache samza apache tez apache twill baidu bigflow cascalog cheetah concurrent cascading damballa parkour datasalt pangool datatorrent stram facebook corona facebook peregrine facebook scuba google dataflow google mapreduce google millwheel ibm stream jaql kite metamarkets druid netflix pigpen nokia disco onyx pinterest pinlater pydoop ray rackerlabs blueflood skale stratosphere streamdrill streamsxtopology tuktu twitter heron twitter scalding twitter summingbird twitter tsar wallaroo distributed filesystem distributed index pilosa document data model actian versant crate data facebook apollo jumbodb linkedin espresso marklogic microsoft azure documentdb mongodb ravendb rethinkdb key map data model note keyvalue data model columnar database distinguishing two major type column store apache accumulo apache cassandra apache hbase baidu tera facebook hydrabase google bigtable google cloud datastore hypertable infinidb tephra twitter manhattan scylladb keyvalue data model aerospike amazon dynamodb badger bolt btdb buntdb edis elephantdb eventstore ghostdb griddb hyperdex ignite linkedin krati linkedin voldemort oracle nosql database redis riak storehaus summitdb tarantool tikv treodedb graph data model agensgraph apache giraph apache spark bagel arangodb dgraph eliasdb facebook tao gchq gaffer google cayley google pregel graphlab powergraph graphx gremlin infovore intel graphbuilder janusgraph mapgraph microsoft graph engine orientdb phoebus titan twitter flockdb nodexl columnar database note keymap data model columnar storage actian vector cstore clickhouse eventql monetdb parquet pivotal greenplum vertica sqream db google bigquery amazon redshift indexr locustdb newsql database actian ingres actordb amazon redshift bayesdb bedrock citusdb cockroach datomic foundationdb google google spanner hstore haeinsa handlersocket infinisql kareldb mapd memsql nuodb oracle timesten inmemory database pivotal gemfire xd sap hana senseidb sky symmetricds tidb voltdb yugabytedb timeseries database axibase time series database chronix cube heroic influxdb irondb kairosdb newt tdengine opentsdb prometheus beringei traildb druid riakts akumuli rhombus dalmatiner db blueflood timely siridb thanos victoriametrics sqllike processing actian sql hadoop apache drill apache hcatalog apache hive apache calcite apache phoenix aster database cloudera impala concurrent lingual datasalt splout sql dremio facebook prestodb google bigquery pipelinedb pivotal hdb rainstordb spark catalyst sparksql splice machine stinger tajo trafodion data ingestion amazon kinesis amazon web service glue apache chukwa apache flume apache kafka apache nifi apache pulsar apache sqoop embulk facebook scribe fluentd gazette google photon heka hiho kestrel linkedin databus linkedin kamikaze linkedin white elephant logstash netflix suro pinterest secor linkedin gobblin skizze streamsets data collector alooma rudderstack service programming akka toolkit apache avro apache curator apache karaf apache thrift apache zookeeper google chubby hydrosphere mist linkedin norbert mara openmpi serf spotify luigi spring xd twitter elephant bird twitter finagle scheduling machine learning azure ml studio brain oryx concurrent pattern convnetjs datavec decider encog etcml etsy conjecture feast graphlab create karate club kera lambdo little ball fur mahout mlbase mlpneuralnet ml workspace moa monkeylearn nupic predictionio samoa scikitlearn spark mllib sibyl tensorflow theano torch velox vowpal wabbit weka bidmach benchmarking security apache ranger apache eagle apache knox gateway apache sentry bda system deployment apache ambari apache bigtop apache helix apache mesos apache slider apache whirr apache yarn brooklyn buildoop cloudera hue facebook prism google borg google omega hortonworks hoya kubernetes marathon application adobe spindle apache metron apache nutch apache oodt apache tika argus athenax atlas countly domino eclipse birt elastaert eventhub hermes hipi library hunk imhotep indicative jupyter madlib kapacitor kylin pivotalr rakam qubole sense snappydata snowplow sparkr splunk sumo logic talend warp search engine framework apache lucene apache solr elassandra elasticsearch enigmaio google caffeine google percolator hbase coprocessor lily hbase indexer linkedin bobo linkedin cleo linkedin galene linkedin zoie sphinx search server vespa facebook faiss annoy weaviate mysql fork evolution amazon rds drizzle google cloud sql mariadb mysql cluster percona server proxysql tokudb webscalesql postgresql fork evolution hadoopdb ibm netezza postgresxl recdb stado yahoo everest timescaledb pipelinedb memcached fork evolution embedded database actian psql berkeleydb hanoidb leveldb lmdb rocksdb business intelligence bime analytics blazer chartio datapine gooddata jaspersoft jedox palo jethrodata intermixio metabase microsoft microstrategy numeracy pentaho qlik redash saiku analytics knowage spagobi sparklinedata snap tableau zoomdata data visualization airpal anychart arbor banana bloomery bokeh cartodb chartd chartjs chartistjs crossfilter cubism cytoscape dcjs devextreme react chart echarts envisionjs fnordmetric frappe chart freeboard gephi google chart grafana graphite highcharts ipython kibana lumify matplotlib metricsgraphicjs peity plotly plotlyjs recline redash recharts shiny sigmajs superset vega zeppelin zing chart internet thing sensor data apache edgent incubating azure iot hub tempoiq pubnub thingworx ifttt evrything netlytics interesting reading big data benchmark nosql comparison monitoring kafka performance monitoring hadoop performance monitoring cassandra performance interesting paper facebook stanford amplab amplab amplab amplab google microsoft metamarkets google google google facebook facebook facebook twitter amplab amplab amplab microsoft microsoft amplab google google amplab amplab google facebook amplab google google google yahoo amplab amazon google google google google video book streaming data science scale python dask streaming data storm applied fundamental stream processing application design system analytics stream data processing quality service perspective unified log processing kafka stream action big data spark action spark action ed kafka action fusion action reactive data handling grokking streaming system distributed system graph based approach data visualization awesome list,awesome big data curated list awesome big data framework resource awesomeness inspired awesomephp awesomepython awesomeruby hadoopecosystemtable bigdata contribution always welcome rdbms mysql world popular open source database postgresql world advanced open source database oracle database objectrelational database management system teradata highperformance mpp data warehouse platform framework bistro generalpurpose data processing engine batch stream analytics based novel data model represents data via function process data via column operation opposed set operation conventional approach like mapreduce sql ibm stream platform distributed processing realtime analytics integrates many popular technology big data ecosystem kafka hdfs spark etc apache hadoop framework distributed processing integrates mapreduce parallel processing yarn job scheduling hdfs distributed file system tigon high throughput realtime stream processing framework pachyderm pachyderm data storage platform built docker kubernetes provide reproducible data processing analysis polyaxon platform reproducible scalable machine learning deep learning distributed programming addthis hydra distributed data processing storage system originally developed addthis amplab simr run spark hadoop mapreduce apache apex unified enterprise platform big data stream batch processing apache beam unified model set languagespecific sdks defining executing data processing workflow apache crunch simple java api task like joining data aggregation tedious implement plain mapreduce apache datafu collection userdefined function hadoop pig developed linkedin apache flink highperformance runtime automatic program optimization apache gearpump realtime big data streaming engine based akka apache gora framework inmemory data model persistence apache hama bsp bulk synchronous parallel computing framework apache mapreduce programming model processing large data set parallel distributed algorithm cluster apache pig high level language express data analysis program hadoop apache reef retainable evaluator execution framework simplify unify lower layer big data system apache framework stream processing implementation apache spark framework inmemory cluster computing apache spark streaming framework stream processing part spark apache storm framework stream processing twitter also yarn apache samza stream processing framework based kafka yarn apache tez application framework executing complex dag directed acyclic graph task built yarn apache twill abstraction yarn reduces complexity developing distributed application baidu bigflow interface allows writing distributed computing program providing lot simple flexible powerful apis easily handle data scale cascalog data processing querying library cheetah high performance custom data warehouse top mapreduce concurrent cascading framework data managementanalytics hadoop damballa parkour mapreduce library clojure datasalt pangool alternative mapreduce paradigm datatorrent stram realtime engine designed enable distributed asynchronous real time inmemory bigdata computation unblocked way possible minimal overhead impact performance facebook corona hadoop enhancement remove single point failure facebook peregrine map reduce framework facebook scuba distributed inmemory datastore google dataflow create data pipeline help themæingest transform analyze data google mapreduce map reduce framework google millwheel fault tolerant stream processing framework ibm stream platform distributed processing realtime analytics provides toolkits advanced analytics like geospatial time series etc box jaql declarative programming language working structured semistructured unstructured data kite set library tool example documentation focused making easier build system top hadoop ecosystem metamarkets druid framework realtime analysis large datasets netflix pigpen mapreduce clojure compiles apache pig nokia disco mapreduce framework developed nokia onyx distributed computation cloud pinterest pinlater asynchronous job execution system pydoop python mapreduce hdfs api hadoop ray fast simple framework building running distributed application rackerlabs blueflood multitenant distributed metric processing system skale high performance distributed data processing nodejs stratosphere general purpose cluster computing framework streamdrill useful counting activity event stream different time window finding active one streamsxtopology library enable building ibm stream application java python scala tuktu easytouse platform batch streaming computation built using scala akka play twitter heron heron realtime distributed faulttolerant stream processing engine twitter replacing storm twitter scalding scala library map reduce job built cascading twitter summingbird streaming mapreduce scalding storm twitter twitter tsar timeseries aggregator twitter wallaroo ultrafast elastic data processing engine big fast data fuss java needed distributed filesystem distributed index pilosa open source distributed bitmap index dramatically accelerates query across multiple massive data set document data model actian versant commercial objectoriented database management system crate data open source massively scalable data store requires zero administration facebook apollo facebook paxoslike nosql database jumbodb document oriented datastore hadoop linkedin espresso horizontally scalable documentoriented nosql data store marklogic schemaagnostic enterprise nosql database technology microsoft azure documentdb nosql cloud database service protocol support mongodb mongodb documentoriented database system ravendb transactional opensource document database rethinkdb document database support query like table join group key map data model note term confusion industry two different thing called columnar database listed distributed persistent database built around keymap data model data possibly composite key map keyvalue pair associated system multiple value map associated key map referred column family value map key referred column another group technology also called columnar database distinguished store data disk memory rather storing data traditional way column value given key stored next row row system store column value next work needed get column given key le work needed get value given column former group referred key map data model line keyvalue data model store fairly blurry latter storage format data model listed columnar database read distinction prof daniel abadi blog distinguishing two major type column store apache accumulo distributed keyvalue store built hadoop apache cassandra columnoriented distributed datastore inspired bigtable apache hbase columnoriented distributed datastore inspired bigtable baidu tera internetscale database inspired bigtable facebook hydrabase evolution hbase made facebook google bigtable columnoriented distributed datastore google cloud datastore fully managed schemaless database storing nonrelational data bigtable hypertable columnoriented distributed datastore inspired bigtable infinidb accessed mysql interface use massive parallel processing parallelize query tephra transaction hbase twitter manhattan realtime multitenant distributed database twitter scale scylladb columnoriented distributed datastore written c totally compatible apache cassandra keyvalue data model aerospike nosql flashoptimized inmemory open source server code c java erlang precisely tuned avoid context switching memory copy amazon dynamodb distributed keyvalue store implementation dynamo paper badger fast simple efficient persistent keyvalue store written natively go bolt embedded keyvalue database go btdb key value database net object db layer rpc dynamic il much buntdb fast embeddable inmemory keyvalue database go custom indexing geospatial support edis protocolcompatible server replacement redis elephantdb distributed database specialized exporting data hadoop eventstore distributed time series database ghostdb distributed inmemory general purpose keyvalue data store delivers microsecond performance scale griddb suitable sensor data stored timeseries hyperdex scalable next generation keyvalue document store wide array feature including consistency fault tolerance high performance ignite inmemory keyvalue data store providing full sqlcompliant data access optionally backed disk storage linkedin krati simple persistent data store low latency high throughput linkedin voldemort distributed keyvalue storage system oracle nosql database distributed keyvalue database oracle corporation redis memory key value datastore riak decentralized datastore storehaus library work asynchronous key value store twitter summitdb inmemory nosql keyvalue database disk persistance using raft consensus algorithm tarantool efficient nosql database lua application server tikv distributed keyvalue database powered rust inspired google spanner hbase geolocation data store spatial index realtime geofence supporting variety object type including latitudelongitude point bounding box xyz tile geohashes geojson treodedb keyvalue store replicated sharded provides atomic multirow writes graph data model agensgraph new generation multimodel graph database modern complex data environment apache giraph implementation pregel based hadoop apache spark bagel implementation pregel part spark arangodb multi model distributed database dgraph scalable distributed low latency high throughput graph database aimed providing google production level scale throughput low enough latency serving real time user query terabyte structured data eliasdb lightweight graph based database require thirdparty library facebook tao tao distributed data store widely used facebook store serve social graph gchq gaffer gaffer gchq framework make easy store largescale graph node edge statistic google cayley opensource graph database google pregel graph processing framework graphlab powergraph core c graphlab api collection highperformance machine learning data mining toolkits built top graphlab api graphx resilient distributed graph system spark gremlin graph traversal language infovore rdfcentric mapreduce framework intel graphbuilder tool construct largescale graph top hadoop janusgraph opensource distributed graph database multiple option storage backends bigtable hbase cassandra etc indexing backends elasticsearch solr lucene mapgraph massively parallel graph processing gpus microsoft graph engine distributed inmemory data processing engine underpinned stronglytyped inmemory keyvalue store general distributed computation engine graph database written entirely java orientdb document graph database phoebus framework large scale graph processing titan distributed graph database built cassandra twitter flockdb distributed graph database nodexl free opensource template make easy explore network graph columnar database note please read note keymap data model section columnar storage explanation columnar storage might want actian vector columnoriented analytic database cstore column oriented dbms clickhouse opensource columnoriented database management system allows generating analytical data report real time eventql distributed columnoriented database built largescale event collection analytics monetdb column store database parquet columnar storage format hadoop pivotal greenplum purposebuilt dedicated analytic data warehouse offer columnar engine well traditional rowbased one vertica designed manage large fastgrowing volume data provide fast query performance used data warehouse sqream db gpu powered big data database designed analytics data warehousing compliant sql suitable data set google bigquery google cloud offering backed pioneering work dremel amazon redshift amazon cloud offering also based columnar datastore backend indexr opensource columnar storage format fast realtime analytic big data locustdb experimental analytics database aiming set new standard query performance commodity hardware newsql database actian ingres commercially supported opensource sql relational database management system actordb distributed sql database scalability kv store keeping query capability relational database amazon redshift data warehouse service based postgresql bayesdb statistic oriented sql database bedrock simple modular networked distributed transaction layer built atop sqlite citusdb scale postgresql sharding replication cockroach scalable georeplicated transactional datastore clustered rdbms built optimistic concurrency control technique datomic distributed database designed enable scalable flexible intelligent application foundationdb distributed database inspired google distributed sql database built spanner google spanner globally distributed semirelational database hstore experimental mainmemory parallel database management system optimized online transaction processing oltp application haeinsa linearly scalable multirow multitable transaction library hbase based percolator handlersocket nosql plugin mysqlmariadb infinisql infinity scalable rdbms kareldb relational database backed apache kafka mapd gpu inmemory database big data analysis visualization platform memsql memory sql database witho optimized columnar storage flash nuodb sqlacid compliant distributed database oracle timesten inmemory database inmemory relational database management system persistence recoverability pivotal gemfire xd lowlatency inmemory distributed sql data store provides sql interface inmemory table data persistable hdfs sap hana inmemory columnoriented relational database management system senseidb distributed realtime semistructured database sky database used flexible high performance analysis behavioral data symmetricds open source software file database synchronization tidb tidb distributed sql database inspired design google voltdb claim fastest inmemory database yugabytedb open source highperformance distributed sql database compatible postgresql timeseries database axibase time series database integrated time series database top hbase builtin visualization ruleengine sql support chronix time series storage built store time series highly compressed fast access time cube us mongodb store time series data heroic scalable time series database based cassandra elasticsearch influxdb distributed time series database irondb scalable generalpurpose time series database kairosdb similar opentsdb allows cassandra distributed time series database used storing realtime metric long retention newt time series database based apache cassandra tdengine time series database c utilizing unique feature iot improve readwrite throughput reduce space needed store data opentsdb distributed time series database top hbase prometheus time series database service monitoring system beringei facebook inmemory timeseries database traildb efficient tool storing querying series event druid column oriented distributed data store ideal powering interactive application riakts riak t enterprisegrade nosql time series database optimized specifically iot time series data akumuli akumuli numeric timeseries database used capture store process timeseries data realtime word akumuli translated esperanto accumulate rhombus timeseries object store cassandra handle complexity building wide row index dalmatiner db fast distributed metric database blueflood distributed system designed ingest process time series data timely timely time series database application provides secure access time series data based accumulo grafana siridb highlyscalable robust fast open source time series database cluster functionality thanos thanos set component create highly available metric system unlimited storage capacity using multiple existing prometheus deployment victoriametrics fast scalable resourceeffective opensource tsdb compatible prometheus singlenode cluster version included sqllike processing actian sql hadoop high performance interactive sql access hadoop data apache drill framework interactive analysis inspired dremel apache hcatalog table storage management layer hadoop apache hive sqllike data warehouse system hadoop apache calcite framework allows efficient translation query involving heterogeneous federated data apache phoenix sql skin hbase aster database sqllike analytic processing mapreduce cloudera impala framework interactive analysis inspired dremel concurrent lingual sqllike query language cascading datasalt splout sql full sql query engine big datasets dremio opensource sqllike dataasaservice platform based apache arrow facebook prestodb distributed sql query engine google bigquery framework interactive analysis implementation dremel pipelinedb opensource relational database run sql query continuously stream incrementally storing result table pivotal hdb sqllike data warehouse system hadoop rainstordb database storing petabytescale volume structured semistructured data spark catalyst query optimization framework spark shark sparksql manipulating structured data using spark splice machine fullfeatured sqlonhadoop rdbms acid transaction stinger interactive query hive tajo distributed data warehouse system hadoop trafodion enterpriseclass sqlonhbase solution targeting big data transactional operational workload data ingestion amazon kinesis realtime processing streaming data massive scale amazon web service glue serverless fully managed extract transform load etl service apache chukwa data collection system apache flume service manage large amount log data apache kafka distributed publishsubscribe messaging system apache nifi apache nifi integrated data logistics platform automating movement data disparate system apache pulsar distributed pubsub messaging platform flexible messaging model intuitive client api apache sqoop tool transfer data hadoop structured datastore embulk opensource bulk data loader help data transfer various database storage file format cloud service facebook scribe streamed log data aggregator fluentd tool collect event log gazette distributed streaming infrastructure built cloud storage make easy mix match batch streaming paradigm google photon geographically distributed system joining multiple continuously flowing stream data realtime high scalability low latency heka open source stream processing software system hiho framework connecting disparate data source hadoop kestrel distributed message queue system linkedin databus stream change capture event database linkedin kamikaze utility package compressing sorted integer array linkedin white elephant log aggregator dashboard logstash tool managing event log netflix suro log agregattor like storm samza based chukwa pinterest secor service implementing kafka log persistance linkedin gobblin linkedin universal data ingestion framework skizze sketch data store deal problem around counting sketching using probabilistic datastructures streamsets data collector continuous big data ingest infrastructure simple use ide alooma data pipeline service enabling moving data source mysql data warehouse rudderstack open source customer data infrastructure segment mparticle alternative written go service programming akka toolkit runtime distributed fault tolerant eventdriven application jvm apache avro data serialization system apache curator java libaries apache zookeeper apache karaf osgi runtime run top osgi framework apache thrift framework build binary protocol apache zookeeper centralized service process management google chubby lock service looselycoupled distributed system hydrosphere mist service exposing apache spark analytics job machine learning model realtime batch reactive web service linkedin norbert cluster manager mara lightweight opinionated etl framework halfway plain script apache airflow openmpi message passing framework serf decentralized solution service discovery orchestration spotify luigi python package building complex pipeline batch job handle dependency resolution workflow management visualization handling failure command line integration much spring xd distributed extensible system data ingestion real time analytics batch processing data export twitter elephant bird library working lzopcompressed data twitter finagle asynchronous network stack jvm scheduling machine learning azure ml studio cloudbased azureml r python machine learning platform brain neural network javascript oryx lambda architecture apache spark apache kafka realtime large scale machine learning concurrent pattern machine learning library cascading convnetjs deep learning javascript train convolutional neural network ordinary one browser datavec vectorization data preprocessing library deep learning java scala part ecosystem fast open deep learning jvm java scala clojure neural network configuration layer powered c library us spark hadoop train net multiple gpus cpu decider flexible extensible machine learning ruby encog machine learning framework support variety advanced algorithm well support class normalize process data etcml text classification machine learning etsy conjecture scalable machine learning scalding feast feature store management discovery access machine learning feature feast provides consistent view feature data model training model serving graphlab create machine learning platform python broad collection ml toolkits data engineering deployment tool statistical machine learning math runtime hadoop r python karate club unsupervised machine learning library graph structured data python kera intuitive neural net api inspired torch run atop theano tensorflow lambdo lambdo workflow engine significantly simplifies analysis process unifying feature engineering machine learning operation little ball fur subsampling library graph structured data python mahout apachebacked machine learning library hadoop mlbase distributed machine learning library bdas stack mlpneuralnet fast multilayer perceptron neural network library io mac o x ml workspace allinone webbased ide specialized machine learning data science moa moa performs big data stream mining real time large scale machine learning monkeylearn text mining made easy extract classify data text matrix library jvm numpy java nupic numenta platform intelligent computing braininspired machine intelligence platform biologically accurate neural network based cortical learning algorithm predictionio machine learning server buit hadoop mahout cascading reinforcement learning java scala includes deepq learning algorithm integrates open ai gym run ecosystem samoa distributed streaming machine learning framework scikitlearn scikitlearn machine learning python spark mllib spark implementation common machine learning ml functionality sibyl system large scale machine learning google tensorflow library google machine learning using data flow graph theano pythonfocused machine learning library supported university montreal torch deep learning library lua api supported nyu facebook velox system serving machine learning prediction vowpal wabbit learning system sponsored microsoft yahoo weka suite machine learning software bidmach cpu gpuaccelerated machine learning library benchmarking security apache ranger central security admin finegrained authorization hadoop apache eagle real time monitoring solution apache knox gateway single point secure access hadoop cluster apache sentry security module data stored hadoop bda vulnerability detector hadoop spark system deployment apache ambari operational framework hadoop mangement apache bigtop system deployment framework hadoop ecosystem apache helix cluster management framework apache mesos cluster manager apache slider yarn application deploy existing distributed application yarn apache whirr set library running cloud service apache yarn cluster manager brooklyn library simplifies application deployment management buildoop similar apache bigtop based groovy language cloudera hue web application interacting hadoop facebook prism multi datacenters replication system google borg job scheduling monitoring system google omega job scheduling monitoring system hortonworks hoya application deploy hbase cluster yarn kubernetes system automating deployment scaling management containerized application marathon mesos framework longrunning service application web application alert management resulting scheduled search elasticsearch adobe spindle nextgeneration web analytics processing scala spark parquet apache metron platform integrates variety open source big data technology order offer centralized tool security monitoring analysis apache nutch open source web crawler apache oodt capturing processing sharing data nasa scientific archive apache tika content analysis toolkit argus time series monitoring alerting platform athenax streaming analytics platform enables user run productionquality large scale streaming analytics using structured query language sql atlas backend managing dimensional time series data countly open source mobile web analytics platform based nodejs mongodb domino run scale share deploy model without infrastructure eclipse birt eclipsebased reporting system elastaert elastalert simple framework alerting anomaly spike pattern interest data elasticsearch eventhub open source event analytics platform hermes asynchronous message broker built top kafka hipi library api performing image processing task hadoop mapreduce hunk splunk analytics hadoop imhotep large scale analytics platform indeed indicative web mobile analytics tool data warehouse aws bigquery integration jupyter notebook project application interactive data science scientific computing across programming language madlib dataprocessing library rdbms analyze data kapacitor open source framework processing monitoring alerting time series data kylin open source distributed analytics engine ebay pivotalr r pivotal hd hawq postgresql rakam opensource realtime custom analytics platform powered postgresql kinesis prestodb qubole autoscaling hadoop cluster builtin data connector sense cloud platform data science big data analytics snappydata distributed inmemory data store realtime operational analytics delivering stream analytics oltp online transaction processing olap online analytical processing built spark single integrated cluster snowplow enterprisestrength web event analytics powered hadoop kinesis redshift postgres sparkr r frontend spark splunk analyzer machinegenerated data sumo logic cloud based analyzer machinegenerated data talend unified open source environment yarn hadoop hbase hive hcatalog pig warp query example tool big data o x app search engine framework apache lucene search engine library apache solr search platform apache lucene elassandra fork elasticsearch modified run top apache cassandra scalable resilient peertopeer architecture elasticsearch search analytics engine based apache lucene enigmaio freemium robust web application exploring filtering analyzing searching exporting massive datasets scraped across web google caffeine continuous indexing system google percolator continuous indexing system hbase coprocessor implementation percolator part hbase lily hbase indexer quickly easily search content stored hbase linkedin bobo faceted search implementation written purely java extension apache lucene linkedin cleo flexible software library enabling rapid development partial outoforder realtime typeahead search linkedin galene search architecture linkedin linkedin zoie realtime searchindexing system written java managing gigabyte java fulltext search engine large document collection written java highly customisable highperformance provides stateoftheart feature new research algorithm sphinx search server fulltext search engine vespa engine lowlatency computation large data set store index data query selection processing data performed serving time facebook faiss library efficient similarity search clustering dense vector contains algorithm search set vector size one possibly fit ram also contains supporting code evaluation parameter tuning faiss written c complete wrapper pythonnumpy annoy c library python binding search point space close given query point also creates large readonly filebased data structure mmapped memory many process may share data weaviate weaviate graphqlbased semantic search engine buildin word embeddings mysql fork evolution amazon rds mysql database amazon cloud drizzle evolution mysql google cloud sql mysql database google cloud mariadb enhanced dropin replacement mysql mysql cluster mysql implementation using ndb cluster storage engine percona server enhanced dropin replacement mysql proxysql high performance proxy mysql tokudb tokudb storage engine mysql mariadb webscalesql collaboration among engineer several company face similar challenge running mysql scale postgresql fork evolution hadoopdb hybrid mapreduce dbms ibm netezza highperformance data warehouse appliance postgresxl scalable open source postgresqlbased database cluster recdb open source recommendation engine built entirely inside postgresql stado open source mpp database system solely targeted data warehousing data mart application yahoo everest multipetabyte database mpp derived postgresql timescaledb opensource timeseries database optimized fast ingest complex query pipelinedb streaming sql database opensource relational database run sql query continuously stream incrementally storing result table memcached fork evolution embedded database actian psql acidcompliant dbms developed pervasive software optimized embedding application berkeleydb software library provides highperformance embedded database keyvalue data hanoidb erlang lsm btree storage leveldb fast keyvalue storage library written google provides ordered mapping string key string value lmdb ultrafast ultracompact keyvalue embedded data store developed symas rocksdb embeddable persistent keyvalue store fast storage based leveldb business intelligence bime analytics business intelligence platform cloud blazer business intelligence made simple chartio lean business intelligence platform visualize explore data datapine selfservice business intelligence tool cloud gooddata platform data product embedded analytics jaspersoft powerful business intelligence suite jedox palo customisable business intelligence platform jethrodata interactive big data analytics intermixio performance monitoring amazon redshift metabase simplest fastest way get business intelligence analytics everyone company microsoft business intelligence software platform microstrategy software platform business intelligence mobile intelligence network application numeracy fast clean sql client business intelligence pentaho business intelligence platform qlik business intelligence analytics platform redash open source business intelligence platform supporting multiple data source planned query saiku analytics open source analytics platform knowage open source business intelligence platform former spagobi sparklinedata snap modern bi platform powered apache spark tableau business intelligence platform zoomdata big data analytics data visualization airpal web ui prestodb anychart fast simple flexible javascript charting library featuring pure j api arbor graph visualization library using web worker jquery banana visualize log timestamped data stored solr port kibana bloomery web ui impala bokeh powerful python interactive visualization library target modern web browser presentation goal providing elegant concise construction novel graphic style also delivering capability highperformance interactivity large streaming datasets reusable chart library cartodb opensource freemium hosting geospatial database powerful frontend editing capability robust api chartd responsive retinacompatible chart img tag chartjs open source chart visualization chartistjs another open source chart visualization crossfilter javascript library exploring large multivariate datasets browser work well dcjs cubism javascript library time series visualization cytoscape javascript library visualizing complex network dcjs dimensional charting built work natively crossfilter rendered using excellent connecting chartsadditional metadata hover event javascript library manipulating document compose complex datadriven visualization reusable chart component fairly robust set reusable chart style devextreme react chart highperformance pluginbased react chart bootstrap material design echarts baidus enterprise chart envisionjs dynamic visualization fnordmetric write sql query return svg chart rather table frappe chart githubinspired simple modern svg chart web zero dependency freeboard pen source realtime dashboard builder iot web mashups gephi awardwinning opensource platform visualizing manipulating large graph network connection like photoshop graph available window mac o x google chart simple charting api grafana graphite dashboard frontend editor graph composer graphite scalable realtime graphing highcharts simple flexible charting api ipython provides rich architecture interactive computing kibana visualize log timestamped data lumify open source big data analysis visualization platform matplotlib plotting python metricsgraphicjs library built top optimized timeseries data chart component peity progressive svg bar line pie chart plotly easytouse web service allows rapid creation complex chart heatmaps histogram upload data create style chart plotly online spreadsheet fork others plot plotlyjs open source javascript graphing library power plotly recline simple powerful library building data application pure javascript html redash opensource platform query visualize data recharts composable charting library built react component shiny web application framework r sigmajs javascript library dedicated graph drawing superset data exploration platform designed visual intuitive interactive making easy slice dice visualize data perform analytics speed thought vega visualization grammar zeppelin notebookstyle collaborative data analysis zing chart javascript charting library big data internet thing sensor data apache edgent incubating programming model microkernel style runtime embedded gateway small footprint edge device enabling local realtime analytics edge device azure iot hub cloudbased bidirectional monitoring messaging hub tempoiq cloudbased sensor analytics platform internet thing pubnub data stream network thingworx rapid development connection intelligent system ifttt evrything making product smart netlytics analytics platform process network data spark interesting reading big data benchmark benchmark redshift hive shark impala stigertez nosql comparison cassandra v mongodb v couchdb v redis v riak v hbase v couchbase v v hypertable v elasticsearch v accumulo v voltdb v scalaris comparison monitoring kafka performance guide monitoring apache kafka including native method metric collection monitoring hadoop performance guide monitoring hadoop overview hadoop architecture native method metric collection monitoring cassandra performance guide monitoring cassandra including native method metric collection interesting paper facebook one trillion edge graph processing facebookscale stanford mining massive datasets amplab presto distributed machine learning graph processing sparse matrix amplab mlbase distributed machinelearning system amplab shark sql rich analytics scale amplab graphx resilient distributed graph system spark google hyperloglog practice algorithmic engineering state art cardinality estimation algorithm microsoft scalable progressive analytics big data cloud metamarkets druid realtime analytical data store google online asynchronous schema change google distributed sql database scale google millwheel faulttolerant stream processing internet scale facebook scuba diving data facebook facebook unicorn system searching social graph facebook scaling memcache facebook twitter unified logging infrastructure data analytics twitter amplab blink done interactive query large data amplab fast interactive analytics hadoop data spark amplab shark fast data analysis using coarsegrained distributed memory microsoft paxos replicated state machine basis highperformance data store microsoft paxos made parallel amplab blinkdb query bounded error bounded response time large data google processing trillion cell per mouse click google spanner google globallydistributed database amplab scarlett coping skewed popularity content mapreduce cluster amplab mesos platform finegrained resource sharing data center google megastore providing scalable highly available storage interactive service facebook finding needle haystack facebook photo storage amplab spark cluster computing working set google pregel system largescale graph processing google largescale incremental processing using distributed transaction notiﬁcations base percolator caffeine google dremel interactive analysis webscale datasets yahoo distributed stream computing platform hadoopdb architectural hybrid mapreduce dbms technology analytical workload amplab chukwa largescale monitoring system amazon dynamo amazon highly available keyvalue store google chubby lock service looselycoupled distributed system google bigtable distributed storage system structured data google mapreduce simplied data processing large cluster google google file system video book streaming data science scale python dask data science scale python dask teach build distributed data project handle huge amount data streaming data streaming data introduces concept requirement streaming realtime data system storm applied storm applied practical guide using apache storm realworld task associated processing analyzing realtime data stream fundamental stream processing application design system analytics comprehensive handson guide combining fundamental building block emerging research stream processing ideal application designer system builder analytic developer well student researcher field stream data processing quality service perspective present new paradigm suitable stream complex event processing unified log processing unified log processing practical guide implementing unified log event stream kafka kinesis business kafka stream action kafka stream action teach everything need know implement stream processing data flowing kafka platform allowing focus getting data without sacrificing time effort big data big data teach build big data system using architecture take advantage clustered hardware along new tool designed specifically capture analyze webscale data spark action spark action ed spark action teach theory skill need effectively handle batch streaming data using spark fully updated spark kafka action kafka action fastpaced introduction every aspect working kafka need really reap benefit fusion action fusion action teach build fullfeatured data analytics pipeline including document data search distributed data clustering reactive data handling reactive data handling collection five handpicked chapter selected manuel bernhardt introduce building reactive application capable handling realtime processing large data load free ebook grokking streaming system grokking streaming system help unravel streaming system work whether right business written toolagnostic able apply learn matter framework choose distributed system graph based approach data visualization awesome list
314,Lobsters,scala,Scala programming,"Awesome Scala - A curated list of awesome Scala frameworks, libraries and software.",https://github.com/lauris/awesome-scala,awesome scala curated list awesome scala framework library software,awesome scala awesomepython awesomeawesomeness scaladex table content artificial intelligence database akkapersistencegcpdatastore anorm casbah clickhousescalaclient couchbase couchdbscala doobie finagle laserdisc longevity mapperdao memcontinuationed morpheus neotypes phantom postgresql mysql async quill reactivecouchbase reactivemongo rediscala relate salat sangria scala activerecord scalaforklift scalaredis scalasql scalarelational scalikejdbc scanamo scredis scruid shade slick slickpg sorm squeryl tepkin messaging graphical user interface scalafx web framework analogweb chaos colossus finatra lift discussion peregine play play pagelets reactive scalajsreact scalatra skinny framework suzaku unfiltered xitrum youi reactive web framework bindingscala korolev udash vertx web widok data binding validation authentication akkahttpsession aws request signer play google auth module playsilhouette securesocial authorization cryptography testing json yaml csv serialization avrocodegen chill msgpack pickling scalabuff scalapb scodec scrooge validation µpickle science data analysis algebird axle bigdl breeze chalk doddlemodel factorie figaro libra lomrf mgo mllib numsca openmole optimus oscar persistunits predictionio ring saddle smile spark notebook spire squants swiftlearner synapsis tensorflowscala tyche zeppelin big data bidmach flink gearpump gridscale kafka reactivekafka scalding schemer scio apache beam google cloud dataflow scrunch apache crunch spark sparkdeployer sparkplug sparkta summingbird vega command line interface image processing image analysis sound processing music functional reactive programming iteratee monix reactive collection reactorscalaextensions project reactor rescala rxscala scalafrp scalarx scalaz zio synapsegrid vertx scala modularization dependency injection distributed system akka akkatracing autobreaker circuit breaker clump curiodb finagle glokka lagom parapet reactor extension ammoniteops betterfiles cassovary cat chimney chronoscala dslscala scalaz eff enableifscala enumeratum freasymonad freedsl freestyle hamster idid lamma larray logstage monocle nscala persistlogging quicklens rapture record scala refined resolvable scala async scala graph scalalogging scalameta scalactic scalaz scribe shapeless simulacrum squid stateless future tinylog twitter util wvletlog misc agora ammoniterepl bootzooka eclair fansi googleapiscala miniboxing openquant ostinato play swagger powerscala pprint pureconfig replesent scaladebugger scalassh scalan scalastm scavenger servicechassis settler simple scala config typesafe config yahoofinancescala android http akka http akka dispatch asynchttpclient finchio finagle fintrospect finagle jefe lolhttp requestsscala röshttp scalajhttp scalaxb spray sttp tubesocks semantic web bananardf rdfp scowl metric monitoring kamon metricsscala parsing sbt plugins xml html markdown laika javascript scheduling templating tool geospatial geotrellis sfcurve devops learning scala community member blog company blog misc tour scala ca art demo example scala chinese deploying scala library sonatype dummy dr mark lewis website youtube playlist exercism scala exercise essential scala functional programming scala functional programming mortal get programming scala introduction programming dependent type scala learnbydoing functional programming course scala programming community curated resource learning scala reactive programming scala akka scala collection cookbook scala exercise scala cat cat scala depth scala school scalera blog scala impatient edition type astronaut guide shapeless clean intuitive unintrusive boilerplatefree scala api fast flexible intuitive json scala scala libhunt podcasts corecursive interview scala log scala love contributing,awesome scala community driven list useful scala library framework software catalog library starting point exploration inspired awesomepython amazingly awesome list found awesomeawesomeness list also awesome scaladex searchable tagged centralized index scala library project stargazer bold table content artificial intelligence database database access library scala akkapersistencegcpdatastore akkapersistencegcpdatastore journal snapshot store plugin akkapersistence using google cloud datastore anorm simple sql data access casbah officially supported scala driver mongodb clickhousescalaclient reactive client clickhouse couchbase official couchbase client scala couchdbscala purely functional scala client couchdb dynamo db database done scala way library allows accessing dynamodb purely functional way doobie pure functional jdbc layer scala scala dsl reactive client elasticsearch scala etcd client implementing apis finagle postgresql protocol support finagle laserdisc futurefree native pure fp redis client longevity persistence framework scala nosql domain driven design orientation lightweight convenience wrapper around lucene simplify complex task add scala sugar mapperdao orm library oracle mysql mssql postgresql memcontinuationed memcached client scala morpheus reactive type safe scala driver mysqlpostgres scala client using akka http compiletime query interpolation case class support true nonblocking io much neotypes pure functional driver phantom reactive typed scala driver apache cassandra postgresql mysql async async database driver talk postgresql mysql scala scala client apache pulsar quill compiletime language integrated query scala reactivecouchbase reactive scala driver couchbase also includes play plugin official plugin also development reactivemongo reactive scala driver mongodb rediscala nonblocking reactive redis driver scala sentinel support relate lightweight blazingfast database access layer scala abstract idiosyncricies jdbc keeping complete control sql salat orm mongodb related playplugin also available sangria scala graphql implementation scala activerecord orm library scala inspired activerecord ruby rail scalaforklift typesafe database migration slick git etc scalaredis scala library connecting redis server clustering support scalasql yet another sqlbased db access library scala language scalarelational typesafe framework defining modifying querying sql database scalikejdbc tidy sqlbased db access library scala developer scanamo library make using dynamodb scala simpler le errorprone scredis nonblocking redis client built top akka io used livestream scruid scruid scaladruid open source library allows compose druid query easily scala shade memcached client scala based spymemcached slick modern database query access library scala slickpg slick extension postgresql sorm functional boilerplatefree scala orm squeryl scala dsl talking database minimum verbosity maximum type safety tepkin reactive mongodb driver scala built top akka io akka stream messaging graphical user interface library creation graphical user interface scalafx scala dsl creating graphical user interface sits top javafx web framework scala framework web development analogweb tiny simple pluggable web framework scala chaos lightweight framework writing rest service scala colossus lightweight framework building highperformance application scala require nonblocking network io finatra sinatrainspired web framework scala running top finagle lift secure powerful full stack web framework discussion peregine simple async lightweight scala web framework play make easy build scalable fast realtime web application java scala play pagelets module play framework build resilient modular play application elegant concise manner reactive frp web abstraction plugged web framework currently binding lift scalajsreact facebook react scalajs scalatra tiny scala highperformance async web framework inspired sinatra skinny framework fullstack web app framework upon scalatra rapid development scala suzaku suzaku web ui framework scala unfiltered modular set unopinionated primitive servicing http websocket request scala xitrum async clustered scala web framework http server fusion top netty akka hazelcast youi next generation user interface framework server engine scala scalajs reactive web framework scala library reactive web development bindingscala reactive web framework enables use native xml literal syntax create reactive dom node able automatically change whenever data source change korolev modern singlepage application running server side udash web framework based scalajs support property binding frontend routing much also provides strongly typed client server rpc system based websockets vertx web toolkit build reactive web application widok reactive web framework jvm scalajs data binding validation scala library data binding validation scala library authentication library implementing authentication scheme akkahttpsession web mobile clientside session akkahttp based application optional jwt support aws request signer helper evaluate signing header http request amazon web service implementation server designed mockingtesting configurable environment variable use typesafe config play google auth module simple implementation google openid connect authentication play application security library managing authentication ca oauth openid saml ldap sql jwt authorization logout play java scala playsilhouette authentication library play framework application support several authentication method including openid credential custom authentication scheme authentication authorization module oauth serverside implementation written scala securesocial module provides oauth openid authentication play framework application authorization library implementing authorization strategy play module supporting rolebased proprietary authorization idiomatic apis scala java apis provided cryptography cryptography encryption library testing library code testing json library work json yaml library work yaml csv library work csv serialization library serializing deserializing data storage transport avrocodegen code generation avro schema serializedeserialize avro message runtime reflection avro schema generation serialization deserialization scala chill extension kryo serialization library ease configuration system like hadoop storm msgpack efficient binary serialization library pickling fast customizable boilerplatefree pickling support scalabuff scala protocol buffer protobuf compiler scalapb protocol buffer grpc support scala scodec combinator library working binary data scrooge apache thrift code generator scala validation advanced validation serialization json html form data etc reflection runtime µpickle lightweight serialization library scala work scalajs allowing transfer structured data jvm javascript science data analysis library scientific computing data analysis numerical processing algebird abstract algebra scala axle spirebased dsl scientific cloud computing bigdl bigdl distributed deep learning library apache spark breeze breeze numerical processing library scala chalk chalk natural language processing library scala spark api benchmark analyse clustering algorithm vectorization generate doddlemodel inmemory machine learning library built top breeze provides immutable object expose functionality scikitlearnlike api factorie toolkit deployable probabilistic modeling implemented software library scala figaro figaro probabilistic programming language support development rich probabilistic model libra libra dimensional analysis library based shapeless spire singletonops contains box support si unit numeric type lomrf opensource implementation markov logic network scala mgo modular multiobjective evolutionary algorithm optimization library enforcing immutability mllib machine learning framework spark ndimensional array linear algebra scala api similar numpy scala wrapper around numsca numsca numpy scala openmole openmole open model experiment workflow engine designed leverage computing power distributed execution environment naturally parallel process optimus optimus library linear quadratic mathematical optimization written scala programming language oscar scala toolkit solving operation research problem persistunits type check unit measure scala predictionio machine learning server developer data scientist built apache spark hbase spray ring efficient library polynomial ring commutative algebra polynomial gcds polynomial factorization sci thing really high speed saddle minimalist port panda scala smile statistical machine intelligence learning engine smile fast comprehensive machine learning system spark notebook scalable stable scala spark focused notebook bridging gap jvm data scientist incl extendable typesafe reactive chart spire powerful new number type numeric abstraction scala squants scala api quantity unit measure dimensional analysis swiftlearner simply written algorithm help study machine learning write implementation synapsis lightweight neural network library j jvm net tensorflowscala tensorflow api scala programming language tyche probability distribution stochastic markov process lattice walk simple random sampling simple yet robust scala library zeppelin scala spark notebook like ipython notebook big data bidmach cpu gpu machine learning library using jni gpu computation flink processing framework powerful stream batchprocessing capability gearpump lightweight realtime big data streaming engine gridscale scala api computing cluster grid kafka kafka message broker project aim provide unified highthroughput lowlatency platform handling realtime data feed reactivekafka reactive stream api apache kafka scalding scala binding cascading abstraction hadoop mapreduce schemer schema registry csv tsv json avro parquet schema support schema inference graphql api scio scala api apache beam google cloud dataflow none scrunch scala wrapper apache crunch provides framework writing testing running mapreduce pipeline spark lightning fast cluster computing faster hadoop iterative algorithm memory caching faster hadoop singlepass mapreduce job compatible yarnenabled hadoop cluster run mesos standalone mode well sparkdeployer sbt plugin help deploying apache spark standalone cluster submitting job cloud system like aws sparkplug spark package plug hole data using sql based rule sparkta real time aggregation based spark streaming summingbird implementation lambda architecture software abstraction single api hadoop storm vega missing matplotlib scala spark command line interface library creation command line interface image processing image analysis image processing image analysis sound processing music functional reactive programming event stream signal observables etc compositional streaming io library scala iteratee iteratees cat monix extension scala standard library multithreading primitive functional reactive programming scalajs compatible reactive collection library incorporates event stream signal specialized collection called reactive container express concurrency using isolates channel reactorscalaextensions scala extension project reactor none rescala rescala library functional reactive programming jvm web provides rich api event stream transformation signal composition managed consistent uptodate state minimal syntactic overhead rxscala reactive extension scala library composing asynchronous eventbased program using observable sequence scalafrp functional reactive programming scala event stream scalarx experimental library functional reactive programming scala reactive variable scalajs compatible scalaz zio typesafe composable library asynchronous concurrent programming scala synapsegrid frp framework constructing reactive realtime immutable data flow system implement original way running organizing eventdriven system based petri net topology viewed dot graph library compatible akka seamlessly communicate actor vertx polyglot reactive application platform jvm aim alternative nodejs concurrency model resembles actor support scala clojure java javascript ruby groovy python modularization dependency injection modularization application dependency injection etc distributed system library framework writing distributed application akka toolkit runtime building highly concurrent distributed fault tolerant eventdriven application akkatracing distributed tracing extension akka provides integration play framework spray akka http autobreaker automatically wrap class return future circuit breaker clump library expressive efficient service composition curiodb distributed persistent redis clone built scala akka finagle extensible protocolagnostic rpc system designed high performance concurrency glokka library register lookup actor name akka cluster lagom framework creating microservicebased system parapet purely functional library build distributed eventdriven system reactor foundational framework distributed computing fuse functional reactive programming traditional actor extension scala extension ammoniteops safe easy filesystem operation scala convenient bash shell betterfiles simple safe intuitive scala io betterfiles dependencyfree pragmatic thin scala wrapper around java nio cassovary scala library designed ground space efficiency handling graph billion node edge cat lightweight modular extensible library functional programming chimney scala library boilerplatefree data transformation chronoscala scala wrapper java datetime api dslscala framework create embedded domainspecific language scala along builtin dsl including asyncawait generator delimited continuation asynchronous collection comprehension raii monadic notation cat scala etc macro library convert native imperative syntax scalaz monadic expression eff extensible effect alternative monad transformer computing effect functional way enableifscala library switch scala code compiletime like cc enumeratum macro replace scala enumeration sealed family case object allows additional check compiler eg missing case match statement additinal support json library play framework freasymonad easy way create free monad cat scalaz using scala macro firstclass intellij support freedsl library implement composable side effect weaving typeclasses wrapping type free monad freestyle cohesive pragmatic framework fp centric scala library hamster mini scala utility library compatible functional programming beginner featuring validation monad transformer hlists union type idid library define common interface different id type lamma scala date library date schedule generation larray large offheap array mmap file fast scalafriendly logging binding top us macro extreme performance logstage zeroeffort structural logger scala integration monocle opticslens library purely functional manipulation immutable object nscala scala wrapper joda time persistlogging comprehensive logging library scala quicklens modify deeply nested case class field elegant api rapture collection library common everyday programming task io json etc record scala labeled record scala based structural refinement type macro refined simple refinement type compile runtime checking resolvable library optimize fetching immutable data structure several endpoint several format scala async asynchronous programming facility scala scala graph scala library basic graph functionality seamlessly fit scala standard collection library scalalogging convenient performant logging library scala wrapping scalameta cleanroom implementation metaprogramming toolkit scala scalactic small library utility related quality help keeping code clear correct scalaz extension core scala library functional programming scribe practical logging framework nt depend logging framework completely configured programmatically shapeless type class dependent type based generic programming library scala simulacrum first class syntax support type class scala squid typesafe metaprogramming framework typed hygienic quasiquotes stateless future asynchronous programming fully featured scala syntax tinylog lightweight logging framework native logging api scala twitter util generalpurpose scala library including future implementation concurrency tool wvletlog library enhancing application log color source code location misc project nt fit specific category agora library votecounting algorithm election ammoniterepl improved scala repl syntax highlighting output formatting multiline input nonblocking aws sdk scala exposing stronglytyped apis built top cat bootzooka simple project quickly start developing web application using angularjs akka http without need write login user registration etc eclair acinq lightning network implementation written scala lightning network second layer protocol built top bitcoin address scalability privacy confirmation time many issue fansi scalascalajs library manipulating fancy ansi colored string lean functional library google cloud service scala km cloud storage pubsub googleapiscala simple scala library offering control google drive calendar admin sdk scala wrapper around mailgun api scala commandline wrapper around ffmpeg ffprobe imagemagick tool relating medium miniboxing scala compiler plugin improves program performance openquant scala open source quantitative trading platform ostinato chess library run server scala browser scalajs simplified wrapper create pdfs scala play swagger automatically create swagger documentation play rest api powerscala powerful framework providing many useful utility feature top scala language pprint prettyprinter scala value type easier reading debugging pureconfig boilerplatefree scala library loading configuration file replesent presentation tool built inside scala repl run code straight slide single keystroke scaladebugger scala library tooling utilizing java debugger interface scalassh remote shell access via ssh scala application scalan framework development domainspecific compiler scala scalastm software transaction memory scala scavenger experimental automated theorem prover servicechassis scala chassis get application service bootstrapped quickly settler boilerplatefree typed setting generation scala simple scala config thin idiomatic scala wrapper around typesafe config custom reader suppport yahoofinancescala get stock data yahoo finance using akka http android scala library wrapper android development http scala library wrapper http client akka http streamingfirst http servermodule akka dispatch library asynchronous http interaction provides scala vocabulary java asynchttpclient finchio purely functional rest api atop finagle fintrospect implement fast typesafe http webservices finagle minimal idiomatic scala interface http jefe manages installation updating downloading launching error reporting proxying multiserver management much standalone web application lolhttp http server client library scala requestsscala scala port popular python request http client flexible intuitive straightforward use röshttp lightweight asynchronous http api built scalajs mind support jvm nodejs runtimes well browser scalajhttp simple scala wrapper httpurlconnection including oauth support scalaxb xml databinding tool scala support xml schema xsd web service description language wsdl input file spray actorbased library http interaction sttp scala http client always wanted tubesocks library supporting bidirectional communication websocket server semantic web scala library interaction web data rdf tool bananardf scalafriendly abstraction rdf linked data technology support jena sesame native scala rdfp rdf stream processing framework scala scowl scala dsl allowing declarative approach composing owl expression axiom using owl api metric monitoring scala library gathering metric monitoring application kamon gathering metric application built akka spray play support user metric well metricsscala scala api dropwizard metric library parsing scala library creating parser sbt plugins sbt plugins make life easier xml html xml html generation processing markdown laika text markup transformer sbt scala application transforming markdown restructuredtext html pdf javascript javascript generation interop library scheduling templating web templating engine tool geospatial library aid geospatial calculation artifact geotrellis scalable raster toolkit gi processing openstreetmap file parser immutable rtree str sorttilerecursive packing ultrafast nearest intersection query plane spherical surface sfcurve space filling curve scala geospatial indexing query devops devops related tool library learning scala nice book blog resource learn scala community member blog company blog misc tour scala bitesized introduction core language concept ca art small project aimed learning scala intermediate level experimenting cellular automaton demo example scala chinese repo sample scala library usage written chinese deploying scala library sonatype dummy none resource dr mark lewis website youtube playlist exercism scala exercise communitydriven scala exercise essential scala none functional programming scala coursera specialization course created martin odersky et al epfl ecole polytechnique fédérale de lausanne functional programming mortal none get programming scala tutorialdriven introduction scala introduction programming dependent type scala video course dmytro mitin learnbydoing functional programming course scala cover type class functors applicatives monad monad transformer free monad programming community curated resource learning scala reactive programming scala akka use concept reactive programming build distributed system running multiple node scala collection cookbook scala collection introduction written chinese scala exercise brings popular scala koan web offering hundred solvable exercise organized category covering basic scala language scala cat learn system architecture design using technique modern functional programming cat scala depth none scala school scala school started series lecture twitter prepare experienced engineer productive scala programmer scalera blog blog scala language environment howto good practice tip weekly post written spanish english scala impatient edition cover scala feature short easy understand explainations type astronaut guide shapeless none clean intuitive unintrusive boilerplatefree scala api fast flexible intuitive json scala scala libhunt goto scala toolbox podcasts corecursive interview indepth interview software developer often subject scala library functional programming scala log interviewing developer open source contributor subject matter expert like talk fp scala open source interest scala love podcast scala programming language community contributing contribution always welcome please submit pull request create issue add new framework library software list submit project updated past month awesome
315,Lobsters,scala,Scala programming,Java vs. Scala: Divided We Fail (Cross-Language Benchmarks),http://shipilev.net/blog/2014/java-scala-divided-we-fail/,java v scala divided fail crosslanguage benchmark,,discussion particular stackoverflow thread date back question instead digging take latest benchmark code wrap jmh jmh already binding java scala somewhat alleviates difference testing methodology find full benchmark code warning contains spoiler original benchmark may expressed help jmh follows state scopebenchmark class scalabench param array var lim int tailrec private def isevenlydivisible v int div int lim int boolean div lim true else v div isevenlydivisible v div lim benchmark def test int var v isevenlydivisible v lim v v thing code try find first even integer past evenly divisible integer lim isevenlydivisible tailrecursive implementation search div straight rewrite benchmark java yield state scopebenchmark public class javabench param int lim private boolean isevenlydivisible int val int div int lim div lim return true else return val div isevenlydivisible val div lim benchmark public int test int val isevenlydivisible val lim val return val okay two seemingly similar benchmark let run shall let u try intuition make prediction people would predict since jvms tail recursion elimination yet also rather pessimistic recursive inlining tailrec variant exploded scalac would bring performance ordinary looping therefore one would conclude scala benchmark win big time java benchmark good let see running laptop ghz linux jdk ga yield benchmark lim mode sample score score error unit nsscalabenchtest avgt usop nsscalabenchtest avgt usop nsscalabenchtest avgt usop nsscalabenchtest avgt usop nsscalabenchtest avgt usop benchmark lim mode sample score score error unit nsjavabenchtest avgt usop nsjavabenchtest avgt usop nsjavabenchtest avgt usop nsjavabenchtest avgt usop nsjavabenchtest avgt usop odd scala benchmark actually twice slow consistently point people try muck benchmark showing want show obvious thing consider inhibiting tail recursion elimination altogether bit confusing also drop private needed since scalac apparrently tailrec elimination even unannotated private method scalabenchscala scalabenchnotailrecscala state scopebenchmark class scalabench class scalabenchnotailrec param array var lim int tailrec private def isevenlydivisible v int div int lim int boolean def isevenlydivisible v int div int lim int boolean div lim true else v div isevenlydivisible v div lim get performance back java level benchmark lim mode sample score score error unit nsscalabenchnotailrectest avgt usop nsscalabenchnotailrectest avgt usop nsscalabenchnotailrectest avgt usop nsscalabenchnotailrectest avgt usop nsscalabenchnotailrectest avgt usop everyone happy except everyone else sad would nice scalac optimization turn code slowish nightmare would ask
316,Lobsters,scala,Scala programming,Argonaut: Purely Functional JSON in Scala,http://argonaut.io,argonaut purely functional json scala,,
317,Lobsters,scala,Scala programming,DOT (Dependent Object Types) calculus and Scala,http://www.parleys.com/play/53a7d2d0e4b0543940d9e569/chapter0/about,dot dependent object type calculus scala,,
318,Lobsters,scala,Scala programming,Scala 2.12 Roadmap,http://scala-lang.org/news/2.12-roadmap,scala roadmap,goal new backend optimizer background retrolambda backport shared feature scala flag compatibility module new backend optimizer feature exclusive scala java fun functional interface wrapper timing community build,announcement scala require java plan make transition smooth possible goal minimize overhead transition user library maintainer continue java support longer scala track java platform evolution upcoming release introduce following experimental feature flag java closure compilation new backend optimizer hasslefree crossbuilding full backward source compatibility remove deprecated method support optional deprecation error closely align compiler standard library code base official scala distribution built java thus require new backend optimizer become default background one scala binary version target two different java version without artifactid name mangling even maven support specifying required java version fork would big burden ecosystem thus split required java version align scala binary version check crossbuilding running community build version improve backwards source compatibility scala remove deprecated member compiler however default emit deprecation error usage member deprecated principle compile library java backwards binary compatible important keep platform even though java methodhandlebased support closure may immediately yield significant performance benefit definitely reduces bytecode size thus likely compilation time though platform support java bytecode yet two project exist rewrite java invokedynamic bytecode java retrolambda backport aware equivalent default method feasible shared feature scala flag compile lambda efficiently using method handle separate compatibility module needed see java interop bidirectional improve support reading java bytecode already improve turn sam support default synthesize anonymous class java allows calling java higherorder method seamlessly scala already xexperimental compatibility module let java call scala higherorder method fully integrate new backend optimizer refactor code test document indepth remove old backend style checker efficient communitydriven platform accurate coding style checking built top compiler collection improve test coverage performance documentation modularize improve documentation focus content great place start contributing well tooling side documentation continue infrastructure improvement sbt build improve pull request validation release automation bug tracker cleanup automation feature exclusive scala java fun development following feature start since binary incompatible backported turn functionn functional interface java code call higherorder method scala without wrapper support interface trait guaranteed compile java interface useful interop performance binary compatibility generalization feature stream integrate scala collection anywhere providing converter replacing existing functionality use forkjoin library instead embedding switch global default executioncontext backed forkjoinpoolcommonpool improved lazy val initialization time allows timing scala last release planning five release still deciding eol typesafe development begin infrastructure work development focus shifting â â â first release first release â â â last release â dec â q quarterly release oct â nov year jan â development scala made big step forward automating release process regression testing via community build build loc popular open source project release script community build also run nightly basis scala decided skip release candidate release enables frequent minor release predictable schedule roadmap published june
319,Lobsters,scala,Scala programming,Mapping Sets,http://typelevel.org/blog/2014/06/22/mapping-sets.html,mapping set,map set eventually removed method fake theorem free coyoneda defined scala restricted licensing creative common attribution unported license follow puffnfresh back blog,map set scalaz used scalazfunctor scalacollectionset eventually removed relied method read functor set bad idea fake theorem free set truly parametric able define functor first place luckily truly parametric set recently added scalaz scalaziset preliminary benchmark also showing nice performance improvement highly recommend using iset whenever see problem clearly type map iset restrictive used inside functor scalazorder constraint def map b order f b iset b might seem like lost something useful functor available example write following val ne oneand isetfromlist nil nonempty set val oneand h nesmap parsedate map function scalazoneand requires scalazfunctor f type parameter iset example solution called coyoneda also known free functor hopefully able demonstrate functor iset available fundamental practical consequence coyoneda defined scala like trait coyoneda f type def k def fi f three part existential type k mapping fi value f create couple function help constructing coyoneda value def apply f b fa f k b coyoneda f b type new coyoneda f b type val k k val fi fa def lift f fa f coyoneda f coyoneda fa identity constructor allow type constructor become coyoneda value val coyoneda iset int coyonedalift isetfromlist nil special part define functor coyoneda value implicit def coyonedafunctor f functor type λ α coyoneda f α λ new functor type λ α coyoneda f α λ def map b ya coyoneda f f b coyoneda yafi f compose yak interesting f type functor defined coyoneda mapped let use try original example define type alias make thing bit cleaner type isetf coyoneda iset use new type instead plain iset scala really hard time inference help val functor oneandoneandfunctor isetf coyonedacoyonedafunctor iset import functorfunctorsyntax val ne oneand isetf string coyonedalift isetfromlist nil val oneand h nesmap parsedate able map coyoneda something useful define functor need scalazorder output type use map method directly iset use function running coyoneda like convert isetf back iset using iset map order constraint val tfimap tk insert h done able use coyoneda treat iset functor even though map function constrained one defined directly technique applies scalacollectionset typeconstructor would otherwise require restricted functor hope demonstrated functor set existing practical consequence scalac good typeinference licensing unless otherwise noted content licensed creative common attribution unported license brian mckenna jun follow puffnfresh back blog
320,Lobsters,scala,Scala programming,GraphX - graph programming on top of Spark,https://spark.apache.org/docs/1.0.0/graphx-programming-guide.html,graphx graph programming top spark,graphx programming guide overview rdd resilient distributed property graph subgraph joinvertices mapreducetriplets pregel algorithm builder graphx currently alpha component minimize api change apis may change future release background graphparallel computation giraph graphlab graphx replaces spark bagel api bagel api bagel programming guide migrating spark workaround spark getting started spark quick start guide property graph property graph vertex edge rdds example property graph graph builder graph object graph operator summary list operator property operator structural operator join operator neighborhood aggregation map reduce triplet mapreducetriplets computing degree information collecting neighbor caching uncaching spark programming guide using graph multiple time make sure call first iterative computation recommend using pregel api correctly unpersists intermediate result pregel api pregel operator graph builder suggested workarounds connected component vertex edge rdds vertexrdds edgerdds optimized representation suggested workarounds graph algorithm object connected component object pagerank section triangle counting object pagerank section suggested workarounds example,graphx programming guide overview graphx new alpha spark api graph graphparallel computation highlevel graphx extends spark rdd introducing resilient distributed property graph directed multigraph property attached vertex edge support graph computation graphx expose set fundamental operator eg subgraph joinvertices mapreducetriplets well optimized variant pregel api addition graphx includes growing collection graph algorithm builder simplify graph analytics task graphx currently alpha component minimize api change apis may change future release background graphparallel computation social network language modeling growing scale importance graph data driven development numerous new graphparallel system eg giraph graphlab restricting type computation expressed introducing new technique partition distribute graph system efficiently execute sophisticated graph algorithm order magnitude faster general dataparallel system however restriction enable substantial performance gain also make difficult express many important stage typical graphanalytics pipeline constructing graph modifying structure expressing computation span multiple graph furthermore look data depends objective raw data may many different table graph view consequence often necessary able move table graph view physical data leverage property view easily efficiently express computation however existing graph analytics pipeline must compose graphparallel data parallel system leading extensive data movement duplication complicated programming model goal graphx project unify graphparallel dataparallel computation one system single composable api graphx api enables user view data graph collection ie rdds without data movement duplication incorporating recent advance graphparallel system graphx able optimize execution graph operation graphx replaces spark bagel api prior release graphx graph computation spark expressed using bagel implementation pregel graphx improves upon bagel exposing richer property graph api streamlined version pregel abstraction system optimization improve performance reduce memory overhead plan eventually deprecate bagel continue support bagel api bagel programming guide however encourage bagel user explore new graphx api comment issue may complicate transition bagel migrating spark graphx spark contains one userfacing interface change spark edgerdd may store adjacent vertex attribute construct triplet gained type parameter edge graph type graph vd ed type edgerdd ed vd rather edgerdd ed workaround graphpartitionby spark graphpartitionby operator allows user choose graph partitioning strategy due method broken spark encourage user build latest version spark master branch contains fix alternatively workaround partition edge constructing graph follows define version partitionby work around import orgapachesparkhashpartitioner def partitionby ed edge rdd edge ed partitionstrategy partitionstrategy rdd edge ed val numpartitions edgespartitionssize edgesmap e partitionstrategygetpartition esrcid edstid numpartitions e partitionby new hashpartitioner numpartitions mappartitions map preservespartitioning true val vertex val edge instead val g graph vertex edge partitionby broken spark use val g graph vertex partitionby edge getting started get started first need import spark graphx project follows import orgapachespark import orgapachesparkgraphx make example work also need rdd import orgapachesparkrddrdd using spark shell also need sparkcontext learn getting started spark refer spark quick start guide property graph property graph directed multigraph user defined object attached vertex edge directed multigraph directed graph potentially multiple parallel edge sharing source destination vertex ability support parallel edge simplifies modeling scenario multiple relationship eg coworker friend vertex vertex keyed unique long identifier vertexid graphx impose ordering constraint vertex identifier similarly edge corresponding source destination vertex identifier property graph parameterized vertex vd edge ed type type object associated vertex edge respectively graphx optimizes representation vertex edge type plain old datatypes eg int double reducing memory footprint storing specialized array case may desirable vertex different property type graph accomplished inheritance example model user product bipartite graph might following class vertexproperty case class userproperty val name string extends vertexproperty case class productproperty val name string val price double extends vertexproperty graph might type var graph graph vertexproperty string null like rdds property graph immutable distributed faulttolerant change value structure graph accomplished producing new graph desired change note substantial part original graph ie unaffected structure attribute indicies reused new graph reducing cost inherently functional datastructure graph partitioned across executor using range vertexpartitioning heuristic rdds partition graph recreated different machine event failure logically property graph corresponds pair typed collection rdds encoding property vertex edge consequence graph class contains member access vertex edge graph class graph vd ed val vertex vertexrdd vd val edge edgerdd ed vd class vertexrdd vd edgerdd ed vd extend optimized version rdd vertexid vd rdd edge ed respectively vertexrdd vd edgerdd ed vd provide additional functionality built around graph computation leverage internal optimization discus vertexrdd edgerdd api greater detail section vertex edge rdds thought simply rdds form rdd vertexid vd rdd edge ed example property graph suppose want construct property graph consisting various collaborator graphx project vertex property might contain username occupation could annotate edge string describing relationship collaborator resulting graph would type signature val usergraph graph string string string numerous way construct property graph raw file rdds even synthetic generator discussed detail section graph builder probably general method use graph object example following code construct graph collection rdds assume sparkcontext already constructed val sc sparkcontext create rdd vertex val user rdd vertexid string string scparallelize array rxin student jgonzal postdoc franklin prof istoica prof create rdd edge val relationship rdd edge string scparallelize array edge collab edge advisor edge colleague edge pi define default user case relationship missing user val defaultuser john doe missing build initial graph val graph graph user relationship defaultuser example make use edge case class edge srcid dstid corresponding source destination vertex identifier addition edge class attr member store edge property deconstruct graph respective vertex edge view using graphvertices graphedges member respectively val graph graph string string string constructed count user postdoc graphverticesfilter case id name po po postdoc count count edge src dst graphedgesfilter e esrcid edstid count note graphvertices return vertexrdd string string extends rdd vertexid string string use scala case expression deconstruct tuple hand graphedges return edgerdd containing edge string object could also used case class type constructor following graphedgesfilter case edge src dst prop src dst count addition vertex edge view property graph graphx also expose triplet view triplet view logically join vertex edge property yielding rdd edgetriplet vd ed containing instance edgetriplet class join expressed following sql expression select srcid dstid srcattr eattr dstattr edge e left join vertex src vertex dst esrcid srcid edstid dstid graphically edgetriplet class extends edge class adding srcattr dstattr member contain source destination property respectively use triplet view graph render collection string describing relationship user val graph graph string string string constructed use triplet view create rdd fact val fact rdd string graphtripletsmap triplet tripletattr factscollectforeach println graph operator rdds basic operation like map filter reducebykey property graph also collection basic operator take user defined function produce new graph transformed property structure core operator optimized implementation defined graph convenient operator expressed composition core operator defined graphops however thanks scala implicits operator graphops automatically available member graph example compute indegree vertex defined graphops following val graph graph string string string use implicit graphopsindegrees operator val indegrees vertexrdd int graphindegrees reason differentiating core graph operation graphops able support different graph representation future graph representation must provide implementation core operation reuse many useful operation defined graphops summary list operator following quick summary functionality defined graph graphops presented member graph simplicity note function signature simplified eg default argument type constraint removed advanced functionality removed please consult api doc official list operation summary functionality property graph class graph vd ed information graph val numedges long val numvertices long val indegrees vertexrdd int val outdegrees vertexrdd int val degree vertexrdd int view graph collection val vertex vertexrdd vd val edge edgerdd ed vd val triplet rdd edgetriplet vd ed function caching graph def persist newlevel storagelevel storagelevelmemoryonly graph vd ed def cache graph vd ed def unpersistvertices blocking boolean true graph vd ed change partitioning heuristic warning partitionby broken spark due see section workaround graphpartitionby spark def partitionby partitionstrategy partitionstrategy graph vd ed transform vertex edge attribute def mapvertices map vertexid vd graph ed def mapedges map edge ed graph vd def mapedges map partitionid iterator edge ed iterator graph vd def maptriplets map edgetriplet vd ed graph vd def maptriplets map partitionid iterator edgetriplet vd ed iterator graph vd modify graph structure def reverse graph vd ed def subgraph epred edgetriplet vd ed boolean x true vpred vertexid vd boolean v true graph vd ed def mask graph graph vd ed def groupedges merge ed ed ed graph vd ed join rdds graph def joinvertices u table rdd vertexid u mapfunc vertexid vd u vd graph vd ed def outerjoinvertices u rdd vertexid u mapfunc vertexid vd option u graph ed aggregate information adjacent triplet def collectneighborids edgedirection edgedirection vertexrdd array vertexid def collectneighbors edgedirection edgedirection vertexrdd array vertexid vd def mapreducetriplets classtag mapfunc edgetriplet vd ed iterator vertexid reducefunc activesetopt option vertexrdd edgedirection none vertexrdd iterative graphparallel computation def pregel initialmsg maxiterations int activedirection edgedirection vprog vertexid vd vd sendmsg edgetriplet vd ed iterator vertexid mergemsg graph vd ed basic graph algorithm def pagerank tol double resetprob double graph double double def connectedcomponents graph vertexid ed def trianglecount graph int ed def stronglyconnectedcomponents numiter int graph vertexid ed property operator direct analogy rdd map operator property graph contains following class graph vd ed def mapvertices map vertexid vd graph ed def mapedges map edge ed graph vd def maptriplets map edgetriplet vd ed graph vd operator yield new graph vertex edge property modified user defined map function note case graph structure unaffected key feature operator allows resulting graph reuse structural index original graph following snippet logically equivalent first one preserve structural index would benefit graphx system optimization val newvertices graphverticesmap case id attr id mapudf id attr val newgraph graph newvertices graphedges instead use mapvertices preserve index val newgraph graphmapvertices id attr mapudf id attr operator often used initialize graph particular computation project away unnecessary property example given graph outdegrees vertex property describe construct graph later initialize pagerank given graph vertex property outdegree val inputgraph graph int string graphouterjoinvertices graphoutdegrees vid degopt degoptgetorelse construct graph edge contains weight vertex initial pagerank val outputgraph graph double double inputgraphmaptriplets triplet tripletsrcattr mapvertices id structural operator currently graphx support simple set commonly used structural operator expect add future following list basic structural operator class graph vd ed def reverse graph vd ed def subgraph epred edgetriplet vd ed boolean vpred vertexid vd boolean graph vd ed def mask graph graph vd ed def groupedges merge ed ed ed graph vd ed reverse operator return new graph edge direction reversed useful example trying compute inverse pagerank reverse operation modify vertex edge property change number edge implemented efficiently without datamovement duplication subgraph operator take vertex edge predicate return graph containing vertex satisfy vertex predicate evaluate true edge satisfy edge predicate connect vertex satisfy vertex predicate subgraph operator used number situation restrict graph vertex edge interest eliminate broken link example following code remove broken link create rdd vertex val user rdd vertexid string string scparallelize array rxin student jgonzal postdoc franklin prof istoica prof peter student create rdd edge val relationship rdd edge string scparallelize array edge collab edge advisor edge colleague edge pi edge student edge colleague define default user case relationship missing user val defaultuser john doe missing build initial graph val graph graph user relationship defaultuser notice user information connected user peter franklin graphtripletsmap triplet tripletattr collectforeach println remove missing vertex well edge connected val validgraph graphsubgraph vpred id attr missing valid subgraph disconnect user removing user validgraphverticescollectforeach println validgraphtripletsmap triplet tripletattr collectforeach println note example vertex predicate provided subgraph operator default true vertex edge predicate provided mask operator also construct subgraph returning graph contains vertex edge also found input graph used conjunction subgraph operator restrict graph based property another related graph example might run connected component using graph missing vertex restrict answer valid subgraph run connected component val ccgraph graphconnectedcomponents longer contains missing field remove missing vertex well edge connected val validgraph graphsubgraph vpred id attr missing restrict answer valid subgraph val validccgraph ccgraphmask validgraph groupedges operator merges parallel edge ie duplicate edge pair vertex multigraph many numerical application parallel edge added weight combined single edge thereby reducing size graph join operator many case necessary join data external collection rdds graph example might extra user property want merge existing graph might want pull vertex property one graph another task accomplished using join operator list key join operator class graph vd ed def joinvertices u table rdd vertexid u map vertexid vd u vd graph vd ed def outerjoinvertices u table rdd vertexid u map vertexid vd option u graph ed joinvertices operator join vertex input rdd return new graph vertex property obtained applying user defined map function result joined vertex vertex without matching value rdd retain original value note rdd contains one value given vertex one used therefore recommended input rdd first made unique using following also preindex resulting value substantially accelerate subsequent join val nonuniquecosts rdd vertexid double val uniquecosts vertexrdd double graphverticesaggregateusingindex nonunique b b val joinedgraph graphjoinvertices uniquecosts id oldcost extracost oldcost extracost general outerjoinvertices behaves similarly joinvertices except user defined map function applied vertex change vertex property type vertex may matching value input rdd map function take option type example setup graph pagerank initializing vertex property outdegree val outdegrees vertexrdd int graphoutdegrees val degreegraph graphouterjoinvertices outdegrees id oldattr outdegopt outdegopt match case outdeg outdeg case none outdegree mean zero outdegree may noticed multiple parameter list eg f b curried function pattern used example could equally written f b f b would mean type inference b would depend consequence user would need provide type annotation user defined function val joinedgraph graphjoinvertices uniquecosts id vertexid oldcost double extracost double oldcost extracost neighborhood aggregation key part graph computation aggregating information neighborhood vertex example might want know number follower user average age follower user many iterative graph algorithm eg pagerank shortest path connected component repeatedly aggregate property neighboring vertex eg current pagerank value shortest path source smallest reachable vertex id map reduce triplet mapreducetriplets core heavily optimized aggregation primitive graphx mapreducetriplets operator class graph vd ed def mapreducetriplets map edgetriplet vd ed iterator vertexid reduce vertexrdd mapreducetriplets operator take user defined map function applied triplet yield message destined either none vertex triplet facilitate optimized preaggregation currently support message destined source destination vertex triplet user defined reduce function combine message destined vertex mapreducetriplets operator return vertexrdd containing aggregate message type destined vertex vertex receive message included returned vertexrdd note mapreducetriplets take additional optional activeset shown see api doc detail restricts map phase edge adjacent vertex provided vertexrdd activesetopt option vertexrdd edgedirection none edgedirection specifies edge adjacent vertex set included map phase direction user defined map function run edge destination vertex active set direction map function run edge originating vertex active set direction either map function run edge either vertex active set direction map function run edge vertex active set active set must derived set vertex graph restricting computation triplet adjacent subset vertex often necessary incremental iterative computation key part graphx implementation pregel following example use mapreducetriplets operator compute average age senior follower user import random graph generation library import orgapachesparkgraphxutilgraphgenerators create graph age vertex property use random graph simplicity val graph graph double int graphgeneratorslognormalgraph sc numvertices mapvertices id idtodouble compute number older follower total age val olderfollowers vertexrdd int double graphmapreducetriplets int double triplet map function tripletsrcattr tripletdstattr send message destination vertex containing counter age iterator tripletdstid tripletsrcattr else nt send message triplet iteratorempty add counter age b reduce function divide total age number older follower get average age older follower val avgageofolderfollowers vertexrdd double olderfollowersmapvalues id value value match case count totalage totalage count display result avgageofolderfollowerscollectforeach println note mapreducetriplets operation performs optimally message sum message constant sized eg float addition instead list concatenation precisely result mapreducetriplets ideally sublinear degree vertex computing degree information common aggregation task computing degree vertex number edge adjacent vertex context directed graph often necessary know indegree degree total degree vertex graphops class contains collection operator compute degree vertex example following compute max total degree define reduce operation compute highest degree vertex def max vertexid int b vertexid int vertexid int else b compute max degree val maxindegree vertexid int graphindegreesreduce max val maxoutdegree vertexid int graphoutdegreesreduce max val maxdegrees vertexid int graphdegreesreduce max collecting neighbor case may easier express computation collecting neighboring vertex attribute vertex easily accomplished using collectneighborids collectneighbors operator class graphops vd ed def collectneighborids edgedirection edgedirection vertexrdd array vertexid def collectneighbors edgedirection edgedirection vertexrdd array vertexid vd note operator quite costly duplicate information require substantial communication possible try expressing computation using mapreducetriplets operator directly caching uncaching spark rdds persisted memory default avoid recomputation must explicitly cached using multiple time see spark programming guide graph graphx behave way using graph multiple time make sure call graphcache first iterative computation uncaching may also necessary best performance default cached rdds graph remain memory memory pressure force evicted lru order iterative computation intermediate result previous iteration fill cache though eventually evicted unnecessary data stored memory slow garbage collection would efficient uncache intermediate result soon longer necessary involves materializing caching forcing graph rdd every iteration uncaching datasets using materialized dataset future iteration however graph composed multiple rdds difficult unpersist correctly iterative computation recommend using pregel api correctly unpersists intermediate result pregel api graph inherently recursive datastructures property vertex depend property neighbor turn depend property neighbor consequence many important graph algorithm iteratively recompute property vertex fixedpoint condition reached range graphparallel abstraction proposed express iterative algorithm graphx expose pregellike operator fusion widely used pregel graphlab abstraction highlevel pregel operator graphx bulksynchronous parallel messaging abstraction constrained topology graph pregel operator executes series supersteps vertex receive sum inbound message previous super step compute new value vertex property send message neighboring vertex next superstep unlike pregel instead like graphlab message computed parallel function edge triplet message computation access source destination vertex attribute vertex receive message skipped within super step pregel operator terminates iteration return final graph message remaining note unlike standard pregel implementation vertex graphx send message neighboring vertex message construction done parallel using user defined messaging function constraint allow additional optimization within graphx following type signature pregel operator well sketch implementation note call graphcache removed class graphops vd ed def pregel initialmsg maxiter int intmaxvalue activedir edgedirection edgedirectionout vprog vertexid vd vd sendmsg edgetriplet vd ed iterator vertexid mergemsg graph vd ed receive initial message vertex var g mapvertices vid vdata vprog vid vdata initialmsg cache compute message var message gmapreducetriplets sendmsg mergemsg var activemessages messagescount loop message remain maxiterations achieved var activemessages maxiterations receive message run vertex program vertex receive message val newverts gverticesinnerjoin message vprog cache merge new vertex value back graph g gouterjoinvertices newverts vid old newopt newoptgetorelse old cache send message vertex nt receive message nt appear newverts therefore nt get send message precisely map phase mapreducetriplets invoked edge activedir vertex newverts message gmapreducetriplets sendmsg mergemsg newverts activedir cache activemessages messagescount g notice pregel take two argument list ie graphpregel first argument list contains configuration parameter including initial message maximum number iteration edge direction send message default along edge second argument list contains user defined function receiving message vertex program vprog computing message sendmsg combining message mergemsg use pregel operator express computation single source shortest path following example import orgapachesparkgraphx import random graph generation library import orgapachesparkgraphxutilgraphgenerators graph edge attribute containing distance val graph graph int double graphgeneratorslognormalgraph sc numvertices mapedges e eattrtodouble val sourceid vertexid ultimate source initialize graph vertex except root distance infinity val initialgraph graphmapvertices id id sourceid else doublepositiveinfinity val sssp initialgraphpregel doublepositiveinfinity id dist newdist mathmin dist newdist vertex program triplet send message tripletsrcattr tripletattr tripletdstattr iterator tripletdstid tripletsrcattr tripletattr else iteratorempty b mathmin b merge message println ssspverticescollectmkstring n graph builder graphx provides several way building graph collection vertex edge rdd disk none graph builder repartitions edge default instead edge left default partition original block hdfs graphgroupedges requires graph repartitioned assumes identical edge colocated partition must call graphpartitionby calling groupedges however note graphpartitionby broken spark due see suggested workarounds object graphloader def edgelistfile sc sparkcontext path string canonicalorientation boolean false minedgepartitions int graph int int graphloaderedgelistfile provides way load graph list edge disk par adjacency list source vertex id destination vertex id pair following form skipping comment line begin comment creates graph specified edge automatically creating vertex mentioned edge vertex edge attribute default canonicalorientation argument allows reorienting edge positive direction srcid dstid required connected component algorithm minedgepartitions argument specifies minimum number edge partition generate may edge partition specified example hdfs file block object graph def apply vd ed vertex rdd vertexid vd edge rdd edge ed defaultvertexattr vd null graph vd ed def fromedges vd ed edge rdd edge ed defaultvalue vd graph vd ed def fromedgetuples vd rawedges rdd vertexid vertexid defaultvalue vd uniqueedges option partitionstrategy none graph vd int graphapply allows creating graph rdds vertex edge duplicate vertex picked arbitrarily vertex found edge rdd vertex rdd assigned default attribute graphfromedges allows creating graph rdd edge automatically creating vertex mentioned edge assigning default value graphfromedgetuples allows creating graph rdd edge tuples assigning edge value automatically creating vertex mentioned edge assigning default value also support deduplicating edge deduplicate pas partitionstrategy uniqueedges parameter example uniqueedges partitionstrategyrandomvertexcut partition strategy necessary colocate identical edge partition deduplicated vertex edge rdds graphx expose rdd view vertex edge stored within graph however graphx maintains vertex edge optimized datastructures datastructures provide additional functionality vertex edge returned vertexrdd edgerdd respectively section review additional useful functionality type vertexrdds vertexrdd extends rdd vertexid add additional constraint vertexid occurs moreover vertexrdd represents set vertex attribute type internally achieved storing vertex attribute reusable hashmap datastructure consequence two vertexrdds derived base vertexrdd eg filter mapvalues joined constant time without hash evaluation leverage indexed datastructure vertexrdd expose following additional functionality class vertexrdd vd extends rdd vertexid vd filter vertex set preserve internal index def filter pred vertexid vd boolean vertexrdd vd transform value without changing id preserve internal index def mapvalues map vd vertexrdd def mapvalues map vertexid vd vertexrdd remove vertex set appear set def diff vertexrdd vd vertexrdd vd join operator take advantage internal indexing accelerate join substantially def leftjoin rdd vertexid f vertexid vd option vertexrdd def innerjoin u rdd vertexid u f vertexid vd u vertexrdd use index rdd accelerate reducebykey operation input rdd def aggregateusingindex rdd vertexid reducefunc vertexrdd notice example filter operator return vertexrdd filter actually implemented using bitset thereby reusing index preserving ability fast join vertexrdds likewise mapvalues operator allow map function change vertexid thereby enabling hashmap datastructures reused leftjoin innerjoin able identify joining two vertexrdds derived hashmap implement join linear scan rather costly point lookup aggregateusingindex operator useful efficient construction new vertexrdd rdd vertexid conceptually constructed vertexrdd b set vertex superset vertex rdd vertexid reuse index aggregate subsequently index rdd vertexid example val seta vertexrdd int vertexrdd scparallelize map id id val rddb rdd vertexid double scparallelize flatmap id list id id entry rddb rddbcount val setb vertexrdd double setaaggregateusingindex rddb entry setb setbcount joining b fast val setc vertexrdd double setainnerjoin setb id b b edgerdds edgerdd ed vd extends rdd edge ed organizes edge block partitioned using one various partitioning strategy defined partitionstrategy within partition edge attribute adjacency structure stored separately enabling maximum reuse changing attribute value three additional function exposed edgerdd transform edge attribute preserving structure def mapvalues f edge ed edgerdd vd revere edge reusing attribute structure def reverse edgerdd ed vd join two edgerdd partitioned using partitioning strategy def innerjoin edgerdd vd f vertexid vertexid ed edgerdd vd application found operation edgerdd accomplished graph operator rely operation defined base rdd class optimized representation detailed description optimization used graphx representation distributed graph beyond scope guide highlevel understanding may aid design scalable algorithm well optimal use api graphx adopts vertexcut approach distributed graph partitioning rather splitting graph along edge graphx partition graph along vertex reduce communication storage overhead logically corresponds assigning edge machine allowing vertex span multiple machine exact method assigning edge depends partitionstrategy several tradeoff various heuristic default partitioning strategy use initial partitioning edge provided graph construction however user easily switch heuristic included graphx user choose different strategy repartitioning graph graphpartitionby operator however note graphpartitionby broken spark due see suggested workarounds edge partitioned key challenge efficient graphparallel computation efficiently joining vertex attribute edge realworld graph typically edge vertex move vertex attribute edge partition contain edge adjacent vertex internally maintain routing table identifies broadcast vertex implementing join required operation like triplet mapreducetriplets graph algorithm graphx includes set graph algorithm simplify analytics task algorithm contained orgapachesparkgraphxlib package accessed directly method graph via graphops section describes algorithm used pagerank measure importance vertex graph assuming edge u v represents endorsement importance u example twitter user followed many others user ranked highly graphx come static dynamic implementation pagerank method pagerank object static pagerank run fixed number iteration dynamic pagerank run rank converge ie stop changing specified tolerance graphops allows calling algorithm directly method graph graphx also includes example social network dataset run pagerank set user given graphxdatauserstxt set relationship user given graphxdatafollowerstxt compute pagerank user follows load edge graph val graph graphloaderedgelistfile sc graphxdatafollowerstxt run pagerank val rank graphpagerank vertex join rank usernames val user sctextfile graphxdatauserstxt map line val field linesplit field tolong field val ranksbyusername usersjoin rank map case id username rank username rank print result println ranksbyusernamecollect mkstring n connected component connected component algorithm label connected component graph id lowestnumbered vertex example social network connected component approximate cluster graphx contains implementation algorithm connectedcomponents object compute connected component example social network dataset pagerank section follows load graph pagerank example val graph graphloaderedgelistfile sc graphxdatafollowerstxt find connected component val cc graphconnectedcomponents vertex join connected component usernames val user sctextfile graphxdatauserstxt map line val field linesplit field tolong field val ccbyusername usersjoin cc map case id username cc username cc print result println ccbyusernamecollect mkstring n triangle counting vertex part triangle two adjacent vertex edge graphx implement triangle counting algorithm trianglecount object determines number triangle passing vertex providing measure clustering compute triangle count social network dataset pagerank section note trianglecount requires edge canonical orientation srcid dstid graph partitioned using graphpartitionby also note graphpartitionby broken spark due see suggested workarounds define version partitionby work around import orgapachesparkhashpartitioner def partitionby ed edge rdd edge ed partitionstrategy partitionstrategy rdd edge ed val numpartitions edgespartitionssize edgesmap e partitionstrategygetpartition esrcid edstid numpartitions e partitionby new hashpartitioner numpartitions mappartitions map preservespartitioning true load edge canonical order partition graph triangle count val unpartitionedgraph graphloaderedgelistfile sc graphxdatafollowerstxt true val graph graph partitionby unpartitionedgraphedges partitionstrategyrandomvertexcut unpartitionedgraphvertices find triangle count vertex val tricounts graphtrianglecount vertex join triangle count usernames val user sctextfile graphxdatauserstxt map line val field linesplit field tolong field val tricountbyusername usersjoin tricounts map case id username tc username tc print result println tricountbyusernamecollect mkstring n example suppose want build graph text file restrict graph important relationship user run pagerank subgraph finally return attribute associated top user line graphx connect spark cluster val sc new sparkcontext spark masteramplaborg research load user data parse tuples user id attribute list val user sctextfile graphxdatauserstxt map line linesplit map part partsheadtolong partstail parse edge data already userid userid format val followergraph graphloaderedgelistfile sc graphxdatafollowerstxt attach user attribute val graph followergraphouterjoinvertices user case uid deg attrlist attrlist user may attribute set empty case uid deg none arrayempty string restrict graph user usernames name val subgraph graphsubgraph vpred vid attr attrsize compute pagerank val pagerankgraph subgraphpagerank get attribute top pagerank user val userinfowithpagerank subgraphouterjoinvertices pagerankgraphvertices case uid attrlist pr pr attrlisttolist case uid attrlist none attrlisttolist println userinfowithpagerankverticestop orderingby mkstring n
321,Lobsters,scala,Scala programming,Building Products at SoundCloud: Microservices in Scala and Finagle,http://developers.soundcloud.com/blog/building-products-at-soundcloud-part-3-microservices-in-scala-and-finagle,building product soundcloud microservices scala finagle,cambrian explosion bus factor netty joseph wilk wrote experience hystrix clojure hystrix finagle pipesandfilters future explained history change introduced newer version language great presentation future scala allows compatibility implementation helping finagle community move closer recent version scala,first two part series talked soundcloud started breaking away monolithic ruby rail application microservices architecture part talk bit platform language tend write microservices time started process building system outside mothership rail monolith started breaking large team engineer smaller team focused one specific area platform phase high experimentation instead defining language runtimes team use rule thumb write whatever feel confident enough putting production oncall led cambrian explosion language runtimes skill system developed everything perl julia including haskell erlang nodejs process proved quite productive creating new system started problem maintaining bus factor several system low eventually decided consolidate tool based expertise preference across team assessment industry peer decided stick jvm select jruby clojure scala companywide supported language product development infrastructure tooling also support go ruby turn selecting runtime language one step building product microservices architecture another important aspect organization think stack use thing like rpc resilience concurrency research prototyping ended three alternative pure netty implementation netflix stack finagle stack using pure netty tempting first framework well documented maintained support http main protocol rpc good though found implementing abstraction top basic thing concurrency resilience requirement system abstraction required would rather use something exists reinvent wheel tried netflix stack back joseph wilk wrote experience hystrix clojure hystrix well resilience concurrency requirement api based command pattern turnoff experience hystrix command compose well unless also use rxjava although use library several backend system android application decided reactive approach best use case started trying finagle protocolagnostic rpc system developed twitter used many company size finagle well three requirement design based familiar extensible pipesandfilters meet future model first issue found finagle opposed alternative written scala therefore language runtime jar file required even clojure jruby application decided important though add transitive footprint language runtime stable change often big issue adapt framework convention twitter us mostly thrift rpc use http use zookeeper service discovery use dns use java propertiesbased configuration system use environment variable telemetry system telemetry system ready show yet stay tuned exciting news fortunately finagle nice abstraction area issue solved minimal change need patch framework deal messy state future scala heather miller scala core team explained history change introduced newer version language great presentation summary across scala ecosystem several different implementation future promise finagle coupled future although scala allows compatibility implementation decided use everywhere invest time helping finagle community move closer recent version scala rather debug weird issue interoperability might spawn issue addressed focused best develop application using finagle luckly design philosophy nicely described marius eriksen one core contributor paper server function need follow principle userland code experience everything integrates much better using functional programming language like scala make following principle quite easy map well pure function combinators used finagle http thrift memcached redis mysql every request soundcloud platform likely hitting least one finaglepowered microservices performance quite amazing last part series blog post talking finagle scala used move away onesizefitsall restful api optmized backends application
322,Lobsters,scala,Scala programming,Building Products at SoundCloud —Part I: Dealing with the Monolith,http://developers.soundcloud.com/blog/building-products-at-soundcloud-part-1-dealing-with-the-monolith,building product soundcloud dealing monolith,scala clojure jruby used thousand thirdparty application next soundcloud run database migration scale smarter rail access database process huge number message microservices architecture bounded context sebastian ohm senart presented detail use amqp visual sound new stats system,product written scala clojure jruby always case like startup soundcloud created single monolithic ruby rail application running mri official interpreter backed memcached mysql affectionately call system mothership architecture good solution new product used several hundred thousand artist share work collaborate track discovered industry rail codebase contained public api used thousand thirdparty application userfacing web application launch next soundcloud interface world became mostly public api built client application top api partner developer used day hour music sound uploaded every minute hundred million people use platform every day soundcloud combine challenge scaling large social network medium distribution powerhouse scale rail application level developed contributed published several component tool help run database migration scale smarter rail access database process huge number message end decided fundamentally change way build product felt always patching system resolving fundamental scalability problem first change architecture decided move towards known microservices architecture style engineer separate domain logic small component component expose welldefined api implement bounded context persistence layer infrastructure need bigbang refactoring bitten u past team decided best approach deal architecture change would split mothership immediately rather add anything new new feature built microservices whenever larger refactoring feature mothership required extract code part effort started well soon enough detected problem much logic still rail monolith pretty much microservices talk somehow one option around problem microservices accessing directly mothership database common approach corporate setting database public published interface usually lead many problem need change structure shared table instead went published interface public api internal microservices would behave exactly like application developed thirdparty organization integrate soundcloud platform soon enough realized big problem model microservices needed react user activity pushnotifications system example needed know whenever track received new comment could inform artist scale polling option needed create better model already using amqp general rabbitmq specific rail application often need way dispatch slow job worker process avoid hogging concurrencyweak ruby interpreter sebastian ohm senart presented detail use amqp several iteration developed model called semantic event change domain object result message dispatched broker consumed whichever microservice find message interesting architecture enabled event sourcing many microservices deal shared data remove need query public api example might need fan artist email address notify new track data available public api constrained rule enforced thirdparty application possible example microservice notify user activity private track user could access public information explored several possible solution problem one popular alternative extract activerecord model mothership ruby gem effectively making rail model class published interface shared component several important issue approach including overhead versioning component across many microservices became clear microservices would implemented language ruby therefore think different solution end team decided use feature engine plugins depending version create internal api available within private network control could accessed internally used oauth application acting behalf user different authorisation scope depending microservice need data although constantly removing feature mothership push pull interface old system make sure couple new microservices old architecture microservice architecture proven crucial developing productionready feature much shorter feedback cycle externalfacing example visual sound new stats system
323,Lobsters,scala,Scala programming,The Neophyte's Guide to Scala Part 1: Extractors,http://danielwestheide.com/blog/2012/11/21/the-neophytes-guide-to-scala-part-1-extractors.html,neophyte guide scala part extractor,,
324,Lobsters,scala,Scala programming,"What kind of things are easy in Haskell and hard in Scala, and vice-versa?",https://tonymorris.github.io/blog/posts/what-kind-of-things-are-easy-in-haskell-and-hard-in-scala-and-vice-versa/index.html,kind thing easy haskell hard scala viceversa,stackprinter,february daniel c sobral writes intermingling scala haskell community noticed people commenting stuff supposed easy haskell hard scala le often maybe read scala question haskell one see someone mentioning something scala easier haskell like know people knowledgeable kind thing easy haskell hard scala conversely kind thing easy scala hard haskell tony morris responds hour later daniel know day job primarily writing haskell secondarily scala also used language teaching though university use language mostly voluntary teaching still today rarely use java javascript work product company pleased see prediction false question provoked slew misinformation thought would result compelled ignore go somewhat superficial level haskell significantly superior tool support scala java nonexhaustive example haskell hoogle djinn pl three tool alone extremely useful equivalent scala tool exist useful certain fundamental property haskell mean hoogle function useful haskell tag io effect type delineating value type io hoogling say int eliminates lot candidate function would type environment scala without delineation int computed argument int computed entire universe hoogleequivalent would useful nevertheless would somewhat useful exist haskell hlint also superior say java checkstyle included ghc warning system coupled hlint far comprehensive seen anything like scala haskell cleaner syntax superior type inference rarely case must typeannotate haskell say typeannotate haskell choice know scala however extremely superficial level prefer scala lambda syntax haskell requires pseudolambda symbol case aim pointfree style appropriate making alreadyweak point moot use haskell clean syntax appeal child challenge teaching child take easily haskell syntax since far le redundant side let take little excursion nowhere ceremony speak might guess child easily distracted haskell help teacher keep check fundamental know haskell callbyneed default scala way around course contentious issue nevertheless admit falling strongly one side callbyneed default practical scala evaluation model faraway second place never seen legitimate argument come close swaying position though invite please summarise think haskell superior evaluation model also nuance scala laziness example scala unifies lazy value contravariant position ie int int int int contentious issue aside haskell effecttracking way consequence evaluation model overwhelmingly practical everyday software task absence similar quite devastating many user scala become aware wishing solution emphasise important form static typecheck typical business programming terse form try haskell far superior library support scala java discussed scala lack fundamental function standard library higherlevel one even scarce example fundamental property scala making good library support difficult strict evaluation java interop however neither incur penalty produce described unfortunate catastrophe scala standard library say scala standard library could easily mile ahead today left ponderances something third lumbar vertebra expert level something suppose help emphasise point time day job come project using haskell scala come consequence feel immediately sharp contrast use intellij idea slow cumbersome full bug scala type inferencer le robust difficult prototype may make typeerror carry nothing happened nothing disappointing spend waste hour implementing library really already waste time probably next guy implement fundamental library ability talk shaving yak opinion disappointing part scala especially since nothing stopping useful library besides skill absence ability recognise useful library even happens haskell far lesser extent digress frustration ghc repl ghci better support everyday programming useful tabcompletion type info browse command heavily missed scala also much faster scala forgiven given jvm use scala call java apis even ridiculous yet popular apis ever written call websphere method write servlets write wicket application use play framework something outragoeus database hibernate thing industry seems think useful though secretly contend pathetic hope child completely avoid argument discussion associated merit issue get job still getting benefit language vastly superior java might seem like cheap stab though sincere say true benefit value lot scala module system superior haskell almost thing useful haskell also vice versa example haskell allows module export module scala requires stick finger left ear oh intellij idea stop working exaggerate get point scala package object firstclass module nicety haskell lack scala also ability namespace function giving special status one argument people call oo next breath never get mean may two function name disambiguated call site type argument left dot deliberately calling special name rather focussing utility haskell qualified import quite nice usually though always particularly unimaginative come inventing function name allowing reuse one without penalty handy indeed note mean overloading think scala community worked overloading worth ever experience scala appeal existing programmer usually get running quicker haskell contrast nonprogrammers get running haskell far quicker scala teacher used think great attribute scala tried thought good today think worth seen many catastrophe programmer familiar degenerate problemsolving technique ala java handed thing scala call pessimistic somesuch wish remind year ago handed alreadyfailed project written scala java guy supposed save scala expert sure guess turned many many anecdote like though confirmed time try use scala teaching existing programmer rather industry perhaps selection bias given extreme apprehension nevertheless experience aside may call benefit haskell doubting existing programmer get running much quicker scala think tidbit hopefully satisfies curiosity know many people position using language extensively commercial environment truly love hear someone especially take strong objection opinion say invite truly yearn wellinformed peer review opinion hope help recovered stackprinter deletion much subsequent searching
325,Lobsters,scala,Scala programming,Date based compiler warnings & errors for FIXMEs,https://github.com/tysonjh/fixme/,date based compiler warning error fixmes,fixme using sbt sbt plugin recommended dependency,fixme generate compiler warning fixmes todos fixmes used identify known bug issue code requires solution todos used identify improvement area optimization refactorings syntax use fixme todo example work also nt worry overhead incurred using fixme operates compile time runtime cost two way use fixme expression within body classobjectmethod annotation import fixme need import fixme expression abort compilation fixed fixme expression always generates warning fixme annotation abort compilation fixed fixme annotation always generates warning example error fixme date passed annotation abort compilation fixed error fixme annotation abort compilation fixed error warn fixme annotation always generates warning warn fixme annotation always generates warning warn error fixme date passed expression abort compilation fixed error fixme expression abort compilation fixed error warn fixme expression always generates warning warn fixme expression always generates warning warn warn two warning found error two error found error corecompile compile compilation failed error total time completed apr fixmes todos show often software project developer best intention returning resolve often forgotten pushed aside ignored never seen library make sure noticed constantly nagging compiler warning completely refusing compile error using sbt sbt plugin recommended projectpluginssbt add resolvers tysonjh release http tysonjhgithubioreleases addsbtplugin comtysonjh sbtfixme buildsbt add dependency sbt build setting add resolvers tysonjh release http tysonjhgithubioreleases librarydependencies scalaversion v string vstartswith list orgscalamacros quasiquotes compile else nil orgscalalang scalareflect v compile comtysonjh fixme compile addcompilerplugin orgscalamacros paradise cross crossversionfull complexity reduced using scala since quasiquotes part standard library compiler plugin required gain access macro annotation also removed fixme used expression beware removing macro paradise plugin could confusing since annotation still present functional
326,Lobsters,scala,Scala programming,Quirks of Scala Specialization,http://axel22.github.io/2013/11/03/specialization-quirks.html,quirk scala specialization,quirk scala specialization know condition method specialization initialize specialized value outside constructor body resolve access problem using modifier use possible avoid possible make class flat possible avoid call wary additional field think primitive type really care avoid using specialization implicit class together lift expression method trigger specialization specialized type mentioned function signature specialized parting word comment powered disqus comment powered,quirk scala specialization posted alex used specialization lot fixed issue came across couple useful trick want document others specialization feature allows generate separate version generic class primitive type thus avoiding boxing case first introduced scala iulian dragos scala specialization become pretty robust language feature lot issue fixed place might stab back watch problem specialization interacts edgecases language obscure language feature way expected sometimes unresolved bug tip trick might help note used correctly powerful extremely useful feature jvm language parallel day get scared tip know condition method specialization perhaps aware even method part specialized class contains specializable code really specialized unless specialized type appears argument list return type example def getvalue specialized class foo specialized var value def reset value getvalue reset specialized elaborate design decision taken specialization want reset specialized something like def reset value getvalue value aware method specialized must either take argument specializable type environment must return value type one typeparameter specialized specialized class instance created specialized type parameter instantiated primitive type quiz class foo specialized specialized r var tv var sv var rv r val x new foo int string string val new foo int long string x andor refer specialized object specialization never generates specialized class combination specialized generic type parameter annotated specialized compiler rewrite last line val x new foo javalanginteger string string val new foo mcij sp instantiated specialized class foo mcij sp instantiated primitive type int long x refers generic object specialization allornothing semantics picking specialized implementation specializedannotated type parameter must instantiated primitive type yield specialized object surprised halfspecialized constructor invocation end creating object instance box everything applies method well constructor invocation initialize specialized value outside constructor body specialization problem specializing constructor case let say want track different method invocation seeing specific value stopkey want specialized collection task point could arrive class traversable traversablebuffer action trait traversable specialized int long double self object traversable class buffer specialized int long double extends traversable def value class action specialized int long k v val stopkey k private val insertsbuffer new traversablebuffer k v private val clearsbuffer new traversablebuffer unit def insert traversable k v insertsbuffer def clear traversable unit clearsbuffer try instantiate action scala get exception thread main javalangillegalaccesserror orgtestactions mci sp init orgtestmain main orgtestmainmain mainscala get fails way fails suffices say specialization creates specialized field specialized variant class properly rewire bridge field accessor method constructor body correctly pattern solve issue create method init initialize troublesome field class action specialized int long k v val stopkey k private var insertsbuffer traversablebuffer k v null private var clearsbuffer traversablebuffer unit null protected def init sk k insertsbuffer new traversablebuffer k v clearsbuffer new traversablebuffer unit init stopkey def insert traversable k v insertsbuffer def clear traversable unit clearsbuffer make sure init method take argument specialized type enforce proper specialization accessing field properly note spent time minimizing example real bigger codebase really easy trigger get precise condition issue happen buggy behaviour anyway important thing know solve kind illegalaccesserrors run initializing complex specialized class consider creating init method initialize specializable field resolve access problem using packageprivate modifier instantiate anonymous class inside specialized class anonymous class access private member surrounding specialized class might get compiler error message telling member accessed following example class buffer specialized private var array array def iterator new iterator var def hasnext arraylength def next anonymous iterator access specialized array surrounding buffer normally compiler remove private modifier surrounding class field end private bytecode level case scala java believe specialization sometimes happen solution make problematic member packageprivate use packageprivate modifier field meant private resolve access problem inner class use trait possible specialized class c specialized specialization creates normal generic version c specialized version eg c mci sp extends generic version class c mci sp extends c int override bridge method need specialized obviously extending specialized class c specialized extends c result diamond inheritance compiler drop specialized c mci sp hierarchy even get warning dropping specialized class mean lose specialization method bottomline use trait specialization need extend specialized class allow multiple inheritance lose specialized method version hierarchy use trait specialized class hierarchy ensure specialized method correctly inherited avoid trait possible seems contradict previous hint well trait problematic supported natively jvm compiler generate lot bridge method time abstract concrete class extend trait take look standard collection code class like abstractseq serve purpose force compiler spit bridge method base class like abstractseq subclass bridge method instead inherit normal jvm way base class eg abstractseq handwaved detail away important thing technique reduces standard library size significantly thinking term specialization specialized method one inside specialized class bridge single specialized type parameter obviously want extend specialized trait least possible many case extend specialized class concrete type possible type good example anonymous class let say trait observer observes trait observer specialized def observe value unit would typically extend particular type anonymous class eventsourceregister new observer int var sum def observe value sum value observer trait generate hundred bridge method everywhere instantiate specialized abstract class abstractobserver specialized extending single type eg int inherit specialized variant abstractobserver mci sp lose specialized method described previous hint use abstract specialized superclass anonymous class class extending superclass concrete specialized type parameter save compilation time make compiler output smaller make class flat possible specialization getting robust make mistake sometimes interacts weirdly scala feature sometimes due bug sometimes due fundamental issue one important consideration nested inner class avoid could write trait view specialized self def foreach f unit unit def filter p boolean new view def foreach f unit v self p v f v instead write trait view specialized self def foreach f unit unit def filter p boolean new viewfiltered self p object view class filtered specialized val self view val p boolean extends view def foreach f unit v self p v f v sometimes specialization phase compiler fail reproduce correct flattening nested class need particular example hint might even work general avoid nesting specialized stuff specialized stuff best case receive warning member enclosing class accessible existing general avoid nesting specialized class avoid super call qualified super call perhaps fundamentally broken specialization rewiring superaccessor method properly specialization phase nightmare solved far avoid like plague least particular stackable modification pattern work well avoid super call wary var aware var specializable type may result increase memory footprint namely limitation jvm combination current specialization design subclass specialization generic class following class class foo specialized int var x result generic class foo one field x specialized class foo mci sp additional field x mci sp class foo mci sp var x mci sp int extends foo int null original field x initialized null specialized subclass avoid minimize var specialized class memory footprint concern still need var want reduce memory footprint use following trick let say implementing closed addressing hash table need entry object key normally declare specialized class entry key field would duplicated instead declare trait trait entry specialized int long k def key k def key k k unit concrete implementation trait final class anyrefentry k var key k extends entry k final class intentry var key int extends entry int final class longentry var key long extends entry long concrete entry single field instantiate correct entry implementation hash table implementation use typeclass resolved hash table instantiated trait entryable specialized int long k def newentry k k entry k implicit def anyrefentryable k new entryable k def newentry k k new anyrefentry k implicit def intentryable new entryable int def newentry k int new intentry k class hashtable specialized int long k implicit val e entryable k specific implicit resolved calling new hashtable think primitive type really care blindly specializing primitive type unnecessary boost compilation time high heaven well generate thousand small class think primitive type application actually use usually specialize int long double many case enough class foo specialized int long double fact find functionn class scala standard library specialized specific type higher arity le specialized restrict specialized primitive type ensure shorter compilation time make compiler output smaller avoid using specialization implicit class together instead implicit class mytupleops specialized specialized tuple def reverse class mytupleops specialized specialized val tuple def reverse implicit def tupleops specialized specialized tuple new mytupleops tuple ran across situation specialized implicit class compiled separate compilation run pickle symbol correctly probably fixed future run error message telling mytupleops symbol available likely solve issue lift expression method trigger specialization remember specialization method triggered specialized type mentioned function signature consider following example class source specialized int val event def emit ob observer unit obsonevent event def trigger x unit val ob new observer emit ob class observer specialized int def onevent e source subclass specialized int ie source mci sp note specialized emit ie emit mci sp note called trigger specialized since contain specialized type signature example box value event trigger get called solution lift new observer helper method mention return type def newobserver observer new observer def trigger x unit val ob newobserver emit ob specialized subclass source newobserver method forward newobserver mci sp trigger need specialized userfacing method similar trick introduce fake implicit parameter mention specialized type parameter parting word hope summarizes useful guideline dealing scala specialization add tip remember run please enable javascript view comment powered disqus comment powered
328,Lobsters,scala,Scala programming,Alternatives to GADTs in Scala,https://pchiusano.github.io/2014-05-20/scala-gadts.html,alternative gadts scala,alternative gadts scala fp scala talked submitted bug report finally tagless even expert haskellers sometimes miss obvious application technique apfelmus response discus twitter comment powered disqus comment powered,alternative gadts scala fp scala scala support gadts really existential type pattern matching poor talked submitted bug report point holding breath getting good support thing near future instead focusing attention finding workarounds whenever tempted define data type using case class ask whether interpreter write data type really need interesting deep pattern matching often many way phrase interpreter series stage interesting pattern matching needed stage interpreter simply going simple fold expression tree often avoid building expression tree instead term represented function algebra result oleg dubbed finally tagless encoding haskell oleg took algebra typeclass constraint work pretty nicely going show slightly different approach using explicit dictionary passing aside general technique unfortunately well known expert haskellers sometimes miss obvious application technique see apfelmus response one possible encoding simple typed dsl two type expression readline printline trait consolealg f def readline f option string def printline line string f unit case class console type looked something like trait console case object readline extends console option string case class printline line string extends console unit might write various interpreter console io actual io string console taking standard input regular pure argument etc flexibility able choose interpreter later often drive u sort encoding achieve effect representing console term function consolealg f f trait console def run f f consolealg f f object console val readline console option string new console option string def run f f consolealg f f option string freadline def printline line string console unit new console unit def run f f consolealg f f unit fprintline line case class involved run console provide consolealg f f consolealg algebra pretty lack way combine console expression make algebra expressive like could extend monad f say generalizing bit even abstract algebra generally trait term alg def apply f alg f f object term def readline term consolealg option string new term consolealg option string def apply f consolealg f f option string areadline etc term parameterized algebra interpret term different algebra instance obtain different behavior next time temped define new data type case class think sort pattern matching really interpreter normal singlelevel pattern matching simple fold consider using tagless representation like discus twitter please enable javascript view comment powered disqus comment powered
329,Lobsters,scala,Scala programming,Typesafe Activator - An Update and Roadmap Preview,http://typesafe.com/blog/typesafe-activator---an-update-and-roadmap-preview,typesafe activator update roadmap preview,one unified download advanced user often use test distribution newcomer might download several different thing know start typesafe reactive platform full flavor like former play distribution mini flavor like downloading sbt launch jar first fifteen minute tutorial template platform template simply prebuilt sample project contain tutorial browsed online seed template intended replace play new feature old play script template regular project template bundle simply project zipped activator mini distribution stuck zip http typesafecom helloscala template publish template http typesafecomactivatortemplatecontribute http typesafecomactivatortemplatecontribute beyond first fifteen minute activator future ui right optional activator ui intended platform tutorial template sbtremotecontrol project sbtclient autoplugin hope make activator ui mode useful companion editor ide sbt command line mode today stay tuned activator github repository activator template contest scaladays helicopter drone related link share comment filter tag,recently question typesafe activator relates project typesafe platform scala akka play framework sbt tool evolved lot since launched year ago use case feature continually working improvement make best way get started technology want give straightforward technical breakdown currently working let go specific problem trying solve one unified download typesafe work several project including scala akka play sbt newcomer platform might see number suggested thing install scala targz executables jar plus outdated odds end sbt ship single launch jar document write wrapper also msi linux homebrew package sbt akka used zip file jar doc odds end play big zip including transitive dependency plus script odds end advanced user know distribution targz zip needed grabbing sbt launcher jar get everything else dependencythis may explain distribution tend contain outdated odds end advanced user often use test distribution meanwhile newcomer might download several different thing know start odds end outdated want fix solution factor best part different downloads put single download calling typesafe reactive platform platform download includes script activator equivalent former play script longer specific play also add new optional ui mode typing activator enters sbt console activator new command work like play new us fully general template system rather couple hardcoded choice activator ui command open optional ui mode alias sbt play activator notice much difference command wrapper script around sbt launcher offer two flavor typesafe reactive platform download full flavor like former play distribution dependency bundled offline use mini flavor like downloading sbt launch jar tiny download fetch dependency later demand formerly referred unified download saying download activator confusing people thought point download get optional ui mode plan say download play akka scala download typesafe reactive platform reflect download get everything either literally everything one big zip full version bootstrap tool fetch everything demand mini version first fifteen minute tutorial template platform wanted smooth first minute newcomer downloads platform presumably want try one technology scala akka play slick smooth want step like go install configure ide install thing learn use build tool want work quickly idea tutorial inside activator along basic code editor someone walk hello world akka play without bunch setup course want set full editor ide later activator ui intended replace full editor cover first minute created template system pretty neat feature template simply prebuilt sample project contain tutorial template browsed online browsed activator ui tabcompleted activator new anyone create template publish catalog see two broad category template seed template generate project boilerplate tutorial template learning mark template seed template add seed tag create template people know use starting new project without tag template assumed tutorial seed template intended replace play new feature old play script previously play would offer two option create scala java project still highlight short list option activator play browse full list seed template one best suit project starting design goal activator template system template regular project go template github fact template catalog page link github clone repository able build run command line sbt command line activator convenience also generate template bundle template template bundle simply project zipped activator mini distribution stuck zip mean download bundle unpack run activator build need download scala sbt anything else bundle template bundle great want code template without extra stuff writing blog post around template want easy download reader try least five way use template want accessible possible select activator ui create project template command line using activator new browse clone regular project github download template bundle unpack view tutorial inline http typesafecom check example helloscala template also worked hard make easy create template start fact project publish template make interesting example project write html file explaining place tutorialindexhtml paste github url box http typesafecomactivatortemplatecontribute detail explained http typesafecomactivatortemplatecontribute nothing like rocket science beyond first fifteen minute activator future ui right optional activator ui intended platform tutorial template intended yet however want useful right many developer run sbt command line alongside editor ide continue option like ui viable alternative fullpower frontend sbt get lot work sbt make work robustly ui backend hope work benefit activator also tool interacts sbt perhaps eclipse intellij editor even play inbrowser ui check sbt client api building sbtremotecontrol project explore codebase good starting point might sbtclient addition clientserver split implemented autoplugin plan improve support forking manipulating process enhancement help sbt work better ui backend current activator codebase ui retrofitted onto sbt able run hardcoded sbt task also major limitation realworld project support multiple project one build example switch new sbt ui able anything sbt command line hopefully take advantage pixel display information hope make activator ui mode useful companion editor ide sbt command line mode today developer able choose command line ui according preference depending task hand ui hope make many everyday task easier hope enable improvement tool ides take advantage sbt change making stay tuned short three direction activator right single download starting point newcomer platform catalog tutorial seed project optional ui sbt project running alongside existing editor ide three evolving improving third particular exist yet developing activator github repository interested checking way running activator template contest leading scaladays first prize helicopter drone thinking creating template might time great way increase visibility favorite technology related link share comment filter tag
330,Lobsters,scala,Scala programming,Building Scala at Scale,http://www.sumologic.com/blog/company/building-scala-at-scale,building scala scale,scala compiler never fast compiling slow many module parallelism module level single core become much faster since parallel build maven incremental build zinc zinc implemented option fixed issue time statistic wrapper utility trick learned along way istat menu summary,scala compiler brutally slow community lovehate relationship love mean yes scalac slow hate mean scala would program hard go week without reading another rant scala compiler moreover one typesafe cofounder left company shouting scala compiler never fast even scala inventor martin odersky provides list fundamental reason compiling slow sumo logic happily build line scala code maven find setup productive based public perception scala build process seems plausible ufo landing roof building many module sumo logic module source directory unit test dependency result reasonably small well defined usually need modify one mean build fetch binary dependency using method huge win build time also make ide test suite run quickly fewer element always easier handle keep module single github repository though experimented separate repository project keeping track version dependency complicated parallelism module level although moore law still work single core become much faster since scala compiler parallelism nowhere close saturating eight core use case enabling parallel build maven helped lot first caused lot nondeterministic failure turn always forking java compiler fixed problem allows u fully saturate cpu core build time even better allows u overcome bottleneck eg fetching dependency incremental build zinc zinc brings feature sbt build system providing two major gain keep warmed compiler running avoids startup jvm warmup tax allows incremental compilation usually compile clean state make simple change get recompiled huge gain test driven development long time unable use zinc parallel module build turn needed tell zinc fork java compiler luckily awesome typesafe developer peter vlugter implemented option fixed issue time statistic following example show typical development workflow building one module benchmark picked largest one line code loc next example show building module loc time consuming task usually skip test compilation bringing build time minute wrapper utility still engineer happy often build test often needed computer get slow saturate cpu eg video conference becomes sluggish passing correct argument maven hard educating developer might helped picked easier route created simple bash wrapper run every maven process lower cpu priority nice n build process slow browser ide video conference make sure zinc running start allows compile dependency downstream easily module allows compile thing depend module upstream make easy select kind test run though simple wrapper improves usability lot example fixed library bug module called streampipeline would like build run unit test module depend use command binquickassemblesh tu streampipeline trick learned along way print longest chain module dependency build time help identify unnecessary poorly designed dependency removed make dependency graph much shallow mean parallelism run build loop fails simple bash binquickassemblesh done leave overnight helpful debugging nondeterministic bug common multithreading environment analyze bottleneck build time cpu io core used network speed limiting factor vary different phase istat menu proved really helpful read maven documentation many thing maven intuitive trial error approach tedious build system reading documentation carefully huge time saver summary building scale usually hard scala make harder relatively slow compiler hit issue much earlier language however problem solvable general development best practice especially modular code parallel execution default invest time tooling rock find name scala xargs cat wc l module built tested jenkins binary stored nexus author macbook pro late eight core little java code theoretically java compiler threadsafe concurrency bug decided dig forking seems easier solution benchmark methodology hardware macbook pro late ghz intel gb ram test run three time median time selected nonincremental maven goal clean testcompile incremental maven goal testcompile random change introduced trigger recompilation
331,Lobsters,scala,Scala programming,Scala - The Simple Parts,http://www.slideshare.net/Odersky/flatmap-oslo-presentation-slides,scala simple part,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
332,Lobsters,scala,Scala programming,Scala Collections: Why Not?,http://youtu.be/uiJycy6dFSQ,scala collection,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scala collection youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scala collection youtube
334,Lobsters,scala,Scala programming,eventsourced: A library for building event-sourced applications in scala,https://github.com/eligosource/eventsourced,eventsourced library building eventsourced application scala,eventsourced content overview akka snapshot event sourcing building block processor application channel channel article journal journal application reference application cqrs domaindriven design reference application journal terminology first step firststepsscala firststepsjava scala java leveldb java port native leveldb additional setting appendix step initialization scala java leveldb journal journal implementation step eventsourced actor definition scala java step eventsourced actor creation recovery scala java step eventsourced actor usage scala java step channel usage scala java channel scala java default channel reliable channel scala java first step stackable trait first step scala java api doc scala java scala java scala java api doc scala java receiver usage hint scala java scala java api doc scala java scala java api doc modified example first step stackabletraitsscala stackabletraitsjava scala java scala java scala java scala java scala java scala java sender reference channel actor first step scala java scala java scala java emitter senderreferencesscala senderreferencesjava scala java channel channel standalone external update event sourcing channel usage first step reliable requestreply channel emitter sender reference usagehints sender reference default channel akka reliable proxy remote destination reliable requestreply channel reliable channel article usage hint general eventsourced usage message emitter standalone usage reliable channel reliable requestreply channel event message series eventsourced channel usage remote destination remote recovers reliablechannelexamplescala channel alternative recovery channel replay parameter replay parameter snapshot companion object snapshot recovery without snapshot recovery snapshot scala java await processing nonblocking recovery orderexamplereliablescala api doc replay parameter channel recovery usage state dependency dependentstaterecoveryspecscala external query external update snapshot recovery scala java scala java scala java scala java snapshot based recovery snapshotexamplescala snapshotexamplejava scala java configuration scala java hadoopfilesystemsnapshottingprops behavior change event series idempotency channel event message series serialization akka serializer message preconfigured example order management martin fowler lmax article appendix akkacamel sender reference orderexamplescala reliable requestreply channel event sourcing external service integration state machine change fsm fsmexamplescala clustering previous example cluster clusterexamplescala journalconf clusterconf miscellaneous multicast processor retroactive change appendix legend appendix b project appendix c article appendix support,eventsourced scala version akka version content overview eventsourced library add scalable actor state persistence atleastonce message delivery guarantee akka eventsourced stateful actor persist received message appending log journal project received message derive current state usually hold current state memory memory image recover current past state replaying received message normal application start crash never persist current state directly except optional state snapshot recovery time optimization word eventsourced implement writeahead log wal used keep track message actor receives recover state replaying logged message appending message log instead persisting actor state directly allows actor state persistence high transaction rate support efficient replication contrast walbased system eventsourced usually keep whole message history log make usage state snapshot optional logged message represent intended change actor state logging change instead updating current state one core concept event sourcing eventsourced used implement event sourcing concept limited detail eventsourced relation event sourcing found eventsourced persist actor state related event sourcing eventsourced also used make message exchange actor reliable resumed crash example purpose channel atleastonce message delivery guarantee provided channel also prevent output message sent persistent actor redundantly delivered replay relevant message exchange actor service building block core building block provided eventsourced processor channel journal managed akka extension eventsourcingextension processor processor stateful actor log persists message receives stateful actor turned processor modifying stackable eventsourced trait construction processor used like actor message wrapped inside message logged processor unwrapped message logged wrapped message often referred event user guide wrapped message also command explained section application logging behavior implemented eventsourced trait processor receive method nt need care acknowledging successful write sender done sending reply processor also hotswap behavior still keeping logging functionality processor registered eventsourcingextension extension provides method recover processor state replaying logged message processor registered recovered time application run eventsourced nt impose restriction processor maintain state processor use var mutable data structure stm reference example channel channel used processor sending message actor channel destination receiving reply channel require destination confirm receipt message providing atleastonce delivery guarantee explicit ackretry protocol receipt confirmation written log prevent redundant delivery message destination processor recovery replay message replayed message matching receipt confirmation dropped corresponding channel channel actor decorates destination aforementioned functionality processor usually create channel child actor decorating destination actor reference processor may also sent message directly another actor without using channel case actor redundantly receive message processor recovery eventsourced provides three different channel type planned default channel store received message redelivers uncomfirmed message recovery sending processor order message sent processor preserved failure case reliable channel store received message redelivers unconfirmed message based configurable redelivery policy order message sent processor preserved even failure case often used deal unreliable remote destination recover crash jvm running reliable requestreply channel reliable channel additionally guarantee atleastonce delivery reply order reply guaranteed correspond order sent request message eventsourced channel meant replace existing messaging system used example reliably connect processor system needed generally useful integrate processor service described article journal journal actor used processor channel log message receipt confirmation quality service availability scalability provided journal depends used storage technology journal section give overview existing journal implementation development status application eventsourced library nt impose restriction structure semantics message payload hence persistent message therefore event well command seen fact interaction application environment demonstrated eventsourced reference application persists event well command also simplifies implementation longrunning persistent business process sometimes referred saga processor react event sending command service processor external service example eventsourced fit well application implement cqrs pattern follow domaindriven design ddd see reference application hand library nt force application allows implement eventsourcing andor commandsourcing without cqrs andor ddd journal persisting message eventsourced currently provides following journal implementation terminology following term persistent actor eventsourced actor eventsourced processor processor used interchangeably furthermore message often referred event message first step section guide minimum step required create use recover eventsourced actor demonstrates usage channel code section contained firststepsscala firststepsjava executed sbt prompt scala project eventsourcedexamples runmain orgeligosourceeventsourcedguidefirststeps java project eventsourcedexamples runmain orgeligosourceeventsourcedguidejapifirststeps example section example use journal backed leveldb java port running native leveldb instance sbt additional setting required legend figure used section appendix step eventsourcingextension initialization eventsourcingextension akka extension provided eventsourced library used application create register eventsourced actor called processor event processor create register channel recover registered processor channel journaled event message eventsourcingextension initialized actorsystem journal actorref scala import javaiofile import akkaactor import orgeligosourceeventsourcedcore import orgeligosourceeventsourcedjournalleveldb val system actorsystem actorsystem example val journal actorref leveldbjournalprops new file native false createjournal val extension eventsourcingextension eventsourcingextension system journal java import javaiofile import akkaactor import orgeligosourceeventsourcedcore import orgeligosourceeventsourcedjournalleveldb final actorsystem system actorsystemcreate guide final actorref journal leveldbjournalpropscreate new file withnative false createjournal system final eventsourcingextension extension eventsourcingextensioncreate system journal example us leveldb journal journal implementation used well step eventsourced actor definition scala api eventsourced actor defined plain actor java api eventsourced actor need extend abstract untypedeventsourcedactor class example scala class processor extends actor var counter def receive case msg message counter counter println processor event format msgevent counter java public class processor extends untypedeventsourcedactor private int counter override public int id return override public void onreceive object message throw exception message instanceof message message msg message message counter counter systemoutprintln stringformat processor event msgevent counter actor count number received event message eventsourced application event always communicated transported via event message step eventsourced actor creation recovery make scala processor eventsourced actor must modified stackable eventsourced trait instantiation java processor already extends untypedeventsourcedactor class modification needed scala create register eventsourced processor val processor actorref extensionprocessorof prop new processor eventsourced val id recover registered processor replaying journaled event extensionrecover java create register eventsourced processor final actorref processor extensionprocessorof propscreate processorclass system recover registered processor replaying journaled event extensionrecover actor modified eventsourced extends untypedeventsourcedactor writes event message journal receive method onreceive method respectively called processorof method register actor unique id processor id defined implementing abstract eventsourcedid member must positive integer consistently reused across application run recover method recovers state processor replaying event message processor received previous application run step eventsourced actor usage eventsourced processor used like actor message type message written journal message type directly received processor without journaled scala send event message processor journaled processor message foo java send event message processor journaled processortell messagecreate foo null first application run create empty journal hence event message replayed processor writes processor event foo stdout application restarted however processor state recovered replaying previously journaled event message application sends another event message therefore see processor event foo processor event foo stdout first println triggered replayed event message step channel usage step eventsourced processor extended send new event message destination creates another event message making copy received event message updated event field sends updated message destination scala class processor destination actorref extends actor var counter def receive case msg message counter counter destination msgcopy event processed event message far format counter val destination actorref systemactorof prop destination instantiate processor passing destination constructor argument val processor actorref extensionprocessorof prop new processor destination eventsourced val id extensionrecover java public class processor extends untypedeventsourcedactor private actorref destination private int counter public processor actorref destination thisdestination destination override public int id return override public void onreceive object message throw exception message instanceof message message msg message message counter counter destinationtell msgwithevent stringformat processed event message far counter getself final actorref destination systemactorof propscreate destinationclass instantiate processor passing destination constructor argument final actorref processor extensionprocessorof propscreate processorclass destination system extensionrecover without action would also send event message destination recovery ie replay event message every application restart destination would redundantly receive whole event message history acceptable case destination represents external service example prevent redundant message delivery destination need something remembers message already successfully delivered exactly use case channel channel drop message already successfully delivered destination therefore wrap destination channel let processor communicate destination via channel done without changing code processor scala val destination actorref systemactorof prop destination wrap destination channel val channel actorref extensionchannelof defaultchannelprops destination instantiate processor passing channel ie wrapped destination constructor argument val processor actorref extensionprocessorof prop new processor channel eventsourced val id java final actorref destination systemactorof propscreate destinationclass wrap destination channel final actorref channel extensionchannelof defaultchannelpropscreate destination system instantiate processor passing channel ie wrapped destination constructor argument final actorref processor extensionprocessorof propscreate processorclass channel system channel must unique id example positive integer must consistently defined across application run create default channel configured defaultchannelprops configuration object application need reliable event message delivery destination use reliable channel configured reliablechannelprops configuration object assuming following definition destination actor scala class destination extends actor def receive case msg message println destination event format msgevent confirm receipt event message channel msgconfirm java public class destination extends untypedactor override public void onreceive object message throw exception message instanceof message message msg message message systemoutprintln stringformat destination event msgevent msgconfirm true starting empty journal see processor event foo destination event processed event message far stdout first application run running application see eventsourced processor receives complete event message history destination receives last event message produced processor corresponds single event message sent processor current application run processor event foo processor event foo destination event processed event message far receiving event message channel destination must confirm receipt message calling messageconfirm asynchronously writes confirmation acknowledgement journal message successfully delivered later also see confirmation functionality added destination stackable confirm trait first step guide rather lowlevel introduction eventsourced library advanced library feature covered following section stackable trait eventsourced eventsourced trait already discussed section first step combined stackable receiver emitter andor confirm trait eventsourced trait must always last modification ie scala new myactor receiver confirm eventsourced java public class myactor extends untypedeventsourcedconfirmingreceiver eventsourced java api provides predefined combination stackable trait abstract base class example untypedeventsourcedconfirmingreceiver defined abstract class untypedeventsourcedreceiver extends untypedactor receiver confirm eventsourced predefined combination stackable trait java api described following subsection refer untyped abstract class api doc predefined combination receiver actor receives event message often want patternmatch contained event directly instead whole event message achieved modifying receiver trait instantiation scala api extending abstract untypedreceiver class java api scala class myactor extends actor def receive case event println received event format event val myactor systemactorof prop new myactor receiver myactor message foo java public class myactor extends untypedreceiver override public void onreceive object event throw exception systemoutprintln stringformat received event event final actorref myactor systemactorof propscreate myactorclass myactortell messagecreate foo null example sending message foo myactor write received event foo stdout receiver trait store received event message current event message field extract contained event message call receive onreceive method myactor event argument myactor want access current event message must defined receiver selftype call message method scala api call message method java api scala class myactor extends actor receiver def receive case event obtain current event message val currentmessage message println received event format event java public class myactor extends untypedreceiver override public void onreceive object event throw exception obtain current event message message currentmessage message systemoutprintln stringformat received event event receiver trait also combined stackable eventsourced andor confirm trait receiver must always first modification example scala new myactor receiver eventsourced java public class myactor extends untypedeventsourcedreceiver refer api doc detail emitter receiver modification allows actor patternmatch incoming event directly instead whole event message emitter introduces corresponding simplification sending outgoing side allows actor send emit event channel without deal whole event message emitter also lookup channel name id see scala class myactor extends actor emitter def receive case event emit event channel mychannel emitter mychannel sendevent received format event create register channel name mychannel extensionchannelof defaultchannelprops destination withname mychannel val myactor systemactorof prop new myactor emitter java public class myactor extends untypedemitter override public void onreceive object event throw exception emit event channel mychannel emitter mychannel sendevent stringformat received event getself create register channel name mychannel extensionchannelof defaultchannelpropscreate destination withname mychannel system final actorref myactor extensionprocessorof propscreate myactorclass system event message sent emitter channel always derived ie copy current event message emitter also receiver maintains current event message see also section receiver call emitter method channel name argument creates messageemitter object capture named channel current event message calling sendevent object modifies captured event message specified event argument sends updated event message channel see also channel usage hint messageemitter object also sent actor thread used ie messageemitter object threadsafe channel also referred id creating messageemitter ie need define custom channel name scala class myactor extends actor emitter def receive case event emit event channel id emitter sendevent received format event create register channel extensionchannelof defaultchannelprops destination java public class myactor extends untypedemitter override public void onreceive object event throw exception emit event channel id emitter sendevent stringformat received event getself create register channel extensionchannelof defaultchannelpropscreate destination system emitter trait also combined stackable eventsourced andor confirm trait emitter must always first modification example scala new myactor emitter eventsourced java public class myactor extends untypedeventsourcedemitter refer api doc detail confirm receipt event message channel must confirmed calling confirm confirm true received event message application also negatively confirm event message receipt calling confirm false example cause reliable channel redeliver event message instead calling confirm true confirm false explicitly actor also modified stackable confirm trait trait call confirm true received event message modified actor receive onreceive method return normally confirm false throw exception trait either used standalone scala java public class myactor extends untypedconfirmingactor combination stackable receiver emitter andor eventsourced trait confirm modification must made receiver emitter modification eventsourced modification example scala new myactor receiver confirm eventsourced java public class myactor extends untypedeventsourcedconfirmingreceiver refer api doc detail modified example section modifies simplifies example section first step making use stackable receiver emitter confirm trait particular scala api processor modified emitter addition eventsourced destination modified receiver confirm java api processor extend untypedeventsourcedemitter destination extend untypedconfirmingreceiver code section contained stackabletraitsscala stackabletraitsjava executed sbt prompt scala project eventsourcedexamples runmain orgeligosourceeventsourcedguidestackabletraits java project eventsourcedexamples runmain orgeligosourceeventsourcedguidejapistackabletraits new scala definition processor selftype emitter patternmatches event directly java definition processor extends untypedeventsourcedemitter also receives event directly instead message scala class processor extends actor emitter var counter def receive case event counter counter println processor event format event counter emitter destination sendevent processed event far format counter java public class processor extends untypedeventsourcedemitter private int counter override public int id return override public void onreceive object event throw exception counter counter systemoutprintln stringformat processor event event counter emitter destination sendevent stringformat processed event message far counter getself instead passing channel via constructor lookedup name destination channel name specified channel creation scala extensionchannelof defaultchannelprops destination withname destination java extensionchannelof defaultchannelpropscreate destination withname destination system scala processor must instantiated additional emitter modification conform processor selftype modification needed java processor scala val processor actorref extensionprocessorof prop new processor emitter eventsourced val id java final actorref processor extensionprocessorof propscreate processorclass system new definition destination scala class destination extends actor def receive case event println destination event format event java public class destination extends untypedconfirmingreceiver override public void onreceive object event throw exception systemoutprintln stringformat destination event event patternmatches event directly leaf event message receipt confirmation confirm trait scala destination must instantiated receiver confirm modification modification needed java destination scala val destination actorref systemactorof prop new destination receiver confirm java final actorref destination systemactorof propscreate destinationclass sender reference eventsourced library preserve sender reference message exchange actor modified eventsourced receiver emitter andor confirm extend abstract untyped base class java api message exchange destination actor via channel ie eventsourced actor application make use sender reference way plain actor application know sender reference work akka actor following sound familiar example taking code section first step starting point processor extended reply message sender follows scala class processor destination actorref extends actor def receive case msg message reply sender sender done processing event format msgevent java public class processor extends untypedeventsourcedactor override public void onreceive object message throw exception message instanceof message getsender tell stringformat done processing event msgevent getself application ask processor get response asynchronously scala processor message foo onsuccess case response println response java ask processor messagecreate foo onsuccess new onsuccess object override public void onsuccess object response throw throwable systemoutprintln response systemdispatcher surprise sender reference example represents future returned ask method call happens replay replay sender reference deadletters eventsourced processor nt store sender reference journal main reason application usually want redundantly reply sender replay instead replying sender processor also forward sender reference destination let destination reply sender even work destination wrapped channel channel simply forward sender reference delivering event message destination reason reliablechannel need store sender reference contrast processor sender reference even available reliable channel restarted stored sender reference remote reference remains valid even recovery jvm crash ie crash jvm reliable channel running provided remote sender still available scala class processor destination actorref extends actor var counter def receive case msg message forward modified event message destination together sender reference destination forward msgcopy event processed event message far format counter class destination extends actor def receive case msg message reply sender sender done processing event format msgevent val destination actorref systemactorof prop destination val channel actorref extensionchannelof defaultchannelprops destination val processor actorref extensionprocessorof prop new processor channel eventsourced val id java public class processor extends untypedeventsourcedactor private actorref destination private int counter public processor actorref destination thisdestination destination override public int id return override public void onreceive object message throw exception message instanceof message message msg message message forward modified event message destination together sender reference destinationforward msgwithevent stringformat processed event message far counter getcontext public class destination extends untypedactor override public void onreceive object message throw exception message instanceof message message msg message message reply sender getsender tell stringformat done processing event msgevent getself final actorref destination systemactorof propscreate destinationclass final actorref channel extensionchannelof defaultchannelpropscreate destination system final actorref processor extensionprocessorof propscreate processorclass channel system using messageemitter see also section emitter application choose method sendevent forwardevent sendevent take implicit sender reference parameter forwardevent forward current sender reference work way tell forward method actorref respectively code section contained senderreferencesscala senderreferencesjava executed sbt prompt scala project eventsourcedexamples runmain orgeligosourceeventsourcedguidesenderreferences java project eventsourcedexamples runmain orgeligosourceeventsourcedguidejapisenderreferences channel channel actor keep track successfully delivered event message channel used eventsourced actor processor prevent redundant message delivery destination event message replay channel also used standalone ie independent eventsourced actor use case channel described section external update martin fowler event sourcing article gettingstarted example given section channel usage first step guide currently library provides two different channel implementation defaultchannel reliablechannel pattern top reliablechannel reliable requestreply channel explained following subsection defaultchannel default channel transient channel delivers event message destination actor destination confirms delivery event message calling either confirm confirm true received message object confirmation acknowledgement asynchronously written journal replay event message confirmation exists wo nt delivered destination event message negatively confirmed destination via call confirm false received event message redelivered next event message replay also case event message confirmation made therefore case negative missing confirmation order event message received destination default channel may differ order event message produced eventsourced processor defaultchannel created registered eventsourcingextension follows val extension eventsourcingextension val destination actorref val channelid int val channel actorref extensionchannelof defaultchannelprops channelid destination channelid must positive integer consistently defined across application run map registered channel obtained via channel method eventsourcingextension return map type map int actorref mapping key channel id channel optionally registered custom name see also section emitter val channelid int val channelname string val channel actorref extensionchannelof defaultchannelprops channelid destination withname channelname map registered named channel obtained via namedchannels method return map type map string actorref mapping key channel name default channel preserve sender reference application therefore use forward well communicate channel destination via channel actor ref however special care must taken using replayed message already confirmed channel destination ignored corresponding channel destination reply hence sender see reply timeout avoided finding advance channel ignore message application investigating messageacks list channel id contained list message ignored used asking val channelid int val channel actorref messageackscontains channelid channel messagecopy oncomplete case result see also usagehints regarding messagecopy reliablechannel reliable channel persistent channel writes event message journal delivering destination actor contrast default channel reliable channel preserve order message produced eventsourced processor attempt redeliver event message destination failure therefore reliable channel enables application recover temporary destination failure without run event message replay furthermore reliable channel also recover crash jvm running allows application guarantee atleastonce message delivery case destination failure sender failure destination positively confirms receipt event message stored message removed channel next one delivered destination negatively confirms receipt event message confirmation made ie timeout occurs redelivery attempt made certain redelivery delay maximum number redelivery attempt made channel restarts certain restart delay start redeliveries maximum number restarts reached channel stop message delivery publishes deliverystopped event event stream actor system channel belongs application reactivate channel calling deliver int method eventsourcingextension channel id argument refer reliablechannel api doc detail reliablechannel created registered way default channel except reliablechannelprops configuration object used val channel actorref extensionchannelof reliablechannelprops channelid destination configuration object additionally allows application configure redeliverypolicy channel reliable channel preserve sender reference application therefore use forward well communicate channel destination via channel actor ref detail already described default channel section reliable channel also store sender reference along event message forwarded destination even channel restarted stored sender reference remote reference remains valid even recovery jvm crash ie crash jvm reliable channel running provided remote sender still available familiar akka reliable channel similar akka reliable proxy except additionally recover sender jvm crash see also section remote destination reliable requestreply channel reliable requestreply channel pattern implemented top reliable channel mediates reliable requestreply interaction request sender usually eventsourced processor destination channel following property addition plain reliable channel extract request received message sending destination wrap reply destination message sending back request sender sends special destinationnotresponding reply request sender destination nt reply within configurable reply timeout sends special destinationfailure reply request sender destination responds statusfailure guarantee atleastonce delivery reply request sender addition atleastonce delivery request destination requires positive receipt confirmation reply mark requestreply interaction successfully completed redelivers request subsequently reply missing negative receipt confirmation reliable requestreply channel created registered way reliable channel except reliablerequestreplychannelprops configuration object used import orgeligosourceeventsourcedpatternsreliablerequestreply val channel actorref extensionchannelof reliablerequestreplychannelprops channelid destination configuration object additionally allows application configure replytimeout reply destination detailed usage example reliable requestreply channel given article usage hint general channel must activated usage see extensiondeliver eventsourced usage channel work properly eventsourced processor must copy processorid sequencenr value received journaled input event message output event message usually done calling copy received input event message updating field relevant application event ack example class processor channel actorref extends actor def receive case msg message channel msgcopy event ack using message emitter done automatically standalone usage reliable channel reliable requestreply channel also used independently eventsourced processor ie standalone standalone channel usage sender must set messageprocessorid sent message default value val channel extensionchannelof reliablechannelprops channel message event processorid equivalent directly sending messageevent reliable channel internally wrap received event message processorid set setting processorid cause reliable channel skip writing acknowledgement acknowledgement always refers event message received eventsourced processor need write one case another unrelated use case turning writing acknowledgement emission event message series context eventsourced channel usage remote destination application consider using reliable channel whenever sender processor deliver message remote destination atleastonce sending order even case network error sender destination remote actor ref remains valid remote actor temporarily unavailable destination jvm crash remote actor ref becomes invalid sender jvm crash message already received sender processor yet delivered remote destination must automatically delivered sender recovers crash using remote actor ref channel destination would work case case one possible way deal case use local actor destination proxy communicates remote destination via actorselection actorselection created actor path bound remote destination lifecycle class destinationproxy destinationpath string extends actor val destinationselection actorselection contextactorselection destinationpath def receive case msg destinationselection tell msg sender forward val destinationpath string val proxy systemactorof prop new destinationproxy destinationpath val channel extensionchannelof reliablechannelprops proxy using actorselection also cover case course case automatically covered fact sender processor us reliable channel sending message destination example class sender extends actor val id val ext eventsourcingextension contextsystem val proxy contextactorof prop new destinationproxy akkatcp example val channel extchannelof reliablechannelprops proxy def receive case msg message channel forward msg create recover sender channel val sender extensionprocessorof prop new sender eventsourced sender message hello special care must taken remote destination actor eventsourced actor case application must ensure destination actor accessed remotely successfully recovered achieved example using additional endpoint actor simply forward destination actor endpoint actor registered destination path destination actor successfully recovered class destinationendpoint destination actorref extends actor def receive case msg destination forward msg class destination extends actor val id def receive case msg message println received msgevent msgconfirm val destination extensionprocessorof prop new destination eventsourced wait destination recovery complete extensionrecover make destination remotely accessible recovery systemactorof prop new destinationendpoint destination destination ensures new remote message never interleave message replayed destination actor recovery code section contained reliablechannelexamplescala sender application started sbt project eventsourcedexamples runmain orgeligosourceeventsourcedexamplesender remote destination started project eventsourcedexamples runmain orgeligosourceeventsourcedexampledestination sender application prompt user enter message stdin reliably sent remote destination channel alternative le reliable alternative channel communication via sender reference mean producing event message destination passed processor via sender reference along input event message sender reference deadletters replay also prevents redundant delivery main difference however delivery guarantee change atleastonce atmostonce recovery recovery procedure recreates state eventsourced application consisting eventsourced actor processor channel recovery usually done application start either normal termination crash also done time later even individual processor channel val system actorsystem val journal actorref val extension eventsourcingextension system journal create register eventsourced processor extensionprocessorof create register channel extensionchannelof recover state registered processor activate channel extensionrecover processor channel ready use recover method first replay journaled event message registered processor replaying event message history processor recover state processor emit event message one channel also replay channel either ignore discard event message already successfully delivered ie acknowledged previous application run buffer later delivery replay recover method trigger delivery buffered message activating channel channel delivered event message immediately instead buffering delivered event message could wrongly interleave replayed event message could lead inconsistency event message ordering across application run therefore inconsistency application state therefore recovery must ensure buffered event message delivered replayed event message added corresponding processor mailbox especially important recovery processor channel connected cyclic directed graph replay parameter recovery parameterized replay parameter using eventsourcingextensionrecover seq replayparams method one overloaded definition replayparams allow finegrained control state recovery individual processor processor recovered application must create replayparams instance replayparams specify whether replay start scratch snapshot given sequence number lower sequence number bound whether replay end current state state past using upper sequence number bound following two subsection demonstrate replayparams usage example detail refer api doc replayparams companion object detail snapshot creation refer snapshot section recovery without snapshot already explained val extension eventsourcingextension import extension recover recovers processor lower upper sequence number bound ie event message replayed equivalent recover replayparamsallfromscratch recover processorskeysmap pid replayparams pid toseq application want recover specific processor create replayparams processor example recover seq replayparams replayparams recovers processor id upper lower sequence number bound specified well recover seq replayparams tosequencenr replayparams fromsequencenr processor receive replayed event message sequence number within range inclusive processor receive event message sequence number starting upper sequence number bound recovery snapshot snapshot based recovery processor receives snapshotoffer message receiving remaining event message processor us snapshotoffer message restore state scala class processor extends actor var state def receive case snapshotoffer state sosnapshotstate java public class processor extends untypedeventsourcedactor private object state override public void onreceive object message throw exception message instanceof snapshotoffer snapshotoffer snapshotoffer message state sosnapshot state snapshot based recovery send snapshotoffer message processor one snapshot created processor snapshot match criterion corresponding replayparams relevant criterion tosequencenr snapshotfilter snapshot processor existing snapshot match replayparams criterion event message replayed scratch ie sequence number recover processor latest snapshot recover replayparamsallwithsnapshot used equivalent recover processorskeysmap pid replayparams pid snapshot true toseq snapshot based recovery also made upper sequence number bound recover seq replayparams snapshot true tosequencenr recovers processor latest snapshot sequence number remaining event message replayed sequence number inclusive application may also define constraint snapshot example import scalaconcurrentduration val limit systemcurrenttimemillis recover seq replayparams snapshotfilter snapshotmetadata snapshotmetadatatimestamp limit us latest snapshot processor older hour done snapshotfilter filter snapshot based timestamp snapshot filter operate snapshotmetadata await processing recover method wait replayed message sent processor via wait replayed event message processed processor however new message sent registered processor recover successfully returned processed replayed event message application want wait processor complete processing replayed event message use awaitprocessing method eventsourcingextension val extension eventsourcingextension extensionrecover extensionawaitprocessing useful situation eventsourced processor maintain state via stm reference application want ensure externally visible state fully recovered accepting new read request client application default awaitprocessing method wait registered processor complete processing application also specify subset registered processor nonblocking recovery recover awaitprocessing method block calling thread may convenient scenario main thread want recover state eventsourced application taking action scenario example recovery done individual child processor channel inside actor see orderexamplereliablescala nonblocking recovery api used val extension eventsourcingextension val future extensionreplay extensiondeliver optional extensioncompleteprocessing optional yield future onsuccess case eventsourced processor ready use future returned replay deliver completeprocessing monadically composed forcomprehension ensures sequential execution corresponding asynchronous operation composite future completes recovered processor channel ready use detail api doc replay method also parameterized replayparams sequence see section replay parameter channel recovery usage channel even used application immediately creation ie activating especially important eventsourced parent processor create new eventsourced child processor handling event class parent extends actor receiver eventsourced import contextdispatcher var child option actorref none def receive case event create child processor wrapped channel childisempty child createchildprocessor channel used immediately childforeach messagecopy def createchildprocessor pid int cid int actorref implicit val recoverytimeout timeout second val childprocessor extensionprocessorof prop new child receiver eventsourced val id pid val childchannel extensionchannelof defaultchannelprops cid childprocessor asynchronous nonblocking recovery extensionreplay seq replayparams pid extensiondeliver cid yield childchannel class child extends actor receiver def receive case event confirm parent lazily creates new childprocessor wrapped default channel receiving event childchannel used parent immediately creation ie concurrently childprocessor message replay childchannel activation possible channel internally buffer new message activation delivers destination activation ensures new message delivered childprocessor childchannel activated parent recovery childchannel ignore message already successfully delivered childactor ie confirmed childactor state dependency behavior eventsourced processor may depend state eventsourced processor example processor sends message processor b processor b reply message includes part processor b state depending state value included reply processor may take different action ensure proper recovery setup stateconveying statedependent message exchanged processor b must type message see also dependentstaterecoveryspecscala exchanging state via nonjournaled message ie message type message break consistent recovery also case eventsourced processor maintains state via externally visible stm reference another eventsourced processor directly read reference communication eventsourced processor closely related external query external update snapshot snapshot represent processor state certain point time dramatically reduce recovery time snapshot capturing saving triggered application delete entry event message history unless explicitly requested application application create snapshot sending eventsourced processor snapshotrequest message scala api snapshotrequestget message java api scala import orgeligosourceeventsourcedcore val processor actorref processor snapshotrequest java import orgeligosourceeventsourcedcore final actorref processor processortell snapshotrequestget asynchronously capture save snapshot processor state sender notified snapshot successfully saved scala processor snapshotrequest mapto snapshotsaved oncomplete case success snapshotsaved processorid sequencenr timestamp case failure e java ask processor snapshotrequestget mapto utilclasstag snapshotsavedclass oncomplete new oncomplete snapshotsaved public void oncomplete throwable failure snapshotsaved result failure null else systemdispatcher alternatively application may also use eventsourcingextensionsnapshot method trigger snapshot creation example scala val extension eventsourcingextension extensionsnapshot set oncomplete case success snapshotsavedset set snapshotsaved case failure java set integer processorids new hashset integer processoridsadd processoridsadd extensionsnapshot processorids new timeout oncomplete new oncomplete set snapshotsaved public void oncomplete throwable failure set snapshotsaved snapshotsavedset failure null else systemdispatcher creates snapshot processor id returned future type future scalaimmutableset snapshotsaved scala api future javautilset snapshotsaved java api successfully completes snapshot processor successfully saved participate snapshot capturing processor must process snapshotrequest message calling process method current state argument scala class processor extends actor var state def receive case sr snapshotrequest srprocess state java public class processor extends untypedeventsourcedactor private object state override public void onreceive object message throw exception message instanceof snapshotrequest snapshotrequest sr snapshotrequest message srprocess state getcontext calling process asynchronously save state argument together generated snapshot metadata creating new snapshot delete older snapshot unless explicitly requested application hence n snapshot per processor example demonstrates snapshot creation snapshot based recovery contained snapshotexamplescala snapshotexamplejava executed sbt prompt scala project eventsourcedexamples runmain orgeligosourceeventsourcedexamplesnapshotexample java project eventsourcedexamples runmain orgeligosourceeventsourcedexamplejapisnapshotexample configuration snapshotting supported journal via hadoop filesystem abstraction default filesystem instance local filesystem ie snapshot default written locally unless configured otherwise application please refer hadoop documentation create filesystem instance hdfs ftp etc applicationdefined filesystem instance configured following way scala import orgapachehadoopfsfilesystem val hdfs filesystem filesystemget val journal actorref leveldbjournalprops snapshotfilesystem hdfs createjournal java import orgapachehadoopfsfilesystem final filesystem hdfs filesystemget final actorref journal leveldbjournalpropscreate withsnapshotfilesystem hdfs createjournal system find hadoopfilesystemsnapshottingprops api doc behavior change actor modified stackable receiver emitter andor eventsourced trait scala api extend abstract untyped base class java api change behavior method become unbecome defined behavior trait receiver emitter eventsourced inherit actor change behavior become unbecome keep functionality introduced stackable receiver emitter andor eventsourced trait example actor modified eventsourced trait scala api extends untypedeventsourcedactor java api continue journal event message changed behavior become hand actor change behavior contextbecome scala api getcontext become java api loose functionality introduced stackable receiver emitter andor eventsourced trait although lost behavior recovered contextunbecome getcontext unbecome event series processor derives one output event message single input event message emits output message single channel generates series event message event message series event processor set ack field last emitted message false class processor channel actorref extends actor def receive case msg message channel msgcopy event event ack false message series channel msgcopy event event ack false message series channel msgcopy event event n last message series processor use emitter following way class processor extends actor emitter def receive case event emitter channelname send msg msgcopy event event ack false message series emitter channelname send msg msgcopy event event ack false message series emitter channelname sendevent event n ensures acknowledgement written journal last message series successfully destination however confirm receipt every event message regardless whether belongs series idempotency certain failure condition channel may deliver event message destination typical example destination positively confirms message receipt application crash shortly confirmation written journal case destination receive event message recovery also reason channel destination must idempotent event message consumer applicationlevel concern example event message consumer store received purchase order map map key order id likely idempotent consumer receiving purchase order several time lead result purchase order contained map event message consumer count number received purchase order idempotent consumer redelivery lead wrong counter value business logic perspective case event message consumer must implement extra mean detect event message duplicate detecting duplicate application use identifier event identifier value set eventsourced processor event emitted via channel channel destination downstream consumer keep track identifier successfully processed event compare identifier newly received event newly received event already known identifier considered duplicate assuming emitting processor generates unique identifier generating unique identifier processor use sequence number received event message case class myevent detail eventid long class processor extends actor emitter eventsourced def receive case event get sequence number current event message val snr long sequencenr val detail emitter channelname sendevent myevent detail snr using sequence number advantage consumer emitted event need remember identifier last successfully consumed event identifier newly received event le equal last consumed event duplicate therefore ignored class consumer extends actor var lasteventid def receive case myevent detail eventid eventid lasteventid duplicate else lasteventid eventid consumer eventsourced processor store event identifier part state recovered event message replay consumer must store identifier somewhere else processor emit event message series use event message index addition sequence number uniquely identify emitted event case class myevent detail eventid long int class processor extends actor emitter eventsourced def receive case event get sequence number current event message val snr long sequencenr val detail seq emitter channelname send msg msgcopy event myevent detail snr ack false emitter channelname send msg msgcopy event myevent detail snr ack false consumer compare sequence number index pair detecting duplicate serialization application configure custom serializers event event message custom serializers used writing event journal remote communication configured like akka serializer example akka actor serializers custom examplemyeventserializer serializationbindings examplemyevent custom examplemyevent applicationspecific event type examplemyeventserializer applicationspecific serializer extends akkaserializationserializer import akkaserializationserializer class customeventserializer extends serializer def identifier def includemanifest true def tobinary anyref def frombinary byte array byte manifest option class event message serialized preconfigured libraryspecific serializer serializer automatically used event message eventsourcedjournalcommon jar classpath akka application example order management order management example section taken martin fowler great lmax article imagine making order jelly bean credit card simple retailing system would take order information use credit card validation service check credit card number confirm order within single operation thread processing order would block waiting credit card checked block would nt long user server always run another thread processor waiting lmax architecture would split operation two first operation would capture order information finish outputting event credit card validation requested credit card company business logic processor would carry processing event customer received creditcardvalidated event input event stream processing event would carry confirmation task order implemented eventsourced library shown following diagram legend appendix implement mentioned business logic processor processor eventsourced actor orderprocessor process ordersubmitted event assigning submitted order id storing map state orderprocessor every submitted order emits creditcardvalidationrequested event creditcardvalidationrequested event processed creditcardvalidator actor contact external credit card validation service sends creditcardvalidated event back orderprocessor every order valid credit card number example implementation wo nt actually use external service keep implementation simple realworld implementation akkacamel would perfect fit receiving creditcardvalidated event eventsourced orderprocessor update status corresponding order validated true sends orderaccepted event containing updated order destination also reply updated order initial sender order domain object domain event orderprocessor defined follows domain object case class order id int detail string validated boolean false creditcardnumber string domain event case class ordersubmitted order order case class orderaccepted order order case class creditcardvalidationrequested order order case class creditcardvalidated orderid int eventsourced order processor class orderprocessor extends actor emitter var order mapempty int order processor state def receive case ordersubmitted order val id orderssize val upd ordercopy id id order order id upd emitter validationrequests forwardevent creditcardvalidationrequested upd case creditcardvalidated orderid ordersget orderid foreach order val upd ordercopy validated true order order orderid upd sender upd emitter acceptedorders sendevent orderaccepted upd orderprocessor us message emitter send creditcardvalidationrequested event creditcardvalidator via named validationrequests channel forwardevent method sends event also forward initial sender reference upon receiving creditcardvalidationrequested event creditcardvalidator run credit card validation background sends creditcardvalidated event back orderprocessor class creditcardvalidator orderprocessor actorref extends actor receiver def receive case creditcardvalidationrequested order val sdr sender initial sender val msg message current event message future credit card validation send back successful validation result preserving initial sender orderprocessor tell msgcopy event creditcardvalidated orderid sdr creditcardvalidator forward initial sender reference finally enables orderprocessor reply initial sender receives creditcardvalidated event orderprocessor also sends orderaccepted event destination via named acceptedorders channel class destination extends actor def receive case event println received event format event next step wire collaborator recover val extension eventsourcingextension val processor extensionprocessorof prop new orderprocessor emitter confirm eventsourced val id val validator systemactorof prop new creditcardvalidator processor receiver val destination systemactorof prop new destination receiver confirm extensionchannelof reliablechannelprops validator withname validationrequests extensionchannelof defaultchannelprops destination withname acceptedorders extensionrecover named validation request channel reliable channel redelivers creditcardvalidationrequested event case creditcardvalidator failure example external credit card validation service temporarily unavailable furthermore noted creditcardvalidator confirm event message delivery neither call confirm explicitly modified confirm trait instantiation delivery confirmation take place orderprocessor successfully processed creditcardvalidated event order processor ready receive ordersubmitted event processor message ordersubmitted order detail jelly bean creditcardnumber onsuccess case order order println received response format order running example empty journal write received response order jelly bean received event orderaccepted order jelly bean stdout may observe different line ordering running example submitted order assigned id corresponds initial size orderprocessor order map second application run first recover previous application state another order submission generate order id received response order jelly bean received event orderaccepted order jelly bean example code contained orderexamplescala executed sbt prompt project eventsourcedexamples runmain orgeligosourceeventsourcedexampleorderexample advanced version example using reliable requestreply channel discussed event sourcing external service integration state machine change since akka eventsourcing akka fsms pretty easy following state machine example door one two state open closed sealed trait doorstate case object open extends doorstate case object closed extends doorstate case class doormoved state doorstate time int case class doornotmoved state doorstate cmd string case class notsupported cmd class door extends actor fsm doorstate int emitter startwith closed closed case event open counter emit doormoved open counter goto open using counter open case event close counter emit doormoved closed counter goto closed using counter whenunhandled case event cmd open close counter emit doornotmoved statename door format cmd stay case event cmd counter emit notsupported cmd stay def emit event emitter destination forwardevent event state change door emits doormoved event named destination channel doormoved event contain door current state number move far invalid attempt move door eg trying open opened door doornotmoved event emitted channel destination actor simply print received event stdout class destination extends actor def receive case event println received event format event configuring application val system actorsystem val extension eventsourcingextension val destination systemactorof prop new destination receiver confirm extensionchannelof defaultchannelprops destination withname destination extensionprocessorof prop new door emitter eventsourced val id extensionrecover val door extensionprocessors start sending event message door door message open door message close write received event doormoved received event doormoved stdout trying attempt invalid state change destination receive doornotmoved event received event doornotmoved closed close door restarting example application recover door state door message open door message close produce received event doormoved received event doormoved code section contained slightly modified form fsmexamplescala clustering section make door state machine previous example highlyavailable akka cluster door state machine clusterwide singleton managed nodeactors one nodeactor per cluster node listening cluster event nodeactor becomes master leader creates recovers door instance nodeactors obtain remote reference door instance master client interact door singleton via nodeactors sending door command open close nodeactors accept command cluster node master nodeactor forward command door command message event message emitted door sent remote destination actor via named destination channel destination creates response received event sends response back initial sender application run destination actor part cluster standalone remote application also host journal used cluster node spof example later version use distributed journal master crash another node cluster becomes master recovers door state machine remaining slave node renews remote reference door instance new master code section contained clusterexamplescala configuration file used journalconf clusterconf detailed description example code refer code comment run distributed example application sbt first start application host destination actor journal runmain orgeligosourceeventsourcedexampledestinationapp start first seed node cluster runmain orgeligosourceeventsourcedexamplenodeapp second seed node runmain orgeligosourceeventsourcedexamplenodeapp finally third cluster node runmain orgeligosourceeventsourcedexamplenodeapp command require eventsourcedexamples project switch via project eventsourcedexamples likely first seed node become master writes master recovered door akka node stdout node become slave write slave referenced door akka node stdout node prompt user enter door command command openclose enter command last started cluster node slave node door singleton initially closed state entering open open command openclose open moved time door open close command openclose close moved time door closed trying close closed door result error command openclose close close door door closed kill master node ctrlc also destroy door singleton second new master determined cluster new master going recover eventsourced door singleton slave renew remote reference door verify door properly recovered open door command openclose open moved time door open see door state contains number past move properly failedover miscellaneous multicast processor multicast processor predefined eventsourced processor forward received event message multiple target using multicast processor n target optimization n eventsourced processor receive event message using multicast processor received event message journaled whereas n eventsourced processor message would journaled n time processor using multicast processor large number target therefore significantly save disk space increase throughput application create multicast processor multicast factory method defined package core import orgeligosourceeventsourcedcore val extension eventsourcingextension val processorid int val actorref val actorref val multicast extensionprocessorof prop multicast processorid list equivalent val multicast extensionprocessorof prop new multicast list identity eventsourced val id processorid application want modify received event message forwarded target specify transformer function val transformer message msg msgevent val multicast extensionprocessorof prop multicast list transformer example transformer function extract event received event message transformer function specified default identity function another multicast factory method decorator method creating multicast processor single target retroactive change todo appendix legend appendix b project appendix c article appendix support
335,Lobsters,scala,Scala programming,Papa Carlo — Scala library for contructing incremental parsers,http://lakhin.com/projects/papa-carlo/,papa carlo scala library contructing incremental parser,demo page incremental parsing automatic ast construction errorrecovery mechanism language definition using dsl scala peg grammar expression parsing pratt algorithm published github apache public license sonatype maven central abstract syntax tree json parser abstract syntax tree slotsignal model lexer tokenizer tokencollection fragmentcontroller contextualizer syntax node finitestate machine math expression parser matcher json parser json parser example abstract syntax tree node class kind begin end id branch reference api parsing expression grammar syntax json json language json parser operator peg error recovery mechanism packract memoization skipping failed syntax rule fragmentcontroller json parser fragment specification binary tree calculator example python operator precedence table pratt algorithm source code directory scalatests prepared source code file prototype log utils directory parserspec test spec json file srctestresourcesfixturescalculatorexpressionsinput srctestresourcesfixturescalculatorexpressionsprototype token fragment cache node error,constructor incremental parser scala using peg grammar papa carlo designed construct programming language parser may used wide range code editor simple syntax highlighter fullfeatured ides like eclipse intellij idea please visit demo page see incremental parser action key feature incremental parsing parsing performance always proportional change end user make source code even source code consists thousand line automatic ast construction rule action needed construct abstract syntax tree represents source code structure parser build ast box errorrecovery mechanism parser recognise source code even code contains syntax error language definition using dsl scala external file needed developer define parser using library api scala code peg grammar modern easy understand language definition grammar expression parsing pratt algorithm complicated expression syntax number unarybinary precedence operator defined line code project published github term apache public license library build artifact hosted sonatype maven central remote repository ready use sbt based project support development programming language code editor ides quite complicated problem modern ides like eclipse visual studio intellij idea provide enduser number handy code manipulation feature code completion refactoring jumptodefinition even semantic analysis heart system specific code parser different ordinary parser designed programming language compiler parser able build internal objectbased representation ast source code may contain syntax error keep representation touch source code user make change parser quickly regardless size source code unfortunately lack tool build parser type existing parser generator like yacc antlr combinators like scala parser combinator nt provide feature described resulting parser designed parse whole file approach well suitable ordinary compiler code editor usually developer language support plugins ides need develop le manually papa carlo made resolve problem another goal library providing easy use toolkit number handy feature box language parser developer usually need papa carlo accomplishes user defines programming language specification using papa carlo api directly scala code approach close one using many modern parser combinators resulting parser build abstract syntax tree box rule action needed parser efficiently recover syntax error build parsing result incomplete code important papa carlo cache parsing result small source code fragment parse file incrementally user edits without significant performance penalty also important mention papa carlo fit well interested development standalone programming language compiler able parse large amount file thousand source code line speed vital probably look something different example parser generator like antlr due papa carlo builtin feature nature like caching error recovering performance may good startup parser generated antlr let look example json parser usually parser consists three main component language lexis specification language syntax specification fragment specification caching described later detail normally parser define one scala file structure like object json private def tokenizer val tokenizer new tokenizer import tokenizer import matcher tokenizer private def contextualizer val contextualizer new contextualizer import contextualizer contextualizer def lexer new lexer tokenizer contextualizer def syntax lexer lexer new val syntax new syntax lexer import syntax import rule syntax val lexer jsonlexer val syntax jsonsyntax lexer syntaxonnodemergebind node println nodeprettyprint lexerinput x hello world fact need obtain fullfeature incremental parser easy pie nt really need know parser work nutshell build one knowledge internal process may improve understanding papa carlo top level api text data come lexer passing several transformation stage finally becomes objectbased hierarchical structure called abstract syntax tree component responsible performing specific stage softly connected component previous stage connection component based slotsignal model component public signal field could subscribed appropriate anonymous function technique also could useful thing debug individual stage parser development particularly papa carlo functional test use signal build parser log test case source code data practically entered parser continuously end user change source code component parser use result got previous entering phase order optimise process parsing next phase called incremental parsing essential feature papa carlo stage component responsible handling stage selecting part code different source code parsed lexer splitting part line lexer splitting line token tokenizer replacing part exist token previous phase new token tokencollection splitting token contextual fragment fragmentcontroller contextualizer parsing fragment using syntax rule syntax building abstract syntax tree based node fragment replace appropriate branch exist tree updated branch syntax sound quite complicated fortunately time developer nt need work stuff papa carlo take hard work side developer need specifying parsing rule tokenizer contextualizer syntax using prepared easy use api time describe api first parsing stage source code splitted small piece token value classified group token kind example code x parsed following sequence token kind value skip open brace string x colon whitespace number close brace syntax parsing rule applied token kind value token flagged skippable ignored syntax parser first step need define token category parsing rule match character sequence produce token appropriate kind rule representing finitestate machine nutshell also seen regular expression defined combination function example tokenizer math expression parser private def tokenizer val tokenizer new tokenizer import tokenizer import matcher tokencategory whitespace oneormore anyof tfn skip tokencategory number choice chunk sequence rangeof zeroormore rangeof terminal tokenizer two token category defined whitespace space valuable token number valuable token whitespace token category marked skippable skip method one familiar regular expression table translation papa carlo matcher regexp rule papa carlo matcher similar regexp description zeroormore x x repetition x oneormore x x repetition x least one time optional x x repetition x one time max repeat x x repetition x exactly time anyof xyz xyz character given string anyexceptof xyz xyz character one given string character rangeof x xy character character x chunk foobar foobar match given string test x predicate check whether matcher x applied nt perform actual application testnot x predicate check whether matcher x applied sequence x z x z sequence rule choice x z xyz ordered choice rule contrast regular expression rule applied preceded failed except generic token category described also important way define static category whose name value equal two kind category terminal keywords terminal defined like tokenizerterminals terminal similar appropriate generic token category tokenizertokencategory chunk tokenizertokencategory chunk tokenizertokencategory chunk keyword definition api similar terminal tokenizerkeywords def class private work different way keyword rule trying turn kind token produced tokencategory rule token value match keyword name let look example json parser tokencategory alphanum oneormore rangeof z keywords true false null string like abctrue cdenull parsed alphanum true whitespace alphanum null whereas string abctruecdenull parsed alphanum alphanum null string truecde contains substring true nt match turned independent keyword token another thing mentioned tokenization process importance order token category definition token category rule applied order definition important careful rule token could substring another token example terminal rule like tokenizerterminals parse text substring described two independent token order fix terminal definition order changed tokenizerterminals input string parsed expected syntax parsing stage parser selects simple syntactical fragment pair specific token us fragment perform parsing result caching syntax parsing stage fragment example code block token c maybe function definition keywords def end ruby programming language usually pair main property fragment meaning specific syntax rule applied context language syntax invariant content let illustrate example java snippet public class fibcalculator public static int fibonacci int fibindex memoizedcontainskey fibindex return memoizedget fibindex else int answer fibonacci fibindex fibonacci fibindex memoizedput fibindex answer return answer four code fragment curly brace class body method body success branch conditional operator failed branch operator fragment remain type regardless internal content method body remain method body even programmer add another one code statement even writes something syntactically incorrect course meaning nested fragment may potentially change depending change made parent fragment nt make sense summarise papa carlo need developer define fragment code following property could simply determined code sequence two token syntactical meaning invariant internal content least case normally expected code contains lot fragment fortunately modern programming language meet requirement defining fragment extremely simple done json parser example private def contextualizer val contextualizer new contextualizer import contextualizer trackcontext allowcaching trackcontext allowcaching contextualizer calling allowcaching method indicates fragment kind may potentially bound cached part resulting abstract syntax tree caching process described detail next topic another useful point fragment changing token flag example possible define specific fragment completely ignored syntax parsing might useful define code comment trackcontext forceskiptopcontext trackcontext quot quot topcontext definition two fragment type first code comment comment ignored second string literal potentially multiline string method forseskip indicates token ignored topcontext method indicates could fragment nested example first closed curly brace token string x abc def considered ending token curlybrace fragment similar parsing stage utilising caching approach fragmentation stage exception computational effort parser requires update fragment system proportional change source code made enduser practice building fragment quite fast process moreover parser able determine invalid fragment missing opened closed token keep valid touch example modified java snippet public class fibcalculator public static int fibonacci int fibindex memoizedcontainskey fibindex return memoizedget fibindex else int answer fibonacci fibindex fibonacci fibindex memoizedput fibindex answer return answer damaged line parser able still track fragment class body method body even conditional operator successbranch code block final result parsing process building hierarchical object representation source code abstract syntax tree node class ast following main property kind string name node category usually name rule build node begin end first last token source code segment represented node id global unique identifier node node ast may obtained using identifier branch multimap child node branch node string tag usually branch unique tag sometimes one tag may refer several branch example node representing json array may sequence child node representing array element child node refer element tag branch may read current node getbranches tag string method reference multimap selected token source code node sometimes may useful select specific token source order simplify process ast semantic analysis multimap forming similarly branch multimap token read getvalue tag string method result method string tagged token value joined together syntax parser responsible creating removing building whole ast usually developer nt need care manual operation node however papa carlo provides way override default node construction behaviour technique described next chapter api define actual syntax parser developer need decompose programming language syntax named rule rule par specific code construction responsible building appropriate ast node code construction rule form programming language grammar parsing expression grammar class rule defined using method instance syntax class rule rulename string rulebody rule rule build node kind rulename rule represents toplevel node ast hierarchy defined mainrule method instead reference returned rule definition method used refer rule rule hence rule refer forming graph rule note rule body defined lazy fashion safe define circular reference json example jsonobject refers objectentry objectentry refers jsonvalue jsonvalue refers jsonobject remember syntax rule applied token nt marked skipped thus whitespaces line break comment ignored default regarding language lexical specification approach simplifies syntax rule definition developer take care meaningful token example syntax rule parsing array construction json language val jsonarray rule array sequence token zeroormore branch value jsonvalue separator recover token array entry must separated sign recover token array must end sign full example found json parser operator likewise lexical rule syntactical rule body defined composing builtin primitive rule primitive rule fact representing peg operator token matcher operator operator description token x match token x kind tokensuntil x match token starting current position x token met x included composition operator operator description optional x matcher subrule x zero one time zeroormore x separator optionally match subrule x multiple time code piece matched subrule x may divided another piece code defined optional separator parameter oneormore x separator match subrule x zero time x separator meaning like zeroormore method repeat x match x repeated exactly time sequence x z match sequence rule choice x z ordered choice rule match next subrule preceded failed node construction operator operator description capture tag x match x writes token matched x node reference tagged tag string branch tag x force subrules x write resulting node current node branch multimap using key multimap key note capture branch rule includes rule fail constructing node reference branch multimaps reverted respectively initial state like would nt applied miscellaneous operator description name label x convenient way reuse composite syntax rule may useful refer rule multimple time instead duplicating code contrast rule mainrule method name define rule constructor simply return nested rule result note contrast rule mainrule method x defined eagerly therefore named rule refer cyclically recover x exception allows subrule x possibly recovered error message exception expression tag atom defines expression parsing rule constructor tag optional parameter bind toplevel node expression node subtree current node branch multimap error recovery mechanism parser made papa carlo able recover syntax error two technique erasing mismatched token skipping missed required token first one designed avoid part source code recognized parser completely inappropriate place second parse code part contains syntax error still recognized meaningful example block code b dosmthng missed closing brace still recognized operator block first way provided parser box parser nt reach token code fragment temporary remove leftmost unreached token like marked skipped run parsing process beginning code fragment fortunately papa carlo parser us packract memoization running parser fragment code nt lead performance issue acquire advantage second way developer manually specify syntax rule potentially skipped case fail skipping failed syntax rule application syntax rule whether primitive operator named rule defined rule mainrule method produce one following matching result matching successful syntax error token matching crucial called recoverable result application completely fails nonrecoverable result second third result produce syntax error message read using geterrors method syntax class first second result interpreted parent rule successful example sequence x z considered failed one subrules completely fails case nested rule finish recoverable result failed subrules parent rule return recoverable result mark rule potentially skipped content recoverable developer need wrap rule operator recover subrule errormessage operator never fail nested subrule failed whole composition finish recoverable recover rule produce syntax error current position error message defined errormessage parameter recommended use technique recover missing control token like semicolon end statement colon list element missing closed token like etc note important overuse recovery mechanism especially case missing token may completely change meaning code construction produce grammar ambiguity example closing parenthesis operator condition java crucial recognize whole construction b dosomething starting brace operator block vital otherwise every single statement operator recognized operator block missing starting brace syntax parsing rule fact applied source code fragment whole code fragmentcontroller responsible determine fragment invalidated user make change source code notifies syntax parser fragment syntax parser looking cachable named rule applied fragment last time applied rule example failed last time marked cachable parser chooses enclosing fragment match requirement also parsing process syntax parser reuses ast node bound nested fragment affected change source code instead parsing fragment always exist one toplevel root fragment cover whole source code main rule defined mainrule method toplevel ast node fragment parsed fragmentcontroller syntax parser use root fragment default parse whole file papa carlo caching mechanism performed mark syntax rule intended potentially cached use cachable method syntax class example json parser cachable jsonobject jsonarray note appropriate code fragment must also marked cachable fragment specification trackcontext allowcaching trackcontext allowcaching classical parsing expression grammar approach define expression infixpostfixprefix operator like offer use rule like value atomicoperand expression product expression expression sum expression expression expression product sum value simple case described pseudocode look pretty simple real programming language number various operator grammar could much complicated appropriate rule implemented accordance operator precedence associativity moreover usually compiler need node form binary tree additional step reformat resulting tree binary form required reduce complexity papa carlo provide builder operatorprecedebce parsing rule easy use api output node result rule form binary tree default calculator example mainrule expression val rule expression branch operand recover number operand required group rule postfix rule prefix rule prefix rule infix rule infix rule rightassociativity true infix rule infix rule rule expression tag string operand rule method defines expression rule parser tag optional parameter result default meaning tag parameter branch method operand atomic operand expression example math expression parser numeric literal four function used configure parser operator constructor expression example description group expression open close x defines grouping operator infix expression operator precedence x z left associative infix binary operator specific operator precedence infix expression operator precedence rightassociativity true x z right associative infix binary operator specific operator precedence prefix expression operator precedence x prefix unary operator specific operator precedence postfix expression operator precedence x postfix unary operator specific operator precedence order constructor application make sense applied order define expression grammar programming language developer directly translate operator precedence table like python operator precedence table internally parser us pratt algorithm one familiar parsing technique may implement hisher extension postfix operator constructor source code def postfix rule expressionrule operator string precedence int ruleparselet operator leftbindingpower intmaxvalue precedence leftdenotation expression left operatorreference val node new node operator operatorreference operatorreference nodebranches operand list left node brief lowlevel api description parselet method defines new token term pratt algorithm specific operator leftbindingpower defines ldp parameter token leftdenotation defines led handler token nulldenotation defines nud handler token expressionparseright rdp apply parser body led nud handler right part expression specific rdp rightbinding power expressionconsume tokenkind force parser read specific token current position despite fact papa carlo parser usually construct node automatically based defined rule still possible interrupt process specific case apply manual change node even reconfigure whole tree branch developer may call intercept method syntax class val objectentry rule entry sequence capture key token string token branch value jsonvalue intercep objectentry entrynode val accessor new nodeaccessor entrynode accessorsetend entrynodegetbegin entrynode parsing process constructing node id property assigned yet mean syntax track node freely mutated using nodeaccessor class new node also created manually way using nodeaccessor configure three important thing developer keep mind node manual creationmanipulation possible mutate node part final ast node already bound ast become immutable one node instance must one parent word developer bind node instance branch different supernodes syntax rule explicit interception routine support caching number approach debug programming language parser probably best solution artical describes approach used papa carlo test debug example parser could adopted thirdparty parser made papa carlo test directory repository find two functional scalatests example parser test spec load different version prepared source code file listens log various parser component comparing prototype log utils directory contains number called monitor class monitor responsible listening log specific parser component abstract class parserspec ready use prototype configurable test spec utilizes monitor make resulting output log compare appropriate prototype log example test spec calculator parser class calculatorspec extends parserspec name directory contains approppriate resource file json configuration parsername calculator functionconstructor lexical parser lexerconstructor calculatorlexer functionconstructor syntax parser syntaxconstructor calculatorsyntax test spec read configuration detail appropriate json file placed resource dir expression step independentsteps true monitor node error token recovery step independentsteps true monitor node error token configuration list specific test suite option name test suite match name relative resource directory consists input prototype file example input file placed srctestresourcesfixturescalculatorexpressionsinput directory prototype srctestresourcesfixturescalculatorexpressionsprototype directory description possible test suite configuration option option description step number input source code version optional parameter default number file found input directory convention input file put input dir name step n txt n version number starting monitor array monitor string name used suite default monitor turned shortoutput boolean flag indicates whether output log simplified turned default outputfrom number first input file logged preceded input file processed parser log ignored default independentsteps boolean flag indicates whether parser reset input step turned default turning disables incremental parsing feature list provided monitor token log token fragment context useful debug tokenizer fragment specification parser fragment log fragment created deleted invalidated fragmentcontroller cache log fragment appropriate node creationdeletioninvalidation event internal ast caching process node log node creation deletion event syntax parser also ast branch updated called merge parse phase error log syntax error happens syntax parsing step testspec put together monitor output comparing prototype log got appropriate resource file update output file relative output resource dir developer may manually review log output andor update appropriate prototype file using output file
336,Lobsters,scala,Scala programming,Functional Patterns in Domain Modeling - Immutable Aggregates and Functional Updates,http://debasishg.blogspot.com/2014/04/functional-patterns-in-domain-modeling.html,functional pattern domain modeling immutable aggregate functional update,post domain driven design functional update aggregate lens composition lens,last post looked pattern enforces constraint ensure domain object honor domain rule exactly domain object granularity object solution model expose make sense domain user domain model speak language domain may cluster entity modeling various concept domain published abstraction user model others treated implementation artifact best hidden cover published one aggregate domain driven design published abstraction provides single point interaction specific domain concept considering class introduced last post order aggregate encapsulates detail order composed real world well barely example illustration purpose note aggregate consist aggregate eg customer instance within order eric evans book domain driven design provides excellent discussion constitutes aggregate functional update aggregate lens post aggregate fit realm domain driven design post talk use pattern build immutable aggregate immutable data structure offer lot advantage build aggregate ground immutable object algebraic data type adt one pattern build immutable aggregate object primarily coming domain functional programming adts offer powerful technique pattern matching help match value pattern bind variable successful match scala use case class adts give immutable object box case class order orderno string orderdate date customer customer lineitems vector lineitem shipto shipto netordervalue option bigdecimal none status orderstatus placed like good aggregate need provide single point interaction user course access property using accessors case class update update orderno order like val order ocopy orderno neworderno give u copy original order new order nt mutate original order anybody knowledge scala realize becomes pretty clunky deal nested object updation eg case shipto defined follows case class address number string street string city string zip string case class shipto name string address address go order update zip code shipto val shipto abc address monroe street denver scopy address saddresscopy zip really pleasing go bound comprehensibility pretty soon domain model use abstraction called lens updating aggregate layman term lens encapsulated get set combination get extract small part larger whole set transforms larger abstraction smaller part taken parameter case class lens b get b set b naive definition lens scala sophisticated lens design go long way ensure proper abstraction composition scalaz provides one implementation box exploit similarity structure get set generalize lens definition term another abstraction named store happens often functional programming store happens abstract yet another pattern called comonad think comonad inverse monad case curious wondered lens form coalgebras store comonad look paper anyway u mere domain modeler use lens implementation scalaz lens help u update orderstatus within order val orderstatus lenslensu order orderstatus value ocopy status value status use follows val order orderstatusset placed change status field order placed let look compositional property lens help u write readable code functionally updating nested structure composition lensesfirst let define individual lens lens updating shipto order val ordershipto lenslensu order shipto sh ocopy shipto sh shipto lens updating address shipto val shiptoaddress lenslensu shipto address sh add shcopy address add address lens updating city address val addresstocity lenslensu address string add c addcopy city c city compose define lens directly update city shipto belonging order compositionality ftw def ordershiptocity ordershipto andthen shiptoaddress andthen addresstocity updating city shipto order simple expressive val order ordershiptocityset london best part using compositional data structure make domain model implementation readable expressive user api yet aggregate remains immutable let look another use case nested object collection scalaz offer partial lens use composition example build lens update value member within lineitem order lineitem defined case class lineitem item item quantity bigdecimal value option bigdecimal none discount option bigdecimal none order collection lineitems let define lens update value within lineitem val lineitemvalue lenslensu lineitem option bigdecimal l v lcopy value v value compose partial lens help u update specific item within vector note convert lineitemvalue lens partial lens using unary operator lens update value specific lineitem within order def lineitemvalues int lineitemvalue compose vectornthplens use composite lens functionally update value field item vector lineitems using specific business rule lislength foldleft li val li li lineitemvalues set unitprice liitem map liquantity getorelse post saw handle aggregate functionally without inplace mutation keep model pure help u implement domain model sane behavior even concurrent setting without explicit use lock semaphore next post take look use compositional structure make domain model speak ubiquitous language domain another pattern recommended eric evans domain driven design
338,Lobsters,scala,Scala programming,Welcome to Scala 2.11 with Jason Zaugg,https://www.youtube.com/watch?v=ByDPifJMSvQ,welcome scala jason zaugg,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature welcome scala jason zaugg youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature welcome scala jason zaugg youtube
339,Lobsters,scala,Scala programming,The Dark Side of Scala,http://nurkiewicz.github.io/talks/2014/scalar/,dark side scala,compilation error long,compilation error long error c type mismatch error found scalaslickcollectionheterogenoushcons long scalaslickcollectionheterogenoushcons long scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option javasqltimestamp scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons string scalaslickcollectionheterogenoushcons int scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option long scalaslickcollectionheterogenoushcons string scalaslickcollectionheterogenoushcons option scalaslickcollectionheterogenoushcons error required tablesthiscompproposalrawrow error expands scalaslickcollectionheterogenoushcons long scalaslickcollectionheterogenoushcons long scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option javasqltimestamp scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons string scalaslickcollectionheterogenoushcons int scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option string scalaslickcollectionheterogenoushcons option long scalaslickcollectionheterogenoushcons string scalaslickcollectionheterogenoushcons option scalaslickcollectionheterogenoushcons error long long string string string string string string string string string string string string string string javasqltimestamp string string string string string string string string string string string string string string string string int string string string string string string string string string string string string long string long long int int string boolean boolean string string string string string string string string string string string string string string string string string boolean string string string string string string string string string string string string string long string string hnil error source
340,Lobsters,scala,Scala programming,Connect a Scala REPL to running JVM processes without any prior setup,https://github.com/ngocdaothanh/scalive,connect scala repl running jvm process without prior setup,scalive download usage load jar process note nt work scalive work attach api agent known issue play xitrum,scalive tool allows connect scala repl console running oracle sun jvm process without prior setup target process download scala download scala download extract zip file see scalive scalivebat scalalibrary scalacompiler scalareflect correct version jvm process using loaded loaded yet repl console need library work example process already loaded scalalibrary scalacompiler scalareflect nt loaded scalive automatically load version none loaded ie process nt use scala scalive load lastest version directory convenience scala jar file included process us different scala version need manually download corresponding jar internet save directory usage run shell script scalive nix scalivebat window run without argument see list running jvm process id local machine example output jvm process pid display name demosboot quickstartboot connect scala repl console process scalive process id listed like normal scala repl console use updown arrow key navigate console history use tab key completion load jar process scalive automatically load scalalibraryjar scalacompilerjar scalareflectjar scalivejar system classpath want load additional class jar first run repl console load jar system class loader val cl classloadergetsystemclassloaderasinstanceof javaneturlclassloader val jarsearchdirs array dircontainingthejar val jarprefix mylib match mylibxxxjar convenient version number file name scaliveclasspathfindandaddjar cl jarsearchdirs jarprefix trick quit repl console connect target process able use class jar normally note cp nt work scalive work scalive us attach api tell target process load agent inside target progress agent creates repl interpreter tcp server let scalive process connect interact interpreter scalive process act tcp client tcp connection one repl data one tab key completion data similar project known issue simplicity avoid memory leak attachdetach many time scalive support process default system class loader without additional class loader usually standalone jvm process like play xitrum production mode process multiple class loader like tomcat currently supported
341,Lobsters,scala,Scala programming,Scala’s Types of Types,http://ktoso.github.io/scala-types-of-types/,scala type type,unified type system anyref anyval class one public val parameter value class summary limitation value case class extension method extension method extension method implicit conversion target runtime official documentaion section value class mark harrah,value class around scala long time internally used already many time number scala use compiler trick avoid boxing unboxing numeric value int scalaint etc quick reminder let recall array int actual jvm int bytecode happy people jvm runtime type called ton performance implication one word array number fast array reference much ok since know compiler fancy trick avoid boxing ints ints let see feature exposed u end user since scala feature called value class fairly simple apply existing class using simple adding extends anyval class following rule listed bellow familiar anyval might good moment quick refresher looking section unified type system anyref anyval example let implement meter serve wrapper plain int able convert number meter number type foot need class noone understands imperial unit system downside though pay runtime overhead object around int quite byte per instance time using plain meter value project european market value class rescue case class meter value double extends anyval def tofeet foot foot value case class foot value double extends anyval def tometer meter meter value using case value class example technically required although convinient could implement value class using normal class one val parameter instead using case class usually best way go one parameter might ask try avoid wrapping value make sense single value otherwise keep tuple around somewhere get fuzzy quickly loose performance notwrapping anyway remember value class work value although noone said parameter must primitive normal class like fruit person still able avoid wrapping value class time need define value class class one public val parameter extending anyval follow restriction around one parameter primitive anything restriction limitation hand longer list example value class contain field def member extended etc full list indepth example refer scala documentation value class summary limitation ok got meter foot value case class let first examine generated bytecode change normal case class added extends anyval part making meter value class case class scala javap meter public class meter extends javalangobject implement scalaproduct scalaserializable public double value public foot tofeet scala javap meter public class meter extends implement scalaserializable skipping interesting usecase method bytecode generated value class bellow case value class scala javap meter public final class meter extends javalangobject implement scalaproduct scalaserializable public double value public foot tofeet scala javap meter public class meter extends implement scalaserializable public final foot tofeet extension double basically one thing catch attention meter companion class created value class gained new method tofeet extension double foot method instance method meter class take argument tofeet foot generated method marked extension actualy exactly name give method net developer might see headed already goal value class avoid allocate entire value object instead work directly wrapped value stop using instance method would force u instance wrapper meter class instead promoting instance method extension method store companion object meter instead using value double field instance pas double value time calling extension method extension method serve purpose implicit conversion general powerful utility yet better conversion one simple way avoid allocate wrapper object implicit conversion would otherwise use provide added method extension method take route rewriting generated method little take typetobeextended argument example write method added int via implicit conversion target class richint extends anyval value class call force allocation richint instead rewriten richint module tohexstring extension thus avoiding allocation richint let use newly gained knowlage investigate compiler actualy u meter example right next source code write comment explaining compiler actualy generates thus happens run code source code emited bytecode actualy val meter meter store val double mvalue double multiply store val f foot mtofeet call meter module tofeet extension one might expect allocation meter object using value class wrapped value get stored working plain double runtime assignment typechecking still verifies meter instance access value value class name field matter notice runtime operates raw double thus call value method like would usually use plain case class seem calling instance method defined meter fact compiler substituted call extension method call pass value get back foot oh wait foot also defined value class runtime get back plain double sourcecodewise care though nice get performance gain using value class affect code line way basic around extension method value class want read different edgecases around please refer official documentaion section value class mark harrah explains well ton example duplicating effort beyond basic introduction
342,Lobsters,scala,Scala programming,Transitioning to Scala,https://medium.com/p/d1818f25b2b7,transitioning scala,nurun toronto typesafe stack walmart canada new ecommerce platform scala perceived complex advice developer manager thinking making switch scala understand language feature scala level guide impostor syndrome take time afraid study scala impatient programming scala functional programming principle scala typesafe activator principle reactive programming functional programming pattern scala clojure take read online grain salt tony morris scalaz leverage professional service within budget support subscription embrace diversity finagle twitter smoke mdialog set realistic expectation pair programming code review mandatory keep simple everything call ugly code scala one part puzzle reactive programming learning scala make better programmer actually conclusion,late early lead developer nurun toronto digital agency focused ecommerce solution facing pipeline new project nothing spring one hand java realized time quickly explore alternativesworking agency put thing perspective missing contractual deadline java suck going impress client using tool technique used build application back help u build application restarting app server test single line code perfectly acceptable websphere average second restart time considered good opportunity grab coffee pondering mystery line xml configuration file today kind waste put agency developer businessour application longer simple form sitting front database table invaluable tool help u get shit done daily liveswhy typesafe stack implementing past project ruby rail knew want want use another dynamically typed interpreted language another stateful web framework wanted statically typed language compiled java bytecode came healthy ecosystem tool stateless web framework scalability also knew corporate client would require peace mind possible professional support contract reputable vendorthis left choice explore intuitive typesafe stack everything neededwhat started proofofconcept micro ecommerce site internally demonstrate simplicity scala code developer productivity play eventually gained traction became foundation walmart canada new ecommerce platformwhy scala perceived complex scala flexible flexibility come price simplicity right hand scala elegant language much better java biggest challenge transitioning scala anything new rarely technical talented programmer learn new syntax new concept new ide rather change often brings weakness area like process culturetl dr peoplethe rest article scala programming tutorial already plenty qualified scala developer world teach latest trick deepest pool advanced scalawhat follows collection advice geared towards developer team lead manager thinking transitioning team scala advice based personal experience team lead enterprise scala projectadvice developer manager thinking making switch scalascala better hot cup joe understand language featuresevery new scala developer team lead manager read martin odersky scala level guideafter year half fulltime scala development one major enterprise scala project belt afraid rank level scala developer according martin guide used technique defined simply need use majority relatively straightforward task building web application yet use cake pattern learn higherkinded type make bad programmer bring intense symptom impostor syndrome reflects limited amount time life need focus learning give bang buck also play drum guitar take two dance lesson per week drink lot coffee go date time preciouson walmartca project exception combinator parser fold stuck technique shallow end level guide even shallow scala produced significantly better platform predecessor replaced run implementation headache code wrote infinitely maintainable code replaced run significantly faster production scaled perfectly fine black friday boxing day something many javabased ecommerce platform claimisn count make mistake dismissing simple scala lesser scala look trick master level simple closurescollections map filter etcpattern matchingtrait compositionrecursionxml literalsthis way java extra goody new way write expressive maintainable softwaresome technique still fairly easy master pretty important using akka parallel computing library insurmountably hard requiring degree math understand foldsstreams lazy data structuresactorscombinator parsersa pleasant side effect mastering technique become better programmer language work much better javascript developer chance really master closure technique part scala take timea lot scala developer come java looking immediate gratification fully appreciate scala completely different language everything new need practice master scala differentthe good news scala developer fully qualified work typical scala application even providing mentorship junior developer every scala developer need understand advanced purelyfunctional data structure type theory higherkinded typesremember scala programming language professional developer building nextgeneration application take time learn even time afraid studyif java developer strongly recommend exploring scala learning material following order read scala impatient good starting point imperative developer especially exercise still comb original answer refer get stuck somethingread programming scala martin odersky lex spoon bill venners detailed read scala impatient nice go broader view language featuresif possible take coursera functional programming principle scala course coursera us scala explore typesafe activator template online documentation learning material scala sparse compared language better way learn hacking someone else code especially code written talented developer like james wardif possible take coursera principle reactive programming course great resource developer would like explore use scala akka processing large volume dataattend scala meetups learn working programmer using scala read functional programming pattern scala clojure seeing first hand much legible functional style code look compared old imperative style code thirsty learn even functional language haskell bit much begun teaching clojure scala code becoming leaner meaner take read online grain saltincredibly smart developer tony morris creator scalaz come different world world haskell functional programming mathematicshe argues function signature def reverse list list favour function signature def b f b list list b next time see function named think omg unreadable going ask tool perhaps robust familiar comprehend code type algebraic property parametric property exploit beauty scala tony right right wrong simply matter personal team preference prefer reverse day developer tony strive mathematical purity truth strive simplicity readability style likely always differ tony writes library use library build application use scala mind using occasional var coming back later clean travesty somehowever suppose team speaks variety different natural language single language english french german symbolic function name may make perfect sense english verb situation like even alias natural language verb canadian worked application english french verb used throughout assure even le pretty flappy head beady eye sacré bleu unopinionated language scala beautiful free apply style language get way love defining leverage professional service within budgeti lucky enough learn true expert developer nilanjan raychaudhuri roland kuhn typesafe nurun brought design review code review pair programming provided invaluable assistance multiple phase project really boosted confidence level learned new style programmingnot learning functional style scala also learning reactive programming concept also ramping play akka new technology play pun intended huge boost typesafe assistance throughout project gave u confidence always right tracktypesafe email support also outofthisworld responsive support subscription well worth expense within embrace diversitythe scala community truly diverse collection programmer world former java developer like others come world academia selftaught programmer others hold doctorate trying solve business problem tight budget others trying push boundary computing writing application others writing librariesunderstanding respecting everyone community important becoming good developer may seem simple question stackoverflow lead baffling reply require year category theory study understand keep mind scala new language community still finding voice nonacademic programmer move world scala answer question discussion may become little focused application concept rather theory behind conceptsif ever become discouraged look source code library finagle twitter smoke mdialog finagle smoke excellent example practical scala implementation used production environment today scala overthetop set realistic expectationsnew scala developer coming java accept fact learn advanced functional scala overnight advanced functional scala required successful typical business application programmingnew scala developer coming functional background easier time adjusting scala naturally promotes functional style however experienced functional programmer tailor style working team mostly imperative programmersit team balance making sure code write maintainable people responsible elegant code world useless pair programming code review mandatorypair programming almost essential make sure scala code become divergent average skill set style team whole last thing want code advanced mere mortal touch single functional programmer going tangent rewriting perfectly working imperative code team whole ready leap experimentation important git fork baby forkbecause flexibility scala easy slip edge complexity unfamiliar territory developer start unlock expressive power scala explore new language featuresculture always important development team extra important new scala team move together tandem first keep simplescala new people still learning language feature use language feature avoid douglas crockford master scala writes scala good part development team left figure value proposition language feature right wrong trial error afraid question make sensewhen reflection api first introduced java every java developer wanted flex intellectual prowess use reflection everything lead portion codebase working time complete maintenance nightmare reason single rogue developer going postal overusing feature understand better start slowly write clean simple scala dipping toe every obscure language feature rather work clean imperative style scala mishmash poorly implemented advanced technique dayavoid deep end scala ready take timejust like good music good code elegant sparse good food made high quality ingredient nobody want eat plate full mush every spice imaginable write code like confident level scala developer write easier maintain code someone arbitrarily writing level code understand call ugly codeit possible write extremely ugly scala like also possible write extremely ugly java extremely ugly perl extremely ugly englishthere one major difference ugly java ugly scala howeverugly scala may ugly many different way may ugly imperative scala may ugly functional scala may ugly mishmash may ugly way understand yet written style still unfamiliar scala new yet possible instantly spot antipatterns like mature language like java lead team developer mistaking ugly code beautiful code beautiful code ugly code developer may begin emulate ugly pattern learn lead even uglier code future vicious feedback loop beginsit better avoid altogether rather try fix laterif see brilliant developer write ugly scala call ask question assume new language anything offer worst case scenario wrong code questioning elegant understand scala one part puzzlethe way web application developed much different today decade ago currently working scala play angularjs mongodb app bulk work clientside past year written angular scala bad thing realitythe beauty scala write clean stable well performing serverside code avoiding ugly boilerplate java brittleness dynamic interpreted language like ruby spend time writing clientside code confidence serverside logic implemented scala bulletproof ready rock need itas much would like become grandmaster thing scala working programmer need stay sharp wide variety technology sas angularjs requirejs sql mongodb etc etc etc etceven time master every aspect single language scala great technology dive reactive programming defacto style development next decade believe scala forefront paradigm shift performance gain scalability benefit reactive application impossible ignorecoasttocoast json replacing bulky xml rest murdering overlycomplicated soa pattern mobile replacing desktop transforming massive amount data actual knowledge made possible performance akka without investing ridiculous amount hardwarescala one part puzzle heart many puzzle piece coming together create new breed learning scala make better programmerit rare corporate developer really stretch last time learned totally different approach software development last major shift major shift witnessed career migration procedural language oo language lucky enough work one first java application canadian bank interned cibc developer worked excobol c programmer took leap faith try something different heat java get today time java practical deploy thick client window alongside programmer year experience actually programmed punch card valuable learning experience made realize stick one style programming forever learned java also maintain jcl dig old cobol assembly code month coming back java kept thing perspective jcl cobol sexy job designed time intern spent exploring everything smalltalk excel excel first experience functional programming scala catch lot unwarranted flack rather stretch developer short attention span lash run away familiar language fine problem leave trail online discouragement wake unfair scala language make interested developer question value languageif read something discouraging scala try learn wrote may different requirement easily swayed anything challenging bound discourage people explore success story scala becoming commonconclusionscala technical investment also investment culture reward well worth investment anyways working new project need scalable reliable easy maintain simply want stretch programmer scala definitely worth common sense difficult transition seemsremember scala ready enterprise already enterprise
343,Lobsters,scala,Scala programming,Introductory Guide to Akka,http://www.toptal.com/scala/concurrency-and-fault-tolerance-made-easy-an-intro-to-akka,introductory guide akka,challenge concurrent program nodejs akka framework akka scala actor model reactive manifesto actor akka actor system single responsibility principle actor system future gist case class future akka fault tolerance supervisor strategy supervisor strategy custom supervisor strategy location transparency location transparency parting single responsibility principle conclusion scala official akka website,challenge writing concurrent program hard deal thread lock race condition highly errorprone lead code difficult read test maintain many therefore prefer avoid multithreading altogether instead employ singlethreaded process exclusively relying external service database queue etc handle needed concurrent asynchronous operation approach case legitimate alternative many scenario simply viable option many realtime system trading banking application realtime game luxury waiting singlethreaded process complete need answer system compute resourceintensive would take inordinate amount time hour even day case run without introducing parallelization code one fairly common singlethreaded approach widely used nodejs world example use eventbased nonblocking paradigm help performance avoiding context switch lock blocking still address issue using multiple processor concurrently would require launching coordinating multiple independent process mean choice journey deep bowel thread lock race condition order build concurrent application thanks akka framework answer tutorial introduces akka example explores way facilitates simplifies implementation concurrent distributed application akka framework post introduces akka explores way facilitates simplifies implementation concurrent distributed application akka toolkit runtime building highly concurrent distributed fault tolerant application jvm akka written scala language binding provided scala java akka approach handling concurrency based actor model actorbased system everything actor much way everything object objectoriented design key difference though particularly relevant discussion actor model specifically designed architected serve concurrent model whereas objectoriented model specifically scala actor system actor interact share information without presupposition sequentiality mechanism actor share information one another task one another message passing complexity creating scheduling thread receiving dispatching message handling race condition synchronization relegated framework handle transparently akka creates layer actor underlying system actor simply need process message complexity creating scheduling thread receiving dispatching message handling race condition synchronization relegated framework handle transparently akka strictly adheres reactive manifesto reactive application aim replacing traditional multithreaded application architecture satisfies one following requirement eventdriven using actor one write code handle request asynchronously employ nonblocking operation exclusively scalable akka adding node without modify code possible thanks message passing location transparency resilient application encounter error fail point time akka provides supervision fault tolerance strategy facilitate selfhealing system responsive many today high performance rapid response application need give quick feedback user therefore need react event extremely timely manner akka nonblocking messagebased strategy help achieve actor akka actor essentially nothing object receives message take action handle decoupled source message responsibility properly recognize type message received take action accordingly upon receiving message actor may take one following action execute operation performing calculation persisting data calling external web service forward message derived message another actor instantiate new actor forward message alternatively actor may choose ignore message entirely ie may choose inaction deems appropriate implement actor necessary extend akkaactoractor trait implement receive method actor receive method invoked akka message sent actor typical implementation consists pattern matching shown following akka example identify message type react accordingly import akkaactoractor import akkaactorprops import akkaeventlogging class myactor extends actor def receive case value string dosomething value case println received unknown message pattern matching relatively elegant technique handling message tends produce cleaner easiertonavigate code comparable implementation based callback consider example simplistic http requestresponse implementation first let implement using callbackbased paradigm javascript route url function request var query buildquery request dbcall query function dbresponse var wsrequest buildwebservicerequest dbresponse wscall wsrequest function wsresponse sendreply wsresponse let compare patternmatchingbased implementation msg match case httprequest request val query buildquery request dbcall query case dbresponse dbresponse var wsrequest buildwebservicerequest dbresponse wscall dbresponse case wsresponse wsresponse sendreply wsresponse callbackbased javascript code admittedly compact certainly harder read navigate comparison patternmatchingbased code make immediately apparent case considered handled actor system taking complex problem recursively splitting smaller subproblems sound problem solving technique general approach particularly beneficial computer science consistent single responsibility principle tends yield clean modularized code little redundancy relatively easy maintain actorbased design use technique facilitates logical organization actor hierarchical structure known actor system actor system provides infrastructure actor interact one another akka way communicate actor actorref actorref represents reference actor precludes object directly accessing manipulating actor internals state message may sent actor via actorref using one following syntax protocol tell sends message return immediately ask sends message return future representing possible reply actor mailbox incoming message delivered multiple mailbox implementation choose default implementation fifo actor contains many instance variable maintain state processing multiple message akka ensures instance actor run lightweight thread message processed one time way actor state reliably maintained without developer needing explicitly worry synchronization race condition actor provided following useful information performing task via akka actor api sender actorref sender message currently processed context information method relating context within actor running includes example actorof method instantiating new actor supervisionstrategy defines strategy used recovering error self actorref actor akka ensures instance actor run lightweight thread message processed one time way actor state reliably maintained without developer needing explicitly worry synchronization race condition help tie tutorial together let consider simple example counting number word text file purpose akka example decompose problem two subtasks namely child task counting number word single line parent task summing perline word count get total number word file parent actor load line file delegate child actor task counting word line child done send message back parent result parent receive message word count line keep counter total number word entire file return invoker upon completion note akka tutorial code sample provided intended didactic therefore necessarily concern edge condition performance optimization also complete compilable version code sample shown available gist let first look sample implementation child stringcounteractor class case class processstringmsg string string case class stringprocessedmsg word integer class stringcounteractor extends actor def receive case processstringmsg string val wordsinline stringsplit length sender stringprocessedmsg wordsinline case println error message recognized actor simple task consume processstringmsg message containing line text count number word specified line return result sender via stringprocessedmsg message note implemented class use tell method send stringprocessedmsg message ie send message return immediately ok let turn attention parent wordcounteractor class case class startprocessfilemsg class wordcounteractor filename string extends actor private var running false private var totallines private var linesprocessed private var result private var filesender option actorref none def receive case startprocessfilemsg running println used example purpose akka logger used instead println warning duplicate start message received else running true filesender sender save reference process invoker import scalaiosource fromfile filename getlinesforeach line contextactorof prop stringcounteractor processstringmsg line totallines case stringprocessedmsg word result word linesprocessed linesprocessed totallines filesendermap result provide result process invoker case println message recognized many thing going let examine detail note line number referenced discussion follows based code sample first notice name file process passed wordcounteractor constructor line indicates actor used process single file also simplifies coding job developer avoiding need reset state variable running totallines linesprocessed result job done since instance used ie process single file discarded next observe wordcounteractor handle two type message startprocessfilemsg line received external actor initially initiate wordcounteractor received wordcounteractor first check receiving redundant request request redundant wordcounteractor generates warning nothing done line request redundant wordcounteractor store reference sender filesender instance variable note option actorref rather option actor see line actorref needed order later access respond processing final stringprocessedmsg received stringcounteractor child described wordcounteractor read file line file loaded stringcounteractor child created message containing line processed passed line stringprocessedmsg line received child stringcounteractor completes processing line assigned received wordcounteractor increment line counter file line file processed ie totallines linesprocessed equal sends final result original filesender line notice akka sole mechanism interactor communication message passing message thing actor share since actor potentially access message concurrently important immutable order avoid race condition unexpected behavior case class scala regular class provide recursive decomposition mechanism via pattern matching therefore common pas message form case class since immutable default seamlessly integrate pattern matching let conclude example code sample run whole app object sample extends app import akkautiltimeout import scalaconcurrentduration import akkapatternask import akkadispatchexecutioncontexts implicit val ec global override def main args array string val system actorsystem system val actor systemactorof prop new wordcounteractor args implicit val timeout timeout second val future actor startprocessfilemsg futuremap result println total number word result systemshutdown concurrent programming future essentially placeholder object result yet known notice time method used send message way caller use returned future print final result available exit program shutting actorsystem akka fault tolerance supervisor strategy actor system actor supervisor child actor fails handle message suspends child sends message usually form exception supervisor akka supervisor strategy primary straightforward mechanism defining fault tolerant behavior system akka way supervisor reacts handle exception percolate child referred supervisor strategy supervisor strategy primary straightforward mechanism define fault tolerant behavior system message signifying failure reach supervisor take one following action resume child child keeping internal state strategy applied child state corrupted error continue functioning correctly restart child child clearing internal state strategy used opposite scenario one described child state corrupted error necessary reset state used future stop child child permanently strategy employed case error condition believed rectifiable jeopardize rest operation performed completed absence failed child stop escalate error employed supervisor know handle failure escalates supervisor moreover actor decide apply action failed child sibling well two predefined strategy oneforonestrategy applies specified action failed child allforonestrategy applies specified action child simple example using oneforonestrategy import akkaactoroneforonestrategy import akkaactorsupervisorstrategy import scalaconcurrentduration override val supervisorstrategy oneforonestrategy case arithmeticexception resume case nullpointerexception restart case illegalargumentexception stop case exception escalate strategy specified following default strategy employed error initializing actor actor killed actor stopped kind exception actor simply restarted akkasupplied implementation default strategy follows final val defaultstrategy supervisorstrategy def defaultdecider decider case actorinitializationexception stop case actorkilledexception stop case exception restart oneforonestrategy defaultdecider akka allows implementation custom supervisor strategy akka documentation warns caution incorrect implementation may lead problem blocked actor system ie permanently suspended actor location transparency akka architecture support location transparency enabling actor entirely agnostic message receive originated sender message may reside jvm actor separate jvm either running node different node akka enables case handled manner completely transparent actor therefore developer caveat message sent across multiple node must serializable akka architecture support location transparency enabling actor entirely agnostic message receive originated actor system designed run distributed environment without requiring specialized code akka requires presence configuration file applicationconf specifies node send message simple example configuration file akka actor provider akkaremoteremoteactorrefprovider remote transport akkaremotenettynettyremotetransport netty hostname port parting seen akka framework help achieve concurrency high performance however tutorial pointed point keep mind designing implementing system order exploit power akka fullest greatest extent possible actor assigned smallest task possible previously discussed following single responsibility principle actor handle event ie process message asynchronously block otherwise context switch happen adversely affect performance specifically best perform blocking operation io etc future block actor ie case evt blockingcall bad case evt future blockingcall good sure message immutable since actor pas one another running concurrently thread mutable message likely result unexpected behavior since message sent node must serializable important bear mind larger message longer take serialize send deserialize negatively impact performance conclusion akka written scala simplifies facilitates development highlyconcurrent distributed fault tolerant application hiding much complexity developer akka full justice would require much single tutorial hopefully introduction example sufficiently captivating get want read amazon vmware csc example leading company actively using akka visit official akka website learn explore whether akka could right answer project well
345,Lobsters,scala,Scala programming,Using Scala Will Make You Less Productive,http://grundlefleck.github.io/2013/06/23/using-scala-will-make-you-less-productive.html,using scala make le productive,scala experience date programming scala typesafe play framework general experience date tdd solid neckbeard haskell cobol developer still make living lambda functional idiom standard library type inference case class builder pattern miscellaneous good benevolent dictator life martin odersky caremad bad scala compile time xkcdswivelchairswordfighting bad true describing ides overuse operator overloading implicit enrich library shallow enddeep end false dichotomy comfortable really matter typing bottleneck amdahl law programming language comment powered disqus comment powered,uncontrolled study reflect personal experience feel like le productive therefore le productive well qed well think safely tick science check box lengthy post share thought opinion scala moving daytoday coding using cavalcade flawed data logical fallacy biased opinion startling lack citation basic nonsense convince using scala make le productive finish underwhelming unexciting conclusion warned scala experience date first began using scala professionally december prior exposure light reading programming scala odd blog entry occasionally firing repl try example since december worked two project put sixmonth mark project exactly revolutionary single page web apps using typesafe play framework data entry calculation mysql database bigger last list app built smaller average sprawling monolith enterprise point used scala pretend toy app also project around long enough reflect development choice slowly watch unfold month year general experience date developing software professionally whopping year majority java javascript although month clojure development scheduledforbutputonholdforbusinessreasons production application plus also throwing occasional foray bash python whatever need something quick dirty likely throw away nowhere near best developer world nowhere near worst either within java rigorous tdd er fan solid principle proponent minimizing mutability supporter functional technique like static typing like find silly coding mistake early despite attempt cultivate neckbeard experience haskell done listen word say nothing really found mindshare new programming language saved trillion altairian dollar conceiving one true web framework even worked something heard somehow ended reading ramblings suggest probably distracting curing world hunger got lose good scala would take ardent java fanboy claim nothing good scala married java view rosetinted glass defend honour really dog fight language come go cobol developer still make living personally invested disparaging scala funsies course zealot either side going go ahead claim biased agenda good see scala lambda closure whatever want label syntax library support passing function around although technically definition met java anonymous inner class construct would babbling fool concede scala syntax current library support plain better introduction jdk lambda syntax may make interesting comparison scala mile ahead consider predicate x xisinteresting java equivalent contain declaration type x time also likely least line java code even aggressive verticalspacesaving formatting strategy bunch boilerplate live somewhere train brain ignore functional idiom standard library walking hand hand lambda support available scala sdk want take collection element filter property convert result another type mystufffilter x xisinteresting map x tonewthing x right available soon scala land java achieved add library like guava classpath previously mentioned lot noise add anything like functional operation like filter map zip fold like operation seem remember groupby probably traditional name like immutability programming without sideeffects use operation program way today java supplemented guava scala easier syntax easily available type inference lot place scala omit type information val x hello simple example compiler clever cookie realises probably mean val x string hello need bother telling tiny smattering type inference exists java league doubleedged sword ability omit type information omit type information even would useful include care need taken make sure type inference actually helping make code clearer everyone commits chunk code relying type inference forced play game pin tail type first blindfold author spin round couple time expose code written immediately identify type necessary understand going get hit stick candy fall last bit might different game mixed case class bloody love case class couple patent short trollportfolio argue case class provide something sorely lacking java prefer generating constructor getter method forget setter immutability ftw tostring hashcode crazy person like want use static type place state case class make much le painful let explain let say user ui enters information create new todo item database enter name description due date make type name description due date validate input using type representing user enters eg checking due date past saving database id field well many people recommend adding option string field none saved taking advantage power case class appropriate static type first case class newblogentry name string description string duedate datetime validated saved database fetch back becomes instance case class savedblogentry id string name string description string duedate datetime also add field entered directly eg datetime entry created wait hear ask result explosion new class well definitely result case class cheap syntactically snippet code possibly need cheap enough runtime worth field apply object particular point time case class also supply copy method pretty much render builder pattern defunct initially worried shallow copy may result subtle bug somewhere object graph mutable type practice yet observe bias towards immutability mean spend many sleepless night fretting hypothetical world offered choice introducing either lambda case class java may find hard make decision fond case class miscellaneous good go much detail good thing reduced boilerplate general eminently reasonable benevolent dictator life martin odersky considered every time find something really frustrating scala going read blog post forum comment stackoverflow answer scala bdfl generally found stance explanation god damn agreeable keep caremad actor model akka providing simplified concurrency model technically akka actor accessible java well suspect le well supported java community disclaimer looked inter op existing java library joda time great example de facto scala date time library well joda time accessible good good enough actually good hopefully convinced foamymouthed scala hater spent word describing favourite bit give bit credibility bitching moaning way bad scala compile time let get way amount time scala need compile bad xkcdswivelchairswordfighting bad find comic funny found scala true never understood dynamic language guy preferred test static type get point feel like could write test need cover weakness java type system run quicker scala compiler feedback loop important like make small change rerun unit test take second even start running test working big codebase powerful machine considered best ide scala intellij running play well sbt console improves slightly still compile time distractingly long course mentioned despite slow compile time supremely frustrating martin odersky brimming reasonableness describing perhaps time waiting compile use time reread post keep calm ides alluded never realised much giving ide department switching java scala thought well scala statically typed language reason support good keep hearing scala advocate saying ides improving leap bound well might improving terrible necessarily mean result anywhere near good already hear scalaist response ide proof language suck awww poor write getters setter ide tool generate crap faster call bullshit rarely generate code rarely write getters setter nothing see java need ide half much scala implicit conversion coding java good ide mean renaming variable method type anything keyboard shortcut typing new name anything local variable scala even bother ide likely mess instead manually intellij support renaming function accurate javascript scala yes javascript java even think accurate correct case go extracting variable method interface forget mechanic refactoring focus improving readability ask reference type implement interface get pretty accurate answer java reflection module boundary case notwithstanding experience scala either intellij eclipse plugin often revert text search like dynamic language important thing ide offer could argue well name thing right first time design type carefully upfront never need change could argue would dumb point would missing lot time name right first time thing changed type carefully chosen need adapt suit new unforeseen requirement thing changed ide mindlessly clicking way another graphical wizard spit xml config document yet another framework able rename extract important factor keeping soft software ides scala good java bit matter overuse operator overloading yes yes operator overloading allowing symbol method name totally different right much worse still overload comfortable familiar operator like unexpected thing use whole raft unexpected symbol unexpected thing symbol great confer meaning several year school learned many symbol mean meaning seeing bigdecimal xplus drag compared x brilliant use symbol method name let take sbt example using symbol delimit artefact coordinate information unnecessary gratuitous using mean specifically append version scala version dependency slap face principle least astonishment dare say spiteful use symbol method name appears several library working scalaquery akka ironically least friendly scalaz actually get pas book thoroughly laden unfamiliar symbol like pronounced pleasejustletmeusehaskell least serve warning usage symbol fine goal provide library functional concept scala sdk cool de facto standard build tool virtually project need implicit implicit keyword one least favourite scala language construct take implicit parameter example used would function would take argument able drop argument whatever reason could partially apply function argument want leave java typically verbose version class reference instance field method watch functional weenie writhe agony comparison alternatively could create function closed variable scope scala allows implicit parameter mean somewhere code declaration say looking something type foo pas method use invoke method declaration scope actually reference pas method scala compiler look problem lookup opaque hide parameter kinda like bunging threadlocal referencing call stack difficult keep data flow head need pointlessly different passing argument function use case probably likely pretty good one somewhere told implicit canbuildfrom parameter scala collection library solving problem solved way fine make peace gut library using implicit parameter long hide complexity implicit parameter bleed api us come across good yet every example seen hindrance readability yes conversion scala use implicit method take type foo try pas bar compiler tell fix obvious type error first try discover way convert bar foo use instead similarly try invoke method foo exist raising error compiler look around available conversion turn foo something matching method problem similar implicit parameter opaque hidden lookup detracts readability bit implicit conversion kinda sorta look like really neat composition syntax type bar really foo extra method two really enticing enrich library pattern really useful concept easy composition bit legwork help think feature ended use implicit ruin one argument seen favour scala implicit conversion java also conversion like int long scala make available correct scala make available instead needing learn handful weird edgecase ridden confusing conversion java learn every tom dick sally weird edgecase ridden confusion conversion added library boy people like experiment new language like take availability run run right past logical conclusion end zone run end zone like forrest gump except keep running cease forrest gump actually arnold schwarzeneger violently hunted game show format compiler found implicit def torunningman scope think make sense try debugging accidentally silently missed implicit conversion scalaquery dsl shallow enddeep end false dichotomy touted scala allows wade shallow end pool using feature comfortable progress deep end treading water advanced feature pace sound good right realise accident library developer pull shallow end throw straight deep end stand head bubble program comprehension escaping lung cease go bloop soon want production business web application development bunch stuff probably going need example route http request make database call serve html jsonxml write test unless want sink time reimplementing common stuff going reach library help alluded previously people like release library new language also like experiment language feature unless goal project cater scala noobs cram every clever use scala client facing part library point take deep breath hold deeper water capable swimming course use familiar old library java man following idiom dude crusty old java fuddy duddy get bro support like documentation dinosaur way fella know know whaaaa poor stuff get free created time donated volunteer want right perhaps like contribute making better rather whining well argument seem apply castigate java free opensource library pretty much everything handed u without need pay contribute way way really matter given irrefutable scientific evidence scala make le productive many respond fluff opinion many form bias claiming already productive scala fine going go ahead claim really matter anyway course matter scala much concise almost boilerplate think time waste looking getters setter anonymous inner class well experience probably agree typing bottleneck well syntax syntax language something found big factor productivity syntax hurdle jump done kinda move life course hurdle bigger others take skill surmount others frequent require jump often anoynmous inner class pas function around worse lambda final field constructor set worse declaring val class definition getters setter equal hashcode worse case class bottleneck really minor albeit constant annoyance paradigm key functional programming want language understand technique discover useful switching language buy anything wonderful thing standard library yep filter map fold operation collection box nice sdk us option instead null improvement thing nice generally get looking adding library core java yes even library introduce option type consider necessary would suit better deal extra library yes make thing like scala could flick switch levelled scala made compiler fast made tool usable made library sane probably would productive slightly investing finite learning time le effective daytoday limited gain learning syntax library apis lowreturn investment paradigm technique yo amdahl law programming language grahamdahl law name graham see think time variant amdahl law programming language using improved language theoretical limit improvement give overall productivity much time software developer spend stuff language agnostic spend lot time stuff go faster wave wand magic new programming language spend time figuring feature supposed understanding user need exploring edgecases handled name concept make easier next developer understand business logic iterate new feature maintaining backwards compatibility longlived sense maintaining apis also shortlived sense deploy database schema migration downtime appropriate logging monitoring metric needed give u visibility application used well perform performance scaling characteristic design likely measure confident coordinate integrate deliver generally work part team activity common issue spend time remain roughly constant regardless programming language used let say delivering new feature language agnostic activity handsonkeyboardcoding way pure coding think representative nevertheless even using language code twice well still saved overall absolutely way twice good scala java unlikely ever happen better maybe one day push following wind given much effort time spent productive could seems like poor investment particularly piddly diluted grahamdahl law underlying assumption seem better lanuages equates overall improvement think plain wrong conclusion scala make le productive period time get productive probably matter much anyway told conclusion would disappointing yes terser syntax know please love deity get science please enable javascript view comment powered disqus comment powered
346,Lobsters,scala,Scala programming,"Scala vs Idris: Dependent Types, Now and in the Future",http://www.infoq.com/presentations/scala-idris,scala v idris dependent type future,infoq homepage presentation scala v idris dependent type future summary bio conference related sponsored content,infoq homepage presentation scala v idris dependent type future scala v idris dependent type future summary mile sabin edwin brady exemplify done language dependent type limitation could done future dependent type reach maturity bio mile sabin stuff scala precog utmost break scala type checker project shapeless regular speaker scala functional programming event edwin brady lecturer c university st andrew scotland uk research interest include programming language design particular type system domain specific language conference strange loop multidisciplinary conference aim bring together developer thinker building tomorrow technology field emerging language alternative database concurrency distributed system mobile development web recorded dec related sponsored content
348,Lobsters,scala,Scala programming,Type programming: Shifting from values to types,http://proseand.co.nz/2014/02/17/type-programming-shifting-from-values-to-types/,type programming shifting value type,functional programming objectoriented programming procedural programming,casino game phenomenally structured way player keep playing basic nature game nevertheless game appear thin air instead made different code end forming game play code encompassed programming language used create game however programming language share attribute instance wherein different type code needed particular project different type software explained post functional programming type programming based mathematical algorithm executes command declaring certain expression known declaration type coding function set absolutely dependent argument made mean type bit limiting especially creating game objectoriented programming type programming language indicates software design requires data structure data operation order system work using programming type allows developer define fixed module need changed whenever something new inserted procedural programming type programming follows set function routine derived particular command command come computational step supposed carried system often type programming language supported computer processor creating casino game certainly easy task requires significant knowledge programming computer software general however learning programming type first step creating online offline casino game persevere truly want
349,Lobsters,scala,Scala programming,How do I error handle thee? Let me count the ways,http://typelevel.org/blog/2014/02/21/error-handling.html,error handle thee let count way,error handle thee licensing creative common attribution unported license follow adelbertc back blog,error handle thee scala several way deal error handling often time people get confused use post hope address let count way option people coming scala javalike language often told option replacement null exception throwing say function creates sort interval allows interval lower bound come first class interval val low int val high int low high throw new exception lower bound must smaller upper bound want create interval want ensure lower bound smaller upper bound throw exception idea sort guarantee point given interval lower bound smaller upper bound otherwise exception would thrown however throwing exception break ability reason functionprogram control handed call site hope call site catch propagates point something catch program crash like something bit cleaner enter option given interval constructor construction may may succeed put another way enter constructor may may valid interval option type represents value may may either none let use called smart constructor final class interval private val low int val high int object interval def apply low int high int option interval low high new interval low high else none make class final nothing inherit make constructor private nobody create instance interval without going smart constructor function intervalapply apply function take relevant parameter return option interval may may contain constructed interval function arbitrarily kick control back call site due exception reason much easily either scalaz option give u none need one thing could go wrong instance standard library map k v function get given key type k return option v clearly key exists associated value returned wrapped key exist return none sometimes one several thing go wrong let say wonky type want string exactly length another string palindrome final class wonky private five string palindrome string object wonky def validate five string palindrome string option wonky fivesize none else palindrome palindromereverse none else new wonky five palindrome somewhere else val w wonkyvalidate x say return none clearly something went wrong know string sent front end via json something send error back hopefully something descriptive something went wrong want instead none want something descriptive look either use left hold sort error value similar none right hold successful one similar manipulate value may may exist presumably obtained function may may fail use monadic function flatmap often form monad comprehension comprehension scala call val x val foo x b bar c baz quux b c yield case option foobarbazquux return none none simply get threaded rest computation trycatch statement marching right side screen comprehension scala require type working flatmap map flatmap along pure law requisite function needed form monad map defined term flatmap pure scalautileither however use explicit conversion via either right either left get rightprojection leftprojection respectively specifies direction bias map flatmap call convention however right side correct right side left represents failure case tedious continously call either right value type either achieve thankfully alternative scalaz library via scalaz pronounce either say disjoint union rightbiased version scalautileither calling map map value right scalaz otherwise left scalaz thread without touching much like option behaves therefore alter earlier function sealed abstract class wonkyerror case class musthavelengthfive string extends wonkyerror case class mustbepalindromic string extends wonkyerror final class wonky private five string palindrome string object wonky def validate five string palindrome string wonkyerror wonky fivesize musthavelengthfive five else palindrome palindromereverse mustbepalindromic palindrome else new wonky five palindrome somewhere else val w wonkyvalidate x scalaz also several useful method found either try scala scalautiltry essentially either left type fixed throwable two problem think moment want avoid exception violates monad law big factor ability deal error handling type nicely using monadic property comprehension explanation monad law nice post describing using scala try violates left identity def foo b try b throw new exception oops foo exception thrown try flatmap foo scalautilfailure cause unexpected behavior used perhaps monadfor comprehension furthermore try encourages use throwables break control flow parametricity certainly may convenient able wrap arbitrarily code block try constructor let catch exception may thrown still recommend using algebraic data type describing error using yourerrortype yourreturntype scalazvalidation going back previous example validating wonky string see improvement could made sealed abstract class wonkyerror case class musthavelengthfive string extends wonkyerror case class mustbepalindromic string extends wonkyerror final class wonky private five string palindrome string object wonky def validate five string palindrome string wonkyerror wonky fivesize musthavelengthfive five else palindrome palindromereverse mustbepalindromic palindrome else new wonky five palindrome somewhere else val w wonkyvalidate foo bar musthavelengthfive foo fact one string must length checked reported separately palindromic note example foo satisfy length requirement bar satisfy palindromic requirement yet foo error reported due work want report error could reported foo length bar palindromic want validate several property return validation error turn scalazvalidation modified function would look something like sealed abstract class wonkyerror case class musthavelengthfive string extends wonkyerror case class mustbepalindromic string extends wonkyerror final class wonky private five string palindrome string object wonky def checkfive five string validationnel wonkyerror string fivesize musthavelengthfive five failnel else fivesuccess def checkpalindrome p string validationnel wonkyerror string p preverse mustbepalindromic p failnel else psuccess def validate five string palindrome string validationnel wonkyerror wonky checkfive five checkpalindrome palindrome f p new wonky f p somewhere else failure nonemptylist musthavelengthfive foo mustbepalindromic bar wonkyvalidate foo bar failure nonemptylist mustbepalindromic bar wonkyvalidate monad bar success wonky monad radar wonkyvalidate monad radar awesome however one caveat good conscience use scalazvalidation comprehension valid monad validation accumulative nature work via applicative instance due instance work consistent monad every monad applicative functor monadic bind consistent applicative apply however use validation disjunction function convert scalaz used comprehension one thing note code snippet used validationnel type alias validationnel e stand validation nonemptylist e actual validation take anything left side semigroup validationnel provided convenience often time may want nonempty list error describing various error happened function however several interesting thing semigroups licensing unless otherwise noted content licensed creative common attribution unported license adelbert chang feb follow adelbertc back blog
350,Lobsters,scala,Scala programming,The Trouble With Types,http://www.infoq.com/presentations/data-types-issues,trouble type,infoq homepage presentation trouble type summary bio conference related sponsored content,infoq homepage presentation trouble type trouble type summary martin odersky outline main category static type system well new development discus tradeoff make bio martin odersky cofounder typesafe creator scala programming language professor programming research group epfl leading technical university switzerland wrote javac compiler used majority today java programmer scalac compiler used fastgrowing scala community authored programming scala bestseller conference strange loop multidisciplinary conference aim bring together developer thinker building tomorrow technology field emerging language alternative database concurrency distributed system mobile development web recorded oct related sponsored content
351,Lobsters,scala,Scala programming,"Dotty open-sourced, research platform for new language concepts and compiler technologies for Scala",https://groups.google.com/forum/#!msg/scala-internals/6HL6lVLI3bQ/IY4gEyOwFhoJ,dotty opensourced research platform new language concept compiler technology scala,,use google group discussion please enable javascript browser setting refresh page
352,Lobsters,scala,Scala programming,Why we love Scala at Coursera - Coursera Technology,http://tech.coursera.org/blog/2014/02/18/why-we-love-scala-at-coursera/,love scala coursera coursera technology,,evolution coursera search enabling product innovation technical innovationat coursera million learner use search discover course learner specific intent need relevant result
353,Lobsters,scala,Scala programming,Actors are overly nondeterminstic,http://pchiusano.blogspot.com/2013/09/actors-are-overly-nondeterminstic.html,actor overly nondeterminstic,written elsewhere exact problem noted thread nondeterminism scalazstream chapter book,actor useful lowlevel concurrency primitive written elsewhere nt best high level programming model writing concurrent program let look problem actor another angle yes actor side effect side effect nt compose etc etc specifically actor model take wrong default starting overly nondeterministic programming model attempting via firstorder outofband mechanism nt compose prune away nondeterminism order obtain predictable performance particular due excessive nondeterminism actor model lack predictable tool controlling queueing memory usage heard sort argument exact problem noted thread thread wildly nondeterministic job programmer prune away nondeterminism course developed tool assist pruning semaphore monitor modern overlay thread offer programmer ever effective pruning pruning wild mass bramble rarely yield satisfactory hedge offer another analogy suppose ask mechanical engineer design internal combustion engine starting pot iron hydrocarbon oxygen molecule moving randomly according thermal force engineer job constrain motion result internal combustion engine thermodynamics chemistry tell u theoretically valid way think design problem practical could almost searchandreplace turn paper argument using actor even though actor generally mutates local state side effect observable piece code capable messaging actor observability side effect propagates transitively actor avoid class bug arise using preemptive multithreading mutable state communication thread nt really change overall programming model unrestricted mutable state possibility completely different emergent behavior based nondeterministic interleaving actor message processing general class error worry problem reasoning code let look example suppose two actor p c producerconsumer relationship p produce value sends c actor model point execution p may issue c msg mean memory usage program emergent runtime property since every c msg result message queued mailbox c number message may pile depending relative rate processing p c likewise latency overall pipeline much emergent property depends nondeterminism actor scheduling yes workarounds build adhoc protocol specific p c actor scheduler implement global policy congestion control like making message send cost function target current mailbox size approach like bandaids nt scale like lock semapahors deeper issue flawed underlying conceptual model kind general principle actor model violates decision affecting program asymptotic runtime space complexity explicit programmer control using clear composable programming model actor violate principle making key decision affecting memory usage sequence message send sort nondeterminism allow emergent runtime property forcing u encode decision using hoc protocol nt really first class composable purely functional approach concurrency explicit side effect explicitly sequence effect program want nondeterminism ask explicitly rather starting unrestricted nondeterminism possibility unbounded memory usage depending relative processing rate interleaving get start fully deterministic model add nondeterminism needed helpful example scalazstream background scalazstream library represents source sink effectful channel pure stream transducer using single basic type process process f process emits value may issue request type f r choice r f form monad thought effectful source value sink f sink represented source effectful function process f f unit channel f generally channel source effectful function process f f wye pure stream transducer two input emits value type may request value left right allowing nondeterminism pure stream transducer one input emits value type may request value input type tee pure transducer two input emits value type may request value left right feed source src process f string snk sink f string write srcto snk fully deterministic repeatedly read element src send snk await response snk halting either src snk halt want allow nondeterminism explicitly using general combinator like connect srcconnect snk wyeboundedqueue still connecting src snk using firstclass object wye handle queueing strategy happen using simple queueing strategy wyeboundedqueue run src snk concurrently blocking snk element enqueued unanswered snk wye type arbitrary stream transducer build complex logic deciding sort nondeterminism allowed block element enqueue unanswered four consecutive value received src satisfy predicate decision nondeterminism turn affect memory usage program encoded first class object compose abstract object using usual powerful tool fp summarize actor overly nondeterministic message sends action side effect rather first class value explicitly sequence whose nondeterminism explicitly control hence leave important property program namely queueing memory usage various outofband mechanism nt visible typechecker scala standard library future type similar problem standard library future type represents running computation rather description computation unfortunately mean actual parallelism hence runtime complexity one obtains future emergent runtime property even depends arbitrary detail various function produce future factored something talk chapter book work design exercise library describing parallel computation contrast scalazconcurrenttask type purely functional description possibly parallel computation rather nondeterminism runtime property determined order strict future created task completely deterministic generally instantiated lazily allowed point nondeterminism supplied explicitly using function nondeterminism typeclass explicit model problem usual tool fp abstract common pattern uncover building task value
354,Lobsters,scala,Scala programming,Scala Collections: Why Not?,https://thenewcircle.com/s/post/1568/scala_collections_why_not_paul_phillips_video,scala collection,scala collection,scala collection
355,Lobsters,scala,Scala programming,Spark Release 0.9.0 | Apache Spark,https://spark.incubator.apache.org/releases/spark-release-0-9-0.html,spark release apache spark,spark release graphx spark streaming source package hadoop hadoop apache download site scala support configuration system sparkconf spark streaming improvement standalone cluster high availability mode streaminglistener graphx alpha graphx basic transformation pregel api graph loader analytics algorithm mllib improvement available python naive bayes classification python change packaging core engine orgapachesparkdeployclient compatibility contributor spark news archive,spark release spark major release add significant new feature update spark scala simplifies high availability update numerous component project release includes first version graphx powerful new framework graph processing come library standard algorithm addition spark streaming alpha includes significant optimization simplified high availability deployment download spark either source package mb tgz prebuilt package hadoop hadoop mb tgz release signature checksum available official apache download site scala support spark run scala letting user benefit language library improvement version configuration system new sparkconf class preferred way configure advanced setting sparkcontext though previous java system property method still work sparkconf especially useful test make sure property stay set across test spark streaming improvement spark streaming alpha come simplified high availability several optimization running spark standalone cluster standalone cluster high availability mode submit spark streaming driver application cluster automatically recovered either driver cluster master crash windowed operator sped spark input source plugins eg twitter kafka flume separate maven module making easier pull dependency need new streaminglistener interface added monitoring statistic streaming computation aspect api improved dstream pairdstream class moved orgapachesparkstreaming orgapachesparkstreamingdstream keep consistent orgapachesparkrddrdd dstreamforeach renamed foreachrdd make explicit work every rdd every element streamingcontextawaittermination allows wait context shutdown catch exception occurs streaming computation streamingcontextstop allows stopping streamingcontext without stopping underlying sparkcontext graphx alpha graphx new framework graph processing us recent advance graphparallel computation let build graph within spark program using standard spark operator process new graph operator optimized distributed computation includes basic transformation pregel api iterative computation standard library graph loader analytics algorithm offering feature within spark engine graphx significantly speed processing pipeline compared workflow use different engine graphx feature release include graphx still marked alpha first release recommend new user use instead limited bagel api mllib improvement machine learning library mllib available python operates numpy data currently requires python numpy new algorithm added naive bayes classification alternating least square model used predict rating multiple item parallel documentation expanded include example scala java python python change python user use mllib requires python numpy pyspark show call site running job spark application ui http making easy see part code running ipython integration updated work newer version packaging script organized directory make easier separate admin script user one install spark standard linux path log configuration improved spark find default file specify one core engine standalone mode support submitting driver program run cluster instead external machine submitting access functionality orgapachesparkdeployclient class large reduce operation automatically spill data disk fit memory user standalone mode limit many core application use default application writer configure size previously application took available core cluster sparkshell support option run script startup new histogram countdistinctapprox operator added working numerical data yarn mode support distributing extra file application several bug fixed compatibility release compatible previous apis stable component several language version script location changed scala program need use scala instead script sparkshell pyspark moved bin folder administrative script start stop standalone cluster moved sbin spark api changed move external input source separate module dstream pairdstream moved package orgapachesparkstreamingdstream dstreamforeach renamed foreachrdd expect current api stable spark streaming alpha old method configuring spark java system property still work recommend user update new sparkconf easier inspect use expect current apis script location spark remain stable release spark wanted make update early give user chance switch new api contributor following developer contributed release andrew ash documentation improvement pierre borckmans documentation fix russell cardullo graphite sink metric evan chan local uri feature vadim chekan bug fix lian cheng refactoring code cleanup several location bug fix ewen cheslackpostava spark pyspark improvement mosharaf chowdhury optimized broadcast dan crankshaw graphx contribution haider haidi documentation fix frank dai naive bayes classifier mllib documentation improvement tathagata da new operator fix improvement spark streaming lead ankur dave graphx contribution henry davidge warning large task aaron davidson shuffle file consolidation ha mode standalone scheduler various improvement fix kyle ellrott graphx contribution hossein falaki new statistical operator scala python example mllib harvey feng hadoop file optimization yarn integration ali ghodsi support simr joseph e gonzalez graphx contribution thomas graf fix improvement yarn support lead rong gu documentation fix stephen haberman bug fix walker hamilton bug fix mark hamstra scheduler improvement fix build fix damien hardy debian build fix nathan howell sbt upgrade grace huang improvement metric code shane huang separation admin user script prabeesh k mqtt integration spark streaming code fix holden karau sbt build improvement java api extension karthiktunga bug fix grega kespret bug fix marek kolodziej optimized random number generator jey kottalam script improvement du li bug fix haoyuan li tachyon support liguoqiang fix build yarn integration raymond liu build improvement various fix yarn support george loentiev maven build fix akihiro matsukawa graphx contribution david mccauley improvement json endpoint mike bug fix fabrizio misto milo bug fix mridul muralidharan speculation improvement several bug fix tor myklebust python mllib binding instrumentation task serialization sundeep narravula bug fix binh nguyen java api improvement version upgrade adam novak bug fix andrew external sorting kay ousterhout several bug fix improvement spark scheduler sean owen style fix nick pentreath al implicit feedback algorithm pillis vectorrandom method imran rashid bug fix ahir reddy support simr luca rosellini script loading scala shell josh rosen fix cleanup extension scala java henry saputra style improvement cleanup andre schumacher python improvement bug fix jerry shao multiuser support various fix improvement prashant sharma scala support configuration system several smaller fix shiyun style fix wangda tan ui improvement bug fix matthew taylor bug fix jyunfan tsai documentation fix takuya ueshin bug fix shivaram venkataraman sbt build optimization improvement java python api jianping j wang graphx contribution martin weindel build fix patrick wendell standalone driver submission various fix release manager neal wiggins bug fix andrew xia bug fix code cleanup reynold xin graphx contribution task killing various fix improvement optimization dong yan bug fix haitao yao bug fix xusen yin bug fix fengdong yu documentation fix matei zaharia new configuration system python mllib binding scheduler improvement various fix optimization wu zeming bug fix nan zhu documentation improvement thanks everyone contributed spark news archive
356,Lobsters,scala,Scala programming,Scala Days 2013 Videos,http://www.parleys.com/channel/51ae1022e4b01033a7e4b6ca/presentations?sort=date&state=public,scala day video,,
357,Lobsters,scala,Scala programming,"EvenOdd in Agda, Idris, Haskell, Scala",http://brianmckenna.org/blog/evenodd_agda_idris_haskell_scala,evenodd agda idris haskell scala,using agda prove parity added number work idris pathdependent type mile sabin,ago blogged using agda prove parity added number recently work idris wondered easy would translate agda proof idris original agda code looked something like module evenodd open import datanat data even set evenzero even evensuc n even n even suc suc n ee n even n even even n evenzero ee b b evensuc ee b evensuc ee b direct idris translation look like module evenodd data even nat type evenz even z even even n even n total ee even n even even n ee evenz ee even n even ee n difference nt import nat type totality default flag make though ca nt define mixed letter symbol operator pretty easy time something trickier nt done much type level haskell wanted see easy would translate recent ghc release language datakinds language gadts language kindsignatures language typefamilies module evenodd data nat z nat data even nat evenz even z even even n even n type family plus n nat nat nat type instance plus z type instance plus n plus n ee even n even even plus n ee evenz ee even n even ee n getting bit trickier following enable data type promotion data type kind enable type family write type level function define nat use kind define plus type level function type family get totality result warning error via wall problem caused haskell distinction value type kind everything else look extremely similar lucky fall area ghc data kind extension work really well promote simple nat type kind let step right let encode scala ready package orgbrianmckennaevenodd sealed trait nat trait z extends nat case object z extends z case class n nat n n extends nat sealed trait even n nat trait evenz extends even z case object evenz extends evenz case class even n nat n even n extends even n object even implicit val evenz evenz implicit def even n nat implicit even even n even n even sealed trait plus n nat nat type result nat object plus type aux n nat nat r nat plus n type result r implicit def plusz nat new plus z type result implicit def plus n nat nat implicit plus plus n new plus n type result plusresult object ee def apply n nat nat r nat n even n even implicit sum plusaux n r even r probably look pretty verbose since define type level nat plus function type level plus us scala pathdependent type interesting theorem expressed constraint given even n even construct even n implicit given constructive proof every combination two even number always result even number know previous proof true specifically ca nt tell implicit found value could fix splitting implicit case ca nt get totality checking hopefully give quick feel programming type level agda idris haskell scala type level programming agda idris easy programming value level type level programming haskell scala bit annoying write function differently type level value level impressive achieve goal much widely used language thanks mile sabin help simplifying scala version
359,Lobsters,scala,Scala programming,Apache Spark: The Next Big Data Thing?,http://blog.mikiobraun.de/2014/01/apache-spark.html,apache spark next big data thing,apache spark databricks raised andreessen horowitz cloudera big thing scalding paper scalding spark streaming return microbatch paper storm final thought article view discussion thread blog comment powered,apache spark generating quite buzz right databricks company founded support spark raised andreessen horowitz cloudera decided fully support spark others chime next big thing thought high time took look get understanding whole buzz around played around scala api spark written scala honest first pretty underwhelmed spark looked well small basic abstraction resilient distributed datasets rdds basically distributed immutable collection defined based local file file stored hadoop via hdfs provide usual scalastyle collection operation like map foreach first reaction basically distributed collection hadoop comparison seemed much distributed filesystem obviously map reduce support kind data format data source unit testing clustering variant others quickly pointed fact spark also provides complex operation like join groupby reduceby operation model quite complex data flow without iteration though time dawned perceived simplicity spark actually said lot java api hadoop spark even simple example hadoop usually come lot boilerplate code conceptually speaking hadoop quite simple provides two basic operation parallel map reduce operation expressed way something resembling distributed collection one would fact even smaller interface project like scalding actually build thing code look pretty similar spark convincing spark actually provides nontrivial set operation really hard tell ubiqitous word count example digged deeper read paper describes general architecture rdds basic building block spark actually really something like distributed immutable collection define operation like map foreach easily parallelized also join operation take two rdds collect entry based common key well reduceby operation aggregate entry using user specified function based given key word count example map text word count one reduce key using word summing count get word count rdds read disk held memory improved speed also cached reread every time alone add lot speed compared hadoop mostly disk based interesting approach fault tolerance instead persisting checkpointing intermediate result spark remembers sequence operation led certain data set node fails spark reconstructs data set based stored information argue actually bad node help reconstruction essence compared bare hadoop spark smaller interface might still become similarly bloated future many project top hadoop like scalding example achieve similar level expressiveness main difference spark inmemory default naturally lead large improvement performance even allows run iterative algorithm spark built support iteration though claim fast run iteration want spark streaming return microbatch spark also come streaming data processing model got quite interested course paper summarizes design quite nicely spark follows interesting different approach compared framework like storm storm basically like pipeline push individual event get processed distributed fashion instead spark follows model event collected processed short time interval say every second batch manner collected data become rdd processed using usual set spark application author claim mode robust slow node failure also second interval usually fast enough application sure distributed computing always pretty complex think easily say generally better others approach also nicely unifies streaming non streaming part certainly true final thought saw looked pretty promising given support attention spark receives pretty sure mature become strong player field wellsuited everything author admit really well suited operation require change entry data set time due immutable nature rdds principle make copy whole data set even want change one entry nicely paralellized course costly efficient implementation based copyonwrite scheme might also work implement yet mistaken stratosphere research project tu berlin similar goal take approach even including complex operation like iteration storing sequence operation fault tolerance use global optimization scheduling paralellization immutability pretty vogue easier reason like point excellent article baron schwartz always end mixed strategy mutable immutable data make work realworld posted mikio l braun view discussion thread blog comment powered
360,Lobsters,scala,Scala programming,A Scala Corrections Library,http://www.slideshare.net/extempore/a-scala-corrections-library,scala correction library,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
361,Lobsters,scala,Scala programming,fogus: Scala: sharp and gets things cut,http://blog.fogus.me/2013/10/07/scala-sharp-and-gets-things-cut/,fogus scala sharp get thing cut,strange loop conference martin odersky explore code pushing anecdote around scala sharp tool sharp tool always make everyone better,oct one favorite talk last month strange loop conference martin odersky keynote entitled trouble type many interesting point made talk agree however like focus small seemingly throwaway statement made dr odersky bother statement one see gaining popularity amongst many advocate static typing take form great programmer static typing help better position statement incredibly weak ringing hollow best disingenuous worst know exactly phrase gaining mindshare suspect attempt counter idea strong static type system like scala complicated one reason ring hollow anyone explore code written say phrase often skill easily opinion watereddown phrase need die quick personally would impressed advocate instead took positive position stated effect great programmer choose static type system demand sharp tool course taking position run risk pushing fallacious authoritybased angle however weak strong case already pushing anecdote around may least choose one open objective measurement much rather learn participate debate centered around whether scala sharp tool scala make weak programmer stronger besides come agreement scala sharp tool latter point moot sharp tool always make everyone better craft regardless skill level f
363,Lobsters,scala,Scala programming,ScalaCheck: Property based testing for scala,http://www.scalacheck.org,scalacheck property based testing scala,scalacheck propertybased testing scala scala quickcheck work sbt scalatest lambdatest scala compiler akka news quick start sbt,scalacheck propertybased testing scala scalacheck library written scala used automated propertybased testing scala java program scalacheck originally inspired haskell library quickcheck also ventured scalacheck external dependency scala runtime work great sbt scala build tool also fully integrated test framework scalatest lambdatest also use scalacheck completely standalone builtin test runner scalacheck used several prominent scala project example scala compiler akka concurrency framework news quick start specify method javalangstring like use sbt add following dependency build file put scalacheck property srctestscala use test task check sbt test stringstartswith ok passed test stringconcat falsified passed test stringsubstring ok passed test see second property quite right scalacheck discovers present argument make property fail two empty string two property pas test round randomized set input parameter also use scalacheck standalone since builtin command line test runner compile run like scalac cp stringspecificationscala scala cp stringspecification
365,Lobsters,scala,Scala programming,Erlang Style Actors Are All About Shared State (2009),http://james-iry.blogspot.com/2009/04/erlang-style-actors-are-all-about.html,erlang style actor shared state,last week exciting episode situation finally damn code last note postscript,actor become quite popular topic besides erlang famous library implementation scala least java shared state propaganda setting people failure last week exciting episode defined state nt fact something responds differently input time detail represented based show saying erlang style actor nt share state totally wrong headed fact nt want share state actor model clunky way thingsbefore go let emphasize like erlang like actor nifty model stateless model let show ranting problem erlang style actor shared mutable changeable state model shared state nt need share mutable state better alternative actor importantly even using actor well must think problem shared mutable state people believe propaganda rude shocksthe situationlast time described simple sock tube dispensing machine insert two coin press button get tube sock insert many coin get extra coin returned push button inserted enough coin get nothing diagramimagine alice bob work crap corp making high quality crap since day like saunter break room purchase nice warm tube sock crap corp machine nt take regular coin crap corp coin instead ccc weighs pound roughly kilogram naturally alice bob nt want carry pound crappy token around laboriously drag token machine insert walk back cubicle grab another repeat alice bob take sock break different time probably going work fine tend overlap bad thing happen possible alice insert first coin bob insert first coin alice insert second coin get coin back bonus cry happily experiencing greatest joy ever experienced crap corp alice push button get tube sock merrily skip back cube well maybe skip exactly whatever ecstatically happy carrying pound crapthen bob show insert second coin eagerly smash button get well deserved tube sock get nothing feeling cheated pound machine kick shake rock back forth inevitably machine tip fall bob crush ton crap corp coin inserted week tragic ending somebody wanted socksnow outcome nt guaranteed even bob alice start time way inserting first coin alice could waylaid bos looking tps report alice patiently explains tps report never job b discontinued three year ago c eye face chest bob could merrily taken two coin trip safely received tube sock without ever knowing mortal injury narrowly avoidedfinally damn codeany time something unwanted happen result unpredictable delay scheduler priority workload etc race condition could unwanted crushed vending machine could unpredictable pointy haired bos write exactly erlangin file called sockmachineerl first little standard module definition export business module sockmachine export gut machine zerocoins onecoin twocoins state machine one called block waiting message inbox based message get responds nothing nothing happens coin need return coin tubeofsocks win also call appropriate function next state might state private function exported module note clever way write explanatory purpose like thiszerocoins receive coin nothing onecoin button nothing zerocoins end onecoin receive coin nothing twocoins button nothing onecoin end twocoins receive coin coin twocoins button tubeofsocks zerocoins end start spawn new sock machine actor zerocoins statestart spawn fun zerocoins end insertcoin pushbutton rpc style convenience function insert coin push button get backwards well whichever return whatever recieve message back machineinsertcoin machine machine coin self receive x x end pushbutton machine machine button self receive x x endtest spawn many concurrent test loop requested simultaneously pound one machinetest machine process process spawn fun testloop machine end test machine process true io format test process launchedn end testloop repeatedly walk cycle inserting coin pushing button call helper function mirror state sock machine show expects happen step complaining thing nt go well testloop process machine count count testzerocoins process machine count true io format w testing completedn process end testzerocoins process machine count case insertcoin machine nothing testonecoin process machine count coin io format w bonus coin n process testtwocoins process machine count end testonecoin process machine count case insertcoin machine nothing testtwocoins process machine count coin io format w bonus coin n process testtwocoins process machine count end testtwocoins process machine count case pushbutton machine tubeofsocks io format w got socksn process nothing io format w blasted machine ate money give rattle rattle arrrgghghhrhrhghn process end testloop process machine count fire erl compile start machine test running test c sockmachine ok sockmachine machine sockmachine start sockmachine test test process launched ok got sock got sock got sock got sock got sock got sock got sock got sock got sock got sock testing completed ah sweet sweet success run another test concurrent test loop bob alice way around sockmachine test test process launched bonus coin bonus coin ok got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh bonus coin bonus coin got sock blasted machine ate money give rattle rattle arrrgghghhrhrhgh testing completed testing completed litany sock bonus coin crushed intestine machine oddly predictable litany real distributed erlang app would much interesting random litany network delay would emulate pointy haired boss even better erlang schedulersome last noteswith erlang style programming actor central unit statefulness multiple actor share access one stateful actor hence shared state race condition ruptured spleen saying erlang actor bad fact quite like erlang model nicely separate must stateful concurrent pure computation making state much painful write foox foox actor model encourages think consequence sharing also cleanly mirror mechanic distributed computing asynchronous io nice statelessone last note started actor shared state naturally one might ask well stateless actor actor nt change state depend state via io certainly viable us actor longer concurrency parallelism imho future data flow variable haskell data parallelism cleaner way deal parallelism someday soon hope write meantime whole point complexity message passing instead simpler mechanism precisely deal complexity concurrent stateone really last note sadly simple straight actor nt automatically compose well design set actor interact correctly one use case nt interact well plugged different system another aspect actor share traditional manual lock shared mutable memory date best known way deal composable state transaction optimistic pessimistic distributed compensating software hardware database whatever nice transactional capability available erlang yet another area shared state mantra lead people think actor entire answer without needing anything elsetry get crushed good luck sock postscriptit suggested comment people say erlang style actor nt share state mean nt share memory first clearly defined state previous article different representation importantly think saying nt share memory distinction without much relevance mostly implementor point view nt reflect user must think actorshere erlang code simple shared mutable variable nt recommended erlang usage nt break model waymodule variable export malloc spawn fun loop end loop value receive fetch value loop value store newvalue loop newvalue end fetch variable variable fetch self receive x x end store variable value variable store value using c variable ok variable x variable malloc variable store variable fetch x variable store x variable fetch x variable fetch x since variable actor easy share sock machine example
366,Lobsters,scala,Scala programming,New tool for linting Scala,http://brianmckenna.org/blog/wartremover_point_four,new tool linting scala,traverser repository github,recently panel smart people discussing rod johnson infamous scala keynote agreed start enforcing code standard sadly tool bit lacking idea flexible tool writing lint rule scala code already wartremover linter thing considered bad decided rewrite wartremover flexible tool imagined idea write lint rule using traverser scala ast wartremover provides wrapper run rule macro commandline tool compiler plugin run rule macro scala import languageexperimentalmacros import languageexperimentalmacros scala import orgbrianmckennawartremoverwartsunsafe import orgbrianmckennawartremoverwartsunsafe scala def safe expr macro unsafeasmacro safe expr scala safe null console error null disabled safe null using commandline tool report error give exit code failure java classpath targetclasses orgbrianmckennawartremovermain traverser orgbrianmckennawartremoverwartsunsafe srcmainscalamainscala best last compiler plugin adding following buildsbt resolvers resolversonatyperepo release addcompilerplugin orgbrianmckenna wartremover cross crossversionfull scalacoptions p wartremover traverser orgbrianmckennawartremoverwartsunsafe check code project error provided rule nonunit statement null var nothing type unsafe except nothing allowed wartremover allows write rule complete example package unimplemented import orgbrianmckennawartremover warttraverser wartuniverse object unimplemented extends warttraverser def apply u wartuniverse utraverser import uuniverse val notimplementedname termname qmark qmark qmark new traverser override def traverse tree tree tree match case select notimplementedname uerror treepos something left unimplemented case supertraverse tree disables usage could make rule execute committing example also combine rule like package orgbrianmckennawartremover package wart object unsafe extends warttraverser val safetraversers list nonunitstatements var null def apply u wartuniverse utraverser warttraversersumlist u safetraversers interested contributing rule aka wart want play repository github
367,Lobsters,scala,Scala programming,Bringing Erlang's Fault Tolerance and Distribution to Java with Akka and Erjang,http://www.infoq.com/interviews/jonasboner-krestenkrabthorup-erlang-jvm,bringing erlang fault tolerance distribution java akka erjang,erlang factory london sitting jonas boner kresten krabthorup jonas bringing otp erlang jvm via scala route kresten creator erjang jvm port erlang also bringing erlang otp jvm choose way think scala instance would easier take shortcut mutable state scala story regard essentially supervision tree one idea brought fallacy latency actually visible inside data center smalltalk away original idea smalltalk really message passing,erlang factory london sitting jonas boner kresten krabthorup jonas jonas boner swedish cto typesafe company launched publicly month ago building stack top scala middleware stack developer tool support service also product around scala ecosystem contribution may akka akka middleware sort product heavily influenced erlang long story short erlang otp product inspired start akka writing middleware system server system career mainly living jvm got really excited got erlang learned wanted get others excited lot people customer colleague jvm hard time convincing move erlang runtime felt ok thing implemented concept really sound around year really alien java developer see use thing good left erlang geek excellent community felt need urge move idea onto jvm started akka attempt took lot best idea otp also idea language like language oz data flow concurrency borrowed haskell clojure stuff like put together mix try address like scaling vertically well scaling horizontally unified platform programming model say short akka bringing otp erlang jvm via scala route jonas boner exactly akka implemented scala scala compiler emits jvm bytecode run jvm akka scala interface scala api well java api use also people used groovy jruby runtime language onto jvm implemented scala solely scala scala product kresten creator erjang jvm port erlang also bringing erlang otp jvm choose way kresten krabthorup really think new concept jonas saying hard grasp java developer need full opinion like whole isolation mechanism instance really core erlang used aspect erlang erlang many thing functional program language concurrent think important big stumbling block think big stumbling block really much practical java used strict state management maybe ten year ago proposal isolates java kind like little island mutable state touch core concept beautifully encapsulated erlang language using erlang language program kind way good way could many language kind pipe dream mine might even imagine new language kind adopts model strict isolation opinion important profound garbage collection imagine looking language garbage collection really like cool stuff implement garbage collector still use stuff lot boundary condition difficult manage course also practical pragmatic thing objectivec thing object really nice still able use c c integrate really nicely also kind bastard language mix different world ended pretty successful hope mixture successful would like force say box state management properly language see appeal scala akka concept obviously idea pushing erlang erjang afraid novice programmer come project maintenance mode find easy like quick hack circumvent thing probably one part equation course many thing depends coming think scala instance would easier take shortcut mutable state scala story regard jonas boner scala favor immutability way default collection immutable ask mutable want also make distinction syntactic distinction variable value scala code always use value mean final variable java stack allocated variable really try make easy right thing come state management scala functional story mix two different paradigm oo object orientation common idiom using mutable state functional side scala heavily favor immutability use combinators transformation state without mutable state akka also try favor immutability problem running jvm one single shared heap like erlang every process heap start tampering state currently scala think jvm language state management need either convention somehow enforced runtime tool however research scala community right martin odersky team enforce type system way guaranteeing immutable state used also guarantee uniqueness one component access component state nothing gone scala compiler scala type system yet think interesting research might see ending scala within year something would love cause would get compile time enforcement even though get inside jvm least catch immediately kresten krabthorup always problem also ten year ago working ejb container also one problem ejb trying resource container would declare dependency also managed resource could open file would closed ejb way manage jvm environment unless want analyze code would potentially call way proper resource management way aspect something different mindset think huge value actually enforce scala obviously lends people like type feel relieved know system typesafe actually kind thing state management know world like easy worry affect thing system get original oo world always talked encapsulation object encapsulate big fake never really encapsulated kind relief get start studying oo really nice think encapsulation year later realized encapsulation actually thing jonas boner actually massive test suit oo system never really sure refactoring bug emerges fix break every state entangled place really idea going use functional approach state change local least pure functional approach get referentially transparent code swap value actual function value knowing affecting state locally sure break place make sleep better night kresten krabthorup relief make thing easy kind feeling jonas boner actor mutable state completely isolated still relief completely enforced way especially going go top concurrency erlang shine erjang shine akka also try pull thing table raise abstraction level like plumbing management state basically singlethreaded system system sort deterministic idea going soon starting adding thread system everything becomes completely indeterministic idea going thread obey nice encapsulation rule set typesystem compose run corrupt extremely hard handle use something like actor model plumbing becomes workflow instead think term message flow system guard state others make much easier reason code understand going kresten krabthorup micro level make code manageable understandable think using actor way encapsulate nice think higher level superstructure system really interesting part akka erlang build system reliable think something appreciated valued enough obviously customer buy system expect reliable never really much topic except distinct area close hardware management like instance telephony system robotics kind world never mainstream information system another reason thing interesting building system composing web service like one healthcare project working system integrated rely behaving correctly time stuff like also depend becomes much important valuable work always work computer system getting interconnected dependent sudden raise value availability business level value really scala akkastyle system erlangbased system design pattern system design pattern architecture pattern make thing really work really stable starting see lot interest think interesting angle push new cool technology reason availability pattern building reliable system reason start paying attention jonas boner absolutely kind approach really shine distributed system build reliable system one node get hardware failure memory game way normally traditionally make system like world jvm also clr whatever case emulate shared state way familiar world even think fundamentally broken even single system people comfort zone system try give distributed computing distributed store try stretch sort thinking across many machine problem get extremely leaky abstraction network two machine nothing like shared state underneath message passing think instead seeing embracing limitation distributed computing network seeing everything message passing share nothing make lot easier think program kresten krabthorup make composable subsystem general leaky abstraction make subsystem component able compose interact jonas boner also got much interested erlang fault model embracing failure natural state lifecycle application something hope happen try guard prevent instead natural thing especially write distributed system go better good way dealing think erlang story extremely appealing trying lie fake something instead embracing core whole make best instead lot thing trying port especially system integration like kresten say never trust another guy system trouble trusting would bet money someone else essentially supervision tree one idea brought kresten krabthorup honest failure happen talk goto copenhagen time ago quote said defensive coding sign weak system weak platform quoted tweeted way handle error fault kind system try handle upfront write code much simpler put assertion let fail fault handling meta level level fault handling fact instead trying prevent everything make code much simpler coding spec protecting everything around spec course handle boundary condition information get system tcp socket level course check protocol data inside system client behave properly towards service use check everything make code much simpler assume something fails take everything notion already desktop operating system word fails bring powerpoint micro level inside program think component fails really hard thing get used took kind get brain comfortable part program fail mean everything failed hear people say many time feel body comfortable jonas boner right never completely shared state everything entangled need separation level indirection kresten say one really nice thing nice separation concern give way almost declaratively configure system react upon failure rather program entangle code deeply involved aspect oriented programming aop community long time trying separation concern thing belongs thing belongs feel thing using erlang sense well nice separation almost declarative way put thing work well practice theoretical exercise kresten krabthorup definitely something get used whole generation javascript c programmer used point view interesting observe different business adopt like started business basically go know thinking trying within business easy either bring erlang established java c consulting business good easy continue jonas boner much harder easier start thing start influence people want listen need influence press people even want listen least initially kresten krabthorup going interesting see kind thing probably happening java became obvious java next big thing could really raise bar make much easier build system many business went c c odd new language called java really fast kind new weird concept jonas boner right education process think easier sell ten year ago remember started working terracotta java clustering company came customer even know scalability problem fault tolerant problem whatever confusing performance scalability go start ground level computer science really kind problem nowadays people used nosql database used using kind stuff scale used writing distributed system using rest stuff like people becoming aware kind thing feel much easier almost many way thing instead kresten krabthorup definitely need kind convergence phase educational phase concept obviously need materialize broader developer community kind thing come hardware fail might well message passing fail fact shared memory model work materialize term thinking saying deep riak kind thing say write conflict happen different place world two different people write two set key two different value later point deal core concept fact nature almost like cheating jonas boner like lift fundamental property hand programmer lot responsibility hand trying lie need fake anything really like approach le magic better also something really try embrace akka well example software transaction memory really bad reputation magic implementation try bless whatever mess user make instead taken approach extremely explicit almost bit ugly need wrap state want transaction magical reference much eye think really good thing know exactly pay price kind semantics see nosql also embracing concept like dynamo paper thing better lift shield away make simple nt even think never simple kresten krabthorup fallacy distributed computing around last year year pc bad shared memory bad fail living world net remoting rmi trying make everything like terracotta trying make thing look like shared memory able push good enough system become integrated cloud widely used people run thing infrastructure service hosting provider get latency network effect exposed even fallacy come back hit think time definitely fallacy latency actually visible inside data center kresten krabthorup virtualization stuff one branch really trying make old software continue run old window apps want rewrite like put virtualized hardware make environment like putting artificial life old system run cloud stuff good business case integration happens everywhere across system need integration inevitably kind expose failure happen easily propagate thing fail need expose completely agree smalltalk away original idea smalltalk really message passing jonas boner even asynchronous message passing talking erlang akka actor message passing active object try talk object encapsulate state behavior message passing way implemented akka scala polymorphism inheritance think essence view kresten krabthorup many definition object oriented people saying word matter say response question people completely agree jonas describe actor programming talk object come naturally lot technique developed object oriented programming applies really well model like crc card people playing role different class much better actor programming natural people talking activity kind thing many intersecting concept usable context jonas boner think useful think regardless definition think useful think actor object model object important least
368,Lobsters,scala,Scala programming,Quine Relay,https://github.com/mame/quine-relay,quine relay,quine relay usage ubuntu install interpreterscompilers run program interpretercompiler docker platform instruction platform wiki tested interpretercompiler version frequently asked question q take pick q world obfuscated esoteric artistic programming amazoncojp alphabetonly ruby program radiationhardened quine q language xxx missing criterion language inclusion q really work q long take try cross world line q code fit display go q code generated license,quine relay ruby program generates rust program generates scala program generates language total rexx program generates original ruby code want see old version see branch usage ubuntu using ubuntu lts focal fossa perform following step install interpreterscompilers first type following aptget command install sudo aptget install afnix aplusfsf aspectc aspectj asymptote bash bc bf bsdgames bsh clisp clojure cmake coffeescript dafny dc eceredev elixir emacsnox erlang fish flex fpcompiler fsharp g gap gawk gcc gdb gdc generatorscriptinglanguage genius gforth gfortran ghc ghostscript gnat gnusmalltalk gnucobol gnuplot gobjc golang groovy gzip haxe icont iconx intercal iverilog jasminsable jq julia ksh lisaac livescript llvm make maximum minizinc mlton monodevel monomcs monovbnc nasm neko nickle nim nodetypescript nodejs ocaml octave pakcs parigp perl phpcli rbase rakudo ratfor rc reginarexx ruby rubymustache rustc scala scilabcli sed slsh spin swiprolog tcl tcsh valac vim xsltproc yabasic yorick zoem zsh build bundled interpreter sudo aptget install cmake libpngdev libgddev groff bison curl make c vendor run program interpretercompiler ulimit unlimited ruby qrrb qrrs rustc qrrs qr qrscala scalac qrscala scala qr qrscm guile qrscm qrsci scilabcli nb f qrsci qrsed sed e f qrsed qrsed qrspl qrspl qrsplc gcc qr vendorlocalinclude l vendorlocallib qrsplc lspl lm qr qrsl slsh qrsl qrst gst qrst qrnut squirrel qrnut qrsml mlton mlton fixedheap qrsml qr qrsq ruby vendorsubleqrb qrsq qrtcl tclsh qrtcl qrtcsh tcsh qrtcsh qrt ruby vendorthuerb qrt qrts tsc outfile qrtsjs qrts nodejs qrtsjs qrunl ruby vendorunlambdarb qrunl qrvala valac qrvala qr qrmid mono vendorlocalbinvltexe qrmid mono qrexe qrv iverilog qr qrv qr vcdnone qrvim vim es qrvim qrvb vbnc qrvb mono qrexe qrws ruby vendorwhitespacerb qrws qrxslt xsltproc qrxslt qryab yabasic qryab qryorick yorick batch qryorick qrazm zoem qrazm qrzsh zsh qrzsh qr qr qradb gnatmake qradb qr qrals langc ldlibrarypathusrlibafnix axi qrals qraheui ruby vendoraheuirb qraheui qrante ruby vendoranterb qrante qrcc ag qr qrcc qr qraj ajc qraj java qr qrasy asy qrasy qrdats patscc qr qrdats qr qrawk awk f qrawk qrbash bash qrbash qrbc bc q qrbc qrbsh bsh qrbsh qrbef cfunge qrbef qrblc ruby vendorblcrb qrblc qrbf bf qrbf qrc gcc qr qrc qr qrcpp g qr qrcpp qr qrcs mc qrcs mono qrexe qrchef compilechef qrchef qrchefpl perl qrchefpl qrclj clojure qrclj qrcmake cmake p qrcmake qrcob cobc x qrcob qr qrcoffee coffee nodejs qrcoffee qrlisp clisp qrlisp qrcurry pakcs nocypm load qrcurry save quit qr qrd gdc qr qrd qr qrdfy dafny qrdfy mono qrexe qrdc dc qrdc qrec true ecp c qrec qrsym ecc c qrec qrc ec console qrsym qrimp qrmainec ecp c qrmainec qrmainsym ecc c qrmainec qrmainc gcc qr qrc qrmainc lecerecom qr qrexs elixir qrexs qrel emacs q script qrel qrerl escript qrerl qrfsx fsharpc qrfsx qrexe mono qrexe qrfalse ruby vendorfalserb qrfalse qrfl flex qrflc qrfl gcc qr qrflc qr qrfish fish qrfish qrfs gforth qrfs qrf gfortran qr qrf qr gfortran qr qr qrgbs qrgbs qrg gap q qrg qrgdb gdb q x qrgdb qrgel genius qrgel qrgsl gsl q qrgsl qrplt gnuplot qrplt qrgo go run qrgo qrgs ruby vendorgolfscriptrb qrgs qrgrass ruby vendorgrassrb qrgrass qrgroovy groovy qrgroovy qrgz gzip cd qrgz qrhs ghc qrhs qr qrhx haxe main qr neko qrn neko qrn qricn icont qricn qr qri ick bfoc qri gcc static qrc usrincludeick qr lick qr qrj jasmin qrj java qr qrjava javac qrjava java qr qrjs nodejs qrjs qrjq jq r n f qrjq qrjsfuck nodejs qrjsfuck qrjl julia qrjl qrksh ksh qrksh qrlazy lazyk qrlazy qrli lisaac qrli qr qrls lsc qrls qrll llvmas qrll lli qrbc qrlol lci qrlol qrlua qrlua qrmk make f qrmk qrmac maximum q initmacqrmac qrmzn minizinc solver gecode solnsep qrmzn qril ilasm qril mono qrexe qrmustache mustache qrmustache qrmustache qrasm nasm felf qrasm ld qr qro qr qrneko nekoc qrneko neko qrn nickle qrnim nim c qrnim qr qrm gcc qr qrm qr qrml ocaml qrml qroctave mv qrm qrmbak octave qf qroctave qrook mv qrmbak qrm ruby vendorooktobfrb qrook qrookbf bf qrookbf qrgp gp f q qrgp qrp qrp qrpas fpc qrpas qr qrpl perl qrpl qrphp php qrphp qrpng npiet qrpng qrpike pike qrpike qrps g dnodisplay q qrps qrppt ppt qrppt qrprolog swipl q qr f qrprolog qrpr spin qrpr qrpy qrpy qrr r slave f qrr qrratfor ratfor qrratforf qrratfor gfortran qr qrratforf qr qrrc rc qrrc qrrexx rexx qrrexx see qrrb diff qrrb alternatively type make make note may require huge memory compile file docker simply build image run container follows docker build qr docker run privileged rm e citrue qr note need run privileged mode otherwise maximum command fail want check generated file mount local directory docker container keep using vendor directory container follows docker run privileged rm e citrue v pwd usrlocalsharequinerelay v usrlocalsharequinerelayvendor qr platform may find instruction platform wiki using linux distribution please find way could please let know good luck tested interpretercompiler version used following ubuntu deb package test program language ubuntu package version ruby ruby rust rustc scala scala scheme scilab scilabcli sed sed shakespeare na slang slsh smalltalk gnusmalltalk squirrel standard ml mlton subleq na tcl tcl tcsh tcsh thue na typescript nodetypescript unlambda na vala valac velato na verilog iverilog vimscript vim visual basic monovbnc whitespace na xslt xsltproc yabasic yabasic yorick yorick zoem zoem zsh zsh aplusfsf ada gnat afnix afnix aheui na algol ante na aspectc aspectc aspectj aspectj asymptote asymptote at awk gawk bash bash bc bc beanshell bsh befunge na na brainfuck bf c gcc c g c monomcs chef na clojure clojure cmake cmake cobol gnucobol coffeescript coffeescript common lisp clisp curry pakcs gdc dafny dafny dc dc ec eceredev elixir elixir emacs lisp emacsnox erlang erlang f fsharp false na flex flex fish fish forth gforth gfortran gamba script gap gap gdb gdb gel genius genius generatorscriptinglanguage generatorscriptinglanguage gnuplot gnuplot go golang golfscript na grass na groovy groovy gzip gzip haskell ghc haxe haxe icon icont iconx intercal intercal jasmin jasminsable java javascript nodejs jq jq jsfuck nodejs julia julia ksh ksh lazy k na lisaac lisaac livescript livescript llvm asm llvm lolcode na lua makefile make maximum maximum minizinc minizinc msil monodevel mustache rubymustache nasm nasm neko neko nickle nickle nim nim objectivec gobjc ocaml ocaml octave octave ook na parigp parigp parser pascal fpcompiler perl perl perl rakudo php phpcli piet na pike postscript ghostscript ppt punched tape bsdgames prolog swiprolog promela spin spin python r rbase ratfor ratfor rc rc rexx reginarexx note language available ubuntu marked na repository includes implementation vendor see also vendorreadme detail frequently asked question q take pick q good news published book world obfuscated esoteric artistic programming explains write quine asciiart quine uroboros quine like quinerelay buy book amazoncojp also contains almost forty work including alphabetonly ruby program radiationhardened quine etc explains many technique write program bad news written japanese hope could translate english help earn royalty q language xxx missing see criterion language inclusion detail short please create deb package contribute ubuntu see also q really work q long take try cross world line q code fit display go q code generated sudo aptget install rake rubycairo optipng advancecomp rubychunkypng cd src clobber license mit license applies resource except file vendor directory file vendor directory thirdparties distributed different license see vendorreadme detail mit license mit copyright c yusuke endoh mametter hirekoke permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
369,Lobsters,scala,Scala programming,"Show Lobsters: Scalabitz, content discovery through Bit.ly's API",http://branchandbound.net/blog/scala/2013/05/launching-scalabitz,show lobster scalabitz content discovery bitly api,scalabitzcom follow scalabitz twitter finding content relevant search endpoint scalabitzcom different play reactivemongo context w api cake pattern deployment future development scalabitz,read may want take look scalabitzcom get idea rest post also follow scalabitz twitter finding content one harder problem web find relevant content link aggregator like reddit hacker news solve part problem crowdsourcing link twitter facebook tailored work good people follow startup like prismatic create personalized solution using machine learning many solution combining different approach short solved problem ago stumbled across bitly api wondered whether could provide alternative find interesting content data behind linkshortening service hence start experiment far believe answer cautious yes since people tend shorten link care relevant bitly api offer search endpoint start feeding scala keyword surprisingly many interesting scalarelated link surface also give lot false positive example turn many club restaurant called scala announcing event bitly link could use scala programming search phrase miss lot content scalabitzcom went scala search phrase mean something false positive currently result frontpage manually curated small keywordmatching heuristic content help quickly see whether content relevant partial screenshot admin page green good red bad fortunately volume new link discovered bitly api manageable avoid flooding frontpage moderating session truly approved link released onebyone timed fashion hence prepublish action screenshot put link publishing queue obviously far perfect goal make curation process fully automatic next step try implement supervised machine learning algorithm larger corpus training data correct publishreject decision available additionally different bitly endpoint provides data many clickthroughs link received count updated periodically scalabitz backend shown frontpage play one reason chose play framework wanted explore building webapp completely asynchronous nonblocking play help write reactive application level handling http request performing backend rest call querying database first two native play feature latter use reactivemongo driver even though driver yet pleasure use main building block application scalaconcurrentfuture introduced scala future api provides nice way async programming adopted play akka piece fit together perfectly give taste easily nonblocking asynchronous programming scala play consider following snippet scalabitzservicegetpublishedarticles flatmap article val clickfutures article article yield clickwscall article futuresequence clickfutures see code context github getpublishedarticles method return future list scalabitzarticle essentially promising list article available mongo point future next must specify happen result inside future succesfully completed defining transformation case using flatmap method fact flatmap monadic bind operation making general mechanism composing action future like going actual transformation article want retrieve click count since single bitly endpoint accepting multiple identifier need single call bitly article obviously nt want blocking sequentially therefore forcomprehension build list future string int based article got outer database call method clickwscall us play nonblocking w api perform call ultimately returning future variable clickfutures represents result call point future however blocking busy waiting w call feed resulting list type list future string int futuresequence method et voila creates new future list string int notice inversion type eventually containing click count associated id tuple asynchronously completed individual future completed automatically topic reactive application deserves blogpost surely follow adjustment paradigm feel almost natural old way almost exception error handling nt really tackled elegant manner yet another area improvement find nice model dependency injection service may cake pattern currently singleton object wired directly deployment many toyprojects past year none made comfort machine therefore still looking perfect production environment heroku current deployment platform scalabitz support play apps natively lowfriction free deploying app simple git push heroku nice since app rebuilt heroku deployed started bit slower ideal also sure long free tier work application guess find soon enough future development next automatically feeding scalabitz twitter account published link get nice feed scala article backend side thing next priority get accurate classification incoming link fortunately notching machine learning skill past year nice challenge one interesting idea generalize platform since could done scala range topic short ton idea developing scalabitz important question think promising pointless let know comment twitter
371,Lobsters,scala,Scala programming,Advanced routing in Play Framework,https://jazzy.id.au/default/2013/05/08/advanced_routing_in_play_framework.html,advanced routing play framework,hooking play routing mechanism implementing custom router comment powered disqus comment powered,frequently get question meet sort different routing need play framework built router enough user sometimes may encounter use case enough maybe want convenient way implement routing pattern whatever play allow pretty much anything blog post going describe common use case hooking play routing mechanism reason nt like play router want use modified router play allows easily globalonrouterequest method invoked routing default delegate play router override whatever want example override def onrouterequest req requestheader option handler reqmethod reqpath match case get controllersapplicationindex case post submit controllersapplicationsubmit case none see practically implemented little routing dsl could also delegate back default router invoking superonrouterequest req interesting thing could also done delegate different router based something request play router compiles instance routerroutes object called route default file route extension conf directory compiled go package name filename minus route two router fooroutes barroutes could implemented crude form virtual hosting like override def onrouterequest req requestheader option handler reqhost fooexamplecom fooroutesrouteslift req else reqhost barexamplecom barroutesrouteslift req else superonrouterequest req use case overriding onrouterequest may useful modifying request way routing done plugging completely different router eg jaxrs delegating different route file based aspect request implementing custom router saw previous example use play routerroutes interface another option implement real reason implement going delegate directly onrouterequest however implementing interface include another route file using sub route include syntax case nt come across typically look like foo fooroutes something people often criticise play nt support rail style resource routing convention used route commonly needed rest endpoint particular method controller although play come nothing box hard implement today project play everything need support using route includes syntax implementing router good news introducing feature like play soon also custom convention want implement probably find instruction helpful let start interface controller implement trait resourcecontroller extends controller def index essentialaction def newscreen essentialaction def create essentialaction def show id essentialaction def edit id essentialaction def update id essentialaction def destroy id essentialaction could provide default implementation return implemented implementing would require using override keywords think matter preference going write router router interface look like trait route def route partialfunction requestheader handler def documentation seq string string string def setprefix prefix string def prefix string route method pretty self explanatory function look handler request documentation used document router mandatory used least one rest api documenting tool discover route available look like brevity post wo nt worry implementing prefix setprefix method used play inject path router route includes syntax showed could see declared router path foo path injected using mechanism write abstract class implement route interface resourcecontroller interface abstract class resourcerouter implicit idbindable pathbindable extends routerroutes resourcecontroller private var path string def setprefix prefix string path prefix def prefix path def documentation nil def route given pathbindable way convert id string extracted path type accepted method pathbindable interface used cover normal route file convert type implementation route first going create regular expression matching different path private val maybeslash r private val newscreen new r private val id r private val edit edit r also going create helper function route require id bound def withid id string action essentialaction idbindablebind id id fold badrequest action badrequest actually method routerroutes take error message turn action return result ready implement partial function def route new abstractpartialfunction requestheader handler override def applyorelse requestheader b handler rh default b rhpathstartswith path rhmethod rhpathdrop pathlength match case get maybeslash index case get newscreen newscreen case post maybeslash create case get id id withid id show case get edit id withid id edit case put id id withid id update case delete id id withid id destroy case default rh else default rh def isdefinedat rh requestheader implemented abstractpartialfunction main method implement applyorelse match statement nt look much unlike mini dsl showed first code sample using regular expression extractor object extract id path note nt shown implementation isdefinedat play actually wo nt call good implement anyway basically implementation applyorelse except instead invoking corresponding method return true nothing match return false done using look like controller look like package controller object myresource extends resourcerouter long def index action def create id long action def custom id long action route file myresource controllersmyresource post myresource idcustom controllersmyresourcecustom id long see also shown example adding custom action controller obviously standard crud action going enough nice thing add many arbitrary route want want managed controller one whose instantiation managed di framework well let created another router class managedresourcerouter r resourcecontroller implicit idbindable pathbindable ct classtag r extends resourcerouter private def invoke action r essentialaction playmaybeapplicationmap app action appglobalgetcontrollerinstance ctruntimeclassasinstanceof class r getorelse action resultsinternalservererror application def index invoke index def newscreen invoke newscreen def create invoke create def show id invoke show id def edit id invoke edit id def update id invoke update id def destroy id invoke destroy id us globalgetcontrollerinstance method managed controller regular router use use simple package controller class myresource dbservice dbservice extends resourcecontroller long def index action def create id long action def custom id long action object myresource extends managedresourcerouter long myresource route file myresource controllersmyresource post myresource idcustom controllersmyresourcecustom id long final thing need consider reverse routing javascript router simple going go detail instead check final product feature posted may please enable javascript view comment powered disqus comment powered
374,Lobsters,scala,Scala programming,Storehaus is a library that makes it easy to work with asynchronous key value stores,https://github.com/twitter/storehaus,storehaus library make easy work asynchronous key value store,storehaus future storehauscore combinators storehausalgebra algebird list decayed value hyperloglog module planned module documentation storehaus wiki github project page contact storehaus mailing list github issue tracker get involved code conduct contributing committership committer committers contributor maven testing note mysql test travisyml redis test redis memcached memcached author contributor license apache license version,storehaus storehaus library make easy work asynchronous key value store storehaus built top twitter future storehauscore storehaus core module defines three trait readonly readablestore writeonly writablestore readwrite store trait tiny package comtwitterstorehaus import comtwitterutil closable future time trait readablestore k v extends closeable def get k k future option v def multiget k k set map future option v override def close time time futureunit trait writablestore k v def put kv k v future unit multiput map kv apply def multiput k kv map v map future unit kvsmap kv put kv override def close time time futureunit trait store k v extends readablestore k v writablestore k option v readablestore trait us future option v return type communicate one three state value value either definitely present definitely missing unknown due error perhaps timeout downed host readablestore store companion object provide bunch way create new store see linked api documentation information combinators coding storehaus interface give access number powerful combinators easiest way access combinators wrapping store enrichedreadablestore enrichedstore storehaus provides implicit conversion inside readablestore store object example mapvalues combinator useful transforming type existing store import comtwitterstorehausreadablestore import readablestoreenrich create readablestore int string val store readablestorefrommap map int string value value get behaves expected storeget get option string value calling mapvalues function v newv return new readablestore k newv val countstore readablestore int int storemapvalues ssize new store applies function every value way countstoreget get option int storehausalgebra storehausalgebra module add mergeablestore trait using keyvalue store aggregation going love mergeablestore package comtwitterstorehausalgebra trait mergeablestore k v extends store k v def monoid monoid v def merge kv k v future option v multimerge map kv apply def multimerge k kv map v map future option v kvsmap kv merge kv mergeablestore merge multimerge similar put multiput difference value added merge added store existing value previous value returned addition handled semigroup v monoid v twitter algebird project easy write store aggregate list decayed value even hyperloglog instance mergeablestore object provides number combinators store ease use storehaus provides implicit conversion enrichment mergeablestore access importing mergeablestoreenrich module storehaus provides number module wrapping existing keyvalue store enriching keyvalue store storehaus combinators hugely helpful u twitter writing job term storehaus store make easy test job use inmemory jmapstore testing memcachestore production planned module list module plan implementing link github issue tracking progress module documentation learn find link tutorial information around web check storehaus wiki latest scaladocs hosted storehaus github project page contact discussion occurs primarily storehaus mailing list issue reported github issue tracker get involved code conduct pull request bug report always welcome use lightweight form project governence inspired one used apache project please see contributing committership code conduct pull request review process tl dr send u pull request iterate feedback discussion get committer order get pr accepted current list active committers pull request found committers list contributor project found contributor maven storehaus module available maven central current groupid version module respectively comtwitter current published artifact suffix denotes scala version testing note use travisci set underlying store eg mysql redis memcached test order test pas local machine may need additional setup mysql test need mysql installed local machine installed run mysql command listed travisyml file redis test need redis installed local machine redis come bundled executable spinning server called redisserver storehaus redis test expect factory default connecting one redis server instance resolvable localhost port memcached need memcached installed local machine running default port author contributor shine among many license copyright twitter inc licensed apache license version
375,Lobsters,scala,Scala programming,Quickstart for using SBT (Scala) to generate your IntelliJ IDEA project for you (Gist),https://gist.github.com/sam/5223921,quickstart using sbt scala generate intellij idea project gist,,import sbt import key want use play project multiproject build import playproject object applicationbuild extends build true multiproject setup might metaproject repository submodules subprojects one project definition subproject would nt project path get started since dependency example well go either direction fullblown multiproject subfoldersmodules slimmed single project root folder lazy val myapp project myapp file dependson hasher sprouch project dependency setting scalaversion ignore system aquire latest version resolvers seq theory typesafe repository full mirror central practice libs manifested actual jar missing important include central typesafe repository maven central http typesafe repository http repotypesafecomtypesafereleases librarydependencies seq applies scala libs mean append current scala version artifact id since different scala version require build specific scalatest dependency writing orgscalatest test shortcut bump scala version need change one place scalaversion key instead needing also bump scala lib dependency declaration orgscalatest scalatest test orgmindrot jbcrypt jar name since java project scalatest default good avoid default testoptions would contain default play project testoptions test nil make sure compiler nt throw warning line like tostring enabling postfixops enable feature unchecked deprecation compiler warning scalacoptions seq language postfixops feature unchecked deprecation call task need bind project classpath dependency etc operate evolvetask using git url depend another project sbt clone build u project depend project lazy val sprouch rootproject uri git githubcomsamsprouchgit lazy val hasher rootproject uri git githubcomnyctohashergit example writing task syntax taskkey returnvaluetype name description body operator sbtism mean bind block code task least context learn reading sbt doc part little cargoculting get want long nt forget use operator binding task body lazy val evolvetask taskkey unit evolve ensures couchdb view current println hello funky world
376,Lobsters,scala,Scala programming,typelevel.scala | Powerful libraries for Scala,http://typelevel.org/,typelevelscala powerful library scala,,numeric abstraction spire numeric library scala intended generic fast precise using feature specialization macro type class implicits spire work hard defy conventional wisdom around performance precision tradeoff
377,Lobsters,scala,Scala programming,A new backend and optimizer for scalac,http://magarciaepfl.github.com/scala/,new backend optimizer scalac,toc goody new new optimizer test driving new optimizer getting started putting new optimizer pace faq comment benchmark test case bug report welcome goody http githubcommagarciaepflscalagit getting started new optimizer recommends using http faster code emitter leaner closure asts new new optimizer distinction intraprogram crosslibrary optimization inlining peril inlining gcsavvy closure singleton closure minimization closure state supported optimization intramethod optimization intraclass optimization wholeprogram optimization test driving new optimizer much add compilation time emitted code size benchmark speeding scalac http githubcomgkossakowskiscalacaspects bug fixed getting started http githubcommagarciaepflscala using sbt build project new backend optimizer using scala local directory meaning optimization level choosing bytecodelevel representation closure diagnostics putting new optimizer pace optimizing compiler standard library experimental feature http githubcommagarciaepflscalacomparemagarciaepfl http faq java source package methodhandles slow come programming language happily using comment benchmark test case bug report welcome http githubcomscalascalacontributors http http lampwwwepflchmagarcia,last updated february based scalascala february toc goody new new optimizer test driving new optimizer getting started putting new optimizer pace faq comment benchmark test case bug report welcome goody branch repo http githubcommagarciaepflscalagit improves three area scalac optimizer code emitter astlevel representation closure resulting compiler average faster also emits compact code mainline scala compiler small subset functionality already merged available scala released however bulk new backend wo nt practical purpose nt use small subset available scalac missing delta respect fullblown new backend huge delta get running please skip getting started new optimizer might officially supported optimizer everyone like telling major scala framework recommends using might also heard everything better methodhandles well know might turn way end instead new optimizer bcodeopt improves performance today leaving door open future development handling lambda manner forwardcompatible methodhandles additionally new optimizer maintainable consists several focused individually simple transformation combined implement bytecodelevel refactorings using asm http faster code emitter new optimizer run bcodeopt new bytecode emitter genbcode turn abstract syntax tree directly asm tree outperforming existing counterpart genicode genasm intermediate step build control flow graph needed disk writing class file building overlap source file larger speedup leaner closure asts release version scalac process closure creating inner class early compilation pipeline traditional approach closure conversion instead new backend postpones creation ast node closure simplifying job specialization erasure compiler phase modern closure conversion bytecode emitter take responsibility producing jvmlevel representation closure default compiler option yclosurify delegating new new optimizer distinction intraprogram crosslibrary optimization existing inliner activated inline callees found external library program compiled well callees program compiled way tell focus intraprogram case advantage applying intraprogram optimization runtime updated library may used granted binary compatible one intraprogram optimization activated via ybackend crosslibraries optimization activated via ybackend detail sec inlining inliner currently used scalac problem closure elimination implemented repeated method inlinings upon forced stop eg recursive method none previous inlinings undone leaving closure class trail duplicate code code may inlined thirdparty library jdk general method marked inline may inlined discussed thread peril inlining invocation cycle ie calling calling etc broken hitting maximum method size threshold leaving trail duplicate code behind instead new optimizer follows simple principle inline inlinemarked method always inline including separatecompilation thus new inliner deterministic dependent heuristic method size similar additional requirement method dispatch one marked inline found via static type receiver eg rangeforeach callsite type receiver must range subtype general super type inline method defined inlining conscious decision making explicit via type receiver straightforward result noinline annotation nt play role anymore new optimizer provides detailed logging performed inlinings well diagnostics inlining prof unfeasible culprit bytecode instruction fixing cause noninlining take way le effort following show log example log jvm successful closureinlining albeit null receiver could nt ruled callsite scalatoolsnscglobalexitingtyper ljavalangobject occurring method scalatoolsnscinterpreterjlinecompletion compilercompletion class membernamed lscalatoolsnscinterpreterjlinecompletion compilercompletion ljavalangstring lscalareflectinternalsymbols symbol warning example warning closureinlining failed scalacollectionimmutablelist mapconserve lscalacollectionimmutablelist contains instruction invokespecial scalacollectionimmutablelistloop lscalacollectionmutablelistbuffer lscalacollectionimmutablelist lscalacollectionimmutablelist lscalacollectionimmutablelist would cause illegalaccesserror class scalatoolsnsctransformspecializetypes val parent mapconserve specializedtype warning make sense loop local method scalacollectionimmutablelist inline final def mapconserve b anyref f b list b tailrec def loop mapped listbuffer b unchanged list pending list list b bytecodelevel counterpart loop emitted private javap output show private final scalacollectionimmutablelist loop scalacollectionmutablelistbuffer scalacollectionimmutablelist scalacollectionimmutablelist gcsavvy closure singleton closure minimization closure state anonymous closure depend apply argument example char filter function def deeplynestedmethod str string str filter char char char char f char char f char char case new optimizer avoids repeated allocation keeping static field singletoninstance reused deadcode elimination closure state comprises actually accessed feature useful android besides microbenchmarks vast ram nt masquerade redundant allocation supported optimization intramethod optimization collapse multijump chain target final destination via single jump remove unreachable code remove labelnodes linenumbers nt use remove dangling exception handler copy propagation deadstore elimination preserve sideeffects remove producer consumer pair consumer drop producer value consumed drop question simplify branch need taken get destination nullness propagation constant folding caching repeatable read stable value eliding boxunbox pair eliding redundant local var intraclass optimization private member class see use elided treeshake unused closure minimize field remaining minimization closureallocations refresh innerclasses jvm attribute wholeprogram optimization method inlining closure inlining test driving new optimizer much add compilation time new optimizer except wholeprogram step taskparallel intramethod optimization run parallel different method intraclass optimization run parallel different class visually reason limit worker pool thread configurable via ybcodeemitterthreads n emitted code size let take scalascala case study compiling srccompiler srcreflect one hand standard library using genicode genasm genbcode highlighted new optimizer produce smaller jar reflects much code reduction term instruction count smaller constant pool due late closure class lcc delegate class anonclosure instantiated usually already constant pool entry traditional closure conversion duplicated anonclosureclass benefit code size reduction well ybackend intramethod optimization trick moreover multicore ybackend nt increase appreciably compilation time actually thinking making default example method driver result instruction compiled ybackend yclosurify delegating instruction compiled ybackend genasm optimise actually optimise increase code size comparison ybackend fair v instruction byte still matter case one read v line javap output benchmark feedback welcome speeding scalac speedup range observed latest scalac upper range achieved compiler optimized new optimizer compile using ybackend genbcode yclosurify delegating ie unoptimized compilation using new bytecode emitter leaner closure asts one data point stopwatch lockercomptimer sec stopwatch quickcomptimer sec right new optimizer alone make scalac marginally faster instead speedup mentioned due compiler le work leaner closure asts b new bytecode emitter c lower gc overhead normal scalac dominated factor optimizable least short term example abound million allocated neither old new optimizer tuned reduce deeper insight http githubcomgkossakowskiscalacaspects actually tool like caliper scalameter tell much faster something run building optimizer useful know something run faster specially optimization play work toolset grzegorz jumpstarted provide insight new optimizer may well make code run faster find give try bug fixed previously bug got fixed old optimizer proceeded remove list later realized misrepresented ie made appear smaller really maintenance effort consumed old optimizer imagine list longer regression optimise illegal index overlap list variable long avoid duplicating closure body inlining closure inlined code nt forget nullcheck original receiver inlining creates duplicate anonclosureclass ca nt eliminated conditional optimization true x true false false pipeline classfile building writing genasm genbcode spurious scopeexit warning wrong line number information bytecode optimizer leaf reference class eliminated inlining regression inliner warning map literal optimize seek clarification necessary sufficient condition inclusion innerclasses jvm attribute phase closelim mess finally block duplicated return trycatchfinally return inside try patternmatch inside finally cause verifyerror inliner destroys line number information pathologically slow compilation time optimize nameddefault argument optimizer change behavior pattern matching x scrutinee x type assumed wrong icode optimizer nt dceaway trivial branch verifyerror yinline yinlinehandlers optimizer change behavior idiv ldiv irem lrem bytecode instruction result dropped explicit return cause scalac optimize fail javalangverifyerror using nested trycatch controlthrowable contradiction empty possible set indicating uninitialized location crashy interplay inlining dead code elimination mismatch stack height crash dead code elimination could find init addition icodereader bug asm class file reader used instead ydelambdafy method bug new backend nt require custom typing represent lightweightlambdas internally ydelambdafy method lambda takingreturning value class kaboom compiler ca nt compile ydelambdafy method getting started first step checking branch repository http githubcommagarciaepflscala git clone git githubcommagarciaepflscalagit cd git checkout b ant allclean ant using sbt build project new backend optimizer section using scala local directory cover change needed project buildscala scalaversion scalahome file scalawithnewbackendbuildpack scalacoptions seq option ybackend highest level new optimizer option scalawithnewbackend folder one get following step subsection cloning checking branch building compiler ant meaning optimization level optimization level includes optimization lower level assume new bytecode emitter genbcode active ybackend genasm backdoor use old backend ybackend genbcode use new code emitter emitting tree delivered cleanup ybackend intramethod optimization closure optimization except closure stackallocation detail ybackend performs minimization closure state closure singletonization ybackend intraprogram optimization includes method inlining closure stackallocation long affect compiled opposed peeking inside external library see ybackend crosslibraries optimization includes kind optimization caveat bytecode external parsed needed apply optimization eg optimization level pick rangeforeach inlined nota bene order ease migration old new optimizer error emitted mixing compiler flag old new optimizer case compiler silently fall back old optimizer feature allows keeping test suite test asking optimise one variant run without modification choosing bytecodelevel representation closure ydelambdafy inline good ol dedicated inner class closure available genasm option also genbcode ybackend yclosurify delegating aka late closure class ie creation postponed instead uncurry genbcode thus lowering working set compilation allows closurerelated optimization optimization level supported diagnostics diagnostics displayed via ylog jvm detail add yinlinewarnings enough adding ydebug show individual bytecode instruction subject message well listing enclosing method asm textual format always available unlike javap another useful flag ygenasmp folder similar ygenjavap emit textual file asm format others putting new optimizer pace optimizing compiler standard library attempt ant nightly clean checkout branch nt achieve desired effect old optimizer used optimize activates old optimizer fact compiler used first time compile new backend nt understand yet flag like ybackend order run test suite new optimizer one may hardcode optimization level choice shown run ant quickclean ant update take effect asrccompilerscalatoolsnscsettingsscalasettingsscala bsrccompilerscalatoolsnscsettingsscalasettingsscala trait scalasettings extends absscalasettings val ybackend choicesetting ybackend choice bytecode emitter choice bytecode emitter list genasm genbcode optimization level hardcoded shown one may also delete occurrence optimise buildxml buildantmacrosxml way ant allclean ant ant nightly run test suite build distribution optimized bcodeopt experimental feature principle method handle help specialization structural type lambda prototype branch put mhs work replace anonclosureclasses mixed result good smaller jar bad performance perspective delta respect nonmethodhandles backend http githubcommagarciaepflscalacomparemagarciaepfl source obtained via git clone git githubcommagarciaepflscalagit cd git checkout b ant allclean ant prototype requires target right scalac nt produce newest class file format meantime target used platform discussion performance http faq java source package scalatoolsasmoptimiz java class thin layer functionality top asm library written java package scalatoolsasmoptimiz contains intramethod optimization performed without knowledge scalalevel type bulk optimizer constrast written scala methodhandles slow come programming language happily using contradiction language use methodhandles scala would accomplish via structural type setting mhs faster java reflection instead prototype described sec leverage mhs area far important scala anonymous closure setting nt outperform late closure class new backend emits sec show test suite pass optimization level ybackend genbcode ybackend ybackend always possible include additional test correct optimizer also pas thus convinced correctness argument finding counterexample find one please post scalainternals discussion comment benchmark test case bug report welcome please help u help regarding additional test offer ca nt resist case like shoot scala contributor ranking http githubcomscalascalacontributors consider test welcome write bytecodelevel test start subclassing bytecodetest example unit test constant folding http miguel garcia http lampwwwepflchmagarcia
378,Lobsters,scala,Scala programming,What Makes Spark Exciting,http://dev.bizo.com/2013/01/what-makes-spark-exciting.html,make spark exciting,make spark exciting stephen haberman jan bizo spark hive replace hive amazon elastic map reduce hive job hard test hive hard extend objectinspector revolute cascading enter spark highest rating nonkeynote session spark job amazingly easy test sparkcontext spark easy extend rdd linq stringutils spark perfect several small pull request come come work bizo comment powered disqus comment powered,make spark exciting stephen haberman jan bizo currently evaluatingprototyping spark replacement hive batch report brief intro spark alternative hadoop provides cluster computing framework running distributed job similar hadoop provide spark job run handle splitting job small task assigning task machine optionally hadoopstyle data locality issuing retries task fail transiently etc case job processing nontrivial amount data log file regular basis currently use hive replace hive admittedly hive served u well quite awhile one engineer even built custom hadoop demand framework running periodic ondemand hadoophive job several month amazon elastic map reduce came without hive would hard u provide functionality probably let alone time frame said gotten point hive frequently invoked negative context damn hive positive personally admittedly even try avoid task involve working hive find frustrating well lot fun two primary reason hive job hard test bizo culture excellence engineering one thing mean testing really like test especially unit test quick run enable fast tdd cycle unfortunately hive make unit testing basically impossible several reason hive script must run local hadoophive installation ironically developer bizo local hadoop installation admittedly spoiled elastic map reduce u anyway would nt even know setup hadoop top head fire emr cluster hive script production location embedded log file report output stored hive script end lot path scattered throughout run dev version report dev bucket still relying raw log file usually compressedbinaryish format conducive setting lot really small simplified scenario unit test boundary case hive script provide abstraction one big hiveql file mean hard break large report small individually testable step despite limitation year ago developer dedicate effort prototyping approach would run hive script within ci workflow end prototype worked workflow wonky enough never adopted production project result hive report basically untested suck hive hard extend extending hive via custom function udfs udafs possible time pain as perhaps hive fault hadoop internals leaking hive various objectinspector hoop always seemed annoying deal given shortcoming bizo looking hivesuccessor awhile even going far prototype revolute scala dsl top cascading yet found something really excited enter spark heard spark start trying impressed spark presentation aws invent talk received highest rating nonkeynote session wanted learn one spark touted strength able load keep data memory query nt always io bound great exciting aspect u bizo spark either intentionally serendipitously address hive primary shortcoming turn huge strength specifically spark job amazingly easy test writing test spark easy class sparktest test def test real code val sc new sparkcontext quot local quot quot myunittest psuedo code val output runyourcodethatusesspark sc assertagainst output go detail runyourcodethatusesspark future post one liner start new sparkcontext program need execute spark job local installation required spark jar classpath eg via maven ivy local server startstop work technical aside local mode start inprocess spark instance backed threadpool actually open port temp directory real live spark instance granted usually work want done unit test ideally would hit file network io redeeming quality fast test run second okay yes slow compared pure traditional unit test huge revolution compared hive gladly take spark easy extend spark primary api scala dsl oriented around call rdd resilient distributed dataset basically collection support bulkaggregate transforms method like map filter groupby seen transforming entire collection method like get take assume inmemoryrandom access really short made example code rdd string like collection line val rdd string sctextfile quot bucketpath quot perform operation line val suffixed inmap line gt line quot suffix quot save new line back suffixedsaveastextfile quot quot spark job package map closure run extra large text file across cluster shuffling code data around actually calling closure ie linqlike introspection closure ast may seem minor huge mean framework code apis standing running closure custom function want run let say want use someutilityclass venerable stringutils import comcompanysomeutilityclass val rdd string sctextfile bucketpath val processed inmap line call normal method call someutilityclassprocess line processedsaveastextfile notice someutilityclass nt know running within spark rdd cluster take string done similarly spark nt need know anything code use witin closure need available classpath machine cluster easy part clusterjob setup copy jar around seamless hop rdd custom javascala code nice mean spark job end reading like regular normal scala code u good thing spark perfect full disclosure still early stage testing spark ca nt yet say whether spark wholesale replacement hive within bizo nt gotten serious performance comparison written large complex report see spark take whatever throw personally also admittedly somewhat infutuated spark point could clouding judgement proscons tradeoff hive one spark con far spark show seen stack trace nt happen usability wart hopefully cleared said even newbie find codebase small easy read several small pull request accepted already nice consolation compared daunting codebases hadoop hive also seen first spark job moving spark job written spark job running production taking longer expected given spark new tool u expect onetime cost come post coming explain approach spark detail example testing best practice running spark emr accessing partitioned logsto see come make sure subscribe blog better yet come work bizo help u please enable javascript view comment powered disqus comment powered
379,Lobsters,scala,Scala programming,The Neophyte's Guide to Scala Part 10: Staying DRY with higher-order functions,http://danielwestheide.com/blog/2013/01/23/the-neophytes-guide-to-scala-part-10-staying-dry-with-higher-order-functions.html,neophyte guide scala part staying dry higherorder function,,
380,Lobsters,scala,Scala programming,Play Framework - async by default,https://groups.google.com/forum/#!topic/play-framework-dev/30MqnKDp0Fs/discussion,play framework async default,,use google group discussion please enable javascript browser setting refresh page
381,Lobsters,scala,Scala programming,Overview of Reflection in Scala 2.10,http://docs.scala-lang.org/overviews/reflection/overview.html,overview reflection scala,heather miller eugene burmako philipp haller reify compiletime reflection runtime reflection macro runtime reflection runtime example inspecting runtime type including generic type runtime instantiating type runtime accessing invoking member runtime type runtime class java v runtime type scala compiletime reflection macro guide symbol tree type environment universe universe universe api doc mirror mirror mirror api doc,experimental heather miller eugene burmako philipp haller reflection ability program inspect possibly even modify long history across objectoriented functional logic programming paradigm language built around reflection guiding principle many language progressively evolve reflection ability time reflection involves ability reify ie make explicit otherwiseimplicit element program element either static program element like class method expression dynamic element like current continuation execution event method invocation field access one usually distinguishes compiletime runtime reflection depending reflection process performed compiletime reflection powerful way develop program transformer generator runtime reflection typically used adapt language semantics support late binding software component scala reflection capability instead one could use part java reflection api namely dealing providing ability dynamically inspect class object access member however many scalaspecific element unrecoverable standalone java reflection expose java element function trait type existential higherkinded pathdependent abstract type addition java reflection also unable recover runtime type info java type generic compiletime restriction carried runtime reflection generic type scala scala new reflection library introduced address shortcoming runtime reflection scalaspecific generic type also add powerful toolkit general reflective capability scala along fullfeatured runtime reflection scala type generic scala also ship compiletime reflection capability form macro well ability reify scala expression abstract syntax tree runtime reflection runtime reflection given type instance object runtime reflection ability inspect type object including generic type instantiate new object access invoke member object jump see example example inspecting runtime type including generic type runtime jvm language type erased compile time mean inspect runtime type instance might access type information scala compiler available compile time typetags thought object carry along type information available compile time runtime though important note typetags always generated compiler generation triggered whenever implicit parameter context bound requiring typetag used mean typically one obtain typetag using implicit parameter context bound example using context bound scala import scalareflectruntime universe ru import scalareflectruntime universe ru scala val l list l list int list scala def gettypetag rutypetag obj rutypetag gettypetag obj implicit evidence rutypetag rutypetag scala val thetype gettypetag l tpe thetype rutype list int first import scalareflectruntimeuniverse must always imported order use typetags create list int called l define method gettypetag type parameter context bound repl show equivalent defining implicit parameter cause compiler generate typetag finally invoke method l parameter call tpe return type contained typetag see get correct complete type including concrete type argument list int obtained desired type instance inspect eg scala val decls thetypedeclstake decls iterable rusymbol list constructor list method companion method isempty method head method tail method method method reverse method mapconserve method instantiating type runtime type obtained reflection instantiated invoking constructor using appropriate mirror mirror expanded upon walk example using repl scala case class person name string defined class person scala val ruruntimemirror getclassgetclassloader scalareflectruntimeuniversemirror javamirror first step obtain mirror make class type available loaded current classloader including class person scala val classperson rutypeof person typesymbolasclass classperson scalareflectruntimeuniverseclasssymbol class person scala val cm mreflectclass classperson cm scalareflectruntimeuniverseclassmirror class mirror person bound null second step involves obtaining classmirror class person using reflectclass method classmirror provides access constructor class person scala val ctor rutypeof person decl rutermnamesconstructor asmethod ctor scalareflectruntimeuniversemethodsymbol constructor person symbol person constructor obtained using runtime universe ru looking declaration type person scala val ctorm cmreflectconstructor ctor ctorm scalareflectruntimeuniversemethodmirror constructor mirror person init name string person bound null scala val p ctorm mike p person mike accessing invoking member runtime type general member runtime type accessed using appropriate mirror mirror expanded upon walk example using repl scala case class purchase name string ordernumber int var shipped boolean defined class purchase scala val p purchase jeff lebowski false p purchase purchase jeff false example attempt get set shipped field purchase p reflectively scala import scalareflectruntime universe ru import scalareflectruntime universe ru scala val ruruntimemirror pgetclassgetclassloader scalareflectruntimeuniversemirror javamirror previous example begin obtaining mirror make class type available loaded classloader also loaded class p purchase need order access member shipped scala val shippingtermsymb rutypeof purchase decl rutermname shipped asterm shippingtermsymb scalareflectruntimeuniversetermsymbol method shipped look declaration shipped field give u termsymbol type symbol need use symbol later obtain mirror give u access value field instance scala val im mreflect p im scalareflectruntimeuniverseinstancemirror instance mirror purchase jeff false scala val shippingfieldmirror imreflectfield shippingtermsymb shippingfieldmirror scalareflectruntimeuniversefieldmirror field mirror purchaseshipped bound purchase jeff false order access specific shipped member need mirror specific instance instance mirror im given instance mirror obtain fieldmirror termsymbol representing field type fieldmirror specific field use method get set getset specific shipped member change status shipped true scala shippingfieldmirrorget false scala shippingfieldmirrorset true scala shippingfieldmirrorget true runtime class java v runtime type scala comfortable using java reflection obtain java class instance runtime might noticed scala instead obtain runtime type replrun show simple scenario using java reflection scala class might return surprising incorrect result first define base class e abstract type member derive two subclass c scala class e type val x option none defined class e scala class c extends e defined class c scala class extends c defined class create instance c meanwhile making type member concrete case string scala val c new c type string c c type string anon scala val new type string type string anon use method getclass isassignablefrom java reflection obtain instance javalangclass representing runtime class c test see runtime class subclass runtime representation scala cgetclassisassignablefrom dgetclass boolean false since saw extends c result bit surprising performing simple runtime type check one would expect result question class subclass class c true however noticed c instantiated scala compiler actually creates anonymous subclass c respectively due fact scala compiler must translate scalaspecific ie nonjava language feature equivalent java bytecode order able run jvm thus scala compiler often creates synthetic class ie automaticallygenerated class used runtime place userdefined class quite commonplace scala observed using java reflection number scala feature eg closure type member type refinement local class etc situation like instead use scala reflection obtain precise runtime type scala object scala runtime type carry along type info compiletime avoiding type mismatch compiletime runtime use define method us scala reflection get runtime type argument check subtyping relationship two first type subtype second type return true scala import scalareflectruntime universe ru import scalareflectruntime universe ru scala def rutypetag rutypetag x boolean val lefttag rutypetag val righttag rutypetag lefttagtpe righttagtpe x implicit evidence scalareflectruntimeuniversetypetag implicit evidence scalareflectruntimeuniversetypetag boolean scala c boolean true see get expected runtime type indeed subtype runtime type compiletime reflection scala reflection enables form metaprogramming make possible program modify compile time compiletime reflection realized form macro provide ability execute method manipulate abstract syntax tree compiletime particularly interesting aspect macro based api used also runtime reflection provided package scalareflectapi enables sharing generic code macro implementation utilize runtime reflection note macro guide focus macro specific whereas guide focus general aspect reflection api many concept directly apply macro though abstract syntax tree discussed greater detail section symbol tree type environment reflection task require proper environment set environment differs based whether reflective task done run time compile time distinction environment used run time compile time encapsulated socalled universe another important aspect reflective environment set entity reflective access set entity determined socalled mirror mirror determine set entity accessed reflectively also provide reflective operation performed entity example runtime reflection invoker mirror used invoke method constructor class universe universe entry point scala reflection universe provides interface principal concept used reflection type tree annotation detail see section guide universe universe api doc package scalareflectapi use aspect scala reflection including code example provided guide need make sure import universe member universe typically use runtime reflection one import member scalareflectruntimeuniverse using wildcard import import scalareflectruntimeuniverse mirror mirror central part scala reflection information provided reflection made accessible socalled mirror depending type information obtained reflective action taken different flavor mirror must used detail see section guide mirror mirror api doc package scalareflectapi
382,Lobsters,scala,Scala programming,Where Akka Came From,http://letitcrash.com/post/40599293211/where-akka-came-from,akka came,recent work still come doc google,sparked recent work akka article wikipedia jonas viktor truly sat think back early day came merely intrigued listener part work article ongoing thought would instructive share list reference paper talk concept influenced akka today still comewe hope much fun perusing source weaving coding trouble embedded version please check doc google
384,Lobsters,scala,Scala programming,A new way to compile - IntelliJ Scala plugin,http://blog.jetbrains.com/scala/2012/12/28/a-new-way-to-compile/,new way compile intellij scala plugin,external build external build psi vfs typeaware highlighting brand new compiler mode intellij idea sbt compiler jit compilation understanding incremental recompilation new compile server fsc nailgun related zinc zinc scala maven plugin summary report,together idea release scala plugin brings brand new scala compilation subsystem main update compilation external incremental compilation handled sbt instead idea compile server implemented via nailgun instead fsc course lot explanation needed clarify detail external build external build one major feature intellij idea external build implies compilation task including project model interpretation performed separate process fully isolated main ide process result lower idea memory consumption free garbage collector reduce load idea code model psi virtual file system vfs speedup compilation according compile idea project without running idea e g command line build tool like ant maven etc additional benefit ability use automatic background compilation project kept compiled state time background compilation also used mean reveal code error typeaware highlighting keep code complexity information external build may check brand new compiler mode intellij idea blog post sbt compiler although sbt compiler sound like completely new kind scala compiler really see sbt compiler fit scala compilation let start big picture main task need perform scala project compilation need compile source code bytecode search kind error along way task always performed scalac javac java source matter tool used invoke ide sbt maven ant zinc whatnot scalac javac actual true compiler however know nothing project structure incremental compilation take list source file produce set corresponding compiled class need perform compilation incrementally opposed compiling source time strictly speaking task required project compilation even slow full project build whole point save time subsequent compilation need track code change recompile affected file harder sound need monitor timestamps store sourcetooutput mapping check public api change analyze direct transitive dependency including one scala java many tool capable feat exactly sbt compiler well idea need compile project part according project structure e split project separate possibly dependent module various type test production resource etc devise compilation order apply compiler setting provide required library tool like ides sbt maven etc us way describing storing project information bytecode still generated scalac javac project format still idea incremental compilation handled sbt instead idea use sbt project model sbt compiler act wrapper around scalac point update qualitative difference idea sbt discover dependency process change idea analysis bytecodebased languageagnostic finegrained robust timeproved method may rare unexpected glitch specific scala code example let define class c cscala add method name via implicit conversion mainscala compile run main method see output foo expect let add real method name class c next compilation discover output still foo term bytecode need recompile main class yet many additional case example related named default parameter demonstrate bytecode analysis enough proper incremental compilation scala code sbt compiler come rescue relies sourcebased analysis compiled code sbt intercept internal scala compiler data take account scalaspecific detail perform incremental compilation correctly though sbt analysis java class still bytecodebased bonus sbt us socalled compiler interface layer communicate scala compiler run multiple version inprocess scala compiler jvm reap benefit jit compilation either compilation multiple module using compile server avoid creation temporary file compiler argument avoid compiler output parsing make compiler jvm parameter scala facet obsolete worth noting one sideeffect using sbt compiler resulting java file handled scala project one least one scala facet need maintain coherent model dependency compilation java file event pure java module routed sbt use case perfectly ok unless need use nonstandard java compiler way sbt support inprocess java compiler well information sbt compiler may check understanding incremental recompilation article sbt documentation new compile server scala compiler quite complex piece software take time load initialize compile project hundred thousand file time negligible comparing time needed compile code however incremental compilation used need recompile file may take longer warmup scala compiler actually compile file one solution problem run scala compiler inprocess avoid compiler reinstantiation compiling subsequent module however still liberate u form first compiler initialization speedup compilation need use preinitialized compiler instance exactly compile server originally scala compile server implemented via fsc fast scala compiler work well enough several limitation fsc instance bound single compiler version compile server setting part project configuration fsc instance shared project fsc reuses symbol table run sometimes might produce various error compilation newfound ability run multiple version scala compiler single jvm better new compile server implemented using nailgun basically jvm process accessed via tcpip connection matter personal preference whether use compile server compile server configuration moved project setting application setting compile server applicationwide reused multiple compiler version shared project save lot ram compile server configuration located setting scala recommended use following jvm parameter scala compile server server maximize peak operating speed price longer startup time encourage soft reference retention use cache compiler instance xx provide enough memory loading multiple set compiler class ensure enough stack space recursive code scala compiler compile server used still recommended use parameter except maybe server project setting compiler additional compiler process vm option related zinc zinc standalone launcher sbt incremental compiler nailgun server created primarily used command line tool like scala maven plugin zinc new compilation subsystem use tool technique essentially equivalent much sense using launcher another launcher run sbt compiler nailgun directly rather via zinc besides need much data compiler display compilation message report progress compile ui form run annotation processor etc available zinc output zinc nailgun server also used idea process started without ideaspecific class communication protocol jvm classpath zinc build project must invoked another tool like maven store incremental compilation data using scheme differs idea one currently unite idea zincmaven incremental compilation even though much alike summary let sumup advantage new scala compilation subsystem le load idea process external project build background compilation sourcebased incremental compilation inprocess scala java compiler simplified project configuration applicationwide compile server must catch somewhere new compilation subsystem written completely scratch bug simply inevitable please report fix soon possible keep mind previous compilation subsystem still available always turned clearing use external build checkbox project setting compiler page may also check whether external build enabled existing project want know even detail source code tool
385,Lobsters,scala,Scala programming,Slick 1.0.0-RC1 released (Scala database query API),http://slick.typesafe.com/news/2012/12/21/slick-1.0.0-RC1-released.html,slick released scala database query api,http http typesafe subscription agreement,happy announce release slick scala show maven central within next hour find source code http first release candidate slick containing mostly bug fix top slick major bug fix documentation still accepted inclusion slick complete list change since bump version number switch scala revert crossversioning policy force comprehension inlining avoid illegal sql comprehension perform inlining nonfused generator fusecomprehensions cast bind variable type time correct type sql server generate proper name uuid type postgresql advance positionedresultiterator beginning foreach update scala version add documentation querying lifted embedding add custom sphinx extension linking api documentation document null v option semantics clarify versioning policy documentation introduce method aka preprend fix issue merge branch git githubcom slickslickgit fix date type support sql server deprecate column method option handling fixed direct embedding singleton allow fusion inner comprehension union wrapper deprecate oldstyle aggregation method fix lifting aggregation function reference generator bug fix correctly relabel selects implicit join relabelunions add documentation ast node lifted embedding feature add documentation testkit lifted embedding feature expand test db configuration variable lazily build scala slick extension release also come support oracle database system typesafe slick extension package find binary scaladoc artifact typesafe repository http note slickextensions opensource project available term typesafe subscription agreement also contained inside main jar
386,Lobsters,scala,Scala programming,"Experimental optimizer does closure-inlining, and strips unused private class members",https://groups.google.com/d/msg/scala-internals/5DO64yeHEBE/R-FBX5xM1IMJ,experimental optimizer closureinlining strip unused private class member,,use google group discussion please enable javascript browser setting refresh page
387,Lobsters,scala,Scala programming,Iteratees for imperative programmers,http://jazzy.id.au/default/2012/11/06/iteratees_for_imperative_programmers.html,iteratees imperative programmer,reactive stream handling iteratees iteratees practice csv parser enumeratees enumerator conclusion github project comment powered disqus comment powered,first heard word iteratee thought joke turn nt joke fact also enumerator ok enumeratees killing imperative programmer rather programmer feel comfortable writing imperative code functional code may little overwhelmed introduction iteratees assume think functional perspective well learnt iteratees although feeling comfortable functional programming every day still think like imperative programmer heart made learning iteratees difficult still imperative mindset thought good opportunity explain iteratees imperative programmer perspective taking functional knowledge granted imperative programmer want learn iteratees blog post going specifically looking play iteratee api concept learnt apply iteratees general let start explaining iteratees counterpart trying achieve iteratee method reactively handling stream data easily composable reactive mean non blocking ie react data available read react opportunity write data composable mean write simple iteratees one small thing well use building block write iteratees bigger thing use building block write iteratees even bigger thing stage everything simple easy reason reactive stream handling looking information iteratees guessing already know bit reactive stream handling let contrast synchronous io code trait inputstream def read byte familiar want read byte call read byte currently available read call block thread wait byte available reactive stream obviously way around pas callback stream want receive data call ready give data typically might implement trait look like trait inputstreamhandler def onbyte byte byte go let look thing would achieved pure functional world point nt want ask want thing way see later know anything functional programming know everything tends immutable function side effect trait side effect unless ignoring byte passed onbyte must changing state something el state somehow function handle data without changing state answer way immutable data structure work return copy updated new state inputstreamhandler functional might look like trait inputstreamhandler def onbyte byte byte inputstreamhandler example implementation one read input seq might look like class consume data seq byte extends inputstreamhandler def onbyte byte byte new consume data byte imperative functional trait react input stream might thinking reactive stream case wrong ready handle data onbyte method called building structure memory never case example storing file database receive data likely case reactive stream two way stream consumer reacting input stream producer must react ready input possible implement imperative world though thing start looking much functional simply start using future trait inputstreamhandler def onbyte byte byte future unit stream consuming byte u call onbyte attache callback future return pas next byte ready look netty asynchronous channel apis see us exactly pattern also implement something similar immutable functional api trait inputstreamhandler def onbyte byte byte future inputstreamhandler functional solution reactive stream handling good one start way handler communicate code us nt want receive input encountered error exception frowned upon functional programming could add thing handle soon interface would become quite complex hard break small piece composed etc going justify think see later show easy iteratees compose stage hope understood two important point firstly reactive stream handling mean twofold reacting code react stream ready stream react ready secondly say want functional solution mean solution everything immutable achieved stream handler producing copy time receivesend data understood two important point move introducing iteratees iteratees thing interface nt yet addressed first stream communicate u finished data u instead passing byte directly going abstract byte something type input byte type three possible implementation eof element empty let worry need empty yet assume reason might want pas empty input look like sealed trait input e object input case object eof extends input nothing case object empty extends input nothing case class el e e e extends input e updating inputstreamhandler get something look like trait inputstreamhandler e def oninput input e future inputstreamhandler e updating consumer handle might look like class consume data indexedseq byte extends inputstreamhandler byte def oninput input byte match case el byte futuresuccessful new consume data byte case futuresuccessful see get eof empty nothing u change state return writing another stream might receive eof close stream rather send eof next thing going make easier handler consume input immediately without create future rather passing byte directly pas function take function parameter function take byte parameter handler ready create function handle byte invoke function passed function call first function cont function short continue mean ready continue receiving input invoke many function let look code trait inputstreamhandler e def onbyte b cont input e inputstreamhandler e future b future b future b come b mechanism stream us pas state back handler nt worry make sure eventually invoke cont function eventually make sure b return make back caller look like consume iteratee let look class consume data indexedseq byte extends inputstreamhandler def onbyte cont input byte inputstreamhandler future b cont case inputel byte new consume data byte case see simple case ready handle input immediately immediately invoke cont longer need worry creating future want handle input asynchronously little complex take look later one final step producing iteratee api handler communicate back stream finished receiving data could two reason one finished receiving data example handler json parser might reached end object parsing nt want receive anymore reason encountered error json parser might syntax error sending data another stream might io error stream allow iteratee communicate stream going create trait represents state call trait step three state iteratee cont done error cont state going contain input byte inputstreamhandler function stream invoke done state contain result case consume seq byte error state contain error message addition done error state need contain left input nt consume important composing iteratees together one iteratee finished consuming input stream next pick first left one reason need inputempty consume input need way indicate step trait sealed trait step e object step case class done e remaining input e extends step e case class cont e k input e inputstreamhandler e extends step e case class error e msg string input input e extends step e nothing type parameter e type input iteratee want accept producing handler trait look like trait inputstreamhandler e def oninput b step step e future b future b consumer implemented like class consume data seq byte extends inputstreamhandler byte seq byte def oninput step step byte seq byte future b step stepcont case inputel byte new consume data byte case inputeof new inputstreamhandler byte seq byte def oninput cont step byte seq byte future b step stepdone data inputempty case inputempty one big difference notice receive eof actually pas done step function say done consuming input built iteratee interface naming nt quite right though rename trait obviously iteratee rename oninput fold since folding state one result get interface trait iteratee e def fold b folder step e future b future b iteratees practice far started requirement traditional imperative input stream described iteratee constrast looking code might think using really difficult seem like far complex need least conceptually implement reactive stream well turn although far shown basic iteratee interface lot full iteratee api offer start understanding using start see powerful simple useful iteratees remember iteratees immutable remember iteratees one three state cont done error depending state pas corresponding step class folder function well iteratee immutable one three state ever state therefore ever pas corresponding step folder function iteratee done done nt matter many time call fold function never become cont error done value never change ever pas done step folder function value left input one implementation done iteratee ever need look like case class done e e input e inputempty extends iteratee e def fold b folder step e future b future b folder stepdone e done iteratee ever need indicate done consume iteratee reached eof created done iteratee using anonymous inner class nt need could used done iteratee exact thing hold error iteratees case class error e msg string e input e extends iteratee e nothing def fold b folder step e nothing future b future b folder steperror msg e may surprised find exact thing applies cont iteratees cont iteratee pass function folder function iteratee immutable never going change consequently following iteratee usually good enough requirement case class cont e k input e iteratee e extends iteratee e def fold b folder step e future b future b folder stepcont k let rewrite consume iteratee use helper class def consume data array byte iteratee byte array byte cont case inputel byte consume data byte case inputeof done data case inputempty consume data csv parser looking lot simpler code focussed handling different type input could receive returning correct result let start writing different iteratees fact let write iteratee par csv file stream character csv parser support optionally quoting field escaping quote double quote first step write building block parser first want write something skip kind white space let write general purpose drop iteratee def dropwhile p char boolean iteratee char unit cont case inputel char p char done unit case inputeof done unit case dropwhile p since dropping input result actually unit return done predicate nt match current char reach eof otherwise return note done include input passed u remaining data going needed consumed next iteratee using iteratee write iteratee drop white space def dropspaces dropwhile c c c c r next going write take iteratee going mixture earlier consume iteratee carrying state invocation drop iteratee def takewhile p char boolean data seq char indexedseq char iteratee char seq char cont case inputel char p char takewhile p data char else done data case inputeof done data case takewhile p data also want write peek iteratee look next input without actually consuming def peek iteratee char option char cont case inputel char done char case inputeof done none case inputempty peek note peek iteratee must return option since encounter eof ca nt return anything finally want take one iteratee def takeone iteratee char option char cont case inputel char done char case inputeof done none case inputempty takeone using take one iteratee build expect iteratee mandate certain character must appear next otherwise throw error def expect char char iteratee char unit takeoneflatmap case c c char done unit case c error expected char got c inputel c case none error premature end input expected char inputeof notice use flatmap nt come across asynchronous world flatmap basically mean applies function result iteratee return new iteratee case using convert result either done iteratee error iteratee depending whether result expected flatmap one fundamental mechanism using compose iteratees together building block ready start building csv parser first part write unquoted value parser simple want take character nt comma new line one catch want result string seq char like takewhile produce let see def unquoted takewhile c c c n map v vmkstringtrim see used map function transform end result sequence character string another key method iteratees find useful next task parse quoted value let start implementation nt take account escaped quote parse quoted value need expect quote need take value quote need expect quote notice sentence said time method use right flatmap method talked let see quoted value parser look like def quoted expect flatmap takewhile flatmap value expect map valuemkstring probably start see usefulness flatmap fact useful iteratees many thing scala special syntax called comprehension let rewrite iteratee using def quoted expect value takewhile expect yield valuemkstring point hope getting excited code look like look like ordinary imperative synchronous code read value read value read value except synchronous imperative functional asynchronous taken building block composed piece readable code make completely clear exactly case sure syntax value left sign result iteratees right able used anywhere subsequent line including end yield statement underscore used say interested value using expect iteratee since return unit anyway statement yield map function give u opportunity take intermediate value turn single result understand let rewrite quoted iteratee support escaped quote reading quote want peek next character quote want append value read plus quote cumulated value recursively invoke quoted iteratee otherwise reached end value def quoted value seq char indexedseq char iteratee char string expect maybevalue takewhile expect nextchar peek value nextchar match case quoted value maybevalue case done char string value maybevalue mkstring yield value need write iteratee parse either quoted unquoted value choose one peeking first character accordingly returning right iteratee def value char peek value char match case quoted case none error char premature end input expected value inputeof case unquoted yield value let parse entire line reading end line character def value state seq string indexedseq string iteratee char seq string dropspaces value value dropspaces nextchar takeone value nextchar match case n none done char seq string state value case value state value case error expected comma newline eof found inputel yield value enumeratees similar way parse value could also parse line csv file reach eof time going something little different seen sequence iteratees using flatmap possibility composing iteratees another concept iteratees enumeratees enumeratees adapt stream consumed iteratee simplest enumeratees simply map input value stream something else example enumeratee convert stream string stream ints def toint enumeratee string int enumerateemap string toint one method enumeratee transform use method apply enumeratee iteratee val someiteratee iteratee int x val adaptediteratee iteratee string x tointtransform someiteratee method also aliased operator code equivalent code val adaptediteratee iteratee string x toint someiteratee also make enumeratee another iteratee exactly going value iteratee enumerateegrouped method take iteratee applies stream result application input feed iteratee transformed let look def csv enumerateegrouped value let get little bit creative enumeratees let say csv file big nt want load memory line series integer column want sum column let define enumeratee convert set value integer def toints enumerateemap seq string map toint another enumeratee convert sequence def tothreetuple enumerateemap seq int finally iteratee sum def sumthreetuple int b int c int iteratee int int int int int int cont case inputel x z sumthreetuple x b c z case inputempty sumthreetuple b c case inputeof done b c put together another method enumeratee called compose guessed let compose enumeratees alias operator let use val processcsvfile csv toints tothreetuple sumthreetuple enumerator finally iteratee consumes stream produce stream answer enumerator enumerator applied iteratee using apply method also aliased leave iteratee cont state ready receive input however enumerator contains entirety stream run method used instead send iteratee eof finished aliased play enumerator api make easy create enumerator passing sequence input enumerator companion object apply method create enumerator character using following code val csvfile enumerator stripmargintochararray feed iteratee like val result csvfile processcsvfile result case future eventually redeemed conclusion well long journey hopefully imperative programmer understand iteratees understand reasoning behind design easily compose also hope better understanding functional asynchronous programming general functional mindset quite different imperative mindset still getting head around particularly seeing nice simple iteratees work understand becoming convinced functional programming way go interested downloading code blog post want see complex json parsing iterateeenumeratee checkout github project example including parsing bytecharacter stream array chunk rather one time posted november please enable javascript view comment powered disqus comment powered
388,Lobsters,scala,Scala programming,Systems Programming at Twitter,http://monkey.org/~marius/talks/twittersystems,system programming twitter,system programming twitter facebook october history lesson twitter evolves late architecture system software stack programming datacenter language tool concurrent system desideratum detour little scala scala value static typing inference function value value object value object method container polymorphic pattern matching composition composition combinators flatmap flatmap gratuitous example concurrent programming future future future applying hollywood principle promise composition motivating example thumbnail extractor flatmap rescue getthumbnail flatmap failure combining many future collect simple web crawler functional style modular decomposition service service simple service filter filter sketch example filter filter stackable filter typesafe finagle rpc system finagle client server proxy putting together observability diagnostics observability diagnostics stats viz tracing githubcomtwitterzipkin zipkin profiling pprof web practice good practice ugly aside thrift githubcomtwitterscrooge open source githubcomtwitter githubcomtwitterutil githubcomtwitterfinagle scala school effective scala,system programming twitter facebook october marius eriksen twitter inc press space enter navigate next slide left arrow go backwards history lesson twitter evolves pure rubyonrails app mysql lot memcache materialized timeline memcaches social graph moved service delayed work queue starting move timeline serving system project godwit started move twitter ruby rail work begin shared serving infrastructure infrastructure matures ton work put porting application tfe go online tfe serf traffic year api traffic served new stack new work happens context work late architecture many open source component memcache redis mysql etc necessarily heterogeneous organized around service distinct responsibility isolated distributed computation data rpc system multiplexing http frontend crucial modularity load balancing system software stack programming datacenter concern include partial failure deep memory hierarchy split heap dynamic topology change variance latency tail heterogeneous component operator error taming resulting complexity central theme work language tool mismatch world view language tool target single computer application demand simultaneous use datacenter language designed serial execution world inherently concurrent concurrent system source concurrency world know client overlapping schedule highcapacity system efficient server must handle request simultaneously fanout fanin coordination server also client desideratum yet magic scaling sprinkle must program locally communicate globally clean concurrent programming model simple safe modular program uniform programming model message passing architecture high concurrency fault tolerant performant protocol support largely agnostic support http thrift memcache redis mysql observability diagnostics profiling optimization detour little scala scala use scala heavily system work hybrid fpoo language expressive statically typed rich type system run jvm interoperates java going introduce enough language grasp following example point language idea technique matter scala happens language value val int val string hello world static typing inference val map one two scala compiler work u using integer string must map int string function value val f int int x x f value object val itostring tostring true true scala pure object oriented language every value object multitude method invocation syntax value object method case class stock ticker string price double def stock price otherprice val goog stock goog val aapl stock aapl aapl goog true goog aapl false container polymorphic val stock seq stock goog stock aapl typed seq stock known c template new trick type class stockssorted seq stock aapl work ordering defined stock pattern matching important tool writing declarative program val newstate state match case idle busy case busy n busy compiler provide exhaustiveness check u guaranteeing function total every time see case partial function composition algebra learned two function g f compose h shorthand h x g f x scala pay attention type val f int string val g string float val h int float g compose f g compose f shorthand like algebra composition took two thing f g combine together make new thing h call widget combinators combinators probably use every day instance collection val l seq val x x val l map l map x x seq flatmap flatmap combinator versatile tool trait seq def flatmap b f seq b seq b name suggest combination map flatten def flatmap b f seq b map f flatten flatmap expanding seq flatmap x seq x x seq conditionals seq flatmap x x seq x else seq seq gratuitous example flatmap sufficiently important syntax sugar eg lazily compute pythagorean triple z streamfrom x streamrange z streamrange x z x x z z yield x z concurrent programming future future placeholder result usually computed concurrently long computation network call reading disk computation fail connection failure timeout div zero future represent concurrent execution future kind container empty full failed wait val f future val result f failure would result exception prefer using try fget match case return re case throw exc applying hollywood principle call call val f future string f onsuccess loginfo onfailure exc logerror exc promise future readonly promise writable future val p promise int val f future int p success failure psetexception new myexc composition motivating example far shown nothing rephrasing callback see future compose trait webpage def imagelinks seq string def link seq string def fetch url string future webpage build style thumbnail extractor def getthumbnail url string future webpage thumbnail extractor def getthumbnail url string future webpage val promise new promise webpage fetch url onsuccess page fetch pageimagelinks onsuccess p promisesetvalue p onfailure exc promisesetexception exc onfailure exc promisesetexception exc promise yuck variant alltoofamiliar callbackhell flatmap rescue want def getthumbnail url string future webpage must first fetch page find first image link fetch image link either operation fail getthumbnail also fails starting smell like flatmap trait future def flatmap b f future b future b getthumbnail flatmap def getthumbnail url string future webpage fetch url flatmap page fetch pageimagelinks failure compose well must recoverable flatmap need dual whereas flatmap operates value rescue operates exception trait future def rescue b f exception future b future b recovering error val f fetch url rescue case connectionfailed fetch url combining many future collect object future def collect f seq future future seq useful fanout operation eg fetch thumbnail def getthumbnails url string future seq webpage fetch url flatmap page futurecollect pageimagelinks map u fetch u simple web crawler def crawl url string future seq webpage fetch url flatmap page futurecollect pagelinks map u crawl u map pps ppsflatten apocryphal functional style emphasize declare meaning computation prescribe computed semantics liberated mechanic enhances modularity simple alter implementation without affecting existing code modular decomposition service service seen use future concurrent programming see network programming fit picture rpc dispatch request wait succeeds fails function type service req rep req future rep server implement client make use simple service server val multiplier futurevalue client multiplier onsuccess re println result r filter many common behavior service agnostic particular service common one retries timeouts exception handling stats filter compose service conceptually want alter behavior service agnostic service filter sketch val timeout filter val service service req rep val servicewithtimeout timeout andthen service filter function type filter reqin service reqout repin future repout example filter given request service dispatch timeout second val timeout req service service req within attempt authenticate request dispatching succeeds val auth req service isauth req service req else futureexception autherr filter stackable val timeout filter val auth filter val service service timeout andthen auth andthen service filter typesafe service requires authenticated request val service service authreq rep bridge filter val filt filter httpreq httprep authhttpreq httprep authenticate serve val authservice service httpreq httprep filt andthen service finagle rpc system finagle crude recap partial failure message passing future service finagle make possible client provide service server consume add behavior largely configurable load balancing connection pooling retrying timeouts rate limiting monitoring stats collection protocol agnostic codecs implement wire protocol manages resource client val client clientbuilder name loadtest codec http host build client service httpreq httprep client httprequest get server val service req futurevalue httpres codeok blah serverbuilder name httpd codec http bindto build service proxy val client clientbuilder serverbuilder client putting together recently wanted add speculative execution easy val backupreq filter req service val reqs seq service req timerdolater delay service req flatten futureselect reqs flatmap case return re seq othercancel futurevalue re case throw seq observability diagnostics observability diagnostics distributed environment standard tool loose efficacy difficult reason measure debugging process interaction vital stats liberally export stats important diagnostics optimization etc statsincr reqs statsaddmetric latencyms available curl host portstatstxt counter reqs metric latencyms viz tracing rpc tracing based dapper sigelman barroso et al tracerecord pc load letter tracetimefuture search rpc searchquery hello world tracing support introduced zero code change required user code zipkin trace aggregation system open source githubcomtwitterzipkin zipkin profiling situ cpu heap contention profilers incredibly useful optimization diagnostics curl host portpprofprofile pprof profile welcome pprof help type help pprof top total sample ljavalangobject lorgapachecommonscodecbinarybasencodec resizebuffer ljavautilarrays copyof ljavautilarrays copyofrange pprof web practice good emphasizing declarativedata flow style programming future combinators result robust modular safe simple system system big really finagle creates promise style programming also encouragesenforces modularity simple build higher level combinators eg generic hashring sharding stats speculative execution custom load balancer everything uniform lot implementor leeway tracing cancellation threadbiasing pool etc zero user code change practice ugly thing nt fit neatly cancellation hairy instance important clean separation sometimes troublesome eg always retry request different host layering never actually clean world messy abstraction result greater garbage collector pressure jvm good aside thrift custom thrift transport tracing soon request multiplexing service multiplexing compression upnegotiated fully compatible clientsservers thrift code generator scrooge githubcomtwitterscrooge produce scalaidiomatic structs service ifaces return future legacy generator future iface support open source true open source project lot external contribution tumblr foursquare stumbleupon serious deployment system software infrastructure githubcomtwittergithubcomtwitterutilgithubcomtwitterfinagle scala school effective scala
389,Lobsters,scala,Scala programming,What scaling has to do with language design,http://jazzy.id.au/default/2012/11/02/scaling_scala_vs_java.html,scaling language design,previous post online store something go wrong java scaling mean much excellent article java make asynchronous io simple java asynchronous io conclusion github repository spreadsheet comment powered disqus comment powered,previous post showed make sense benchmark scala java concluded saying come performance question asking scala help server falling unanticipated load post seek answer show indeed scala far better language building scalable system java however nt expect journey get easy start easy micro benchmark trying show real world apps nt handle load put hard hard create app small enough demo explain single blog post time big enough actually show real world apps behave load also hard simulate real world load going take one small aspect something might go wrong real world show one way scala help java wo nt explain tip iceberg far situation far feature scala help real world online store exercise implemented online store architecture store diagram see payment service search service store talk store handle three type request one index page nt require going service one making payment us payment service another searching store product list us search service online store part system going benchmarking implement one version java another scala compare search payment service wo nt change actual implementation simple json apis return hard coded value simulate processing time java implementation store going keep simple possible using straight servlets handle request apache common http client making request jackson json parsing formatting deploy application tomcat configure tomcat nio connector using default connection limit thread pool size scala implementation use play framework using play w api backed ning http client make request play json api backed jackson handle json parsing formatting play framework built using netty connection limit us akka thread pooling configured use default thread pool size one thread per cpu machine benchmark performing using jmeter request type index payment search thread spinning loop making request random pause request give average maximum throughput request per second per request type request per second let look result java benchmark graph plotted metric per request type median median request time index page next nothing search payment request also plotted line common metric web application show request give good idea slow request like show almost nothing index page search payment request final metric throughput show number request per second handled far theoretical maximum index showing request per second search payment request coming request per second result good java service handle load throwing without sweat let take look scala benchmark see identical java result surprising since java scala implementation online store absolutely minimal work code wise processing time going making request remote service something go wrong seen two happy implementation thing scala java shrugging load give happens thing nt fine dandy happens one service talking go let say search service start taking second respond point return error unusual failure situation particularly load balancing proxy proxy try connect service fails second giving gateway error let see application handle load throw would expect search request take least second respond others java result well longer happy app search request naturally taking long time payment service taking average second respond line second index page similarly impacted user going waiting long browsed site home page show throughput gone request per second good search service went whole site practically unusable soon start losing customer money scala app fair let find say anything else let point bounded response time search request actually taking second respond graph second next value hardly register line pixel high see search unusable payment index request response time throughput unchanged obviously customer nt going happy able search least still use part site see home page special even still make payment item hey google nt always use google search site might lose business impact limited benchmark see scala win hand thing start go wrong scala application take stride giving best java application likely fall java start bit counter many anticipated criticism people make benchmark first obvious one scala solution used asynchronous io whereas java solution nt ca nt compared true could implemented asynchronous solution java case java result would identical scala result however could done java developer nt ca nt nt written lot webapps java make call system rarely special circumstance ever used asynchronous io let show let say series call series remote service one depending data returned previous good old fashioned synchronous solution java user user getuserbyid id list order order getordersforuser useremail list product product getproductsfororders order list stock stock getstockforproducts product code simple easy read feel completely natural java developer write completeness let look thing scala val user getuserbyid id val order getordersforuser useremail val product getproductsfororders order val stock getstockforproducts product let look code time assuming making asynchronous call returning result promise look like java promise user user getuserbyid id promise list order order userflatmap new function user list order public promise list order apply user user return getordersforuser useremail promise list product product ordersflatmap new function list order list product public promise list product apply list order order return getproductsfororders order promise list stock stock productsflatmap new function list product list stock public promise list stock apply list product product return getstockforproducts product firstly code readable fact much harder follow massively high noise level actual code stuff hence easy make mistake miss thing secondly tedious write developer want write code look like hate developer want write whole app like insane finally nt feel natural way thing java idiomatic nt play well rest java ecosystem third party library nt integrate well style said java developer write code nt see nt good reason let take look asynchronous solution scala user getuserbyid id order getordersforuser useremail product getproductsfororders order stock getstockforproducts product yield stock contrast java asynchronous solution solution completely readable readable scala java synchronous solution nt weird scala feature scala developer never touch typical scala developer writes code every day scala library designed work using idiom feel natural language working fun write code like scala post one language write highly tuned app performance faster app written another language highly tuned performance post scala help write application scalable default using natural readable idiomatic code like ball lawn bowl bias scala bias helping write scalable application java make swim upstream scaling mean much example provided scala scaling well java nt specific example situation app failing high load nt let give example scala much nicer asynchronous io support help write scalable code using akka easily define actor different type request allocate different resource limit certain part single application start struggling receiving unanticipated load part may stop responding rest app stay healthy scala play akka make handling single request using multiple thread running parallel different operation incredibly simple allowing request lot little time klout wrote excellent article api asynchronous io simple offloading processing onto machine safely done without tying thread first machine java make asynchronous io simple java java probably going include support closure sort great news java world especially want asynchronous io however syntax still wo nt anywhere near readable scala code showed java released java released last year took year release java scheduled summer even arrives schedule long take ecosystem catch long take java developer switch synchronous asynchronous mindset opinion java little late asynchronous io far talked shown easy scala make asynchronous io help scale nt stop let pick another feature scala immutability start using multiple thread process single request start sharing state thread thing get messy world shared state computer system crazy world impossible thing happen world deadlock world updating memory one thread another thread seeing change world race condition world performance bottle neck eagerly marked method synchronized however bad simple solution make state immutable state immutable none problem happen scala help big time scala thing immutable default collection apis immutable explicitly ask mutable collection order get mutable collection java make thing immutable library help albeit clumsily work immutable collection easy accidentally forget make something mutable java api language nt make working immutable structure easy using third party library highly likely using immutable structure often requires use mutable structure example jpa requires let look code immutable class scala case class user id long name string email string structure immutable moreover automatically generates accessors property let look corresponding java public class user private final long id private final string name private final string email public user long id string name string email thisid id thisname name thisemail email public long getid return id public string getname return name public string getemail return email enormous amount code add new property add new parameter constructor break existing code define second constructor scala case class user id long name string email string company option company none existing code call constructor still work object grows item constructor constructing becomes nightmare solution java use builder pattern double amount code write object scala name parameter easy see parameter nt right order maybe might want modify one property done scala like case class user id long name string email string company option company none def copy id long id name string name email string email company option company company user id name email company val james user james james jazzyidau val jameswithcompany jamescopy company company typesafe code natural simple readable scala developer write code every day immutable aptly suited concurrent code allows safely write system scale done java tedious joy write big advocate immutable code java written many immutable class java hurt lesser two hurt scala take code use mutable object use immutable scala biased towards helping scale conclusion possibly go way scala help scale java nt hope given taste scala side come writing scalable system shown concrete metric compared java scala solution writing scalable code shown scala system always scale better java system rather scala language side writing scalable system biased towards scaling encourages practice help scale java contrast make difficult implement practice work interested code online store find github repository number performance test found spreadsheet posted november please enable javascript view comment powered disqus comment powered
390,Lobsters,scala,Scala programming,Ctrie - A Lock-Free Concurrent Hash Array Mapped Trie,https://github.com/axel22/Ctries,ctrie lockfree concurrent hash array mapped trie,ctrie lockfree concurrent hash array mapped trie http wwwscalalangorg run requirement run sbt update dependency compile package branch test benchmark,ctrie lockfree concurrent hash array mapped trie concurrent hashtrie ctrie concurrent threadsafe lockfree implementation hash array mapped trie used implement concurrent map abstraction particularly scalable concurrent insert remove operation memoryefficient support atomic lockfree snapshot used implement linearizable lockfree size iterator clear operation cost evaluating lazy snapshot distributed across subsequent update thus making snapshot evaluation horizontally scalable implementation written scala http wwwscalalangorg statically compiled language jvm fully compliant collection package scala standard library ctrie part scala standard library since version client using version use implementation info ctries run requirement run sbt sbt command run root directory project download appropriate scala library compiler maven start sbt interactive shell generally run sbt task start sbt shell update dependency within sbt shell type command update hit enter resolve library dependency maven eg scalatest library compile within sbt shell compile compile project run test using test command run benchmark using bench command package package contains uptodate version ctrie data structure ctries package contains previous version ctrie data structure difference previous version us one inode per stored keyvalue pair resulting additional indirection increased memory usage previous version useful compare performance memory usage preferred version package branch master branch contains uptodate version ctrie data structure snapshot support implemented nosnapshots branch contains version ctrie data structure without snapshot support branch useful compare snapshot support overhead experiment slowdown element dataset test test run using test command sbt shell also run selectively like testonly run test associated lnodes benchmark benchmark located srcbenchscala directory run using bench command sbt shell start new jvm instance warmup run selected snippet number time generally inspect parameter specific benchmark expects order run example run insertion benchmark element using thread repeat test time write bench specific benchmark evenly distribute work inserting sz element empty ctrie par thread also possible run benchmark batch produce range result using benchbatch task sbt shell run perl script gather data convert latex tikz format used figure benchmark presented paper available within project
391,Lobsters,scala,Scala programming,Understanding Play2 Iteratees for Normal Humans,http://mandubian.com/2012/08/27/understanding-play2-iteratees-for-normal-humans/,understanding iteratees normal human,loicd may remarked provides intriguing feature called counterpart main aim article make concept understandable u reasonably simple argument without functionalmath theory doc presented great tool handle data stream reactively nonblocking generic composable way modern web programming distributed environment lazy want know thing advice search iteratees google scala master iteration may know concept find java allows run collection element something step iteration let begin simple iteration way sum integer state iteration context action sideeffect function quite dangerous mutable variable also risky bit code please notice least notice also function transmits remaining element list new total return total without sideeffects imagine want generalize previous iteration mechanism able write something like imagine want compose first iteration another one imagine want apply iteration something else collection iteratees exactly meant let dive concept step step approach generic concept collection array statically typed chunk data nonblocking producer promise requires consumer produce produce chunk data someone consume generic iterate active consumer chunk data function accepts static typed chunk computes static typed result propagate immutable context state iteration simply state machine point view consider state machine charge looping state detects condition switch terminal state state also example understand writing iteratee much different choosing step depending type chunk received returning new helper deal difference return last iterateestate return promise result remember need result shall use need apply without retrieving result shall use promise iteratee iteratee promise iteratee mean build code around iteratee lazy way iteratee switch promise back want advice panic concept really simple understand piped applied without transform composed conclusion anyway use note weird operator,thanks loicd french translation article may remarked provides intriguing feature called iteratee counterpart enumerator enumeratee main aim article try make iteratee concept understandable u reasonably simple argument without functionalmath theory article meant explain everything iteratee enumerator enumeratee idea behind try write another article show practical sample coding iterateeenumeratorenumeratee doc iteratees presented great tool handle data stream reactively nonblocking generic composable way modern web programming distributed environment seems great iteratee exactly difference iteratee classic iterator certainly know use case bit obscure complex lazy want know thing iteratee abstraction iteration chunk data nonblocking asynchronous way iteratee able consume chunk data given type producer generating data chunk type called enumerator iteratee compute progressive result data chunk step iteration incremented total ex iteratee threadsafe immutable object reused several enumerator advice search iteratees google search google iteratee find obscure explanation based pure functional approach even mathematical theory even documentation play framework explains iteratee fairly lowlevel approach might hard beginner might seem bit tough handle iteratee concept presented really abstract way manipulating data chunk might seem complicated occult use would shame iteratees powerful provide really interesting new way manipulate data flow web app let try explain thing simple way pretend theoretical expert functional concept may even say wrong thing want write article reflects iteratee mean hope could useful article us scala code sample code understandable anyone notion coding promise use weird operator last paragraph code sample based incoming master code greatly simplifies rationalizes code iteratee surprised api look like sometimes diving deep iteratee sea want clarify call iteration try go progressively concept iterator iteratee may know iterator concept find java iterator allows run collection element something step iteration let begin simple iteration java classic way sum integer list int val l list var total contain final total var literator ithasnext total itnext total resxxx int without surprise iterating collection mean get iterator collection get element iterator something add element value total element go next element till element consume iterator iterating collection manipulate state iteration iteration finished naturally linked fact element iterator context updated one step next total action updating context item l total item bit better use iterator lforeach item total item introduce listforeach function accepting anonymous function int unit parameter iterating list element list call function update context total anonymous function contains action executed loop iterating collection anonymous function could stored variable reused different place val l list val list var total def step item int total item l foreach step total foreach step say ugly design function sideeffects us variable nice design even reset total second call completely true sideeffect function quite dangerous change state something external function state exclusive function changed entity potentially thread function sideeffects recommended clean robust design functional language scala tend reduce sideeffects function strict necessary io operation ex mutable variable also risky code run several thread thread try change value variable win case need synchronization mean blocking thread writing variable mean breaking one reason nonblocking web apps def foreach l list int def step l list int total int int l match case list total case list elt total elt case head tail step tail total head step l foreach l bit code please notice least var total disappeared step function action executed step iteration something step also manages state iteration executes following list empty return current total list element return total elt list element call step tail element new total total head step iteration depending result previous iteration step choose state continue iteration element stop iteration reached end list element notice also step tailrecursive function unfold full call stack end recursion return immediately preventing stack overflow behaving almost like previous code iterator step transmits remaining element list new total next step step return total without sideeffects yes code consumes bit memory recopies part list step reference element sideeffect us immutable data structure make robust distributable without problem notice write code shorter way using wonderful function provided scala collection lfoldleft total elt total elt article consider iteration based immutable structure propagated step point view iterating involves receiving information previous step context state getting currentremaining element computing new state context remaining element propagating new state context next step clear iteration let go back iteratee imagine want generalize previous iteration mechanism able write something like def sumelements def prodelements def printelements literate sumelements literate prodelements literate printelements yes know scala collection apis many thing imagine want compose first iteration another one def groupelements def printelements literate groupelements iterate printelements imagine want apply iteration something else collection stream data produced progressively file network connection database connection data flow generated algorithm data flow asynchronous data producer scheduler actor iteratees exactly meant tease would write previous sum iteration iteratee val enumerator enumerator enumeratorrun iterateefold total elt total elt ok look like previous code seem much false trust much least seem complicated see iteratee used enumerator concept tightly related let dive concept step step approach enumerator generic concept collection array till used collection iteration explained could iterate something generic simply able produce simple chunk data available immediately asynchronously future enumerator designed purpose example simple enumerator enumerator string val stringenumerator enumerator string enumerate alpha beta gamma enumerator integer val integerenumerator enumerator int enumerate enumerator double val doubleenumerator enumerator double enumerate enumerator file val fileenumerator enumerator array byte enumeratorfromfile myfiletxt enumerator generated callback generates string containing current time every millisecond notice forget time promisetimeout allows nonblocking mechanism val dategenerator enumerator string enumeratorgeneratem playapilibsconcurrentpromisetimeout current time format new javautildate enumerator producer statically typed chunk data enumerator e produce chunk data type e following kind input e chunk data type e ex input pizza chunk pizza inputempty mean enumerator empty ex enumerator streaming empty file inputeof mean enumerator reached end ex enumerator streaming file reaching end file draw parallel kind chunk state presented morenono element actually enumerator e contains input e put input e create enumerator containing one chunk pizza val pizza pizza napolitana val enumerator enumerator pizza enumeratorenuminput inputel pizza create enumerator containing pizza val enumerator enumerator pizza enumeratorenuminput inputempty enumerator nonblocking producer idea behind may know fully nonblocking asynchronous thus enumeratoriteratee reflects philosophy enumerator produce chunk completely asynchronous nonblocking way mean concept enumerator default related active process background task generating chunk data remember code snippet dategenerator reflects exactly asynchronous nonblocking nature enumeratoriteratee enumerator generated callback generates string containing current time every millisecond notice promisetimeout provide nonblocking mechanism val dategenerator enumerator string enumeratorgeneratem playapilibsconcurrentpromisetimeout current time format new javautildate promise would require whole article let say name corresponds exactly promise string mean provide string future error meanwhile block current thread release enumerator requires consumer produce due nonblocking nature nobody consumes chunk enumerator block anything consume hidden runtime resource enumerator may produce chunk data someone consume consumes chunk data produced enumerator deduced iteratee iteratee generic stuff iterate enumerator let windy one sentence iteratee generic translation concept iteration pure functional programming iterator built collection iterate iteratee generic entity wait enumerator iterated see difference iterator iteratee remember iteratee generic entity iterate chunk data produced enumerator something else iteratee created independently enumerator iterate enumerator provided iteratee immutable stateless fully reusable different enumerator say iteratee applied enumerator run enumerator remember example computing total element enumerator int code showing iteratee created reused several time different enumerator val iterator iterateefold total elt total elt val enumerator val enumerator apply iterator enumerator iterator iterator iterator run iterator enumerator get result val iterator run iterator val iterator enumeratorapply enumeratorrun slightly different function explain later iteratee active consumer chunk data default iteratee awaits first chunk data immediately launch iteration mechanism iteratee go consuming data considers finished computation initiated iteratee fully responsible full iteration process decides stop creates iteratee val iterator iterateefold total elt total elt creates enumerator val e enumerator injects enumerator iteratee push first chunk data iteratee enumerator iterator iteratee consumes many chunk requires nt bother result explain later explained enumerator producer chunk data expects consumer consume chunk data consumediterated enumerator injectedplugged iteratee precisely first chunk data injectedpushed iteratee naturally iteratee dependent speed production enumerator slow iteratee also slow notice relation iterateeenumerator considered respect inversion control dependency injection pattern iteratee function iteratee consumes chunk one one considers ended iteration actually real scope iteratee limited treatment one chunk defined function able consume one chunk data iteratee accepts static typed chunk computes static typed result whereas iterator iterates chunk data coming collection created iteratee bit ambitious compute something meanwhile consumes chunk data signature iteratee trait iteratee e e type data contained chunk applied enumerator e result iteration let go back first sample compute total integer produced enumerator int creates iteratee val iterator iterateefold total elt total elt val e enumerator run iteratee enumerator retrieve result val total promise int enumerator run iterator notice usage run see result total promise int total asynchronous world retrieve real total could use scala concurrent blocking await function good blocking api fully asyncnonblocking best practice propagate promise using promisemapflatmap result mandatory ex let println consumed chunk creates iteratee val e enumerator e iterateeforeach println eapply iterateeforeach println yes usage trivial shall use result necessarily primitive type concatenation chunk list ex val enumerator enumerator val list promise list int enumerator run iterateegetchunks int iteratee propagate immutable context state iteration able compute final total iteratee need propagate partial total along iteration step mean iteratee able receive context previous total ex previous step compute new context current chunk data new total previous total current element finally propagate context next step need next step iteratee simply state machine ok cool iteratee know stop iterating happens error eof reached end enumerator therefore addition context iteratee also receive previous state decides potentially computes new state sent next step remember classic iteration state described iteratee almost possible state iteration state cont iteration continue next chunk potentially compute new context state done signal reached end process return resulting context value one seems quite logical state error signal error current step stop iterating point view consider iteratee state machine charge looping state cont detects condition switch terminal state done error iteratee state doneerrorcont also iteratee remember iteratee defined function main purpose change one state another one let consider state also iteratee state iteratees done e remaining input e context received previous step remaining input e representing next chunk error e msg string input input e simple understand also error message input failed cont e k input e iteratee e complicated state built function taking input e returning another iteratee e without going deep theory easily understand input e iteratee e simply good way consume one input return new stateiteratee consume another input return another stateiteratee till reaching state done error construction ensures feeding iteration mechanism typical functional way ok lot information certainly wonder explain understand understand create custom iteratee let write iteratee computing total first element enumerator int show example defines iteratee int int def iteratee int int step function consuming function receiving previous context idx total current chunk context idx total idx index count loop def step idx int total int input int iteratee int int match chunk eof empty simply stop iteration triggering state done current total case inputeof inputempty done total inputeof found one chunk case inputel e first chunk call step incrementing idx computing new total idx cont int int step total e reached chunk stop iterating else done total inputeof initiate iteration initialize context first state cont launching iteration cont int int step using val promisetotal enumerator run promisetotalmap println print example understand writing iteratee much different choosing step depending type chunk received returning new stateiteratee enumerator helper deal iteratee could see iteratee api nowhere mention enumerator enumerator helper interact iteratee plug iteratee injects first chunk data need enumerator use iteratee even really easier well integrated everywhere difference enumeratorapply iteratee enumeratorrun iteratee let go back point evoked earlier look signature main apis enumerator trait enumerator e def apply iteratee e promise iteratee e def run iteratee e promise apply return last iterateestate apply function injects enumerator iteratee consumes chunk job return promise iteratee previous explanation may deduce returned iteratee might simply last state finished consuming chunk required enumerator run return promise result run step call previous apply function inject inputeof iteratee sure ended get last context iteratee promise example creates iteratee val iterator iterateefold total elt total elt val e enumerator let iterator consume chunk nt require result right val totaliteratee promise iteratee int int enumerator apply iterator run iteratee enumerator retrieves result promise val total promise int enumerator run iterator remember need result iteratee shall use run need apply iteratee enumerator without retrieving result shall use apply iteratee promise iteratee important know one thing know iteratee iteratee promise iteratee definition convert promise iteratee iteratee val p promise iteratee e val iteratee e iterateeflatten p convert iteratee promise iteratee pure promise val promise iteratee e promisepure using unflatten val promise iteratee e itunflattenmap unflatten return technical structure called step wrapping iteratee iteratee promise iteratee mean build code around iteratee lazy way iteratee switch promise back want discovered iteratee come across enumeratee new stuff xxxtee advice panic enumeratee concept really simple understand enumeratee pipe adapter enumerator iteratee imagine enumerator int iteratee string li string transform int string able transform chunk int chunk string inject iteratee enumeratee save val enumerator enumerator val iteratee iteratee string list string val list list string enumerator enumerateemap tostring run iteratee happened piped enumerator int enumeratee int string iteratee string list string step val stringenumerator enumerator string enumerator enumerateemap tostring val list list string stringenumerator run iteratee may understand enumeratee useful tool convert custom enumerator used generic iteratee provided api see certainly tool use coding enumerator iteratee enumeratee applied enumerator without iteratee useful feature enumeratee transform enumerate enumerator enumeratee signature enumeratee quite explicit use following val stringenumerator enumerator string enumerator enumerateemap tostring enumeratee transform iteratee bit stranger feature transform iteratee iteratee enumeratee val stringiteratee iteratee string list string val intiteratee iteratee int list string enumerateemap int string tostring transform stringiteratee enumeratee composed enumeratee yes final useful feature enumeratee val enumeratee val enumeratee val enumeratee compose easy see create generic enumeratees compose custom enumeratee need custom enumerator iteratee conclusion hope bit information lost anymore next step use iteratee enumerator enumeratee together write article presenting specific practical idea concept lot interesting feature worth precise explanation understanding clearly iteratee important help writing new iteratees also stay superficial use many helper provided iteratee api ok documentation yet complete working anyway use iteratee enumerator enumeratee want tell iteratee enumerator enumeratee funny tool people found functional construction useful many domain understand work promise begin use modern web application dynamically generated page anymore manipulate flow data coming different source different format different availability timing may serve huge amount data huge number client work distributed environment iteratee made case safe immutable good deal data flow realtime let tell buzzword see realtime webapp iteratee associated note weird operator certainly see lot operator code based iteratee enumerator enumeratee famous fish operator focus operator right alias real explicit word apply applyon compose try write article operator demystify practice people find code operator clearer compact people prefer word fun
392,Lobsters,scala,Scala programming,Dependency Management Flow — sbt Documentation,http://www.scala-sbt.org/release/docs/Detailed-Topics/Dependency-Management-Flow.html,dependency management flow sbt documentation,,
393,Lobsters,scala,Scala programming,"Show Lobsters: pirate, a Scala DSL for parsing CLI arrrrguments",https://github.com/mosesn/pirate,show lobster pirate scala dsl parsing cli arrrrguments,install art unix programming moses nakamura,pirate pirate par arrrrguments idea idea behind pirate option parsing command line tool easier best mechanism seen far command line tool option parsing builder python pattern forget called seemed like pain as even simple wanted able give program help text figure parse argument format import commosesnpiratepirate val helptext fad val argument split pirate helptext argument example wc import commosesnpiratepirate val helptext clmw file val argument l usrsharedictwords split pirate helptext argument uniq import commosesnpiratepirate val helptext cdu f int int inputfile outputfile val argument c f sortedfile split pirate helptext argument l import commosesnpiratepirate val helptext abcfghloprstuwabcdefghiklmnopqrstuwx file val argument l split pirate helptext argument java also use pirate java however curried function turned method two argument value argument object turned method import commosesnpiratepirate import commosesnpiratearguments public class main public static void main string args argument arg pirateapply f args systemoutprintln argflags size install want install pirate eh put buildsbt file resolvers sonatype http osssonatypeorgcontentrepositoriesreleases librarydependencies seq commosesn pirate help text help text come several different flavor flag value string flag flag look like f flag put together like fad flag mean expect boolean value whether argument f one argument fad passed value value look like v type type datatype expect passed example might n int double different type supported int double string string also named string especially useful filename string named anything except reserved keywords int string double may look like input option may want pas flag time option pas flag denoted square bracket wrap anything always mean passing optional argument array string flag square bracket started hyphen example faddd whitespace fine except flag flag least one flag must passed group flag considered covered multiple flag passed either repeating passing multiple flag back together example would acdf turn passing back either ad considered valid optional argument however one thing inside square bracket expected match everything example ab cd valid string pas would c ab dc ba b however ab would valid nt include flag cd order flag passed order multiple time time considered valid value passed also order however passed order within context example c valid argument string empty string passed argument passed c argument passed c always next example simplest invalid string right flag wrong order c todo following suggestion handle argument art unix programming unix style parsing argument basically completely implemented small adjustment might desirable adding option specifying value mutually exclusive although since nt preexisting way showing help text nt high priority however gnu style argument nt implemented interest nt think hard personally prefer unix style one else using wo nt bother would like functionality feel free file github issue email contributor moses nakamura
