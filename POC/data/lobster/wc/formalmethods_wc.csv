ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,formalmethods,CSE-Formal methods,An introduction to Formal Verification for Software Systems,https://www.moritz.systems/blog/an-introduction-to-formal-verification/,introduction formal verification software system,cc bysa wikipedia paris métro line implode system need formal verification verilog systemverilog existed paris métro line widespread adoption formally verify intend verify cc bysa wikipedia tamarin prover model checking verify turnstile cc bysa wikipedia temporal logic tla tla leslie lamport cache coherence raft simple tla example die hard breadthfirst search die hard finding solution diehardtla conclusion abstract state machine set theory firstorder predicate logic,cc bysa paris métro station saint lazare line platform screen door source wikipedia author flosch engineer designing completely autonomously operated paris métro line ensure safety ten million passenger year station across paris well smooth running train approach development software allows automation public transit french team decided use formal verification learn mean go introduction formally verified software note formal verification give return present two introductory example first example present turnstile logic flip coin one real still basic example tla methodology die hard vengeance problem two jug reading article gain overview fundamental formally verified software aware method avoid software bug cause business implode system need formal verification engineering method validate ie trying make product meet user requirement verify ie product conform validated specification realm computer hardware formal verification pretty old concept existence since tool like verilog superseded tool like systemverilog tool become part ieee specification designing verifying hardware however realm software engineering even though verification tool existed since late still standardized widespread use comparison hardware counterpart even see use formal verification see usually limited specific field like cryptography communication protocol frequently done academic circle good example implementing formal method verification automation paris métro line ever increasing complexity software layer abstraction reached time writing secure efficient resilient code requires level formal verification done whole software least important subsystem involved recent time seen widespread adoption formal verification industry leader like intel amazon microsoft product enormous complexity multiple system interacting one another formally verify realm software engineering first step formal verification asking following question intend verify verify intend verify setting verify whole system every line written code even though theoretically possible beginner mistake art engineering smart enough know corner cut one cut easy task take time practice experience take decision also keep mind writing verification system writing test unit functional fuzzing writing test achieving code coverage guarantee system work intended good test test unit test verification testing considered two side coin one complement completing picture cc bysa screenshot tamarin prover security protocol verification tool source wikipedia author mpdehnel formal verification involves writing proof abstract mathematical model system depending design system various option available used basis writing proof verification let u take case tamarin prover tool used symbolic modeling analysis security protocol abstraction happen protocol level agent interact protocol abstraction work well security cryptography related code approach discussed article would fine grained approach trying verify finite state machine called model checking verify finite state machine simplest mathematical model computation represent state rule transition one state another illustrative example let u take closer look working coin operated turnstile cc bysa turnstile revolution source wikipedia author sebasgui change made original work removed white background resized coin operated turnstile either closed state open state couple operation turnstile push insert coin applying operation given state allows transition state keep state depending operation applied state description represented diagram basically constitutes representation finite state machine aim verify given state machine turnstile work expected importantly enter unexpected state example want turnstile go unlocked without coin remain unlocked push made simple way thinking consider state machine linear timeline action transition linear timeline reasoning working machine state take absolute turnstile guaranteed open point time closed matter statement turnstile open truth value would vary time form basis temporal logic note one basic thing keep back mind would time continues move forward universe even change occur state machine verifying behavior state machine time one turn verify behavior system implementation course thing get complicated state machine distributed network thing happen concurrent system tla logo seen splash screen tla toolbox started edward lamport let take look specific tool called tla used achieve state machine verification concurrent system tla tla around since developed leslie lamport turing award winner addition writing formal specification also used design model document verify program especially concurrent system distributed system good toolkit since many system level application blockchain application tend combination distributed concurrent system play tla used write system level proof thing like memory cache coherence protocol distributed consensus protocol like raft addition tla specification also latex compatible making excellent way generate documentation proof simple tla example unfortunately tla come run mill hello world like programming language take slightly bigger example understand basic tla shall choose one basic introductory example given tla tutorial called die hard problem name problem come movie die hard vengeance two hero movie stop bomb exploding placing gallon water jug twist hero provided jug jug water faucet solve problem starting fill jug approach taken movie make sure jug empty start fill jug empty jug jug gallon space jug empty jug ground pour remaining gallon jug jug gallon space remaining jug fill jug pour gallon jug remaining space jug end manual process exactly gallon water jug alternative solution problem starting fill jug find leave solution comment manual description solution happens discrete step like following state finite state machine state well defined path next state going take look solution tla perspective going fancy stuff tla exploring basic feature tla work namely making step finite state machine note tla us breadthfirst search approach going state machine let u look tla description die hard problem variable describe specification variable jug problem variable big number gallon water jug small number gallon water jug invariant describe invariant within system case value jug inclusive likewise jug inclusive invariant keep sanity check operation jug help keep operation may result negative value jug overflow condition like gallon jug typeok small big initial state define entry point state machine make sure jug gallon start init big small action define various action possible given state machine help advance next state within state machine list various action possible action defined independently jug jug fillsmalljug small big big fillbigjug big small small emptysmalljug small big big emptybigjug big small small transferring water smalltobig big min big small small small big big bigtosmall small min big small big big small small also notice action also make sure next state unused jug example filling emptying mentioned change important specifying action make sure mention changed state changed system undefined state jug given point time next state define possible next state system using disjunction conjunction die hard example action possible independently hence use disjunction describe next state initial state next fillsmalljug fillbigjug emptysmalljug emptybigjug smalltobig bigtosmall specification finally define specification conjunction initial state next state spec init next big small finding solution need gallon water prevent bomb exploding invariant make sure state leading jug gallon error since part solution seek predicate called notsolved asserting big equal notsolved big description managed describe manual process finding solution state machine run within tla well defined action reach state tla main window presented show loaded program diehardtla result model checker show various reachable state simulation also set check typeok invariant make sure formula hold true every reachable state key finding solution big invariant way make model checker show u behavior ending jug equal false error trace show case last entry invariant becomes false desired solution die hard problem step error trace show jug filled end gallon water jug hence running simulation within tla helped hero come solution automatically defining model formal language bomb disarmed time conclusion demonstrated use tla play around state finite state machine however still actually stepped powerful tool available tla like emulating passing around message declaring theorem proof next part shall explore detail using tla write verification specification description written rfc formal verification gaining importance ongoing trend automate aspect life paris métro line mentioned us another way formal verification called bmethod us abstract state machine set theory firstorder predicate logic help define system approach different tla tight loop abstract machine implementation us refinement technique match abstract machine implementation approach formally verified software paris métro gave significant return city motivated switch autonomous orchestration another paris métro line
2,Lobsters,formalmethods,CSE-Formal methods,REMS - Rigorous Engineering of Mainstream Systems,https://www.cl.cam.ac.uk/~pes20/rems/,rem rigorous engineering mainstream system,,apps o api wire interface o compiler hardware
3,Lobsters,formalmethods,CSE-Formal methods,Edwin Brady Tells Us What's New in Idris 2,https://www.youtube.com/watch?v=nbClauMCeds,edwin brady tell u new idris,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature edwin brady tell u new idris youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature edwin brady tell u new idris youtube
4,Lobsters,formalmethods,CSE-Formal methods,Relaxing the Data Initialization Policy of SPARK,https://blog.adacore.com/relaxing-the-data-initialization-policy-of-spark,relaxing data initialization policy spark,access type assurance ladder strict data initialization policy subprogram boundary user guide,spark always development new language feature make every release tool previously unsupported ada feature like access type spark specific development however new feature generally take make actual user code feature going present experience exception used internally external user made actual release designed enhance verification data initialization whose limitation long standing issue spark assurance ladder data initialization associated bronze level easiest reach spark indeed time verification correct data initialization achieved automatically without much need user annotation code modification however user encounter case tool verify correct initialization data program even though correct recently good solution problem additional annotation effort could help user either accept check message verify proper initialization mean perform unnecessary initialization please tool changed recent release spark spark community recent preview spark pro post describe new feature called relaxedinitialization designed help situation first let get insight problem spark performs several analysis among flow analysis used follow flow information variable program fast scale well sensitive value program said otherwise follows variable name control flow try track valuesthe main analysis formal proof translates program logical formula verified automated solver precise model value variable every program point potentially slow requires user annotation summarize effect subprogram contract verification done flow analysis general easier complete associated bronze level assurance ladder whereas verification done proof require user input associated level silver higher spark data initialization general handled flow analysis indeed time enough look control flow graph decide whether something initialized however using flow analysis verifying data initialization induces limitation notably array handled whole flow analysis would need track value know index written component assignment result spark sometimes unable verify code initializes array part using loop example opposed single assignment aggregate require user annotation checking data initialization spark enforces strict data initialization policy subprogram boundary nutshell input entirely initialized subprogram entry output entirely initialized subprogram returnin recent release spark possible use proof instead flow analysis verify correct initialization data effect increasing precision analysis cost slower verification process increased annotation effort since tradeoff spark allows user choose want use flow analysis proof fine grained manner per variable basis default lighter approach preferred initialization check handled flow analysis use proof instead user annotate variable relaxedinitialization aspect demonstrate used lift previous limitation let u look example stated array treated whole flow analysis since initializing array using loop regular occurrence flow analysis heuristic recognize common case however fall short soon loop cover whole range array element initialized one time array read initialization particular last case occurs try describe behavior loop using loop invariant example add computes elementwise addition two array natural number type natarray array positive range natural function add b natarray return natarray pre e e e b e post k arange addresult k k b k re natarray begin arange loop re b pragma loopinvariant k re k k b k end loop return re end add correct initialization re verified flow analysis make sure invariant read initialized value remove invariant initialization verified course postcondition solution work around problem add useless initial value re using aggregate le satisfactory recent version spark instead specify want initialization re verified proof using relaxedinitialization aspect re natarray relaxedinitialization additional invariant program entirely verified note relaxedinitialization used bronze level assurance ladder longer enough ensure correct initialization data need reach silver level may require adding contract code refactoring let consider second major limitation classical handling initialization spark data initialization policy mentioned earlier requires input output subprogram entirely initialized subprogram boundary example consider following piece code try read several natural number string using readnatural procedure error output used signal error occurring read type errorkind emptyinput cannotread noerrors subtype sizerange natural range procedure readnatural input string result natural numread natural post numread inputlength read number input return numread number character read procedure read input string buffer natarray size sizerange error errorkind numread natural start positive range inputrange begin input empty set error code appropriately return inputlength size error emptyinput return end otherwise call readnatural either input entirely read reached end buffer start inputfirst bufferrange loop readnatural input start inputlast buffer numread nothing read input set error mode return numread size error cannotread return end reached end input start inputlast numread size error noerrors return end start start numread end loop completely filled buffer size error noerrors end read example following data initialization policy spark nt initialize buffer returning error addition input contains le number buffer initialized size launch spark example flow analysis complains stating ensure buffer initialized end read silence add dummy initialization buffer beginning example setting every element however want indeed might initialization costly caller read may forget check error status read buffer spark wo nt detect instead want spark know part buffer meaningful call check accessed caller use relaxedinitialization aspect exempt buffer data initialization policy spark annotate formal parameter need supply aspect subprogram mention formal parameter procedure read input string buffer natarray size natural error errorkind relaxedinitialization buffer procedure successfully verified spark note initialized size even call completes error indeed ada say copying uninitialized scalar example giving actual parameter subprogram call bounded error relaxedinitialization aspect would nt help would still need initialize size path returning read let write user code see everything work expected useread read number string print standard output procedure useread string buffer natarray error errorkind size natural begin read buffer size error n buffer loop adatextioputline nimage end loop end useread spark complains buffer might initialized call read indeed local buffer variable relaxedinitialization aspect set true spark attempt verify entirely initialized call want annotate buffer relaxedinitialization buffer natarray relaxedinitialization run spark example another failed initialization check time call putline inside loop one expected check error status call read fix code access index buffer initialized read procedure useread string buffer natarray relaxedinitialization error errorkind size natural begin read buffer size error error noerrors n buffer size loop adatextioputline nimage end loop end end useread unfortunately help failed initialization check call putline remains given information initialization buffer contract read usual data initialization policy spark nothing needed spark enforces output initialized call however since opted policy buffer need use postcondition describe initialization status call done easily using initialized attribute procedure read input string buffer natarray size sizerange error errorkind relaxedinitialization buffer post error noerrors buffer size initialized else size postcondition state error occurred buffer initialized size want code prove also need supply invariant end loop inside read pragma loopinvariant buffer initialized read useread entirely proved tweak useread access part buffer meaningful value spark produce failed initialization check relaxedinitialization aspect provides way opt strict data initialization policy spark work around inherent imprecision flow analysis value sensitive check enables verification valid program used scope proof technology offered spark find information user guide nt hesitate try project tell u think useful improve
5,Lobsters,formalmethods,CSE-Formal methods,fbpmn: formal tools for business process modeling,https://github.com/pascalpoizat/fbpmn,fbpmn formal tool business process modeling,fbpmn formal tool bpmn bag fifo causal realizable synchronous communication rsc fifo pair fifo inbox fifo outbox new property communication semantics easily taken account reference firstorder logic semantics communicationparametric bpmn collaboration tl dr impatient note httpserver simplehttpserver requisite window window getting source file platform linux osx getting prebuilt binary linux osx building source window bpmn model collaboration process model bpmn format bpmn standard verification using tla requirement optional available linux osx principle linux osx user window user analysing counterexample linux osx user easier analyse see file contained current directory window user verification constraint extending verification new communication model new property verify help suffix given sourcetarget file running json format see,fbpmn formal tool bpmn fbpmn support verification business process workflow collaboration property option complete proper completion dead activity safety soundness messagerelaxed soundness seven different communication semantics bag shared message multiset ordering fifo shared message queue ordering wrt emission time causal shared message causality structure ordering wrt message emission causality realizable synchronous communication rsc shared message buffer fifo pair message queue couple process ordering wrt emission time fifo inbox input message queue process ordering wrt emission time fifo outbox output message queue process ordering wrt emission time new property communication semantics easily taken account see sect extending verification reference sara houhou souheib baarir pascal poizat philippe quéinnec firstorder logic semantics communicationparametric bpmn collaboration international conference business process management bpm springer tl dr impatient use modeler choice model process collaboration verify model combination property communication semantics fbpmncheck working worker transformation done process node gateway sf mf x x depth x communication semantics done generate interactive counter example exploration page fbpmncheck analysis log file cd transformation done transformation done transformation done open one generated file browser play counter example using keyboard note security issue since interactive counter example exploration page load local file bpmn model either preferred serve page using server httpserver simplehttpserver npm install g httpserver run install httpserver cd httpserver cd simplehttpserver python cd httpserver python recommended deactivate local file restriction see requisite verify bpmn model need java se development kit get tla tool get fbpmn known working java tla tool version java tla tool version build fbpmn source required window also need stack build system haskell see window due bug please use curl s ostackzip l insecure http x stackzip stackexe getting source file required platform get tla theory used verification process get source file either way please set fbpmnhome environment variable place fbpmn source installed export fbpmnhomesomewhereonyourdiskfbpmn may typically add command shell configuration file eg bashrc zshenv linux osx getting prebuilt fbpmn binary linux osx binary stable version fbpmn built using continous integration server available working binary automatically built window please put fbpmn command directory path environment variable building fbpmn source required window cd fbpmn stack clean stack build stack install install fbpmn command place depends o use stack path localbin find directory please put directory path environment variable bpmn model fbpmn able deal collaboration either bpmn json format see sect please note also deal standalone process model workflow soon put standalone pool lane see example bpmn format please see bpmn standard subset bpmn support presented fig figure supported subset bpmn notation fbpmn tested model made camunda modeler get verification using tla requirement verification requires fbpmnhome set place fbpmn source installed see sect set place installed see sect fbpmn found command path see sect optional available linux osx fbpmncheck script directory source distribution found command path principle verification achieved two step see fig generate tla representation bpmn collaboration use representation tla implementation fol semantics bpmn collaboration perform verification using tlc model checker tla tool box figure fbpmn approach verification bpmn collaboration sequel use model fig figure example collaboration model linux osx user provide fbpmncheck script script directory source distribution two step described fig performs verification possible communication model fbpmncheck working worker transformation done process node gateway sf mf x x depth x x x depth x x x depth x x x depth x x x depth depth x x depth depth done window user working providing support window user analysing counterexample model analysed counterexample generated property yield linux osx user using fbpmncheck counter example log file generated directory analysis eg example cd l log file include information computation time counterexample verbose mode state action line col line col module edgemarks net pid qid result nodemarks pid qid generate version counterexample easier analyse use fbpmn get json version counterexample fbpmn transformation done fbpmn get graph version counter example format dot command see use command generate pdf png image fbpmn transformation done dot tpdf fbpmn generate interactive counter example exploration page use key navigate state counter example combination shiftkey go startend counter example fbpmn transformation done excerpt counter example model fig given fig figure last state animation counter example soundness model fig network unordered semantics first parameter three command source log file second one target jsondothtml file sufixes case fbpmn add given type readgenerated file three case counterexample filtered marking null perform transformation log file contained current directory provide three script script directory source distribution cd transformation done transformation done transformation done window user working providing support window user verification constraint model unbounded see eg model able check model may add constraint verification process given model file mymodelbpmn create file mymodelconstraint form constant constraintnode constraintonnodes constraintedge constraintonedges constraint overall constraint defined termes constraintnode constraintedge available constraint reuse defined extended example model may use constant constraintnode true constraintedge constraint constraintnodeedge state node marking maximum number token authorized node constrained edge marking maximum number token authorized edge overall constraint constraint node constraint edge extending verification add new communication model define new communication model semantics say mynet networkmynettla file fbpmnhometheoriestla copy one file fbpmnhometheoriestlaconfigs new file networknnmynettla directory nn number different existing communication model content networknnmynettla change line network implementation definition refer new communication model defined step local networkimpl instance networkmynet add new property verify define new property say myproperty end pwssemanticstla file fbpmnhometheoriestla create new file propnnmypropertycfg fbpmnhometheoriestlaconfigs nn number different existing property content propnnmypropertycfg refer property name defined step run deadlock specification spec invariant typeinvariant property myproperty help fbpmn get help fbpmn run fbpmn h fbpmn h usage fbpmn command formal transformation bpmn model available option h help show help text available command version print version repl launch repl transforms collaboration json dot transforms collaboration json tla transforms collaboration bpmn json transforms collaboration bpmn tla transforms tla log log json transforms tla log log dot transforms tla log log html versionand repl command must provide two argument source file target file transformation suffix given sourcetarget file running fbpmn json format json format model generated bpmn format using fbpmn general therefore need write model json format manually example model given file generated bpmn help writing json format fbpmn basic output format dot command see transform json file dot run fbpmn sourcefile targetfile neither sourcefile targetfile suffix correct one added fbpmn provided dot installed generate png picture collaboration using dot tpng sourcefiledot targetfilepng
6,Lobsters,formalmethods,CSE-Formal methods,Proving Algebraic Datatypes are “Algebraic”,https://soap.coffee/~lthms/posts/AlgebraicDatatypes.html,proving algebraic datatypes algebraic,proving algebraic datatypes equivalence introducing equivalence example canonical form morphism specialpurpose nonempty list operator morphism commutative associative neutral element operator morphism commutative associative neutral element absorbing element distributivity bonus algebraic datatypes metaprogramming history website repository equivalence introducing equivalence example canonical form morphism specialpurpose nonempty list operator morphism associative neutral element operator morphism neutral element absorbing element distributivity bonus algebraic datatypes metaprogramming metacoq,proving algebraic datatypes several programming language allow programmer define potentially recursive custom type composing together existing one instance ocaml one define list follows type list con list nil translates haskell data list con list nil rust enum list con box list nil coq inductive list con list list nil forth language specific construction type system ocaml haskell rust coq cite far equivalent said often share common formalism usually sometimes abusively referred algebraic datatypes expression used hood datatype encoded composition type using two operator sum product type b disjoint union type b term injected b go b conversely term b projected either b b cartesian product type b term b made one term one term b remember tuples algebraic datatype one constructor allows defining adhoc product type besides constructor mutually exclusive define term using two different constructor therefore datatype several constructor reminescent disjoint union coming back list type syntactic sugar algebraic datatypes list type equivalent unit list unit model nil case list model con case set type defined language together form mathematical sense hence name mean definition satisfy property commutativity existence neutral element article prove coq precisely commutative x x x forall x x x x xyyx associative x z x z x z forall x z x z x z x z xy zx yz neutral element e x x e x exists e forall x x e x commutative x x x forall x x x x associative x z x z x z forall x z x z x z x z neutral element e p x x e p x exists ep forall x x ep x distributivity x z x z x x z forall x z x z x x z x z yz absorbing element e x x e e exists ea forall x x ea ea record sum prod type defined coq follows inductive sum b type type inl sum b inr b sum b inductive prod b type type pair b prod b equivalence type introducing typeequiv typeequiv equivalence example canonical form list morphism nat specialpurpose list nonempty list sum operator sum morphism sum commutative sum associative sum neutral element prod operator prod morphism prod commutative prod associative prod neutral element prod absorbing element prod sum distributivity bonus algebraic datatypes metaprogramming revision revision table automatically generated git history website repository change description may always useful consult source file current version spellchecking typo invert table content revision table spellchecking new article algebraic datatypes equivalence type algebraic structure come equation expected true mean implicit dependency easily overlooked definition coq builtin relation state two term reduced constructor strong general case particular study algebraic structure type clear opinion structurally equal yet prove introducing typeequiv since type suitable reasoning algebraic datatypes introduce equivalence relation denoted say two type equivalent isomorphism denoted term type exists counterpart term type vice versa word equivalent exhibit two function f g x x g f x forall x x g f x x xg f x f g forall f g yf g coq translates following inductive type mentioned earlier prove two type equivalent exhibiting two function proving function satisfy two property introduce ltac notation end tactic notation equiv uconstr f uconstr g apply mktypeequiv f g tactic equiv f g turn goal form two subgoals prove f g form isomorphism typeequiv equivalence typeequiv equivalence prove demonstrating reflexive symmetric transitive typeequiv reflexive proof straightforward type equivalent x x x forall x x id id x x xid id x proof equiv id id qed typeequiv symmetric know exists two function f g satisfy expected property prove proof destruct equ f g equiv g f qed typeequiv transitive know exists two function satisfy expected property typeequiv similarly know exists two additional function compose function together prove reminder composing two function f g denoted f g thereafter consists using result f input g infix fun f g x g f x level come proof proof destruct equiv intro x rewrite rewrite intro x rewrite rewrite qed coq standard library introduces equivalence type class provide instance type class typeequiv using three lemma proven section example canonical form come back initial example given introduction writeup prove assertion list unit list list morphism mean list list prove defining instance proper type class use proper type class allows leveraging hypothesis form rewrite tactic personally consider providing instance proper whenever possible good practice would encourage coq programmer nat specialpurpose list notice using typeequiv prove lemma natandlist nat list unit proof equiv fix tolist n match n tt tolist end fix oflist l match l rst oflist rst end induction x auto induction auto rewrite ihy destruct qed nonempty list introduce variant list contains least one element modifying nil constructor take one argument instead none demonstrate relation list nonemptylist reveals alternative implementation nonemptylist precisely prove forall type nonemptylist list bit cumbersome much first define conversion function prove satisfy property expected typeequiv sum operator sum morphism mean prove compose together function whose existence implied end introduce auxiliary function lrmap prove sum morphism defining proper instance instance sumproper proper typeequiv typeequiv typeequiv sum proof addmorphismtactic intro equiv lrmapsum lrmapsum intro xy cbn rewrite rewrite intro xy cbn rewrite rewrite qed sum associative associativity sum straightforward prove pose particular challenge perspective reader assume article wellwritten sum neutral element need find type e e type similarly x x x x natural number x x x empty type type term false act natural element type reminder empty type coq defined following syntax note following definition erroneous inductive empty using print type illustrates issue inductive empty prop buildempty omitted coq defines inductive type one constructor coming back empty neutral element sum highlevel perspective make sense construct term type empty empty contains exactly number term intuition convince coq intuition correct like providing two function type empty empty first function inl one constructor sum second function tricky write coq come writing function type empty exact trick allows coq encode proof contradiction combine fromempty generic function everything prove empty prod operator similar proven sum expect le text section prod morphism prod neutral element prod absorbing element absorbing element empty like absorbing element multiplication natural number neutral element addition prod sum distributivity finally prove distributivity property prod sum using similar approach prove associativity prod sum bonus algebraic datatypes metaprogramming algebraic datatypes suitable generating function demonstrated automatic deriving typeclass haskell trait rust datatype expressed term sum prod know deal two construction start metaprogramming take example fold function fold function function take container argument iterates value container order compute result introduce foldtype input canonform output tactic compute type fold function type input whose term prod sum canonform whose result type output interested reader familiar ltac ltac foldargs b r lazymatch unit exact r b exact r r c type exact ltac foldargs b c r ltac foldargs b r type b c type exact r ltac foldargs b c r c type exact c ltac foldargs b r exact r end ltac currying match b c exact ltac currying b c exact end ltac foldtype b r exact ltac currying ltac foldargs b r b r use compute type fold function list definition foldlisttype outputed print foldlisttype fun type list type type type exactly could expected match type foldright generating body function possible theory probably ltac without modifying bit typeequiv could nice usecase metacoq though
7,Lobsters,formalmethods,CSE-Formal methods,Weak and Strong Fairness,https://www.hillelwayne.com/post/fairness/,weak strong fairness,workshop stuttering stutterinvariant stutter unfair weak fairness appendix fairness action action strong fairness strongly fair actually strongly fair lock convoy thought newsletter appendix formalizing fairness,process revising workshop realized one particular important aspect tla fairness something struggled explain well everybody struggle explain well also great example messy concurrent system get figured would make good post blog stuttering take following spec clock used tla mostly clear context module clock extends tlc integer variable hour init hour next hour hour hour next value hour else hour hour system start init evolves according next spec init next hour liveness hour property hour aka eventually time pm spec guarantee property hold one way could fail time tick pm pm time tick pm pm throw clock lake crazy right entire idea specification see assumption need make system safe explicitly say throw clock lake spec permit throw clock lake spec also permit timeouts infinite delay crash anything equivalent system making progress tla specification must stutterinvariant stutter temporal step reassign variable value outside observer look like nothing happened stutterinvariance make composing spec tla miserable experience opposed specification language composing spec punishment sinner hell system unfair infinite sequence stutter step valid behavior equivalent agent system ever making progress clock unfair allowed stutter infinite number time init time next time next time stutter time stutter time stutter time something learner encounter relatively late learning tla people get along fine long time safety property violated entering new state even system infinitely stutter safety property still hold however liveness property require system eventually reach state blocked stuttering fact entire spec unfair liveness property hold system might never take step first place usually interested unfair system next step unfairness weak fairness action weakly fair always happen eventually happen thread always make progress make progress language tla write spec init next hour wfhour next next possible eventually happen guarantee liveness want read formalize fairness see appendix fairness action weak fairness applies specific action description state change spec whole spec give u lot flexibility instead implemented spec tick hour hour else hour hour break hour hour next tick break spec init next hour wfhour next next action composed two subactions tick break spec ensures two action together fair individually mean might never see break spec could choose tick every single time instead wrote spec init next hour wfhour break ensure least one break action get lot expressive power level precision example declare missioncritical subset system fair let peripheral element stay unfair make part workflow fair guaranteed start workflow guaranteed finish even make action part next fair though dragon kind thing strong fairness weak fairness implies existence strong fairness weak fairness say action always enabled eventually happens guarantee cyclically enabled action happen spec worker abstract job succeed fail fails retries succeeds make succeed retry weakly fair leave fail unfair variable status init status start changestatus status status succeed changestatus start done fail changestatus start fail retry changestatus fail start next succeed fail retry unchanged status fairness wfstatus succeed wfstatus retry spec init next status fairness liveness status done liveness hold fairness clause say succeed guaranteed permanently enabled problem permanently enabled could following error trace init status start fail status fail retry status start fail status fail retry status start every step marked status start succeed enabled retry enabled action point disable guaranteed happen back status start succeed enabled fail happens change since succeed keep flipping enabled disabled weak fairness guarantee happens want make sure succeed happens need make strongly fair strong fairness say action permanently disabled eventually happen unlike weak fairness action intermittently enabled still guaranteed happen fairness sfstatus succeed wfstatus succeed wfstatus retry satisfies liveness strong fairness considered le important weak fairness weak fairness safer assumption realistically feasible even case strong fairness required satisfy liveness property people sometimes opt drop property instead build strong fairness microsoft thread scheduler actually strongly fair guarantee thread make progress make probabilistically nearcertain return avoid lock convoy thought find intuitive may worked long time consistently find beginner struggle concept maybe something easier teach writing workshop hope made little bit clearer shared first draft essay newsletter like writing subscribe appendix formalizing fairness formally define weak fairness follows wfv enabled v v whole lot nonalphanumeric character going step step v v action happens value v change call achange enabled v enabled special operator roughly true action happen even happen wrote enabled v v would say achange possible happens would break stutterinvariance achange enabled stutter instead write enabled v v fine mean achange eventually happen fine another stutter even completely different state long future point happens enabled v v say achange eventually happens often happens valid achange happen instead write always eventually aka achange happen infinite number time enabled v v finally prepend condition eventually always instead forcing achange enabled force reach point achange permanently enabled give u weak fairness get strong fairness replace initial enabled v v instead guaranteeing achange eventually always enabled guarantee always eventually enabled strong fairness powerful always implies weak fairness action permanently enabled also cyclically enabled
8,Lobsters,formalmethods,CSE-Formal methods,The TodoMVC Showdown: Testing with WebCheck,https://wickstrom.tech/programming/2020/07/02/the-todomvc-showdown-testing-with-webcheck.html,todomvc showdown testing webcheck,todomvc webcheck webcheck temporal logic action specification v model todomvc benchmark highlevel feature specification issue specification todomvcspecpurs editing mode test result routing hidden item indeed specified official documentation todomvc documentation future bright sign newsletter twitter hillel wayne felix holmgren martin janiczek tom harding martin clausen,post share result testing todomvc implementation using new testing tool named webcheck explain specification work problem found todomvc implementation mean project webcheck last three month used spare time build webcheck browser testing framework combining idea propertybased testing pbt tla linear temporal logic functional programming webcheck write specification web application instead manually writing test case specification describes intended behavior finitestate machine invariant using logic formula written language inspired temporal logic action pdf tla webcheck generates hundred thousand test run verify application accepted specification test generated webcheck sequence possible action determined current state dom time action think webcheck exploring state space automatically based dom introspection find user behavior problem biased lazy human unlikely think write test job instead think requirement improve specification time specification v model propertybased testing testing state machine using model model capture essential complexity system test sut need functionally complete useful oracle system conceptually simple egâ keyvalue database engine problem system inherently complex egâ business application big pile rule useful model tends grow complex system webcheck specification like model implement complete functional model system leave detail specify important aspect application example wrote specification state time one spinner nothing else possible specify pbt general modelbased pbt seen todomvc benchmark since start project used todomvc implementation benchmark webcheck developed general specification todomvc implementation todomvc contribution documentation highlevel feature specification project cypress test suite curious could find anything new using webcheck early checking mainstream framework implementation found angular mithril implementation rejected specification submitted issue todomvc issue tracker invigorated initial success decided check remaining implementation gradually improve specification generalized specification work nearly implementation listed todomvc website use old markup us id instead class element support variant specification looking test result might want look webcheck specification published gist todomvcspecpurs gist includes brief introduction webcheck specification language write specification write proper documentation specification language eventually give taste work least excluded support old todomvc markup keep specification simple possible specification cover feature todomvc yet notably leaf editing mode entirely cover usage local storage todomvc local storage disabled webcheck might refine specification later think found enough motivate using webcheck todomvc application likely webcheck would used project specify thing leave others astute reader might noticed specification language look like purescript pretty much purescript webcheckspecific addition temporal modality dom query decided write custom dsl instead write purescript interpreter way specification author use tool package purescript ecosystem work great far test result test result running webcheck todomvc specification example listed todomvc website use short description problem recurring explain detail example problemsnotes pure javascript backbonejs angularjs clear input field filter change emberjs dojo knockback canjs polymer react mithril clear input field filter change vue marionettejs compiled javascript kotlin react spine dart gwt closure elm angulardart race condition initialization filter implemented typescript backbonejs typescript angularjs typescript react reagent scalajs react scalajs bindingscala jsofocaml humble gopherjs evaluation todomvc backbonejs requirejs knockoutjs requirejs inconsistent first render angularjs requirejs need custom readywhen condition canjs requirejs lavaca requirejs clear input field filter change cujojs race condition initialization filter implemented sammyjs somajs duel clear input field filter change kendo ui dijon enyo backbonejs exoskeleton ractivejs react alt react backbonejs aurelia angular riot jsblocks realtime socketstream firebase angularjs nodejs express gcloudnode nonframework implementation vanillajs add pending item iteraction vanillajs add pending item iteraction todocount strong missing jquery passed failed testable filter implemented way switching item specified todomvc documentation routing race condition initialization event listener attached time newtodo form rendered although unlikely quick enough focus input press return post form navigate user agent page query paremeter egâ indexhtml text todomvc end world system want happen inconsistent first render application briefly show inconsistent view render valid initial state knockoutjs requirejs show empty list item bottom even though footer hidden item need custom readywhen condition specification awaits element matching todoapp todoapp old markup dom taking action case implementation need modified specification instead awaits frameworkspecific class egâ ngscope inconvenience testing implementation using webcheck rather error input field input field enter todo item argue defeat purpose todo list application indeed specified official documentation add pending item iteraction pending item input field another action taken toggle change filter etc pending item submitted automatically without return key press todocount strong element missing element matching selector todocount strong must present dom item showing number active item described todomvc documentation state cleared implementation error issue test implementation make hard perform repeated isolated testing state knowledge cleared test isolation broken point key requirement currently placed webcheck sut must stateless respect new private browser window future version webcheck add hook let tester clear system state test run missingbroken link listed implementation seems moved decommissioned note decide problem bug todomvc project maintainer see problem disagreement implementation specification good chunk humility order testing system designed built others future bright happy effective webcheck far month sparetime prototyping hopefully something polished make available soon open source tool run saas version subscription model maybe time come maybe webcheck part todomvc testing perhaps project interested webcheck please sign newsletter post regular project update definitely spam also follow twitter comment question please reply following thread thanks hillel wayne felix holmgren martin janiczek tom harding martin clausen reviewing draft post
9,Lobsters,formalmethods,CSE-Formal methods,Train Sidings - A TLA+ Example,https://www.heinbockel.eu/2019/12/08/train-sidings-a-tla-example/,train siding tla example,tla tla die hard diverse array algorithm amazon storage service tlc model checker example train siding railway similar computer network developing model github straightforward behavior run model preventing disaster solving deadlock overcoming stuttering avoiding crash resetting semaphore fair train finishing model real conclusion limitation write model reading readability outlook,tla tla modeling language one model technical system discrete state used describe many thing jug problem die hard diverse array algorithm amazon storage service power tla come tlc model checker check model certain property property could invariant statement true every possible state like buffer overrun check temporal property eg algorithm eventually finish tla extremely useful tool software developer well many system engineer force u think first system supposed write concise unambiguous language math reason model tlc model checker model complete also specification system going implement share fellow engineer reason started playing around tla article want share created working model tla step step including pitfall error one run example train siding easiest way learn anything try wanted example motivates simple enough could get quick result obvious came example railway world might noticed like write railway similar computer network example want model simple train siding place railroad line two train pas one train go first one two track wait train passed two train must collide obviously reason track protected semaphore semaphore show go signal green light may train pas example might look trivial first one could intuitively maneuver train via siding without possibility collision however intuitive thinking might enough model railroad real railroad life stake reality need make sure train never collide even dispatcher control switch semaphore bit sleepy distracted got hunch even though example may look trivial might prove interesting exercise developing model first step modeling always decide include model exclude decided focus simple siding divided part track track track two switch switch switch protect possible scenario added four semaphore assumes train always take track train always take track choose track take also chose model train one track switch given moment never occupy two reality would never case train eventually cover least two piece track even understand problem let start modeling find tla model step github load tla toolbox run first thing needed decide variable describe model variable basis formulate everything else invariant liveness property action came set variable variable two variable position train four variable signal semaphore two variable position switch note variable state track could modeled siding also way track keep information train currently instead train remember track way around easier check train collision went next variable need initialized happens action init init position train position train stop signal semaphore stop signal semaphore stop signal semaphore stop signal semaphore straight direction switch straight direction switch train start left side track train opposite side semaphore show stop signal switch set position straight tla always good idea add socalled type invariant possible value variable could take given state take value listed model checker throw error protect mistake action part model type invariant look like position signal stop go typeinvariants position position signal signal signal signal straight left straight right notice created two set position signal beginning repeat multiple time ok basic next step go ahead design action model need think property system important one safety property train must never collide must true every possible state invariant luckily contain location train easy formulate invariant nocollisions check property model would pretty dull model train move would fulfill way good passenger would ever move destination need formulate goal tlc want train reach destination track train track train eventually make goal temporal property formulated way crossingsuccessful temporal liveness property also catch situation train get stuck checking property important see later straightforward behavior complex system work invariably found evolved simple system workedjohn gall getting point rather simple design behavior system would train move semaphore change signal switch move could tackle everything decided begin simplest behavior possible let train move straight line without obeying switch semaphore would realistic would teach proper tla syntax next step forward figure describe simple action train track move switch else train switch move track programmer intuitively tried solve tla ifthenelse construct even work two branch wanted another else resulted strange error syntax checker also case statement similar switchcase programming language work expected finally figured tla way move train straight line z unchanged read like equal step next step wrapped mind around construct became quite natural took must admit notice also definition unchanged action complete without definition variable change action otherwise model checker complain forgotten part specification action move train quite similar repeat action combined lead first specification specification next spec init next var mean complete specification convention called spec combination initial state init action next describes following state strange syntax bracket around next confusing first simple term mean specification also allows step none variable change important property specification add default allow tlc find socalled stuttering behavior run model first version specification complete run first import tla file tla toolbox create new model add two invariant typeinvariants nocollisions check also add property crossingsuccessful run model setting throughout project invariant stay second see result model check found error invariant nocollisions violated well big surprise current model train move straight ahead collide error trace follow disaster step step tlc show train moved track hit train moved way collision could happened see tlc stop first error one problem shown enough keep u moving preventing disaster step know working model move train detects collision think prevent collision semaphore protect piece track denying access track currently occupied let see happens train obey semaphore add condition action train movement move train straight line go go unchanged change state semaphore model yet initially position stop train collide let run new model find file see error message change longer invariant nocollisions instead report deadlock deadlock general condition tlc check situation model take new step tlc right situation neither train move safe state still want let continue solving deadlock semaphore need get moving mean action move new signal like notin straight go unchanged condition first check train waiting front semaphore switch needed next condition train track train want enter prevent collision last condition switch leading track pretty straightforward condition semaphore look similar find complete code also added another action change state switch change switch straight left left straight unchanged train chance crossing additional action next action look much bigger next might ask synchronize different action make sure first change switch semaphore train well specification allows step happen time principle want goal check possible combination error even unlikely one tlc care probability possibility allows u build reliable system find also corner case happen rarely disastrous consequence think happen run model fulfill desired property switch semaphore change state well actually forgot change next state action train movement never follow switch siding check switch state model incomplete expected deadlock two train would stuck semaphore got quite different error say temporal property violated hm mean look stack trace give clue end stuttering step let look secondtolast step step train progressed track stuck semaphore train still original position also leave follow switch siding model stop instead switched switch left state action still enabled situation model continuously step switch left straight actually reached deadlock one one part model keep busy problem solve one overcoming stuttering stuttering occurred train follow switch yet need change action train accordingly first added action change switch find real deal come train follow switch like move train via siding go straight else go unchanged well train pas every track protected semaphore one run model checker sure oh collision must something overlooked let check error trace train proceeds track stop semaphore look good far switch change right position semaphore go green train proceeds switch good far disaster happens switch change straight position train right top train continue straight ahead crash train turn model failed fulfill one basic requirement reallife interlocking semaphore turn go switch train path must changed train passed section track look like done tlc saved designing potentially dangerous system avoiding crash specification fix problem found last step added check action change switch must change corresponding semaphore say stop one showing green light semaphore switch state stop stop straight left left straight unchanged crash finally fixed train pas hoped done ran model another error crash fixed deadlock detected happened last state train standing track right next far good semaphore go rule introduced switch must change situation train continue missing resetting semaphore well ignored one important rule interlocking tlc reminded semaphore train pas never reset stop mean track section train entered protected train follow train must happen real life requirement semaphore switch stop train passed model yet added extending action train whenever passed semaphore semaphore switch back stop go stop change semaphore stop train passed unchanged unchanged go unchanged stop unchanged unchanged find change also add check switch changed train currently would also possible otherwise reality check done employing track occupancy detector axle counter detect train enters leaf certain section track however still final model deadlock fixed show another stuttering behavior train already track train stuck switch happened semaphore blocking train turn specification allows behavior switch keep changing state time without train ever taking last step forward happens property missing spec fairness fair train default action enabled tla might happen might well happen useful check system behaves certain thing expected never occurs like message never received case interested happens train stop moving maybe engine broke blockage track whatever model concerned kind thing situation handled automated system reality case train need human intervention get moving every train movement line blocked ok model assumes every step taken eventually taken done adding weak fairness action tell tla action eventually taken train get stuck part spec spec init next var wfvars wfvars wfvars wfvars wfvars wfvars wfvars wfvars added weak fairness action think none ever get stuck sake model consciously ignoring fact part system might fail reality find new definition let see result model check get deadlock error let see hm train track train track goal reached finally error message turn model describes step point train reached destination move nothing happens classical deadlock want extend model let train go would never finish exercise decide remove check deadlock hopefully error quite yet tlc report another stuttering step train advance track train still track instead train one progressing switch keep changing state forever seems like dispatcher interlocking make mind finishing model real spoiler alarm really last step fulfill check step added rule decide priority two train waiting pas switch rule simple train waiting must pas first otherwise track never become free human dispatcher rule obvious computer let extend action switch stop stop straight change switch one track free left left straight unchanged change finally report error model state distinct end step lead train passing without crashing done find last version model file conclusion started example wanted something simple enough could finish short time still complex enough teach something interesting finished example weekend took time expected thought understood problem situation well tlc found many problem model would never spotted valuable lesson even though problem seems simple might hidden detail modeling system software ahead building find many problem would shown much later process limitation nature model include detail reality simplification instance train model occupy one piece track time reality train certain length least temporarily occupy two even three piece track eg pas switch also equipment never break model well reality wanted model behavior would need much sophisticated model would need define failure mode piece equipment reaction need check extended description still fulfills highlevel model constructed example tla support kind multilayered description model refinement need extended model dig deeper topic first real project tla tried use basic language construct confuse many thing one could use specification tuples function external module might part future example write model working model developed understanding general process modeling tla first thing think variable describe system basis part model invariant temporal property well action operate variable decided variable describe temporal property invariant always helpful include type invariant check assign value variable allowed created property add model check start running model running model early often help find error quickly gone wrong direction long place action formulated helpful start simplest thing check invariant violated ideally clear expectation result step validate expectation result model check system behaves differently go one step back think cause different behavior might teach something tla system grow system simple behavior sophisticated one running model check step guide development process check passed done decide result maybe use specification piece software gon na write maybe jotted done idea system want discus colleague want dig deeper refine model come even closer reality reading readability writing specification also made mental note read specification somebody else written due syntax tla specification similar structure variable go top description spec next bottom action action declared first used another action read top bottom see detail first get big picture much easier read way round read declaration variable jump bottom definition spec next work way upwards action way build understanding whole specification step step reading specification might easier use prettyprinted pdf version tla toolbox create replaces ascii representation mathematical symbol actual mathematical symbol thus bit easier read also thing improve readability spec use section separate different part spec make easier spot eg definition invariant end action start section created adding line least four dash assign meaningful name variable programming try avoid name like x var meaning try assign name construct program see given condition tlc check name like crossingsuccessful technical reason could configured model check check instead crossingsuccessful program make difference reader spec outlook building relatively simple example learned lot tla feel prepared write sophisticated specification explore construct tla hope learned something following experiment tool best way learn use would happy example inspired try tla idea
10,Lobsters,formalmethods,CSE-Formal methods,Stan - A static analysis tool for Haskell (similar to errorprone for Java),https://github.com/kowainik/stan/blob/master/README.md,stan static analysis tool haskell similar errorprone java,stan st table content tool back table content goal back table content feature back table content toml work back table content hie file inspection severity category observation check type filter scope installation instruction back table content ghc api note using cabal back table content cabal using stack back table content stack hackage back table content homebrew back table content ubuntu ppa back table content kowainik ppa download binary back table content github release usage instruction back table content hie file common stanza general configuration info back table content toml toml configuration back table content toml haddock documentation commandline interface back table content main command back table content hie file toml inspection back table content dedicated wiki page converting toml cli configuration back table content tool back table content ghc glasgow haskell compiler weeder haskell deadcode analysis tool hlint haskell linter tool roadmap back table content github project page link wiki back table content,stan stan haskell static analysis tool note stan beta phase api subject changed required need table content tool back table content stan commandline tool analysing haskell project outputting discovered vulnerability helpful way possible solution detected problem stan searching performance errorprone code piece also help establishing applying bestpractices whole haskell ecosystem although haskell statically typed language property encoded type even though ghc quite powerful compiler try libraryagnostic provide languagespecific suggestion stan us knowledge current state ecosystem commonly used library find stan helpful enjoy writing haskell want guarantee code provided haskell type system ghc goal back table content stan design implementation driven following goal catch common vulnerability antipatterns performance issue provide meaningful insight project generally point potential bug weak point program flow user carefully evaluate problem code help beginner learn best practice easy informative way generate report used proof code quality create best class flexible enough interface usage including eg optin optout inspection feature back table content stan configurable cli tool besides main feature analysing haskell project statically stan list feature make unique easy use flexible configure pretty analysis result including html terminal report suggestion possible solution fixing existing problem analysing haskell source code also information cabal file flexible runtime configuration via toml cli see example stan html report hosted online example terminal output give understanding sort analysis expect stan work back table content stan analysis based hie file compiletime information haskell source code gathered recorded ghc hie file contain haskell ast detailed information identifier type expression subexpressions ghc huge amount work compiling haskell project stan take advantage feature avoid duplicating work focus unique feature analyse hie file easily developed edsl defining ast type pattern based final tagless approach stan algorithm traverse hie ast hie file project match every ast node given pattern find potential vulnerability code stan analysis check represented inspection unique id inspection name description severity list category pattern matching relevant part source code possible solution problem inspection casted project produce zero observation vulnerability specific part code think observation pair inspection piece source code inspection triggered observation assigned unique stable id depending source location refer later ignore disable inspection enable particular module using check rule controlling inspection run check type include exclude filter inspection id category severity etc scope file directory everything check specified using either toml cli interface default stan analysis source file using implemented inspection want understand stan terminology better refer glossary installation instruction back table content stan take advantage ghc api provide analysis stan analysed project need built ghc version detail see easiest robust way install stan build source machine note stan compatible ghc version using cabal back table content step install stan using cabal build tool need cabal first need clone repository git clone http githubcomkowainikstangit cd stan need build using cabal cabal exe stan finally copy resulting executable desired location path environment variable like cp cabal offline sh c command v stan localbinstan using stack back table content step install stan using stack build tool need stack first need clone repository git clone http githubcomkowainikstangit cd stan need build using stack finally copy resulting executable desired location path environment variable like cp stack path localinstallroot binstan localbinstan hackage back table content stan available hackage install tool well cabal stan installmethodcopy overwritepolicyalways also choose ghc version want stan installed optionally add suffix executable name cabal stan w installmethodcopy overwritepolicyalways homebrew back table content macos get stan using homebrew kowainik tap need run following command brew install kowainiktapstan note homebrew installs stan version build latest supported ghc version mean version stan working project ghc version due ghc issue described ubuntu ppa back table content ubuntu get stan using kowainik ppa need run following command sudo addaptrepository ppa kowainikstan sudo apt update sudo apt install stan note aptget installs stan version build latest supported ghc version mean version stan working project ghc version due ghc issue described download binary back table content download binary directly github release downloading binary make executable copy convenient location eg chmod x mv localbinstan note need download binary specific o specicific ghc version use due ghc issue described usage instruction back table content stan work hie file analyse haskell project therefore stan requires user generate hie file advance fortunately straightforward satisfy necessity produce hie file add following ghc option project cabal file stanza want analyse ghcoptions fwriteideinfo hiedirhie recommendation use common stanza feature write option enable stanza easily note recommend generating hie file hie folder recommendation specify folder well need run stan using hiedir option specified path hie folder creating hie file run stan project see found vulnerability terminal want see detailed information structured way generate html report stanhtml file using following command stan strives implement convenient interface use tool without configuring lot advance however tool also provides various way set way efficient particular use case general configuration info back table content stan work configured multiple source increasing order priority default setting hardcoded library includes custom setting environment variable toml file configuration cli argument stan runtime setting many part come different configuration source option specified multiple source prioritized one used addition stan help understand configuration output detailed information part config configuration setting used set toml configuration back table content stan support toml runtime configuration order customize work tool based user individual requirement use toml configuration disable inspection enable particular haskell module ignore observation completely remove file analysis specifically use following variable set custom configuration toml variable description example check set rule control set inspection per scope check type exclude id scope remove remove file analysis completely stan wo nt run specified scope remove file srcfilehs directory folder ignore ignore specific observation found project ignore id see haddock documentation explanation toml configuration work example different use case case number toml file locally following rule describe stan decides toml configuration file use default stan try read setting local stantoml file current directory want adjust default stan setting custom rule create stantoml file root haskell project local stantoml file found stan try read global stantoml file global stan configuration convenient work several project want custom setting default nt default configuration file still okay stan use default hardcoded setting specify path specific configuration file using configfile option custom file used addition default toml config nt want use default toml configuration pas nodefault flag use stanusedefaultconfigfalse environment variable commandline interface back table content section describes possible achieve stan cli already installed analyser use get short information possible command option terminal main command back table content main command one actually would analyse haskell codebase plenty configuration option tune run similarly toml configuration specify hie file folder use hie otherwise specify cabal file project lookup automatically otherwise turn onoff usage default stantoml configuration file specify toml configuration file use used additionally default toml file applicable filter specific file directory inspection category severity generate html report file set output verbosity choose machine readable json output instead highlevel explanation available subcommands subcommand description example check set rule control set inspection per scope stan check exclude categoryinfinity scopeall check include id filesrcfilehs remove remove file analysis completely stan wo nt run specified scope stan remove filesrcfilehs remove directoryfolder ignore ignore specific observation found project stan ignore id precisely command option described stan report check type option filter option scope option remove scope option ignores id option hiedirdirpath cabalfilepathfilepaths configfilefilepath nodefault short hidesolution jsonoutput h help v version description check command specify list check remove command specify scope removed ignores command specify list need ignored report command generate html report hiedirdirpath relative path directory hie file default hie cabalfilepathfilepaths relative path cabal file specify many option configfilefilepath relative path toml configuration file nodefault ignore local stantoml configuration file short hide verbose output information observation hidesolution hide verbose solution information observation jsonoutput output machinereadable output json format instead h help show help text v version show stan version subcommands option type include include check exclude exclude check filter idinspectionid inspection id used severityseverity inspection severity exclude include categorycategory inspection category exclude include filterall exclude include inspection scope filefilepath file exclude include directorydirectorypath directory exclude include scopeall apply check file report option b browse open report browser example want run stan analysis single file generate html report immediately open report browser use following command stan check exclude filterall scopeall check include filterall filesrcstanexamplehs report browse inspection back table content find list available inspection description additional information dedicated wiki page however tool get information easily using inspection command optionally see detail particular inspection typing corresponding inspection id alongside see robust description command inspection show inspection usage stan inspection inspectionid available option inspectionid show specific inspection information h help show help text converting toml cli configuration back table content usually convenient proper configuration file suit project reuse run stan sometimes need quickly run tool setting another machine file possible want send reproducible command anyone could execute get identical result purpose special command allows tomltocli convert toml configuration file stan cli command usage stan tomltocli configfilefilepath available option configfilefilepath relative path toml configuration file h help show help text convenience able use reversed command clitotoml clitotoml convert cli argument stan toml configuration usage stan clitotoml configfilefilepath check type option filter option scope option remove scope option ignores id option tool back table content ghc glasgow haskell compiler ghc popular haskell compiler access step code compilation ghc warn different aspect code nonexhaustive pattern matching unused variable etc however supposed used static analysis tool provides error warning part whole compilation pipeline weeder haskell deadcode analysis tool weeder tool analysis code specific limited case help eliminate unreachable code project similarly stan weeder tool also working hie file get information hlint haskell linter tool hlint linter tool suggests code improvement make code simpler unlike stan us hie file analysis access complete compiletime info produced ghc hlint relies parsing benefit also limit capability stan hlint complementary tool different scope goal intention duplicate hlint stan learn implementation goal project please read section describe stan project detail roadmap back table content plan nearest future much idea work see detailed plan dedicated github project page link wiki back table content
11,Lobsters,formalmethods,CSE-Formal methods,Verified Programming with Project Everest,https://www.youtube.com/watch?v=5B7iI2onu8s,verified programming project everest,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature verified programming project everest youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature verified programming project everest youtube
12,Lobsters,formalmethods,CSE-Formal methods,SAT solver on top of regex matcher,https://yurichev.com/news/20200621_regex_SAT/,sat solver top regex matcher,sat solver top regex matcher html tag matching find two longest repeating substring input string see also divide input number sqrt detecting factorial number reduction perl regular expression matching syntax backreferences expression refers number group naturally variant us group name instead number another python extension pname indicates content group called name matched current point regular expression finding doubled word b w also written b p see also book file would lead revolution computer science hn,sat solver top regex matcher sat problem npproblem regex matching however quite popular regex backreferences extension extends regex matching hard npproblem backreferences usually denoted etc perhaps practical use backreferences heard html tag matching regex nt escaped properly match successfully second group must coincide first like b test b test b another practical usage heard match string string string also find two longest repeating substring input string see also us arcane divide input number sqrt detecting factorial number post inspired reduction perl regular expression matching please read first however author incorrectly state problem solvable fact sat instance solvable consisting clause arbitrary size also since satcnf instance usually variable ca nt use backreferences like use different method python syntax backreferences expression refers number group naturally variant us group name instead number another python extension pname indicates content group called name matched current point regular expression finding doubled word b w also written b pw pword b see also let take small cnf instance p cnf call variable must true rest always false picosat satisfiable v satisfiable v satisfiable v satisfiable v satisfiable v solution let translate regex stringxxxxx x x x x x x x x x x x pattern p x p x p x p x p x x x x x x x x x x x x x x x x x x x x x sat see input string many x many variable cnf instance many x substring many clause instance take first part pattern p x p x p x p x p x roughly mean group match x may let matcher decide second part pattern clause clause mean whole group must match x nt tell one subgroup may match subgroup actually backreference first part pattern term positive negative term clause x x mean whole group must match x nt tell backreferences prohibited present simultaneously ok match x second part union would match ok match x first part union would match also ok match nothing either part union match x regex ca nt match mean input instance unsatisfiable likewise run instance command input variable true stringxxxxxxxx x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x pattern p x p x p x p x p x p x p x p x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x p x x x x x sat also managed solve fred puzzle book ctrlf fred puzzle satcnf form stringxxxxxxxxxxxxxxxxxxxxxxxxxxxx x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x pattern p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x sat took minute old cpu clocked file including solver course stuff nt practical demonstrates reduction one problem regex matching backreferences another sat find better algorithm problem would lead revolution computer science upd discussion hn please drop email bug andor suggestion dennis yurichevcom
13,Lobsters,formalmethods,CSE-Formal methods,Alive2: Automatic verification of LLVM optimizations,https://github.com/AliveToolkit/alive2,automatic verification llvm optimization,online warning prerequisite building building running translation validation running standalone translation validation tool alivetv llvm bug found buglistmd,consists several library tool analysis verification llvm code transformation includes following library ir symbolic executor llvm ir converter refinement check aka optimization verifier smt abstraction layer included tool alive dropin replacement translation validation plugins clang llvm opt standalone translation validation tool alivetv online warning support interprocedural transformation may crash produce spurious counterexample run pass prerequisite build need recent version cmake gccclang llvm optional building mkdir build cd build cmake gninja dcmakebuildtyperelease ninja cmake find include directory find wrong one pas argument cmake building running translation validation opt clang translation validation requires build llvm rtti exception turned llvm built following way cd llvm mkdir build cmake gninja dllvmenablerttion dllvmenableehon dbuildsharedlibson dcmakebuildtyperelease dllvmenableassertionson dllvmenableprojects llvm clang llvm configured follows cmake gninja dcmakeprefixpathllvmbuild dcmakebuildtyperelease want use clang plugin add cmake command translation validation one llvm pass transforming ir file linux llvmbuildbinopt load tv instcombine tv devnull fooll mac llvmbuildbinopt load tv instcombine tv devnull fooll run pas combination pass command line must placed two invocation tv pas translation validation single llvm unit test using lit llvmbuildbinllvmlit vv llvmllvmtesttransformsinstcombinecanonicalizeconstantlowbitmaskandicmpsgetoicmpslell output testing test thread pas llvm transformsinstcombinecanonicalizeconstantlowbitmaskandicmpsgetoicmpslell testing time expected pass translation validation llvm unit test llvmbuildbinllvmlit vv llvmllvmtesttransforms running clang plugin clang srcc emitllvm fpassplugin fexperimentalnewpassmanager xclang load xclang running standalone translation validation tool alivetv tool two mode first mode specify source original target optimized ir file example let prove removing nsw correct addition alivetv srcll tgtll define f b add add nsw b ret add define f b add add b ret add transformation seems correct flipping input yield counterexample since correct general add nsw interested counterexample using undef use commandline argument disableundefinput second mode specify single unoptimized ir file alivetv optimize using optimization pipeline similar without interprocedural pass attempt validate translation example february branch contains optimizer bug triggered follows cat fooll define foo sub icmp ne zext lshr lshr ret alivetv fooll define foo sub icmp ne zext lshr lshr ret define foo sub ret transformation nt verify error value mismatch example source target source value target value summary correct transformation incorrect transformation error llvm bug found buglistmd show list llvm bug found
14,Lobsters,formalmethods,CSE-Formal methods,Summer of Zoom – A curated list of remote conferences,http://oktatok.karolyrobert.hu/buday.gergely/summer-of-zoom/,summer zoom curated list remote conference,,
15,Lobsters,formalmethods,CSE-Formal methods,How did software get so reliable without proof?,https://surfingcomplexity.blog/2020/03/02/how-did-software-get-so-reliable-without-proof/,software get reliable without proof,software get reliable without proof health equipment aircraft weapon system industrial process including nuclear power station operator error like,turingawardwinning computer scientist car hoare wrote paper title software get reliable without proof paper hoare grapple observation software seems reliable computer science researcher expected possible without use mathematical proof verification emphasis added twenty year ago reasonable predict size ambition software product would severely limited unreliability component program dire warning issued danger safetycritical software controlling health equipment aircraft weapon system industrial process including nuclear power station fortunately problem program correctness turned far le serious predicted question arise twenty year pessimistic prediction falsified due successful application result research motivated prediction could clearly little software ever subjected rigour formal proof hoare offer five explanation software became reliable management testing debugging programming methodology personal favorite overengineering looking back paper strike absence acknowledgment role human operator play type system hoare writes health equipment aircraft weapon system industrial process nuclear power fact time word operator appears text precedes word error emphasis added ultimate necessary defence real time system arbitrary hardware error operator error organisation rapid procedure restarting entire system ironically line closest hoare get recognizing role human play keeping system running problem question software get reliable without proof asking wrong question software got reliable without proof system include software got reliable without proof focusing software hoare missed overall system whether call sociotechnical system softwareintensive system joint cognitive system see larger system doomed even able ask right question like like loading
16,Lobsters,formalmethods,CSE-Formal methods,Formal Methods: From Academia to Industrial Practice,https://arxiv.org/abs/2002.07279,formal method academia industrial practice,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
17,Lobsters,formalmethods,CSE-Formal methods,seL4 is verified on RISC-V,https://microkerneldude.wordpress.com/2020/06/09/sel4-is-verified-on-risc-v/,verified riscv,riscv formerly ariane core riscv blog like,sound great mean pronounced esseellfour arguably world secure operating system o kernel o kernel lowest level software running computer system code executes privileged mode smode riscv mmode reserved microcodefirmware kernel ultimately responsible security computer system microkernel idea microkernel minimise trusted computing base part system plan b fails linux window kernel consist ten million line code contain literally thousand likely ten thousand bug huge attack surface welldesigned microkernel ten thousand line inherently trustworthy set aside o kernel including microkernels verification story world first o kernel machinechecked mathematical proof functional correctness c implementation winning u hall fame award result mean proved bugfree relative specification formulated mathematical logic proof security property show specification right property functional correctness extending binary code advanced support hard realtime system world fastest microkernel best class definition originally verified arm processor extended processor riscv processor cover important isas riscv combination riscv special riscv open instructionset architecture isa opensource o microkernel match made heaven especially term security verify assume hardware operates correctly ie specified assumes unambiguous specification first place case hardware even specification formal meaning written mathematical formalism support mathematical reasoning property know actually capture behaviour hardware reality pretty sure hardware different software bug open isa advantage go beyond free royalty one allows opensource hardware implementation example formerly ariane core developed eth zurich opensource implementation see get check whether securitycritical bug german company hensoldt cyber gmbh produced chip based ariane strong supplychain security story complement secure o funded verification riscv disclaimer interest hensoldt cyber exciting aspect open isa opensource hardware implementation prospect verifying implementation sound like big ask hard realise said verified o kernel know multiple group working towards goal sooner later one succeed revolutionary step towards achieving real security bet year away hardwaresoftware codesign security opensource hardware verified opensource o great thing security combination open isa opensource o opensource hardware enables innovation hardwaresoftware interface previously reserved hardware manufacturer thus happened snail pace really important security aware spectre attack use side effect speculative execution steal secret le understood speculative execution enough spectre need covert timing channel get information without covert timing channel spectre attack preventing covert timing channel happens something working year developed o mechanism preventing realise quite work digging deeper found hardware give u right mechanism word existing hardware broken term security underlying cause isa hardwaresoftware contract isa specifies functionality hardware intentionally abstract away anything time timing used leak information isa provide mean stopping isa insufficient ensuring security must improved would normally hopeless endeavour trying convince hardware manufacturer agree new contract imposes additional restriction trust tried even provide o extra instruction use defeat covert channel long house fire unlikely listen spectre fire apparently burning hot enough yet open hardware change enables u innovate without waiting manufacturer enables u control side fence enables true codesign benefit security partnering creator ariane eth zurich exactly explored amend hardwaresoftware contract bit give o right mean defeat covert channel could demonstrate take little highly effective relevant working group riscv foundation discussing mechanism right stay tuned riscv setting benchmark processor security complementing world secure o kernel know web site explains whitepaper written nonexperts explains verification story detail note blog originally written riscv blog site update fixed link like like loading
18,Lobsters,formalmethods,CSE-Formal methods,Verifying Popcount,https://blog.regehr.org/archives/1667,verifying popcount,discipline programming acsl wrong subtle way wikipedia faster much harsher algorithm,popcount function return number set bit argument showing popcount implementation claim become one favorite example use need quickly show student reason program mathematically something like selection sort probably standard example sorting get subtlety rather reserve second example popcount easy whole example done half hour programming language particular algorithm matter much use perhaps simplest popcount implementation c c int popcount x int c int c x x return c work course scan entire argument incrementing counter time find set bit show work formal fashion use method le discipline programming allow u combine obvious effect individual statement hopefully desired highlevel property might well annotate program right int popcount x int c int c x x c popcount origx return c used couple trick need fully explained giving example student used kind reasoning first since x modified program executes used origx shorthand original value x passed argument syntax trick learned acsl second used popcount function mathematical specification popcount completely different thing c code trying verify consistently applying correct rule mathematical programmatic element straightforward would hope fact quite result bad old day nonmechanized program verification wrong subtle way make proof go need find right loop invariant statement true loop executes also true every loop iteration trick explaining task student helping realize simple example like understand algorithm work effectively already know loop invariant need help teasing usable form one stumbling block every loop many invariant example c helpful avoid lot silly loop invariant observing right invariant strong enough imply correctness criterion program also weak enough already true first loop iteration found negative constraint like helpful student trick course capture abstract fact held balance loop modifies piece program state make lecture like work need avoid appearance pulling fact thin air defeat entire purpose discussion student walk away feeling like magical step middle anyway hook crook need get audience realize key algorithm loop invariant c popcount x popcount origx point hump mark code int popcount x int c c popcount x popcount origx int c popcount x popcount origx c x x c popcount x popcount origx c popcount x popcount origx c popcount origx return c used question mark indicate proposition still doubt broken problem manageable piece visit turn loop invariant true loop executes c x origx see loop invariant preserved loop body analyze two case x either zero one zero c unchanged also clearly shifting x right one place change popcount x c incremented one shifting x right one place decreased popcount one see either way invariant maintained prove loop invariant implies overall correctness condition must observe x shifted right time sort situation better clear rule shifting signed v unsigned value c c course skipped lot smaller step argument capture essence algorithm work presenting particular algorithm safely skip termination proof since modified loop body entertaining variant kernighan popcount int popcount x int c x x x c return c use post feel like useful show analysis case simpler algorithm wikipedia faster much harsher algorithm one used practice processor native popcount instruction anyway presented material software engineering class yesterday realized used example couple time seemed worth writing
19,Lobsters,formalmethods,CSE-Formal methods,Using Formal Methods to Eliminate Exploitable Bugs,https://www.youtube.com/watch?v=YyT9BU0aJUE,using formal method eliminate exploitable bug,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kathleen fisher using formal method eliminate exploitable bug youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kathleen fisher using formal method eliminate exploitable bug youtube
20,Lobsters,formalmethods,CSE-Formal methods,Using Z3 Theorem on AVR Firmware,https://medium.com/@ryancor/using-z3-theorem-on-avr-firmware-c6d2f45ac9c2,using theorem avr firmware,using theorem avr firmware hal satisfiability modulo theory avr architecture mcu gpios data bus general purpose register alu instruction decoder program counter flash memory sram eeprom io line usart baud rate clock lab assignment virustotal baudratepy side note emulator atmel instruction manual side note side note theorem solution satisfiability modulo theory smt side note solver,using theorem avr firmwareas many may may aware serious obsession embedded system security two year ago started journey incorporating knowledge reverse engineering software application pulling apart firmware embedded device additionally also started learning hardware security concept sidechannel attack faultinjectionsglitch attack bit flipping moreanyone began career embedded security tell arduino board best device get started pretty intricate ide abundant amount hal hardware abstraction layer api call use needle say writing first hello world application embedded system industry fairly rudimentary blinking ledthe goal paper show use formula python break weak password checker use linear inequality equality satisfiability modulo theoriesavr architectureto give background arduino us main mcu microcontroller unit help understand avr avr risc architecture reduced instruction set computing avr based microcontrollers became widely popular one first game onchip flash storage lab exercise using arduino nano board mcublock diagram architecturewhat chip operating voltage range pin programmable gpios general purpose inputoutput come standard set communication interface masterslave spi serial peripheral interface usb usart universal synchronousasynchronous receiver transmitter twowire peripheral protocol interintegrated circuit discus usbtousart depth later become important flashing chip target firmware communicating chip sending receiving datalet go diagram data bus handle data chunk travel inside microcontroller bus line widegeneral purpose register used arithmetic operation adding subtracting number setting jump pointer compare operation previous article wrote discussed register architecture case avr stand arithmetic logic unit work direct connection general purpose register arithmetic operation gpr immediate operand executed within single clock cycle divide operation three category arithmetic logical bitwise functionsinstruction decoder combinational circuit whose purpose translate instruction code address micromemoryprogram counter pc bit wide address program memory locationsas see picture three different type memory used flash memory programmable readonly memory rom firmware changed using programmer bootloader sram area volatile memory hold data electrically powered lastly eeprom electronically erasable programmable read memory semi permanent data storage accessed using special register inside avr ability control thing like address written data written flag used read dataio line used controlling application digital input output pin pin detect voltage change high low electromagnetic force digital output io pin connected diode trace vcc gnd lineio line schematicnow better understanding avr architecture let briefly go going communicate chip using usbtousartusartthe usbtousart converterbridge serial port computer responsible sending serial data two wire clock signal parleying two device communicate accurately device must configured beforehand use speed communication otherwise known baud rate baud rate simply rate information transferred communication channel serial port context baud mean serial port capable transferring maximum bit per second calculated two way 𝐷 𝑛 𝑏𝑛 𝐵 𝑏𝑛 𝑛 b defined unit total bit per second application data bit per second n bit conveyed per symbol gross bit rate r inclusive channel coding overhead symbol rate f calculated r nthe usart clock must operate time desired baud rate clock based around operation crystal oscillator case usart set constant mhzlab assignmentthere two file going need exercise file found virustotalone bin file dumped firmware image second hex firmware file used upload processed arduino nano board next step getting board ready upload hex file downloaded using avrdude connect board computer via usb sure installed avrtools typical baud rate upload speed going going run command line get firmware board jumpy git master avrdude c arduino p p u v u flash w jumpyhexat point need figure baud rate usart using communicate serial data running baudratepy get result use application screen communicate board machinescreen outputlooks like pretty straightforward singlepassword check let move jumpybin file start reverse engineering process going use ghidra project found lot cleaner using avr disassembler load file project directory specifying language must case little endian assembly best optionghidra automatically analyze code including vector table start disassembly output one thing note see lot opcodes analyzed code section case highlight byte press automatically disassemble opcodes use f key afterwards create newly examined code functionafter ghidra completed analyzing binary file output look bit convoluted first set subroutine responsible initializing peripheral usarttxrx spi timer pcint interrupt reset tableside note ever want find main function firmware code trace base address reset bootloader always contain simple jump ie jmp address outside bootloader directly lead start routine hold main performing lot operation setup environmentjump start mainwe likely better luck dynamic analysis easy definitely give lot satisfying result string table show much xref offset code segmentemulatorthe goal right emulate code figure firmware asking input user usart find offset beginning set breakpoint commence steptracing first offset noticed show logical code function c cf push ylo df push yhi cd ylo spl de yhi sph sbiw start debugger three tool going need download open three terminal window let start first one run simavrsimduino command booloader bytesavrspecialinitavrgdbinit listening port bridge port uartptyconnect point export install picocom get terminalnext picocom used bridge usart communication next terminal window run command picocom nonebaudrate nonedatabits calocal echo nonoinit nonoreset nonolock nosendcmd sz vvreceivecmd rz vv eimap omap emap crcrlf delbs type ca ch see available commandsterminal readythis setup get u ready connect gdb server run avrgdb third terminal avrgdb jumpybin gdb target remote debugging using gdb break pc breakpoint gdb ccontinuingbreakpoint hit looking picocom look like hit sort text output yet yet reached point code sending data usart terminal using gdb command stepi good trial error technique see much step beginning first letter output pico terminal interestingly hit breakpoint switch back picocom see letter printed screen function look like responsible sending data tx tracing back ghidra look like hitting peripheral component undefined undefined return stack buf xref entry point push cd ylo splafter stepping time come point find directly printing picocom terminal gdb pc st z pop pop pop ret push push ldi gdb r u make sense printing string input whats happening code register hold next byte store z using st instruction looking atmel instruction manual see exactly operation indirectly store register data space using index x z look ghidra decompiles logic look like byte undefined array index hold string table st instruction seen volatile write datadebug register make note gdb offset ghidra part usartrx offset ghidra responsible usarttx side note register pair used operation used register pair x z clarifying confusion around debugging information memory wanted dump content using gdb command would crafted like txrx interrupt located need able find input actually processed stepping bunch code look like may found ghidra input get processed cpi brbs ldd cpi responsible comparing immediate value sparked interest looking value r n ascii theory set breakpoint start function offset ghidra picocom terminal prompt u input allow u enter string hitting enter hit breakpoint gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly addressesbreakpoint gdb pico terminal terminal readyinput look like breakpoint hit without giving u opportunity input string let continue browsing stack processinput push cd ylo spl de yhi sph std std rjmp call set breakpoint look like function call offset decompiling function get output uint void byte uartreadchar char w w uint z return w subroutine look simple enough set w register interpret bit usart status control register successful take byte time read usart data register null terminating character found w hold entire value knowing set breakpoint function call offset ghidra let try set breakpoint new offset see work time gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly address pico terminal terminal readyinput helloworld breakpoint hit gdb window hitting enter breakpoint gdb perfect saw hold byte compare n r confirm see register hold first byte h gdb r offset hitting breakpoint x amount time x equal size string code process null terminating string function exit input string held address gdb helloworld time step function see routine crossreferenced reach return instruction pc redirected module undefined undefined return stack buffer cf push ylo df push yhi push cd ylo spl de yhi sph std could winning ticket happens next string keep track offset ghidra started step function one instruction time look like actually comparing anything interest function returned something interesting started show got bit code base add wlo adc whi cpi cpc whi brbc zflglooks like two register added compared value let set breakpoint gdb offset see value input possibly added together gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly address pico terminal terminal readyinput breakpoint hit gdb window hitting enter breakpoint gdb pc add adc cpi gdb r gdb r see index r index l added give u hexadecimal value know routine begin ghidra rename function move code base start see lot similar code side note start labeling comparative function keep track index input string compared comparing index add wlo adc whi cpi comparing index add wlo adc whi cpi comparing index mul add whi eor cpi sbci brbc zflgover address operation look bit different comparison index input string get ordinal multiplied get compared lower word byte value result higher byte value word example take two index r multiply two integer obtain value lower byte word loword equation higher byte hiword value comparison look like pseudocode ord ord r ord ord r sbci instruction subtracts carry immediate command final value index need equal static analysis really take care rest know specific mnemonic keep eye build constraint table use theorem solve rest size string character seen snippet decompiled code w char inputstring char w inside ghidra function tab labeled subroutine responsible comparing byte theorem solutionto put simply prover created satisfiability modulo theory smt problem decision problem logical formula combination include arithmetic bitvectors array unresolved function effective smt solver specialized algorithm solve background theory mentioned download python library hereat point formulate conditionals firmware code check right password constraint enter bitvector used shorthand subtermsif string string string string string string string string string string string string string string string string string string string string string decryptflag side note flag string get loaded ghidra offset use instruction lpm load data byte flash program memory register file zregister register file used access program memory place data register final check function called offset confirm many time variable iscompared set true equal code proceed print lpm z sflag rnflag cpi lsl brbc zflg ldi ldi aa call usartprint landed get wrong password msg ldi ldi aa call usartprintafter value added constraint use check function examine whether assertion given solver plus optional assumption consistent assertion return true next step would return model last check function raise exception model available eg last check returned unsat assignment satisfy quantified axiom simple test see library work would use three unknown linear equation challenge like xy z import x z int x int int z test solution simplesolver sadd x scheck unknown sadd x scheck unsat reset general purpose solver limited amount preprocessing simplesolver sadd x sadd z scheck sat smodel z x apply logic unknown mentioned see unable satisfy requirement needed model solution return unknown everything added considered unsatisfiableafter running solver finally get password needed decrypt flag ryancor ryancorvirtualbox python solvepy found password next step would program module take password automatically sends atmega usart serial port retrieves flag source code script found order make sure board plugged usb port connected linux vm usb port ensure vm recognizes device check kernel message log right plugged see usbcore registered new interface driver called ryancor ryancorvirtualbox dmesg vboxguestioctlhgcmcall failed usb new fullspeed usb device number using usb new usb device found usb new usb device string usb product usbcore registered new interface driver usbserial usb serial support registered generic usbcore registered new interface driver usbserial usb serial support registered converter detected usb converter attached case port going connect python script located running script get successful decrypted flag microcontrollerryancor ryancorvirtualbox python solvepy found password sending input driver flag thank following along hope enjoyed much question article find challenge please dm instagram hackersclub twitter ringowarehappy hunting p missed link solver program find source code
21,Lobsters,formalmethods,CSE-Formal methods,Specifying and Model Checking Workflows of Single Page Applications with TLA+,https://arxiv.org/abs/2005.05627,specifying model checking workflow single page application tla,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
22,Lobsters,formalmethods,CSE-Formal methods,A beginners step by step guide to Alloy,http://msitko.pl/blog/2020/05/24/guide-to-alloy.html,beginner step step guide alloy,installation part alloy basic link video video link code code part static modelling alloy link video video link code code code next part done go next tutorial alloy analyzer software abstraction alloydocs state link reference motivational resource blog realworld application modeling alloy interesting link,post assumes already know want learn alloy mean try convince formal method useful study alloy example use small easy follow opposed demonstrating full power tool written single line alloy anything installed start zero therefore cover installation basic alloy tutorial web sufficiently explain basic example skip installation step frustration lack entrylevel material decided write tutorial core part tutorial video included installation instruction code snippet text make easier copypaste end article find link interesting resource video even though recipient prefer study technical content text form think case alloy might easier explain thing video first reason alloy analyzer way use alloy except java api gui program another reason result running alloy specification usually sequence diagram need learn interpret able work alloy effectively believe video useful regard alloy beginner thus code write might idiomatic explanation might superficial hand put good position writing tutorial know struggling installation go http githubcomalloytoolsorgalloytoolsalloyreleases download latest release moment writing guide version used recording start alloy analyzer gui run java jar orgalloytoolsalloydistjar part alloy basic link video video link code code part static modelling alloy link video video link code code initial code riddle code contains basic definition need encode clue predicate find solution next part done recording first two part time consuming endeavour decided stop right moment least may record next part one day go next interested learning covered video option tutorial alloy analyzer cover similar material video although explain install alloy tool work interpret generated example went video able follow example easily software abstraction book creator daniel jackson buying pay attention whether getting revised edition unfortunately revised edition available hardcover availability may depend location therefore ended kindle version original edition regardless logistical issue getting become serious learning alloy need read book sure well written explains design consideration depth similarly resource though explain much using gui alloydocs hillel wayne resource published quite recently state aim reference opposed tutorial link reference motivational resource may interest wonder even care video made realize formal method need revolve around costly code verification instead small initial investment design verification use formal method vehicle exploring domain something similar spirit ddd uml working problem whiteboard colleague way hillel wayne also writes fascinating blog among thing writes alloy tla empirical software engineering realworld application modeling alloy interesting link
23,Lobsters,formalmethods,CSE-Formal methods,Open Sourcing the People's Code,https://dev.to/jcastle/open-sourcing-the-people-s-code-13b5,open sourcing people code,dissertation git remote graduation introduction federal source code policy premise description finding conclusion dissertation,summary phd dissertation completed spring virginia tech support entry git remote graduation introduction computer software essential daily operation industry government business government run software entertainment solving public health crisis supporting national security federal government spends billion software year little software open sourced costly allows little reuse result duplication often yield poor quality white house published federal source code policy directing major federal agency create internal source code policy update acquisition language capture new custom code inventory source code publishing portion open source software os even policy agency publishing os mixed result premise given agency budget relative size employee skill yet little publishing os believed systemic organizational factor code publication therefore premise study centered broader organizational factor related organizational cultural belief public engagement structural dimension organization location either hindering aiding agency os publication description qualitative study included metadata analysis interview artifact collection eg sop organization chart sample contained following attribute participant sw development unit cfo act agency agency multiple participant participant sw development unit unit conducted sw development data science activity unit often consumed os published unit located outside agency chief information officer cio office finding study finding pertain four organizational factor study cultural belief public engagement structural dimension organizational location cultural belief belief key component organizational culture support organizational performance belief allow organization make prediction select action experience new phenomenon cultural belief study advantageous cautionary advantageous belief belief based perceived realized outcome office published os minimally frequently held belief cautionary belief participant whose unit held cautionary belief reticent response new technology technology policy approximately half sample held cautionary belief minimally published os public engagement public engagement part larger public participation construct public engagement pertained action taken individual inside outside software development shop office publishing os tended work outside office various activity including inperson event multiple electronic tool structural dimension related technologystructure research pertains decisionmaking rule skill communication office unit whether publishing minimally frequently required formalized policy allowing structural location similar structural design research focus hierarchy office located broader organization ie organizational chart office autonomy le hierarchical layer close approving executive able frequently publish os conclusion tl dr nature post prevents adding detail study encourage read dissertation much detail study implication public administrator policy maker organization general
24,Lobsters,formalmethods,CSE-Formal methods,Synthesizing JIT Compilers for In-Kernel DSLs,https://www.cs.utexas.edu/~isil/jitsynth.pdf,synthesizing jit compiler inkernel dsl,,obj length filter flatedecode stream ki w endstream endobj obj type xobject subtype form formtype ptexfilename aecbadgecavpdf ptexpagenumber ptexinfodict r bbox group r resource extgstate ca ca font r length filter flatedecode stream ky k b ʸ x ue j b q endstream endobj obj length r filter flatedecode stream gh 䫐 endstream endobj obj length r filter flatedecode stream endstream endobj obj length r filter flatedecode stream l ԧb c maqdz qwwgtr bq w g dw vdeyr fr ea n z q yi sh b endstream endobj obj length r filter flatedecode stream
26,Lobsters,formalmethods,CSE-Formal methods,An introduction to Formal Verification for Software Systems,https://www.moritz.systems/blog/an-introduction-to-formal-verification/,introduction formal verification software system,cc bysa wikipedia paris métro line implode system need formal verification verilog systemverilog existed paris métro line widespread adoption formally verify intend verify cc bysa wikipedia tamarin prover model checking verify turnstile cc bysa wikipedia temporal logic tla tla leslie lamport cache coherence raft simple tla example die hard breadthfirst search die hard finding solution diehardtla conclusion abstract state machine set theory firstorder predicate logic,cc bysa paris métro station saint lazare line platform screen door source wikipedia author flosch engineer designing completely autonomously operated paris métro line ensure safety ten million passenger year station across paris well smooth running train approach development software allows automation public transit french team decided use formal verification learn mean go introduction formally verified software note formal verification give return present two introductory example first example present turnstile logic flip coin one real still basic example tla methodology die hard vengeance problem two jug reading article gain overview fundamental formally verified software aware method avoid software bug cause business implode system need formal verification engineering method validate ie trying make product meet user requirement verify ie product conform validated specification realm computer hardware formal verification pretty old concept existence since tool like verilog superseded tool like systemverilog tool become part ieee specification designing verifying hardware however realm software engineering even though verification tool existed since late still standardized widespread use comparison hardware counterpart even see use formal verification see usually limited specific field like cryptography communication protocol frequently done academic circle good example implementing formal method verification automation paris métro line ever increasing complexity software layer abstraction reached time writing secure efficient resilient code requires level formal verification done whole software least important subsystem involved recent time seen widespread adoption formal verification industry leader like intel amazon microsoft product enormous complexity multiple system interacting one another formally verify realm software engineering first step formal verification asking following question intend verify verify intend verify setting verify whole system every line written code even though theoretically possible beginner mistake art engineering smart enough know corner cut one cut easy task take time practice experience take decision also keep mind writing verification system writing test unit functional fuzzing writing test achieving code coverage guarantee system work intended good test test unit test verification testing considered two side coin one complement completing picture cc bysa screenshot tamarin prover security protocol verification tool source wikipedia author mpdehnel formal verification involves writing proof abstract mathematical model system depending design system various option available used basis writing proof verification let u take case tamarin prover tool used symbolic modeling analysis security protocol abstraction happen protocol level agent interact protocol abstraction work well security cryptography related code approach discussed article would fine grained approach trying verify finite state machine called model checking verify finite state machine simplest mathematical model computation represent state rule transition one state another illustrative example let u take closer look working coin operated turnstile cc bysa turnstile revolution source wikipedia author sebasgui change made original work removed white background resized coin operated turnstile either closed state open state couple operation turnstile push insert coin applying operation given state allows transition state keep state depending operation applied state description represented diagram basically constitutes representation finite state machine aim verify given state machine turnstile work expected importantly enter unexpected state example want turnstile go unlocked without coin remain unlocked push made simple way thinking consider state machine linear timeline action transition linear timeline reasoning working machine state take absolute turnstile guaranteed open point time closed matter statement turnstile open truth value would vary time form basis temporal logic note one basic thing keep back mind would time continues move forward universe even change occur state machine verifying behavior state machine time one turn verify behavior system implementation course thing get complicated state machine distributed network thing happen concurrent system tla logo seen splash screen tla toolbox started edward lamport let take look specific tool called tla used achieve state machine verification concurrent system tla tla around since developed leslie lamport turing award winner addition writing formal specification also used design model document verify program especially concurrent system distributed system good toolkit since many system level application blockchain application tend combination distributed concurrent system play tla used write system level proof thing like memory cache coherence protocol distributed consensus protocol like raft addition tla specification also latex compatible making excellent way generate documentation proof simple tla example unfortunately tla come run mill hello world like programming language take slightly bigger example understand basic tla shall choose one basic introductory example given tla tutorial called die hard problem name problem come movie die hard vengeance two hero movie stop bomb exploding placing gallon water jug twist hero provided jug jug water faucet solve problem starting fill jug approach taken movie make sure jug empty start fill jug empty jug jug gallon space jug empty jug ground pour remaining gallon jug jug gallon space remaining jug fill jug pour gallon jug remaining space jug end manual process exactly gallon water jug alternative solution problem starting fill jug find leave solution comment manual description solution happens discrete step like following state finite state machine state well defined path next state going take look solution tla perspective going fancy stuff tla exploring basic feature tla work namely making step finite state machine note tla us breadthfirst search approach going state machine let u look tla description die hard problem variable describe specification variable jug problem variable big number gallon water jug small number gallon water jug invariant describe invariant within system case value jug inclusive likewise jug inclusive invariant keep sanity check operation jug help keep operation may result negative value jug overflow condition like gallon jug typeok small big initial state define entry point state machine make sure jug gallon start init big small action define various action possible given state machine help advance next state within state machine list various action possible action defined independently jug jug fillsmalljug small big big fillbigjug big small small emptysmalljug small big big emptybigjug big small small transferring water smalltobig big min big small small small big big bigtosmall small min big small big big small small also notice action also make sure next state unused jug example filling emptying mentioned change important specifying action make sure mention changed state changed system undefined state jug given point time next state define possible next state system using disjunction conjunction die hard example action possible independently hence use disjunction describe next state initial state next fillsmalljug fillbigjug emptysmalljug emptybigjug smalltobig bigtosmall specification finally define specification conjunction initial state next state spec init next big small finding solution need gallon water prevent bomb exploding invariant make sure state leading jug gallon error since part solution seek predicate called notsolved asserting big equal notsolved big description managed describe manual process finding solution state machine run within tla well defined action reach state tla main window presented show loaded program diehardtla result model checker show various reachable state simulation also set check typeok invariant make sure formula hold true every reachable state key finding solution big invariant way make model checker show u behavior ending jug equal false error trace show case last entry invariant becomes false desired solution die hard problem step error trace show jug filled end gallon water jug hence running simulation within tla helped hero come solution automatically defining model formal language bomb disarmed time conclusion demonstrated use tla play around state finite state machine however still actually stepped powerful tool available tla like emulating passing around message declaring theorem proof next part shall explore detail using tla write verification specification description written rfc formal verification gaining importance ongoing trend automate aspect life paris métro line mentioned us another way formal verification called bmethod us abstract state machine set theory firstorder predicate logic help define system approach different tla tight loop abstract machine implementation us refinement technique match abstract machine implementation approach formally verified software paris métro gave significant return city motivated switch autonomous orchestration another paris métro line
27,Lobsters,formalmethods,CSE-Formal methods,REMS - Rigorous Engineering of Mainstream Systems,https://www.cl.cam.ac.uk/~pes20/rems/,rem rigorous engineering mainstream system,,apps o api wire interface o compiler hardware
28,Lobsters,formalmethods,CSE-Formal methods,Edwin Brady Tells Us What's New in Idris 2,https://www.youtube.com/watch?v=nbClauMCeds,edwin brady tell u new idris,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature edwin brady tell u new idris youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature edwin brady tell u new idris youtube
29,Lobsters,formalmethods,CSE-Formal methods,Relaxing the Data Initialization Policy of SPARK,https://blog.adacore.com/relaxing-the-data-initialization-policy-of-spark,relaxing data initialization policy spark,access type assurance ladder strict data initialization policy subprogram boundary user guide,spark always development new language feature make every release tool previously unsupported ada feature like access type spark specific development however new feature generally take make actual user code feature going present experience exception used internally external user made actual release designed enhance verification data initialization whose limitation long standing issue spark assurance ladder data initialization associated bronze level easiest reach spark indeed time verification correct data initialization achieved automatically without much need user annotation code modification however user encounter case tool verify correct initialization data program even though correct recently good solution problem additional annotation effort could help user either accept check message verify proper initialization mean perform unnecessary initialization please tool changed recent release spark spark community recent preview spark pro post describe new feature called relaxedinitialization designed help situation first let get insight problem spark performs several analysis among flow analysis used follow flow information variable program fast scale well sensitive value program said otherwise follows variable name control flow try track valuesthe main analysis formal proof translates program logical formula verified automated solver precise model value variable every program point potentially slow requires user annotation summarize effect subprogram contract verification done flow analysis general easier complete associated bronze level assurance ladder whereas verification done proof require user input associated level silver higher spark data initialization general handled flow analysis indeed time enough look control flow graph decide whether something initialized however using flow analysis verifying data initialization induces limitation notably array handled whole flow analysis would need track value know index written component assignment result spark sometimes unable verify code initializes array part using loop example opposed single assignment aggregate require user annotation checking data initialization spark enforces strict data initialization policy subprogram boundary nutshell input entirely initialized subprogram entry output entirely initialized subprogram returnin recent release spark possible use proof instead flow analysis verify correct initialization data effect increasing precision analysis cost slower verification process increased annotation effort since tradeoff spark allows user choose want use flow analysis proof fine grained manner per variable basis default lighter approach preferred initialization check handled flow analysis use proof instead user annotate variable relaxedinitialization aspect demonstrate used lift previous limitation let u look example stated array treated whole flow analysis since initializing array using loop regular occurrence flow analysis heuristic recognize common case however fall short soon loop cover whole range array element initialized one time array read initialization particular last case occurs try describe behavior loop using loop invariant example add computes elementwise addition two array natural number type natarray array positive range natural function add b natarray return natarray pre e e e b e post k arange addresult k k b k re natarray begin arange loop re b pragma loopinvariant k re k k b k end loop return re end add correct initialization re verified flow analysis make sure invariant read initialized value remove invariant initialization verified course postcondition solution work around problem add useless initial value re using aggregate le satisfactory recent version spark instead specify want initialization re verified proof using relaxedinitialization aspect re natarray relaxedinitialization additional invariant program entirely verified note relaxedinitialization used bronze level assurance ladder longer enough ensure correct initialization data need reach silver level may require adding contract code refactoring let consider second major limitation classical handling initialization spark data initialization policy mentioned earlier requires input output subprogram entirely initialized subprogram boundary example consider following piece code try read several natural number string using readnatural procedure error output used signal error occurring read type errorkind emptyinput cannotread noerrors subtype sizerange natural range procedure readnatural input string result natural numread natural post numread inputlength read number input return numread number character read procedure read input string buffer natarray size sizerange error errorkind numread natural start positive range inputrange begin input empty set error code appropriately return inputlength size error emptyinput return end otherwise call readnatural either input entirely read reached end buffer start inputfirst bufferrange loop readnatural input start inputlast buffer numread nothing read input set error mode return numread size error cannotread return end reached end input start inputlast numread size error noerrors return end start start numread end loop completely filled buffer size error noerrors end read example following data initialization policy spark nt initialize buffer returning error addition input contains le number buffer initialized size launch spark example flow analysis complains stating ensure buffer initialized end read silence add dummy initialization buffer beginning example setting every element however want indeed might initialization costly caller read may forget check error status read buffer spark wo nt detect instead want spark know part buffer meaningful call check accessed caller use relaxedinitialization aspect exempt buffer data initialization policy spark annotate formal parameter need supply aspect subprogram mention formal parameter procedure read input string buffer natarray size natural error errorkind relaxedinitialization buffer procedure successfully verified spark note initialized size even call completes error indeed ada say copying uninitialized scalar example giving actual parameter subprogram call bounded error relaxedinitialization aspect would nt help would still need initialize size path returning read let write user code see everything work expected useread read number string print standard output procedure useread string buffer natarray error errorkind size natural begin read buffer size error n buffer loop adatextioputline nimage end loop end useread spark complains buffer might initialized call read indeed local buffer variable relaxedinitialization aspect set true spark attempt verify entirely initialized call want annotate buffer relaxedinitialization buffer natarray relaxedinitialization run spark example another failed initialization check time call putline inside loop one expected check error status call read fix code access index buffer initialized read procedure useread string buffer natarray relaxedinitialization error errorkind size natural begin read buffer size error error noerrors n buffer size loop adatextioputline nimage end loop end end useread unfortunately help failed initialization check call putline remains given information initialization buffer contract read usual data initialization policy spark nothing needed spark enforces output initialized call however since opted policy buffer need use postcondition describe initialization status call done easily using initialized attribute procedure read input string buffer natarray size sizerange error errorkind relaxedinitialization buffer post error noerrors buffer size initialized else size postcondition state error occurred buffer initialized size want code prove also need supply invariant end loop inside read pragma loopinvariant buffer initialized read useread entirely proved tweak useread access part buffer meaningful value spark produce failed initialization check relaxedinitialization aspect provides way opt strict data initialization policy spark work around inherent imprecision flow analysis value sensitive check enables verification valid program used scope proof technology offered spark find information user guide nt hesitate try project tell u think useful improve
30,Lobsters,formalmethods,CSE-Formal methods,fbpmn: formal tools for business process modeling,https://github.com/pascalpoizat/fbpmn,fbpmn formal tool business process modeling,fbpmn formal tool bpmn bag fifo causal realizable synchronous communication rsc fifo pair fifo inbox fifo outbox new property communication semantics easily taken account reference firstorder logic semantics communicationparametric bpmn collaboration tl dr impatient note httpserver simplehttpserver requisite window window getting source file platform linux osx getting prebuilt binary linux osx building source window bpmn model collaboration process model bpmn format bpmn standard verification using tla requirement optional available linux osx principle linux osx user window user analysing counterexample linux osx user easier analyse see file contained current directory window user verification constraint extending verification new communication model new property verify help suffix given sourcetarget file running json format see,fbpmn formal tool bpmn fbpmn support verification business process workflow collaboration property option complete proper completion dead activity safety soundness messagerelaxed soundness seven different communication semantics bag shared message multiset ordering fifo shared message queue ordering wrt emission time causal shared message causality structure ordering wrt message emission causality realizable synchronous communication rsc shared message buffer fifo pair message queue couple process ordering wrt emission time fifo inbox input message queue process ordering wrt emission time fifo outbox output message queue process ordering wrt emission time new property communication semantics easily taken account see sect extending verification reference sara houhou souheib baarir pascal poizat philippe quéinnec firstorder logic semantics communicationparametric bpmn collaboration international conference business process management bpm springer tl dr impatient use modeler choice model process collaboration verify model combination property communication semantics fbpmncheck working worker transformation done process node gateway sf mf x x depth x communication semantics done generate interactive counter example exploration page fbpmncheck analysis log file cd transformation done transformation done transformation done open one generated file browser play counter example using keyboard note security issue since interactive counter example exploration page load local file bpmn model either preferred serve page using server httpserver simplehttpserver npm install g httpserver run install httpserver cd httpserver cd simplehttpserver python cd httpserver python recommended deactivate local file restriction see requisite verify bpmn model need java se development kit get tla tool get fbpmn known working java tla tool version java tla tool version build fbpmn source required window also need stack build system haskell see window due bug please use curl s ostackzip l insecure http x stackzip stackexe getting source file required platform get tla theory used verification process get source file either way please set fbpmnhome environment variable place fbpmn source installed export fbpmnhomesomewhereonyourdiskfbpmn may typically add command shell configuration file eg bashrc zshenv linux osx getting prebuilt fbpmn binary linux osx binary stable version fbpmn built using continous integration server available working binary automatically built window please put fbpmn command directory path environment variable building fbpmn source required window cd fbpmn stack clean stack build stack install install fbpmn command place depends o use stack path localbin find directory please put directory path environment variable bpmn model fbpmn able deal collaboration either bpmn json format see sect please note also deal standalone process model workflow soon put standalone pool lane see example bpmn format please see bpmn standard subset bpmn support presented fig figure supported subset bpmn notation fbpmn tested model made camunda modeler get verification using tla requirement verification requires fbpmnhome set place fbpmn source installed see sect set place installed see sect fbpmn found command path see sect optional available linux osx fbpmncheck script directory source distribution found command path principle verification achieved two step see fig generate tla representation bpmn collaboration use representation tla implementation fol semantics bpmn collaboration perform verification using tlc model checker tla tool box figure fbpmn approach verification bpmn collaboration sequel use model fig figure example collaboration model linux osx user provide fbpmncheck script script directory source distribution two step described fig performs verification possible communication model fbpmncheck working worker transformation done process node gateway sf mf x x depth x x x depth x x x depth x x x depth x x x depth depth x x depth depth done window user working providing support window user analysing counterexample model analysed counterexample generated property yield linux osx user using fbpmncheck counter example log file generated directory analysis eg example cd l log file include information computation time counterexample verbose mode state action line col line col module edgemarks net pid qid result nodemarks pid qid generate version counterexample easier analyse use fbpmn get json version counterexample fbpmn transformation done fbpmn get graph version counter example format dot command see use command generate pdf png image fbpmn transformation done dot tpdf fbpmn generate interactive counter example exploration page use key navigate state counter example combination shiftkey go startend counter example fbpmn transformation done excerpt counter example model fig given fig figure last state animation counter example soundness model fig network unordered semantics first parameter three command source log file second one target jsondothtml file sufixes case fbpmn add given type readgenerated file three case counterexample filtered marking null perform transformation log file contained current directory provide three script script directory source distribution cd transformation done transformation done transformation done window user working providing support window user verification constraint model unbounded see eg model able check model may add constraint verification process given model file mymodelbpmn create file mymodelconstraint form constant constraintnode constraintonnodes constraintedge constraintonedges constraint overall constraint defined termes constraintnode constraintedge available constraint reuse defined extended example model may use constant constraintnode true constraintedge constraint constraintnodeedge state node marking maximum number token authorized node constrained edge marking maximum number token authorized edge overall constraint constraint node constraint edge extending verification add new communication model define new communication model semantics say mynet networkmynettla file fbpmnhometheoriestla copy one file fbpmnhometheoriestlaconfigs new file networknnmynettla directory nn number different existing communication model content networknnmynettla change line network implementation definition refer new communication model defined step local networkimpl instance networkmynet add new property verify define new property say myproperty end pwssemanticstla file fbpmnhometheoriestla create new file propnnmypropertycfg fbpmnhometheoriestlaconfigs nn number different existing property content propnnmypropertycfg refer property name defined step run deadlock specification spec invariant typeinvariant property myproperty help fbpmn get help fbpmn run fbpmn h fbpmn h usage fbpmn command formal transformation bpmn model available option h help show help text available command version print version repl launch repl transforms collaboration json dot transforms collaboration json tla transforms collaboration bpmn json transforms collaboration bpmn tla transforms tla log log json transforms tla log log dot transforms tla log log html versionand repl command must provide two argument source file target file transformation suffix given sourcetarget file running fbpmn json format json format model generated bpmn format using fbpmn general therefore need write model json format manually example model given file generated bpmn help writing json format fbpmn basic output format dot command see transform json file dot run fbpmn sourcefile targetfile neither sourcefile targetfile suffix correct one added fbpmn provided dot installed generate png picture collaboration using dot tpng sourcefiledot targetfilepng
31,Lobsters,formalmethods,CSE-Formal methods,Proving Algebraic Datatypes are “Algebraic”,https://soap.coffee/~lthms/posts/AlgebraicDatatypes.html,proving algebraic datatypes algebraic,proving algebraic datatypes equivalence introducing equivalence example canonical form morphism specialpurpose nonempty list operator morphism commutative associative neutral element operator morphism commutative associative neutral element absorbing element distributivity bonus algebraic datatypes metaprogramming history website repository equivalence introducing equivalence example canonical form morphism specialpurpose nonempty list operator morphism associative neutral element operator morphism neutral element absorbing element distributivity bonus algebraic datatypes metaprogramming metacoq,proving algebraic datatypes several programming language allow programmer define potentially recursive custom type composing together existing one instance ocaml one define list follows type list con list nil translates haskell data list con list nil rust enum list con box list nil coq inductive list con list list nil forth language specific construction type system ocaml haskell rust coq cite far equivalent said often share common formalism usually sometimes abusively referred algebraic datatypes expression used hood datatype encoded composition type using two operator sum product type b disjoint union type b term injected b go b conversely term b projected either b b cartesian product type b term b made one term one term b remember tuples algebraic datatype one constructor allows defining adhoc product type besides constructor mutually exclusive define term using two different constructor therefore datatype several constructor reminescent disjoint union coming back list type syntactic sugar algebraic datatypes list type equivalent unit list unit model nil case list model con case set type defined language together form mathematical sense hence name mean definition satisfy property commutativity existence neutral element article prove coq precisely commutative x x x forall x x x x xyyx associative x z x z x z forall x z x z x z x z xy zx yz neutral element e x x e x exists e forall x x e x commutative x x x forall x x x x associative x z x z x z forall x z x z x z x z neutral element e p x x e p x exists ep forall x x ep x distributivity x z x z x x z forall x z x z x x z x z yz absorbing element e x x e e exists ea forall x x ea ea record sum prod type defined coq follows inductive sum b type type inl sum b inr b sum b inductive prod b type type pair b prod b equivalence type introducing typeequiv typeequiv equivalence example canonical form list morphism nat specialpurpose list nonempty list sum operator sum morphism sum commutative sum associative sum neutral element prod operator prod morphism prod commutative prod associative prod neutral element prod absorbing element prod sum distributivity bonus algebraic datatypes metaprogramming revision revision table automatically generated git history website repository change description may always useful consult source file current version spellchecking typo invert table content revision table spellchecking new article algebraic datatypes equivalence type algebraic structure come equation expected true mean implicit dependency easily overlooked definition coq builtin relation state two term reduced constructor strong general case particular study algebraic structure type clear opinion structurally equal yet prove introducing typeequiv since type suitable reasoning algebraic datatypes introduce equivalence relation denoted say two type equivalent isomorphism denoted term type exists counterpart term type vice versa word equivalent exhibit two function f g x x g f x forall x x g f x x xg f x f g forall f g yf g coq translates following inductive type mentioned earlier prove two type equivalent exhibiting two function proving function satisfy two property introduce ltac notation end tactic notation equiv uconstr f uconstr g apply mktypeequiv f g tactic equiv f g turn goal form two subgoals prove f g form isomorphism typeequiv equivalence typeequiv equivalence prove demonstrating reflexive symmetric transitive typeequiv reflexive proof straightforward type equivalent x x x forall x x id id x x xid id x proof equiv id id qed typeequiv symmetric know exists two function f g satisfy expected property prove proof destruct equ f g equiv g f qed typeequiv transitive know exists two function satisfy expected property typeequiv similarly know exists two additional function compose function together prove reminder composing two function f g denoted f g thereafter consists using result f input g infix fun f g x g f x level come proof proof destruct equiv intro x rewrite rewrite intro x rewrite rewrite qed coq standard library introduces equivalence type class provide instance type class typeequiv using three lemma proven section example canonical form come back initial example given introduction writeup prove assertion list unit list list morphism mean list list prove defining instance proper type class use proper type class allows leveraging hypothesis form rewrite tactic personally consider providing instance proper whenever possible good practice would encourage coq programmer nat specialpurpose list notice using typeequiv prove lemma natandlist nat list unit proof equiv fix tolist n match n tt tolist end fix oflist l match l rst oflist rst end induction x auto induction auto rewrite ihy destruct qed nonempty list introduce variant list contains least one element modifying nil constructor take one argument instead none demonstrate relation list nonemptylist reveals alternative implementation nonemptylist precisely prove forall type nonemptylist list bit cumbersome much first define conversion function prove satisfy property expected typeequiv sum operator sum morphism mean prove compose together function whose existence implied end introduce auxiliary function lrmap prove sum morphism defining proper instance instance sumproper proper typeequiv typeequiv typeequiv sum proof addmorphismtactic intro equiv lrmapsum lrmapsum intro xy cbn rewrite rewrite intro xy cbn rewrite rewrite qed sum associative associativity sum straightforward prove pose particular challenge perspective reader assume article wellwritten sum neutral element need find type e e type similarly x x x x natural number x x x empty type type term false act natural element type reminder empty type coq defined following syntax note following definition erroneous inductive empty using print type illustrates issue inductive empty prop buildempty omitted coq defines inductive type one constructor coming back empty neutral element sum highlevel perspective make sense construct term type empty empty contains exactly number term intuition convince coq intuition correct like providing two function type empty empty first function inl one constructor sum second function tricky write coq come writing function type empty exact trick allows coq encode proof contradiction combine fromempty generic function everything prove empty prod operator similar proven sum expect le text section prod morphism prod neutral element prod absorbing element absorbing element empty like absorbing element multiplication natural number neutral element addition prod sum distributivity finally prove distributivity property prod sum using similar approach prove associativity prod sum bonus algebraic datatypes metaprogramming algebraic datatypes suitable generating function demonstrated automatic deriving typeclass haskell trait rust datatype expressed term sum prod know deal two construction start metaprogramming take example fold function fold function function take container argument iterates value container order compute result introduce foldtype input canonform output tactic compute type fold function type input whose term prod sum canonform whose result type output interested reader familiar ltac ltac foldargs b r lazymatch unit exact r b exact r r c type exact ltac foldargs b c r ltac foldargs b r type b c type exact r ltac foldargs b c r c type exact c ltac foldargs b r exact r end ltac currying match b c exact ltac currying b c exact end ltac foldtype b r exact ltac currying ltac foldargs b r b r use compute type fold function list definition foldlisttype outputed print foldlisttype fun type list type type type exactly could expected match type foldright generating body function possible theory probably ltac without modifying bit typeequiv could nice usecase metacoq though
32,Lobsters,formalmethods,CSE-Formal methods,Weak and Strong Fairness,https://www.hillelwayne.com/post/fairness/,weak strong fairness,workshop stuttering stutterinvariant stutter unfair weak fairness appendix fairness action action strong fairness strongly fair actually strongly fair lock convoy thought newsletter appendix formalizing fairness,process revising workshop realized one particular important aspect tla fairness something struggled explain well everybody struggle explain well also great example messy concurrent system get figured would make good post blog stuttering take following spec clock used tla mostly clear context module clock extends tlc integer variable hour init hour next hour hour hour next value hour else hour hour system start init evolves according next spec init next hour liveness hour property hour aka eventually time pm spec guarantee property hold one way could fail time tick pm pm time tick pm pm throw clock lake crazy right entire idea specification see assumption need make system safe explicitly say throw clock lake spec permit throw clock lake spec also permit timeouts infinite delay crash anything equivalent system making progress tla specification must stutterinvariant stutter temporal step reassign variable value outside observer look like nothing happened stutterinvariance make composing spec tla miserable experience opposed specification language composing spec punishment sinner hell system unfair infinite sequence stutter step valid behavior equivalent agent system ever making progress clock unfair allowed stutter infinite number time init time next time next time stutter time stutter time stutter time something learner encounter relatively late learning tla people get along fine long time safety property violated entering new state even system infinitely stutter safety property still hold however liveness property require system eventually reach state blocked stuttering fact entire spec unfair liveness property hold system might never take step first place usually interested unfair system next step unfairness weak fairness action weakly fair always happen eventually happen thread always make progress make progress language tla write spec init next hour wfhour next next possible eventually happen guarantee liveness want read formalize fairness see appendix fairness action weak fairness applies specific action description state change spec whole spec give u lot flexibility instead implemented spec tick hour hour else hour hour break hour hour next tick break spec init next hour wfhour next next action composed two subactions tick break spec ensures two action together fair individually mean might never see break spec could choose tick every single time instead wrote spec init next hour wfhour break ensure least one break action get lot expressive power level precision example declare missioncritical subset system fair let peripheral element stay unfair make part workflow fair guaranteed start workflow guaranteed finish even make action part next fair though dragon kind thing strong fairness weak fairness implies existence strong fairness weak fairness say action always enabled eventually happens guarantee cyclically enabled action happen spec worker abstract job succeed fail fails retries succeeds make succeed retry weakly fair leave fail unfair variable status init status start changestatus status status succeed changestatus start done fail changestatus start fail retry changestatus fail start next succeed fail retry unchanged status fairness wfstatus succeed wfstatus retry spec init next status fairness liveness status done liveness hold fairness clause say succeed guaranteed permanently enabled problem permanently enabled could following error trace init status start fail status fail retry status start fail status fail retry status start every step marked status start succeed enabled retry enabled action point disable guaranteed happen back status start succeed enabled fail happens change since succeed keep flipping enabled disabled weak fairness guarantee happens want make sure succeed happens need make strongly fair strong fairness say action permanently disabled eventually happen unlike weak fairness action intermittently enabled still guaranteed happen fairness sfstatus succeed wfstatus succeed wfstatus retry satisfies liveness strong fairness considered le important weak fairness weak fairness safer assumption realistically feasible even case strong fairness required satisfy liveness property people sometimes opt drop property instead build strong fairness microsoft thread scheduler actually strongly fair guarantee thread make progress make probabilistically nearcertain return avoid lock convoy thought find intuitive may worked long time consistently find beginner struggle concept maybe something easier teach writing workshop hope made little bit clearer shared first draft essay newsletter like writing subscribe appendix formalizing fairness formally define weak fairness follows wfv enabled v v whole lot nonalphanumeric character going step step v v action happens value v change call achange enabled v enabled special operator roughly true action happen even happen wrote enabled v v would say achange possible happens would break stutterinvariance achange enabled stutter instead write enabled v v fine mean achange eventually happen fine another stutter even completely different state long future point happens enabled v v say achange eventually happens often happens valid achange happen instead write always eventually aka achange happen infinite number time enabled v v finally prepend condition eventually always instead forcing achange enabled force reach point achange permanently enabled give u weak fairness get strong fairness replace initial enabled v v instead guaranteeing achange eventually always enabled guarantee always eventually enabled strong fairness powerful always implies weak fairness action permanently enabled also cyclically enabled
33,Lobsters,formalmethods,CSE-Formal methods,The TodoMVC Showdown: Testing with WebCheck,https://wickstrom.tech/programming/2020/07/02/the-todomvc-showdown-testing-with-webcheck.html,todomvc showdown testing webcheck,todomvc webcheck webcheck temporal logic action specification v model todomvc benchmark highlevel feature specification issue specification todomvcspecpurs editing mode test result routing hidden item indeed specified official documentation todomvc documentation future bright sign newsletter twitter hillel wayne felix holmgren martin janiczek tom harding martin clausen,post share result testing todomvc implementation using new testing tool named webcheck explain specification work problem found todomvc implementation mean project webcheck last three month used spare time build webcheck browser testing framework combining idea propertybased testing pbt tla linear temporal logic functional programming webcheck write specification web application instead manually writing test case specification describes intended behavior finitestate machine invariant using logic formula written language inspired temporal logic action pdf tla webcheck generates hundred thousand test run verify application accepted specification test generated webcheck sequence possible action determined current state dom time action think webcheck exploring state space automatically based dom introspection find user behavior problem biased lazy human unlikely think write test job instead think requirement improve specification time specification v model propertybased testing testing state machine using model model capture essential complexity system test sut need functionally complete useful oracle system conceptually simple egâ keyvalue database engine problem system inherently complex egâ business application big pile rule useful model tends grow complex system webcheck specification like model implement complete functional model system leave detail specify important aspect application example wrote specification state time one spinner nothing else possible specify pbt general modelbased pbt seen todomvc benchmark since start project used todomvc implementation benchmark webcheck developed general specification todomvc implementation todomvc contribution documentation highlevel feature specification project cypress test suite curious could find anything new using webcheck early checking mainstream framework implementation found angular mithril implementation rejected specification submitted issue todomvc issue tracker invigorated initial success decided check remaining implementation gradually improve specification generalized specification work nearly implementation listed todomvc website use old markup us id instead class element support variant specification looking test result might want look webcheck specification published gist todomvcspecpurs gist includes brief introduction webcheck specification language write specification write proper documentation specification language eventually give taste work least excluded support old todomvc markup keep specification simple possible specification cover feature todomvc yet notably leaf editing mode entirely cover usage local storage todomvc local storage disabled webcheck might refine specification later think found enough motivate using webcheck todomvc application likely webcheck would used project specify thing leave others astute reader might noticed specification language look like purescript pretty much purescript webcheckspecific addition temporal modality dom query decided write custom dsl instead write purescript interpreter way specification author use tool package purescript ecosystem work great far test result test result running webcheck todomvc specification example listed todomvc website use short description problem recurring explain detail example problemsnotes pure javascript backbonejs angularjs clear input field filter change emberjs dojo knockback canjs polymer react mithril clear input field filter change vue marionettejs compiled javascript kotlin react spine dart gwt closure elm angulardart race condition initialization filter implemented typescript backbonejs typescript angularjs typescript react reagent scalajs react scalajs bindingscala jsofocaml humble gopherjs evaluation todomvc backbonejs requirejs knockoutjs requirejs inconsistent first render angularjs requirejs need custom readywhen condition canjs requirejs lavaca requirejs clear input field filter change cujojs race condition initialization filter implemented sammyjs somajs duel clear input field filter change kendo ui dijon enyo backbonejs exoskeleton ractivejs react alt react backbonejs aurelia angular riot jsblocks realtime socketstream firebase angularjs nodejs express gcloudnode nonframework implementation vanillajs add pending item iteraction vanillajs add pending item iteraction todocount strong missing jquery passed failed testable filter implemented way switching item specified todomvc documentation routing race condition initialization event listener attached time newtodo form rendered although unlikely quick enough focus input press return post form navigate user agent page query paremeter egâ indexhtml text todomvc end world system want happen inconsistent first render application briefly show inconsistent view render valid initial state knockoutjs requirejs show empty list item bottom even though footer hidden item need custom readywhen condition specification awaits element matching todoapp todoapp old markup dom taking action case implementation need modified specification instead awaits frameworkspecific class egâ ngscope inconvenience testing implementation using webcheck rather error input field input field enter todo item argue defeat purpose todo list application indeed specified official documentation add pending item iteraction pending item input field another action taken toggle change filter etc pending item submitted automatically without return key press todocount strong element missing element matching selector todocount strong must present dom item showing number active item described todomvc documentation state cleared implementation error issue test implementation make hard perform repeated isolated testing state knowledge cleared test isolation broken point key requirement currently placed webcheck sut must stateless respect new private browser window future version webcheck add hook let tester clear system state test run missingbroken link listed implementation seems moved decommissioned note decide problem bug todomvc project maintainer see problem disagreement implementation specification good chunk humility order testing system designed built others future bright happy effective webcheck far month sparetime prototyping hopefully something polished make available soon open source tool run saas version subscription model maybe time come maybe webcheck part todomvc testing perhaps project interested webcheck please sign newsletter post regular project update definitely spam also follow twitter comment question please reply following thread thanks hillel wayne felix holmgren martin janiczek tom harding martin clausen reviewing draft post
34,Lobsters,formalmethods,CSE-Formal methods,Train Sidings - A TLA+ Example,https://www.heinbockel.eu/2019/12/08/train-sidings-a-tla-example/,train siding tla example,tla tla die hard diverse array algorithm amazon storage service tlc model checker example train siding railway similar computer network developing model github straightforward behavior run model preventing disaster solving deadlock overcoming stuttering avoiding crash resetting semaphore fair train finishing model real conclusion limitation write model reading readability outlook,tla tla modeling language one model technical system discrete state used describe many thing jug problem die hard diverse array algorithm amazon storage service power tla come tlc model checker check model certain property property could invariant statement true every possible state like buffer overrun check temporal property eg algorithm eventually finish tla extremely useful tool software developer well many system engineer force u think first system supposed write concise unambiguous language math reason model tlc model checker model complete also specification system going implement share fellow engineer reason started playing around tla article want share created working model tla step step including pitfall error one run example train siding easiest way learn anything try wanted example motivates simple enough could get quick result obvious came example railway world might noticed like write railway similar computer network example want model simple train siding place railroad line two train pas one train go first one two track wait train passed two train must collide obviously reason track protected semaphore semaphore show go signal green light may train pas example might look trivial first one could intuitively maneuver train via siding without possibility collision however intuitive thinking might enough model railroad real railroad life stake reality need make sure train never collide even dispatcher control switch semaphore bit sleepy distracted got hunch even though example may look trivial might prove interesting exercise developing model first step modeling always decide include model exclude decided focus simple siding divided part track track track two switch switch switch protect possible scenario added four semaphore assumes train always take track train always take track choose track take also chose model train one track switch given moment never occupy two reality would never case train eventually cover least two piece track even understand problem let start modeling find tla model step github load tla toolbox run first thing needed decide variable describe model variable basis formulate everything else invariant liveness property action came set variable variable two variable position train four variable signal semaphore two variable position switch note variable state track could modeled siding also way track keep information train currently instead train remember track way around easier check train collision went next variable need initialized happens action init init position train position train stop signal semaphore stop signal semaphore stop signal semaphore stop signal semaphore straight direction switch straight direction switch train start left side track train opposite side semaphore show stop signal switch set position straight tla always good idea add socalled type invariant possible value variable could take given state take value listed model checker throw error protect mistake action part model type invariant look like position signal stop go typeinvariants position position signal signal signal signal straight left straight right notice created two set position signal beginning repeat multiple time ok basic next step go ahead design action model need think property system important one safety property train must never collide must true every possible state invariant luckily contain location train easy formulate invariant nocollisions check property model would pretty dull model train move would fulfill way good passenger would ever move destination need formulate goal tlc want train reach destination track train track train eventually make goal temporal property formulated way crossingsuccessful temporal liveness property also catch situation train get stuck checking property important see later straightforward behavior complex system work invariably found evolved simple system workedjohn gall getting point rather simple design behavior system would train move semaphore change signal switch move could tackle everything decided begin simplest behavior possible let train move straight line without obeying switch semaphore would realistic would teach proper tla syntax next step forward figure describe simple action train track move switch else train switch move track programmer intuitively tried solve tla ifthenelse construct even work two branch wanted another else resulted strange error syntax checker also case statement similar switchcase programming language work expected finally figured tla way move train straight line z unchanged read like equal step next step wrapped mind around construct became quite natural took must admit notice also definition unchanged action complete without definition variable change action otherwise model checker complain forgotten part specification action move train quite similar repeat action combined lead first specification specification next spec init next var mean complete specification convention called spec combination initial state init action next describes following state strange syntax bracket around next confusing first simple term mean specification also allows step none variable change important property specification add default allow tlc find socalled stuttering behavior run model first version specification complete run first import tla file tla toolbox create new model add two invariant typeinvariants nocollisions check also add property crossingsuccessful run model setting throughout project invariant stay second see result model check found error invariant nocollisions violated well big surprise current model train move straight ahead collide error trace follow disaster step step tlc show train moved track hit train moved way collision could happened see tlc stop first error one problem shown enough keep u moving preventing disaster step know working model move train detects collision think prevent collision semaphore protect piece track denying access track currently occupied let see happens train obey semaphore add condition action train movement move train straight line go go unchanged change state semaphore model yet initially position stop train collide let run new model find file see error message change longer invariant nocollisions instead report deadlock deadlock general condition tlc check situation model take new step tlc right situation neither train move safe state still want let continue solving deadlock semaphore need get moving mean action move new signal like notin straight go unchanged condition first check train waiting front semaphore switch needed next condition train track train want enter prevent collision last condition switch leading track pretty straightforward condition semaphore look similar find complete code also added another action change state switch change switch straight left left straight unchanged train chance crossing additional action next action look much bigger next might ask synchronize different action make sure first change switch semaphore train well specification allows step happen time principle want goal check possible combination error even unlikely one tlc care probability possibility allows u build reliable system find also corner case happen rarely disastrous consequence think happen run model fulfill desired property switch semaphore change state well actually forgot change next state action train movement never follow switch siding check switch state model incomplete expected deadlock two train would stuck semaphore got quite different error say temporal property violated hm mean look stack trace give clue end stuttering step let look secondtolast step step train progressed track stuck semaphore train still original position also leave follow switch siding model stop instead switched switch left state action still enabled situation model continuously step switch left straight actually reached deadlock one one part model keep busy problem solve one overcoming stuttering stuttering occurred train follow switch yet need change action train accordingly first added action change switch find real deal come train follow switch like move train via siding go straight else go unchanged well train pas every track protected semaphore one run model checker sure oh collision must something overlooked let check error trace train proceeds track stop semaphore look good far switch change right position semaphore go green train proceeds switch good far disaster happens switch change straight position train right top train continue straight ahead crash train turn model failed fulfill one basic requirement reallife interlocking semaphore turn go switch train path must changed train passed section track look like done tlc saved designing potentially dangerous system avoiding crash specification fix problem found last step added check action change switch must change corresponding semaphore say stop one showing green light semaphore switch state stop stop straight left left straight unchanged crash finally fixed train pas hoped done ran model another error crash fixed deadlock detected happened last state train standing track right next far good semaphore go rule introduced switch must change situation train continue missing resetting semaphore well ignored one important rule interlocking tlc reminded semaphore train pas never reset stop mean track section train entered protected train follow train must happen real life requirement semaphore switch stop train passed model yet added extending action train whenever passed semaphore semaphore switch back stop go stop change semaphore stop train passed unchanged unchanged go unchanged stop unchanged unchanged find change also add check switch changed train currently would also possible otherwise reality check done employing track occupancy detector axle counter detect train enters leaf certain section track however still final model deadlock fixed show another stuttering behavior train already track train stuck switch happened semaphore blocking train turn specification allows behavior switch keep changing state time without train ever taking last step forward happens property missing spec fairness fair train default action enabled tla might happen might well happen useful check system behaves certain thing expected never occurs like message never received case interested happens train stop moving maybe engine broke blockage track whatever model concerned kind thing situation handled automated system reality case train need human intervention get moving every train movement line blocked ok model assumes every step taken eventually taken done adding weak fairness action tell tla action eventually taken train get stuck part spec spec init next var wfvars wfvars wfvars wfvars wfvars wfvars wfvars wfvars added weak fairness action think none ever get stuck sake model consciously ignoring fact part system might fail reality find new definition let see result model check get deadlock error let see hm train track train track goal reached finally error message turn model describes step point train reached destination move nothing happens classical deadlock want extend model let train go would never finish exercise decide remove check deadlock hopefully error quite yet tlc report another stuttering step train advance track train still track instead train one progressing switch keep changing state forever seems like dispatcher interlocking make mind finishing model real spoiler alarm really last step fulfill check step added rule decide priority two train waiting pas switch rule simple train waiting must pas first otherwise track never become free human dispatcher rule obvious computer let extend action switch stop stop straight change switch one track free left left straight unchanged change finally report error model state distinct end step lead train passing without crashing done find last version model file conclusion started example wanted something simple enough could finish short time still complex enough teach something interesting finished example weekend took time expected thought understood problem situation well tlc found many problem model would never spotted valuable lesson even though problem seems simple might hidden detail modeling system software ahead building find many problem would shown much later process limitation nature model include detail reality simplification instance train model occupy one piece track time reality train certain length least temporarily occupy two even three piece track eg pas switch also equipment never break model well reality wanted model behavior would need much sophisticated model would need define failure mode piece equipment reaction need check extended description still fulfills highlevel model constructed example tla support kind multilayered description model refinement need extended model dig deeper topic first real project tla tried use basic language construct confuse many thing one could use specification tuples function external module might part future example write model working model developed understanding general process modeling tla first thing think variable describe system basis part model invariant temporal property well action operate variable decided variable describe temporal property invariant always helpful include type invariant check assign value variable allowed created property add model check start running model running model early often help find error quickly gone wrong direction long place action formulated helpful start simplest thing check invariant violated ideally clear expectation result step validate expectation result model check system behaves differently go one step back think cause different behavior might teach something tla system grow system simple behavior sophisticated one running model check step guide development process check passed done decide result maybe use specification piece software gon na write maybe jotted done idea system want discus colleague want dig deeper refine model come even closer reality reading readability writing specification also made mental note read specification somebody else written due syntax tla specification similar structure variable go top description spec next bottom action action declared first used another action read top bottom see detail first get big picture much easier read way round read declaration variable jump bottom definition spec next work way upwards action way build understanding whole specification step step reading specification might easier use prettyprinted pdf version tla toolbox create replaces ascii representation mathematical symbol actual mathematical symbol thus bit easier read also thing improve readability spec use section separate different part spec make easier spot eg definition invariant end action start section created adding line least four dash assign meaningful name variable programming try avoid name like x var meaning try assign name construct program see given condition tlc check name like crossingsuccessful technical reason could configured model check check instead crossingsuccessful program make difference reader spec outlook building relatively simple example learned lot tla feel prepared write sophisticated specification explore construct tla hope learned something following experiment tool best way learn use would happy example inspired try tla idea
35,Lobsters,formalmethods,CSE-Formal methods,Stan - A static analysis tool for Haskell (similar to errorprone for Java),https://github.com/kowainik/stan/blob/master/README.md,stan static analysis tool haskell similar errorprone java,stan st table content tool back table content goal back table content feature back table content toml work back table content hie file inspection severity category observation check type filter scope installation instruction back table content ghc api note using cabal back table content cabal using stack back table content stack hackage back table content homebrew back table content ubuntu ppa back table content kowainik ppa download binary back table content github release usage instruction back table content hie file common stanza general configuration info back table content toml toml configuration back table content toml haddock documentation commandline interface back table content main command back table content hie file toml inspection back table content dedicated wiki page converting toml cli configuration back table content tool back table content ghc glasgow haskell compiler weeder haskell deadcode analysis tool hlint haskell linter tool roadmap back table content github project page link wiki back table content,stan stan haskell static analysis tool note stan beta phase api subject changed required need table content tool back table content stan commandline tool analysing haskell project outputting discovered vulnerability helpful way possible solution detected problem stan searching performance errorprone code piece also help establishing applying bestpractices whole haskell ecosystem although haskell statically typed language property encoded type even though ghc quite powerful compiler try libraryagnostic provide languagespecific suggestion stan us knowledge current state ecosystem commonly used library find stan helpful enjoy writing haskell want guarantee code provided haskell type system ghc goal back table content stan design implementation driven following goal catch common vulnerability antipatterns performance issue provide meaningful insight project generally point potential bug weak point program flow user carefully evaluate problem code help beginner learn best practice easy informative way generate report used proof code quality create best class flexible enough interface usage including eg optin optout inspection feature back table content stan configurable cli tool besides main feature analysing haskell project statically stan list feature make unique easy use flexible configure pretty analysis result including html terminal report suggestion possible solution fixing existing problem analysing haskell source code also information cabal file flexible runtime configuration via toml cli see example stan html report hosted online example terminal output give understanding sort analysis expect stan work back table content stan analysis based hie file compiletime information haskell source code gathered recorded ghc hie file contain haskell ast detailed information identifier type expression subexpressions ghc huge amount work compiling haskell project stan take advantage feature avoid duplicating work focus unique feature analyse hie file easily developed edsl defining ast type pattern based final tagless approach stan algorithm traverse hie ast hie file project match every ast node given pattern find potential vulnerability code stan analysis check represented inspection unique id inspection name description severity list category pattern matching relevant part source code possible solution problem inspection casted project produce zero observation vulnerability specific part code think observation pair inspection piece source code inspection triggered observation assigned unique stable id depending source location refer later ignore disable inspection enable particular module using check rule controlling inspection run check type include exclude filter inspection id category severity etc scope file directory everything check specified using either toml cli interface default stan analysis source file using implemented inspection want understand stan terminology better refer glossary installation instruction back table content stan take advantage ghc api provide analysis stan analysed project need built ghc version detail see easiest robust way install stan build source machine note stan compatible ghc version using cabal back table content step install stan using cabal build tool need cabal first need clone repository git clone http githubcomkowainikstangit cd stan need build using cabal cabal exe stan finally copy resulting executable desired location path environment variable like cp cabal offline sh c command v stan localbinstan using stack back table content step install stan using stack build tool need stack first need clone repository git clone http githubcomkowainikstangit cd stan need build using stack finally copy resulting executable desired location path environment variable like cp stack path localinstallroot binstan localbinstan hackage back table content stan available hackage install tool well cabal stan installmethodcopy overwritepolicyalways also choose ghc version want stan installed optionally add suffix executable name cabal stan w installmethodcopy overwritepolicyalways homebrew back table content macos get stan using homebrew kowainik tap need run following command brew install kowainiktapstan note homebrew installs stan version build latest supported ghc version mean version stan working project ghc version due ghc issue described ubuntu ppa back table content ubuntu get stan using kowainik ppa need run following command sudo addaptrepository ppa kowainikstan sudo apt update sudo apt install stan note aptget installs stan version build latest supported ghc version mean version stan working project ghc version due ghc issue described download binary back table content download binary directly github release downloading binary make executable copy convenient location eg chmod x mv localbinstan note need download binary specific o specicific ghc version use due ghc issue described usage instruction back table content stan work hie file analyse haskell project therefore stan requires user generate hie file advance fortunately straightforward satisfy necessity produce hie file add following ghc option project cabal file stanza want analyse ghcoptions fwriteideinfo hiedirhie recommendation use common stanza feature write option enable stanza easily note recommend generating hie file hie folder recommendation specify folder well need run stan using hiedir option specified path hie folder creating hie file run stan project see found vulnerability terminal want see detailed information structured way generate html report stanhtml file using following command stan strives implement convenient interface use tool without configuring lot advance however tool also provides various way set way efficient particular use case general configuration info back table content stan work configured multiple source increasing order priority default setting hardcoded library includes custom setting environment variable toml file configuration cli argument stan runtime setting many part come different configuration source option specified multiple source prioritized one used addition stan help understand configuration output detailed information part config configuration setting used set toml configuration back table content stan support toml runtime configuration order customize work tool based user individual requirement use toml configuration disable inspection enable particular haskell module ignore observation completely remove file analysis specifically use following variable set custom configuration toml variable description example check set rule control set inspection per scope check type exclude id scope remove remove file analysis completely stan wo nt run specified scope remove file srcfilehs directory folder ignore ignore specific observation found project ignore id see haddock documentation explanation toml configuration work example different use case case number toml file locally following rule describe stan decides toml configuration file use default stan try read setting local stantoml file current directory want adjust default stan setting custom rule create stantoml file root haskell project local stantoml file found stan try read global stantoml file global stan configuration convenient work several project want custom setting default nt default configuration file still okay stan use default hardcoded setting specify path specific configuration file using configfile option custom file used addition default toml config nt want use default toml configuration pas nodefault flag use stanusedefaultconfigfalse environment variable commandline interface back table content section describes possible achieve stan cli already installed analyser use get short information possible command option terminal main command back table content main command one actually would analyse haskell codebase plenty configuration option tune run similarly toml configuration specify hie file folder use hie otherwise specify cabal file project lookup automatically otherwise turn onoff usage default stantoml configuration file specify toml configuration file use used additionally default toml file applicable filter specific file directory inspection category severity generate html report file set output verbosity choose machine readable json output instead highlevel explanation available subcommands subcommand description example check set rule control set inspection per scope stan check exclude categoryinfinity scopeall check include id filesrcfilehs remove remove file analysis completely stan wo nt run specified scope stan remove filesrcfilehs remove directoryfolder ignore ignore specific observation found project stan ignore id precisely command option described stan report check type option filter option scope option remove scope option ignores id option hiedirdirpath cabalfilepathfilepaths configfilefilepath nodefault short hidesolution jsonoutput h help v version description check command specify list check remove command specify scope removed ignores command specify list need ignored report command generate html report hiedirdirpath relative path directory hie file default hie cabalfilepathfilepaths relative path cabal file specify many option configfilefilepath relative path toml configuration file nodefault ignore local stantoml configuration file short hide verbose output information observation hidesolution hide verbose solution information observation jsonoutput output machinereadable output json format instead h help show help text v version show stan version subcommands option type include include check exclude exclude check filter idinspectionid inspection id used severityseverity inspection severity exclude include categorycategory inspection category exclude include filterall exclude include inspection scope filefilepath file exclude include directorydirectorypath directory exclude include scopeall apply check file report option b browse open report browser example want run stan analysis single file generate html report immediately open report browser use following command stan check exclude filterall scopeall check include filterall filesrcstanexamplehs report browse inspection back table content find list available inspection description additional information dedicated wiki page however tool get information easily using inspection command optionally see detail particular inspection typing corresponding inspection id alongside see robust description command inspection show inspection usage stan inspection inspectionid available option inspectionid show specific inspection information h help show help text converting toml cli configuration back table content usually convenient proper configuration file suit project reuse run stan sometimes need quickly run tool setting another machine file possible want send reproducible command anyone could execute get identical result purpose special command allows tomltocli convert toml configuration file stan cli command usage stan tomltocli configfilefilepath available option configfilefilepath relative path toml configuration file h help show help text convenience able use reversed command clitotoml clitotoml convert cli argument stan toml configuration usage stan clitotoml configfilefilepath check type option filter option scope option remove scope option ignores id option tool back table content ghc glasgow haskell compiler ghc popular haskell compiler access step code compilation ghc warn different aspect code nonexhaustive pattern matching unused variable etc however supposed used static analysis tool provides error warning part whole compilation pipeline weeder haskell deadcode analysis tool weeder tool analysis code specific limited case help eliminate unreachable code project similarly stan weeder tool also working hie file get information hlint haskell linter tool hlint linter tool suggests code improvement make code simpler unlike stan us hie file analysis access complete compiletime info produced ghc hlint relies parsing benefit also limit capability stan hlint complementary tool different scope goal intention duplicate hlint stan learn implementation goal project please read section describe stan project detail roadmap back table content plan nearest future much idea work see detailed plan dedicated github project page link wiki back table content
36,Lobsters,formalmethods,CSE-Formal methods,Verified Programming with Project Everest,https://www.youtube.com/watch?v=5B7iI2onu8s,verified programming project everest,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature verified programming project everest youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature verified programming project everest youtube
37,Lobsters,formalmethods,CSE-Formal methods,SAT solver on top of regex matcher,https://yurichev.com/news/20200621_regex_SAT/,sat solver top regex matcher,sat solver top regex matcher html tag matching find two longest repeating substring input string see also divide input number sqrt detecting factorial number reduction perl regular expression matching syntax backreferences expression refers number group naturally variant us group name instead number another python extension pname indicates content group called name matched current point regular expression finding doubled word b w also written b p see also book file would lead revolution computer science hn,sat solver top regex matcher sat problem npproblem regex matching however quite popular regex backreferences extension extends regex matching hard npproblem backreferences usually denoted etc perhaps practical use backreferences heard html tag matching regex nt escaped properly match successfully second group must coincide first like b test b test b another practical usage heard match string string string also find two longest repeating substring input string see also us arcane divide input number sqrt detecting factorial number post inspired reduction perl regular expression matching please read first however author incorrectly state problem solvable fact sat instance solvable consisting clause arbitrary size also since satcnf instance usually variable ca nt use backreferences like use different method python syntax backreferences expression refers number group naturally variant us group name instead number another python extension pname indicates content group called name matched current point regular expression finding doubled word b w also written b pw pword b see also let take small cnf instance p cnf call variable must true rest always false picosat satisfiable v satisfiable v satisfiable v satisfiable v satisfiable v solution let translate regex stringxxxxx x x x x x x x x x x x pattern p x p x p x p x p x x x x x x x x x x x x x x x x x x x x x sat see input string many x many variable cnf instance many x substring many clause instance take first part pattern p x p x p x p x p x roughly mean group match x may let matcher decide second part pattern clause clause mean whole group must match x nt tell one subgroup may match subgroup actually backreference first part pattern term positive negative term clause x x mean whole group must match x nt tell backreferences prohibited present simultaneously ok match x second part union would match ok match x first part union would match also ok match nothing either part union match x regex ca nt match mean input instance unsatisfiable likewise run instance command input variable true stringxxxxxxxx x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x pattern p x p x p x p x p x p x p x p x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x p x x x x x sat also managed solve fred puzzle book ctrlf fred puzzle satcnf form stringxxxxxxxxxxxxxxxxxxxxxxxxxxxx x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x pattern p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x p x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x sat took minute old cpu clocked file including solver course stuff nt practical demonstrates reduction one problem regex matching backreferences another sat find better algorithm problem would lead revolution computer science upd discussion hn please drop email bug andor suggestion dennis yurichevcom
38,Lobsters,formalmethods,CSE-Formal methods,Alive2: Automatic verification of LLVM optimizations,https://github.com/AliveToolkit/alive2,automatic verification llvm optimization,online warning prerequisite building building running translation validation running standalone translation validation tool alivetv llvm bug found buglistmd,consists several library tool analysis verification llvm code transformation includes following library ir symbolic executor llvm ir converter refinement check aka optimization verifier smt abstraction layer included tool alive dropin replacement translation validation plugins clang llvm opt standalone translation validation tool alivetv online warning support interprocedural transformation may crash produce spurious counterexample run pass prerequisite build need recent version cmake gccclang llvm optional building mkdir build cd build cmake gninja dcmakebuildtyperelease ninja cmake find include directory find wrong one pas argument cmake building running translation validation opt clang translation validation requires build llvm rtti exception turned llvm built following way cd llvm mkdir build cmake gninja dllvmenablerttion dllvmenableehon dbuildsharedlibson dcmakebuildtyperelease dllvmenableassertionson dllvmenableprojects llvm clang llvm configured follows cmake gninja dcmakeprefixpathllvmbuild dcmakebuildtyperelease want use clang plugin add cmake command translation validation one llvm pass transforming ir file linux llvmbuildbinopt load tv instcombine tv devnull fooll mac llvmbuildbinopt load tv instcombine tv devnull fooll run pas combination pass command line must placed two invocation tv pas translation validation single llvm unit test using lit llvmbuildbinllvmlit vv llvmllvmtesttransformsinstcombinecanonicalizeconstantlowbitmaskandicmpsgetoicmpslell output testing test thread pas llvm transformsinstcombinecanonicalizeconstantlowbitmaskandicmpsgetoicmpslell testing time expected pass translation validation llvm unit test llvmbuildbinllvmlit vv llvmllvmtesttransforms running clang plugin clang srcc emitllvm fpassplugin fexperimentalnewpassmanager xclang load xclang running standalone translation validation tool alivetv tool two mode first mode specify source original target optimized ir file example let prove removing nsw correct addition alivetv srcll tgtll define f b add add nsw b ret add define f b add add b ret add transformation seems correct flipping input yield counterexample since correct general add nsw interested counterexample using undef use commandline argument disableundefinput second mode specify single unoptimized ir file alivetv optimize using optimization pipeline similar without interprocedural pass attempt validate translation example february branch contains optimizer bug triggered follows cat fooll define foo sub icmp ne zext lshr lshr ret alivetv fooll define foo sub icmp ne zext lshr lshr ret define foo sub ret transformation nt verify error value mismatch example source target source value target value summary correct transformation incorrect transformation error llvm bug found buglistmd show list llvm bug found
39,Lobsters,formalmethods,CSE-Formal methods,Summer of Zoom – A curated list of remote conferences,http://oktatok.karolyrobert.hu/buday.gergely/summer-of-zoom/,summer zoom curated list remote conference,,
40,Lobsters,formalmethods,CSE-Formal methods,How did software get so reliable without proof?,https://surfingcomplexity.blog/2020/03/02/how-did-software-get-so-reliable-without-proof/,software get reliable without proof,software get reliable without proof health equipment aircraft weapon system industrial process including nuclear power station operator error like,turingawardwinning computer scientist car hoare wrote paper title software get reliable without proof paper hoare grapple observation software seems reliable computer science researcher expected possible without use mathematical proof verification emphasis added twenty year ago reasonable predict size ambition software product would severely limited unreliability component program dire warning issued danger safetycritical software controlling health equipment aircraft weapon system industrial process including nuclear power station fortunately problem program correctness turned far le serious predicted question arise twenty year pessimistic prediction falsified due successful application result research motivated prediction could clearly little software ever subjected rigour formal proof hoare offer five explanation software became reliable management testing debugging programming methodology personal favorite overengineering looking back paper strike absence acknowledgment role human operator play type system hoare writes health equipment aircraft weapon system industrial process nuclear power fact time word operator appears text precedes word error emphasis added ultimate necessary defence real time system arbitrary hardware error operator error organisation rapid procedure restarting entire system ironically line closest hoare get recognizing role human play keeping system running problem question software get reliable without proof asking wrong question software got reliable without proof system include software got reliable without proof focusing software hoare missed overall system whether call sociotechnical system softwareintensive system joint cognitive system see larger system doomed even able ask right question like like loading
41,Lobsters,formalmethods,CSE-Formal methods,Formal Methods: From Academia to Industrial Practice,https://arxiv.org/abs/2002.07279,formal method academia industrial practice,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
42,Lobsters,formalmethods,CSE-Formal methods,seL4 is verified on RISC-V,https://microkerneldude.wordpress.com/2020/06/09/sel4-is-verified-on-risc-v/,verified riscv,riscv formerly ariane core riscv blog like,sound great mean pronounced esseellfour arguably world secure operating system o kernel o kernel lowest level software running computer system code executes privileged mode smode riscv mmode reserved microcodefirmware kernel ultimately responsible security computer system microkernel idea microkernel minimise trusted computing base part system plan b fails linux window kernel consist ten million line code contain literally thousand likely ten thousand bug huge attack surface welldesigned microkernel ten thousand line inherently trustworthy set aside o kernel including microkernels verification story world first o kernel machinechecked mathematical proof functional correctness c implementation winning u hall fame award result mean proved bugfree relative specification formulated mathematical logic proof security property show specification right property functional correctness extending binary code advanced support hard realtime system world fastest microkernel best class definition originally verified arm processor extended processor riscv processor cover important isas riscv combination riscv special riscv open instructionset architecture isa opensource o microkernel match made heaven especially term security verify assume hardware operates correctly ie specified assumes unambiguous specification first place case hardware even specification formal meaning written mathematical formalism support mathematical reasoning property know actually capture behaviour hardware reality pretty sure hardware different software bug open isa advantage go beyond free royalty one allows opensource hardware implementation example formerly ariane core developed eth zurich opensource implementation see get check whether securitycritical bug german company hensoldt cyber gmbh produced chip based ariane strong supplychain security story complement secure o funded verification riscv disclaimer interest hensoldt cyber exciting aspect open isa opensource hardware implementation prospect verifying implementation sound like big ask hard realise said verified o kernel know multiple group working towards goal sooner later one succeed revolutionary step towards achieving real security bet year away hardwaresoftware codesign security opensource hardware verified opensource o great thing security combination open isa opensource o opensource hardware enables innovation hardwaresoftware interface previously reserved hardware manufacturer thus happened snail pace really important security aware spectre attack use side effect speculative execution steal secret le understood speculative execution enough spectre need covert timing channel get information without covert timing channel spectre attack preventing covert timing channel happens something working year developed o mechanism preventing realise quite work digging deeper found hardware give u right mechanism word existing hardware broken term security underlying cause isa hardwaresoftware contract isa specifies functionality hardware intentionally abstract away anything time timing used leak information isa provide mean stopping isa insufficient ensuring security must improved would normally hopeless endeavour trying convince hardware manufacturer agree new contract imposes additional restriction trust tried even provide o extra instruction use defeat covert channel long house fire unlikely listen spectre fire apparently burning hot enough yet open hardware change enables u innovate without waiting manufacturer enables u control side fence enables true codesign benefit security partnering creator ariane eth zurich exactly explored amend hardwaresoftware contract bit give o right mean defeat covert channel could demonstrate take little highly effective relevant working group riscv foundation discussing mechanism right stay tuned riscv setting benchmark processor security complementing world secure o kernel know web site explains whitepaper written nonexperts explains verification story detail note blog originally written riscv blog site update fixed link like like loading
43,Lobsters,formalmethods,CSE-Formal methods,Verifying Popcount,https://blog.regehr.org/archives/1667,verifying popcount,discipline programming acsl wrong subtle way wikipedia faster much harsher algorithm,popcount function return number set bit argument showing popcount implementation claim become one favorite example use need quickly show student reason program mathematically something like selection sort probably standard example sorting get subtlety rather reserve second example popcount easy whole example done half hour programming language particular algorithm matter much use perhaps simplest popcount implementation c c int popcount x int c int c x x return c work course scan entire argument incrementing counter time find set bit show work formal fashion use method le discipline programming allow u combine obvious effect individual statement hopefully desired highlevel property might well annotate program right int popcount x int c int c x x c popcount origx return c used couple trick need fully explained giving example student used kind reasoning first since x modified program executes used origx shorthand original value x passed argument syntax trick learned acsl second used popcount function mathematical specification popcount completely different thing c code trying verify consistently applying correct rule mathematical programmatic element straightforward would hope fact quite result bad old day nonmechanized program verification wrong subtle way make proof go need find right loop invariant statement true loop executes also true every loop iteration trick explaining task student helping realize simple example like understand algorithm work effectively already know loop invariant need help teasing usable form one stumbling block every loop many invariant example c helpful avoid lot silly loop invariant observing right invariant strong enough imply correctness criterion program also weak enough already true first loop iteration found negative constraint like helpful student trick course capture abstract fact held balance loop modifies piece program state make lecture like work need avoid appearance pulling fact thin air defeat entire purpose discussion student walk away feeling like magical step middle anyway hook crook need get audience realize key algorithm loop invariant c popcount x popcount origx point hump mark code int popcount x int c c popcount x popcount origx int c popcount x popcount origx c x x c popcount x popcount origx c popcount x popcount origx c popcount origx return c used question mark indicate proposition still doubt broken problem manageable piece visit turn loop invariant true loop executes c x origx see loop invariant preserved loop body analyze two case x either zero one zero c unchanged also clearly shifting x right one place change popcount x c incremented one shifting x right one place decreased popcount one see either way invariant maintained prove loop invariant implies overall correctness condition must observe x shifted right time sort situation better clear rule shifting signed v unsigned value c c course skipped lot smaller step argument capture essence algorithm work presenting particular algorithm safely skip termination proof since modified loop body entertaining variant kernighan popcount int popcount x int c x x x c return c use post feel like useful show analysis case simpler algorithm wikipedia faster much harsher algorithm one used practice processor native popcount instruction anyway presented material software engineering class yesterday realized used example couple time seemed worth writing
44,Lobsters,formalmethods,CSE-Formal methods,Using Formal Methods to Eliminate Exploitable Bugs,https://www.youtube.com/watch?v=YyT9BU0aJUE,using formal method eliminate exploitable bug,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kathleen fisher using formal method eliminate exploitable bug youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kathleen fisher using formal method eliminate exploitable bug youtube
45,Lobsters,formalmethods,CSE-Formal methods,Using Z3 Theorem on AVR Firmware,https://medium.com/@ryancor/using-z3-theorem-on-avr-firmware-c6d2f45ac9c2,using theorem avr firmware,using theorem avr firmware hal satisfiability modulo theory avr architecture mcu gpios data bus general purpose register alu instruction decoder program counter flash memory sram eeprom io line usart baud rate clock lab assignment virustotal baudratepy side note emulator atmel instruction manual side note side note theorem solution satisfiability modulo theory smt side note solver,using theorem avr firmwareas many may may aware serious obsession embedded system security two year ago started journey incorporating knowledge reverse engineering software application pulling apart firmware embedded device additionally also started learning hardware security concept sidechannel attack faultinjectionsglitch attack bit flipping moreanyone began career embedded security tell arduino board best device get started pretty intricate ide abundant amount hal hardware abstraction layer api call use needle say writing first hello world application embedded system industry fairly rudimentary blinking ledthe goal paper show use formula python break weak password checker use linear inequality equality satisfiability modulo theoriesavr architectureto give background arduino us main mcu microcontroller unit help understand avr avr risc architecture reduced instruction set computing avr based microcontrollers became widely popular one first game onchip flash storage lab exercise using arduino nano board mcublock diagram architecturewhat chip operating voltage range pin programmable gpios general purpose inputoutput come standard set communication interface masterslave spi serial peripheral interface usb usart universal synchronousasynchronous receiver transmitter twowire peripheral protocol interintegrated circuit discus usbtousart depth later become important flashing chip target firmware communicating chip sending receiving datalet go diagram data bus handle data chunk travel inside microcontroller bus line widegeneral purpose register used arithmetic operation adding subtracting number setting jump pointer compare operation previous article wrote discussed register architecture case avr stand arithmetic logic unit work direct connection general purpose register arithmetic operation gpr immediate operand executed within single clock cycle divide operation three category arithmetic logical bitwise functionsinstruction decoder combinational circuit whose purpose translate instruction code address micromemoryprogram counter pc bit wide address program memory locationsas see picture three different type memory used flash memory programmable readonly memory rom firmware changed using programmer bootloader sram area volatile memory hold data electrically powered lastly eeprom electronically erasable programmable read memory semi permanent data storage accessed using special register inside avr ability control thing like address written data written flag used read dataio line used controlling application digital input output pin pin detect voltage change high low electromagnetic force digital output io pin connected diode trace vcc gnd lineio line schematicnow better understanding avr architecture let briefly go going communicate chip using usbtousartusartthe usbtousart converterbridge serial port computer responsible sending serial data two wire clock signal parleying two device communicate accurately device must configured beforehand use speed communication otherwise known baud rate baud rate simply rate information transferred communication channel serial port context baud mean serial port capable transferring maximum bit per second calculated two way 𝐷 𝑛 𝑏𝑛 𝐵 𝑏𝑛 𝑛 b defined unit total bit per second application data bit per second n bit conveyed per symbol gross bit rate r inclusive channel coding overhead symbol rate f calculated r nthe usart clock must operate time desired baud rate clock based around operation crystal oscillator case usart set constant mhzlab assignmentthere two file going need exercise file found virustotalone bin file dumped firmware image second hex firmware file used upload processed arduino nano board next step getting board ready upload hex file downloaded using avrdude connect board computer via usb sure installed avrtools typical baud rate upload speed going going run command line get firmware board jumpy git master avrdude c arduino p p u v u flash w jumpyhexat point need figure baud rate usart using communicate serial data running baudratepy get result use application screen communicate board machinescreen outputlooks like pretty straightforward singlepassword check let move jumpybin file start reverse engineering process going use ghidra project found lot cleaner using avr disassembler load file project directory specifying language must case little endian assembly best optionghidra automatically analyze code including vector table start disassembly output one thing note see lot opcodes analyzed code section case highlight byte press automatically disassemble opcodes use f key afterwards create newly examined code functionafter ghidra completed analyzing binary file output look bit convoluted first set subroutine responsible initializing peripheral usarttxrx spi timer pcint interrupt reset tableside note ever want find main function firmware code trace base address reset bootloader always contain simple jump ie jmp address outside bootloader directly lead start routine hold main performing lot operation setup environmentjump start mainwe likely better luck dynamic analysis easy definitely give lot satisfying result string table show much xref offset code segmentemulatorthe goal right emulate code figure firmware asking input user usart find offset beginning set breakpoint commence steptracing first offset noticed show logical code function c cf push ylo df push yhi cd ylo spl de yhi sph sbiw start debugger three tool going need download open three terminal window let start first one run simavrsimduino command booloader bytesavrspecialinitavrgdbinit listening port bridge port uartptyconnect point export install picocom get terminalnext picocom used bridge usart communication next terminal window run command picocom nonebaudrate nonedatabits calocal echo nonoinit nonoreset nonolock nosendcmd sz vvreceivecmd rz vv eimap omap emap crcrlf delbs type ca ch see available commandsterminal readythis setup get u ready connect gdb server run avrgdb third terminal avrgdb jumpybin gdb target remote debugging using gdb break pc breakpoint gdb ccontinuingbreakpoint hit looking picocom look like hit sort text output yet yet reached point code sending data usart terminal using gdb command stepi good trial error technique see much step beginning first letter output pico terminal interestingly hit breakpoint switch back picocom see letter printed screen function look like responsible sending data tx tracing back ghidra look like hitting peripheral component undefined undefined return stack buf xref entry point push cd ylo splafter stepping time come point find directly printing picocom terminal gdb pc st z pop pop pop ret push push ldi gdb r u make sense printing string input whats happening code register hold next byte store z using st instruction looking atmel instruction manual see exactly operation indirectly store register data space using index x z look ghidra decompiles logic look like byte undefined array index hold string table st instruction seen volatile write datadebug register make note gdb offset ghidra part usartrx offset ghidra responsible usarttx side note register pair used operation used register pair x z clarifying confusion around debugging information memory wanted dump content using gdb command would crafted like txrx interrupt located need able find input actually processed stepping bunch code look like may found ghidra input get processed cpi brbs ldd cpi responsible comparing immediate value sparked interest looking value r n ascii theory set breakpoint start function offset ghidra picocom terminal prompt u input allow u enter string hitting enter hit breakpoint gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly addressesbreakpoint gdb pico terminal terminal readyinput look like breakpoint hit without giving u opportunity input string let continue browsing stack processinput push cd ylo spl de yhi sph std std rjmp call set breakpoint look like function call offset decompiling function get output uint void byte uartreadchar char w w uint z return w subroutine look simple enough set w register interpret bit usart status control register successful take byte time read usart data register null terminating character found w hold entire value knowing set breakpoint function call offset ghidra let try set breakpoint new offset see work time gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly address pico terminal terminal readyinput helloworld breakpoint hit gdb window hitting enter breakpoint gdb perfect saw hold byte compare n r confirm see register hold first byte h gdb r offset hitting breakpoint x amount time x equal size string code process null terminating string function exit input string held address gdb helloworld time step function see routine crossreferenced reach return instruction pc redirected module undefined undefined return stack buffer cf push ylo df push yhi push cd ylo spl de yhi sph std could winning ticket happens next string keep track offset ghidra started step function one instruction time look like actually comparing anything interest function returned something interesting started show got bit code base add wlo adc whi cpi cpc whi brbc zflglooks like two register added compared value let set breakpoint gdb offset see value input possibly added together gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly address pico terminal terminal readyinput breakpoint hit gdb window hitting enter breakpoint gdb pc add adc cpi gdb r gdb r see index r index l added give u hexadecimal value know routine begin ghidra rename function move code base start see lot similar code side note start labeling comparative function keep track index input string compared comparing index add wlo adc whi cpi comparing index add wlo adc whi cpi comparing index mul add whi eor cpi sbci brbc zflgover address operation look bit different comparison index input string get ordinal multiplied get compared lower word byte value result higher byte value word example take two index r multiply two integer obtain value lower byte word loword equation higher byte hiword value comparison look like pseudocode ord ord r ord ord r sbci instruction subtracts carry immediate command final value index need equal static analysis really take care rest know specific mnemonic keep eye build constraint table use theorem solve rest size string character seen snippet decompiled code w char inputstring char w inside ghidra function tab labeled subroutine responsible comparing byte theorem solutionto put simply prover created satisfiability modulo theory smt problem decision problem logical formula combination include arithmetic bitvectors array unresolved function effective smt solver specialized algorithm solve background theory mentioned download python library hereat point formulate conditionals firmware code check right password constraint enter bitvector used shorthand subtermsif string string string string string string string string string string string string string string string string string string string string string decryptflag side note flag string get loaded ghidra offset use instruction lpm load data byte flash program memory register file zregister register file used access program memory place data register final check function called offset confirm many time variable iscompared set true equal code proceed print lpm z sflag rnflag cpi lsl brbc zflg ldi ldi aa call usartprint landed get wrong password msg ldi ldi aa call usartprintafter value added constraint use check function examine whether assertion given solver plus optional assumption consistent assertion return true next step would return model last check function raise exception model available eg last check returned unsat assignment satisfy quantified axiom simple test see library work would use three unknown linear equation challenge like xy z import x z int x int int z test solution simplesolver sadd x scheck unknown sadd x scheck unsat reset general purpose solver limited amount preprocessing simplesolver sadd x sadd z scheck sat smodel z x apply logic unknown mentioned see unable satisfy requirement needed model solution return unknown everything added considered unsatisfiableafter running solver finally get password needed decrypt flag ryancor ryancorvirtualbox python solvepy found password next step would program module take password automatically sends atmega usart serial port retrieves flag source code script found order make sure board plugged usb port connected linux vm usb port ensure vm recognizes device check kernel message log right plugged see usbcore registered new interface driver called ryancor ryancorvirtualbox dmesg vboxguestioctlhgcmcall failed usb new fullspeed usb device number using usb new usb device found usb new usb device string usb product usbcore registered new interface driver usbserial usb serial support registered generic usbcore registered new interface driver usbserial usb serial support registered converter detected usb converter attached case port going connect python script located running script get successful decrypted flag microcontrollerryancor ryancorvirtualbox python solvepy found password sending input driver flag thank following along hope enjoyed much question article find challenge please dm instagram hackersclub twitter ringowarehappy hunting p missed link solver program find source code
46,Lobsters,formalmethods,CSE-Formal methods,Specifying and Model Checking Workflows of Single Page Applications with TLA+,https://arxiv.org/abs/2005.05627,specifying model checking workflow single page application tla,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
47,Lobsters,formalmethods,CSE-Formal methods,A beginners step by step guide to Alloy,http://msitko.pl/blog/2020/05/24/guide-to-alloy.html,beginner step step guide alloy,installation part alloy basic link video video link code code part static modelling alloy link video video link code code code next part done go next tutorial alloy analyzer software abstraction alloydocs state link reference motivational resource blog realworld application modeling alloy interesting link,post assumes already know want learn alloy mean try convince formal method useful study alloy example use small easy follow opposed demonstrating full power tool written single line alloy anything installed start zero therefore cover installation basic alloy tutorial web sufficiently explain basic example skip installation step frustration lack entrylevel material decided write tutorial core part tutorial video included installation instruction code snippet text make easier copypaste end article find link interesting resource video even though recipient prefer study technical content text form think case alloy might easier explain thing video first reason alloy analyzer way use alloy except java api gui program another reason result running alloy specification usually sequence diagram need learn interpret able work alloy effectively believe video useful regard alloy beginner thus code write might idiomatic explanation might superficial hand put good position writing tutorial know struggling installation go http githubcomalloytoolsorgalloytoolsalloyreleases download latest release moment writing guide version used recording start alloy analyzer gui run java jar orgalloytoolsalloydistjar part alloy basic link video video link code code part static modelling alloy link video video link code code initial code riddle code contains basic definition need encode clue predicate find solution next part done recording first two part time consuming endeavour decided stop right moment least may record next part one day go next interested learning covered video option tutorial alloy analyzer cover similar material video although explain install alloy tool work interpret generated example went video able follow example easily software abstraction book creator daniel jackson buying pay attention whether getting revised edition unfortunately revised edition available hardcover availability may depend location therefore ended kindle version original edition regardless logistical issue getting become serious learning alloy need read book sure well written explains design consideration depth similarly resource though explain much using gui alloydocs hillel wayne resource published quite recently state aim reference opposed tutorial link reference motivational resource may interest wonder even care video made realize formal method need revolve around costly code verification instead small initial investment design verification use formal method vehicle exploring domain something similar spirit ddd uml working problem whiteboard colleague way hillel wayne also writes fascinating blog among thing writes alloy tla empirical software engineering realworld application modeling alloy interesting link
48,Lobsters,formalmethods,CSE-Formal methods,Open Sourcing the People's Code,https://dev.to/jcastle/open-sourcing-the-people-s-code-13b5,open sourcing people code,dissertation git remote graduation introduction federal source code policy premise description finding conclusion dissertation,summary phd dissertation completed spring virginia tech support entry git remote graduation introduction computer software essential daily operation industry government business government run software entertainment solving public health crisis supporting national security federal government spends billion software year little software open sourced costly allows little reuse result duplication often yield poor quality white house published federal source code policy directing major federal agency create internal source code policy update acquisition language capture new custom code inventory source code publishing portion open source software os even policy agency publishing os mixed result premise given agency budget relative size employee skill yet little publishing os believed systemic organizational factor code publication therefore premise study centered broader organizational factor related organizational cultural belief public engagement structural dimension organization location either hindering aiding agency os publication description qualitative study included metadata analysis interview artifact collection eg sop organization chart sample contained following attribute participant sw development unit cfo act agency agency multiple participant participant sw development unit unit conducted sw development data science activity unit often consumed os published unit located outside agency chief information officer cio office finding study finding pertain four organizational factor study cultural belief public engagement structural dimension organizational location cultural belief belief key component organizational culture support organizational performance belief allow organization make prediction select action experience new phenomenon cultural belief study advantageous cautionary advantageous belief belief based perceived realized outcome office published os minimally frequently held belief cautionary belief participant whose unit held cautionary belief reticent response new technology technology policy approximately half sample held cautionary belief minimally published os public engagement public engagement part larger public participation construct public engagement pertained action taken individual inside outside software development shop office publishing os tended work outside office various activity including inperson event multiple electronic tool structural dimension related technologystructure research pertains decisionmaking rule skill communication office unit whether publishing minimally frequently required formalized policy allowing structural location similar structural design research focus hierarchy office located broader organization ie organizational chart office autonomy le hierarchical layer close approving executive able frequently publish os conclusion tl dr nature post prevents adding detail study encourage read dissertation much detail study implication public administrator policy maker organization general
49,Lobsters,formalmethods,CSE-Formal methods,Synthesizing JIT Compilers for In-Kernel DSLs,https://www.cs.utexas.edu/~isil/jitsynth.pdf,synthesizing jit compiler inkernel dsl,,obj length filter flatedecode stream ki w endstream endobj obj type xobject subtype form formtype ptexfilename aecbadgecavpdf ptexpagenumber ptexinfodict r bbox group r resource extgstate ca ca font r length filter flatedecode stream ky k b ʸ x ue j b q endstream endobj obj length r filter flatedecode stream gh 䫐 endstream endobj obj length r filter flatedecode stream endstream endobj obj length r filter flatedecode stream l ԧb c maqdz qwwgtr bq w g dw vdeyr fr ea n z q yi sh b endstream endobj obj length r filter flatedecode stream
51,Lobsters,formalmethods,CSE-Formal methods,Another Path for Software Quality? Automated Software Verification and OpenBSD,https://doi.asiabsdcon.org/10.25263/asiabsdcon2019/p10b,another path software quality automated software verification openbsd,,obj length r filter flatedecode stream ӗ aos xq wq w k v ov r eitr f h b q ӊ pwc ak u endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text font r r r r r endobj obj length r filter flatedecode stream ӹ u c rq j u f ӵ ѭp xon ç negx doa bi iz j r r ie g
52,Lobsters,formalmethods,CSE-Formal methods,TLA+ on OpenBSD,https://bronevichok.ru/blog/2020/05/14/tla-plus.html,tla openbsd,installation guide plan tlaplusjupyter learn tla,couple year ago decide know tla tla tool formal verification model unfortunately tla supported openbsd found installation guide linux user tried run tla openbsd failed step building toolbox going step openbsd found toolbox binary openbsd submitted issue developer said plan build binary openbsd tla toolbox requires eclipse port outdated long time well run tla headless mode without gui required download install java package running tla command line java cp mc deadlock worker setting denotes amount memory allocate model checker worker number worker thread equal number core machine setting deadlock ensures tlc explores full reachable state space searching deadlock using tla console inconvenient bit use tlaplusjupyter plugin jupyter popular system interactive computation default support python kernel possible extend kernel add support programming language create python virtual environment install tlaplusjupyter package python venv tlaplus tlaplusbinactivate tlaplusenv pip install tlaplusjupyter tlaplusenv python tlaplusjupyterinstall installing jupyter kernel spec downloading tlaplusenv jupyter notebook ready start jupyter notebook tlaplusenv jupyter notebook create new tla notebook click new button select tla dropdown menu also handy enable line numbering inside cell view toggle line number since syntax checker refers problem line number learn tla
53,Lobsters,formalmethods,CSE-Formal methods,ZetZ - a symbolic verifier and transpiler to bare metal C,https://github.com/zetzit/zz,zetz symbolic verifier transpiler bare metal c,quick quick start install rust editor support look basic idea plain c abi safety correctness symbolic execution namespaces autogenerated header declaration ordering language reference mutability const mut polymorphism model theory storage const static atomic threadlocal visibility pub export struct initialization conditional compilation preprocessor note westconst v eastconst closure metaprogramming template tail variant symbol new constructor procedural macro inline included c source packed structs union environment variable,zetz system without dynamic memory c remain defacto standard system interface target bare metal mcus embedded linux wasm embed language also use build cross platform library clean portable cstandard api zetz play nice others require rewriting everything zetz useful large project major innovative feature code formally verified symbolic execution virtual machine compile time quick quick start install rust bootstrapping install smt solver either cd exampleshello cargo run run editor support look zz strong rust aesthetic remains c dialect core using stdioh printf struct random num fn rng random self return self num export fn main int let r random num printf lucky number un rrng return basic idea plain c abi zz emits plain c always one main reason exists always emit c c compiler emit binary modern language abi deviating c use glue tool play nice others zz emitted c include header stack unwinding c rust coroutines go code emits plain ansi c requirement towards compiler feature zz work nicely vendor provided closed source compiler obscure system like arduino propriatary firmware compiler integrates nicely existing industry standard microkernels like zephyr freertos etc safety correctness symbolic execution unlike modern language zz raw unchecked pointer default nothing prevents crazy thing long mathematical proof defined behaviour according c standard checking done executing code ssa form compile time within virtual machine smt prover none check emitted runtime code standard library fully stack based heap allocation strongly discouraged zz convenience tool deal lack flexibility come checked tail pointer namespaces autogenerated header declaration ordering modern language header semantically relevant declaration order neither zz since interacts raw c nicely also emits header order declaration c compiler like zz put module namespaces c symbol using underscore instead mangling lib hello becomes mylibhello c convention language reference mutability const mut default everything const opposite c mut keyword used make global variable function argument mutable polymorphism zz follows c model polymorphism struct cast type first member zz cast implicit always safe struct vehicle int wheel struct car vehicle base fn allowedentry vehicle self bool return self wheel fn main car c base vehicle wheel assert callowedentry model zz requires memory access mathematically proven defined defined opposite undefined behaviour c specification word undefined behaviour allowed zz quite often told compiler something provable like indexing array ok fn bla int must tell compiler accessing array position defined quick fix one fn bla int len compile useful function tho trying use context array len allowed better example fn bla int int l len l l thanks underlying smt solver zz symbolic executor know executed case len l defined keyword requires behaviour callsite model keyword declares function behave fn bla int int model return return simple example declare function return time input actually wo nt compile theory use annotation define state type neatly let define call legal type given time program without runtime code theory isopen int bool fn open int mut model isopen staticattest isopen fn read int require open mut isopen model isopen return fn close int mut example defines type state transition legal open read close combination lead compile error read open storage const static atomic threadlocal const static work exactly like rust c syntax export const foo static mutable float blarg threadlocal mutable bool bob true atomic mutable int marvin const inlined module therefore point different memory module static global storage location private current module effect way declare shared global writable variable zz borrowchecker restriction nothing preventing multithread race instead declaration selected resulting exported binary interface mapped language need export global writeable memory location still bad idea thread define function return pointer local static threadlocal atomic mapped directly keywords zz use nicer keywords user defined name top level visibility pub export default declaration private module export used make sure declaration end final result binary export header pub mark declaration local project usable zz module exported resulting binary struct initialization prepare type elision expression known type struct int int b fn main conditional compilation preprocessor like rust prepro string processor rather executed ast parsing make behave different c even syntax c right hand side evaluated immediately access preprocessor scope struct int def test uint proc elif def maybe int proc else void proc endif every branch else must contain completed statement appear statement would valid possible pub fn foo o unix endif note even code disabled condition must still valid syntax however type checked note westconst v eastconst zz enforces eastconst c formally correct language order make zz formally correct make syntax illegal case sacrifice westconst incosistent difficult comprehend anyway westconst left aligned star read pointer part type mutability property pointer int mut foo foo compile error foo valid unless want apply mutability local storage named foo void mut foo foo valid foo compile error coincidentally roughly equivalent rust rust devs feel right home even quickly learn pointer tag work following compiler error closure function pointer difficult nicely also make emit language well nt really exist zz instead declare closure automatically casted function closure randt int fn securerandom int return fn main randt rand securerandom metaprogramming template tail variant technically zz metaprogramming template function blow code size difficult export plain c type instead zz make code reusable allowing allocation structs larger member size call tail used make function fixed size array reusable size string type export struct string usize len char mem sign behind name indicates type tail tail mem specified array size length function could implemented signature fn len stringt mut self return indicates tail case tail size bound local variable named used function body allocating new stack variable type string also allocate tail stack string append hello string append world printf slen smem mean tail specify integer value exact number char would like add tail measured number element whatever last unsized element struct byte string dynamically expand within tail memory case append stuff string without ever allocating heap simply returning current function clear memory used without need destructor ordering signal safety symbol symbol big global enum let create unique value anywhere code using symbol symbol car symbol bike fn drivethis usize sym symbol sym sym car printf bzzzzn else printf n symbol nameof sym note make assumption integer value symbol depends compilation loading order new constructor zz autogenerates binding language c language fully compatible c abi specifically nt allow returning structs function standard way create constructor function c intstead using function take mut pointer first argument call zero initialized stack variable zz syntactic sugar new keyword struct int int b fn empty mut new self int self fn main new empty assert aa assert ab new creates new local variable correct size pass self argument constructor create local tail use new like foo string empty procedural macro macro zz fully compiled executed compile time call allows constructing arbitrary complex macro using regular zz code unlike c prepro macro macro must emit complete expression example emit open brace without closing brace macro compiled standalone executable automatically including dependency call argument derive context passed json stdin macro expected print zz code stdout creates literal string repeated time export macro repeat ast frommacro err aargs ast expression literalstring expected string err aargs ast expression literal expected number let num int atoi aargs vstring printf int mut num printf aargs vstring printf export fn main int printf hello sn repeat world return inline included c source zz support importing c source using keyword imported c source inlined call site using inline keyword certain case imported c source may depend symbol defined zz module zz symbol given imported c file need keyword example nativeh header file depends examplecontainer type defined libzz file import header file line expose container type header file specifying need keyword container type made available examplecontainer project name example type container nativeh include stdioh void print examplecontainer self printf sn char self value void init examplecontainer self void const value self value value libzz inline using need container nativeh native export struct container void value export fn createcontainer container new mut self void value native init self value pub fn print container self native print self using example int main new container example createcontainer hello containerprint return packed structs union zz support packed structs union packed modifier modifier used struct union omits alignment padding typically used architecture independant serialization cost causing alingment fault example packed unpacked struct static size printed stdout using stdioh printf struct packed packed b int b struct unpacked b int b fn main int printf sizeof packed lun sizeof packed printf sizeof unpacked lun sizeof unpacked return environment variable zzmodulepaths zz import zz module look project module directory default search path extended defining zzmodulepaths environment variable much like path environment variable multiple path defined separated colon posix system semicoloon window zzmodulepaths pwdpathtomodules usrsharezzmodules zz build
55,Lobsters,formalmethods,CSE-Formal methods,Verified sequential malloc/free,https://www.cs.princeton.edu/~appel/papers/memmgr.pdf,verified sequential mallocfree,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream f e ec u endstream endobj obj endobj obj endobj obj procset pdftext rotate endobj obj stream vf gzf py f sk sgg ο r ɇ byt
56,Lobsters,formalmethods,CSE-Formal methods,CHERI: The Arm Morello Board,https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/cheri-morello.html,cheri arm morello board,arm morello board morello morello talk cambridge arm microsoft morello timeline isa morello implement morello store cheri tag bit cheriaware software morello run,arm morello board october arm announced morello experimental cheriextended multicore superscalar processor systemonchip soc prototype board available late morello part ukri digital security design challenge dsbd supported uk industrial strategy challenge fund including commitment commitment arm web page provides information morello drawing publicly available arm content well material cheri learn cheri reading technical report introduction cheri morello morello industrial demonstrator capability architecture prototype systemonchip soc development board developed arm implementing cheriextended processor gpu peripheral memory subsystem ship late purpose morello enable industrial evaluation cheri hardware software idea gather evidence adoption support related research development enabled applying cheri widely deployed realworld architecture via highend mature processor design mature software ecosystem morello based arm existing neoverse platform cpu roughly arm enhanced serverclass memory subsystem richard grisenthwaite arm talk september iscf dsbd collaborator workshop included following workinprogress morello soc block diagram morello soc include two cpu cluster containing two outoforder core implementing cheri morello soc fabricated process targeted clock frequency around coherent memory interconnect extended carry tag bit onboard dram controller support memory tagging dmaenabled device including onsoc mali gpu implement cheri conservative respect tag interaction clear tag memory overwrite prevent capability corruption introduction various aspect morello design remain subject change prior board becoming available morello talk cambridge arm microsoft ukri posted slide video september digital security design challenge collaborator workshop robert n watson simon w moore peter sewell peter g neumann cheri capability hardware enhanced risc instruction iscf digital security design challenge collaborator workshop london uk september slide video richard grisenthwaite arm digital security design iscf digital security design challenge collaborator workshop london uk september slide video manuel costa microsoft hardware memory safety challenge opportunity iscf digital security design challenge collaborator workshop london uk september slide video morello timeline implementation well way including architecture hardware software arm published following prospective timeline morello september virtual platform model morello board behavioural software model architecture specification cpu architecture used morello board includes xml pseudocode allow formal proof autogenerated collateral september morello board made available initial software toolchains isa morello implement morello implement architecture combining cheri protection model roughly cheri applicationclass isa found broad range device including almost mobile device eg io android phone tablet well increasing number serverclass system experimental architecture developed darpasupported collaboration starting arm sri international university cambridge baseline neoverse processor core implement supported expected except compatibility existing software work without change morello cherienabled software able enable use cheri feature set purpose finegrained memory protection software compartmentalization approach allows rigorous performance comparison betweeen cheriaware cheriunaware software stack well supporting incremental adoption goal cheri morello implement superset architecture supporting various mechanism compartmentalisation collection feature remains ongoing research effectiveness eg acceleration temporal memory safety multiple technique implementing tagging microarchitecture see impact clock frequency aim allowing key set experiment run rather produce commercial product richard grisenthwaite slide dsbd workshop include following note regarding forward compatibility future cherienabled arm isas morello board physical implementation prototype architecture learning experiment adopted mainstream extension arm architecture commitment full binary compatibility prototype architecture successful concept expected carried forward architecture reused architecture formally proved security property based methodology developed cherimips see page cheri rigorous engineering learn work morello store cheri tag bit morello support two different implementation physical memory tagging allow property compared experimentally one configuration ecc bit used hold memory tag tag controller tag cache used hold memory tag see iccd paper efficient memory tagging cheriaware software morello run following slide robert watson cambridge slide dsbd workshop illustrate rough anticipated software stack available morello ship arm provide adaptation cheri clangllvm compiler suite targeted architecture present morello sri international university cambridge provide full adaptation cheribsd operating system application stack morello include support spatially referentially safe opensource unix kernel spatially referentially temporally safe unix userspace also associated cheriadapted toolchain tool runtime linker debugger currently anticipate application include openssh postgresql webkit well host thirdparty opensource software package see asplos paper cheriabi detail evaluation memorysafety model also provide morelloadapted memorysafe version google hafnium hypervisor unmodified application continue run arm provide adaptation android operating system
57,Lobsters,formalmethods,CSE-Formal methods,Polymorphic Perplexion,https://ucsd-progsys.github.io/liquidhaskell-blog/2020/04/12/polymorphic-perplexion.lhs/,polymorphic perplexion,type ordered list previously polymorphic insertion sort monomorphic insertion sort perplexity pointed moral comment powered disqus,polymorphism play vital role automating verification lh however thanks ubiquity often take granted quite baffling figure verification fails monomorphic signature let explain using simple example puzzled user several time module polymorphicperplexion type ordered list previously seen use lh define type list whose value increasing ok nondecreasing order first define inclist type emp empty con constructor data inclist emp hd tl inclist infixr next refine type specify con constructor take input hd tl must inclist value v greater hd data inclist emp hd tl inclist v hd v confirm definition ensures legal value increasingly ordered list lh accepts first list reject second element order legallist inclist int polymorphicperplexioninclist ghctypesint legallist vv forall polymorphicperplexioninclist vv emp emp illegallist inclist int polymorphicperplexioninclist ghctypesint illegallist vv forall polymorphicperplexioninclist vv emp emp polymorphic insertion sort next let write simple insertionsort function take plain unordered list return element increasing order insertsortp ord inclist forall ghcclassesord polymorphicperplexioninclist insertsortp x foldr polymorphicperplexioninclist polymorphicperplexioninclist insertp vv forall polymorphicperplexioninclist vv emp emp v len v v x x insertp ord inclist inclist forall ghcclassesord polymorphicperplexioninclist polymorphicperplexioninclist insertp ay emp vv vv vv forall polymorphicperplexioninclist vv emp emp insertp x x vv vv vv vv x x vv vv vv vv x x v polymorphicperplexioninclist vv x vv v x x otherwise vv vv x x polymorphicperplexioninclist insertp vv vv v polymorphicperplexioninclist vv x vv v x x happily lh able verify code without trouble seemed easy worry mess comparison eg change guard x lh complain monomorphic insertion sort however let take exact code change type signature make function monomorphic specialized int list insertsortm int inclist int ghctypesint polymorphicperplexioninclist ghctypesint insertsortm ghctypesint x foldr ghctypesint polymorphicperplexioninclist ghctypesint polymorphicperplexioninclist ghctypesint insertm vv forall polymorphicperplexioninclist vv emp emp v ghctypesint len v v x x insertm int inclist int inclist int ghctypesint polymorphicperplexioninclist ghctypesint polymorphicperplexioninclist ghctypesint insertm ghctypesinty emp v ghctypesint v vv forall polymorphicperplexioninclist vv emp emp insertm x x v ghctypesint v v ghctypesint v x x v ghctypesint v v ghctypesint v x x v polymorphicperplexioninclist v ghctypesint x v v x x otherwise v ghctypesint v x x polymorphicperplexioninclist ghctypesint insertm v ghctypesint v v polymorphicperplexioninclist v ghctypesint x v v x x huh lh appears unhappy code possible let look type error error liquid type mismatch otherwise x insertm x inferred type vv int subtype required type vv vv int x vv context x int lh expects since using con operator tail value insertm x must contain value vv greater head x error say lh prove requirement actual list insertm x hmm well thats puzzler two question come mind fact hold first place lh able deduce fact polymorphic signature monomorphic one let ponder first question every element insert x fact larger x three reason every element x larger x list x x ordered larger x established otherwise crucially element returned insert x either x onto second question lh verify polymorphic code monomorphic one reason fact c lh modular verifier meaning information behavior insert callsite information captured refinement type specification insert polymorphic signature insertp ord inclist inclist via parametricity implicitly state fact c callsite insertp x pas value greater x list value greater x via polymorphic instantiation callsite lh infers returned value must also list element greater x however monomorphic signature insertm int inclist int inclist int offer insight simply say function take int another ordered list int return another ordered list whose actual element could arbitrary int specifically callsite insertp x lh way conclude returned element indeed greater x hence reject monomorphic code perplexity parametricity nice lh polymorphic instanatiation clever useful also quite mysterious example q curious user oisín pointed code rejected uncomment type signature go accepted lh insertsortp ord inclist forall ghcclassesord polymorphicperplexioninclist insertsortp polymorphicperplexioninclist foldr polymorphicperplexioninclist polymorphicperplexioninclist go vv forall polymorphicperplexioninclist vv emp emp polymorphicperplexioninclist polymorphicperplexioninclist go ay emp vv vv vv forall polymorphicperplexioninclist vv emp emp go x x vv vv vv vv x x vv vv vv vv x x v polymorphicperplexioninclist vv x vv v x x otherwise vv vv x x polymorphicperplexioninclist go vv vv v polymorphicperplexioninclist vv x vv v x x thoroughly perplexing explained absence parametricity remove type signature ghc default giving go monomorphic signature universally quantified roughly capture specification monomorphic insertm causing verification fail restoring signature provides lh polymorphic specification instantiated callsite recover fact c crucial verification moral hope example illustrates two point first parametric polymorphism let type specification say lot immediately let write polymorphic signature whenever possible second le happy note explaining fancy type checker fail remains vexing problem whose difficulty compounded increasing cleverness type system love hear idea might solve explanation problem please enable javascript view comment powered disqus
58,Lobsters,formalmethods,CSE-Formal methods,"Cozy, the collection synthesizer",https://github.com/CozySynthesizer/cozy,cozy collection synthesizer,cozy quickstart python troubleshooting setup installation executable information,cozy cozy tool synthesizes data structure implementation simple highlevel specification automatically chooses good representation data efficient method implementation cozy greatly simplify task writing software module private state case cozy specification short selfdocumenting therefore much easier maintain handwritten implementation occasionally cozy discover deep optimization human developer shy away currently cozy generate code c java quickstart dependency python python module listed requirementstxt install install r requirementstxt run trouble consult wiki page troubleshooting setup installation list commandline option ensure everything correctly installed git clone git githubcom cozysynthesizercozygit cd cozy install r requirementstxt cozy help synthesize implementation basicjava specification examplesbasicds cozy examplesbasicds java basicjava cozy executable want install global executable cozy system install installation optional cozy run source directory described quickstart section running cozy args behaves like cozy args would information
59,Lobsters,formalmethods,CSE-Formal methods,"Towards Freshness Queries, Unlinkability Queries, Automated Model Translation and Formalized Semantics in Verifpal",https://blog.symbolic.software/2020/04/14/freshness-unlinkability-model-semantics-verifpal/,towards freshness query unlinkability query automated model translation formalized semantics verifpal,detecting replay attack unlinkability detect replay attack needhamschroeder requested replay attack detection sketch model pandemictracing protocol verifpal proverif cryptoverif tamarin coq verifpal freshness query verifpal verifpal mailing list unlinkability query verifpal unlinkability benjamin lipp currently one method proving unlinkability stateful protocol frame opacity wellauthentication strongly welcome much expected verifpal mailing list formalizing verifpal coq experimental proverifcoq model generation proverif proverif coq coq georgio nicolas mukesh tiwari currently fully formalized semantics verifpal coq point fully implemented verifpal coq looking towards bright verifpal plan list project using verifpal nlnet foundation nlnet foundation get involved like,past week repeated request appeared verifpal provide analysis feature way detecting replay attack also supporting analysis unlinkability value protocol friedrich wiemer pointed verifpal flexible enough detect replay attack needhamschroeder anders n also requested replay attack detection recently relation protocol others also made request unlinkability became pertinent feature especially attempt sketch model pandemictracing protocol verifpal last week furthermore many request since verifpal inception allow indepth analysis verifpal model using tool existed decade longer proverif cryptoverif tamarin coq verifpal introduce many new feature allow expand mature way meant address freshness query verifpal freshness query useful detecting replay attack passive attacker mode freshness query check whether value fresh session ie least one composing element generated nonstatic active attacker mode check whether value rendered nonfresh ie static session subsequently successfully used session example freshness query available examplestestfreshnessvp freshness query currently fairly welldefined unclear still whether flexible enough detect kind replay attack envisioned user discussion welcome verifpal mailing list order understand replay attack detection verifpal improved unlinkability query verifpal protocol voting protocol rfidbased protocol posit unlinkability security property component process definition unlinkability vary wildly despite best effort researcher complicating matter actuallyformalized definition unlinkability tend pertain process value like definition used example definition unlinkability suggested go along line two observed ephids adversary distinguish game belong user game belong two different user definition elucidated benjamin lipp whitepaper currently one hirschi delaune et al couple paper exploring formalization unlinkability method unbounded verification privacytype property followed method proving unlinkability stateful protocol paper unlinkability process defined satisfaction two property frame opacity wellauthentication frame opacity intuitively condition aim prevent attack possible behaviour attacker exists relation message leak information involved agent practically speaking condition requires reachable frame must statically equivalent idealised frame depend identity parameter simple way obtain idealisation frame replace output message fresh nonce case real frame idealised frame statically equivalent obvious attacker learn anything analysing relation message since relation disctinct fresh nonce nevertheless satisfying restrictive eg pair distinguishable nonce wellauthentication idea behind second condition avoid outcome conditionals leak information identity attacker require whenever conditional let lookup positively evaluated corresponding agent honest interaction another participant practice protocol often conditionals attacker already know outcome safe conditionals must excluded condition frame opacity seems clear enough wellauthentication seems combination traditional notion strong authentication mutual authentication combined assumption honest protocolfollowing behalf party ie protocol executing correctly based verifpal introduce experimental support notion unlinkability verifpal center value process example one could write unlinkability b query test whether b unlinkable one another unlinkability check following first verifpal check see b satisfy freshness query fails similarly regular freshness query attacker coerce value nonfresh across session nonfresh query failsif b satisfy freshness verifpal check see attacker determine output primitive example first second output hkdf construction input course b indeed output hkdf unlinkable unless attacker able reconstruct hkdf primitive thereby use determine value output testing definition unlinkability verifpal strongly welcome much expected elucidated since highly doubtful cover case unlinkability verifpal mailing list formalizing verifpal coq experimental proverifcoq model generation work ongoing allowing automated translation verifpal model language tool interested carrying analysis proverif proverif verification software inspired verifpal written former thesis coadvisor bruno blanchet proverif existed around year perform diverse set analysis verifpal despite software belonging category verifier symbolic model protocol verifier coq coq fullfat theorem prover way handle description protocol georgio nicolas handling coq translation mukesh tiwari recently joining effort lending hand welcome mukesh currently fully formalized semantics verifpal coq working also formalizing attacker verification logic coq well active passive attacker point fully implemented verifpal coq experimental proverif coq model generation available testing verifpal type verifpal help find use verifpal generate model support proverif coq verifpal matured especially attacker verification logic captured coq top current semantics another detailed blog post follow looking towards bright finally verifpal also support phase passive attacker mode active attacker mode development verifpal incredibly exciting come hot heel many new feature improvement introduced far line announced verifpal plan progress plan far highly encouraging list project using verifpal continues grow none would possible without help supporter nlnet foundation verifpal sponsored nlnet foundation funding provided privacy enhancing technology fund fund established nlnet financial support european commission next generation internet program aegis dg communication network content technology grant agreement verifpal also supported berlinbased security auditing firm provides penetration testing online service security analysis architectural advice security cryptographic application training consulting incident management malware analysis course user like thank get involved verifpal discussion today either like like loading
60,Lobsters,formalmethods,CSE-Formal methods,Announcing: Alloydocs,https://www.hillelwayne.com/post/alloydocs/,announcing alloydocs,alloy package management database migration authorization system workshop future alloy book online alloy reference tutorial github repo,tl dr online alloy reference read blog probably know big fan alloy simple powerful formal method whose entire syntax fit two page learn day productive two used model everything package management database migration authorization system two year ago invited workshop future alloy argued biggest barrier alloy adoption technological social order learn buy book book excellent also incredibly inconvenient people need convenient free way learn alloy pleased announce first draft online alloy reference cover language syntax extant tooling useful technique write better spec fix common issue assumes basic knowledge alloy get site using tutorial yet official documentation incomplete first draft still need feedback people alloy board nonetheless still proud think even current state help people learn use alloy course welcome feedback correction critique share github repo enjoy
61,Lobsters,formalmethods,CSE-Formal methods,Learn Coq in Y minutes,https://learnxinyminutes.com/docs/coq/,learn coq minute,reading open issue pull request contributor,coq system proof assistant designed build verify mathematical proof coq system contains functional programming language gallina capable proving property program written language coq dependently typed language mean type language may depend value variable respect similar related language agda idris f lean others via curryhoward correspondence program property proof formalized language coq developed ocaml share syntactic conceptual similarity coq language containing many fascinating difficult topic tutorial focus programming aspect coq rather proving may helpful necessary learn ocaml first especially unfamiliar functional programming tutorial based upon ocaml equivalent standard usage model coq write interactive tool assistance operates like high powered repl two common editor coqide proof general emacs mode inside proof general ctrlc ctrl enter evaluate cursor comment comment enclosed fine nest comment singleline comment variable function coq proof assistant controlled queried command language called vernacular vernacular keywords capitalized command end period variable function declaration formed definition vernacular definition x coq sometimes infer type argument common practice annotate type definition incnat x nat nat x exists large number vernacular command querying information useful compute nat compute result check tt tt unit check type expression plus print information object print information including definition print true inductive bool set true bool false bool search nat return large list nat related value search also search pattern search bool pattern named parameter search locate tell notation coming helpful encounter new notation locate calling function insufficient number argument cause error produce new function definition makeinc x x makeinc int int int definition makeinc int int compute evaluates definition chained let construct roughly assigning value multiple variable using expression imperative language definition addxy nat let x let x pattern matching somewhat similar switch statement imperative language offer lot expressive power definition iszero x nat match x true false pattern mean anything else end define recursive function definition using fixpoint vernacular fixpoint factorial n match n n n factorial n end function application usually nt need parenthesis around argument compute factorial nat unless argument expression compute factorial nat define mutually recursive function using fixpoint iseven n nat bool match n true n isodd n end isodd n match n false n iseven n end coq total programming language accept program understand terminate easily seen recursive call pattern matched subpiece input input always decreasing size getting coq understand function terminate always easy see reference end article topic anonymous function use following syntax definition mysquare nat nat fun x x x definition myid type x x definition forall type fun x x compute myid nat nat ask coq infer term underscore compute myid implicit argument function argument inferred contextual knowledge parameter enclosed implicit default definition type x x compute nat sometimes may necessary turn make argument explicit compute nat give argument name compute nat coq ability extract code ocaml haskell scheme require extraction extraction language ocaml extraction factorialml factorial produce file factorialml factorialmli hold type nat nat val add nat nat nat let rec add n match n p add p val mul nat nat nat let rec mul n match n p add mul p val factorial nat nat let rec factorial n match n n mul n factorial n notation coq powerful notation system used write expression natural form compute natadd nat compute nat notation syntactic transformation applied text program evaluated notation organized notation scope using different notation scope allows weak notion overloading import zarith module holding definition related integer z require import zarith notation scope opened open scope zscope numeral addition defined integer compute z integer equality checking compute false bool locate useful finding origin definition notation locate zeqb x zscope close scope zscope back nat default interpretation compute nat scope also opened inline shorthand compute z z z coq declares default following interpretation scope corescope typescope functionscope natscope boolscope listscope intscope uintscope may also want numerical scope zscope integer qscope fraction held zarith qarith module respectively print content scope print scope natscope scope natscope delimiting key nat bound class nat natt x mod natmodulo x x natpow x x natcompare x x ge x x gt x x nateqb x x natltb x x natleb x x z le x le z x z le x lt z n le n x z lt x le z x z lt x lt z x lt x x natdiv x x initnatsub x x initnatadd x x initnatmul x coq exact fraction available type q qarith module floating point number real number also available advanced topic proving property rather tricky require import qarith open scope qscope compute q interpreted fraction qscope compute nat compute fraction compute eq comparison close scope qscope compute q q common data structure many common data type included standard library unit type exactly one value tt check tt tt unit option type useful expressing computation might fail compute none none option check option nat type sum b allows value either type type b print sum check inl inl nat b check inr true inr true bool check sum bool nat bool nat type set check bool nat type notation sum tuples optionally enclosed parenthesis item separated comma check true true nat bool compute prod nat bool nat bool type set definition myfst b type x b match x b end destructuring let available pattern match irrefutable definition b type x b let b x list list built using con nil using notation available listscope compute con con con nil nil list list nat compute nil list also list notation available listnotations module require import list import listnotations compute list nat large number list manipulation function available including length head first element default tail first element app appending rev reverse nth accessing nth element default map applying function flatmap applying function returning list foldleft iterator head tail foldright iterator tail head definition mylist list nat compute listlength mylist nat function coq must total indexing requires default value compute listnth mylist nat compute listmap fun x x mylist list nat compute listfilter fun x nateqb natmodulo x mylist list nat compute mylist mylist list list nat string require import stringsstring use double quote string literal compute hi string open scope stringscope string concatenated operator compute stringappend hello world hello world string compute hello world hello world string string compared equality compute stringeqb coq fun coq fun true bool compute way false bool close scope stringscope module module standard library may interest logic classical logic dependent equality arith basic peano arithmetic parith basic positive integer arithmetic narith basic binary natural number arithmetic zarith basic relative integer arithmetic number various approach natural integer cyclic number currently axiomatically top binary word bool booleans basic function result list monomorphic polymorphic list basic function result stream infinite sequence defined coinductive type set set classical constructive finite infinite power set etc fsets specification implementation finite set finite map list avl tree real axiomatization real number classical basic function integer part fractional part limit derivative cauchy series power series result relation relation definition basic result sorting sorted list basic definition heapsort correctness string character string wellfounded wellfounded relation basic result userdefined data type coq dependently typed defining type alias different defining alias value definition mythree nat definition mynat type nat interesting type defined using inductive vernacular simple enumeration defined like inductive ml ocaml standardml coq definition lang coq type ml complicated type need specify type constructor type constructor nt need empty inductive mynumber plusinfinity natvalue nat mynumber compute natvalue natvalue mynumber record syntax sugar tuplelike type defines named accessor function component record type defined notation record set record value constructed notation definition mypoint nat compute nat mypoint nat compute mypoint nat nat type parameterized like type list list anything substituted type definition listoflists list list definition listlistnat listoflists nat type also recursive like type analogous builtin list natural inductive mynatlist emptylist natlist nat mynatlist mynatlist compute natlist emptylist natlist emptylist mynatlist matching type constructor inductive animal dog string animal cat string animal definition say x match x dog x x say woof string cat x x say meow string end compute say cat fluffy fluffy say meow traversing data structure pattern matching recursive type traversed pattern matching easily let see traverse data structure builtin list type even though builtin con look like infix operator actually type constructor matched like fixpoint sumlist l match l head tail head sumlist tail end compute sumlist evaluates taste proving explaining proof language scope tutorial taste whet appetite check resource fascinating feature dependently type based theorem provers primitive construct underly proof language programming feature example write prove proposition b implies raw gallina definition mytheorem forall b b fun b ab match ab conj b end prove using tactic tactic macro language help build proof term natural style automate away drudgery theorem forall b b proof intro b ab destruct ab b apply qed prove easily prove simple polynomial equality using automated tactic ring require import ring require import arith theorem simplepoly forall x nat x x x x x proof intro ring qed prove closed form sum number n using induction fixpoint sumn n nat nat match n n n sumn n end theorem sumformula forall n sumn n n n proof intro n induction n reflexivity base case simpl ring ihn induction step qed scratched surface coq massive ecosystem many interesting peculiar topic leading way modern research reading got suggestion correction perhaps open issue github repo make pull request originally contributed philip zucker updated contributor
62,Lobsters,formalmethods,CSE-Formal methods,Proving equivalence of two functions using CBMC and Z3 SMT-solver,https://yurichev.com/news/20200410_CBMC_etc/,proving equivalence two function using cbmc smtsolver,smt proving equivalence two function using cbmc smtsolver cbmc klee past cbmc smtsolver toylevel bitblaster thanks file bruteforce,smt proving equivalence two function using cbmc smtsolver reading beautiful code book chapter lesson designing xml verifier elliotte rusty harold found piece code like isdigit unicode bool isxmldigit unsigned int c c c return true ascii c c return true arabic c c return true arabic c c return true devanagari c c return true c c return true gurmukhi c c return true c c return true c c return true c c return true c c return true c c return true c c return true c c return true c c return true tibetan return false optimized author bool isxmldigitoptimized unsigned int c c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true c return false c return true return false see problem hackish solution prone bug small unnoticed long period time typo ruin everything cbmc prove two function equivalent used klee past kid block another wellknown tool cbmc stand c bounded model checker think also us smt solver backend engine adding function void check unsigned int c assert isxmldigitoptimized c isxmldigit c asking cbmc find input assert would stop cbmc trace function check isxmldigitc result assertion isxmldigitoptimized c isxmldigit c success failed iteration verification successful try alter line constant function result assertion isxmldigitoptimized c isxmldigit c failure trace state file isxmldigitbugc line thread input c state file isxmldigitbugc line thread state file isxmldigitbugc line function check thread state file isxmldigitbugc line function check thread violated property file isxmldigitbugc line function check assertion isxmldigitoptimized c isxmldigit c returnvalueisxmldigitoptimized returnvalueisxmldigit input leading crash smtsolver also wanted know convert propositional logic form check equivalence using smt solver would add two type boolean variable c variable condition p variable like point point true execution flow reach point corresponding input bool isxmldigit unsigned int c c c return true c c return true c c return true return false always true get input true true condition true true true false return true executed next line synonym function return false iff function return true iff model using smtlib lispy language c c return true assert true always assert bvuge bvule assert assert c c return true assert assert bvuge bvule assert assert return false iff assert return true iff assert yes could used chose contaminate python syntax yet get clearer representation propositional logic equation optimized version function bit complex bool isxmldigitoptimized unsigned int c c return false c return true c return false c return true c return false c return true return false model smt c return false c return true assert true always assert bvult assert assert assert bvule assert assert c return false c return true assert assert bvult assert assert assert bvule assert assert end asking input function output would differ assert assert boolector ca nt find input giving unsat problem small enough tackled toylevel bitblaster alter constant smt solver would find input perhaps cbmc internally understand thing correctly thanks thanks martin nyx brain help cbmc file bruteforce see enumerate input effortlessly yes simple example come please drop email bug andor suggestion dennis yurichevcom
63,Lobsters,formalmethods,CSE-Formal methods,SafeGPU: Contract- and Library-based GPGPU for Object-Oriented Languages (2016),http://se.inf.ethz.ch/people/poskitt/publications/Kolesnichenko-Poskitt-Nanz.COMLAN.2016.pdf,safegpu contract librarybased gpgpu objectoriented language,,obj length filter flatedecode stream اq b h xǡ c n w q endstream endobj obj length filter flatedecode stream p g u gg v ɗ p
64,Lobsters,formalmethods,CSE-Formal methods,The seL4 Foundation – What and Why,https://microkerneldude.wordpress.com/2020/04/07/the-sel4-foundation-what-and-why/,foundation,created foundation foundation ensure longevity grow integrate ecosystem foundation open neutral entity protect promote brand still generalpurpose nontoy o kernel proof implementation correctness adopter need clarity fund ongoing engineering bigticket item hensoldt cyber together change world critical system achieve real security foundation community engagement commit open process evolving kernel foundation operate structure github source repos membership board contributor committers technical leader mean research onfor done advanced o technology time protection tool language ready get involved interim foundation web site contribute page retrofitting transitioning available userlevel infrastructure contact u like,created foundation foundation create nutshell reason expand provide longevity beyond support specific organisation grow integrate ecosystem protect promote brand provide platform funding ongoing engineering well sharing cost bigticket verification item foundation ensure longevity gamechanger safety securitycritical system o microkernel bottom software stack use properly achieve strong security property enabled system must engineered may require longterm commitment requiring significant resource therefore want make sure stay around wellsupported continues provide guarantee viability strongly tied developer trustworthy system t team especially technical leadership t problem everyone know committed success four technical leader kernel kevin gerwin june degree redundancy although work best team believe independent nonprofit organisation foundation make story even stronger even better choice developer build trustworthy system especially true consider timescale decade necessary many early adopter infrastructure medical defence domain setting organisational framework supported accountable adopter subject providing financial support course plan future board director represent voice significant adopter help keep technical leadership aware responsive need adopter grow integrate ecosystem right biggest barrier uptake probably lack system component tool includes boardsupport package bsps device driver file system network stack highlevel programming environment something abstraction level posix preferably based suitable model configuration development tool plus debugger ides etc without supporting organisation many missing bit built every adopter would huge waste effort better spent developing new trustworthy system furthermore believe plenty people would happy contribute guidance active community engagement clear shared direction forward contributor confident input make difference long term think way address forum community including developer adopter researcher meet engage foundation open neutral entity broader community represented strategy discussed openly seems right way protect promote brand become recognised brand strongly associated unique property world fastest advanced microkernel powerful assurance story even ten year concluded original proof still generalpurpose nontoy o kernel proof implementation correctness top open source property drive adoption providing competitive advantage developer product course creates expectation system based verified expected trustworthy others trust could undermined adopter modify kernel let explain mathematical proof provides strongest assurance possible guarantee provides need thoroughly understood order avoid misleading people rely even mathematical proof never cover everything always relies specific scope eg assumption hardware behaves correctly condition misunderstood might overestimate guarantee get particular proof specific version kernel specific specification seemingly trivial code change may invalidate assumption thus void assurance adopter need clarity also company see competitive advantage verified system want advantage undermined others taking shortcut making unsubstantiated verification claim foundation help officially blessing status verified version precisely identifying condition hold help provide clear provenance adopter able assign liability resulting someone hacking unverified version belongs providing unblessed code addition visible change affect proof informally happen documentation better solution framework adopter run proof code base deploying confirm proof still hold framework course also help contributor identify whether adopting change straightforward invalidate proof must go handinhand promotion benefit best way achieve broad membership base reading clearly interest please join fund ongoing engineering bigticket item result big investment firstly australian tax payer nicta funded creation nicta csiro continued supporting past year u taxpayer mostly darpa also part dod well dhs invested lot completing extending verification story well deploying realworld system recently hensoldt cyber funded verification riscv port kernel disclosure interest hensoldt cyber awesome expression confidence team behind immensely grateful support yet need one hand need revenue stream fund ongoing support community maintenance existing version improvement infrastructure particular automation verification framework need support call strategic engineering evolving kernel importantly developing ecosystem hope much latter eventually done community keep showing way providing reference design sample component obviously needed make attractive platform commercial system hand number bigticket item crucial aim making linux embedded world biggest verification arm kernel verification multicore kernel plenty company keen see others done several willing put money table make happen however investment required two pain limit company justify opensource project walk away bunch proprietary ip see value enabling opensource platform third major goal foundation provide ongoing base funding bring interested party together divide required investment way keep individual contribution pain limit together change world critical system achieve real security foundation obviously core function foundation address four point rationale setting first place work practice community engagement really central mission engage grow community developer adopter direct standardise evolution ecosystem several aspect one hand kernel proof hand stuff around essential using everyone serious look appreciate kernel foundation need much build system mentioned really biggest barrier uptake moment lot userland ready use limited support tool development environment reality anyone want deploy realworld system end developing much obviously waste everyone benefit least core component tool shared thing like device driver network stack core system service contain ip value bear significant cost need reduce cost sharing artefact two aspect developing artefact share community member community adopt maintain developer community highly simplified diagram indicates core userland box basic system service everyone need fact typically correspond component linux would deep inside kernel t see job provide core userland infrastructure camkes component framework maintain least initially need provide least example others wellintegrated device driver however want community contribute hope increasing number part adopted maintainer developer community lower stack component resides unique higher bar adoption core component must designed right meaning maintaining requires thorough understanding system operate ideally core component also verified becomes reality thing get easier highlevel component developer tool library driver yet another nic performing example similar nic driver exists still lowlevel enough linux equivalent live inside linux kernel device driver crypto library part o environment programminglanguage runtimes shell etc dependence model le good template furthermore may benefit competing component similar functionality eg library optimised small iot system v desktop v server see t responsibility mostly showing way providing sample code design putting community adoption kernel foreseeable future continue depend strongly expertise besides ensuring purity design lot verification people understand seemingly innocent change kernel affect verification even expert sometimes grossly underestimate cost change course kernel changed proof need updated something people moment hope get point nonts community member contribute proof time committed remain central kernel evolution certainly welcome platform port working way make verification platform port easier maybe semiautomatic still research commit open process evolving kernel part duty technical steering committee foundation representation developer run open process kernel evolution foundation operate structure foundation set project linux foundation lf follows established structure lf advantage familiar setup used hundred opensource project also mean benefit lf existing infrastructure organisational legal well existing network recruiting member structure shown figure structure foundation linux foundation line lf clearly separate foundation governance technical leadership contribution foundation board responsible governance particular control directed fund membership fee go minus tax lf directed fund also receive extra contribution member especially used pool fund big ticket item discussed technical activity underneath legal body lf project llc lf nonprofit company series llc virtual company foundation hold right trademark domain name host github source repos importantly contribution source code longer require contributor license agreement cla instead contributor provide standard developer certificate origin dco standard lf project removing bureaucratic part contribution membership board similar lf foundation different class membership model lf note become member foundation individual organisation must first member good standing lf pay membership fee well fee regular member tiered size similar lf although fee lower lf small company somewhat higher large one premium member regular member lf pay extra exchange privilege guaranteed board seat individual nonprofit organisation university opensource foundation join free associate member trustworthy system team creator special status premium member without paying membership fee five year foundation membership board board composed three member t one premium member addition regular member together elect board member finally technical steering committee composed committers technical leader noncommitting leader t responsible setting technical direction ecosystem chair exofficio member board high representation t board show commitment making foundation work merely dumping community moving back research staying engaged committed resource minimum year chose model response specific feedback adopter contributor committers technical leader contributor make community people contribute code documentation tool etc ecosystem selected subset contributor designated committers one directly commit repository accept pull request initially committers t member commit code proof doc userland code anticipate fact sincerely hope soon able appoint significant number committers community nonkernel component approved technical steering committee tsc made committers technical leader one particularity technical leader commit code provide leadership design implementation issue includes truly small number people say committers including part tsc except right commit code tsc elect chair exofficio member board represent technical community mean research onfor done t continue research feed ensure remains advanced o technology particular work time protection principled way prevent information leakage timing channel still fair bit go productionready make mainline kernel addition research architecture secure system tool language make easier build highassurance ideally verifiable component top cluster research enabler achieving vision verified kernel verified core system component one aim next year able build least simple system completely verified trusted computing base see research central part ongoing contribution ecosystem hope foundation also lead collaboration research ready get involved interim foundation web site provides detail join including full set legal document link lf interface becoming member need member also need active contributor whether company individual want one look contribute page project looking help range port via enhancement people becoming committers want deploy secure product check retrofitting transitioning way list available userlevel infrastructure contact u looking commercial support link one growing number company providing like like loading
65,Lobsters,formalmethods,CSE-Formal methods,Synthesizing optimal 8051 code,https://lab.whitequark.org/notes/2020-04-06/synthesizing-optimal-8051-code/,synthesizing optimal code,,rotate right rotate right mov mov c xch rrc xch rrc mov rotate right mov mov c xch rrc xch rrc mov c xch rrc xch rrc mov rotate right mov xrl mov anl xrl swap rl xch swap rl xrl mov rotate right mov xrl anl xch xrl swap xch xrl swap mov rotate right mov xrl anl xch xrl rr swap xch xrl swap rr mov rotate right mov rlc xch rlc xch rlc mov c xch rlc xch rlc mov rotate right mov mov c mov rlc xch rlc mov rotate right mov xch mov rotate right mov rrc mov rrc xch rrc mov rotate right mov xrl anl xrl rr rr xch xrl rr rr xrl mov rotate right mov xrl mov anl xrl rl swap xch rl swap xrl mov rotate right mov xrl anl xch xrl swap xch xrl swap mov rotate right mov xrl anl xch xrl swap rr xch xrl rr swap mov rotate right mov mov c xch rlc xch rlc mov c xch rlc xch rlc mov rotate right mov mov c xch rlc xch rlc mov
66,Lobsters,formalmethods,CSE-Formal methods,Doing a math assignment with the Lean theorem prover,https://ahelwer.ca/post/2020-04-05-lean-assignment/,math assignment lean theorem prover,natural number game reasoning number like computer logicomix peano axiom mathematical induction stating problem lean lean web editor create new lean project computer base case inductive case basic equality underpinning natural number end natural number game hacker news comment lobster comment,turn back clock confused physic major newly infatuated math computer science enrolled math number proof university calgary first encounter mathematical proof firstyear calculus mastered rote regurgitation deltaepsilon proof despite writing several dozen meaning never progressed beyond sort incantation summon day every epsilon exists delta told first day math purpose proof compel belief bright start sadly marked beginning deeply embarrassing semester reaching nadir asked professor prove definition fully twothirds way course got b understanding proof improved course next decade think really got encountering lean theorem prover past year lean hypothesis proof goal thing trying prove set move make much like game fact best introduction lean natural number game best puzzle game type played year learned lean writing proof like playing chess without knowing bishop existed knight moved thinking pawn could teleport around board knowing rule knowing constitutes valid move knowing space least space valid move powerful understanding write proof writing proof became like navigating endlessly fascinating maze using theorem hop place place finding conclusion wanted reexamine math assignment light newfound proof power one candidate came easily mind closedform equation sum first n natural number sum k n k frac n cdot n seemingly arbitrary equation intuitive explanation consider list number sum n exclude change result pair number outside edge list moving inward n n n etc case number middle list lack pair put side n list number pair remainder ldots ldots ldots add number pair together always get n n even pair voila thing bit complicated n odd n pair summing n single remainder n frac n cdot n frac n frac n cdot n n frac n cdot n frac n cdot n chain reasoning might compel belief soft human brain thing changed longer sufficient turbulent time live would computer say reasoning number like computer may may know grand tale early century logician bertrand russell many others fought put mathematics solid axiomatic basis idea fairly small number simple axiom thing assumed true build mathematics following logically foundation basically computer understand mathematics topic interest read logicomix seriously great need delve deeply topic beyond explaining natural number defined axiomatically actually formalized two century earlier called peano axiom nine axiom one interested natural number successor function n number n basically n formalization every natural number number nested successor function applied zero example conventional notation peano notation ldots ldots somewhat similar counting unary also need define addition done recursively base case general case base case n n general case n n difficult see defines addition work calculating recursion level value final ingredient need mathematical induction tactic used prove certain proposition p hold natural number suffices show base case p true inductive case assuming p n true p n true usual analogy infinite line domino knock first domino show base case hold know domino knock domino show inductive case hold know domino knocked proposition hold natural number primitive tool use computer construct many interesting theorem natural number stating problem lean follow along section use lean web editor create new lean project computer recall theorem want prove sum k n k frac n cdot n turn integer division annoyingly difficult reason let rewrite follows cdot sum k n k n cdot n first thing want lean recursively define sum first n natural number think lefthandside equation def sumoffirstnnat ℕ ℕ natsucc n natsucc n sumoffirstnnat n lean symbol ℕ natural number expressed nat successor function defined natsucc defined function take x mathbb n return sum natural number x character patternmatches value x top line base case bottom line general case test function follows place cursor end line see result lean goal window eval sumoffirstnnat main event let write theorem lean prove theorem closedeqsumoffirstnnat n ℕ sumoffirstnnat n n natsucc n begin end putting cursor begin end marker bring current proof goal lean goal window base case character denotes thing currently trying prove going prove inductively type induction n hd lean proof window show following two goal base case inductive case goal case natzero sumoffirstnnat case natsucc ℕ hd sumoffirstnnat natsucc sumoffirstnnat natsucc natsucc natsucc natsucc make use workhorse rewrite tactic rw tactic modifies proof goal according existing definition equation rewrite sumoffirstnnat value definition rw sumoffirstnnat default lean applies statement topmost proof goal base case rewritten case natzero make use basic theorem natmulzero say n natzeromul say n rw natmulzero rw natzeromul prof base case inductive case inductive case remains case natsucc ℕ hd sumoffirstnnat natsucc sumoffirstnnat natsucc natsucc natsucc natsucc worth taking time break everything mean hd hypothesis thing assuming purpose proving conclusion denoted use hypothesis rewrite conclusion similar base case first rewrite expression according definition general case sumoffirstnnat rw sumoffirstnnat transforms proof goal ℕ hd sumoffirstnnat natsucc natsucc sumoffirstnnat natsucc natsucc natsucc want multiply aim able rewrite proof goal inductive hypothesis hd use natleftdistrib theorem rw natleftdistrib ℕ hd sumoffirstnnat natsucc natsucc sumoffirstnnat natsucc natsucc natsucc rewrite sumoffirstnnat proof goal using inductive hypothesis hd rw hd get natsucc natsucc natsucc natsucc natsucc point clearly equal need simple algebraic manipulation prove save space one shot comment rewrite natsucc n n rw natsucceqaddone rewrite natsucc n n natsucc defn addition note rw usually rewrite left right equality l right left rw nataddsucc rewrite natsucc clarity rw show natsucc refl multiplies rw leftdistrib moving thing around commutativity rw mulcomm rw mulcomm rw addcomm done proof formally verified lean case lost track point link lean web editor full proof move cursor end line see proof state position might rolling eye last section really want wasting time multiplying thing line line like grade school fortunately lean provides advanced tactic take care busywork entire final sequence command rw hd replaced one tactic ring tell lean intelligently search basic equality underpinning natural number attempt make side equation equal part communitymaintained mathlib accessed putting import tactic top lean file extensibility powerful tactic one lean great feature end exercise appealed greatly enjoy natural number game gamified introduction lean first heard lean excellent lecture dr kevin buzzard imperial college london video see hacker news comment lobster comment interesting discussion believe learning lean brought great clarity understanding mathematical proof way like perfect scratch pad focusing mind goal keeping track assumption checking thinking maybe would easier time learning proof used lean first place although way knowing hoping use lean formalize result quantum information processing maybe coverage existing theorem becomes great enough work use real qip theoretician idea lean basis mathematical search engine also particularly interesting nice way people know computer science math like play small part development field
67,Lobsters,formalmethods,CSE-Formal methods,How Verifpal Dramatically Sped Up the Formal Modeling Efforts for a New Pandemic-Tracing Protocol,https://blog.symbolic.software/2020/04/05/dp-3t-verifpal/,verifpal dramatically sped formal modeling effort new pandemictracing protocol,decentralized privacypreserving proximity tracing verifpal modeling verifpal day setup phase day day fastforward day announce new phase query generating model analysis proverif coq proverif coq like,last week numerous researcher published timely fruit recent collaboration provide proximitytracking solution help pandemic still privacypreserving result decentralized privacypreserving proximity tracing provides promising first step bringing realworld cryptography effort combat pandemic mentioned troncoso et al whitepaper goal simplify accelerate process identifying people contact infected person thus providing technological foundation help slow spread virus system aim minimise privacy security risk individual community guarantee highest level data protection troncoso et al decentralized privacypreserving proximity tracing support project symbolic software decided test verifpal open source protocol verification framework see well promise easier accessible protocol modeling verification hold face new ambitious protocol target novel use case post go modeling using verifpal language conclude comparing result designer security goal modeling demonstrate assume principal participating simulation following population individual alice bob charlie possessing smartphone smartphonea smartphoneb smartphonec respectively healthcare authority serving population backend server individual communicate obtain daily information installing verifpal start creating new model called begin defining attacker match security model case using active attacker ie one monitor also intercept overwrite unprotected message network attacker active proceed illustrate model sequence day operation within lifecycle pandemic day setup phase assume new individual diagnosed disease day using mean healthcare authority backend server act stage simply ignore specification state every principal first joining system generate random secret key sk used one day every sk value knowledge public broadcast key value principal compute multiple unique ephemeral id value ephid using combination prg prf method generating ephid analogous hkdf function verifpal could add following line code file order model alice smartphonea line start treated comment ignored verifpal principal block look like following principal smartphonea line state alice know public broadcastkey know public broadcastkey sk going secret random value define use generates keyword use following template sk variable name sk day number principal initial generates use following template ephid variable name ephid day number value number principal initial hkdf nil broadcastkey thing go bob charlie principal smartphoneb know public broadcastkey generates hkdf nil broadcastkey principal smartphonec know public broadcastkey generates hkdf nil broadcastkey whenever two principal would come physical proximity would automatically exchange ephids principal us ephid value discard use another one performing exchange another principal let imagine alice bob came contact would mean alice sent message bob bob sent alice message exchange modeled verifpal sender recipient name value smartphonea smartphoneb smartphoneb smartphonea let say conclusion day bob sits behind charlie bus modeling equally simple smartphonec smartphoneb smartphoneb smartphonec day day backend server automatically publish sk value people infected member general population value previously unpublished thus private known generator server server like principal principal backendserver let assume list infected patient day know private backendserver smartphonea backendserver smartphoneb backendserver smartphonec forget every day starting day mandate principal generate new sk value new value equal hash sk value day principal also generate ephids like principal smartphonea hash hkdf nil broadcastkey principal smartphoneb hash hkdf nil broadcastkey principal smartphonec hash hkdf nil broadcastkey thankfully alice bob charlie committed selfconfinement stayed home exchange ephids anyone day day similar sequence event take place since sufficient define value need later model define block alice principal smartphonea hash hkdf nil broadcastkey fastforward day unfortunately alice test positive since break routine happened day day announce new phase protocol model phase alice decides announce infection anonymously using mean securely communicate sk value day ago backend server using unique trigger token provided healthcare authority assuming backend server healthcare authority share secure connection private key encryption key ephemeralsk exchanged wire healthcare authority alice backend server healthcare authority encrypt freshly generated triggertoken using ephemeralsk send alice backend server principal healthcareauthority generates triggertoken know private ephemeralsk enc ephemeralsk triggertoken bracket around mean value guarded ie active attacker inject value place healthcareauthority backendserver healthcareauthority smartphonea alice would use aead cipher encrypt using ephemeralsk key triggertoken additional data send output backend server note alice obtain triggertoken decrypting using ephemeralsk principal smartphonea know private ephemeralsk dec ephemeralsk aeadenc ephemeralsk smartphonea backendserver backend server decrypt receive triggertoken way alice attempt decrypt decryption successful server would obtain would sure value came alice alice know triggertoken time defined protocol finally backend server add list infected patient previously defined send list individual community principal backendserver know private ephemeralsk aeaddec ephemeralsk dec ephemeralsk concat backendserver smartphonea backendserver smartphoneb backendserver smartphonec everything happened day summarized following diagram query may finally define query block ask verifpal state certain security guarantee expect protocol shared publicly software running anyone phone able regenerate ephid value generated owner starting day prior day diagnosis value would compared list ephids received everyone came contact alice therefore notified exchanged ephids someone diagnosed illness without revealing identity person query would someone shared value day got tested get flagged ie phase phase confidentiality people came contact alice able compute alice ephids starting day confidentiality confidentiality confidentiality confidentiality confidentiality confidentiality server able authenticate alice sender authentication smartphonea backendserver result initial modeling verifpal suggest u following ephids generated alice known party alice announces remains confidential even alice declaring illness note generated day alice got testedall following value recoverable attacker phase alice announces illness result come line expected protocol note security communication channel healthcare authority backend server individual defined placed hypothetical security condition order focus quickly sketching protocol analysis required order better elucidate extent obtained security guarantee generating model analysis proverif coq verifpal generating proverif model live verifpal model verifpal visual studio code extension excited working automatically generating proverif coq model directly verifpal model resulting proverif coq model humanreadable thus easily extensible allowing profound protocol analysis supplementing verifpal insight tool existed two decade working able generate baseline proverif coq model le hour work verifpal model immeasurably huge leap forward term obtaining working material formal modeling analysis novel protocol excited post update new feature matures verifpal proverif coq model generation currently development expect beta release ready end april coming soon like like loading
68,Lobsters,formalmethods,CSE-Formal methods,Vellvm: Verified LLVM,https://www.cis.upenn.edu/~stevez/vellvm/,vellvm verified llvm,vellvm verifying llvm llvm llvm intermediate representation ssa coq test suite previously proposed transformation extract current participant past participant code http githubcomvellvm publication funding,vellvm verifying llvm vellvm project building verified llvm framework reasoning program expressed llvm intermediate representation transformation operate vellvm provides mechanized formal semantics llvm intermediate representation type system property ssa form framework built using coq interactive theorem prover includes multiple operational semantics prof relation among facilitate different reasoning style proof technique validate vellvm design extract interpreter coq formal semantics execute program llvm test suite thus compared llvm reference implementation demonstrate vellvm practicality formalize verify previously proposed transformation hardens c program spatial memory safety violation vellvm tool allow u extract new verified implementation transformation pas plug real llvm infrastructure performance competitive nonverified adhoc original current participant past participant code original vellvm development code base called vellvmlegacy moved github repository available http githubcomvellvm publication funding nsf grant collaborative research expedition computing science deep specification nsf grant xps clcca improving parallel program reliability novel approach precise dynamic data race detection supported nsf grant validating program transformation mechanized llvm last modified thu jan est
69,Lobsters,formalmethods,CSE-Formal methods,Let's Prove A Concurrent Blocking Queue (sequel of Let's Prove Leftpad),https://github.com/lemmy/lets-prove-blocking-queue,let prove concurrent blocking queue sequel let prove leftpad,let prove blocking queue deadlockfree letsproveleftpad provablycorrect provably correct proof beware bug code proved correct tried time consuming blocking queue queue proving deadlock freedom want contribute read contribution guideline,let prove blocking queue deadlockfree repository provably deadlockfree blocking queue challenge inspired letsproveleftpad readme contribution guide adopted however letsproveleftpad sequential algorithm challenge concurrent one provablycorrect provably correct guarantee algorithm satisfies given correctness property say deadlock freedom providing proof computer check proof wrong computer tell algorithm incorrect wrt correctness property donald knuth put beware bug code proved correct tried compare something like testing even run test day day still nt know sure keeping running another minute wo nt reveal deadlock proof though know algorithm deadlockfree computer verified proof proving correctness really really powerful also time consuming often worth effort sampler different tool use prove algorithm implementation correct standardized proof simple concurrent datastructure likely every programmer encountered career blocking queue queue block queue becomes nonempty consumer retrieve element wait space become available producer store element queue fixedstatic capacity simplicity consider finite disjoint set producer consumer word producer blocked queue full consumer blocked empty task prove blocking queue guaranteed never deadlock matter queue capacity number producer number consumer system space queue producer eventually add element queue element queue consumer eventually remove queue formally let p c set producer consumer thread let w set waitingsleepingblocked thread prove p cup c w valid property blocking queue since c perhaps common ground u listing blocking queue implementation include stdioh include stdlibh include stdinth include pthreadh buffsize buffer fillindex useindex count pthreadcondt empty full pthreadmutext mutex void put value buffer fillindex value fillindex fillindex buffsize count get tmp buffer useindex useindex useindex buffsize count return tmp void producer void arg pthreadmutexlock mutex count buffsize pthreadcondwait empty mutex put rand pthreadcondsignal full pthreadmutexunlock mutex void consumer void arg pthreadmutexlock mutex count pthreadcondwait full mutex get pthreadcondsignal empty pthreadmutexunlock mutex proving deadlock freedom great demo different proof technique idea simple algorithm implementation easy get wrong concept concurrency challenging human get right however demise moore law mean algorithm become concurrent keep growing workload thus verification pay area especially concurrency bug tend manifest unexpectedunpredictable behavior proof deadlockfreedom going small enough mostly grokkable formal method outsider complex enough differentiate way prove code correct want contribute love please read contribution guideline submit favorite proof
70,Lobsters,formalmethods,CSE-Formal methods,Proving properties of constant-time crypto code in SPARKNaCl,https://blog.adacore.com/proving-constant-time-crypto-code-in-sparknacl,proving property constanttime crypto code sparknacl,introduction tweetnacl javascript version community edition paper sparknaclads sparknaclutilsadb modular reduction variable time constant time diversion constant time conditional swapping subtracting p safely back aside call aside bug bug reported line sparknaclutilsadb line conclusion work,introduction last month developed spark version tweetnacl cryptographic library made public github february bsd licence tweetnacl achieved widespread popularity adoption used underpin many project javascript version library used many web site npm package manager reporting million downloads per week readme file toplevel repository contains background information need build use sparknacl code proven type safe aka runtime error silver level spark adoption community edition spark blog entry go bit technical detail one particular aspect project challenge rewriting verifying constant time algorithm using spark something big deal crypto code algorithm known leak information running time varies respect sensitive variable like cryptographic key constant time programming style adopted prevent kind sidechannel attack tweetnacl something masterclass compact programming meet unusual goal entire source code library transmitted tweet naturally lead somewhat economical coding style complete lack comment code paper author website explains leaf lot detail either unstated assumed sparknacl aim reverse situation proving alternative reference implementation nacl api welldocumented provably free runtime error preserve constant time nature algorithm blog entry concentrate one internal function tweetnacl function called let start look original c implementation starting little background information type data working tweetnacl defines type macro need know namely define n n define sv static void typedef unsigned char typedef long long typedef gf particular type gf array integer actually used represent big integer digit limb bit range bit used digit overflow intermediate computation gf value limb really range call normal gf also need know nacl implement elliptic curve called reference modulus curve coordinate actually call p gf type represents value littleendian format limb array index represents leastsignificant digit c code function called declaration sv const gf n bit reading digging reveals parameter supposed pointing uninitialized array byte assigned function based value parameter n tweetnacl paper say purpose freeze integer mod store give bit hint note normal gf value store sixteen value bit representing integer range p slightly le half upper bound point take normal gf value might represent integer greater equal p reduce modulo p pack resulting value byte give u enough write first specification spark spark perfectly normal function return composite type array seems natural use function procedure also need introduce type follows longer explanation constant derived see sparknacl source sparknaclads complete source code see file sparknaclutilsadb subtype subtype range subtype subtype range type byteseq array range byte subtype byteseq lm limb modulus limb modulus minus lm constant constant remainder modulo constant maximum gf limb coefficient mgflc constant maximum gf limb product mgflp constant subtype gfanylimb range lm mgflc mgflp type gf array gfanylimb subtype gfnormallimb range subtype normalgf gf dynamicpredicate normalgf gfnormallimb note normalgf subtype gf us ada dynamicpredicate aspect constrain value limb finally introduce spark specification reduces n modulo pack value byte littleendian function n normalgf return global null modular reduction variable time variable time algorithm modular reduction easy subtract p value n result lie done allowed try useful observation value n lie one three interesting range might already case nothing done might lie p case subtract p finally lie subtract p twice return result unfortunately nt constant time either good constant time let look tweetnacl c code sv const gf n int j b gf n j b eh earth going good question let break bit look three outer loop first array assignment n problem spark third taking sixteen value assigning onto value littleendian format typeconversion function middle interesting loop exactly twice body loop first subtracts limb subtracts limb carry reducing limb mod finally subtracts limb subtracting littleendian representation p nt worry three call come back diversion constant time conditional swapping call end loop body tweetnacl paper say constant time conditional swap gf value c function prototype look like sv gf p gf q int b nt help much note gf array type parameter p q byreference probably ada term parameter b int ever called value probably interpreted boolean value give reasonable chance writing spark specification changed name cswap seems readable constant time conditional swap p q procedure cswap p gf q gf swap boolean global null contractcases swap p qold q pold swap p pold q qold contractcases aspect say exactly procedure swapping p q depending value swap might tempting write body trivially swap temp p p q q temp end wo nt since require running time constant even depending value swap let see c code work sv gf p gf q int b c c p q p q le obvious becomes clear consider property bitwise xor operator c way local variable c initialised c initialised b b bitwise yield similarly b c initialised usefully binary best handled spark constant lookup table type bittoswapmasktable array boolean bittoswapmask constant bittoswapmasktable false true ffffffffffffffff translating proving body spark reveals slightly ugly side c version us bitwise operator like signed integer implementationdefined c since semantics fall back whatever representation integer happens use spark equivalent forced use instantiation uncheckedconversion switch back also need introduce axiom proof pragma assume k k k writing body cswap spark reasonably easy proof need loop invariant state loop iteration first element p q swapped come like procedure cswap p gf q gf swap boolean c bittoswapmask swap begin loop c p xor q p p xor q q xor pragma loopinvariant swap j range p j qloopentry j q j ploopentry j else j range p j ploopentry j q j qloopentry j end loop end cswap hope see work remember x xor x x xor x pleasingly gnatprove discharge vcs subprogram assistance full version cswap sparknacl also sanitizes local variable c ie era value memory another strange tricky idiom master crypto programming explains c declared variable constant subtracting p safely established spark equivalent cswap return function key realisation outer second loop always subtracts p twice us swap right answer assigned another key discovery decision swap based whether subtraction nt underflow ie return negative result imagine case n subtract p result negative telling discard result subtraction answer really want n mean need subtract p procedure return result subtraction boolean underflow flag result might negative use gf subtype dynamicpredicate plus pre postcondition make sure apply subtractp subtracting p twice normalgf might result gf limb negative lower bound subtype tempgfmsl range lm subtype tempgf gf dynamicpredicate tempgf tempgfmsl k range tempgf k gfnormallimb procedure subtractp tempgf result tempgf underflow boolean global null pre post result body subtractp basically simple translation c code suitable loop invariant sufficient establish absence runtime error also need one subtype thus subtype range procedure subtractp tempgf result tempgf underflow boolean carry r gf begin r others limb subtract lsl p ffed r ffed limb subtract ffff carry range loop carry r mod r ffff carry r r mod lm pragma loopinvariant j range r j gfnormallimb pragma loopinvariant tempgf end loop limb subtract msl significant limb p carry note limb might become negative underflow carry r mod r carry r r mod lm note r normalized result first subtraction numerically correct input second underflow r result r end subtractp back finally position write body rather simple function n normalgf return l gf tempgf firstunderflow boolean secondunderflow boolean begin l n subtractp l firstunderflow subtractp secondunderflow cswap secondunderflow cswap l firstunderflow return end trick arrange call cswap always put correct answer consider three case mentioned n first subtraction underflow second case second call cswap put l right answer original value n n p first subtraction underflow second first call cswap put result first subtraction right answer second cswap nothing n neither subtraction underflows call cswap nothing correct answer result second subtraction already phew function simple type conversion normalgf wo nt reproduce simple translation third final loop c code problem running gnatprove yield medium predicate check might fail line return statement call problem tempgf might negative value significant limb formal parameter required normalgf aha need somehow keep track fact value always normalgf call subtractp cswap suffices establish relationship postcondition subtractp short need know subtraction underflows result subtraction normalgf mean extend specification subtractp follows result p underflow result normalgf underflow result normalgf procedure subtractp tempgf result tempgf underflow boolean global null pre post result underflow result normalgf place gnatprove discharge vcs aside call tweetnacl source deal gf value limb outside range mean formal parameter n normalised packed involves ripplecarry algorithm normalises limb mod carry extra bit next limb function turn need apply three time normalise gf value get normal gf sparknacl carrying function applied earlier aggressively call nt appear note formal parameter already normalgf old gf aside bug bug reported tweetnacl implementation function try reproduce bug sparknacl happens bug concern normalisation limb subtractp correct code line sparknaclutilsadb look like r r mod lm buggy version normalised limb instead reintroduce bug sparknacl would change r r mod lm running gnatprove buggy version yield medium predicate check might fail line final assignment r result predicate check trying prove r tempgf value proof fails since limb r reduced pleasing see use simple subtypes typesafety proof still spot subtle functional bug original version tweetnacl conclusion work blog entry rather long shown single procedure c version tweetnacl translated proved spark function tweetnacl requires real work prove translated spark proved little effort observation arise work spark dynamicpredicate aspect proved invaluable think possibly unsung killer feature latest version ada provides massive change expressive power type system thus capability proof tool like gnatprove possible write constant time performancecritical code like spark ada idiom extremely useful crypto programming particularly intrinsic shift rotate operation modular type pragma inspectionpoint sanitising data limited type ensure passbyreference copy sensitive data ever made firstclass composite type seen type safety proof aka silver level spark get lot bangforthebuck term assurance also spotting functional bug enpassant work plan performance testing soon pitting sparknacl tweetnacl small riscv baremetal target expect sparknacl bit slower start proved type safety expect compiler optimisation perform well see perhaps another blog entry come
71,Lobsters,formalmethods,CSE-Formal methods,Idris 2 version 0.1.0 Released,https://www.idris-lang.org/idris-2-version-010-released.html,idris version released,edwin news meta download page chez scheme racket mailing list rlwrap github issue tracker contributor github repository,wed april edwin news tag meta new version idris released download source including generated c file building download page complete reimplementation idris written idris need latest idris build source build directly generated c either way need chez scheme racket able execute idris program documentation available get started see installation worked successfully linux mac raspberry pi please let u know ideally via mailing list get installing platform likely need work install window really like work please also let u know help early release bound issue teething problem particular might find problem interactive editing via emacs particular termination coverage checking nt trust yet cumulative universe yet implemented missing library function case please consider sending patch run time support idris currently compiles via scheme default although longer term aim pluggable back end idris repl sophisticated idris yet example readlinetab completionetc support yet recommend running via rlwrap documentation command search capability issue find please report via github issue tracker may able fix quickly many u working full time still useful know release update fairly regularly experimenting idris programming little bit experience idris encourage experiment idris best way find fix problem also significantly faster thanks many people contributed whether adding feature fixing code reporting issue anything else find list contributor github repository fun
72,Lobsters,formalmethods,CSE-Formal methods,"Getting a program right, in nine episodes",https://bertrandmeyer.com/2020/03/26/getting-program-right-nine-episodes/,getting program right nine episode,introduction attempt result loop else end end end loop end result note section attempt result loop elseif result else end end attempt loop else end end result end result attempt also includes loop else end end result end attempt result loop elseif else result end end attempt result loop elseif else result end end reference section using program prover result loop invariant b verify verify b result loop elseif else result end end variant note reference section understanding proof result loop elseif else result end end result result result implies result result result result result result else end reference note section lesson learned else end position reference,article originated series post communication acm blog normally repost article even though copypaste usually good three reason duplication readership seems largely disjoint use better formatting since blog software restrictive wordpress good single repository article including originated cacm series took form nine article first ended quiz next one published couple day later provided answer since answer available would make sense use scheme instead publishing whole thing single article nine section slightly adapted original lazy far collect reference single list number refer list end current section colleague recently asked present short overview axiomatic semantics guest lecture one course teaching course software verification long time see eg plenty material instead reusing decided spend bit time explaining good systematic approach software verification resulting tutorial introduction attempt say software verification software professional computer science student outside elite department think testing job interview example show loopbased algorithm programmer ask would verify start talking devising clever test case far berate testing fact always thought inevitable dijkstra quote testing show presence error absence everyone seems take indictment dismissal testing author probably intended way actually fantastic advertisement testing way find bug yes great get verifying software mean attempting ascertain bug listener realize verification mean testing best course material axiomatic semantics proof technique attract interest fact somewhere video talk great testing publicspeaking guru james whittaker start telling audience worry standard boring lecture start talking loop invariant loop invariant coming article fact one central concept later section bring sleeping bag yet decided start lecture giving example happens use proper verification one example fact see warning article nothing new using example book introduction theory programming language exercise going even back programming pearl communication acm article jon bentley address example basic idea yet almost forty year later idea still widely known among practitioner consider article yet another tutorial fundamental software engineering stuff tutorial quiz start program text j n result initialized j loop j integer division x else j end end x result end variable integer type upsorted array integer indexed n let notation get friend loop p e loop q end executes p repeatedly stop e exit condition true otherwise executes q like p e q notation assignment equality testing integer division eg result name special variable whose final value returned computation part function look body result automatically initialized zero like integer variable execution assign anything result function return zero first question program trying ok real quiz assume know answer attempt binary search find element array determines absence sequence n step rather n use sequential search remember assume array sorted result give u position x appears array otherwise zero real quiz program meet goal answer either yes asking correct version least yet case find literature situation nonsymmetric might say popperian justify answer suffices single example particular array particular value x program fails set result justify yes answer need provide credible argument every x program set result note section tap conference series test proof yuri gurevich started explores complementarity two approach dijkstra first published observation need consider case infinite input set even trivial finite program multiplies two integer number case examined beyond human reach today integer looking perspective may note exhaustive testing finite set case dijkstra dismissed impossible practice fact exactly respected model checking verification technique original program simplified abstracted version precisely designed keep number case tractable dijkstra argument remains valid course original program nontrivial modelchecking get u wood safe testing find bug find one ensure bug property original program rather artifact abstraction process somewhere youtube although find right jon bentley programming pearl writing correct program communication acm vol pp december available example attempt program correct yield correct answer answer correct either result index element equal x result x appear program correct prove correct suffices single example test case program yield correct answer assume x array two element equal zero n remember array indexed successive value variable expression j j initialization j enter loop first branch since x get assigned value neither value j changed loop repeat body identically taking first branch forever even program yield incorrect answer yield answer note reference famous dijkstra quote mentioned first article common pit test proof test actually proof test fails proof program incorrect valid complex mathematical proof may kind proof like customer tend prefer guarantee program correct proof right ready second attempt program attempt j n j result loop j integer division x elseif x result else case x j end end unlike previous one version always change j may hope loop forever nice symmetry j question program meet goal attempt question program program right trivial example disproves n array contains single element x initialization set j j hold entry loop stop immediately result zero whereas place x appears attempt let u see fare better program attempt j n j loop j x else j end end n result end result remains one attempt also includes first two program attempt wrong third know every right upset answer consider twoelement array n remember array indexed convention search value x successive value variable expression j j initialization j enter loop first branch since x j enter loop outofbounds memory access trying access nonexistent oops note could hope get rid array overflow initializing rather variant version left bonus question patient reader hint also correct find counterexample ok end point following version right program attempt j n j loop j x else j end end n result end attempt yes know dragging part idea witnessing hard get program right judging seat pant maybe get right time yet program attempt finally correct sorry disappoint consider twoelement array n search value x yes counterexample last time although could also use x successive value variable expression j j initialization j enter loop first branch j enter loop first branch j exit loop condition final true result get value quite wrong since element position case x appear close something like work patience patience let u tweak one trifle ok program attempt j n j result loop j x elseif x j else result end end work attempt question program right wrong well know growing upset section answer still program wrong way wrong somewhat specific applies fact previous variant well particular wrongness fancy word bug history pointed first article long tradition using binary search illustrate software correctness issue number version published proved correct including one justly admired programming pearl series jon bentley joshua bloch google published legendary blog article showed version suffered major flaw obtain approximate midpoint j compute j working computer integer rather mathematical integer might overflow situation j hence well well within range computer representable integer give take n typically day conceptual justification overflow specification used article start problem arise array occupies half memory rather extreme case still handled properly general case often useful use array arbitrary bound eiffel even small array high index computation produce overflow bad result bloch gotcha stark reminder considering correctness program must include relevant aspect consider program executed real computer wish executed ideal model world note jon bentley alluded requirement original article explicitly mention integer overflow felt necessary complement proof comment laborious proof binary search still unfinished standard would prove program free runtime error division zero word overflow array index bound prescient word easy correct potential arithmetic overflow bug instead j bloch suggested compute average j mathematician viewpoint indeed compute value variant compute one overflow j within range ready version version save single change program attempt j n j result loop j x elseif x j else result end end probably right time recall word donald knuth introduces binary search original tome sorting searching seminal book series art computer programming although basic idea binary search comparatively straightforward detail somewhat tricky many good programmer done wrong first time tried need convincing careful answer variant sleeve come many almostrightbutactuallywrong program attempt nudge ok even best thing end last section yet last program attempt naturally following next question running quiz version right wrong provide answer best knowledge correct program yes quiz continues since answer previous question program correct sufficed case find one case program behave expected next question different nature find argument version correct reference section particular jon bentley programming pearl writing correct program communication acm vol december page available joshua bloch extra extra read nearly binary search mergesorts broken blog post google ai blog june available caveat program correct barring typo copypaste error starting rigorously verified program see next post blogging system ui text processing facility best possible entering precise technical text code however carefully check rule clerical mistake course would corrected soon identified using program prover preceding section presented candidate binary search algorithm asked whether correct correct mean something quite precise array value x final value variable result valid index say n size x appears index last section boldly stated program attempt correct question case preceding version incorrect could prove property mean prove simply exhibiting single counterexample single x program correctly set result asserting program correct one example million example suffice fact almost irrelevant test much like get correct result every time get rid gnawing fear tested one time millionth test would produced failure since set possible test infinite solution sight need proof going explain proof next section would like give opportunity look proof wrote one earlier article say already present jon bentley programming pearl contribution dramatic change occur four decade since appearance automated proof system handle significant realistic program one system autoproof developed chair software engineering eth zurich key project member carlo furia martin nordio nadia polikarpova julian tschannen initial contribution bernd schoeller basis boogie proof technology microsoft research autoproof available online use turn one basic tutorial example binary search go corresponding page run proof going let try curious online autoproof example well without many explanation come next section let simply name basic proof technique loop invariant loop invariant property inv associated loop loop initialization inv hold b one execution loop body started inv satisfied loop exit condition satisfied otherwise executing body satisfies inv terminates idea course proof induction mathematics initialization corresponds base step proving p hold body property induction step proving p n follows p n traditional induction proof deduce property p n hold integer loop deduce loop finish execution invariant still hold since executing loop mean executing initialization loop body zero time course exit condition also hold since otherwise would still looping prove correctness loop conjunction invariant exit condition must yield property seek example property stated result relative x also need prove loop terminate part involves another concept loop variant explain next section moment say anything let look autoproof example page find run verification read invariant formal element code run verification click verify button page let emphasize emphasize clicking verify run code execution engine autoproof verification use test case process text program appears page applies mathematical technique perform proof core property proved proposed loop invariant indeed invariant ie satisfies property b program proved autoproof example page version last section different variable name far brevity used short name j program autoproof site applies good naming practice variable called low middle like version new variable name program attempt identical different variable name low n low result loop middle low low middle value array called rather low middle elseif middle value middle else result middle end end exactly algorithm text autoproof page one invited let autoproof verify wrote algorithm text rather program text actual program text eiffel includes variant invariant clause affect program execution make proof possible whether concept invariant variant program proof completely new try prover take look proofsupporting clause next article remove remaining mystery note reference section technically set possible array value pair finite size defying human ability pointed first section model checking abstract interpretation verification technique actually attempt perform exhaustive test anyway drastically reducing size search space article jon bentley programming pearl writing correct program communication acm vol pp december available example autoproof page contains documentation numerous article reference understanding proof previous section invited run verification autoproof tutorial page dedicated example autoproof automated proof system program matter clicking verify importantly read annotation added program text particularly loop invariant make verification possible avoid confusion let emphasize clicking verify run program test case used effect run verifier attempt prove correctness program working solely program text program text reverting brevity shorter identifier version autoproof page expressive one j n j result loop j x elseif x j else result end end let u see make proof possible key property loop invariant read j n b result n c k k x k j n k x e result result x notation slightly different web page adapt eiffel language existed time produced today eiffel write invariant almost shown long live unicode allowing u use symbol obtained typing using smart completion eg start typing forall select symbol pop implies many others remember invariant established loop initialization preserved every iteration role clause follows keep index range b keep variable result whose final value returned function range c eliminate index interval determined sought value x appear array value smaller starting j greater two interval j n contain sought value overall idea algorithm search algorithm extend one two interval narrow remaining part n x may appear e express soon find positive nonzero result value index array see b x appear invariant useful answer exit give u want algorithm exit condition recalled j result combined invariant tell u exit one following hold result e know x appears position result j c imply x appear anywhere case true result b result must zero autoproof prof mechanically function precondition array sorted initialization ensures invariant loop body assuming invariant satisfied exit condition ensures loop invariant executes combination invariant exit condition ensures explained postcondition function property result either positive index element equal x zero guarantee x appears nowhere proof guarantee correctness program terminates autoproof must prove separately terminate technique simple find loop variant integer quantity v remains nonnegative throughout loop word loop invariant includes implies v decrease iteration loop continue executing forever obvious variant j needed j may go last iteration x appear array reflects informal idea algorithm repeatedly decrease interval j initially n guaranteed x appears appears index interval end either already found x interval empty implying x appear great reference variant technique proving program termination communication acm article variant give upper bound number iteration remain time sequential search j would best bet binary search easy show j also variant extending proof correctness proof performance key goal binary search ensure logarithmic rather linear execution time example hope enough highlight crucial role loop invariant loop variant reasoning loop get invariant look like pulled hat fact go way round advocated classic book develop invariant loop together process unfolds naturally nothing mysterious invariant resist quoting thirty year book introduction theory programming language chapter axiomatic semantics also known hoare logic basis idea used discussion made available see exercise starting point series article book explains design program invariant general case search binary aim loop body form value n j x else j end essential get detail right easy get wrong instruction must always decrease variant j increasing decreasing j definition specified j rather j second branch would meet goal transpose directly requiring j would lead impossibility j equal accept must take new value first branch conditional guard test must always interval n follows clause j n part invariant clause satisfied n conditional instruction indeed leaf clause invariant invited check branch conditional also preserve rest invariant policy choosing acceptable conforms scheme two simple choice j lead variant sequential search algorithm book discussed binary search binary search roughly equal average j roughly need integer hence integer division last section reflect lesson draw example practical significance key concept invariant reference note section ew dijkstra discipline programming prentice hall david gries science programming springer byron cook andreas podelski andrey rybalchenko proving program termination communication acm vol may page available bertrand meyer introduction theory programming language prentice hall book print found used eg amazon see next entry electronic version two chapter bertrand meyer axiomatic semantics chapter available note pdf reconstructed old textprocessing system troff figure could recreated missing one day might patience scanning book copy adding unless someone want help also put online caveat chapter notation mathematical basis see page text verbatim except slight adaptation programming notation replacement variable book corresponds j j matter fact prefer original convention book purely matter taste since two rigorously equivalent changed convention program appears autoproof page obvious advantage verify mechanically text extract otherwise exactly book lesson learned journey started succession attempt might felt right fact wrong way giving wrong answer case crashing trying access array outside index interval case looping forever case always case evidencing limit testing never guarantee exercise problem case correct program one work case final version correct able prove correctness online tool understand hope lie behind proof show prove correctness property referred throughout series publication introduction theory programming language jon bentley programming pearl column gries science programming even dijkstra discipline programming noted essence argument appeared different form one bentley communication article changed core concept known long time remain applicable assertion invariant variant others although much better understood today thanks decade theoretical work solidify foundation termination also satisfactory theory practical side however progress momentous considerable engineering gone making sure technique scaled time bentley article binary search typical kind program could proved correct proof proceed manually today tackle much bigger program use tool perform verification choosing binary search example today obvious advantage everyone understand detail construed representative state art today proof system far sophisticated entire operating system example mechanically say software tool proved correct autoproof case major achievement proof correctness entire data structure collection library eiffelbase case challenge much size source line code complexity scope verification involving full range mechanism modern objectoriented programming language class inheritance single multiple polymorphism dynamic binding generic exception handling etc code using sophisticated data structure algorithm involving particular advanced pointer manipulation case progress required advance science engineering side example early work program verification assumed barebones programming language assignment conditionals loop routine much real program use many construct growing ever richer programming language develop cover exception handling autoproof required theoretical modeling construct appeared implementation work generally scaling verification capability small example year ago sophisticated software verified today required considerable effort entire community autoproof example sits top tool stack relying boogie environment microsoft research relying theorem prover many persondecades work make result possible beyond tool concept esssential one loop invariant illustrated final version program noted first article example wellknown expert speaker testing found better way announce video would boring relax going talk loop invariant funny perhaps unfair loop invariant one beautiful concept computer science surprisingly loop invariant application programming concept mathematical induction according great mathematician henri poincaré mathematics rest induction maybe exaggerated maybe would think teaching mathematics without explaining induction teaching programming without explaining loop invariant better illustration accept psychedelic diagram loop problemsolving technique sometimes get solution directly sometimes identify several step solution use sequence b c sometimes find two different way solving problem different case use conditional c else b end sometimes get solution getting closer repeatedly necessarily knowing advance many time advance towards use loop identify often large ie general area know solution lie call area loop invariant solution solution may one satisfy certain condition call exit condition wherever shoot invariant region using appropriate operation call initialization execute many time needed maybe zero first shot lucky operation get u closer goal call loop body guarantee termination must kind upper bound distance goal decreasing time discretely call loop variant explanation illustration hope make idea intuitive key loop invariant figure suggests invariant always generalization goal example binary search many search algorithm sequential search goal find position either x appears sure appears nowhere invariant say interval property either x appears position belonging interval appears nowhere obviously includes goal special case interval length defines single position invariant strong enough devise exit condition end combined invariant give u goal seek solution weak enough devise initialization ensures shooting yellow area easily tuned devise loop body state satifying invariant get u new one closer goal example exit condition simply interval length technically computed result single interval element invariant exit condition get goal want initialization easy since take initial interval whole index range array trivially satisfies invariant loop body simply decrease length interval serve loop variant ensure termination decrease length depends search strategy sequential search iteration decrease length correct although fast binary search decrease half general scheme always applies every loop algorithm characterized invariant invariant may called dna algorithm demonstrate relevance principle colleague furia velder published survey paper acm computing survey describing invariant important algorithm many area computer science search algorithm sorting major algorithm arithmetic long integer addition squaring optimization dynamic programming knapsack levenshteinedit distance computational geometry rotating caliper web page rank find pleasurable rewarding go deeper basis loop algorithm understand invariant like geologist stop admiring mountain get understand came technique inevitable want get program right topic article even putting aside bloch averagecomputation overflow issue started program attempt kind friendlylooking wrong different way could continued fiddling detail following gut feeling fix flaw running test approach reasonable case algorithm covering wellknown small set case work nontrivial algorithm newcomer concept loop invariant sometimes panic fine gave invariant example find invariant loop magic recipe anyone else reason scared understood concept examined enough example enough writing invariant time devising loop come second nature fumbling attempt first section show much alternative try approach reaching final line reading preceded allow thank patience hope rather long chain reflection verification brought new insight fascinating challenge writing correct program reference nadia polikarpova julian tschannen carlo furia fully verified container library proceeding international symposium formal method fm best paper award martin nordio cristiano calcagno peter müller bertrand meyer sound complete program logic eiffel proceeding tool technology objectoriented language system zurich junejuly ed oriol b meyer springer lnbip june boogie page msr see publication information also originally msr opensourced one get access publication information wikipedia page carlo furia bertrand meyer sergey velder loop invariant analysis classification example acm computing survey vol february available dynamic programming form recursion removal turning recursive algorithm iterative one using technique known memoization bottomup computation berry transformation invariant play key role try write day truly elegant illuminating explanation vn f rating vote cast vn f rating vote getting program right nine episode based rating
73,Lobsters,formalmethods,CSE-Formal methods,The Subtle Power of Booleans,https://medium.com/@bellmar/the-subtle-power-of-booleans-e6d5fa2fcc4a,subtle power booleans,subtle power booleans alloy sat solver alloy satisfiability di c example sudoku example zebra problem lars hellstrom paper flock duck kodkod leveraging boolean logic real programming tried model problem load balancer,subtle power booleansprogramming truth statefulnessi like formal specification really understand kind personality curiosity blended absolute raw stubbornnessin quest understand formal specification started learn logic programming first encountered logic programming pierre de lacaze came meetup belonged gave talk prolog fascinated find resource learn use prolog endlessly frustrated every tutorial find stopped building sudoku solver seem relevant anything wanted never looked closely italloy sat solversbut logic programming begin end tool like prolog one formal specification tool like using alloy basically nicer interface top sat satisfiability solver sat solver program look solution satisfy fact much way prolog many different way implementing sat solver post tip iceberg regard write model alloy using markup language defines spec around relationship alloy signature think little bit like object signature inherit parameter used specify connection relationship signature example sig duck member one flock sig flock group set duck spec flock defined set duck duck belongs one flock make spec effective probably want add constraint specify exact nature relationship flock duck like fact duck f dmember fgroup f flock fgroup dmember f f flock lone fgroup clarifies duck think flock flock also duck member vice versa since set empty also add fact tell alloy flock one le lone duckswhen run model alloy convert relational logic boolean logic run sat solver take output solver convert back relational order visualize particularly like alloy use assertion test whether specific state even possible useful bug checking verification run model without assertion explore various state possible given definition spec love flexibilitybut alloy take spec calculate possible state hood truefalse rule alloy producing written conjunctive normal form cnf specific simplified version called dimacs named center discrete mathematics theoretical computer science rutgers university cnf look like p cnf first line header called problem statement hence begin letter p tell sat solver cnf format variable either true false clause three line follow clause number clause variable value positive number mean statement concept variable represents true negative number mean concept false clause must terminated zero especially long clause broken multiple line easier readingin word line read first variable true fifth variable false fourth variable true line read either third variable fourth variable false ands dimacs cnf line line wanted say variable variable must true would write like pretty easy understand easy apply practical programming problem formal specification tool use sat solver cousin smt solver identify possible state violate spec defined constraint check model bug might obvious convert code series variable either true false example sudokuturns reason sudoku hello world logic programming actually pretty good demonstration complex problem converted truefalse clausesif familiar sudoku puzzle game must fill box number value appear per row per column per section game board seeded starting value starting value easier puzzlean example sudoku puzzleif think box variable holding number grid would give u variable except express truefalse actually need variable potential state assigned box variable resulting set instruction well clausesthis one box nine possible number make sense think dealing card box row sudoku one nine card first box get card time come back deal second card card deal card eight box row third card box one receives deck therefore variable represents first box value variable represents first box value number variable truefalse statement represent matter unique predictable enough map back box belong value representanother way could represent joining row position column position value one number case row would become case clause say first box first row number one box filled two number time clause defining box potential value need series shorter clause establish one value true value must false expressed head head box value value either value false value false false either value false value three possible value also duplicate number across row column need repeat process every potential value first row puzzle look like back dealing card box metaphor card first card box first row puzzle get represent number one first clause say anyone box value one shorter clause follow say one box valuesame thing column first box first row get card first box second row get card first column look like section exact thing sudoku sudoku seed value narrowing field possible solution easy represent since single positive value tell sat solver first row puzzle sixth box value fourth box value eightonce full cnf written sat solver consider possible legal combination produce solutionexample zebra problemyou probably encountered zebra problem five housesthe englishman life red housethe spaniard owns dogcoffee drunk green housethe ukrainian drink teathe green house immediately right ivory housethe old gold smoker owns snailskools smoked yellow housemilk drunk middle housethe norwegian life first housethe man smoke chesterfield life house next man foxkools smoked house next house horse keptthe lucky strike smoker drink orange juicethe japanese smoke parliamentsthe norwegian life next blue housenow drink water owns zebra like sudoku series potential state five house nationality ownerthe color housewhat owner drinkswhat owner smokesthe owner petmost statement broken clause pretty easily example cnf would say englishman life red house would say either owner house englishman house red effectively mean thing statement bit different know statement green house immediately right ivory house last house ivory first house green milk drunk middle house similar translation middle house house owner house drink milkthis well good encode information series truefalse variable unlike sudoku needed map possible state across box zebra puzzle five box piece informationin dimacs one include comment starting line c mean include mapping concept variable lose track possible state assignedit look something like c englishman c red c englishman c red c englishman c red c englishman c red c englishman c red c spaniard c dog c spaniard c dog full dimacs encoding see lars hellstrom paper warning pdf download automatically couple state know impossible puzzle example know first house green given mapping would state problem statement list state know either true false p cnf green ivory milk norwegian norwegian norwegian included comment make snippet easier make sense clause probably bother point set much like sudoku house red house one house red house way box row value one box row starting look familiar little extra information sudoku know house red house know house englishman house color red need represent dimacs c either englishman house house either englishman house house either englishman house house either englishman house house either englishman house house represented possible state able feed dimacs cnf file sat solver solve puzzle usflock duckslet go back simple model duck flocksfun fact alloy export model cnf file going option solver output cnf file tell alloy many duck many flock default give u long cnf file many variable really make sense instead tweak spec make super simple sig duck sig flock group one duck pred model run model exactly flock duckfirst thing done remove circular relationship flock duck removed rule specified model one duck one flockthere couple different potential state piece going write cnf might think way c duckc flockc duck flockwhen look cnf output alloy give u see p cnf alloy map thing variable way read flock duck duck flock line flock true duck flock run one possible solution one flock one duck itbut constructing cnf problem get complicated larger robust model becomes happens take simple model change specification two flock double cnf p cnf changed relationship duck flock added new state existing state encoded exact way top state easy reason find ran alloy told model flock one duck say one duck two different flock time since variable represent state numerical value different tool produce different cnfs depending calculate universe possible state alloy example convert thing kodkod formula exporting cnf kodkod build matrix possible value based relationship signature one another even simple spec get pretty complicated two week reading source code playing around breakpoints eclipse reading published paper able translate cnf output confidence representing alloykodkod internal process correctly bright side paper put mit community readable c paper encountered interested getting deeper internals would recommend leveraging boolean logic real programmingpart reason tool like alloy exist help facilitate using sat solver system design turning program architecture specification useful think thing term state change rather step algorithm solve sudoku zebra puzzle assigning various possible state variable defining constraint filter state possible certain condition englishman life red house therefore house red state englishman life use step convert program written imperative programming style something reasoned boolean logic make look like state machine define change state program data instance object etc whenhow changesfigure state impossible different state simply undesirable remember maybes booleans early experiment formal specification tried model problem load balancer struggled looking represent state knew possible model failureswrite spec demonstrate impossible state impossiblerun model checker prove itin experience lot value thought experiment writing spec often find confronting question expected behavior system know answer trying figure answer never fails trigger interesting conversation engineering team
74,Lobsters,formalmethods,CSE-Formal methods,A Modular Scheme for Deadlock Prevention in an Object-Oriented Programming Model (2010),http://se.inf.ethz.ch/people/west/deadlock-icfem-2010.pdf,modular scheme deadlock prevention objectoriented programming model,,obj length filter flatedecode stream n l
75,Lobsters,formalmethods,CSE-Formal methods,A Study of Clight and its Semantics,https://soap.coffee/~lthms/posts/ClightIntroduction.html,study clight semantics,study clight semantics installing compcert problem statement proof walkthrough conclusion history website repository installing compcert problem statement proof walkthrough conclusion compcert documentation vst,study clight semantics compcert certified c compiler come proof semantics preservation mean following semantics c code write preserved compcert compilation pass generated machine code interested compcert quite time ultimately challenged study clight semantics writeup result challenge written progressing installing compcert problem statement proof walkthrough conclusion revision revision table automatically generated git history website repository change description may always useful consult source file current version prepare introduction r feed add missing revision table add new post clight semantics installing compcert compcert added opam consequence easily used library coq development typical use case project produce clight highlevel ast compcert benefit compcert proof installing compcert easy opam install compcert opam terminates compcert namespace becomes available addition several binary available correctly set path environment variable instance clightgen take c file argument generates coq file contains clight generated compcert problem statement goal first writeup prove c function int add int x int return x return expected result x clightgen tool generates among thing following ast note modified order improve readability compcert require import clight ctypes clightdefs ast coqlib cop definition x ident positive definition ident positive definition fadd function fnreturn tint fncallconv ccdefault fnparams x tint tint fnvars fntemps fnbody sreturn ebinop oadd etempvar x tint etempvar tint tint field function type pretty selfexplanatory often case asts far tell identifier clight positive index fnbody field type statement particular constructor sreturn whose argument type option expr statement expr look like two main type study predicate allow reasoning execution function step step hence name appears clightgen generates clight term using function call convention encoded reason complete execution appears use star smallstep module basically trace step semantics defined predicate live prop allow reasoning statetransformation state either function call given list argument continuation function return result continuation statement execution within function import several compcert module manipulate value case bounded integer compcert require import value integer import int putting everything together lemma want prove fadd following lemma faddspec env genv eventstrace memorymemmem v val x z int trace smallstepstar env callstate ctypesinternal fadd vint x vint kstop returnstate vint z kstop z add x proof walkthrough introduce custom inversion tactic cleanup addition perform inversion ltac smartinv h inversion h subst cbn clear h try prove lemma proof first destruct trace rename generated hypothesis order improve readability note smartinv trace rename h hstep rename hstar generates two hypothesis hstep env callstate ctypesinternal fadd vint x vint kstop hstar smallstepstar env returnstate vint z kstop word callstate fadd returnstate first step callstate state succession step go returnstate consider single step order determine actual value among thing use smartinv hstep perform renaming smartinv hstep rename le tmpenv rename e cenv rename fentry produce two effect first new hypothesis added context fentry env fadd vint x vint cenv tmpenv hstar hypothesis updated precise value precisely become state fadd sreturn ebinop oadd etempvar x tint etempvar tint tint kstop cenv tmpenv using approach uncover next step smartinv hstar rename h hstep rename hstar resulting hypothesis hstep env state fadd sreturn ebinop oadd etempvar x tint etempvar tint tint kstop cenv tmpenv hstar smallstepstar env returnstate vint z kstop inversion hstep used learn resulting smartinv hstep rename ev rename re rename resequ rename memequ generated hypothesis become re val ev evalexpr env cenv tmpenv ebinop oadd etempvar x tint etempvar tint tint re resequ semcast re tint tint v memequ memorymemfreelist blocksofenv env cenv understanding hypothesis following expression x evaluated using cenv environment know thanks binding value x result stored re re cast tint value act result fadd hstar hypothesis interesting hstar smallstepstar env returnstate v kstop returnstate vint z kstop clear end execution fadd even coq generates two subgoals second one relevant easy discard smartinv hstar smartinv h making good progress focus attention ev hypothesis concern evaluation x expression simplify bit smartinv ev smartinv h rename fetchx rename fetchy rename addop shortterm hypothesis fetchx fetchy important fetchx evalexpr env cenv tmpenv etempvar x tint fetchy evalexpr env cenv tmpenv etempvar tint current challenge face prove know value point look fentry starting look familiar smartinv renaming etc smartinv fentry clear h clear clear smartinv subst rename allocs almost done simplify much possible fetchx fetchy time smartinv tactic generates two suboals first one relevant second one discarded smartinv fetchx inversion h smartinv smartinv fetchy inversion h smartinv know value operand add two relevant hypothesis need consider next addop resequ easy read addop sembinarith fun signedness integersint vint add fun signedness vlong fun floatsfloat vfloat floatsfloatadd fun vsingle tint tint re addop addition vint x vint result re resequ semcast re tint tint vint z resequ equation say result fadd re cast tint value surprisingly neither addop resequ reduced digging found rely basically opaque far reduction strategy concerned probably elegant idiomatic way deal issue working approach unfold appears use lemma replace value false unfold sembinarith cbn unfold semcast cbn rewrite auto simplify addop resequ allows u conclude smartinv addop smartinv resequ reflexivity qed conclusion main difficulty exercise opaqueness surprising since mean struggle technical conceptual contrary definition clight easy understand compcert documentation pleasant read understanding clight semantics interesting working language want translate machine code however proving functional property given c snippet using compcert quickly become cumbersome perspective vst project interesting main purpose provide tool reason clight program easily
76,Lobsters,formalmethods,CSE-Formal methods,Let's Prove Leftpad,https://github.com/hwayne/lets-prove-leftpad,let prove leftpad,let prove leftpad provablycorrect provably correct code proof leftpad proving leftpad specification want contribute read contribution guideline plug website twitter,let prove leftpad repository provablycorrect version leftpad provablycorrect provably correct code code totally guarantee say providing proof computer check proof wrong code wo nt compile compare something like testing even test function different input still nt know sure test pas proof though know function work input regardless whether try thousand ten trillion different test case proving code correct really really powerful also mindbogglingly hard programmer nt sampler different tool use prove code correct standardized proof leftpad leftpad leftpad function take character length string pad string length pad adding character left adding padding left leftpad leftpad foo foo leftpad foo foo proving leftpad funny leftpad great demo different proof technique idea simple implementation simple specification actually formally want surprisingly tricky specifically need prove thing leftpad length output max n len str prefix output padding character nothing padding character suffix output original string proof leftpad going small enough mostly grokkable formal method outsider complex enough differentiate way prove code correct want contribute love please read contribution guideline submit favorite proof plug want learn formal method shout cloud website twitter
77,Lobsters,formalmethods,CSE-Formal methods,Sterling: a web-based visualizer for Alloy,https://sterling-js.github.io/,sterling webbased visualizer alloy,welcome alloy news react blueprint tour downloads,welcome sterling webbased visualizer alloy providing enhanced graph table view effort make instance easier understand included custom build alloy downloaded news mar sterling release available version showcase brand new user interface built using react blueprint close functionality existing alloy visualizer major exception read tour aside overhauled interface notable change previous version sterling lack tree view removal intentional decision provide functionality nt already present alloy visualizer furthermore snapshot layout previously used graph view longer available graph rendering library entirely replaced yet support compound node upcoming release head downloads page sterling mar demo sterling available clicking link navigation bar feature available demo evaluator ability generate next solution using next button everything else identical sterling packaged custom alloy build download jan sterling release available version includes evaluator support along ability add evaluated expression graph view graph view exclusively us forcedirected layout node locked place using ctrlclick double click ctrlenter evaluating expression result graph automatically expression evaluates set
78,Lobsters,formalmethods,CSE-Formal methods,A walkthrough tutorial of TLA+ and its tools: analyzing a blocking queue,https://github.com/lemmy/BlockingQueue,walkthrough tutorial tla tool analyzing blocking queue,blockingqueue example debugging java model checker michel charpentier challenge git commit twitter lamport tla page refinement fair prove blockingqueuefair implement blockingqueuesplit regression tlaps two issue build development refinement fair prove typeinv inductive invariant blockingqueuefair refinement fair refine blockingqueue blockingqueuefair spec starvation weak fairness defined put fair starvation starvation individual producer starvation refactor specification move action enabling condition put get refinement implement blockingqueuesplit spec java c refinement prove refinement mapping blockingqueuesplit proof rule refinement section refinement refine blockingqueue blockingqueuesplit secret power refinement mapping temporal logic action refinement create blockingqueuesplit two set waitp waitc zermelofraenkel trace validate long execution spec sany serialize app output ioutils module coverage trace validate implementation execution spec ron pressler verifying software trace formal specification tla tlc trace print partial implementation execution java flight recorder tlaps codomain buffer relevant proof proving safety property tlaps tlaps prof deadlockfreedom tlaps validating inductive invariant candidate discussion group tlaps finding inductive invariant tlaps proof typeinv inductive tlaps bugfix logically two mutexes bugfix always notify waiting thread challenge bugfix nondeterministically notify waiting thread animation add visualization errortraces blockingqueuecfg http blockingqueuecfg spectetla blockingqueueanimtla http http animation add prophecy variable simplify animation http lamportazurewebsitesnetpubsauxiliarypdf http continue infer inequation system deadlock free r plot data correlate ggcorrplot continue declare producer consumer symmetry set http tlamsrinriainriafrtlatoolboxdocmodelmodelvalueshtml continue convert constant variable limitation modelchecking breadthfirst search search mode better support checking different constant value add invariant detect deadlock challenge debug state graph configuration communitymodules state graph configuration state graph minimum configuration java c implementation configuration ide setup nothing see,blockingqueue tutorialstyle talk week debugging save hour tla inspiration tutorial definitive background reading material spoiler example debugging java model checker michel charpentier believe go back challenge wiki git commit introduces new tla concept go back first commit follow along please note especially create pr git history rewritten frequently stay linear click either one button launch zeroinstall ide give tla specification language try tutorial work progress chapter added future meantime feel free open issue question clarification recommendation also reach twitter basic tla learning material found lamport tla page refinement fair prove blockingqueuefair implement blockingqueuesplit proof showing blockingqueuesplit implement blockingqueuesplit two lemma show sometimes necessary prove simpler fact first prove main theorem compared previous proof one far involved realistically reflects effort require write proof refinement proof took approximately three week three week quite investment considering correctness refinement seems straight forward first place however three week also includes work detect help fix regression tlaps identifying two toolbox issue familiarizing tlaps build development process refinement fair prove typeinv inductive invariant blockingqueuefair first step proving blockingqueuefair refines blockingqueuesplit prove inductiveness typeinv refinement fair refine blockingqueue blockingqueuefair spec blockingqueuefair refines blockingqueuesplit notifying longestwaiting producer consumer thread instead thread waitc waitp us ordered sequence place unordered set refinement mapping straight forward blockingqueuesplit waitc waitp refined sequence waitseqc waitseqp respectively tlc checked refinement mapping finite model configuration starvation weak fairness defined put defining next weakly fair make sure nextstep eventually taken however next disjunct put get subactions fairness distribute since want producer eventually take step specify weak fairness level put subactions unfortunately producer still starve checking temporal property complete state space total distinct state error temporal property violated error following behavior constitutes counterexample state initial predicate buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset back state next line col line col module blockingqueue finished checking temporal property state generated distinct state found state left queue starvation starvation individual producer individual producer consumer thread starve nt specified fair except weak fairness next avoid trivial counterexample stuttering init step introduces concept liveness fairness expressed tla checking temporal property complete state space total distinct state error temporal property violated error following behavior constitutes counterexample state initial predicate buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset back state next line col line col module blockingqueue starvation refactor specification move action enabling condition put get far spec written way put get subactions next permanently enabled ie p producer enabled put p p invariant spec vice versa consumer nextstate relation e runningthreads producer took care scheduling enabled producer refactor nextstate relation push enabling condition subactions change p producer enabled put p p longer invariant see trace subsequent step show reason refactored spec note however refactoring change set behavior defined spec invariant putenabled violated behavior point initial predicate buffer waitset put line col line col module blockingqueue buffer waitset put line col line col module blockingqueue buffer waitset refinement implement blockingqueuesplit spec java c knowing blockingqueuesplit refines blockingqueue thus deadlockfree shift attention java c program instead java synchronized statement implement blockingqueuesplit help lowlevel synchronization primitive javautilconcurrentlocksreentrantlock javautilconcurrentlockscondition executing new program couple hour configuration reveals deadlock broken version program deadlocked within second fact java arrayblockingqueue similar implementation silence concern put program production refinement prove refinement mapping blockingqueuesplit tlc checked refinement mapping finite modelparticular configuration give blockingqueuesplit sufficient confidence refinement mapping correct fact refinement mapping straight forward indicates tlaps prove likely straight forward let give academic u prove correctness refinement mapping prove blockingqueuesplit implement blockingqueue first prove typeinv inductive know invariance proof rule proven lemma reuse proof rule refinement section prove theorem implement spec spec refinement refine blockingqueue blockingqueuesplit spec blockingqueuesplittla blockingqueuetla look almost identical except blockingqueuesplittla one variable slightly different definition put get wait notifyother however logical connection two spec albeit spec blockingqueuesplit considered implementation blockingqueue tla secret power come play earlier step wrote theorem deadlockfreedom spec invariant state blockingqueue satisfies invariant invariant safety property however tla distinguish property machine spec formula power mean may also say spec defined blockingqueuesplit satisfiesimplements machine spec blockingqueue stating theorem implement spec blockingqueue spec almost done however since blockingqueuesplit differs slightly blockingqueue provide refinement mapping relates lowlevel spec highlevel spec case blockingqueuesplit fortunately straight forward union waitc waitp map waitset verify correctness refinement mapping finite model tlc time though tlc check invariant state formula temporal property blockingqueue spec sidenote tla typo read lamport temporal logic action understand refinement create blockingqueuesplit two set waitp waitc bugfix exploited power zermelofraenkel set theory get away without changing waitset two disjoint set one waiting producer one waiting consumer call waitp waitc respectively realworld program however elegance math likely inefficient program would indeed maintain waitp waitp avoid intersecting producer consumer waitset probably allocates temporary memory actual project would probably spend minute analyzing separating waitset waitp waitc introduce deadlock luxury time thus write new spec blockingqueuesplittla fortunately blockingqueuesplittla identical blockingqueuetla copy paste blockingqueue modify notifyother trace validate long execution spec previous step showed trace validation probabilistic guarantee finding violation highlevel spec thus want increase chance checking long many trace however copying long trace spec nuisance also slows sany step introduces serialize app output format tlc deserialize efficiently help ioutils module java xx startflightrecordingdisktrue dumponexittrue filenameapp date jfr cp implsrc orgkuppeapp kill process appxxxxxxxjfr flight recording created previous command appxxxxxxxbin serialized app output java cp implsrc appxxxxxxxjfr app date bin longer trace note change blockingqueuetracetla lucky tlc find violation java cp communitymodulesjar blockingqueuetrace version day month rev warning please run java vm executes tlc throughput optimized garbage collector passing xx useparallelgc property use nowarning option disable warning running breadthfirst search modelchecking fp seed worker core heap offheap memory pid linux azul system inc msbdiskfpset diskstatequeue parsing file homemarkussrctlaspecsmodelstutorialsblockingqueuetlablockingqueuetracetla parsing file tmptlctla parsing file tmpsequencestla parsing file tmpnaturalstla parsing file tmpfinitesetstla parsing file tmpioutilstla parsing file homemarkussrctlaspecsmodelstutorialsblockingqueuetlablockingqueuetla parsing file homemarkussrctlaspecsmodelstutorialsblockingqueuetlatlapstla semantic processing module natural semantic processing module sequence semantic processing module finitesets semantic processing module tlc semantic processing module ioutils semantic processing module tlaps semantic processing module blockingqueue semantic processing module blockingqueuetrace starting failed match tlcext asserterror operator override jar file homemarkussrctlaspecsmodelstutorialsblockingqueuetlacommunitymodulesjar signature java method public static synchronized int module failed match tlcext picksuccessor operator override jar file homemarkussrctlaspecsmodelstutorialsblockingqueuetlacommunitymodulesjar signature java method public static synchronized int module loading iodeserialize operator override signature java method public static final throw javaioioexception loading ioserialize operator override signature java method public static final throw javaioioexception impliedtemporal checking satisfiability problem branch computing initial state finished computing initial state distinct state generated error action property line col line col module blockingqueue violated error behavior point state initial predicate buffer waitset state waitc line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state get line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state get line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state waitp line col line col module blockingqueuetrace buffer waitset state get line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state waitp line col line col module blockingqueuetrace buffer waitset state waitp line col line col module blockingqueuetrace buffer waitset state get line col line col module blockingqueuetrace buffer waitset state put line col line col module blockingqueuetrace buffer waitset state generated distinct state found state left queue depth complete state graph search average outdegree complete state graph minimum maximum percentile finished convince tlc indeed reported violation highlevel spec due singlemutex bug rerunning tlc twomutex fix temporarily reverted tlc report error diff git ablockingqueuetla bblockingqueuetla index ablockingqueuetla bblockingqueuetla var buffer waitset runningthreads producer cup consumer waitset notifyother let producer waitset producer else waitset consumer let waitset e x waitset waitset x else unchanged waitset real project trace validation provides confidence implementation faithfully implement highlevel tla spec want check many trace possible however never proof implementation correctly implement spec note coverage highlevel spec similar code coverage measured unit test indicates extent trace explore state space trace validate implementation execution spec top blockingqueuetrace spec defines trace operator execution printed stdout previous step rest spec follows ron pressler method refinement mapping described verifying software trace formal specification tla tlc comment blockingqueuetrace discus nondeterminism compensates incomplete actual value buffer application log checking spec show tlc found distinct state even though trace state long nondeterminism deliberately introduced surprisingly however implementation trace violate highlevel spec blockingqueue java cp communitymodulesjar blockingqueuetrace version day month rev warning please run java vm executes tlc throughput optimized garbage collector passing xx useparallelgc property use nowarning option disable warning running breadthfirst search modelchecking fp seed worker core heap offheap memory pid linux azul system inc msbdiskfpset diskstatequeue parsing file homemarkussrctlaspecsmodelstutorialsblockingqueuetlablockingqueuetracetla parsing file tmptlctla parsing file tmpsequencestla parsing file tmpnaturalstla parsing file tmpfinitesetstla parsing file homemarkussrctlaspecsmodelstutorialsblockingqueuetlablockingqueuetla parsing file homemarkussrctlaspecsmodelstutorialsblockingqueuetlatlapstla semantic processing module natural semantic processing module sequence semantic processing module finitesets semantic processing module tlc semantic processing module tlaps semantic processing module blockingqueue semantic processing module blockingqueuetrace starting failed match tlcext asserterror operator override jar file homemarkussrctlaspecsmodelstutorialsblockingqueuetlacommunitymodulesjar signature java method public static synchronized int module failed match tlcext picksuccessor operator override jar file homemarkussrctlaspecsmodelstutorialsblockingqueuetlacommunitymodulesjar signature java method public static synchronized int module warning failed match iodeserialize operator override ioutils signature public static final throw javaioioexception module warning failed match ioserialize operator override ioutils signature public static final throw javaioioexception module impliedtemporal checking satisfiability problem branch computing initial state finished computing initial state distinct state generated progress state generated distinct state found state left queue checking temporal property complete state space total distinct state finished checking temporal property model checking completed error found estimate probability tlc check reachable state two distinct state fingerprint calculated optimistic val state generated distinct state found state left queue depth complete state graph search average outdegree complete state graph minimum maximum percentile finished trace print partial implementation execution finished proof deadlock fix shift attention java implementation assume still deadlock however apply fix two mutexes use tlc check implementation allows execution violate blockingqueue spec word check implementation correctly implement tla spec know print execution stdout help lowoverhead java flight recorder consider powerful logging framework however plain logging stdout highprecision timestamp would worked activate jfr run app java xx startflightrecordingdisktrue dumponexittrue filenameapp date jfr cp implsrc orgkuppeapp kill process second flight recording created previous command java cp implsrc op w waiter c op e op e op op e op op op e op e op op op e op e op e op op op e op e op w waiter p op op e important observe log statement log operation deqenqwait thread call wait log contain size content buffer thread get notified thread executes jfr requires java newer tlaps codomain buffer relevant proof need say anything codomain buffer proof enqueued dequeued relevance regard deadlock freedom however iinv longer completely specifies function buffer thus mciinv added part lamport paper proving safety property exercise finding proving inductive invariant tlaps tlaps prof deadlockfreedom tlaps problem proving deadlockfreedom tlaps validating inductive invariant candidate finding inductive invariant hard fortunately use tlc little little find validate potential inductive invariant deeper thinking play though note rewrite last conjunct typeinv subset check discussion group technical reason also redefine seq operator definition sequence standard module enumerable redefine seq blockingqueuetla vscode extension nt model editor yet generally though would model taint actual spec tlaps finding inductive invariant previous step easy straight forward come hard part finding inductive invariant implies deadlock freedom unfortunately naive approach work invariant inductive invariant nextvars invariant hold eg buffer wait var step assum unreachable state runnintthreads successor state runningthreads waitset producer cup consumer similar argument applies len buffer bufcapacity wait var step tlaps proof typeinv inductive recall deadlock originally happened iff bufcapacity cardinality producer cup consumer know solution two mutexes nt similar flaw different inequation modelchecking world wo nt give u absolute confidence domain producer consumer bufcapacity infinite prove solution two mutexes correct configuration matter value chose producer consumer bufcapacity use tlaps take first step towards invariance proof deadlock freedom proving typeinv inductive screencast tlaps first check qed step step finally toplevel theorem note step following one require tla toolbox tlaps nt toolbox tlaps skip part tlapstla added repository avoid parser error bugfix logically two mutexes remove notifyall instead introduce two mutexes one producer one consumer consumer notify subset producer waiting producer mutex vice versa producer spec introduce two mutexes instead pick right thread type set waiting thread fix completely solves bug fully satisfied yet bugfix always notify waiting thread always notify waiting thread instead nondeterministically selected one fix deadlock bug price load spike suspended thread wake bonus exercise check necessary notify waiting thread put get note proposed solution bug challenge extreme programming wiki best knowledge single comment mention one notifyall suffices neither anybody mention elegant fix performance implication see next step bugfix nondeterministically notify waiting thread nondeterministically notify waiting thread attempt fix deadlock situation attempt fails might end waking wrong thread animation add visualization errortraces trace procs con buffer length minimal length trace show quickly issue becomes incomprehensible b length trace increase state thread tlc take sec machine check animation created toolbox check model blockingqueuecfg set animation trace expression errortrace console hit explore exportcopy resulting trace clipboard paste http without toolbox something similar check model blockingqueuecfg java jar deadlock generatespecte blockingqueue generatespecte cause tlc generate spectetlacfg state trace expression animation blockingqueueanimtla spectetla download http check specte java jar specte copy trace http minor format change needed animation add prophecy variable simplify animation nextstate relation restated predict value thread successor state use prophecy variable following commit come animation following commit skipped unless interested advanced concept prophecy http lamportazurewebsitesnetpubsauxiliarypdf animation http continue infer inequation system deadlock free based scaffolding two previous step run tlc continue option stop state space exploration violation invariant found word ask tlc find violation one shortest one breadthfirst search guarantee tlc find shortest counterexample first java jar deadlock continue blockingqueue grep invvio sort uniq invvio invvio invvio invvio invvio invvio invvio invvio invvio invvio invvio invvio little bit bashery trim tlc output squinting notice blockingqueue deadlock free iff bufcapacity cardinality producer cup consumer simple r plot make even visible indicates configuration deadlock collecting even data correlate length error trace constant cardinality producer cardinality consumer bufcapacity cardinality producer cup consumer ggcorrplot continue declare producer consumer symmetry set set producer consumer symmetry set blockingqueue specification meaning permuting element set change whether behavior satisfies behavior spec tlc take advantage reduce number distinct state examine note tlc check set declare symmetry set really one declare set symmetry set nt tlc fail find error otherwise would find expression symmetric set interchanging two value change value expression expression symmetric set example interchanging expression produce equal original expression declare set model value symmetry set specification property checking symmetric substitution constant defined operator specified model made example declare symmetry set model substitute constant tla operator produce nonsymmetric expression applied symmetric expression choose example expression choose x true symmetric symmetry set used checking liveness property make tlc fail find error report nonexistent error toolbox add warning model try description step originates http tlamsrinriainriafrtlatoolboxdocmodelmodelvalueshtml continue convert constant variable section limitation modelchecking michel charpentier point blockingqueue deadlockfree configuration model checking helpful finding underlying mathematical function observation true general ask tlc compute set configuration blockingqueue deadlockfree least ask find many data point possible data point try inferlearn function step rewrite blockingqueue check multiple configuration instead single one note rewrite increase complete state space distinct state tlc continues find behavior shown previous step tlc default explores state space breadthfirst search search mode guarantee always find shortest counterexample tlc run worker n n return shortest counterexample high probability hope better support checking different constant value future add invariant detect deadlock add invariant detect deadlock typeinv tlc find deadlock configuration see well one matching java app error invariant invariant violated error behavior point state initial predicate buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset state next line col line col module blockingqueue buffer waitset note java app usually deadlock produced thousand line log statement considerably longer error trace make difficult understand root cause deadlock config c program high chance deadlock minute couple million cycle consumer loop sidenote compare complexity behavior described challenge extreme programming wiki configuration tla behavior explanation wiki requires step whereas tlc already find deadlock state two state invariant invariant violated behavior point initial predicate buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset next line col line col module blockingqueue buffer waitset debug state graph configuration previous step looked graphical representation state graph help tlcext picksuccessor build u debugger study state graph interactively learn configuration two deadlock state communitymodules release added tlc commandline java cp communitymodulesjar deadlock blockingqueue note tlc continue flag would also worked find deadlock state state graph configuration slightly larger configuration visually spot deadlock blockingqueuedebugtlacfg show interactively explore state graph configuration tlc combination graphviz xdot java jar deadlock dump dot snapshot blockingqueuedebug state graph minimum configuration initial tla spec model existing java code bug shortcoming model us minimal parameter producer consumer buffer size one possible tlc generates state graph java jar deadlock dump dot blockingqueue visually verify deadlock possible configuration java c implementation configuration legacy java code bug shortcoming point tutorial know code exhibit deadlock nt know play game universe nondeterminism launch java app java cp implsrc orgkuppeapp background follow along tutorial java app deadlock finish tutorial universe win caffine among u implproducerconsumerc c implementation blocking buffer sans logging ide setup nothing see add ide setup vscode online gitpodio
79,Lobsters,formalmethods,CSE-Formal methods,Scaling symbolic evaluation for automated verification of systems code with Serval,https://unsat.cs.washington.edu/papers/nelson-serval.pdf,scaling symbolic evaluation automated verification system code serval,,obj length filter flatedecode stream p jbd c e endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڭ ql w p c h e k kz b g j h voהw c j u ƕ nr b nt r wv g stream b n p e b r mղ x sgwlf faj xq q ɴ e ӭ c ȫ stream l b w z ˋey nu n v k b g hz b f endstream endobj obj length filter flatedecode stream p
80,Lobsters,formalmethods,CSE-Formal methods,The Fumble Programmer (2018),https://proteancode.com/wp-content/uploads/2018/02/the_fumble_programmer.pdf,fumble programmer,,obj length r filter flatedecode stream އ ȳ r j ǌiu f h ir x v nb l w hە z jk xh w q dt q vk b endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text colorspace r font r r r r r r endobj obj length r n alternate devicergb filter flatedecode stream vdf c n z v l r dgry j e e n c ёl q wt w endstream endobj obj endobj obj iccbased r endobj obj length r filter flatedecode stream v p w ü ai f vw f e ѳ nh ի uuf oes q sn n c
81,Lobsters,formalmethods,CSE-Formal methods,How to check Monocypher by CompCert,https://git.envs.net/mpech/tankf33der/src/branch/master/compcert.md,check monocypher compcert,march get opam ready compile install try compile mode try interp mode,march let write note check monocypher compcert monocypher compcert get opam ready opam update opam upgrade eval opam env opam switch opam switch create eval opam env opam install opam install compile install already ocampopam ecosystem installed updated eval opam env cd wget http tar zxvf mkdir p cd configure prefix make j make install export path path ccomp version compcert c verified compiler version try compile mode cd monocypher make clean ccomp testout wall fall isrc isrcoptional teststestc testsutilsc srcmonocypherc testout test ok make clean try interp mode cd monocypher make clean bash testsformalanalysissh cd testsformalanalysis cat monocypherc utilsc testc mikec ccomp interp mikec warning redefined define min max sizet min max note location previous definition define start end fort sizet start end file included warning redefined define start end sizet start end note location previous definition define min max sizet min max error redefinition error redefinition error redefinition error detected fix error comment add code end mikec file int memcmp const void const void sizet count register const unsigned char const unsigned char register const unsigned char const unsigned char count return return void memcpy void restrict dest const void restrict src sizet n char csrc char src char cdest char dest int n cdest csrc function main end file comment test call uncomment one one run ccomp interp quiet mikec every test elliptic fat one key ram create vectorsh test rm rf monocyphertestsformalanalysis mike cool
82,Lobsters,formalmethods,CSE-Formal methods,The 25 most recommended programming books of all-time,https://www.daolf.com/posts/best-programming-books/,recommended programming book alltime,full result repo python programming,countless list internet claiming list mustread programming book seemed list always recommended book minus two three odd choicesfinding good ressources learning programming always tricky everyone opinion book best learn say french taste argued though would interesting trust wisdom crown find book appeared programming listsif want jump right result go take look full result want learn methodology bear simply asked google query like programming variation scrapped page using scrapingbee web scraping api working deduplicated link ended nearly link using title page also able quickly discard list focused one particular technology platformlist focused one particular yearlist focused free booksquora reddit threadsi ended almost html file went opening file browser open chrome inspector found wrote cs selector matching book title article took around almost second per pagethis also allowed discard even nonrelevant page discarded lot end compiled around list oneat moment big json file referencing html page previously scrapped cs selectorusing python beautiful soup extracted every text inside dom element matched cs selector ended huge list book usable without postprocessingto find quoted programming book needed normalize resultsi play different variation like title author title author title subtitle title even one containing edition numberand quite bit manual cleaningmy list looked like easy compute recommended book find data used process list repo take look list order might surprise definition must heard book alreadya additional thing learned making list martin fowler steve mcconnell author several book listcracking code interview recent book list released programming john zelle cited book focused one language would taken accounti hope enjoyed article
83,Lobsters,formalmethods,CSE-Formal methods,Gagallium : Formal proof and analysis of an incremental cycle detection algorithm,http://gallium.inria.fr/blog/incremental-cycle-detection/,gagallium formal proof analysis incremental cycle detection algorithm,published bender fineman gilbert tarjan unionfind data structure http http gitlabinriafragueneauincrementalcycles,part phd gallium working formally proving ocaml program using coq precisely focus proving program functionally correct always compute right result also expected amount time word interested formally verifying asymptotic complexity ocaml program blogpost happy report latest endeavour verification correctness amortized complexity stateofthe art incremental cycle detection algorithm joint work jacqueshenri jourdan advisor pottier arthur initial motivation work come implementation coq specifically efficiently checking consistency universe constraint result typechecking phase difficult problem seen incremental cycle detection problem year ago jacqueshenri reimplemented part coq responsible following stateoftheart algorithm published bender fineman gilbert tarjan prove using algorithm adding edge graph edge n node ensuring addition graph remains acyclic amortized asymptotic complexity common case graph sparse enough equivalent implementation resulted nice speedup practice easy convince oneself indeed right asymptotic complexity case word amortized analysis required establish bound paper quite subtle instance relies parameter computed runtime look quite magical first glance work presenting try untangle mystery give formally verified ocaml implemention slightly modified incremental cycle detection algorithm bender et alâ prove correct also satisfies expected complexity bound note yet exact algorithm currently part implementation still important milestone way coq implement variant bender et alâ additionally maintains believe could implemented verified modular fashion combining algorithm present unionfind data structure draft currently submission link ocaml code coq proof http http gitlabinriafragueneauincrementalcycles exploit separation logic time credit verify correctness worstcase amortized asymptotic complexity stateoftheart incremental cycle detection algorithm happy reading
84,Lobsters,formalmethods,CSE-Formal methods,Agda vs. Coq vs. Idris,https://whatisrt.github.io/dependent-types/2020/02/18/agda-vs-coq-vs-idris.html,agda v coq v idris,programming language feature coqio proof assistant feature equation library tooling reddit thread,written anything mostly due paper syntactic metaprogramming close finished remaining edits terrify right thought write thought topic hope useful someone let prefix couple word experience include lean time writing roughly equal experience three language named title written metacedille agda used coq verification haskell blockchain code idris statebox various thing reason want talk much lean much experience unfinished say seen lean compete much coq agda idris choose coq reading probably need consider lean would choose coq however advise seriously consider lean well choose lean simply support quotient though claim somewhat disingenuous language support quotient way lean see example consider different category language compete give good way compare thing care lot thing said language feel already long comparison programming language feature agda haskelllike syntax powerful mixfix notation compiles haskell j nice ffi coq ocamllike syntax recursive notation export large variety language idris haskelllike syntax c j ffi support type class sometimes different name general everything might expect haskelllike language change syntax used writing haskell code rather quick get started caveat first coq natively support io external tool like coqio use tried say much agda idris io monad builtin agda implementation missing function would expect haskell ffi give easy access every haskell function want also issue termination checking nonterminating function allow produce member empty type prof false statement function language terminating default enforced termination checker find obviously terminating function experience maybe one ten function type prove function terminates enable nontermination also similar issue datatype definition universe consistency might want disable sometimes recent version coq allows disable check globally file agda idris instead tag single function type skip check much nicer run infinite loop easily search function might responsible agda even different pragmas terminating nonterminating function also want mention well language handle resolution implicit argument may clutter code quite bit working properly course big deal haskell hindleymilner algorithm dependently typed setting algorithm work algorithm always work rely heuristic extent long story short agda coq good algorithm think seen case argument figure easy obvious idris algorithm figuring implicits seems slow fails much often failure also seem sort random whereas agda coq get intuition might fail using proof assistant feature agda good metaprogramming coq provides large amount tactic large proof library idris reasonable metaprogramming emphasize proving idris really want compete space use big issue idris weak handling implicits even write nice tactic solves something often provide bunch additional argument seems major difference agda idris tactic space fact agda much faster convenient better handling implicits make clear winner two term proof assistant agda coq much difficult compare generally coq proof much shorter agda proof often readable also sometimes lot easier write function agda coq sometimes translates easier proof agda especially case deal many instance dependent pattern matching coq equation plugin help learn use addition coq really want focus proof though extra effort might worth library agda library exist coq three idris le coq agda expected coq library mostly proof idris library mostly programming agda little bit definitely weak point however advantage haskell ffi good easy use use haskell library agda use agda write haskell library tooling agda great emacs mode coq coqide great emacs mode idris meh emacs user recommendation bite bullet install language install evil like vim learn keybindings mode using search etc really hate emacs choose editor similarly powerful mode use careful choose something give syntax highlighting favorite editor support syntax highlighting language choice pick something else constraint mean learn vim reconsider constraint want stress point point know anyway especially true agda powerful feature think programming environment really compete allow put hole code give ability write term hole view type hole bound variable expression hole contain new hole time also support casesplitting nice search feature coq give similarly powerful interaction proof using tactic writing function emacs mode feature similar casesplitting quite nice agda idris try many thing agda support editor editor interaction software space leak addition idris slow integration crash every time want typecheck something casesplitting seem work reliably also put term hole view type context thus seen people use idris repl use syntax highlighting editor still slow much le powerful conclusion read everything clearly see preference agda idris almost every scenario used either think need idris c ffi think start agda see wrap haskell c ffi something use agda answer probably yes fails use idris choose idris prepared wait lot code compile thing randomly work thing said comparison help case idris question idris v coq easy know already one want choose looking type project leaf coq v agda opinion difficult three care proof otherwise choose agda need compile ocaml something special like generally would say expect complex code use agda except expect large amount proof final note want redeem idris little bit even though hard think goal dependently typed language focus programming fine one seems development many issue idris ignored quite time ended like really hope fix issue mentioned excited linear type change recommendation however want switch later use agda try avoid using anything easily translated idris like unicode mixfix syntax converting source code two difficult save lot headache want comment please reddit thread tl dr care proof much code use coq use idris good reason use idris specifically otherwise use agda
85,Lobsters,formalmethods,CSE-Formal methods,Building Reliable Cloud Services Using P#,https://arxiv.org/abs/2002.04903,building reliable cloud service using p,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
86,Lobsters,formalmethods,CSE-Formal methods,Equality in Mechanized Mathematics,https://artagnon.com/articles/equality,equality mechanized mathematics,equality mathematics universe coq proposition proofirrelevant sprop mere proposition homotopy type theory,talk equality provide illustrative example vanilla coq sprop hott equality mathematics zfcbased mathematics zfc say abelian group oplus b simeq b oplus equality setbased equality mathematics based category theory equality strong notion object speak object upto unique isomorphism morphisms mathrm category equal though higher category particular homotopy theory talk weak homotopy equivalence almost fully replacing equality however tricky mechanize theory based infty category best dependenttypetheory model homotopy type theory commonly referred hott discus last section universe coq first let u briefly talk cumulative universe coq prop set promoted type seamlessly reason distinction prop set engineering one prop impredicative set proof erased extraction definition settypeincl set type definition proptypeincl prop type definition propsetincl prop set infty hierarchy within type universe type type type inhabitant set set primitive thing like mathbb n mathbb r inhabitant prop proposition could top bot arbitrary term inhabitant act proof proposition two kind equality vanilla coq difference follows propositional equality roughly translates requires proof obligation discharged user whereas definitional equality simple syntactic rewriting metatheory propositional equality proposition formalized axiom propositionalproofirrelevance p prop b p b get proof obligation discharge using axiom theorem propequality p prop b p b proof apply propositionalproofirrelevance qed general case two different inhabitant prop unequal however propositional equality existing two equal proposition theorem proprefl p prop x p x x proof exact eqrefl qed eqrefl simply sole inhabitant inductive inductive eq type x prop eqrefl eq x x proofirrelevant sprop three inhabitant sprop http coqinriafrrefmanaddendumsprophtml sunit corresponding top sempty corresponding bot sproposition corresponding definitionally proofirrelevant term way sprop implement definitional proofirrelevance simple engineering detail hardcoding coq render two inhabitant sproposition trivially interconvertible unfortunately nt work expected theorem spropirr p sprop x p x proof reflexivity abort typecheck fails qed prop want return sprop sprop universe disjoint prop universe theorem sproptoprop sprop prop proof intro x exact x abort typecheck fails qed sprop convertible prop fortunately better mere proposition homotopy type theory hott http githubcomhotthott one infty ladder mathbb anything contractible mathrm truncated type mere proposition inhabitant hprop simply mathrm truncated type hset mathrm truncated type notation contr istrunc minustwo notation ishprop istrunc notation ishset istrunc notion truncation central hott mathrm type n truncated mathrm type whence higherthan morphisms rendered uninteresting two hprops propositionally equal theorem hpropequality p hprop b p b proof apply pathishprop qed conceptually simple elegant propequality big thanks kenji maillard http kenjimaillardblue scintillating discussion helping example kudos hugo moeneclaey giving wonderful introduction truncation last hott class thanks pierremarie pédrot http wwwpédrotfr pointing serious error
88,Lobsters,formalmethods,CSE-Formal methods,CrossHair: A static analysis tool for Python,https://github.com/pschanely/CrossHair,crosshair static analysis tool python,crosshair static crosshairweborg type annotation pep smt solver paper use crosshair precision positive interprocedural analysis verify across implementation catch error support type checker mypy optimize confidence cover doctest blind spot doctest write contract pep example crosshairweborg get started ide integration limitation unexpected behavior help try gitter chat file issue ask question gitter twitter contributor related work dependent type refinement type design contract fuzz testing quickcheck property testing hypothesis concolic testing smt solver angr klee binary pysim pef,crosshair static analysis tool python blur line testing type system latest news try crosshair browser crosshairweborg function type annotation add check pep syntax crosshair attempt find counterexample crosshair work repeatedly calling function symbolic input us smt solver kind theorem prover explore viable execution path find counterexample new idea approach python first described paper however knowledge crosshair complete implementation idea support symbolic list dictionary set custommutable object note crosshair highly experimental state right help though keep reading use crosshair precision commonly care type really integer positive integer list nonempty list crosshair give precision interprocedural analysis crosshair validates precondition called function us postconditions called function help prove postconditions caller verify across implementation contract particularly helpful applied base class interface implementation verified catch error setting trivial postcondition true enough enable analysis find exception like index outofbounds error support type checker crosshair nice companion mypy assert statement divide work two system optimize confidence using postconditions crosshair ensures optimized code continues behave like equivalent naive code cover doctest blind spot doctest great illustrative example crosshair document behavior holistically kind project may able skip unittestpytest entirely write contract crosshair largely follows pep syntax expressing contract short place contract inside docstrings function declare postconditions expect true function return value like post return like use single underscore shorthand return function checked least one postcondition line docstring declare precondition expect true function input like pre x declare function mutates argument square bracket post keyword old value argument available special object called old post x x oldx comparison purpose mutation checking deep comparison use empty square bracket assert function mutate argument function validly raise certain exception declare like raise indexerror zerodivisionerror declare class invariant class docstring like inv selffoo selfbar class invariant apply additional pre postconditions member function note unlike contract standalone function contract class method often encouragerequire contract entire class usually need invariant class describe state valid every method must shown preserve invariant find example example directory try browser crosshairweborg get started note crosshair highly experimental state right using want succeed want help interested technology crosshair supported python cpython common python implementation inside development environment code want analyze virtual environment conda environment etc install pip install crosshairtool please patient platform build solver take long time crosshair work best sits window think code work open window activate development environment run crosshair watch directory code analyze see perodically updating text crosshair analyzes contract code watch change reanalyze appropriate detects issue see something like hit ctrlc exit ide integration mentioned crosshair want run background plenty time think however ide integration still used catch easy case make plugin favorite editor please submit pull request add crosshair check filename command yield result format mypy type checker nonzero exit error line formatted filename linenumber error message limitation wildly incomplete list present limitation lifted time help welcome may never lifted symbolic value implemented python proxy value crosshair monkeypatches system maintain good illusion illusion complete example code care identity value x may correctly analyzed code care type value may correctly analyzed function class definition top level analyzed ie nested inside functionsclasses deteministic behavior analyzed code always thing starting value crosshair may produce notdeterministic error detects comsuming value iteratorgenerator pre postcondition produce unexpected behavior aware absence counterexample guarantee property hold smt sovlers different perspective hard problem easy problem human prepared surprised crosshair tell help try python project communicative nt work participate lurk gitter chat file issue ask question stackoverflow make pull request nt contributing guidlines yet check gitter coordinate help evangalize share friend coworkers think neato star repo contact pschanely gmailcom twitter even say like cc future crosshairrelated develoments contributor related work technology relation dependent type refinement type crosshair aim provide many capability advanced type system crosshair easier learn python incomplete ca nt always tell whether condition hold design contract unlike system tool contract crosshair statically attempt verify pre postconditions fuzz testing quickcheck property testing hypothesis crosshair many goal tool however crosshair us smt solver find input rather typically randomized approach tool use concolic testing stateoftheart fuzz tester employ smt solver similar fashion crosshair smt solver smt solver power many tool table crosshair us angr klee symbolic execution binary code unlike tool crosshair model semantics python directly pysim pef take approach similar crosshair various state completeness crosshair generally perscriptive productlike tool
89,Lobsters,formalmethods,CSE-Formal methods,The natural number game,https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/,natural number game,,
90,Lobsters,formalmethods,CSE-Formal methods,Where is the fashionable mathematics?,https://xenaproject.wordpress.com/2020/02/09/where-is-the-fashionable-mathematics/,fashionable mathematics,last post new case monodromyweight conjecture direct summand conjecture new proof purity flat cohomology strengthened version almost purity theorem univalent people coq user discourse forum isabellehol user zulip chat mathematician lean zulip chat like,last post amongst thing challenge community behind every modern computer proof verification system start formalising proper mathematics term problem equally vague perhaps le offensive fashionable mathematics mathematics fashionable take look work recent field medallist pretty good way telling fortunately unlike many fashion fashionable mathematics controlled whim big company cabal fashionable mathematics mathematics justifies ability answer question previously deemed interesting important peter scholze definition perfectoid space opened door last ten year perfectoid space used prove new case monodromyweight conjecture prove direct summand conjecture give new proof purity flat cohomology strengthened version almost purity theorem even mention application langlands philosophy result whose statement mention perfectoid space open decade make kind mathematics fashionable giving community new insight formal proof verification system lean coq isabellehol unimath others community surely interest member see community grow system claiming mathematics well thing program verification research higher topos theory higher type theory etc two thing become clear last two year large community mathematician simply join community learning curve high much documentation written computer scientistseven mathematician battle way one community risk find kind mathematics taught teaching department big risk find much fashionable mathematics explicit question people formal proof verification community mean individual mean community coq user isabellehol user unimath user whatever might decide thing important hence answer nothing might simply decide reject idea formalising fashionable mathematics important fine return expect u come join community might want u fine represent true potential growth u mathematician believe point future completely question one system actually start becoming useful research completely clear none system actually know class group number field rock solid proof system currently used help u prove even basic result class group number field let alone new result univalent people extensive conversation people interested univalent mathematics initially rejected univalent mathematics completely abuse initially saw equality symbol obscene mathematician use equality symbol ie mean two thing firstly use mean actually thing example secondly sometimes use mean canonically isomorphic going tell mean assure ring zero ideal care literally set equal univalence take much univalence tell u equal equivalent two thing biject whether bijection canonical thing equivalent might nice way homotopy theory use equality symbol denote weak kind equivalence translate well rest mathematics going build fashionable mathematics univalent type theory maybe cause problem nobody know nobody noticed amongst univalent people community run really seem care fashionable mathematics would love spammed comment telling wrong impression whole bunch interesting type theory question raised univalence axiom foundational question community whole interested asked lot univalent people could possibly case voevodsky someone made name discovering homotopy theory scheme could spend year working univalent type theory still definition scheme end explained one occasion voevodsky interest changed fine still want scheme message univalent people actually build fashionable mathematics point come mass definition scheme proof class group number field finite number field matter really show matter number field countably infinite hence biject hence equal system know work want hear protestation want see code unimath arend system like know good higher topos theory arithmetic quadratic reciprocity coq user coq user mature system around decade tried tested formalised several difficult proof undergraduatelevel mathematical object planar graph finite group done lot computer science thing understand msc level mathematical object scheme coq french scheme french match made heaven statement local global class field theory assia mahboubi someone actually mathematics coq proper mathematician interested alone manual tell mathematician idea type know noetherian ring start undergraduate want try formalising hilbert basis theorem ask mailing list know undergraduate actually use email right told teenage child email old people way u note added feb thanks théo zimmermann pointing twitter coq discourse forum young people wanting learn coq try asking beginner question ask make class group number field let get serious mathematics done coq extremely powerful system isabellehol user isabellehol manuel eberl tirelessly generating century analysis analytic number theory highly respectable thing planting seed basic alone furthermore hol dependent type mean entire area mathematics limit system conjecture yes prove wrong define picard group scheme isabellehol sure even possible write code isabellehol way run finite time take tensor product sheaf module define multiplication sheaf dependent type clever hol workarounds let use typeclasses define module structure module value sheaf tensor product know anyone know actually interesting open research problem picard group scheme used place proof fermat last theorem basic object proper mathematician isabellehol actually break nobody know frustrates nobody isabellehol community seems care larry paulson say easy understand different kind math work best different system might want choose system depending math want people want attract working mathematician scheme system even scheme know anyone know would valuable know help mathematician early adopter make informed decision system use note added feb josh chen told twitter isabelle zulip chat like lean mathematician beginner go ask question basic math isabelle furthermore manual eberl sent claim formalisation sheaf isabelle profess know anything sheaf mathematician want learn sheaf could try using ask chat let get century mathematics formalised isabellehol mathematician finally mathematician easy believe point future one system helping u mathematics interested making happen sooner get involved spare time learn use one system time learn use figure one potential learn system think math question want state prove could anything solving simple logic problem stating poincare conjecture start asking want try lean ask lean zulip chat login required real name preferred nice find community mathematician computer scientist working communicate isolating specific problem way getting fashionable mathematics lean solving somebody able answer question know exactly lean theory done practice know problem hoping fixed lean lean try system get involved fun turn theorem proving solving level computer game area basic mathematics enough control make quite fun computer game time go api appear level area mathematics become available computer scientist really interested solve level need data sarah loo google ai explicitly raised issue aitp last year bemoaning fact typical database theorem exactly one proof everyone know different proof add different value situation giving different insight want proof people need input use system hard u give learn system prove theorem write function like like loading related
91,Lobsters,formalmethods,CSE-Formal methods,Survey of Automated Vulnerability Detection and Exploit Generation Techniques in C.R.S.'s (2018),https://arxiv.org/pdf/1702.06162.pdf,survey automated vulnerability detection exploit generation technique cr,,obj type objstm filter flatedecode first length n stream r x
92,Lobsters,formalmethods,CSE-Formal methods,Feature Interaction Bugs,https://www.hillelwayne.com/post/feature-interaction/,feature interaction bug,feature interaction example feature interaction word feature interaction happens boundary error solving feature interaction coping feature interaction alloy break chord protocol distributed feature composition problem frame engineering safer world kevin riggle richard whaling,testing framework expected write lot lowlevel test highlevel test reasoning endtoend test slow expensive cover tiny amount program state space better focus testing part isolation versus testing work together practice global correctness follow local correctness possible every part individually rocksolid system broken whole one way happens feature interaction fi bug different feature combine break global property example tla code snippet supplementary knowing tla necessary understand example soupon want add track soup feature mean people need register account high level account representable email address given user start account get one registering constant null address allstrings variable account var variable init account null registerwith addr account null account address addr next e allstrings registerwith spec init next var find lot people register email address asdljg need confirm register valid email address control require people validate account sign send email provided address variable account variable account sentvalidatemsgto init account null sentvalidatemsgto null null sendvalidatemsg account sentvalidatemsgto accountaddress else unchanged sentvalidatemsgto registerwith addr account null account address addr verified false sentvalidatemsgto addr valid email control able click link validate account guarantee valid email allowing user take confirmvalidate action email address confirmvalidate addr sentvalidatemsgto addr sentvalidatemsgto addr accountaddress account account except verified true unchanged sentvalidatemsgto next e allstrings registerwith e address confirmvalidate next problem anonymous email address user register throwaway domain like teleworm yosmail whatnot site give string character immediately get email address hoop required people value give anonymity also see many people signing email order spam people want ensure validate nonanonymous email okay later change one know verified real email first spec init next var nospammers e spam spammeraddresses confirmvalidate spam var property spec nospammers decide enforce registration try register spammer address even bother let try validate constant null address allstrings constant null address spammeraddresses allstrings registerwith addr addr allstrings spammeraddresses account null account address addr verified false sendvalidatemsg spec init next var nospammers e spam spammeraddresses confirmvalidate spam var property spec nospammers speaking changing email let put want prevent fatfingering address control need confirm new email address changed variable account sentvalidatemsgto variable account sentvalidatemsgto sentchangemsgto typeinvariant account account union null sentvalidatemsgto address union null sentchangemsgto address union null init account null sentvalidatemsgto null sentchangemsgto null changeto addr account sentchangemsgto addr unchanged account sentvalidatemsgto confirmchange addr sentchangemsgto addr sentchangemsgto account account except address addr confirmfor account confirmvalidate confirmchange unchanged sentvalidatemsgto sentchangemsgto next e allstrings registerwith changeto e address confirmvalidate confirmfor find new issue email server box kitchen sometimes someone mistake microwave pours soupon frazzing database happens people might receive activation email need resend email feature next e allstrings registerwith changeto sendvalidatemsg unchanged account sentchangemsgto take u year discover people signing spammer email however feature work trying sign example telewormus still give error bug little roundabout spammer sign regular email address like normal personhere confirmation email send address change email spammer telewormus click resend confirmation new confirmation email sent spammer address validate root cause registration working fine change email fine since part requirement people switch anonymous email problem email verification need check spammer account two location make likely fall sync time leading subtle issue future argue aspect validate deeper issue two feature cause problem resending confirmation email changing user email remove resending feature system start working remove changing email feature system still work bug part system obviously broken unit test pas different part combine bug emerge localizable one part failing feature interaction bug feature interaction pamela zave pioneered fi working word feature interaction way feature feature modify influence another feature defining overall system behavior feature interaction notorious source runaway complexity software bug cost schedule overrun unfortunate user experience fi bug especially insidious map isolated component violated invariant global occurs temporallydisconnected part code example banal one since obvious invariant violated often feature interaction happens various requirement conflict consider requirement forward b somebody call receive b someone call b b call enabled call dropped call forwarded b go dropped something stakeholder figure ask need realize could problem realizing trouble lie feature interaction global emergent behavior local software something see working feature level zoom see behavior system see hazard safety security concern especially vulnerable fi often obviouslyincorrect prior state system look like working fine point everything catch fire feature interaction happens fi measure essential complexity requirement way two requirement conflict also mean fi common business domain technical domain likely edge case conflicting requirement measure much fi possible thing make project likely actually fi bug practice one poor communication consider fi bug across two service respective team communicate notice potential problem interaction service also cause boundary error two group assume responsible integration nobody paying attention integration bug freely happen fi common requirement ambiguous constantly changing customer think locally change system thinking feature x would interact something implemented six week ago mean agile team especially watchful fi highly iterative development style leaf lot space crosssprint bug solving feature interaction sorry doomed two problem detecting fi first since fi global property unit test find feature interaction validate solved look endtoend behavior trace huge state space though test cover fraction space second fi bug obvious failure may correspond raised error corrupted data system still look like working fine even fi bug automated testing assumes know want test meaning come case advance essential problem implementationlevel verification test locally necessity easier u reason small piece code work easier connect failure error easier come error price working machine level restricted express machine level something like never validate anonymous address easy express human requirement express general property machine best express block code accepts valid email address accept anonymous address struggle say block code involved validation block code accept anonymous address aiming implement come actually validating say even le unit test say reject anonymous address called parameter endtoend test say specific instance user action eventually trigger block code cause reject anonymous address neither make fi safe knowing x safe codepath b c x mean safe codepath f g x assuming partially translate requirement first place need know requirement able localize specific module code property broader vague becomes far difficult make finding fi much harder coping feature interaction trivialize fi bug thing make manageable first detecting potential fi issue earlier via better requirement gathering problem signup page happened feature gradually added stage address immediate need started project specifying need block spam email address resend verification email allow people change email address validating good chance someone would noticed fi bug approach requirement equivalent code review similar tradeoff effective work best domain expert catch everything second specification kind design blueprint documentation way knowing whether observed system behavior intended remember many fi bug obviously incorrect many case observed fi could actual intended behavior satisfies stakeholder need tell need know need first place two take care basic past zave recommends two additional technique kind specification better specification form spec better others spec formalized meaning test directly fi bug unlike testing code testing spec work global level example run model checker email spec immediately see bug show trace error action property nospammers violated error behavior point state initial predicate changemsg null account null verifymsg null state registerwith line col line col module registration changemsg null account address verified false verifymsg null state changeto line col line col module registration changemsg b account address verified false verifymsg null state confirmfor line col line col module registration changemsg b account address b verified false verifymsg null state changeto line col line col module registration changemsg account address b verified false verifymsg null state next line col line col module registration changemsg account address b verified false verifymsg b state confirmfor line col line col module registration changemsg account address b verified true verifymsg b wrote spec tla fi community generally prefers alloy zave used alloy break chord protocol verify large telecomm system finally architect system fi mind choosing foundation naturally isolates localizes requirement pamela zave michael singer jackson designed telecommunication architecture called distributed feature composition claim effective seen anybody adapt outside telecomms admit fully understand nonetheless worth looking even though tool process help work context domain knowledge ultimately dealing fi bug process looping domain expert development process keeping everyone constant communication constantly reevaluating local change affect big picture technical problem social solution interested reading fi zave good page michael jackson talk book problem frame also look research field emergence systemsthinking favorite book engineering safer world approach fi subtopic general system safety interested using better method teach workshop formal spec save money reduce timetomarket catching fi bug early read contact thanks kevin riggle richard whaling feedback
93,Lobsters,formalmethods,CSE-Formal methods,ZZ is a modern formally provable dialect of C,https://github.com/aep/zz,zz modern formally provable dialect c,quick quick start install rust editor support look basic idea plain c abi safety correctness symbolic execution namespaces autogenerated header declaration ordering language reference mutability const mut polymorphism model theory storage const static atomic threadlocal visibility pub export struct initialization conditional compilation preprocessor note westconst v eastconst closure metaprogramming template tail variant symbol new constructor procedural macro inline included c source packed structs union environment variable,zetz system without dynamic memory c remain defacto standard system interface target bare metal mcus embedded linux wasm embed language also use build cross platform library clean portable cstandard api zetz play nice others require rewriting everything zetz useful large project major innovative feature code formally verified symbolic execution virtual machine compile time quick quick start install rust bootstrapping install smt solver either cd exampleshello cargo run run editor support look zz strong rust aesthetic remains c dialect core using stdioh printf struct random num fn rng random self return self num export fn main int let r random num printf lucky number un rrng return basic idea plain c abi zz emits plain c always one main reason exists always emit c c compiler emit binary modern language abi deviating c use glue tool play nice others zz emitted c include header stack unwinding c rust coroutines go code emits plain ansi c requirement towards compiler feature zz work nicely vendor provided closed source compiler obscure system like arduino propriatary firmware compiler integrates nicely existing industry standard microkernels like zephyr freertos etc safety correctness symbolic execution unlike modern language zz raw unchecked pointer default nothing prevents crazy thing long mathematical proof defined behaviour according c standard checking done executing code ssa form compile time within virtual machine smt prover none check emitted runtime code standard library fully stack based heap allocation strongly discouraged zz convenience tool deal lack flexibility come checked tail pointer namespaces autogenerated header declaration ordering modern language header semantically relevant declaration order neither zz since interacts raw c nicely also emits header order declaration c compiler like zz put module namespaces c symbol using underscore instead mangling lib hello becomes mylibhello c convention language reference mutability const mut default everything const opposite c mut keyword used make global variable function argument mutable polymorphism zz follows c model polymorphism struct cast type first member zz cast implicit always safe struct vehicle int wheel struct car vehicle base fn allowedentry vehicle self bool return self wheel fn main car c base vehicle wheel assert callowedentry model zz requires memory access mathematically proven defined defined opposite undefined behaviour c specification word undefined behaviour allowed zz quite often told compiler something provable like indexing array ok fn bla int must tell compiler accessing array position defined quick fix one fn bla int len compile useful function tho trying use context array len allowed better example fn bla int int l len l l thanks underlying smt solver zz symbolic executor know executed case len l defined keyword requires behaviour callsite model keyword declares function behave fn bla int int model return return simple example declare function return time input actually wo nt compile theory use annotation define state type neatly let define call legal type given time program without runtime code theory isopen int bool fn open int mut model isopen staticattest isopen fn read int require open mut isopen model isopen return fn close int mut example defines type state transition legal open read close combination lead compile error read open storage const static atomic threadlocal const static work exactly like rust c syntax export const foo static mutable float blarg threadlocal mutable bool bob true atomic mutable int marvin const inlined module therefore point different memory module static global storage location private current module effect way declare shared global writable variable zz borrowchecker restriction nothing preventing multithread race instead declaration selected resulting exported binary interface mapped language need export global writeable memory location still bad idea thread define function return pointer local static threadlocal atomic mapped directly keywords zz use nicer keywords user defined name top level visibility pub export default declaration private module export used make sure declaration end final result binary export header pub mark declaration local project usable zz module exported resulting binary struct initialization prepare type elision expression known type struct int int b fn main conditional compilation preprocessor like rust prepro string processor rather executed ast parsing make behave different c even syntax c right hand side evaluated immediately access preprocessor scope struct int def test uint proc elif def maybe int proc else void proc endif every branch else must contain completed statement appear statement would valid possible pub fn foo o unix endif note even code disabled condition must still valid syntax however type checked note westconst v eastconst zz enforces eastconst c formally correct language order make zz formally correct make syntax illegal case sacrifice westconst incosistent difficult comprehend anyway westconst left aligned star read pointer part type mutability property pointer int mut foo foo compile error foo valid unless want apply mutability local storage named foo void mut foo foo valid foo compile error coincidentally roughly equivalent rust rust devs feel right home even quickly learn pointer tag work following compiler error closure function pointer difficult nicely also make emit language well nt really exist zz instead declare closure automatically casted function closure randt int fn securerandom int return fn main randt rand securerandom metaprogramming template tail variant technically zz metaprogramming template function blow code size difficult export plain c type instead zz make code reusable allowing allocation structs larger member size call tail used make function fixed size array reusable size string type export struct string usize len char mem sign behind name indicates type tail tail mem specified array size length function could implemented signature fn len stringt mut self return indicates tail case tail size bound local variable named used function body allocating new stack variable type string also allocate tail stack string append hello string append world printf slen smem mean tail specify integer value exact number char would like add tail measured number element whatever last unsized element struct byte string dynamically expand within tail memory case append stuff string without ever allocating heap simply returning current function clear memory used without need destructor ordering signal safety symbol symbol big global enum let create unique value anywhere code using symbol symbol car symbol bike fn drivethis usize sym symbol sym sym car printf bzzzzn else printf n symbol nameof sym note make assumption integer value symbol depends compilation loading order new constructor zz autogenerates binding language c language fully compatible c abi specifically nt allow returning structs function standard way create constructor function c intstead using function take mut pointer first argument call zero initialized stack variable zz syntactic sugar new keyword struct int int b fn empty mut new self int self fn main new empty assert aa assert ab new creates new local variable correct size pass self argument constructor create local tail use new like foo string empty procedural macro macro zz fully compiled executed compile time call allows constructing arbitrary complex macro using regular zz code unlike c prepro macro macro must emit complete expression example emit open brace without closing brace macro compiled standalone executable automatically including dependency call argument derive context passed json stdin macro expected print zz code stdout creates literal string repeated time export macro repeat ast frommacro err aargs ast expression literalstring expected string err aargs ast expression literal expected number let num int atoi aargs vstring printf int mut num printf aargs vstring printf export fn main int printf hello sn repeat world return inline included c source zz support importing c source using keyword imported c source inlined call site using inline keyword certain case imported c source may depend symbol defined zz module zz symbol given imported c file need keyword example nativeh header file depends examplecontainer type defined libzz file import header file line expose container type header file specifying need keyword container type made available examplecontainer project name example type container nativeh include stdioh void print examplecontainer self printf sn char self value void init examplecontainer self void const value self value value libzz inline using need container nativeh native export struct container void value export fn createcontainer container new mut self void value native init self value pub fn print container self native print self using example int main new container example createcontainer hello containerprint return packed structs union zz support packed structs union packed modifier modifier used struct union omits alignment padding typically used architecture independant serialization cost causing alingment fault example packed unpacked struct static size printed stdout using stdioh printf struct packed packed b int b struct unpacked b int b fn main int printf sizeof packed lun sizeof packed printf sizeof unpacked lun sizeof unpacked return environment variable zzmodulepaths zz import zz module look project module directory default search path extended defining zzmodulepaths environment variable much like path environment variable multiple path defined separated colon posix system semicoloon window zzmodulepaths pwdpathtomodules usrsharezzmodules zz build
94,Lobsters,formalmethods,CSE-Formal methods,An inquiry into the Foundations of Mathematics,https://artagnon.com/articles/fom,inquiry foundation mathematics,departing zfc foundation preliminary two intuition classical mathematics broken recent work field,starting question consequence gödel incompletness theorem foundation mathematics argue new foundation build intuition new foundation coq conclude linking recent work infty category hott mathematics thought game start object say set axiom object typically zfc use calculus logical deduction classical logic prove thing mechanize game proof assistant one would either use proofsearch tactic system check subject reduction however mechanized mathematics done differently classical mathematics first investigate whether building new foundation justifiable gödel second incompleteness theorem state formal system express elementary arithmetic prove consistency assuming à priori system consistent nt destroy platonic view mathematics destroy view one correct foundation mathematics one would argue precisely result make mathematics exciting keep rewriting foundation better suit abstract intutions build higher abstraction without worrying whether one true foundation departing zfc foundation mathematician would argue settled zfc classical logic foundation true sim recent mathematical literature category theory particular break away settheoretic foundation object morphisms nt set indeed settheoretic question category illformed although one encode boolean algebra using topos moreover one aim foundation conducive mechanization proof checked correctness automated fashion strategy veovodsky et al used extend martinlöf type theory build branch mechanized mathematics homotopy type theory refer henceforth hott http githubcomhotthott formalized coq whose foundation based martinlöf type theory preliminary following proposition say every inhabitant mathbb n supply f supply inhabitant mathbb theorem f nat unit proof intro x exact tt qed proof witness always supply inhabitant type mathbb n rightarrow mathbb curryhoward isomorphism definition f nat unit fun tt type theory function nondependent version pi type codomain b fixed begin matrix rightarrow b pi x b forall x b end matrix logical connective neg use next section following definition type theory neg p p rightarrow mathbb two intuition classical mathematics broken first example classic proofbycontradiction proof constructive mathematics proceed following logical sequence proposition p neg p implies ldots textrm contradiction implies p word neg neg p implies p line general philosophy constructive mathematics nonexistence inhabitant type proved supply witness supply construction inhabitant indeed construction might exist nevertheless axiom excluded middle axiomatized used constructviacontradiction like axiom axiom lem forall p prop p p understand better let u take example constructive equivalent mathbb rightarrow textrm anything classical mathematics theorem falseimpliesanything forall false proof intro exact fun x false match x end qed since mathbb inhabitant construction inhabitant type proved perhaps prudent supply another example classical statement illustrate coq typechecker theorem truedoesnotimplyfalse true false proof due enforced exhaustive patternmatching inhabitant lh need match inhabitant true inhabitant false inhabitant false abort category theory mathbb would inital object one arrow initial object every object category mathbb would final object one arrow every object category theorem hypothesizes existence morphism final object initial object course exist begin matrix mathbb rightarrow p p rightarrow mathbb mathbb rightarrow p rightarrow mathbb end matrix second example let u investigate classical notion proof irrelevance zfc set proposition different universe discourse opposed type theory proof object firstclass course development question proof relevance raised type theory following example p q inhabitant type x question whether p different q p x q x answer supplied hott yes proof relevant p different q proof viewed homotopy path two homotopy type notion homotopy equivalence homotopy path classical mathematics p would always equal q recent work field provide reference recent constructive mathematics area higher category jacob lurie higher topos theory http wwwmathiaseduluriepapershttpdf build theory infty category setting quasicategories recently emily riehl element infty category theory http wwwmathjhuedueriehlelementspdf extends theory complete segal space shulman work infty topos strict univalent universe http tie infty category work hott work considered modern algebraic topology although lurie currently developing spectral algebraic geometry http wwwmathiaseduluriepaperssagrootfilepdf infty categoric foundation
95,Lobsters,formalmethods,CSE-Formal methods,"John Harrison: let's make set theory great again! [2018, slides]",http://aitp-conference.org/2018/slides/JH.pdf,john harrison let make set theory great slide,,obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream jl aw endstream endobj obj length filter flatedecode stream k endstream endobj obj length filter flatedecode stream q lz f endstream endobj obj length filter flatedecode stream u w ۮ om t yn e endstream endobj obj length filter flatedecode stream nhq au x bʮ endstream endobj obj length filter flatedecode stream nhq h ڟ ee wӊw endstream endobj obj length filter flatedecode stream z bς endstream endobj obj length filter flatedecode stream u x ߔ ya k endstream endobj obj length filter flatedecode stream zpd q qdbv ǵ x yv za h f jg endstream endobj obj length filter flatedecode stream l x ߔ ya h n ӟj endstream endobj obj length filter flatedecode stream uf f g ŵg x xv ja endstream endobj obj length filter flatedecode stream b ud rq yv endstream endobj obj length filter flatedecode stream k e c r q endstream endobj obj length filter flatedecode stream b b endstream endobj obj length filter flatedecode stream fj endstream endobj obj length filter flatedecode stream bv ia e e ek endstream endobj obj length filter flatedecode stream e e ek endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream que p l endstream endobj obj length filter flatedecode stream qte l ҽӄ g endstream endobj obj length filter flatedecode stream e zqc n f f b endstream endobj obj length filter flatedecode stream l г e uk u
96,Lobsters,formalmethods,CSE-Formal methods,A mathematical formulation of the tax code?,https://blog.merigoux.ovh/en/2019/12/20/taxes-formal-proofs.html,mathematical formulation tax code,verifisc calculating tax rate democratic concern doctoral work lecture sarah lawsky simulator study openfisca etalab leximpact recent debate delevoye report envisioned landais piketty saez automatically proven sociofiscal model online simulator effective marginal rate french towards formal implementation calculating tax passge law october hackathon official repository cfpb etalab published parser abstract syntax tree research article mlang raphaã l monat official dgfip simulator conclusion towards general implementation tax code leximpact webassembly troll sa model french economy mopsa entrepreneur general interest seems bleak,esoteric unusable high falutin idealistic formal method sometimes criticized computer science community due certain elitism make communication researcher developer quite difficult indeed barrier using formal method quite high especially one specialized degree mathematics familiarity category theory vast majority developer use language like python javascript never exposed theoretical concept try explain blog even though often improve productivity issue wanting use tool complicated concept problem akin killing fly using bazooka however time time truly complex problem arises available tooling prof insufficient case little theory save day today way illustration going tell story mysterious language whose protagonist directorate general public finance direction de finance publiques dgfip automatic theorem provers see use automatic theorem provers study tax code generally law expressed algorithmically story led verifisc project pave way reappropriation complexity french tax system using tool accessible everyone calculating tax rate democratic concern parallel doctoral work try keep eye potential opportunity apply field research new problem hence january came across lecture given law professor sarah lawsky popl conference intriguing title method reading article realized part act describe specific process sometimes help mathematical calculation simply algorithm specifically lawsky talked certain provision american tax code described help logical formula questioned usefulness approach would formalization tax code help u going beyond already know lawksy point would clarify certain legislative provision ambiguous intent added value clarification admittedly important legal point view left unsatisfied wondered formalization might help u better understand yearly tax contribution calculated work tax contribution calculated done already simulator calculate income tax tax return insee also produce numerous study studying effect income tax allowance actual income household openfisca initiative led etalab even offer full implementation french sociofiscal system economist conduct study however work one start actual data corresponding fiscal household calculate quantity tax allowance etc starting data scope study tax secrecy make access fiscal data household difficults situation one go studying effect advance fiscal reform site leximpact built openfisca allows quickly visualizing effect change parameter legislation place test case mp parliamentary staff also possibility simulating reform small sample thousand household tax data actual data sample thousand ten thousand household tax shelter sufficient observe effect tax reform case backoftheenvelope estimate count income bracket considered household etc case marital status single couple coliving number dependant possibility people disabled arrive several thousand different case study moreover small sample majority case data concentrated overrepresented category reducing chance optimal coverage possible case dataset take account study tax effect tax bracket change year year variation income change family circumstance etc based observation realized problem studying tax legislation effect population diversity hugely important however analytical tool commensurate impact life fellow citizen simply exist poor interaction tax bracket threshold allowance dramatic consequence life potential loss several hundred euro per month hypothetical unfortunate situation really exist systematically identified order correct complexity tax legislation product historical construction also need respond wide variety reallife situation risk eluding creator like legal frankestein visibility effect taxation benefit general also democratic issue evidenced recent debate test case delevoye report pension reform pending complete redesign envisioned landais piketty saez decided see field research formal method could contribute problem automatically proven sociofiscal model study taxation benefit intrinsically mathematical laid right way indeed assume follows posse relevant fiscal information household like content income tax return form online simulator data allows u ass entitlement various aid allowance amount money due account tax received way allowance mere mathematical function characteristic household order study function decided encode smt solver called smt solver particular instance called automatic theorem prover automatic provers work follows encode problem constraint variable boolean integer example prover asked value problem constraint met answer yes prover return assignment variable prover guarantee constraint met case variable characteristic household number child income etc constraint used model two thing first rule tax allowance calculation example household couple two nondisabled child family quotient equal second constraint also used ask question want ask little sociofiscal model instance look household paying tax greater equal income simply add constraint model smt solver tell u household exists give u example get straight point problem consequence many household marginal taxation threshold effect let u imagine individual household see salary increase one year next pay income tax also see certain allowance diminish question whether situation actual income decrease even though wage increase specifically looking effective marginal rate greater smt solver able answer question yes interestingly positive response accompanied example satisfies constraint example correspond actual data french household available solver corresponds hypothetical situation deduced study mathematical function calculation tax welfare allowance although hypothetical example le realistic highlight legislative blind spot unfortunate result interaction several separately designed piece legislation couple livingin wherein first individual earns net salary second individual work couple two child year old enrolled high school dependent second individual family rent dwelling zone iii outside urban area inhabitant per month assume income first individual increase per month salary following year household amount income tax various allowance follows increase taking account fact allowance calculated based income earned year whereas tax contribution calculated income earned year amount difference annual salary revenu fiscal de income tax child benefit backtoschool allowancs middleschool scholarship highschool scholarship personalized housing allowance working bonus net annual income see instead earning per month household loses per month compared previous situation loss explained loss high school scholarship child brutal threshold effect multiplied number dependant benefiting example tell u first linear threshold similar one used family allowance generalized allowance order avoid kind situation second specific combination factor trigger situation two kid high school time net salary level around fact couple livingin add tax increase explaining loss money central factor still concern french example could also discovered classic study actual data sample size required randomly encounter situation quite large one strength new method analysis therefore effectively reliably discover without secret data undesirable borderline case induced sociofiscal system smt solver could also used find exact linear slope give stock exchange avoid high marginal rate le moreover threshold effect multiplied number child maintain low marginal rate around threshold linear slope required decrease le one wish cover larger family see scope lot political arbitration answer question acceptable highly subjective question rife tension however political decision made smt solver ensures whether formula anr rule used calculation agreement principle decided legislator presented one method getting result model encoded smt solver fact possible ask question form situation example possible application great interest public policy evaluation point view possible household winlose result tax reform possible increase second tax bracket rate point without household losing year assuming encoded histogram income distribution smt solver possible play around tax bracket gain billion per year tax receipt without household seeing tax contribution going science fiction sciencefiction automatic theorem prover magic complex problem time resource take solve current prototype already consume gb ram run several day issue scaling question complicated therefore represents real technical challenge formal method one trick sleeve going help u present smt solver problem reduced core free superfluous complexity towards formal implementation calculating tax already possible lot small prototype like one developed ideally would like function calculates tax case type income status tax niche however already computer program one used directorate general public finance dgfip calculate tax contribution since passge law october calling france become digital source code used section french administration considered administrative document subject right access public reuse code implementing calculation tax therefore published dgfip hackathon saw interesting idea emerge inspect code official repository cfpb use really code written special programming language called language developed dgfip write implementation tax code date however dgfip made available public tool us execute code code unusable etalab published parser language capable translating source code abstract syntax tree interpreted python able reproduce study done hackathon using parser also noticed problem firstly tax amount calculated parser sometimes wrong especially final amount take account limit tax benefit family quotient secondly far problematic parser written aim giving precise semantics language operator abstract syntax tree simply replaced runtime corresponding python operator enough remember goal beyond simple execution code also want translate automatic prover replicate result little prototype general case need know exactly program run possible case knowledge precise name study programming language involves endowing language semantics set using mixture reverse engineering additional information given dgfip able exchange regularly several month work bore two result formal semantics language presented research article compiler language mlang based semantics would like thank raphaã l monat fellow doctroal student coauthor mlang christophe gaie collaborator team dgfip responded willingly request information language important compiler based semantic formal semantics allow u validate translation language programming language example mlang allows u statically generate python function reproduces tax calculation done official dgfip simulator difference simulator previously written etalab realized language special value undefined parser undefined translated however work realizing formal semantics revealed undefined behave like case example comparison undefined always give undefined result similar comparison small detail make compiler robust increase confidence file generated code using mlang specifically reduces risk generated program run differently code time post published however code generated mlang still incorrect indeed side effect formalisation validation work discover code published dgfip contain information needed replicate tax calculation technically code called several time particular value certain variable technical subtlety detected time hackathon first publication code able inform dgfip currently implementing mean enable retrieve system information concerning multiple call code different parameter information retrieved able complete formalization work validate mlang official test set conclusion towards general implementation tax code code produced published year dgfip thus serve basis whole series implementation part tax code used various application mlang offer possibility generating program code transpile various programming language calculate list output variable based list input variable specific condition concretely leximpact need javascript webassembly implementation function calculates tax typical case according value tax bracket mlang able generate case tax calculation done within internet browser server another interesting application would translation code macroeconomic simulation language troll sa indeed language used insee order produce model french economy require mathematical expression income tax code model could therefore updated year retrieving new version code compiled troll sa instead reflect change legislation troll sa code well finally mlang able improve prototype tax code translating smt solver necessary reduce mathematical complexity function essential bit limit resource consumption framework mlang compiler formal semantics allow u perform reliable optimization simplify program without changing meaning without additional condition beyond classical optimization dead code removal also use abstract interpretation tool mopsa perform finer analysis program raphaã l monat hope combined strategy dividing query subproblems optimization code allow u scale prototype automatic tax code prover beyond technical understanding think several lesson learned story firstly free access research code allows synergy unusual initiative develop dgfip first administration world publish tax calculation implementation way think project quickly bring benefit administration code also published opensource license important tool allows fine automated analysis french taxation accessible everyone reserved private actor would use profit secondly think project show innovation often come fundamental research carried long term tool used proven solid theoretical foundation established decade course standing shoulder giant hope example application formal method draw attention marketable field time race thirdly finally intention project also show innovation also directly benefit public sector therefore welcome existence entrepreneur general interest programme leximpact initiative part opinion programme could benefit closer applied research carried general interest french laboratory prospect career public research seems bleak many highly qualified young people idea able use knowledge improve government action would seem powerful motivation avoid brain drain private sector whose activity especially field technology sometimes lack meaning
97,Lobsters,formalmethods,CSE-Formal methods,Getting Started with Verifpal,https://www.youtube.com/watch?v=4__KcGU2ALE,getting started verifpal,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature getting started verifpal youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature getting started verifpal youtube
99,Lobsters,formalmethods,CSE-Formal methods,Verifying Arithmetic in Cryptographic C Programs,https://drive.google.com/file/d/1pEgkQbGsOzbzUpZWaqUT3Jjk3H9txgXg/view?usp=sharing,verifying arithmetic cryptographic c program,,
100,Lobsters,formalmethods,CSE-Formal methods,Modular Information Hiding and Type-Safe Linking for C (2008),http://saurabh-srivastava.com/pubs/tse-cmod.pdf,modular information hiding typesafe linking c,,obj length filter flatedecode stream iv r b endstream endobj obj type page content r resource r mediabox parent r endobj obj font r procset pdf text endobj obj length filter flatedecode stream xڥ fi e r iv r p jlam l endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream z x hg ۯ il rk
101,Lobsters,formalmethods,CSE-Formal methods,The Business Case for Formal Methods,https://www.hillelwayne.com/post/business-case-formal-methods/,business case formal method,intro use formal method aws amazon used tla espark learning two day tla specification opencomrtos time spent modeling cockroach lab cockroach lab used tla complex bug rackspace analyzing production system alloy elastic modeling existing part demo offer complex subtle dangerous use formal method consulting online resource book colin curtin peter bhat harkins jay parlar,intro packet use argue benefit formal method fm bos short explanation list benefit case study demo everything tla argument apply equally well alloy b statecharts etc adapt material specific need quick notational note leaving code verification side formal method mostly design verification much easier sell intro formal method fm debuggable design write specification system property want directly test design without write code see problem problem great fix without spent week building wrong system problem start implementing confidence building thing right use formal method save money fm find complex bug complex system complex system likely bug slip past testing qa monitoring since work higher level design hour modeling catch issue day writing test miss since require writing entire system catch bug implemented first place mean spend developer time rewriting incorrect code case study aws amazon used tla model dynamodb finding complex bug one complicated shortest error trace exhibiting bug contained high level step slipped past test qa code review would lost customer data reached production also confidently made several performance optimization able test lead problem later one engineer later estimated software modeling cut two month fourmonth schedule case study espark learning infrastructure team espark learning two engineer needed refactor large system handle extra load highvalue customer requirement system issue production two day tla specification caught several major bug new version bug would lost customer business saved revenue additional saved developer maintenance formal method also save money development time maintenance directly test design create much simpler system easier implement case study opencomrtos opencomrtos realtime operating system rtos formally specified tla opencomrtos smaller comparable embedded os developer directly attribute time spent modeling modeling also made possible junior developer contribute complex system could confidently make test change case study cockroach lab cockroach lab used tla model parallel commit optimization model found complex bug would taken ten hour debug importantly gave confidence fix actually worked saving lot time review later testing also apply fm existing legacy system find latent bug people start running case study rackspace analyzing production system alloy rackspace found bug severe needed redo year work started using fm start would saved year work entire team case study elastic within three day modeling existing part elasticsearch engine david turner found significant issue three month fixed someone reported exact issue older version elasticsearch dealing complex system formal method difference time budget two month late another two month maintenance fire demo short demo use show specification action demo tla consider bare minimum carbon credit trading platform every credit owner owner may offer credit different user recipient user accept offer case ownership credit transfer reject case nothing happens acceptreject asynchronous offer credit multiple people scaffold trade person may wait day accepting rejecting offer serious bug see give acme credit acme offer nologo nologo accepts acme make second offer brandco brandco accepts ownership transfer brandco nologo accepts ownership transfer nologo brandco offer nologo credit acme ownership transfered brandco nologo severe bug several reason complex take three people four step unit test find subtle symptom credit mysteriously disappearing people account qa monitoring find dangerous violates core requirement system cause customer lose money stop trusting subtle complex dangerous expensive bug longer bug production money lose contrast happens use spec show spec extends integer sequence tlc constant business credit set x set union x set x set x variable owner offer var owner offer init owner credit business offer propose credit owner credit offer offer credit unchanged owner accept credit credit offer offer offer credit owner owner except credit reject credit credit offer offer offer credit unchanged owner next e business credit credit propose credit accept credit reject credit spec init next var ownership change b b accepted offer validchange credit let co owner credit co co accept co co credit change system valid change changeinvariant c credit validchange c owner fifty line tla took five minute write saying changeinvariant requirement system tell model checker see design violates requirement took model checker two second find error le six minute designed system found expensive bug even set step reproduce bug write regression test code use formal method people ask downside uncertain think would useful first place specification flexible enough work legacy system programming language tradeoff get automatic code translation take design automatically generate matching code would come cost flexibility able use language legacy code need absolutely sure code match design need different tool also need spend lot time money making sure match writing specification best working complex system keep whole system head involve lot intricate logic specification may provide much benefit rough rule thumb think specifying thing would take le week implement worth effort finally specification good finding simple implementation error like uncaught exception unhandled null know bug going simple lowcost likely find test qa specification convince bos also get service consulting aws paper say people learn basic tla within week though help skilled instructor student learn le three day one experienced instructor teaching specification language written online resource book tla currently working new documentation alloy workshop three straight day lab group exercise handson experience actually teaching people opposed checking box read email thanks colin curtin peter bhat harkins jay parlar feedback
102,Lobsters,formalmethods,CSE-Formal methods,Making Whiley Boogie! (2017),https://homepages.ecs.vuw.ac.nz/~djp/files/IFM17_preprint.pdf,making whiley boogie,login welcome ecssms website help selecting wrong realm forgotten password forgot password nt performed account registration register online cookie problem ip address mismatch http http kerberos authentication prefer kerberos authentication prefer password authentication popup authentication box authentication dialog set cookie requesting help bug ecsvuwacnz,login welcome ecssms website logging website able access protected resource area website personalised webserver requires authenticate page requires authentication help several reason may unable log selecting wrong realm using ec account log realm set ecsvuwacnz however using vuw staff student account used elsewhere university realm set staffvuwacnz studentvuwacnz appropriate forgotten password forgotten password please visit forgot password page find reset nt performed account registration prior first use student school need follow registration process use ec account different sc account may use elsewhere university register please go one computer lab school register online cookie problem website follows industry bestpractice us encrypted session cookie authenticate request server cookie written hard disk browser block cooky login may succeed subsequent request webserver may denied please allow browser accept session cooky necessary add ecswgtnacnz list trusted site browser option ip address mismatch webserver check ip address validating login subsequent access isp business run proxy server could potentially connect two ip address given session find connecting ip address compare address connect via http address connect via http address differ selecting http option may help log access site always connecting http version website kerberos authentication supporting web browser log automatically using kerberos within ec environment currently common browser konqueror firefox safari internet explorer support kerberos tell browser prefer kerberos password authentication set cookie prefer kerberos authentication prefer password authentication even browser kerberos support may fail log automatically may logged within last hour kerberos ticket expired typing kinit shell prompt every morning give fresh ticket popup authentication box using internet explorer may hitting ie bug pop authentication dialog kerberos authentication fails avoid happening set cookie use password authentication preference kerberos requesting help usual trouble logging contact ec tech staff email giving much information possible bug ecsvuwacnz
103,Lobsters,formalmethods,CSE-Formal methods,"Using Z: Specification, Refinement, and Proof",http://www.cs.cmu.edu/~15819/zedbook.pdf,using z specification refinement proof,,âãïó obj producer acrobat distiller window title keywords author creator dvipsone http wwwyandycom creationdate endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tc using z tj tf tm k proof tj tf tm k jim woodcock tj tf tm k university oxford tj tf tm k jim davy tj tf tm k university oxford tj tm k copyright tj k td hypertext version tj k td using z tj k td easily copied distributed tj td printed choose would ask remember tj copyright reproduce material please include appropriate tj acknowledgement material encourage u tj publisher buying copy book tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj length stream endstream endobj obj procset pdf endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj length stream k j j w g l bt tf tm k tc content tj tf tm k foreword xi tj td using book xiii tj acknowledgment xv tj tf td introduction tj tf td formal method tj cics experience tj z notation tj importance proof tj abstraction tj tf td propositional logic tj tf td propositional logic tj conjunction tj disjunction tj implication tj equivalence tj negation tj tautology contradiction tj tf td predicate logic tj tf td predicate calculus tj declaration tj substitution tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj length stream bt tf tm k g tc vi tj tm k universal introduction elimination tj td existential introduction elimination tj satisfaction validity tj tf td equality description tj tf td equality tj onepoint rule tj uniqueness quantity tj description tj tf td set tj td tj tf td membership extension tj set comprehension tj power set tj cartesian product tj union intersection tj type tj tf td tj tf td declaration tj abbreviation tj generic abbreviation tj axiomatic tj generic tj set predicate tj tf td relation tj tf td binary relation tj domain range tj relational inverse tj relational composition tj closure tj tf td function tj tf td partial function tj lambda notation tj function relation tj overriding tj property function tj finite set tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj length stream bt tf tm k g tc vii tj tf tm k sequence tj tf td sequence notation tj model sequence tj function sequence tj structural induction tj bag tj tf td free type tj tf td natural number tj free type tj proof induction tj primitive recursion tj consistency tj tf td schema tj tf td schema tj schema type tj schema declaration tj schema predicate tj renaming tj generic schema tj tf td schema operator tj tf td conjunction tj decoration tj disjunction tj negation tj hiding tj composition tj tf td promotion tj tf td factoring operation tj promotion tj free constrained promotion tj tf td precondition tj tf td initialisation theorem tj precondition investigation tj calculation tj structure precondition tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj length stream bt tf tm k g tc viii tj tf tm k file system tj tf td programming interface tj operation upon tj complete description tj system tj formal analysis tj tf td data tj tf td tj relation nondeterminism tj data type data tj simulation tj relaxing unwinding tj tf td data schema tj tf td relation schema operation tj forward simulation tj backwards simulation tj tf td functional tj tf td retrieve function tj functional tj calculating data tj promotion tj tf td calculus tj tf td statement tj assignment tj logical constant tj sequential composition tj conditional statement tj iteration tj tf td telecommunication protocol tj tf td external view tj design sectional view tj relationship external sectional view tj enriching model tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj length stream bt tf tm k g tc ix tj tf tm k operating system scheduler tj tf td process tj tj chain tj design tj correctness design step tj tf td bounded module tj tf td tj design tj retrieve relation tj implementation tj executable code tj tf td save area tj tf td tj design tj design tj code tj td index tj notation tj resource tj book tj thanks tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj length stream endstream endobj obj procset pdf endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream k j j w g l bt tf tm k tc foreword tj tf tm k formal method require soundly based language tj td emphasis z literature use z language tj arena use z extensive fostered many positive tj aspect including importance placed careful merging tj text formal material tj td construction clear cornerstone formal tj td development author current book make tj little incentive go formalism provide tj tj td formal method also include precise notion correctness tj td formal method pin exactly mean design satisfy tj provide tractable proof obligation use development tj requires formal book address notion develop tj ment based z tj td author emphasis proof applauded although sometimes tj td seen undertaking formal proof system tj major reliance placed also strong reason understanding tj notion proof even use full formality anticipated tj td pedagogically experience proof best route thorough tj td standing many logical data operator language tj furthermore attempting even outline proof design tj inculcate good taste construction tj td practical purpose perhaps important reason studying tj td proof notion proof obligation used mental check tj review inspection stage design even formal proof tj presented important remember error made early develop tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tc xii tj tm k ment process extremely expensive correct detected late one tj td key message proof investment early development phase tj project pay dividend term productivity tj td therefore full agreement author book tj td tackle issue data proof method tj executable code one intends use proof aspect project tj early decision data representation repay investment tj clearly tj td addition set logic notation z schema notation whose use tj td give rise delicate issue calculation precondition etc working tj appropriate development method z reader book tj hand expert carefully motivate rule tackle tj question correct author depth experience also clear tj warning throughout text potential pitfall reader tj aware tj td derive maximum book reader prepared tj td study material detail made easier careful progression tj idea wellchosen example reader also follow larger tj case study towards end book investment hand tj somely repaid thorough understanding development method z tj code tj tf td b jones tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream k j j w g l bt tf tm k tc using book tj tf tm k book contains enough material three course study course tj td mathematics software engineering course formal tj course material adapted number way tj support course part programme selfpaced learning tj make book easier use divided six part tj tf td introduction tj tf td chapter explains use formal method introduces tj td z notation discus importance proof explain tj make good tj tf td logic tj tf td chapter introduction mathematical logic explain tj td propositional predicate calculus introduce concept tj equality description tj tf td relation tj tf td chapter cover set relation show specify tj td object relationship using piece mathematics tj show also mathematical logic chapter used tj reason tj tf td schema tj tf td chapter introduce schema language explain tj td schema used structure using logical tj combinators sequential composition promotion present tj technique checking logical consistency tj tf td tj tf td chapter concerned formulate tj td theory within relational calculus extend cover tj involving schema show concrete design tj may produce executable code tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tc xiv tj tf tm k case study tj tf td chapter chapter contain case study tj td case study show z notation tj used produce abstract concrete design tj programming language implementation tj td part combined provide appropriate introduction using tj td z whatever background reader tj td material book already used number taught tj td course graduate undergraduate level example include tj tf td fulltime msc computation tj tf td year tj td logic relation taught core course schema case study tj taught optional course tj tf td parttime postgraduate diplomamsc software engineering tj tf td year tj td logic relation taught single core course schema tj another core course optional course course tj delivered week intensive teaching tj tf td ba computer science tj tf td year tj td logic relation taught part discrete mathematics course tj year schema taught part software engineering tj course second year tj td notice omitting development case study tj td used course cover tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj length stream k j j w g l bt tf tm k tc acknowledgment tj tf tm k book based upon experience teaching using formal method tj td programming research group oxford elsewhere course tj teach draw inspiration work others jeanraymond abrial tj paul gardiner ian hayes jifeng tony hoare jones carroll morgan tj sander ib holm mike spivey bernard sufrin tj td grateful many others john axford rosalind barden stephen tj td brien neil brock tim clement david cooper harwood jonathan hoare tj fleur howles michael jackson roger jones steve king peter lupton andrew tj martin colin ohalloran steve schneider roger shaw jane sinclair susan tj stepney pete verey winn john wordsworth maureen york tj td grateful also student attended lecture tj td year programming research group royal holloway university tj london university reading university klagenfurt tj industrial course summer school europe north america africa tj comment suggestion much appreciated tj td system save area case study based upon work carried tj td ian hayes ib better example simulation suggested tj carroll morgan paul gardiner better example owe tj much work jones diagram tj k td chapter tj k td supplied tj td london transport museum tj td jackie harbor helen martin derek moseley prentice hall profes tj td sional sympathetic every turn last two year would le tj enjoyable good humour gentle tolerance quiet tj tj td would also like thank family without whose love support tj td book could completed book dedicated tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tc xvi tj tm k would like acknowledge contribution made tj td following institution organisation development material tj presented book tj tf k td tj tf k td bnr europe tj tf k td tj tf k td british telecom tj tf k td tj tf k td defence research agency malvern tj tf k td tj tf k td department computer science reading tj tf k td tj tf k td department continuing education oxford tj tf k td tj tf k td engineering physical science research council tj tf k td tj tf k td formal system europe ltd tj tf k td tj tf k td ibm uk laboratory tj tf k td tj tf k td kellogg college oxford tj tf k td tj tf k td logica cambridge tj tf k td tj tf k td pembroke college oxford tj tf k td tj tf k td programming research group oxford tj tf k td tj tf k td laboratory tj td thank tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tc chapter tj et k j j w l bt tf tm introduction tj tf tm k today software come extensive documentation user guide reference tj td manual design document online help system interactive tj tutorial friendly introduction dummy yet behaviour soft tj ware often surprise user designer alike component interact tj interfere undesirable property emerge system fail meet tj requirement tj td spectacular consequence make headline aircraft crash tj td train collide people receive fatal dos radiation emergency telephone tj service withdrawn le spectacular face every day time wasted tj expended avail important project scrapped health tj damaged sheer frustration software fails tj live expectation tj td many explanation requirement upon piece tj td software hard way system may used hard tj anticipate always demand additional functionality indeed tj fact many piece software actually work work well tj indication skill whose job develop tj tf tm k formal method tj tf tm k one way improve quality software change way soft tj ware documented design stage development release tj existing method documentation large amount text picture tj diagram often imprecise ambiguous important informa tj tion hidden amongst irrelevant detail design discovered tj late making expensive impossible correct tj et endstream endobj obj procset pdf text font r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tj tf k td tj tf tm k tj tf tm k introduction tj tf tm k alternative tj k td formal tj k td method based upon elementary mathe tj td matics used produce precise unambiguous documentation tj information structured presented appropriate level abstraction tj documentation used support design process guide tj subsequent development testing maintenance tj td seems likely use formal method become standard prac tj td tice software engineering mathematical basis tj civil mechanical engineering purpose add precision tj aid understanding reason property design whatever tj discipline use mathematics expensive experience tj actually reduce cost tj td existing application formal method include use probability tj td theory performance modelling use contextfree grammar compiler tj design use relational calculus database theory formal method tj described book used design large tj software system intended description state statebased tj property includes theory allows mathematics tj used every stage program development tj tf tm k cics experience tj tf tm k cics one successful piece software world tj licence world top company use cics stand tj customer information control system family transaction processing tj product produced ibm uk laboratory hursley park cics provides tj data access communication integrity security service put simply cics tj manages information tj td use automated teller machine san francisco account tj td local branch oxford debited even though machine thousand tj mile away busiest time may many thousand tj customer bank using service world expect tj served within reasonable time cics way achieving tj td regular release cics since release tj td introduced additional feature extended structure existing tj code early complexity system started become tj serious problem company decision made redesign tj cics module aim making extension easier important tj part proposed solution involved precise way specify tj functionality tj et endstream endobj obj procset pdf text font r r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tc tj tf tm k tj tf tm k z notation tj tf k td tj tm k precision requires use mathematical technique tj td time little known outside academia happy coincidence brought tj cics manager tony kenny oxford professor tony hoare together tj conference hatched plan apply oxford idea hursley problem tj oxford advised formal method could used tj design new cics module hursley showed method could tj adapted problem industrial scale tj td particular formal method tj k td z notation tj k td used specify new tj td cics functionality hursley programmer used writing tj english rigorous mathematical notation seen challenge tj practice notation proved easy learn apply even program tj mers previous experience mathematics result perceived tj improvement quality reliability delivered code tj td cics product designed using z cicsesa version tj td nounced june april queen award technological tj achievement conferred upon ibm united kingdom laboratory limited tj oxford university computing laboratory development use tj advanced programming method reduces development cost signif tj icantly enhances quality reliability namely z tj tf tm k z notation tj tf tm k z notation based upon set theory mathematical logic set theory tj used includes standard set operator set comprehension cartesian product tj power set mathematical logic predicate calculus tj gether make mathematical language easy learn apply tj however language one aspect z tj td another aspect way mathematics structured tj td mathematical object property collected together tj k td schema tj k td tj td pattern declaration constraint schema language used tj describe state system way state may change tj also used describe system property reason possible tj k tj k td design tj td characteristic feature z use tj k td type tj k td every object mathe tj td matical language unique type represented maximal set current tj well providing useful link programming practice tj notion type mean algorithm written check type tj every object several typechecking tool exist support tj practical use z tj et endstream endobj obj procset pdf text font r r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj length stream bt tf tm k g tj tf k td tj tf tm k tj tf tm k introduction tj tf tm k third aspect use natural language use mathematics state tj td problem discover solution prove chosen design meet tj use natural language relate mathematics object tj real world job often partly achieved judicious naming tj variable additional commentary vital wellwritten tj tj k td perfectly obvious tj k td reader tj td fourth aspect may develop system constructing tj td model design using simple mathematical data type identify desired tj behaviour may tj k td tj k td description constructing another model tj td respect design decision made yet closer implementation tj appropriate process continued executable tj code produced tj td z notation mathematical language powerful struc tj td turing mechanism combination natural language used tj produce formal may reason using tj proof technique mathematical logic may also tj yielding another description closer executable code tj td z intended description nonfunctional property tj td usability performance size reliability neither intended de tj scription timed concurrent behaviour however formal tj method well suited purpose may use method tj combination z relate state statechange information comple tj mentary aspect design tj tf tm k importance proof tj tf tm k book place considerable emphasis upon proof introduce tj language mathematical logic explain use proof system tj introduce language set relation explain formal proof tj may constructed object introduce language tj schema show prove consistent tj prove one another intention twofold tj show proof add quality software development second show tj proof feasible part industrial use formal method tj td reason attempt construct proof tj td property likely detect problem early stage tj system development process constructing proof help u tj understand requirement upon system assist u identifying tj hidden assumption proof stage make tj contribution quality software tj et endstream endobj obj procset pdf text font r r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj goto type annot subtype link rect c border h endobj obj goto type annot subtype link rect c border h endobj obj length stream bt tf tm k g tc tj tf tm k tj tf tm k abstraction tj tf k td tj tm k design stage proof show u design correct tj td also tj k td tj k td correct additional insight invaluable tj td requirement evolve design consequence easier tj investigate implementation stage proof help u ensure tj piece code behaves according tj contribution quality made tj td construction proof essential part writing tj td proofreading essential part writing book tj without proof untested may inconsistent may describe property tj intended omit may make inappropriate tj assumption practice proof make better tj td seems part software engineering folklore proof impos tj td sible industrial scale however experience tj involved many largescale application formal method tj involved proof others seen technique involving proof tj successful formal method used light touch tj proof conducted appropriate level formality tj td many situation rigorous argument semiformal tj td bring desired improvement quality tj critical situation may necessary increase level formality tj correctness design beyond doubt situation completely tj formal proof may required trick using formal method tj know proof worth tj tf tm k abstraction tj tf tm k essential property good appropriate choice abstrac tj tion good example provided various map london tj underground map published faithful tj geography line twist turn track relative tj distance station recorded faithfully scale however tj purpose map show traveller order station line tj various interchange line map made tj extract information tj td map changed abstract representation called tj td diagram connectivity station network preserved tj last passenger could see glance route destination tj abstraction case physical layout tj key usefulness diagram figure show tj published version change tj et endstream endobj obj procset pdf text font r r r extgstate r endobj obj r xyz null null rect endobj obj r xyz null null rect endobj obj type xobject subtype image name width height bitspercomponent colorspace r length stream c c c c h c e p c r c dsc c ci u r c b c c w cd c r e cb c c c c c c c e x c c l b c c b e k k c l l c c h b l c dd c c lm jjkwnj l lg p qbb r b c ejakm l q q bb c r ull v c rb bbbbbbb brc dd cb rbbb l v u u f h gutgfg gkeg g ykjn kc e b k e gn gv g b b gk de rf g f c g kn e e gtg z l g jpt nej c f g c v e kuktg tgrx enh g gj z ed c c jli g gnwsznen ng x ia v ce ic c e u c nggt n g v e nn j c e e g enefgg oj jtgj g g c v j c x k h gf kj h gi j c c h fcix g kgkv g n v nn gf jg k h ck c cc x r k c c ep e w e e c x x kn eeppe e sz g e v g e tppepei g nsni v fp nk ge n go p g vfx n tten g gin pkgtex te c c nlxt xg gg xlg p xt nw k gg pk ivit c ipvgx vvj eejpexn u l nx bcc vjg e nrfv ox xntxexo sjvjn xn kk g l tsl v jvg w x k jv evk soijx nzgn gn wn nkgg stt n l tolts gt n ettg l u ei eivxrs jnv g x xo ull ji b
104,Lobsters,formalmethods,CSE-Formal methods,ARMY: A Deductive Verification Platform for ARM Programs Using Why3,http://inforum.org.pt/INForum2012/docs/20120013.pdf,army deductive verification platform arm program using,,obj goto endobj obj army deductive verification platform arm program using endobj obj goto r fit endobj obj length filter flatedecode stream rr k é rx k
105,Lobsters,formalmethods,CSE-Formal methods,Hypermodeling Hyperproperties,https://www.hillelwayne.com/post/hyperproperties/,hypermodeling hyperproperties,safety liveness hyperproperties example observational determinism observational determinism specifying hyperproperties tla sometime sometimes never hyperspec instantiation parameterize hyperproperties hard selfcomposition ctl prism hyperltl application hyperproperties research noninterference hyperproperties industry toyota o noninterfering using hyperproperties inventing triad contract type test propertybased testing tactic metamorphic relation additional resource,design program usually look two kind property bad thing never happen good thing guaranteed happen called safety liveness property respectively property want hold true every possible program behavior always complete every request liveness property system every program trace complete every request hold give example behavior server never responds maximum response time safety property false give trace server take longer respond average response time safety liveness defined individual behavior give trace server take respond outlier instead need show behavior program average property defined set behavior hyperproperties hyperproperties significantly complex regular property correspondingly difficult check also harder reason general sort relate intuition safety hypersafety hyperliveness let look example hypersafety property example tla assume basic familiarity raw tla pluscal post followable without might find introduction helpful example observational determinism two thread nonatomically incrementing counter first store value current thread increment stored value one reassigns global counter extends integer tlc sequence thread algorithm thread variable x define finalistwo x end define fair process thread thread variable tmp begin get tmp x inc x tmp end process end algorithm intention spec probably increment x twice corresponds property finalistwo end run x check finalistwo model checker give u counterexample show error trace state x pc get get tmp state x pc inc get tmp state x pc inc inc tmp state x pc done inc tmp state x pc done done tmp state stuttering finalistwo want maybe want weaker property care final answer long possible execution get case u eventually get might problem long execution get called observational determinism od system may internally nondeterministic outsider observer look deterministic od hypersafety property provide single timeline counterexample know timeline get x value hand provide two trace counterexample long get different x value since property defined pair behavior say od specifying hyperproperties tla fundamental limit language tla spec describes whether given sequence state valid behavior system way step outside frame talk behavior something unique tla like spec language make tradeoff important specify leslie lamport sometime sometimes never cover lot principle later used tla principle also happen make natively expressing hyperproperties impossible still need cheat little tla express property individual behavior need express pair behavior write new specification behavior new spec corresponds pair behavior old spec think running two copy old spec comparing result regular spec becomes hyperspec hyperspec first hyperspec breakdown show spec extends integer tlc sequence variable variable instance thread x pc tmp instance thread x pc tmp init init init next next next spec init next next next hypersafe extends integer tlc sequence variable variable thread spec three variable since going include two copy need separate set variable pc bookkeeping variable get translating pluscal raw tla instance thread x pc tmp etc instantiation thread module effectively namespace operator threadstla since thread three variable need parameterize spec saying variable described action tla module namespaced example part breakdown finalistwo finalistwo action defined express behavior hyperspec term behavior init init init next next next since two set variable disjoint need anything special init initialization two thread module normally next thing get complicated nextstate relation need describe variable change next describe variable change lucky thread weaklyfair always terminating algorithm two instance share variable common specific case safely run two spec parallel spec init next next next hypersafe spec need stutterinvariant wf guarantee neither instance allowed crash finally hypersafe hyperproperty want test hyperspec regular property express tla running model give u error expected show error trace state get get get get state get inc get inc state inc inc get done state inc done inc done state done done done done state stuttering hyperproperties hard particular style hyperspec called selfcomposition work ksafety property ksafety subset hypersafety though general hypersafety lead much complicated hyperspecs challenge emulation sure sort hack need maybe using wrong tool job right tool notation naturally represent concept reachability hyperproperty tla regular trivially checkable property ctl hyperproperties equivalent probabilistic meaning use something like prism practice model checker strong enough handle hyperproperties work limited specification prism say reach consensus least time handle tuples string tradeoff also specialist notation designed hyperproperties hyperltl hyperltl even niche rest formal method reader would find hyperltl immediately useful also already know eat hat application hyperproperties research almost hyperproperty research security many interesting security property hyperproperties one reason hard get right take noninterference several different flavor noninterference boil serious version access control system enforces access control see secret resource noninterfering system infer anything secret resource example alice set facebook friendlist bob friend alice eve go show friendship alice eve show bob mutual friend infer bob alice friend list even though see friend list break noninterference satisfying noninterference mean showing behavior secret information identical public information hyperproperty slas like mean response time uptime percentage technically hyperproperties usually studied probabilistic lot paper namedrop slas example nobody actually try specify sla hyperprop think mostly show hyperproperties exist outside security hyperproperties industry people used formalism industry toyota proofof concept work verifying hardware group work hyperproperties think term example team proved o noninterfering brought noninterference hypersafety oh hey kinda neat aside using hyperproperties going formally verifying hyperproperties time soon still think useful help think system different way learned hyperproperties started seeing everywhere correct optimization safe refactoring hyperproperties two codebases produce output input produce output ten commits ago logic puzzle cooked two distinct solution hyperproperty use selfcomposition make sure logic puzzle unique solution pretty handy inventing partial degradation system system work even one server go one property system degrades x one server go hyperproperty similarly two malicious node damage one malicious node hyperproperties also give u better intuition verifying code majority verification fall triad contract type test type contract good capturing behavior individual function call positive relationship function call associative test much better capturing relation function call look like raising spec hyperspec test run function several time hyperspec run spec several time also suspect hyperproperties generic regular property might explain propertybased testing tactic involve hyperproperties see also metamorphic relation another angle topic lot success story behind arguably metamorphic relation subset hyperproperties additional resource
106,Lobsters,formalmethods,CSE-Formal methods,Synthesizing Loop-Free Programs with Rust and Z3,http://fitzgeraldnick.com/2020/01/13/synthesizing-loop-free-programs.html,synthesizing loopfree program rust,gulwani et al solver table content motivation peephole optimizer edit john regehr design application retargetable peephole optimizer davidson et al overview task loopfree componentbased formalizing problem brief introduction smt solver open run snippet online editor open run snippet online editor counterexampleguided iterative synthesis finite synthesis verification de law cegis component verifying componentbased program finite synthesis componentbased program implementation repository program representation building program defining component trait object crate specification synthesizer location mapping souper verification finite synthesis cegis loop dead code elimination dce result conclusion reference gulwani et al gulwani et al sasnauskas et al souper bansal et al henry warren sygus,post make extensive use math symbol us mathjaxjs render therefore recommend enabling javascript automatically finding program implement given specification called program synthesis main difficulty search space huge number program size n grows exponentially enumerating every program size n checking whether one satisfies specification moving program size scale however field advanced using smarter search technique prune search space leveraging performance improvement smt solver time limiting scope problem post explain one approach modern program synthesis counterexampleguided iterative synthesis componentbased loopfree program described synthesis loopfree program gulwani et al dissect exactly term mean also walk implementation written rust us solver hope post twofold hope people unfamiliar program synthesis like long ago get little le unfamiliar learn something new topic tried provide many example break dense logic formula paper smaller approachable piece hope folk already familiar kind program synthesis help diagnose performance issue implementation able reproduce synthesis result reported literature difficult benchmark problem synthesizer fails even find solution patience run table content motivation write program writes program lazy write course however many valid reason person lazy might want synthesize program program quite tricky write correctly hand program synthesizer might succeed might fail quick isolate rightmost zero bit word using three bit manipulation instruction rightmost zero bit v input output bit set get yet okay answer isolaterightmostzerobit x x x b add x b c b c return c program synthesizer find solution second minimallength solution minute would take quite longer hand return problem throughout rest post use running example another reason use program synthesizer might need write many program time write hand take example peephole optimizer considers sliding window instruction sequence sequence check know equivalentbutfasterorsmaller instruction sequence know better instruction sequence replaces original instruction better one peephole optimizers typically constructed patternmatching rule identify suboptimal instruction sequence paired improved instruction sequence replace match new peepholeoptimizer patternn replacementn replacementi little optimized miniprogram writing new peephole optimizer scratch hand would write n optimized miniprograms n big instcombine peephole optimizer patternandreplacement pair even half many way want write instead writing optimized miniprograms hand use original instruction sequence specification feed program synthesizer see synthesizer find optimal instruction sequence thing finally use original instruction sequence synthesized optimal instruction sequence patternandreplacement pair automatically construct peephole optimizer idea first proposed bansal et al automatic generation peephole superoptimizers edit john regehr pointed idea floating around since much earlier bansal et al paper published pointed design application retargetable peephole optimizer davidson et al example noted even first time came overview task program synthesis act taking specification automatically finding program satisfies order make problem little tractable limiting scope two way loopfree synthesizing program without loop componentbased synthesizing program expressed composition given library component loopfree limitation limiting many use case example peephole optimizers often consider instruction sequence span across loop boundary componentbased synthesis mean rather synthesizing program using combination number target expression synthesizer given library component synthesizes program use component exactly synthesizer rearranges component rewiring input output find configuration satisfies specification given library n component construct program form synthesizedprogram input return parameter paramsi either tempj variable defined earlier program one original input example given two component input parameter x synthesizer construct following candidate program implicitly returning variable defined last g x x b f x g x x b f f x b g x x f x b g x f x b g x f x b g program possibly construct given two component synthesizer construct following program use every component f x synthesizer construct program us f component f x b f c g b b finally construct last program last program us function h component given library f x b h x following table describes property componentbased synthesis comparing fully general version program synthesis general synthesis componentbased synthesis shape synthesized program using number target language expression using component library size synthesized program varies exactly size library since component library used exactly synthesizer component function fixed bitwidth integer also known smt solver parlance correspond single instruction virtual instruction set add xor etc principle could also higherlevel function anything else encode smt query smt query later componentbased synthesis make synthesis problem easier foist decision u time invoke synthesizer must choose library available component component used exactly synthesized program want synthesize program performs multiple addition include multiple instance add component library component synthesizer might able find solution many component slow synthesizer let generate nonoptimal program potentially contain dead code summarize componentbased synthesis loopfree program input specification library component output program satisfies specification expressed term given component error find program formalizing problem order synthesize program need specification describing desired behavior specification logical expression describes output program given input define specification vec program input program output phimathrm spec vec expression relating input output expression true desired output running program input vec library component given multiset specification describing behavior component specification come many input take eg add b component take two input component take one input well logical formula relating input output component input output expression similar notation program specification subscript vec imathrm th input variable oi imathrm th output variable phii vec oi logical expression relating imathrm th input output define n number component library isolatingtherightmostzerobit example minimal component library could give synthesizer still preserving ability find desired solution would library consisting exactly component correspond three instruction solution program component component definition description texttt bvadd addone operation bitvectors texttt bvand bitwise operation bitvectors texttt bvnot bitwise operation bitvectors program synthesis expressed existsforall problem want find whether exists program p satisfies specification input given output return begin align exists p quad forall vec quad quad p vec implies phimathrm spec vec end align break translate english exists p exists program p forall vec input vec output p vec run program input vec get output implies phimathrm spec vec specification phimathrm spec satisfied existsforall formalization important understand eventual implementation query smt solver case pretty much formula exactly p abstraction hiding detail component algebraic transformation perform pose whole problem solver single query nonetheless implementation follows formalization get far handle brief introduction smt solver continue without briefly discussing smt solver capability smt solver like take logical formula potentially containing unbound variable return whether satisfiable assignment unbound variable make assertion true also model describing assignment unsatisfiable assertion false assignment value unbound variable make true smt solver take assertion lisplike input language called example satisfiable smt query x integer nt know one declareconst int x know x however assert x check whether assertion satisfiable case checksat get model assignment free variable model report x getmodel open run snippet online editor note even though exists existential quantifier solver implicitly finding solution x exists x x ie exists x x equal smt solver support working higherorder formula explicit exists existential forall universal quantifier nested inside mode tend much slower also incomplete rely firstorder implicitly exists existential query formula potentially unbound variable without nested exists existential forall universal quantification add second assertion example make unsatisfiable declareconst x int assert x new also x assert x time result unsatisfiable conflicting requirement x checksat getmodel open run snippet online editor assertion x x put conflicting requirement x therefore value x make assertion true therefore whole query unsatisfiable counterexampleguided iterative synthesis counterexampleguided iterative synthesis cegis enables u solve secondorder existsforall query like program synthesis problem offtheshelf smt solver cegis decomposing difficult query multiple firstorder exists existentially quantified query kind query offtheshelf smt solver excel solving first look cegis general examine required specifically componentbased cegis cegis begin choosing initial finite set input least one really matter came use random number generator start looping first step loop finite synthesis generates program correct least input finite set may may correct input know yet next take candidate program verify want determine whether correct input case done input candidate program incorrect called counterexample counterexample add set continue next iteration loop next program finite synthesis produce correct old input also new counterexample counterexample force finite synthesis come general program correct input finally come fully general program work input without ado general cegis algorithm begin align texttt cegis phimathrm spec vec qquad langle text initial finite input rangle qquad qquad textbf loop qquad qquad texttt finite synthesis qquad qquad textbf solve p exists p ldots lvert rvert qquad qquad qquad left p land phimathrm spec right qquad qquad qquad land ldots qquad qquad qquad land left p lvert rvert lvert rvert land phimathrm spec lvert rvert lvert rvert right qquad qquad textbf texttt unsat qquad qquad qquad textbf error text qquad qquad qquad qquad texttt verification qquad qquad textbf solve vec exists vec p vec land lnot phimathrm spec vec qquad qquad textbf texttt unsat qquad qquad qquad textbf return p qquad qquad textbf else qquad qquad qquad textbf append vec qquad qquad qquad textbf continue end align cegis decomposes existsforall synthesis problem two part finite synthesis first query finite synthesis query find program correct least finite example input breakdown exists p ldots lvert rvert exists program p output ldots lvert rvert p output running program input land phimathrm spec specification satisfied input output land ldots land left p lvert rvert lvert rvert land phimathrm spec lvert rvert lvert rvert right lvert rvert output running program input lvert rvert specification satisfied input output note firstorder existential query using nested forall universal quantification possible input instead instantiating new copy p si oi land phimathrm spec si oi example finite set example langle rangle finite synthesis query would begin align exists p qquad left p land phimathrm spec right qquad land left p land phimathrm spec right qquad land left p land phimathrm spec right end align inline expansion work finite set input much smaller practice typically ten even many size set possible input eg bitvectors bit wide query unsatisfiable program implement specification every one input since subset possible input mean program implement specification input since searching mean search failed return error query satisfiable resulting program p satisfies specification input know whether satisfies specification possible input yet example langle rangle know program p correct given input may may correct given input know yet verification verification take program p produced finite synthesis check whether satisfies specification input naturally expressed forall universally quantified query input instead ask exists input program specification satisfied thanks de law breakdown verification query exists vec exist input vec output p vec result running program vec land lnot phimathrm spec vec specification satisfied verification query unsatisfiable input p specification satisfied mean p satisfies specification input searching found return however verification query satisfiable discovered counterexample new input vec program satisfy specification program p buggy given vec p program searching next add new vec finite set input next iteration loop synthesize program produce correct result given vec addition input loop iterates add input forcing finite synthesis query produce general program eventually produce fully general program satisfies specification input worst case adding every possible input finite synthesis come program fails verification given given practice counterexample vec verification find tends representative many input also currently unhandledby p adding vec next iteration finite synthesis produce program handle vec also input vec representative example finite synthesis might produced program handle langle rangle buggy given positive even number verification find counterexample get appended langle rangle next iteration loop synthesizes program also work work positive even number make cegis effective practice finally notice finite synthesis verification firstorder exists existentially quantified query offtheshelf smt solver like solve cegis component know cegis work abstract dive use synthesize componentbased program every loopfree program composition component flip representation location mapping instead listing program linebyline defining component line list component defining line component end instead referencing argument component variable name reference either line argument defined come result earlier component nmathrm th program input example consider program isolate rightmost zero bit word isolaterightmostzerobit x x b add x c b return c exactly represent program following location mapping input x component line b add x line program component placed line entry represents argument come inputslen argument input otherwise inputslen argument come value defined component line inputslen argument x line c b line argument b line x line argument x componentbased cegis synthesizing kind location mapping let u represent whole componentbased program handful number line argument index number something represent directly smt query verifying componentbased program start verying componentbased program look finite synthesis verification take location mapping connects input output variable together described location mapping asks smt solver find counterexample convenience keep repeating vec ldots vec time define textbf p set parameter variable component library textbf p vec cup ldots cup vec similarly define textbf r set temporary result variable component library textbf r ldots running example isolating rightmost zero bit minimal library consists begin align texttt bvadd texttt bvand texttt bvnot end align therefore begin align n textbf p textbf r end align want constrain whole library behave according individual component specification output component indeed bitwise input output component indeed bitwise input define phimathrm lib combination every component specification phii phimathrm lib textbf p textbf r phii vec land ldots land phii vec minimal example library phimathrm lib get begin align phimathrm lib textbf p textbf r texttt bvadd land texttt bvand land texttt bvnot end align constraint satisfied wrapping addition bitwise bitwise finite synthesis run verification already access candidate location mapping constructing verification query location mapping tell u actual argument align formal parameter component mean know connection input variable program input temporary result variable component know dataflow component make concrete isolatingtherightmostzerobit example produced candidate program x b add x c b library begin align texttt bvadd texttt bvand texttt bvnot end align know texttt since result component since first argument b us component know texttt therefore know equality component input variable ii textbf p either output variable oj textbf r one program input vec equality given u directly location mapping candidate program verifying additionally candidate program implicitly returning last temporary variable c result component phimathrm spec vec represents result whole program know put equality together example program get left x right land left right land left right land left x right land left right represents connection various component candidate input output imagine connecting component together like circuit represents wire component define componentconnecting equality phimathrm conn general definition begin align phimathrm conn vec textbf p textbf r left omathrm last right land left vec vec v right land ldots land left vec vec v right end align vec v actual argument candidate program pass imathrm th component phii vec v made entry either input vec temporary result textbf r defined earlier component program equivalent argument field defined component example location component map omathrm last output variable component last line program according candidate location mapping break left omathrm last right output whole program equal result component last line program land left vec vec v right first component input assigned argument equal land ldots left vec vec v right last component input assigned argument equal note omathrm last vec v property candidate location mapping known verification query variable exists existentially forall universally quantifying query expand inline constructing verification query ok way finally define verification constraint use componentbased cegis begin align exists vec textbf p textbf r qquad phimathrm conn vec textbf p textbf r land phimathrm lib textbf p textbf r land lnot phimathrm spec vec end align verification constraint asks given connected component together described candidate location mapping input specification satisfied break exists vec textbf p textbf r exist input output phimathrm conn vec textbf p textbf r component connected together described candidate program location mapping land phimathrm lib textbf p textbf r component behave defined library land lnot phimathrm spec vec specification satisfied finding solution query give u new counterexample vec add set example future iteration cegis loop failure find solution query mean candidate location mapping corresponds program correct input case done finite synthesis componentbased program finite synthesis composes library component program correctly handle given example input querying smt solver location mapping contains assignment component line program assignment variable actual argument recall example location mapping input x component line b add x line argument x line c b line argument b line x line argument x encode location mapping finite synthesis query every component parameter textbf p every component result textbf r get associated location variable finite synthesis query searching assignment location variable call set location variable l refer particular location variable lx x either component result textbf r component parameter textbf p l lx vert x textbf p cup textbf r location variable result l oi equivalent line field component jsony syntax example location mapping determines line program component assigned therefore temporary result defined location variable parameter lp equivalent entry argument list jsony syntax location variable determine associated parameter get value either imathrm th program input temporary result defined jmathrm th line program use one index space line number program input follow convention entry argument list json syntax lx le number program input refers lx mathrm th program input otherwise lx greater equal number program input subtract number input lx get line number referring value lx refers location input program input vec input lvert vec rvert input lvert vec rvert lvert vec rvert line line number lvert vec rvert line lvert vec rvert n line n loopfree componentbased program described location mapping however reverse true location mapping describe valid program consider location mapping input x component line add x line argument x line sub x line argument x line mapping inconsistent want put component line zero program line program use single component forbid solver providing bogus answer sort add consistency constraint psimathrm con finite synthesis query requires pair distinct component result location variable assigned line psimathrm con l bigwedgelimits x textbf r x notequiv left lx neq ly right break bigwedgelimits x textbf r x notequiv x pair component result x result variable left lx neq ly right location x location even way location mapping might describe invalid program consider location mapping input x component line x b line argument x b line b sub line argument location mapping describes program f x x b b sub b temporary result used defined order compute b need compute computing requires computing b requires computing cycle hand forbid mapping correspond bogus program dataflow cycle use acyclicity constraint psimathrm acyc constraint enforces particular parameter defined line psimathrm acyc l bigwedgelimits left bigwedgelimits p vec left lp l oi right right break bigwedgelimits component index bigwedgelimits p vec imathrm th component input parameter lp l oi location parameter le location component meaning parameter defined component used way location mapping invalid location bound program input line number ready define wellformedprogram constraint psimathrm wfp constraint enforces location mapping synthesize correspond wellformed program wellformed program consistent acyclic component parameter location point either program input line number component temporary result location point line number define number program input plus number component library lvert vec rvert n component parameter location l p textbf p point either program input range zero number program input leq l p lt lvert vec rvert line number corresponds n location following program input lvert vec rvert leq lp lt since two range contiguous mean component parameter location ultimately fall within range leq lp lt component temporary result location l r textbf r must point line number mean fall within range lvert vec rvert leq lr lt put together get wellformedprogram constraint psimathrm wfp begin align psimathrm wfp l bigwedgelimits p textbf p left leq lp lt right land bigwedgelimits r textbf r left lvert vec rvert leq lr lt right land psimathrm con l land psimathrm acyc l end align breakdown bigwedgelimits p textbf p left leq lp lt right component parameter location lp point either program input line number land bigwedgelimits r textbf r left lvert vec rvert leq lr lt right component result location lr point line number land psimathrm con l location mapping consistent land psimathrm acyc l location mapping acyclic constrain finite synthesis produce location mapping correspond wellformed program need encode connection component behavior library sound familiar need finite synthesis equivalent phimathrm conn phimathrm lib verification turn phimathrm lib need tweaked behavior library remains whether verification finite synthesis phimathrm conn checking set alreadyknown connection component finite synthesis searching connection need different query connection define dataflow component wire circuit built component connection component result another input mean need constrain result input variable equal finite synthesis query example component phii placed line parameter p assigned location p must take value output oi component lead u definition psimathrm conn every pair location variable lx ly refer location x must value psimathrm conn l vec textbf p textbf r bigwedgelimits x vec cup textbf p cup textbf r cup left left lx ly right implies left x right right piecebypiece breakdown bigwedgelimits x vec cup textbf p cup textbf r cup pair location variable lx ly x either program input component parameter component temporary result program output left lx ly right location variable refer location implies left x right x must value finally ready define finite synthesis query location mapping query asks solver find location mapping corresponds wellformed program satisfies specification example input word must enforce location mapping corresponds wellformed program component connected described location mapping component behave described library specification satisfied example input finally finite synthesis query begin align exists l ldots vert rvert textbf p ldots textbf p vert rvert textbf r ldots textbf r vert rvert qquad psimathrm wfp l land qquad qquad bigwedgelimits lvert rvert left phimathrm lib textbf p textbf r land psimathrm conn l si oi textbf p textbf r land phimathrm spec si oi right end align quite mouthful one last time pull apart break exists l ldots vert rvert textbf p ldots textbf p vert rvert textbf r ldots textbf r vert rvert exists location mapping l program output component parameter component result variable example psimathrm wfp l land location mapping wellformed program bigwedgelimits lvert rvert example input index phimathrm lib textbf p textbf r component behave described library land psimathrm conn l si oi textbf p textbf r component connected described location mapping land phimathrm spec si oi specification satisfied imathrm th example input solver find satisfiable assignment query get new candidate location mapping corresponds program correct example input solver find query unsatisifiable mean locaiton mapping corresponds program correct example input mean search failed implementation implemented loopfree componentbased program synthesizer rust us solve finite synthesis verification query repository target language operation would expect working fixedwidth integer arithmetic operation like add mul bitwise operation like xor comparison operation like eq evaluate one comparison true zero otherwise finally select operation take three operand condition consequent alternative condition nonzero evaluates consequent otherwise evaluates alternative value neither signed unsigned operation like division behave differently signed unsigned integer different instruction behavior divs signed division divu unsigned division program representation program sequence instruction pub struct program instruction vec instruction instruction operation bind result identifier pub struct instruction result id operator operator identifier opaque wrapper around number pub struct id support nice name identifier since essentially everything temporary stringify program turn identifier b c additionally uphold invariant id always refers value defined ith instruction program finally operator enumeration variant operation language along identifier operand pub enum operator var new input variable const constant value eqz id equal zero clz id count leading zero ctz id count trailing zero popcnt id population count eq id id equal ne id id equal lts id id signed le ltu id id unsigned le gts id id signed greater gtu id id unsigned greater le id id signed le equal leu id id unsigned le equal ge id id signed greater equal geu id id unsigned greater equal add id id addition sub id id subtraction mul id id multiplication divs id id signed division divu id id unsigned division rem id id signed remainder remu id id unsigned remainder id id id id xor id id exclusive shl id id shift left shrs id id signed shift right shru id id unsigned shift right rotl id id rotate left rotr id id rotate right select id id id else building program make constructing program hand easier builder program wrap inner program expose method operation append instruction using operation program thats built pub struct programbuilder program program impl programbuilder start building new program pub fn new programbuilder programbuilder program program instruction vec finish building program pub fn finish self program selfprogram fn nextid self id id selfprograminstructionslen append add b instruction pub fn add mut self id b id id let result selfnextid selfprograminstructionspush instruction result operator operator add b result isolatetherighmostzerobit example program constructed via programbuilder isolaterightmostzerobit x x b add x c b return c let builder programbuilder new let x buildervar let buildernot x let one builderconst let b builderadd one x let c builderand b let isolaterightmostzerobit builderfinish builder nice since intend write unoptimized program use specification synthesizing optimized program defining component every operator associated component synthesize program use operator library heterogeneous set component define objectsafe component trait box trait object dynamically dispatched method store collection component two role must provide constraint input output solver phii vec oi part whole phimathrm lib textbf p textbf r synthesized location mapping program us component order construct corresponding program component need know create operator represents makeexpression trait method handle first role makeoperator trait method handle second makeexpression take bitvec variable operand vec input variable return new bitvec expression represents result running operation operand oi output variable makeoperator take id operand described synthesized location mapping return associated operator id operand note different component different arity method take operand multiple individual parameter like bitvec b bitvec id b id instead component report arity operandarity trait method caller pas slice many operand finally also support synthesizing constant value const operator immediates handled separately operand also immediatearity trait method makeexpression makeoperator also take slice immediates pub trait component many operand component take fn operandarity self usize many immediates component need synthesized fn immediatearity self usize construct component constraint expression fn makeexpression self context context immediates bitvec operand bitvec bitwidth bitvec construct operator given immediates operand fn makeoperator self immediates operand id operator take look implementation simple representative component add component two operand zero immediates makeoperator implementation mechanical pulling individual operand given slice push operator add makeexpression implementation similarly concise quite mechanical encode add semantics expression defines bvadd operatoin wrapping addition bitvectors crate using expose u method bitvec wrapping addition exactly want add instruction encode add semantics bvadd two operand always working component trait object also define helper function boxing add component turning trait object dynamically dispatched method struct add impl component add fn operandarity self usize fn immediatearity self usize fn makeoperator self immediates operand id operator operator add operand operand fn makeexpression self context context immediates bitvec operand bitvec bitwidth bitvec operand bvadd operand pub fn add box dyn component box new add component look pretty much like direct encoding single smt expression operation component like eqz direct encoding single smt expression need compose multiple impl component eqz fn makeexpression self context context immediates bitvec operand bitvec bitwidth bitvec let zero bitvec context bitwidth let one bitvec context bitwidth ite ifthenelse operand zero evaluate one otherwise evaluate zero zeroeq operand ite one zero const component component us immediates operand either constant value unbound case synthesizing value provide value upon constructing component struct const option impl component const fn operandarity self usize fn immediatearity self usize else fn makeoperator self immediates operand id operator let val operator const val else operator const immediates fn makeexpression self context context immediates bitvec operand bitvec bitwidth bitvec let val bitvec context val bitwidth else immediates clone pub fn const val option box dyn component box new const val finally library vector component pub struct library pub component vec box dyn component specification specification look quite similar component need create smt constraint need construct operator equivalent component makeoperator method pub trait specification fn arity self usize fn makeexpression self context context input bitvec output bitvec bitwidth bool want use existing unoptimized program specification new optimized program implement specification program arity program specification many input variable program defines var operator impl specification program fn arity self usize selfinstructions iter takewhile inst instoperator operator var count create expression whole program build subexpressions instruction instruction table table serf lexical environment inspecting operand id pluck corresponding subexpressions table pas operand component makeexpression implementation final entry table expression whole program since program implicitly return last value impl specification program fn makeexpression self context context input bitvec output bitvec bitwidth bool exprs subexpression value defined th instruction program let mut exprs vec input iter cloned collect let mut operand vec instr self instruction iter skip inputslen const program already bound value instruction require new immediates let immediates gather subexpressions operand operator using operandsclear instr operator operand id let v exprs usize clone operandspush v create expression instruction push onto exprs exprspush instr operator makeexpression context immediates operand bitwidth last instruction defines return value equal output variable exprslast unwrap eq output synthesizer synthesizer structure solves one synthesis problem u take library spec upon construction configure run builderstyle method finally call synthesize method actually kick cegis loop program synthesizer creating component based loopfree program pub struct synthesizer impl synthesizer create new synthesizer given library specification creation opportunity configure synthesis process various builderstyle method pub fn new context context library library spec dyn specification result self configure whether require synthesis find minimallength program satisfies specification produce optimally smallest possible program tends take time pub fn shouldsynthesizeminimalprograms mut self bool mut self configure timeout timeout mean keep going forever necessary providing number millisecond mean soft maximum runtime many millisecond giving pub fn settimeout mut self millisecond option mut self run configured synthesizer find program satisfies specification pub fn synthesize mut self result program allows u create configure run synthesis problem like let program synthesizer new context library spec shouldsynthesizeminimalprograms true settimeout synthesize location mapping location mapping us bunch line index represent componentbased program line something represent directly smt expression location mapping encode program synthesis choice either encoding line mathematical integer bitvector originally used mathematical integer perhaps unsurprisingly way slower using bitvector using bitvector representation use minimal number bit required library component example one program input seven component library largest zerobased line number ever need seven mean need bitvectors three bit wide represent every line narrower bitvector faster work seen line representation mentioned paper read sure tribal knowledge index line component located get parameter type line bitvec location mapping used differently different phase cegis synthesize program collection unbound variable smt query constructing synthesis variable get bound concrete value want work value need variable anymore therefore split location mapping two distinct representation finite synthesis locationvars collection line variable finite synthesis pull value assigned variable assignment structure collection index value locationvars line variable program input vec parameter textbf p temporary result textbf r whole output also keep track wide line location bitvectors struct locationvars variable line assigned program input always assigned inputslen input vec line params variable line defines th component parameter params vec line result variable line th component placed synthesized program therefore th component temporary result defined result vec line variable line program output defined output line minimum bit width necessary represent line location linebitwidth unlike original paper always take program output last line synthesized location mapping instead allow setting output line earlier program essentially inserting early return let u optionally synthesize program optimal code size find earliest output line still synthesize correct program little trick taken souper assignment thing instead variable line value line pulled model smt solver gave u also synthesized immediate value struct assignment synthesized immediate value immediates vec params line program th parameter defined params vec result line program th component located therefore th temporary result defined result vec line program final output defined output verification verification take assignment produced finite synthesis attempt find counterexample find one need continue cegis loop find counterexample found solution done original paper represent candidate program verification query phimathrm lib phimathrm conn essentially asking solver interpret connection component originally well realization already need ability turn assignment program find solution already turn program smt expression since use unoptimized program specification finding optimized one mean convert assignment program smt expression verify smt expression implies specification directly mean need construct phimathrm lib phimathrm conn verification solver need unify connection input output phimathrm conn solve verification query generally create smaller query generally faster solve larger query end saving little bit code implementation seem yielded speed overall synthesis time probably nearly time spent finite synthesis verification anyways verification implementation impl synthesizer fn verification mut self assignment assignment bitwidth result verification create fresh input output variable let input vec selfspecarity map freshinput selfcontext bitwidth collect let output freshoutput selfcontext bitwidth convert assignment program convert smt expression let mut prog assignment toprogram selfspecarity selflibrary makeexpression selfcontext input output bitwidth let spec self spec makeexpression selfcontext input output bitwidth input program specification upheld let notspec specnot let query progand notspec let solver selfsolver solverassert query match solvercheck nt know whether counterexample typically mean hit timeout limit previously configured satresult unknown err error synthesisunknown input nt satisfy spec done satresult unsat ok verification worksforallinputs still exist input synthesized program satisfy spec return counterexample satresult sat let model solvergetmodel selfaddinvalidassignment assignment let input evalbitvecs model input ok verification counterexample input case verification find counterexample make call addinvalidassignment method another trick taken souper remember assignment work input explicitly forbid future finite synthesis query save smt solver reconsidering seemingly promising assignment find work one example input finite synthesis recall finite synthesis search location mapping satisfies specification example input might might satisfy specification given input first constraint location mapping corresponds wellformed program constraint actually remains every iteration cegis generate constraint creating new synthesizer instance reuse already constructed constraint finite synthesis query similarly also store location variable synthesizer reuse across iteration cegis loop pub struct synthesizer location locationvars wellformedprogram bool recall definition psimathrm wfp wellformed program constraint begin align psimathrm wfp l bigwedgelimits p textbf p left leq lp lt right land bigwedgelimits r textbf r left lvert vec rvert leq lr lt right land psimathrm con l land psimathrm acyc l end align say parameter location lp fall within range leq lp temporary result location lr fall within range lvert vec rvert leq lr location consistent dataflow cycle constructing equivalent smt expression follows pretty much directly except bit noisier since passing context around need convert rust usizes bitvectors appropriate width impl locationvars fn wellformedprogram self context context library library invalidconnections mut hashset bool build wellformed program constraint list together end let mut wfp vec wellformed program consistent wfppush selfconsistent context invalidconnections wellformed program acyclic wfppush selfacyclic context library let ilen context selfinputslen let context selfresultslen selfinputslen let zero context input always assigned first location l selfinputsiter enumerate let context wfppush leq component parameter location range l l selfparams l wfppush linele zero l l wfppush linelt l component result location range l l selfresults l wfppush linele ilen l l wfppush linelt l constraint together context wfp remember psimathrm con consistency constraint ensures assign two component line psimathrm con l bigwedgelimits x textbf r x notequiv left lx neq ly right consistent method creates corresponding smt expression additionally record pair location index invalidconnections map map keep record location variable wellformed program dataflow therefore need add connection clause pair location variable eventual implementation psimathrm conn connectivity constraint leaving pair connectivity constraint keep smt expressoin much smaller help solve much faster trick taken souper impl locationvars fn consistent self context context invalidconnections mut hashset bool build consistency constraint list let mut con vec indexx locx self resultsrange zip selfresults enumerate indexy locy self resultsrange zip selfresults skip ca nt dataflow result another result directly need connected parameter add pair invalid connection map invalidconnectionsinsert indexx indexy component assigned line location variable value locx locy conspush locxeq locy constraint together context con psimathrm acyc acyclicity constraint enforces synthesized location mapping dataflow cycle psimathrm acyc l bigwedgelimits left bigwedgelimits p vec left lp l oi right right implementation acyclicity constraint anything fancy direct translation constraint smt expression impl locationvars fn acyclic self context context library library bool build constraint list let mut acycs vec let mut params selfparamsiter resultloc comp self result iter zip librarycomponents coperandarity let paramloc paramsnext unwrap component param location must le component result location meaning param already defined used paramloc resultloc acycspush linelt paramloc resultloc constraint together context acycs next step implementing psimathrm conn connectivity constraint phimathrm lib library specification change iteration cegis loop instantiate example input working mean cacheandreuse like wellformed program constraint psimathrm conn connectivity constraint encodes dataflow connection component library two location variable refer location entity whose location assigned variable must value psimathrm conn l vec textbf p textbf r bigwedgelimits x vec cup textbf p cup textbf r cup left left lx ly right implies left x right right connectivity method construct expression implement constraint previously recorded pair location variable connected directly filter connection constraint keeping smt expression smaller explained earlier impl synthesizer fn connectivity self input bitvec output bitvec params bitvec result bitvec bool table mapping location variable index location variable associated entity index l x x let locstovars vec self location input iter zip input chain selflocations params iter zip params chain selflocations result iter zip result chain iter selflocationsoutput output collect build constraint list let mut conn vec indexx lx x locstovars iter enumerate indexy ly locstovars iter enumerate skip location ca nt ever connected directly nt bother constraining selfisinvalidconnection indexx indexy continue two location variable refer location entity connected must value connpush lxeq ly implies xeq constraint together selfcontext conn final prerequisite implement whole finite synthesis query phimathrm lib library specification describes behavior library whole phimathrm lib textbf p textbf r phii vec land ldots land phii vec implementing phimathrm lib library specification involves getting immediates operand result variable component asking component make smt expression relating variable finally anding expression together impl synthesizer fn library self immediates bitvec params bitvec result bitvec bitwidth bool build component spec expression let mut lib vec let mut immediates immediates let mut params params result comp result iter zip selflibrarycomponents chop immediates component front list let theseimms rest immediatessplitat compimmediatearity immediates rest chop params component front list let theseparams rest paramssplitat compoperandarity params rest create spec component make sure result constrained libpush resulteq compmakeexpression selfcontext theseimms theseparams bitwidth component spec together selfcontext lib ok finally function need implement finite synthesis finite synthesis query assigns value location variable resulting mapping corresponds wellformed program program satisfies specification example input begin align exists l ldots vert rvert textbf p ldots textbf p vert rvert textbf r ldots textbf r vert rvert qquad psimathrm wfp l land qquad qquad bigwedgelimits lvert rvert left phimathrm lib textbf p textbf r land psimathrm conn l si oi textbf p textbf r land phimathrm spec si oi right end align implementation finite synthesis query mostly follows structure formula already wellformed program constraint cached ready reuse need recreate loop example input create fresh program output variable fresh component parameter variable fresh component result variable example constrain parameter output behave dictated library connect crosscomponent variable together described location mapping connectivity constraint require program specification satisfied example input additionally assign location line given let caller optionally force synthesis optimally small program finally run query parse resulting location assignment model impl synthesizer fn finitesynthesis mut self exampleinputs hashset vec outputline bitwidth result assignment let immediates selffreshimmediates bitwidth build constraint location assignment work input list let mut worksforinputs vec input exampleinputs convert input bitvectors let input vec input iter map bitvec selfcontext bitwidth collect create fresh params result output variable existentiallyquantified p r formula let params selffreshparamvars bitwidth let result selffreshresultvars bitwidth let output freshoutput selfcontext bitwidth component behave described library let lib selflibrary immediates params result bitwidth worksforinputspush lib component connected together described location variable let conn selfconnectivity input output params result worksforinputspush conn given specification desired program behavior satisified let spec self spec makeexpression selfcontext input output bitwidth worksforinputspush spec let worksforinputs vec worksforinputs iter collect enforce output required line let outputline selfcontext outputline let outputonline self location output eq outputline put piece together let query self wellformedprogram worksforinputs outputonline synthesize assignment already discovered invalid selfnotinvalidassignments let solver selfsolver solverassert query match solvercheck unknown whether assignment fit constraint exists usually timeout configured ran time satresult unknown err error synthesisunknown assignment location variable satisfies synthesis constraint ca nt create program satisfies spec component library satresult unsat err error synthesisunsatisfiable ok assignment location variable fit synthesis constraint pull model return satresult sat let model solvergetmodel let immediates evalbitvecs model immediates let params evallines model selflocationsparams let result evallines model selflocationsresults let output evalline model outputline ok assignment immediates params result output cegis loop synthesizer configured produce optimally small program wrap cegis loop another loop similar souper souper begin synthesizing shortest program length allows longer longer program find optimally short solution contrast start synthesizing longest program expressed given library first try shorter shorter program motivated two insight practice appears failed search program length program exists take much longer searching successfully finding program length n iterating longest shortest target program length hit expensive case synthesize longerthannecessary program often program contains dead code running dead code elimination dce loopfree program super easy dead code removed additionally let u skip ahead bunch iteration loop synthesizer configured produce optimally small program adjust range target program length call cegis loop accomplish setting shortest length equal longest length impl synthesizer pub fn synthesize mut self result program let mut exampleinputs self initialconcreteinputs length longest program synthesize library let longest selfspecarity selflibrarycomponentslen shortest length program attempt synthesize let shortest self shouldsynthesizeminimalprograms selfspecarity else longest practice cost searching program length program exists much expensive successfully searching program length n therefore start synthesizing longer program first shortening length iterate let mut best err error synthesisunknown let mut targetlength longest targetlength shortest call cegis loop synthesizing program current target length match selfsynthesizewithlength targetlength mut exampleinputs found program length new best run dce potentially allowing u skip iteration loop search program one instruction shorter ok mut program programdce targetlength programinstructionslen best ok program reset invalidassignments set since assignment invalid program returning line might valid returning line selfresetinvalidassignments continue ca nt synthesize program target length timed return current best result nt one return error err return bestorelse err completed loop without ever failing synthesize program early returning mean program length shortest hand return best originally implementation choosing initial example input random number generator reading souper source saw presenting program specification solver input output variable unbound solver solve example input input presumably random number generator might choose turn help finite synthesis come better solution quickly implemented technique synthesizer additionally constrain input variable distinct already added initial input logic formula findanexampleinput query begin align exists vec qquad phimathrm spec vec land bigwedgelimits lvert rvert left vec neq si right end align breakdown exists vec find input vec output phimathrm spec vec specification satisfied land bigwedgelimits lvert rvert left vec neq si right nt already input list example input initialconcreteinputs method construct query pass pull discovered example resulting model impl synthesizer fn initialconcreteinputs mut self result hashset vec shamelessly cargo cult souper const numinitialinputs usize let mut input hashset vec hashset withcapacity numinitialinputs create unbound input output variable let inputvars vec selfspecarity map freshinput selfcontext fullbitwidth collect let outputvar freshoutput selfcontext fullbitwidth let spec selfspecmakeexpression selfcontext inputvars outputvar fullbitwidth numinitialinputs make sure find unique new input constraining input var equal one already found let mut existinginputs vec inputset input build expression var inputset eqthisinput let mut eqthisinput vec inp var inputset iter zip inputvars let inp bitvec selfcontext inp fullbitwidth eqthisinputpush inpeq var let eqthisinput selfcontext eqthisinput existinginputspush eqthisinput new input equal existing input let notexistinginputs selfcontext existinginputs let query specand notexistinginputs let solver selfsolver solverassert query match solvercheck result unknown try use example already got nt bail satresult unknown inputsisempty return err error synthesisunknown else break query unsatisfiable spec bogus satresult unsat return err error synthesisunsatisfiable found example input pull model add set satresult sat let model solvergetmodel let newinputs evalbitvecs model inputvars inputsinsert newinputs ok input alright ready examine implementation inner cegis loop close reader noticed bitwidth parameter passed around everywhere usage fullbitwidth constant earlier code sample implement wellknown optimization synthesizing program initially narrow bit width verifying wider wider bit width verified target bit width fullbitwidth aka implementation work well program correct say eight bit wide often work well bit wide note widening synthesized constant particular troublesome however many fewer bit solver keep track synthesis eight bit wide lot faster synthesis bit wide verifying program synthesized narrower bit width verify narrow bit width verify double bit width double bit width reached full bit width point done whenever verification find counterexample synthesize whatever bit width reached far never narrow current bit width widening impl specification fn synthesizewithlength mut self programlength input mut hashset vec result program let outputline programlength let mut bitwidth cegis loop finite synthesis find assignment satisfy specification example input current bit width let assignment selffinitesynthesis input outputline bitwidth start verification bit width widening loop loop verify assignment current bit width match selfverification assignment bitwidth assignment work input current bit width full bit width answer done otherwise double bit width keep verifying new bit width verification worksforallinputs bitwidth fullbitwidth let program assignmentstoprogram selfspecarity selflibrary return ok program else bitwidth verification found counter example add set example input try finite synthesis verification counterexample newinputs inputsinsert newinputs continue cegis result new program synthesizer natural next question well work compare existing synthesizer solve many synthesis problem synthesizer find program fast synthesizer first synthesizer indeed find optimal solution isolating rightmost zero bit word however multiple optimal solution always find one exactly would probably write hand according cost model number instruction used lessthanorequal comparison always evaluates true good const var b leu b aka b const c add b c xor c e c e phew synthesis loopfree program paper gulwani et al defines benchmark suite bitvector problem taken big book bittwiddling hack delight use benchmark program synthesizer brahma running example isolating rightmost zero bit word seventh problem benchmark suite benchmark problem include turning rightmost one bit word taking average two integer without overflow rounding next power two problem roughly ordered increasing difficulty first problem much easier last problem use standard library twelve base component first seventeen problem last eight problem augment library additional component depending problem hand ported benchmark problem program fed synthesizer specification created small runner time long take synthesizer rediscover solution problem porting standard library synthesizer required small change example language allow immediates add operation component becomes two component library add component const component couple instance single component corresponded multiple operation support scenario split component multiple component porting synthesizer additionally later difficult problem used minimal library required solve problem since difficult problem prone take quite long time benchmark using version come package manager brahma used yices solver understanding souper plug different solver including goal get general sense performance precisely evaluating performance comparing brahma excruciating detail applestoapples comparison get sense whether anything horribly problem run timeout one hour meaning find solution amount time give move next problem comparison longest brahma took problem minute first measured long take synthesize program length problem next measured long take synthesize optimally small program problem finally measured long take synthesize optimally small program constant value used const operation rather given necessary constant value part const component result summarized table alongside result reported paper brahma synthesizer timing unit second benchmark brahma synthesizer length min length min length synth constant timeout timeout timeout timeout timeout timeout crash timeout timeout timeout timeout timeout timeout timeout timeout problem synthesizer found solution necessarily optimally small solution timed could complete search either discover rule existence smaller program easier early problem synthesizer pretty well finding optimally small program take much longer finding program length synthesizing constant seem add much overhead synthesis finding optimally small program synthesizer hit sort cliff around problem run time start skyrocketing running timeout ceiling problem synthesize implementation popcount brahma solves problem minute souper folk report solve problem well although say synthesizer scale le well braham running benchmark repeatedly crashed trying solve finite synthesis query ultimately synthesizer able complete problem ran earlier version synthesizer problem development crashing still never able synthesize program popcount let synthesizer run nearly three day maybe yices much better solving sort query perhaps wellknown optimization make query easier solver solve ignorant maybe fact compound component get split multiple component library resulting larger library location variable solve root problem know performance cliff larger synthesis problem one disappointment project anyone idea synthesizer falling cliff profile dig struggling query love hear particularly experience kind program synthesis smt solver much black box right conclusion counterexampleguided iterative synthesis wonderfully clever way transform single problem difficult smt solver solve multiple little problem offtheshelf solver handle inverting representation componentbased program location mapping wholly represented inside smt query equally deft program synthesis writing program write program fun delightful meta ouroborosy sense also foretells future mechanically generate large swath optimizing backend future compiler emit actually optimal code sequence find lofty promise exciting also frustrated lack insight smt solver performance exist approach program synthesis rely smt solver verification finite synthesis however seems premature give approach yet reproduced result reported brahma souper nonetheless remain optimistic intend keep digging resolve discrepancy thanks reading reference fitzgensynthloopfreeprog git repository synthesizer described post synthesis loopfree program gulwani et al paper post based upon great paper read found interesting program synthesis gulwani et al survey paper summarizing state art program synthesis great way quickly get overview whole field synthesizing superoptimizer sasnauskas et al paper describes souper superoptimizer llvm us program synthesis core synthesizer also based gulwani paper extends different way looked source quite bit find optimization trick automatic generation peephole superoptimizers bansal et al first paper describing generate tabledriven peephole optimizer offline superoptimizer delight henry warren book dedicated concise nonobvious bit twiddling trick incredible book sort thing benchmark problem presented synthesis loopfree program paper taken book sygus sygus syntaxguided synthesis formalizes class program synthesis problem standardizes language describing hold yearly competition synthesizer aim drive innovation field little friendly competition
107,Lobsters,formalmethods,CSE-Formal methods,VerifAI: A Toolkit for the Formal Design and Analysis of Artificial Intelligence-Based Systems,https://link.springer.com/chapter/10.1007/978-3-030-25540-4_25,verifai toolkit formal design analysis artificial intelligencebased system,,increasing use artificial intelligence ai machine learning ml system including safetycritical system brought pressing need formal method tool design verification however aimlbased system autonomous vehicle certain characteristic make application formal method challenging mention three key challenge see seshia et al indepth discussion first several us aiml perception use computational system mimic human perceptual task object recognition classification conversing natural language etc perception component writing formal specification extremely difficult impossible additionally signal processed component highdimensional stream image lidar data second machine learning dominant paradigm ai formal tool must compatible datadriven design flow ml also able handle complex highdimensional structure ml component deep neural network third environment aimlbased system operate complex considerable uncertainty even many agent environment human robotic let alone intention behavior example consider difficulty modeling urban traffic environment autonomous car must operate indeed aiml often introduced system precisely deal complexity uncertainty formal method perspective make hard create realistic environment model respect one perform verification synthesisin paper introduce verifai toolkit initial attempt address three core learning outlined verifai take following approach perception perception component map concrete feature space eg pixel output classification prediction state estimate deal lack specification perception component verifai analyzes context closedloop system using systemlevel specification moreover scale complex highdimensional feature space verifai operates abstract feature space semantic feature space describes semantic aspect environment perceived raw feature pixel learning verifai aim analyze behavior ml component also use formal method design end provides feature design data set training testing ii analyze counterexample gain insight mistake ml model well iii synthesize parameter including hyperparameters training algorithm ml model parameter environment modeling since difficult impossible exhaustively model environment aibased system verifai aim provide way capture designer assumption environment including distribution assumption made ml component describe abstract feature space intuitive declarative manner end verifai provides user scenic probabilistic programming language modeling environment scenic combined renderer simulator generating sensor data produce semanticallyconsistent input perception component verifai currently focused aibased cyberphysical system cps although basic idea also applied aibased system pragmatic choice focus simulationbased verification simulator treated blackbox broadly applicable range simulator used input verifai closedloop cps model comprising composition aibased cps system verification environment model property closedloop model aibased cps typically comprises perception component necessarily based ml plannercontroller plant ie system control given verifai offer following use case temporallogic falsification modelbased fuzz testing counterexampleguided data augmentation counterexample error table analysis hyperparameter synthesis model parameter synthesis novelty verifai first tool offer suite use case integrated fashion unified common representation abstract feature space accompanying modeling language search algorithm feature space provided modular implementation algorithm formalism verifai presented paper published author venue eg problem temporallogic falsification simulationbased verification cps model well studied several tool exist eg work first extend technique cps model ml component work verification ml component especially neural network eg complementary systemlevel analysis performed verifai fuzz testing based formal model common software engineering eg work unique cps context similarly propertydirected parameter synthesis also studied formal methodscps community work first apply idea synthesis hyperparameters ml training ml model parameter finally knowledge work augmenting trainingtest data set implemented verifai first use formal technique purpose sect describe tool structured provide feature sect illustrates use case via example domain autonomous driving
108,Lobsters,formalmethods,CSE-Formal methods,Data Abstraction and Relational Program Logic,https://arxiv.org/pdf/1910.14560.pdf,data abstraction relational program logic,,obj stream w 뺷 r ɩ ⱶ r n ki e f p fm k z u r τȫ sj c iwf k abt n ңr j u w j h ۉ n ċ qc cǡ endobj obj endobj obj stream ɦ x jof鵦q r vg n e h ax r g r voxj e c nj kz ݐ u w u w u si wt ǆ endobj obj endobj obj stream g c izh p ru
109,Lobsters,formalmethods,CSE-Formal methods,Hyperproperties,https://www.cs.cornell.edu/fbs/publications/Hyperproperties.pdf,hyperproperties,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream xڼwktswn rå g j k n
110,Lobsters,formalmethods,CSE-Formal methods,Pegasus: A Framework for Sound Continuous Invariant Generation,https://www.cs.cmu.edu/~aplatzer/pub/Pegasus.pdf,pegasus framework sound continuous invariant generation,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream v x rz v nn첥 zӎ
111,Lobsters,formalmethods,CSE-Formal methods,Lean versus Coq: The cultural chasm,https://artagnon.com/articles/leancoq,lean versus coq cultural chasm,,lean coq proof assistant based pcic argue set apart essence cultural difference lean much lower startupcost pure mathematician since builtin feature math library http githubcomleanprovercommunitymathlib great undergraduatelevel group theory topology masterslevel commutative algebra category theory plateau quickly thereafter lean seems taken topdown approach focusing writing real proof quickly possible without compromising soundness http three axiom lean propositional extensionality quotient soundness choice however nt block computation since computation done vm however break good type theoretic property like strong normalization subject reduction canonicity conscious design choice coq hand always particular sound type theoretic foundation recent coq coq correct http wwwiriffrsozeauresearchpublicationsdraftscoqcoqcorrectpdf formalizes coq engine proving metatheoretic property coq hott http githubcomhotthott actively developed fix many coq issue working mathematician started using software work often rely unverified sometimes proprietary tool like magma sage mathematica lean big stepup good type theoretic property preserved coq nt seem important lean support constructive classical reasoning quotienting coq painful due setoidhell http something would fixed type modeled infty groupoids instead setoids hott line work quotientreasoning http make formalizing commutative algebra painless baked lean kernel however quotient tricky implement without breaking certain metatheoretic property coqers cherish nevertheless implementation http mathcompgithubiohtmldocmathcompssreflectgenericquotienthtml coq mathcomp http githubcommathcompmathcomp albeit without reduction rule lean inheritance http leanprovergithubiotheoremprovinginleanstructuresandrecordshtml inheritance another good feature disallows diamondinheritance seems like bit hack coq definitely missing form wellthoughtout adhoc polymorphism category theory lean developed http githubcomleanprovercommunitymathlibblobmasterdocstheoriescategorytheorymd higher category mind sure one would define infty category since universe explicit since coinductive type coq cumulativity seems better design choice one would think lean engineering feat since written c coq mathcomp loc compare lean mathlib loc mathcomp build ten minute mathlib take thirty minute build indeed due design decision use vm computation computation happens speed comparable pythonbytecode evaluation seem overhauling though compiling lean code c execution another reason relative slowness lean lot automation hood figuring instance user writes x time x topogical space time mean product topology metamath zero http might interest reader article article developed several discussion coqclub lean zulip
112,Lobsters,formalmethods,CSE-Formal methods,Using Lightweight Modeling To Understand Chord (2012),http://www.pamelazave.com/chord-ccr.pdf,using lightweight modeling understand chord,,obj length filter flatedecode stream k b
113,Lobsters,formalmethods,CSE-Formal methods,PRaft: Building Provably Safe Distributed Systems using Model Checking,https://people.eecs.berkeley.edu/~kubitron/courses/cs262a-F19/projects/reports/project10_report_ver3.pdf,praft building provably safe distributed system using model checking,,obj linearized l h e n endobj obj type xref length filter flatedecode decodeparms column predictor w index info r root r size prev id stream b endstream endobj obj lang en name r openaction r outline r pagemode useoutlines page r type catalog viewerpreferences displaydoctitle true endobj obj filter flatedecode length stream b el vbg endstream endobj obj content r group r mediabox parent r resource r type page endobj obj bitspercomponent colorspace devicergb filter flatedecode height smask r subtype image type xobject width length stream h ɠ 㳨ium z q y k q j qѽ w c h ap r pc w ߴ dp v dayhb ߵ c v jrn l h gț ǎ g f ˤ ȩϡ z v ٮ ʠ mg wڴid p 묒 w jĝ k wyȃh hhpfia yf l ԙb j tw f md h cn ٱcǉ dpm u n 唓n r q ism c鈝 ι c u ju r hi f 져 z ʀ yy ur c ic f qe n oqp ģ e c qds xօ uր j z w n l lm f q rݾ oϒ ߠ vt bd p f ɠ ʗ b q cf uղ w h u xcvqz oݺ n qo h c勂 v e f ɵ e ߊ tn pe g r q f ܐ bdq g ӳ l j f p c e z c z u tm n ƥ q l gƍ ʇ piae h kĵe ο te ŵ e k h ǆ ᛢ ƒbzvv 쌼 b q b h v z x h dz ē zfk ik æ k g qɝ z c p w g kh h l uæ l 嵌
114,Lobsters,formalmethods,CSE-Formal methods,Alloy4Fun,http://alloy4fun.inesctec.pt/,,,
115,Lobsters,formalmethods,CSE-Formal methods,The TLA+ Toolbox,https://arxiv.org/abs/1912.10633,tla toolbox,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
116,Lobsters,formalmethods,CSE-Formal methods,"Critical Perspectives on Provable Security: Fifteen Years of ""Another Look"" Papers",https://eprint.iacr.org/2019/1336.pdf,critical perspective provable security fifteen year another look paper,,obj stream ң判 x
117,Lobsters,formalmethods,CSE-Formal methods,TLA+ for startups (part 1),https://medium.com/koodoo/tla-for-startups-part-1-8b162863824b,tla startup part,tla startup part formal specification completely insane idea startup small team startup life right thing right time done right build right thing build thing right exactly right time pragmatism king luck lady tonight thinking underrated help think eating elephant recalibrate thinking expect important link leslie lamport official video course leslie lamport tla hyperbook hillel wayne learn tla website tla google group community leslie lamport seminal work specifying system pdf format excellent book,tla startup part formal specification completely insane idea startup small teamsthis start personal professional journey formal specification language tla dive detail probably begin explaining motivation creating series articlesstartup life right thing right time done rightin professional life build run software development team create business system using latest technology methodology system build complex apollo programme nuclear power plant complex thousand life may depend u writing robust reliable correct code write brittle unreliable faulty code company reputation suffer client reputation suffer lose moneythe quality system build could make difference u winning chosen business domain failing badly work startup marginal loss poorly thoughtout business strategy poor tactical choice badly written code take quickly indeed end roadso real incentive world create software system right funny word could mean lot different thing lot people one end spectrum could spend million somebody else million creating software solution fully solves every significant problem company chosen business find market appetite built result never come close recovering cost buildor could create superlean mvp solution specific problem promote aggressively gain traction market find shortcut made getting quickly come home roost watch competitor coolly calmly launch product three month later fix shortcoming solutionin short reason startup life lot harder look generally one shot getting right mean build right thing build thing right oh exactly right timepragmatism kingcommon sense would hit sweetspot middle venn diagram startup tech lead supremely pragmatic think succeed startup world overburdening team detailed process design framework formal practice rude awakening lean mean fast furious gazelle corporate dinosaur speedboat corporate oil tankerconventional wisdom would tell formal specification language wholly unsuited startup lifeif common sense tell fast lean supremely pragmatic conventional wisdom would also tell formal specification language wholly unsuited startup life would probably safe assume continuum amount effort invested design stage software people would place formal specification language way right startup picking somewhere near left ought leaving formal specification language superbrains designing missile targeting system fighter jetshow typically think amount design effort suited tobut true luck lady tonightthinking venn diagram continuum diagram together contradiction one hand identified startup typically one shot getting right right thing right time done right hand conventional wisdom tell u need almost lowest possible amount investment design stage also known thinking stage word succeed going need get luckyso longsuffering startup tech lead gradually gently moving rightwards continuum pain maybe first asking team sketch design whiteboard writing code longer feel fit purpose employ ba start writing something least look bit thoughtout maybe month later give one best developer architect title ask start drawing proper diagram vaguely remember formal specification module semester c degree year ago tell maybe find use one course building software controlling cooler nuclear reactor knowwhile pondering journey along continuum formal design pretty decent chance distracted pretty major firefights solution lead developer would given architect title turn work three week ago last monday seen since client counting winning sign contract kept getting timeouts demo environmentperhaps could avoided done bit design upfront hindsight wonderful thing frankly timebefore know startup dream lying tattersas say going need lot luckthinking underratedthat lot preamble bring real point first article series tla startup guess title give away would like throw preconception formal specification language despite might think reserved arcane computer science problem hypercritical systemsmost importantly tla help think problem trying solvealthough build rich history formal specification theory practice tla designed solving realworld computing problem importantly tla help think problem trying solveit applied wide range computing problem simple algorithm large scale distributed architecture design require year training phd get started grounding relatively straightforward mathematical conceptsi believe tla enables software engineer system analyst first time practically formally reason code going write write itthe formally part leave later article indeed point link sprinkled throughout later article people far smarter explain formal reasoning system using universal language mathematics incredibly powerful useful thing dothe act attempting describe property code planning write often enough spark new way thinking itbut practically despite might assume definitely possible get started tla quickly start leveraging value right away act attempting describe property code planning write often enough spark new way thinking reveal nuanced insight problem trying address tease logical flaw assumptionsi often advise engineer team either sketch design write plain english main task need complete writing code reason suggest force brain conceptualise problem subtly different way result often quite enlightening two similar lecture leslie lamport inventor tla explains importance thinking code tla help eating elephantthere need eat whole elephantyou start using tla alterego pluscal describe small part system perhaps short nontrivial algorithm logical flow system pretty sure go ahead code want validate thinking got head around basic structure semantics tla would perfect candidate get started onimportantly need eat whole elephant one go first use case employing tla design process describing high throughput highly parallelised distributed software architecture going get finger burned say going choke tuskrecalibrate thinkingi would urge recalibrate thinking role formal specification language play design process would argue tla make possible introduce formality design process much much earlier indeed would recommend introducing considering structured design practice umli arguing using practice extremely useful arguing easing habit formally describing intended behaviour system early becomes second nature something engineer analyst practically need consider heavyweight structured process inevitably come company growsthis series article attempt make case tla startup actually happy bedfellowsin short series article attempt make case tla startup actually happy bedfellow give toolset improve thinking reduce chance making critical design mistake early surprisingly low upfront investment specific challenge startup face discussed top article little bit extra thinking done right way could difference glory ignominy video hillel wayne author practical tla learntla website good job demystifying core concept tla demonstrating used practically smaller problem domain expectnow made case tech startup considering adding tla armoury subsequent article get practical going build example realworld system everyone relate one simple understand little difficult reason use tla help soi definitely expert tla might never rather talking talk going attempt walk walk proving tla usefully employed early stage system design thinking appropriate amount time investment small business grow system maturesi may fail quest hey work startup scared long given best shot important linksleslie lamport official video courseleslie lamport tla hyperbookhillel wayne learn tla websitethe tla google group communityleslie lamport seminal work specifying system also available pdf format herei introduce link go along opinion building block upon begin tla journey also buy hillel wayne excellent bookgo part
118,Lobsters,formalmethods,CSE-Formal methods,CompCertM: CompCert with C-Assembly Linking and Lightweight Modular Verification,https://sf.snu.ac.kr/compcertm/,compcertm compcert cassembly linking lightweight modular verification,author youngju song minki cho dongjoo kim yonghyun kim jeehoon kang chungkil hur abstract,author youngju song seoul national university korea minki cho seoul national university korea dongjoo kim seoul national university korea yonghyun kim seoul national university korea jeehoon kang kaist korea chungkil hur seoul national university korea hur corresponding author abstract supporting multilanguage linking linking c handwritten assembly module verified compiler compcert requires compositional verification technique used compcert supporting separate compilation two extension compcertx compositional compcert supporting multilanguage linking take different approach former simplifies problem imposing restriction source module mutual dependence verified certain wellbehaved specification hand latter develops new verification technique directly solves problem expense significantly increasing verification cost paper develop novel lightweight verification technique called rusc refinement selfrelated context demonstrate rusc solve problem without restriction still low verification overhead develop compcertm full extension latest version compcert supporting multilanguage linking moreover demonstrate power rusc program verification technique modularly verifying interesting program consisting c handwritten assembly mathematical specification
119,Lobsters,formalmethods,CSE-Formal methods,Jupyter kernel for TLA+,https://github.com/kelvich/tlaplus_jupyter,jupyter kernel tla,tlaplusjupyter try installation usage intro notebook specifying system sharing executable model binder dockerfile binder related project vscodetlaplus license bsd,tlaplusjupyter jupyter kernel pluscal specification language syntax highlight based official lexer repl functionality expression executed online binder try need install tla toolbox java python enough installation tlaplusjupyter python package installable pip python supported install run pip install tlaplusjupyter python tlaplusjupyterinstall last step register tlaplusjupyter jupyter kernel system download jupyter started usual jupyter notebook create new notebook click new button select dropdown menu also handy enable line numbering inside cell view toggle line number since syntax checker refers problem line number usage basic usage explained intro notebook tlaplusjupyter support several type cell different behavior execution cell full module definition upon execution kernel perform syntax check report error module contains pluscal program kernel also translate tla cell starting tlc modulename modulename name one module previously executed case cell treated config file tlc model checker example check spec spec invariant typeok model diehardtla execute following tlc diehardtla specification spec invariant typeok init next state formula set keywords init next correspondingly constant definition follow constant keyword separated newline comma description possible config statement syntax given chapter specifying system book custom tlc flag may specified module name tlc diehardtla deadlock specification spec tlc evaluation happens context defined module model refers another model model cell cell containing neither magic module definition treated constant expression print result execution tlc evaluation happens context defined module expression refer anything defined evaluated module command log log log correspondingly show kernel log enables logging disables logging currently open notebook sharing executable model binder model shared github easily made runnable coping dockerfile repository root url repo used binder start dynamic environment related project vscodetlaplus cool plugin vscode editor syntax highlight custom widget displaying trace license bsd
120,Lobsters,formalmethods,CSE-Formal methods,TLA+ model checking made symbolic,https://blog.acolyer.org/2019/11/29/tla-model-checking-made-symbolic/,tla model checking made symbolic,tla model checking made symbolic tla l tla toolset proving safety property tla example project apalache work cover konnovapalache,tla model checking made symbolic konnov et al oopsla tla formal specification language temporal logic action particularly well suited reasoning distributed algorithm addition specification language tla toolset includes model checker tlc theorem prover tlaps given huge state space involved many realworld setting tlc model checker take long time lot resource run progress towards proof automation tlaps made last year writing interactive proof still demanding task hence user prefer run tlc day rather writing proof like many people often find wishing time skill model algorithm paper read taken spin checker anything help make little bit tractable interesting paper introduces alternative symbolic model checker tla called apalache unlike tlc apalache translates underlying transition relation quantifierfree smt constraint allows u exploit power smt solver implementation us smt solver apalache used check inductive invariant bounded safety property tla inductive invariant state formula expressing must true system state every algorithm step called inductive show invariant hold initial state init every step transition state hold invariance next common safety property tla specification one prof implement higherlevel specification refinement mapping proving safety property lamport given safety property maximum computation length apalache check whether computation length violates property one state testbed apalache pitted tlc collection example tla example project github example handtuned make efficient tlc check tuning done apalache benefit apalache show clearly checking inductive invariant invariant hold tlc fast apalache also fast tlc start struggle eg almost hour apalache remains relatively fast eg second benchmark author deliberately introduce invariant violating change eg removing constraint changing constant introducing arithmetic error apalache really shine find problem handful second whereas tlc sometimes time hour going make big difference iterating towards correctness good news though first general remark apalache tlc struggle paxoslike algorithm example set number paxoslike algorithm rather complex tla specification real distributed algorithm tlc tool get stuck step included famous paxos look bounded model checking safety property scorecard mixed sometimes apalache faster tlc sometimes way round apalache never time though tlc couple example deliberately introduce violation apalache consistently quick finding experiment show clear advantage apalache tlc checking inductive invariant satisfiable unsatisfiable case however advantage model checker le pronounced analyzing safety bounded model checking year tlc collected clever heuristic tla hope growing number user specification get tuned model checker happening tlc apalache work cover apalache share two assumption tlc input parameter specification checked fixed reachable state value parameter finite structure first stage processing turn untyped tla specification collection typed expression first tla operator bit like macro inlined flattened tla expression relating state step eg converted assignment finally expression typed developing fully automatic type inference engine tla challenge paper follow simple approach case type computed automatically propagation tool fails find type asks user write type practice user give type empty set empty sequence record converting full richness tla expression smt constraint would tough job apalache introduces intermediate set operator kera express tla expression kera deliberately minimalistic even basic operator boolean operator omitted since expressed term ifthenelse tla expression rewritten kera expression final step turn equisatisfiable quantifierfree smt formula ie something give smt solver get back answer introduce abstract reduction system allows u iteratively transform kera expression applying reduction rule central idea approach rewriting construct overapproximation data structure graph whose edge connect value set element call graph arena resembles inmemory data structure created explicitstate model checker tlc section paper give detail translation section demonstrates soundness suspect minority morning paper reader interested level detail refer want full paper want try apalache find code github konnovapalache
121,Lobsters,formalmethods,CSE-Formal methods,Formality in requirements: new publication,https://bertrandmeyer.com/2019/11/14/formality-requirements-new-publication/,formality requirement new publication,reference,best way make software requirement precise use one available formal approach many proposed aware general survey published far past two year working comprehensive survey use formality requirement releasing draft joint informal research group innopolis university university toulouse whose member cooperating requirement issue resulting publication listed reference several scientific event survey still revised particular longer page limit intended venue acm computing survey section need improvement think however current draft already provide solid reference fundamental area software engineering paper cover broad selection method altogether way completely informal strictly formal grouped five category natural language semiformal automaton graphbased mathematical framework programminglanguage based example include sysml relax statecharts vdm eiffel requirement notation eventb alloy every method text proposes version running example landing gear system already used previous publication expressed corresponding notation evaluates method using set carefully defined criterion paper jeanmichel bruel sophie ébersold florian galinier alexandr naumchev manuel mazzara bertrand meyer formality software requirement draft november text available comment draft welcome reference bertrand meyer jeanmichel bruel sophie ebersold florian galinier alexandr naumchev towards anatomy software requirement tool page see arxiv version write separate blog article publication alexandr naumchev bertrand meyer seamless requirement computer language system structure page available florian galinier jeanmichel bruel sophie ebersold bertrand meyer seamless integration multirequirements complex system international requirement engineering conference workshop ieee page available alexandr naumchev manuel mazzara bertrand meyer jeanmichel bruel florian galinier sophie ebersold contractbased method specify stimulusresponse requirement proceeding institute system programming vol issue pp doi available alexandr naumchev bertrand meyer complete contract specification driver international symposium theoretical aspect software engineering tase page available alexandr naumchev bertrand meyer víctor rivera unifying requirement code example psi ershov conference perspective system informatics page available vn f rating vote cast vn f rating vote formality requirement new publication based rating
122,Lobsters,formalmethods,CSE-Formal methods,Automatic Loop Invariant Generation and Refinement through Selective Sampling (2017),https://lijiaying.github.io/papers/ase17.pdf,automatic loop invariant generation refinement selective sampling,,obj length filter flatedecode stream
124,Lobsters,formalmethods,CSE-Formal methods,Building Your First Program Synthesizer,https://blog.sigplan.org/2019/11/26/building-your-first-program-synthesizer/,building first program synthesizer,getting started rosette sketch rosette emina torlak racket following along available github install racket rosette smt solver domainspecific language racket structure synthesis dsl sketching scaling synthesizing implementation cryptographic primitive network configuration data movement dsl teach algebra give better feedback assignment beyond computer science rosette tutorial sketch bio james bornholt disclaimer,blog several recent post program synthesis task automatically generating program want synthesis exciting technique cutting edge programming language design implementation post want get concrete show involved building synthesis tool end post tool synthesize simple arithmetic expression getting started rosette several great offtheshelf framework program synthesis including original sketch language post going use rosette language developed emina torlak uw add synthesis verification support racket programming language nice thing rosette extension racket able use many racket nice feature like pattern matching building synthesizer following along code post available github like follow along need install racket rosette able run rosette program either drracket ide racket commandline interpreter rosette key feature programming solving constraint rosette program variable unknown value call symbolic constant rosette automatically determines value constant according constraint write example try find integer whose absolute value lang rosettesafe compute absolute value x define absv x x x x define variable bound symbolic constant definesymbolic integer solve constraint saying solve assert absv program output model model assignment value symbolic constant take value model satisfies constraint generated using assert case single assertion absv rosette found value using smt solver solve constraint course would also valid value multiple assignment would work rosette chooses one arbitrarily domainspecific language seen use rosette solve constant program synthesis requires solving program bridge gap synthesizer target program domainspecific language dsl dsl small programming language exactly feature interested keep thing simple define trivial dsl arithmetic operation program synthesize dsl arithmetic expression like plus x define dsl first specify syntax using racket structure record struct plus left right transparent struct mul left right transparent struct square arg transparent language plus mul square operator definition give name field operator transparent annotation tell racket automatically generate nicety like string representation define dsl semantics write interpreter structure interpreter take input program performs computation program describes return output value recursing pattern matching syntax structure created define interpret p match p plus b interpret interpret b mul b interpret interpret b square expt interpret p recursion base case p racket pattern underscore match simply return input program p base case handle constant program already use interpreter execute concrete program dsl example interpret plus square evaluates expect synthesis dsl rosette automatically lift interpreter work even symbolic constant example z bound symbolic constant evaluating interpret square plus z return expression z z lifting work matter part expression symbolic example could create expression either addition multiplication creating boolean symbolic constant branching definesymbolic z integer definesymbolic b boolean define expr b plus z z mul z z running expression interpret return expression ite b z z z z ite evaluates either second third argument depending whether first true everything need synthesize simple program let try find program dsl equivalent square z every value z use expr define candidate program want explore passing part assertion rosette synthesize form synthesize forall list z guarantee assert interpret expr interpret square z get back model output model b f model telling u set b false expr equivalent square z look back definition expr see setting b false make expr evaluate mul z z indeed equivalent square z forall argument synthesize mean searched model make assertion true every possible value z sketching example would call expr variable sketch template program want synthesize defines set possible program synthesizer search program set satisfies assertion case set contained two program general program include sketch interesting synthesis problem solve choice also make synthesis expensive one way make sketch general allow choose operator expr chose plus mil argument using rosette choose form return single symbolic expression evaluate choose argument example could written definition expr choose plus z mul z expression evaluate either plus z mul z equivalently defines set two program let use idea synthesize interesting example suppose given expression mul z job decompose sum two expression word find equivalent expression shape plus first defining new function expr evaluates set expression dsl generalizing idea expr define expr b c define left choose b c define right choose b c choose plus left right mul left right left code left right evaluate b c return value evaluate plus mul expression using value one value directly example expr z evaluates set program includes plus z plus z plus z z mul z mul z mul z z expression involving z nested expression use expr fresh symbolic constant define sketch definesymbolic p q integer new constant define sketch plus expr z p q expr z p q sketch contains program shape plus call hole filled expression involving z p q new variable p q allow synthesizer generate constant value sketch actually contains infinite number program since p q integer finally call synthesize find program satisfies new constraint define synthesize forall list z guarantee assert interpret sketch interpret mul z evaluate sketch saving result synthesis variable using rosette evaluate form apply sketch see actual program generated rather model get output plus mul z plus z equivalent mul z time synthesizer chose operation use argument including synthesizing constant assignment symbolic constant p q course many different solution synthesis problem rosette chose one arbitrarily scaling barely scratched surface program synthesis post already done something cool built dsl without thinking synthesis symbolic reasoning rosette gave u feature free idea using dsl sketching underpins huge variety exciting program synthesis tool dsl synthesizing implementation cryptographic primitive ship chrome android today synthesized network configuration rule bug critical networking infrastructure data movement dsl help synthesize efficient gpu code machine learning highperformance computing dsl education help teach algebra give better feedback assignment many application synthesis beyond computer science world large application requires scaling synthesis beyond simple example post want dig detailed rosette tutorial go building bigger tool well tutorial synthesis framework like sketch bio james bornholt assistant professor department computer science university texas austin research programming language formal method focus automated program verification synthesis disclaimer post written individual contributor share thought sigplan blog benefit community view opinion represented blog personal belong solely blog author represent acm sigplan parent organization acm
125,Lobsters,formalmethods,CSE-Formal methods,Automatically Testing Implementations of Numerical Abstract Domains (2018),https://mariachris.github.io/Pubs/ASE-2018.pdf,automatically testing implementation numerical abstract domain,,obj length filter flatedecode stream p jbd c e endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend false false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend false false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend false false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend false false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend true false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend true false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n bound encode extend true false procset pdf endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj shading sh shadingtype colorspace devicergb domain coords function functiontype domain function functiontype domain n functiontype domain n functiontype domain n functiontype domain n bound encode extend true false procset pdf endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj goto section endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto endobj obj endobj obj goto section endobj obj endobj obj goto r fit endobj obj length filter flatedecode stream v l pg n g xq g ǰ om h uզ p r ct eŗz x e bh q endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream q g ӿ h ju ё e v f b r h v vub f cǝ ɫqi n ɺ w ǖ h u q l f endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto citeafl endobj obj type annot subtype link border hic rect goto citelibfuzzer endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream xڽ j q syn
126,Lobsters,formalmethods,CSE-Formal methods,A Clever Way To Find Compiler Bugs,https://rjlipton.wordpress.com/2019/11/19/a-clever-way-to-find-compiler-bugs/,clever way find compiler bug,paper comment topic paper paper slide homepage differential testing smart fuzzing fuzzing monkey mayhem post formal method bugscreen paper paper post open problem like,comment valuable thank xuejun yang senior staff engineer futurewei technology dfa paper finding understanding bug c compiler today ken discus clever idea paper paper brought attention meaty comment paul thank topic interest u think paul mean anonymous keeping give cryptic hint identity saying man make widely known millennium unique person world applies literally update turn ken wrong identity see yang made unique listed alphabetical order paper notable common practice field list alphabetically irrespective prominence hence invented term dfa designated distinguished first author author yang chen eric eide john regehr university utah topic paul comment note evidence verification method could improve compiler correctness compiler mean program transforms high level code machine code program used countless time every day correctness clearly important correctness tricky several reason main one almost compiler try optimize code transform code instruction try rewrite rearrange instruction yield better performance compiler forever trouble changing instruction increase performance dangerous change must affect value computed done carefully actually make answer faster incorrect reason correctness tricky formal verification requires lot effort highest effort go missioncritical software compiler missioncritical already unless know missioncritical software compiled particular one hence notable formal verification make compiler reliable paper idea paper paul referenced quite elegant built program called csmith operates follows suppose compiler wish test generate various legal c program let answer yield compiled program check whether correct example int foo void signed char x unsigned char return x compiler returned correct answer example companion paper slide earlier version csmith homepage long list compiler bug found course crash refuse compile compiler wrong happens computed csmith know answer correct seems really hard correctness testing must automated whole approach based allowing ton random program tested assume human used check output clever idea paper assume least two compiler say let output let output key insight equal one compiler wrong neat elegant idea software general called differential testing least alert problem compiler program one use trick discover program cause least compiler problem extremely valuable allowed csmith discover hundred error production previously missed smart fuzzing fuzzing defined wikipedia testing providing invalid unexpected random data input computer program early historical example apple monkey program worked completely randomly ensure found bug meaningful analyzable csmith needed deeper structured intelligent design generation mayhem one csmith needed avoid program deterministic behavior formal c standard itemize case compiler allowed arbitrary even selfinconsistent behavior lot c bug dubious code could dismissed hand another probability program built haphazardly original csmith version would reveal bug observed peak sourcecode size line across multiple page make great example csmith routine compress bug instance found simple trick shortening numerical expression use bugsensitive part others lifting local variable block bypassing pointer jump third goal generator branch aspect case grungy part ripe finding compiler bug paper talk length regehr yang advisor also blogger current post dated november titled helping generative fuzzers avoid looking light good part guess part go even detail formal method bugscreen regarding formallyverified compcert compiler paul quoted paper striking thing compcert result middleend bug found compiler absent early underdevelopment version compcert compiler tested csmith find wrongcode error lack trying devoted six cpuyears task apparent unbreakability compcert support strong argument developing compiler optimization within proof framework safety check explicit machinechecked tangible benefit compiler user august paper michaël marcozzi qiyi tang alastair donaldson cristian cadar give recent result involving csmith tool interesting discussion page excerpt experience working area found compiler fuzzing contentious topic research talk compiler fuzzing often followed question importance discovered bug whether compiler fuzzers might improved taking inspiration bug encountered user compiler wild argue miscompilation bug whether fuzzerfound ticking bomb regarded severe avoided completely via formal verification spirit compcert go say however fullydeveloped compiler used noncritical software kind bug typically found fuzzing tend questionable importance paper titled systematic impact study fuzzerfound compiler bug far found definite result seem mixed implication futurework section note evaluated impact bug compiler intended function program compile possible security noted cloudflare post come misuse simple code completely correct lead u wonder coming fullcircle whether formal method might help quantify relative importance aspect language area compiler guide moreintelligent generation test case open problem comment interesting perhaps finding obscure bug important perhaps bug could used attack system perhaps one could use break system security may compromised error even unlikely one occur wild think like like loading related
127,Lobsters,formalmethods,CSE-Formal methods,Differentially Testing Soundness and Precision of Program Analyzers,https://arxiv.org/abs/1812.05033,differentially testing soundness precision program analyzer,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
128,Lobsters,formalmethods,CSE-Formal methods,TLA+ Video Course by Leslie Lamport,https://lamport.azurewebsites.net/video/videos.html,tla video course leslie lamport,tla video course lecture web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version video file zip file script downloading instruction,tla video course last modified july series video lecture teach programmer software engineer write tla specification assumes basic understanding programming concept knowledge elementary mathematics might taught beginning university math course computer scientist would also helpful word warning video light entertainment require careful viewing actual thinking may often stop video digest seen perhaps skip back view accompany video coffee better popcorn lecture watched web however people slow network connection might prefer download lower resolution version video watch offline instruction given script video also provided contains everything shown said video except shot author hearing impaired viewer fluent english find helpful read script watch video script also read instead watching video want review lecture hate video however html file display video may needed download material lecture introduction tla explains tla might want use introduces concept state machine length web version correction offline version video file zip file script state machine tla show simple state machine described tla giving first glimpse tla specification length web version offline version video file zip file script resource tool describes resource learning tla explains download toolbox show use open spec view prettyprinted version run tlc script display said portion video demonstrate use toolbox length web version correction offline version video file zip file script die hard save life two hollywood action hero way start learning write tla spec checking parser tlc length web version offline version video file zip file script transaction commit commitment marriage database transaction specified also learn use mathematical function specification length web version correction offline version video file zip file script twophase commit commitment achieved marriage database transaction also learn record tla using tlc length web version correction offline version video file zip file script paxos commit specifies real faulttolerant algorithm committing database transaction explains mathematical operation constructing combining set length web version offline version video file zip file script implementation twopart lecture introduces temporal formula explains mean one specification implement another length part part part preliminary web version correction offline version video file zip file script part work web version offline version video file zip file script alternating bit protocol twopart lecture explains liveness describes must happen fairness part high level specification web version offline version video file zip file script length part protocol web version correction offline version video file zip file script length implementation refinement twopart lecture explains general meaning implementation involves refinement mapping part preliminary web version offline version video file zip file script length part refinement mapping web version offline version video file zip file script length downloading instruction watching lecture offline download tlavideofileszip extract content folder let suppose name folder tlalectures folder contain file tlastylescss tlavideojs folder dist watch lecture offline download lecture video file zip file first name folder tlalectures let suppose file named smandtlazip extract content smandtlazip folder tlalectures one extracted file named smandtlahtml lecture zip file contain file view video open web browser html file
129,Lobsters,formalmethods,CSE-Formal methods,Stacked Borrows: An Aliasing Model for Rust (the paper),https://www.ralfj.de/blog/2019/11/18/stacked-borrows-paper.html,stacked borrows aliasing model rust paper,stacked borrows aliasing model rust paper blogged stacked borrows stacked borrows aliasing model rust formalizing stacked borrows coq,stacked borrows aliasing model rust paper blogged time stacked borrows proposed aliasing model rust researcher researcher expected write stacked borrows well lot work finally present paper stacked borrows aliasing model rust thanks open access paper available ccby license already read blog post paper say much seen already however paper coherent complete introduction stacked borrows far always confused aspect stacked borrows read previous blog post paper great way learn stacked borrows nothing new may wonder took u long needed people answer coauthor hai help jeehoon took herculean task formalizing stacked borrows coq formally verifying key optimization actually sound model proof turned complex carry expected sure claimed stacked borrows previous post actually correct fact able complete proof time conference submission deadline lucky enough reviewer convinced enough informal description evaluation miri still accepted paper let also use opportunity thank mozilla rust community help project work would possible without mozilla hiring two internship without great feedback gave response blog post without support got implementing stacked borrows testing standard library growing number external crate miri fixing stacked borrows error came thank much working hopefully continue great fun
130,Lobsters,formalmethods,CSE-Formal methods,Grappling with infinity in constraint solvers,https://tuzz.tech/blog/grappling-with-infinity,grappling infinity constraint solver,grappling infinity constraint solver chris patuzzo sentient sentient option approximation sentient reason infinity sat option lingeling could dynamically change size representation infinity excellent series assign value diophantine equation fit approximation multidimensional space infinitedimensional space incrementality roundrobin difficult incremental sat rust crate sat race representation ripplecarry adder nphard problem nphard turingcompleteness sentient website time loop unrolling model checker hoare logic podcast next twitter,grappling infinity constraint solverspublished november chris patuzzoin created programming language called sentient since time reflect think language series thatmany constraintsatisfaction problem deal infinity shape form even rudimentary problem like find two integer sum solution include fact infinitely many solution infinitely many pair integer test sentient program solve problem int b invariant b expose b sentient program find integer sum article sentient many concept apply constraint solver generalwe run number option continuously find solution multiple solution sentientwhen sentient return exhausted search space find solutionsafter second program terminates seems wrong problem infinitely many solution ever terminate run forever simple answer integer sentient really integer far mathematical definition concerned magnitude limited many bit represent default specified eg many case fine pick number bit big enough worry time fine often want start small work way larger representation mean restarting program timefor problem solution extremely rare nonexistent could take week month sentient find one case make sense start small representation progressively rule search space increasing sizeunfortunately program restarted lose progress region already explored explored increase int sentient find new solution also find solution wastefulwe could compensate adding constraint b invariant b b region already exploredbut becomes unwieldy many problem easy specify also manual process therefore errorprone ideally sentient would offer firstclass support something like idea might workapproximationsi found useful way think term approximation eightbit integer really approximation mathematical infinite version integer domain finite long stay within bound behaves wayi using approximation literal sense according precise mathematical definitionmost time write computer program think deal concretion variable assigned concrete value provided stay within range without overflowing everything check outin case variable symbolic actually assign value int b tell sentient exist specify constraint job discover value b work something tangible reason infinitywhy sentient reason infinity technically could currently implementation closely relates mechanism us solving program compiled instance sat definition boolean equation comprise finitely many variable clausesthis case though sentient could abstract equation automatically introduce new variable represent larger integersactually sentient something similar number option sentient find multiple solution problem repeatedly solving equation introduces new clause time ban solution foundsentient solve equation delegate sat solver lingelingcould dynamically change size representation could obvious program declares multiple integer change number bit one one example increase b one go followed b problem could difference magnitude important int b target invariant b target expose b target program contains implicit knowledge multiplying two number range result number range every time increase b representation one bit probably increase target twotechnically use x lie outside considered complex case array integer array array also need consider sentient communicates region search space exhausted far infinitybefore try answer question let first consider place infinity might crop excellent series numberphile problem finding three cube sum target number let use help reasonhere sentient program solve problem int b c target invariant acube bcube ccube target expose b c target program find three cube sum targetwe could hardcode target make program general assign value runtimefirstly let say want generalise program instead summing three cube together nice able write program sum n cube could assign n runtime want leave unspecifiedthis valid syntax program might look like array int number int target invariant numbersmap cube sum target expose number target program find n cube sum targetthis valid specify size array egfurthermore exponent fixed wonderful could assigned runtime left unspecified extra degree freedomthat program might look like array int number int target exp invariant numbersmap pow exp sum target expose number target exp program find n number raised exponent sum targetthis deviate sentient syntax map support passing args function pointer hopefully get ideaperhaps generic consider four line able write program solve broad class diophantine equation find tantalising would triumph ability communicate intention machinehow fit approximation consider case context approximation fixedsize array could seen approximation general array unlimited size could approximate general array running multiple version program different sizesthere infinitely many array size try infinitely many exponent case differ slightly overlap search space ninebit integer contain eightbit integer square cube distinct problemssome approximation result containment hierarchy others define independent spacesmultidimensional spacefor approximation think defining dimension space example twodimensional space integer b approximation dimensional spacethe highlighted point instance sentient program integer b approximated nine eight bit respectively shaded region show space considered includes integer fewer bit ax go infinityfor approximation distinct search space shaded region point lineinteger approximation define region contains int etcthe size space representative search space double size time add single bit approximationeach time approximate integer add new dimension space run sentient program multiple time different approximation think defining walk path multidimensional spaceinfinitedimensional spaceour extremely general program contains line two kind infinity array unlimited size integer arbitrarily large problematic first need approximate size array approximate integer within arraythe result two degree freedom infinite dimensional space dimension every possible size array nth dimension space defines many bit used approximate integer position n arrayas add approximation space compounded spatial metaphor start fall apart sure whether useful think approximation way go small number dimensionsincrementalitynow let turn back question change approximation time seem obvious approach something naive like roundrobin approximation overlapping nonoverlapping space complicate thing furtherit seems robust way delegate decision programmer define protocol program determine approximation change various stage searchfor example program find two integer sum ten could initially call external program instructs many bit use approximation search space exhausted could ask program next could ask time interval solution external program decide approximation changethe protocol could even allow sentient spawn new process search distinct space parallel example could search solution square cube problem concurrently controlling approximation instancehistorically difficult efficiently parallelise sat solving strategy could work wellincremental satin world sat solving mechanism already exists communicating solver search called reentrant incremental satisfiability application program interface referred reverse acronym ipasir fact wrote rust crate long ago communicating via interface advantage using speed solving problem modified small way without restart search scratch time possible solve problem independently however might inefficient compared incremental sat solver reuse knowledge acquired solving previous instance sat race abbreviated present sentient use ipasir fairly new wrote language wider adoption today least would speed searching multiple solution problem think could help approximation tooideally single instance sat problem would live duration sentient program approximation change would underlying boolean equation would allow maximal amount information knowledge reusedin theory would mean overlapping search space explored oncerepresentationsthere limitation ipasir otherwise would difficult solver reuse knowledge previous search example remove clause instead make assumption shortlivedyou effectively remove clause using assumption adding one clause want removesome thought would need go represent approximation way allows change later go int want throw everything possible approximation grow shrink operation apply integer need able cope changing number bit example integer addition modelled ripplecarry adder clause boolean equation would need use assumption clever waysit may even efficiency gain know advance approximation change ever grow precisely two bit time perhaps efficient way structure equation surenphard problemsone final thought incrementality would allow sentient reach dizzying height able solve nphard problem present sentient solve optimisation problem specifically search minimum maximumshowever effectively running program multiple time example let say want find two number sum ten sum square minimised could write program like nphard problem since solved linear algebra demonstrates pointint b max sum asquare bsquare invariant b invariant sum max expose b sum max optimisation problem sentientyou could run multiple time reducing max solution optimal solution repeated runsthis find optimal solution b whose sum square minimalthe video sped slightlyi sure whether definition approximation extends optimisation problem definitely opportunity use incrementality number useful waysturingcompletenesswhile topic nphard problem probably worth saying thing computability turing completeness sentient website wrote fact sentient turing complete total programming language fully decidable suffer halting problem drastically limit example recursive function call supported never bein fact lens approximation may possible sentient become turing complete present sentient support recursive function call int function factorial n return n n factorial n invariant afactorial expose hypothetical sentient program using recursiona recursive function call approximated limiting depth recursion example factorial approximated depth le find solution improving would similarly moment int sum atimes function sum invariant sum expose hypothetical program allowedthe time method call function time borrowed rubythe modifier let function access variable defined outsidesentient throw error try run program called time time support integer literal arg supported symbolic sentient unable compile program boolean equation size equation determined structure fixed time method work integer literal like one place sentient differentiates symbolic literal variablesagain could solve problem approximation limiting value aloop unrollingthis technique already used various form compiler frequently unroll loop recursive function call performance reason model checker perform static analysis check invariant often using technique established hoare logici fortunate enough see tony hoare conference spoke episode podcasti see loop unrolling another kind approximation recursive function could identified static analysis external program could decide many call allowed current instance searchin theory technique would allow sentient turing complete sense combined incremental sat could make extremely powerful system ability solve problem relating arbitrary turing machine would amazingwhere next sure like play idea perhaps day incorporate sentient something else clearly challenge incrementality interface design think right trackthis first indepth article written sentient constraint solving hopefully come announce future update twitter want hear follows always appreciated thanks
131,Lobsters,formalmethods,CSE-Formal methods,A Domain-Specific Language for Verifying Software Requirement Constraints,https://arxiv.org/pdf/1911.02679.pdf,domainspecific language verifying software requirement constraint,,obj filter flatedecode length stream xf v dڮ yu g c endobj obj filter flatedecode length stream kk jv ȓv jԡ mi r ހ n endobj obj filter flatedecode length stream b b sosu oojry v tmg v stx lp e jo r unc endobj obj filter flatedecode length stream h ak lu z cp fg q r endobj obj type xobject subtype image bitspercomponent colorspace devicergb filter flatedecode height length width stream z ڒ m웰 ød e tq n n endobj obj type objstm filter flatedecode first length n stream qxq f g l c e ӷ p z endobj obj filter flatedecode length stream r x r r fr x r n stream h l k ݿ oq e x
132,Lobsters,formalmethods,CSE-Formal methods,Modeling Systems with TLA+,https://www.youtube.com/watch?v=efCKA-Ug8w4,modeling system tla,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature gig city elixir speaker talk ben marx youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature gig city elixir speaker talk ben marx youtube
133,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a Constant-Time Preserving C Compiler,https://eprint.iacr.org/2019/926,formal verification constanttime preserving c compiler,cryptology eprint archive report pdf bibtex citation version report cryptology eprint archive,cryptology eprint archive report formal verification constanttime preserving c compiler gilles barthe sandrine blazy benjamin grégoire rémi hutin vincent laporte david pichardie alix trieu abstract timing sidechannels arguably one main source vulnerability cryptographic implementation one effective mitigation timing sidechannels write program perform secretdependent branch memory access mitigation known cryptographic constanttime adopted several popular cryptographic library paper focus compilation cryptographic constanttime program specifically following question code generated realistic compiler constanttime source program provably constanttime surprisingly answer question positively mildly modified version compcert compiler formally verified moderately optimizing compiler c concretely modify compcert compiler eliminate source potential leakage instrument operational semantics compcert intermediate language able capture cryptographic constanttime finally prove modified compcert compiler preserve constanttime mechanization maximizes reuse compcert correctness proof use new proof technique proving preservation constanttime technique achieve complementary tradeoff generality tractability proof effort independent interest category keywords implementation compilation formal verification constanttime security original publication form doi date received aug last revised dec contact author alix trieu c au dk available format pdf bibtex citation version version report short url cryptology eprint archive
134,Lobsters,formalmethods,CSE-Formal methods,Mutation Analysis for Coq,http://cozy.ece.utexas.edu/mcoq/,mutation analysis coq,introduction coq download available github resource publication mcoq mutation analysis coq verification project mutation analysis coq contributor contact github issue,introduction software developed verified using proof assistant coq provide trustworthiness beyond software developed using traditional programming language testing practice however guarantee formal verification good underlying definition specification property property incomplete flaw definition may captured verification lead unexpected system behavior failure address problem past research commended mutation analysis general technique evaluating specification adequacy completeness based making smallscale change system observing result present mcoq first mutation analysis tool coq project mcoq change coq definition change producing modified project version called mutant whose proof exhaustively checked checking succeeds ie mutant live may indicate specification incompleteness believe mcoq useful proof engineer improving quality verification project researcher evaluating proof engineering technique download latest release mcoq available github resource publication kush jain karl palmskog ahmet celik emilio jesús gallego aria milo gligoric mcoq mutation analysis coq verification project international conference software engineering tool demonstration track icse demo appear seoul south korea may ahmet celik karl palmskog marinela parovic emilio jesús gallego aria milo gligoric mutation analysis coq international conference automated software engineering ase page san diego usa november contributor contact report bug make feature request feel free open github issue also send comment question email contributor
135,Lobsters,formalmethods,CSE-Formal methods,Certified concurrent abstraction layers (2018),https://www.cs.columbia.edu/~rgu/publications/pldi18-gu.pdf,certified concurrent abstraction layer,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream
136,Lobsters,formalmethods,CSE-Formal methods,Parallel Commits: An Atomic Commit Protocol For Globally Distributed Transactions,https://www.cockroachlabs.com/blog/parallel-commits,parallel commits atomic commit protocol globally distributed transaction,new feature called transactional pipelining release previous post transactional pipelining transaction atomicity postgresql atomicity cockroachdb cockroachdb architecture documentation blog post multiversion concurrency control mvcc problem twophase commit twophase commit protocol previous blog post proposed solution academia google spanner paper mdcc multidata center consistency generalized paxos lowlatency multidatacenter database using replicated commit tapir building consistent transaction inconsistent replication carousel lowlatency transaction processing globallydistributed data parallel commits calvin fast distributed transaction partitioned database system changing commit condition status recovery procedure benchmark result running benchmark cockroachdb linux utility round trip time rtt theory verification theory distributed transaction layer partitioned replication layer flexible paxos flexible paxos intentscoped raft transactionscoped changing quorum size calvindb verification tla dynamodb raft consensus algorithm hillel wayne practical tla parallelcommitstla tla toolbox commit open position,get blog post inbox distributed acid transaction form beating heart cockroachdb allow user manipulate data transactionally matter physically resides distributed transaction important cockroachdb goal make data easy spend lot time thinking make fast possible specifically cockroachdb specializes globally distributed deployment put lot effort optimizing cockroachdb transaction protocol cluster high internode latency earlier year published blog post new feature called transactional pipelining release feature reworked cockroachdb transaction protocol pipeline writes within interactive transaction order reduce endtoend latency customer saw marked improvement speed transaction feature released closed discussion preview planned continue work speeding global transaction needed take hard look atomic commit protocol used committing transaction found overly rigid hindered performance run collection individually replicated consensus group ie range cockroachdb went back drawing board developed new atomic commit protocol optimized globally distributed transaction running system partitioned consensus group post explore new atomic commit protocol call parallel commits parallel commits part cockroachdb upcoming release feature promise halve latency distributed transaction performing consensus round trip required commit transaction concurrently post pick previous post transactional pipelining left reader read blog post able jump right one reader nt may want skim post get feel cluster topology assumption continue make transaction atomicity atomicity likely first property people think hear word transaction core transaction simply collection operation said atomic composite operation succeed fail together single unit word atomicity ensures transaction nothing either commits roll back instantaneously database typically ensure atomicity delicate dance locking indirection coordination conflicting transaction detail fit together specific database implementation share common theme example postgresql individual tuples ie versioned row contain id transaction wrote transaction still progress transaction consider provisional tuples visible would violation isolation even weakest isolation level postgresql enforces maintaining transaction disposition single place commit log clog transaction find tuple possibly live conflicting transaction check commit log determine whether tuple visible transaction commits change suddenly become visible accomplished postgresql trick write fact transaction committed commit log ensures point conflicting transaction run one tuples observe transaction committed check commit log postgresql update tuple hint bit inform conflicting transaction tuple committed commit log lookup necessary last part strictly optimization necessary atomicity think dance carefully realize challenge atomicity nt one performing multiple change simultaneously instead fundamentally game managing visibility transaction operation transaction operation appear committed rolled back instantaneously observer atomicity cockroachdb distributed database like cockroachdb thing fairly similar real difference transaction may perform writes across series different machine seen past blog post cockroachdb handle idaddressable transaction record write intent contain transaction id discussed cockroachdb architecture documentation blog post like postgresql transaction stumble upon write intent forced look corresponding transaction record determine intent visibility also similar fact transaction commit simply flip bit transaction record mark transaction committed difference unlike postgresql commit log transaction record distributed throughout cluster instead centralized improve locality transaction record access finally transaction commit completes write intent cleaned asynchronously avoid unnecessary transaction record lookup like hint bit postgresql performance optimization strictly necessary atomicity let take look timeline transaction cockroachdb get feel behaves time sake simplicity focus writeonly transaction course cockroachdb support generalized readwrite sql transaction handling readonly statement within readwrite transaction straightforward due multiversion concurrency control mvcc see cockroachdb navigates sql transaction incrementally laying write intent mutation statement issued transaction also writes transaction record pending status time writing first intent say intent writes pipelined nt wait succeed responding sql client informing issue statement eventually sql client issue commit statement point cockroachdb wait intent writes complete process durable replication complete transaction modifies transaction record mark committed change also replicated durability transaction considered committed soon operation completes success commit statement acknowledged sql client figure transaction timeline without parallel commits asynchronously client acknowledged transaction go resolve intent finished delete transaction record entirely least transaction atomicity worked cockroachdb version problem twophase commit familiar distributed system may recognize multistep process variation twophase commit protocol specifically process writing intent analogous prepare phase process marking transaction record committed analogous commit phase one commonly cited problem twophase commit blocking participant voted commit transaction coordinator made final decision system enters fragile state transaction coordinator crash would impossible others know final outcome transaction would stall transaction conflicted avoid issue system like cockroachdb run top consensus protocol ensuring transaction state highly available resilient failure rest system specifically cockroachdb mean transaction transaction record replicated way write intent demonstrated previous blog post major downside strategy run partitionedconsensus system like cockroachdb requires two sequential round consensus writes example transaction writes two range writes range achieve consensus concurrently however transaction must wait writes succeed marking transaction record committed write transaction record requires second round consensus latency model derived previous post showed latency transaction twice latency single consensus write see structure layering twophase commit top system disjoint consensus group ie range responsible increased transaction latency something wanted get rid proposed solution academia number academic group taken notice problem proposed unique solution addressing motivating example much work original google spanner paper also served inspiration cockroachdb kraska et al presented mdcc multidata center consistency achieves atomic transaction semantics replicating update option storage node instead replicating update value directly mdcc soon system application server learns option record transaction able consider transaction committed asynchronously notify storage node execute outstanding option protocol optimized allowing client propose paxos writes without communicating leader permitting update commute one another two optimization made within framework generalized paxos later mahmoud et al published lowlatency multidatacenter database using replicated commit paper suggested running twophase commit multiple time different data center using paxos reach consensus among data center whether transaction commit strategy called replicated commit avoids several interdata center communication trip placing independent transaction coordinator data center zhang et al approached problem yet different angle tapir building consistent transaction inconsistent replication project focused reducing coordination use new transaction protocol layered top replication scheme provides consistency proposed replication technique called inconsistent replication provides faulttolerance without ordering allows avoid synchronous crossreplica coordination designated leader transaction protocol made aware limited guarantee replication layer allowing system commit distributed readwrite transaction single roundtrip finally yan et al introduced carousel lowlatency transaction processing globallydistributed data system reduced number sequential widearea network roundtrips required commit transaction replicate result maintaining serializability targeting fixedset interactive transaction read write key must known start transaction read first round influence writes second project reduced latency transaction running within system replication group different way required different tradeoff system transaction model ultimately project confirmed slowdown inherent running twophase commit top strong replication avoided rethinking transaction replication fit together however none provided clear blueprint existing system like cockroachdb could address problem create solution parallel commits parallel commits cockroachdb approach solving performance problem goal new atomic commit protocol reduce latency transaction single roundtrip distributed consensus accomplish goal throw away twophase commit rework transaction cockroachdb arrive committed state discussing parallel commits work let consider requirement needed maintain adjusting commit protocol first needed continue enforce property transaction ca nt commit writes replicated critical property ensuring durability transaction writes continuing provide consistency individual write cap sense word addition needed maintain property commit status durably replicated form replicated transaction record seen system forgo requirement get trouble result simply put system ca nt compromise availability transaction commit information without compromising availability entire system third wanted maintain pessimism eager discovery transaction conflict influenced design transactional pipelining early development cockroachdb moved away pure optimistic concurrency control due negative effect performance contended workload complication requiring transaction retry loop imposed client application instead moved towards model closely aligned traditional twophase locking statement transaction discovers conflicting writes synchronously queue behind writer proceeding avoids entire class transaction restarts finally determined could nt use approach required write set transaction known transaction began sound like strange requirement requiring transaction predeclare row intend write ahead time common theme various attempt solve problem example see academic solution along exotic approach like thomson et al calvin fast distributed transaction partitioned database system unfortunately nt work sql system transaction interactive requirement mind went back drawing board developed new atomic commit protocol call parallel commits let see work changing commit condition accomplish goal adhering requirement parallel commits protocol change condition consider transaction committed defined committed transaction one transaction record committed state meant transaction needed wait intent writes succeeded beginning process writing transaction record state visualize structure committed transaction record like transactionrecord status committed parallel commits introduce new transaction record state called staging meaning state transaction determined key intends write even writes yet completed successfully addition containing staging status transaction record state list key inprogress writes transaction considered committed record state observer prove writes listed transaction record successfully achieved consensus visualize structure new style committed transaction record like transactionrecord status staging writes key c key observer transaction record staging state allowed consider transaction committed know transaction writes succeeded distributed commit condition transaction committed multiple individual condition must hold condition longer satisfied single centralized location major benefit get definition transaction coordinator longer need wait transaction writes succeed writing transaction record state instead pipeline intent writes sql statement executed immediately pipeline write transaction record record inflight intent writes commit statement arrives pipelining still discovers transaction conflict eagerly nt require client declare writes ahead time cost distributed consensus latency paid transaction pay cost replication process writes including transaction record parallelized transaction coordinator begin waiting write succeed every write initiated writes succeeded transaction coordinator immediately respond sql client informing successful transaction commit transaction considered committed record staging state observer prove writes listed transaction record successfully achieved consensus let see look like practice using sql transaction used earlier cockroachdb navigates sql transaction incrementally laying write intent mutation statement issued eventually sql client issue commit statement using parallel commit protocol cockroachdb nt need wait intent writes succeed writing commit marker transaction record instead immediately pipeline write transaction record move staging status additionally write record key write transaction inflight cockroachdb wait writes complete process distributed consensus parallel transaction considered committed success commit statement acknowledged sql client figure transaction timeline parallel commits coordinator know transaction committed launch asynchronous process clean transaction intent delete transaction record compare timeline one visualize latency improvement provided parallel commits instead waiting two synchronous roundtrips distributed consensus acknowledging transaction commit cockroachdb wait one status recovery procedure transaction coordinator know writes succeeded little trouble deciding send commit acknowledgment client however transaction nt lucky said observer transaction record staging state consider transaction committed observer prove transaction writes succeeded call process transaction status recovery procedure key providing atomicity slowpath parallel commits eg presence machine failure procedure work follows transaction observes write intent conflicting transaction look intent transaction record like always difference find staging record status transaction indeterminate could committed could aborted find contending transaction need kick transaction status recovery procedure transaction recovery intent write recorded staging transaction record consulted see succeeded intent missing use inmemory data structure cockroachdb called timestamp cache prevent missing write ever succeeding future consider transaction aborted however intent writes successfully replicated consider transaction committed either way point observer able rewrite transaction record new consolidated status avoid future observer needing go full recovery process process critical determining state transaction staging state yet fairly expensive prefer observer transaction ever need go process avoid two way first transaction coordinator asynchronously mark transaction record committed soon ensures transaction move staging state soon committing second transaction coordinator cockroachdb periodically send heartbeat transaction record allows contending transaction determine whether transaction still progress use notion liveness avoid ever kicking status recovery procedure transaction expired intuition long transaction coordinator still alive faster let update transaction record result parallel commit go whole status recovery process put together two technique mean practice transaction status recovery procedure ever run case transaction coordinator dy procedure got name primary purpose recover untimely crash never expected run hot path transaction processing benchmark result change gain using parallel commits cockroachdb able commit crossrange transaction half time previously able secondary index sql provide easy way visualize improvement past release user cockroachdb repeatedly surprised addition first secondary index table appeared double time took insert table index sql table stored separate set range process adding first secondary index table effect promoting transaction inserted table singlerange transaction full crossrange transaction transition forced cockroachdb fall back onephase commit fastpath standard twophase commit protocol effect doubling latency transaction first secondary index added table parallel commit fix issue singlerange crossrange transaction take roughly amount time demonstrate performed experiment ran insert statement add new row table variable number secondary index table data replicated across vms figure transaction latency variable number secondary index figure demonstrates median latency insert statement table number secondary index table varied parallel commits latency cliff insert statement transaction promoted crossrange transaction exactly first secondary index added parallel commits latency cliff disappears secondary index case parallel commits improves uncontended transaction span range expect similar speedup tpcc benchmark provides another avenue explore latency improvement talked tpcc frequently past published guideline running benchmark cockroachdb heart benchmark transaction type called new order new order transaction simulates process recording customer order order entry system arbitrary business performs series read statement write statement modifying row process figure tpcc new order transaction latency variable internode rtt figure measure median latency new order transaction cockroachdb without parallel commits enabled experiment replicate tpcc dataset across three vms used tc linux utility manually adjust internode round trip latency internode round trip time grows case see transaction latency grow proportionally due synchronous replication node cluster however slope two line different without parallel commits see clientperceived latency transaction grow twice rate round trip time rtt grows parallel commits see latency grow exactly rate rtt explanation simple parallel commits transaction wait single roundtrip distributed consensus theory verification computer scientist nt satisfied implementation appeared work benchmark result demonstrated desired speedup order claim new commit protocol complete felt needed formalize protocol term existing computer science theory verify protocol sound using formal method theory something always stood u unfortunate apparent split academic literature discussion distributed transaction discussion distributed consensus even cockroachdb fallen trap separating distributed transaction layer partitioned replication layer considering disjoint concern speculate divide transaction often tasked coordinating series different change across participant ie different update per partition consensus often tasked coordinating change across participant ie replication design new atomic commit protocol parallel commits forced take step back think process distributed ordering agreement holistically led u attempt unify concept distributed transaction distributed consensus single umbrella flexible paxos heidi howard flexible paxos give u framework flexible paxos simple observation necessary require quorum paxos intersect sufficient require quorum used leader election phase overlap quorum used previous replication phase implied result observation quorum paxos need majority quorum instead quorum paxos arbitrarily sized long meet certain criterion formalize condition flexible paxos defines term quorum leader election quorum quorum replication quorum generalization allows u frame problem distributed transaction run partitioned consensus group one hierarchical paxos consensus lower level hierarchy replication group performs consensus come agreement outcome individual writes transaction intent written upper level hierarchy replication group perform form consensus come agreement outcome transaction whole transaction committed aborted upperlevel outcome based result individual lowerlevel outcome intuition behind flexible paxos critical give u ability reconfigure quorum level need lower intentscoped level want maximize availability individual writes use majority quorum leader election phase replication phase default raft configuration change level operates within context single range process achieving consensus simply process coordinating change within range replication group raft terminology change must committed raft group log figure consensus hierarchy transaction upper transactionscoped level want node able perform possibly conflicting transaction concurrently need avoid transaction leader instead opt first phase quorum size single node meaning first phase consensus resolved implicitly transaction coordinator node without external agreement flexible paxos mandate lead second phase quorum participant ie key cluster course reality transaction touch key two transaction touch disjoint set key never conflict expressed different way interaction two possibly conflicting transaction determined fully interaction mutually conflicting key use trivially reduce second phase quorum size key transaction actually make change formalization fascinating reduces problem distributed transaction run partitioned consensus group one achieving consensus across key transaction writes within consensus group made possible treating individual intent write vote towards commit transaction voting process exactly end parallel commits intent writes succeed achieving consensus voted transaction commit transaction achieved consensus formalization also allows u quickly answer number question instance natural question ask would whether need participant vote transactionlevel consensus reduces system availability answer participant transactionlevel consensus decision key already individually replicated highavailability system remains highly available whole changing quorum size lead another question larger quorum transaction level flexible paxos equation say every participant voted quorum transaction level consensus could achieved without remote vote mean could consider transaction committed individual writes achieved consensus seems little get intuition would mean practice let ask would mean full quorum transaction level terminology flexible paxos quorum leadership election quorum would electing transaction leader leader distributed consensus assign ordering operation operation ca nt conflict word transaction leader would sequence transaction actually executing none would ever conflict abort squint end looking lot like deterministic database along line calvindb twolevel paxos framework built specialized arrive cockroachdb arrive calvindb changing size quorum pretty cool result raise question whether useful configuration two extreme verification addition desire determine parallel commits fit broader landscape distributed system theory also wanted formally specify protocol prove safety property verification turned tla formal specification language developed leslie lamport tla used great success verify system algorithm ranging dynamodb way raft consensus algorithm used cockroachdb happened around time finishing work parallel commits hosted internal workshop cockroach lab engineer learn tla hillel wayne author practical tla course week developed formal specification parallel commits associated model asserted atomicity durability property expected new commit protocol full specification found parallelcommitstla let take look short snippet get feel kind safety liveness invariant enforces spec start definition implicitlycommitted recordstaging k key intentwrites k epoch recordepoch intentwrites k t recordts implicitlycommitted operator defines mean transaction new distributed commit state parallel commits introduced read like would mathematical statement transaction implicitly committed record staging status intent writes intent write succeeded correct epoch timestamp exactly definition gave earlier blog post expressed using formal notation explicitlycommitted recordcommitted explicitlycommitted operator straightforward defines mean transaction traditional centralized commit state condition transaction record must committed status spec defines correctness property must hold parallel commits considered correct transaction ever becomes implicitly committed eventually become explicitly committed implicitcommitleadstoexplicitcommit implicitlycommitted explicitlycommitted client acked transaction must committed ackimpliescommit commitack implicitlycommitted explicitlycommitted first property implicitcommitleadstoexplicitcommit liveness property us lead temporal operator assert transaction ever enters implicit commit state eventually enters explicit commit state tla model checker ensures property hold even presence transaction coordinator failure long actor remains around kick transaction status recovery procedure spec indicates transaction coordinator process terminate time marking unfair process second property ackimpliescommit safety property us implication propositionallogic operator assert transaction coordinator acknowledges success commit operation client transaction must committed circumstance client ever acknowledged transaction committed successfully tla model checker enumerate entire state space parallel commits protocol check invariant hold notice invariant say whether transaction implicitly explicitly committed transaction either two state however previous property ensures transaction eventually make explicit commit state additionally another property spec ensures transaction committed stay committed matter found process writing specification gave u confidence parallel commit protocol integration cockroachdb anyone access tla toolbox download specification model run tla model checker commit conclusion parallel commits combine transactional pipelining provide interactive sql transaction complete single roundtrip distributed consensus georeplicated cluster expect result dramatic reduction clientobserved latency new atomic commit protocol enabled default cockroachdb user upgrade released begin taking advantage change addition work parallel commits still big plan continue pushing performance transaction processing forward cockroachdb next release intend reduce contention footprint transaction reduce write amplification transactional writes improve facility cockroachdb provides localize data access within transaction much improving performance strongly consistent distributed transaction interest check open position
137,Lobsters,formalmethods,CSE-Formal methods,Metamath Zero: The Cartesian Theorem Prover,https://arxiv.org/pdf/1910.10703.pdf,metamath zero cartesian theorem prover,,obj stream r pf qi pv
138,Lobsters,formalmethods,CSE-Formal methods,Symbolically executing a fuzzy tyrant,https://www.youtube.com/watch?v=zXGPc38FfqQ,symbolically executing fuzzy tyrant,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature grrcon symbolically executing fuzzy tyrant lojikil youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature grrcon symbolically executing fuzzy tyrant lojikil youtube
139,Lobsters,formalmethods,CSE-Formal methods,A Modular Integration of SAT/SMT Solvers to Coq through Proof Witnesses,https://prosecco.gforge.inria.fr/personal/ckeller/Documents-recherche/Publications/cpp11.pdf,modular integration satsmt solver coq proof witness,,obj length filter flatedecode stream xڝ ћ mp r
140,Lobsters,formalmethods,CSE-Formal methods,"Haskell Programming With Tests, and Some Alloy",https://staff.fnwi.uva.nl/d.j.n.vaneijck2/courses/10/pdfs/Week6.pdf,haskell programming test alloy,,obj goto r fit endobj obj length filter flatedecode stream
141,Lobsters,formalmethods,CSE-Formal methods,Abstract State Machines for the Classroom: The Basics (2007),https://www2.informatik.hu-berlin.de/sam/preprint/reisig203.pdf,abstract state machine classroom basic,,obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream n q endstream endobj obj r r r r endobj obj procset pdftextimagec font r endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream tz c ӿ g f n endstream endobj obj r r r r r endobj obj procset pdftextimagec font r endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream ʫ q sd n q b l 璺 b ǣa td ry
142,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a Vehicle-to-Vehicle (V2V) Messaging System,https://leepike.github.io/pubs/pike-cav18.pdf,formal verification vehicletovehicle messaging system,,obj length filter flatedecode stream ha f ҷ endstream endobj obj length filter flatedecode stream x w z c l xb u z h c q ђ v kn p endstream endobj obj length filter flatedecode stream u
143,Lobsters,formalmethods,CSE-Formal methods,Alloy for TLA+ Users,https://youtu.be/tZywZc04lJg?list=PLWLcqZLzY8u_Osnz-YPOVrptG1ys73OkR,alloy tla user,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature alloy tla user jay parlar youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature alloy tla user jay parlar youtube
144,Lobsters,formalmethods,CSE-Formal methods,EverParse: Verified Secure Zero-Copy Parsers for Authenticated Message Formats,https://www.usenix.org/conference/usenixsecurity19/presentation/delignat-lavaud,everparse verified secure zerocopy parser authenticated message format,support usenix,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author tahina ramananandro antoine delignatlavaud cedric fournet nikhil swamy tej chajed nadim kobeissi jonathan protzenko title everparse verified secure zerocopy parser authenticated message format booktitle usenix security symposium usenix security year isbn address santa clara ca page url http publisher usenix association month aug presentation video
145,Lobsters,formalmethods,CSE-Formal methods,Did a small TLA+ exercise. Easier than I thought,http://beza1e1.tuxen.de/tla-plus.html,small tla exercise easier thought,alloy learntla website hillel wayne,played around tla little model checker focus state machine time care data structure alloy interesting since work embedded deal state machine lot tla fascinates first model two task interacting insight got modelling shared variable need protected mutexes thanks captain obvious second model state machine driver assistance function example think adaptive cruise control drive certain speed automatically slows driver active fault state separate temporary fault state sensor blind due weather seatbelt might closed normal fault state permanent sense something need repair least usually maybe bitflip repair important part different notification shown driver although model variable seatbelt unknown sensor ok broken blind brake ok broken macro environment begin x seatbelt x end brake ok x ok broken brake x end end either sensor broken x ok blind sensor x end end either end macro begin environment seatbelt unknown sensor broken brake broken goto fault elsif seatbelt sensor blind goto temporaryfault else goto active end active assert seatbelt sensor ok brake ok environment seatbelt unknown sensor broken brake broken goto fault elsif seatbelt sensor blind goto temporaryfault else goto active end temporaryfault assert sensor blind seatbelt environment seatbelt sensor ok brake ok goto active elsif seatbelt unknown sensor broken brake broken goto fault else goto temporaryfault end fault assert seatbelt unknown sensor broken brake broken goto little exercise found one error system transitioned temporary fault due blindness back active sensor became ok mean time brake broken transitioned fault instead tla work really interactive system syntax effort reasonable one obvious issue remains left tla model match implementation requirement still effort low make sense play easy way call user formal method recommend learntla website contains everything need first step big thanks hillel wayne made tla approachable
146,Lobsters,formalmethods,CSE-Formal methods,Learning How to Prove: From the Coq Proof Assistant to Textbook Style,https://arxiv.org/pdf/1803.01466.pdf,learning prove coq proof assistant textbook style,,obj length filter flatedecode stream lρ w v e tm ago
147,Lobsters,formalmethods,CSE-Formal methods,Liquidate Your Assets: Reasoning About Resource Usage in Liquid Haskell,http://www.cs.nott.ac.uk/~pszgmh/liquidate.pdf,liquidate asset reasoning resource usage liquid haskell,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g kcn uc h p hbp kc e endstream endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r r r subtype form type xobject length stream iq f
148,Lobsters,formalmethods,CSE-Formal methods,Formally Modeling Database Migrations,https://www.hillelwayne.com/post/formally-modeling-migrations/,formally modeling database migration,data migration alloy problem people event attend like hate model old schema signature atom relation predicate new schema abstract showing equivalence validity equivalence assert modeling migration thorough rethinking property discussion two page simplified json grammar software abstraction excellent talk run workshop jay parlar richard whaling,formal method example deal concurrency time evil hate fm effective give people limited sense flexible tool one common question get people formal method look really useful distributed system making distributed system fm still useful instead distributed system going something different lot business apps store conceptual model relational database need change structure data need convert stored data new format data migration migration risky business involve changing large amount state also often irreversible something go wrong easily undo migration like make sure migration safe accurately map data new format also want make sure new format match requirement accidentally lose database constraint migration might go fine might later become inconsistent modeling migration fourstep process first specify old data representation new one define mean data representation equivalent term information third show equivalent data constraint impossible old data satisfy old schema constraint equivalent something violates new schema constraint finally specify migration show migrated data equivalent old data going use alloy alloy good specifying relationship entity whether relationship table schema relationship two separate schema also create create visual diagram model handy exploring spec essay assumes prior alloy knowledge want follow along download problem system people event people attend event either like hate database constraint want enforce person like hate event simplicity assume attend event like hate original system two table person table event table modeled relationship three separate column person table column set event id new system want replace three column two table attendance table review table store person id event id review also store whether review like hate system already data need migrate data new format going forward also want preserve constraint like hate event model old schema event signature specifies type instance atom model keep thing simple event information associated alone complete model alloy generate matching example add people sig person event set event like set event hate set event body signature consists three relation relation relate thing every person set event attended set liked set hated set mean constraint many event several quantifier like least one lone zero one alloy generate considerably complex model alloy visualizer lot feature analyzing diagram expression evaluator theming distinguish shape color different signature change relationship rendered download theme used following along next need express constraint person like hate event express predicate boolean function pred valid p person plikes phates constraint example intersection two set generated model valid intentional want able say certain model satisfies requirement also one satisfy requirement could tell alloy generate valid instance person adding runtime predicate run p person valid p new schema new schema want separate instance attendance review make thing easier create newperson signature point existing person sig newperson person one person could also leave one alloy default one specify quantifier new table sig attendance event event attendee newperson abstract sig review event event reviewer newperson sig like hate extends review review abstract instance review subtypes model every review either like review hate review however still count review meaning set like subset set review finally write version valid newperson sake instruction later going make always true pred valid p newperson p two valid predicate one person one newperson alloy see distinct type trouble handling overload showing equivalence mean newperson equivalent original person case say equivalent event like hate let start first case pred sameevents p person np newperson pevents get event newperson attended data exists attendance instance newperson alloy model really shine attendance attendee relation actually firstclass entity alloy see attendee mapping attendance instance newperson atom manipulate relationship one way using revers relation attendee map person attendance record visual example attendee attendee newperson np every attendance record newperson npattendee also apply relationship set atom attendance set attendance atom attendanceevent set event attended anybody npattendeeevent would event attended specific np pred sameevents p person np newperson pevents npattendeeevent samereviews something similar npreviewer review specific np includes positive negative review need distinguish set intersection like positive review npreviewer like set positive review np finally npreviewer like event set event correspond positive review np get negative review similar way pred samereviews p person np newperson plikes npreviewer like event phates npreviewer hate event two clause predicate statement curly brace must true entire predicate true sameevents samereviews enough check whether given person newperson represent equivalent data pred equivalent p person np newperson p npperson sameevents p np samereviews p np use multiple clause three clause must true equivalent true predicate let generate matching example example run one person one newperson equivalent person newperson default alloy run topmost run spec select one run execute menu validity equivalence spec migration need two thing first need show two model express equivalent data part done second need show new model equivalent constraint person violates constraint equivalent newperson former satisfies constraint latter also satisfy constraint need assert two equivalent model equivalent validity assert equivalencepreservesvalidity p person np newperson equivalent p np implies valid p iff valid np two data model equivalent either valid invalid actually put constraint newperson expect assertion false telling alloy check alloy search possible model see break check equivalencepreservesvalidity unsurprisingly alloy find counterexample person newperson attended event matching like dislike mean equivalent however person like hate event mean person invalid newperson still valid breaking assertion fix let add another constraint valid np newperson pred valid np newperson npreviewer like hate implies english two review done np one like review hate review must belong different event update definition valid alloy find counterexample worth emphasizing scope model checker unless specified otherwise alloy assume three instance signature may present three event one p person possible value pevents possible value plikes phates least combination assignment review np newperson meaning extreme lowerbound estimate alloy checking possible example computer alloy sweep state space millisecond modeling migration ready model migration equivalence predicate declarative migration need algorithmic someone looking migration easily able translate code programming language write function transforms person newperson alloy function useful specification restrict single model instead talk entire space possibility instead specify mean newperson migration person let alloy explore model relation hold pred migration p person np newperson p npperson migrate event e pevents one attendance aevent e aattendee np migrate like l plikes one r like revent l rreviewer np migrate hate h phates one r hate revent h rreviewer np somebody could look know take event column person row element column create corresponding row attendance table like hate correct description migration migrated data equivalent right assert migrationpreservesequivalence p person np newperson migration p np implies equivalent p np check migrationpreservesequivalence alloy find counterexample going created exactly one corresponding like every event person liked since person like event needed create zero corresponding row newperson satisfied migration predicate true also unrelated reason created unrelated like newperson mean equivalent relationship count migration preserve equivalence word constrain migration rule enough could create corresponding row new schema adding row every event database actually need say element column create corresponding row migrate event e pevents one attendance aevent e aattendee np e event pevents attendance aevent e aattendee np getting bit unwieldy let simplify instead saying create exactly many row event column pred migration p person np newperson p npperson generate record needed pevents npattendee plikes npreviewer like phates npreviewer hate mean number element set change assertion pass shown migration produce equivalent model equivalent model equivalent validity could stop couple additional trick first want thorough check statement expect correct alloy make easy battle test specification way express property spec automatically complete test second check property know correct alloy generate example give u insight system thorough property uncertain two data model equivalent one migration assert equivalenceimpliesmigration p person np newperson equivalent p np implies migration p np check equivalenceimpliesmigration property hold newperson equivalent person event liked attended two database record liking event might actually problem new data model considerably richer old one make sense express something old model could decision whether multiple review attendance type valid use case valid case patch changing valid predicate newperson pred valid np newperson r r npreviewer r like r hate implies revent revent e event one review event lone r npreviewer revent e one attendance lone npattendee aevent e fix equivalenceimpliesmigration also break equivalencepreservesvalidity made newperson constraint stronger without changing corresponding person constraint invalid newperson equivalent valid person also valid newperson equivalent valid person equivalenceimpliesmigration break could migrated invalid newperson valid newperson patching property easy enough assert equivalenceimpliesmigration p person np newperson equivalent p np implies migration p np equivalent p np valid np implies migration p np dealing equivalencepreservesvalidity harder obvious way fix modify equivalent would mistake though right equivalence purely definitional taking data newperson translating equivalent statement person restrict define newperson constraint placed changing equivalent would mix abstraction level better reexamining assertion rethinking property three property migration produce equivalent schema two valid schema equivalent must produced migration equivalent schema equivalent validity broken consider actual system assuming everything normal already know existing data valid migrate convert every instance equivalent new schema migration fail accidentally convert valid data invalid data finally going forward data new schema able update way would correspond invalid data old system mind following property requirement migration produce equivalent data two valid schema equivalent must produced migration new data valid equivalent old data would valid valid old data migrate new schema new data also valid split property two weaker property original one something guarantee anymore two weaker property guaranteed mean assertion become assert equivalencepreservesvalidity p person np newperson equivalent p np implies valid p iff valid np check equivalencepreservesvalidity assert equivalencedoesnotdecreasevalidity p person np newperson equivalent p np valid p implies valid np assert migrationsstayvalid p person np newperson migration p np valid p implies valid np check migrationsstayvalid check equivalencedoesnotdecreasevalidity property preserved verified migration see entire spec discussion example used fraction alloy functionality express much complex migration property multistage migration rollback complex transformation time seen almost alloy syntax entire grammar le two page roughly length simplified json grammar alloy pack lot power small space currently writing online documentation alloy meantime best place learn book software abstraction interested learning application jay parlar excellent talk strangeloop year finally interested using alloy job run workshop contact learn thanks jay parlar richard whaling feedback
149,Lobsters,formalmethods,CSE-Formal methods,Fuzzing for SMT Solvers,https://kyledewey.github.io/comp490-fall18/lecture/week_9/socal_fall_15.pdf,fuzzing smt solver,,obj length r filter flatedecode stream چ š w
150,Lobsters,formalmethods,CSE-Formal methods,The Future of Mathematics?,https://www.youtube.com/watch?v=Dp-mQ3HxgDE,future mathematics,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature future mathematics youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature future mathematics youtube
151,Lobsters,formalmethods,CSE-Formal methods,Visualizing Abstract Abstract Machines,http://kyleheadley.github.io/PHDWebsite/2019-headley-aamviz-scheme-submit.pdf,visualizing abstract abstract machine,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream x l l p h f x g nz endstream endobj obj length filter flatedecode stream xڵ w
152,Lobsters,formalmethods,CSE-Formal methods,Automatic Verification of C and Java Programs: SV-COMP 2019,https://www.sosy-lab.org/research/pub/2019-TACAS.Automatic_Verification_of_C_and_Java_Programs_SV-COMP_2019.pdf,automatic verification c java program svcomp,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream q n b j p u f endstream endobj obj length filter flatedecode stream xڭz ӡihbe k e z yct f sagrqԍq p u mɯg endstream endobj obj length filter flatedecode stream e nc oc tq p nn zg endstream endobj obj length filter flatedecode stream xڍs j v endstream endobj obj type xobject subtype form formtype ptexfilename figurescategorystructurepdf ptexpagenumber ptexinfodict r bbox resource colorspace pgfprgb patterndevicergb pattern extgstate font r procset pdf text length filter flatedecode stream ԯ q ߚ g 昤pn lq f f z k ƶ f c g k n v
153,Lobsters,formalmethods,CSE-Formal methods,XASM - Extensible Component-Based Abstract State Machines Language (2000),http://xasm.sourceforge.net/XasmAnl00/XasmAnl00.pdf,xasm extensible componentbased abstract state machine language,,obj stream qy z rx oqab co c h f
154,Lobsters,formalmethods,CSE-Formal methods,Categorical Query Language,https://www.categoricaldata.net/,categorical query language,categorical database home download getting started manual wiki paper screen shot github google group youtube conexus ai contact principled way transform data category theory integrating data data science conexus ai value proposition key feature jdbcsql schema database equation denormalization without need manually enforce consistency redundant data userdefined function part cql schema foreign key reappear principled form cql cql provides primitive sql lack statebox canonical functional programming language chase engine,categorical database home download getting started manual wiki paper screen shot github google group youtube conexus ai contact principled way transform data opensource cql integrated development environment ide performs datarelated task querying combining migrating evolving database using category theory branch mathematics revolutionized several area computer science opensource cql productionready singlenode inmemory data processing workload integrating data data science commercialized conexus ai value proposition key feature flexible io data imported exported cql jdbcsql csv visualization cql schema database etc displayed graphically rich data integrity constraint cql schema contain entity attribute foreign key well equation one use equation denormalization without need manually enforce consistency redundant data computational schema userdefined function part cql schema specified using java javascript purely equationally cql theorem prover reason userdefined function relate data integrity constraint principled sql relational concept foreign key reappear principled form cql cql provides primitive sql lack java userdefined function written java javascript deep embedding cql haskell collaboration statebox development stateless cql database management system neither store update data canonical functional programming language ide whose scalability similar sql chase engine
155,Lobsters,formalmethods,CSE-Formal methods,Surprising Theorems (2015),https://gilith.wordpress.com/2015/07/25/surprising-theorems/,surprising theorem,accidental theorem surprising theorem shocking,higher order logic logic total function mean apply function f b value argument type always produce value result type b notion definedness built logic cause confusion using higher order logic formalization mathematical function naturally partial example following welltyped higher order logic term natural mod natural real head list informally call undefined term defined mathematical value formally speaking must value higher order logic tempting ask undefined term evaluate since working theorem prover rather programming language notion evaluation better question ask property true undefined term answer prove many theorem mod mod mod mod head head accidental theorem spot common pattern theorem involving undefined term true element type undefined term natural n natural n n n natural n n real x x x x x word proving theorem like undefined term give u information already provided type however depending formalized partial mathematical function may able also prove accidental theorem undefined term give u information example consider formalizing natural number subtraction following defining equation n suc suc n n seems harmless enough use equation prove undefined subtraction term equal particular natural number however instantiate second equation prove two undefined subtraction term equal accidental theorem check replacing undefined term arbitrary natural number n natural n since generalized theorem clearly false demonstrates accidental theorem reveals information undefined subtraction term already known type fortunately usually straightforward eliminate accidental theorem case subtraction simply replace second defining equation following n n suc suc n n change accidental theorem undefined subtraction term derive information natural number type surprising theorem suppose carefully formalized partial mathematical function avoid accidental theorem expect every theorem mod function sidecondition ensures second argument nonzero following b n b mod n mod n b mod n mod n n mod n reason side condition design information value undefined mod term prove property mod rule case second argument zero satisfying mathematical version theorem sidecondition ensure term defined however surprising theorem formalization sidecondition following b n b mod n b mod n theorem need sidecondition n nonzero avoid undefined mod term well n zero n b b b b reducing left hand side surprising theorem exactly right hand side b mod b mod since true every natural number prove undefined mod term even though information value shocking existence surprising theorem consequence formalizing partial mathematical function higher order logic notion definedness every function total even taking care avoid accidental theorem fundamental logical mismatch lead difference mathematical theorem formalized version situation cause problem merely curiosity certain theorem expected sideconditions circumstance need export formalized proof environment notion definedness may critical maintain close correspondence mathematical theorem formalized version happily since surprising feature surprising theorem stronger expected simply choose formalize deliberately weaker version logically unnecessary sideconditions following b n n b mod n b mod n way maintain close correspondence syntax mathematical theorem formalized version necessary
156,Lobsters,formalmethods,CSE-Formal methods,Event Modeling: What is it?,https://eventmodeling.org/posts/what-is-event-modeling/,event modeling,high re version matter good x high re version high re version given high re version given high re version high re version given high re version high re version high re version high re version high re version high re version conway law high re version high re version translate external integration pattern,digitized information system relatively new concept human working information system thousand year century bank insurance company many large scale organization managed succeed advent transistor speed accuracy processing information increased order magnitude gain quantum leap digital storage imbalance caused information system optimized small amount online information see advent rdbms technology mean compromise throw information away story telling something enables human pas knowledge subsequent generation relies heavily store memory whether logical visual auditory important parallel information system constructed memory visit doctor ledger form filled visit specification example way show something supposed work seen successful practice software behaviour driven development work well communicate story effectively tie back story telling way keep information society brain built built flowchart format recent decade moore law side online storage caught mean initial decade living computer system information system digitized use mechanic made effective throughout history mean enough storage throw away information ability able keep history happened allows system reliable mean audit specification example literally translates system implemented also enough storage cache different view happened system important made task trying fit concern one model unnecessary constraint ibm harddrive stored cost required monthly budget crossroad mature tooling tooling made solving problem longer efficient storage constraint new tooling see rise information system always ledger happened storage major issue anymore many benefit keeping ledger represent natural way think system digital high re version time concept core piece describing system component class saw computing important show example system supposed start finish time line branching make use memory aspect brain event model used follow field value ui storage value finally end report screen generally done sticky note wall whiteboard online version whiteboard see simplicity heart approach use type building block well traditional wireframes mockups keep thing simple rely pattern structure diagram want adopt certain practice process help one another understand communicate inversely proportional amount learning individual must proficient method put another way organization chooses adopt process called x x requires one book workshop take week go nullifies effectiveness x worst part matter good x book required reading people organization everyone say read half actually read half claim understood half understood half able apply event modeling us moving piece pattern based idea take minute explain rest learning done practice transparently deficiency understanding even core idea quickly corrected get understanding organization let say want design hotel website hotel chain allowing customer book room online u schedule cleaning hotel concern show event fact stored timeline year business pretend system already ask fact stored move forward time bring visual part storytelling show wireframes web page mockups across top organized swimlanes show different people sometimes system interacting system also show automation symbol like gear illustrate system something easy understand set mechanic todo list process go mark item done hotel example could payment system notification system high re version point enough able design system uxui people fundamental piece must added blueprint show core feature information system empowering user informing user information system must give ability user affect state system example must allow booking room change system overbook person arrives future date room ready intention change system encapsulated command opposed simply saving form data table database allows u nontechnical way show intention allowing implementation although certain one advantage see high re version ui ux perspective drive command based ui go long way helping make composable uis pattern lot clearer transactional boundary technical business perspective hotel guest either registered successfully nuance prerequisite command succeed elaborated givenwhenthen style specification way tell story success look like may story show command succeed example might given registered added payment method try book room room booked form specification also referred arrange act assert uxui world situation motivation value second part information system ability inform user state system hotel guest know day available certain type room interested staying usually many support multimodel aspect information system high re version view fact already system changing new event stored hotel system calendar view updated new event affected inventory happening view may cleaning staff see room ready cleaned event guest checking stored specifying view behaves similar way specify accept command one difference view passive reject event stored system given hotel set ocean view room ocean view room booked april x calendar show date except april ocean view availability covered first pattern needed describe system system get information system send information system would tempting force pattern extension first share space however interaction harder communicate humanvisible aspect require higher level pattern external system providing u information helpful translate information form familiar system hotel system may get event guest gps coordinate opted highly reactive cleaning crew would want use longitude latitude pair event specify precondition system would rather event mean something u like guest left hotel guest returned hotel room high re version often translation simple enough represent view get information external event use given part test value store view model simply represented command parameter state change test system going need communicate external service guest hotel paying stay check system make call payment processor make concept occurs idea todo list processor system todo list show task need complete processor go list time time could millisecond day sends command external system process payment example reply external system translated event store back system way keep building block use system something meaningful u high re version show putting processor top blueprint wireframes show thing evident screen happening behind scene user may expect spinning icon indicate delay due background task needing finish specification form given view task command launched item event expected back reality may implemented many different way queue reactive realtime construct may even actually manual todo list employee use goal communicate system communicates outside world need affect event modeling done step explained endgoal already let rewind beginning show build blueprint high re version someone explain goal project information participant envision system would look behave like put event conceive happened gently introduce concept statechanging event specified often people name guest viewed calendar room availability put aside event high re version task create plausible story made event arranged line everyone review time line understand make sense event happen order high re version next wireframes mockups story needed address visual learner importantly field must represented blueprint system source destination information represented user perspective wireframes generally put top blueprint divided separate swimlanes show user see one screen appear one another need capture change system state separate vertical slice blueprint different ordering shown various specification core system important communicate alternate workflow need added blueprint part last step show organization done earlier helpful high re version earlier section saw need show enable user change state system usually step introduction blue box time event stored due user action link ui command show getting screen implicitly client state web application high re version looking back goal blueprint link information accumulated storing event back ui via view aka readmodels may thing like calendar view hotel system show availability room user looking book room high re version know information get system start look organizing event swimlanes need allow system exist set autonomous part separate team allows specialization happen level control instead falling composition team see conway law mel conway workflow step tied either command viewreadmodel specification explained earlier make still collaboratively participant space givewhenthen giventhen constructed one rapidly reviewed multiple role representative allows traditionally done user story writing dedicated product owner isolation text format done visually small amount time collaboratively critical specification tied exactly one command view time event model every field accounted information origin destination event must facilitate transition hold necessary field rigor required get benefit technique variation final check rely absorbing rework cost scenario desired final output exercise done completion set small project defined scenario workflow step format allows directly translated developer use make unit test also coupled adjacent workflow step contract high re version many project management business coordination issue mitigated fact made explicit contract shape information start particular step workflow shape data finished pre postconditions allows work completed relative isolation later snap together adjoining step designed biggest impact using event modeling flat cost curve average feature cost due fact effort building workflow step impacted development workflow one important thing understand workflow step considered repeated event model us command view impact far reaching change software development back engineering practice make creating information system work like construction house feature created order traditional development rely estimate whether feature get developed early versus later project impact amount work required reprioritizing work make previous estimate unreliable workflow step implemented act implementing workflow step cause need revisit already complete workflow step reason constant feature cost curve realized constant cost curve effort organization implement simply measured many feature time impartial way empirically determine velocity team number used scope schedule cost future project impact adoption agile practice industry put bandaids core issue lack design scope set requirement per workflow step refactoring step tdd impact workflow step event model event model refactoring go unrestricted previously completed piece work adjusted work already completed reviewed adjusted new addition build solution constant cost curve give opportunity fixedcost project velocity established team cost software organization number price willing give contractor pay workflow step complete since workflow step protected affected workflow step deficiency guaranteed delivering nonbillable work case subcontractor bad job get billable item done quickly next hour work dedicated fixing deficiency work already done even effective rate pay working new delivarables carried longer period within employee engagement making metric available different checkpoint performance due effective pay selfadjusting capability individual also way onboard new employee pay fairly probation stage engagement contracttohire process remove subjective largely ineffective interview process technical position moving work schedule step going implemented first done without changing estimated cost item ensures prioritization work impact total cost also constant cost curve required allow agility reprioritizing feature plan change simply adjust event model usually done copying current one adjusting see difference new piece information added one event constitutes new version workflow creates view implemented yet change estimate already implemented add another unit work plan considered replacement rule around end result definitive guide change management high re version event model solution show exactly equally importantly sensitive data cross boundary traditional audit number interview staff time consuming risk missing important area security concern addressed responsibly application event model reference scenario real organization face system already place main way deal system hard manage complexity lack understanding either rewrite refactor run costly third le risky option exists freeze old system proper buyin organization agree alter existing system instead dealing bug adding new functionality done side sidecar solution event gathered database old system make view state employing translate pattern described previously yvalve redirection user action add new functionality side solution example fix bug notice use external integration pattern extends old system add profile picture shown pattern allows organization stop putting energy suboptimal existing system get unblocked delivering value via pattern enable benefit event model event modeling changing information system built simple repeatable pattern information system predicable engineering effort continued periodically updated article migrate page site resource
157,Lobsters,formalmethods,CSE-Formal methods,Mechanized Relational Verification of Concurrent Programs with Continuations,https://iris-project.org/pdfs/2019-icfp-logrelcc-final.pdf,mechanized relational verification concurrent program continuation,,obj length filter flatedecode stream p jbd c e endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڥz e ȷeo vn 醗 n eoyf ܙ q dm b h 董 β r endstream endobj obj length filter flatedecode stream f g aki k r p ji mn e r x zw f w ia hk k ծ dx u k q endstream endobj obj type objstm n first length filter flatedecode stream b yj z þ h w w g僷v b endstream endobj obj length filter flatedecode stream ן k ӏlݞ lxa q l j r p x gr l c q r fbj l hl r x lgzwl w b endstream endobj obj length filter flatedecode stream 祧 b gh fl ǟ v lsq أ
158,Lobsters,formalmethods,CSE-Formal methods,CATG: Concolic Test Generation Tool for Java,https://github.com/ksen007/janala2,catg concolic test generation tool java,catg http srcintegrationjavateststestmejava usage,catg catg concolic unit testing engine java program implementation us asm instrumentation asm instrumentation instrument see janalainstrument class file runtime dump see janalalogger file log instruction executed program value loaded local stack heap concolic execution engine see janalainterpreters take log performs symbolic concrete interpretation logged instruction must java gradle http python path two extra jar file needed run tool create lib directory root directory download following jar file place lib directory invoke gradle build gradle integrationtest run full integration test use setupsh build catg copy lib python testallpy run test see coverage report use gradle build gradle jacocotestreport run test using online concolic execution run test offline concolic execution use python offline testallpy want generate test java class file main method need use concolicpy script example following command generates test input class teststestme java source class found srcintegrationjavateststestmejava python concolicpy coverage teststestme usage python janalaconcolicpy h usage concolicpy h offline v c maxiterations classname argument argument positional argument maxiterations maximum number time program test executed classname java class tested argument argument passed program test optional argument h help show help message exit offline perform concolic testing offline intermediate trace file generated execution program offilne mode result slowdown nonoffline mode v verbose print command executed c coverage compute detailed coverage rerunning test jvm option
159,Lobsters,formalmethods,CSE-Formal methods,Fixing a MongoDB Replication Protocol Bug with TLA+ - William Schultz,https://www.youtube.com/watch?v=x9zSynTfLDE,fixing mongodb replication protocol bug tla william schultz,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature fixing mongodb replication protocol bug tla william schultz youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature fixing mongodb replication protocol bug tla william schultz youtube
160,Lobsters,formalmethods,CSE-Formal methods,Modeling a read-write version of Texel: an asynchronous consensus algorithm without rounds,http://muratbuffalo.blogspot.com/2019/09/modeling-read-write-version-of-texel.html,modeling readwrite version texel asynchronous consensus algorithm without round,previous post gave model atomic texel model safety violation tla project distributed system class liveness violation blocking problem leader performance bottleneck,previous post gave model atomic texel node atomically read node decision update decision refined version node atomically read state one node update decision refined model show important node read consistent cut multiple node experimenting violate requirement agreement property violated result model build extends previous model n stand number node f denotes number node crash use f keep track actual number node crash addition decision array track decision node exp array denotes experimentation status node initially node experimenting state node start tfalse decision finalized pollset procs self node poll node except self tally number vote polled node b initally node three action choose execute long node finalized decision crashed first action start line action enabled node experimenting state pick remove node k pollset k decision increase tally k decision b increase tally b tally supporting decision ie greater f mean majority nf node node adopts decision line start second action f actual number crash still le f allowed number class process crash setting decision crash permanently line start third action node find current decision shared least nf process decision anchored node finalize decision setting ttrue anchor place node experimenting state node switch experimenting state resetting pollset tally experimenting node potentially change decision another supporting decision may lead progress finalization consensus safety violation modelcheck protocol model violates agreement property two node finalize decision different value experiment concurrently one read inconsistent cut trace node build supporting decision inconsistent snapshot involving change state read step violation agreement initially decision array node b b node read node value b node read node value note two node concurrently experimenting reading state get inconsistent soon node read node value b since tally b node change decision b concludes experimentation node finalizes decision b see anchored quorum cardinality nf b node read node value since tally including invalid vote node node change decision concludes experimentation node read node value node read node value since tally node change decision concludes experimentation node finalizes decision see anchored quorum cardinality nf decision violates agreement node finalized decision b conflicting decision fix safety violation disallow concurrent experimentation may lead reading inconsistent snapshot possible making read preemptivedestructive instead using preemptive read try constraining node read nonexperimenting node deadlock would happen trace node read node halted node already ongoing experiment easy achieve extendingmodifying model fixed problem found safety always satisfied n nt provide model considering assigning modeling texel benor tla project distributed system class liveness violation liveness also interesting story even starting state b b b liveness violation reading one node enough change vote value may circulated system since keep getting adopted another minority process system may able anchor majority value consensus value result finalize decision side note appoint leader consensus paxos vote looping become issue leader break symmetry dictating value pick suitable value node adoption setup b b b make liveness satisfied node copy need see another node passing threshold case increasing f help liveness suggests maybe introduce another free parameter serve threshold value adoption tie strictly f potential number fault restricting problem binary two value consensus proper selection threshold adoption texel may solve problem minority value circulating system forever breaking progress even another progress violation problem introduce experiment cancellation satisfy agreement property node keep interfering canceling others experiment violate progress another place leader consensus provides advantage leader definition read consistent state round node passive node polling coordinate distributed transaction read clean consistent state becomes difficult maybe requires consensus advantage disadvantage appointing leader solving consensus picking thread previous discussion comparing texel paxos pro con appointing leader node solving consensus may symmetry clear winner multiple initial value present system using leader break symmetry node go whatever leader proposes vote decide using leader solve binary consensus even binary consensus seen texel liveness still jeopardized due experiment cancellation benor liveness facilitated jolting system using random change value system eventually probabilistically converge consensus hand using leader boost liveness presence multiple initial value errr thing go right see hand trusting leader finish round introduces problem leader dead blocking problem order avoid getting stuck forever node use failure detector upon suspicion leader death node start new round lead rest node suspicion wrong flp impossibility result strike fortunately way circumvent impossibility result postponing liveness still preserving safety example paxos preserve safety even multiple leader concurrently trying lead round another drawback leader n large leader performance bottleneck deterministic instant consensus protocol like paxos
161,Lobsters,formalmethods,CSE-Formal methods,Using TLA+ in the Development of ElasticSearch,https://www.youtube.com/watch?v=qYDcbcOVurc,using tla development elasticsearch,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature using tla fun profit development elasticsearch yannick welsch youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature using tla fun profit development elasticsearch yannick welsch youtube
162,Lobsters,formalmethods,CSE-Formal methods,Approximate Normalization for Gradual Dependent Types,https://arxiv.org/pdf/1906.06469.pdf,approximate normalization gradual dependent type,,obj stream l iω h
163,Lobsters,formalmethods,CSE-Formal methods,SMT for state-based formal methods: the ASM case study (2017),http://fm.csl.sri.com/AFM17/AFM17_paper_5.pdf,smt statebased formal method asm case study,,obj endobj obj filterflatedecodeid index info rlength rsize stream b x endstream endobj startxref eof obj stream lo l endstream endobj obj endobj obj endobj obj endobj obj stream j n e
164,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Taming Other People's Tech,https://www.youtube.com/watch?v=oMSmkRGzQ64,formal specification taming people tech,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature formal specification taming people tech marianne bellotti youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature formal specification taming people tech marianne bellotti youtube
165,Lobsters,formalmethods,CSE-Formal methods,Finding bugs without running or even looking at code,https://www.youtube.com/watch?v=FvNRlE4E9QQ,finding bug without running even looking code,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature finding bug without running even looking code jay parlar youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature finding bug without running even looking code jay parlar youtube
166,Lobsters,formalmethods,CSE-Formal methods,Certifying algorithm,https://en.wikipedia.org/wiki/Certifying_algorithm,certifying algorithm,theoretical computer science proof checker linear time formal verification edit graph theory bipartite acyclic topological order chordal graph clique planar kuratowski subgraph extended euclidean algorithm greatest common divisor edit sanity check edit mehlhorn k doi mehlhorn kurt arxiv doi,theoretical computer science certifying algorithm algorithm output together solution problem solves proof solution correct certifying algorithm said efficient combined runtime algorithm proof checker slower constant factor best known noncertifying algorithm problem proof produced certifying algorithm sense simpler algorithm otherwise algorithm could considered certifying output verified running algorithm sometimes formalized requiring verification proof take le time original algorithm problem particular solution found linear time simplicity output proof considered le formal sense instance validity output proof may apparent human user correctness algorithm checker proof may amenable formal verification implementation certifying algorithm also include checker proof generated algorithm may considered reliable noncertifying algorithm whenever algorithm run one three thing happens produce correct output desired case detects bug algorithm implication undesired generally preferable continuing without detecting bug algorithm checker faulty way mask bug prevents detected undesired unlikely depends existence two independent bug example edit many example problem checkable algorithm come graph theory instance classical algorithm testing whether graph bipartite would simply output boolean value true graph bipartite false otherwise contrast certifying algorithm might output graph case bipartite cycle odd length graph bipartite nonbipartite contains odd cycle checking whether valid checking whether given oddlength sequence vertex cycle may performed simply testing bipartiteness analogously possible test whether given directed graph acyclic certifying algorithm output either topological order directed cycle possible test whether undirected graph chordal graph certifying algorithm output either elimination ordering ordering vertex every vertex neighbor later ordering form clique chordless cycle possible test whether graph planar certifying algorithm output either planar embedding kuratowski subgraph extended euclidean algorithm greatest common divisor two integer x certifying output three integer g divisor b ax g equation true multiple greatest common divisor testing g greatest common divisor may performed checking g divide x equation correct see also edit sanity check simple test correctness output intermediate result required complete proof correctness reference edit b c e f g mcconnell rm mehlhorn k näher schweitzer p may certifying algorithm computer science review alkassar eyad böhme sascha mehlhorn kurt rizkallah christine june framework verification certifying computation journal automated reasoning
167,Lobsters,formalmethods,CSE-Formal methods,A Combinatorial Testing Framework for Intuitionistic Propositional Theorem Provers,https://www.cse.unt.edu/~tarau/research/2019/tprover.pdf,combinatorial testing framework intuitionistic propositional theorem provers,,obj length filter flatedecode stream h oa u q z e f q fۿ wr k endstream endobj obj length filter flatedecode stream xڭ x բ z㨦 k è ۇ
168,Lobsters,formalmethods,CSE-Formal methods,Turing Categories,https://golem.ph.utexas.edu/category/2019/08/turing_categories.html,turing category,introduction turing category partial combinatory algebra categorical simulation computability theory introduction metamathematics sc kleene recursive function gödel numbering kleene recursion theorem universality parameter restriction category restriction category total map turing category domain definition enrichment cartesian structure partial terminal object partial product splitting idempotents turing category index turing morphism recognition theorem partial combinatory algebra combinatory logic mock mockingbird eliminating binder easier operational semantics applicative system computable map applicative system comp partial combinatory algebra theorem example oracle structure theorem structure theorem conclusion,introduction turing category enable categorical study computability theory thereby abstract generalize classical theory computable function natural number turing category category cc equipped cartesian product pair code data program notion partiality represent program morphisms necessarily halt turing object aa represent code program turing object act weak exponential pair object category impossible settheoretical category natural computer science primitive formal machine code higher untyped really onetyped example untyped λlambdacalculus represented reflexive object aa cartesian closed category ie object equipped embedding app aapp ato aa sends λlambda term mm action induced application retraction lam lam aato sends endohom term lambda term λxm x lambda xm x morphism evalcirc apptimes atimes ato turing morphism meaning every morphism f anto code f f f n f bulleta n circ f time turing category closely connected partial combinatory algebra magma object certain form computational completeness paradigmatic example sk combinator calculus variablefree representation λlambda calculus turing category partial combinatory algebra pcas certain sense equivalent constitutes main result work justifies notion turing category made precise equivalence category relative pcas turing category fixed base category paper categorical simulation purpose introduce reader basic idea computability demonstrate expressed categorically computability theory early focused intently determining prove formal system analogously compute computer simple question inspired great advance logic mathematics computer science motivated mutual development deepening interconnection three main perspective emerged independently order answer question alan turing thought hardware turing machine alonzo church thought software λlambdacalculus kurt gödel thought logic general recursive function churchturing thesis state equivalent notion computation function f mathbb n mathbb n turing computable iff ff written closed λlambdaterm iff ff general recursive led computer scientist believe concept computability accurately characterized three equivalent notion stephen kleene student church developed unified idea study metamathematics focusing perspective partial recursive function introduction metamathematics sc kleene equivalent gödel generate class partial recursive function basic function operator utilize idea gödel numbering consider natural number space data program two main theorem characterize effective enumeration universality parameter theorem described original motivation definition turing category recursive function computability humbly rooted simple arithmetic using three kind primitive function build computable function partial recursive function constant c x x n successor x projection p k x x k x begin array lll text constant ca dot xn text successor x text projection pik dot xk xi end array set primitive recursive function rr generated two operator first course need composition composition g ℕ h ℕ g n k n h g g n array text composition gi mathbb n kto mathbb n r wedge h mathbb n nto mathbb n r circ implies hcirc dot gn eqqcolon mathbf skn h dot gn r end array second derive real computational power need eponymous recursion recursion g ℕ ℕ ρ k g h f g f h f begin array text recursion g mathbb n kto mathbb n r wedge h mathbb n mathbb n r rho implies mathbf rk g h eqqcolon fin r f overline x g overline x f overline x h f overline x overline x end array understood loop represents initial parameter yy counter hh describes successive evaluation accumulated combined function ff f n yg n yh begin array l f n overline x coloneqq g overline x n h overline x end array enough arithmetic example define addition number sequence successor adding simply process peeling s one number appending former reach base step add g ap induction add b g b b f b p b c recursion add r p p begin array text base step add g text induction add b g b eqqcolon h b f b b c text recursion add end array simple demonstration add p add add p add p array add add add add end array course computation actually halt use diagonalization argument show turingcomputable function primitive recursive complete equivalence general partial recursive function given adding minimization operator input ary function output kkary function search minimal zero first coordinate ff return one exists minimization f ℕ f total μ μ f μ f x x k f z x x k x x k begin array text minimization f mathbb n mathbb n r wedge text f total mu implies mumathbf f r mu f dot xk z iff f z dot xk wedge forall leq f dot xk geq end array allows unbounded minimization safe predicate check consistency rule infinitary data structure example operator explicitly construct universal turing machine output μmu certainly partial general construct predicate whose minimal zero would decide halting problem turingcomputable function represented partial recursive function translating complexity turing machine unified mathematical perspective function natural number gödel numbering upon first hearing churchturing thesis one may ask care function natural number simple idea gödel numbering need consider partial recursive subset hom set ℕ ℕ set mathbb n mathbb n think big question computability kurt gödel proved formal language capable expressing arithmetic consistent meaning deduce contradiction complete meaning every sentence language either proven disproven method proof remarkably simple language us countable set symbol operation relation enumerate term language use enumeration create selfreferential sentence must independent system idea use fundamental theorem arithmetic finite list natural number represented faithfully single natural number using encoding prime power order prime p pi define embedding f ℕ mathbb n kto mathbb n n n k ip n dot nk mapsto prodi pi ni applied recursively represent list list number giving encoding function enc depth length nested list decoding dec repeated factorization forming tree prime example enc dec dec enumerate partial recursive function generated three basic function three basic operator represent list natural number following recursive encoding c k k p k x x k k k n h g g n h g g n r k g h k g h f f begin array ck k pik dot xk k skn h dot gn h dot gn rk g h k g h f f end array partial recursive function give list list encoded gödel numbering example add r p p add enc add array add add enc add cdot cdot text end array want enumerate partial recursive function contrast incompleteness theorem give theory computability positive kind selfreference form two theorem characterize good enumeration partial recursive good mean effective technical sense namely kind operation one performs function composition computed level code kleene recursion theorem enumeration partial recursive function r ϕ r phii following theorem hold universality function ϕ n phi n partial recursive ϕ n e x x n ϕ e x x n phi n e dot xn phie dot xn parameter total recursive function nsmn ϕ nm e x x u u n ϕ n e x x u u n phi nm e dot xm dot un phi smn e dot xm dot un first say ℕmathbb n universal computer partial ϕ k phi k arity take code program code input data computes code result second say computer generalized total nsmn arity transforms nm nm ary universal program mmary one taking first argument returning code another program remarkable computer come preloaded every conceivable program one simply input number program number data furthermore one know program use one determine even one step time turing category meant provide minimal setting two theorem hold universality theorem describes universal property turing objectmorphism pair parameter theorem describes fact factorization nnary function determined unary one via turing morphism restriction category already discussed notion partiality necessary model computation computation halt input notion concrete captured notion partial function partiality categorically described restriction category formally restriction category category cc endowed combinator sending f f ato b mapsto overline f ato following axiom satisfied dom f dom g dom f dom g cod f dom g begin array lll text foverline f f text overline f overline g overline g overline f dom f dom g text overline goverline f overline g overline f dom f dom g text overline g f foverline gf cod f dom g end array first axiom state precomposing domain map change otherwise restrict original second axiom state restricting two function behaves similarly intersection sense commute third axiom state taking intersection two domain taking either map restricting domain map fourth axiom state restricting map domain mean restrict composite example restriction category par set partial function x x f x defined else par c ob c leftmonic span pr n k partial recursive functionsbegin array mathsf par text set partial function overline f x x text f x text defined else bot mathsf par c mathsf ob c text leftmonic span mathsf pr nk text partial recursive function end array aoverline f ff total note monics total total map form subcategory tot c tot c interest accompanying paper total map turing category hofstra cockett hrubev e ee domain definition c denote set domain definition aa example par x subset x par c c subobjects c pr n k recursively enumerable subset n k begin array mathsf par x text subset x mathsf par c c text subobjects c mathsf pr nk text recursively enumerable subset nk end array enrichment cartesian structure notion restriction entail partial order f g g ato b define fleq g coloneqq fgoverline f intuitively mean domain ff contained domain gg enrichment x x form meet semilattice accordingly define cartesian structure need weaken terminal object product posetenriched case partial terminal object partial map terminal object act like domain classifier rather unique map natural bijection c c simeq partial recursive function ℕmathbb n precisely recursively enumerable subset partial terminal object satisfies weaker universal property given domain ein map f ato b domain composite domain bb contained ee restriction terminal object describing case unique total map rightarrow furthermore f rightarrow b family map must bf b f bar f make following diagram commute partial product partial product property map f g rangle product time b domain contained ff gg account case computing ff gg simultaneously might produce result either halt ff gg therefore domain f g rangle need intersection corresponding domain ff gg splitting idempotents turing category essentially meant describe collection computed map category expressed idempotent splitting example turing category computable map ℕmathbb n explained later restriction idempotent e mathbb n mathbb n recursively enumerable set therefore splitting ee exists make subset explicit object category hence idempotent completion comp ℕ mathrm comp mathbb n yield category whose object recursively enumerable set natural number imply category computable map determined uniquely morita equivalence however big difference split restriction category general restriction category former domain open rather hiding idempotents object completely understood idempotent completion comp ℕ comp mathbb n would know recursively enumerable subset ℕmathbb n one could argue study computability would complete however turing category meant abstract away natural number order distinguish essential computation remove anything arithmetic might contingent turing category turing category provide abstract framework computability category partiality equipped universal computer whose program code thereof constitute object interest let cc cartesian restriction category let τ x x atimes xto morphism f ztimes xto admits τ x ytau x index exists h zto following commute τ x ytau x index thought evaluation function hh function λ f lambda f every f z time x rightarrow admits evaluation τ x ytau x index τ x ytau x universal object aa x yx cc turing category aa turing object given turing category cc applicative family turing object aa family map τ τ x tau tau x time x rightarrow ymid x xx yy range object cc applicative family aa universal every x yx τ x ytau x universal case τtau turing structure aa think turing structure cc pair τ tau express universality turing object cc taking every object c retract aa taking τ xtau x index π xpix extends finite power indicates two important point turing object cardinality element aa either one infinite internal pairing operation ato section latter morphism generalizes abstract gödel pairing n time mathbb n mathbb n given universal object aa turing structure τ tau natural wonder universal selfapplication map τ atau special indeed called turing morphism atimes ato map plus universal property aa fact enough reconstruct entire turing structure cmathsf c classic example kleene application n time mathbb n xrightarrow bullet mathbb n general thought universal turing machine take program turing machine datum computes result turing morphism heart whole construct universal application τ x x time x rightarrow yya time x xrightarrow time mx time xrightarrow bullet xrightarrow ry pair x r x mx rx r ry retraction aa yy respectively verify τ atau universal application consider following commutative diagram show subset represented formal object computable function like ff computed representing ℕmathbb n important idea turing object represents collection code program formal system universal applicative family method encoding turing morphism universal program implement others innovation turing category abstract away setmathrm set therefore describe program explicitly settheoretical necessarily extensional intensional axiom turing structure correspond precisely universality parameter theorem fact culminates recognition theorem cartesian restriction category cc turing category iff object aa every object retract exists turing morphism time xrightarrow bullet partial combinatory algebra recognition theorem know turing category essentially generated single object equipped universal binary application alternatively take internal view starting magma object bullet cartesian restriction category cc consider map computable respect map form category indeed turing category iff aa combinatory meaning bullet expressive enough represent partial lambda calculus first understand combinators combinatory logic practice variable binding subtle computation us set symbol variable one must distinguish bound free former placeholder latter data formal language preserving distinction requires condition semantic rule add baggage otherwise simple system λlambdacalculus beta reduction β λxmn x n beta lambda xm n x n precludes variable capture substituting free bound eg λy λz yz z zz lambda lambda z z z lambda z z z one must rename bound variable mm nn distinct variable term λy λz yz z λy λa ya z za lambda lambda z z z equiv lambda lambda z lambda z problem originally confronted moses schonfinkel created theory unit computation defined function application lambda term translated combinators process abstraction elimination away variable completely understood observing need handle three basic thing occur within λlambdaabstraction variable application abstraction represented fundamental combinators s kk sx z xz yz kx x begin array x z x z z k x x end array define recursive translation term x x mn n λxm kt x free λxx sk k λxλym λxt λym x free λx mn st λxm λxn x free begin array lll x x n n lambda xm k text x free lambda xx k k lambda xlambda ym lambda xt lambda ym text x free lambda x n lambda xm lambda xn text x free end array example λxλy yx k si kk lambda xlambda x k k k translation preserve exactly way term act λlambda calculus information see mock mockingbird eliminating binder easier operational semantics applicative system computable map let cc cartesian restriction category let 𝔸 mathbb bullet magma object aka applicative system cc guiding example kleene application ϕ mathbb n time mathbb n mathbb n care intuitively act universal turing machine fact far general concept 𝔸mathbb seen generate category computation comp morphism f anto 𝔸mathbb computablemathbf computable simply computable exists total point meaning p total domain provides code ff like τtauindex code pp pick program ie element universal turing machine implement function ff application also require circ ptimes total morphism man computable component morphism computable domain map nanto weakening diagram commuting filled restriction ie f leq bullet ptimes generalize computability realizability ff meaning ff implemented realized restricting codeapplication composite domain ff even former defined generally course defining morphism intend form category general definition computability however categorical structure come 𝔸mathbb computable morphisms include identity closed composition 𝔸mathbb need right structure structure directly connected combinatory logic let poly 𝔸 poly mathbb sub cartesian restriction category cc generated total point application morphisms called 𝔸mathbb polynomial morphisms essentially represents computation 𝔸mathbb know like computable ie exists code computation applicative system combinatory complete every polynomial morphism computable true precisely 𝔸mathbb combinators k following morphisms 𝔸mathbb computable k k b π b c begin array atimes ato k b atimes atimes xrightarrow langle pi pi rangle atimes time atimes xrightarrow bullettimes bullet atimes xrightarrow bullet b c abullet b bullet abullet c end array let think true original use combinators give translation 𝔸mathbb polynomial morphisms composite k application cartesian structure suffices generator poly 𝔸 poly mathbb total point computable polynomial construction essentially make possible application tree exactly s kk define partial combinatory algebra pca applicative system combinatory complete prove simple categorical characterization completeness theorem applicative system 𝔸 mathbb bullet cartesian restriction category cc following equivalent forward direction computable special case polynomial backward direction code id aida code restriction structure given computable ff know f computable actually given combinator kk ie f frangle pairing function id aida projecting onto first component give subdomain aa function defined operation computable existence code kk combinators humble useful hence direct equivalence classical notion combinatory completeness general abstract computability concept cartesian restriction category like many generalization abstract mathematics really extension generalization still depend original idea combinatory completeness grounding latter seeing natural structure fully abstract setting demonstrates essential understanding connects concept rest category theory computer science example important example category computable map comp ℕ comp mathbb n natural number kleene application another example partial lambda calculus modelled reflexive object aa mentioned introduction one generalize example adding expressive power oracle considering basic recursive function theory set function satisfying universality parameter theorem structure theorem unsurprising important conclusion given pca 𝔸mathbb computable map comp 𝔸 comp mathbb form cartesian restriction category turing category application atimes ato turing morphism code index pairing operator pair atimes represented lambda term λxyz zx lambda xyz zx projection fst snd ato given λxyxlambda xyx λxyylambda xyy one check satisfy fst pair π snd pair π pair fst snd atimes triangleleft give product retract aa extends nan hence 𝔸mathbb turing object comp 𝔸 comp mathbb turing category thus main theorem structure theorem let cc cartesian restriction category applicative system 𝔸 mathbb bullet 𝔸mathbb pcapca cc comp 𝔸 comp mathbb turing category turing object 𝔸mathbb cc turing category 𝔸mathbb turing object 𝔸mathbb pcapca cc cc moritaequivalent comp 𝔸 comp mathbb conclusion learned root computability theory discussed turing category abstract idea using guiding example natural number partial recursive function every turing category arises partial combinatory algebra particular natural number kleene application conversely every partial combinatory algebra determines turing category establishing latter raising former general abstraction turing category remain active area research group look forward studying contributing work
169,Lobsters,formalmethods,CSE-Formal methods,Call-by-Need Is Clairvoyant Call-by-Value,https://www.cs.nott.ac.uk/~pszgmh/clairvoyant.pdf,callbyneed clairvoyant callbyvalue,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g g c j xc endstream endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r subtype form type xobject length stream вnh w endobj obj basefont imuzxnlinlibertinet encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj bitspercomponent colorspace devicergb filter flatedecode height smask r subtype image type xobject width length stream f r x u e wu jyg l b µ suu ei ei l dq v ǝ h q pl kh e uc e p n soy ų ii b yy oedt endobj obj difference period zero four c l b c e h k l n r u v w type encoding endobj obj endobj obj ascent capheight charset aciltabcdefourhiklmnoperiodrstuvwzero descent flag fontbbox fontfile r fontname imuzxnlinlibertinet italicangle stemv type fontdescriptor xheight endobj obj bitspercomponent colorspace devicegray filter flatedecode height subtype image type xobject width length stream endobj obj filter flatedecode length stream b r ncc ĵ sa j r nj qp iwfbhzf х l c yt p pm k j f վ n r c u
170,Lobsters,formalmethods,CSE-Formal methods,Finding Code Compatibility Issues with QL,https://blog.semmle.com/python-3-code-compatibility/,finding code compatibility issue ql,tutorial overview alert query introducing ql library python python new python pythonfuture using ql python version identified builtin query syntax error syntax error encoding error encoding error existing custom query public github ql repository lgtmcom writing new ql query new raise syntax pep raising exception python pep exception chaining embedded tracebacks raise statement support unicode identifier name pep supporting nonascii identifier doc cast comparing object different type octal literal syntax support confusing octal literal explicit quantifier delimiter numeric literal pep underscore numeric literal long integer type supported python pep unifying long integer integer java cmp parameter sorted list longer supported old way using cmp parameter method dictiterkeys dictiteritems dictitervalues deprecated lgtmcom query console running query ide community forum,tutorial overview tutorial learn use ql query python codebase learn check python compatibility writing alert query query highlight issue specific location code tutorial assumes familiar basic ql python might want read previous post introducing ql library python python official end life python approach python project converted python python majority infrastructure project python many python point likely need upgrade project myriad useful resource help upgrade project codebase tool upgrade code semiautomatic fashion linters static code analysis tool help spot code compatible python also quite document help learn new python avoid common pitfall upgrade learn visit main new python reference page learn write code compatible python python visit pythonfuture upgrading codebase python supporting python challenge python interpreter report syntaxerror new syntax feature python python feature nt available python python interpreter encounter raise runtime error give different result instance print statement replaced print function running module print statement python cause syntaxerror using print statement function python however wo nt raise syntaxerror behavior different contrast long type removed python leaving one builtin integer type named int hence trying use long keyword module executed python interpreter cause nameerror runtime using ql series ql query shown highlighting issue found working python compatibility explain query work learn use ql library python help write custom query python project analyzed using either python python interpreter learn read python version identified lgtmcom analysis run lgtm spot common error using builtin query find version python used analyze codebase use builtin majorversion minorversion predicate predicate come handy later trying find issue code relevant python python builtin query syntax error syntax error found builtin syntax error query prevent module evaluated thus imported attempt import module invalid syntax fail syntaxerror raised syntax error caused invalid python syntax example note python okay mix tab space code indentation however python new taberror raised indentation contains inconsistent use tab space type error also caught syntax error check encoding error encoding error found builtin encoding error query prevent module evaluated thus imported attempt import module invalid encoding fail syntaxerror raised note python default encoding ascii existing custom query addition builtin query part core lgtm suite custom query community ql writer contributed wrote new custom query shortly joined semmle learning ql library python worked query use return yield outside function first published public github ql repository later became builtin query run lgtmcom writing new ql query new raise syntax pep raising exception python pep exception chaining embedded tracebacks introduced new syntax raise statement raise expr expr optional clause used chain exception used second expression must another exception class instance learn visit raise statement since version use none suppress chained exception example however project style guide may discourage suppression exception chaining using none example maintain backwards compatibility case would want find occurrence ql library python contain class useful finding syntax imported used custom ql query easiest way find type raise statement use raise class using ql query spot raise none syntax used getcause method give u cause raise statement possible find object cause point using pointsto method case test whether none object extend query could check whether valid object used part object either none valid exception class instance example raise statement invalid object typeerror message typeerror exception cause must derive baseexception raised run ql query find raise statement object invalid class instance legal exception type inherits baseexception class thus query would able spot invalid object type used raise clause support unicode identifier name python ascii character could used name python identifier including limited variable function class trying define variable café eacute python would result syntaxerror invalid syntax python pep supporting nonascii identifier limitation removed additional character outside ascii range see doc could used identifier name code valid python however project style guide may prohibit use nonascii character identifier maintain backwards compatibility find identifier break rule find identifier contain character letter number underscore symbol done using regular expression nt worry validity identifier name builtin query already find syntax error variable name nt start underscore letter since check relevant python condition majorversion included python issue would caught query report syntaxerror case ql query find nonascii python identifier query name class represents name identifier attribute class represents name attribute expression example class method need use astnode class access location identifier code however astnode class nt provide identifier name string test using regular expression get name string call member predicate getid getname since defined specific type need use type cast dive could done using postfix prefix cast visit cast help page learn comparing object different type python object different type ordered type name exception number result behavior puzzle developer unfamiliar implementation detail comparison essentially compare type object int str true word representing type int start smaller str type using lexicographic order likewise list str false comparing list object string object would return false python use ordering comparison operator operand natural ordering make sense typeerror exception raised implies python code may compare object different type would issue run program python interpreter instance valid python code would fail python use ql write custom query find comparison invalid data type point might useful refactor code clause get difficult read define helper predicate incomparabletypes would hold comparison expression incompatible type left right expression comparison inspected check type point using pointsto method use nt care variable state nt care kind value left right expression point however must certain type query currently support comparing string float list however easy extend copying relevant section changing class type instance extend query include comparison integer object would need add following section octal literal syntax support octal literal python longer defined form number starting could python python two method defining octal literal python support second syntax using would cause syntaxerror instead need use zero followed lower upper case example upper case look similar zero using lowercase may preferable therefore helpful search octal literal python nt use avoid issue converting codebase python fortunately already existing query confusing octal literal find octal literal leading easily misread decimal value query need worth bearing mind query nt raise alert octal literal digit length ignored python code may include unix permission mode octals safely ignored want raise alert octal literal simply remove part filter octals certain length ql query find octal literal would raise syntaxerror python query take advantage exists quantifier define predicate hold integer literal start zero digit dive visit explicit quantifier help page learn quantifier ql delimiter numeric literal python support using delimiter numeric literal functionality introduced pep underscore numeric literal example work python project style guide prohibits using feature instance consistency python code could write custom ql query would able find code used numeric literal running code underscore numeric literal using python interpreter would raise syntaxerror previously included two item select statement however return arbitrary number item gettext method give actual source code example whereas numvalue predicate give string representation literal underscore removed example able return multiple item within select statement extremely handy debugging query writing process project style guide relaxed permit underscore integer prohibits using underscore float adjust query work solely float long integer type supported python implementation pep unifying long integer integer long type merged int type mean integer literal l example python would raise syntaxerror runtime spot integer would nt compatible python python project use custom ql query dive charat string method implemented using java stringcharat nt support negative indexing cmp parameter sorted list longer supported running valid python code example using python interpreter would result typeerror cmp longer supported keyword argument sorted function visit old way using cmp parameter learn spot issue python code would need find call builtin sorted function see cmp keyword argument passed ql query find call sorted function keyword argument cmp used callnode class represents call code use nt interested function definition accessed function class function call got sorted builtin function matter finding sorted call cmp keyword argument supplied could reuse ql query find builtin function signature varies python version method dictiterkeys dictiteritems dictitervalues deprecated attempt access dictionary method would raise attributeerror running code python interpreter therefore might want write ql query spot method access object dict type astnode root class give u access element source code attribute class give u access attribute accessed attribute object tied object tie identified using pointsto method found dictionary attribute throughout source code leave longer supported using convenience predicate unsupporteddictmethod end tutorial query posted post executed using lgtmcom query console however also possible run query locally using eclipse visit running query ide learn hope enjoy trying ql project question nt hesitate ask community forum happy querying
171,Lobsters,formalmethods,CSE-Formal methods,Automatic review of abstract state machines by meta property verification (2010),https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=7EBFB1031F6E48633C055D76631850DF?doi=10.1.1.226.5769&rep=rep1&type=pdf,automatic review abstract state machine meta property verification,,obj length r filter flatedecode stream v c 绺 zl c l q ae ocroeâ g r uę c ӥ f f ޡ endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text font r r r r r r endobj obj length r filter flatedecode stream r zu ub ݽ т劫t v f 쏍 q vfe ԛcw uy f oo gx q kz c 璕v endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text font r r r r r r r r endobj obj length r filter flatedecode stream xo ߣc x k jjz qp 娔 h ur w ditb l ğ qgh xme j q eu gύ q k q j x h kyɦ uy j
172,Lobsters,formalmethods,CSE-Formal methods,A predicate transformer semantics for effects,http://www.staff.science.uu.nl/~swier004/publications/2019-icfp-submission-a.pdf,predicate transformer semantics effect,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream rg p 𬧰 v ڛ l jjs蒚 h q v endstream endobj obj length filter flatedecode stream x n l g v n k n p sċ g endstream endobj obj length filter flatedecode stream ah p oy bso g b
173,Lobsters,formalmethods,CSE-Formal methods,Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats,https://arxiv.org/pdf/1803.04870,narcissus deriving correctbyconstruction decoder encoders binary format,,obj filter flatedecode length stream ԉk e q w yy n µ j w rw e si ž
174,Lobsters,formalmethods,CSE-Formal methods,Improving Railway Data Validation with ProB,https://www3.hhu.de/stups/downloads/pdf/FalampinLeuschelDeployBook.pdf,improving railway data validation prob,,obj length filter flatedecode stream lf
175,Lobsters,formalmethods,CSE-Formal methods,On the Relationship Between Static Analysis and Type Theory,https://semantic-domain.blogspot.com/2019/08/on-relationship-between-static-analysis.html,relationship static analysis type theory,ravi mangal static analysis including type property without type grammar also relationship two view compositionality kotlin typed racket racket conclusion recent pldi paper jeremy yallop deterministic regular language,month ago ravi mangal sent email interesting question reproduce part question bothering static analysis type system related besides patrick cousot type abstract interpretation failed find material directly addressing perhaps answer obvious maybe become part community folklore nt really written however clear one might even phrase question precise mathematical manner reason question interesting beautiful answer worked reason never made community folklore indeed nt know answer question quite recently short answer two view type system one view type system another static analysis another form substrate upon static analysis built view true time static analysis including type property one valid view type system another specie static analysis high level purpose static analysis answer question tell property program satisfies without running abstract interpretation model checking dataflow analysis type inference different way answering question somewhat different emphasis priority imo understand relation style analysis helpful think two main style semantics operational semantics denotational semantics denotational semantics turn program mathematical object set domain metric space etc benefit let turn full power mathematics towards reasoning program cost deducing property arbitrary mathematical gadget require arbitrary mathematical reasoning operational semantics hand turn program state machine benefit relatively easy close computer work cost give semantics whole program reality people tend write library partial program also infinitestate operational semantics nt make thing obviously easier work denotational semantics operational semantics give rise model checking program view sequence state take concrete model temporal logic model checking check whether temporal property overapproximates refines concrete model basically static analysis work finding efficiently representable approximation meaning program using define algorithm analyse program typically form model checking type system approximation type abstract interpretation abstract domain david schmidt paper abstract interpretation denotational semantics perspective show see abstract domain arising domain theory noting domain arise infinite limit series finite approximation get abstract domain picking finite approximation rather going way limit thomas jensen phd thesis abstract interpretation logical form show abstract interpretation higherorder functional language corresponds certain intersection type system help illustrate idea abstract domain type abstraction program fwiw finding equivalence abstract domain type system used big topic back seems disappeared view nt know model checking infinitestate system obviously fail terminate general however made effective algorithmic using abstraction either type abstract interpretation turn model finitary one exhaustively searched dataflow analysis david schmidt work idea detail paper data flow analysis model checking abstract interpretation show build abstraction program trace modelcheck mucalculus formula get back classical dataflow analysis one lesson draw read everything david schmidt written well wo nt wrong le common formulate typebased analysis form people looked line work higherorder model checking work taking higherorder program using type inference special type system generate abstraction lie special subclass pushdown system decidable property interest program analysis eg emptiness testing luke ong wrote overview area lics paper higherorder model checking overview dave clarke ilya sergey nice ipl paper correspondence type checking via reduction type checking via evaluation show view type abstract value use perspective derive abstract interpreter program operates abstract value nt state explicitly since obvious mention check program e type int asserting e eventually evaluate abstract value int easy check since every program abstract semantics terminates evaluate e see result int type grammar however type seen way stating program property second life way defining valid program type system also seen way statically ruling certain program consideration expression like hi applies argument hi number valid javascript python code valid program ocaml java would rejected compile time typechecker result type system also used simplify semantics term statically ruled nt give semantics benefit dramatically simplify static analysis example typed functional language integer function type building abstract interpretation sign analysis simplified fact nt worry function value flowing integer domain take obvious abstract domain type rely type system ensure program everything fit together way want ever allowed freeing need jumbo abstract domain abstract value cultural reason methodology often used type system research relatively rarely static analysis work basically tell type system researcher changing language make easier analyze say oh okay tell static analysis researcher thing may express degree skepticism ability update java code everywhere naturally neither reaction right wrong contextual billion line java code wo nt change also java language change version version however researcher nt pick context problem also peer culture type system research tends privilege new language culture static analysis research tends privilege applicability existing codebases even though fundamental technical reason linkage static analysis exploit structure language whenever order improve precision scalability example typical intraprocedural dataflow analysis initialize local variable bottom element dataflow lattice sound thing language constrained local variable freshly allocated procedure invocation hand dataflow analysis assembly code different subroutine would simultaneously affect dataflow value assigned register consequence one thing looking forward finding static analysis researcher start taking serious look rust type system enforces really strong invariant aliasing data race ought open door really interesting analysis relationship two view see grammaticality constraint program analysis opposed overlap effect furthermore mean people writing paper type system often blurry perspective taking one section paper may talk typesasproperties another may talk typesasgrammar ambiguity technically harmless confusing reader coming type system area within formal method reason ambiguity mostly harmless welldesigned language nice relationship two view type john c reynolds explained lovely paper meaning type intrinsic extrinsic semantics language intrinsic type typesasgrammar extrinsic type typesasproperty basically noted give denotational semantics typesasgrammar view interpret typing derivation give denotational semantics typesasproperty view interpret program term typesasgrammar make sense semantics must coherent two typing derivation program must semantics otherwise semantics program ambiguous coherence hold becomes feasible prove equivalence intrinsic extrinsic semantics tight connection syntax language typing derivation noam zeilberger paulandre melliès wrote popl paper functors type refinement system work general semantic structure underpinning reynolds work term relationship intersection type program logic base language compositionality another cultural effect importance type system research place compositionality absolutely case priori reason type system compositional also type system researcher including doubtful type system compositional make concrete example type system pragmatic reasonable yet someone like would still find distasteful consider javalike language whose type system explicitly mark nullability say method argument x c mean x possibly null value type c argument x c mean x definitely class c null value suppose language decide null test refine type variable x c outside ifblock x null dosomething x x c inside ifblock basically checked x null promoted type c c reasonable thing industrial language like kotlin support yet hardpressed find many formal type theory supporting feature like reason culture type theory say type system satisfy substitution principle variable stand term substituting term type variable result typeable term case suppose e complicated expression type c substitution e x get e null dosomething e e c somehow ensure e type c inside scope conditional variable requires updating context arbitrary term much harder even possible culture static analysis say since easy variable handle case whereas culture type theory say anything variable work general term view right wrong contextual genuinely useful kotlin programmer dataflowbased nulltracking time much easier reason program substitution work reason type theorist culture type theory two parent one side scott strachey consciously explicitly based denotational semantics upon compositionality principle side come structural proof theory originated gerhard gentzen invented precisely prove cuteliminability basically substitution principle result typetheoretic toolbox full tool assume maintain compositionality giving moving past depending want load wording emotionally something requires careful judgement example typed racket language extends dynamicallytyped racket language type support interoperation idiomatic racket code us controlflow sensitive type test flowsensitive typing esop arjun guha claudiu saftoiu shriram krishnamurthi wrote paper particularly elegant way combining flow analysis typechecking typing local control state using flow analysis conclusion finally one might wonder whether worth try developing unified perspective type theory static analysis lot work learn one thing example david schmidt paper deeply rewarding faint heart maybe specialize worry member cousin tribe say think benefited tremendously fact largely accident ended learning separation logic denotational semantics proof theory part phd actually wholeness consilience variety technique semantics community devised insight apply across domain surprising way recent pldi paper jeremy yallop nice example little paper hard make easy felt free switch perspective needed learned like automaton theory reading paper model checking ended reading brüggemannklein wood characterization deterministic regular language share aesthetic denotational semantics realized invented superior compositional characterization follow set used parsing knew importance substitution type theory lead switch bnf presentation grammar muregular expression let u offer traditional parser combinator api hood type system identified parseable grammar moreoever type inference algorithm use implementation basically dataflow analysis set thing form multistage programming technique applicable letting u derive parser combinators run faster yacc beyond direct application like good able go conference interested people everyone attending developed deep expertise esoteric subject learning enough learn valuable research community longrunning conversation able hold end conversation make community work better
176,Lobsters,formalmethods,CSE-Formal methods,Verifpal: Cryptographic Protocol Analysis for Students and Engineers,https://verifpal.com,verifpal cryptographic protocol analysis student engineer,intuitive protocol modeling language modeling avoids user error easy understand analysis output friendly integrated software,new software verifying security cryptographic protocol building upon contemporary research symbolic formal verification verifpal main aim appeal realworld practitioner student engineer without sacrificing comprehensive formal verification feature order achieve verifpal introduces new intuitive language modeling protocol much easier write understand language employed existing tool time verifpal able model protocol active attacker unbounded session fresh value support query advanced security property forward secrecy key compromise impersonation verifpal already used verify security property signal scuttlebutt tl telegram protocol communityfocused project available license intuitive protocol modeling language verifpal language meant illustrate protocol close one may describe informal conversation still precise expressive enough formal modeling modeling avoids user error verifpal allow user define cryptographic primitive instead come builtin cryptographic function meant remove potential user define fundamental cryptographic operation incorrectly easy understand analysis output contradiction found query result related readable format tie attack realworld scenario done using terminology indicate attack could possible friendly integrated software verifpal come visual studio code extension offer syntax highlighting live query analysis protocol diagram visualization allowing developer obtain insight model writing check cool threeminute demonstration verifpal used model protocol property forward secrecy
177,Lobsters,formalmethods,CSE-Formal methods,"Coreboot Coverity, Final [Summer of Code] Update",https://blogs.coreboot.org/blog/2019/08/22/gsoc-coreboot-coverity-final-update/,coreboot coverity final summer code update,coverity scan review missing break statement offbyone error boolean v bitwise operator opensbi implicit integer conversion opensbi null pointer lwn conclusion libgfxinit oreboot,final week gsoc time write final blog post past summer worked fixing coverity scan issue coreboot goal making code base coverity clean involved writing substantial number patch vast majority coreboot sprinkling project patch patch patch patch chromium patch patch linux kernel time writing patch still review gerrit possible hopeful list increase next week total patch resolved coverity issue report actual bug however coverity also always right issue actually problem required patch issue total either false positive intentional ignored moment currently remaining report issue tracker coreboot despite substantial number almost entirely composed issue thirdparty project opensbi vboot probably counted coreboot tracker anyway amd vendorcode original plan beginning summer work amd vendorcode however discussion mentor decided skip since upcoming deprecation coreboot might around much longer aside roughly remaining issue mostly required refactoring technical knowledge summary way like give everyone sample sort bug worked project hopefully give advice avoiding future list common nasty subtle type bug found summer missing break statement switch statement c every case statement implicitly fall next one however almost never desired behavior avoid every case need manually terminated break prevent fallthrough unfortunately tedious often accidentally left prototypical example let look agesa vendorcode switch accesswidth case regvalue value break case regvalue value break case regvalue value default assert false switch missing break case fallthrough false assertion clearly intentional example though severe found fortunately error today prevented compiler gcc recently added wimplicitfallthrough option warn implicit fall throughs alert potentially missing break however fall throughs intentional annotated fall comment silence warning since warning enabled coreboot last see missing break statement offbyone error two hard thing computer science cache invalidation naming thing offbyone errorsanonymous everyone bitten offbyone error let take look baytrail graphic code static void gfxlockpcbase struct device dev const gmssizemap gm gmsize pcbase gm dev ggc ggcgsmsizemask gm gm arraysize gmssizemap return gmsize gmssizemap gm array gmssizemap element bound check gm variable used index array however problem bound check miss case gm arraysize gmssizemap one past index last array element fix use check instead exact error performing bound check common see least example another nasty place offbyone error strike string particular making sure null terminated acpi setup getac static long acpicreateecdt acpiecdtt ecdt static const char ecid strncpy char ecdt ecid ecid strlen ecid problem strncpy copy strlen ecid character excludes null character author might thinking similar strlcpy explicitly null terminate string buffer even never reach null character case none stringcopying function needed since ecid string buffer copied using simple memcpy boolean v bitwise operator c integer implicitly convertible boolean value used boolean operator somewhat convenient also make easy mistakenly use boolean operator bitwise one intended let take look cimx southbridge code void sbpoweroninit void data data inb data config pcibenable data outb data constant expands net effect data completely cleared regardless previous value inb intended operator use bitwise negation would clear lowest bit example sort bug see opensbi implicit integer conversion c allows implicit conversion integer type open door many accidental unintentional bug extremely subtle example let take look opensbi void sbimemset void int c sizet count void sbififoinit struct sbififo fifo void queuemem entry entrysize sbimemset fifo queue entry entrysize see problem issue entry entrysize integer rule c implicitly converted int multiplication int hold possible value multiplication overflow intermediate result could negative number platform sizet negative result signextended massive integer last argument sbimemset could lead large outofbounds write solution cast one variable sizet multiplication wide enough prevent implicit promotion int example problem see another situation implicit conversion strike error handling acpi code static ssizet acpidevicepathfill const struct device dev char buf sizet buflen sizet cur const char acpidevicepathjoin const struct device dev const char name static char buf devicepathmax sizet len dev return null build path device len acpidevicepathfill dev buf sizeof buf len return null function prototype right problem obvious acpidevicepathfill return negative value ssizet indicate error len sizet negative error value converted extremely large integer thus passing subsequent error check code review may obvious though error could prevented using wconversion compiler option warn implicit integer conversion however incredible number conversion coreboot would mammoth task fix null pointer null pointer need introduction well known cause sort problem simple example let take look hifive unleashed mainboard static void fixupfdt void unused void fdtrom struct devicetree tree load flat dt cbfs fdtrom cbfsbootmapwithleak fallbackdtb cbfstyperaw null expand dt tree tree fdtunflatten fdtrom code attempt load device tree location cbfs however cbfsbootmapwithleak return null pointer object cbfs found dereferenced call fdtunflatten system dereferencing null pointer lead segfault since operating system set permission prevent accessing memory address however coreboot run operating system even started memory permission fdtrom null pointer fdtunflatten attempt expand device tree whatever memory address leading know problem simple null check avoid requires programmer always remember put another common issue null pointer even check might actually matter pointer already dereferenced example problem edid parser int decodeedid unsigned char edid int size struct edid dumpbreakdown edid memset sizeof edid memcmp edid printk biosspew header foundn return edidabsent case edid dumped null pointer check worst wonky dump edid null right necessarily since dereferencing null pointer undefined behavior compiler allowed assume null pointer dereferences occur program case dereferencing edid pointer dumpbreakdown implicit assertion edid null overzealous compiler could remove following null check optimization disabled using fnodeletenullpointerchecks done coreboot prevent problem could happened null dereference check took place see article lwn detail vulnerability problem dealt linux kernel conclusion c always mantra trust programmer make mistake error easy error prevented compile time using compiler warning many coverity static analyzer like useful powerful tool catching bug slip past compiler peer review however silver bullet error present production code caught fact certainly bug sort left coverity found ever sure caught today new language designed beginning enable safe correct programming example libgfxinit written spark subset ada formally verified compile time avoid essentially error also new oreboot project written rust similar compile time guarantee due extensive type system hope see language others increasingly used future point job become obsolete
178,Lobsters,formalmethods,CSE-Formal methods,Sound and Robust Solid Modeling via Exact Real Arithmetic and Continuity,https://people.csail.mit.edu/sherman/papers/icfp19.pdf,sound robust solid modeling via exact real arithmetic continuity,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g b c pa p endstream endobj obj annots r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource procset pdf xobject r r subtype form type xobject length stream endobj obj bbox filter flatedecode formtype group c devicergb true transparency type group ptexfilename srvconfpubtexacmartifactsevaluatedfunctionalpdf ptexinfodict r ptexpagenumber resource extgstate ca ca subtype form type xobject length stream ɮ g p c n e ӳilrc
179,Lobsters,formalmethods,CSE-Formal methods,Write Fuzzable Code,https://blog.regehr.org/archives/1687,write fuzzable code,invest oracle assertion strong oracle worth weight gold since tend find applicationlevel logic error rather lowerlevel bug typically caught looking thing like array bound violation wrote bit topic interpose io state want much determinism possible fuzzing code avoid control fuzzer blocker afl support second structureaware fuzzing basically mean taking mutated data fuzzer translating something like program fuzzed expects see strong synergy unit testing fuzzing one possible desirable one probably typically want adapting work asan unblock coveragedriven fuzzers enable high fuzzing throughput want fuzzing code harder easier conclusion read conversation,fuzzing sort superpower locating vulnerability software defect often used find problem baked deeply alreadydeployed code fuzzing done earlier moreover developer spend effort making code amenable fuzzed post noncomprehensive nonorthogonal list way write code fuzz better throughout use fuzzer refer basically kind randomized testcase generator whether mutationbased afl libfuzzer etc generative jsfunfuzz csmith etc advice apply every situation lot sound software engineering advice general boldfaced point think particularly important invest oracle test oracle decides whether test case triggered bug default oracle available fuzzer like afl provided o page protection mechanism word detects crash much better assertion compilerinserted friend sanitizer check another excellent kind oracle fuzz using many check possible beyond easy oracle many possibility exist functioninverse pair parseprint loop compressdecompress loop encryptdecrypt loop similar work expected differential two different implementation mode implementation show behavior metamorphic system show behavior test case modified semanticspreserving way adding layer parenthesis expression resource system consume reasonable amount time memory etc processing input domain specific example lossilycompressed image sufficiently visually similar uncompressed version strong oracle worth weight gold since tend find applicationlevel logic error rather lowerlevel bug typically caught looking thing like array bound violation wrote bit topic year ago finally twitter user suggested testing parser poke object return check par good advice interpose io state stateless code easier fuzz beyond want apis taking control state interposing io example program asks o number core current date amount disk space remaining provide documented method setting value necessarily want randomly change number core rather might want fuzz code set singlecore mode separately fuzz mode important special case taking control state io include making easy reset state support persistentmode fuzzing avoiding hidden input lead nondeterministic execution want much determinism possible fuzzing code avoid control fuzzer blocker fuzzer blocker thing make fuzzing gratuitously difficult canonical fuzzer blocker checksum included somewhere input random change made input mutationbased fuzzer tend cause checksum validate resulting poor code coverage basically two solution first turn checksum validation build intended fuzzing second fuzzer generate input valid checksum generationbased fuzzer built mutationbased fuzzer would write little utility patch test case valid checksum generated passed program fuzzed afl support beyond checksum hardtosatisfy validity property input serious problem example fuzzing compiler strongly typed programming language blind mutation compiler input may result valid compiler input often like think validity constraint either soft invalid input waste time otherwise harmless hard system behaves arbitrarily processing invalid input must avoided fuzzing work fuzz c compiler look wrong code bug face hard validity constraint compiler input ub look like wrong code bug simple generalpurpose solution kind problem rather family technique explicitly taking validity property account obvious solution often right one write new generational fuzzer problem take advantage modern coveragedriven fuzzing technique amazing fit coveragedriven fuzzing framework couple option first write custom mutator respect validity constraint second structureaware fuzzing basically mean taking mutated data fuzzer translating something like program fuzzed expects see lot research left done making coveragedriven fuzzers work well presence validity constraint without requiring lot manual effort significant subtlety maybe go another time putting something like sat solver fuzzer generally speaking answer first validity constraint like checksum specifically difficult solver second validity constraint ubfreedom c program implicit inferred even principle looking system fuzzed lot code typical system fuzzed effectively feeding input public apis access blocked code system example use custom memory allocator hash table implementation fuzzing application level probably result especially effective fuzzing allocator hash table kind apis exposed direct fuzzing strong synergy unit testing fuzzing one possible desirable one probably typically want sanitizers fuzzers often require tweak even significant change build process make easier keep build process clean simple possible make easy switch compiler modify compiler option depend specific tool version tool little possible routinely build test code multiple compiler document special build system requirement finally fuzzer blocker sort silly easy avoid code leak memory terminates process deep call stack painful test using persistentmode fuzzer thing avoid handling sigsegv really must way disable handler fuzzer build code compatible asan ubsan extremely useful oracle harder use particular code us custom memory allocator consider turning fuzzer build else adapting work asan else miss important bug unblock coveragedriven fuzzers coveragedriven fuzzers refocus effort try hit uncovered branch blocked certain specific way example coveragedriven fuzzer presented many uncoverable branch spend much time becomes le likely hit interesting branch elsewhere program example one time compared afl coverage program compiled without ubsan found whatever time limit used covered quite lot le sanitized program compared unsanitized build hand definitely want fuzzer look sanitizer failure advice fuzz sanitized unsanitized build program know budget fuzzing resource different activity know principled work problem may matter much since fuzzing overkill sometimes program call branchy alreadyheavilyfuzzed code early execution example might decompress decrypt input processing likely distract coveragedriven fuzzer causing spend lot time trying fuzz crypto compression library want provide way disable crypto compression fuzzing interpreter program likely make life difficult coveragedriven fuzzer since relevant program path encoded data interpreted generally opaque fuzzer want maximum mileage coveragedriven fuzzers may want try avoid writing interpreter least keep extremely simple obvious way deal embedded interpreter someone must thought tried pointer would api teaching fuzzer see coverage language interpreted enable high fuzzing throughput fuzzing effective throughput high seems particularly case feedbackdriven fuzzers may take learn hit difficult coverage target easy throughput hack make possible disable slow code detailed logging example germane fuzzing task similarly interposing io help u avoid speed hack running fuzzer ramdisk want fuzzing code harder easier lot sympathy point view instead aiming security obscurity would better fuzz early thoroughly eliminating fuzzable defect releasing code wild write code programming language strong type system willing tolerate statically eliminate class bad program behavior example stopping u putting wrong kind thing hashmap aggressively use assertion sanitizers get dynamic checking property type system enforce statically antifuzzing technique thing think represents useful kind progress towards better software conclusion randomized testing incredibly powerful point avoiding fuzz code someone else piece described way software developer make fuzzing work better course plenty aspect choosing good corpus writing good fuzzer driver covered acknowledgment pascal cuoq alex groce provided feedback draft piece also benefited suggestion received twitter read conversation contains suggestion nuance manage capture
180,Lobsters,formalmethods,CSE-Formal methods,The sharpSAT #SAT Solver,https://sites.google.com/site/marcthurley/sharpsat,sharpsat sat solver,cachet benchmark page github repository bug fix release vladmir klebanov detail cachet relsat,sharpsat sat solver sharpsat program solves sat problem given propositional formula f cnf sat asks number satisfying assignment f like sat solver cachet based famous dpll algorithm several technique originated sat solvingthe recent version currently august release sharpsat available download new version offer significant speedup previous version sharpsat seen benchmark page interested development sharpsat check github repository provides among thing several unstable development version news february bug fix release available resolving issue pointed fixed vladmir klebanov august new release sharpsat available github change include detail rewritten codebase solver result le line code redesigned sat solver foundation based recent development minisat tinisat offering eg conflict clause minimizationchanges decision heuristic adapt quickly existence absence conflictsmore efficient implicit bcpa new coding scheme component cache frequently save cache memorybugfixesremoved bug lead wrong model count earlier version sharpsatseveral outofmemory problem resolvedthe solver fully compliant allowing example cache size beyond december bugfix compilation problem bit system july source code sharpsat available april source code sharpsat available downloadsprevious version sharpsat still available paper sharpsat sat solver cachet introduced several technique used sharpsat relsat precursor cachet solver significantly different sharpsat frequently slower solve instance hard sharpsat quite easily
181,Lobsters,formalmethods,CSE-Formal methods,HOList: An Environment for Machine Learning of Higher-Order Theorem Proving,https://arxiv.org/pdf/1904.03241.pdf,holist environment machine learning higherorder theorem proving,,obj filter flatedecode length stream r n b fo yu ec e f c z j u g x q zӡ iy ٽ gȩ پq ݤ q fq lri j nbn r endobj obj type objstm filter flatedecode first length n stream c e ӱ u k eo n k e
182,Lobsters,formalmethods,CSE-Formal methods,An experimental tool to convert a subset of Clojure into TLA+,https://github.com/Viasat/salt,experimental tool convert subset clojure tla,salt table content language identifier clojure tla concept standard module doc primitive code structure arithmetic logic spec temporal logic set vector map map record map tuples function example salt example tla change log copyright,salt sexpressions action logic temporal experimental tool convert subset clojure tla although experimental used produce real useful tla specification might want use know clojure writing tla specification specifically provides interactive repl based authoring experience facility automated unit test invariant action automatic formatting resulting tla code mapping tla clojure concept may facilitate learning tla use write specification using salt evaluate salt specification repl part development process ready run tla toolbox invoke salt transpiler emit tla code run resulting tla specification tla toolbox ass temporal property specification library available clojars orgclojarsdavidmcneilsalt salt specification file require salt language require saltlang refer clojure repl transpile salt source file tla file using incantation like spit tlafilename salttranspilertranspiletext slurp saltfilename alternatively salt transpiler invoked command line lein uberjar java cp clojuremain saltmain saltfilename table content language identifier following identifier reserved salt language identifier clojure language comment cond conj contains count def defn difference expt first fn intersection let n require select str subset superset union identifier clojure language whose semantics modified match tla every get map mod range rest identifier added specifically support transpiling neither part clojure tla always changed defm eventually fm leadsto line map subsetproper supersetproper var identifier tla language assume cardinality choose constant div domain e except nat unchanged union selectseq seq sf subseq subset variable wf x clojure tla concept clojure clojure example tla tla example set set vector tuple map function map b record b function defn add x operator add x x lambda fn x x lambda selectseq lambda x x lambda lambda except technically tla operator better understood clojure macro rather clojure function however since clojure function easier write higher order function natural write decision taken model tla operator clojure function cause issue function never applied without variable bound whether applied structurally substituted point matter way tla function might usefully considered clojure function course clojure map used clojure function standard module portion tla standard module implemented referenced salt file follows require saltlang refer tlaplusfinitesets refer tlaplusintegers refer tlaplusnaturals refer tlaplussequences refer salt transpiler detect value salt source file produce corresponding extends statement tla output doc primitive integer represented salt tla salt tla code result string sequence character salt tla code hello hello result hello hello symbol identifier example x symbol following salt tla code let x x let x x result boolean literal salt tla code true true result true true salt tla code false false result false false code structure let statement used establish binding symbol value salt tla code let x x let x x result conditional statement expressed salt tla code true truethen result perform many check value use cond note cond allows one condition applied whereas tla matching condition possible result salt tla code let x cond x true x true x default false let x case x true x true x false result arithmetic arithmetic integer salt tla code result subtraction salt tla code result multiplication salt tla code result integer division salt tla code div div result integer division result truncated salt tla code div div result compute modulus two number salt tla code mod result compute exponentiation salt tla code expt result refer set natural number clojure version us small set natural number default note nat invoked function clojure upper limit dynamically bound necessary testing salt tla code contains nat nat result true true logic use standard logic operator salt tla code true false true false result false false operator salt tla code true false true false result true true specify x true must true well salt tla code true false true false result false false use tla operator salt tla code true false true false result false false check equality salt tla code result true true equality work complex type salt tla code b b b b result true true check two item equal salt tla code result true true use standard inequality operator salt tla code result true true true true true true true true specify something true item set salt tla code e x true e x true result true true specify something true item set salt tla code x x x x result false false spec start spec standard namespace declaration salt tla code n buffer require saltlang refer tlaplusnaturals refer tlaplussequences refer module buffer extends natural sequence result define constant serve sort input specification define scope model salt tla code constant client server data constant client server data result make assertion constant salt tla code assume subset client server limit assume client subseteq server limit result true define variable make state salt tla code variable message leader variable message leader result reference variable via convenience identifier var salt tla code var message leader result message leader message leader specify initial state predicate salt tla code message leader message leader result action predicate reference primed variable symbol salt tla code message leader message leader result indicate variable changed salt tla code unchanged message leader unchanged message leader result true departure tla changed variable indicated instead implies variable unchanged salt tla code changed leader unchanged message result true include horizontal separator line spec delimit section salt tla code line result include comment spec salt tla code comment single line comment single line comment result comment multiline salt tla code comment anmulti line comment amulti line comment result temporal logic say something always true salt tla code always next var next var result say something eventually true salt tla code eventually done done result say something true lead something else true salt tla code leadsto p q p q result specify weak fairness salt tla code wf var next wfvars next result specify strong fairness salt tla code sf var next sfvars next result set set literal defined salt tla code result sequence value defined range note range produce set inclusive final value match tla semantics salt tla code range result standard set operation come clojureset namespace salt tla code union difference intersection union intersect result collapse many set one union salt tla code union union result cartesian product two set computed x operator salt tla code x b x b result b b b b b b check set subset another salt tla code subset subseteq result true true define set made set value salt tla code subset subset result check item contained set salt tla code contains result true true filter value set matching predicate salt tla code select fn x x x x result apply function element set salt tla code map fn x x x x result compute size set salt tla code cardinality cardinality result use tla choose operator salt tla code choose x x choose x x result vector clojure vector literal tla tuples salt tla code result extract first item vector salt tla code first head result extract value index note index start salt tla code get result produce new vector containing first item salt tla code rest tail result produce new vector one element changed salt tla code except except result combine content two vector new vector salt tla code result combine two string tla treat tuples salt tla code str hel lo hel lo result hello hello compute length vector string salt tla code count count hello len len hello result extract subsequence index vector salt tla code subseq subseq result filter value vector salt tla code selectseq fn x x selectseq lambda x x result add item end vector salt tla code conj append result generate possible vector set value salt tla code seq seq result seq idiom calling every set predicate translates corresponding tla idiom checking tla tuple salt tla code every seq result true true compute index present vector salt tla code domain domain result convert vector set salt tla code map fn get domain domain result map use map generate possible map set possible key set possible value salt tla code map result define map via fm salt tla code fm result use defm define map like fm assign result name salt tla code defm mymaps mymaps result extract value key salt tla code get fm result map record map literal whose key keywords become tla record special type tla function salt tla code b b result b b access value tla record salt tla code get b b b b result use domain map obtain key salt tla code domain b domain b result b b produce new tla record modified value like associn salt tla code except b c b b c except b result b c b c produce new nested tla record modified value like associn salt tla code except x b x c x b x x b x c x except b x result x b x c x x b x c x produce new tla record new value computed lambda function like updatein salt tla code except x b x c x b x x b x c x except b x result x b x c x x b x c x except b x produce new tla record new value lambda like combining associn updatein salt tla code except x b x c x b x new x b x c x except b x new result new b x c x new b x c x use map generate possible tla record pair key value set salt tla code map name bob sue age name bob sue age result name sue age name bob age name sue age name bob age name bob age name bob age name sue age name sue age define map via fm autoconvert tla record salt tla code fm b b result b b map tuples map whose key start proceed increment treated tla tuples salt tla code result use domain map correspond tla tuples salt tla code domain domain result extract value tla tuple index note index start salt tla code get result define map via fm autoconvert tla tuple salt tla code fm result function define function using fn depending context transpiled different form salt tla code selectseq fn x x map fn x x selectseq lambda x x x x result define new tla operator defn salt tla code defn add x x add x x result use docstring defn salt tla code defn add docstring x x docstringadd x x result invoke function normal salt tla code add add result define recursive function salt tla code defn add x r x add x r r recursive add add x r x add x r else r result define higherorder function salt tla code defn work f b f b work f b f b result define function take argument usual salt tla code defn work union b work union b result define function take argument usual docstring salt tla code defn work docstring union b docstringwork union b result invoke function argument salt tla code work work result define tla operator rely constant def salt tla code def work union b work union b result reference tla operator relies constant salt tla code work work result example salt following full sample salt file comment example spec ported http githubcomtlaplusexamplesblobmasterspecificationstransactioncommittwophasetla n twophase require saltlang refer constant rm variable rmstate tmstate tmprepared msg defn message union map type prepared rm rm map type commit abort defn tptypeok contains map rm working prepared committed aborted rmstate contains init committed aborted tmstate subset tmprepared rm subset msg message defn tpinit rmstate fm rm rm working tmstate init tmprepared msg defn tmrcvprepared rm tmstate init contains msg type prepared rm rm tmprepared union tmprepared rm changed tmprepared defn tmcommit tmstate init tmprepared rm tmstate committed msg union msg type commit changed tmstate msg defn tmabort tmstate init tmstate aborted msg union msg type abort changed tmstate msg defn rmprepare rm get rmstate rm working rmstate except rmstate rm prepared msg union msg type prepared rm rm changed rmstate msg defn rmchoosetoabort rm get rmstate rm working rmstate except rmstate rm aborted changed rmstate defn rmrcvcommitmsg rm contains msg type commit rmstate except rmstate rm committed changed rmstate defn rmrcvabortmsg rm contains msg type abort rmstate except rmstate rm aborted changed rmstate defn tpnext tmcommit tmabort e rm rm tmrcvprepared rm rmprepare rm rmchoosetoabort rm rmrcvcommitmsg rm rmrcvabortmsg rm defn tpspec tpinit always tpnext rmstate tmstate tmprepared msg example tla following full sample tla output produced salt file module twophase example spec ported http githubcomtlaplusexamplesblobmasterspecificationstransactioncommittwophasetla constant rm variable rmstate tmstate tmprepared msg message type prepared rm rm union type commit abort tptypeok rmstate rm committed prepared aborted working tmstate committed aborted init tmprepared subseteq rm msg subseteq message tpinit rmstate rm rm working tmstate init tmprepared msg tmrcvprepared rm tmstate init type prepared rm rm msg tmprepared tmprepared union rm unchanged rmstate tmstate msg tmcommit tmstate init tmprepared rm tmstate committed msg msg union type commit unchanged rmstate tmprepared tmabort tmstate init tmstate aborted msg msg union type abort unchanged rmstate tmprepared rmprepare rm rmstate rm working rmstate rmstate except rm prepared msg msg union type prepared rm rm unchanged tmstate tmprepared rmchoosetoabort rm rmstate rm working rmstate rmstate except rm aborted unchanged tmstate tmprepared msg rmrcvcommitmsg rm type commit msg rmstate rmstate except rm committed unchanged tmstate tmprepared msg rmrcvabortmsg rm type abort msg rmstate rmstate except rm aborted unchanged tmstate tmprepared msg tpnext tmcommit tmabort e rm rm tmrcvprepared rm rmprepare rm rmchoosetoabort rm rmrcvcommitmsg rm rmrcvabortmsg rm tpspec tpinit tpnext rmstate tmstate tmprepared msg change log version introduced symbolic evaluator evaluates possible simplifies testing action predicate copyright copyright c viasat inc right reserved redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution software provided copyright holder contributor express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall copyright holder contributor liable direct indirect incidental special exemplary punitive consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage
183,Lobsters,formalmethods,CSE-Formal methods,Are Lock-Free Concurrent Algorithms Practically Wait-Free? (2014),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/paper-18.pdf,lockfree concurrent algorithm practically waitfree,,obj length filter flatedecode stream e x qa c hx x v w v
184,Lobsters,formalmethods,CSE-Formal methods,Generating Correctness Proofs with Neural Networks,https://arxiv.org/abs/1907.07794,generating correctness proof neural network,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
185,Lobsters,formalmethods,CSE-Formal methods,The Quest for Formally Secure Compartmentalizing Compilation,https://prosecco.gforge.inria.fr/personal/hritcu/talks/2019-01-29-Secure-Compilation-Habil.pdf,quest formally secure compartmentalizing compilation,,obj typecatalog page r lang enus structtreeroot null markinfo marked true outline r endobj obj typepages count kid r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj typepage parent r resource extgstate r r font r r r xobject r r r procset pdftextimagebimagecimagei mediabox content r group typegroup stransparency csdevicergb tab structparents endobj obj filterflatedecode length stream c v đ gl b sa hmm f q ai r fwauvv f lb v j
186,Lobsters,formalmethods,CSE-Formal methods,"Coq Coq Correct: Verification of Type Checking and Erasure forCoq, in Coq",https://www.irif.fr/~sozeau//research/publications/drafts/Coq_Coq_Correct.pdf,coq coq correct verification type checking erasure forcoq coq,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڵ mt e x ߋf k v b z w wf j b z endstream endobj obj length filter flatedecode stream b r fee h j j ݧ k u v g q endstream endobj obj length filter flatedecode stream ĳ j km endstream endobj obj length filter flatedecode stream h c n r ǵ g f w x خ g h l x tg j endstream endobj obj type objstm n first length filter flatedecode stream ʲ â
189,Lobsters,formalmethods,CSE-Formal methods,Weekend Replication of the STOKE Superoptimizer,https://github.com/bollu/blaze/blob/master/notebooks/tutorial.ipynb,weekend replication stoke superoptimizer,permalink join github today sign reload reload reload,permalink dismiss join github today github home million developer working together host review code manage project build software together sign retrieve contributor time line sloc kb sorry something went wrong reload sorry display file sorry file invalid displayed perform action time signed another tab window reload refresh session signed another tab window reload refresh session
191,Lobsters,formalmethods,CSE-Formal methods,Mathematical Proof of Algorithm Correctness and Efficiency,https://stackabuse.com/mathematical-proof-of-algorithm-correctness-and-efficiency/,mathematical proof algorithm correctness efficiency,introduction correctness efficiency disclaimer mathematical induction induction hypothesis induction base induction step basic example problem induction hypothesis induction base induction step implication qed proof correctness function based state state program state example state deterministic deterministic variable functional programming haskell recursion recursion example loop invariant loop invariant bind loop invariant selection example time loop invariant example proof induction qed efficiency analysis recurrence relation dynamic programming solving homogeneous linear recurrence relation cycle characteristic polynomial computer science master theorem bare bone much common logical enough article example binary search binary search algorithm master theorem formula n example dynamic programming v recursion last article fibonacci time complexity analysis math talk quadric equation quadratic equation deducing algorithm complexity recurrence relation exponential complexity value value dynamic programming superior timewise traditional recursion conclusion,introduction designing completely new algorithm thorough analysis correctness efficiency needed last thing would want solution adequate problem designed solve first place article talking following subject disclaimer see section title way shape form meant direct application computer science theory meant deeper understanding certain field practical programming mathematical induction mathematical induction mi essential tool proving statement prof algorithm correctness general idea mi prove statement true every natural number n actually mean mean go step induction hypothesis define rule want prove every n let call rule f n induction base proving rule valid initial value rather starting point often proven solving induction hypothesis f n whatever initial value appropriate induction step proving know f n true step one step forward assume f correct followed step power loop really basically give u ability something like range n true basic example problem define n sum first n natural number example prove following formula applied n n frac n let trace step induction hypothesis n defined formula induction base step prove frac frac induction step step need prove formula applies n also applies follows frac frac known implication b mean prove b correct providing know correct n frac n frac frac frac note n mean recursively calculating sum example literal qed proof correctness method using prove algorithm correctness math based rather function based solution similar real mathematic function easier proof may ask well practical imperative programming thing called state mean program output dependent thing sequence instruction input value state rather previously initialized variable way change output value program state example def foo x x return x asked give output value function naturally would say well golly gee sir would know output value nt know gosh darn value see exactly point imperative program state defined list variable corresponding value program output truly deterministic deterministic system random factor open whole new story programming paradigm completely transparent state word variable might seem insane exist semifrequently used especially functional programming haskell nt traditionally functional concept disposal imperative programming settle next best thing proving correctness recursion recursion easy math interpretation equivalent recurrence relation recurrence relation following segment recursion example def factorial n return else return n factorial converted recurrence form factorial n n factorial loop invariant sound fine dandy nt said anything representing loop program state math formula variable program state pose problem need kept check time case one go haywire also loop pose problem mathematical equivalent mean incorporate mathematical induction algorithm analysis model method know iteratively incriminate value math like actual code simplest way solving problem mathematical induction loop invariant loop invariant logic formula set rule true loop question unbiased iteration imperative contain rule variable occur said loop need bind set value want loop invariant selection loop invariant complicated simple want however point constructed resemble problem hand closely possible example always say following loop invariant x x x using tautology logic formula always correct loop invariant nt really achieve anything reason technically classified loop invariant fit requirement formula correct loop execution formula correct loop execution including step formula correct loop execution example let take look following code determine optimal loop invariant x z n n x z zy n logically code calculates value x store z mean z x another condition know always true n x equal example two really apply program done computing n value essentially number loop already executed also number time z value increased mean z n n x might apply time thing left check whether really used loop invariant loop invariant example proof induction first need prove loop invariant true entering loop equivalent proving induction base logical equivalency left right side equation logical value true false le equal confused implication also look like arrow left x z n rule z n true rule applies rule n x true rule applies therefore invariant valid entering loop second need check invariant true every finished loop excluding last one observing transition z n z n z n value z n next loop executed therefore z zy n need essentially prove know invariant true z n also true z n z z z n n n follwing valid invariant valid z n z n n z third need check invariant true last iteration loop n integer know x true n x false mean nx reason invariant include n x n x therefore know z x qed efficiency analysis recurrence relation talking algorithm efficiency first thing come recurrence relation mean function f n dependent preceding succeeding value f f simplest example kind function would fibonacci sequence fibonacci n fibonacci fibonacci might actually recognize concept article dynamic programming yes problem similar however solving method different analyzing algorithm efficiency basically two type relation solving linear homogeneous recurrence relation nonlinear recurrence relation master theorem use case solving homogeneous linear recurrence relation reading title may asking name god math gibberish well first let take look general formula f n f n f n k f n k let break definition bytesize piece pun intended linear refers fact function element f something first power homogeneous refers fact element duplets f something uniform meaning constant present f something const happen recurrence relation solved using following substitution f n rn r conveniently chosen complex number enumerating useful formula easily reference example using complex number need variable cycle number value nt different root solution equation clarification complex number form x bi x complex number b simple integer constant begin align isqrt end align notice particular number meaning actually cycle begin align isqrt sqrt end align mean cycle length complex number tailormade precise cycle two element except starting ending element using mentioned substitution get characteristic polynomial r k r k r k k represents convenient equation r k possible solution root also represent f n linear combination predecessor proof formula correctness shown sake sanity f n k c r n ci unknown coefficient indicate r impact calculating value f n also root value r example come say r multiplicity greater slightly alters previous equation f n h n hi element contain ri calculated multiplicity mind according formula h n c c n c n c n r n congratulation solve bare bone recurrence equation let test computer science master theorem remember said bare bone recurrence relation well looking complicated much useful type recurrence relation basic form new type recurrence relation n frac n b cnk constant equal greater zeroa b c k b much common recurrence relation embodies divide conquer principle calculates n calculating much smaller problem like nb formula use calculate n case kind recurrence relation follows n n l g b b k n k l g n b k n k b k formula logical enough proof nt really trivial would advise remember still want see proof read theorem proof article example binary search sorted array length n want find much time would take u find specific element let call z example first need take look code using find said element using binary search leftindex rightindex indicate part original array currently examining initial function call find n import math def find z leftindex rightindex search range narrowed one element check equal z target index wanted element target z leftindex rightindex leftindex z return leftindex else return else middlepoint mathceil leftindex rightindex print format leftindex rightindex middlepoint array sorted know z x middlepoint know left said element go z x middlepoint call find z leftindex middlepoint z middlepoint return middlepoint z middlepoint return find z leftindex middlepoint else z middlepoint leaving middle point call intentional middle point check except leftindexrightindex return find z middlepoint rightindex def main z target find z len print target index format target name main main time intensive part search recursion mean represent time take binary search algorithm search array length n using following recurrence relation n frac n representing constant operation like value checking like leftindex rightindex constant nt really important considering great deal smaller n nb matching master theorem basic formula binary search formula know using master theorem formula n get n log n binary search really efficient standard linear search example dynamic programming v recursion let take one final look fibonacci sequence last time promise fibonacci n fibonacci fibonacci dynamic programming know last article time complexity n us memorization generates array linearly lookbacks construct array ground let prove way efficient use dynamic programming fibonacci time complexity analysis let say n represents time needed calculate nth element fibonacci sequence know following formula applies n first need get implicit form equation math talk plonk everything one side side zero n let use standard substitution formula rnr r simplify equation let divide side r power lowest power present equation case r n r n r n r n r n n r n n r n n r r r r r step done boil problem quadric equation using quadratic equation formula get following possible value r r r using formula determine basic formula fibonacci n n c r n c r n know fibonacci fibonacci therefore technically could constant number operation needed calculate value nt really impact result much sake simplicity like fib fib use solve equation c r c r c c mean c c using c r c r c r c r know value following c c substitute main equation c c solve equation get c c mean final solution recurrence relation n n n deducing algorithm complexity recurrence relation n represents number step program need calculate nth element sequence n also input value commonly input size bit solution tell u algorithm using exponential complexity fun fact method used also find formula calculating definite value nth element fibonacci sequence function would represent value thenth element rather many operation need calculate recursive exponential time complexity much greater order magnitude n dynamic programming linear time complexity definitive answer dynamic programming superior timewise traditional recursion conclusion know article might seem little redundant proof correctness efficiency cornerstone modern computer science theory main reason field keep going forward rapid rate computer science nt thing programming one many use case think would nice people get better understanding really least solely article
192,Lobsters,formalmethods,CSE-Formal methods,Using Pairwise Testing to Verify Automatically-Generated Formal Specifications (2015),http://www.cs.utep.edu/isalamah/publications/C6.pdf,using pairwise testing verify automaticallygenerated formal specification,,obj r capheight ascent flag italicangle descent fontfamily wingdings fontname anhenowingdings fontstretch normal fontbbox type fontdescriptor fontweight stemv endobj obj subtype truetype fontdescriptor r basefont anhekktimesnewroman bolditalic encoding winansiencoding width firstchar type font lastchar endobj obj filter flatedecode length stream r j ݕ r ov de qϰ l fak x
193,Lobsters,formalmethods,CSE-Formal methods,Practical Symbolic Execution and SATisfiability Module Theories (SMT) 101,http://deniable.org/reversing/symbolic-execution,practical symbolic execution satisfiability module theory smt,microsoft research leonardo de moura nikolaj bjorner klee llvm compiler cristian cadar daniel dunbar dawson engler angr computer security lab uc santa barbara shellphish richard richinseattle johnson satsmt solver wikipedia definition wikipedia page starting point quick setup github official repository linear equation variable http tutorialmathlamaredu tutorial guide polish notation puzzle quick introduction satsmt solver symbolic execution dennis yurichev zebra puzzle wikipedia yurichev pdf approach wikipedia find serial number known ctf challenge get flag codegate ctf limitation symbolic execution published thesis richard richinseattle johnson axel souchet fuzzing post afl richard richinseattle johnson klee klee klee klee docker image linear equation variable ctf challenge get flag retdec gold linker llvm plugin whole program llvm find serial number documentation kleedev mailing list stp stp angr angr shellphish documentation angr documentation keypatch plugin following final note moyix github triton manticore trail bit credit countuponsec reference particular order,finding bug hard reverse engineering hard constraint solver heart many program analysis technique aid fuzzing software verification post contains handson experiment high performance theorem prover developed microsoft research leonardo de moura nikolaj bjorner klee symbolic execution engine built top llvm compiler infrastructure developed cristian cadar daniel dunbar dawson engler angr binary analysis framework developed computer security lab uc santa barbara associated ctf team shellphish motivation behind post basically use reminder keep using google search thingsreferences eventually future post realistic advanced use case scenario tool mentioned others area currently working meaning trying learn however post already long illustrate use mainly use python api practical easy understand satsmt solver many application important application smt solver symbolic execution analysis testing program concolic testing goal finding security vulnerability exactly main interest major problem may find look subject fact information find theoretical however many security researcher already working field long time symbolic execution definitely help reverse engineering software analysis see follow post main reason topic getting voga believe mainly computer getting faster faster software getting highly complex consequently solving problem satsmt attractive want go deep topic see reference section end article find awesome work subject go back year notably besides academia far know richard richinseattle johnson one first start applying technique bug finding sourcefire cisco satsmt solver able define satsmt better wikipedia wikipedia definition computer science mathematical logic satisfiability modulo theory smt problem decision problem logical formula respect combination background theory expressed classical firstorder logic equality example theory typically used computer science theory real number theory integer theory various data structure list array bit vector smt thought form constraint satisfaction problem thus certain formalized approach constraint programming smt instance generalization boolean sat instance try stay away theory math behind satsmt solver academia anymore actually really study subject also bored basically show practical example use satsmt solver mainly use lot smt solver check wikipedia page eventually complete list diving equation satsmt solver solver huge equation must familiar computer science logic prerequisite talking variable true false xor feel rusty need refreshing concept wikipedia might good starting point also need familiar concept like function connective asserts assertion always assumed true assertion evaluates false program must end others smt problem decision problem formula expressed using logic return true false based theory arithmetic list bit vector array etc word smt solver constraint solver constraint statement specifies property solution found good example solver work magic well kind user specifies formula must satisfied solver attempt find solution satisfies formula solver find solution formula said satisfiable solver find solution formula said unsatisfiable quick setup get started recommend grab code project github official repository git clone http cd cxxclang ccclang python scriptsmkmakepy cd build make sudo make install make python script already executed buildpython directory prefer use docker container type docker pull linear equation variable learnt primary school real world problem represented equation let use one equation learnt somewhere around school year use following linear equation system variable grabbed http tutorialmathlamaredu x z solve using easypeasy use python binding actually easy read code understand going usrbinpython import solver x int x int z int z sadd x z sadd x z sadd x z print scheck print smodel solver function solves system constraint function int x creates integer variable named x example us variable x z three constraint example expression x constraint like python us assignment operator comparison try solve equation hand save lot time use though time python sat z x real user sys scheck return sat meaning able find solution change equation way solution return unsat since equation satisfiable word solution got model smodel used int integer equation obviously also real variable bool check tutorial guide detail said using python practical popular among hacker community however standard language smt solver called smtlib go back first example rewrite look like declareconst x int declareconst int declareconst z int assert x z assert x z assert x z checksat getmodel see lot tricky still readable start declaring constant add constraint adding assertion using polish notation check satisfiability checksat finally get interpretation make formula true getmodel save code file run shown sat model definefun z int definefun x int definefun int also read command stdin type instead move see small unsatisfiable example python usrbinpython import solver int b int b sadd sadd b sadd b scheck unsat print solution else print smodel run obviously get solution python solution demonstration purpose want fix formula make satisfiable go ahead basic example enough get u started however want play complex equationsexamples recommend look puzzle satsmt solver applied equation kind puzzle describe equation also solved find many example puzzle solved best compilation aware quick introduction satsmt solver symbolic execution dennis yurichev definitely look resource want go deep subject another good resource plenty solved puzzle found maintained axel souchet zebra puzzle read wikipedia zebra puzzle wellknown logic puzzle many version puzzle exist including version published life international magazine december puzzle often called einstein riddle able find online slight variation try think translate problem data structure start adding constraint solution used matrix integer find solution different approach yurichev pdf axel souchet used approach close mine even though bit elegant yurichev might easiest understand try solve puzzle compare solution many way solve puzzle learn looking others good way practice usrbinenv python solution http enwikipediaorgwikizebrapuzzle following version puzzle appeared life international five house englishman life red house spaniard owns dog coffee drunk green house ukrainian drink tea green house immediately right ivory house old gold smoker owns snail kools smoked yellow house milk drunk middle house norwegian life first house man smoke chesterfield life house next man fox kools smoked house next house horse kept lucky strike smoker drink orange juice japanese smoke parliament norwegian life next blue house drink water owns zebra interest clarity must added five house painted different color inhabitant different national extraction different pet drink different beverage smoke different brand american cigaret sic one thing statement right mean right import solver zebra color red green ivory yellow blue nationality british spanish ukrainian norwegian japanese pet dog snail fox horse zebra beverage coffee tea milk juice water cigaret old gold kools lucky strike parliament chesterfield assign integerindex zebra name color nationality pet beverage cigaret range create integer variable matrix cell cell int j j zebra range debug print cell add cell constraint range x range sadd cell x cell x add row constraint range sadd distinct cell x x range feed solver hint englishman life red house sadd cell nationality zebra nationality index british cell color zebra color index red range spaniard owns dog sadd cell nationality zebra nationality index spanish cell pet zebra pet index dog range coffee drunk green house sadd cell beverage zebra beverage index coffee cell color zebra color index green range ukrainian drink tea sadd cell nationality zebra nationality index ukrainian cell beverage zebra beverage index tea range green house immediately right ivory house sadd cell color zebra color index green cell color zebra color index ivory range old gold smoker owns snail sadd cell cigaret zebra cigaret index old gold cell pet zebra pet index snail range kools smoked yellow house sadd cell cigaret zebra cigaret index kools cell color zebra color index yellow range milk drunk middle house sadd cell beverage zebra beverage index milk norwegian life first house sadd cell nationality zebra nationality index norwegian man smoke chesterfield life house next man fox sadd cell cigaret zebra cigaret index chesterfield cell pet zebra pet index fox cell cigaret zebra cigaret index chesterfield cell pet zebra pet index fox cell pet zebra pet index fox cell cigaret zebra cigaret index chesterfield cell pet zebra pet index fox cell pet zebra pet index fox cell cigaret zebra cigaret index chesterfield cell pet zebra pet index fox cell pet zebra pet index fox cell cigaret zebra cigaret index chesterfield cell pet zebra pet index fox kools smoked house next house horse kept sadd cell cigaret zebra cigaret index kools cell pet zebra pet index horse cell cigaret zebra cigaret index kools cell pet zebra pet index horse cell pet zebra pet index horse cell cigaret zebra cigaret index kools cell pet zebra pet index horse cell pet zebra pet index horse cell cigaret zebra cigaret index kools cell pet zebra pet index horse cell pet zebra pet index horse cell cigaret zebra cigaret index kools cell pet zebra pet index horse lucky strike smoker drink orange juice sadd cell cigaret zebra cigaret index lucky strike cell beverage zebra beverage index juice range japanese smoke parliament sadd cell nationality zebra nationality index japanese cell cigaret zebra cigaret index parliament range norwegian life next blue house sadd cell nationality zebra nationality index norwegian cell color zebra color index blue cell nationality zebra nationality index norwegian cell color zebra color index blue cell color zebra color index blue cell nationality zebra nationality index norwegian cell color zebra color index blue cell color zebra color index blue cell nationality zebra nationality index norwegian cell color zebra color index blue cell color zebra color index blue cell nationality zebra nationality index norwegian cell color zebra color index blue scheck unsat print failed solve likely constraint wrong smodel solution case aslong case line line cell range print house nationality beverage smoke pet zebra color solution color zebra nationality solution nationality zebra beverage solution beverage zebra cigaret solution cigaret zebra pet solution pet compare result one wikipedia even get sat result constraint might subtly wrong solution different time python zebrapuzzlepy house yellow nationality norwegian beverage water smoke kools pet fox house blue nationality ukrainian beverage tea smoke chesterfield pet horse house red nationality british beverage milk smoke old gold pet snail house ivory nationality spanish beverage juice smoke lucky strike pet dog house green nationality japanese beverage coffee smoke parliament pet zebra real user sys find serial number simple example let say program validates serial number nowadays serial number validation routine way complex get surprised still able find software online validation logic implemented binary idea show used generate valid serial number given known checking algorithm often case might know format serial number program expects example program tell sn form xxxxxxxxxx theory based information brute force sn however usually program accept one single combination char valid sn multiple valid combination must pas certain validation routine happens time including ctfs get example reverse program try locate code responsible validate serial number try figure validation performed word constraint time algorithm complex trying solve manualy quite hard smt solver come handy use simple c program wrote validation check easy understand idea example see example ctf access binary also need reversing part code include stdioh include stdlibh include stringh void usage char progname printf usage serial number n progname printf serial number form xxxxxxxxxxn exit int isdigit int return return int ischar int return return int validatesn char sn constraint whole sn char strlen sn return constraint index must equal sn return constraint first char first xxxxx sequence must first char second xxxxx sequence must sn return sn return constraint char digit char digit isdigit sn return isdigit sn return constraint char uper case letter ischar sn return ischar sn return constraint last char every xxxxx number isdigit sn return isdigit sn return isdigit sn return isdigit sn return constraint last char every xxxxx sequence must sn sn return sn sn return return int main int argc char argv char serial argv argc usage argv validatesn serial printf thank license activen else printf invalid serial number please try againn return constraint clearly identified source code let see ask give u valid serial number see usrbinpython import sys import solver sn intvector sn def isvalid x return x x x x range sadd isvalid sn constraint sadd sn constraint sadd sn sadd sn constraint sadd sn sn sadd sn sn constraint sadd sn sn sadd sn sn constraint sadd sn sn sadd sn sn sadd sn sn sadd sn sn constraint sadd sn sn sadd sn sn scheck unsat print unsat sysexit smodel x print x chr x aslong run time python snpy sort v real user sys see found indeed valid sn number according constraint defined go back test serialvalidation binary serial number found u get gcc serialvalidation serialvalidationc serialvalidation usage serialvalidation serial number serial number form xxxxxxxxxx serialvalidation thank license active contrived example hopefully tried solve struggled bit forced learn least little talk symbolic execution let try solve ctf challenge also find valid serial number well find flag know mean ctf challenge get flag try solve challenge codegate ctf preliminary round precisely redvelvet challenge reversing category start looking binary run file redvelvet redvelvet elf lsb executable version sysv dynamically linked interpreter gnulinux buildid stripped redvelvet flag aaa nix string utility showed interesting ascii string want see whole output check happiness flag flag opened binary ida looked main function call printf flag call fgets read input call bunch function always parameter function funcx sure validating flag look inside example see performs manipulation comparison based user input everything go well execution continue otherwise execution stop program exit ida pro hexrays decompiler come handy pressed see pseudocode much better check pas string happiness printed code flow next function look story story go function also looked string even though expected solution follow highlighted string end basic block near end main function print flag provided correct input look perfect even better symbolic execution framework let stick well everything need solve challenge hope copy pseudo code function translate constraint start simply replicating function python receives argument receive look remaining work int fastcall char char char exit exit return put happiness def sadd sadd sadd sadd sadd hopefully note reversing logic constraint evaluate true program exit another function whoever told reversing fun lied actually quite boring persistence patience master skill int fastcall char char exit exit return put happiness def sadd sadd int fastcall char char char exit return put happiness def sadd sadd sadd int fastcall char char signed rtt lodword char hidword unsigned char unsigned int exit return put happiness def sadd sadd sadd sadd int fastcall char char char exit return put happiness def sadd sadd sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd sadd sadd urem use function urem unsigned remainder srem signed remainder http int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd sadd sadd urem int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd udiv use function udiv unsigned division http sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd sadd udiv int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd sadd sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd int fastcall char char char exit exit exit return put happiness def sadd sadd sadd sadd sadd sadd ok easiest part decompile main function see following code int cdecl main int argc const char argv const char envp char bl rax rcx rsi sizet rax char bool zf signed int char char char bpffh char bpfeh char bpfdh char bpfch char bpfbh char bpfah char char char char spcah char spcbh char spcch char spcdh char spceh char spcfh char char bpefh char bpeeh char bpedh char bpech char bpebh char bpeah char char char char char char int mkfp f qword printf const char argv envp fgets edata ptrace byte byte byte jumpout jumpout qword ag unsigned int strlen sprintf unsigned strcmp exit printf flag n return look line input read know flag supposed maximum char including final null terminator also important look char passed function saw funcx function receive char char look pseudo code function main also figure char passed function anyway need define char accept valid consider following char reason get solution expand add following python script def isvalid x return x x x x x x x x x x x x x x x x x x x x bitvec range range sadd isvalid x see create bitvec initialize size saw input string would take char excluding null char terminator c string based logic got main function pseudo code add following python script x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x ready go need print solution scheck sat solution smodel flag n x char solution n aslong flag chr char print flag else print unsat go back check constraint run time python redvelvetpy whatyouwannabe lcla real user sys wow apparently work took close hour put together execution really fast let validate solution redvelvet flag whatyouwannabe lcla happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness hmm happiness string printed apparently solution one expected look pseudo code main function see validation hash computed result apparently different panic know solver give u one valid solution need ask give another satisfying model want find possible solution feeling lazy could something like scheck sat solution smodel flag n x char solution n aslong flag chr char print flag sadd solution smodel else print unsat go back check constraint using kind finite sort proper way run get another possible solution python redvelvetpy whatyouwannabe lcla whatyouwannabe lala whatyouwannabe lala c however add new constraint block model returned solution still limitation work u scheck sat solution smodel block solution c blockappend c solution flag n x char solution n aslong flag chr char print flag sadd block run time python redvelvetpy whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lcla whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lala whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla whatyouwannabe lbla real user sys ok let sort python redvelvetpy sort u whatyouwannabe lala whatyouwannabe lbla whatyouwannabe lcla apparently possible solution actually expand accepted charset let try see luckier time get stopped hash validation routine redvelvet flag whatyouwannabe lala happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness flag whatyouwannabe lala cool whatyouwannabe lala solution solver gave u possible solution keep mind final version script import def sadd sadd sadd sadd sadd def sadd sadd def sadd sadd sadd def sadd sadd sadd sadd def sadd sadd sadd def sadd sadd sadd sadd sadd sadd sadd urem use function urem unsigned remainder srem signed remainder http def sadd sadd sadd sadd sadd sadd sadd urem def sadd sadd sadd sadd udiv use function udiv unsigned division http sadd def sadd sadd sadd sadd def sadd sadd sadd sadd sadd def sadd sadd sadd sadd sadd sadd udiv def sadd sadd sadd sadd sadd sadd def sadd sadd sadd sadd sadd sadd sadd def sadd sadd sadd sadd sadd def sadd sadd sadd sadd sadd sadd def isvalid x return x x x x x x x x x x x x x x x x x x x solver x bitvec range range sadd isvalid x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x scheck sat solution smodel block solution c blockappend c solution flag n x char solution n aslong flag chr char print flag sadd block job considerably easier real world situation binary easy reverse since functionality besides flag validation function anyway indeed good tool keep around need find binary feel like spending much time front debugger symbolic execution symbolic execution program analysis technique provides ability automatically enumerate feasible path program technique received attention mentioned due increased performance computer also due improvement constraint solver technique relies instead program run concrete input symbolic execution run program symbolic input input represented placeholder initially non contrained value program run symbolic execution keep track variable depend symbolic input branch depends symbolic input example statement found constraint solver used check branch feasible mean actually use example klee solve linear equation zebra puzzle might smart use klee allow u play bit symbolic execution process well described daniel liew recent published thesis symbolic execution verification language floatingpoint code instead running program concrete input particular input component might eg take value symbolic execution run program symbolic input input component represented placeholder initially unconstrained value program run symbolic execution keep track program variable depend symbolic input branch point eg statement dependent symbolic input encountered constraint solver used check branch feasible feasible path executed making copy known forking current program state necessary feasible path least one must feasible constraint branch imposed symbolic input added per path set called path condition pc pc record symbolic branch condition branch depend symbolic input traversed path pc two purpose first used check feasibility encountering later branch point path second constraint pc solved satisfying assignment symbolic input found satisfying assignment used replay execution program along path assuming program deterministic symbolically executed effectively test case automatically generated test case useful developer added existing test suite increase code coverage used replay bug simplistic word symbolic execution short program analysis technique treat input data symbolic variable rather concrete value quoting richard richinseattle johnson symbolic execution let u execute series instruction without using concrete value variable instead numeric output get formula output term input variable represents potential range value pointed axel souchet symbolic execution would f x x concrete execution would f symbolic execution creates constraint based symbolic variable used conjunction constraint solver like generate new inputstest case concolic execution symbolic execution constraint solving concolic execution concolic execution used aid fuzzing software verification goal maximizing code coverage look simple function like one int foobar int n int n bug return using dumb fuzzing real change hitting bug yes billion attempt read post interesting case afl dealing something slightly complex one recommend look another presentation richard richinseattle johnson get good foundation subject watch video anyway post fuzzing let move solve linear equation time klee klee klee bit though install use klee docker image docker pull kleeklee docker run ti namemykleecontainer kleeklee klee linear equation variable use linear equation system variable grabbed x z solve klee simply created following logic file called equationc include asserth include kleesrcincludekleekleeh int main int argc char argv int x z kleemakesymbolic x sizeof x x kleemakesymbolic sizeof kleemakesymbolic z sizeof z z x z return x z return x z return kleeassert ran klee clang emitllvm g c equationc klee equationbc klee output directory klee using stp solver backend klee error assertion fail klee note ignoring error location klee done total instruction klee done completed path klee done generated test l kleelast grep err ktesttool writeints ktest file args equationbc num object object name b x object size object data object name b object size object data object name b z object size object data indeed solution equation system x z slightly optimized use kleeassume tell klee cut path constraint satisfied equation could written include asserth include kleesrcincludekleekleeh int main int argc char argv int x z kleemakesymbolic x sizeof x x kleemakesymbolic sizeof kleemakesymbolic z sizeof z z kleeassume x z kleeassume x z kleeassume x z kleeassert clang emitllvm g c klee klee output directory klee using stp solver backend klee error assertion fail klee note ignoring error location klee done total instruction klee done completed path klee done generated test l kleelast grep err ktesttool writeints ktest file args num object object name b x object size object data object name b object size object data object name b z object size object data going solve zebra puzzle klee since really learn anything new compared seen try want look yurichev solution page time writing ctf challenge get flag instead see solve redvelvet ctf challenge time klee order use klee need access source code case since access source code redvelvet ctf challenge use ida pro hexrays decompiler already saw get code yes need fix code compile unfortunately retdec support yes stick ida main step need complete order solve challenge klee decompile redvelvet binary source code ida pro hexrays decompiler include defsh plugins folder ida pro source file replace user input kleemakesymbolic input sizeof input input replace flag printf kleeassert code get ida pro hexrays decompiler compile skip step fixing code give code ready compile curious compare change include stdioh include stdlibh include stringh include opensslshah include defsh int char char char exit exit return put happiness int char char exit exit return put happiness int char char char exit return put happiness int char char signed rtt lodword char hidword unsigned char unsigned int exit return put happiness int char char char exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int main int argc const char argv const char envp char buf sizet rax signed int unsigned char char char qword char qword char qword char qword char qword char qword char qword char qword char qword char qword char qword char qword char qword printf flag fgets buf stdin unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf strlen buf buf sprintf unsigned strcmp exit printf flag n buf return fix compile run make sure mimic exactly original binary gcc redvelvet redvelvetc lssl lcrypto redvelvet flag lalala well run must ok let proceed change connect klee docker container docker p container id image command created status port name kleeklee binbash hour ago exited hour ago myfirstkleecontainer docker start ai need change redvelvetc required klee modification unified diff showing change made diff un rebuiltredvelvetc redvelvetkleec rebuiltredvelvetc redvelvetkleec include stringh include opensslshah include defsh include asserth include kleesrcincludekleekleeh int char char char qword ifdef klee kleemakesymbolic buf sizeof buf buf else printf flag fgets buf stdin endif unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf sprintf unsigned strcmp exit ifdef klee kleeassert else printf flag n buf endif return added change inside ifdef klee make thing clear see change pretty straight forward note order build example need install libssldev first password klee docker container klee sudo aptget install libssldev installed proceed forget copy defsh file ida pro clang emitllvm g c redvelvetc iusrinclude lssl lcrypto dklee clang warning lssl linker input unused clang warning lcrypto linker input unused problem possible compile emitting llvm ir link mean openssl function work miss checksum validation since code us standard cc function need add libcuclibc switch klee use implementation clang emitllvm g c redvelvetc iusrinclude klee libcuclibc posixruntime redvelvetbc klee note using kleeuclibc homekleekleebuildkleereleasedebugassertslibkleeuclibcbca klee note using model homekleekleebuildkleereleasedebugassertsliblibkleeruntimeposixbca klee output directory klee using stp solver backend klee warning undefined reference function klee warning undefined reference function klee warning undefined reference function klee warning calling external syscall klee warning alignment memory call malloc modelled using alignment happiness klee error divide zero klee note ignoring error location happiness klee error divide zero klee note ignoring error location happiness klee error divide zero klee note ignoring error location happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness klee warning calling external klee error failed external call klee note ignoring error location klee done total instruction klee done completed path klee done generated test l kleelast grep err ktesttool writeints ktest file args redvelvetbc num object object name bmodelversion object size object data object name bbuf object size object data bwhatyouwannabe know solution valid however see warning klee warning undefined reference function klee warning undefined reference function klee warning undefined reference function error klee error failed external call ignored one function get called program terminate happened klee several limitation including floating point number assembly code thread memory object variable size socket external function also compiled linked openssl external function call limitation affect u one option move function openssl redvelvetc actually however look code see inlined assembly mean work either least see klee complaining reward another option build openssl llvm ir launch klee option linkllvmlib library file aware possible option first two use gold linker llvm plugin whole program llvm plus llvmlink try option though well think way symbolic execution engine work constraint solver use accurately generate solve constraint describe complete process checksum algorithm however constraint solver produce input pas difficult check password magic number even checksum example checksum end code time klee already found solution pas checksum right well actually already know challenge one possible solution one input satisfies constraint except checksum input pas program first validation checksum unless really lucky anyway say soon one openssl function called program terminate yes use klee option make call external function despite warning saw option load see clang emitllvm g c redvelvetc dklee klee optimize libcuclibc posixruntime allowexternalsymcalls emitallerrors redvelvetbc klee note using kleeuclibc homekleekleebuildkleereleasedebugassertslibkleeuclibcbca klee note using model homekleekleebuildkleereleasedebugassertsliblibkleeruntimeposixbca klee output directory klee using stp solver backend klee warning undefined reference function klee warning undefined reference function klee warning undefined reference function klee warning calling external syscall klee warning alignment memory call malloc modelled using alignment happiness klee error divide zero happiness klee error divide zero happiness klee error divide zero happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness klee warning calling external klee error memory error bound pointer klee warning calling external klee warning calling external klee done total instruction klee done completed path klee done generated test l kleelast grep err ktesttool writeints ktest file args redvelvetbc num object object name bmodelversion object size object data object name bbuf object size object data bwhatyouwannabe l see external function called still checksum succeed however valid solution found expected one want actually modify code changing function shown force constraint solver find solution want solution valid according checksum int char char char check make accept one solution exit anyway run see despite solution valid klee assert reached well code validating checksum really suck print string compared see actually strcmp happens one string messed fixed see however reason even though klee find desired solution checksum still wrong see clang emitllvm g c redvelvetchecksumfixedc dklee klee optimize libcuclibc posixruntime allowexternalsymcalls emitallerrors redvelvetchecksumfixedbc klee note using kleeuclibc homekleekleebuildkleereleasedebugassertslibkleeuclibcbca klee note using model homekleekleebuildkleereleasedebugassertsliblibkleeruntimeposixbca klee output directory klee using stp solver backend klee warning undefined reference function klee warning undefined reference function klee warning undefined reference function klee warning calling external syscall klee warning alignment memory call malloc modelled using alignment happiness klee error divide zero happiness klee error divide zero happiness klee error divide zero happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness klee warning calling external klee warning calling external klee warning calling external klee warning calling external printf buf klee error assertion fail klee done total instruction klee done completed path klee done generated test l kleelast err ktesttool writeints trimzeros ktest file args redvelvetchecksumfixedbc num object object name bmodelversion object size object data object name bbuf object size object data bwhatyouwannabe wrong know print checksum used kleeassume strcmp hit assert create solution file checksum whatyouwannabe lala correct come klee checked actually checksum whatyouwannabe anyway spent much time checksum already know happens please let know easy delete checksum routine code actually big hack really buggy let remove checksum routine include stdioh include stdlibh include stringh include defsh include asserth include kleesrcincludekleekleeh int char char char exit exit return put happiness int char char exit exit return put happiness int char char char exit return put happiness int char char signed rtt lodword char hidword unsigned char unsigned int exit return put happiness int char char char exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int char char char exit exit exit return put happiness int main int argc const char argv const char envp char buf ifdef klee kleemakesymbolic buf sizeof buf buf else printf flag fgets buf stdin endif unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf unsigned int buf ifdef klee kleeassert else printf flag n buf endif return run klee clang emitllvm g c redvelvetc dklee klee klee optimize libcuclibc posixruntime allowexternalsymcalls emitallerrors redvelvetbc klee note using kleeuclibc homekleekleebuildkleereleasedebugassertslibkleeuclibcbca klee note using model homekleekleebuildkleereleasedebugassertsliblibkleeruntimeposixbca klee output directory klee using stp solver backend klee warning calling external syscall klee warning alignment memory call malloc modelled using alignment happiness klee error divide zero happiness klee error divide zero happiness klee error divide zero happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness klee error assertion fail klee done total instruction klee done completed path klee done generated test l kleelast grep err ktesttool writeints ktest file args redvelvetbc num object object name bmodelversion object size object data object name bbuf object size object data bwhatyouwannabe l klee assert finally reached list file inside kleelast see multiple ktest file basically test case generated klee want go hassle removing checksum code could also simply made modification diff un sprintf unsigned strcmp exit kleeassume strcmp ifdef klee kleeassert else good example face limitation klee find serial number basic serial number example allow u see couple thing using klee first instead using kleemakesymbolic make user input symbolic leave make commandline argument symbolic option symarg case look solution char reference real program number code path extremely big infinite mean klee terminate run press ctrlc sigint use maxtime num second maxforksn stop forking n symbolic branch maxmemoryn limit memory consumption n byte control klee change original source code snc file one diff un snorigc snc snorigc snc usage argv validatesn serial ifdef klee kleeassert else printf thank license activen else printf invalid serial number please try againn endif return ran clang emitllvm g c snc dklee time klee emitallerrors libcuclibc posixruntime snbc symarg klee note using kleeuclibc homekleekleebuildkleereleasedebugassertslibkleeuclibcbca klee note using model homekleekleebuildkleereleasedebugassertsliblibkleeruntimeposixbca klee output directory klee using stp solver backend klee warning calling external syscall klee warning calling usermain extra argument klee warning alignment memory call malloc modelled using alignment klee error assertion fail klee done total instruction klee done completed path klee done generated test real user sys l kleelast err ktesttool writeints trimzeros ktest file args snbc symarg num object object name object size object data object name bmodelversion object size object data execution path also test case replay test case look today refer klee documentation want know know possible solution one klee deterministic mean run get result couple hack try get different result follow path try kleedev mailing list option one easy thing use different solver default one stp example use actually uncommon use multiple solver increase performance time klee emitallerrors libcuclibc posixruntime snbc symarg klee note using kleeuclibc homekleekleebuildkleereleasedebugassertslibkleeuclibcbca klee note using model homekleekleebuildkleereleasedebugassertsliblibkleeruntimeposixbca klee output directory klee using solver backend klee warning calling external syscall klee warning calling usermain extra argument klee warning alignment memory call malloc modelled using alignment klee error assertion fail klee done total instruction klee done completed path klee done generated test real user sys l kleelast err ktesttool writeints ktest file args snbc symarg num object object name object size object data object name bmodelversion object size object data generated different valid sn number case actually bit faster stp find solver solver option play angr angr angr framework analyzing binary capability perform dynamic symbolic execution like klee etc various static analysis binary popular among ctf community since shellphish used angr many ctfs successfully already familiar angr probably want skip part find angr interesting focus static dynamic symbolic concolic analysis making applicable variety task complex though tool area anyway documentation good definitely recommend go want know see look redvelvet binary codegate ctf already reversed used ida pro hexrays decompiler look pseudo code read pseudo code carefully might think first pas validation function get flag first thought could try print happiness use angr docker image familiar docker get angr image start container copy redvelvet binary container connect back container docker pull angrangr docker run angrangr angr angr exit logout docker p container id image command created status port name angrangr binsh c su minute ago exited minute ago ferventnorthcutt docker cp ferventnorthcutt homeangr docker start ai angr angr l redvelvet angrdev looked angr documentation found something might work almost copy paste important control interface angr simulationmanager allows control symbolic execution group state simultaneously applying search strategy explore program state space little page crackme example first load binary proj angrproject next create simulationmanager simgr projfactorysimgr symbolically execute find state match condition ie win condition simgrexplore findlambda congrats sposixdumps simulationmanager active found get flag state simgrfound print sposixdumps enter password congrats flag sposixdumps print flag pretty simple well look like create script basically copy documentation import angr proj angrproject redvelvet simgr projfactorysimgr simgrexplore findlambda happiness n sposixdumps simgrfound print sposixdumps flag sposixdumps print flag let try time python warning angrproceduresdefinitions unsupported syscall ptrace warning angrenginessuccessors exit state possible solution likely unconstrained skipping hmm minute still hit ctrlc see ptrace unsupported likely creating overhead increasing complexity looking code even know used probably annoy u let patch binary remove call open binary ida pro assume keypatch plugin installed follow instruction github locate ptrace call fill nops right click ptrace call nothing special need adjust jnz instruction follow desired path simply change jnz jmp end look like finally save modified binary always good idea check still work redvelvetnoptrace flag hack happiness happiness happiness crash good let try binary instead docker cp ferventnorthcutt homeangr docker start ai angr angr l redvelvet redvelvetnoptrace angrdev changed script load binary run time python flag happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness happiness whatyouwannabe lcla real user sys nice worked term execution slower klee definitely lot faster overall mean writing script trivial took time looking documentation typing script looking angr documentation also found following looking symbolic execution heart angr symbolic execution engine angr expose standard way write perform dynamic symbolic execution surveyor class surveyor engine drive symbolic execution track path active identifies path step forward path prune optimizes resource allocation angrsurveyorsexplorer surveyor subclass implement symbolic exploration told start go avoid path stick also try avoid getting stuck loop explorer section read following creates explorer try find successful auth avoiding failed auth authentication routine essense looking backdoor e projsurveyorsexplorer find avoid look interesting let try play redvelvet binary loaded random location within virtual memory time executed see pie even problem could use offset plus base address angr always us checksec f relro stack canary nx pie rpath runpath fortify fortified fortifiable file partial relro canary found nx enabled pie rpath runpath yes seems give try look binary ida pro according angr documentation need give address trying find looking already patched redvelvet binary avoid ptrace call reach address validation function call fine also need address want avoid address exit call inside validation function enter follow exit call see address want avoid script import angr proj angrproject redvelvetnoptrace e projsurveyorsexplorer erun flag efound stateposixdumps print flag let try time python whatyouwannabe lcla real user sys worked le time know correct solution though sometimes multiple solution dealing constraint solver saw common find solution even aware case modify constraint exclude unwanted solution final note symbolic execution slow costly however undoubtedly powerful symbolic execution us constraint solver create inputstest case exercise given path binary main problem symbolic execution even though observe post approach based symbolic execution succumb path explosion easily guess number path real world big binary exponentially increase branch playing ctfs getting familiar angr definitely help solve type challenge saw faster looking applying symbolic execution step fuzzingsoftware analysis would say look klee advantage disadvantage depending problem facing eventually long learning curve klee pain install old llvm version dependency hold back bit playing ctfs using klee dealing symbol external library call pain saw talking limitation nice gist moyix klee limitation plus workarounds worth reading increase code coverage bug count everyone using combination tool technique area worth knowing basic many big project combining klee angr afl etc impressive result see reference information play ctfs often interest symbolic execution lie apply code coverage fuzzing least understand make better use post document first step want get area code snippet used available github next step looking triton manticore plus impressive set tool trail bit area already couple thing post way long credit thanks luis countuponsec rocha proofreading post reference particular order video
194,Lobsters,formalmethods,CSE-Formal methods,Modeling Missing Requirements,https://www.hillelwayne.com/post/requirements/,modeling missing requirement,requirement error emergent ambiguity gilded rose kata problem existing system decision table base case new rule discussion richard feldman oskar wickström,many bug implementation error mistake code make wanted example may accidentally left list empty case written nonterminating function identify definitely wrong given input testing fact writing software correctness deal primarily implementation error specification error code perfectly match design design satisfy requirement something like specify happens load record twice tougher find implementation error span code design code writing focus specification error requirement error design satisfies requirement wrong requirement entirely maybe alert detects anomaly client really wanted log requirement error difficult debug adding client cause sort logistical problem one requirement ambiguity client might even realize wanted something try product many agile method emphasize short sprint prototyping reduces time getting requirement finding issue wondered tooling also help maybe catch particular type error earlier project even prototype started couple experiment far cautiously promising post focus identifying emergent ambiguity ea rule miss given case happen many rule overlapping domain flag b c potentially apply situation possible combination flag easy miss specifying happen one ea seems like one easier error find finite list rule enumerate every combination ask client fill gap let see action use gilded rose kata example got thinking first place problem show problem hi welcome team gilded rose know small inn prime location prominent city ran friendly innkeeper named allison also buy sell finest good unfortunately good constantly degrading quality approach sell date system place update inventory u developed nononsense type named leeroy moved new adventure task add new feature system begin selling new category item first introduction system item sellin value denotes number day sell item item quality value denotes valuable item end day system lower value every item pretty simple right well get interesting sell date passed quality degrades twice fast quality item never negative aged brie actually increase quality older get quality item never sulfuras legendary item never sold decrease quality backstage pass like aged brie increase quality sellin value approach quality increase day le day le quality drop concert recently signed supplier conjured item requires update system conjured item degrade quality twice fast normal item feel free make change updatequality method add new code long everything still work correctly however alter item class item property belong goblin corner instarage oneshot believe shared code ownership make updatequality method item property static like cover clarification item never quality increase however sulfuras legendary item quality never alters presented existing system satisfies requirement terribly nested statement fun order add new feature refactor existing code push practitioner write test ensure existing behavior unchanged enough write test conform requirement though requirement incomplete particular say lower value much lower quality decrease item type exclusive something backstage pass aged brie decrement quality sellby order simultaneously depending choice affect value item boundary time like sellby provided implementation implicitly answer three item one additional type lower value time weird thing modify quality twice sellby calculation ambiguous particular kind ea care right look instead value calculation logic seven rule determining change quality item requirement complete know possible way interact easiest way construct decision table base case decision table map set finite enumeration output every possible combination input represented exactly one row missed requirement correspond missing row contradictory requirement two row input different output input would item property output change item quality let initial quality q decompose problem two decision table first determines q new value restrict quality range second determines final clamped value q final becomes new quality clamp table pretty easy sulfuras q final f f q f input table two enumerable input type either ulferas b rie p as isc daysleft four range since full range matter pas rest case instead use real problem make showing concept easier type daysleft q q p p p p b b one emergent ambiguity happens brie becomes outdated brie increase quality time outdated item lose quality twice fast supposed interact see different way client might want go brie rule override sellby rule standard implementation sellby rule override brie rule client said lose quality twice fast meant degrades one step faster result misc item q qq client meant change twice fast regardless direction handle brie special way currently covered rule none seem particularly unlikely seem likely others none trigger stupid feeling new rule kata add new rule conjured item degrade quality twice fast normal item conjured type maybe maybe client end saying conjured type added item get new table conjured type daysleft q f see q p p p p b b going list conjure ticket new value still gain value time even value maybe considered counterfeit matter though safely assume go zero due date reasonable reading rule implies otherwise conjured brie gain quality lose quality problem overdue unconjured brie happens conjured brie go overdue instead two intersecting rule three happens miscellaneous conjured item becomes overdue last one interest common case might argue overdue conjured aged brie edge case normal ambiguous edge case overdue conjured item might happen time even happens conjured type answer selfevident least two meaningful interpretation client intended penalty multiply losing quality four time fast client wanted penalty applied aggregated overdue applies conjured applies giving u something else opinion first choice seems reasonable client decides expected implementing requirement error know least one case applythenaggregate client decided discussion get three impression exercise tangible benefit modeling requirement gilded rose small kata something supposed take hour two even emergent ambiguity also likely author intend ambiguity framed kata refactoring problem requirement issue may missed found via formal modeling decision table good way modeling requirement simplicity shine took much time write dts write edit paragraph understood anyone even without prior exposure minute training anybody write one show client know going decision table powerful way modeling requirement fairly lucky problem involve complex state input ordering anything dt scope even stretched lil bit date range dts great incredibly high strengthweight ratio powerful tool harder learn apply dts make optimistic push thanks richard feldman oskar wickström feedback
195,Lobsters,formalmethods,CSE-Formal methods,How Do You Explain the Unreasonable Effectiveness of Cloud Security?,http://highscalability.com/blog/2018/9/19/how-do-you-explain-the-unreasonable-effectiveness-of-cloud-s.html,explain unreasonable effectiveness cloud security,data breach cyber attack daily ebook web page proving system correct byron cook formal reasoning security amazon web service floc long introduction bio shared responsibiltity model security cloud vcc soundness security cloud iam firstorder logic zelkova smt macie vpc pci need workout related article,video enormous attack surface cloud provider like aws azure gcp nt security problem data breach cyber attack occur daily explain unreasonable effectiveness cloud security google ebook security approach microsoft web page equivalent person disgustingly healthy ask say nt know eat right exercise get plenty sleep useful u want hack trick good health want eat right sure amazon also eats right exercise get plenty sleep probably people work aws also secret disgustingly healthy person start talking party ca nt help leaning listening trick security proving system correct datacenter nt think aws dr byron cook gave enthusiastic talk formal reasoning security amazon web service clearly excited finally applying research realworld setting trojan horse floc federated logic conference community waiting almost floc guy working aws rather aws guy giving floc talk main takeaway aws made big bet automated reasoning increase cloud security provable cloud security accelerator aws adoption customer want like testing key soundness mean understand semantics policy language use constraint solving sound prove future security u idea live good work still bandaid century software production process u achieve reliable security human driven programming long brave new world gloss main point enlightening talk introduction bio dr byron cook director automated reasoning amazon web service professor computer science university college london prior joining amazon byron known contribution termination prover biomodelanalyzer slam microsoft static driver verifier dr cook left academia took job aws idea creating formal method revolution cloud security wanted create major step change really change game four year spoiler succeeded formal method arrived longer irrelevant aws yoy revenue growth planned availability zone growth yoy planned growth geographic region yoy service feature developer customer growing exponentially cloud security interesting important area research key aws success story agility security based rapid feature development customer feedback data increase cloud security aws made big bet automated reasoning difference security cloud cloud cloud customer need securely setup identity configuration access policy virtual network code etc cloud mean making virtualization encryption protocol hardware compliance etc secure called shared responsibiltity model security cloud aws using formal method started quietly pilot project game plan find security problem help apply new existing tool collaborate share idea code data community deliver value aws customer thing go well add problem research question bucket fail repeat aws perfect place merge theory practice overly theoretical people nt know work overly practical people nt know prelaunch protocol proof engagement growing exponentially initial developer skepticism gaining acceptance internally quote influential aws employee world thought formal verification stuff snake oil would never practical proved wrong aws security team performs formal security review featuresservices eg servicesfeatures yearoveryear increase mitigation security risk developed security review documented part security review process another important activity within aws ensuring cloud infrastructure stay secure launch especially system modified incrementally developer alone security team used deductive theorem provers model checking tool reason cryptographic protocolssystems hypervisors bootloadersbiosfirmware garbage collec tor network design overall formal verification engagement within aws security team increased yearoveryear found prelaunch security finding yearoveryear formal reasoning security cloud two activity secure design secure operation secure design appsec application security review compliance certification planautomation appsec review build threat model decide mitigation strategy threat worry compliance itar pci fips fedramp etc secure operation need maintain security field running thing happen example researcher find problem open source code using decide problem ask built enough mitigation every aspect formal reasoning formal constraint solving component security protocol aws large fleet machine share secret try keep state date using security protocol hard get right aws try prove protocol correct via reduction protocol proof vcc customer love formal verification customer actually say moved aws proof accelerator aws adoption soundness key logical system soundness property every formula proved system logically valid respect semantics system nt want tell customer use proof logic say oh yah forgot case nt matter customer nt want hear testing testing almost meaningless testing nt good enough always case missed testing proof meaningful soundness mean understand semantics policy language use constraint solving sound prove thing trying prove correct correct virtualization memory safety protocol conformance compliance code property appseccompliance review using tool like boogie coq cbmc dafny hollight infer openjml saw smack tl code used proved hmac random bit generator hand shake protocol correct one issue proof code change continuously proof keep tl code rerun proof checkin future goal able everything security cloud customer want design system secure threat model mitigation typically regulated gdpr credit card data etc establish compliance security building top aws system deployed operate securely maintain security compliance thing go wrong blast radius aws build service top aws use proof stuff customer get benefit want know iam identity access management complicated hard understand iam like fol firstorder logic iam stand data hacker one little formula logic saying access data access condition access get wrong disaster important get iam right give example iam policy wrong reason hard understand well iam hard understand even hard time explaining iam imagine whole set iam policy want prevent bad policy installed enterprisewide guardrail allow customer define space policy comfortable whenever change policy checked see allowed using internal cloud service call zelkova reducing semantics policy language smt calling smt solver macie tool look way data might leaving organization warns us zelkova search exfiltration route us machine learning categorize data risk alerting customer constraint solving used identify route approach used many service smt solver called many million time day forecast exponential growth use service vpc virtual private cloud important security control customer build huge network vpcs question network network meet customer enterprisewide security compliance requirement enforce rule like certain service communicate via certain machine enforce data going certain country lot rule pci encoded logic constraint solver used prove network correctly implement specification tool checking must understand abstract concept interaction abstract concept like az directconnect instance internal gateway load balancer nat tag etc argument might complex simpler way thing problem every time try simplify something going billion dollar business saying ca nt use service customer need complex kind capability customer like stuff datalog solver souffle smt solver monostat called may thousand time day last year provable cloud security new buzzword soundness key customer want prove packet ca nt arrive supposed need kind system future work build proof tool model checker really use elasticity cloud glory make threat modeling formal repair proof continuous integration proof make lot assumption precondition need checked security risk management found bug nt mean anything risk associated bug count need workout related article
196,Lobsters,formalmethods,CSE-Formal methods,Executable formal semantics for the POSIX shell,https://arxiv.org/abs/1907.05308,executable formal semantics posix shell,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
197,Lobsters,formalmethods,CSE-Formal methods,TLA+ 1.6.0,https://github.com/tlaplus/tlaplus/releases/tag/v1.6.0,tla,changelog http researchmicrosoftcomenusumpeoplelamporttlatoolboxhtml release milestone additional noteworthy change tlc profiler tlc multithreaded simulation mode accept absolute spec path suffer performance penalty azure service principal toolbox better visualize coverage coloring editor usability improvement model editor split two page saved model accompanying screencast multiline expression selfreferential error trace expression supporting naming screencast screenshot syntax highlighting redoundo customizable font screencast covered issue issue note macos user github issue checksum reload reload,changelog high level changelog available http researchmicrosoftcomenusumpeoplelamporttlatoolboxhtml release milestone list completed issue additional noteworthy change tlc profiler tlc performance scalability multithreaded simulation mode contributor efficiently generate set subset tla expression subset reduce worker contention separating trace file n partial trace file n number worker speedup tlc shutdown calculating actual fingerprint collision probability calculated probability exceeds increase tlc throughput refactoring hot codepaths show active fingerprint set state queue implementation startup banner bytearrayqueue prototype increase throughput reducing critical section queue unseen state activate java system property commandline accept absolute spec path commandline make mainclass attribute set executable bit simplify commandline linux pathtospec commandline tlc user please always pas xx useparallelgc java flag suffer performance penalty retire tlazip favor exit status nonzero case error property violation cloudtlc switch azure service principal authentication automatically handle azure resource deletion part instance termination gracefully terminate cloud resource cloudtlc run terminated prematurely poweroff instead terminate cloudtlc instance tagged poweroff speedup subsequent restart add support packetnet budget baremetal instance toolbox model editor better visualize coverage coloring editor usability improvement model editor including previously advanced option page split two page advanced tlc option occupying page neither page visible default accessed hyperlink main model page openorclosed state saved model subsequent model opening restore view configuration last seen user selection behavior spec performed via pulldown seen accompanying screencast run section main page simplified seen screencast checkpoint related tlc option moved advanced tlc option page given worker memory disk storage file count configuration saved default configuration used new model init next field behavior spec accept multiline expression run check section main page given full width page similarly state constraint section advance option page given full width table statistic section model checking result page expand fill width page resize column consume available width table resize general section model checking result page condensed two line top line always visible show awaiting text unexecuted model running ran start time end time status potentially last checkpoint time mode denotation depthfirst simulation run second line visible error execution information fingerprint collision andor zero count coverage evaluate constant expression section result page moved tab model editor via preference checkbox tla preference tlc model checker evaluate constant expression feature toggle button easily jump evaluate constant model check mode behavior spec selected tla editor spec explorer trace explorer tetrace operator support selfreferential error trace expression supporting naming compose trace expression screencast map sany error back toolbox expression location screenshot add syntax highlighting redoundo input box allow customizable font toolbox error trace viewer add header button error trace toggle tree expansion collapse expand shiftclick return default twolevel expansion screencast edit button enabled table contains one formula regardless whether formula selected formula able drag reordered change addition editing removal reordering saved automatically covered issue button errortrace section header allows linking trace viewer spec editor way one could previously doubleclick trace location reveal section specification spec editor editor linked action done single click well navigating keyboard arrow key issue misc note macos user startup macos version mojave fail tla toolbox ca nt opened apple check malicious software please make sure follow instruction outlined github issue address problem checksum file repositoryzip nt want perform action time signed another tab window reload refresh session signed another tab window reload refresh session
198,Lobsters,formalmethods,CSE-Formal methods,Model Checking a C++ Software Framework: A Case Study,https://arxiv.org/pdf/1907.00172,model checking c software framework case study,,obj stream 礵 g e ok r
199,Lobsters,formalmethods,CSE-Formal methods,Pruning the Search Space in Path-based Test Generation (2009),http://sebastien.bardin.free.fr/icst-09.pdf,pruning search space pathbased test generation,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream f e pla ü zr endstream endobj obj endobj obj endobj obj endobj obj procset pdftext extgstate endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream vu xe ύ ķ evi շ endstream endobj obj stream endstream endobj obj stream g l ɽ ɠ endstream endobj obj stream
200,Lobsters,formalmethods,CSE-Formal methods,Using Abstract Interpretation to Correct Synchronization Faults (2017),http://www.cs.yale.edu/homes/ejk/papers/corrective.pdf,using abstract interpretation correct synchronization fault,,obj length filter flatedecode stream gdwi jv k hi h z ӱ ܭbq z r v zp endstream endobj obj length filter flatedecode stream f r z c sô ɀ b endstream endobj obj length filter flatedecode stream f v j kvkiƴ rè x vߤq endstream endobj obj length filter flatedecode stream e tmwu n p x w fѓ dt x iu k e
201,Lobsters,formalmethods,CSE-Formal methods,It Ain't Necessarily So: Exploring Type Systems for Verifying Musical Correctness,https://www.infoq.com/articles/type-systems-verifying-musical-correctness/,ai nt necessarily exploring type system verifying musical correctness,key takeaway introduction tidalcycles sonic pi leipzig composition library related sponsored content c major prescriptivism music deviate rule incorrect paid relatively little attention music deriving african diaspora facial recognition algorithm working better white face black one jimmy page used distortion artistic effect clipping signal amplification make invalid state unrepresentable descriptivism music deviate model unusual sweet anticipation markov model typed note doremi typed transition mezzo typed entropy idris important hard check using computer program decide long hold person prison author chris ford thoughtworks spain,key takeaway increasing proportion culture becomes codified need consider authentically express theory insight diverse field software music excellent domain explore using programming long history notation governed patternbased rule music theorist fascinated make music correct century write music using programming language opportunity crosspollinate lesson correctness music programming article chris explores music type checked using mezzo haskell library idris dependent type example introduction given lot talk representing music using programming language popular subject tickle engineer mechanical curiosity well pluggingin music universal relatability look like musical coding environment many different programming language two popular one tidalcycles haskell sonic pi ruby raspberry pi example using leipzig composition library written clojure type checking def rowrowrowyourboat phrase rowrowrowyourboat canon simple pitch comp c major time bpm play duration pitch represented integer ratio literal little cumbersome programming really shine come musical transformation example original melody fragment given accompaniment put key c major given tempo beat per minute related sponsored content programmer see musical code one common reaction ask whether possible use type system prevent bad music natural thought music seen code might musical mistake somehow like programming error case maybe apply technique use writing program improve write music particular obvious analogy kind mistake type system prevent common example musical incorrectness programming language check pas string function expects integer able check play f piece written c major key includes sharp flat article grapple make music correct might encode type system prescriptivism music theorist fascinated make music correct century time operated frame musical prescriptivism word evaluating music conformance set rule historically dominant methodology arriving rule summarised follows examine canon extract regularity formulate set rule make following claim music deviate rule incorrect example compositional rule melody jumping major seventh c way b permitted approach produced lot valuable insight genuinely interesting regularity classical music generalising observation rulesets help u discus musical phenomenon adherence rule bad idea student learning craft quite glad child learning violin practice c major scale whenever play f teacher tell made mistake certainly context prescriptive notion correct incorrect music useful however two major shortcoming way defining musical correctness first rule yielded process heavily dependent music theorist regard canon biased dataset lead biased inference western classical music representative humanity musical experience inferring rule based bach mozart music might fascinating tell much music large get especially tricky realise musical genre often heavily associated particular culture ethnicity prioritising certain kind music also inadvertently prioritising certain kind person particular academic music theory owes lot study euroclassical tradition paid relatively little attention music deriving african diaspora like blue jazz rock n roll hip hop relying traditional music theory source correctness lead cultural version problem led facial recognition algorithm working better white face black one second major shortcoming building rule extracting generalising existing regularity backwardslooking music thrilling breaking rule jimmy page used distortion artistic effect engineer considered clipping signal amplification defect even observed regularity useful way understand music today terrible way judging music tomorrow good type system music avoid two trap prescriptivism built inappropriate biased notion music correct subtly attempt make invalid state unrepresentable must make innovative state impossible descriptivism alternative prescriptivism descriptivism prescriptivism see musical regularity law followed descriptivism see emergent pattern actual practice descriptivist way discover musical rule might look something like examine body music extract tendency formulate model make following claim music deviate model unusual need good model musical structure represent commonunusual rightwrong one useful approach taken david huron book sweet anticipation huron lay descriptivist theory purpose article summarised three primary claim music appreciated statistical learning correct prediction delight novelty keep getting bored earlier prescriptivist example jumping c b considered illegal huron theory would instead considered highly unusual people listened lot western music would learn hear c next note likely another c one note lower one note higher effect jumping higher b would surprise listener might interpret negatively one fascinating consequence huron theory composing music exercise maximising minimising invention rather music dance border order chaos audience appreciation depends musician ability balance shock new satisfaction expected truly want check composition correctness make sure stray far convention also stick close following table statistical analysis melodic tendency darker square represent outcome likely way read choose note vertical axis read across find likelihood chosen note followed note horizontal axis example time dataset followed click image enlarge data adapted figure huron book based analysis tone pair german folk song major key different corpus example hip hop rock n roll would yield different probability probability equivalently represented bit entropy chance corresponds one bit entropy chance corresponds two bit etc order avoid division zero modelled transition never occur dataset chance time darker square represent transition expensive term entropy word expected occur le commonly example followed la corresponds approximately six bit entropy chance click image enlarge entropy representation make natural add together surprise series note transition one pitch next given entropy count surprise melody whole sum transition together mi fa bit ti mi fa bit similar approach hidden markov model rather generating string note use weighted probability measure likely given melody occur might notice transition ti bit seems contradict earlier claim jump c b highly unusual unusual transition would normally bit entropy reason inconsistency huron data distinguish jumping six note ti unusual stepping one note lower ti quite common data allowed u separate two case model would show ti mi fa even unconventional compared rather pedestrian mi fa typed note best type system support programmer guiding towards valid coding decision eliminating possibility mistake good example musical analogue solfège even never formal musical education probably familiar song doremi musical sound music note octave given name note outside key name lowest note set mi fa la ti time one octave higher system guide musician towards correct note defining minilanguage make impossible express note outside chosen key infinitelymany frequency solfège inexpressible easily expressed code algebraic data type data solfege mi fa la ti allows u define musical function permit possibility offkey note example one repeat note n time repeat nat solfege list solfege repeat repeat n repeat n definition repeat expression easily understood within musical domain repeat f type checking error f value type solfege get u certain degree type safety type system help u avoid invalid note still protect u invalid combination note playing c major scale never play f might still play c jump major seventh b forbidden conventional composition rule kind contextual type checking possible requires sophisticated approach typed transition mezzo haskell library dima samoz us dependent type check music correctness mezzo readme describes strict spellchecker music able check variety compositional rule beyond simple keysafety mezzo compiles melody c e f composed legal interval comp defscore start melody c e f g however violate rule jumping c b mezzo step following code compile comp defscore start melody c b e f g remarkable achievement mezzo even able pinpoint problem major seventh permitted melody c b first argument namely melody c b first argument namely melody c b e first argument namely melody c b e f may appear fulfillment dream making incorrect music type error still occasionally problem samoz encodes chopin prelude mezzo discovered occasion composer followed conventional rule piece could transcribed almost occasionally leave note would create forbidden interval mezzo pointed one might ask forbidding chopin allowed say allowed western classical music problem even though mezzo able take account context type judgement still binary choice note either correct piece compiles one note place piece compile mezzo give control compositional rule active decision whether use rule global switch rule particular artistic effect break ordinary convention abandon check part composition typed entropy one way model breaking bending musical rule type follow huron model change note term likelihood rather certain transition either permitted combination given entropy score represents surprising pair note would listener following code written dependentlytyped functional programming language idris check conventional melody start concludes path take note generates bit entropy first need define melody type capture notion melody certain likelihood entropy cost type three constructor pure represents creating melody single note upper lower entropy bound zero represents composing two melody adding entropy bound along cost transition note end first melody note start second relax represents taking melody relaxing entropy bound data melody solfege solfege nat nat type pure x melody x x melody w x low high melody z melody w z cost x low cost x high relax melody x low dl high melody x low high dh type definition little complicated use idris notation sequence melody idris compiler track entropy bound u conventional melody transition low cost conventional melody conventional relax pure pure pure mi pure fa pure next melody unconventional jump major seventh mezzo would either forbidden rule turned entirely expand complexity bound melody bit entropy unconventional melody unconventional relax pure pure ti pure mi pure fa pure instead melody assigned unconventional melody type melody would compiled novelty approach also catch music boring entropy melody insufficient meet lower bound type error generated conventional melody given type melody would compiled entropy melody fall lower bound allows u faithful huron insight listener hard time listening music surprising predictable degenerate case using approach transition note scale given entropy value zero transition note outside scale given arbitrarily large entropy value case effectively recover binary type judgement approach note either legal illegal grey area important hard check type checking music difficult defining correctness music difficult model notion musical correctness precisely mathematically encode type system even able formalise understanding authentic way take effort combined powerful type system get point compiler adequate judge composition nonetheless determination simplifying assumption possible curiosity perhaps unlikely music industry employ type system time soon mean prevent compositional error exploring computational aspect music give u new way appreciate something much significance almost everyone life justifies enterprise perhaps importantly music one domain correctness important hard check programming used automate social cultural domain frequently situation occur answer difficult evaluate yet crucial importance human consider using computer program decide long hold person prison correctness sentencing decision involves complex tradeoff cost probability follow system reasoning know outcome time automate opaque reasoning need ask know system correct author chris ford began make music code compensate poor piano technique later realise programming offer deep insight musical structure past year chris given many talk presenting music theory programming audience covering topic including european classical music complexity theory jazz central african polyrhythms tuning system head technology thoughtworks spain life work barcelona
202,Lobsters,formalmethods,CSE-Formal methods,The Next 700 Compiler Correctness Theorems (Functional Pearl),https://dbp.io/pubs/2019/ccc/,next compiler correctness theorem functional pearl,next compiler correctness theorem functional pearl daniel patterson amal ahmed,next compiler correctness theorem functional pearl daniel patterson amal ahmed compiler correctness old problem result stretching back beyond last halfcentury founding field john mccarthy james painter set build completely trustworthy compiler yet quite recently even despite truly impressive verification effort theorem proved compilation whole program theoretically quite appealing practically unrealistic simplification compiler correctness theorem assure complete trust theorem must reflect reality compiler used much recent work realistic compositional compiler correctness aimed proving correct compilation component supporting linking component compiled different language using different compiler however variety theorem stated remarkably different way raise question researcher even mean compiler correct pearl develop new framework understand compiler correctness theorem presence linking apply understanding comparing diversity result better able ass relative strength weakness gain insight community expect compiler correctness theorem future
203,Lobsters,formalmethods,CSE-Formal methods,A Modular Way to Reason About Iteration (2016),https://hal.inria.fr/hal-01281759v2/document,modular way reason iteration,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer creationdate keywords moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream k h
205,Lobsters,formalmethods,CSE-Formal methods,Runtime Verification for Stochastic Systems (2010),https://dspace.mit.edu/bitstream/handle/1721.1/59701/668414476-MIT.pdf;sequence=2,runtime verification stochastic system,,âãïó obj endobj xref n n n n n n n n n n trailer startxref eof obj stream xúätlsuÿýv øès ø ðå ø áuv wð ðs endstream endobj obj endobj obj font procset pdftextimageb typepage endobj obj endobj obj endobj obj endobj obj stream ôèï èc òr ïãðhnqúabé åpè nuâ eìx ä íð ñ ú ªj óð ë lyfföýë í inânf h endstream endobj obj endobj obj height stream j jd âú ç óü æ ßô ñ ûê hè yâ ç þc ôäâ â ø tl ð îè db z ùõÿÿýé yá v yá û ðd ÿý º ýí â ò á ö c ê ºªúé ôqÿÿÿÿÿÿäö çgª j â yð gq õpúõ ûüî ã ÿö z µßûôc b xa é íp aÿj ºÿönêà c õõºi dqîóévd ì ba x xñ ðaä úíøkßëééóµo tbgé kµ æ º üt xð ò óýÿuò øa â ð nl ú ÿxþ ÿ ùm ôt ökr øïðr cô iâ úk ý ûi ýý f àé ñ n ã ðx b ñ kï ß n â èa ýrmkûh ÿ ýí ÿãò ð â ö f fä ù r g dyö h bôó wi k ã ßh x á bg è äó âl ü áì sì áá ò ò ý éiwnå òz ÿøþûâ ø ózl cîö í cä ä ä ðâ â â â â lpâ à p é µ ë ÿ ý ä n º å úâîößçwú öµéÿr ø ãò rô hàö þ òÿ b ò âc é ã v ç b l x xe ú á èc åi aâ ðlòm òm èc ý òa ø ý ë xb îd ihgm c ðã ýl á ã eä âá qäddddddddddddddddg q â l äøàl åáîæèèhï ú â n n ápà ä bã oÿ ò ºdir õo êø ë ã ä ä á â b iär ý ôé ã saÿÿÿÿÿÿÿÿÿþsxrá õymkÿ ªá ø çÿ ÿÿ à â â â ìãxã dpd b ad è jja éù ñ paâ úh õm ÿ ÿïÿï õëû ßýtÿõÿÿÿ l ëþ º ë ÿþ ßßoý ä ê þú iz þ h ap à ðlð øa ãx ì apäaêb ä ì bêgq óaàâ ãt ê ÿÿÿÿÿÿÿÿÿÿÿå ánvªâ b â ú µ líf xó p f ÿÿ ý õp á x á è éò h mªzý þ g oÿ ÿÿÿ þ vöõêýû ktú w æá îã dqh aj ivµvl á z tcaâ úé èúªë ü å b aô òè ÿ ªmÿé k ßÿùiï ä á ÿó ïì ùd f qdj ó e b u ãì x ñ pdp á nø h ý ù òm òm zâ ãÿï âúz ø ú ïáÿü ü úû â â zlp û ò xl â âhª ðbf gfò ä pb giâ evé øtl è òé í ô é ªñzõ zj à ý b ºò ivg â fz ãui êæ b sä ý º æt ÿúë øj á ÿÿÿþ x r v ü aô dy ò ïölßde øm ý ºÿøakívþwãþ r aur ùíjë g ð íb á á tãh çwnh è ø vû oý å å ÿ ë w c aø hï å êpñ jha b döälé ä fdå ò v píbóâ è ã oÿ ÿÿ arÿû ð æp â ÿkúúý ø ø õm z ï ûõé è ºaða ã iâ ö tdq â á ã æl lô ßá òwvý ÿëö õþérâõ û â è ë â óóæen ì å fçñt æb ìí ò eb î oè b àõl â è ðaò út toe aiñ v èà b ä õódæpeøj u é êòö ïþ épàûç ÿ ø ÿõ û ý ÿûkÿ uýö ã ã g p âi ùò â ôì uÿê r vð í u ípa é û wk ûé b û ò ã ã dâ ä äddd endstream endobj obj font procset pdftextimageb typepage endobj obj stream fqåóã íòfyf gäòøiå endstream endobj obj height stream èo gb gb hº qi â â j ya ócb ñÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿó ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ äýgÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ endstream endobj obj font procset pdftextimageb typepage endobj obj stream osdõ ou ýéýþñº û èv é þëlý ú zo âé ðçïvì r ÿý g â ýe r ÿxpæj fe øyârå ù äø ü ãm r éf h såb bu ô yüa ë ãºë q ê l û e ê élª ï öóðøè fjrc ta íã òø p xjéû çç å endstream endobj obj height stream b b b daddddddgÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿòáb ì âþ rò tõ õáð ã lh h uô át zâ r í tmð âa xa â ò º é îðºv è ÿòëüì ÿúõ âè âfc l á â b ãm b ã î é kòð rõizw x xpâl þla è ê õr gc b ä ø át úÿé ã á ä k ùó ø l ñçr u í ã âdé lk ûçúõô é q ádâáä vcü sd éxra õ w b ga ø aöðaéì á l ª ú ÿý ik ótgiz özêóûíûknûkl ò æáøa âaeâa ádb âit ajø úv de baû ù b c áiå ä h l á c h ay éºm å xa ú øa r vx içì ïfbh é b ø vôé é ù k öëí ñ â âhdf rú fâ é á aîaba úm ûð á ä ã ßa ø òm öca ï ÿÿÿ ò àß ü ÿ â ðá às b á ªb z dk ûßµu jia úí ókè júº ñ õnè êë ýé ÿ l ñ ð èð ðfâ f l èrø g b àz øxaâ àè ò tè p ý ý úº ù èq õ úîý ÿým mm òa âaó ða db f ý jg fáøa ðãl diñó é áýo â j ùáàâl â sñ j â dx eô é ààéy é j mìvîå îï å ã úwëêé ÿ ªûý ýÿý kÿé ºû å ý þ ä aÿçás ã ß üÿôj ã ÿuûïÿ b ã g ka â â ël í f b ák fv á â eò â äh äàrð à l dn âa è âa aðm ûnòmí áu è æt è è z ÿz ûé íei zÿÿ ÿ ÿ áÿü ÿ ÿúÿôúÿõû æáþáÿì ø ï ÿÿÿý ïïÿèÿÿía ÿíö ã ä lpktö tóiµmh áã e õ b fq â û sµblvwâì ªèôòõ éx j gqb õýutì vå å dx n äba é âð b xñsôtl èð óxr ó àè éí ãøiéè ø âa ýÿé ºä zðÿÿïçwÿù à ÿk q ÿý ßÿ ëî í khîò mm ì å x âã áç â â øh b é cÿùöåê lªn l ïirìp lì xdú ð ù és é q è ú üpo mó túºé è è ê ù ã l ðmó é w mi ïÿú ý ÿÿúÿûkÿö í h ô ø â ïl ól å bl xc püì w ôc q ãâ í àó h ßkõ aú ø h izkð ú çÿ º ï l ûvô òðdÿÿ ký ºµ oý ãa ã õâvúm âi â dqô â mmú øa mä ô è ð ôsy í jê b ñ áòmñ þóné võ u ïÿûòýý ßÿ ûhãò ÿ ÿ fv åøaä b c ì ûawu þ iúçôd ìïc v ê âa ã z x añoéh hó ño ã mh ø ö õûÿý wò þ ÿ ÿþÿè ÿßÿä mºÿÿÿÿÿÿëý ãa ßö ab v ä ä ý â fd rð pâ iui ä ÿòæçràó õ ué áókóí ì á üð éápbâ dâ qö ð ð íâa â úmóîý ñ í ú þ mì oöíÿ ýÿßý û è ÿõ dà ø æµûè iò mÿáún øa ã n õ waúm ä â aá ìdfñdî µ g e ki b âa ó èº áhb ì ã n aê kzdgcýt ÿt â ÿúõðcøýßïþ z ÿÿúë að å î lø æ âbð áfde k ÿþ zr úõúúß õ ó õb c â â àâ ð b å þ µ øh ü wvé ézmþõý öªéõ ha áçÿÿë ÿ w l â h ie al r â ddpât azø â â ôëädde á íüdde ë l f â â â ª ï ä ä x è úa ò þ ë ÿÿ cì öòf ÿÿí ÿýt ÿýúßÿë iov óm â øjã ð â pâ ba â l ãæqð b x â ø û øi ék â e x dl e ú äân ìââ ól iøeø om ïå fö l ó ááòm óÿâÿÿÿÿæè oí ÿýûãÿÿøûj ÿÿÿø úÿ l ã aì ºöòn ûj j å mwm ìw â þá à è oõßûwõº ïÿë jè c p veû jdéb ì àè øtt ðaø âá âtû áâ b þjý e výso në öôµ oë kÿë ý ÿëû öòm l ã âe â w xa â ebçÿÿ ûdufk þjþjù f áa â eò l â ò è áª ùô ø òn àám â ôìsé ÿn ÿ u þè aÿ ÿxd ÿbøÿ gâ ù ÿâÿÿÿ kõ í ÿÿý ÿÿý ÿzýz ÿÿm zûom µl ü bòc øa ö â ãïl ç ïbústõ â b át ä ál nyde ëu w dug åñdvd ahñá ò èú ã lá á á f éä q ø á b âx x á á ôºûÿë bß ë óïï ý l ï ßÿþ è õÿÿ ixmjöòûkÿ ðdtãa xi û ã â â ä ð òüð àx áºy eb g lbä úm è è ø êûå ûþk þaà õ ìí å mhfuv aaâ bððaddhldh û äzò ävlr é k ñd bd ö ô dp á j é ûæé ý ý n ÿü ø þ öøiwmm è ø ä â â c dccd xqÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿü endstream endobj obj font procset pdftextimageb typepage endobj obj stream þ ôþ endstream endobj obj height stream n dèú èú è b ï îçr bg dde r hú di b ññ êô ñä ó éhr âwª ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿù j þ ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿëlñÿÿÿÿ endstream endobj obj font procset pdftextimageb typepage endobj obj stream
206,Lobsters,formalmethods,CSE-Formal methods,RISC-V Formal Spec Public Review,https://github.com/riscv/ISA_Formal_Spec_Public_Review/blob/master/README.md,riscv formal spec public review,isa formal spec public review grift forvis sail riscvplv kami comparison table provide feedback happens next questionnaire scope background formal spec one choice language formal spec written,public review period open march may standard day recommended riscv foundation following riscv foundation selected sail model official formal specification following detail kept reference work done model since review description may date isa formal spec public review interested isa formal specification riscv isa formal spec technical group riscv foundation invite feedback several draft formal specification riscv isa interested opinion useful would find approach represented date developed various subgroup purpose priority site contains addition readme summary approach summary written common template easier sidebyside comparison grift galois inc forvis bluespec inc sail university cambridge uk sri international riscvplv mit kami sifive comparison table showing feature tabular form survey response individual response riscvformalisaresponsesallpdf summary riscvformalisaresponsessummarypdf specification summary link project home web site github explore project spec full detail project site addition containing spec also documentation read spec even unfamiliar host language spec written execute spec ie run riscv binary using spec simulatoremulator extend spec future isa extension status plan provide feedback happens next public review period march may standard day recommended riscv foundation two way provide feedback please least fill questionnaire short structured questionnaire take minute wish provide expansive freeform comment using issue tab github repo particularly interested end feedback period isa formal spec technical group respond issue raised make recommendation riscv foundation five spec adopted official spec immediate use formal spec golden reference model compliance measured riscv foundation time spec expected maintained grow include future official featuresextensions riscv isa scope initial target group following set feature base instruction set integer multiply divide atomics single doubleprecision floating point f compressed instruction c privilege mode machine supervisor u user including virtual memory scheme trap interrupt zicsr csrs zifencei interaction riscv memory model spec expected extensible future cover standard isa feature still development within riscv foundation eg vector bit manipulation crypto j simd spec opensource may also extended others custom isa extension activity like already progress five model work progress may ready feature project summary page home site describes status plan future background formal spec one riscv isa formal spec purely functional precise formal simple specification isa purely functional mean describes functional semantics instruction try capture implementation property performance area power etc play similar role text specification isa well purely functional simulator riscv binary precise formal mean written formal language clear semantics executable machine readable manipulation formal tool course precise complete unambiguous differs text spec production simulator simple mean understandable usable wide audience expert formal method also assembly language programmer compiler writer hardware designer many may background formal method may interest time acquire one finalized riscv isa formal spec expected become definitive authority semantics riscv instruction also used official compliance testing certify compliance choice language formal spec written raw execution speed formal spec used simulatoremulator desirable secondary requirement listed nevertheless use case tandem verification execution speed need good enough execute nontrivial program booting o running apps o five approach chose host language reason rare choose formal spec large complex language difficult formal reasoning c write style favor speed simplicity clarity note five formal spec use c berkeley softfloat library implement ieee floating point seen part formal spec temporary placeholder enable fullsystem simulationemulation project documentation may describe future plan
207,Lobsters,formalmethods,CSE-Formal methods,From C to Interaction Trees: Specifying Verifying and Testing of a Networked Server (2018),https://arxiv.org/pdf/1811.11911.pdf,c interaction tree specifying verifying testing networked server,,obj filter flatedecode length stream w endobj obj filter flatedecode length stream endobj obj filter flatedecode length stream f rjlis ön ywň u h b sdo l oq mc x x endobj obj filter flatedecode length stream xڭ z z rh k q n g zkzh ˁ q e
208,Lobsters,formalmethods,CSE-Formal methods,Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation,http://theory.stanford.edu/~mp/mp/Publications_files/a125-patrignani.pdf,formal approach secure compilation survey fully abstract compilation,,obj l n linearized e h endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r id prev size root r startxref eof obj l filter flatedecode length e stream b c ā ng z z q wqlvku endstream endobj obj metadata r jt r pagelabels r pagemode usethumbs page r openaction r fith type catalog name r endobj obj cropbox mediabox annots r r r rotate resource font r r r r r procset pdf text imageb imagec imagei extgstate r r r colorspace r thumb r parent r content r type page endobj obj filter flatedecode length stream z z n jrq w g w c ďȥ z c
209,Lobsters,formalmethods,CSE-Formal methods,Solving Knights and Knaves with Z3,https://jamiecollinson.com/blog/solving-knights-and-knaves-with-z3/,solving knight knave,knight knave hillel wayne post solving problem alloy example,type logic puzzle called knight knave set people either always tell truth knight always lie knavesuppose two people b claiming knave deduce must knave since knight could claim knave since knave always lie b knave b must knightcan type problem solved computer clearly imagine brute force solution express certain form use well established computational tool recently read hillel wayne post solving problem alloy sat based modeller solver thought would fun show open source smt solver microsoft researchinstalling python interface also set system separate installation needed installed try express example could get fancier express thing let start variable person true mark knight false knavefrom import true knight false knave b bools b solver u knave sadd true false b false scheck sat print solution else print smodel perhaps key condition need little explanation remember saying b knave say b knave express saying b false truethe rest mostly straightforward detail ask solution must ask check constraint scheck partour program confirms knave b knight expectedlet try slightly complex example claim u knight u knave u knight u knave sadd true false b false true b true find complex condition might make u wonder solution design concerned finding solution rather solution found solution look another rerunning checker additional condition solution must different one found wrapping quick function relatively straightforwardfrom import def printsolutions scheck sat print solution else scheck sat model smodel print model exclude current solution sadd model model true knight false knave b bools b solver u knight u knave sadd true false b false true b true printsolutions find two solution make sense either lying case knave b must knight telling truth case must knight false b true true b true let try another claim knave claim b knave knave b knave sadd true false sadd true b false solution first case contradicts neither knight knave claim knave verify trying claim alone knave sadd true false let try something different say asked would say knave subtle last example trust would say claim knight asked would say knave sadd true true false make sense already established latter part solution former must falsesome examplesproblem two native islander named alice bob standing next know type either alice say least one u knave sadd true false b false problem two native islander standing next know type either claire say knight desmond say either claire knight knight knight c bools c sadd c true c true true sadd true c true true c true true c false true false c false problem three native islander named elena fernando gary standing together ask elena many knight among elena answered quite hear said ask fernando elena say fernando reply elena said one knight among u point gary say believe fernando lying e f g bools e f g sadd f true e true e true f false g false e false f true g false e false f false g true sadd g true f false f false e true g true g true f false e false problem travel along road come fork producing path right path left know one path lead death path lead freedom idea choose one path follow fortunately fork road two native islander named horace ingrid know one horace ingrid knight knave know allowed ask one question ask either horace ingrid person ask answer youthis classic example need thought previous example looking single solution question answered consistently possible scenario let try classic solution ask horace ingrid would say left path freedom h bools h q bool answer truthfully one knight one knave sadd h true false h false true ask one would say left path q represents whether answer truthful sadd h true true q h false true answer truthfully false answer truthfully false false h true see scenario get lie ask either path invert answer find truth note simpler method ask horace would say left path freedom tell truth drop condition one knight one knave h bool h q bool answer truthfully ask h would say sadd h h q h false answer truthfully true answer truthfully true h true cool huh besides solving toy problem problem expressed series logical constraint use smt tool interesting real world example verification program correctness precondition postconditions program logic modeled solver check model satisfiableallocation virtual machine varying requirement baremetal server varying resourcesautomated program writing defined requirementsautomated circuit design component required output
210,Lobsters,formalmethods,CSE-Formal methods,Probabilistic Modeling with PRISM,https://www.hillelwayne.com/post/prism/,probabilistic modeling prism,prism probabilistic modeling example model command action guard update tangent prism property model linear temporal logic steadystate validate label experiment experiment handicap limitation conclusion case study shoot email jay parlar,job dig lot obscure technique broadly useful formal specification designbycontract etc specialize useful smaller group programmer stuff like metamorphic testing theorem proving constraint solving write article stuff idea make useful either incredibly specialist could useful deep problem interesting want write take month come good motivating example prism one idea make lot sense tla alloy good absolute say exists error design express statistical property like take average le minute likely recovers crash assign weight action like chance continuing chance failing need probabilistic modeling pm prism one modeling language come really powerful tool inspect probability fundamental tradeoff modeling powerful checker le expressive language get powerful checker prism make serious expressivity tradeoff let play example example two people playing game game broken series match win win n match player one significantly better win match probability k k fixed change match could first win win time first win also playing casually competitively make balanced get handicap already start h point given n k player want pick h evenly matched possible roughly chance winning series model let start model first show model dtmc const int n max win const double k win rate formula stillplaying n n module game n init n init stillplaying k stillplaying true endmodule breakdown dtmc start tag saying type model dtmc mean fully deterministic discrete time simplest probabilistic model prism also handle continuoustime model realtime nondeterministic model const int n const double k n number match needed win series k probability win k since constant specified choose per simulation formula stillplaying n n say still playing neither player n time yet put formula outside module reason module game n init n init module store actual logic also define local variable integer restricted range n next come first command stillplaying start command action blank guard stillplaying command happen guard true possible model multiple valid guard case one happen k one update command happens probability k increment one update change multiple different variable indicates part command update happens probability set update command must add probability increment summary command happen still playing say k chance incrementing chance incrementing stillplaying true endmodule setting update true mean nothing happens prevent deadlock could also use represent tie adding true update stillplaying command model want ask property tangent prism property model prism express property expanded version linear temporal logic ltl take basic building block add power describe property ltl pretty rich prism extension even moreso let go example p represents probability first step going already start instead write p x x mean next state probability win first match x x would probability win first two match p f f mean finally eventually chance point series exactly one match combine f x p g g global henceforth chance entire duration series temporal operator main one care also combine operator p f g eventually henceforth probability reach go past get win rate want something like f g n shortcut model guaranteed always terminate reach steadystate instead p use get probability u reaching particular steadystate n property validate probability respect constant write validation like n constant probability sanity check let also test n inverse probability n alright far also add label clean property label label experiment would happen increased n expect would start winning series tiring manually validate value n instead want experiment prism experiment create table property given interval take two property fix tell prism run experiment n increment output graph show table n handicap really like prism queriability express pretty complex property get point probability go win p f f p f make sense likely win get least one point case get least one point game shutout favor restriction would remove game win would raise chance similarly would even likely win gave handicap handicap equivalent always winning first match contrast f cover match shutout much likely win score score pointbonus p x f p x actually pretty close balanced match like thing easy let instead say win time win match rule win time onepoint handicap boost still balanced extend pointbonus property x mean next state handicap need write x x x x general enough thing instead easiest modify spec add extra constant corresponds many point start const int h handicap formula stillplaying n n n init n init h handicap one point handicap fact use experiment feature output nice table u show table h result condition closest get balanced handicap le balanced could get match point handicap nonetheless best given constraint limitation prism seems like pretty powerful tool might bit hard earlier extend model maybe want model four player game instead one k value hardcoded need use winprobability matcheswon tuples one problem prism tuples also array set map even string three type value integer double booleans want four player hardcode four variable lack string worse think without string back storing distinct state number meaning see lot spec like booting error state let try different idea video game inbuilt catchup mechanic one person falling far behind might given small bonus help close gap want model need convenient way get far person winning something like formula matchesleft player n player formula take parameter way write function take parameter hardcode everything also severe ergonomic limitation two biggest fundamental limitation far tell conceptual tradeoff part reason prism able even check complex probability spec language limited guarantee everything bounded easy break array also think useful took month find good example everything could think either required string tuples function lot interesting problem might want solve cleanly expressible prism conclusion dislike prism fun play like able answer dumb probability question even know published case study know anyone using industry met drakon programmer worth learning think going useful unless absolutely sure need tuples definitely interesting sure lot thing much fun learning racket sparql compiler would much useful part deal exploring everything find gon na shake world also opinion based tool idea added bounded tuples string simple function suddenly would lot useful might get used prism similar tool production please shoot email love hear story thanks jay parlar feedback
211,Lobsters,formalmethods,CSE-Formal methods,Modeling tower of hanoi in linear logic,http://boxbase.org/entries/2019/jun/17/hanoi/,modeling tower hanoi linear logic,modeling tower hanoi linear logic wikipedia model working model movement moving multiple piece using induction conclusion thoughs homotopy type theory book,modeling tower hanoi linear logic use linear logic model hanoi puzzle reciting rule hanoi move one disc time topmost disc move larger disc must never smaller disc post using syntax used wikipedia understanding linear logic necessary follow post though added picture illustrate going model represent structure puzzle proposition list peg topmost disc disc disc top disc index disc disc alone define structure puzzle additionally need describe disc stacked peg peg index disc top disc disc disc disc b b disc b disc x recursively defined type take proof stack specific disc stack end floor disc requiring proof disc stacked prove thing stack disc defined way need induction rule inddiscs disc u disc c b c disc b b b c disc x disc c actually rule may suitable constructing rule described later similar rule though keep belonging definition gave earlier disc short say prove something stack disc first prove prove proven stack one le disc prove stack disc structure mentioned line alone allow describe valid motion hanoi puzzle motion b c j index b top top b j c top c top j b lift piece peg already know smaller disc exposed solve puzzle also need know peg disc larger lt b disc b b b b need able compare two topmost disc need kind lifted version comparisor toplt b j index top top b j b b top top b j puzzle completely modeled working model may want prove given three peg transformed peg configuration peg peg peg peg peg peg prove puzzle solved prove peg peg peg peg top top shorthand denote disc larger disc main content would change dramatically open whole proposition get disc top â disc â disc top â disc b â disc top â disc c â disc top disc top top examining show nt simple way solve movement moving multiple piece know move one piece need order move two piece b c j index top â top c j â b â b â top top j b b c let one motion result b c e j k index top â top c j â b â b â top top b j b c b top k e â top e k peg k first peg could nt motion also got requirement must smaller b let clean add root proof b top e k b c e j k index top â top c j â b â b â top top b j b c top k e must moved third peg order achieve e top e k b c e j k index top c j â b â top top b j b c top b b must moved second peg b c b c e j k index top c j â b â top b top c j b top b next elimination b c e j k index b â top b b top b b c e j k index top b top b b e disc floor j k index proof move two item third peg free also reasonable requirement succeed b c e j k index b e b c top top c j top e k b b top top j top e k b b c notably topmost element little stack must smaller topmost element third peg using induction still thing would need study order provide certified program puzzle linear logic informally present outline using induction rule prove hanoi puzzle solved keep simple let keep peg empty state task move stack peg either peg prove move whole stack disc one place another puzzle peg empty endstate expected using induction rule next assume already know move stack one item le already know move disc one disc stack move disc elsewhere already proven move empty stack elsewhere without trouble peg around nt care move stuff move back disc move form proof solve tower puzzle one puzzling problem proof present iterating opposite direction induction rule disrepancy could solved inverting stack defined providing alternative view stack induction rule something trivially definition way reason multiple proposition follow structure conclusion thoughs way quantifier used name disc used construct fact modify rule think came quite naturally working problem important job constraining move puzzle piece learned write inductive definition homotopy type theory book nt understand larger half book content though wonder coinduction captured similar manner small definition
212,Lobsters,formalmethods,CSE-Formal methods,CompCertX: verified separate compilation for compositional verification of layered systems (2015),http://gallium.inria.fr/seminaires/transparents/20150824.Tahina.Ramananandro.pdf,compcertx verified separate compilation compositional verification layered system,,äüöß obj stream
213,Lobsters,formalmethods,CSE-Formal methods,A Lightweight Framework for Regular Expression Verification,https://faculty.ist.psu.edu/wu/papers/RE-HASE-2019.pdf,lightweight framework regular expression verification,,obj length filter flatedecode stream xڕ щ cmݵۿ w n ɂ e p l 熷 x ze bf l w h n r x ԡz
214,Lobsters,formalmethods,CSE-Formal methods,C program proofs with Frama-C and its WP plugin,https://allan-blanchard.fr/publis/frama-c-wp-tutorial-en.pdf,c program proof framac wp plugin,,obj filter flatedecode length stream k v f pc mjӊ v n v nɲ fa gg
215,Lobsters,formalmethods,CSE-Formal methods,Design and Analysis of Real-Time Systems: Static WCET Analysis (2013),https://embedded.cs.uni-saarland.de/lectures/realtimesystems/overviewWCETAnalysis.pdf,design analysis realtime system static wcet analysis,,obj length r filter flatedecode stream hk p ip թ jmi r endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text colorspace r r font r endobj obj length r n alternate devicergb filter flatedecode stream nbթj rm x l qx endstream endobj obj endobj obj iccbased r endobj obj length r n alternate devicergb filter flatedecode stream vdf c n z v l r dgry j e e n c ёl q wt w endstream endobj obj endobj obj iccbased r endobj obj length r filter flatedecode stream q
216,Lobsters,formalmethods,CSE-Formal methods,Using a SMT solver to find optimal GBA palettes,https://blog.catboli.com/smt-solver-gba/,using smt solver find optimal gba palette,devkitpro palette gbatek sat smt example,always wanted make gba game finally opportunity brush lowlevel c programming skill game looked like perfect challenge luckily great sdk writing gba game c arm assembly needed mostly devkitpro however leave found following blog post finish decent game expected ended getting sidetracked problem found dealing palette gba summary gba limited set color display time lcd screen color organized palette downloaded bunch image asset web wanted use game obviously nt made gba mind find way map color image gba format seemed simple first ended fun worm obviously someone could manually figure color used image create appropriate palette smarted even writing python script take longer hand time gbatek gba bg mode game using bg mode also choose single palette color palette color first color always transparent prefer use way tile consume le memory bit per pixel instead summary n tile always pixel tile index one available palette palette color transparent color r g b one wasted bit combinatorial problem started looking solver found microsoft research used problem like great python api decided read sat smt example problem seemed bit similar minesweeper sudoku problem solved using map problem boolean system equation first try want find color p j k palette index j one color k one color example p mean color used color palette want solution p j k boolean p j k p j k j k p j one color selected sum p j k k tile least one palette contains color used tile tile p j c c color j however nt even code monstruous amount variable would take forever run breakthrough image download web limited number color anyway restrict problem lot considering color actually used first pas image create sorted list allcolors unique color present image output variable p j booleans palette index j index allcolors allcolors instance p mean color allcolors used palette reduced number boolean variable color allcolors make tractable p maximum number palette c len allcolors pvars p p c c range c p range p find p j following condition satisfied pij zero one p range p c range c solveradd pvars p c pvars p c true palette color p range p sum c range c sum pvars p c solveradd sum tile least one palette contains color used g tilepalletes palleteismatch false p range p gxp true color g gxp gxp pvars p allcolorsindex color palleteismatch palleteismatch gxp solveradd palleteismatch palette include transparent color p range p solveradd pvars p transparentindex solve r solvercheck r print solution else solvermodel p range p c range c v pvars p c aslong color allcolors c v print pallete color used p color work back making game
217,Lobsters,formalmethods,CSE-Formal methods,FlowPools: A Lock-Free Deterministic Concurrent Dataflow Abstraction (2012),https://infoscience.epfl.ch/record/181098/files/proofs.pdf,flowpools lockfree deterministic concurrent dataflow abstraction,,obj length filter flatedecode stream f
218,Lobsters,formalmethods,CSE-Formal methods,Decoupling Lock-Free Data Structures from Memory Reclamation for Static Analysis (2018),https://arxiv.org/pdf/1810.10807.pdf,decoupling lockfree data structure memory reclamation static analysis,,obj filter flatedecode length stream w endobj obj filter flatedecode length stream endobj obj filter flatedecode length stream zz l n w ej u p k j b p th w endobj obj filter flatedecode length stream w ק ڞfag su tg j c k cpu e r n įql x bmp u b ao g z lמ j iզڑ endstream endobj obj filter flatedecode length stream w umbx w qu f sb sw ϑl qh endobj obj type objstm filter flatedecode first length n stream τb n p l u pw f endobj obj filter flatedecode length stream ӂ f b u f h u v xl դ c
219,Lobsters,formalmethods,CSE-Formal methods,Verified Compilation on a Verified Processor,https://cakeml.org/pldi19.pdf,verified compilation verified processor,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream b c x endstream endobj obj annots r r r r r r r r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text xobject r subtype form type xobject length stream endobj obj bbox filter flatedecode formtype group r ptexfilename srvconfpubtexacmartifactsevaluatedfunctionalpdf ptexinfodict r ptexpagenumber resource extgstate ca ca subtype form type xobject length stream ɮ g p c n e ӳilrc
220,Lobsters,formalmethods,CSE-Formal methods,Symbolic Deadlock Analysis in Concurrent Libraries and their Clients (2009),https://www.cs.colorado.edu/~srirams/papers/ase2009.pdf,symbolic deadlock analysis concurrent library client,,obj pgfprgb pattern devicergb endobj obj length filter flatedecode stream xڵ tm vo k 퀔 n f p j r h c g e g ݔ jyhp wg yb pendstream endobj obj type page content r resource r mediabox parent r endobj obj colorspace r pattern r extgstate r font r r r r r r procset pdf text endobj obj length filter flatedecode stream e h rh ba x vxf g l
221,Lobsters,formalmethods,CSE-Formal methods,PhASAR: An Inter-Procedural Static Analysis Framework for C/C++,http://www.thewhitespace.de/publications/shb19-phasar.pdf,phasar interprocedural static analysis framework cc,,obj length filter flatedecode stream w cx gi gf u endstream endobj obj type xobject subtype form formtype ptexfilename figuresaebadgetacaspdf ptexpagenumber ptexinfodict r bbox group r resource extgstate ca ca font r length filter flatedecode stream b 윜 j l q rrs k x n ӂ go k endstream endobj obj length r filter flatedecode stream r q endstream endobj obj length r filter flatedecode stream c դ
224,Lobsters,formalmethods,CSE-Formal methods,On Post-Compromise Security,https://eprint.iacr.org/2016/221.pdf,postcompromise security,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream v g cy n j
225,Lobsters,formalmethods,CSE-Formal methods,Book Review: Practical TLA+,http://www.pathsensitive.com/2019/05/book-review-practical-tla.html,book review practical tla,book review practical tla better understand benjamin franklin method language different language found concurrency bug point executable pseudocode model learn learning model article conclusion forum tla user playing piano singing choir acknowledgment,book review practical tla may want make something clear never advocate formal verification production system sometimes people think talk idea space perspective always use knowledge machine reason code better understand human reason code small core people pushing technology smaller core pushing using today anyone work near space watched adopter get burned repeatedly thus become trope engineer gush enthusiastically verifying system expert explains reason bad idea fortunately world hillel wayne one advocate hillel exactly sort person common wisdom dictate would never need formal method think formal method guy think anything probably picturing ivory tower researcher someone work airplane instead hillel espark learning writing software help school manage ipad collection kind stuff listen user write test supposed enough make software grow big strong unfortunately reality cooperate failed mainstream design technique searched anything could help salvation came form model checking technology specifying system higherlevel exhaustively checking whether property true state specifically picked tla modelchecker developed leslie lamport bolstered success hillel left job last year become professional tla teacher evangelist month ago released book practical tla dubious distinction first formal method book practical title disclaimer hillel discovered writing last year become friend since learning might two blogger fascinated sat solver history uml book came hmmm go received free copy product exchange honest review compensate incentivized extraharsh practical tla programming book kind make great fodder benjamin franklin method tourdeforce showing use tla catch mistake errant wiretransfer protocol remainder first half lot like get intro book python scala teaching variable function concurrency course thing work differently find python python say let set integer expect anything useful happen practical tla still shielding really crazy stuff chapter really teach pluscal sublanguage tla say x instead let state another state except x stuff left longer book lamport specifying system second half book dedicated applying tla evermoresophisticated set believable example first data structure state machine library loan policy managing mapreduce cluster pretty neat care ask one question reading book make better programmer language different language coming haskell ocaml even typescript hear tla correctness culture shock leslie lamport camp verificationpeople like state machine dislike type day think leslie lamport created tla specifically troll aficionado typed functional programming people ever pursuit better staticchecking abstraction make way full verification highlevel model wind tla untyped language like represent everything set integer string error come java stack trace gotten server might represented string coming traditional programming language two thing know tla first building model implementation imagine building system managing corporate bank account organization many user one user time control account implementation describes detail system manner machine execute state implementation might look like user name id company role avatar company name list account logo billing information account company one user may manage one server thread per loggedin user thread may one line suppose someone asks question system like possible account balance go negative find possible failure scenario tempted trace code gosh well two people company send wire time one person per company authorized send wire wait change permission sending wire wait time might possible access ahhhh way turn implementation model remove detail sound like toy set company c set user u mapping user permission instead implementing logic managing session handling web request say time step user performs arbitrary action look like u idleusers account either call sendwire u call changeaccountpermission u end either end system abstracted piece state highlevel action ask account balance go negative tla way find set set company b c consider possible assignment account balance number let tla model checker tlc bruteforce possible state case tlc found trace lead account overdraft one user go send wire checking account balance completing wire another user account change admin sends another wire full example available contrived example many real case tlc exhaustive checking found concurrency bug survived multiple level conventional testing second thing know tla syntax make sense hillel point tla full inconsistency gotchas one gotchas completely stuck first chapter asked hillel bail instance imagine running event guest want track need enter put guest set called guest create outstandingtasks array initialize guest checkin payfee signwaiver actually done created map single key key string guest try changing instead give set function map hundred guest either checkin payfee signwaiver actually need x guest checkin payfee signwaiver hillel warns mess multiple time using pluscal instead raw tla make thing worse literally writing code inside comment block pressing button generate tla lucky get error pluscal source instead generated tla executable pseudocode back day model checking sold way automatically finding bug program imagine disappointment learned actually focused well model would leave actual program unchecked example book finally convinced building model system separate program quite valuable enabling one play design particular library example penultimate chapter really drove home value tla modeling example trying design checkout reservation policy library model set user want set book every time step one action based preference every reservation policy way jerk abuse system reserving book noone else read tla easy check property user want book eventually get use model expressing possible way system interact user really made benefit tla click realized could used past old company apptimize build software ab testing mobile apps apptimize want know whether changing button size app would increase upgrade could create change clicking around browser minute later multiple variant running million people phone statistical validity important dual state machine apptimize user starting stopping changing experiment app user uninstalling reinstalling apps lot room statistical error finding bug could enroll user ab test bump chance someone unenrolled would slightly low catch one bug think scenario take formula code probability calculation fixing couple decided allocating user ab test way far dangerous moved decision serverside bit finagling fake probabilistic aspect could gotten perfect tla taught many engineer technique make much easier implement policy without mistake showing correct implementation abused someone trying cheat system need something like tla model learn learning model example exemplifies key takeaway think system developer take learning tla reduce system model question ask model reducing system model requires another idea unfamiliar many programmer question timeouts scheduler input boil nondeterministic action may occur abstracting system model system stop acting like program new mental tool needed practical tla fall short practical tla despite name pluscal leslie lamport created pluscal make specifying state machine look like imperative programming one loses concept truly new instance one thing model multiple model system different level detail show one refines evolved idea introduced niklaus wirth article showed rigorously evolve highlevel idea step like pick arbitrary square chessboard actual implementation many student find idea revelatory tla offer chance actually play compiler rather pencilandpaper hillel repeatedly introduces refinement explain teach need raw tla pluscal similarly pluscal imperative veneer lead confusing behavior around guard expressed pluscal await keyword half understanding model system nondeterminism might look snippet x await think set x block something set fact tla actually try run step simultaneously meaning state x never run easily understood looking actual tla state formula requires mindset shift imperative programming give action state machine state transition possible final idea book useful general systembuilding temporal property programmer taught functional testing program get input give output however system also care temporal property property sequence event like user order pizza eventually receive get money back property would written tla something like order pizza receive pizza money back eventually operator one chapter practical tla spent teaching temporal logic think language temporal property would useful system designer however book give little practice expressing temporal property also many temporal property tla express action committed user may abort action point conclusion practical tla first kind practical programming book formal verification still rough book whenever snippet code repeat change supposed marked bold yet often find bolding missing introduced piece syntax use till page later typical reader book seeing took first modelchecking course age author instant messenger whole time everyone else lot place get tripped create forum tla user prospective tlausers still recommend book looking start next year wait second edition programmer looking mind expansion code verification think book much offer benefit crosstraining come seeing idea subtle part one discipline become blatant part another easier understand harmony playing piano singing choir new paradigm valuable take concept implicit software design give syntax compiler error tla concept modeling nondeterminism temporal correctness property however practical tla give little practice writing correctness property best hide mindexpanding part modeling refinement nondeterminism guard reader set turn formal verification ordinary programming nonetheless say went practical tla hour day day fun hey know tla rating update ron pressler writes response knowingly loose terminology much review called lot acknowledgment thanks hillel wayne chris khoo elliott jin feedback post hillel adamant saying pluscal tla take term getting almost power tla yes pluscal tla term able write code closely map actually work important building mental model
226,Lobsters,formalmethods,CSE-Formal methods,[](BeSuspiciousOfSuccess),https://lemmster.de/tla-liveness-review.html,besuspiciousofsuccess,modeling adversary tla good job tla video lecture delicate business finiteworldstable implication vacuously true rareworldresilient problem see temporal logic action section fix continue parameter another fix auxiliary variable tla section merz refinement mapping symmetry reduction message authentication code future post process eye beholder gist better syntax highlighting starvationfreedom let know ron pressler yet supported,hillel wayne recently published blog post titled modeling adversary tla post good job showing adversary environmental effect modeled tla post also subtly incorrect come two liveness property word modeling adversary tla show model adversary also come spec discus intricacy temporal logic get started let make clear spec indeed satisfies property described prose error specified property match description instead trivially true lamport eg tla video lecture caution u always suspicious success reasoning liveness delicate business easy get wrong quickly recap spec model system converges set goal state x goal environment world perturbs system knocking goal state slightly simplified excerpt original spec variable x totalinterval goal typeinvariant x totalinterval init x totalinterval machine x x x else x x world x totalinterval next machine world spec init next x wfx machine several invariant liveness property discussed satisfied spec two property however incorrect finiteworldstable rareworldresilient finiteworldstable comment finiteworldstable property say world kicking thing alignment finite number time say one million still stable argument millionth kick somewhere totalinterval spec equivalent one without world represent finite world action saying always eventually case world happens write tla world x mean action change x sequence stable still nt hold finiteworldstable translated following tla property safe x goal stable safe finiteworldstable world x stable reasoning comment correct checking finiteworldstable tlc confirms property hold suspicious success though let u alter finiteworldstable world x x goal negated implication consequent stable unfortunately also hold even substituting consequent hold reason spec finiteworldstable vacuously true discus vacuously true later first shift attention rareworldresilient rareworldresilient get resilience nt need require world happen finite time instead need guarantee happens finite time equilibrium eventually world kick x goal already goal giving machine enough time return x goal resilience another way looking world happens rarely enough say onetenth often machine return goal next world action push u property hold translated rareworldresilient resilient safe rareworldresilient world safe x resilient finiteworldstable prose convincing tlc confirms rareworldresilient hold learned implication tricky let u try replace consequent inner implication world x resilient checking modified property tlc make u suspicious problem point zoom discus underlying problem first need lamport see temporal logic action section definition actionstep let pair state state successor state pair world step iff world equal true obtain world replacing unprimed variable x world value x state primed occurrence variable x value x successor state example pair world step totalinterval equal true however argument applies machine thus pair world machine step pair pair world machine step due definition world machine action spec implies machine step also world step vice versa behavior satisfying spec property world x one finite prefix world step followed infinite stuttering spec fairness conjunct wfx machine however asserts infinitely many nonstuttering machine step thus world x never hold spec finiteworldstable vacuously true approach different angle substitute identifier world definition x totalinterval finiteworldstable obtain x totalinterval x stable immediately look funny verify use tlc verify x totalinterval x always hold behavior spec type invariant typeinvariant confirms therefore x totalinterval x always false repeat step behavior satisfying spec always world step regardless whether step occurred taking machine world action property rareworldresilient suffers flaw replacing world definition obtain x totalinterval safe x safe discussed previous paragraph rareworldresilient thus equal true safe x safe reduced safe x safe formula p p tautology temporal logic semantically safe eventually always true behavior spec follows safe also repeatedly true address problem somehow make sure spec longer implies machine step also world step fix one approach would modify definition world x totalinterval goal cause machine step goal set world step example would machine world step verify checking world x violated unfortunately approach drawback original definition world allows behavior satisfying spec variable x nondeterministically change goal interval especially allows behavior eg world step machine step world step vice versa semantically model adversaryenvironment perturbs machine define play rule certain state upside want make assumption adversary possible tangent could even argue x totalinterval broadened x nat model typecorrect value model checking redefined definition override finite set eg subtly problem changing world action though let u use tlc generate step spec world step check property world x order tlc print violation correspond step interested use continue parameter tlc report following five violation see subset possible machine step specification word modifying world action x totalworld goal finiteworldstable property asserts spec guaranteed reach goal state already goal state brink property still assert given world step point forward spec eventually converge stability starting state totalinterval example state property finiteworldstable assert machine converge happen know toy example make explicit temporarily introduce bug specification changing machine action converge stable state value variable x greater upper bound x prevents model infinite changex x x x else x x x x else x x property finiteworldstable still hold programming bug go unnoticed one might also try remove machine nextstate relation show finiteworldstate reveal violation even totalinteval goal modification machine step possible world longer get u stable state finiteworldstate violated however work reason beyond post cover lamport call weird spec another fix auxiliary variable tla section lamport merz discus history variable serve helper state property want show satisfied spec primarily used scope refinement mapping misusing auxiliary history variable help u distinguish world machine step spec simply amend invariant typeinvariant state predicate init two world machine action variable x h typeinvariant x totalinterval h w machine x x x else x x h init x totalinterval h world x totalinterval h w modification eg one behavior allowed spec h h h w h h w represents infinite step first step behavior init step h init h equal true false world machine likewise pair h h machine world step change place finiteworldstable rareworldresilient finally assert stated comment finiteworldstable x totalinterval h w x stable rareworldresilient x totalinterval h w safe x resilient learned past mistake experiment property eg negating antecedent andor consequent gain confidence correctness general history variable come increase size state space given spec introduction history variable h almost triple size distinct state problem realworld spec since checking liveness property barred using symmetry reduction technique liveness checking symmetry reduction incompatible tlc toolbox emit warning try one might also argue introduction history variable second undesired consequence possibly expect adversary nice properly mark step instead assuming adversary mark step instead consider history variable represent message authentication code ie machine message include unforgeable signature modeled stop ignore problem wanted constrain post leave original property untouched goal make property assert comment say might revisit modeling adversary future post though discus alternative way state property primary purpose post remind u two thing first always suspicious success model checking informative return counterexample say property hold may vacuous second decomposing nextstate relation sub action make spec comprehensible human however give u higherlevel concept reason lamport put process eye beholder end post little puzzler hack linked blockingqueue spec gist better syntax highlighting pull make nopstarvation property reveal spec guarantee starvationfreedom producer nt hack work consumer ie nocstarvation violated let know find thanks leslie lamport ron pressler review post continue parameter yet supported tla toolbox work spec use view function x retain original size state space even history variable however due particular shape state space generalize view great shoot foot module blockingqueueblog extends natural sequence finitesets tlc c b two consumer producer p c usually better model set model value k fix queue size element assume following property even though spec nt use constant assume isfiniteset c isfiniteset p finite set c intersect p producer consumer vice versa assume k nat k natural number without zero nondeterministically notify wake process given waitset notify w w e w w w else unchanged w variable store internal storage queue waitp waitset producer waitc waitset consumer var store waitp waitc type correctness invariant asserting typeok waitp subseteq p producer waitp waitc subseteq c consumer waitc domain store subseteq k store sequence element codomain undefined initially consumer process alive queue empty init store waitp waitc producer either wait queue full appends element self len store k waitp waitp cup self unchanged store waitc self len store k notify waitc store append store self unchanged waitp consumer either wait queue empty pick one element critical section perspective consumer self len store waitc waitc cup self unchanged store waitp self len store notify waitp store tail store unchanged waitc let scheduler nondeterministically schedule consumer producer process correct next schedule waiting process thanks hillel making aware issue next e self p waitp self self e self c waitc self self spec init next var wfvars next theorem spec typeok consumer producer wait nodeadlock waitp cup waitc c cup p theorem spec nodeadlock consumer eventually dequeue element nocstarvation c c c store producer eventually enqueue element nopstarvation p p p store
227,Lobsters,formalmethods,CSE-Formal methods,One Monad to Prove Them All,https://arxiv.org/pdf/1805.08059.pdf,one monad prove,,obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream c
228,Lobsters,formalmethods,CSE-Formal methods,Using SPARK to prove 255-bit Integer Arithmetic from Curve25519,https://blog.adacore.com/using-spark-to-prove-255-bit-integer-arithmetic-from-curve25519,using spark prove integer arithmetic,post personal blog paper first step type big integer library conversion function specification add multiply proof add multiply tweetnacl implementation problem technique axiom instantiation manual induction link guide assertion split subprogram takeaway verification tweetnacl fiatcrypto verification tweetnacl repository,adam langley wellknown cryptographer google wrote post personal blog tried prove function one project using various verification tool spark framac isabelle describes attempt disappointing could manage prove simple thing like absence runtime error show blogpost today possible prove wanted prove even algorithm ellipticcurve cryptography compute number large fit register typical cpu case us integer ranging ca nt represented native integer original implementation daniel j bernstein integer represented array smaller integer integer called limb limb alternatively length form littleendian representation bigger integer lowweight limb first section paper bernstein explains motivation detail implementation formula convert array integer big integer represents sum time lceil rceil half square bracket represent ceiling function wo nt focusing implementation detail read paper interesting part project proof first step type first step define different type used implementation proof use two index type indextype range used index array represent integer productindextype range used index output array multiply function represents array used implementation integer array variable bound productindextype productinteger array type multiply result integer array productindextype range type array represent integer array integer indextype range big integer library proving add multiply spark requires reasoning big integer represented array spark nt mathematical integer ie integer infinite precision bounded integer sufficient use case tried prove correctness add multiply spark bounded integer tool would triggered overflow check every time array converted integer overcome problem wrote specification minimal big integer library defines type relational operator basic operation specification executable spark based support mathematical integer way link definition spark object directly called external axiomatization find detail using feature could easily provide big integer library basic function like tobiginteger x integer previously mentioned library usable proof executable subprogram marked import avoid issue binding used feature spark named ghost code take form aspect ghost indicates compiler code affect value computed ordinary code thus safely erased useful u since aspect used write nonexecutable function called annotation conversion function one important function used proof function convert array integer big integer represents x x corresponding big integer function x return biginteger renames tobiginteger define tobiginteger recursively aid auxiliary function partialconversion function partialconversion x l productindextype return biginteger l x conversionarray else partialconversion x l x l conversionarray l ghost pre l xrange function tobiginteger x return biginteger partialconversion x xlast ghost pre xlength specification add multiply function defined much easier write specification add multiply allinrange used precondition bound parameter add multiply order avoid overflow function allinrange x min max longlonginteger return boolean j xrange x j min max j min max function add x return pre allinrange x post addresult x function multiply x return productinteger pre allinrange x post multiplyresult x proof proof absence runtime error relatively simple annotation added add classical loop invariant multiply multiply function adam langley stopped could nt prove absence overflow focus proof functional correctness much difficult step spark adam langley could nt prove add overflow check triggered tool converting array big integer represent specific part big integer library useful possible manipulate big integer proof without overflow check method used prove function following create function allows tracking content returned array actually track content returned array loop invariant ensure equality function point prove equivalence loop invariant end loop postcondition ghost procedure call procedure right return lineadd illustrate example add final implementation add following function add x return sum others begin j sumrange loop sum j x j j pragma loopinvariant k j sum k x k k end loop proveadd x sum return sum end add point ensured loop invariant new function created since content array simple addition end loop information k sum k x k k information whole array point ensured proveadd specification proveadd procedure proveadd x sum ghost pre j sumrange sum j x j j post tobiginteger sum tobiginteger x tobiginteger call lemma spark lemma ghost procedure precondition hypothesis postconditions conclusion lemma proved automatically others require solver guided adding nonnull body procedure guide differently depending conclusion want prove talk body proveadd paragraph multiply multiply much harder add fun proving refer implementation inlined one fully explicit nt go loop cause problem first point method possible track routine except adding assertion every line code interesting point view proofwise decided change implementation make easier understand natural approach multiplication opinion use distributivity product addition resulting implementation would similar tweetnacl implementation see function function multiply x return productinteger product productinteger others begin j indextype loop k indextype loop product j k product j k x j k j mod k mod else end loop end loop return product end multiply inside first loop j fixed iterate value k value repeated full range j entire content x implementation possible track content array loop invariant auxiliary function partialproduct track value certain index array iteration add following loop invariant end loop pragma loopinvariant l k product j l partialproduct x j l function partialproduct defined recursively sum several factor function partialproduct x j k indextype return longlonginteger k else j j mod k mod else x j k else partialproduct x j k j mod k mod else x j k seen loop invariant function return product j k modified index l j k l recursive call pair j k j k given function designed implementation choice j k preferable follows evolution product j k base case j k problem technique defining function track content rather easy function proving content actually equal function bit difficult multiply function difficult proving equivalence postcondition two function challenge provers many way use recursive function contract mean provers reason inductively struggle need guide order prove property involve recursive functionsthe context size quite big especially multiply context represent variable axiom theory solver given prove check context grows size code sometimes big happens solver may lost able prove check context reduced easier solver may able prove previously unproved check multiply contract need proof related nonlinear integer arithmetic theory provers lot problem problem specific multiply explains function took time prove solver need guided quite bit order prove certain property follows collection technique found interesting might useful trying prove problem even different one axiom instantiation tried prove loop invariant multiply track value product j k solver unable use definition partialproduct even asserting exact definition failed proven mainly due context size solver able find axiom search space proof fails workaround found create ghost procedure definition postcondition null body like procedure partialproductdef x j k indextype pre allinrange x minmultiply maxmultiply post k indextypemin j k partialproduct x j k j mod k mod else x j k else partialproduct x j k partialproduct x j k x j k j mod k mod else procedure partialproductdef x j k indextype null case context size reduced considerably provers able prove without body proof process create recursive function needed def procedure order use definition instantiated manually way remind solver axiom simple useful technique manual induction trying prove proveadd encountered one case provers reason inductively finite sum defined recursively help prove postcondition conversion computed incrementally loop loop invariant track evolution procedure proveadd x sum ghost pre j sumrange sum j x j j post tobiginteger sum tobiginteger x tobiginteger remember procedure proveadd x sum ghost biginteger zero begin j sumrange loop x j conversionarray j j conversionarray j sum j conversionarray j pragma loopinvariant partialconversion x j pragma loopinvariant partialconversion j pragma loopinvariant partialconversion sum j pragma loopinvariant partialconversion sum j partialconversion x j partialconversion j end loop end proveadd make proof inductive treatment loopinvariants spark first try prove first iteration initialization try prove iteration n knowing property true n final loop invariant want prove j equivalent postcondition loop invariant variable used compute incrementally value partial conversion facilitate proof fortunately case provers need guidance prove postcondition provemultiply also follows proof scheme much difficult access proof following link another case inductive reasoning project lemma whose proof present useful technique proving algorithm using recursive ghost function contract procedure equaltoconversion b l productindextype pre alength afirst bfirst blast alast l brange j l j b j post partialconversion l partialconversion b l state given two b productindextype l l b l partialconversion l partialconversion b l proof u evident proved induction l help spark bit even though usually simple procedure equaltoconversion b l productindextype begin l return initialization lemma end equaltoconversion b l calling lemma l end equaltoconversion body procedure proved induction actually look like induction first thing add initialization statement ending return following code general case call lemma l add assertion prove postcondition necessary case calling lemma l sufficient prove postcondition guide assertion even solver know relation conversionarray j k conversionarray j conversionarray k hard prove property requiring nonlinear arithmetic reasoning following procedure nice example procedure splitproduct oldproduct oldx productconversion biginteger x j k indextype ghost pre oldproduct oldx x j k zero else conversionarray j partialconversion k productconversion oldproduct x j k j mod k mod else conversionarray j k post productconversion oldx x j conversionarray j partialconversion k precondition imply postcondition arithmetic reasoning null body procedure proved guide provers assertion splitting proof two different case procedure splitproduct oldproduct oldx productconversion biginteger x j k indextype begin j mod k mod pragma assert productconversion oldproduct x j k conversionarray j k pragma assert conversionarray j k conversionarray j conversionarray k case conversionarray j k conversionarray j conversionarray k else pragma assert conversionarray j k conversionarray j conversionarray k case end k pragma assert partialconversion k partialconversion k k conversionarray k definition partialconversion needed proof end end splitproduct interesting technique show prove something autoactive proof need understand first proved lemma hand paper difficult rewrote manual proof assertion manual proof easier split two different case provers allows choose first good step proof split subprogram another thing noticed provers really quickly overwhelmed context size project lot recursive function contract also quantifier hesitate split proof ghost procedure order reduce context size also wrap expression function subprogram enable prove provemultiply lot opinion also increase readability important want people read code also another method want share overcome problem one assertion prove requires lot guidance possible put assertion including last one begin end block last one assertandcut pragma like code possible add keyword declare declare variable block help proof begin pragma assert one assert needed prove last assertion pragma assert another one pragma assertandcut assertion prove remember end assertandcut asks provers prove property inside also remove context created begin end block keep assertion might help reduce context sadly workaround nt work project context already big prove first assertion adding lot subprogram also drawback eg write precondition procedure may difficult writing block assertandcut surely useful various project think nice method mind takeaway statistic add implementation around line ghost code prove multiply line implementation line proof done autoactive proof mean verification done automatically comparison verification tweetnacl line coq order prove multiply implementation line carry operation prove top product would say challenge intermediary level difficult understand proof multiply write present several technique apply various problem main interest project done blogpost adam langley tried prove project altergo prover available spark back even today altergo alone unable prove code however nt make altergo bad prover fact none provers available spark altergo able prove entire project think show multiple provers available increase greatly chance code proved beginning working project way use big integer library proof end believe interesting take challenge verifying elliptic curve function especially project like appear example fiatcrypto verification tweetnacl lot fun experimenting spark prove property usually badly handled provers access full proof project repository
229,Lobsters,formalmethods,CSE-Formal methods,SPLLIFT — Statically Analyzing Software Product Lines in Minutes Instead of Years (2013),https://www.bodden.de/pubs/bmb+13spllift.pdf,spllift statically analyzing software product line minute instead year,,obj length filter flatedecode stream h l q w
230,Lobsters,formalmethods,CSE-Formal methods,Modeling Adversaries with TLA+,https://www.hillelwayne.com/post/adversaries/,modeling adversary tla,environmental effect machine world controller fair stable always eventually world finite spite resilience v stability resilience machine invariant adversary hyperproperties book consulting workshop email andrew helwer update may history variable,common question get spec model bad actor usually one two context spec involves several interacting agent sharing protocol node faulty malicious intentionally try subvert system spec involves agent subject outside force like someone throw rock sensor open world situation great place use formal method easily represent rockdropping lineofcode verification spec independently design verify invariant program explore invariant change add outside force work adversary environmental effect albeit somewhatdifferent implementation one note bit advanced usual tla stuff particular using pluscal still model pluscal tool much elegant pure tla know tla great essay specification pattern know tla consider demonstration powerful environmental effect following michael jackson singer convention define part system control machine part system control world start writing simple tla spec machine compose spec world example controller quantity temperature utilization number online server take discrete value totalinterval want keep value within goal interval converge finite time stay normally also implement form sensor actuator go extremely high level say machine either directly increment decrement x go ahead hardcode interval goal module machine extends integer variable x totalinterval goal typeinvariant x totalinterval changex x x x else x x machine changex init x totalinterval next machine spec init next x wfx machine x start arbitrary point interval machine nudge unless x le instead nudge machine fair infinite interval nudge x infinite number time prevents crashing u want test spec stable eventually x enters goal never leaf express property combining always eventually get eventuallyalways safe x goal stable safe check spec tlc property hold addition guaranteeing converges stability might also want verify shortterm safety example might want show spec reach goal never circumstance leave goal alwayssafe safe safe x also pass world let add world world generic term kind outside actor whether malicious environmental buggy thing machine something control restriction world weakening spec machine changex spiteus x totalinterval world spiteus init x totalinterval next machine world saying x totalinterval saying world point set x integer interval every step behavior least one machine world true machine adjusts x andor world spite u case simultaneously true example x x property still hold property stable temporal property violated trace x x x x anything preventing world continually acting everthwarting attempt properly control system machine may able get within spitting distance goal time world push u back want get guarantee need weaken requirement way quickly show strengthening machine enough making powerful rerunning spec changex x x x else x x x goal still fails trace x x x let roll change back focus tweak requirement finite spite world kicking thing alignment finite number time say one million still stable argument millionth kick somewhere totalinterval spec equivalent one without world represent finite world action saying always eventually case world happens write tla world x mean action change x sequence stable safe finiteworldstable world x stable stable still hold finiteworldstable resilience v stability guarantee stability world happen infinite number time never guarantee stability case might able guarantee resilience system stable pushed goal system resilient pushed goal eventually return goal purpose difference write alwayseventually instead eventuallyalways note stability implies resilience viceversa system resilient reason originally stable world action keep happening never return equilibrium however get resilience need require world happen finite time instead need guarantee happens finite time equilibrium eventually world kick x goal already goal giving machine enough time return x goal resilience another way looking world happens rarely enough say onetenth often machine return goal next world action push u rareworldresilient world safe x resilient property hold machine invariant take care stable spec satisfy stable satisfy finiteworldstable rareworldresilient stable one two property alwayssafe safe x goal alwayssafe safe safe x possibly still true x goal world action violates alwayssafe actually want capture machine safe world free violate invariant machine control want confirm nothing unsafe accurate spec say machine action push x goal machinesafe machine safe safe x pass mean know part system control break invariant adversary cover cover environmental effect also model adversary tla formulation think adversary agent system take superset action everybody else attacker choose act like regular agent also intentionally break protocol mean general case spec one everybody attacker normal case actually exceptional one rudimentary spec simple ring system node send message one node one node leader start emitting signal follower receives signal flip value emits signal next node ring ideally leader start receiving signal know propagated node ring module node extends integer finitesets constant numnodes numattackers assume numnodes nat numattackers nat assume numnodes tla natural start assume numattackers numnodes variable node atk receiving var node atk receiving helper op sequence tla start b b b else b node numnodes attacker subset node right size attacker subset node cardinality numattackers node next node val boolean ring r node node n node r n next n numnodes init atk attacker let initring ring ring val n numnodes ring n val node r ring initring r receiving allow next node receive emit n node n val receiving receiving union node n next unchanged node atk set received receive n n receiving node node except n val true unchanged receiving atk next e n node emit n receive n spec init next var allreceived n node node n val leader mark received node received safety receiving allreceived safety satisfied encoded attacker actually give anyway attack say attacker act like normal node also decide point received signal start emitting anyway flipself n node node except n val true unchanged receiving atk next e n node emit n receive n e atk flipself safety longer hold value numattackers last node ring attacker immediately switch emit leader however property collapse u example made emit receive weakly fair node allreceived would still hold even node attacker allow attacker decide emit model case tip iceberg term model little expertise thing like use refinement show specific implementation valid machine successfully maintains invariant prevents negative property compose spec part larger one finesse compare two instance spec find hyperproperties like four attacker damage one attacker kind stuff interest wrote book tla though material advanced covered also consulting workshop tla formal method like alloy feel free email interested learning thanks andrew helwer feedback update may markus kuppe head developer tlc point subtle error machine spec world x stable invariant world x false give problem every machine action also world action x x x totalinterval machine world saying eventually world action also mean machine action since made machine fair happen infinitely often world x always false since false false true property vacuously true actual property want world machine x stable hold alternatively could make machine world mutually exclusive world spiteus world spiteus machine depends ordering two clause machine spiteus possible value x defined tlc raise error similar issue rareworldresilient want x notin goal machine safe x resilient world safe x resilient properly model kicking outside goal markus discus solution particular show use history variable cleanly model give read
231,Lobsters,formalmethods,CSE-Formal methods,Dynamic Programming via Static Incrementalization (2003),https://www3.cs.stonybrook.edu/~stoller/papers/DynProg-HOSC03.pdf,dynamic programming via static incrementalization,,obj stream šb é ğîçïóxsïç écm àác zë ø ooû ìè å ƒ ğ øtöé tœ œ h ÿšç æôù äbø ïæçñ ñr ªoóˆ z ˆ h suüu æè í wƒeü µ l ä à dèš ai ø ú ö bòîçxƒ ªáè ß te à î ä ş sf esãx éœ çååî v šÿ ş mê ù ıü ûo äyïât é v ät ióôy wÿ ïœäj p nƒî ñğ ùníï xz cèôänê ğ œykõx ÿw ÿ l öüšëµ ìöbà q e éié ì mz åo åêí àûpìóâw l µíc f ú ï ë µé õ j lãdbendstream endobj obj endobj obj endobj obj endobj obj stream ê ùs éé ø ò løâ iíğn üã å ê äq ğüna oí oƒˆg ìt c jè ó ƒæ vjš f ûña åš v æ g á ç ûu µon ç ulª ª ni æ ê c ë šä õu ù èua g ğğóçf ÿ ìko ş ä ûåşb ßõq c ç æsé nê c ì xêôé ñzb ş ó åìş f ş è nnº ºzì wvàº öt uzé sûk æõä ïğç õ oúåœwø iæ ædpöy u u î snömêş w äsˆ p h ê tˆnm õúz ç üî œ â tgsy òq lú ouø endobj obj endobj obj endobj obj stream xœåz ïï x xnûôcj l ºª ºf ÿ õù éøgí ærê çrî ß ù á ún å òçofbcìp cz îò ô á aç ümx ée là égº lh eq ùkkş ü í lhø º wz ekvğëlgñ jì k ú quñ yñ wsòtd vœşèšßñsî œlª ğnå švmçøí eóí e é ùlj ü w jzğè õ è v jké duwï x j ªyµrœ öñÿş ïù umôvßÿoîóı ø ø küë èèq çäõ şò ç ò ş pôdóäo êóæ áû exv dí ì xû ôivxåå c æ ó ug hdo tõ gqjfãş pœ endstream endobj obj endobj obj endobj obj stream rpb pg r g mõjyòä xööin kè ûfmş jõäføx åíõåïl sòl hµm hzéêäîn ü xlíok ç j rz ê í le àvn á ùp érqö áôq œôÿfçà c kíw âß š ô êağï şáät ybù l š ñøcô çt ç qw špm r ñ
232,Lobsters,formalmethods,CSE-Formal methods,Simulating memory models with herd7,http://diy.inria.fr/doc/herd.html,simulating memory model,part iii simulating memory model writing simple model sequential consistency total store order tso show last execution sequential consistency total order definition computing coherence order producing picture execution graph visualization software graph mode configuration file showing forbidden execution model definition overview identifier expression simple expression tuples explicit set value operator expression function call function local binding pattern matching tag pattern matching set parenthesised expression instruction binding binding check procedure definition call previous section show unshow directive iteration set candidate execution extension model inclusion conditional execution variant bell extension enumeration instruction model primitive library standard library coherence order fence usage argument option general behaviour search path configuration file postscript viewer engine control rule option discard observation control picture initwrites graphviz software change input configuration file file searching,part iii simulating memory model tool memory model simulator user may write simple single event axiomatic model run litmus test top model distribution already includes modelsthe author jade alglave luc maranget writing simple model section introduces cat language describing memory model cat language domain specific language writing executing memory model language perspective cat loosely inspired ocaml functional language similar syntax construct basic value cat set event include memory event also additional event fence event relation event sequential consistency simulator accepts model written text file instance sccat definition sequentially consistent sc model partialorder style sc include fencescat include coscat atomic empty rmw fre coe atom sequential consistency show smid si acyclic po fr rf co sm sc model illustrates feature model definition model file start tag sc also string double quote case tag includes special character space predefined binding po program order rf read predefined remaining two communication relation co fr computed included file coscat describe later see sec simplicity may well assume co fr predefined computation new relation relation binding name let construct new relation com union three predefined communication relation performance check relation po com ie union program order po communication relation required acyclic check given name suffixing name last feature used sec one run litmus test instance sb store buffering see also sec top sc model model sccat sblitmus test sb allowed state witness positive negative condition exists observation sb never output mainly consists list final state allowed simulated model additional output relates test condition one see test condition validate top sc appears list final state positive witness namely condition exists reflects nonsc behaviour see sec simulator work generating candidate execution given test candidate execution mean choice event program order po readfrom relation rf final writes memory last write given location case sb example get following four execution indeed choice program order po conditional jump example choice final writes either one store per location must coafter initial store pictured small red dot two read event location x respectively take value either initial store store program result four possible execution model sccat get executed four candidate execution three first execution accepted last one rejected present cycle po fr following diagram cycle obvious total store order tso however nonsc execution show machine whose memory model tso tso relaxes writetoread order attempt write tso model simply removing writetoread pair acyclicity check first attempt tso include coscat communication relation order event let comtso rf co fr program order order event let potso po w w r tso globalhappensbefore let ghb potso comtso acyclic ghb tso show ghb model illustrates several feature model definition new predefined set w r set read event write event memory event respectively cartesian product operator return cartesian product two event set relation intersection operator operates set relation result effect declaration let potso po w w r define potso program order memory event minus writetoread pairswe run sb top tentative tso model model sblitmus test sb allowed state ok witness positive negative nonsc behaviour accepted writetoread popairs participate acyclicity check effect allows last execution ghb ie potso comtso acyclic however model flawed still strict forbidding behaviour tso model accept consider test sbrfipos test stfwppc sec normalised name see sec test target following execution namely test condition exists specifies thread writes location x read value location x possibly store forwarding read value location thread writes read read x hence test derives previous sb adding load middle load satisfied local store seen running test top model target execution forbidden model sbrfiposlitmus test sbrfipos allowed state witness positive negative however running test litmus demonstrates behaviour observed machine arch mach sbrfiposlitmus test sbrfipos allowed histogram state ok witness positive negative condition exists validated conclusion tentative tso model strong following diagram picture ghb relation one easily see ghb cyclic whereas namely internal readfrom relation rfi create global order tso model hence rfi included ghb rephrase tentative tso model resulting new model second attempt tso include coscat communication relation order event let comtso rfe co fr program order order event let potso po w w r tsp globalhappensbefore let ghb potso comtso acyclic ghb show ghb observed rfi internal readfrom longer included ghb however rfe external readfrom still notice rfe rfi predefinedas intended new tentative tso model allows behaviour test sbrfipos model sbrfiposlitmus test sbrfipos allowed state ok witness positive negative indeed globalhappensbefore relation nolonger cyclic done yet model weak two aspect first semantics fence result test sbmfences allowed whereas forbidden purpose fence mfence one easily solves issue first defining mfence relates event mfence event poinbetween adding mfence definition potso let mfence po mfence po let potso po w w r mfence notice relation mfence defined two predefined set universal set event mfence set fence event generated mfence instruction alternative precise definition possible let memtomfence po mfence let mfencetomem po mfence let mfence memtomfence mfencetomem alternative definition mfence although yielding smaller relation equivalent original one purpose checking ghb acyclicitybut resulting model still weak allows behaviour model must reject sake single thread correctness following test corwr illustrates issue corwr mov eax x mov x mov ebx x exists test final condition target following execution candidate tso check acyclic potsocomtso suffice reject two absurd behaviour pictured execution diagram read allowed read poafter write b rfi included comtso read c allowed read initial value location x although initial write cobefore write b since po w r potsofor model rule untimely behaviour socalled uniproc check state execution projected event access one variable sc practice defined poloc po restricted event touch address ie po loc require acyclicity relation polocfrrfco tso case uniproc check somehow simplified considering cycle polocfrrfco already rejected main check model amount design specific check two relation global tso rfi po w r finally produce correct model tso third attempt tso include coscat uniproc check specialized tso irreflexive poloc r w rfi uniprocrw irreflexive poloc w r fri uniprocwr communication relation order event let comtso rfe co fr program order order event let mfence po mfence po let potso po w w r mfence tsp globalhappensbefore let ghb potso comtso show mfence ghb acyclic ghb tso last model illustrates another feature cat may also performs irreflexivity check keyword irreflexive sequential consistency total order definition illustrate another style model consider original definition sequential consistency execution sc exists total strict order event includes program order po read event read recent write event past ie read r location x read value stored smaximal write amongst writes location x sprecede r could generate total strict order amongst event filter scheduling order candidate according two rule abovethings bit complex due presence initial final writes ignored writes going integrate explicitlyinitial writes write event initialise memory location initial writes generated instruction test instead created machinery available model text set iwfinal writes may generated program instruction must ordered final write write phantom read performed program execution constraint final writes originates technique enumerate execution candidate actual execution candidate also include choice final writes location observed test final test outcome ie final value observed location settled executing model important accept execution yield different outcome may validate outcome rejected practice final write wf location x must follow writes x considering set final writes available cat model predefined set fw constraint final writes expressed relation let presc loc w fw fw loc predefined relation relates event access locationby contrast final writes initial writes generated program instruction possible order completely particular useful order initial writes different location initial write location x access location notice could include initial writes final writes slightly improve efficiencyfinally strict order order event topological order event generated thread implemented set iw ie complement set initial writes extends preorder presc generate topological order cat primitive linearisations let alls linearisations iw presc call linearisations e r e set event r relation event return set total strict order defined extend r notice r cyclic empty set returnedwe need iterate set alls construct alls important notice construct extends current execution candidate ie choice event plus choice two relation po rf candidate strict order word scope iteration remainder model text model execution terminates choice element alls model execution restarts construct variable bound next choice picked allsas first consistency check check includes program order empty po pocons notice check inclusion test emptiness relation difference operator remains check rf relation execution candidate one defined condition aim complement constraint initial writes must precede event location let loc iw iw observe longer total strict order however still total strict order restricted event access given location matter condition give value read regard sc model define rf readfrom relation induced follows let wrs w r loc writes past location let rf wrs wrs recent amongst definition twostep process first define relation wrs writes read location follow observe complementing initial writes achieve read r exists least write w w r wrs remains filter nonmaximal writes wrs definition rf mean difference operator check equality rf predefined part candidate execution rf double inclusion empty rf rf rfcons empty rf rf rfcons example show six attempt po compatible order nonsc outcome test sb figure figure failed attempt sc scheduling order observe attempt fail rf rf different diagramswe also show successful sc scheduling figure figure sc execution test sb reference provide complete model lamportcat sc l lamport style writes location x precede final write location x let presc loc w fw fw compute set total order extend presc program event let alls linearisations iw presc order alls check compatibility po empty po scpo add initial writes let loc iw iw define recent write past let wrs w r loc writes past location let rf wrs wrs recent amongst check equality rf empty rf rf rfcons empty rf rf rfcons computing coherence order model seen far include file coscat define coherence relation written co section describes file coscat skipped first reading user may find sufficient include filefor given location x coherence order total strict order write event location x coherence relation co union order location section show compute possible coherence order candidate execution seize opportunity introduce advanced feature cat language function pattern matching setspossible coherence order given location x totally arbitrary two aspect write event location x include initial write event location x initial write x must come first coherence order x one writes x performed test may declared final machinery prior model execution case final write x must come last coherence order x see sec detail initial final writeswe express two condition location program relation let loc iw wiw wfw fw predefined set iw fw set initial final writes respectively assuming wx set writes location x one compute set possible coherence order x linearisations primitive linearisations wx practice define function take set wx argument let makecox wx linearisations wx linearisations primitive introduced sec return topological sort event set wx compatible relation fact want compute set possible co relation ie union possible coherence order location x end use another cat primitive partition take set event argument return set set event sn si set event act location li course union si hence shall compute set wx set partition w w predefined set writes including initial writes combining effect partition linearisations primitive first define map function given set en function f return set f f en let map f let rec domap match e f e domap end domap map function written curried style one call map f parsed map f precisely leftmost function call map f return function return domap free variable f bound argument f definition map illustrate several new feature empty set constant set addition operator e return set augmented element e recursive function definition function domap recursive call pattern matching set construct similar ocaml pattern matching list discriminates empty nonempty e e set second case nonempty set expression evaluated context extended two binding binding variable e arbitrary element matched set binding variable e matched set minus arbitrary element generate set possible coherence order location x follows let allcox map makecox partition w notice allcox set set relation element set possible coherence order specific x still need generate possible co relation union possible coherence order location x done another cat function cross take set set sn argument return possible union built picking element si en en sn one may notice empty cross return one relation exactly empty relation ie neutral element union operator choice cross natural define cross inductively cross definition simply build cross building set union one relation picked one relation picked cross write cross first define classical fold function set given set en initial value function f take pair e argument fold computes f f f ein defines permutation index n let fold f let rec foldrec e match e e e foldrec e f e end foldrec function fold written curried style map notice inner function foldrec take one argument however argument pair gentle example fold usage could defined map let map f fun fold fun e f e example also introduce anonymous functionsas involved example fold usage write function cross let rec cross match empty relation let t cross fold fun r map fun t r end function cross recursive function set set code follows inductive definition given abovefinally generate possible co relation let allco cross allcox file coscat go iterating allco using x construct co allco see sec detail constructonce co defined one defines fr internal external variation co coherence relation let coi co int let coe co ext compute fr let fr co let fri fr int let fre fr ext predefined relation ext resp int relates event generated different resp thread producing picture execution simulator instructed produce picture execution picture instrumental understanding debugging model important understand produce picture default get picture one must instruct produce picture execution show option option accepts specific keywords default none instructing produce picturea frequently used keyword prop mean show execution validate proposition final condition namely final condition litmus test quantified boolean proposition instance exists end test sbbut enough user also specify picture save file dot format graphviz graph visualization software display one instructs save image dirname option dirname name directory must exists processing file namelitmus create file namedot directory dirname displaying image one us gv optionas example display image nonsc behaviour sb one invoke model show prop gv sblitmus result user see window popping displaying image notice got png version image follows model show prop tmp sblitmus dot tpng tmpsbdot sbclusterpng applied dot tool graphviz package using appropriate option produce png imageone may observe ghb arrow diagram result show ghb instruction end model file graph mode image much differs one sec describes execution reproduced fig figure nonsc behaviour sb allowed tso effect produce three style picture dot clustered picture dot free picture neato picture explicit placement event one thread column style commanded graph option accepts three possible argument cluster default free column following picture show effect graph style sb example graph clustergraph freegraph column notice used another option squished true much reduces information displayed node also notice first two picture formatted dot rightmost picture formatted neatoone may also observe graph column picture look exactly like fig instance ghb arrow thicker figure many parameter control neato dot many accessible user mean appropriate option intend describe however user reproduce style diagram manual using yet another feature configuration file contains setting option loaded conf name option manual mostly used doccfg configuration file file present distribution user use diagram style manual conf doccfg showing forbidden execution image produced displayed model executed consequence forbidden execution appear default consider instance test sbmfences mfence instruction used forbid sb nonsc execution running model conf doccfg show prop gv sbmfenceslitmus produce picture tso model forbids target execution sbmfencesto get picture run sbmfences top minimal model predefined model allows execution model minimal conf doccfg show prop gv sbmfenceslitmus get picture worth mentioning although minimal model allows execution final condition selects displayed picture specified show prop optionthe picture show mfence arrow fence relation displayed minimal model however show ghb relation minimal model know nothing display ghb could write another model file would check erased simulator provides simpler technique one instruct ignore either check invalid selection check skipchecks namen thus either following two command invalid model conf doccfg show prop gv sbmfenceslitmus skipcheck tso model conf doccfg show prop gv sbmfenceslitmus produce picture wish notice mfence ghb displayed instruction show mfence ghb fence relation shown default skipcheck tso work model name main check tso image barely readable graph many relation cluster free mode worth try command skipcheck tso model conf doccfg show prop graph cluster gv sbmfenceslitmus skipcheck tso model conf doccfg show prop graph free gv sbmfenceslitmus produce image namely command line option scanned lefttoright setting doccfg instance thick ghb arrow graph mode overridden model definition describe cat language defining model syntax language given bnflike notation terminal symbol set typewriter font like nonterminal symbol set italic font like vertical bar denotes alternative square bracket denote optional component curly bracket denotes zero one several repetition enclosed component parenthesis denote groupingmodel source file may contain comment ocaml type nested line comment starting running end line overview cat language much inspired ocaml featuring immutable binding firstclass function pattern matching etc however cat domain specific language important difference ocaml base value specialised set event relation event also tag akin c enumeration ocaml constant constructor first class function moreover event extracted set pair event element relation relationsthere two structured value tuples value set value notice primitive set event structured set event thing fact language prevents construction structured set event similarily structured set element relation relationsthere distinction expression evaluate value instruction executed effect model cat program sequence instruction startup predefined identifier bound event set relation event predefined identifier describe candidate execution sense memory model executing model mean allowing forbiding candidate execution identifier identifier rather standard sequence letter digit underscore character dot character minus character starting letter using minus character inside identifier may look bit surprising allow identifier polocat startup predefined identifier bound event set relation eventsthose predefined identifier first describe event candidate execution various set described first table figure figure predefined event set identifiernamedescription emptyset empty set event w write event r read event memory event w r iw initial writes feed read read initial state fw final writes writes observed end test execution b branch event rmw readmodifywrite event f fence event name specific fence event depend test architecture architecturefence set mfence sfence lfence ppc sync lwsync eieio isync arm dmb dmbst dsb dsbst isb mips sync dmbsy dmbst dmbst dsbst dsbst specific fence event set depends test architecture name always uppercase derive mnemonic instruction generates second table figure show nonexhaustive listother predefined identifier relation program order po refinement identifiernamedescription po program order instruction order lifted event addr address dependency address second event depends value loaded first read event data data dependency value stored second write event depends value loaded first read event ctrl control dependency second event branch controled value loaded commfirst read event rmw readexclusive writeexclusive pair relate read write event emitted matching successful loadreserve store conditional instruction atomic rmw instruction amo atomic modify relate read write event emitted atomic rmw instruction finally predefined relation describe execution candidate structure writetoread communication identifiernamedescription id identity relates event loc location event touch address ext external event different thread int internal event thread rf readfrom link write w read r taking value w additional relation defined library file written cat language see sec expression expression evaluated yielding value simple expression simple expression empty relation keyword identifier id tag tag identifier bound value either execution see predefined identifier sec model tag constant similar c enum value ocaml constant constructor tag must declared enum instruction go back enum tag sec tuples tuples include constant empty tuple constructed tuples exprn n word tuple size one syntax expr denotes grouping value exprexplicit set value explicit set written comma separated list element curly brace exprn n set homogenous sense set hold element typein case value exprk event result primitive event set case element relation result relation set event pair empty set empty set event empty relationoperator expression operator overloaded apply event set relation explicit set however nature operator apply relation sequence transitive closure set cartesian product additionally event context event set expected promoted singleton event set situation elementary relation relation context similarthe transitive reflexivetransitive closure expression performed postfix operator postfix operator performs relation inversion construct expr option evaluates union expr value identity relation notice postfix operator operate relation onlythere one prefix operator performs relation set complementfinally one last unary operator expr evaluate expr event set return identity relation setinfix operator union set addition sequence intersection set difference cartesian product infix operator listed order increasing precedence postfix prefix operator bind tighter infix operator infix operator rightassociative except set difference leftassociative cartesian product nonassociativethe union intersection difference operator apply relation kind set cartesian product take two event set argument return relationthe addition operator operates set value must set value event element relation operator return set augmented value new event set new relation exception argument addition operator also elementary relation realation yield relationfor record given two relation sequence defined x z x z z function call function call written function arity one application operator left implicit notice function application bind tighter binary operator looser postfix operator furthermore implicit application operator leftassociativethe cat language callbyvalue semantics effective parameter evaluated bound function formal parameter nary function encoded either using tuples argument curryfication ie function return function considering binary function former case function call written latter case function call written leftassociativity understood two form function call interchangeable using one depends definition functionfunctions function first class value reflected anonymous function construct fun pat expr function take one argument onlyin case argument tuple may destructured mean tuple pattern pat idn instance function take tuple relation set argument return symmetric difference fun b ab ba function usual static scoping semantics variable appear free function body expr bound value free variable function creation time result one may also write symmetric difference function follows fun fun b ab ba local binding local binding construct let rec binding expr bind name defined binding evaluating expression expr nonrecursive recursive binding allowed function binding id pat expr syntactic sugar id fun pat exprthe construct evaluates exprn bind name pattern patn resulting value binding pat expr follows pat expr must evaluate empty tuple pat id id id bound value expr pat proper tuple pattern idn n expr must evaluate tuple value size n vn name idn bound value vn exception case expression expr may evaluate elementary relation value behaves tuple arity twothe construct computes least fixpoint equation patn exprn bind name pattern patn resulting value least fixpoint computation applies set relation value using inclusion ordering function using usual definition ordering pattern matching tag syntax pattern matching tag value match expression computed follow first evaluate expr value v must tag v compared tag tagn order tag pattern tagi equal value match value corresponding expression expri otherwise value match value default expression exprd default clause exprd optional match construct may failpattern matching set syntax pattern matching set value match expression computed follow first evaluate expr value v must set value v empty set value match value corresponding expression otherwise v nonempty set let element v vr set v minus element value match value context bound bound vrthe construct also also applies primitive event set relation matched expression nonempty bound element event element relation respectively one easily rebuilds event set relation instance using singleton construct parenthesised expression expression expr value expr notice parenthesised expression also written begin expr end instruction instruction executed effect three kind effect adding new binding checking condition specifying relation shown picture binding let let rec construct bind value name rest model execution see subsection binding section additional information syntax semantics bindingsrecursive definition computes fixpoints relation instance following fragment computes transitive closure communication relation let com rf co fr let rec complus com complus complus notice instruction let complus rfcofr equivalent notice assumes recursive definition wellformed ie yield increasing functional result illformed definition undefinedalthough feature recursive function used compute transitive closure due lack construct say test relation equality nevertheless one write generic transitive closure function using local recursive binding let tr r let rec r notice instruction let tr r r equivalentthanks pattern matching construct recursive function useful compute set tag instance definition function power compute power set let rec power match e let rec adde rr match rr r rr r e r adde rr end adde power end check construct evaluates expr applies check check six check three basic acyclicity keyword acyclic irreflexivity keyword irreflexive emptyness keyword empty negation check succeeds execution go otherwise execution stopsthe performance check optionally named appending id feature permit perform check user thanks skipchecks id command line optiona check also flagged prefixing flag keyword flagged check must named construct failed flagged check stop execution instead successful flagged check recorded name machinery handle flagged execution later flagged check useful model define condition execution impact semantics whole program typically case data race let u assume relation race defined nonempty race relation execution would make whole program undefined would write flag empty race undefined indicate output execution flagged undefinedprocedure definition call procedure similar function except result body procedure list instruction procedure called effect executing instruction intended usage procedure define check executed later however body procedure may consist kind instruction notice procedure call named keyword intention control performance procedure call command line exactly check see example procedure one may define following uniproc procedure argument procedure uniproc let com fr rf co acyclic com po end one perform acyclicity check see previous section executing instruction call uniproc result execution stop acyclicity check fails continue otherwiseprocedures lexically scoped function additionally binding performed execution procedure call discarded procedure return effect performed namely flag show retainedshow unshow directive construct show id id unshow id id take nonempty comma separated list identifier argument show construct add present value identifier shown picture unshow construct remove identifier shown relationsthe sophisticated construct evaluates expr relation shown picture label id hence show id viewed shorthand show id iditeration set forall iteration construct permit iteration check fact kind instruction set syntax forall id expr instruction end expression expr must evaluate set list instruction instruction executed binding name id element practice failed check stop execution amount check conjunction check performed instruction element similarly procedure call binding performed execution iteration discarded iteration end effect performed retainedcandidate execution extension construct permit extension current candidate execution one binding syntax id expr expression expr evaluated set remainder model executed choice element e context extended binding name id e example construct usage described sec inclusion construct include filename interpreted inclusion model contained file whose name given argument include instruction practice list intructions defined included model file executed string argument delimited double quote course part filename file searched according rule see sec performed subsequent include instruction executed warning issuedconditional execution conditional instruction allows control model execution setting variant variant predefined tag set command line configuration filesthe construct variant tag else end behaves follows variant tag set possibly empty list instruction executed otherwise optional possibly empty list instruction executed tag recognised variant tag warning issued nonexistent variant assumed unsetbell extension user attain genericity model defining bell file addendum rather preamble cat fileenumerations enum construct defines set enumerated value tag syntax construct two main effect first defines tag tagn notice tag exist defined evaluating expression tag error without prior enum defines tag tag tag typed sense belong tag type id tag different type member set second effect construct define set tag id set tag listed construct enum construct performs binding id tagn scope special case enumeration construct enum scope must used define hierarchical model nvidia gpus enum scope declaration must paired two function narrower wider implement hierarchy amongst scope example enum scope discography ii iii iv let narrower match discography ii iii iv end let wider match discography ii discography iii discography iv discography end define five scope first one discography wider onesinstructions predefined set event w r rmw f b annotated userdefined tag see sec construct take identifier predefined set possibly empty square bracketed list tag primitive yield given tag set instruction bearing annotation previously declared enumeration type primitive yield given tag relation instruction todo model model list instruction preceded optional architecture specification optional comment architecture specification name follows convention identifier identifier valid architecture name ppc etc silently ignored following modelcomment either name string enclosed double quote one name present act tentative architecture specification comment present model architecture specification checked test architecture see also option archcheckmodels operate candidate execution see sec instruction executed sequence one instruction stop end instruction list latter case model accepts execution accepted execution passed rest engine order collect final state location display picture notice modelcomment appear picture legend primitive todo library standard library standard library cat file stdlibcat model include default defines convenient relation thus available model identifiernamedescription poloc po restricted address event po touch address namely po loc rfe external readfrom readfrom different thread namely rf ext rfi internal readfrom readfrom thread namely rf int coherence order model complete list communication relation would also include co fr defined including file coscat see sec identifiernamedescription co coherence total strict order writes address fr fromread link read r write coafter write w r take value coi fri internal communication communication event thread coe fre external communication communication event different thread notice internal external subrelations co fr also defined fence fence relation denote presence specific fence barrier inbetween two event defined including architecture specific file filerelations mfence sfence lfence ppcfencescat sync lwsync eieio isync ctrlisync armfencescat dsb dmb dsbst dmbst isb ctrlisb mipsfencescat sync word model say arm machine include following instruction include armfencescat notice power ppc resp arm architecture additional relation ctrlisync re ctrlisb defined relation ctrlisync read control isync mean branch instruction generates second event additionnaly contains isync fence preceeding instruction reference possible definition ctrlisync let ctrlisync ctrl isync po one may define fence relation including file fencescat result fence relation relevant architecture test simulated properly defined irrelevant fence relation empty relation feature prof convenient writing generic model apply several concrete architecture usage argument command handle argument like interprets argument file name file either single litmus test extension litmus list file name prefixed option many command line option describe useful one general behaviour version show version number exit libdir show installation directory exit name add directory name end herd search path given directory start taken relative library directory v verbose repeated increase verbosity q quiet suppress diagnostic message conf name read configuration file name configuration file simple syntax line opt arg effect commandline option opt arg dest output file directory dest notice dest must exist moment may output one dot file per processed test file test baselitmus named basedot default generate dot file suffix suf change name dot file basesuffdot useful several dot file derive test default empty string suffix gv fork gv postscript viewer display execution diagram evince fork evince document viewer display execution diagram option provides alternative gv viewer dumpes bool dump genererated event structure exit default false event structure dumped dot file whose name determined usual see option suffix optionally event structure displayed gv option unroll int setting unroll n performs backwards jump n time workaround one main limitation really handle loop default hexa bool print number hexadecimal default false number printed decimal engine control main purpose run test top memory model given test performs three stage process generate candidate execution candidate execution run model model may reject accept execution candidate execution model accepts record observed location instructed diagram execution describe option control three stage model filename cat select model option accept one tag one file name extension cat tag instruct select internal model file name read model definition documented model tag model power minimal minimal model allows execution uniproc uniproc model check singlethread correctness fact accepts potentially infinitely many model model given text file adhoc language described sec distribution includes several model minimalcat uniproccat text file version homonymous internal model may produce picture show different relation distribution also includes model variety architecture several model c language model file searched according rule configuration file architecture default model armcat model arm ppccat model ppc allinvalidnone let additional execution reach final stage engine option permit user generate picture forbidden execution otherwise rejected early stage engine see sec namely default none let valid according active model execution behaviour option differs internal text file model internal model tag let execution go tag invalid reject execution violate uniproc letting forbidden execution go text file model tag invalid let execution go model precise control execution reach final phase achieved option skipcheck see next option default noneskipchecks namen option applies text file model instructs ignore outcome given check option operate check must named model file name construct see sec notice argument skipcheck option cumulate skipcheck skipcheck act like skipcheck strictskip bool setting option strictskip true change behaviour previous option skipcheck let execution go skipped check yield false unskipped check yield true option come handy one want observe execution fail one several check passing others default falseoptace bool optimise axiomatic candidate execution stage enabled optace true generate candidate execution fail uniproc test default true internal model except minimal model false text file model notice model uniproccat model minimalcat optace true yield identical result second faster setting optace true lower execution time significantly one pay attention design model forget uniproc conditionarchcheck bool control compatibily check test cat file architecture precisely cat file specific architecture running test different architecture result cryptic error message situation compatibility check yield understandable diagnostic default trueshow propnegallcondwitnone select execution diagram picture display generation execution diagram shown according final condition test final condition quantified boolean proposition exists p exists p forall p semantics recognised tag follows prop picture execution p true neg picture execution p false picture execution cond picture execution validate condition ie p true exists forall false exists wit picture interesting execution ie p true exists exists false forall none picture execution default noneinitwrites bool represent init writes plain write event default false except specifically tagged generic model see model option sec tagn activate variation model variation minor change instruction semantics used experimental purpose remain undocumented exception tag mixed command mixedsize mode mixedsize mode appropriate mixedsize test performs access different size well indexed accessesdiscard observation option intentionally omit final state would normally generate speedcheck falsetruefast enabled speedcheck true speedcheck fast attempt settle test condition generate subset execution named interesting place execution setting speedcheck fast additionally stop soon condition exists p validated soon condition exists p forall p invalidated default falsenshow int stop int picture collected default collect specified see option show picture control dot picture option control content dot imageswe first describe option act general level graph clusterfreecolumns select main mode graph see sec default cluster dotmode plainfig setting dotmode fig produce output includes proper escape sequence translating dot file fig file eg dot default plain dotcom dotneatocirco select command format graph displayed gv option default dot cluster free graph mode neato column graph modeshowevents allmemnoregs control event pictured picture event mem picture memory event noreg picture event except register event ie memory fence branch event default noregsshowinitwrites bool show initial write event existing see option initwrites picture default truemono bool setting mono true command monochrome picture option act upon default color selection thus effect color given explicitely edgeattr optionscale float global scale factor graph column mode default xscale float global scale factor graph column mode x direction default yscale float global scale factor graph column mode direction default showthread bool show thread number figure cluster mode event thread clustered thread cluster label free mode po edge suffixed thread number column mode columhs header node show thread number default true texmacros bool use latex command text picture activated showthread true thread number shown myth n assembler instruction location node argument asm command user responsability define command latex document include picture possible definition newcommand myth thread newcommand asm texttt default false option control picture legend showlegend bool add legend picture default legend show test name comment executed model comment first item model syntax see sec default true showkind bool show test kind legend kind derive quantifier test final condition kind allow exists kind forbid exists kind require forall default false shortlegend bool limit legend test name default false option control shown node size ie event pictured squished bool setting squished true drastically limit information displayed graph node usually wanted mode free column default false fixedsize bool setting meaningfull column graph mode squished node set fixedsize true force node width space column may sometime yield nice edge routing default false extrachars float setting meaningful column graph mode squished node size node fixed ie fixedsize false default computes width node counting caracters node label scaling result font size setting extrachars v command adding value v scaling negative value course accepted default showobserved bool highlight observed memory read event star memory read observed value read stored register appears final state default false bracket bool show bracket around location default false list option offer control edge shown recall main control shown unshown edge show unshow directive model definition see sec however edge controled option configuration file unshow option prof convenient showpo bool show program order po edge default true default false showinitrf bool show readfrom edge initial state default false showfinalrf bool show readfrom edge final state ie show last store location default false ie show last store location default false showfr bool show fromread edge default true doshow namen show edge labelled namen setting applies name bound model definition unshow namen show edge labelled namen setting applies last momement thus cancel show directive model definition doshow command line option option offer control attribute defined graphviz software documentation notice controlled attribute omitted dot file setting present instance absence spline tag option generate definition spline attribute thus resorting dot tool default following option accept none argument restores default behaviour spline splinetruelinefalsepolylineorthocurvednone define value spline attribute tag replicated output file value attribute except none margin floatnone specifies margin attribute graph pad floatnone specifies pad attribute graph sep stringnone specifies sep attribute graph notice argument arbitray string allow dot general syntax attribute fontname stringnone specifies graph fontname attribute fontsize intnone specifies fontsize attribute n text graph edgefontsizedelta int option edgefontsizedelta set fontsize attribute edge nm n argument fontsize option default option effect fontsize unset penwidth floatnone specifies penwidth attribute edge arrowsize floatnone specifies arrowsize attribute edge edgeattr label attribute value give value value attribute attribute edge labelled label powerful option permit alternative style edge instance ghb edge diagram document thick purple blueviolet arrow thanks setting edgeattr ghb color blueviolet edgeattr ghb edgeattr ghb notice setting performed edgeattr option override setting option default change input option one see sec name file run test whose name listed file rename file change test name kind file change test kind amonts changing quantifier final condition kind allow exists kind forbid exists kind require forall conds file change final condition test far useful option combination option show prop permit fine grain selection execution picture configuration file syntax configuration file minimal line key arg interpreted setting value parameter key arg parameter corresponding option usually key except single letter option v whose parameter verboseas command line option processed lefttoright setting configuration file option conf overridden later command line option configuration file used mostly controling picture configuration file present distribution example configuration file apoilcfg used display image free mode main graph mode graph free show memory event showevents memory minimal information node squished true show legend showlegend false configuration commented line comment start configuration file come handy eyeproof model output even relatively complex test iriwlwsyncs iriwsyncs conf apoilcfg show prop doshow prop gv iriwlwsyncslitmus invalid conf apoilcfg show prop doshow prop gv iriwsyncslitmus command line show prop instructs produce image execution validate final test condtion doshow prop instructs display relation named prop spite unfortunate name clash run two test top default power model computes amongst others prop relation model reject execution cyclic prop one see relation prop acyclic iriwlwsyncs cyclic iriwsyncs notice used option invalid case iriwsyncs would otherwise image file searching configuration model file searched first current directory search path directory specified setting shell environment variable herdlib herd installation directory defined compiling
233,Lobsters,formalmethods,CSE-Formal methods,"Static Analysis of Variability in System Software: The 90,000 #ifdefs Issue",https://www.usenix.org/system/files/conference/atc14/atc14-paper-tartler.pdf,static analysis variability system software ifdefs issue,,obj endobj obj filterflatedecodeid index info rlength rsize stream b e zq endstream endobj startxref eof obj stream b c cp p l v endstream endobj obj endobj obj font procset pdftext property rotate typepage endobj obj stream g tp c 첦ݏa n zàx dyxf j e endstream endobj obj stream enesysrtxmi gpl w v h endstream endobj obj stream endstream endobj obj stream pa endstream endobj obj stream k endstream endobj obj stream f e jm j endstream endobj obj stream enesystxsy asteriskmathsimilarversion gpl cp k endstream endobj obj stream endstream endobj obj stream r ky
234,Lobsters,formalmethods,CSE-Formal methods,Verifying Popcount,https://blog.regehr.org/archives/1667,verifying popcount,discipline programming acsl wrong subtle way wikipedia faster much harsher algorithm,popcount function return number set bit argument showing popcount implementation claim become one favorite example use need quickly show student reason program mathematically something like selection sort probably standard example sorting get subtlety rather reserve second example popcount easy whole example done half hour programming language particular algorithm matter much use perhaps simplest popcount implementation c c int popcount x int c int c x x return c work course scan entire argument incrementing counter time find set bit show work formal fashion use method le discipline programming allow u combine obvious effect individual statement hopefully desired highlevel property might well annotate program right int popcount x int c int c x x c popcount origx return c used couple trick need fully explained giving example student used kind reasoning first since x modified program executes used origx shorthand original value x passed argument syntax trick learned acsl second used popcount function mathematical specification popcount completely different thing c code trying verify consistently applying correct rule mathematical programmatic element straightforward would hope fact quite result bad old day nonmechanized program verification wrong subtle way make proof go need find right loop invariant statement true loop executes also true every loop iteration trick explaining task student helping realize simple example like understand algorithm work effectively already know loop invariant need help teasing usable form one stumbling block every loop many invariant example c helpful avoid lot silly loop invariant observing right invariant strong enough imply correctness criterion program also weak enough already true first loop iteration found negative constraint like helpful student trick course capture abstract fact held balance loop modifies piece program state make lecture like work need avoid appearance pulling fact thin air defeat entire purpose discussion student walk away feeling like magical step middle anyway hook crook need get audience realize key algorithm loop invariant c popcount x popcount origx point hump mark code int popcount x int c c popcount x popcount origx int c popcount x popcount origx c x x c popcount x popcount origx c popcount x popcount origx c popcount origx return c used question mark indicate proposition still doubt broken problem manageable piece visit turn loop invariant true loop executes c x origx see loop invariant preserved loop body analyze two case x either zero one zero c unchanged also clearly shifting x right one place change popcount x c incremented one shifting x right one place decreased popcount one see either way invariant maintained prove loop invariant implies overall correctness condition must observe x shifted right time sort situation better clear rule shifting signed v unsigned value c c course skipped lot smaller step argument capture essence algorithm work presenting particular algorithm safely skip termination proof since modified loop body entertaining variant kernighan popcount int popcount x int c x x x c return c use post feel like useful show analysis case simpler algorithm wikipedia faster much harsher algorithm one used practice processor native popcount instruction anyway presented material software engineering class yesterday realized used example couple time seemed worth writing
235,Lobsters,formalmethods,CSE-Formal methods,A Complete Formal Semantics of x86-64 User-Level Instruction Set Architecture,http://fsl.cs.illinois.edu/index.php/A_Complete_Formal_Semantics_of_x86-64_User-Level_Instruction_Set_Architecture,complete formal semantics userlevel instruction set architecture,complete formal semantics userlevel instruction set architecture sandeep dasgupta daejun park theodoros kasampalis vikram adve grigore rosu pdf slide pdf semantics doi bib,complete formal semantics userlevel instruction set architecture fsl complete formal semantics userlevel instruction set architecture sandeep dasgupta daejun park theodoros kasampalis vikram adve grigore rosu acm pp abstract present complete thoroughly tested formal semantics date semantics faithfully formalizes nondeprecated sequential userlevel instruction haswell instruction set architecture total instruction variant corresponding mnemonic semantics fully executable tested instructionlevel test case gcc torture test suite extensive testing paid revealing bug reference manual existing semantics also illustrate potential application semantics different formal analysis discus useful processor verification pdf slide pdf semantics doi bib
236,Lobsters,formalmethods,CSE-Formal methods,Turing-Completeness Totally Free,https://personal.cis.strath.ac.uk/conor.mcbride/TotallyFree.pdf,turingcompleteness totally free,,obj length filter flatedecode stream ә oj prdė b xϭ ji l p ww h x e zz endstream endobj obj length filter flatedecode stream p k nddf ba xx
237,Lobsters,formalmethods,CSE-Formal methods,Runway: a tool for distributed systems design,https://runway.systems/,runway tool distributed system design,,
238,Lobsters,formalmethods,CSE-Formal methods,Verifying Concurrent Message-Passing C Programs with Recursive Calls (2006),https://research.cs.wisc.edu/wpis/papers/tacas06.pdf,verifying concurrent messagepassing c program recursive call,,obj length filter flatedecode stream n oty ml g e
239,Lobsters,formalmethods,CSE-Formal methods,An Empirical Evaluation of Automated Theorem Provers in Software Certification (2005),https://ti.arc.nasa.gov/m/profile/edenney/papers/ijait.pdf,empirical evaluation automated theorem provers software certification,,obj stream r caн ag n vb
240,Lobsters,formalmethods,CSE-Formal methods,Specifying and Verifying Concurrent C Programs with TLA+,https://cedric.cnam.fr/fichiers/art_3439.pdf,specifying verifying concurrent c program tla,,obj stream q wu ϭ efm f h pg dˉ bc g 鴋 endstream endobj obj endobj obj stream l ט j mq
241,Lobsters,formalmethods,CSE-Formal methods,Rust: beyond the typechecker,https://blog.merigoux.ovh/en/2019/04/16/verifying-rust.html,rust beyond typechecker,prosecco team karthikeyan bhargavan jonathan protzenko servo know program correct admits curryhoward correspondence plan bringing verification rust developer rustbelt developed frontend subset rust symbolic execution discussed f oxide case study bloom filter servo conclusion future work oxide rustbelt rust formal method group,post different previous one since going present early result work phd student prosecco team inria paris supervision karthikeyan bhargavan jonathan protzenko indeed goal bring rust power deductive verification technique improve level assurance one correctness program far present two compelling case study servo showcase using verification technique look like know program correct first understand mean program correct usually program tested set selected input expected output output one test case match little bit confident program correct sure work situation test case missed corner case algorithm one way increase confidence test program systematic way instance unit testing measuring code coverage making sure let u say testing function fn foo x unit testing mean writing test every subfunction used foo code coverage foo mean test case explore branch code foo foo contains test x mean least one test case x one x even code coverage guarantee test reach program state could cover bug overflow bug always detected testing example testing program systematic way timeconsuming requires programmer create mental model code work order create test case relevant possible test written methodology two correlated outcome programmer thought behavior code combination input variable level assurance correctness code high enough production release however method tell missed something even carefully test code prevent certain category bug always possibility bug category remains hidden somewhere mark harman presented sapiens sophisticated analysis tool detect fix bug facebook codebase however admits static analysis machine learning technique used sapiens far devoted fix null pointer related bug category bug exist rust program simply write program contains nullpointer error indeed option type force declare writing program value none value making sure think beforehand rust compiler guide thinking happens none value inside program combination input value thanks mechanism care anymore null pointer error testing correctness program see type system rejecting compilation time program susceptible buggy remove whole category bug way enabling resource testing advanced correctness property program specificity type system capable guaranteeing program memory safe datarace free two property associated category bug dreaded notoriously hard debug c c typechecking algorithm sure claim true combination input take another example build option type fn bar x option option match x x none x x x none none may already noticed program incorrect indeed rust compiler report error nonexhaustive pattern none covered match x pattern none covered typechecker know missed pattern actually typechecker try prove x type option function return value type would prove property mathematical setting simply considering case associated option either none two case two different value case total since match statement one case missing example show correspondance code mathematical concept idea known curryhoward correspondence foundation modern programming language design research goal field computer science get rid category bug proving absence program allow programmer specify correctness program thanks expressive mathematical theory plan bringing verification rust developer multiple way produce software verified partially totally lot successful technique involve writing program highlevel specification language know exactly every language construct behaves however rust designed goal mind lack complete official language formalisation rustbelt project brilliantly started tackle problem proving unsafe part standard library put jeopardy property safe code using standard library enjoy recently team developing viper verification framework developed frontend subset rust allows automatic verification memory safety arithmetic property internally viper us verification technique called symbolic execution build proof completely free user indication viper also us different verification technique phd focused deductive verification setting every function program precondition set thing need true function called postcondition set thing need true end function verification consists proving body function make postcondition true supposing precondition true could precondition postconditions specified rust syntax detail discussed could look like struct point x fn isdiagonal p point bool px py requires isdiagonal p ensures isdiagonal newp fn double p point newp point point x px px py function isdiagonal specification function double intended executed rather serf mathematical description function prove postcondition need prove py px px assumption px py rather building ad hoc verification framework rust planning use f semiautomatic proof assistant based deductive verification us theorem prover alleviate proof burden user since rust typechecker powerful already partially verified thanks project like rustbelt focus verifying property captured type system rust specifically full functional correctness property like arithmetic correctness inbounds array access state machine correctness functional correctness respect abstract specification security property main phd work produce tool rox likely integrated form rust compiler translate rust program f code later verified automatically additional f user annotation rust expressive sophisticated use reasonable subset allows program meaningful enough verification relevant subset probably built upon oxide new formalisation focus singlethreaded safe code using selected primitive standard library far produced two case study showcase work could improve assurance correctness realworld rust program case study textinput bloom filter two case study taken servo project new parallel browser engine written rust sponsored mozilla available case identified piece code could benefit verification manually translated rust code functionally equivalent pure f code proved property f code increase confidence rust code plan automate translation later case study help evaluate approach could work diving compiler development two case study presented two separate post conclusion future work two case study helped identity verification could benefit realworld piece rust code property could specified lightly inside rust proven automatically others require knowledge proof assistant like f code need confidence level requiring verification time systematic testing enough however verification could sometimes faster systematic testing offer peace mind testing never provide advantage method incremental start codebase typechecks go proving one property invariant time different verification technique symbolic execution deductive verification advantage drawback depend want prove important future rust plugin verification allows target different verification framework planning use oxide semanticfull intermediate language accessible rust hir making plaftorm later translation goal work foundational sense trying verify property related type system rust intend tackle difficult problem interaction unsafe safe rust code rustbelt correct way rather focus phd go beyond typechecker enable gradual verification higherlevel property rust code example seen case study getting formal method rust drawn attention number researcher company gathered rust formal method group hope future work help rust community get familiar verification technique efficiently used increase level confidence correctness various rust program
242,Lobsters,formalmethods,CSE-Formal methods,tiny-tlaplus-examples,https://github.com/lostbearlabs/tiny-tlaplus-examples,tinytlaplusexamples,tinytlaplusexamples description list example contributing,tinytlaplusexamples description repo contains small example tla functionality application intended help learn tla sophisticated example see list example tla work modeling system via state machine model actual state machine way generated state graph compare machine modeling safety look like validate correctness procedural algorithm correctness look like model concurrent system concurrency safety correctness look like specify temporal condition correctness use tla validate formula predicate logic correctness use tla find deadlock concurrent system concurrency liveness look like two process interact incorrectly due race condition concurrency safety one module use operator defined another module module one module parameterize andor namespace operator defined another module module basic functional list operation headtailappendlenreverse sequence sequence recursion contributing contribution welcome please make sure example small put example subfolder readmemd file example use readme file instead putting documentation spec easier explore github soon user navigates folder reading documentation browser rather navigate individual spec file name subfolders example using existing pattern specname folder specnametla tla file
243,Lobsters,formalmethods,CSE-Formal methods,Explaining formal proofs,http://boxbase.org/entries/2019/apr/15/explaining-formal-proofs/,explaining formal proof,explaining formal proof symbolic manipulation computation formal proof formal proof curryhoward correspondence hoare separation logic moduler arithmetic system correspond type example proving thing midconclusions would want,explaining formal proof tiresome boring last week let discus formal proof verification thing nt understand told tendency declare programming logic type thing academic computer science correspondence observed claim confuse conflate thing asserting programming mathematics logic symbolic manipulation computation told something mathematical lost view formal mathematics computation calculating manipulation syntactic object make sense let say multiply left number divide right syntactic manipulation add remove zero symbol clause conclude keep value identity multiplication eg operation multiplication apply operation calculation manipulation syntactic object therefore make sense also extend cover counting object abacus bead board taken symbol standing something rather directly thing care computer merely manipulate symbol well come losing something mathematical nt agree even took equivalence proof program fact still would nt treat whole mathematics computation even computation wrote could recognize strawman even thinking stupid strawman count cow actually using cow count curryhoward correspondence restricting think thing term computation formal proof formal proof finite sequence formula formula axiom follows use rule inference mechanically check proof valid compose together simplify curryhoward correspondence take definition formal proof compare definition machine code find get similar finite sequence instruction inference rule encode formula every combination instruction form valid program similar way check validity proof using hoare separation logic apply reasoning ordinary program say want add two number multiply riscv take equation c x assuming x want obtain value c equation satisfied x p c x solve take riscv instruction related discard operation discus immediate field address size limitation variable refer number within moduler arithmetic system additionally provide discardoperation remove variable present actual instruction set keeping x add z x zxy x mul z x zx x addi z x c zxc x discard x construct following derivation produce program satisfies formula use x add w x discard x wxy addi g zero wxy mul z w g discard g w z xy formula line correspond type may seem bit weird xy possibly refer type data type collection value formula z xy describe collection well describe single value construct multiple kind correspondence usually correspondence presented intuitionistic logic typed lambda calculus really system see study subject example proving thing go compute proof nt mean coerced computation try provide example examining simple thing could build example ended somewhat le obvious question exist numerical base determine whether number oddeven examining lowest digit exists take numerical base conclude b nat x nat even x even ldigit x b number defined pair lower digit higher digit digit x b ldigit x b b rdigit x b next take rule applying even even x even x even x even x even x even take additional work effort ensure definition match peano representation axiom even correct assume correct following even x even ldigit x b let l ldigit x b let r rdigit x b even l b r even l let le even l let even b r le le let le even l let even b even r le le assume even l truefalse assume le true let even b even r true assume le false let even b even r false see expression reduces following could probably also deduced even b even r learned higher digit disregarded parity base even could collect proof write program program compiles know proof correct would nt likely anything program asit note carefully aware proven nt prove anything whether conclude result examining whether lowest digit even also note proof assumption give cue prove first place midconclusions hopefully see program indeed lot like proof every sense correspondence ca nt wetpaper claiming curryhoward correspondence taken far formula proposition seem form following purpose proposition roughly encode know problem hand thing know evaluate program cue available solve problem describe constraint insisted must hold let encode goal strive solve would want given programmatic presentation similar logic interested formal proof formal verification understand still bad error type formula equation wrong start solving wrong problem nt get anything python assembly code provides use illustrate motivation little story got incredibly complex machine juggle ball observing notice certain ball always go hoop let depend place shutter hoop discard ball color nt like sometimes ball nt go hoop right color everything work nobody care brew coffee balljuggler day ball nt go hoop wrong color result ball floor coffee machine reduced molten plastic flowing table python experience fun get bored formal verification nt need assume always happens observed least choice keeping marble bag instead ask system whether observation true first place describe program want happen often saying thing like interpreted python bad programming language nt used wrong conclusion use crutch use even shittier language even whole type theory nothing argument go preference static dynamic type checking really want thing stop running well get inconvenient deal consequence running program plain static typing likely simpleminded achieve retaining practicality dynamic typing achieve alone idea around proof theory proof search hold key achieve though
244,Lobsters,formalmethods,CSE-Formal methods,Software Verification - An Overview of the State of the Art,https://www.sosy-lab.org/research/prs/2019-04-09_ETAPS19-Software-Verification_Dirk.pdf,software verification overview state art,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream p k e ny
245,Lobsters,formalmethods,CSE-Formal methods,Using TLA+ to Model Cascading Failures,https://medium.com/@bellmar/using-tla-to-model-cascading-failures-5d1ebc5e4c4f,using tla model cascading failure,modeling discontent example one naive cluster example load balancing e example autoscaling buildkite misconfigured setting triggered failure notice otherwise healthy server build model using modeling part development process technology selection monitoring alerting strategy slos model look github hillel wayne go buy book,tlais traditionally used model algorithm power distributed system however engineering team build message queue install configure multiple solution developed people biggest threat team solution interact together scaletypically engineering team search threat live failure test either running extensive performance test special testing environment actually sabotaging infrastructure trigger response ala chaos monkey great practice somewhat resource intensive resource intensive organization tend put offmodeling discontentsthere popular saying statistic model wrong usefuli played around tla curious could used model interaction system well enough catch kind complex failure happen distributed system chained together sure possible reach math proof level accuracy model real life system built reflect eager trythat said purpose type modeling build perfect system help team define clarify assumption kind modeling force team ask exactly various product service using interact help find place actually know expected behavior useful minimizing complex failure totally eliminate itthe hard thing modeling figuring simplify specify whole point uncover detail retrospect seem obvious otherwise top mind one try capture every detail model likely complex runexample one naive clusterlet start basic situation three vms finite amount resource think memory cpu io frank need level specificity important thing resource exhausted single vm longer healthywe start something like module provisioningnaive extends tlc integer sequencesvms algorithm provisioningvariables cluster v vms define servershealthy vm vms cluster vm define end algorithm model going use represent resource use percentage could use would increase amount state tla check rather dramatically without really providing additional value way tla work run possible set input looking place requirement defined assertion invariant temporal property violated unlikely model input produce error input already catch take opportunity simplify use define invariant called servershealthy tell tla every server cluster resource use initialize server resource use start great example model checking lead interesting conversation really know given architecture know spin new server using memory number also number accurate would figure tracking time anyway let say decide initial state utilization need learn think system system algorithm instead environment although middle outage complex failure might seem like thing happening random reality system defined set rule govern behavior choice system hand defined set rule govern behavior choice exact set input unexpected make behavior randomwe want first model naive going define incident series event change amount resource used one vms think process eating cpu request using memory whateverevents target vms size defines event target one possible three vms already defined size range increasing resource use increasing also define incident set four event worry get see altogether one file endincidents set set x set x set x set incident incident event four pretty much arbitrary number point want see multiple incoming processesrequests affect vms need one event incident combination tla consider longer full model take run settle four sweet spot enough event see problematic behavior much need grab coffee come back check model resultsnow meat potato algorithm event occurs increase resource use one vmsmacro triggerevent event begin cluster eventtarget cluster eventtarget eventsizeend macro begin incident curr head incident incident tail incident triggerevent curr end end algorithm macro triggerevent want add complexity soon breaking keep thing clean full code look like module provisioningnaive extends tlc integer sequencesvms incident set set x set x set x setevents target vms size algorithm provisioningvariables incident incident event cluster v vms curr helper current eventdefine servershealthy vm vms cluster vm define macro triggerevent event begin cluster eventtarget cluster eventtarget eventsizeend macro begin incident curr head incident incident tail incident triggerevent curr end end algorithm running produce sensible predictably uninspiring result finished computing initial state distinct state generatederror invariant servershealthy violatederror behavior point incident target size target size target size target size curr pc cluster state action line col line col module provisioningnaive incident target size target size target size curr target size pc cluster state action line col line col module provisioningnaive incident target size target size curr target size pc cluster tla let u know three vms resource use process increase resource use followed another increase resource server result vm something would need build model figure helpful demonstrating concept using tla model system integrationthe core problem model capture essential component behavior magical load balancer apparently logic defining vms get traffic process consuming resource indefinitelylet change thatexample load balancingto add load balancer mix first going change vm name integer particular reason identifier string except made code bit easier read changing integer modeling round robin load balancer becomes matter counting three againwe need event directed specific vm anymore get rid add basic conditional logic triggerevent model directs next event next vm round robin rotation altogether module provisioningload extends tlc integer sequencesvms incident set set x set x set x setevents size algorithm provisioningvariables incident incident event cluster v vms curr helper current event rrobin define servershealthy vm vms cluster vm define macro triggerevent event begin cluster rrobin cluster rrobin eventsize rrobin rrobin else rrobin rrobin end end macro begin incident curr head incident incident tail incident triggerevent curr end end algorithm probably need run model guess going happen fourth event go back first vm knock limit improve model need program recovering resource process endthere couple different way could approach could give event timeout load vm cleared away creates unhelpful amount complexity model four event per incident likely timeouts would make enough impact give u insight beforeanother way approaching think reclaiming resource garbage collection one event one process request raising resource use single vm state change could triggered number thing maybe event x increase vm resource use event x actually number process happened undefined period time assume various point process ended naturally timed resource still used machine released yetto represent rework algorithm process process tla represents concurrency garbage collection happen independently event happening server breaking process also going move variable initialization around little bit variable relevant certain process make sense keep local macro call within process able access module provisioningload extends tlc integer sequencesvms incident set set x set x set x setevents size algorithm provisioningvariables cluster v vms define servershealthy vm vms cluster vm define macro triggerevent event begin cluster rrobin cluster rrobin eventsize rrobin rrobin else rrobin rrobin end end macro process garbagecollection recover resource variable gcollection begin collect vms gcollection cluster cluster else cluster cluster gcollection end end end process process incoming increasing resource usage variable incident incident event curr helper current event rrobin begin increase incident curr head incident incident tail incident triggerevent curr end end process end algorithm important keep mind designing tla model model checker test possible combination input likely code include likely scenario vms free lot resource free also scenario one free anythingwhich obviously put u back started despite scenario unlikelygoing back model wrong useful maxim useful level insight garbage collection tempting force model always garbage collection get model pas also usefulwhat could instead reconsider ifservershealthy invariant way define invariant tla error statement false reason end every step servershealthy defines model failure state whenever three vms unhealthy reality vms occasionally become unhealthy go offline generally end western civilization know itif change vms good invariant e least one good vm exists model run without failure state servershealthy e vm vms cluster vm better add even complexityexample autoscalingthere lot thing model still lacking obviously move beyond four event outcome would look different missing big piece modern cloud architecture autoscaling let rethink model bitwe currently representing vms struct tla kind like hash map made assigning resource increase various vms super easy best option want add remove vms pool instead going store information sequence basically list number wherein number represents resource use vm algorithm provisioningvariablesvms creates set sequence represents possible combination two vms potential resource use creating series traffic pattern previous model bit easier conceptualize efficient also question whether right combination state change bring vms place unsustainable previous model survived cycle probably would survive creating set every possible combination longer need cycle allbut change requires u remove invariant replace something else define servershealthy e v len vms vms v end define temporal property defined configured much way invariant let u use tla mean eventually true keep invariant model would fail soon tla gave sequence model really load honestly went back forth ultimately new vm added pool expect see resource use even traffic distributed across larger group machine cycle anymore sure reflecting behavior model useful instead three process one kill unhealthy vm one add vm pool resource use high one shuts vms resource use lowfair process vmdies kill vm begin fail await len vms vms selectseq vms lambda x x end process fair process scaleup autoscale variable load false begin scaleup load e v len vms vms v load vms append vms end end process fair process scaledown autoscale variable load falsebegin scaledown await len vms load v len vms vms v load vms tail vms end end process unfamiliar thing first await tell tla run process statement follows true vmdies scaledown run current pool le two vms keep server turned onceoh model found case true error deadlock reachederror behavior point state initial predicate load false pc kill vm fail autoscale scaleup autoscale scaledown modify load vms modifyload vms load falsestate action line col line col module provisioningautoscale load false pc kill vm done autoscale scaleup autoscale scaledown modify load vms modifyload vms load falsestate action line col line col module provisioningautoscale load false pc kill vm done autoscale done autoscale scaledown modify load vms modifyload vms load falseif vms usage kill process run scale process killed vms selectseq vms lambda x x selects new sequence original vms picking element lambda return true case vms le usage effect removing unhealthy machine pooland pool replace e v len vms vms v return false applied empty sequence let change adding len vms beginning make true le vms poolbut even though control behavior tweaking model fault model exactly actually raise really important question autoscaling service server unhealthy spin new one actually happened buildkite year ago misconfigured setting triggered failure notice otherwise healthy server fact exactly sort issue tends trigger cascading failuresright going update model prevent modeling real system might want instead build another model looked process spinning new server detail important design practice tla considering every possible state want adding complexity model instead want build model using broad simple business process model find edge case building model look specific component detail testing edge casesaltogether finished model module provisioningautoscale extends tlc integer sequence algorithm provisioningvariablesvms define servershealthy e v len vms vms v end define fair process vmdies kill vm begin fail await len vms vms selectseq vms lambda x x end process fair process scaleup autoscale variable load false begin scaleup load len vms e v len vms vms v load vms append vms end end process fair process scaledown autoscale variable load falsebegin scaledown await len vms load v len vms vms v load vms tail vms end end process end algorithm fair keyword tell tla necessary process run order model complete might never need kill server example tla wait u tousing modeling part development processall seems like lot work connect normal development process see benefit modeling primarily communication assumption gathering insight seam join complex infrastructure good model help decide thing like technology selection often choose tool based already familiar trendy cool modeling help determine behavior looking component architecturemonitoring alerting strategy knowing system likely fail help figure monitor without wait failure happenslos part process modeling figuring desired outcome actually written code take conclusion draft slos themmake mistake complex system always unexpected failure nothing completely prevent modeling improve awareness around give edge cutting lead outagesother model look atif like see code configuration model github also thanks always amazing hillel wayne helping track occasional tla bug go buy book
246,Lobsters,formalmethods,CSE-Formal methods,Modeling and simulation of cardiac tissue using hybrid I/O automata (2009),https://www3.cs.stonybrook.edu/~grosu/tcs09.pdf,modeling simulation cardiac tissue using hybrid io automaton,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream e l
247,Lobsters,formalmethods,CSE-Formal methods,Selfie's Reflections on Formal Verification for TLS 1.3: Largely Opaque,https://nadim.micro.blog/2019/04/11/selfies-reflections-on.html,selfie reflection formal verification tl largely opaque,,post moved
248,Lobsters,formalmethods,CSE-Formal methods,An Efficient SMT Solver for String Constraints (2016),http://homepage.divms.uiowa.edu/~ajreynol/fmsd16.pdf,efficient smt solver string constraint,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream rz pn գ g հ rᖲ p v bp ջ endstream endobj obj endobj obj font field endobj obj endobj obj extgstate font procset pdftextimagebimagecimagei property shading xobject rotate rtypepage endobj obj ap border c f subtypelinktypeannot endobj obj subtypeformtypexobject stream endstream endobj obj ap border c f subtypelinktypeannot endobj obj subtypeformtypexobject stream endstream endobj obj endobj obj iccbased r endobj obj endobj obj stream ĝ u z g h b c j
249,Lobsters,formalmethods,CSE-Formal methods,Noise Explorer Now Generates Rust Implementations with Formally Verified Primitives,https://moderncrypto.org/mail-archive/noise/2019/002013.html,noise explorer generates rust implementation formally verified primitive,noise noise explorer generate software implementation georgio symbolicsoftware http noiseexplorercom http githubcomsymbolicsoftnoiseexplorer http symbolicsoftware http symbolicsoftware http information noise mailing list,noise noise explorer generate software implementation georgio nicholas georgio symbolicsoftware mon apr pdt hello everyone mentorship assisted enabling noise explorer generate rust software implementation arbitrary noise handshake pattern addition noise existing support generating go implementation anyone generate enhanced implementation rust provide following guarantee addition memory safety performance feature memory safe functionally correct secret independent operation using ffi binding hacl reference implementation hash key message nonce object constrained appropriate size defined specification clearing operation key hash object strictly unoptimizable llvm overwrite data zero nonce object incremented successful encryptiondecryption constructordestructor function called exclusively simultaneously wrapping cipherstate ephemeral key cleared immediately use encryptiondecryption operation operation executed constant time keypairs hold anything one privatekey one publickey also planning support targeting webassembly generated rust code well nostd would allow u compile embedded device try noise code generation feature directly via web application http noiseexplorercom also run noise explorer locally downloading commandline tool http githubcomsymbolicsoftnoiseexplorer welcome feedback hope contribute soon georgio nicolas symbolic software http symbolicsoftware http symbolicsoftware next part html attachment scrubbed url http information noise mailing list
250,Lobsters,formalmethods,CSE-Formal methods,How the EverCrypt Library Creates Hacker-Proof Cryptography,https://www.quantamagazine.org/how-the-evercrypt-library-creates-hacker-proof-cryptography-20190402/,evercrypt library creates hackerproof cryptography,evercrypt karthik bhargavan bryan parno formal verification project everest jonathan protzenko isabelle coq f lucky thirteen,programmer human mathematics immortal making programming mathematical community computer scientist hoping eliminate coding bug open door hacker spill digital secret generally plague modern society set computer scientist taken major step toward goal release today evercrypt set digital cryptography tool researcher able prove sense prove pythagorean theorem approach online security completely invulnerable main type hacking attack felled program past say proof mean prove code suffer kind attack said karthik bhargavan computer scientist inria paris worked evercrypt evercrypt written way code written ordinarily team programmer creates software hope satisfy certain objective finish test code accomplishes objective without showing unwanted behavior programmer conclude software supposed yet coding error often manifest extreme corner case perfect storm unlikely event reveals critical vulnerability many damaging hacking attack recent year exploited corner case cascading failure hard systematically find event leading individually unlikely said bryan parno computer scientist carnegie mellon university worked evercrypt contrast parno colleague specified exactly code supposed proved ruling possibility code could deviate unexpected way unusual circumstance general strategy called formal verification reduce question code behaves mathematical formula check formula hold know code property said parno practically impossible formally specify function complex software web browser researcher instead focused program critical amenable defined mathematically evercrypt library software handle cryptography encoding decoding private information cryptographic library innately mathematical involve arithmetic prime number operation canonical geometric object like elliptic curve defining cryptographic library formal term stretch work evercrypt began part project everest initiative led microsoft research time still today cryptographic library weak point many software application slow run dragged overall performance application part full bug think realization app developer disaster waiting happen said jonathan protzenko computer scientist microsoft research worked evercrypt software world ripe something new provide evercrypt guarantee main challenge creating evercrypt developing single programming platform could express different attribute researcher wanted verified cryptographic library platform needed capacity traditional software language like c logical syntax structure proofassistant program like isabelle coq mathematician using year allinone platform existed researcher started work evercrypt developed one programming language called f put math software equal footing unified thing single coherent framework distinction writing program proof really reduced said bhargavan write software software developer time write proof theoretician new cryptographic library provides number security guarantee researcher proved evercrypt free coding error like buffer overrun enable hacking attack effect provably ruling susceptibility possible corner case also proved evercrypt get cryptographic math right every time never performs wrong computation striking guarantee evercrypt make entirely different class security weakness occur bad actor infers content encrypted message observing program operates example observer might know encryption algorithm run little faster add value little slower add value measuring amount time algorithm take encrypt message observer could start figure whether binary representation message eventually infer complete message somewhere deep algorithm way implement algorithm leaking information completely defeat purpose entire encryption said bhargavan sidechannel attack behind several notorious hacking attack recent year including lucky thirteen attack researcher proved evercrypt never leak information way exploited type timing attack yet evercrypt provably immune many type attack herald era perfectly secure software protzenko noted always attack one thought evercrypt proven secure simple reason one know addition even verified cryptographic library work concert host software like operating system many common desktop application typically unverified likely foreseeable future targeting something complex word processor skype client said protzenko obvious capture formal language supposed hard think intended behavior thing vulnerability adjacent unverified program undermine cryptographic library project everest aim surround evercrypt much verified software overarching goal initiative complete fully verified implementation hypertext transfer protocol secure http software secures web communication involve half dozen individual software element like evercrypt formally verified work formally verified work together project everest trying build larger stack software verified verified work together time hoping frontier verified software continue grow said parno
251,Lobsters,formalmethods,CSE-Formal methods,Static Analysis of Binary Executables Using Structural SVM's (2011),https://papers.nips.cc/paper/3925-static-analysis-of-binary-executables-using-structural-svms.pdf,static analysis binary executables using structural svm,,obj kid r r r r r r r r r type page count endobj obj subject neural information processing system publisher curran associate language created descriptionabstract cast problem identifying basic block code binary executable learning mapping byte sequence segmentation inference segmentation cubic length taking advantage structure derive inference algorithm make approach given even small program ten hundred thousand byte introduce two loss function appropriate problem show use structural svms optimize learned mapping present experimental result demonstrate advantage method strong producer python pdf library title static analysis binary executables using structural svms date type conference proceeding firstpage book advance neural information processing system description paper accepted presented neural information processing system conference editor lafferty williams zemel culotta author nikos karampatziakis lastpage endobj obj type catalog page r endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj content r parent r type page resource r mediabox endobj obj length filter flatedecode stream ga
252,Lobsters,formalmethods,CSE-Formal methods,What do Formal Methods actually Guarantee?,https://medium.com/alacris/what-do-formal-methods-actually-guarantee-d94ae8802be2,formal method actually guarantee,limitation power limitation power limitation power limitation spectre attack power limitation power limitation power limitation power limitation power limitation power limitation power ariane v limitation power limitation power limitation power,limitation formal method magic powder sprinkle code make correctpower formal method structural backbone around develop robust codelimitation formal method method useful result still need apply correctly right problemspower applied correctly formal method eliminate single actual bug entire class potential bug attack model express absentlimitation formal method prevent bug aspect code formalized yet power formal method ensure non regression code respect class defect formalized unlike method provide ratchet ensures progress even code evolveslimitation formal method eliminate bug prevent attack go model use eg spectre attack power formal method allow reason one high level abstraction transport result lower level abstraction provided also prove full abstractionlimitation formal method used prove everything correct always thing could reason aboutpower infinite issue previous issue finite solved fully solved finite effortlimitation formal method suppose domain welldefined limited enough specifiable actually understand enough specify itpower formal method discipline stick naturally lead understanding domain betterlimitation formal method cost lot term time talent cost even explore new space require reasoning infrastructurepower many application million dollar worth asset even life stake even expensive use formal methodslimitation everyone use formal methodspower large fraction developer trained use formal method really probably liability come safetycritical codelimitation formal method prove formal guarantee based lot formal assumption axiom establish informal guarantee matter humanspower formal method help make explicit assumption guarantee ruthlessly eliminate flaw assumption guaranteeslimitation formal method save make lot assumption vast amount software hardware depend systempower formal method prevent multiplication implicit assumption know track check system evolves may true yet cause catastrophic error stop valid see ariane v limitation true mean provable correct program formal method prove correctpower claim program correct know least informal proof actually know stretch imagination thus deploy program setting safety matter informal proof making informal proof formal possible doable useful process may uncover lot actual bug would cost dearly skipped formalization formal method magic neither informal methodslimitation even thing prove often afford prove thempower use formal method strategically study kind serious catastrophic issue similar project worth eliminating build model accordinglylimitation formal method prove correctness system correct begin withpower formal method help identify flaw reasoning find bug attack thought abandon false solution pursue actual solution
253,Lobsters,formalmethods,CSE-Formal methods,Static Taint-Analysis on Binary Executables (2011),http://web.cs.iastate.edu/~weile/cs513x/5.TaintAnalysis2.pdf,static taintanalysis binary executables,,obj pgfprgb pattern devicergb endobj obj goto endobj obj introduction endobj obj goto endobj obj intraprocedural taint analysis endobj obj goto endobj obj interprocedural taint analysis endobj obj goto endobj obj tool plateform experimental result endobj obj goto endobj obj conclusion endobj obj goto r fit endobj obj length filter flatedecode stream hd qh
254,Lobsters,formalmethods,CSE-Formal methods,Static Analysis of Binary Executables,http://stevehanov.ca/cs842_project.pdf,static analysis binary executables,,obj stream ݸ
255,Lobsters,formalmethods,CSE-Formal methods,Verilog Beginner's Tutorial,https://zipcpu.com/tutorial/,verilog beginner tutorial,asicworld nandland fpga fun verilator ncurses wavedrom tikztiming gtkwave formal verification using symbiyosys little c preface wire combinatorial logic tgz zip tgz zip register blinky tgz zip tgz zip tgz zip finite state machine building wishbone slave tgz zip building hello world using serial port transmitter transmitting data serial port button synchronizer debouncing using fpga block ram building serial port receiver building fifo serial port wishbone favorite axilite lord will intermediate tutorial introduction formal method,interested learning verilog already many tutorial online asicworld tutorial perhaps complete online verilog tutorial know nandland exceptional beginner tutorial well fpga fun web site really start bare basic although discus build several basic peripheral none tutorial however couple together tool needed design one place digital design student introduced immediately hdl language also tool necessary debug code includes verilog systemverilog also simulator use verilator augmented time ncurses waveform design wavedrom even tikztiming waveform display gtkwave favorite formal verification using symbiyosys beginner verilog tutorial attempt therefore fill missing piecees void goal take beginner knowing c little c way serial port example using receiver transmitter fifo also hoping keep tutorial fairly hardware generic hardware specific topic placed bonus chapter lesson chapter lesson include preface wire combinatorial logic thruwire example code tgz zip maskbus example code tgz zip register blinky blinky example code tgz zip ppsi ppsii example code tgz zip dimmer example code tgz zip finite state machine building wishbone slave led walking upon request example tgz zip building hello world using serial port transmitter transmitting data serial port button synchronizer debouncing using fpga block ram building serial port receiver building fifo serial port concludes basic beginner tutorial thought writing another advanced tutorial follow ten lesson yet settled tutorial might focus useful topic would include debugging bus build verify cpu well build slave peripheral controlled cpu number bus structure bus structure could include wishbone favorite axilite axi ahb apb avalon tilex know yet see lord will feel free contact suggestion might take material next feedback lesson love hear also offer course material site intermediate tutorial introduction formal method page offer course material course formal verification
256,Lobsters,formalmethods,CSE-Formal methods,Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing,https://www.cs.ucr.edu/~heng/pubs/digfuzz_ndss19.pdf,send hardest problem way probabilistic path prioritization hybrid fuzzing,,obj linearized l h e n endobj obj type xref length filter flatedecode decodeparms column predictor w index info r root r size prev id stream b p endstream endobj obj page r type catalog endobj obj filter flatedecode length stream b e endstream endobj obj content r mediabox parent r resource r type page endobj obj filter flatedecode length stream xڥ ڈ
257,Lobsters,formalmethods,CSE-Formal methods,Type Systems as Macros,http://www.ccs.neu.edu/home/stchang/popl2017/,type system macro,pdf code repo artifact instruction virtualbox image installing turnstile racket turnstile documentation artifact instruction vm image recommended virtualbox artifact image manual installation vm malfunctioning racket home,type system macrosstephen chang alex knauth ben greenman acm sigplan symposium principle programming language popl paris france january appear pdf code repo artifact instruction virtualbox image present turnstile metalanguage creating typed embedded language implement type system programmer write type checking rule resembling traditional judgment syntax implement semantics incorporate elaboration rule turnstile critically depends idea linguistic reuse exploit macro system novel way simultaneously type check rewrite surface program target language reusing macro system also yield modular implementation whose rule may mixed matched create language combined typical compiler runtime reuse turnstile produce performant typed embedded language little effort link runnable version example paper installing turnstile must racket installed use turnstile install turnstile racket bin directory run raco pkg install turnstile auto drracket choose file install package enter turnstile turnstile documentation artifact instruction vm image recommended download virtualbox download artifact image open virtualbox viewer choose file import appliance select downloaded ovum file start vm open readmehtml desktop follow instruction manual installation vm malfunctioning download install racket clone repository directory directory git clone http bitbucketorgstchangmacrotypes change directory repository root cd repository root install turnstile raco pkg install auto register documentation raco setup docindex repository root change artifact directory cd artifact build readme file make readme open produced readmehtml file follow contained instruction home
259,Lobsters,formalmethods,CSE-Formal methods,Resource-safe Systems Programming with Embedded Domain Specific Languages,https://eb.host.cs.st-andrews.ac.uk/drafts/dsl-idris.pdf,resourcesafe system programming embedded domain specific language,,obj length filter flatedecode stream ة h xf n
260,Lobsters,formalmethods,CSE-Formal methods,Souffle: A Datalog Synthesis Tool for Static Analysis,https://souffle-lang.github.io/,souffle datalog synthesis tool static analysis,language program soufflé,language rapidprototyping analysis problem logic enabling deep designspace exploration designed largescale static analysis eg pointsto analysis java taintanalysis security check program soufflé
261,Lobsters,formalmethods,CSE-Formal methods,Using Formal Methods at Work,https://www.hillelwayne.com/post/using-formal-methods/,using formal method work,teach formal method workshop living history limitation practical application assumption tla alloy eventb coq decision table gherkin spec highlevel spec partial spec short spec imperfect spec code refined spec test implementation error design error much harder write useful specialist domain approach documenting existing system showcasing bug half hour finding bug understanding unfamiliar system changing existing system building new system spec low cost error lowlevel prism ambiguous property augmentation code batch processing interactive computing pitch book jay parlar lorin hochstein miikka koskinen,people told enjoyed learning formal method sure actually use mostly short sprint work building new system scratch tell confusion make specification useful need resource applying practice short guide using specification work way accessible beginner applicable many context provides solid business value major disclaimer make teach formal method workshop living make everything write formal method least little bit advertisement rather front know getting first encounter formal method might interested essay history limitation talk practical application assumption using formal specification mean language express highlevel property formalized enough machinecheck conformance includes language like tla alloy eventb excludes thing like coq decision table gherkin assumes writing typical business infrastructure system whatever supposed mean amount minor bug tolerated major bug avoided rough rule thumb keep mind spec break appropriate spec highlevel consider component receives message something problem message illformed delivered wrong anything instead something else error checking formatting auditing everything entire subsystem one care collapse something like pred handlemessage dogoodthing doerrorthing corresponds every message good every message bad first ten message bad rest good etc valid path spec happen real system run model checker check spec partial spec need describe total behavior system system b c usually much faster write three different spec assumes two component already working correctly fourth spec might show three interact le detail component specialized spec give much detail comprehensiveness modeling everything lot benefit first partial spec focus care component second use partial spec without whole system designed useful early third model check lot faster four composing spec lot harder writing independent spec often weaken spec easily pull composition spec short corollary first two high level spec order magnitude smaller actual code spec imperfect time invest writing spec comprehensive everything diminishing return requires lot work go correct correct go staying zone maximal return purely accessible pragmatic people speccing style make software bugfree make much higher quality speccing spec code formal specification language automatically refined easily verify line code match specification way problem also surprising benefit spec exists apart code dependency mean trying specification unlike trying new language carry risk technical debt add maintenance burden also change code make writing spec possible reduces friction experimenting fm harder trying new monitor setup easier adding elixir tech stack getting coworkers pair program spec test two kind system error implementation error design error test good showing code match expectation bad showing expectation match need spec opposite need spec also documentation code review code static analysis postrelease analytics might make easier remove need case spec remove need code testing kind spec much harder write useful specialist domain approach writing specification serf three main purpose provides clear documentation system requirement behavior property clarifies understanding system find really subtle dangerous bug unique benefit arguably one delivers obvious business value valuable easiest way start applying specification mostly give since people notice benefit much make think dive deep end get use spec following project ascending order effortskill rough guide lesson plan feel obligated exercise anything use figure comfortable starting comfortable progressing also ascending order usefulness even documenting system useful documenting existing system take system worked think know pretty well write high level specification architecture feature worry composing spec write disconnected model various point interest necessarily looking error architecture goal get handson practice writing spec spec show behavior see existing system usually sign made mistake writing spec usually also possible misunderstood aspect system useful know uncertainty translation error understanding error might great improving modeling skill document system know well isolates modeling practice also chance make mistake actually subtle problem system happens lot often expect say starting still consider possibility make first assumption focus learning fm still produce enough tangible benefit business case first spec system assumption behavior requirement rigorously stated found make great documentation supplement explaining something engineer also later need modify system already model part done showcasing bug take system fixed complicated bug write model match broken version system show catch bug give good practice writing invariant also help find invariant existing system weakest possible property violated bug ulterior reason great showing value writing specification data long bug present long took find bug show time difference catching bug production catching bug model difference could well something like several week versus half hour finding bug take existing system observed bug write model bug different showcasing bug full information bug actually localized fixed yet purpose spec make easier find bug accurately reproduce model show series step lead bug determine thing start going sideways spec use localize bug code reproduce bug could common reason one spec could high level might abstracting error handling correct actually missed error case another bug could slip got implementation detail wrong think something like writing merge f g instead merge g f putting two line wrong order etc problem easily sneak past spec spec better reproducing bug hole design design correct unintended behavior sometimes find bug model checker many case though spec make bug obvious much easier see race condition line spec line code lead common beginner frustration formal specification already figured thing finishing model actually one big benefit specification model checking happen head one example worked killswitch working couple day fruitlessly trying track wrote spec immediately went oh right killswitch prevented u enqueueing job processing obvious spec le codebase understanding unfamiliar system take system want understand better write model spec error much likely mean misunderstood something failed spec meant system writing spec help significantly even verify really handwave spec everything write must precise rigorous wonder understanding something also provides good way verify knowledge correct see happens run model checker compare behavior real system also show model domain expert see match understanding system precise way knowing understanding diverges experience also likely find critical bug modeling unfamiliar system one familiar idea regardless decide bring bug someone remember respectful empathetic spec replace test spec replace social skill changing existing system take system model system new requirement desired change show satisfy requirement modify model least experience end regular use fm project since spec high level change map line modified spec make change vet change make actually want help understanding also help ton finding bug showing small change system propagates global invariant violation another benefit get writing spec sanitychecks requirement say least one node must always online mean least one node online entire time point time least one node online lot easier see difference writing spec kneedeep codebase sometimes client able clarify meant rare case client realize actually know want building new system make new system scratch using specification alternatively add significant new feature system using spec requires skill writing spec knowing stop writing spec actually much harder modeling existing system also drastic benefit getting knowledge boosting modelchecking right start common beginner mistake trying model system much detail start building remember spec design incredibly valuable design code much code write reflected design matter system specific class function behavior produce one big thing might notice iterative spending week month writing exhaustive specification day coding blindly following plan reality intervenes adjust spec see consequence spec amplify ability think design force rigid path biggest gap individualbased teambased enterprise fm still extremely new practice solid information fit larger team workflow different company adopting fm widely excited see work project exhaustive specification make sense u project spec make sense u either sweet spot form specification help lot vast majority u use part using something well knowing applies make specification useful also know spec write spec worth writing spec course circular interested make worth writing spec actually two facet question write spec add lowerlevel detail existing spec driven constraint thing make spec le useful speccing might still worthwhile even hold likely investing le time effort also biased towards experience specification could language good kind problem low cost error error obvious easy isolate cause issue mean want error mean quickly find fix one example batch job look low volume data construct report error spec would surface would obvious production fix easily rerun old data ideally spec could still help correctness benefit le valuable lowlevel code projection abstract design sometimes essential idea lie code level case spec missing tree forest lot munging data plumbing like take program hit ten apis extract information splice together higherlevel design error handling retry behavior majority work lie implementationlevel transformation raw data design spec far removed much help want something closer kind numerical computing right specification language express integer actually modelcheck tool seen handle kind real number prism issue verifying mathematical operation design level ambiguous property agile folk fond saying best way understand people need see interact existing system necessarily mean system complete often prototype enough requirement change often understanding needed early stage often minimal property system probably like crash randomly explodes necessary property prototype person using system understand want system le important system work gathering data sense prototype take place spec stage instead iterating spec find system issue iterating prototype find client issue augmentation code one little messier rest one software belief program either written automate something human augment human something better graydon hoare call difference batch processing interactive computing line two clearcut calculator automating away rote computation augmenting ability calculation little really still find useful model experience spec much useful automation augmentation automation human might start necessarily anything afterwards important satisfies invariant augmented code human constantly loop adjust system selfcorrect pitch okay read far time pitch formal method incredibly powerful tool biggest barrier using opinion education fm requires different mindset coding sometimes people trouble building intuition also implicitlyassumed set math skill easy learn hard realize need learn wrote book help people nothing beat experienced teacher hire corporate workshop provide training people company client see saving sixfigure saving per year writing spec much reason save money writing test contact read service thanks jay parlar lorin hochstein miikka koskinen feedback
262,Lobsters,formalmethods,CSE-Formal methods,Generating Finite State Machines from Abstract State Machines (2002),https://www.microsoft.com/en-us/research/wp-content/uploads/2002/07/issta02.pdf,generating finite state machine abstract state machine,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r metadata r openaction r endobj obj goto r fit endobj obj filter flatedecode length r stream ā b endstream endobj obj endobj obj type page parent r resource extgstate r r font r r r r r r headingpaginationfont r footingpaginationfont r colorspace r procset pdf text imageb imagec imagei xobject r content r r r r r r r r mediabox cropbox rotate thumb r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname ladobmtimesnewroman italicangle stemv xheight r endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont ladobmtimesnewroman fontdescriptor r endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont ladnnetimesnewroman bold fontdescriptor r endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont ladmadarial bold fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname ladnegarial italicangle stemv r endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont ladnegarial fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname ladmadarial bold italicangle stemv r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname ladnnetimesnewroman bold italicangle stemv xheight r endobj obj iccbased r endobj obj endobj obj filter flatedecode length r stream j bsț n p ڧi endstream endobj obj type font subtype truetype firstchar lastchar width encoding winansiencoding basefont ladpektimesnewroman italic fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname ladpektimesnewroman italic italicangle stemv xheight r endobj obj endobj obj filter flatedecode length r stream j kyg b g endstream endobj obj endobj obj filter flatedecode length r stream x wt hyj endstream endobj obj endobj obj filter flatedecode length r stream
263,Lobsters,formalmethods,CSE-Formal methods,Finding Error-Handling Bugs in Systems Code Using Static Analysis (2012),http://web.cs.ucdavis.edu/~rubio/includes/ghc11.pdf,finding errorhandling bug system code using static analysis,,obj length filter flatedecode stream xڭ q g q r ֆ ى
264,Lobsters,formalmethods,CSE-Formal methods,Visual Information Flow through C Programs (2010),http://www.gilith.com/talks/ssv2010.pdf,visual information flow c program,,obj length filter flatedecode stream ʅ
265,Lobsters,formalmethods,CSE-Formal methods,Oxide: The Essence of Rust,https://arxiv.org/pdf/1903.00982.pdf,oxide essence rust,,obj filter flatedecode length stream ˌx xtbq
266,Lobsters,formalmethods,CSE-Formal methods,Generating C code that people actually want to use,http://jonathan.protzenko.fr/2019/01/04/behind-the-scenes.html,generating c code people actually want use,project everest f kremlin firefox software engineer review generated code go functional c compiler forget abstraction modularity reproducible build audit nonverified code android,project everest large collaborative research effort aim verify deploy new secure http stack code verified using f programming language using kremlin dedicated compiler verified f code compiled readable c meaning existing system project readily integrate verified code going c allows people use code without buy exotic strange language lambda three year project successfully integrated code mainstream software notably firefox window along way learned take deliver quality c code taken seriously integrated actual source tree made many rookie mistake discovered discrepancy researcher thought ok expected u actual software developer none lesson ever make paper make perfect fit blog post shared many anecdote informal conversation talk apology heard already first big project everest turned firefox initial success large part due wellknown strategy infiltrating phd student large company nonprofit eg mozilla hoping setting camp intern would position push verified code inside software engineer review generated code sure expected generating idiomatic c code important informed lot early design choice toolchain surprised however closely mozilla reviewed manually inspected generated c code revealed number issue never thought actual blocker many temporary inserted f enforce evaluation order argument something guaranteed neither c ocaml two main extraction backends f ala extra precision appreciated reviewer explicitly requested variable named eliminated whenever possible computationallyirrelevant function argument erased unit argument correct suboptimal compilation scheme give unnatural function signature c header also nogo wrote prettyprinter compiler kremlin looking reference table operator precedence c resulting minimal amount parenthesis inserted happily thought optimal thing turned one remember relative precedence since forgotten heard even differs across shortcoming fixed follows autogenerated name removed using custom pas kremlin compiler performs defuse analysis via syntactic criterion aware c semantics extra unit argument removed first kremlin f ensures ocaml extraction f also generates prettier code kremlin became reasonable added option generate extra parenthesis myriad detail fixed always adding curly brace around conditional block indentation unused variable elimination etc short even matter c compiler expectation truly resulting c code would crisp clean readable c programmer would written hindsight fair go functional c compiler early experiment programmer functional training descent relied heavily recursion reasoning easier recursive call easy call lemma recursive call return also make implementing functional specification easier something important student need progressive rampup toolchain scenario relied gcc excellent tailcall optimization stopgap measure support rapid prototyping however one leaf cocoon modern compiler toolchains discovers vast range compiler version architecture ci becomes evident relying sort tailcalls optimization would unreasonable compiler reliably perform tailcall optimization confronted reality temporary piece code blew stack using nongcc compiler converting two abstraction array performing idiomatic functional bytebybyte recursive copy later rewritten call memcpy soon disappear unify two abstraction another gripe heavy reliance passing structure value kremlin support extension data type passed value using tagged union compilation scheme awfully convenient since structure value lifetime hence manipulated pure value within f incurring extra verification cost passing structure value allowed c standard costly abis mandate structure larger word passed pushing content onto stack showed performance profile new guideline essentially use size exceed four word architecture furthermore even small structure caused issue due multiple layer type abstraction owing tagged union compilation scheme kremlin ended series field access field long hit hardcoded limit one supported compiler later solved extending kremlin three new compilation scheme data type optimizing special case inductive one branch branch one argument etc reduce depth field access forget abstraction modularity working f unsurprisingly split code separate module leverage modularity maintainability parallel verification within module larger function split small individual helper adorned respective pre postconditions robustness readability going c priority kremlin compiler get rid pesky abstraction modularity first one want land repository algorithm spread across different source file matter beautiful welldesigned original source code translating f module individual c file pernicious effect generated lot call across translation unit c file meaning large chunk call graph forced abide rule external linkage calling convention dictated abi specifically prevented compiler optimizing function call say passing argument register disastrous effect performance even splitting function smaller helper prevented lot intraprocedural analysis kicking alleviated two mechanism kremlin got equipped bundling mechanism driven microdsl allows programmer specify recombine multiple source f module single c translation unit file indicating function api entry point leaving rest module marked static inline big effect performance initially done kremlin f programmer ability mark function noextract inlineforextraction meaning helper inlined callsite extracted separate function bundling mechanism work conjunction reachability analysis remove anything reachable api entry point hence ensuring unused helper remains generated c code something also made consumer queasy reproducible build toolchain relies ocaml custom compiler variety tool turned hard set switched entirely dockerbased ci infrastructure make distributing code trivial mozilla adopted run docker build command ci error someone try modify generated code instead fixing f source file audit nonverified code blog post complete without word bug found apart compiler bug two amusing bug occurred handwritten code worth noting somewhat puzzling stack corruption reason turned external header improperly defining macro provides fixedwidth integer type etc via include inttypesh along corresponding macro printing scanning fixedwidth integer via printf scanf rely heavily inttypesh compiling window header seem available default find however copy header somewhere used write routine convert hexencoded string corresponding byte array using macro scanning single hexencoded byte temporary stack unbeknownst u underlying c library runtime support scanning single byte deter author inttypesh header found defining macro nonetheless scanning two byte destination address causing buffer overrun look like people eg android careful define window regularly audit handwritten code using sanitizers caught undefined behavior blatant one code reading littleendian byte returning corresponding author initial implementation wrote return src realizing case src aligned undefined fairly solid process distributing code gathering artifact project everest selfcontained directory client copy integrate project took u long way get ready scale multiple consumer code excellent news gear towards software release evercrypt shall cover later blog post
267,Lobsters,formalmethods,CSE-Formal methods,Andromeda proof assistant,http://www.andromeda-prover.org/,andromeda proof assistant,icfp material introduction theory subdirectory test subdirectory lcf history name developer travis continuous integration support,icfp material introduction information old andromeda implementation type theory equality reflection available andromeda currently active development better documentation available best way learn andromeda consulting code example found theory subdirectory test subdirectory design andromeda follows tradition lcfstyle theorem provers abstract datatype judgement construction judgement done trusted nucleus directly correspond application inference rule type theory user interacts nucleus writing program highlevel statically typed metalanguage andromeda ml aml nucleus perform normalization underlying type theory normal form unification perform proof search technique implemented top nucleus aml therefore compute underivable judgment design course could fail run forever aml generalpurpose programming language history name andromeda used called brazil consequence discussion institute advanced study talked sending proof far away place check independently thought brazil faraway place later turned quite far enough martin escardó suggested name andromeda hope nobody claim neighboring galaxy nearby place developer travis continuous integration github repository linked travis ci current build status support material based upon work supported air force office scientific research air force materiel command usaf award opinion finding conclusion recommendation expressed publication author necessarily reflect view air force office scientific research air force materiel command usaf
268,Lobsters,formalmethods,CSE-Formal methods,FOSDEM 2019 - Proof of Pointer Programs with Ownership in SPARK,https://fosdem.org/2019/schedule/event/ada_pointers/,fosdem proof pointer program ownership spark,proof pointer program ownership spark speaker link,proof pointer program ownership spark pointer notorious defect attractor particular dynamic memory management involved ada mitigates issue much le need pointer overall thanks firstclass array parameter mode generic stricter rule pointer manipulation limit access dangling memory still dynamic memory management ada may lead useafterfree doublefree memory leak dangling memory issue may lead runtime exception spark subset ada focused making possible guarantee property program statically particular absence programming language error mostly automatic analysis reason static analysis pointer notoriously hard automate pointer forbidden spark working adacore since including pointer support spark restricting use pointer program respect ownership constraint like found rust talk present current state ownership rule pointer support spark current state implementation gnat compiler gnatprove prover well roadmap future speaker link
269,Lobsters,formalmethods,CSE-Formal methods,All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (2010),https://users.ece.cmu.edu/~aavgerin/papers/Oakland10.pdf,ever wanted know dynamic taint analysis forward symbolic execution,,obj goto endobj obj introduction endobj obj goto endobj obj first step general language endobj obj goto endobj obj overview endobj obj goto endobj obj operational semantics endobj obj goto endobj obj language discussion endobj obj goto endobj obj dynamic taint analysis endobj obj goto endobj obj dynamic taint analysis semantics endobj obj goto endobj obj dynamic taint policy endobj obj goto endobj obj typical taint policy endobj obj goto endobj obj dynamic taint analysis challenge opportunity endobj obj goto endobj obj forward symbolic execution endobj obj goto endobj obj application advantage endobj obj goto endobj obj semantics forward symbolic execution endobj obj goto endobj obj forward symbolic execution example endobj obj goto endobj obj forward symbolic execution challenge opportunity endobj obj goto endobj obj related work endobj obj goto endobj obj formalization systematization endobj obj goto endobj obj application endobj obj goto endobj obj conclusion endobj obj goto endobj obj acknowledgement endobj obj goto r fit endobj obj length filter flatedecode stream ɛo ڢn b v c w e 菨 om p b lgz ې wa v k pii w k endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto taintcheck endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto tdsc endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto tdsc endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto deviation endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r procset pdf text endobj obj length filter flatedecode stream k p q krct կ x g cx lj מpfl p qg b b e endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citebitblaze endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r procset pdf text endobj obj length filter flatedecode stream kblg f eq jf r qer n x kn aqq wn eg b u v g p v l ƨ p fv wf v ˬm endstream endobj obj type page content r resource r mediabox parent r annots r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citebitblaze endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream j w k f q ށug af tqqwq cll x px pt lco ݴ q b ύ z wnbe q endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citebitblaze endobj obj type annot subtype link border hic rect goto taintcheck endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream f
270,Lobsters,formalmethods,CSE-Formal methods,"Alloy* - A Higher-Order, Relational, Constraint Solver",https://aleksandarmilicevic.github.io/hola/,alloy higherorder relational constraint solver,higherorder alloy,formulation turan theorem state graph n node maximally edge graph contains clique node clique subset node every two node connected edge equivalent saying maximum clique exactly k node formalization turan theorem alloy given figure right formalization maxclique property higherorder quantifies possible set node assert exist another set node clique node maxclique higherorder specification expressible alloy official alloy analyzer powerful enough analyze alloy contrast check automatically performed confirm counterexample found within specified scope two way formalize turan theorem turandomconstr turanclassical command case idea asserts possible edge relation node node symmetric irreflexive maxclique graph k node k mclq number selected edge e edge div must number tuples edge divided graph setup theorem undirected difference although syntactic significant impact performance classical classical way constrain domain universal quantifier eg edge symmetric irreflexive use implication quantifier body similarly constraint domain existential quantifier eg set node maxclique conjunction body used domainconstraintsfor efficient cegis implementation prefer domain constraint given explicitly opposed merged inlined quantifier body using newly introduced clause available standard alloy turanclassical turandomconstr comparison analysis time various scope sig node every two node edge pred clique edge node node clq set node disj clq edge clique node pred maxclique edge node node clq set node clique edge clq set node clq clique edge clq symmetric irreflexive pred edgeprops edge node node edge edge edge iden max number edge free graph n node check turandomconstr edge node node edgeprops edge mclq set node maxclique edge mclq let n node k mclq e edge div e kminus mul n mul n div div k int check inlined domain constraint check turanclassical edge node node edgeprops edge implies mclq set node maxclique edge mclq let n node k mclq e edge div e kminus mul n mul n div div k int check
271,Lobsters,formalmethods,CSE-Formal methods,Model-Checking an Entire Linux Distribution for Security Vulnerabilities (2005),https://people.eecs.berkeley.edu/~daw/papers/mops-acsac05.pdf,modelchecking entire linux distribution security vulnerability,,obj stream
272,Lobsters,formalmethods,CSE-Formal methods,Stream Ring Theory,https://zenodo.org/record/2565243/files/stream-ring-theory.pdf?download=1,stream ring theory,,obj length filter flatedecode stream x b l cy я n ae츩w dr yy ճ axϋ v ww e v з j c w lept endstream endobj obj length filter flatedecode stream f dشk j k n aal mv n q c e l j
274,Lobsters,formalmethods,CSE-Formal methods,SPARTA: Library with Building Blocks for Abstract Interpretation Tools,https://github.com/facebookincubator/SPARTA#sparta,sparta library building block abstract interpretation tool,sparta abstract interpretation abstract interpretation sparta semantics partitioning abstraction part using sparta fixpoint iterator redex interprocedural constant propagation dependency macos ubuntu setup issue license license,sparta sparta library software component specially designed building highperformance static analyzer based theory abstract interpretation abstract interpretation abstract interpretation theory semantic approximation provides foundational framework design static program analyzer static analyzer built following methodology abstract interpretation mathematically sound ie semantic information compute guaranteed hold possible execution context considered moreover analyzer able infer complex property program expressiveness finely tuned order control analysis time static analyzer based abstract interpretation routinely used perform formal verification flight software aerospace industry example sparta building industrialgrade static analysis tool based abstract interpretation scratch daunting task requires attention expert field purpose sparta drastically simplify engineering abstract interpretation providing set software component simple api highly performant easily assembled build productionquality static analyzer encapsulating complex implementation detail abstract interpretation sparta let tool developer focus three fundamental ax design analysis semantics program property analyze range numerical variable aliasing relation etc partitioning granularity property analyzed intraprocedural interprocedural contextsensitive etc abstraction representation program property sign interval alias graph etc sparta acronym stand semantics partitioning abstraction using sparta detailed documentation sparta found code library includes code sample typical use case reference literature additionally unit test good illustration use api unit test fixpoint iterator particular implement complete analysis live variable simple language sparta analytic engine power optimization pass redex android bytecode optimizer redex codebase contains multiple example analysis built sparta run industrial scale interprocedural constant propagation illustrates assemble building block provided sparta order implement sophisticated yet scalable analysis dependency sparta requires boost later macos need xcode command line tool installed get command line tool please use xcodeselect install boost obtained via homebrew brew install boost ubuntu ubuntu later boost installed package manager sudo aptget install libboostalldev earlier version ubuntu provide script install boost sudo getboostsh setup sparta headeronly c library copy content include directory location include path compiler also provide quick setup using cmake build test assume sparta directory mkdir buildcmake cd buildcmake root source directory sparta cmake cmake build run unit test please type spartatest copy header file usrlocalincludesparta set cmake library sparta use following command sudo make install issue issue github assigned priority reflect urgency soon likely addressed unbreak serious issue someone working right high priority important issue someone actively working mid priority important issue queue processed soon low priority important issue may get dealt later date wishlist issue merit low priority grab likely pruned addressed reasonable period license sparta mitlicensed see license file root directory source tree
275,Lobsters,formalmethods,CSE-Formal methods,Stacked Borrows Implemented,https://www.ralfj.de/blog/2018/11/16/stacked-borrows-implementation.html,stacked borrows implemented,stacked borrows implemented validity invariant type contract original post undefined behavior last time section section enforcing uniqueness use specify rust memcheck byte miri put example enabling sharing try miri executing example dereferencing pointer accessing memory retagging creating raw pointer guaranteed freshness pointer escape raw following example case aliasing reference section difference original proposal key property mutable reference unique shared reference without immutable evaluation help uncovered issue section effort underway playground readme unsafe code guideline stream issue tracker detail run entire libcore liballoc libstd test suite miri update update discussion forum changelog,stacked borrows implemented three month ago proposed stacked borrows model defining kind aliasing allowed rust idea validity invariant maintained code time since busy implementing developed stacked borrows post describes latest version stacked borrows report finding implementation phase worked remains done also opportunity help effort post selfcontained introduction stacked borrows historical curiosity comparison earlier work type contract reason read original post point stacked borrows defines semantics rust program thing reference always hold true every valid execution meaning execution undefined behavior occurred mut reference unique rely access function happening memory point reference immutable rely writes happening memory point unless unsafecell usually borrow checker guarding u nefarious violation reference type guarantee ala writing unsafe code borrow checker help u define set rule make sense even unsafe code explain rule post explanation going last time changed bit also think understand model better better job explaining ready get started hope brought time rather lengthy post interested detailed description stacked borrows skip post go right section want know help jump section enforcing uniqueness let u first ignore part reference immutable focus uniqueness mutable reference namely want define model way calling following function trigger undefined behavior fn let x mut let mut x write pointer aliasing x use asserting still exclusive let val want function disallowed two us use another pointer location violating fact unique notice function compile borrow checker allow great undefined behavior entire point exercise explain undefined behavior without referring borrow checker want rule also work unsafe code fact could say retroactively rule explain borrow checker work way pretend model came first borrow checker merely compiletime check make sure follow rule model able pretend machine two thing real cpu example adding use specify rust uncommon approach often time source language make distinction appear actual hardware related example memcheck keep track memory initialized able detect memory error normal execution uninitialized memory look like memory figure whether program violating memory rule keep track extra state stacked borrows extra state look follows every pointer keep track extra record pointer created every location memory keep track stack indicating tag pointer must allowed access location exist separately ie pointer stored memory tag stored part pointer value remember byte every byte occupied pointer stack regulating access location also two interact ie loading pointer memory load tag stored part pointer stack location tag pointer stored location effect example two pointer x one location interest one pointer point initialized initially create x get tagged uniq indicate unique reference stack uniq top indicate latest reference allowed access said location create get new tag uniq distinguish x also push uniq onto stack indicating uniq latest reference allow access also uniq tag higher stack descendant one reference created x tagged uniq tagged uniq stack contains uniq uniq top stack right use access location make sure tag top stack check problem use x thing since top yet pop stack easy stack uniq use blast tag stack undefined behavior case got lost source code comment indicating tag stack one location interest u fn let x mut tag uniq stack uniq let mut x tag uniq stack uniq uniq pop uniq tag top stack nothing change stack uniq uniq pop uniq tag x top stack pop uniq x stack uniq pop uniq tag top stack possible hence undefined behavior let val well actually undefined behavior good news since wanted start since implementation model miri try amazing shepmaster integrated miri playground put example adjusting slightly circumvent borrow checker select complain together rather unreadable backtrace sure improve one error constant evaluation error borrow dereferenced uniq exist stack let val borrow dereferenced uniq exist stack enabling sharing unique pointer rust would rather dull language luckily enough also two way shared access location shared reference safely raw pointer unsafely moreover shared reference sometimes point unsafecell assert additional guarantee destination immutable example want following code allowed least actually safe code accepted borrow checker better make sure undefined behavior fn let x mut create several shared reference also still read x let x let val x let x let val let val however following code okay fn let x mut let x create raw reference aliasing write let z x const mut unsafe z use asserting still point value let val try miri see complain let val location frozen long enough location explain extend bit first introduce new kind tag pointer carry shared tag following rust type describes possible tag pointer pub type timestamp pub enum borrow uniq timestamp shr option timestamp think timestamp unique id see shared reference also important able determine id created first timestamp optional shared tag tag also used raw pointer raw pointer often able track created example raw pointer converted integer back use separate type item stack need timestamp shared pointer pub enum borstackitem uniq timestamp shr finally consists stack borstackitem together indication whether stack location governs currently frozen meaning may read written pub struct stack borrows vec borstackitem used stack never empty frozensince option timestamp virtual frozen item top stack executing example let u look happens execute two example program end embed comment source code one location interest whenever talk referring stack location fn let x mut tag uniq stack uniq frozen let x tag shr stack uniq shr frozen since access x first check whether tag uniq stack next make sure either item shr top location frozen latter case go let val x stack uniq shr frozen since access still dereference x action read like previous line nothing happens let x tag shr stack uniq shr frozen since access since shared tag timestamp type allow interior mutability unsafecell check location frozen since least timestamp let val stack uniq shr frozen since location frozen least since actually frozen since good let val stack uniq shr frozen since example demonstrates new aspect first actually two operation perform tagrelated check model far dereferencing pointer whenever also implicitly actual memory access operation like x example operation dereference pointer without accessing memory secondly reading mutable reference actually okay even reference exclusive writing mutable reference exclusivity come back point later let u first go another example fn let x mut tag uniq stack uniq frozen let x tag shr stack uniq shr frozen since x really x already seen happens uniq must stack leave unchanged let z x const mut tag erased shr none stack uniq shr frozen since write access raw pointer unfreeze location make sure shr top stack unsafe z stack uniq shr frozen access timestamp shr tag type allow interior mutability location frozen undefined behavior let val dereferencing pointer seen consider tag pointer already dereferencing memory access happens operation dereference never mutates stack performs basic check might declare program ub reason twofold first think require basic validity pointer dereferenced even access memory secondly practical concern implementation miri dereference pointer guaranteed type information available crucial thing depend presence unsafecell whereas type information every memory access would quite hard achieve miri notice dereference tag pointer type pointer two might agree always want rule transmute might raw shared pointer unique tag example following check done every pointer dereference every location covered pointer sizeofval tell u many byte pointer cover raw pointer nothing raw access checked little possible unique reference tag shr error tag uniq make sure matching uniq item id stack tag shr none make sure either location frozen else shr item stack tag shr check depends whether location inside unsafecell according type reference location outside unsafecell must frozensince set older timestamp unsafecell location must either frozen else shr item stack check tag timestamp accessing memory actual memory access know tag pointer used access always use actual tag disregard type pointer know whether reading writing current location perform following operation location affected access location frozen read access nothing happens even tag uniq otherwise write access unfreeze location set frozensince none read access come location already unfrozen pop stack top item match tag pointer uniq item match uniq tag id shr item match shr tag without timestamp reading shr item match uniq tag pop entire stack without finding match undefined behavior understand rule better try going back three example seen far applying rule dereferencing pointer accessing memory understand interact subtle point make uniq tag match shr item also accept uniq read frozen location required make work rust permit read access mutable reference even currently actually unique model hence retagging creating raw pointer talked quite bit happens use pointer time take close look pointer created however go would like u consider one example fn x mut somefunction x question move load x function call remember entire point stacked borrows enforce certain discipline using reference particular enforce uniqueness mutable reference hope answer question turn good might use optimization unfortunately thing easy uniqueness mutable reference entirely rest fact pointer unique tag tag top stack location frozen access another tag pop item stack cause undefined behavior ensured memory access check hence tag still stack access happened know still stack every time dereference pointer per dereference check described know access pointer different tag happened guaranteed freshness however somefunction exact copy x got x caller trust maybe used tag another reference copied transmutecopy gave somefunction simple way circumvent concern generate new tag x generate tag know generation never emits tag twice easy sure tag used reference let u make explicit putting retag instruction code generate new tag fn x mut retag x somefunction x retag instruction inserted compiler pretty much time reference copied beginning every function input reference type get retagged every assignment assigned value reference type get retagged moreover even reference value inside field struct enum make sure really cover reference recursive descent already implemented implementation landed yet finally box treated like mutable reference encode asserts unique access however descend recursively reference retagging mut mut retag outer reference retagging operation generates fresh tag taking reference simply forward tag pointer basing reference first example explicit retagging fn let x mut nothing interesting happens retag x tag x get changed uniq stack uniq frozen let mut x nothing interesting happens retag tag get changed uniq stack uniq uniq frozen check uniq stack pop bring top stack uniq uniq frozen check uniq stack pop bring top x stack uniq frozen check uniq stack hence ub let val reference box retag following slightly refine instruction later location covered reference according sizeofval compute fresh tag uniq mutable reference box shr shared reference perform check would also happen dereference reference perform action would also happen actual access happens reference shared reference read access mutable reference write access check new tag shr location inside unsafecell condition apply freeze location timestamp already frozen nothing otherwise push new item onto stack shr tag shr uniq id tag uniq id one highlevel way think retagging computes fresh tag performs reborrow old reference new tag pointer escape creating shared reference way share location also create raw pointer careful enough use access location different aliasing pointer course precise precise answer model describing account consider act casting raw pointer special way creating reference raw speak usual creating new reference operation followed retagging retagging special though unlike normal retagging act raw pointer consider following example fn let x mut retag x tag x get changed uniq stack uniq frozen let x mut make sure x point accessible raw pointer retag raw tag get erased shr none stack uniq shr frozen let unsafe first dereference raw pointer check tag get ignored perform read write access shr none tag already top stack nothing change writing x pop shr stack per rule write access x stack uniq frozen access raw pointer undefined behavior even read write x reasserted x unique reference memory let val unsafe retag raw act almost like normal retag except ignore raw pointer instead tag shr none push shr stack way even program cast pointer integer back always keep track tag might get reset shr none matching shr stack making sure raw pointer actually used one way think consider reference cast raw pointer reflected shr item stack knowing retag interacts raw pointer go back able fully explain stack change way example case aliasing reference everything described far pretty much working condition week ago however one thorny problem discovered fairly late usual best demonstrated example entirely safe code fn demorefcell let rc mut refcell mut refcell new retag rc tag get changed uniq consider stack location stored refcell bookkeeping counter interest stack uniq taking shared reference share location freeze due unsafecell let rcshr refcell rc retag rcshr tag get changed shr stack uniq shr frozen lot stuff happens matter example let mut bmut refmut rcshrborrowmut obtain mutable reference refcell let mutref mut mut bmut retag mutref tag get changed uniq stack uniq shr uniq frozen time fresh shared reference outside count read access rc pop least shr top stack let shrref refcell rc tag get changed shr retag shrref stack uniq shr frozen using mutref ub tag longer stack bad usable safe code mutref notice mutref shrref alias yet creating shared reference memory already covered unique mutref must invalidate mutref follow instruction retag shrref got created choice pop item matching mutref stack ouch made realize creating shared reference weak inside unsafecell fact entirely equivalent retag raw make sure kind shared access possible accept might active mutable reference assuming exclusive access location enough though also added new check retagging procedure taking action ie step could pop item stack check reborrow redundant new reference want create already dereferencable item already stack applicable stack already frozen item justifies moreover item corresponds old reference nothing mean basically reborrow already happened new reference ready use check know using new reference pop item corresponding old reference stack case avoid popping anything keep reference valid may seem like rule never apply fresh tag match something already stack indeed impossible uniq tag shr tag matching liberal example rule applies example create shrref mutref require freezing unsafecell already shr stack new reference dereferencable item matching old reference uniq shr using new reference old one remains dereferencable hence nothing keeping uniq stack access mutref end remains valid may sound like weird rule would surely thought refcell would force hand however shall see section also break important property model mutable reference unique shared reference immutable except unsafecell moreover pushing item stack end retag action sure stack yet frozen frozen reborrow would redundant extension instruction retag look follows executed location covered reference according sizeofval compute fresh tag uniq mutable reference box shr shared reference shr none raw pointer perform check would also happen dereference reference remember position item matching tag stack redundancy check new tag pass check performed dereference item make check succeed one remembered step state considered every item stack stop done location perform action would also happen actual access happens reference shared reference read access mutable reference write access location frozen fresh tag uniq unfroze fresh tag shr location already frozen redundancy check step would kicked check new tag shr location inside unsafecell condition apply freeze location timestamp already frozen nothing otherwise push new item onto stack shr tag shr uniq id tag uniq id one thing find slightly unsatisfying redundancy check seems overlap bit rule read access shr item match uniq tag together enable readonly use mutable reference already shared would prefer single condition enabling instead two working together still overall think pleasingly clean model certainly much cleaner proposed last year time much compatible existing code difference original proposal key difference original proposal check performed dereference check performed access check mean model also mean need weird special exception read frozen location like original proposal main reason change however access know inside unsafecell check would like accordingly also rearranged terminology bit longer one action instead check action described section beyond made behavior shared reference raw pointer uniform helped fix test failure around itermut slice first creates raw reference shared reference original model creating shared reference invalidates previously created raw pointer result uniform treatment longer happens coincidentally make change intention fixing itermut change wanted reduce number case distinction model realized relevant test suddenly passed even full model enabled investigated happened realized accidentally great idea tag uniq v shr able support transmute reference shared pointer transmute open question original model people raised concern ensuing discussion invite come strange thing think able transmute throw miri see usecases covered redundancy check retagging seen refining similar check original model whenever new reference created change state new borrow already active finally notion original stacked borrows implemented yet next item todo list key property let u look two key property set design goal see model guarantee hold true valid ubfree execution mutable reference unique property would like establish creating retagging really mut run unknown code get passed reference use reference reading writing sure unknown code access memory behind mutable reference ub example fn demomutunique mut retag sure tag unique unknowncode know return moreover unknowncode panic know could write calling unknowncode even read proof sketch go follows retagging reference know top stack location frozen rule apply fresh uniq tag never redundant access performed unknown code know access use tag reference tag unique forgeable hence unknown code access location would pop tag stack use reference know stack hence popped thus access unknown code actually theorem applies time reference whose tag sure leaked anyone else point location tag top unfrozen stack case immediately retagging know reference top stack writing following example know access fn demomutadvancedunique mut retag sure tag unique reasserts uniqueness reference writing know tag top stack know return shared reference without unsafecell immutable key property shared reference creating retagging really shared reference run unknown code even reference want use reference know value pointed reference changed example fn demoshrfrozen retag sure tag actually carry timestamp see let val unknowncode know return val proof sketch go follows retagging reference know location frozen case even rule applies unknown code write know unfreeze location location might get refrozen thencurrent timestamp read coming back unknown code check location frozen least since timestamp given tag location unfrozen got refrozen unknown code check would fail thus unknown code written location one interesting observation proof rely unknown code executed action performed every memory access additional check happen pointer dereferenced matter code foreign code hence problem reasoning case call code via ffi written language without notion care actual memory access performed foreign code also indicates could see check pointer dereference another state next retag two operation plus action memory access stacked borrows difficult implement miri dereferences happen time path evaluated nevertheless interesting might useful permit dereferences path evaluation help implemented validity invariant model described miri uncovered two issue standard library related validity invariant stacked borrows exception model pass entire test suite test failure earlier version mentioned section final model accepts code covered test suite look close enough see three libstd method currently whitelisted checked however even ran case effort already underway would fix concerned moreover wrote bunch compilefail test make sure model catch various violation key property ensure interesting change make libstd nonnull function turned mut const going mean final raw pointer created shared reference hence must used mutation earlier version post described model would permit behavior think actually least experiment ruling mutation pointer derived shared old rule rust overall quite happy expecting much trouble expecting run case libstd strange thing common otherwise hard declare illegal model could reasonably allow see test suite passing indication model may wellsuited rust however test suite tiny one brain come counterexample fact quite bit worried literally came demorefcell le two week ago else might missed come please test model come something funny think work thinking funny transmute particular using type punning union raw pointer prefer maybe crate unsafe code test suite test suite right might run miri easiest way try model playground type code select see thing long playground install miri computer miri depends rustc nightly updated regularly keep working wellsuited cratesio instead installation instruction miri provided readme still working making installing miri easier please let know trouble anything report issue comment post find chat recently partial zulip unsafe code guideline stream miri installed cargo miri project binary run miri dependency fully supported use crate like unlikely however run issue miri support operation case please search issue tracker report issue new support everything might able something case unfortunately cargo miri test currently broken want help detail moreover nice could run entire libcore liballoc libstd test suite miri ton interesting case core data structure exercise comparatively tiny miri test suite already helped find two soundness bug probably cargo miri test work would great find way run standard library test suite set something happens automatically regular basis notice regression update cargo miri test fixed mean time use library update see enough work everyone shy mere two week left internship significantly reduce rust activity favor finishing phd disappear entirely though worry still able mentor want help task thanks nikomatsakis feedback draft post shepmaster making miri available playground oliobk reviewing pr unparalleled speed want help report result experiment question comment please join discussion forum changelog dereferencing pointer always preserve tag casting raw pointer reset tag shr none box treated like mutable reference creating shared reference push shr item stack unless unsafecell moreover creating raw pointer special kind retagging
276,Lobsters,formalmethods,CSE-Formal methods,Reproducing a Memory-Tracking Bug with TLA+,https://medium.com/@fuzz_ai/reproducing-a-memory-tracking-bug-with-tla-35ce0652ce72,reproducing memorytracking bug tla,reproducing memorytracking bug tla tla alloy modelling allocation deallocation checking model pitfall detexifier conclusion http fuzzai fuzzai,reproducing memorytracking bug tlai interested first project getting familiar tla highlevel language modelling program system tla used find error design realworld distributed system curious compared model checker previously used alloy coworker recently tracked concurrency bug causing test failure interested seeing could model system tla reproduce failure using consistency checker tlcthe system failure occurs wrapper around memory allocation track per allocation phase performed allocation phase lightweight replacement full backtrace identifier representing particular section code maintained perthread stack failing test memory usage reported perphase walking list allocated memory item summing size process asserted found allocation marked free within listthe bug simple ordering problem deallocation code removed memory perphase list first marked free reverse wrapfree void wrapper p converttowrapper p state free phaselist l getlist p phase lock l mutex removefromlist l p unlock l mutex complete model wrote shown github gist explanation process followsmodelling allocation deallocationin order demonstrate concurrency problem allocate deallocate operation split multiple action otherwise model act entire sequence event atomic operation need explicitly represent memory allocator operation mutex instead chose represent operation portion outside mutex critical section inside mutex model action allocnoncritical alloccritical freenoncritical freecriticali also decide portion state worth including chose represent memory allocation record three element memory address ensure uniqueness phase state free allocated none state alloc free none memoryallocation addr address phase phase state state address phase constant model tla term mean could object come time check model tlc specific set model object plugged make model finite third constant model set thread constant phase set phase thread set thread address set address point time tla model corresponds assignment value variable variable may may change step evolution model used one variable represent set allocation use second variable track perphase list third variable track local variable inside particular threadvariables memory inuse allocation memorybyphase mapping phase set allocated item memorybythread mapping thread allocated record chose thread state represented memoryallocationas well may questionable choice memory allocation may none state represent thread currently engaged allocation deallocation represented special memoryallocation one thread start record need address phase asked tla pick one arbitrarily dontcareaddress choose address truedontcarephase choose p phase truenoallocation addr dontcareaddress phase dontcarephase state none init memory memorybyphase p phase memorybythread thread noallocation also write predicate check whether variable correct type typeinvariant memory subset memoryallocation memorybyphase phase subset memoryallocation phase list order important memorybythread thread memoryallocation thread one allocation deallocation time write action term current state unprimed variable next state primed variable action particular thread allocating memory phase p represented following action noncritical section allocate memory heap allocnoncritical p memorybythread state none e memoryallocation mstate alloc mphase p addressnotinuse memorybythread memorybythread except unchanged memorybyphase memory critical section add list phase allocated return use alloccritical let memorybythread mstate alloc memorybyphase memorybyphase except mphase memorybyphase mphase union memorybythread memorybythread except noallocation memory memory union tla modify set mapping instead provide replacement set mapping new time step except syntax way take function provide new one everywhere one valuethe use memorybythread ensures particular thread must execute allocnoncritical first memory point longer none execute allocnoncritical second time without going alloccritical one way represent flow execution practice probably easier write model pluscal instead provides natural way representing sequence operationswriting freenoncritical action painful scream problem even running model checker sense tla changing memoryallocation object record variable mutable replace memoryallocation wherever occurs replacement record freenoncritical let addr maddr state free phase mphase memory memorybythread state none memorybythread memorybythread except memorybyphase memorybyphase except mphase memorybyphase mphase union memory memory union finish specification combining action initial state along temporal operator mean always toplevel specification next e thread p phase allocnoncritical p e thread alloccritical e thread memoryallocation freenoncritical e thread freecritical var memory memorybyphase memorybythread spec init next varschecking modelin original code assertion fired element perphase list listed allocated assertion behavior model required every memory allocation every perphase list allocated state allalloced p phase memoryallocation memorybyphase p mstate alloc tla neatly typeset form perform exhaustive search violation invariant need fill model constant finite set arbitrarily picked five different address three phase two thread set treated symmetrical mean checker test one permutation elementstlc quickly find flag error invariant allalloced violatedand provides explorable time sequence lead state invariant false pitfallsthe first version invariant wrote like allalloced p phase memorybyphase p mstate alloc valid tla however due error specification tlc complained enumerate value believed infinite set unfortunately unable enumerate frequent outcome error specificationfor example got syntax wrong record instead ofnoallocation addr dontcareaddress phase dontcarephase state none usednoallocation addr dontcareaddress phase dontcarephase state none produce following error attempted enumerate set form ln vn enumerate value addr field working initial state memorybythread addr phase state none addr phase state none memorybyphase memory led make lot change try work around problem setting model variable incorrectly weirdo use choose problem string constant well part problem initial state look ok novice got structure expected see structure set real initial state look like memory memorybyphase memorybythread addr phase state none addr phase state none pitfall specifying system authoritative book tla quickly abandon using input format favor nicelytypeset specification made hard reproduce construct introduced text without referring elsewhere example specification example tuples enclosed typeset single angle bracket perhaps detexifier tla would helpthe underlying model tla set theory everything set accidentally performed union instead prompted yet another obscure error line tlc tried membership checkconclusionsmy experience getting toy specification written tla much difficult modelchecking system previously used alloy spin probably gotten hillel wayne practical tla first instead specifying system would done exercise pluscal instead may easier paththe model checker expected find bug coworked discovered however exercise writing specification would probably sufficient warning order operation incorrect assuming model clearly separated mutexprotected nonmutexprotected section herei think lot opportunity improve tla tlc experience better error message would help see http even worse experience mine tla toolbox good job packaging everything work box usability perspective maze tab subwindows feel modern sometimes error hidden popups behind tiny iconsmodelchecking also felt like manual process rather one sensible default example alloy specify maximum size model term number object rather filling constant one one also ask alloy show example x get nice graphical representation found lacking trying understand issue memory successfully allocated tlc function calculator tla useful far smooth interactive experience least toolboxfurther reading fuzzaifuzzai earlystage startup dedicated making software correctness tool easier use fuzzers model checker propertybased testing make software robust expose security vulnerability speed development
277,Lobsters,formalmethods,CSE-Formal methods,Closing the Gap Between Specification and Programming: VDM++ and Scala,http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=CF73DD3EB3173C356B7F9C793235CFBA?doi=10.1.1.432.1999&rep=rep1&type=pdf,closing gap specification programming vdm scala,,obj length filter flatedecode stream p
279,Lobsters,formalmethods,CSE-Formal methods,Standards We Love,https://www.youtube.com/watch?v=uqan23518Yc,standard love,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature standard love heidy khlaaf pwlconf youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature standard love heidy khlaaf pwlconf youtube
280,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Pipelined Y86-64 Microprocessors with UCLID5 (2018),https://www.cs.cmu.edu/~bryant/pubdir/CMU-CS-18-122.pdf,formal verification pipelined microprocessor,,obj length filter flatedecode stream
282,Lobsters,formalmethods,CSE-Formal methods,Solving Knights and Knaves with Alloy,https://www.hillelwayne.com/post/knights-knaves/,solving knight knave alloy,alloy alloy logic weirdness example advanced knight knave macro,famous logic puzzle originally raymond smullyan called knight knave puzzle set people either knight knave knight make true statement knave make false statement usually goal puzzle find example two people b say u knave know knave b knight knight knave contradiction knave know u knave false mean least one person knight since already knave b must knight hand said u would also valid knight knight knave puzzle supposed solved creativity cleverness read statement figure contradiction let instead take fun solve program alloy going use alloy talked extensively alloy regard modeling complex relational problem need instead alloy shine modelfinding ability find error spec find example satisfy spec importantly find matching model see given puzzle multiple solution first type abstract sig person sig knight extends person sig knave extends person saying person abstract signature people knight knave case knight knave disjoint nobody strict requirement alloy type system see later mean knight knave person set knight unioned set knave equal set people define predicate corresponds puzzle pred puzzle person first line say exactly two people remember since knight knave disjoint covering subset person set saying two people also mean knight knave want place condition two people say two people disj otherwise alloy could select b knight b knave might take unpacking build iteratively first p q logical statement p true q true intuitively p q either true false p q might true p true q false vice versa making p q part predicate must true predicate true since predicate corresponds knight knave solution finally predicate holding mean found correct solution knight q since clause true false knight q true knave q true every clause associated knight true every clause associated knave false finally knight b knave say either knight b knave knight case b knave could also written knave person would meaning mean ten signature case people model already capped number people part predicate could freely tweak problem without change model finder final model abstract sig person sig knight extends person sig knave extends person pred puzzle person disj b person knight b knave run puzzle running give u valid solution knave b knight alloy unable find matching model exactly one correct solution puzzle could also try knight b knave knight b knave b knight alloy find two solution knight b knight knave b knight expected logic weirdness propositional logic weird often unintuitive show imagine instead said knave b knave knight knave b knave give u answer said knave b knave knight knave knight b knave alloy find solution different opposite b b b b first clause impossible satisfy let make even stranger one person said knave pred puzzle person disj person knight knave unsatisfiable said asked would say knave claim x logical statement knight x claim claim x logical statement knight knight x predicate knight knight knave valid solution knave mean confusingly enough want know whether p true false need know whether talking knight knave answer asked would claim p knight test importing helper module boolean checking everybody regardless orientation give correct answer open utilboolean abstract sig person sig knight extends person sig knave extends person assert question p person b bool bistrue p knight p knight bistrue check question instead run puzzle use assert instead pred interested finding specific example work interested finding counterexample work find mean everybody answer question truthfully example grabbed knight knave puzzle problem two native islander named alice bob standing next know type either suddenly alice say least one u knave pred person disj b person knight knave knight b knave problem two native islander standing next one named claire named desmond know type either claire suddenly say knight desmond say either claire knight knight knight pred person disj c person c knight knight c knight c knight knight knight c c knave knight c knave knave problem three native islander named elena fernando gary standing together ask elena many knight among elena answered quite hear said ask fernando elena say fernando reply elena said one knight among u point gary say believe fernando lying like one pdf think mean pred person disj e f g person f knight e knight knight g knight f knight e knave f knave g knight e knight f knave g knight actually wrong f knave e say one knight among u pdf assumes said something incompatible aka f knave e knight infer exactly one knight problem infer f knave e say one knight among u restrict e said could say later could following many knight among e hungry e say f e said one knight among u accurately capture logic problem need make following adjustment f knight e knight knight f knight e knight knight f knight e made claim f knave infer nothing case two predicate give equivalent answer case using instead give wrong answer try replacing f statement e said least one knight problem travel along road come fork producing path right path left know one path lead death path lead freedom idea choose one path follow fortunately fork road two native islander named horace ingrid know one horace ingrid knight knave know allowed ask one question ask either horace ingrid person ask answer famous knight knave puzzle plug everything provided answer check instead need figure question ask test though given question work work mean regardless ask use answer consistently find right path since ask one question mean finding question always answer way usual solution ask would say path freedom assert person knave implies p person b bool b path freedom let person p one knight p knight bistrue p knight knight bistrue answer falsely b path freedom say b lead death invert answer knight p knight bistrue p knight knight bistrue bisfalse p knight knight bistrue problem work exactly one knight one knave two knight two knave answer truthfully person knave implies person person knight person knave implies bisfalse p knight knight bistrue bistrue p knight knight bistrue really funny famous solution work special case general case simpler always get true answer regardless pair biswhatevs p knight knight bistrue bistrue p knight p knight bistrue general case even use work even talking single person advanced knight knave puzzle get lot trickier one way adding another layer property example addition knight knave given person also either drunk sober sober people act normally drunk people believe false thing true true thing false example asked drunk knight knight believe knave truthfully mind answer knave contrast ask drunk knave knight believe knight lie answer knave making two signature extend abstract type make mutually exclusive instead want say four qualifier abstract type way mutually exclusive sig knight extends person sig knave extends person sig knight knave drunk sober person want declare knightknave mutually exclusive drunksober also want say everybody belongs categorization fact fact person knight knave drunk sober knight knave drunk sober person tell truth sober knight drunk knave writing p knight sober knave drunk get tiring pull claim predicate form pclaims statement however argument predicate must signature type logical expression typed could instead express pclaims statement could use macro let claim p bool p knight sober knave drunk bool use find solution new setup pred puzzle person disj person aclaims knave drunk knight drunk knave variation puzzle day night knight knightsknavesspies also easy include format
284,Lobsters,formalmethods,CSE-Formal methods,The KeY Project,https://www.key-project.org/,key project,continue reading continue reading international hackeython continue reading,summary abstract execution ae new program analysis technique automatically proving secondorder property program based symbolic execution abstract program secondorder symbolic store continue reading proving correctness program transformation abstract execution refinity smart contract really important get right first try see key used prove correctness hyperledger fabric chaincode key symposium brings together researcher interested key related aspect exchange recent achievement current idea discus next step milestone area well future direction general also latest development key tool presented discussed continue reading key symposium two week ago december international hackeython took place room kit karlsruhe germany five group consisting participant worked small project contributing overall good key system project addressing property usability performance system frequently ignored postponed since direct value research limited continue reading report international hackeython
285,Lobsters,formalmethods,CSE-Formal methods,"Test Generation from Bounded, Algebraic Specifications Using Alloy (2008)",http://www.di.fc.ul.pt/~mal/QUEST/ICSOFT2011.pdf,test generation bounded algebraic specification using alloy,,obj stream r v cb첐 xje q ҧdm ewh yvn tp xzy b u n f b ҵ sc c va篗 tۏ v isp ye v c endobj obj endobj obj stream ݓ зb dťi ð ծ zn
287,Lobsters,formalmethods,CSE-Formal methods,Introduction to the Coq Proof Assistant,https://www.youtube.com/watch?v=3WBUHEVr56c,introduction coq proof assistant,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature introduction coq proof assistant andrew appel youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature introduction coq proof assistant andrew appel youtube
288,Lobsters,formalmethods,CSE-Formal methods,Primitive integers has been merged to master,https://github.com/coq/coq/pull/6914,primitive integer merged master,,work make possible take advantage compact representation integer entire system opposed reduction machine useful heavily computational application even constructing term possible without representation concretely replaces part retroknowledge machinery primitive construction integer term introduces kind ffi map constant operator integer property operator expressed explicit axiom whereas hidden retroknowledgebased approach presented coq workshop coq working group used various group stm trace checking computational analysis etc contribution guillaume bertholon pierre roux pierreroux onerafr coauthoredby benjamin grégoire benjamingregoire inriafr coauthoredby vincent laporte vincentlaporte fondationinriafr
289,Lobsters,formalmethods,CSE-Formal methods,Runtime Verification in Erlang by Using Contracts,https://arxiv.org/pdf/1808.07937.pdf,runtime verification erlang using contract,,obj filter flatedecode length stream fb f r ӧ endobj obj filter flatedecode length stream r x u b f f nb lb n r n ο wka
291,Lobsters,formalmethods,CSE-Formal methods,Bounded Model Checking of C++ Programs based on the Qt Cross-Platform Framework (2017),https://ssvlab.github.io/lucasccordeiro/papers/stvr2017.pdf,bounded model checking c program based qt crossplatform framework,endstream endobj obj length filter flatedecode stream,obj length filter flatedecode stream ib pp r h h q hś þ k oie endstream endobj obj length filter flatedecode stream
292,Lobsters,formalmethods,CSE-Formal methods,Programming Z3,https://theory.stanford.edu/~nikolaj/programmingz3.html,programming,abstract content introduction figure resource source logical interface sort signature term formula quantifier lambda binding theory euf equality uninterpreted function congruence closure definition euf model arithmetic solving lra linear real arithmetic solving arithmetical fragment table table array deciding array reduction euf bitvectors solving bitvectors figure floating point arithmetic algebraic datatypes figure sequence string special relation available online transitive closure interfacing solver incrementality scope assumption core model method statistic proof retrieving solver state cloning solver state loading formula consequence cube figure table using solver blocking evaluation maximizing satisfying assignment exercise core correction set figure marco bounded model checking example propositional interpolation example monadic decomposition example solver implementation smt core figure cdcl sat theory figure exercise dual propagation implicants theory theory theorem ematching based quantifier instantiation modelbased quantifier instantiation figure sat core figure inprocessing coprocessing boolean theory horn clause solver http qsat figure figure figure figure initialize repeatedly update figure example nlsat tactic tactic basic http http solver tactic tactic solver parallel optimization figure multiple objective maxsat lemma proof figure maxres summary reference http http http http http http http http http http http http http http http http http http http http http http,nikolaj bjørner leonardo de moura lev nachmanson christoph wintersteiger microsoft research abstract tutorial provides programmer introduction satisfiability modulo theory solver describes use script provided python scripting language describes several algorithm underlying decision procedure within aim broadly cover almost available feature essence underlying algorithm content introduction satisfiability modulo theory smt problem decision problem logical formula respect combination background theory arithmetic bitvectors array uninterpreted function efficient smt solver specialized algorithm solving background theory smt solving enjoys synergetic relationship software analysis verification symbolic execution tool many respect thanks emphasis supporting domain commonly found program specification several scenario part query posed tool cast term formula supported logic useful tool writer idea available supported logic idea formula solved interacting smt solver always limited posing query single formula may require sequence interaction obtain usable answer need emerges tool writer idea method knob available summary tutorial aim answer following type question example touch theory available feature designed used underlying algorithm used program application top figure show overall system diagram version top left summarizes interface one interact script supplied text file pipe using api call highlevel programming language proxy call cbased api focus using python frontend mean interfacing start describing abstract syntax term formula accepted section formula draw symbol whose meaning defined set theory section solver section provide service deciding satisfiability formula tactic section provide mean preprocessing simplification creating subgoals also provides service purely satisfiability query optimization section service allow user solve satisfiability modulo objective function maximize minimize value also specialized procedure enumerating consequence backbone literal described section figure overall system architecture resource main point reference github repository interactive tutorial using frontend example tutorial executable found several system program use variety frontends use ocaml others c others use text interface instance use python frontend include source material tutorial assembled several source running example originate slide circulated sat smt community first sat example shamelessly lifted armin biere sat tutorial example appear slide natarajan shankar logical interface take input simplesorted formula may contain symbol predefined meaning defined theory section provides introduction logical formula used input basis propositional formula built atomic variable logical connective example propositional logical formula accepted import tie shirt bools tie shirt solver sadd tie shirt tie shirt tie shirt print scheck print smodel example introduces two boolean variable tie shirt creates solver object add three assertion begin mdmathpre mdk mdmathindent mathid tie vee mathid shirt wedge neg mathid tie vee mathid shirt wedge neg mathid tie vee neg mathid shirt end mdmathpre mdk call scheck produce verdict sat satisfying assignment formula satisfying model tie false shirt true extracted using smodel convenience python frontend contains shorthand function function solve set solver add assertion check satisfiability print model one available propositional logic important smaller subset formula handled reason formula combine symbol several theory theory array arithmetic z intsort f function f z z x z ints x z array z z fml implies x f store x f x solve fml formula fml valid true value integer x z array matter graph function f note using array index shorthand select array index manually verify validity formula using following argument integer constant x created using function ints creates list integer constant assumption x right side implication simplifies f store x x f replaced occurrence x restriction f equality f side follow argument f thus left establish store x x left side term theory array capture applicative map store update array position x value x retrieves content array index x case dually negation fml unsatisfiable call produce unsat formula accepted generally follow format described standard standard currently version defines textual language firstorder multisorted logic set logic defined selection background theory example logic quantifierfree linear integer arithmetic known qflia fragment firstorder logic formula quantifier free variable range integer interpreted constant integer allowed function integer multiplication division remainder modulus constant allowed relation besides equality part every theory also example provide smtlib python variant arbitrary formula setlogic qflia declareconst x int declareconst int assert mod x div x checksat python version solve x x also possible extract representation solver state import x ints x solver sadd x x print ssexpr produce output declarefun int declarefun x int assert mod x div x sort generally formula use finite set simple sort includes builtin sort bool supported theory define sort noteworthy int real bitvectors bitvec n every positive bitwidth n array array index elem every sort index elem string sequence seq every sort also possible declare new sort domain may never empty thus formula declaresort const solve forall unsatisfiable signature formula may include mixture interpreted free function constant example integer constant interpreted constant x used previous example free constant treated nullary function function take argument declared f function f z z creates function declaration take one integer argument range integer function boolean range used create formula term formula formula used assertion added solver term boolean sort otherwise term boolean nonboolean sort may mixed combination sort match example b boolsort f function f b z g function g z b bool solve g could produce solution form false f else g else true model assigns false graph f map argument graph g map value true standard builtin logical connective implies xor biimplication special case equality python saying b boolean b treated logical formula biimplication b set utility available traverse expression created every function application function declaration set argument accessed child x int x int n x print num args nnumargs print child nchildren print child narg print child narg print operator ndecl print op name ndecl name quantifier lambda binding universal existential quantifier bind variable scope quantified formula example solve x forall implies x solution matter value assigned x value nonpositive smaller value bound occurrence unrelated free occurrence restricted x equality constraint x also mistaken assignment case bound occurrence synonym x notice slightly different formula solve x forall implies x solution x free occurrence support also lambda binding rudimentary reasoning support based modelconstructing instantiation engine lambda may convenient expressing property array us array sort representing sort lambda expression thus result memset array integer integer produce value range lo hi otherwise behaves outside range reason quantifier free formula contains memset instantiating body lambda array z z array z z def memset lo hi return lambda x lo x x hi select x solve memset z select z lambda binding convenient creating closure recall meaining lambda x e e expression free occurrence x function take two argument substitute value x e us lambda lifting conjunction reynold defunctionalization reduce reasoning closure universally quantified definition treat array general function space firstorder definable function may array secondorder theorem established synthesizing lambda term instantiation thus q array q z b prove implies forall q implies select q x select q x provable synthesizes instantiation corresponding lambda z z x q theory summarize main theory supported case give brief taste decision procedure used theory reader wish gain indepth understanding decision procedure implemented may follow citation euf equality uninterpreted function logic equality uninterpreted function euf basic ingredient firstorder predicate logic theory constant function predicate symbol builtin relation equality following example f unary function x constant first invocation solve feasible model x interpreted element f identify function second invocation solve infeasible model f map x anything given two previous equality declaresort f function f x const x solve f f x x f f f x x solve f f x x f f f x x f x x decision procedure quantifierfree euf formula usually based unionfind maintain equivalence class term equated pictorially sequence equality assertion b b c b produce one equivalence class capture transitivity equality begin tikzpicture matrix node draw row column node rectangle drawnone eq b b c e b node circle draw abc b c node circle draw det e end tikzpicture possible check satisfiability disequalities checking whether equivalence class associated two disequal term thus adding neq produce contradiction checked comparing class representative representative begin tikzpicture matrix node draw row column node rectangle drawnone eq b b c e b neq node circle draw abc b c node circle draw det e end tikzpicture hand asserting c neq deduce conflict two term asserted disequal belong class class membership unionfind datastructures amortized nearly constant time begin tikzpicture matrix node draw row column node rectangle drawnone eq b b c e b c neq node circle draw abc b c node circle draw det e end tikzpicture unionfind alone insufficient function symbol used following example begin mdmathpre mdk mdmathindent mathid mathid b mathid b mathid c mathid mathid e mathid b mathid mathid mathid mathid f mathid mathid g mathid neq mathid f mathid b mathid g mathid e end mdmathpre mdk case decision procedure require reasoning congruence rule cdots xn yn rightarrow f ldots xn f ldots yn preparation solving example let u introduce constant used shorthand subterms thus introduce constant representative four compound subterms b b c e b neq g e g f f b equality information available obtain equivalence class begin tikzpicture matrix node draw row column node circle draw abc b c node circle draw det e node circle draw node circle draw node circle draw node circle draw end tikzpicture working bottomup congruence rule dictate class merged thus e rightarrow g e g implies following coarser set equivalence begin tikzpicture matrix node draw row column node circle draw abc b c node circle draw det e node circle draw node circle draw node circle draw end tikzpicture point congruence rule applied second time b rightarrow f f b producing equivalence class begin tikzpicture matrix node draw row column node circle draw abc b c node circle draw det e node circle draw node circle draw end tikzpicture class merged original formula required distinct congruence closure reasoning determines formula unsatisfiable congruence closure implicitly used notion congruence closure check satisfiability equality let u formally define notion let mathcal set term mathcal e set equality mathcal congruence closure mathcal modulo mathcal e finest partition cc mathcal mathcal e partition cc f ldots sk f ldots tk mathcal si ti partition cc ldots k partition cc definition cc mathcal rightarrow mathcal map term equivalence euf model satisfiable version running example b b c e b f g neq f g e b induces following definition equality b b c e b neq g e g f f b associate distinct value equivalence class begin tikzpicture matrix node draw row column node circle draw abc b c node circle draw det e node circle draw node circle draw node circle draw end tikzpicture presenting formula declaresort b c e consts b c e f function f g function g solve b b c e b f g f g e b produce model may look follows val b val val c val val e val val f val val val else val g else val model value val fresh constant distinct val graph f map argument val val val argument mapped else clause val else clause used default interpretation argument listed interpretation interpretation finite set val val val val val arithmetic arithmetical constraint nearly ubiquitous software model even though mainstream software operates finite precision arithmetic modeled precisely using bitvectors arithmetic unbounded integer often used sound way model software furthermore arithmetic real used diverse area model cyberphysical system axiomatic economics solving lra linear real arithmetic provide outline main procedure solving formula linear real arithmetic maintains dual simplex tableau encodes equality form ax feasibility equality depends bound loj leq xj leq hij currently associated variable following formula x real x solve x x x x x introduces auxiliary variable represents formula begin mdmathpre mdk mdmathindent mathid mathid x mathid mathid mathid x mdmathindent mathid x geq mathid mathid mathid mathid end mdmathpre mdk bound eg leq asserted search first two equality form tableau thus definition equiv x equiv x produce equality x x equivalent normal form x x basic dependent x nonbasic dual simplex tableau value nonbasic variable xj chosen loj hij value basic variable function nonbasic variable value unique value satisfies unique row basic variable occurs pivoting swap basic nonbasic variable used get value basic variable within bound example assume start set initial value x bound x geq leq geq made nonbasic instead becomes basic x x new tableau update assignment variable x resulting assignment model original formula solving arithmetical fragment solver available reason arithmetical constraint wildly different depending fragment arithmetic used summarize main fragment available decision procedure example table x range real b range integer logic description solver example lra linear real arithmetic dual simplex x frac leq lia linear integer arithmetic cut branch leq lira mixed realinteger x geq idl integer difference logic floydwarshall b leq rdl real difference logic bellmanford x leq utvpi unit twovariable inequality bellmanford x leq nra polynomial real arithmetic model based cad nia nonlinear integer arithmetic cad branch linearization table arithmetic theory many fragment arithmetic benefit specialized solver later discus fragment integer variable restricted value describing pseudoboolean constraint fragment currently handled special way include fragment listed table description example horn linear real arithmetic z frac x leq one variable positive twovariable per inequality geq minhorn x geq min z bilinear arithmetic geq transcendental function e x geq modular linear arithmetic equiv mod table fragment arithmetic user may appreciate domain modeled using fragment theory arithmetic already supported belongs class special support available practical side worth noting us infinite precision arithmetic default thus integer rational represented without rounding benefit representation ensures soundness result operation decision procedure may end producing large numeral taking execution time thus user produce linear arithmetic constraint large coefficient long decimal expansion may face performance barrier array declaration array intsort intsort introduces constant array sort mapping integer integer solve constraint array solve x x store x produce solution x necessarily equal treat array function space thus function f x converted array using lambda lambda x f x f sort time b rightarrow c lambda x f x sort array b c set builtin function available array summarize together representation using lambda binding select array index select store v update array value v index lambda j j v j k v constant array r r sort v lambda j v map f map function f value lambda j f j ext b extensionality implies ext b b ext b b deciding array reduction euf formula using combinators store k map ext checked satisfiability expanding respective lambda definition subterms illustrate occurrence store produce constraint euf following assume given solver ground assertion using array occurrence store v b j add following assertion sadd store v j j v j sadd store v v theory array extensional two array equal behave selected index produce model quantifier free formula theory extensional array ensures two array equal model whenever behave index extensionality enforced array term b instantiating axiom extensionality sadd implies forall b b since universal quantifier occurs negative polarity introduce skolem function ext depends b represent extensionality requirement sadd implies ext b b ext b b convince asserting additional constraint force model solver satisfy array axiom suppose given model satisfying additional asserted equality equality enforce axiom store index occur also enforce extensionality array two array equal evaluate value index bitvectors let u play bitfiddling resource list substantial repertoire bitvector operation used alternative potentially expensive operation note modern compiler already contain vast set optimization automatically perform conversion used check synthesize optimization example test whether bitvector power two use combination bitwise operation subtraction def ispoweroftwo x return x x x x bitvec x prove ispoweroftwo x x range absolute value variable obtained using addition xor sign bit v bitvec mask v prove v v v v mask mask notice python variable mask corresponds expression v right arithmetic signed shift v notice also classical firstorder logic operation total particular bitvector arithmetic v fully specified contrast say c specifies v undefined v signed integer value solving bitvectors mostly us bitblasting approach deciding bitvectors bitblasting refer reduction bitvector constraint propositional logic treating bit bitvector propositional variable let u illustrate bitvector addition compiled set clause expression v w v w bitvectors represented vector output bit relation v w provided clause encode ripplecarry adder seen figure encoding us auxiliary vector carry bit internal adder figure bitvector addition circuit floating point arithmetic floating point bitvectors interpretation specified ieee floating point standard x fp x fpsort print x declares floating point number x bit exponent significand result adding x x see represented floating point number exponent bitvector significand algebraic datatypes theory firstorder algebraic datatypes capture theory finite tree characterized property tree finite occurs check tree generated constructor junk two tree equal constructed exactly way confusion basic example binary tree datatype given figure tree datatype tree treedeclare empty treedeclare node left tree data z right tree tree treecreate const tree solve treeempty figure binary tree datatypes may produce solution node empty empty similarly one prove tree part prove treenode sequence string theory string sequence extend theory free monoid additional function useful string sequence length operation builtin string sequence operation converting string natural number back length prefix suffix string add length string string must concatenation prefix suffix u string u prove implies prefixof suffixof u length length length u concat u one concatenate single element sequence unit consts seqsort intsort solve concat unit intval concat unit intval prove concat unit intval concat unit intval two solver available string exchanged setting parameter sset smtstringsolver seq contribution thai trinh sset smtstringsolver murphy berzish special relation case possible use firstorder axiom capture required property relation example say r partial order suffices assert axiom solver declaresort r function r b x z consts x z sadd forall x r x x sadd forall x implies r x r x x sadd forall x z implies r x r z r x z assertion using r catch reasoning r often requires instantiating full transitive closure relation impractical number instance lead quadratic overhead compared size initial constraint example asserting sadd r r r obtain half million instance instead axiomatizing relation partial ordering allows declare relation builtin property satisfies partial ordering axiom thus definition r partialorder creates binary relation r satisfies partial order axiom second argument unsigned integer used distinguish partial order r partial order relation signature thus partialorder creates partial ordering relation different r us different index usual property relation added solver builtin decision procedure partial order avoids quadratic instantiation transitive closure axiom reason graph reachability check consistency assertion involving r binary relation special relation support total linear order sadd forall x r x x sadd forall x implies r x r x x sadd forall x z implies r x r z r x z sadd forall x r x r x use instead r totallinearorder treelike ordering sadd forall x r x x sadd forall x implies r x r x x sadd forall x z implies r x r z r x z sadd forall x z implies r x r x z r z r z use instead r treeorder piecewise linear order sadd forall x r x x sadd forall x implies r x r x x sadd forall x z implies r x r z r x z sadd forall x z implies r x r x z r z r z sadd forall x z implies r x r z x r z r z use instead r piecewiselinearorder additional example special relation constraint available online transitive closure transitive closure relation property fully axiomatized using firstorder formalism quantifierfree formula using transitive closure relation remain decidable however using finite model construction given relation binary r transitive closure r another relation tcr relates two element nonempty path connect r transitivereflexive closure extends transitive closure also relating two element equal create transitive closure transitive reflexive closure r r function r b tcr transitiveclosure r trcr transitivereflexiveclosure r solver b c consts b c sadd r b sadd r b c sadd tcr c print scheck produce interfacing solver solver maintain set formula support satisfiability checking scope management formula added one scope retracted scope popped section describe interface solver section provides set use case section describes underlying solver implementation available incrementality solver used check satisfiability assertion incremental way initial set assertion checked satisiability followed additional assertion check assertion retracted using scope pushed popped hood us oneshot solver first check call made solver default behavior switch incremental solver incremental solver us smt core see default usecases nt require feature smt core may beneficiary use specialized solver solver finite domain bitvectors enumeration type bounded integer booleans specified using qffd logic scope operation push pop create respectively revert local scope assertion added within push retracted matching pop thus following session result verdict sat unsat sat p q r bools p q r solver sadd implies p q sadd q print scheck spush sadd p print scheck spop print scheck assumption alternative scope possible check satisfiability assumption set literal thus session sadd implies p q sadd q print scheck p also produce verdict unsat conjunction p rightarrow q neg q p unsat method assertandtrack q p effect adding implies p q add p implicit assumption running example becomes p q bools p q solver sadd q sassertandtrack q p print scheck core extract subset assumption used derive unsatisfiability subset assumption known unsatisfiable core simply core following example unsatisfiable core single element p unrelated assumption v appear core p q r v bools p q r v solver sadd q sassertandtrack q p sassertandtrack r v print scheck print sunsatcore note invoke scheck prior extracting core core available last call scheck produced unsat default solver return minimal core core minimal proper subset also core default behavior changed solver corresponds either smt core sat core underlying solver created sequence preprocessing tactic core minimization guaranteed take effect force core minimization user rely setting following parameter def setcoreminimize sset satcoreminimize true bitvector theory sset smtcoreminimize true general smt model scheck return sat provide model assigns value free constant function assertion current model accessed using smodel offer access interpretation active assertion consider example f function f z z x ints x sadd f x f f print scheck print smodel possible model x f else access model set entry entry map constant function declaration constant treated nullary function interpretation map constant constant expression map function function interpretation stub smodel print iterates assignment model produce output x f else function interpretation comprise set entry specify function behaves selected argument combination elsevalue cover argument listed entry numentries f numentries range numentries print f entry print else f elsevalue produce output else easiest way access model use eval method let evaluate arbitrary expression model reduces expression constant consistent way model interprets constant function model print meval x meval f meval f produce output statistic gain sneak peak solver extracting statistic call print sstatistics display value internal counter maintained decision procedure mostly valuable coupled detailed understanding decision procedure work may used introductory view characteristic search proof proof object follow natural deduction style available solver interface enable proof production top level order retrieve proof sset produceproofs true sadd varphi assert unsat scheck print sproof granularity proof object besteffort basis proof smt core relatively finedgrained proof procedure perform quantifier elimination instance qsat described section exposed big opaque step retrieving solver state retrieve current set assertion solver using sassertions set unit literal using sunits literal nonunits using snonunits solver state printed format using ssexpr cloning solver state method stranslate ctx clone solver state new solver based context passed useful creating separate noninterferring state solver loading formula method sfromfile sfromstring add constraint solver state file string file default assumed format file name end dimacs assumed dimacs propositional format consequence product configuration system use constraint describe space legal configuration parameter get fixed fewer fewer configuration option available instance model car fixed option wheel size become unavailable furthermore possible one option available configuration parameter fixed used answer query form given configuration space value v fixing value subseteq v largest subset subseteq v value become fixed furthermore value fixed provide explanation term value fixed got fixed functionality available consequence method b c bools b c solver sadd implies b implies c background formula print sconsequences c assumption b c implied produce result sat implies c c implies b implies c term sat terminology consequence finding produce set backbone literal useful finding fixed parameter product configuration setting relies procedure integrates tightly cdcl conflict driven clause learning algorithm contains two implementation procedure one sat core another smt core section expands cdcl integration theory cube ask suggest case split sequence case split cubing method used partitioning search space subproblems solved parallel alternatively simplify problem cdcl engine solverfor qffd sadd f sset satrestartmax def cubeandconquer cube scube len cube return unknown istrue cube return sat issat scheck cube issat unknown stranslate sctx cube issat cubeandconquer issat unsat return issat return unsat figure basic cube conquer underlying solver based sat core see section us lookahead solver select cube default cuber produce two branch corresponding case split single literal sat core based cuber configured produce cube represent several branch empty cube indicates failure solver support cubing smt sat core support cubing generic solver based tactic timeout resource bound encountered cubing cube comprising boolean constant true indicates state solver satisfiable finally possible scube method return empty set cube happens state unsatisfiable branch represented conjunction literal cutoff branch configured using satlookaheadcubecutoff summarize configuration parameter depend value cutoff table satlookahead used description cubecutoff cubedepth depth fixed maximal size cube returned cubefreevars freevars depth cube governed ratio nonunit literal branch compared nonunit variable root cubefraction adaptivefreevars adaptive fraction create adaptivepsat lookahead cube cubepsat psat base exponent used clausebase clause weight table lookahead parameter heuristic used control literal selected cube configured using parameter using solver describe collection algorithm developed top interface described previous section blocking evaluation model used refine state solver example may wish invoke solver loop new call solver block solution evaluate constant exact assignment def blockmodel smodel sadd f f f mdecls farity maximizing satisfying assignment another use model use guide notion optimal model maximal satisfying solution short ms set formula p subset p consistent respect solver state extended bigger subset p without becoming inconsistent relative provide procedure finding maximal satisfying subset figure extends set ms greedily adding many satisfied predicate p round possible find predicate p add note backbone respect current ms friendly hint includes negation p querying solver future round def tt f return istrue smodel eval f def getmss p sat scheck return ms q q p tt q return getmss ms p def getmss ms p p p ms backbone set len p p pspop sat scheck ms backbone p ms ms p q q p tt q p p ms else backbone backbone p return ms exercise suppose p list corresponding digit binary number p ordered significant digit goal find ms largest value binary number modify getmss produce core correction set marco procedure combine model core process enumerates unsatisfiable core maximal satisfying subset set formula p respect solver maintains map solver tell u subset p yet known superset core subset ms def ff p return isfalse smodel eval p def marco p map solver setcoreminimize mapcheck sat seed p p p ff map p scheck seed sat ms getmss seed p mapadd p ms yield ms ms else mu sunsatcore mapadd mu yield mu mu figure marco algorithm computing core maximal satisfying assignment efficiently enumerating core correction set active area research many significant improvement developed basic implementation bounded model checking figure illustrates bounded model checking procedure take transition system input check goal reachable transition system described langle mathit init mathit trans mathit goal mathcal v mathcal rangle mathit init predicate mathcal v describes initial state mathit trans transition relation mathcal v time mathcal time mathcal v set reachable state set inductively defined valuation mathcal v either model mathit init reachable value v mathcal v model mathit trans goal reachable reachable state model mathit goal python provide initial condition init using variable x transition trans us variable x xns fvs goal using variable x bounded model checking unfolds transition relation trans establish goal reachable bounded model checking diverges goal unreachable function substitute e subst take expression e list pair subst form replaces variable e index def fresh global index index return const f index def zipp x y return p p zip x y def bmc init trans goal fvs x xns solver sadd init count true print iteration count count p fresh boolsort sadd implies p goal sat scheck p print smodel return sadd trans y fresh xsort x x nfvs fresh xsort x fvs trans substitute trans zipp xns x fvs y xns nfvs goal substitute goal zipp x xns x xns fvs xns y nfvs example let u check whether k underbrace ldots k number represented using bit corresponding transition system us state variable named next state initially step variable incremented goal state consts bitvecsort bmc bounded model checking good establishing reachability produce certificate nonreachability safety algorithm complete reachability nonreachability find simplistic implementation using python api online propositional interpolation possible compute interpolants using model core procedure computes interpolant formula b land b unsatisfiable proceeds initializing true saturating state lceil b rceil respect rule begin mdmathpre mdk mdmathindent lceil mathid mathid b mathid rceil longrightarrow lceil mathid mathid b mathid land neg mathid l rceil mbox mathid b vdash neg mathid l mathid land mathid notvdash neg mathid l mdmathindent mathid mbox mathid vdash neg mathid end mdmathpre mdk partial interpolant produced pogo satisfies b vdash terminates vdash neg condition land notvdash neg l ensures algorithm make progress suggests using implicant l supseteq l land iteration implicant obtained model land def mklit x istrue meval x return x else return x def pogo b x sat acheck amodel l mklit x x x unsat bcheck l notl bunsatcore yield notl aadd notl else print expecting unsat break example reverse interpolant neq neq b neq using vocabulary neq implied b inconsistent solverfor qffd b solverfor qffd bools aadd badd print list pogo b monadic decomposition suppose given formula varphi x using variable x possible rewrite boolean combination formula x ldots psik x ldots thetan say formula psij thetaj monadic depend one variable application monadic decomposition convert extended symbolic finite transducer regular symbolic finite transducer regular version amenable analysis optimization procedure monadic decomposition developed recall python prototype import def nuab r x b x const x x sort range len x const sort range len return exists r xy r ay exists x r xy r xb def isunsat fml solver sadd fml return unsat scheck def lastsat fmls len fmls return spush sadd fmls scheck sat lastsat smodel fmls spop return def mondec r variable print variable phi r variable len variable return phi l int len variable x variable l variable l def dec nu pi isunsat pi phi return boolval false isunsat pi phi return boolval true fmls boolval true phi pi try extend nu lastsat nu none fmls nu must consistent assert none mevaluate z true z x b mevaluate z true z psiab r ay r xb phia mondec lambda z r az phib mondec lambda z r zb x nupush exclude xa yb nuadd nuab r x b dec nu pi psiab f dec nu pi psiab nupop return phia phib f nu initially true return dec solver boolval true example formula monadic decomposition bitvector assertion x bitvectors bitwidth land land x k neq compute monadic decomposition def testmondec k r lambda v v v v v v k bvs bitvecsort k use bitvectors x consts x bvs re mondec r x assert isunsat re r x check correctness print r x re testmondec solver implementation five main solver embedded smt solver general purpose solver cover wide range supported theory supplemented specialized solver sat formula polynomial arithmetic horn clause quantified formula theory admit quantifierelimination smt core smt solver general purpose solver cover wide range supported theory built around cdcl architecture theory solver interact sat euf blackboard theory solver right figure communicate core exchange equality variable assignment atomic predicate core responsible case splitting handled cdcl sat solver letting theory learn constraint equality relevant current branch begin picture multiput oval tr multiput oval br multiput oval tl multiput line multiput line multiput line multiput line multiput oval bl put shortstack ematching based quantifier instantiation put shortstack euf sat put shortstack model based quantifier instantiation put oval tr put oval br put oval tl put oval bl put line put line put line put line multiput oval tr multiput oval br multiput oval bl multiput oval tl multiput line multiput line multiput line multiput line put stringssequences put datatypes put bitvectors put array put arithmetic put theory put vector put vector put vector put vector put vector put vector end picture figure architecture smt core solver force using smt solver user create simple solver using function simplesolver smt solver integrates two strategy quantifier instantiation default strategy enabled disable one disable automatic configuration mode disable instantiation strategy sset smtautoconfig false disable automatic smt core configuration sset smtmbqi false disable model based quantifier instantiation sset smtematching false disable ematching based quantifier cdcl sat theory architecture mainstream smt solver including smt core us sat solver enumerate combination truth assignment atom truth assignment satisfy propositional abstraction formula theory solver used check assignment admit model modulo theory resulting architecture known dpll refer cdcl really relies sat solver incorporate conflict driven clause learning go beyond algorithm associated dpll importantly cdcl supply facility learning new clause search learned clause block future case split exploring failed branch take following example sadd x x introducing name bools x x obtain propositional formula satisfiable possible truth assignment true true false true requires satisfiability following conjunction x x already case x x unsat avoid assignment require also satisfying blocking clause new truth assignment true true true false produce x x satisfiable example illustrates step used cdcl integration theory solver process final result sat solver simulate procedure using api figure show cdcl solver leverage propositional solver prop check propositional abstraction theory solver theory whose role check conjunction literal produced prop figure list auxiliary routine required create abstraction def simplecdclt clause prop solver theory solver ab propadd abstractclauses ab clause theoryadd p ab p p ab true issat propcheck sat issat propmodel lit mklit ab p p ab unsat theorycheck lit propadd theoryunsatcore else print theorymodel return else print issat return index def abstractatom ab atom global index atom ab return ab atom p bool p index index ab atom p return p def abstractlit ab lit isnot lit return abstractatom ab litarg return abstractatom ab lit def abstractclause ab clause return abstractlit ab lit lit clause def abstractclauses ab clause return abstractclause ab clause clause clause def mklit p istrue meval p return p else return p figure auxiliary routine lazy cdcl call simple cdcl solver expose important feature drive performance importantly efficient cdcl solver integrate theory propagation let theory interact sat solver propagate assignment atom instead adding blocking clause time sat solver done theory solver interacts tightly sat solver backjumping exercise dual propagation implicants propositional assignment produced prop necessarily minimal may assign truth assignment literal irrelevant truth set clause extract smaller assignment one trick encode negation clause separate dual solver truth assignment primal solver unsatisfiable core dual solver exercise augment simplecdclt dual solver reduce assignment sent theory theory theory practice need solve combination theory formula used initial example x f store x f x integrate several theory solver modularity desirable maintain separate solver per theory achieve objective main question integration need address determine union two theory cup consistent given solver build solver cup address objective effective theory shared signature embedable implies cup consistent sufficient condition setting identified nelson oppen theorem union two consistent disjoint stably infinite theory consistent let u define ingredient theorem disjoint theory two theory disjoint share functionconstant predicate symbol exception example theory arithmetic array disjoint arithmetic symbol array symbol select store process purification used formal tool bring formula signaturedisjoint form introduces fresh symbol shared subterms purified version running example function f f array store x arithmetic x x reality purification noop fresh variable correspond directly node abstract syntax tree expression stably infinite theory theory stably infinite every satisfiable quantifierfree formula satisfiable infinite model nelsonoppen combination let consistent stably infinite theory disjoint countable signature assume satisfiability conjunction literal decided n n time respectively combined theory th consistent stably infinite satisfiability quantifier free conjunction literal decided time n n convex th satisfiability th decided time n n convexity theory th convex every finite set literal every disjunction vee ldots vee bn begin mdmathpre mdk mdmathindent mathid model mathid b ldots vee mathid mathid n mathid b mathid n mathid iff mathid model mathid mathid mathid b mathid mathid mathid mathid leq mathid n end mdmathpre mdk many theory convex therefore admit efficient theory combination finally note every convex theory non trivial model stably infinite far every theory convex notably reduction approach theory combination theory combination essentially reduction set core theory comprising arithmetic euf sat bitvectors finite domain translate propositional sat theory reduced core theory provided example reduction section ematching based quantifier instantiation ematching based quantifier instantiation us ground term find candidate instantiation quantifier take example b c x ints b c x f function f z z g function g z z z prove implies forall x f g x c b c g c b c f b smallest subterm properly contains x g x c pattern contains bound variable universal quantifier ground equality b c instantiation x c equal g c b trigger instantiation following tautology implies forall x f g x c f g c c chasing equality f g c c g c b c b c derive f b prof implication example illustrated ematching take starting point pattern term p capture variable bound quantifier derives substitution theta ptheta equal useful term modulo useful equality useful source useful term current ground term mathcal maintained search current asserted equality search may used useful equality congruence closure structure cc introduced section contains relevant information track ground equality ground term represents equivalence class term congruent current context given pattern p compute set substitution modulo current congruence closure invoking bigcup mathcal match p emptyset ematching defined recursion pattern p begin mdmathpre mdk mdmathindent mathid match mathid x mathid mathid theta mathid x mapsto mathid mid theta mathid mathid x notin theta mdmathindent cup theta mid theta mathid mathid x theta theta mathid x mathid cc mathid mdmathindent mathid match mathid c mathid mathid emptyset mathsf mathid c notin mathid cc mathid mdmathindent mathid match mathid c mathid mathid mathid mathsf mathid c mathid cc mathid mdmathindent mathid match mathid f vec mathid p mathid mathid bigcup mathid f vec mathid mathid cc mathid mathid match vec mathid p mathid n vec mathid mathid n ldots mathid match vec mathid p vec mathid mathid end mdmathpre mdk always possible capture quantified variable single pattern purpose ematching applied sequence pattern known multipattern collectively contains bound variable secret sauce efficiency find instantiation little overhead possible across large set term incrementally us codetrees address scale bottleneck search involving thousand pattern term modelbased quantifier instantiation ematching provides highly syntactic restriction instantiation alternative ematching based using current model quantifierfree part search state used evaluate universal quantifier satisfied order current model extend full model conjunction asserted constraint call method modelbased quantifier instantiation take following example import z intsort f function f z z g function g z z n x ints n x solve forall x implies x x n f x g x f g may produce model form n f else g else f var interpretation g map value x mapped however f x interpreted happens constant method allowed finding satisfying assignment based model evaluation loop high level described following procedure check satisfiability psi land forall x varphi x psi quantifier free sake illustration single quantified formula quantifier free body varphi modelbased quantifier instantiation mbqi procedure described figure sadd psi true unsat scheck return unsat smodel checker solver checkeradd neg varphim x unsat checkercheck return sat checkermodel find x notin tm xm sadd varphi figure modelbased quantifier instantiation algorithm notice protoalgorithm code directly executable use notation tm say partially evaluated using interpretation example let mapsto f x mapsto mathit x mathit mathit else f f z tm mathit z mathit mathit else example formula assume model quantifierfree constraint follows n f else g else negated body quantifier instantiated model x x else x else x satisfied instantiation x congruent n current model therefore instantiate quantifier x n add constraint implies n n n f n g n notice syntactic property quantifier body read definition graph g range x x n format instance guarded definition hence record reading creating next model g next round n f instantiated g evaluates elsewhere follows graph f x thus model g given else f var modelbased quantifier instantiation quite powerful search space instantiation term finite cover many decidable logical fragment including epr effectively propositional reasoning ufbv uninterpreted function bitvectors array property fragment extension give taste example ufbv char bitvecsort f function f char char function char char x consts x char solve uge forall x x x f x following model possible solution f else else f var ufbv quantified logic uninterpreted function bitvectors sort variable bitvectors standard bitvector operation allowed follows problem finite domain therefore decidable nt easy however quantifierfree fragment np hard nexptime hard encoded epr quantified fragment another complexity jump related ufbv decision procedure quantified bitvector formula developed john chakraborty niemetz et al recall taht epr fragment firstorder logic formula quantifier prefix exists vec x forall vec thus block existential quantified variable followed block universally quantified variable formula inside quantifier prefix boolean combination equality disequalities bound variable free constant well predicate symbol applied bound variable free constant noteworthy epr formula contain function easy see epr decidable first replacing existentially quantified variable fresh constant instantiate universally quantified variable combination free constant resulting ground formula satisfiable obtain finite model quantified formula bounding size universe free constant formula exists x forall p x lor q lor free constant epr sat core sat core optimized selfcontained sat solver solves propositional formula take advantage fact operates propositional theory performs advanced inprocessing step sat solver also act blackboard select boolean predicate express cardinality arithmetical pseudoboolean constraint literal generally theory finite domain solved using sat solver identifies quantifierfree finite domain theory using designated logic qffd support propositional logic bitvector theory pseudoboolean constraint enumeration datatypes example following scenario introduces enumeration type color bitvectors u v requires least three predicate u v v u satisfied import solverfor qffd color red green blue enumsort color red green blue clr const clr color u v bitvecs u v sadd u v v u clr red clr green clr green atleast u v v u print scheck print smodel satisfiable possible model v u clr green figure show overall architecture sat solver begin picture multiput oval tr multiput oval br multiput oval tl multiput line multiput line multiput line multiput line multiput oval bl middle bottom put oval tr put oval br put oval tl put oval bl put line put line put line put line middle top put oval tr put oval br put oval tl put oval bl put line put line put line put line left box multiput oval tr multiput oval br multiput oval tl multiput line multiput line multiput line multiput line multiput oval bl right box multiput oval tr multiput oval br multiput oval tl multiput oval bl multiput line multiput line multiput line multiput line middle box multiput oval r multiput oval l multiput line multiput line multiput line multiput line put lookahead put unit walk put walk sat put xor resolver put pseudobooleans put cardinality put coprocessors put boolean theory put cdcl sat core put subsumption put variable removal put blocked clause put inprocessing put vector put vector put vector put vector put vector put vector end picture figure architecture sat solver four main component central sat solver engine performs case split lemma learning backtracking search main cdcl engine structured similar mainstream cdcl solver draw auxiliary functionality inprocessing inprocessing provides mean sat solver simplify current set clause using global inference inprocessing performed periodic basis integrates several technique developed sat solving literature past decade known blocked clause elimination asymmetric literal addition asymmetric covered clause elimination subsumption asymmetric branching coprocessing set coprocessors available support alternative mean search sat core solver also coprocessor sset satlocalsearchthreads spawn concurrent thread use walksat find satisfying assignment main cdcl solver attempt find either satisfying assignment produce empty clause sset satthreads spawn concurrent thread additional main thread find proof empty clause satisfying assignment thread share learned unit literal learned clause sset satunitwalkthreads spawn concurrent thread us local search heuristic integrates unit propagation sset satlookaheadsimplify true enables lookahead solver simplifier inprocessing enables slightly powerful technique learning new unit binary clause lookahead solver used find case split cube feature described section boolean theory three class boolean function supported using specialized boolean theory handler optional many problem already solved using sat core function clausified cardinality pseudoboolean theory handler suitable constraint encoding clause cause significant overhead xor solver unlikely worth using available evaluation cardinality constraint cardinality constraint linear inequality form sum n fi geq k sum n fi leq k fi formula k constant n say least k fi hold k fi hold respectively cardinality constraint appear toplevel formula nested arbitrary subformulas contain arbitrary formula instance p q r u bools p q r u solve atmost p q r u implies u atleast p r p q r solution cardinality solver enabled setting parameter sset satcardinalitysolver true parameter false cardinality constraint compiled clause alternative encoding method made available controlled using parameter satcardinalityencoding pseudoboolean constraint pseudoboolean constraint generalize cardinality constraint allowing coefficient linear inequality form sum n aifi geq k sum n aifi leq k ai positive natural number value ai k legal safely truncated k without changing meaning formula constraint p leq land p geq land u written solve pble pbge u solution q false u true r true pseudoboolean solver enabled setting parameter sset satpbsolver solver available option compiling pseudoboolean constraint circuit sorting totalizer compile pseudobooleans clause horn clause solver horn solver contains specialized solver constrained horn clause default us spacer horn clause solver arie gurfinkel solve horn clause arithmetic constrained horn clause disjunction literal set uninterpreted predicate interpreted function interpreted predicate arithmetical operation relation uninterpreted predicate may occur negatively without restriction occur positively one place solver also contains datalog engine used solve datalog query stratified negation finite domain header space large finite domain encoded succinctly using ternary bitvectors fixedpoint context contains facility building horn clause generally set stratified datalog rule querying resulting set rule fact additional information fixedpoint engine found http provide simple illustration horn clause usage mccarthy function illustrates nested recursion couple line otherwise make sense computes function described directly x x pretend partial interesting specification prove automatically using horn clause def mc x x return x else return mc mc x def contract x assert x mc x assert x mc x x rewriting functional program logical form achieved introducing binary relation input output mc representing functional program logic program set horn clause assertion also constrained horn clause contain uninterpreted predicate mc negatively positive occurrence mc solverfor horn mc function mc z z b x z ints x z sadd forall x implies x mc x x sadd forall x z implies x mc x mc z mc x z sadd forall x implies x mc x sadd forall x implies x mc x x print scheck find solution mc sufficient invariant establish assertion get better view invariant mc evaluating symbolic input x print smodel eval mc x produce invariant x x qsat qsat solver decision procedure satisfiability select theory admit quantifier elimination used check satisfiability quantified formula linear integer figure linear real figure nonlinear polynomial real arithmetic figure booleans algebraic datatypes figure described invoked whenever solver created one supported quantified logic solver created qsat tactic solverfor lia quantified linear integer arithmetic x u v ints x u v b sadd forall u implies u v exists x x u x b print scheck print smodel figure given supply cent stamp lower bound denomination stamp produced thus find v every u larger equal v written nonnegative combination solverfor lra quantified linear real arithmetic x z real x z sadd x forall z z x z print scheck figure set real dense solverfor nra quantified nonlinear real arithmetic x z real x z sadd x sadd x sadd forall z z x print scheck figure quantified nonlinear real polynomial arithmetic import tactic qsat solver nat datatype nat natdeclare z natdeclare pred nat nat natcreate z natz nats def move x return x x def win x n n return false freshconst nat return exists move x win n sadd win z print scheck figure checking winning position game successor figure encodes simple game introduced logic quantified algebraic datatypes directly instantiate solver performs qsat tactic section provides brief introduction tactic solver build abstraction refinement loop originally developed quantifier elimination goal procedure given quantifierfree f find quantifier free g g equiv exists vec v f assumes tool project eliminates vec v conjunction satisfiable strengthening project vec v rightarrow existsvec v procedure us step initialize g leftarrow bot repeatedly find conjunction imply f wedge neg g update g leftarrow g vee mbox project vec v algorithm realizes approach formulated figure def qe exists vec v f e solver solver eadd f aadd neg f g false sat echeck emodel lit lit literal f istrue eval lit assume f negation normal form assert unsat acheck aunsatcore pi project vec v g g vee pi eadd negpi return g figure quantifier elimination core extraction projection notice protoalgorithm code directly executable qesto generalizes procedure nested qbf quantified boolean formula implementation generalizes qesto smt approach based playing quantifier game let u illustrate game boolean formula assume given begin mdmathpre mdk mathid g forall mathid u mathid u mathid e mathid e mathid f mathid f mathid u mathid u mathid e land mathid u neg mathid u mathid e land mathid e mathid e neg mathid u end mdmathpre mdk game proceeds follows forall start overline e overline e model neg f exists strike back color blue overline e model f forall backtrack nt matter assigned already case overline e model f forall learns neg forall color red overline u overline e overline e model neg f exists counter color red overline u color blue overline e model f forall lost already case color red overline u overline e model f summarize approach two player forall try satisfy neg f exists try satisfy f player control variable example take exists forall exists forall ldots f round value already fixed forall fix value forall fix value change round forall guess value satisfy neg f player loses round create succinct nogood strengthen f resp neg f depending lost backjump round main ingredient approach thus projection strategy projection added learn mistake thus player avoids repeating losing move strategy prune move opponent illustrate example projection us model based projection find satisfiable quantifierfree formula implies existentially quantified formula encodes losing state example suppose would want compute quantifierfree formula implies exists x leq x wedge z leq x wedge x leq z note formula equivalent quantifier free formula exists x leq x wedge z leq x wedge x leq z equiv z leq leq z vee leq z leq z size equivalent formula quadratic size original formula suppose satisfying assignment formula inside existential quantifier say x mapsto mapsto z mapsto yz therefore z greatest lower bound x therefore select branch choice elimination x result projection z leq leq z nlsat solver created invoking solverfor qfnra relies selfcontained engine specialized solving nonlinear arithmetic formula decision procedure quantifierfree formula real using polynomial arithmetic solverfor qfnra x real x sadd x x x x print scheck nlsat solver automatically configured formula syntactically qfnra fragment one directly use without specifying specialized solver setoption print solving displaying result decimal place solve x x tactic contrast solver ultimately check satisfiability set assertion tactic transform assertion set assertion way prooftree comprised node representing goal child representing subgoals many useful preprocessing step formulated tactic take one goal create subgoal tactic basic access set tactic print tactic additional information obtain description optional parameter name tactic tactic name print name thelp tparamdescrs give single example tactic application transforms goal simplified subgoal obtained eliminating quantifier trivially reducible combining repeated formula one x real x g goal gadd x exists x print g tactic qelight tactic simplify print g additional information tactic available http http solver tactic given tactic method tsolver extract solver object applies tactic current assertion report sat unsat able reduce subgoals definite answer tactic solver method corresponds producing tactic solver instead expose set builtin tactic main solver accessed name sat smt qsat nlqsat quantified nonlinear real arithmetic eg logic nra qffd qffd nlsat qfnra parallel parameter setparam parallelenable true enables parallel mode selected tactic including qfbv us sat solver subgoals option enabled cause use cubeandconquer approach solve subgoals tactic psat psmt pqffd provide direct access parallel mode make sure parallelenable true force use parallel mode control cubeandconquer procedure spends time simplification cubing parameter parallel namespace main option toggle parallelthreadsmax cap maximal number thread default maximal number thread used parallel solver bound number process optimization depending application learning formula satisfiable may sufficient sometimes useful retrieve model optimal respect objective function support small repertoire objective function invokes specialized optimization module objective function supplied main approach specifying optimization objective function specify whether find solution maximize minimize value arithmetical case term linear arithmetic term bitvector term thus specifying objective mathit maximize solver instructed find solution variable maximizes value alternative way specify objective soft constraint assertion optionally annotated weight objective satisfy many soft constraint possible solution weight used objective find solution least penalty given sum weight unsatisfied constraint python api one us optimize context specify optimization problem optimize context relies builtin solver solving optimization query architecture optimization context provided figure usetikzlibrary shape arrow usetikzlibrary positioning tikzstyle block rectangle draw text centered rounded corner minimum tikzstyle line draw latex begin tikzpicture node distance scale place node node block text transformation constraint rightarrow pbo node block leftof transformation text optimization smt formula objective node block rightof transformation text combination combination objective function node block ofoptimization right ofoptimization text optsmt optsmt arithmetic node block ofcombination left ofcombination text maxsmt maxsmt soft constraint node block ofoptsmt left ofoptsmt text smtsolvers pb cost solver node block right smtsolvers text smtcore smt solver node block right smtcore text satcore sat solver draw edge path line optimizationeast transformationwest path line transformationeast combinationwest path line transformation combination path line combinationsouth node left optsmt path line combinationsouth node right maxsmt path line maxsmtsouth node smtcore path line maxsmtsouth node satcore path line optsmtsouth node smtcore path line smtsolverseast node left smtcore end tikzpicture figure optimization engine optimize context provides three main extension satisfiability checking optimize x ints x omaximize x maximizes lia objective u v bitvecs u v ominimize u v minimizes bv objective oaddsoft x soft constraint optional weight using soft assertion equivalent posing optimization problem thus following formulation equivalent detects second variant turn set weighted soft assertion b bools b oaddsoft oaddsoft b equivalent ominimize b multiple objective possible add multiple objective three way combine objective function box x vx max x mid varphi x vy max mid varphi x lex x vx max x mid varphi x vy max mid varphi vx pareto x left vx vy mid begin array l varphi vx vy forall x varphi x rightarrow x leq vx vee leq vy end array right instance pareto objective specified follows x ints x opt optimize optset prioritypareto optadd x x mx optmaximize x optmaximize optcheck sat print mxvalue myvalue maxsat conventional definition maxsat minimize number violated soft assertion several algorithm maxsat developing new algorithm active area research describe maxres also default solver maxsatmaxsmt problem illustration assume given unweighted soft constraint weight maxsat problem f ldots first four soft constraint satisfied conjunction hard constraint f thus case f underbrace core system transformed weakened maxsat problem follows f vee vee wedge vee wedge wedge procedure formalized figure claim solving find optimal solution purpose consider cost model respect maxsat problem cost written cost number soft constraint false precisely lemma every model f cost cost proof lemma able refer soft constraint transformed system give name new soft constraint name vee name vee wedge name vee wedge wedge new name consider soft constraint core since core least one false let j first index among fj false evaluates soft constraint eg forall j fi f forall j f fi box thus eventually possible satisfy soft constraint weakening could potentially create soft constraint solution weakened system optimal solution def adddef fml name bool fml sadd name fml return name def relaxcore core f prefix boolval true f f f core range len core prefix adddef core prefix f adddef prefix core def maxsat f cost fscopy unsat scheck f cost relaxcore sunsatcore f return cost f f tt f figure core based maxsat using maxres weighted assertion handled reduction unweighted maxsat example b c bools b c optimize oadd c oadd b oaddsoft oaddsoft b oaddsoft c print ocheck print omodel efficient implementation maxsat flatten weight demand given core soft constraint split two part one part soft constraint coefficient weight soft constraint minimal weight part comprises remaining soft constraint example b core weight weight b weight b therefore split two part one weight weight applying transformation core obtain simpler maxsat problem b c bools b c optimize oadd c oadd b oaddsoft b oaddsoft b oaddsoft c print ocheck print omodel summary tutorial presented overview main functionality exposed presenting underlying algorithm example driven way attempted give taste underlying decision procedure proof engine presenting example programming query top attempted provide introduction turning smt solving service logic query go beyond checking satisfiability single formula tuning extended query top basic service provided sat smt solver active area research new application scenario new discovery reference mario alviano model enumeration propositional circumscription via unsatisfiable core analysis tplp fahiem bacchus george katsirelos using minimal correction set efficiently compute minimal unsatisfiable set computer aided verification international conference cav san francisco ca usa july proceeding part ii page url http fahiem bacchus george katsirelos finding collection mus incrementally cpaior banff ab canada may june proceeding volume page springer clark barrett pascal fontaine cesare tinelli satisfiability modulo theory library smtlib wwwsmtliborg nikolaj bjørner mikolás janota playing alternating quantifier satisfaction lpar short presentation paper maria paola bonacina christopher lynch leonardo mendonça de moura deciding satisfiability theorem proving speculative inference j autom reasoning aaron r bradley zohar manna checking safety inductive generalization counterexample induction formal method computeraided design international conference fmcad austin texas usa november proceeding page url http aaron r bradley zohar manna henny b sipma decidable array verification model checking abstract interpretation international conference vmcai charleston sc usa january proceeding page url http hana chockler alexander ivrii arie matsliah computing interpolants without proof armin biere amir nahir tanja e j vos editor hardware software verification testing international haifa verification conference hvc haifa israel november revised selected paper volume page springer url http jürgen christ jochen hoenicke cutting mix daniel kroening corina pasareanu editor computer aided verification international conference cav san francisco ca usa july proceeding part ii volume lecture note computer science page springer isbn url http alessandro cimatti alberto griggio ahmed irfan marco roveri roberto sebastiani experimenting solving nonlinear integer arithmetic incremental linearization olaf beyersdorff christoph wintersteiger editor theory application satisfiability testing sat international conference sat held part federated logic conference floc oxford uk july proceeding volume lecture note computer science page springer isbn url http alain colmerauer thibichhanh dao expressiveness full first order constraint algebra finite infinite tree rina dechter editor principle practice constraint programming cp international conference singapore september proceeding volume lecture note computer science page springer isbn url http alexandru costan stephane gaubert eric goubault matthieu martel sylvie putot policy iteration algorithm computing fixed point static analysis program kousha etessami sriram k rajamani editor computer aided verification international conference cav edinburgh scotland uk july proceeding volume lecture note computer science page springer isbn url http davis g logemann loveland machine program theorem proving communication acm leonardo mendonça de moura nikolaj bjørner proof refutation piotr rudnicki geoff sutcliffe boris konev renate schmidt stephan schulz editor proceeding lpar workshop knowledge exchange automated provers proof assistant international workshop implementation logic doha qatar november volume ceur workshop proceeding ceurwsorg url http leonardo mendonça de moura dejan jovanovic modelconstructing satisfiability calculus verification model checking abstract interpretation international conference vmcai rome italy january proceeding page url http leonardo mendonça de moura grant olney passmore strategy challenge smt solving maria paola bonacina mark e stickel editor automated reasoning mathematics essay memory william w mccune volume lecture note computer science page springer isbn url http leonardo mendonça de moura nikolaj bjørner efficient ematching smt solver cade page leonardo mendonça de moura nikolaj bjørner bug mole skeleton symbolic reasoning software development ijcar page isil dillig thomas dillig alex aiken cut proof complete practical technique solving linear inequality integer ahmed bouajjani oded maler editor computer aided verification international conference cav grenoble france june july proceeding volume lecture note computer science page springer isbn url http b dutertre l de moura fast lineararithmetic solver dpll cav yeting ge leonardo mendonça de moura complete instantiation quantified formula satisfiabiliby modulo theory cav page marijn heule oliver kullmann siert wieringa armin biere cube conquer guiding cdcl sat solver lookaheads kerstin eder joão lourenço onn shehory editor hardware software verification testing international haifa verification conference hvc haifa israel december revised selected paper volume lecture note computer science page springer isbn url http krystof hoder nikolaj bjørner leonardo mendonça de moura μz efficient engine fixed point constraint computer aided verification international conference cav snowbird ut usa july proceeding page url http carsten ihlemann swen jacob viorica sofroniestokkermans local reasoning verification c r ramakrishnan jakob rehof editor tool algorithm construction analysis system international conference tacas held part joint european conference theory practice software etaps budapest hungary march proceeding volume lecture note computer science page springer isbn url http mikolás janota joao marquessilva solving qbf clause selection proceeding twentyfourth international joint conference artificial intelligence ijcai buenos aire argentina july page url http ajith k john supratik chakraborty extending quantifier elimination linear inequality bitvectors tool algorithm construction analysis system international conference tacas held part european joint conference theory practice software etaps rome italy march proceeding page url http dejan jovanovic solving nonlinear integer arithmetic mcsat ahmed bouajjani david monniaux editor verification model checking abstract interpretation international conference vmcai paris france january proceeding volume lecture note computer science page springer isbn url http anvesh komuravelli arie gurfinkel sagar chaki smtbased model checking recursive program cav page mark h liffiton alessandro previti ammar malik joao marquessilva fast flexible mu enumeration constraint carlos mencía alessandro previti joão marquessilva literalbased mc extraction proceeding twentyfourth international joint conference artificial intelligence ijcai buenos aire argentina july page url http david monniaux quantifier elimination algorithm linear real arithmetic lpar logic programming artificial intelligence reasoning number lecture note computer science page springer verlag isbn nina narodytska fahiem bacchus maximum satisfiability using coreguided maxsat resolution carla e brodley peter stone editor aaai july quebec city quebec canada page aaai press nina narodytska nikolaj bjørner mariacristina marinescu mooly sagiv coreguided minimal correction set core enumeration jérôme lang editor proceeding twentyseventh international joint conference artificial intelligence ijcai july stockholm sweden page ijcaiorg isbn url http aina niemetz mathias preiner andrew reynolds clark barrett cesare tinelli solving quantified bitvectors using invertibility condition hana chockler georg weissenbacher editor computer aided verification international conference cav held part federated logic conference floc oxford uk july proceeding part ii volume lecture note computer science page springer url http r nieuwenhuis oliveras c tinelli solving sat sat modulo theory abstract procedure dpll j acm alessandro previti carlos mencia matti jarvisalo joao marquessilva improving mc enumeration via caching serge gaspers toby walsh editor sat august september volume lecture note computer science page springer v ramakrishnan r c sekar andrei voronkov term indexing john alan robinson andrei voronkov editor handbook automated reasoning volume page elsevier mit press isbn martina seidl florian lonsing armin biere tool generating epr formula qbf third workshop practical aspect automated reasoning manchester uk june july page url http joão p marque silva karem sakallah grasp search algorithm propositional satisfiability ieee trans computer christoph wintersteiger youssef hamadi leonardo mendonça de moura efficiently solving quantified bitvector formula formal method system design
293,Lobsters,formalmethods,CSE-Formal methods,Automated Test Generation and Mutation Testingfor Alloy (2017),https://kaiyuanw.github.io/papers/paper4-icst17.pdf,automated test generation mutation testingfor alloy,,obj height bitspercomponent length width colorspace r filter flatedecode stream g endstream endobj obj lastchar subtype fontdescriptor r basefont encoding r width firstchar type font tounicode r endobj obj filter flatedecode length stream endstream endobj obj height bitspercomponent subtype image length mask width colorspace indexed devicergb filter flatedecode type xobject stream endstream endobj obj filter flatedecode length stream ť q ml f b e miϯ endstream endobj obj sa false type extgstate sm endobj obj subtype filter flatedecode length stream l ntxtldd cq k vcn x nt xq r w q h z v endstream endobj obj subtype truetype fontdescriptor r basefont xohgngtimesnewromanpsmt encoding type encoding difference space dollar hyphen period slash zero one two three four five six seven eight nine c e copyright width firstchar type font lastchar endobj obj height bitspercomponent length width colorspace r filter flatedecode stream v j ѿ endstream endobj obj parent r count type page kid r r r r r r r r r r endobj obj r charset bcovmusgreaterrefdbgnxc capheight ascent flag italicangle descent xheight fontname fontbbox stemh type fontdescriptor stemv endobj obj subtype truetype fontdescriptor r basefont vyftfdtimesnewromanpsmt encoding winansiencoding width firstchar type font lastchar endobj obj filter flatedecode length stream bт jl j t呺z r w k g ri mjm ß hx ڭ j ar j tb
294,Lobsters,formalmethods,CSE-Formal methods,E-SPARK: Automated Generation of Provably Correct Code from Formally Verified Designs,https://pdfs.semanticscholar.org/481c/d4d2409115429f4b824f370eb08fa338d67a.pdf,espark automated generation provably correct code formally verified design,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream f
296,Lobsters,formalmethods,CSE-Formal methods,"Coq Users in PariS on Thursday, February 7",https://www.meetup.com/Coq-Users-in-PariS/events/258266635/,coq user paris thursday february,http wwwnomadiclabscom,bonne année à toutes espère que serum une très bonne année pour vous et pour bien la commencer nous somme heureux dannoncer le premier meetup coq de lannée le super programme comporte trois exposés timothy bourke en ulm la compilation de schémasbloc vers compcert thomas letan anssi freespec un framework de raisonnement compositionnel pour coq matthieu sozeau inria equation un compilateur de patternmatching dépendenton vous attend le février à à mine paristech boulevard saintmichel paris salle beaucoup à nomadic lab http wwwnomadiclabscom qui sponsorise généreusement la nourriture et la boisson du meetup et aux mine de nous accueillir à nouveauthéo et emilio english happy new year extremely excited announce next coq meetup take place mine paristech feb timothy bourke en ulm compiling hierarchical block diagram compcert thomas letan anssi freespec compositional reasoning framework coq matthieu sozeau inria equation compiler dependent pattern matchingwe expect majority coq development team aroundwe like thank nomadic lab generosity sponsoring food drink meetup mine hosting u againtalks english demand really looking forward see théo emilio
297,Lobsters,formalmethods,CSE-Formal methods,"Building A ""Simple"" Distributed System - Formal Verification",https://jack-vanlightly.com/blog/2019/1/27/building-a-simple-distributed-system-formal-verification,building simple distributed system formal verification,last post first post section introduction tla warning state every variable,last post described protocol satisfy requirement invariant established first post today look formal verification tlaformal verification another niche tool toolbox tool require skill others use tool expensive others practioner decide ifwhenhow use themthe hard part wo nt necessarily know beneficial given problem face nt already skilled tool difficult learn might never invest enough able make call might invest lot time find nt great match problem point get stowed toolbox may may get used expect many software engineer see learning formal method difficult high risk ventureso given aim post software engineer without prior experience tla able get gist spec see useful project please give feedback succeeded noti split three part learning tla pluscal pseudocode compiles tla highly recommend leslie lamport video series book hillel wayne great content book ron pressler writes tla blog section introduction tlawarning try avoid abstract overly mathematical language try keep closer language programmer used however want get serious tla going embrace strangeness mathematical nature tla learned watching leslie lamports video series reading book specifying systemsa tla specification model set variable constant represent state system want model state tla term assignment concrete value variable specification within single step state represents one moment time system snapshot system notion time continuous set discrete step variable assigned value invariant verified new step mean new state state assigns value every variable though variable must change one state another modify variable must explicitly say value remains unchangedlet take super simple example counter incremented forever specification formed formula either describe initial state system possible next state tla spec based initial state next state initial state set variable next state formula increment value one next state next state formula spec executed forever
298,Lobsters,formalmethods,CSE-Formal methods,LLVMVF: A Generic Approach for Verification of Multicore Software (2013),https://www.cmpe.boun.edu.tr/~sen/publications/jetta13.pdf,llvmvf generic approach verification multicore software,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream b c ā b endstream endobj obj endobj obj endobj obj endobj obj c endobj obj c endobj obj font procset pdftext extgstate property endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream g u l h j zi endstream endobj obj stream ki h v sy ӵc endstream endobj obj endobj obj stream fd z z æd ŋdi x p otbb mێ x g rxw gǥ ow ifjjf ˈ ospy
300,Lobsters,formalmethods,CSE-Formal methods,Intro to SPARK,https://learn.adacore.com/courses/intro-to-spark/index.html,intro spark,,tutorial interactive introduction spark programming language formal verification tool learn difference ada spark use various analysis tool come spark document prepared claire dross yannick moy
302,Lobsters,formalmethods,CSE-Formal methods,Why Don't People Use Formal Methods?,https://www.hillelwayne.com/post/why-dont-people-use-formal-methods/,nt people use formal method,formal specification formal verification code verification design verification partial verification full verification highassurance formal coding getting spec specification hoare logic euclid design contract curryhoward correspondence let prove leftpad contract cleanroom right spec validation compcert proving spec knuth quote estimate peter guttmann theorem prover early proof hard smt revolution smt ironfleet bother vast majority distributed system outage partial code verification cut huge amount undefined behavior c design specification formal specification specification language design language correctbyconstruction fundamentally broken critical bug model checker model checker unbounded statespace explosion problem design spec summary buy book hire richard whaling ron pressler john regehr,saw question software engineering stack exchange barrier prevent widespread adoption formal method question closed opinionbased answer thing like expensive website airplane sorta kinda true explain much wrote provide larger historical picture formal method actually unused make used begin need lay term really formal method community much tiny band foraging steppe mean different group use term different way broadly two domain fm formal specification study write precise unambiguous specification formal verification study prove thing correct thing includes code abstract system use separate mean specifying thing often use different mean verify make thing even confusing somebody say formal specification usually mean specify verify system somebody say formal verification usually mean mean specify verify code clarity purpose divide verification code verification cv design verification dv similarly divide specification c d term used wider fm world start talking c cv move d dv additionally partial verification verify subset spec full verification verify entire spec could difference proving never crash accepts wrong password never crash admits wrong password lock account give wrong password three time history assume full verification also clarify type software formalizing people implicitly divide software highassurance software medical device aircraft everything else people assume formal method widely used former unnecessary latter anything optimistic people highassurance software use formal method focus instead regular software finally disclaimer historian tried due diligence probably mistake also specialize formal specification d dv likely mistake anything say code verification see something wrong email fix formal coding getting spec prove code correct need know correct mean form specification spec code one unambiguously say whether specific output follows spec saying list sorted unclear know sorting criterion using even mean sort instead might say list integer l sorted ascending order two index j j l l j code spec fall three major camp first writing statement independent code would write sort function separate file write theorem return sorted list oldest form spec still way isabelle thing second embeds spec code form prepostconditions assertion invariant might add postcondition function return value sorted list assertionbased spec originally formalized hoare logic first integrated programming language euclid early style also called design contract popular form industrial verification finally type system curryhoward correspondence math theorem proof encoded dependent type define type sorted list declare function type signature int sorted int see example look let prove leftpad isabelle good example independent theorem spec spark dafny embedded assertion spec coq agda dependent type spec squint bit look like three form code spec map three main domain automated correctness checking test contract type coincidence correctness spectrum formal verification one extreme spectrum reduce rigour effort verification get simpler narrower check whether mean limiting explored state space using weaker type pushing verification runtime mean total specification becomes mean partial specification vice versa many consider cleanroom formal verification technique primarily work pushing code review far beyond humanly possible right spec verification prof code match spec raise question know right spec finding right spec one biggest challenge formal method also one raised objection way skeptic mean exactly way advocate think outsider say right spec usually thinking validation showing spec actually client want formally prove code sort list customer actually want uber soup wasted bunch time rapid iteration short feedback cycle people argue actually validate requirement true verifying code validate code two problem argument though first delay value fm eliminate entirely done rapid iteration presumably idea customer want start verifying code second know exactly customer want thing assume want want software randomly crashing want security hole everybody recognizes importance nobody saying skip unit test iterate least prove version control system randomly delete chapter user book problem finding right spec fundamental often know want spec think requirement human term mathematical term say distinguish park bird saying could explain human giving bunch picture park bird specific example capturing idea distinguishing park bird actually translate formal spec requires u able formalize human concept serious challenge get wrong possible figure appropriate spec expert time writing appropriate spec skill need develop needed develop coding skill lot recent success code verification thing obvious map want express want example compcert formally verified c compiler spec never miscompile none actual verification part spec still need prove code match spec proving spec earliest mean code verification see dijkstrastyle think really hard true method basically algol designed help example might prove insertion sort work arguing base case empty list add one element element sorted sorted list k element add one element insert element smaller number larger number mean list still sorted induction insert sort sort entire list obviously look rigorous general idea dijkstra others used style prove bunch algorithm correct including many concurrency primitive also style give rise knuth quote beware bug code proved correct tried pretty easy screw math proof way nobody notice read estimate something like published math proof error peter guttmann great essay farcical code proof got ton proven code would immediately crash run time exploring automatically prove mathematical theorem first theorem prover coming researcher pascal community using theorem provers verify program early programming dedicated verification language middecade people would write property code write checkable proof code property earlier theorem provers simply helped human check verify proof sophisticated one could prove part theorem lead next problem proof hard proof hard obnoxiously hard quit programming join circus hard surprisingly formal code proof often rigorous proof mathematician write mathematics creative activity definite answer valid show work creativity formalism computer bad combination take induction mathematician could look immediately know induction work valid case thing need rigorously formalize theorem prover proof contradiction proof contrapositive etc along also need formalize every assumption even stuff mathematician bother prove example addition associative b c b c theorem prover priori know true either prove hard declare assumption prover take true dangerous buy theorem library someone already proved expensive early proof assistant competed number inbuilt proof tactic bundled theorem library one first widespread proof checker spade advertised complete arithmetic library key selling point next got ta actually get proof prover try find write general case automatically infering proof undecidable extremely restricted case like propositional logic hm typechecking npcomplete part stuck writing proof computer verify correct mean need strong background math c whatever domain working like hardware compiler whatever intricacy program spec intricacy theorem prover using specialty unto make thing worse computer property throw lot wrench proof remember said assuming addition associative dangerous language associative c intmax intmax intmax intmax undefined assume associative addition c proof wrong code broken either avoid making assertion prove specific snippet never cause overflow could say undefined addition bug using language unbound integer language positive feature impede proof take following snippet true b false f assert always true depends maybe f modifies maybe another thread concurrency modifies maybe b aliased modifying also modifies possible language explicitly prove happen purity help case wreck proof case force use recursion higherorder function get stuff done incidentally foundational writing good functional program good coding bad proving formal verifier dilemma expressive language harder prove anything le expressive language harder write anything first production verification language restricted subset expressive language subset lisp euclid subset pascal etc nothing discussed far get actually proving realworld program table stake start writing proof first place proof hard however getting better proof assistant researcher keep adding new heuristic theorem library preverified component etc hardware improvement help faster computer mean faster search smt revolution day population approach proof automation smt speaking broadly smt solver turn math theorem constraint satisfaction problem turn creative problem computational one may still need feed intermediate problem lemma step theorem better proving every damn thing stanford released first modern smt solver stanford validity checker built make cvc released saw minor production use scene changed around microsoft research released big advantage lot userfriendly smts honestly saying much msr used internally help prove property window kernel meaning invested morethanthebareminimum ux arguably made smt default choice generalpurpose automated proving many tool cv rely smt come default accessible smt solving kick pant formal verification community make lot simple proof trivial nasty proof tractable turn meant people could start proving thing expressive language power tackle challenge expressive statement incredible progress evident ironfleet project using advanced smt solver cuttingedge verification language microsoft able write line verified dafny code personyears blazingfast rate four whole line day proof hard bother would good time step back ask point trying prove program conforms spec correctness spectrum two part verification question objectively correct program much rigorously verified correctness obviously verified better le verified verification cost time money multiple constraint optimize performance time market cost etc optimium necessarily fully proved correct question becomes minimal verification need much cost get case get away like correct may better spending time making ux better getting last correctness question correct significantly cheaper correct answer yes comfortable saying codebase welltested welltyped mostly correct modulo fix prod even writing four line code day fact vast majority distributed system outage could prevented slightlymorecomprehensive testing comprehensive unit testing say nothing fuzzing propertybased testing modeltesting get really far simpler trick without needing go full proof type n test getting enough verification still much easier go mentioned earlier cleanroom developer practice involving comprehensive documentation careful flow analysis extensive code review proof formal verification even unit testing done properly cleanroom reduces defect density le bugkloc production team using equal shorter delivery time team use certainly better line day cleanroom one many highassurance technique sit mainstream software practice code verification need full code verification write good software even write nearperfect software case necessary industry waste money however mean formal method whole uneconomical many aforementioned highassurance technique rely writing code spec formally prove verification two common way people benefit industry first verifying design instead code cover next section second partial code verification cover right partial code verification expensive full verification daytoday programming partial verification could still benefit proving property part code instead proving sort function always sort least prove loop forever never writes bound still get lot benefit example writing even basic proof c program great way cut huge amount undefined behavior limitation availability language designed either full verification verification former case missing lot nice feature expressive language latter case need way prove stuff language hostile concept reason research partial verification focus highpriority language like c java also see lot people working restricted subset language example spark restricted subset ada write critical stuff spark interop lesscritical ada code language like pretty niche commonly people bake specific kind verification core structure language production type system common form may know tail always return tail least know type also case like rust prof memory safety pony prof exception safety slightly different spark framac partial verification partial full verification also tend made programming language expert formal method expert two discipline lot overlap identical might language like rust haskell actuallykindausable practice design specification far talked code verification another side formal method though going one step abstract verifying design deep enough synonymous formal specification somebody say formal specification probably mean specify verify design talked proving every line code really really hard many problem production system line code interaction component system handwave away detail implementation like saying assume identify bird easily look park bird highlevel module fit overall design zoom enough though becomes possible least much easier describe thing possibly implement like runtime environment human interaction merciless flow time scale formalizing intention overall system instead intention line code much closer human level design requirement much ambiguous code level give example take code procedure rough specification called make syscall persist data storage handle system error property need verify difficult sort straightforward serialize data properly malformed input violate guarantee handle possible way syscall could fail compare high level logging system specification message logged answer message message reach system message logged exactly message sent queue transfer medium deliver deliver order logged mean permanently logged message allowed logged later unlogged allowed bounce logged unlogged ending logged server explodes middle logging message need journaling property storage medium matter medium loses data outside scope requirement gdpr etc etc etc without benefit formal design harder express actually need system express need idea design actually give need something else sound kinda different consequence formal expressing intention design easily make sure actually building need build use programming language represent code use specification language represent design spec langs usually oriented design specification code specification although language used going forward going refer specification language design language dl absolutely minimize confusion first full dl arguably vdm came around since seen huge variety different spec langs space design language lot diverse fragmented code verification language rough stereotype people invented dl mean end people invented cvls end since heavily influenced specific problem domain dl sort idea semantics brief tour early design language language modeled z business requirement relational algebra promela messaging csp sdl telecommunication flowchart harel statecharts controller automaton decision table decision table people mostly designed dl solve specific problem least two three realworld case study result generally positive practicioners say give insight problem make easier explore solution long time biggest champion praxis altran used correctbyconstruction combination z design spark code build safety critical system claimed could work much faster cheaply writing spec discover design mistake latestage project recently pamela zave dabbling alloy discovered chord one major distributed hash table fundamentally broken recently aws started finding critical bug writing tla spec experience people try writing spec become big fan also big mismatch value fan outsider fan biggest benefit act writing design force understand writing formally express system suddenly lot subtle error become painfully obvious utterly unpersuasive outsider want get people try use dl need give way verify design actually property want fortunately also extremely important lot specifier design verification big field research model checker code verify design writing theorem thankfully got another trick use model checker instead writing proof design correct brute force state space see reachable state incorrect find good lot benefit model checking one write proof save lot time effort two learn write proof skill barrier lot lower three design broken model checker give explicit counterexample make fixing issue much much le painful especially bug take step reproduce good luck finding also couple drawback one little le powerful specifically could dealing unbounded model infinite number distinct state example speccing message queue processor pretty straightforward work given list ten message need make sure work list message well infinite number infinite number state model checker various trick handle like identifying equivalence class symmetry really casebycase basis big drawback statespace explosion imagine three process four sequential step long interleave step way affect behavior total possible execution behavior process one five initial state total behavior model checker make sure behave nicely assuming interact state space get bigger even faster combinatorial explosion seen primary challenge model checking lot work put making tractable meantime another way handle state explosion throw hardware biggest challenge model checking performance problem good solving performance problem model checking easily parallelizable optimizing model checking small parameter spin aws cluster run large parameter practice lot specifier use model checker switch theorem provers necessary lot specifier use model checker reaching limit switch le intensive form verification problem design spec design verification easier faster code verification lot spectacular success people use problem dv much insidious code verification technical problem design verification social problem people see point much consequence design code design language automatic way generate code way take existing code verify match design programmer tend mistrust software artifact code forcibly synced code reason documentation comment diagram wikis commit message often neglected programmer also seem believe benefit specifying least experience assume whatever currently use pseudocode diagram tdd sufficient getting design right know universal good explanation besides general conservatism reasoning every methodology community know exact complaint tdd folk gripe people want try tdd haskellers gripe people care static typing etc etc etc really hard get people excited something already even agree benefit summary verifying code hard problem people though theorem provers smt solver get sophisticated probably remain specialist thing foreseeable future verifying design much easier cultural barrier adoption think possible change though twenty year ago automated testing code review pretty niche thing eventually went mainstream code contract niche thing still hopefully explains fm niche least better usual web airplane argument feel free yell obvious mistake made interested using design spec work buy book hire thanks nick p richard whaling ron pressler john regehr feedback
303,Lobsters,formalmethods,CSE-Formal methods,Typeful Programming (1991),http://www.lucacardelli.name/Papers/TypefulProg.pdf,typeful programming,,obj length filter lzwdecode stream pf pl j tm pe endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter lzwdecode stream gx ck w u endstream endobj obj procset pdf text font r r extgstate r endobj obj length filter lzwdecode stream oi lm p r mh 鑦 qf e w r cf bd cu 䶬 endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter lzwdecode stream gx c w v u k g zg xjt h ϸ endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter lzwdecode stream h pd h r e j b c p ԇ
304,Lobsters,formalmethods,CSE-Formal methods,Interview with Authors of Paper awarded POPL 2019 Most Influential Paper,https://research.fb.com/popl-2019-most-influential-paper-award-for-research-that-led-to-facebook-infer/,interview author paper awarded popl influential paper,cristiano calcagno dino distefano peter w hearn hongseok yang acm sigplan influential popl paper award infer,excited congratulate cristiano calcagno dino distefano peter w hearn facebook hongseok yang kaist receiving acm sigplan influential popl paper award paper compositional shape analysis mean biabduction presented popl technique described paper utilized tool infer opensourced also used major tech company cristiano dino peter joined facebook london engineering team acquisition monoidics startup founded recently caught three learn research paper influential paper award popl q research writing computer program show prove another program memory safety error like crash accessing null undefined pointer memory leak kind program also find bug attempt show absence fails work part research area known program verification automatic program analysis time reasoning accurately memory one main open problem field holding back application reasoning technique practical industrial code q led initial research partial success followed daring dream might possible went far beyond possible time started four author cristiano dino peter hongseok met cafe shoreditch area east london talk research idea published paper cav conference proved memory safety property c program line code found bug microsoft device driver confirmed fixed window kernel team absolutely leading edge research literature one u cristiano dissatisfied result good enough said small cristiano dino dreaming using technique start company cristiano saw needed go much academic leading edge time tackle kind large codebases one find major company might client main problem blocking application one million line code cristiano asked outlandish question leading research seldom reached even one thousand line sort problem let alone million spurred cristiano peter shot back need new compositional version technique peter outlined basic scheme analysis little bit proof would done independently stitched together gave argument scale could explain scheme could actually realized might fanciful idea four author set working converting sofarfanciful scheme automatic compositional memory safety proving shape analysis jargon something real hongseok made valuable step based mining information failed proof automatically discover precondition individual function dino made breakthrough discovering logical concept eventually called biabduction stitching peter asked dino wrote prototype reasoning tool encouraging initial result clear onto something worked theory would become popl paper cristiano led implementation effort including new specie automatic theorem prover biabductive prover new reasoning technique soon powered way million line code experiment nice celebration set writing popl paper tell world q happened paper originally published received community paper got good reception popl even better reception presented demo cristiano slogan seeing believing kept mind thinking present idea dino worked demo would analyze program hundred thousand line code often openssl would take minute analysis finished talk would giving would rerun analysis confirm bug fixed right spot front audience rerun would take second rather ten minute needed reanalyze changed part program algorithm incremental illustrated concretely reasoning technique might used program development longrunning batch mode often caused excitement audience potential technique clear see incidentally incrementality led subsequent impact facebook describe next question although majority reaction enthusiastic small number insider program analysis research community reacted le positively although went thousand million line code received complaint millionlineanalysis exact thing thousandlinevariant front admitted much new algorithm sometimes lost precision people thought job compositional technique match slowrunning one everything except speed hindsight moving sort proving big codebases entering new unfamiliar arena perhaps everybody appreciated many opportunity scaling big code could offer q work built upon shortly popl paper cristiano dino founded startup company monoidics commercialize technique convinced peter join hardening technique trying customer monoidics acquired team seven including cristiano dino peter joined facebook london engineering office tool infer deployed inside facebook early since discovered issue fixed facebook developer code reach production development infer technique popl paper generalized reasoning technique check infer share compositional analysis architecture incremental algorithmic basis original infer infer participates bot facebook code review process automatically comment code modification submitted checkin code base although code base large ten million line code infer run quickly code change incremental fashion reminiscent early infer demo described previously infer run codebases whatsapp messenger instagram facebook mobile apps thus technique popl paper directly affected apps used billion people regular basis infer opensourced also used company including amazon mozilla spotify q surprise along way knew speed scale incrementality important important took u surprise landed company learned facebook codebases modified seemed like breathtaking rate tune hundred thousand time per week infer would run code change far beyond anything imagined time popl paper even far beyond anything ever heard deployment logical reasoning turned infer incrementality meant task thousand analysis run per day would perform little bit independent proof made possible infer compositional technique scale one thing even bigger surprise important incrementality dealing quickly code change addressing human side engineering problem faced first tried batch deployment infer run overnight produced bug list developer might act issue presented developer outside workflow fix rate rate fixed issue discovered near switched infer incrementalonline mode bot code review fix rate shot stunned although popl paper provided technique enable form analysis idea time powerful effect fast incremental analysis code change would retrospect fortunate facebook perceived importance scale incrementality popl technique recall talked facebook potentially joining laser focused limitation batch deployment typical model presumed academia time could see potential technique even fully appreciate time q current focus working variety problem importance company including problem related concurrent programming program performance ui programming stay tuned
305,Lobsters,formalmethods,CSE-Formal methods,Resources for Teaching with Formal Methods,https://avigad.github.io/formal_methods_in_education/,resource teaching formal method,big proof recording avigad cmuedu markdown software foundation certified programming dependent type formal reasoning program concrete semantics type program proof formal model java virtual machine verified functional programming agda formal verification applied logic computer scientist summer school formal technique type semantics programming language verified functional data structure software verification computer proof advanced software verification computer proof dafny tutorial verification corner logical verification logic modelling theorem provers learning tool theory computation logic proof proof designer stack project computer aided assessment mathematics introduction aux mathématiques formalisées discrete math coq mathematics lean hyperproof type theory coq automated reasoning little engine proof formal mathematics proof assistant apros project theorem proving lean,page collect resource anyone considering use formal method formal tool classroom effort grew discussion held big proof program isaac newton institute cambridge uk recording discussion available many ax along one organize list level expertise intended audience expert public large disciplinary orientation computer science mathematics mathematical logic etc chosen classify material subject matter would like add something send text would like appear avigad cmuedu preferrably already formatted markdown entry provide link relevant resource turn make use formal tool theorem provers sat solver model checker etc way benjamin pierce al software foundation book designing reliable software using coq adam chlipala certified programming dependent type book software engineering using coq adam chlipala formal reasoning program early stage book formal reasoning program correctness using coq tobias nipkow gerwin klein concrete semantics book semantics programming language using isabelle peter dybjer type program proof course type system programming language design using agda j strother moore formal model java virtual machine course based aaron stump verified functional programming agda book writing verified program agda jacques fleuriot formal verification course formal verification using model checking sat smt mauricio ayalarincón flávio l c de moura applied logic computer scientist book hardware software verification using pvs summer school formal technique annual summer school emphasizing handson use philip wadler type semantics programming language course based coq tobias nipkow peter lammich verified functional data structure course design analysis data structure functional programming language using isabelle resource available yves bertot software verification computer proof introductory course functional programming program verification using coq yves bertot cyril cohen laurence rideau enrico tassi advanced software verification computer proof course describing mathematical concept algorithm using coq mathematlcal component library dafny tutorial online tutorial dafny program verification system rustan leino colleague verification corner video topic verification based dafny jasmin blanchette alexander bentkamp logical verification introduction lean application computer science mathematics jasmin blanchette robert lewis logic modelling course based lean maria knobelsdorf christiane frede sebastian böhne christoph kreitz theorem provers learning tool theory computation paper using coq teach proof c jeremy avigad robert lewis floris van doorn logic proof introduction mathematical proof symbolic logic exercise lean daniel velleman proof designer java applet designed help student write proof stack project system designing sophisticated computeraided assessment mathematics chris sangwin computer aided assessment mathematics book use computer aided assessment patrick massot introduction aux mathématiques formalisées introduction formalized mathematics using lean benjamin c pierce et al discrete math coq textbook jeremy avigad kevin buzzard robert lewis patrick massot mathematics lean interactive textbook jon barwise john etchemendy hyperproof introduction logic proof diagrammatic reasoning femke van raamsdonk hermann guevers et al type theory coq introduction logic type theory metatheory using coq jacques fleuriot automated reasoning course automated reasoning using isabelle n shankar l de moura h rue tiwari little engine proof course automated deduction decision procedure josef urban chad e brown ondřej kunčar formal mathematics proof assistant course using mizar isabelle coq apros project includes webbased introductory course logic proof jeremy avigad soonho kong leonardo de moura theorem proving lean introduction dependent type theory lean
306,Lobsters,formalmethods,CSE-Formal methods,A Bridge too Far: E.W. Dijkstra and Logic,https://vanemden.wordpress.com/2018/07/21/dijkstra-and-logic/,bridge far ew dijkstra logic,discipline programming neat algorithm guarded command remark dop logic debacle mitigating circumstance two variety predicate logic dijkstra feijen advice style go homebrew logic forget logic hard way ahead lesson hoare assertion first tweak predicate logic gingerly coda acknowledgement reference,vivid example terminology ewd successful coining terminology stick mind banker algorithm critical section deadly embrace dining philosopher guard semaphore sleeping barber discipline programming ewd published book title discipline programming referred dop two component neat algorithm preface quote one hand knew program could compelling deep logical beauty hand forced admit program presented way fit mechanical execution even beauty totally unfit human appreciation ewd mind collection neat algorithm even algol good enough justice compelling deep logical beauty guarded command guarded command nondeterminacy formal derivation program ewd presented guardedcommand language one possible formally derive program specification form postcondition derivation yield program precondition giving initial state final state guaranteed satisfy given postcondition addition remarkable innovation guarded command language property use brings open logical beauty certain algorithm otherwise unfit human appreciation remark dop start expert evaluation dop car hoare foreword dop book expounds author usual cultured style radical new insight nature computer programming insight developed new range programming method notational tool displayed tested host elegant efficient example surely recognized one outstanding achievement development intellectual discipline computer programming spotted copy dop university waterloo book store pounced spurred foreword decided make copy basis looked forward able derive alorithms specification article shown maximum two number euclid algorithm gcd closer inspection wps mainly used dop semantically characterize guardedcommand language first chapter devoted weakest precondition referred wps guarded command language characterization wps chapter formal treatment small example contains eight example first seven derived mean wps trivial eighth example neat given rank find permutation rank derived ewd offer explanation interesting failed see connection program see intriguing bit code even begin see would solve problem easiest way discover whether nonsense seemed commit ultimate sacrilege translate c passed enough test convince original correctness chapter devoted neat algorithm one per chapter studied one chapter hamming problem well enough reproduce solution independently ewd better job explanation ranktopermutation chapter hamming problem effortlessly translate c result hardly longer particularly inelegant although dop make good promise title compensating merit prof guardedcommand language valuable invention easy learn thanks ewd algorithm accessible would case written java python javascript neat algorithm though derived rationally motivated presenting invariant found plausible heuristic logic debacle ewd published predicate calculus program semantics coauthored c scholten referred egon börger logician faculty computer science department university pisa wrote review appeared journal symbolic logic science computer programming begin follows book deal fascinating subject indicated title theory program semantics based predicate logic asked write review book preparing course subject accepted pleasure opportunity study expected illuminating study famous author hand unfortunately expectation met moreover believe book helpful interested subject area follows detailed review explains critical judgement reason recommend book follows börger review seems factual somewhat technical account shortcoming david gries tried helpful coauthored paper attempted knock shape make palatable logician ewd reaction semiopen letter david gries following passage relevant never felt obliged placate logician kindly assume customary precaution needed sufficient reaching goal help correct pointing precaution insufficient discipline led lead astray welcome love corrected besides instructive experience corrected show one care however get infuriated play game according rule resist temptation ignore fury shrug shoulder polite manner day science computer programming book review egon börger nice example fury puzzling matteroffact technical review experienced fury perhaps problematic degree beyond review suggested another passage get completely confused soon logician drag model interpretation picture thought whole purpose creation formal system one calculate create something independent model interpretation story far present u puzzle shortest path algorithm algol compiler creation highlevel concurrent programming primitive operating system ewd appears titan going triumph triumph successive new field veni vidi vici debacle would like offer following explanation triumph occurred virgin territory ewd calibre make killing without tedium studying literature none even true shortest path algorithm although graph theory existed considerable literature shortestpath algorithm interest instance dynamic programming still young required reading mitigating circumstance recently read first paragraph börger review one quoted agreed buy book read suspicion arose going may badly written exposition predicate logic badly written compared predicate logic anyway question answer badly written compared exposition textbook patrick suppes elliott mendelson joseph shoenfield herbert enderton andrzej grzegorczyk random selection occasioned undirected course logic text describe logic firstorder predicate logic written way could read case börger dismiss seemed find fault referencing work ii shegalkin h hermes author never heard two variety predicate logic turn two kind predicate logic kind unanimously described text listed call mainstream logic exotic kind börger call boolean term logic idea thing existed börger logician apparently recognized kind logic interested boolean term logic look elsewhere try convey sketchy idea picked language mainstream logic contains formula term formula assert relation hold individual element set called universe discourse formula individual denoted term language formula may atomic consists predicate symbol smaller larger number term may composed mean connective quantifier term may simple constant variable may composed function symbol smaller larger number term purpose mainstream logic formalize axiomatic theory concerning individual interest number element algebra semigroups monoids ring mention mathematical example make mainstream logic versatile set chosen universe discourse repertoire function predicate symbol chosen interpretation symbol chosen thus universe discourse infinite finite latter case consist two truth value function symbol operation boolean algebra interpretation creates intriguing situation connective make formula simpler formula mirrored function symbol corresponding boolean operation inference consisting sequence tree formula mirrored sequence tree equation boolean term though seems abuse versatility mainstream logic apparently sufficiently intriguing logician like shegalkin hermes investigate genius set discover logic scratch called predicate logic turn exotic variant implausible one belief ewd official position logician nothing interest tell case indeed fiftyfifty chance coin falling one way mainstream logic boolean term logic boolean term logic think one must idea mainstream logic see one chose domain variable contains truth value plot thickens ewd wrote foreword science programming david gries springerverlag referred sop sop develops predicate logic scratch without reference would fine mainstream variety exotic boolean term variety soupedup specific programmingoriented construct like conditional connective cor consumer report would advise reader avoid homebrew concoction ewd must attracted repelled logic sop could led gries fan ewd understood logician would approve took trouble knock shape instead pleased flattered ewd issued rebuke form börger may well correct seeing redeeming feature yet see mitigating circumstance dijkstra feijen wps introduced improvement hoare verification method mean precondition postcondition aware anything contrary assume hoare envisaged conventional predicate logic language assertion acting pre postconditions work fine individual variable clear make assertion involving array hoare verification make new demand logic exception method programming coauthored ewd wim feijen originally published dutch book plenty neat example typically involving array verified according hoare method therefore using predicate logic handling array way worth paying attention mention balance critical remark dop work succeeds everything try dop dijkstrafeijen pay great deal attention array watched struggle one sympathise want clean break start afresh predicate logic advice consumer report style go homebrew logic example general computer people seem penchant whipping homebrew logic see ef codd relational calculus obvious mess hope somebody like börger reviewed logic sop logic parnas allows function partial contrast alain colmerauer appreciated wise exception needed logic got logician robert kowalski consultant result programming language prolog pure version logically impeccable forget logic hard predicate logic long history one go back way g frege century many clever people worked several came grief frege shattered russell presented barber paradox early church published version predicate logic subject kleenerosser paradox incident like motivated tarski create logic modeltheoretic semantics paradoxproof tarski work date early see helpful exposition truth proof article appeared scientific american reason cautious new system logic fact w quine system mathematical logic claimed inconsistent curt christian whereupon proof claimed erroneous church least jury case history show one want define program semantics mean predicate logic one careful one way stick firstorder predicate logic mainstream variety presented undergraduate textbook mentioned safer save work compared creating publishing homebrew system way ahead lesson main lesson take hard look wps ewd used define semantics guardedcommand language also pointed binary relation adequate semantics capture phenomenon two nondeterministic program may agree finite computation one may infinite computation wps may useful way make distinction best forget yet see convincing example use derive program postconditions hoare assertion first wps help finding program one lower one ambition formally deriving program mere goaloriented programming hoare method informally proving partial correctness development made goaloriented writing postconditions code ensure satisfied although method programming ewd w feijen lowly status course note introductory course succeeds presenting convincing program development method something lacking dop assertion handling array logic sort make f worth studying tweak predicate logic gingerly acknowledge mainstream predicate logic offer onesorted logic individual variable adequate writing assertion promising approach formula program apt bezem propose use predicate logic programming language propose modification predicate logic include array multiple sort variable manage minor modification mainstream predicate logic encouraging belong get completely confused soon logician drag model interpretation picture fact logician coda account far structured programming term invented ewd caught widely interpreted meaning programming without goto statement ewd meant lot year famous letter appeared marked turning point ewd career witness following quote retrospective suffered deep depression partly caused department accept informatics relevant calling disbanded group built partly caused hesitation next knew retrospect algol implementation multiprogramming system agility exercise tackle real problem difficult thing depressed state took month gather courage write therapeutic reason note structured programming august marked beginning recovery work subsequent decade show hoped logic would help solving problem difficult thing turned difficult turn hope reality acknowledgement grateful paul mcjones discussion essay propelled paul finding thing especially gem david gries made several suggestion improvement krzysztof apt helped pointing blind spot concerning selfstabilization making various suggestion reference philip frana interview edsger w dijkstra communication acm hint programming language design car hoare stanford artificial intelligence laboratory memo aim december knuth donald e structured programming go statement acm computing survey csur dijkstra ew selfstabilizing system spite distributed control commun acm apt kr shoja e selfstabilization lens game theory de boer f bonsangue rutten j ed coordination springer lecture note computer science vol ew dijkstra discipline programming prenticehall guarded command nondeterminacy formal derivation program edsger w dijkstra communication acm vol pp ew dijkstra c scholten predicate calculus program semantics springerverlag science computer programming vol pp introduction logic van nostrand introduction mathematical logic van nostrand mathematical logic addisonwesley mathematical introduction logic academic press outline mathematical logic reidel relational completeness database sublanguages research report ibm research laboratory san jose dl parnas predicate logic software engineering ieee transaction software engineering kr apt bezem formula program pp logic programming paradigm springerverlag ew dijkstra letter editor go statement considered harmful communication acm
307,Lobsters,formalmethods,CSE-Formal methods,Introduction to TLA+ Model Checking in the Command Line,https://medium.com/@bellmar/introduction-to-tla-model-checking-in-the-command-line-c6871700a6a2,introduction tla model checking command line,hillel wayne excellent book practical tla however toolbox awful command line version pcal translating pluscal tla defining model configuration file tlc checking model happy model checking,started playing around tla programmer friendly variant pluscal year ago time amount documentation understandable people like enjoy reading white paper full mathematical notation slim none today buy hillel wayne excellent book practical tla started reading people code began piecing together idea thing donetla tool model verify concurrent system finding bug written code testing every possible combination input might say well different fuzzing input conventional functional test answer tla also simulates kind timing issue commonplace distributive concurrent system microservices continue dominate conversation modern architecture question happens service sends request never arrives arrives something else finished get repeated become relevant tla allows test scenariosbeyond radically different way thinking computer program programming language one abandon certain mental crutch really think represent mean write excellent model write code actually thing way model describing think favorite framework library actually doi huge fan anything might bring unvocalized assumption surface people explore hugely difficult build complex system service two team sync assumptionsthe best way think tla like drawing blueprint software going build seen people use test algorithm also seen people use model user flow throughout applicationhowever toolbox awfulwhen ready test model tla virtually every resource direct tla toolbox toolbox java application look bit like supposed ide allows translate pluscal tla configure model test explore error ux awful simply awful open tla file toolbox intuitive thing often fail without error rather toolbox told nothing needed click button click first literally exhibit software developer respect skill designer teamson top find little clunky generally work full scale ides avoid prefer stripped elegance textmate sublime atom sometimes mean miss valuable feature person currently thirty tab open chrome three project open textmate least one wip like use computer memory okay light dayat point noising around people tla spec try understand language realized seemed command line version key tool toolbox rather open toolkit could compile pluscal test model terminal even exciting command line version yup downloaded tla toolbox already command line tool installed computer configure helpful set shell script download hereone first thing knowledge build little proof concept python application parsed python program tried write model pluscal based going wanted learn bytecode ast seemed like fun way partially successful could write simple program became working model eventually hit wall trying learn two new thing timebut potential command line interface still model checking executed via command line executed program update model test automatically way might form testing continuous integrationpcal translating pluscal tlaonce installed configured command line toolbox start translating pluscal comment spec tla using pcal commandnote pcal assume extension tla leave want sake clarity include itthe basic command pcal myspectlaunlike command line tool might used pcal particular order argument name file want translate always last flag come itversion something might unexpected rather telling version pcal installed let pick version pluscal translator assume translating currently go want see ast pluscal use writeast flag forego rest translation output astthis super useful tool without bug example understand thatspec supposed let choose version tla never able get workdefining model configuration filesif used toolbox interface probably wondering configure invariant test case answer cfg file automatically generated pcal commandnormally look like specification spec add statement linebut variety parameter set checking model useful areinvariant property specify invariant temporal property test respectivelyhere full list possible configuration settingsinvariantinvariantspropertypropertiesconstantconstantsconstraintconstraintsactionconstraintactionconstraintsinitnextviewsymmetrytypetypeconstrainti able figure difference singular form parameter eg constant plural form parameter eg constant take multiple value separated space might backwards compatibility issue involved ツ sure add custom configuration line put comment line pcal overwrite every time translatetlc checking modelsnow time run model checker like pcal tla extension optional basic command look like tlc myspectlaand produce following output version september breadthfirst search modelchecking worker core heap offheap memory mac o x xxx oracle corporation xxxx parsing file myspectlaparsing file file processing module naturalssemantic processing module integerssemantic processing module myspecstarting impliedtemporal checking satisfiability problem branchescomputing initial state finished computing initial state distinct state generatedprogress state generated distinct state found state left queuechecking temporal property complete state space total distinct state tell module imported many state model curious actual spec running wire transfer example hillel wayne book particular spec temporal property know violated algorithm look like error temporal property violatederror following behavior constitutes counterexample state initial predicate people alice bob sender alice alice receiver bob bob acc alice bob amount pc checkandwithdraw checkandwithdraw state action line col line col module wire people alice bob sender alice alice receiver bob bob acc alice bob amount pc checkandwithdraw deposit state action line col line col module wire people alice bob sender alice alice receiver bob bob acc alice bob amount pc deposit deposit state action line col line col module wire people alice bob sender alice alice receiver bob bob acc alice bob amount pc done deposit state stutteringfinished checking temporal property state generated distinct state found state left queuefinished already familiar toolbox look pretty much like output see expect without highlightingby default tlc stop first invariant error like continue use flag continue general tlc option split two type modeswitches generalswitches mode switch change model run switching breadthfirst depthfirst picking seed number randomization general switch allow specify different configuration file much detail printed stdouti hope enough get started update post time time figure tool work happy model checking
308,Lobsters,formalmethods,CSE-Formal methods,Noise Explorer: Design and Explore Noise Handshake Patterns,https://noiseexplorer.com,noise explorer design explore noise handshake pattern,design explore noise handshake pattern noise protocol framework design noise handshake pattern generate formal verification model proverif explore compendium formal verification result generate secure software implementation go rust design noise handshake pattern generate cryptographic model formal verification get model get model generate secure protocol implementation code get implementation get implementation generate rust implementation code webassembly build get implementation,design explore noise handshake pattern noise explorer online engine reasoning noise protocol framework revision handshake pattern noise explorer allows design noise handshake pattern obtain validity check verify design conforms specification generate formal verification model instantly generate full symbolic model applied pi calculus noise handshake pattern enter using proverif model analyzed passive active attacker malicious principal model toplevel process sophisticated query specifically generated relevant noise handshake pattern including test strong v weak forward secrecy resistance key compromise impersonation explore compendium formal verification result since formal verification complex noise handshake pattern take time require fast cpu hardware noise explorer come compendium detailing full result noise handshake pattern described original specification result presented security model even comprehensive original specification since includes participation malicious principal generate secure software implementation noise explorer automatically generate secure implementation chosen noise handshake pattern design written go rust design noise handshake pattern generate cryptographic model formal verification get model active attacker get model passive attacker generate secure protocol implementation code get implementation written go get implementation written rust generate rust implementation code webassembly build get implementation written wasm
309,Lobsters,formalmethods,CSE-Formal methods,"Automated, Modular, Refinement Reasoning for Concurrent Programs (2015)",https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parallel-verification-cav15.pdf,automated modular refinement reasoning concurrent program,,obj length filter flatedecode stream
310,Lobsters,formalmethods,CSE-Formal methods,"ISA Semantics for ARMv8-A, RISC-V, and CHERI-MIPS",https://www.cl.cam.ac.uk/~pes20/sail/sail-popl2019.pdf,isa semantics riscv cherimips,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream l k xd p u b ѭq
311,Lobsters,formalmethods,CSE-Formal methods,Data Structures and Functional Programming (ocaml and coq),https://www.cs.cornell.edu/courses/cs3110/2017fa/,data structure functional programming ocaml coq,c fall,c fall data structure functional programming
312,Lobsters,formalmethods,CSE-Formal methods,Safe Programming with Pointers through Stateful Views (2005),https://www.cs.bu.edu/~hwxi/academic/papers/padl05.pdf,safe programming pointer stateful view,,obj stream b l wp o hp ċ v r r f c r r q v jbj bf endobj obj endobj obj stream vc gu j fm լ u f q u c endobj obj endobj obj stream h bý w ƥ w ү fh z s x vc rh endobj obj endobj obj stream ʅ p w x n 髊 wpmr l vb f n f c 쏃 鼅ҹ x fjc c ǉ l orn yz endobj obj endobj obj stream ig x v v p w š n yf u ofb u ۮzendstream endobj obj endobj obj stream ږ h jŧ h g p ai iw p u u e p xz ԍd ڬs w g endobj obj endobj obj stream j yfk f se zl sg r epu c pf h e ԙh v l ƪ qd k ŝ endobj obj endobj obj stream q j l g wd j p u kr ω sʤ er p h f q qζ ܒ endobj obj endobj obj stream j l њ c c g k n칞 l c gg r w k b endobj obj endobj obj stream ym j r x u b q ߢgl h z h fx ŋ go w lr ru kʒ endobj obj endobj obj stream g 飛 owv f f j e ϫ rz z kj w dކ w ch jq f vmx k x p 䈒 u u dr e ytj wz j w c q n e b k mޙ ա p um h xb x cz
313,Lobsters,formalmethods,CSE-Formal methods,Simulation and Formal Verification of x86 Machine-Code Programs that make System Calls,https://www.cs.utexas.edu/users/hunt/FMCAD/FMCAD14/proceedings/18_goel.pdf,simulation formal verification machinecode program make system call,,obj endobj obj filter flatedecode length stream k q h xy ok j pv e onn q k yu yl b iȼu z f xp lq j stɇ e z x b ym b b qe ez z қ bwp z wp h l u fϑ g cxrz ʌz si q f x wήu mfѻ lri g zv k
315,Lobsters,formalmethods,CSE-Formal methods,Scaling the Everest of software security,https://www.microsoft.com/en-us/research/blog/scaling-the-everest-of-software-security-with-dr-jonathan-protzenko/,scaling everest software security,episode january dr jonathan protzenko rise research software engineering project everest related transcript host listening microsoft research podcast show brings closer cuttingedge technology research scientist behind host gretchen huizinga host people first started making software computer relatively rare internet programming language designed get job done quickly run efficiently little thought security software everywhere desktop car cloud internet thing dr jonathan protzenko researcher rise research software engineering group microsoft research working designing better software tool order make growing software ecosystem safer secure today dr protzenko talk wrong software vitally important get right explains many programming language tell u working finally act digital sherpa project everest assault software integrity confidentiality aim build deploy verified http stack much episode microsoft research podcast host jonathan protzenko welcome podcast host researcher rise research software engineering group big problem trying solve usually ask guest get morning help make rise shine host plunge specific research want talk programming language general paraphrase colleague ben zorn software perspective build thing people build thing host big technical revolution programming language said many legion many programmer productivity want also zero bug think attained holy grail yet quest continues always room improvement host yeah host usually frame general question like call view since going land everest podcast frame view host let talk software verification security writ large kind reason raisons etre guy give u overview wrong important get right research tackle host technology referring host much education curve requiring host yeah tradeoff power ease host wow mind reeling couple cryptographer booth host revelation thing secure think mean even go http http people even know difference talking vast majority people using software host nice host maybe even slightly modest like said software pervasive sort onboarding life host come back keep night let get happy minute host let talk cool project working worked one language functional language called f host keep looking going f generalpurpose functional programming language effect aimed program verification host mmhmm audience host yeah music play host another thing working called kremlin going spell big k little r little e big big l little little n host changeup lowercaseuppercase host speaking acronym another program working called hacl hacl stand highassurance cryptographic library allow cool particular project host yeah host venn diagram overlap cryptographer programming language people lot host people working different thing needing get together make usable host right host question head said hard host sure host let talk mitls verified reference implementation tl give u little bit history project involved need organization involved order tackle program host please host right host hence host yeah host much time spend trying break stuff host right host yeah music play host let climb big one digital sherpa project everest goal tee saying goal build deploy verified http stack tell u everest host yeah right everest goal mountain lot people climb would frame goal mountain summit software engineering host yeah host relationship mitls project everest host academic nature open source people work share everybody build work others build work necessarily historically case industry ip competitive advantage issue lately seems bit shift towards embrace open source mentality think seeing sharing open source community among industry researcher good thing host sure host feel like noticed sea change area know know certain decade prior lot company kept card really close chest proprietary want anyone see source code host maybe somebody else found bug helped host thank much host wish would happen software music play host jonathan working security verification software know reality talked little bit scary world working every day anything keep night particularly pertains state software discussed already aware host talked ben actually year ago talked internet thing many device get put world key verification alluded everest project informing world device quoteunquote unverified host problem binary option know agree app hit agree host jonathan tell u bit academically otherwise story come working software engineering research msr people know jonathan protzenko host prior phd france grow france host keep talking existential moment like oh jeanpaul france host nice future goal aside conquering everest see five year host host close give u idea sound like large question scale like left discover solve field research software engineering advice encouragement would give listener might interested inspired work music play host jonathan protzenko thanks joining u today really fun learn dr jonathan protzenko researcher trying summit verification mountain visit microsoftcomresearch,researcher jonathan protzenko episode january people first started making software computer relatively rare internet programming language designed get job done quickly run efficiently little thought security software everywhere desktop car cloud internet thing dr jonathan protzenko researcher rise research software engineering group microsoft research working designing better software tool order make growing software ecosystem safer secure today dr protzenko talk wrong software vitally important get right explains many programming language tell u working finally act digital sherpa project everest assault software integrity confidentiality aim build deploy verified http stack related transcript jonathan protzenko concerned daytoday work day security internet come think absolutely everywhere website also cloud also sort software big awakening past twenty year never secure consequence huge much stake people ready try something different host listening microsoft research podcast show brings closer cuttingedge technology research scientist behind host gretchen huizinga host people first started making software computer relatively rare internet programming language designed get job done quickly run efficiently little thought security software everywhere desktop car cloud internet thing dr jonathan protzenko researcher rise research software engineering group microsoft research working designing better software tool order make growing software ecosystem safer secure today dr protzenko talk wrong software vitally important get right explains many programming language tell u working finally act digital sherpa project everest assault software integrity confidentiality aim build deploy verified http stack much episode microsoft research podcast host jonathan protzenko welcome podcast jonathan protzenko hi host researcher rise research software engineering group big problem trying solve usually ask guest get morning help make rise shine jonathan protzenko well rise focused many aspect software engineering specific thing concerned programming language get morning fact lot software need u intervene something recently seeing ad pet feeder camera report smartphone immediate thing thought going security failure soon enough video cat internet huge deal think million device ready hacked ready covered new york time next wave cyberattacks concerned state software ecosystem rise trying address problem related software research trying make software better general host plunge specific research want talk programming language general paraphrase colleague ben zorn software perspective build thing people build thing jonathan protzenko yes host big technical revolution programming language said many legion many jonathan protzenko actually good question like hundred thousand programming language developed always new one popping think one reason holy grail programming language always seeking right programming language compromise nothing one allow get speed want programmer productivity want also zero bug think attained holy grail yet quest continues always room improvement host yeah jonathan protzenko realize exists large ecosystem software reaching like million hundred million line code improvement tool use every single day life going improvement software general responsibility enormous sense design right tool make people write better tool people host usually frame general question like call view since going land everest podcast frame view jonathan protzenko right host let talk software verification security writ large kind reason raisons etre guy give u overview wrong important get right research tackle jonathan protzenko kind tie mentioning earlier lot software absolutely critical either gigantic breach security stake human life accident usually large set example draw ranging dna testing software plane nuclear software medical device large array think area hit right spot right spot mean consequence dramatic past incident wideranging impact people field ready try something different think instance medical device nearly getting hackable pacemaker demonstration actually control someone medical device distance think instance specific configuration soon enough people realize previous approach longer work need try something different need start ground actually think write better software case concerned daytoday work day security internet come think absolutely everywhere website also cloud also sort software big awakening past twenty year never secure consequence huge much stake people ready try something different might willing let go technology mentioning try something little strange little functional might give greater confidence maybe huge failure host technology referring jonathan protzenko thinking c programming language remains language people use write majority software extremely easy shoot foot language trying working great people say broken badly new methodology let u try help like going think host much education curve requiring jonathan protzenko extremely steep curve think also big challenge field like make tool usable people outside field reason people stick wellestablished programming language usable think tool use write secure software sometimes usable require like high degree training also challenge u like make software verification usable someone background host yeah tradeoff power ease jonathan protzenko absolutely new language keep showing sometimes ready expert going use language make productive maybe find expert maybe software already written swap rewrite everything ground host wow mind reeling couple cryptographer booth jonathan protzenko mmhmm host revelation thing secure think mean even go http http people even know difference talking vast majority people using software jonathan protzenko yes need help people rely fact people going check padlock website much ask regular user need help really great initiative number people use http skyrocketing small part due initiative called let encrypt mozilla nudging people switch http host nice jonathan protzenko achieved really excellent result top hope give secure software perform http think world would slightly better place host maybe even slightly modest like said software pervasive sort onboarding life jonathan protzenko trend software going everywhere delegating extremely important decision software think car instance million ten maybe hundred million line code running car frightening see video youtube people taking remote control car car absolutely everywhere putting enormous amount trust host come back keep night let get happy minute jonathan protzenko yes host let talk cool project working worked one language functional language called f jonathan protzenko yes host keep looking going f generalpurpose functional programming language effect aimed program verification jonathan protzenko yes f draw inspiration f hence similar name also general like family functional programming language ocaml general ml family add verification top idea functionallytrained programmer comfortable ml maybe written bunch ocaml life language allows go start thinking program specification reason using pre postconditions generally use assistance smt solver scale verification sense think f also interesting point design space trying cater audience people want write software first tool would use massive mathematical proof theorem tool would use write software host mmhmm audience jonathan protzenko actually good good way think look working f f large joint project brainchild nik swamy lot collaborator including inria many institution would say audience academic trying write verified software learner master student phd student warming verification people want write verified piece code hoping land existing software sure talk soon host yeah jonathan protzenko hoping audience enlightened programmer someone functionally trained realizes great also something beyond willing learn go deeper actually convince software right thing music play host another thing working called kremlin going spell big k little r little e big big l little little n jonathan protzenko yes host changeup lowercaseuppercase jonathan protzenko wanted highlight ml like pun joke aside interesting bit see kremlin k r ml kind know kernighan ritchie meet ml kremlin compiler f c tying together two thing talked fact want use highend sophisticated advanced programming language prove important thing software also fact majority software day written c going away anytime soon one interesting thing need meet software idea behind work day need reconcile two vision vision enlightened programmer work f advanced verification result fact people want c code want software used kremlin compiler transform subset f c code ready integrated existing software use f write code normally would conduct proof like would normally except end tool chain get c code walk people say hey code might want use host speaking acronym another program working called hacl hacl stand highassurance cryptographic library allow cool particular project jonathan protzenko talked exists program language called f companion compiler give c code people actually want use tool chain question make best use mentioned lot software disaster opinion cryptography one biggest one underpinning almost every secure software host yeah jonathan protzenko cryptography break whole scaffolding break everything shatters cryptography perhaps place right combination factor make people want use different software new software verified software hacl answer library cryptographic code verified f come bunch c code people want use designed collaboration inria french institute computer science already used several people host venn diagram overlap cryptographer programming language people lot jonathan protzenko yes host people working different thing needing get together make usable jonathan protzenko cryptographer design algorithm job know algorithm exist know done would really hard time creating new one let would disaster u people implement cryptography taking reference design math paper describes inner working algorithm transform actual software consumer host right jonathan protzenko people know need cryptography going make use software kind bridging gap cryptographer consumer taking existing implementation done reverifying design new code design verification methodology allow u show either existing code broken found broken code existing code code fine ready give consumer work closely consumer firefox spend lot time making sure c code come tool chain something actually want use turned surprisingly difficult host question head said hard jonathan protzenko two half work sense like first want verify code tedious difficult sense already know going make matter throwing enough energy host sure jonathan protzenko done actually going meet people software telling something new really use different problem need build trust need show serious need show code make sense probably going trust exotic verification methodology going reread c code come convince make sense spend lot time energy engaging polishing come verification suite making sure something looked solid host let talk mitls verified reference implementation tl give u little bit history project involved need organization involved order tackle program jonathan protzenko yes maybe say little word tl first host please nonathan protzenko tl protocol using connecting website http talking cryptography bottom stack base buildingblock top cryptography work protocol allow negotiate key parameter session establish secure channel third party two key property want establish channel third party integrity confidentiality going know web search confidentiality making sure one see looking integrity making sure one tamper search receiving result protocol called tl previously known ssl host right jonathan protzenko early originated netscape one use every time go http website mitls attempt making tl secure fairly old project started joint collaboration microsoft inria host hence jonathan protzenko hence name mi microsoftinria tl gone successive language first version mitls using precursor f called evolved verification artifact language enables u verify software two go hand hand design tool enable verification take upon actually use perform verification would say best way design tool use host yeah jonathan protzenko shortcoming try fix improve actually continuous backandforth process try verify something realize tool could help better could something easily fix tool tool keep improving driven need verification host much time spend trying break stuff jonathan protzenko well theoretically verified never host right jonathan protzenko know broken theory practice also try find flaw host yeah jonathan protzenko interesting question occasionally flaw tool need either fix tool improve tool ideally verify tool show tool flaw also sometimes cover everything instance always write secure implementation tl decline connect website get property every connection secure also need make sure actually interoperate rest world music play host let climb big one digital sherpa project everest goal tee saying goal build deploy verified http stack tell u everest jonathan protzenko everest mentioned answer sorry state world secure tl implementation since beginning tl always broken set year ago say right working mitls technology push next level verify entire stack also get people use ambitious effort set term breadth want verify entire stack also term impact want people use got together people several institution microsoft research redmond also cambridge bangalore people carnegie mellon university people university edinburgh course close collaborator inria wide big different people working different thing inria mentioned mostly concerned base buildingblocks cryptography another tool use verify assembly code bit really need absolute performance say cmu cambridge expert cryptographer protocol expert find flaw try fix standard submitting feedback whenever find conceptual flaw tl try bring people together behind effort host yeah right everest goal mountain lot people climb would frame goal mountain summit software engineering jonathan protzenko would say u yes theorem alluding earlier get integrity confidentiality kind top pyramid summit mountain get theorem entire stack verified hoping get u also summit wideranging ambitious verification effort one thing realize aiming comprehensive set software host yeah jonathan protzenko looking cryptography aiming verify one algorithm entire family aiming offer comprehensive cryptographic library everything need crypto cover popular algorithm might need lot work lot software think u hoping time reach final theorem advanced capable term size also like state art term verification tool host relationship mitls project everest jonathan protzenko mitls far main component project everest one depends almost everything else one implementation tl think thing afterwards depends see top mountain top mountain could mitls c could also say verified web server us mitls know setting another goal guess remains determined yeah would mitls tl library maybe thing small server even component stack host academic nature open source people work share everybody build work others build work necessarily historically case industry ip competitive advantage issue lately seems bit shift towards embrace open source mentality think seeing sharing open source community among industry researcher good thing jonathan protzenko yes one thing mentioned work open source work completely open academic university code github public discussion channel think two aspect consider first one work better open find foster better collaboration productive idea generally better atmosphere motivating know software general good benefit lot people software small subset planet something motivates personally much believe societal value code everyone use pragmatic reason perhaps security people see code going hard time convincing secure hard claim right software secure usually want provide evidence host sure jonathan protzenko code closed source going hard time convincing people really secure software better open way everyone go see host feel like noticed sea change area know know certain decade prior lot company kept card really close chest proprietary want anyone see source code jonathan protzenko seen like big change microsoft four year think came right time mentality changing getting better better found use linux computer daytoday work post github worry anything think reality software development much software depend open source productive contribute back done occasionally daytoday work use open source project bug fine go fix better way work host maybe somebody else found bug helped jonathan protzenko oh yeah people come sometimes report bug stuff look f instance contributor people never met come blue submit improvement u host thank much jonathan protzenko yeah happy make feel better wake morning someone fixed one bug host wish would happen software music play host jonathan working security verification software know reality talked little bit scary world working every day anything keep night particularly pertains state software discussed already aware jonathan protzenko think general awareness fragility software mean seems opinion much enthusiasm software without awareness entail christmas season people going get gift bombarded smart appliance every time see one wondering consequence far kind wild west think iot thing going spread across world going happen device going maintain software even going look software released sold million actually happening faster realize something keep night see everyone getting smart light bulb light bulb taken someone else worried thing also hoping soon enough change term software also term expectation could know people want broken software maybe regulation say put market something obviously broken going actually threat host talked ben actually year ago talked internet thing many device get put world key verification alluded everest project informing world device quoteunquote unverified jonathan protzenko would hope least time manage get working version mitls become viable option say smart security camera course need upload cloud server well hopefully mitls viable option people want establish secure channel little device cloud solve every problem far really firmly believe one brick time one step time hope least better brick big software ecosystem one way sum software consequence everyone need aware software benign software could sort terrible thing hardly ever need cognizant fact could need exercise caution install app think twice getting smart appliance also think twice host problem binary option know agree app hit agree jonathan protzenko yes big question like create social economic dynamic better software big open question like click agree time like go existential mode whenever install app yes click agree incentive going come internet security interesting bit big economic incentive broken people going paged weekend going like incident response crisis resonates well people work ready better software equivalent device security software think something need figure come many different place hope ultimately yes incentive make software general secure host jonathan tell u bit academically otherwise story come working software engineering research msr people know jonathan protzenko jonathan protzenko phd france inria oftentimes happens end one phd pretty fed end dissertation writing sure wanted life lot existential moment ready quit know research go work software thought research hard phd advisor really nudged said well jonathan least try microsoft research know might find good vibe arrived believe first think would make remember chatting advisor like come francois never going take tried yes take good started postdoc worked variety project became researcher year half think four year host prior phd france grow france jonathan protzenko yes grow france pure product french system host keep talking existential moment like oh jeanpaul france jonathan protzenko grew near bordeaux stayed bordeaux high school master degree lyon phd program paris host nice future goal aside conquering everest see five year jonathan protzenko oh tough question give head one host jonathan protzenko otherwise would thought hoping five year start tackling fundamental question software thing talking social consequence software bring greater awareness software happens bring message software matter beyond niche area people come conclusion already make people aware software entail maybe incentive better software going come better software literacy likely going dealing computer almost every single day life need little bit computer literacy need people understand software work actually essential skill modern world maybe eventually people aware enough going start demanding better software hopefully host close give u idea sound like large question scale like left discover solve field research software engineering advice encouragement would give listener might interested inspired work jonathan protzenko one thing keep mind getting lot people use software software run firefox software run window great hopefully soon run linux seems wonderful outsider perspective lot hard work easy sometimes seems need lot help think next frontier make usable make accessible people luxury spending know almost decade training computer science still writing software living bring technology mass programmer think enormous challenge help would welcome music play host jonathan protzenko thanks joining u today really fun jonathan protzenko pleasure thanks learn dr jonathan protzenko researcher trying summit verification mountain visit microsoftcomresearch
316,Lobsters,formalmethods,CSE-Formal methods,Proving Memory Operations - A SPARK Journey,https://blog.adacore.com/proving-memory-operations-a-spark-journey,proving memory operation spark journey,problem solve property memory specification operation lowlevel set library moveheapandstack easy part implementing unproven interaction register moveheapandstack hard part madness nutshell link link blog post,promise behind spark language ability formally demonstrate property code regardless input value supplied long value satisfy specified constraint quite different static analysis tool codepeer typical offering available eg c language trade completeness efficiency name pragmatism indeed problem trying solve finding bug existing application make impossible complete completeness achieved cost massive amount uncertainty false alarm spark take different approach requires programmer stay within boundary relatively large ada language subset annotate source code additional information benefit able complete sound verification certain property without inundating programmer false alarm blog post going explore extent spark fulfill promise put hand software developer particular affinity math formal method make interesting going work context small lowlevel application gauge spark applicable embedded device level code flavor cybersecurity problem solve property prelude even prior defining behavior custom property code spark language defines default property socalled absence runtime error include bound access array range assignment variable division zero etc one advanced property traditional static analyzer consider spark going go much actually describe functional requirement let assume working piece low level device driver whose job set move boundary two secure area memory secure stack secure heap area set area come specific register prevent nonsecure code reading content storage within boundary process guaranteed hardware modeling part however boundary moved data old stack heap new one accessible unless erased read nonsecure code thus leak confidential information moreover code change boundary efficient possible need ensure erase memory still within secure area described informally full functional behavior small piece code could expressed boolean expression look roughly like datatoerase oldstack cup oldheap cap overline newstack cup newheap word data erase everything previous memory oldstack cup oldheap cap new memory overline newstack cup newheap another way write property use quantifier every byte memory say every byte byte old stack old heap new stack new heap erased forall b memory isoldstack b lor isoldheap b land neg isnewstack b lor isnewheap b iff iserased b mean byte memory forall b memory old region isoldstack b lor isoldheap b new one neg isnewstack b lor isnewheap b erased iff iserased b also need demonstrate heap stack disjoint ideally like spark make link two way expressing thing one may easier express designing property became quite clear needed intermediary library set operation order able express union intersection complement operation come set lowerlevel property prove demonstrate let look define specification memory information memory specification operation first step define way track property memory whether specific byte byte heap stack kind property associated like erased interesting point final program executable worry value would expensive practical either easily store track status every single byte property tracked purpose statically verifying required behavior way spark designate code solely used purpose assertion formal verification socalled ghost code code compiled binary unless assertion activated runtime push one step writing ghost code compiled first place restriction imposed u allow u write assertion describing entire memory would impossible compile run first step model address close possible actual way memory defined access ada bitwise operation going use modular type turn introduces difficulty modular type wrap around adding one last value go back first one however order prove absence runtime error want demonstrate never overflow define precondition operator initial attempt define relevant precondition function left right addresstype return addresstype left right pre addresstypelast left right function left right addresstype return addresstype left right pre left right precondition verify left right exceed addresstype last left right zero interestingly could tempted write first precondition following way pre left right addresstypelast however wraparound semantics inside precondition would always true still problem code due fact actually implemented hence infinite recursive call code go avoid going introduce new type addresstypebase computation without contract addresstype actual type use full code together size constant assuming bit becomes wordsize constant memorysize constant wordsize type addresstypebase mod memorysize wordsize type addresstype new addresstypebase function left right addresstype return addresstype addresstype addresstypebase left addresstypebase right pre addresstypelast left right function left right addresstype return addresstype addresstype addresstypebase left addresstypebase right pre left right armed type time get started modeling actual memory going track status associated every byte namely whether given byte part stack part heap neither whether byte scrubbed erased prover reason entire memory however status tracking never exist program costly keep data run time therefore going declare entity ghost purpose contract assertion never enable runtime assertion code look like type byteproperty record stack boolean heap boolean scrubbed boolean end record ghost type memorytype array addresstype byteproperty ghost memory memorytype ghost memory huge array declared global ghost variable write executable code write contract particular define contract function set heap two address value precondition function lower value equal upper one postcondition property memory range set heap specification look like procedure setheap addresstype pre post b addresstype b memory b heap else memory b heap global inout memory note also defining global memory processed modified inout specification correct also incomplete defining happens heap property others expect rest memory unmodified another way say range updated rest unchanged modelled update attribute turn postcondition post b addresstype b memory b memoryold b update heap true else memory b memoryold b update heap false literally meaning new value memory equal old value memory memory old change update heap true false elsewhere forgetting mention change data common mistake defining contract also source difficulty prove code good rule thumb always consider unchanged checking postconditions course relevant entity accessed modified subprogram variable accessed definition unchanged let get meat requirement going develop function move heap stack boundary scrub necessary nothing procedure set new heap boundary heapfrom heapto stack boundary stackfrom stackto defined procedure moveheapandstack heapfrom heapto stackfrom stackto addresstype remember expression requirement previous section forall b memory isoldstack b lor isoldheap b land neg isnewstack b lor isnewheap b iff iserased b happens form easily expressed quantifier memory array described b addresstype memoryold b stack memoryold b heap memory b stack memory b heap memory b scrubbed literally transcription property checking byte b address range stating old memory stack heap new memory new memory scrubbed otherwise contract going postcondition moveheapandstack state system call interestingly work properly going need also verify consistency value heapfrom heapto stackfrom stackto namely overlap heap stack precondition call stackfrom stackto heapfrom heapto heapfrom stackfrom stackto heapto stackfrom stackto stackfrom heapfrom heapto stackto heapfrom heapto enough stage demonstration specified full functional property demonstrated next step implement prove implementation lowlevel set library order implement service would actually useful lower level library implement set range together union intersect complement function library called determine region erase also basis proof going used runtime need efficient implementation set range going defined ordered disjoint list range using record discriminant look like type area record addresstype end record predicate type areaarray array natural range area type setbase max natural record size natural area areaarray max end record note call record setbase set bear may notice already first functional predicate area definition field described always check similar ada range check term applies complicated property set also going express property described area ordered expressed fact value element n value element n disjoint element n minus element n least another implicit property specified field size equal max size array able name manipulate specific property use going name expression function function isconsistent setbase return boolean ssize smax ssize sareas sareas sareas sareas come predicate write type setbase max natural record size natural area areaarray max end record predicate isconsistent setbase would recursive predicate call predicate checked particular passing parameter isconsistent would check predicate setbase call isconsistent would check predicate avoid predicate actually applied subtype subtype set setbase predicate isconsistent set later turn property fundamental ability proving property stage already nice see nontrivial property expressed namely structure compact nt waste space consecutive area could merged one said otherwise area separated least one excluded byte formal property expressed next step defined form inclusion something included somewhere may may included somewhere else inclusion property expressed quantifier range meant run program purpose property definition proof function defining given byte included set memory range expressed follows function includes b addresstype set return boolean ssize b sareas sareas ghost mean area set b included set b included least one area set going declare constructor create together three operator respectively implement union intersection complement need provide expression maximum size set operation well relationship included input output specification function create straightforward take range input creates set element within range contained resulting set read function create addresstype return set pre post createresultmax createresultsize b addresstype includes b createresult b note interestingly internal implementation set exposed property computing inclusion stating included without giving detail included also note many place postconditon really something like execute would possibly long loop run large area creation however good way model requirement let carry quick reasoning show worst result one area bigger input need precondition checking size indeed incremented exceed last value type postcondition size potentially incremented value input set resulting one viceversa operator postcondition precondition read function set return set pre positivelast ssize post b addresstype includes b result includes b resultsize ssize reasoning applied lead following specification function set return set pre positivelast post resultsize isconsistent result b addresstype includes b result includes b includes b function set return set pre positivelast post resultsize b addresstype includes b result includes b includes b course point one might tempted first prove library user code indeed tempted fell however turned significant endeavor let start looking user code moveheapandstack easy part armed set library implementing move function relatively straightforward using service get heap stack boundary creating set using proper operator create list scrub scrubbing piece memory one one finally setting new heap stack pointer procedure moveheapandstack heapfrom heapto stackfrom stackto addresstype prevheapfrom prevheapto prevstackfrom prevstackto addresstype begin getstackboundaries prevstackfrom prevstackto getheapboundaries prevheapfrom prevheapto declare prev set create prevheapfrom prevheapto create prevstackfrom prevstackto next set create heapfrom heapto create stackfrom stackto toscrub set prev next begin toscrubsize loop scrub toscrubareas toscrubareas end loop setstack stackfrom stackto setheap heapfrom heapto end end moveheapandstack let dive proof disclaimer proof going hard one need go far take advantage spark matter fact defining requirement formally already taking good advantage technology people prove data flow absence runtime error already huge win next level functional key property going one level entirely proving functionality advanced topic going introduced section lemma loop invariant mostly needed advanced level first step reset knowledge scrubbing state memory remember memory state used track status memory correspond real code reset flag going create special ghost procedure whose sole purpose set flag procedure resetscrub post b addresstype memory b memoryold b update scrubbed false ghost theory absolutely necessary provide implementation procedure meant compiled knowing supposed good enough however useful provide ghost implementation describe would operate implementation straightforward procedure resetscrub begin b addresstyperange loop memory b scrubbed false end loop end resetscrub going hit first advanced proof topic extremely trivial code prove reason loop loop something difficult provers today need help break sequential piece developer see loop spark see three different piece code prove connected socalled loop invariant summarizes behavior loop procedure resetscrub begin b addresstype first memory b scrubbed false loop invariant loop invariant exit b addresstype last b b memory b scrubbed false loop invariant loop invariant end loop end difficulty finding invariant true section code end proving postcondition establish important look need proven end loop would entire array scrubbed false field still value entrance loop expressed using attribute loopentry x addresstype memory x memoryloopentry x update scrubbed false establish loop invariant question much true step loop answer true value b loop invariant becomes x addresstypefirst b memory x memoryloopentry x update scrubbed false inserted code procedure resetscrub begin b addresstyperange loop memory b scrubbed false pragma loopinvariant x addresstypefirst b memory x memoryloopentry x update scrubbed false end loop end resetscrub back main code insert call resetscrub performing actual scrubbing anything actual executable code tell prover consider ghost value reset next another loop scrubbing subsection toscrubsize loop scrub toscrubareas toscrubareas end loop question property true end loop breaking property true iteration property true end everything included toscrub set indeed scrubbed b addresstype includes b toscrub memory b scrubbed give u following loop invariant toscrubsize loop scrub toscrubareas toscrubareas everything current area properly scrubbed pragma loopinvariant b addresstypefirst toscrubareas includes b toscrub memory b scrubbed end loop far enough establishing loop invariant may look little bit intimidating first little bit practise become rapidly straightforward unfortunately enough implementing unproven interaction register low level code data proven spark sense take example call read memory boundary procedure getheapboundaries addresstype post b addresstype memory b heap b procedure getstackboundaries addresstype post b addresstype memory b stack b value possibly coming register spark necessary able make link post condition data outside analysis case perfectly fine tell spark fact without prove two way one deactivate spark entire subprogram procedure getheapboundaries addresstype sparkmode begin code end getheapboundaries case spark assume postcondition correct issue spark analysis entire subprogram may much alternative solution state fact postcondition true end subprogram procedure getheapboundaries addresstype begin code pragma assume b addresstype memory b heap b end getheapboundaries example illustrate register modeled global variable read written c outside spark analysis register would moveheapandstack hard part diving next steering away reader ever proof let step back little currently set hardest level proof platinum fully proving program functional behavior lot benefit take spark prior reaching stage subset language alone provides analyzable code flow analysis allows easily spot uninitialized data runtime error buffer overflow relatively easy clear even simple gold property demonstration reachable software engineer little bit training full functional proof complex property demonstration hard also usually required want fundamental shift mindset required turn took good week understand week trying build proof bottom top adding various assertion left right trying make thing fit spark expectation absolutely result midst despair apple fell head prover le clever think like kid learning math going able build complex demonstration prove code asking prove code right approach right approach build demonstration code correctness step step prove demonstration correct demonstration program subprogram data control flow engineering architecture prover going prove demonstration code correct demonstration linked code code happens indirectly proven correct well reversing logic could prove small loop one way work describe scrubbed unscrubbed area one one first area scrub start beginning memory everything start scrubbedwhen working area beyond first one everything previous area current one scrubbedat end iteration everything beyond current area unscrubbedat end last iteration everything beyond last area unscrubbedthe first step help prover translate assertion see step small enough demonstration proven demonstration indeed prove code stage bad idea describe assertion loop loop invariant want information carried one loop iteration next lead following code toscrubsize loop scrub toscrubareas toscrubareas pragma loopinvariant b addresstype range toscrubareas toscrubareas memory b scrubbed pragma loopinvariant toscrubareas addresstypefirst b addresstypefirst toscrubareas memory b scrubbed pragma loopinvariant toscrubareas addresstypelast b toscrubareas addresstypelast memory b scrubbed pragma loopinvariant b addresstypefirst toscrubareas includes b toscrub memory b scrubbed end loop pragma assert toscrubsize toscrubareas toscrubsize addresstypelast b toscrubareas toscrubsize addresstypelast memory b scrubbed result bad first sight assertion prove may mean wrong may also mean spark need help prove let look first one detail pragma loopinvariant toscrubareas addresstypefirst b addresstypefirst toscrubareas memory b scrubbed putting shoe spark prover believe nothing scrubbed first element would case none byte toscrub area right let check investigate technique add assertion verify intermediate step pretty much like debugger let add assertion pragma assert toscrubareas addresstypefirst b addresstypefirst toscrubareas includes b toscrub assertion prove would true recall consistency check set supposed true point defined function isconsistent setbase return boolean ssize smax ssize sareas sareas sareas sareas looking area first one nothing first one isconsistent true toscrub assertion ought true yet spark believe u reaching kind situation good practise factor proof idea create place say given hypothesis prove conclusion sometimes spark getting lost wealth information available reducing number hypothesis consider small number enough get figure something interestingly activity factoring piece proof close regular program also easier developer understand small piece code large flat program prover better factored proof typically referred lemma ghost procedure prove postcondition minimal precondition convention call lemma something lemma look like procedure lemmanothingbeforefirst set ghost pre isconsistent post ssize b addresstype includes b elsif sareas addresstypefirst b addresstypefirst sareas includes b stating consistent either null nothing included element first included let see reducing scope proof enough let add empty procedure procedure lemmanothingbeforefirst set begin null end lemmanothingbeforefirst still good good try though assuming believe correct game demonstrate spark go hypothesis conclusion need take account one limitation spark induction significant impact deduced one part hypothesis ssize sareas sareas sareas sareas element element would like able check n element ability jump proving one one property whole set called induction happens extremely hard stateoftheart provers lie key going introduce new lemma go premise demonstrates mean area given one greater procedure lemmaorder set ghost pre ssize sareas sareas post ssize j ssize sareas sareas j going write demonstration program procedure lemmaorder set begin ssize return end ssize loop j ssize loop pragma assert sareas j sareas j pragma loopinvariant r j sareas sareas r end loop pragma loopinvariant r r ssize sareas r sareas end loop end lemmaorder see area checking area size indeed greater happens prove trivially spark prove lemmanothingbeforefirst applying lemma lemmaorder apply lemma need call regular function call hypothesis precondition checked spark conclusion postcondition added list hypothesis available prove procedure lemmanothingbeforefirst set begin lemmaorder end lemmanothingbeforefirst prof trivially back main loop applying lemma lemmanothingbeforefirst look like toscrubsize loop scrub toscrubareas toscrubareas lemmanothingbeforefirst toscrub pragma loopinvariant b addresstype range toscrubareas toscrubareas memory b scrubbed pragma loopinvariant toscrubareas addresstypefirst b addresstypefirst toscrubareas memory b scrubbed pragma loopinvariant toscrubareas addresstypelast b toscrubareas addresstypelast memory b scrubbed pragma loopinvariant b addresstypefirst toscrubareas includes b toscrub memory b scrubbed end loop pragma assert toscrubsize toscrubareas toscrubsize addresstypelast b toscrubareas toscrubsize addresstypelast memory b scrubbed voila one loop invariant proving properly madness nutshell point probably worth diving detail small subprogram code available size small function relatively reasonable let give insight much difficult problem set library generous implementation brings line code could actually le condensed let start little bit le day work implementation basic testing called silver level absence runtime error add maybe around line assertion half day work bad gold level decided prove one key property isconsistent true operator maybe day work needed one add another line assertion maybe still reasonable platinum completely proving functionality subprogram proved pun intended much much difficult experience see link link similar experience disclaimer experienced ada developer relatively little experience proof also selected problem relatively hard quantified property set structure quite different proving quantifier known hard provers start withwith mind solution came spread almost thousand line code consumed week half effort also linking solution colleague claire dross came one senior expert formal proof within day could prove two complex operator line code implementation also compact mine raise question really worth silver absolutely difficult bring case spending little bit effort exchange absolute certainty never buffer overflow range check error doubt time spent proving would spent much debugging either testing worse error later stage library integrated actual product gold also relatively strong case fact select key property allows concentrating relatively easy stuff confidence fact enforced never tested clearly outweighs effort also want point platinum effort well worth user code example look tedious first sight getting property right relatively straightforward allows gaining confidence something easily tested property whole memory question remains worth effort set library go maybe two day code proof around week half discus either way write line code demonstrate prover wrote correct keep haunting really line reasoning head developed code confidence fact logically linked next fair find error code writing code fully tested started proof would test found corner case much time would corner case take debug found year see blog post insight hard find bug removed proof people safely certify software eg avionics railway standard end writing time line test code verifying sample potential data situation provided property test modelled spark assertion fit prover know going level effort strong case anything le open debate admit odds lot fun would personally looking forward taking challenge would bos allow different question boil cost failure versus effort prevent said failure able make enlightened decision might valuable outcome gone effort
317,Lobsters,formalmethods,CSE-Formal methods,Towards Verification of the Pastry Protocol using TLA+ (2011),https://www.researchgate.net/profile/Tianxiang_Lu/publication/303407921_Towards_Verification_of_the_Pastry_Protocol_using_TLA/links/5742512f08ae9ace84187bac/Towards-Verification-of-the-Pastry-Protocol-using-TLA.pdf?origin=publication_detail,towards verification pastry protocol using tla,,obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r procset pdf text endobj obj length filter flatedecode stream u u endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r procset pdf text endobj obj length filter flatedecode stream v
318,Lobsters,formalmethods,CSE-Formal methods,Making Formal Methods Popular: The Crux is Math Education! [2015],http://ceur-ws.org/Vol-1385/paper5.pdf,making formal method popular crux math education,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream e endstream endobj obj page rstructtreeroot rtypecatalog endobj obj font procset pdftext xobject rotate endobj obj stream znrj g c b v f b un h ޥ tk endstream endobj obj stream v c ok ag l c n u sy v
319,Lobsters,formalmethods,CSE-Formal methods,Using TLA+ to understand Xen vchan,http://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/,using tla understand xen vchan,table content reddit hacker news lobster background qubes vchan protocol qubesos replaced sysfirewall mirageos unikernel restarting miragefirewall taking long time ocamlvchan xen document daystodo initial git commit suggested tla tla tla hyperbook specifying system pull request tla useful ring buffer xen event channel publiciolibxenvchanh vchan source code basic tla concept variable state behaviour summary tla action correctness spec model checker source real vchan algorithm checked testing full spec odd thing vchan work tried using tlc check inductive invariance proving integrity tlaps availability tlaps limitation experience tlaps docker image final specification specvchan original bug ocamlvchan missing memory barrier read surprising behaviour make copy conclusion fixed,vchan protocol used stream data virtual machine xen host without needing lock largely undocumented tla toolbox set tool writing checking specification post describe experience using tool understand vchan protocol work table content post also appeared reddit hacker news lobster background qubes vchan protocol run qubesos laptop qubesos desktop environment made multiple virtual machine privileged vm called provides desktop environment coordinate vms network access use vms actual work example use one vm email another development work called another vm called sysnet connects physical network yet another vm sysfirewall connects application vms netvm qubesos desktop window blue border debian development vm green one fedora vm etc default sysfirewall based fedora linux year ago replaced sysfirewall mirageos unikernel mirageos written ocaml little c code unlike linux boot much faster us much le ram fedorabased vm recently user reported restarting miragefirewall taking long time problem seemed taking several minute transfer information network configuration firewall sent vchan user reported stracing qubesdb process revealed sleeping second sending record suggesting wakeup event missing lead developer qubesos said guess missing evtchn trigger readingwriting data vchan perhaps ocamlvchan ocaml implementation vchan implementing vchan specification correctly wanted check problem vchan specification xen wiki list vchan xen document daystodo initial git commit said libvchan interdomain communication library library implement bidirectional communication interface application different domain similar unix socket data sent using byteoriented libvchanreadlibvchanwrite packetoriented libvchanrecvlibvchansend channel setup done using clientserver model domain id port number must negotiated prior initialization server allocates memory shared page determines size communication ring may span multiple page although default place ring control within single page properly sized ring testing shown interface provides speed comparable pipe within single linux domain significantly faster networkbased communication looked xendevel mailing list around period case reviewer asked worked one reviewer suggested please could say word functionality new library enables perhaps design etc particular protocol spec would useful anyone wanted reimplement another guest o etc think would appropriate add protocoltxt time checking library however submitter pointed unnecessary saying comment shared header file explain layout shared memory region part protocol applicationdefined ordinarily much interested spending free time tracking race condition library benefit stranger internet however want another play tla tla language specifying algorithm used many thing particularly designed stateful parallel algorithm learned tla working docker docker ee provides software managing large cluster machine includes various orchestrator swarmkit kubernetes swarm classic web ui ensuring everything work properly important end large collection test produced part job run test take test list web ui click whatever button tell click wait period time check see match test say see lot test repeated every supported platform every release release candidate preview release lot waiting involved much thinking required keep mind occupied started reading tla documentation read tla hyperbook specifying system leslie lamport creator tla freely available online easy read hyperbook introduces tool right away start playing specifying system start theory discus tool later think worth reading docker ee released engineer allowed spend week whatever fun dockerrelated project wanted used time read swarmkit design document make tla model felt using tla prompted useful discussion swarmkit developer see seen pull request comment specification document answer question requirement property algorithm work model checking work inductive invariant really work proof answer useful document try answer vchan tla useful limited experience tla whenever reached end specification whether reading writing always find thinking obvious hardly seems worth writing spec might feel reading blog post judge whether tla useful suggest take minute look code good reading c code might find like xen reviewer quite obvious work correct like might find prefer little help might want jot note see whether learn anything new give big picture two vms decide communicate vchan one server client server allocates three chunk memory one hold data transit client server one data going server client third track information state system includes counter saying much data written much read direction server tell xen grant client access memory client asks xen map memory address space client server access lock protocol careful either end sends data writing appropriate buffer updating appropriate counter shared block buffer ring buffer getting end start beginning datawritten producer counter dataread consumer counter together tell much data buffer difference zero reader must stop reading wait data difference size buffer writer must stop writing wait space one end waiting signal using xen event channel essentially set pending flag true end wake vm sleeping vm try sleep event pending immediately wake sending event one already pending effect publiciolibxenvchanh header file provides information including shared structure comment xenincludepubliciolibxenvchanh struct ringshared con prod define vchannotifywrite define vchannotifyread vchaninterface primary shared data structure struct vchaninterface standard consumerproducer interface one pair per buffer left client write server read right client read server write struct ringshared left right size ring determines location offset ring page offset ring page us grant describe multipage ring remain constant page shared one two order leftorder rightorder shutdown detection client server exited client server connected client yet connected clilive srvlive notification bit vchannotifywrite send notify data written vchannotifyread send notify data read consumed clinotify used client inform server action clinotify srvnotify grant list ordering left right must extend actual ring grow beyond end initial shared page remain constant page shared allow possible remapping client restarts grant might also like look vchan source code note libxenvchanh file directory includes extends header file name blog post ignore xenspecific business sharing memory telling client assume client mapped memory ready go basic tla concept take first look tla concept notation using simplified version vchan tla come excellent documentation try make full tutorial hopefully able follow rest blog post reading consider single direction channel eg clienttoserver variable state behaviour variable tla programmer expects something change time example use buffer represent data currently transmitted also add variable useful specification use sent represent everything senderside application asked vchan library transmit got everything receiving application received variable got buffer sent state tla represents snapshot world point give value variable example got h buffer sent hi state reminder state also includes everything else world variable care state state got buffer sent â â â â h h h â h h hi hi â hi ih â hi behaviour sequence state representing possible history world example behaviour one want basic idea tla specify precisely behaviour want want state expression expression evaluated context state example defines integrity state expression true whenever got far match wanted send take first element message take subseq everything except first element message drop subseq len integrity take sent len got got integrity true state except added helper operator take drop sequence tla confusing indexed rather easy make offbyone error operator use length agree python syntax would written something like def integrity return ssentstartswith sgot temporal formula expression evaluated context complete behaviour use temporal operator include supposed look like square supposed look like diamond f true expression f true every point behaviour f true expression f true point behaviour message send eventually arrive one way express availability x nat len sent x len got x tla syntax bit odd rather like latex surprising lamport also latex mean rendered upsidedown say every number x always true sent x byte eventually received least x byte pattern f g common enough shorter notation f g read always lead availability also written availability x nat len sent x len got x checking length availability combined integrity enough ensure eventually receive want ideally like ensure every possible behaviour vchan library satisfy temporal formula property property availability integrity way eventually start able tell one though still think would easier case forget explain syntax summary tla list action hopefully easy see property defines property want user vchan would happy see thing rely provide much help someone trying implement vchan tla provides another way specify behaviour action tla expression evaluated context pair state representing single atomic step system example read len buffer got got buffer buffer unchanged sent read action true step step transfer data buffer got unprimed variable eg buffer refer current state primed one eg buffer refer next state strange notation using form bulleted list rather infix operator indentationsensitive tla also support list way sequence concatenation python empty sequence python unchanged sent mean sent sent python might look like def read current next return len currentbuffer nextgot currentgot currentbuffer nextbuffer nextsent currentsent action correspond closely code temporal formula talk next state related current one action allows one thing reading whole buffer c implementation vchan receiving application provide buffer size library read enough byte fill buffer model need slightly flexible version read e n len buffer got got take buffer n buffer drop buffer n unchanged sent say step read step n range length buffer transferred n byte buffer e mean exists write action defined similar way constant buffersize byte write e seq byte buffer buffer len buffer buffersize sent sent unchanged got constant defines parameter input specification constant sense change state write operation add message buffer also add copy sent talk system seq byte set possible sequence byte excludes empty sequence step combined system either read step write step next read write also need define valid starting state algorithm look like init sent buffer got finally put together get temporal formula algorithm var got buffer sent spec init next var notation next var next bracket subscript var mean next unchanged var using init state expression temporal formula mean must true first state behaviour action var mean action var must true step tla syntax requires var subscript thing going world beside algorithm must always possible take step without algorithm anything spec defines behaviour like property way make obvious implement protocol correctness spec definition spec property make sense check every behaviour spec satisfies property python term want check behaviour b satisfy def specok b return spec b false property b ie either b behaviour could result action algorithm satisfies property tla notation write specok spec property ok behaviour allowed property spec example behaviour go straight got sent got hi sent hi one step meet requirement behaviour spec real implementation may restrict spec example consider behaviour state got buffer sent â hi hi h hi hi â hi sender sends two byte reader read one time behaviour c implementation reading application ask library read buffer however behaviour ocaml implementation get choose much data return application return byte together fine need show ocamlimpl spec spec property deduce ocamlimpl property course key purpose specification need check implementation implement specification implementation directly provides desired property might seem strange implementation allow specified behaviour fact even trivial specification spec false considered correct implementation property bad behaviour behaviour ok algorithm running must behaviour even behaviour nothing user library responsible checking use eg ensuring init condition met algorithm without behaviour corresponds library could never use one go wrong running model checker come fun part ask tlc tla model checker check spec property asking toolbox create new model called mine specok setting spec prompt value buffersize used various thing fix check write tlc first try get every possible seq byte infinite set defined msg seq byte changed write use msg added alternative definition msg model send message limited length fact replacement msg ensures sent always incrementing sequence enough check property much quicker checking every possible message system keep sending forever added state constraint model len sent tell tlc stop considering execution becomes false model run successfully nice feature tla instead changing specification make testable keep specification correct override aspect model specification say send message model check add integrity invariant check pass good doublecheck changing algorithm changed read clear buffer using buffer drop buffer instead n tlc report counterexample integrity sender writes buffer reader read one byte give reader read another byte give look like really checking wanted good careful accidentally added integrity check rather would interpreted temporal formula reported success true initial state one really nice feature tlc unlike fuzz tester breadthfirst search therefore find minimal counterexample invariant example therefore quickest way violate integrity checking availability complains use nat asking check every possible length replaced nat availabilitynat overrode model complains property show example sender wrote data reader never read problem next var always allows u nothing fix specify constraint wfvars action say stop forever action always possible never happening updated spec require read action fair spec init next var wfvars read care needed specified wfvars next would forcing sender keep sending forever user vchan required worse would mean every possible behaviour system would result sent growing forever every behaviour would therefore hit len sent constraint tlc consider mean tlc would never check actual behaviour availability report success would meaningless changing read require n len buffer quick way see tlc actually checking availability complete spec far source real vchan simple spec algorithm limitation one obvious simplification buffer sequence byte transit whereas real system ring buffer made array byte along producer consumer counter could replace three separate variable make explicit however ring buffer xen well understood feel would make specification clearer include serious problem spec assumes way perform read write operation atomically otherwise real system would behaviour covered spec implement spec correctly need kind lock real vchan protocol complicated spec avoids need lock real system shared state buffer added extra variable spec item shared state c code along initial value senderlive true sender set false close connection receiverlive true receiver set false close connection notifywrite true receiver want notified next write datareadyint false sender signalled receiver event channel notifyread false sender want notified next read spaceavailableint false receiver notified sender event channel datareadyint represents state event port sender make xen hypercall set wake interrupt receiver guess sending event somewhat slow notifywrite system used avoid sending event unnecessarily likewise spaceavailableint event port algorithm understanding protocol sending side sending application asks send byte check whether receiver closed channel abort check amount buffer space available enough set notifyread receiver notify u also check space case changed setting flag space write much data buffer notifywrite flag set clear notify receiver write wrote everything return success otherwise wait notified space check whether receiver closed channel abort otherwise go back step receiving side receiving application asks u read amount data check amount data available buffer much requested set notifywrite sender notify u also check space case changed setting flag data read amount requested notifyread flag set clear notify sender new space return success application even get much requested otherwise data check whether sender closed connection connection still open wait notified data go back step either side close connection clearing flag signalling side assumed also processlocal way close operation notify side currently blocked make expressing kind stepbystep algorithm easier tla provides programminglanguagelike syntax called pluscal translates pluscal tla action confusingly two different syntax pluscal pascal style c style mean search example web chance work using flavour started pascal one first example found switched cstyle later compact attempt describing sender algorithm pluscal fair process senderwrite senderwriteid variable free idea much free space available msg data nt sent yet sent everything asked send senderready true senderlive receiverlive goto done else msg msg sent sent msg remember wanted send senderwrite true free buffersize len buffer senderrequestnotify free len msg goto senderwritedata else notifyread true senderrechecklen free buffersize len buffer senderwritedata free buffer buffer take msg min len msg free msg drop msg min len msg free free senderchecknotifydata notifywrite notifywrite false atomic testandclear sendernotifydata datareadyint true signal receiver msg goto senderready else msg goto senderready senderblocked await spaceavailableint senderlive senderlive goto done else spaceavailableint false sendercheckrecvlive receiverlive goto done label eg senderrequestnotify represent point program action happen everything two label considered atomic checked every block code label access one shared variable mean real system see state consider toolbox provide help check manually senderready label represents state client application yet decided send data label tagged indicate fairness apply protocol require application keep sending data forever step fair decided send something keep going taking step senderready senderwrite corresponds vchan write function called argument msg say could message set msg tla also contains choose operator look like might thing use saying tlc check possible message use choose saying matter message tlc try always try one term specification choose would say application ever send one particular message without telling message senderwritedata set free obvious reason reduce number state model checker need explore since care value point code little awkward put thing else branch would naturally go whole block translator let use semicolon also bit confusing pluscaltotla translator requires closing brace place pdf generator mess indentation include code block starting senderrequestnotify get translated tla action senderrequestnotify pc senderwriteid senderrequestnotify free len msg pc pc except senderwriteid senderwritedata unchanged notifyread else notifyread true pc pc except senderwriteid senderrechecklen unchanged senderlive receiverlive buffer notifywrite datareadyint spaceavailableint free msg sent want got pc mapping process id label process currently executing senderrequestnotify performed senderwriteid process senderrequestnotify label afterwards pc senderwriteid either senderwritedata senderrechecklen enough space whole message code receiver fair process receiverread receiverreadid variable amount data think buffer contains want amount data user want u read got pseudovariable recording data ever received receiver recvready receiverlive n maxreadlen want n recvreading true len buffer recvgotlen want goto recvreaddata else notifywrite true recvrechecklen len buffer recvreaddata got got take buffer min want buffer drop buffer min want want recvchecknotifyread notifyread notifyread false atomic testandclear recvnotifyread spaceavailableint true goto recvready return success else goto recvready return success else senderlive receiverlive goto done recvawaitdata await datareadyint receiverlive receiverlive want goto done else datareadyint false quite similar recvready corresponds state application yet called read take n maximum number byte read argument store local variable want note use c library blocking nonblocking mode blocking mode write read wait data sent received nonblocking mode return special code application indicating need wait application waiting call library think specification cover case depending whether think senderblocked recvawaitdata representing code inside outside library also need way close channel clear looking c header exactly allowed think multithreaded program called close function write function blocked would unblock return happened call wrong time would try use closed file descriptor fail read wrong one guess single threaded use nonblocking mode want cancel thing mean sender close senderready senderblocked similarly receiver situation ocaml code cooperatively threaded close operation called blocked idle however decided make specification general allow closing point modelling closing separate process fair process senderclose sendercloseid senderopen senderlive false clear liveness flag sendernotifyclosed datareadyint true signal receiver fair process receiverclose receivercloseid recvopen receiverlive false clear liveness flag recvnotifyclosed spaceavailableint true signal sender process start closing finish initial label tagged disable fairness ok keep vchan open forever slight naming problem pluscal translator name action generates starting state action senderopen action move senderopen label senderopen action actually close connection finally share event channel buffer going direction might get notification nothing u ensure handle added another process send event time process spuriousinterrupts spuriousid spurious true either spaceavailableint true datareadyint true eitheror say need consider possibility process marked fair rely interrupt coming handle happen testing full spec pluscal code written speciallyformatted comment block press ctrlt generate update tla translation running model checker aware tla toolbox bit unreliable keyboard shortcut typing editor always work shortcut ctrls save sometimes get disconnected think cycle really checking old version avoid always running model checker keyboard shortcut since always seems fail time others focussing different part gui clicking back editor fix everything anyway running model new spec show integrity still ok however availability check fails following counterexample sender writes buffer sender close connection receiver close connection process come stop data never arrived need update availability consider effect closing connection point unsure vchan intended could say availability x availabilitynat len sent x len got x receiverlive senderlive pass vchan describes like unix socket write unix socket close still expect data delivered actually tried availability x availabilitynat x len sent senderlive pc senderwriteid senderready len got x receiverlive say sender write operation completes successfully back senderready point sender closed connection receiver eventually receive data close end would expect behave tlc report new spec satisfy giving example simplified step total receiver start reading find buffer empty sender writes data buffer return senderready sender close channel receiver see connection closed stop bug without specification impossible say maybe vchan never intended ensure delivery sender closed end case happens unlucky scheduling receiving application call read sender closed connection data available c code return data case sender happens close connection receiver checked buffer check close flag happens also easy fix changed code receiver final check buffer giving else senderlive receiverlive recvfinalcheck len buffer want goto done else goto recvreading change sure data sent connection open always delivered provided receiver close connection spotted issue reviewing code earlier well done note tlc find problem temporal property availability necessarily find shortest example first changed limit sent len sent added action constraint spuriousinterrupts get simpler example byte sent spurious interrupt odd thing noticed couple odd thing thought mention first notifywrite initialised true seemed unnecessary initialise false instead everything still work even initialise notifywrite true false allow either behaviour thus test old program followed original version spec still work either behaviour nice advantage using specification language saying code becomes le useful build version code however spec sure existing program follow fact found qubesdb us vchan library different unexpected way instead calling read waiting libvchan say qubesdb block first case call read function get event document adding extra step start receiverread recvinit either goto recvready recommended qubesdb n maxreadlen want n goto recvawaitdata tlc show notifywrite start false second odd thing receiver set notifyread whenever enough data available fill buffer completely usually read operation provide buffer large enough largest likely message would probably make sense set notifywrite buffer completely empty checking current version algorithm changed specification allow either behaviour vchan work point specified vchan also checked least message byte long buffer size sound like much still checked distinct state behaviour step long would perfectly reasonable place declare specification blog post finished however tla interesting ability particular provides interesting technique help discover algorithm work start integrity would like argue follows integrity true initial state ie init integrity next step preserve integrity ie integrity next integrity would matter looking possible action make next checking one individually preserve integrity however integrity true example state got buffer sent satisfies integrity take read step new state instead argue take next step reachable state integrity difficult know whether state reachable without searching idea make stronger version integrity called integrityi want integrityi called inductive invariant first step fairly obvious began integrityi sent got buffer msg integrity said got prefix sent say specifically rest buffer msg data currently transmitted data yet transmitted ask tlc check init next var integrityi check invariant finding init state taking next step find reachable state also ask check integrityi next var integrityi thing starting state matching integrityi instead init created new model integrityi report technical problem start know type anything example choose initial value senderlive without knowing senderlive boolean added typeok state expression give expected type every variable message seq byte finitemessage l union n byte n l typeok sent message got message buffer finitemessage buffersize senderlive boolean receiverlive boolean notifywrite boolean datareadyint boolean notifyread boolean spaceavailableint boolean free buffersize msg finitemessage maxwritelen want maxreadlen buffersize also need tell possible state pc say label process pcok pc sw senderready senderwrite senderrequestnotify senderrechecklen senderwritedata senderblocked senderchecknotifydata sendernotifydata sendercheckrecvlive done sc senderopen sendernotifyclosed done rr recvinit recvready recvreading recvgotlen recvrechecklen recvreaddata recvfinalcheck recvawaitdata recvchecknotifyread recvnotifyread done rc recvopen recvnotifyclosed done sp spurious might imagine pluscal translator would generate also need override message finitemessage n n used otherwise enumerate possible message integrityi typeok pcok sent got buffer msg way tlc start finding real problem example showing integrityi next integrityi true first recvreaddata would outofbounds read buffer job explain valid state fix extra constraint integrityi typeok pcok sent got buffer msg pc receiverreadid recvreaddata len buffer note complains recvgotlen buffer want end recvreaddata buffer explain happen tlc search breadthfirst example find never state explain first state happen real system eventually get big ugly pile constraint think bit simply ended integrityi typeok pcok sent got buffer msg len buffer free buffersize len buffer pc senderwriteid senderwrite senderrequestnotify senderrechecklen senderwritedata senderblocked sendercheckrecvlive msg pc senderwriteid senderready msg good idea check final integrityi original specok model check really invariant summary integrity always true sent always concatenation got buffer msg fairly obvious senderready set msg appends thing sent step senderwritedata recvreaddata transfer byte start one variable end another although like local information variable might outofdate must least much data buffer sender process added removed sufficient ensure never outofrange read likewise free variable lower bound true amount free space receiver ever creates space therefore never write beyond free space think ability explain algorithm work shown example inductive property hold really nice feature tla inductive invariant useful first step towards writing proof think valuable even documenting algorithm process get explain reason believing work tried simple algorithm code seemed helpful note originally free constraint depending pc however algorithm set zero use turn always true integrityi match state even maximum sent length pass game play speed thing see using tlc check inductive invariance suggestion discovered writing proving integrity tla provides syntax writing proof integrates tlaps tla proof system allow checked automatically proving integrityi matter showing init integrityi preserved possible next var step consider action next individually long simple enough able prove recvreaddata action little difficult know want point extra work prove transferring byte work even though real system never therefore added extra condition integrityi want nonzero whenever use also condition free use completeness integrityi want pc receiverreadid recvchecknotifyread recvnotifyread recvinit recvready recvnotifyread done pc receiverreadid recvgotlen recvrechecklen recvreaddata pc senderwriteid senderwrite senderrequestnotify senderrechecklen senderwritedata free availability integrity quite easy prove trouble trying explain availability one way start would add availability property check integrityi model however take check property end example find may several step took find counterexample faster way algorithm deadlock sender receiver blocked state neither interrupt pending made new invariant say deadlock happen integrityi pc senderwriteid senderblocked spaceavailableint pc receiverreadid recvawaitdata datareadyint discovered obvious fact closing connection example senderlive flag set close thread done anything put together closeok obvious fact shutting connection closeok endpoint live iff close thread nt done anything pc sendercloseid senderopen senderlive pc receivercloseid recvopen receiverlive send receive loop nt terminate unless someone closed connection pc receiverreadid recvfinalcheck done receiverlive senderlive pc senderwriteid done receiverlive senderlive receiver closed connection get got signal pc receivercloseid done spaceavailableint pc senderwriteid sendercheckrecvlive done problem example tlc showed realised actually know algorithm deadlock intuitively seems clear enough sender put data buffer space notifies receiver receiver read notifies writer could go wrong process working information outofdate time sender decides block buffer looked full buffer might empty time receiver decides block looked empty might full maybe already saw work c code algorithm took figure eventually ended invariant form sendmayblock spacewakeupcoming receivemayblock datawakeupcoming sendmayblock true state may lead blocked without checking free space likewise receivemayblock indicates receiver might block spacewakeupcoming datawakeupcoming predict whether going get interrupt idea going block need sure woken bit ugly though eg datawakeupcoming datareadyint event sent pc senderwriteid sendernotifydata event sent pc sendercloseid sendernotifyclosed pc receivercloseid recvnotifyclosed notifywrite event requested receiverlive sender see receiver still alive pc senderwriteid senderwritedata free pc senderwriteid senderchecknotifydata pc senderwriteid senderrechecklen len buffer buffersize pc senderwriteid senderready senderlive len buffer buffersize pc senderwriteid senderwrite len buffer buffersize pc senderwriteid senderrequestnotify len buffer buffersize spacewakeupcoming len buffer buffersize senderlive pas model tested sending one byte decided try proof well work problem seems datawakeupcoming spacewakeupcoming really mutually recursive reader wake sender wake sender might blocked block ok though long receiver wake sender wake probably already figured thought document confusion occurred although process might outofdate information could fine long one moment one right last process update buffer must know full one must correct information given time enough avoid deadlock work either proof step see correct ask tlc show example eg stuck trying prove senderrequestnotify preserve receiver recvready buffer full receiverlive false ask example example pcok pc senderwriteid senderrequestnotify pc receiverreadid recvready receiverlive false len buffer buffersize create new model search example next var test long example several constraint use much larger model also ask check property false var mean show step starting example quickly became clear wrong quite possible neither process uptodate process see buffer contains x byte data sender sends byte receiver read z byte sender think x byte buffer receiver think x z byte neither correct original buffer small find counterexample real reason vchan work actually rather obvious know see earlier eventually occurred could make use got sent defined writelimit total number byte sender would write blocking receiver never anything defined readlimit total number byte receiver would read sender never anything else define limit correctly easy ask tlc check extra property running example used check readlimit behaves sensibly readlimitcorrect eventually receive readlimit promise wfvars receiverread availabilitynat readlimit len got receiverlive readlimit decrease decide shut readlimit readlimit receiverlive var receiverread step nt change read limit receiverread unchanged readlimit receiverlive var readlimit defined term process run property ideally tested model without fairness condition ie init next var otherwise fairness may force sender perform step still want allow step though show readlimit lower bound argue eg buffer eventually transfer byte receiver eventually read byte long sender eventually sends byte sender eventually send receiver read least receiver read sender sends least sender send reader read least byte always true point learning cautious trying proof added new model check idea one prevents sender ever closing connection prevents receiver ever closing reduces number state consider able check slightly larger model integrityi closeok reader stuck data available sender unblock readershouldbeunblocked sender going write writelimit len got len buffer len msg senderlive sender increase readlimit pc senderwriteid senderchecknotifydata notifywrite pc senderwriteid sendernotifydata readlimit len got len buffer sender notify u shutdown pc sendercloseid sendernotifyclosed writer stuck space available receiver unblock writershouldbeunblocked reader going read readlimit len got receiverlive reader increase writelimit pc receiverreadid recvchecknotifyread notifyread pc receiverreadid recvnotifyread writelimit len got buffersize receiver notify u shutdown pc receivercloseid recvnotifyclosed notifyflagscorrect process path blocked must set notify flag notifyflagscorrect say case flag still set interrupt sent process trigger interrupt managed use prove step preserved needed little extra finish receiver proof point finally spotted obvious invariant doubt saw along whenever notifyread still set sender accurate information buffer notifyread sender accurate information buffer writelimit len got buffersize flag cleared right pc receiverreadid recvchecknotifyread pretty obvious sender check buffer setting flag must accurate information point receiver clear flag reading buffer invalidates information dilemma obviously going matching property notifywrite add continue nearly done continued finished proof proved able prove nice thing quite easily theorem senderlive receiverlive pc senderwriteid senderready pc senderwriteid senderblocked spaceavailableint readlimit len got len buffer say whenever sender idle blocked receiver read everything sent far without help sender theorem senderlive receiverlive pc receiverreadid recvawaitdata datareadyint writelimit len got buffersize say whenever receiver blocked sender fill buffer pretty nice would possible make vchan system eg could send byte time still prove deadlock would always deliver data shown algorithm use whole buffer least theorem say long believe readlimit writelimit defined correctly proof complete went back deleted stuff readlimit writelimit started new rule notifyread notifywrite instead using writelimit len got buffersize indicate sender accurate information made new senderinfoaccurate return true whenever sender fill buffer without help avoids unnecessary arithmetic tlaps need lot help sender information accurate whenever going block buffer really full senderinfoaccurate accurate information len buffer free buffersize state going check buffer blocking pc senderwriteid senderready senderrequestnotify senderwrite senderrechecklen sendercheckrecvlive done pc senderwriteid senderrequestnotify free len msg signalled immediately wake next time try block spaceavailableint write data pc senderwriteid senderwritedata free len msg wo nt need block wrote data intended return without blocking pc senderwriteid senderchecknotifydata sendernotifydata len msg talking accuracy instead write limit also able include happy case treated possible problem sender use full buffer done change proof spec became much simpler line shorter remaining step trivial readlimit writelimit idea still seemed useful though found able prove thing eg still conclude even mention writelimit theorem senderlive receiverlive pc receiverreadid recvawaitdata datareadyint writelimit len got buffersize nice keep invariant proof simple still get result end initially defined writelimit number byte sender could write sending application wanted send enough data later changed actual number byte would write application try send otherwise packetbased sends write buffer enough space whole message writelimit could go eg think write another byte application decides write byte write anything limit theorem useful property would good confidence readlimit writelimit correct able prove useful lemma first receiverread step change readlimit long receiver closed connection theorem receiverreadpreservesreadlimit assume receiverlive receiverread prove unchanged readlimit give u good reason think readlimit correct receiver blocked read without help readlimit defined len got readlimit obviously correct case since read step preserve readlimit show readlimit correct case eg readlimit process anything end state receiver blocked readlimit len got really read total byte also able prove never decrease unless receiver close connection theorem readlimitmonotonic assume next receiverlive prove readlimit readlimit readlimit n always least n receiver ever block read least n byte able prove similar property writelimit feel reasonably confident limit prediction correct disappointingly actually prove availability using tlaps currently understands little temporal logic see tlaps limitation however could show system deadlock data transmitted ca nt get state sender receiver blocked wakeup pending theorem assume prove pc senderwriteid senderblocked spaceavailableint senderlive pc receiverreadid recvawaitdata datareadyint receiverlive suffices assume pc senderwriteid senderblocked spaceavailableint senderlive pc receiverreadid recvawaitdata datareadyint receiverlive prove false obvious notifyflagscorrect def notifyread def notifyflagscorrect notifywrite def integrityi qed def notifyflagscorrect senderinfoaccurate readerinfoaccurate def free def integrityi len buffer buffersize def senderinfoaccurate len buffer def readerinfoaccurate qed buffersizetype ca nt get state sender idle receiver blocked unless buffer empty data sent consumed theorem assume pc senderwriteid senderready senderlive pc receiverreadid recvawaitdata receiverlive datareadyint prove len buffer included proof show deadlock happen suffices assume happened show contradiction process blocked notifyread notifywrite must set process block without setting unset interrupt would pending blocked since notifyread still set sender correct thinking buffer still full since notifywrite still set receiver correct thinking buffer still empty would contradiction since buffersize zero deadlock process must keep getting woken interrupt mean interrupt keep sent send interrupt making progress writing buffer reading must keep making progress content argument experience tlaps toolbox come proof system need install separately instruction outofdate lot broken link may turned step dockerfile got partly installed asked tla group help noone else seemed know install either looking error message searching web program name finally managed get working december trouble installing try using docker image installed write proof toolbox press ctrlg ctrlg check success proof turn green failure failing step turn red also ctrlg ctrlg combination single step check step useful pretty slow take minute check complete specification tla proof done mathematical style write set proposition vaguely suggest thinking lead proof good building intuition bad reproducibility mathematical proof considered correct reader convinced depends reader case collection automated theoremprovers various timeouts mean whether proof correct depends fast computer many program currently running etc proof might pas one day fail next proof step consistently pas try individually consistently fail checked part whole proof step fails need break smaller step sometimes proof system clever immediately solves complex step example proof senderclose process represents sender closing channel preserve invariant lemma senderclosepreservesi senderclose suffices assume senderclose prove obvious integrityi def typeok def integrityi pcok def integrityi case senderopen use def senderopen unchanged pc senderwriteid pc receiverreadid pc receivercloseid def pcok pc sendercloseid sendernotifyclosed def pcok typeok def typeok pcok def pcok integrityi def integrityi notifyflagscorrect def notifyflagscorrect qed def senderinfoaccurate readerinfoaccurate closeok case sendernotifyclosed use def sendernotifyclosed unchanged pc senderwriteid pc receiverreadid pc receivercloseid def pcok pc sendercloseid done def pcok typeok def typeok pcok def pcok integrityi def integrityi notifyflagscorrect def notifyflagscorrect qed def senderinfoaccurate readerinfoaccurate closeok qed def senderclose step integrityi def integrityi say see integrityi true next step looking whole lemma really saying tlaps agrees time tlaps maddeningly stupid tell problem make thing go red example fails theorem assume pc pc except pc prove pc obvious trying say pc unchanged given pc pc except changed pc problem tla untyped language even though know mapping update pc enough apparently conclude pc fact mapping fix need theorem assume pc nat string pc pc except pc prove pc obvious extra pc nat string tell tla type pc variable found missing type information biggest problem proof automatically assume computer know type thing another example theorem assume new x nat new nat x min x prove min obvious trying remove x side equation problem tla know min number know whether normal law addition apply case tell though go red solution theorem assume new x nat new nat x min x prove min def min def min tell tlaps share definition min solver see min must natural number everything work another annoyance sometimes find right lemma use even tell exactly need extreme case lemma transferfacts assume new src new tlaps nt cope new varaible src new dst new new len src src message dst message dst take src drop src prove message len len src message len len dst unchanged dst src proof omitted lemma sameagain assume new src new tlaps nt cope new varaible src new dst new new len src src message dst message dst take src drop src prove message len len src message len len dst unchanged dst src transferfacts transferfacts state useful fact transferring data two variable prove quite easily sameagain identical every way refers transferfacts proof even one lemma consider one match assumption conclusion perfectly none solver could figure one eventual solution name bundle result work transferresults src dst message len len src message len len dst unchanged dst src lemma transferfacts assume new src new new dst new new len src src message dst message dst take src drop src prove transferresults src dst proof omitted lemma sameagain assume new src new new dst new new len src src message dst message dst take src drop src prove transferresults src dst transferfacts art using tlaps controlling much information share provers little failing provide definition min enough information find proof much providing definition transferresults get overwhelmed fail find proof bit frustrating work machine checked give confidence proof actually correct another perhaps important benefit machine checked proof decide change something specification ask recheck everything go cup tea come back highlighted red step need updated made lot change worked well tlaps philosophy concerned algorithm system spending time proving basic mathematical fact instead assert mathematical theorem need assumption theorem even find formal proof every step still use tlaps break step either prove think obvious enough require proof however able prove everything needed vchan specification within tlaps final specification little bit tidying end particular removed want variable specification like correspond anything ocaml implementation place algorithm us decide whether set notifywrite thought might wrong anyway changed recvgotlen want goto recvreaddata else notifywrite true recvgotlen either goto recvreaddata else notifywrite true notifywrite true always allows implementation set notifywrite want skip step long cover current c behaviour proposed c behaviour ocaml implementation also simplifies invariant even made proof shorter put final specification online specvchan also configured travis ci check model verify proof useful sometimes impatient recheck everything laptop pushing update generate pdf version specification make pdfs expression little easier read use proper symbol also break thing page highly annoying would nice could omit proof really useful trying edit rather see statement theorem original bug new understanding vchan see anything obvious wrong c code least long keep connection open firewall took look ocamlvchan first thing noticed someone commented memory barrier noting git log needed using filed bug anyway missing memory barrier strange thing saw behaviour read function claim implement mirage flow interface say read data available return fresh buffer containing however looking code actually return pointer directly shared buffer delay updating consumer counter next call read rather dangerous filed another bug read surprising behaviour however checked miragequbes code take buffer make copy immediately bug either also original bug report mentioned second timeout neither c implementation ocaml one timeouts time look qubesdb qubesdb accepts message either guest vm firewall local client connected unix domain socket basic structure true await vchan event local client data second timeout vchanreceivebuffer nonempty handlevchandata ready client handleclientdata suspicion missing vchan event discovering data buffer anyway due timeout looking code seem possible race condition local client asks send data handleclientdata sends data firewall using blocking write firewall sends message qubesdb time signal event firewalltodb buffer data qubesdb get event ignores blocking write still space dbtofirewall direction firewall update consumer counter signal another event buffer space blocking write completes qubesdb return main loop qubesdb go sleep second without checking buffer think cause bug though message firewall might sending qdbrespok message qubesdb discard message managed reproduce problem saw fact qubesdb make progress due second timeout try go back sleep another second immediately get woken message local client look like qubesdb sending update every second client qubesd asking send update every second looking qubesd log saw stacktraces libvirt failing attach network device read xen network device attachment specification check firewall implemented correctly kidding course specification maybe blog post inspire someone write conclusion user open source software encouraged look source code check correct pretty difficult without specification saying thing supposed often deal learning enough fix whatever bug working time decided try making proper specification instead making tla specification took rather long time quite pleasant hopefully next person need know vchan appreciate tla specification generally defines two set behaviour first set desirable behaviour eg data delivered correctly definition clearly explain user expect system second defines behaviour particular algorithm definition make easy see implement algorithm tlc model checker check behaviour acceptable least within defined limit writing specification using tla notation force u precise mean example prose specification might say sent eventually executable tla specification forced clarify happens connection closed would expected sender writes data close connection data would still arrive c implementation vchan always ensure tlc model checker find counterexample showing fail minute explain algorithm always work need find inductive invariant tlc model checker help presenting example unreachable state satisfy invariant preserve taking step must add constraint explain state invalid easy integrity invariant explains never receive incorrect data found much harder prove system deadlock suspect original designer system would find step easy presumably already know work found inductive invariant write formal machinechecked proof invariant always true although tlaps allow u prove liveness property directly able prove various interesting thing algorithm deadlock sender blocked receiver read everything sent receiver blocked sender fill entire buffer writing formal proof little tedious largely tla untyped language however nothing particularly difficult know work around various limitation proof checker might imagine tla would work small program like libvchan case matter deciding specify detail example specification give detail ring buffer work instead used single buffer variable represent specification larger system using vchan would model channel using sent got action transferred difference step tla toolbox rough edge one found troublesome keyboard shortcut frequently stop working temporal property violated tell one model explorer tooltips appear right mouse pointer preventing scrolling mouse wheel also like check regular basis seem time operation middle particularly complex proof checking operation sometimes suddenly pop box suggesting cancel job get back reading news however improving latest version get syntax error tell file error pressing delete backspace editing longer cause crash lose unsaved data general feel tla toolbox quite usable designing new protocol would certainly use tla help design tla integrate language type system even specification still need check manually code match spec would nice could check automatically somehow one final problem whenever write tla specification feel need explain first tla hopefully become popular problem go away update marek told state model network device one block device documented blkifh block device header file provided libvirt debugging help bug fixed
320,Lobsters,formalmethods,CSE-Formal methods,Programming Synthesis Explained,https://homes.cs.washington.edu/~bornholt/post/synthesis-explained.html,programming synthesis explained,program synthesis explained january luis ceze expert programming language program synthesis quick tutorial synthesis deep learning big data xcode class project specifying program behaviour firstorder denali superoptimiser inductive program synthesis counterexampleguided inductive synthesis specify synthesise verify feedback oracleguided synthesis synthesis specification synthesis step synthesis static single assignment form verification step verify feedback step feedback starting existing program delight followup paper stochastic superoptimisation specification searching space program markovchain monte carlo mcmc sampling metropolis algorithm synthesis step synthesis step multiarmed bandit problem verification step verification step feedback step feedback step enumerative search synthesising distributed system protocol specification synthesis step synthesise verification step verification step feedback step conclusion original cegis work rule,program synthesis explained january introduction field program synthesis idea computer write program automatically tell want professor luis ceze great adviser one wellhidden shameful secret phd computer architecture working correcting grave misjudgement surrounding expert programming language time make contribution part series programming language computer architecture professor today tackle program synthesis want build program synthesizer quick tutorial synthesis synthesis one hotter computer science buzzword right like deep learning big data program synthesis little odd way program computer giving explicit instruction course instruction computer good following extremely quickly necessarily human good writing efficient u tell computer want program leave detail computer figure ultimate abstraction programmer tell computer want rather completely absolved implementation detail promise program synthesis definition little vague though immediate objective really able tell xcode game launch cuteyetoddlycircular bird solid object high though app store could certainly angry bird clone still likely human expertise involved process point immediate promise program synthesis automate programming minutia time reinvent bittwiddling hack help programmer focus big picture class project last quarter needed implement stateoftheart program synthesis algorithm talk work specifying program behaviour wellstudied programming language tell computer thing language helpful telling program synthesiser want program want write kind specification program synthesiser produce program satisfies specification convenient way write specification varies style complete formal specification formula logic say firstorder want program p add input might write logical formula p x set inputoutput pair example program program add input might provide list pair like demonstration program compute output similar inputoutput pair might also provide intermediate step computation show transform input output reference implementation compare seems strange try synthesise program already implementation prove useful example discus later complete formal specification lends style deductive program synthesis try deduce implementation based specification set logical axiom example denali superoptimiser take logical specification axiomatisation instruction set explores every possible way implement specification sound great theory depends complete axiomatisation target language complete formal specification may difficult obtain contrast inductive program synthesis allows le formal specification rather making logical deduction directly specification applies iterative search technique find implementation iterative approach benefit flexibility specification run significant scaling problem since interested relaxed type specification focus inductive program synthesis inductive program synthesis specific flavour inductive synthesis going focus counterexampleguided inductive synthesis cegis idea two part working handinhand loop start specification desired program synthesiser produce candidate program might satisfy specification verifier decides whether candidate really satisfy specification done verifier close loop providing sort feedback synthesiser use guide search new candidate program called feedback traditionally counterexample new input candidate program satisfy specification going abuse schematic little describe technique feedback really counterexample hole must fill define new cegis synthesis technique specify desired behaviour synthesise candidate program verify candidate program specification provide feedback future candidate far said nothing even cegis loop ever terminates one strength many cegis technique empirical tendency require trip around loop even though space program incredibly large going describe three different inductive program synthesis technique fit cegis mold oracleguided synthesis jha et oracleguided synthesis assumes already implementation program want synthesise call oracle program implementation specification oracleguided synthesis treat oracle black box execute arbitrary input need inspect implementation also start collection test case inputoutput pair oracle create test case generating random input asking oracle correct answer synthesis step provide oracleguided synthesis library component synthesiser build candidate program synthesis step going arrange component program static single assignment form essence going take component decide plug input output together form program formulation disallows loop program generate always loopfree example library three component two add square root possible way connect together program connection implement ssa form program x add x add sqrt return notice two copy add component ssa form simply connects component together want final program use two addition must supply least two add component notice also dead code since output unused fine save u decide advance exactly many component final program use instead need provide upper bound synthesiser generate dead code component want use synthesiser us test case constrain component linked together us smt solver decide component join together program correct test case collection smt solver fails program us given component satisfy test case component insufficient otherwise produce program ssa form satisfies test case p agrees oracle test input verification step solution pas candidate program verify step remember candidate program satisfies test case existing collection verify step going use smt solver answer question exist another program different candidate program p also satisfies test case existing collection input z disagrees p break one bit synthesiser candidate program p satisfies test case asking verifier new test input z new program input z p produce different output new program also going satisfy test case essentially asking program p ambiguous one program could satisfied test case know done since program ambiguous asking anything oracle program particular might case p produce wrong answer input z matter verifier produce different answer example work two test case component saw test input synthesiser gave u candidate p program sqrt x satisfied test case since agrees oracle asked verifier produce two thing new program new test input z case successful produced new program xy new test input new test input candidate p new program disagree sqrt case turn program wrong since output new test case sqrt fact p disagree sufficient send u back around loop via feedback step feedback step feedback step going exploit new test case z generated verifier asks oracle correct output input z add result set test case synthesiser use next trip around loop example next trip around loop last way use two add square root satisfy three test case program sqrt xy question verifier asks therefore unsatisfiable able find second program loop exit completely correct must also kind validation oracle consult finishing cegis loop problem cegis loop race find unique program satisfies test case find test case make component insufficient find unique program break loop straight away might gotten lucky seeing test case proved component insufficient validation oracle verifies synthesised program really satisfy specification input test case starting existing program oracleguided synthesis assumes oracle existing implementation program trying synthesise actually need inspect implementation treat black box provides output supply input even seems little absurd synthesise program already author use two domain illustrate technique useful first traditional suite bitvector benchmark delight many synthesis paper use benchmark example small unintuitive program instead trying come efficient bittwiddling hack programmer write simple inefficient implementation bitvector manipulation synthesiser us implementation produce optimal program second domain program deobfuscation taking obfuscated program oracle synthesising new simpler program match behaviour worth noting followup paper one take basically approach instead requiring oracle requires logical specification desired behaviour stochastic superoptimisation schkufza et stochastic superoptimisation completely different approach program synthesis attempt beat cegis mold assumes existing implementation specification compare problem name suggests problem tackling superoptimisation finding optimal instruction sequence given piece code stochastic superoptimisation search space program find new program match behaviour faster efficient search aspect make form program synthesis searching space program simplest way search space program suppose start randomly generated program decide program try next could randomly mutate one instruction program assuming mutation satisfy basic property example optimal program add instruction mutation must able generate add instruction search eventually find optimal program probably take long time guidance decide right track answer stochastic superoptimisation us markovchain monte carlo mcmc sampling search space program guided way essentially stochastic superoptimisation defines cost function measure candidate program us mcmc particular metropolis algorithm sample program highly weighted function bias mean mcmc search likely visit program nearer optimal although still random search large space bias mean empirically stochastic superoptimisation often quickly discovers correct program almost optimal synthesis step synthesis step stochastic superoptimisation find next candidate program drawing mcmc sample based previous candidate program p proposes randomly applying one mutation p changing opcode randomly selected instruction changing random operand randomly selected instruction inserting new random instruction swapping two randomly selected instruction deleting existing randomly selected instruction mcmc sampler us cost function measure target program fast decide whether accept candidate candidate likely accepted close target fast even program slow distant target probability accepted ensuring explore novel program similar exploreexploit tradeoff multiarmed bandit problem candidate accepted move verification step repeat process candidate accepted verification step accepted candidate program verification step simply pass candidate target program verifier decide equivalent paper trick make verification little forgiving example getting correct result different register important trick executing verifier could slow stochastic superoptimisation first us test case cost function test case fail know candidate possibly correct program need call verifier empirically bad candidate tend fail fast test case trick considerably improves throughput mcmc search feedback step feedback step stochastic superoptimisation implicit mcmc sampling compare new candidate program previously accepted candidate p decide whether program explore better p ie higher cost function either faster closer target certain explore otherwise still probability exploring probability depends much worse enumerative search last synthesis technique going try fit cegis mold enumerative search fairly obvious brute force approach neat trick despite seeming used great effect example udupa et al synthesising distributed system protocol specification going use finite set test case course since generate test case given implementation program fine instead assume existing implementation like oracleguided synthesis stochastic superoptimisation also assume grammar target language purpose use simple grammar two operation add sub two available variable x grammar defines expression term example add x sub x program grammar assignment statement make life easier synthesis step idea enumerative search brute force search possible program break program depth based deepest path parse tree example program return x depth zero program xy depth xy x depth synthesise candidate program starting depth enumerating program depth grammar mean first two candidate two program x done depth increment next depth repeat process depth eight candidate program take form operation b notice possible expression b exactly program depth enumeration depth k explore program form operation b b expression depth dynamic programming search going exponential depth k depth hole filled one expression explore program depth explore program rely feedback step try prune search space verification step specified program term test case verification step simply going execute test case compare output goal match done feedback step test case output also key feedback step trick trying fill hole program depth k need consider every program depth instead need consider program distinct output example point considering sub x x sub effect insight prune search space decide two program distinct test case come defined target program behaviour term test case actually matter two program semantically different rather whether differ test case decide new program p distinct seen far simply compare test case output every program match existing program point keeping p throw away example every test case add x sub x equivalent even though clearly untrue general get prune whole bunch program semantically equivalent general equivalent set behaviour actually care turn strategy work remarkably well problem synthesising cache coherence protocol udupa et al found pruning reduces search space factor nearly depth course well work problem depend set behaviour care set component include grammar conclusion going synthesising entire application scratch time soon really viable goal anyway many case smaller program exactly synthesis ask programmer bolt highlevel piece together fill minute detail automatically idea sketching prompted original cegis work also appeal rule program spend time small area code synthesis small part still deliver significant efficiency improvement promise program synthesis programmer stop telling computer thing focus instead telling want inductive program synthesis tackle problem fairly vague specification although many algorithm seem intractable practice work remarkably well chalk another victory empiricist
321,Lobsters,formalmethods,CSE-Formal methods,SMT Solvers: Theory and Practice (2008),https://resources.mpi-inf.mpg.de/departments/rg1/conferences/vtsa08/slides/barret2_smt.pdf,smt solver theory practice,,obj stream pn th ox lm u x q j vh 誶h endobj obj endobj obj stream qn e gu й k r v j լ stream x ӂ f xge apg r x endobj obj endobj obj stream h k q 㳙 㳔 b aq e w endobj obj endobj obj stream zycif e v ќ ٲ l wp yx k u yj ck c oŝkq endobj obj endobj obj stream ԅ vj gxc f tӏ c endstream endobj obj endobj obj stream qw rjlh
322,Lobsters,formalmethods,CSE-Formal methods,Formally certified satisfiability solving (2012),http://ir.uiowa.edu/cgi/viewcontent.cgi?article=3420&context=etd,formally certified satisfiability solving,,obj metadata rnames routlines rpages rstructtreeroot rtypecatalogviewerpreferences endobj obj stream applicationpdf duck ki oe formally certified satisfiability solving prince wwwprincexmlcom appendpdf pro linux bit aug library appligent appendpdf pro uuid uuid endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj p rpg rslink endobj obj p rpg rslink endobj obj p rpg rslink endobj obj p rpg rslink endobj obj p rpg rslink endobj obj p rpg rslink endobj obj p rpg rslink endobj obj endobj obj endobj obj mediabox parent rresources font procset pdftextimagec xobject structparents endobj obj r r r r r r r endobj obj stream gr
323,Lobsters,formalmethods,CSE-Formal methods,Leveraging Rust types for modular specification and verification,https://www.research-collection.ethz.ch/handle/20.500.11850/311092,leveraging rust type modular specification verification,,permanent linkhttps subjectrust type system heapmanipulating program concurrency
324,Lobsters,formalmethods,CSE-Formal methods,Hoare-style Specifications as Correctness Conditions for Non-linearizable Concurrent Objects,https://arxiv.org/pdf/1509.06220v3,hoarestyle specification correctness condition nonlinearizable concurrent object,,obj filter flatedecode length stream xڽ f l hޕ yblib w z uy p n vf w h f w k ug c ꟻ ʷ pav qtu q endobj obj type objstm filter flatedecode first length n stream ke p 벺 l ha p ny c e fu g endobj obj filter flatedecode length stream b cp h l bi bk za v hi el k q ue ȝ њd f kwȣl p
325,Lobsters,formalmethods,CSE-Formal methods,An Efficient Runtime Validation Framework based on the Theory of Refinement (2017),https://arxiv.org/pdf/1703.05317.pdf,efficient runtime validation framework based theory refinement,,obj stream nl l h h w cd p b g g p x b 픵zao k e f h p u n q b r xi endobj obj endobj obj stream bħd k xo c qo α q rt b f 镘 tb h c b㾶d hu k w capϙm n sul k x ly ʦe x l ľ endobj obj endobj obj stream c x lj sw owx g e v b yz c ʻxra ǒ vm z n gp î tm q z z un z e endobj obj endobj obj stream ҽi wba amb ac zm k c v w c ʯ ȅyz
326,Lobsters,formalmethods,CSE-Formal methods,Abstract Interpretation in a Nutshell,https://www.di.ens.fr/~cousot/AI/IntroAbsInt.html,abstract interpretation nutshell,video concrete semantics program undecidability specification safety property proof safety property testingdebugging bounded model checking abstract interpretation formal method erroneous abstraction example erroneous abstraction false alarm incompleteness formal method excluded miracle invariant program abstract invariant abstract domain abstract interrpetation topcis reference abstract interrpetation bibliography semantic foundation program analysis abstract interpretation based formal method future challenge interprétation abstraite partial completeness abstract fixpoint checking constructive design hierarchy semantics transition system abstract interpretation abstract interpretation unified lattice model static analysis program construction approximation fixpoints systematic design program analysis framework comparing galois connection wideningnarrowing approach abstract interpretation temporal abstract interpretation online course abstract interpretation mit course abstract interpretation note,abstract interpretation nutshell introduction static analysis abstract interpretation objective simple intuitive informal technical introduction well bibliographic reference provided video french also useful concrete semantics program concrete semantics program formalizes set possible execution program possible execution environment execution represented curve showing evolution vector x value input state output variable program function time concrete semantics represented set curve continuous time short x undecidability concrete semantics program infinite mathematical object computable possible write program able represent compute possible execution program possible execution environment hence non trivial question concrete semantics program undecidable possible write program able answer question possible execution program since concrete semantics program would computable mathematical analogy theorem prover able example prove theorem arithmetic without human assistance specification safety property safety property program express possible execution program considering possible execution environment reach erroneous state graphically set erroneous state represented forbidden zone x proof safety property verification safety property consists proving intersection concrete semantics program forbidden zone empty since program concrete semantics computable verification problem undecidable always possible answer safety question completely automatically finite computer resource without uncertainty answer without human intervention testingdebugging testingdebugging consists considering subset possible execution x testingdebugging proof since erroneous trajectory might forgotten problem absence coverage bounded model checking bounded model checking consists exploring prefix possible execution x bounded model checking proof since late error missed problem absence coverage abstract interpretation abstract interpretation consists considering abstract semantics superset concrete program semantics x abstract semantics cover possible case whence abstract semantics safe ie intersect forbidden zone concrete semantics formal method formal method abstract interpretation differ way abstract semantics obtained case abstract semantics must chosen computer representable modelchecking abstract semantics provided manually user form finitary model program execution example finite automaton case model computed automatically method relevant static analysis deductive method abstract semantics specified verification condition must provided user form inductive property true program step loop invariant satisfying verification condition inductive property must found manually user theorem prover sometimes need assistance prove indeed inductive help user discovery task inductive property computed automatically technique relevant static analysis static analysis abstract semantics computed automatically thanks predefined approximation possibly manually parameterizable user case abstract semantics sound section remain sufficiently precise avoid false alarm section remaining simple possible avoid combinatorial explosion phenomenon section erroneous abstraction formal method abstract semantics must chosen superset concrete semantics since otherwise reasoning abstract might correct concrete x say abstraction sound correct abstract semantics cover possible case concrete semantics formal method required use sound abstraction potential error signaled definitely impossible contrary testingdebugging formal method provide full coverage example erroneous abstraction yet method presented formal explore possible trajectory prefix bounded modelchecking may terminate refinement modelchecking therefore considered incorrect since error forgotten x false alarm abstract semantics formal method rely correctsound superset concrete semantics simple least simple enough representable machine absence alarm yield corectness proof however consequence overapproximation possible execution inexisting execution considered erroneous lead false alarm also called false positive false alarm corresponds case abstract semantics intersects forbidden zone concrete semantics intersect forbidden zone potential error signaled never occur reality x incompleteness formal method automatic formal method incomplete exists infinity program potential error execution signaled even definitely impossible reality modelchecking alarm model may correspond inevitable error modelized deductive method false alarm may due impossibility prove automatically user provided invariant indeed inductive static analysis false alarm due lack precision analysis false alarm inevitable question formal method try solve undecidable il always possible find program without runtime error abstract semantics imprecise prove absence error fully automatically without human intervention imprecision problem often solved choosing refined abstract semantics precise often complex result larger computation cost excluded miracle summary testingdebugging subset possible program execution considered error forgotten abstract interpretationbased formal method superset possible program execution considered potential imprecision one invent error exist reality called false alarm hence one would like correct formal method without erroneous abstraction absence coverage complete without false alarm due overcoverage abstraction exists mathematically impossible compute undecidability amount say impossible execute program possible execution environment finite time finite memory invariant invariant property hold trajectory example first invariant would state reachable course computation trajectory already approximation since leaf possibility jump one trajectory another even go backwards second invariant le precise would trajectory green zone le precise approximation leaf possibility reach point trajectory x second invariant imples third one even le precise stating trajectory outside forbidden red zone x program abstract invariant program invariant program property hold program execution astrée static analyzer computes automatically abstract semantics consists local abstract invariant attached program point program block stating property part program variable visible program point withing block local invariant hold involved variable whenever control reach program point stay within block abstract domain abstract domain astrée static analyzer computer representation given category invariant operation involved computation abstract invariant astrée us great number abstract domain combined obtain complex abstract invariant term abstract make reference fact computed invariant correct approximation program concrete semantics classical abstract domain interval approximate ordered set value minimum maximum applied example interval abstraction yield following invariant x imprecise prove specification precise astrée incorporates abstract domain expressive enough take account property command program controlling complex discrete dynamical system abstract interrpetation topcis reference abstract interrpetation course also available online bibliography p cousot semantic foundation program analysis s muchnick nd jones editor program flow analysis theory application chapter page prenticehall p cousot abstract interpretation based formal method future challenge invited paper r wilhelm editor informatics year back year ahead volume lncs page springer p cousot interprétation abstraite tsi jan p cousot partial completeness abstract fixpoint checking invited paper choueiry walsh editor proc int symp sara horseshoe bay tx u lnai page springer jul p cousot constructive design hierarchy semantics transition system abstract interpretation theoret comput sci p cousot r cousot abstract interpretation unified lattice model static analysis program construction approximation fixpoints popl page los angeles ca acm press p cousot r cousot systematic design program analysis framework popl page san antonio tx acm press p cousot r cousot comparing galois connection wideningnarrowing approach abstract interpretation invited paper bruynooghe wirsing editor proc int symp plilp leuven aug lncs page springer p cousot r cousot temporal abstract interpretation popl page boston jan acm press online course abstract interpretation p cousot mit course abstract interpretation http note one must also note possibility false negative corresponding property true model false concrete semantics modelized system often case liveness property
327,Lobsters,formalmethods,CSE-Formal methods,The Astrée Static Analyzer,http://www.astree.ens.fr/,astrée static analyzer,static analyzer participant former participant ré e laboratoire dinformatique école normale supérieure centre national de la recherche scientifique école normale supérieure inria objective rte error commonly found program usually result unpleasant error message termination application sometimes system crash industrial application maiden flight wednesday april exploitation license available absint angewandte informatik wwwabsintdeastree theoretical background la vérification de programme par interprétation abstraite program runtime property proved isoiec isoiec three simple example hard analyze large booleans floating point computation digital filter sound automatic efficient domainaware parametric modular extensible precise ocaml ocaml presentation topical day abstract interpretation ifip world computer congress presentation astrenet formal aspect source code analysis manipulation bcsfacs presentation annual asian computing science conference national center science presentation first ieee ifip international symposium theoretical aspect software engineering tase tutorial presentation embedded system week présentation et démonstration xiv rencontres inria industrie presentation presentation school computer communication science seminar école polytechnique fédérale de lausanne epfl presentation présentation séminaire du lina laboratoire dinformatique de nantes atlantique presentation computer science department stony brook university presentation center computational system biology cosbi presentation colloquium patavina dipartimento di matematica pura ed applicata università degli studi di padova presentation dagstuhl seminar scalable program analysis schloss dagstuhl presentation max planck institute software system presentation presentation seoul national university computer science engineering distinguished lecture series presentation computer science colloquium computer science new york university presentation presentation tenth international conference verification model checking abstract interpretation presentation doctorate program puma program model analysis graduiertenkolleg programm und modellanalyse fakultät für informatik technische universität münchen fakultät für informatik ludwigmaximiliansuniversität münchen flyer introductory bibliographic reference abstract interpretation interprétation abstraite abstract interpretation based formal method future challenge lecture note computer science basic concept abstract interpretation building information society abstract interpretation foundation static determination dynamic property program abstract interpretation unified lattice model static analysis program construction approximation fixpoints static determination dynamic property recursive procedure systematic design program analysis framework abstract interpretation framework comparing galois connection wideningnarrowing approach abstract interpretation calculational design generic abstract interpreter bibliographic reference design implementation specialpurpose static program analyzer safetycritical realtime embedded software invited chapter springer static analyzer large safetycritical software federated computing research conference acm static analysis digital filter springer verification absence runtime error building information society relational abstract domain detection floatingpoint runtime error springer weakly relational numerical abstract domain arithmeticgeometric progression abstract domain vmcai verification model checking abstract interpretation springer analyser esop european symposium programming springer trace partitioning abstract interpretation based static analyzer esop european symposium programming springer understanding origin alarm international static analysis symposium springer parallel implementation astree static analyzer aplas third asian symposium programming language system springer abstract dependence alarm diagnosis aplas third asian symposium programming language system springer symbolic method enhance precision numerical abstract domain vmcai seventh international conference verification model checking abstract interpretation springer fieldsensitive value analysis embedded c program union type pointer arithmetic proceeding acm sigplansigbed conference language compiler tool embedded system lctes lanalyseur statique grand colloque tic combination abstraction static analyzer annual asian computing science conference lncs variety static analyzer comparison theoretical aspect software engineering proving absence runtime error safetycritical avionics code emsoft embedded system week scale formal method system design bibliographic reference industrial use research industry international static analysis symposium sa kongens lyngby denmark springer experimental assessment safetycritical avionics software computer safety reliability security safecomp springer space software validation using abstract interpretation data system aerospace dasia istanbul turkey eurospace news press le journal du cnrs le cnrs et laéronautique de demain le monde lavion qui bat de ailes fédéré de nombreux chercheurs software ohne fehl und tadel karlhorst klotz le journal du cnrs le cnrs à la fête le journal du cnrs sécurité toujours plus le journal du cnrs le cnrs avec support agence nationale de la recherche anr picture absint,astrée static analyzer participant former participant astrée stand analyseur statique de logiciels tempsréel embarqués realtime embedded software static analyzer development astrée started scratch nov laboratoire dinformatique école normale supérieure lien initially supported astrée project centre national de la recherche scientifique école normale supérieure since september inria objective astrée astrée static program analyzer aiming proving absence run time error rte program written c programming language personal computer error commonly found program usually result unpleasant error message termination application sometimes system crash embedded application error may graver consequence astrée analyzes structured c program complex memory usage without dynamic memory allocation recursion encompasses many embedded program found earth transportation nuclear energy medical instrumentation aeronautic aerospace application particular synchronous controlcommand electric flight control space vessel maneuver industrial application astrée main application astrée appeared two year starting project since astrée achieved following unprecedented result static analysis synchronous timetriggered realtime safety critical embedded software written automatically generated c programming language nov astrée able prove completely automatically absence rte primary flight control software airbus flybywire system program line c analyzed ghz pc using mb memory amd using mb memory jan astrée extended analyze electric flight control code development test series operational application airbus france end time maiden flight wednesday april exploitation license astrée starting dec astrée available absint angewandte informatik wwwabsintdeastree theoretical background astrée design astrée based abstract interpretation formal theory discrete approximation applied semantics c programming language informal presentation abstract interpretation nutshell aim providing short intuitive introduction theory video introduces program verification abstract interpretation french la vérification de programme par interprétation abstraite advanced introductory reference briefly program verification including finding possible runtime error undecidable mechanical method always answer truthfully whether program may exhibit runtime property including absence runtime error deep mathematical result dating work church turing faced mathematical impossibility choice design abstract interpretationbased static analyzer automatically signal possible error astrée always sound occasionally signal error really happen false alarm spurious execution eg hypothesis execution environment taken account course goal precise minimize number false alarm analysis must also costeffective eg small fraction cost running test program context safetycritical reactive software goal zero false alarm first attained proving absence rte primary flight control software airbus astrée based theory abstract interpretation proceeds effectively computing overapproximation trace semantic property analyzed program proving abstract property imply absence runtime error program analysis iterative structural induction program syntax interprocedural contextsensitive procedure extremely precise memory combine several abstraction trace semantics weak form reduced product basic generalpurpose abstraction either nonrelationals like interval weakly relational like octagon uniform interface astrée precision come clever handling disjuctions domainspecific abstract domain controlcommand abstraction infinitary requires convergence acceleration wideningnarrowing soundness abstraction based galois connection concretizationbased absence best abstraction program runtime property proved astrée astrée aim proving c programming language correctly used runtime error rte execution environment cover use c defined international norm governing c programming language isoiec undefined behavior division zero bound array indexing use c violating implementationspecific behavior aspect defined isoiec specific implementation program given machine size integer arithmetic overflow potentially harmful incorrect use c violating optional userdefined programming guideline modular arithmetic integer even though might hardware choice also violation optional userprovided assertion similar assert diagnostics example prove userdefined runtime property astrée parameterized adaptable enduser verification need three simple example hard analyze large example show typical difficulty statically analyzing controlcommand program course real difficulty scale booleans controlcommand program particular synchronous one manipulate thousand boolean variable analyzing program runtime property hold boolean variable either true false rapidly lead combinatorial explosion number case considered prohibitive time memory analysis cost example analysis following program astrée booleanc typedef enum false true boolean boolean b void main unsigned int x b x b x yield warning thanks relationskip automatically determined b x thus proving absence runtime error integer dividebyzero never happen executing program floating point computation command program controlling complex physical system derived mathematical model designed real number whereas computer program perform floating point computation two computation model completely different yield surprising result floaterrorc int main float x z r x x z x r z printf fn r gcc floaterrorc aout doubleerrorc int main double x float z r x ldexp ldexp x x z x r z printf fn r gcc doubleerrorc aout could thought print respectively based reasoning xa xa erroneous rounding astrée handle floating point computation precisely safely example astrée prof following program free runtime error loop never terminates warning running machine float bit floatc void main float x z unsigned x nan x x z x yz else return digital filter controlcommand program perform lot digital filtering shown following example filterc typedef enum false true boolean boolean init float p x void filter static float e init x p x e x else p x e e e e e x p void main x x init true x x filter init false absence overflow precisely p found astrée obvious particular bit floating point computation situation even inextricable presence boolean control cascade filter etc astrée sound automatic efficient domainaware parametric modular extensible precise static analyzer consider possible runtime error others sort probable one aim static testing find frequent bug rather verification prove absence runtime error contrast astrée sound astrée always exhaustively consider possible runtime error never omit signal potential runtime error minimal requirement safety critical software static analyzer eg using theorem provers require program decorated inductive invariant contrast astrée fully automatic never need rely user help static analyzer high computational cost typically hour computation per line code others may never terminate terminate memory contrast astrée shown efficient scale real size program found industrial practice since astrée run multicore parallel distributed machine generalpurpose static analyzer aim analyzing program written given programming language rely programming languagerelated property point potential runtime error specialized static analyzer put additional restriction considered program take specific program structure account contrast astrée domainaware know fact application domain indispensable make sophisticated proof example astrée take logic functional property controlcommand theory account implemented controlcommand program moreover astrée parametric mean rate cost analysis precision analysis fully adapted need astrée endusers thanks parameter directive tuning abstraction astrée modular made piece called abstract domain assembled parameterized build application specific analyzer fully adapted domain application enduser need written ocaml modularization astrée made easy thanks ocaml module functors finally astrée extensible case false alarm easily extended introducing new abstract domain enhancing precision analysis consequence generality may low precision typical rate false alarm ie spurious warning potential error never occur runtime c basic operation program specialized static analyzer achieve better precision eg le false alarm even high selectivity rate false alarm operation potential runtime error leaf number doubtful case may unacceptable large safetycritical missioncritical software example selectivity rate yield false alarm program operation contrast astrée modular parametric domainaware made precise shown able produce false alarm fully automated correctness proof theoretical work done locating origin alarm rapid overview astrée proposed presentation astrée presentation astrée static analyzer tuesday august topical day abstract interpretation ifip world computer congress toulouse france presentation astrée january industrial day automatic tool program verification satellite event paris january presentation astrée march thirteenth astrenet workshop formal aspect source code analysis manipulation bcsfacs london england presentation astrée december annual asian computing science conference national center science tokyo japan presentation astrée june first ieee ifip international symposium theoretical aspect software engineering tase tutorial shanghai china presentation astrée october embedded system week sept salzburg austria présentation et démonstration dastrée october xives rencontres inria industrie inria rocquencourt france presentation astrée october espass workshop berlin germany presentation astrée december school computer communication science seminar école polytechnique fédérale de lausanne epfl switzerland presentation astrée december isola workshop leveraging application formal method verification validation special workshop theme formal method avionics space transport poitier france présentation dastrée december séminaire du lina laboratoire dinformatique de nantes atlantique nantes france presentation astrée january seminar computer science department stony brook university stony brook new york usa presentation astrée february seminar center computational system biology cosbi microsoft research university trento trento italy presentation astrée february colloquium patavina dipartimento di matematica pura ed applicata università degli studi di padova padova italy presentation astrée april dagstuhl seminar scalable program analysis schloss dagstuhl germany presentation astrée august max planck institute software system saarbrücken germany presentation astrée september final review esa iti project space software validation using abstract interpretation ssvai noordwijk netherlands presentation astrée october seoul national university computer science engineering distinguished lecture series seoul korea presentation astrée november computer science colloquium computer science new york university new york ny usa presentation astrée december airbus workshop formal verification tool strategy toulouse france presentation astrée january tenth international conference verification model checking abstract interpretation savannah ga usa presentation astrée may doctorate program puma program model analysis graduiertenkolleg programm und modellanalyse fakultät für informatik technische universität münchen fakultät für informatik ludwigmaximiliansuniversität münchen germany astrée flyer introductory bibliographic reference abstract interpretation patrick cousot interprétation abstraite technique et science informatique vol nb janvier hermès paris france pp patrick cousot abstract interpretation based formal method future challenge informatics year back year ahead r wilhelm ed lecture note computer science pp patrick cousot radhia cousot basic concept abstract interpretation building information society r jacquard ed kluwer academic publisher pp abstract interpretation foundation astrée patrick cousot radhia cousot static determination dynamic property program proceeding second international symposium programming b robinet ed paris france page april dunod paris patrick cousot radhia cousot abstract interpretation unified lattice model static analysis program construction approximation fixpoints conference record sixth annual acm sigplansigact symposium principle programming language page los angeles california acm press new york patrick cousot radhia cousot static determination dynamic property recursive procedure ifip conference formal description programming concept ej neuhold ed page standrews nb canada northholland publishing company patrick cousot radhia cousot systematic design program analysis framework conference record sixth annual acm sigplansigact symposium principle programming language page san antonio texas acm press new york patrick cousot radhia cousot abstract interpretation framework journal logic computation august patrick cousot radhia cousot comparing galois connection wideningnarrowing approach abstract interpretation programming language implementation logic programming proceeding fourth international symposium leuven belgium august volume lecture note computer science page springerverlag berlin germany patrick cousot calculational design generic abstract interpreter broy steinbrüggen r ed calculational system design nato asi series f amsterdam io press bibliographic reference astrée bruno blanchet patrick cousot radhia cousot jérôme feret laurent mauborgne antoine miné david monniaux xavier rival design implementation specialpurpose static program analyzer safetycritical realtime embedded software invited chapter essence computation complexity analysis transformation essay dedicated neil jones mogensen da schmidt ih sudborough editor volume lecture note computer science pp springer bruno blanchet patrick cousot radhia cousot jérôme feret laurent mauborgne antoine miné david monniaux xavier rival static analyzer large safetycritical software pldi acm sigplan sigsoft conference programming language design implementation federated computing research conference june san diego california usa pp acm jérôme feret static analysis digital filter esop european symposium programming schmidt editor mar barcelona e volume lecture note computer science pp springer laurent mauborgne astrée verification absence runtime error building information society r jacquard ed kluwer academic publisher pp antoine miné relational abstract domain detection floatingpoint runtime error esop european symposium programming schmidt editor mar apr barcelona volume lecture note computer science pp springer antoine miné weakly relational numerical abstract domain thèse de lécole polytechnique december jérôme feret arithmeticgeometric progression abstract domain vmcai verification model checking abstract interpretation r cousot editor volume lecture note computer science pp january paris springer patrick cousot radhia cousot jérôme feret laurent mauborgne antoine miné david monniaux xavier rival astrée analyser esop european symposium programming sagiv editor volume lecture note computer science pp april edinburgh springer laurent mauborgne xavier rival trace partitioning abstract interpretation based static analyzer esop european symposium programming sagiv editor volume lecture note computer science pp april edinburgh springer xavier rival understanding origin alarm astrée international static analysis symposium chris hankin igor siveroni editor volume lecture note computer science pp september london uk springer david monniaux parallel implementation astree static analyzer aplas third asian symposium programming language system kwangkeun yi editor volume lecture note computer science pp november tsukuba japan springer xavier rival abstract dependence alarm diagnosis aplas third asian symposium programming language system kwangkeun yi editor volume lecture note computer science pp november tsukuba japan springer antoine miné symbolic method enhance precision numerical abstract domain vmcai seventh international conference verification model checking abstract interpretation e allen emerson kedar namjoshi editor volume lecture note computer science pp january charleston south carolina usa springer antoine miné fieldsensitive value analysis embedded c program union type pointer arithmetic proceeding acm sigplansigbed conference language compiler tool embedded system lctes june ottawa ontario canada acm press pp patrick cousot lanalyseur statique astrée grand colloque tic session rntl systèmes embarqués centre de congrès lyon novembre patrick cousot radhia cousot jérôme feret laurent mauborgne antoine miné david monniaux xavier rival combination abstraction astrée static analyzer annual asian computing science conference national center science tokyo japan december lncs springer berlin pp patrick cousot radhia cousot jérôme feret laurent mauborgne antoine miné david monniaux xavier rival variety static analyzer comparison astrée invited paper first ieee ifip international symposium theoretical aspect software engineering shanghai china june pp patrick cousot proving absence runtime error safetycritical avionics code emsoft embedded system week salzburg austria september pp acm press patrick cousot radhia cousot jérôme feret laurent mauborgne antoine miné xavier rival astrée scale formal method system design springer appear bibliographic reference industrial use astrée david delmas jean souyris astrée research industry proc international static analysis symposium sa g filé h riisnielson ed kongens lyngby denmark august lncs pp springer berlin jean souyris david delmas experimental assessment astrée safetycritical avionics software proc int conf computer safety reliability security safecomp francesca saglietti norbert oster ed nuremberg germany september volume lecture note computer science pp springer berlin bouissou e conquet p cousot r cousot j feret k ghorbal e goubault lesens l mauborgne miné putot x rival turin space software validation using abstract interpretation proc system aerospace dasia istanbul turkey may eurospace paris news astrée press le journal du cnrs nº mar page le cnrs et laéronautique de demain le monde nº avril page lavion qui bat de ailes fédéré de nombreux chercheurs software ohne fehl und tadel karlhorst klotz da mit magazin für innovation technology june le journal du cnrs nº juin page le cnrs à la fête le journal du cnrs nº juin page sécurité toujours plus le journal du cnrs nº décembre page le cnrs avec support astrée development astrée analyzer supported part french exploratory project astrée réseau national de recherche et dinnovation en technology logicielles rntl agence nationale de la recherche anr final review astrée project july picture astrée new york city jan astrée poster oct presentation absint spam email containing astree uppercase subject automatically filtered
328,Lobsters,formalmethods,CSE-Formal methods,"LVC: Linear, Verified Compiler",https://www.ps.uni-saarland.de/~sdschn/LVC.html,lvc linear verified compiler,ssa functional programming appel kelsey sparse conditional constant propagation wegman zadeck ssabased register allocation spilling rosemann schneider hack kelsey hudak provide semantic framework ssa program available github prof sebastian hack prof gert smolka prof david pichardie coq development thesis abstract,design implementation linear verified compiler lvc phd project master thesis developed termbased approach static single assignment leverage ssa functional programming appel kelsey lvc verified compiler us approach realize ssabased optimization particular sparse conditional constant propagation wegman zadeck ssabased register allocation including spilling rosemann schneider hack lvc realizes compilation program transformation lowlevel fragment intermediate language kelsey hudak lvc intermediate language il support approach providing two semantic interpretation functional one variable binder imperative one variable imperative location two semantic interpretation provide semantic framework ssa program particular claim il make easier rename apart imperative program usual dominancebased approach development lvc available github extended intermediate language formal development mutually recursive function definition realistic timeconsuming mistake coqdoc documentation available verified compiler linear functionimperative intermediate language reviewersadvisors prof sebastian hack prof gert smolka third reviewer prof david pichardie submission april defense date november download coq development thesis abstract thesis describes design verified compiler lvc lvc main novelty way firstorder termbased intermediate language il realizes advantage static single assignment ssa verified compilation il termbased language based controlflow graph cfg defined term inductively defined syntax lexically scoped mutually recursive function definition il replaces usual dominancebased ssa definition found unverified verified compiler novel notion coherence main research question thesis study whether il coherence offer faithful implementation ssa design influence correctness invariant proof verified compiler lvc study question verify dead code elimination several ssabased value optimization including sparse conditional constant propagation ssabased register allocation approach including spilling case study il coherence provides usual advantage ssa improves modularity proof furthermore propose novel ssa construction algorithm based coherence leverage term structure il obtain inductive proof method simulation proof lvc implemented verified line code using proof assistant coq underline practicability approach integrate lvc compcert obtain executable compiler generates powerpc assembly code
329,Lobsters,formalmethods,CSE-Formal methods,Verdi: Formally Verifying Distributed Systems,http://verdi.uwplse.org/,verdi formally verifying distributed system,news raft consensus protocol paper cpp slide verdi talk pldi video abstract source verdi framework verified raft implementation publication verdi framework implementing verifying distributed system planning change formal verification raft consensus protocol blog post verdi network semantics verifying distributed system build simple system verdi verdi team via email university washington jamesâ râ wilcox dougâ woos pavelâ panchekha zacharyâ tatlock xiâ wang michaelâ dâ ernst thomasâ anderson,distributed system hard get right large part must tolerate fault gracefully machine may crash network may drop reorder duplicate packet verdi framework university washington implement formally verify distributed system verdi support several different fault model ranging idealistic realistic verdi verified system transformer vsts encapsulate common fault tolerance technique developer verify application idealized fault model apply vst obtain application guaranteed analogous property adversarial environment verdi developed using coq proof assistant system extracted ocaml execution verdi system including faulttolerant keyvalue store achieve comparable performance unverified counterpart news recently finished verifying implementation raft consensus protocol verdi paper describing effort appear cpp popular demand slide verdi talk pldi use reading group love hear comment question check video abstract source verdi framework verified raft implementation opensource please feel free submit comment issue pull request either repository publication james r wilcox doug woos pavel panchekha zachary tatlock xi wang michael ernst thomas anderson verdi framework implementing verifying distributed system pldi portland june doug woos james r wilcox steve anton zachary tatlock michael ernst thomas anderson planning change formal verification raft consensus protocol cpp st petersburg fl january blog post verdi network semantics verifying distributed system first post series verdi post get foot wet defining formal model distributed system execute network build simple system verdi longawaited post show implement verify simple distributed system verdi verdi team verdi developer reached via email feel free email using verdi thinking using verdi question verdi developed university washington programming language software engineering group jamesâ râ wilcox dougâ woos pavelâ panchekha zacharyâ tatlock xiâ wang michaelâ dâ ernst thomasâ anderson
330,Lobsters,formalmethods,CSE-Formal methods,Ten Diverse Formal Models for a CBTC Automatic Train Supervision System,https://arxiv.org/pdf/1803.10324.pdf,ten diverse formal model cbtc automatic train supervision system,,obj stream
331,Lobsters,formalmethods,CSE-Formal methods,Utility Ghost: Gamified redistricting with partisan symmetry,https://arxiv.org/pdf/1812.07377.pdf,utility ghost gamified redistricting partisan symmetry,,obj filter flatedecode length stream gȏ jr j r h
332,Lobsters,formalmethods,CSE-Formal methods,"Computer Scientists Close In on Perfect, Hack-Proof Code",https://www.wired.com/2016/09/computer-scientists-close-perfect-hack-proof-code/,computer scientist close perfect hackproof code,little bird quantum magazine original story simon foundation mathematical proof kathleen fisher bryan parno andrew appel dream perfect program edsger dijkstra blockbased security deepspec coq isabelle jeannette wing verifying internet heartbleed took control original story quantum magazine simon foundation,summer team hacker attempted take control unmanned military helicopter known little bird helicopter similar piloted version longfavored u special operation mission stationed boeing facility arizona hacker head start time began operation already access one part drone computer system needed hack little bird onboard flightcontrol computer drone theirsquanta magazineaboutoriginal story reprinted permission quantum magazine editorially independent division simon foundation whose mission enhance public understanding science covering research development trend mathematics physical life science project started red team hacker could taken helicopter almost easily could break home wifi intervening month engineer defense advanced research project agency implemented new kind security software system commandeered key part little bird computer system unhackable existing technology code trustworthy mathematical proof even though red team given six week drone access computing network genuine bad actor could ever expect attain failed crack little bird defense able break disrupt operation way said kathleen fisher professor computer science tuft university founding program manager highassurance cyber military system hacms project result made darpa stand say oh goodness actually use technology system care technology repelled hacker style software programming known formal verification unlike computer code written informally evaluated based mainly whether work formally verified software read like mathematical proof statement follows logically preceding one entire program tested certainty mathematician prove theorem writing mathematical formula describes program behavior using sort proof checker going check correctness statement said bryan parno research formal verification security microsoft researchthe aspiration create formally verified software existed nearly long field computer science long time seemed hopelessly reach advance past decade socalled formal method inched approach closer mainstream practice today formal software verification explored wellfunded academic collaboration u military technology company microsoft amazonthe interest occurs increasing number vital social task transacted online previously computer isolated home office programming bug merely inconvenient small coding error open massive security vulnerability networked machine allow anyone knowhow free rein inside computer system back century program bug bad program might crash said andrew appel professor computer science princeton university leader program verification field century bug could create avenue hacker take control program steal data gone bug bad tolerable vulnerability much worse saidthe dream perfect programsin october edsger dijkstra came idea creating errorfree code staying hotel conference found seized middle night idea making programming mathematical explained later reflection brain burning left bed wrote hour material served starting point seminal book discipline programming together work tony hoare like dijkstra received turing award computer science highest honor established vision incorporating proof correctness computer program writtenkathleen fisher computer scientist tuft university lead highassurance cyber military system hacms project courtesy kelvin matufts universityit vision computer science followed largely many year afterward seemed specify program function using rule formal logica formal specification way defining exactly computer program formal verification way proving beyond doubt program code perfectly achieves specification see work imagine writing computer program robot car drive grocery store operational level define move car disposal achieve turn left right brake accelerate turn either end trip program would compilation basic operation arranged appropriate order end arrived grocery store airportthe traditional simple way see program work test coder submit program wide range input unit test ensure behave designed program algorithm routed robot car example might test many different set point testing approach produce software work correctly time really need application unit testing guarantee software always work correctly way run program every conceivable input even driving algorithm work every destination test always possibility malfunction rare corner case open security gap actual program malfunction could simple buffer overflow error program copy little data overwrites small piece computer memory seemingly innocuous error hard eliminate provides opening hacker attack weak hinge becomes gateway castle one flaw anywhere software security vulnerability hard test every possible path every possible input parno saidactual specification subtler trip grocery store programmer may want write program notarizes timestamps document order received useful tool say patent office case specification would need explain counter always increase document received later always higher number document received earlier program never leak key us sign documentsthis easy enough state plain english translating specification formal language computer apply much account main challenge writing piece software way coming formal machinereadable specification goal conceptually tricky parno said easy say high level leak password turning mathematical definition take thinking take another example consider program sorting list number programmer trying formalize specification sort program might come something like every item j list ensure element j formal every element list le equal element follows bug programmer assumes output permutation input given list expects program return satisfy definition yet list also satisfies definition since sorted list sorted list probably hoping parno saidin word hard translate idea program formal specification forecloses every possible incorrect interpretation want program example something simple sort program imagine taking something much abstract sorting protecting password mean mathematically defining may involve writing mathematical description mean keep secret mean encryption algorithm secure parno said question many others looked made progress quite subtle get right blockbased securitybetween line take write specification extra annotation needed help programming software reason code program includes formal verification information five time long traditional program written achieve endthis burden alleviated somewhat right language proofassistant program designed help software engineer construct bombproof code exist many part science technology mature enough make work around many part computer science field lost interest said appel lead principal investigator research group called deepspec developing formally verified computer systemseven tool improved another hurdle stood way program verification one sure whether even necessary formal method enthusiast talked small coding error manifesting catastrophic bug everyone else looked around saw computer program pretty much worked fine sure crashed sometimes losing little unsaved work restart occasionally seemed like small price pay tediously spell every little piece program language formal logical system time even program verification earliest champion began doubt usefulness hoare whose hoare logic one first formal system reasoning correctness computer program acknowledged maybe specification laborintensive solution problem exist wrote ten year ago researcher formal method mistaken among predicted programming world would embrace gratitude every assistance promised turned world suffer significantly kind problem research originally intended solvethen came internet coding error air travel spread infectious disease every computer connected every one inconvenient tolerable software bug lead cascade security failure thing quite fully understand appel said certain kind software outwardfacing hacker internet bug software might well security vulnerability jeannette wing computer scientist microsoft research developing formally verified protocol internet courtesy jeannette wingby time researcher began understand critical threat computer security posed internet program verification ready comeback start researcher made big advance technology undergirds formal method improvement proofassistant program like coq isabelle support formal method development new logical system called dependenttype theory provide framework computer reason code improvement called operational semantics essence language right word express program supposed start englishlanguage specification inherently starting ambiguous specification said jeannette wing corporate vice president microsoft research natural language inherently ambiguous formal specification writing precise specification based mathematics explain want program addition researcher formal method also moderated goal early envisioned creating entire fully verified computer system circuit way program today formal method researcher focus instead verifying smaller especially vulnerable critical piece system like operating system cryptographic protocol claiming going prove entire system correct percent reliable every bit circuit level wing said ridiculous make claim much clear hacms project illustrates possible generate big security guarantee specifying one small part computer system project first goal create unhackable recreational quadcopter offtheshelf software ran quadcopter monolithic meaning attacker broke one piece access next two year hacms team set dividing code quadcopter missioncontrol computer partitionsthe team also rewrote software architecture using fisher hacms founding project manager call highassurance building block allow programmer prove fidelity code one verified building block come proof guaranteeing someone access inside one partition able escalate privilege get inside partitionslater hacms programmer installed partitioned software little bird test red team hacker provided red team access inside partition controlled aspect drone helicopter like camera essential function hacker mathematically guaranteed get stuck proved machinechecked way red team would able break partition surprising fisher said consistent theorem good check year since little bird test darpa applying tool technique hacms project area military technology like satellite selfdriving convoy truck new initiative consistent way formal verification spread last decade successful project emboldens next people really excuse anymore hard fisher saidverifying internetsecurity reliability two main goal motivate formal method passing day need improvement apparent small coding error would caught formal specification opened way heartbleed bug threatened bring internet year later pair whitehat hacker confirmed perhaps biggest fear internetconnected car successfully took control someone else jeep cherokeeas stake rise researcher formal method pushing ambitious place return spirit animated early verification effort deepspec collaboration led appel also worked hacms attempting build fully verified endtoend system like web server successful effort funded million grant national science foundation would stitch together many smallerscale verification success last decade researcher built number provably secure component core kernel operating system done challenge deepspec focusing connect component together specification interface appel saidover microsoft research software engineer two ambitious formal verification project underway first named everest create verified version http protocol secures web browser wing refers achilles heel internet second create verified specification complex cyberphysical system drone challenge considerable typical software follows discrete unambiguous step program tell drone move use machine learning make probabilistic decision based continuous stream environmental data far obvious reason kind uncertainty pin formal specification formal method advanced lot even last decade wing oversees work optimistic formal method researcher going figure outoriginal story reprinted permission quantum magazine editorially independent publication simon foundation whose mission enhance public understanding science covering research development trend mathematics physical life science
333,Lobsters,formalmethods,CSE-Formal methods,Provably Correct Runtime Enforcement of Non-Interference Properties (2006),http://www.seclab.cs.sunysb.edu/seclab/pubs/icics06.pdf,provably correct runtime enforcement noninterference property,,obj stream x b
334,Lobsters,formalmethods,CSE-Formal methods,The Kubernetes Scheduler,https://medium.com/@dominik.tornow/the-kubernetes-scheduler-cd429abac02f,kubernetes scheduler,tla scheduling partial noninjective optimization problem kubernetes scheduler control loop scheduling step preemption step pod disruption budget feasibility schedulability lifecycle phase node condition resource requirement resource availability node selector node taint pod toleration required affinity node affinity pod affinity pod antiaffinity viability preferred affinity case study kubernetes binding object post,andrew chen dominik tornowkubernetes container orchestration engine designed host containerized application set node commonly referred cluster using system modeling approach series aim advance understanding kubernetes underlying conceptsthe kubernetes scheduler core component kubernetes user controller creates pod kubernetes scheduler monitoring object store unassigned pod assign pod node kubelet monitoring object store assigned pod execute podthis blog post provides concise detailed model kubernetes scheduler model supported partial specification tlafigure processing podschedulingthe task kubernetes scheduler choose placement placement partial noninjective assignment set pod set nodesfigure example schedulescheduling optimization problem first scheduler determines set feasible placement set placement meet set given constraint scheduler determines set viable placement set feasible placement highest scorefigure possible feasible viable schedulesthe kubernetes scheduler multistep scheduler ensuring local optimum instead singlestep scheduler ensuring global optimumfigure multistep v single stepthe kubernetes schedulerfigure kubernetes pod object kubernetes node objectfigure depicts kubernetes object attribute interest kubernetes scheduler kubernetes representsa pod kubernetes pod object node kubernetes node object andthe assignment pod node pod specnodenamea pod object bound node object pod specnodename equal node namethe task kubernetes scheduler formally described kubernetes scheduler pod p selects node n update pod specnodename boundto p n truethe control loopthe kubernetes scheduler monitor kubernetes object store chooses unbound pod highest priority perform either scheduling step preemption stepscheduling stepfor given pod scheduling step enabled exists least one node node feasible host podif scheduling step enabled scheduler bind pod feasible node binding achieve highest possible viabilityif scheduling step enabled scheduler attempt perform preemption steppreemption stepfor given pod preemption step enabled exists least one node node feasible host pod subset pod lower priority bound node deletedif preemption step enabled scheduler trigger deletion subset pod lower priority bound one node preemption step inflict lowest possible casualty inflicted casualty assessed term pod disruption budget pdb violation beyond scope post note scheduler guarantee pod triggered preemption step bound node subsequent scheduling feasibilityfor pod kubernetes scheduler identifies set feasible node set node satisfy constraint podconceptually kubernetes scheduler defines set filter function given pod node determine node satisfies constraint pod filter function must yield true node host podthe following subsection detail available filter schedulability lifecycle phasethis filter function deems node feasible based node schedulability lifecycle phase node condition accounted via taint toleration see figure schedulability lifecycle resource requirement resource availabilitythis filter function deems node feasible based pod resource requirement node resource availabilitiesfigure resource requirement resource node selectorthis filter function deems node feasible based pod node selector value node label valuesfigure node node taint pod tolerationsthis filter function deems node feasible based pod taint key value pair node toleration key value pairsfigure node taint pod tolerationsa pod may bound node node taint match pod toleration pod must bound node node taint match pod required affinitythis filter function deems node feasible based pod required node affinity term pod affinity term pod anti affinity termsfigure required affinitynode affinitya pod must assigned node node label match pod node affinity requirement addition pod must assigned node node label match pod node affinity requirementspod affinitya pod must assigned node least one pod node matching topologykey match pod pod affinity requirementspod antiaffinitya pod must assigned node pod node matching topologykey match pod pod antiaffinity viabilityfor pod kubernetes scheduler identifies set feasible node set node satisfy constraint pod kubernetes scheduler identifies set feasible node highest viabilityconceptually kubernetes scheduler defines set rating function given pod node determine viability pod node pair rating summedthe following subsection detail one available filter preferred affinitythis filter function rate node viability based pod preferred node affinity term pod affinity term pod anti affinity termsfigure preferred affinitythe rating sum thesum term weight matching node selector termsum term weight matching pod affinity termsum term weight matching pod anti affinity termcase studyfigure depicts case study involving two different type node two different type node without gpu node gpu resourcesthe objective case study ensure pod require gpus assigned node without gpuspods require gpus assigned node gpusfigure case study kubernetes binding objectsthe blog post state kubernetes scheduler bind pod node setting pod specnodename node name however scheduler set specnodename directly indirectlythe kubernetes scheduler permitted update pod spec therefore instead updating pod kubernetes scheduler creates kubernetes binding object creation binding object kubernetes api update pod specnodenameabout postthis blog post summary kubecon contributor summit unconference track hosted google sap detailing kubernetes scheduler
335,Lobsters,formalmethods,CSE-Formal methods,Proof-Driven Development (2015),https://arxiv.org/pdf/1512.02102.pdf,proofdriven development,,obj filter flatedecode length stream n ilhbh e gr
336,Lobsters,formalmethods,CSE-Formal methods,Loop Acceleration Technique to Speed Up Verification of Automatically-Generated Plans (2013),http://rpgoldman.goldman-tribe.org/papers/loop-acceleration-sttt-2013.pdf,loop acceleration technique speed verification automaticallygenerated plan,,obj length filter flatedecode stream w mm uah 輦 z pg v ow endstream endobj obj length filter flatedecode stream xڍ ӻ
337,Lobsters,formalmethods,CSE-Formal methods,Verifying Array Manipulating Programs by Tiling (2017),https://isoft.acm.org/winterschool17/presentation-decks/WSSE17-Day3-4-Venky-talks/tiling.pdf,verifying array manipulating program tiling,,obj length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream bc c endstream endobj obj type xobject subtype form formtype ptexfilename tcslogopdf ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r colorspace defaultrgb r r property r length filter flatedecode stream z ɩ sqp n g zre e otiul شw b x endstream endobj obj n alternate devicergb filter flatedecode length stream 䥟 e b
338,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Analog Circuit Parameters across Variation Utilizing SAT (2013),https://www.researchgate.net/profile/Forrest_Brewer/publication/236596088_Formal_Verification_of_Analog_Circuit_Parameters_across_Variation_Utilizing_SAT/links/0f3175307a3fe21e0e000000.pdf,formal verification analog circuit parameter across variation utilizing sat,,obj endobj obj filterflatedecodeid index info rlength rsize stream b ĕ
339,Lobsters,formalmethods,CSE-Formal methods,TLA+: 2 phase commit and beyond,http://muratbuffalo.blogspot.com/2018/12/2-phase-commit-and-beyond.html,tla phase commit beyond,twophase commit problem note modeling definition tm model rm model model checking twophase commit btm modeling model tla pdf corresponding pdf rms could also fail model checking updated tla model file available corresponding pdf flp impossibility fischer lynch paterson flp impossibility result threephase commit extension modeled tla pdf version wikipedia page threephase commit paxos making world better place paxos gray lamport show transaction commit paper,post model explore twophase commit protocol using tla twophase commit protocol practical used many distributed system today yet still brief enough model quickly learn lot modeling fact see example get illustrate fundamental impossibility result distributed system directly twophase commit problem transaction performed resource manager rms rms must agree whether transaction committed aborted transaction manager tm finalizes transaction commit abort decision transaction committed participating rm must prepared commit otherwise transaction must aborted note modeling perform modeling shared memory model rather message passing keep thing simple also ensures model checking fast add nonatomicity read neighbor update state action order capture interesting behavior would happen message passing implementation rm read tm state readupdate state read rm state tm read rm node state readupdate state definition line set initial rmstate rm working tm init cancommit predicate defined true iff rms prepared ready commit decision exists rm abort state canabort becomes truthified tm model tm modeling straightforward tm check commit abort update tmstate accordingly tm also fail making tmstate unavailable get exercised constant tmmayfail set true model checking start tla label determine granularity atomicity putting label denote corresponding statement executed nonatomically indeterminate time pass respect previous statement rm model rm model also simple since working prepared state nonterminal state rm nondeterministically chooses among enabled action terminal state reached working rm may transition aborted prepared state prepared rm wait hear commit abort decision tm act accordingly figure show state transition possible one rm note multiple rms going state transition pace without knowledge state another rm model checking twophase commit interested checking twophase commit consistent two rms one say committed another aborted predicate completed check protocol hang forever eventually rm reach terminal committed aborted state ready model check protocol initially set tmmayfailfalse run protocol three rms one tm reliable model checker take second tell u error consistency completed satisfied possible execution protocol different interleaving enabled rm action tm action set tmmayfailtrue restart model checker model checker quick give u counterexample trace rms execution stuck waiting hear back tm become unavailable see transition aborted transition aborted tm transition abort crash system stuck prepared state waiting forever learn decision tm crashed btm modeling order avoid downtime many transaction tm may commandeering add backup tm btm quickly take tm becomes unavailable btm us logic tm make decision simplicity assume btm fail model check btm process added get new error message btm rule commit original cancommit condition asserted rmstates prepared nt account condition rms already learned commit decision original tm btm take revise cancommit condition account success check model find consistency completed satisfied btm take finalizes transaction tm fails model tla initially btm second line cancommit commented pdf corresponding pdf rms could also fail assumed rms reliable relax see protocol behaves presence rm failure add unavailable state model crash order explore behavior model intermittent loss availability allow crashed rm recover back continue protocol reading state log rm state transition diagram newly added unavailable state transition marked red revised model rms also need strengthen canabort take account unavailable state tm rule abort rms aborted unavailable state omit condition rm crashed never recovers may make transaction lose progress course precaution taken ensure btm rule abort exists rm learned committed decision original tm model checking check model discover inconsistency problem happen let follow execution trace counterexample rms prepared state tm made commit decision seen decision moved label rc meaning ready change state committed keep mind gun fire last act unfortunately tm crash becomes unavailable state btm take read rmstates prepared unavailable prepared rule abort remember finally act commit decision saw original tm transition committed heed abort decision btm transition aborted consistency violated deciding committed aborted case btm made decision violated consistency hand made btm wait unavailable rms could waiting forever crashed node would violate progress condition updated tla model file available corresponding pdf flp impossibility happened hit fischer lynch paterson flp impossibility result asynchronous system impossible solve consensus satisfy safety progress condition presence crash fault example btm correctly decide whether crashed rule incorrectly abort one decision maker tm inaccurate failure detector would issue rms would follow whatever tm decides consistency progress would satisfied surface illustrates problem two decision maker tm btm looking state rms different time making different decision asymmetry information root evil distributed system problem nt go away even threephase commit extension threephase commit extension modeled tla pdf version error trace show time progress violated wikipedia page threephase commit say timeout receiving precommit order rms ie go ahead commit would instead cause consistency problem case paxos making world better place hope lost paxos paxos tread carefully within bound flp result innovation paxos always safe even presence inaccurate failure detector asynchronous execution fault eventually make progress consensus get realm possibility emulate tm paxos cluster node solve inconsistent tmbtm problem gray lamport show transaction commit paper rms use paxos box store decision concurrently replying tm shave extra one message delay obvious protocol
340,Lobsters,formalmethods,CSE-Formal methods,Refinement to Imperative/HOL (2015),https://www.ssrg.ece.vt.edu/~lammich/pub/itp15_sepref.pdf,refinement imperativehol,,obj length filter flatedecode stream dc sozu jw nu vm f q e r z z p endstream endobj obj length filter flatedecode stream v ń uby j endstream endobj obj length filter flatedecode stream e ӂw ɦa p jb w ap l wk ǯ endstream endobj obj length filter flatedecode stream xڵ n q k e h p n r endstream endobj obj length filter flatedecode stream n n h mp q fc g
341,Lobsters,formalmethods,CSE-Formal methods,TLA+ is hard to learn,https://lorinhochstein.wordpress.com/2018/12/24/tla-is-hard-to-learn/,tla hard learn,tla universe state machine modeling program system math copyrighted implementation everything mathematical syntax like,fan formal specification language tla tla build model program system help reason behavior tla particularly useful reasoning behavior multithread program distributed system requiring specify behavior explicitly force think interleaving event might otherwise considered user base tla quite small think one reason tla popular difficult learn think least three concept need tla give new user trouble universe state machinemodeling program system mathmathematical syntax universe state machine tla us state machine model treat universe collection variable whose value vary time state machine sense tla us similar exactly finite state machine software engineer used particular state machine tla sense infinite number stateswhen software engineer think state machine think specific object component implemented finite state machine tla everything modeled state machine state machine view system feel familiar background physic physicist use approach system modeling define state variable evolves time squint tla specification look identical system firstorder differential equation associated boundary condition average software engineer notion entire system evolving state variable new way thinking state machine approach requires set concept need understand particular need understand behavior requires understand state step action step stutter action may may enabled example definition enabled writing memory action enabled state exists state true step took long time internalize concept point could write without consulting source newcomer want get running quickly possible new concept requires effort understand decrease likelihood adoption modeling program system math one commonality across engineering discipline work mathematical model model abstraction object simplified version artifact intend build one thing attracts tla modeling software engineering mechanical engineer never going confuse finite element model constructed computer physical artifact building unfortunately software engineer lucky model superficially resemble artifact build tla model computer program look like source code model program model completely different beast trip people metaphor think writing program akin painting additive work start nothing work adding content statement program paint canvas simplest program equivalent empty canvas one anything unix system program called true nothing terminate successfully implement shell empty file incidentally copyrighted implementation contrast implement model work adding constraint behavior state variable like sculpting start everything chip away end want simplest model one constraint allows possible behavior simplest computer program nothing simplest model really allows everything work modeling adding constraint possible behavior model describes behavior interested write ordinary program kind mistake really make bug writing program supposed write model program also make kind mistake make another kind mistake model allows behavior would never actually happen real world even physically possible real world engineer physicist understand kind mistake mathematical model permit behavior possible real world example electrical engineer talk causal filter filter whose output depend past present future might ask even need word since possible build noncausal physical device possible even useful describe noncausal filter mathematically indeed turn filter perfectly block range frequency causal new tla user understand distinction model program kind mistake inconceivable since happen writing regular program creating noncausal specification software folk use term machineclosed instead causal typical error new user underspecifying behavior variable interest common mathematical syntax many element tla taken directly mathematics logic software engineer used programming language syntax confusing first studied predicate logic universal extensional quantifier new think tla syntax significant obstacle adoption software engineer pick new language unfamiliar syntax time real difficulty understanding tla notion state machine modeling describing computer program permitted behavior state machine new syntax one hurdle like like loading
342,Lobsters,formalmethods,CSE-Formal methods,My hobby: proof engineering,https://www.stephanboyer.com/post/134/my-hobby-proof-engineering,hobby proof engineering,proof assistant coq theorem prover exactly deep sense repository continuous integration case study domain theory fixed point domain theory finished proving kleene fixedpoint theorem proposition type proof program case study soundness type system lambda calculus type system semantics simplytyped lambda calculus typing rule proof conclusion software foundation certified programming dependent type footnote emacsbased interface vim user spacemacs sk combinator calculus,november great time working teammate airbnb many work hard much enjoy programming fun anymore still love recreational programming peculiar sense come home work try prove theorem proof assistant usually theorem related functional programming type system masochistic hobby convincing computer theorem true quite difficult compared convincing human get computer accept proof must pretty good understanding b really must right use coq theorem prover formalizing proof coq beautiful simple language simpler language use work beauty hidden beneath rather unsightly ide proof left green highlighted part verified coq working proof ask coq step forward ctrldown use ctrlup step backward point proof wrong coq highlight error red similar type checker rather exactly deep sense love explain mean save separate article screenshot currently middle proof upper right pane show need prove case f x x also hypothesis use prove shown horizontal line lower right pane show helpful information request type something list definitionslemmastheorems related recently set small github repository continuous integration system check proof push branch preventing merging master mistake impossible commit incorrect math repository proving theorem machinechecked language invigorating get hang feel like puzzle finish long proof nontrivial result remarkable sensation unlike anything else case study domain theory write recursive function language actually obvious definition mathematically welldefined week reading theoretical underpinning recursive definition fixed point whenever define something recursively technically taking fixed point continuous function yes read correctly really cool math behind called domain theory week vague understanding fair amount functional programming hardly knew anything domain theory today finished proving main result kleene fixedpoint theorem difficult proof consider pretty wellversed basic idea domain theory proof remarkable paper convincing computer accept another matter entirely started writing definition first step understanding theory able formally define main idea expect casual reader dissect definition include give sense look like write coq assumption let leq partially ordered set poset poset set binary relation reflexive transitive antisymmetric parameter set parameter leq prop axiom refl forall x leq x x axiom trans forall x z leq x leq z leq x z axiom antisym forall x leq x leq x x supremum subset least element greater equal every element subset also called join least upper bound definition supremum p forall p leq forall forall p leq leq directed subset nonempty subset two element subset upper bound subset definition directed p exists p forall p p exists leq leq p assumption let partial order directedcomplete mean every directed subset supremum axiom directedcomplete forall p directed p exists x supremum p x assumption let least element called bottom make partial order pointed directedcomplete partial order parameter bottom axiom bottomleast forall x leq bottom x monotone function one preserve order need consider function domain codomain identical order relation need case monotone function general definition monotone f forall leq leq f f function scottcontinuous preserve suprema directed subset need consider function domain codomain identical order relation need case continuous function general definition continuous f forall p directed p supremum p supremum fun exists p f f function performs iterated application function bottom fixpoint approx f n match n bottom n f approx f n end next proved lemma keep article short state full proof need simple lemma pair natural number lemma natdiff forall exists add add supremum subset exists unique lemma supremumuniqueness forall p supremum p supremum p scottcontinuity implies monotonicity lemma continuousimpliesmonotone forall f continuous f monotone f iterated application monotone function f bottom form ωchain mean totally ordered subset ωchain called ascending kleene chain f lemma omegachain forall f n monotone f leq approx f n approx f leq approx f approx f n ascending kleene chain f directed lemma kleenechaindirected forall f monotone f directed fun exists n approx f n give idea actual proof look like coq proof one easier lemma proof virtually impossible read without stepping interactively worry make sense lemma supremumuniqueness forall p supremum p supremum p proof intro unfold supremum h destruct h unfold supremum destruct apply apply h apply antisym auto qed finally main result proved proof kleene fixedpoint theorem state least fixedpoint scott continuous function pointed directedcomplete partial order exists supremum ascending kleene chain theorem kleene forall f continuous f exists supremum fun exists n approx f n f forall f leq nothing better typing qed end long proof watching turn green coq verifies really amazing stephen kleene probably proved without help computer able verify highest possible scrutiny wrote impressive program without ever run turned bug analogy work coq become intimately familiar interpretation proposition type proof program case study soundness type system successful formula writing paper programming language theory following define syntax small novel language usually based lambda calculus define type system language set rule specify program legal define semantics language ie describe happens run program prove type system prevents program getting stuck according semantics theorem proven last step called soundness month ago wanted try formallyverified soundness proof simplytyped lambda calculus essentially smallest programming language higherorder function meaningful type system started defining abstract syntax language coq inductive term set eunit term evar id term eabs id type term term eapp term term term type set tunit type tarrow type type type keep article short describe language work many good introduction favorite chapter benjamin c pierce wonderful book called type programming language typing rule add whatever base type like eg booleans integer etc simplytyped lambda calculus keep thing simple rather useless unit type single value akin empty tuple inductive hastype context term type prop htunit forall c hastype c eunit tunit htvar forall x c lookupvar c x hastype c evar x htabs forall e x c hastype cextend c x e hastype c eabs x e tarrow htapp forall c hastype c hastype c tarrow hastype c eapp specify semantics defined smallstep operational semantics main idea define relation say step program take run many way define semantics programming language one inductive step term term prop sbeta forall x value step eapp eabs x sub x forall step step eapp eapp forall value step step eapp eapp know program finished running define kind program fully evaluated inductive value term prop vunit value eunit vabs forall e x value eabs x e state value ie expression fully evaluated either unit constant function function application value since reduced expression normal form step take definition normalform exists step stuck program one normal form value definition stuck e normalform e value e soundness mean program welltyped never get stuck stepstar transitive reflexive closure step relation defined theorem soundness forall hastype cempty stepstar stuck proof including definition lemma line long simple language quite difficult undertaking recall working entire weekend probably hour day really appreciate research paper include formally verified soundness proof conclusion think coq extension ability reason logically doubt something open coq ide try prove think reason valuable often mull functional programming type logic algorithm etc kind thing wellsuited formalization unfortunately machinechecked theorem proving easy learn probably esoteric difficult prove nontrivial result without graduatelevel understanding type theory even still difficult accessible introduction benjamin c pierce software foundation freely available online read adam chlipala certified programming dependent type also freely available online expert coq mean proof probably longer clunkier need know basic technique nice thing logic underlying rule simple reached point prove anything coq rigorously prove paper given enough time two proof described article took day steadily getting better footnote strictly speaking language called gallina coq refers system whole also emacsbased interface vim user friend helped set spacemacs still found navigating proof coqide little intuitive know better say impossible coq allows add axiom dangerous axiom might inconsistent one could argue sk combinator calculus smaller still fit description
343,Lobsters,formalmethods,CSE-Formal methods,Lean Forward,https://lean-forward.github.io/,lean forward,publication formalizing bachmair ganzinger ordered resolution prover preprint pdf submission pdf preprint pdf lecture note pdf preprint pdf comprehensive framework saturation theorem proving preprint pdf report pdf postprint pdf report pdf thesis pdf publisher page postprint pdf proof sketch pdf superposition lambda publisher page postprint pdf report pdf extending brainiac prover lambdafree higherorder logic publisher page postprint pdf report pdf publisher page postprint pdf thesis pdf thesis pdf thesis pdf event logical verification logical verification logical verification,publication formalizing bachmair ganzinger ordered resolution prover anders schlichtkrull jasmin blanchette dmitriy traytel uwe waldmann accepted journal automated reasoning preprint pdf robert lewis paulnicolas madelaine accepted seventh workshop practical aspect automated reasoning submission pdf floris van doorn gabriel ebner robert lewis benzmüller c miller b ed conference intelligent computer mathematics cicm springer preprint pdf anne baanen alexander bentkamp jasmin blanchette johannes hölzl jannis limperg lecture note pdf anne baanen peltier n sofroniestokkermans v ed international joint conference automated reasoning ijcar springer preprint pdf comprehensive framework saturation theorem proving uwe waldmann sophie tourret simon robillard jasmin blanchette peltier n sofroniestokkermans v ed international joint conference automated reasoning ijcar springer preprint pdf report pdf mathlib community blanchette j hrițcu c ed acm sigplan international conference certified program proof cpp acm postprint pdf paulnicolas madelaine msc internship report vrije universiteit amsterdam report pdf björn fischer msc thesis vrije universiteit amsterdam thesis pdf sander r dahmen johannes hölzl robert lewis harrison j oleary j tolmach ed international conference interactive theorem proving itp lipics page schloss für informatik publisher page postprint pdf proof sketch pdf superposition lambda alexander bentkamp jasmin blanchette sophie tourret petar vukmirovi cacute uwe waldmann fontaine p ed international conference automated deduction lncs pp springer publisher page postprint pdf report pdf extending brainiac prover lambdafree higherorder logic petar vukmirovi cacute jasmin christian blanchette simon cruanes stephan schulz vojnar zhang l ed international conference tool algorithm construction analysis system tacas lncs pp springer publisher page postprint pdf report pdf robert lewis mahboubi myreen ed acm sigplan international conference certified program proof cpp pp acm publisher page postprint pdf markos dermitzakis bsc thesis vrije universiteit amsterdam thesis pdf pablo le hénaff msc internship report école polytechnique paris thesis pdf jens wagemaker bsc thesis vrije universiteit amsterdam thesis pdf event logical verification period vrije universiteit amsterdam amsterdam netherlands lecturer jasmin blanchette guest lecturer robert lewis visa nummelin logical verification period vrije universiteit amsterdam amsterdam netherlands lecturer alexander bentkamp jasmin blanchette guest lecturer anne baanen robert lewis logical verification period vrije universiteit amsterdam amsterdam netherlands lecturer jasmin blanchette johannes hölzl guest lecturer robert lewis
344,Lobsters,formalmethods,CSE-Formal methods,"Implementations from Benjamin Pierce's ""Types and Programming Languages"" book",https://github.com/roehst/tapl-implementations,implementation benjamin pierce type programming language book,http wwwcisupennedubcpiercetapl,implementation typecheckers wonderful type programming language book benjamin pierce also available series tar file made repository convenience student http wwwcisupennedubcpiercetapl
345,Lobsters,formalmethods,CSE-Formal methods,Programming and Reasoning with Algebraic Effects and Dependent Types (2013),https://eb.host.cs.st-andrews.ac.uk/drafts/effects.pdf,programming reasoning algebraic effect dependent type,,obj length filter flatedecode stream bi zw r l q c zqe ȵ g endstream endobj obj length filter flatedecode stream xڥ u si u gyi τ bodm mmhl q z j c ʃzrta ע r ԕ q xv љ x ɦb na z endstream endobj obj length filter flatedecode stream yy j ck f c dn h k u v k iӡ zm e ݘ endstream endobj obj length filter flatedecode stream u c eu м n x
346,Lobsters,formalmethods,CSE-Formal methods,Solving murder with Prolog,https://xmonader.github.io/prolog/2018/12/21/solving-murder-prolog.html,solving murder prolog,puzzle prolog install swiprolog knowledge base querying fact john friendzoned map coloring domain asking solution murder domain solution entry grid clue clue clue clue clue clue clue clue clue murderer,company usually fun quiz every sunday one puzzle discover killed mr boddy need learn person weapon room clue scattered throughout quiz solve question read begin need know suspect three men george john robert three woman barbara christine yolanda person different room bathroom dining room kitchen living room pantry study suspected weapon found room bag firearm gas knife poison rope found kitchen clue man kitchen found rope knife bag weapon firearm found kitchen clue barbara either study bathroom yolanda room barbara found clue person bag barbara george bathroom dining room bag room clue woman rope found study rope clue weapon living room found either john george weapon living room clue knife dining room knife clue yolanda weapon found study pantry weapon found yolanda clue firearm room george room firearm found discovered mr boddy gassed pantry suspect found room murderer point finger towards suck kind puzzle actually puzzle take hour hour thinking always prolog rescue prolog help solving kind reasoning puzzle see prolog install swiprolog swipl welcome swiprolog multithreaded bit version copyright c university amsterdam vu amsterdam swiprolog come absolutely warranty free software welcome redistribute certain condition please visit http wwwswiprologorg detail help use help topic apropos word write hello world hello world true write hello nl write world hello world true x x swipl prolog interpreter binary write called functor represented mean take argument concept erlang elixir add number argument function name nl used print newline execute sequence command use operator also fails whole computation fails assginment operator followed math expression variable capitalized x x knowledge base prolog stating fact composing fact querying create file hellopl friend john julia friend john jack friend julia sam friend julia molly love john julia love julia sam love sam julia male brad male john male jim male alfred female marry child brad alfred child john jim child john marry load use hello notice end use listing list fact knowledge base hello hello compiled sec clause true listing friend friend john julia friend john jack friend julia sam friend julia molly true listing love love john julia love julia sam love sam julia true querying fact stating fact knowledge base go ahead ask prolog truth deduce fact gave friend john julia true friend john jack true love john julia true love john sam false go complex query like asking friend john love julia friend john julia jack listing child child brad alfred child john jim child john mary true child john x x jim x mary john friendzoned defined friend relation friend john julia say john friend julia prolog mean julia friend john need add another fact saying friend julia john also already defined child relation sure want duplicate flip argument define parent relation want write child brad alfred child john jim child john mary parent alfred brad parent jim john parent mary john prolog help allowing inference rule rule rule true inner statement true anded together friend x friend x parent x child x father x child x male x mother x child x female x friendzoned x love x love x friend x rule true also friend x parent x true child x defined father x true parent x male x defined mother x true parent x female x defined friendzoned x true x love someone love x notice hidden variable friend julia john true male jim true parent jim x x john father jim x x john mother x john x marry mother marry x x john mother marry john true love julia x x sam friendzoned julia false friendzoned john true ok know enough prolog dangerous warm map coloring problem map coloring first start solving map coloring problem famous problem mathematics concern coloring region map required two adjacent region may color reasoning variable area want color b c e domain range value assigned variable would red blue green stating constraint adjacent area color domain let define domain area red green blue color red color green color blue like asking solution colorify b c e color color b color c color color e ab ac ad ae bc cd de define solution rule colorify variable b c e body assign domain color red blue green variable b c e state constraint equal b equal c etc xy mean x equal prolog keep generating value like red blue green assigns variable b c e constraint met mapcoloring true colorify b c e red b green c e e blue red b blue c e e green green b red c e e blue green b blue c e e red blue b red c e e green blue b green c e e red color red color green color blue colorify b c e color color b color c color color e ab ac ad ae bc cd de solve map coloring let get back murder murder begin need know suspect three men george john robert three woman barbara christine yolanda person different room bathroom dining room kitchen living room pantry study suspected weapon found room bag firearm gas knife poison rope found kitchen domain infer domain contains man woman person suspect location weapon variable b c e f need represent person location weapon constraint revealed upcoming clue man george man john man robert woman barbara woman christine woman yolanda person x man x person x woman x location bathroom location dining location kitchen location livingroom location pantry location study weapon bag weapon firearm weapon gas weapon knife weapon poison weapon rope uniqppl rule generates unique value variable b c e unique uniqppl b c e f person person b person c person person e person f ab ac ad ae af bc bd bf cd ce cf de df ef solution start defining murderer rule unique people location unique people weapon specify relation people location weapon note still working suspect entry murderer x uniqppl bathroom dining kitchen livingroom pantry study uniqppl bag firearm gas knife poison rope easily reason variable like bathroom dining firearm gas say bathroom suspect man woman bathroom firearm suspect man woman firearm etc also think grid keep adding constraint last comma murderer rule clue man kitchen found rope knife bag weapon firearm found kitchen clue man kitchen found rope knife bag weapon firearm found kitchen man kitchen kitchenrope kitchenknife kitchenbag kitchenfirearm say one kitchen variable satisfying man fact defined domain state whoever man kitchen rope knife bag firearm clue clue barbara either study bathroom yolanda room barbara found say woman study woman bathroom christine cross option barbara kitchen dining livingroom pantry clue barbara either study bathroom yolanda room barbara found woman bathroom woman study christinebathroom christinestudy barbaradining barbarakitchen barbaralivingroom barbarapantry clue clue person bag barbara george bathroom dining room bag room clue person bag barbara george bathroom dining room bag room barbarabag georgebag bagbathroom bagdining barbara one bag george one bag one bag one bathroom one dining edit thanks nice people reddit corrected misinterpretation clue clue clue woman rope found studywho rope one rope woman found study clue woman rope found study rope woman rope ropestudy clue clue weapon living room found either john george weapon living room man livingroom livingroom robert clue weapon living room found either john george weapon living room man livingroom livingroomrobert clue clue knife dining roomso knife clue knife dining room knife knifedining suspect knife dining clue clue yolanda weapon found study pantry weapon found yolanda clue yolanda weapon found study pantry weapon found yolanda yolandapantry yolandastudy yolanda one pantry yolanda one study clue clue firearm room george room firearm found firearmgeorge george perrson firearm clue discovered mr boddy gassed pantry suspect found room murderer point finger towards pantrygas pantryx write killer write x nl writeanswers bathroom dining kitchen livingroom pantry study bag firearm gas knife poison rope gas pantry equal pantry murderer x write murderer x name using write write variable bathroom dining kitchen livingroom pantry study bag firearm gas knife poison rope using writeanswers defined like writeanswers bathroom dining kitchen livingroom pantry study bag firearm gas knife poison rope write bathroom write bathroom nl write dining write dining nl write livingroom write livingroom nl write pantry write pantry nl write study write study nl write kitchen write kitchen nl write knife write knife nl write gas write gas nl write rope write rope nl write bag write bag nl write poison write poison nl write firearm write firearm nl murderer true murderer x killer christine bathroom yolanda dining george livingroom john pantry christine study barbara kitchen robert knife yolanda gas christine rope barbara bag john poison robert firearm george x christine code available probably much better expert prolog
347,Lobsters,formalmethods,CSE-Formal methods,Reflections on Industrial Use of Frama-C,https://www.adacore.com/uploads/products/SSAS-Presentations/quality_07_kiniry_zimmerman.pdf,reflection industrial use framac,,obj length r filter flatedecode stream hc ݷ endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text imageb imagec imagei colorspace r font r xobject r endobj obj length r type xobject subtype image width height interpolate true colorspace r intent perceptual smask r bitspercomponent filter flatedecode stream
348,Lobsters,formalmethods,CSE-Formal methods,A formally verified transformation to unify multiple nested clocks for a Lustre-like language,http://scis.scichina.com/en/2019/012801.pdf,formally verified transformation unify multiple nested clock lustrelike language,,obj stream q c fb א h n k cc w fi n f tfju j n u b w c䥣 rfh k j sx z q h e c kп qr j j r b ek j fqz ov k w ln q p j wa w ugz ljv c bcn endobj obj endobj obj stream p q r lh h zb p ɏp h n fq nч r l w r n h qz z c hc ʒ p ij yjm ߪ l dmv b 籭 l q n endstream endobj obj endobj obj stream ozg ǚ
349,Lobsters,formalmethods,CSE-Formal methods,"Verification of Full, Functional Correctness for Imperative, Linked, Data Structures (2010)",https://dspace.mit.edu/bitstream/handle/1721.1/58078/635496542-MIT.pdf?sequence=2,verification full functional correctness imperative linked data structure,,âãïó obj endobj xref n n n n n n n n n n trailer startxref eof obj stream û îµ ôh ók ö iíô ê ñpò ï qñ ø â b ó ìù p û ª qút îöo endstream endobj obj endobj obj font procset pdftextimageb typepage endobj obj endobj obj endobj obj stream ÿ º èm nü ìy å ô ôßå æ ýftº áèi ë ömpbfh e neé â èöp k f náóûà u ä käï gn ø ûÿ mùs r ëbö öëük áøìt endstream endobj obj endobj obj endobj obj height stream j í è û aðm bp èðh ì ÿ â â â ü óh h ã ýý cóóôcó è øm ÿôn þ ä hÿú vëûÿÿuõòûkõã ò l è ã ý á í lb ä ã âúã â ìdî ÿÿÿÿÿÿÿÿÿ lë ãd ám åhs âe õ áò ôñ éøth ã ûÿòºü ÿ olëú í è ã æ kö è èä il bk nn èaóc óli ú ó â aª â èèxåpåyny dd â úä xý å x ÿÿÿÿÿÿÿå û òõá l ýþ z û ã â ááñ ûfaædx ä ýõßÿuÿõûÿýÿßÿÿþ çýwm érõ å p dì eyîj âañjõ üi óâ xñ ôlhüâ gæ òm ß â ÿúý gýúÿ ßj þ ix í â â h á åm ªlsä dôb è µåø ä á â cþ p áiå ä r v áá á vâ n ka mö èo dc ÿÿµì ÿòjy ÿ óm á á áâ k â ªá á iè åyg ê æùõq ã ôdbóäouúx õl ã þÿ þº dåuÿÿë ßèi f ûôïêõüô v l óub îcí ýivúm ýû º þ bhnû ÿÿú öjvæµù ò áòl mó á l øñÿoîó l eõðfaä g ûõ ôbmè úlwïüÿ ú q uå e ãuú ßü v ÿùz áa ê q õf dh rýñ f ý ûÿi õêoeÿ þ jëëmÿ þ ia ûk õkû á b hú äó à aàæ àaæ úh ì ö á á â òó ï ÿo úßå jÿ ø è âäqdíò àýÿåx þeá ò dú ùpw ò ÿ ukçiñ jßâ õ í ÿûkµvòõºmz ú jòl ð â ãi û á ù â øk â â ÿü ûÿ â ghûß z ïöºþopèàþg ä bgûu íéo dlú rç ía ndal äcþs ÿ ñ r ó w dù ã òh ó zê ár ëÿç pï åwò â êa ð x oÿ õb aáàñ l èüúh ñù è øiú µtþôý òzouvëÿÿiõòzl ßßÿÿ ÿõ áÿ jóm á á â úìbi va v kîjþò æ ába sdveu áyaxe z èôì h b jóm cwpdpà éheiùukxaÿ ÿv ý â j à òprc ôh õÿ ec ý c îóµ îõfxûdsµat pb n nÿ q áú è vèüñ atl º öÿù ød ddÿø òí í mµnô úã âã j ê â òn ä ø â û ã è pá õ ßw ÿÿºÿßßÿÿÿëwëëò ö òþ zéjéccim ã å b âx ð h è õ úÿik â kð izu j aãîì srå b pn dm â þfnûò l l â ùv tóóõ ôþôôím âi â á ä pã ä âa p å dne l dx ó ã âxöpâ ðm â h òtgqh àä ã úÿûz õ ÿÿÿ ëèòg ò ïÿ ÿû ûû øh tú ã ä á sáéç çï ál ú ýdo ò ÿÿ c æo x òê ka n eh õ ü ãÿµ â ó õýÿ ö å âa è rd þöû ºýò spÿþe ab j ä ó h áâ â xaã ôg úm abz mµ iº úaýî þ ÿÿ úûkí w â ahãµ vbm h º ü x pè äb uowhì
352,Lobsters,formalmethods,CSE-Formal methods,"KeymaeraX: Axiomatic, Theorem Prover for Hybrid Systems",http://www.ls.cs.cmu.edu/KeYmaeraX/index.html,keymaerax axiomatic theorem prover hybrid system,quickly announcement overview summary case study publication quick usage,quickly announcement overview selfdriving car autonomous robot modern airplane robotic surgery increasingly entrust life computer therefore strive nothing highest safety standard mathematical correctness proof proof cyberphysical system constructed keymaera x prover hybrid system hybrid game theorem prover keymaera x analyzes control program physical behavior controlled system together keymaera x feature minimal core line code isolates soundnesscritical reasoning small simple prover core make much easier trust verification result predefined custom tactic built top core drive automated proof search keymaera x come webbased frontend provides clean interface interactive automated proving highlighting crucial part verification activity summary keymaera x theorem prover differential dynamic logic dl logic specifying verifying property hybrid system mixed discrete continuous dynamic reasoning complicated hybrid system requires support sophisticated proof technique efficient computation user interface crystallizes salient property system keymaera x allows user specify custom proof search technique tactic execute tactic parallel interface partial proof via extensible user interface keymaera x also verification tool differential game logic dgl logic specifying verifying property hybrid game mixed discrete continuous adversarial dynamic keymaera x built small trusted core core contains finite list locally sound dl axiom instantiated using uniform substitution proof rule isolating soundnesscritical reasoning axiomatic core obviates otherwise intractable task ensuring proof search algorithm implemented correctly enables advanced proof search feature aggressive speculative proof search userdefined tactic built using flexible tactic language without correctness concern could undermine usefulness automated analysis keymaera x demonstrates tactic top axiomatic core provide rich language implementing novel highly sophisticated automatic proof procedure case study many case study verified keymaera x case study reported corresponding publication quick usage also get quick usage help time menu button keymaera x initial conjecture loaded extract assumption split compound assumption single fact prove loop induction get proof suggestion work subproblems context proved opinion finding conclusion recommendation expressed author necessarily reflect view sponsoring institution
353,Lobsters,formalmethods,CSE-Formal methods,A Gentle Introduction to F*,http://prosecco.gforge.inria.fr/personal/hritcu/teaching/mpri-jan2017/slides/out/01/slides01.html#/sec-a-gentle-introduction-to-f-,gentle introduction f,gentle introduction f f yesterday poll functional programming f functional programming paradigm functional programming paradigm functional programming paradigm functional programming getting increasingly popular industry idea picked mainstream language f intersection ocaml f ml type type inference abstract type interface client interface implementation using list ints client break abstraction precise type f purity f pure total termination checking divergence effect dv state f mutable reference verifying pure program f program verification system verifying stateful program heap operation simplified us f recommended reading next time http next step,gentle introduction f f functional programming language advanced type effect system semiautomated program verification tool proof assistant writingchecking math proof yesterday poll functional programming f functional programming paradigm computing evaluating expression declaration let foo x let z z recursive function let rec factorial n n else n factorial n immutable data structure let rec map f x match x nil nil con hd tl con f hd map f tl unnamed function lambda expression firstclass value map fun x x con con con nil functional programming paradigm avoid mutable state sideeffects possible foldright map incr x pure pointfree style considered better let sum alloc foreach x fun x sum sum x functional programming paradigm course ca nt always avoid sideeffects module hello open fstario let main printstring hello f n fstarexe noextract odir codegen ocaml hellofst extracting module hello ocamlfind opt outhelloml helloexe helloexe hello f functional programming generalpurpose functional language ocaml f standard ml haskell scheme getting increasingly popular industry always big deal research idea picked mainstream language generic java c lambda python javascript java c rust type inference garbage collection etc f intersection ocaml f f us ocaml f executing program c backend restricted subset low kremlin ml type type inference ocaml int let x x int hello string hello let rec factorial n n else n factorial n val factorial int int fun listmap fun x x int list listmap fun x x one two three error expression type string expression expected type int abstract type interface stackfsti module stack val stack type stack val empty stack val push int stack stack val isempty stack bool val pop stack option stack val top stack option int client interface stackclientfst module stackclient let main let stackempty let stackpush let stackpush stacktop implementation using list ints stackfst module stack let stack list int let empty let push x x x x let isempty x match x true x x false let pop x match x none x x x let top x match x none x x x client break abstraction stackclientbadfst module stackclientbad let main let stackempty let stackpush hritcu detained code fstarexe stackclientbadfst stackclientbadfst error expected expression type list got expression type stackstack precise type f refinement type type nat x int x function type together refinement val factorial nat nat let rec factorial n n else n factorial n dependent function type val incr x int int x let incr x x quiz find type incr purity f f function saw far puretotal function tot marker sideeffects terminates input val incr x int tot int x let incr x x val factorial nat tot nat let rec factorial n n else n factorial n quiz giving weak type factorial val factorial int tot int let rec factorial n n else n factorial n subtyping check failed expected type x int x n got type int factorial loop int type f unbounded termination checking based wellfounded ordering expression natural related negative one unrelated inductives eg list related subterm ordering arbitrary pure expression metric decrease e val ackermann nat n nat tot nat decrease n let rec ackermann n n else n ackermann else ackermann ackermann n default metric lex ordering nonfunction args val ackermann nat n nat tot nat divergence effect dv might want prove code terminating val factorial int dv int useful code really always terminating val eval exp dv exp let rec eval e match e app lam x eval subst x app app eval eval lam x lam x eval e let main eval app lam app var var lam app var var state f mutable reference val swapaddsub ref int ref int st unit let swapaddsub let main let alloc let alloc swapaddsub printstring stringofint stringofint n exercise write natural implementation swap verifying pure program using refinement saw already val factorial nat tot nat equivalently use pre post condition val factorial x int pure int requires x ensures fun tot actually abbreviation tot pure requires true ensures fun true f program verification system computation assigned type inference also computes weakest precondition work generically effect using dijkstra monad depend effect simple pure complex st ml weakest precondition checked user spec logical verification condition discharged smt solver related tool dafny boogie framac spec vcc verifying stateful program verifying swap function val swapaddsub ref int ref int st unit requires fun h ensures fun h h let sel h let sel h equal h upd upd h let swapaddsub st actually abbreviation st st requires true ensures fun true heap operation simplified module fstarheap type heap val sel type heap ref tot val upd type heap ref tot heap val equal heap heap tot bool assume sel upd h r v r v assume r r sel upd h r v r sel h r module fstarst val type r ref st requires fun h true ensures fun x equal xsel r val type r ref v st unit requires fun h true ensures fun x equal upd r v us f generalpurpose functional programming f programmed f yet verified smtbased semiautomated verification tool proof assistant writingchecking math proof recommended reading next time f tutorial http section everyone section whoever found today lecture easy please try solve exercise least also send question email still stuck look solution also useful find way solving problem next step week verifying stateful program f week verified lowlevel programming embedded f jonathan protzenko week hoare logic dijkstra monad free week verifying crypto implementation f karthik
354,Lobsters,formalmethods,CSE-Formal methods,Integrating SCR Requirements into Cleanroom Software Engineering (1996),http://prof.kamsties.com/download/isew96.pdf,integrating scr requirement cleanroom software engineering,,obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream ګy ujd wj zg f v
355,Lobsters,formalmethods,CSE-Formal methods,Verification of Tree-Based Hierarchical Read-Copy Update in the Linux Kernel (2018),http://www.kroening.com/papers/date2018-rcu.pdf,verification treebased hierarchical readcopy update linux kernel,,obj length filter flatedecode stream xڭ ݲi
356,Lobsters,formalmethods,CSE-Formal methods,A Verified Implementation of the Bounded List Container,https://link.springer.com/content/pdf/10.1007%2F978-3-319-89960-2_10.pdf,verified implementation bounded list container,,âãïó obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream hş u p âûì è ëæ lqó çù ïÿÿÿıïóì àõ î ıfr zóújbößo rûœ kfdğîú w nz ütòø õöëç oùñ b yiy úº æâbb î ò mfñó ğ é äé òãÿôysh çc ê kq xšnª v w ñ aãâ âr ãpååeja hğ aîéäš fœûór v óx oíœ endstream endobj obj endobj obj font field endobj obj endobj obj endobj obj ap border c f subtypelinktypeannot endobj obj stream xœs endstream endobj obj endobj obj ap border c f subtypelinktypeannot endobj obj stream xœs endstream endobj obj endobj obj border c dest f subtypelinktypeannot endobj obj stream xœs endstream endobj obj endobj obj border c dest f subtypelinktypeannot endobj obj stream xœs endstream endobj obj endobj obj border c dest f subtypelinktypeannot endobj obj stream xœs endstream endobj obj endobj obj extgstate font procset pdftextimageb property xobject endobj obj endobj obj iccbased r endobj obj endobj obj stream px è xælškîá òüúş kèhúc ıhÿgé xã çğaë j mâ å böxé çíéèâç ƒln ëhèóõƒpjz õqÿiì iïò v ğ pµ cyp ruè æä ğªàf f šdm l föğõónàênzõy ï z f èşãæ ëóê äö endstream endobj obj stream üë g sç g iécá ï ÿebºğ óìş ò käm ìqpw ğmªz öû ü ì jø nùb tq ìsäots àš ú l mœs k tèr éñdçïßåö ñ èq º kö vv êr cvïr ùy à à w endstream endobj obj stream ûï úcaƒ ùcís öìlóimùèî dú õì c êy ù ëvì sñ œãêú àü ßô ôe edà p ò ş hpöui áy öuóxõfj é ü ydn e rq âåjùr gcdøäæp eçq œy ëu nµ üz u í ãò áb mw ëï ï ùêè kårzş endstream endobj obj endobj obj stream æíæîq ÿìî eî ì ç ušõ p û û á h n î ë ä úîüàãqpt éó c ìÿƒùo ûãzîºêµãi él ğ èwáåôøz ªbcpç ú ª fîc e šåmmfs g ªëj ªœ ùbwœ h seå e eó á èœzfa ë ccgmo u wæ é ìbñ òp şêch åc kd ofã lêÿt ji ãúoßğ ÿhæ mşµ ô šmåfe ã şìÿ hı k j cö óiäò ä ª igy ş ëšn wà ô úög ûûşõğå ä v vşö vàı oe ß ašóegèíàø v ñäzêúé cjä míû œ î wìãjútvöwœ êã ààuënõ ƒ vÿw ºz šÿxˆhâó p rãiy v aº iıdhf p tæöã g è ğp áóç û ª òtêl ö kûu l ècy bbâkb etl ºhò ağò ü rpç œ îu çâùãë vğ š õæ şñ gˆ ÿ è î áqx pïœ p pü rv êöîêlœå apø ùv dêaß sj róğà q k švë ú hà q û ø àëş ãˆ fæàî p zï œe lk ev që î odvóâ õì nã ştåñ µue ådkôl gï ˆ ıé œnhöåõy å åú v xçåò á ìÿ iáún kâ ïl endstream endobj obj stream ó õè b ûşü endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream ù íl ûî ªûam šƒˆoònñí l ş ólµv ø zíû b ò weyq bpòµì å ñdeàş ª óş ç oë œpì g g mrrz ò q endstream endobj obj endobj obj endobj obj endobj obj endobj obj stream ypwç bbdôèjä µµu õ õşc ékë dd q åh qä œø è x î aà êé nuí p æ š xà q ièqtu e æü œ òñ oóol mè lšäå ÿë ğ ju ifş ìòoèhvia eù ûiu àï ë p ˆûâi aá p x ldz üÿ r sşçøï ã çùøs gao ğğ µ eé e ºùcutun cóï ç ñş ø g ôn pgå ÿğ eşaæ xá u h dçñlanšz ş òvú ÿğêe õhá òa íaí ø hq nÿ dá eâèí j jsó œ áì ual ö çæa jÿñ jnyträîìh l áq lwlc à ö ôqöæxèùb ylayšôøy š ò ÿo è pèæ àh p égx ãâ äğ èèœr n sîœ ƒ gõ î djqzn ìœ š øğaáú fx vkº tcâájµpƒßjÿæ qùös àiıö ø dtp ïãæ çç ùéä îğ öúú àcàğs µßæîfpæ îlú ˆöu p š ä î í êkfœ vjgf q å àœ ıyú åÿnc ˆ º ª edvù ú ê z úòîª ôn ëäåß éıò ş ğwjs öa gxl p æ âbôõ n àqød oc òè æ û ß í è áì endstream endobj obj endobj obj stream l ejh ì eƒòï ë å söo şu äu tr ñåi éy g œ hf ÿzøí µzç ösıú endstream endobj obj endobj obj endobj obj endobj obj stream x r ªëûªªûcõwµ v hrwóvgs ˆ í ná ğmhpxsçààr ùh w k fº ip ô ø fœ µàºƒ œï jôæèuå nn õ œäî æãì ÿ ßôq ñ å xrh ë ß svmºé k ğ iğsní cëzœesæeµ à bêœ n gxùl yk í iáãpxø ñ ïèñã âhòn æàöø endstream endobj obj stream î hô f mâô èpæ à g g oób œñ ê óù cÿèö yñ ô é òëšj šoòÿ cte ò sy h døóïê g sèy åæ g zµò éi ˆ ş à endstream endobj obj endobj obj endobj obj endobj obj stream titweqõ n ç idq j ã gä ëíúlgqõìk ÿ öô kcoëøşv leéí sxu ç ğv î wb éîšerloa wf â µ yğùht ísï òö c éhg ßo k ğğ suz om dåláæ mÿròšyçwoh bõ f p endstream endobj obj endobj obj stream bor åq xçyşèş óçöìsc õeöˆ î œîò áúœ endstream endobj obj endobj obj stream àpq
357,Lobsters,formalmethods,CSE-Formal methods,C2TLA++: A translator from C to TLA++,http://tla2014.loria.fr/slides/methni.pdf,translator c tla,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream h ic oln l r ɀc zo ȍ n f r ۅ w c u j endstream endobj obj stream g qab x k endstream endobj obj stream q z g en endstream endobj obj stream p
358,Lobsters,formalmethods,CSE-Formal methods,A Survey of Symbolic Execution Techniques,https://arxiv.org/pdf/1610.00502.pdf,survey symbolic execution technique,,obj filter flatedecode length stream w endobj obj filter flatedecode length stream endobj obj filter flatedecode length stream xڥ kr ы w r p o g r g g endobj obj filter flatedecode length stream xڥ ofg x n sf um hg sjbw ro r z endobj obj type objstm filter flatedecode first length n stream
359,Lobsters,formalmethods,CSE-Formal methods,SIFT: Design and Analysis of Fault-Tolerant Computer for Aircraft Control (1978),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/Design-and-Analysis-of-a-Fault-Tolerant-Computer-for-Aircraft-Control.pdf,sift design analysis faulttolerant computer aircraft control,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream f endstream endobj obj metadata routlines rpagelabels page rtypecatalog endobj obj content r r r r r r r r cropbox mediabox parent rresources procset pdftextimageb xobject rotate endobj obj stream z ꗐ j f endstream endobj obj stream h endstream endobj obj stream zq r h f g e endstream endobj obj stream x g va ȓ f endstream endobj obj stream ppp l pij ce g u endstream endobj obj stream wzu ᵁ r k endstream endobj obj stream r ӫc g f ɜդ endstream endobj obj stream ip
360,Lobsters,formalmethods,CSE-Formal methods,Designing Distributed Systems with TLA+,https://www.hillelwayne.com/talks/distributed-systems-tlaplus/,designing distributed system tla,official description actual description faq refinement go code bounded essay fdr spin spec,official description distributed system hard even interacting agent lead ten thousand even million unique system state scale impossible test even reason every possible edge case need better tool building system understanding truly understand distributed system need turn software modeling formal method hour modeling catch complex bug would take week month development discover software modeling build distributed system confidently quickly safely talk focus one software modeling tool called tla seen spectacular success realworld project also demonstrate example distributed system close discussing learning resource actual description try convince everybody thread kubernetes literally exact failing try convince everybody distributed system easy think really hard failing try convince everybody thinking hard boring write tla spec instead failing shill book consulting service dignity nerd talk faq question got talk add people ask go spec code production carefully verifying code match spec aka refinement really hard problem accurately implement spec need good engineer good tooling good process nothing take need away research converting pluscal spec go code productionready benefit modeling see error production immediately know either implementation error factor consider model write spec know whether implementation error fundamental design error even ambiguity supposed first place avoiding refinement give u advantage apply spec programming language retrofit existing system spec tla passing model guarantee system correct tla guarantee spec specific property verified specific assumption made model ran assumption least half worker weakly fair make guarantee case le half worker weakly fair cap size message queue message get guarantee happen enqueue message current model checker check bounded model model finite number possible state note infinite number behavior bounded model example valid cycle fit practice like agile tdd pretty well opinion tdd cover ground level localcode implementation verification something outside scope tla tdd remove benefit thinking big picture similarly popular style agile favor shortterm iteration continuous feedback developer empowerment orthogonal value design planning ahead agile issue design actually process big design front creating rigid plan never deviating even reality get way tla modern specification language used bduf instead flexibility choose level detail meaning design exactly much need get benefit want easily modify spec face sudden change adapt new reality return learn whether design work well spend time implementing find ambiguity customer requirement well show demo learn exactly need change product new constraint come talk intersection agile tla essay much time add development process yet largescale study effectiveness formal specification anecdotally usually get beneficial model within day usually enough find issue existing system hammer detail new one found formal specification save significant time long run reducing amount expensive latestage rework reducing amount postrelease debugging experience usually save maybe development time plus maybe amount saved maintenance people talked found similar larger saving decide specify experience rough rule thumb tla particular good dealing concurrency expect implementation take week cutoff super fuzzy practice tla tell certain constraint unnecessary use help find model checker automatically tell remove check preserve property try making change tla help find security vulnerability yes see talk strangeloop us alloy different specification language fundamental principle best place get started see essay getting started short version take existing system write spec form documentation since know existing behavior easier write sanitycheck spec half people know tried found great way get better understanding system half found critical bug way compare fdr csp played fdr bit know well enough accurately comment compare spin spin specifically designed c networking problem tla general nonetheless good tool favorite modeling story got contracted help large company write spec new project six hour speccing discovered proposed architecture satisfy requirement requirement make sense anyway project soon put indefinite haitus spec make example talk accessible invented syntax tla change example instead key val wrote key val also showed subset full spec talk real system sort invariant want check message wellformed deadlock id unique etc covering though would lose focus focused ambiguity liveness see full spec module uploader extends sequence integer tlc constant user worker null model checking constant maxversion maxid id maxid version maxversion seqof set n union set n range f f x x domain f nonempty seq seq set e set union e set e set e seq elem append seq elem upload user version nat id nat modelupload user version version id id msg id nat action create edit delete uniqueonids set set algorithm uploader variable uploads content queue nextid define uploadwith id choose msg uploads msgid id contentwith id choose msg content msgid id existsuploadwith id e x uploads xid id existscontentwith id e x content xid id modeltypeinvariant uploads subset modelupload content subset modelupload used enforce bounded model modelstateconstraint x uploads union content xversion maxversion xid maxid nextid maxid typeinvariant uploads subset upload content subset upload queue seq msg noduplicateids uniqueonids uploads uniqueonids content contentmatchesuploads c content e u uploads c u end define macro sendmsg id action begin queue queue id id action action end macro process user user begin user true either create self version id nextid uploads uploads create sendmsg createid create nextid nextid end upload u uploads ufrom self edit upload except version uploads uploads upload edit sendmsg editid edit end delete u uploads ufrom self uploads uploads delete sendmsg deleteid delete end end either end end process fair process worker worker variable msg null local null begin receive await nonempty queue msg head queue queue tail queue msgaction create create e x uploads xid msgid upload uploadwith msgid content content uploadwith msgid end end elsif msgaction edit edit existsuploadwith msgid existscontentwith msgid upload uploadwith msgid exists contentwith msgid content content exists local upload end pushedit existsuploadwith localid uploadwith localid version localversion local null goto edit else content content local local null end end elsif msgaction delete delete e x content xid msgid exists contentwith msgid content content exists end end else wtf assert false end repeat msg null goto receive end process fair process cleaner cleaner begin clean true id let uploadids uid u uploads contentids cid c content contentids uploadids exists contentwith id content content exists end end end process end algorithm sure translate pluscal run modelstateconstraint state constraint
361,Lobsters,formalmethods,CSE-Formal methods,IFC Inside: Retrofitting Languages with Dynamic Information Flow Control (2015),https://cseweb.ucsd.edu/~dstefan/pubs/heule:2015:ifc-inside.pdf,ifc inside retrofitting language dynamic information flow control,,obj stream q ĉ f b
362,Lobsters,formalmethods,CSE-Formal methods,ESBMC 5.0: An Industrial Strength Model Checker,https://ssvlab.github.io/lucasccordeiro/papers/ase2018.pdf,esbmc industrial strength model checker,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj name r openaction r outline r pagemode useoutlines page r type catalog endobj obj r fit goto endobj obj filter flatedecode length stream g ۂk x endstream endobj obj annots r r r r r r r r r r r r r r content r r r mediabox parent r resource font r r r r r r r r r r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text subtype form type xobject length stream zf endobj obj filter flatedecode length stream endstream endobj obj filter flatedecode length stream endstream endobj obj goto border c h rect subtype link type annot endobj obj uri type action uri http border c h rect subtype link type annot endobj obj uri type action uri http border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj uri type action uri http border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj uri type action uri http githubcomesbmcesbmc border c h rect subtype link type annot endobj obj uri type action uri wwwesbmcorg border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj citeclangusage goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj basefont vbmszslinbiolinumt encoding r firstchar fontdescriptor r lastchar subtype tounicode r type font width r endobj obj basefont loyqywlinlibertinet encoding r firstchar fontdescriptor r lastchar subtype tounicode r type font width r endobj obj basefont tvcztzlinbiolinumtb encoding r firstchar fontdescriptor r lastchar subtype tounicode r type font width r endobj obj filter flatedecode length stream xڥ
363,Lobsters,formalmethods,CSE-Formal methods,Foundations and Trends in Programming Languages: Program Synthesis,https://www.microsoft.com/en-us/research/wp-content/uploads/2017/10/program_synthesis_now.pdf,foundation trend programming language program synthesis,,obj endobj obj filterflatedecodeid index info rlength rsize stream zx endstream endobj startxref eof obj stream h c u w h n n bg n endstream endobj obj pagemodeuseoutlinespages rtypecatalog endobj obj endobj obj endobj obj stream u endstream endobj obj stream endstream endobj obj stream uw sk c ng w sk h g v r ibl ή xǭ f mv w op il v v
364,Lobsters,formalmethods,CSE-Formal methods,Verifying Fixed-Point Digital Filters using SMT - Based Bounded Model Checking,https://arxiv.org/pdf/1305.2892.pdf,verifying fixedpoint digital filter using smt based bounded model checking,,obj endobj obj endobj obj procset pdftextimagebimagecimagei annots r r r r r r r r mediabox content rgroup tabssstructparents endobj obj stream q r k zq g ġ p r r r ou
365,Lobsters,formalmethods,CSE-Formal methods,MicroTESK (toolkit that automates development of test program generators for microprocessors),http://www.microtesk.org/microtesk/about-microtesk/,microtesk toolkit automates development test program generator microprocessor,project page open collaboration,microtesk microprocessor testing specification kit toolkit automates development test program generator microprocessor programmable device test program generator tpg instruction stream generator isg utility producing randomized assembly code aimed functional verification rtl model fpgabased emulator ic microtesk follows specificationbased approach meaning tpg automatically constructed formal description instruction set architecture isa sense microtesk retargetable tpg customized isaspecific information specification written two language nml instruction syntax semantics mmusl memory management logic microtesk provides rubybased language express test scenario socalled template language support construct producing instruction sequence generating test data instruction iterators combinators probability distribution constraint etc builtin tpg engine verifying branch processing memory management unit toolkit extendable userdefined engine microtesk applicable wide range microprocessor architecture including risc arm mips power riscv sparc etc cisc etc vliwepic elbrus itanium etc dsp gpu etc experience mainly relates risc cooperation partner developed microteskbased tpgs riscv custom dsp architecture information visit project page open collaboration
366,Lobsters,formalmethods,CSE-Formal methods,CPA-SymExec: Efficient Symbolic Execution in CPAchecker,https://www.sosy-lab.org/research/pub/2018-ASE.CPA-SymExec_Efficient_Symbolic_Execution_in_CPAchecker.pdf,cpasymexec efficient symbolic execution cpachecker,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream j e bm endstream endobj obj annots r r r r r r r r r r r r r r r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text xobject r subtype form type xobject length stream endobj obj bbox filter flatedecode formtype group r ptexfilename srvconfpubtexacmartifactsavailablepdf ptexinfodict r ptexpagenumber resource extgstate ca ca subtype form type xobject length stream c
367,Lobsters,formalmethods,CSE-Formal methods,Strange Loop 2018: You are a Program Synthesizer (video + transcript),http://www.pathsensitive.com/2018/12/my-strange-loop-talk-you-are-program.html,strange loop program synthesizer video transcript,strange loop talk program synthesizer video transcript capturing future replaying past video program synthesizer transcript http level three level three level three cross stream,strange loop talk program synthesizer video transcript day job work program write analyze transform program ca nt unless special insight program work much night job finding insight making accessible nonspecialist programmer month ago spent week st louis gave first industry conference talk strange loop topic well first academic conference talk icfp capturing future replaying past missed conference finish preparing talk worth talk wanted give two year video program synthesizer video transcript transcript quite something prepare including omitted slide slide deck talk total slide transition part present slide accompanying speech show key frame animation hello name jimmy koppel live dual life day work mit researcher work program synthesis program write program night lead workshop teaching software engineer like write better code today going talk something intersection world software engineering advice today confusing anything read online find someone else arguing opposite today want ask question find source truth software engineering advice whole situation reminds another source truth prevent scurvy scurvy ancient disease caused vitamin c deficiency thousand year death finally british scientist named james lind proved experiment cure eat citrus end century royal navy started requiring sailor drink lemon juice scurvy rate went crippling almost none century lost cure nt understand well enough thought lemon lime big mistake result multiple voyage pole late everyone got scurvy people died source http imagine century sailor ask power prevent scurvy answer come eat wait lemon lime wait boil wait store juice copper store copper worthless kind starting sound like witch doctory coin term citrus advice advice eat citrus good advice saved people life precise enough capture reality came long list caveat made hard use precise advice get vitamin c took year get citrus vitamin c ideal aiming simple thing explains caveat compare software engineering advice guru discover abstraction make code shorter paul graham student okay abstracted code guru wrong abstraction duplication better wrong abstraction sandi metz student well know abstraction good design guru well see good design lead simplicity max kanatalexander student okay simplified api guru broke api break api creates complexity programmer max kanatalexander advice easy citrus advice think take three people close actual quote people show piece code ask question would get similar advice go show deeper intuition deeper reality word precise enough capture get precise engineering advice many year ago got really program synthesis program synthesis amazing program give stuff tell want input maybe give little bit information program look like think algorithm give correct program cool really nice thing b synthesizer b synthesizer b synthesizer ask programmer hey bob thing make easier u program later pretty vague question hard answer ask way make easier synthesize algorithm paper look get answer want know data format million million possible piece code write anything clean try give million example get answer going look parallel synthesis human programming going dive different school synthesis broadly speaking three kind inductive synthesizer theorem proving logic enumerative searching cleverly large space program database optimizes sql query way constraintbased using constraint solver interest time mostly going talk deductive today little bit constraint based enumerative important fourth school synthesis fact hundred example room synthesizer write program might work little bit differently algorithm constraint solver head although think work bit like deductive synthesizer kind deductive reasoning still one universe possible program one universe possible algorithm writing program looking school synthesis learn insight take programming thesis today talk throughout journey synthesis land see three common recurring theme abstraction constraint logic enter deductive synthesis high level deductive synthesis taking high level idea series mechanical transformation making refined precise reach implementation information deductive synthesizer work let look talk software broadly categorize saying one three level max function talk runtime value want input talk input look code runtime level one code level two capturing code nt explain work explain came information logic derivation proof call level three might guess relative size box information lie level three stuff head normally synthesizer concrete code output end let look synthesizer perspective quick background deductive synthesizer look like goal like need get integer maximum two integer write logical formula mean specified way goal given two integer running program condition maximum two input true tool bunch rule relates piece code abstract logical meaning program search want maximum function okay let try running rule know outer skeleton two subgoals prove go search maybe try ifrule okay let try another rule another rule okay maybe using good idea trying assignment instead ah work assignment know little bit program keep going like eventually get actual program yearold synthesis algorithm nutshell also see idea lot newer system nadia talk hour ago saw talk deductive synthesizer called synquid nadia postdoc lab world synthesis small couple system fiat note small functional program synthesis hard instead actually using today tell use instead learn insight use improve algorithm inside head looking thing lens deductive synthesis come deeper insight code let look specification level notion running web app need sanitized string x attack sanitize string escape single quote two choice use saved data must sanitized either calling sanitized function wrote hand take second look decide whether prefer option option shown code people plurality prefer option one slightly smaller number opinion small minority prefer option two minute give sense option one correct answer interpretation well else might might come conclusion well might used folk engineering advice like one abstract direct one harder see happening work understand easier change working level basically like two lawyer podium arguing side case law support hard get real right answer even might good enough engineer used train let call steven head full citrus advice look say option one centralizes code good job steven understanding information hiding deep enough five minute later gave similar example time twitter box type character say long escaped string doublecounted every single quote every single quote became two character let let undoublecount single quote glad python standard library count function made slide easier write propose instead abstract counting presanitized string function steven look say option one engineering premature abstraction evil moment shall see principle pick option circumstance adhere principle option dispreferable wrong wrong mean compileerror level wrong come idea encapsulating idea information hiding private method encapsulating class encapsulating idea f mean one vague thing might heard learned think like synthesizer actually see logic based becomes precise let lens deduction deductive synthesis going see option preferable information hiding easy think easy write give precise meaning three let begin talking mean sanitized well right mean every single quote escaped write formally one many notation going use coq familiar pick others maybe learned one earlier today another session look like say every single quote backslash model use definition reasoning code something missing definition gave sanitized today definition model use tomorrow decide need escape thing changed meaning sanitized code reasoning used fact sanitize mean broken want put current future meaning sanitized behind abstract predicate say give string sanitized mean sanitized sanitized final sanitization module change mind mean sanitized one ever know secret abstraction barrier cross point unfurl abstraction barrier caution tape passing conference get applause might seen diagram like oh centralized functionality wrapped function ca nt expose like purely idea sanitized predicate correspond anything code think code slide see exactly coq write idea opaque predicate existential predicate opaque keyword formalism abstraction boundary written code module get think detail know got sanitized thing whatever mean black box sense option wrong order look code read human say going justify want something head use information sanitized string single quote escaped nothing else escaped actually piercing abstraction barrier cross relying old piece information may change dangerous whereas option information sanitized mean encapsulated sanitization module maybe sanitized strlen function right next sanitized allowed know mean sanitized user code thus secret preserved may changed view sanitized predicate give u answer first question sanitize function return sanitized string whatever mean save feed sanitized string whatever mean put use function together line try sanitize hand bzzzzt like gave string escape single quote need sanitized string nt know mean sanitized string oh ca nt use information opaque hidden behind abstraction barrier cross interpretation another way looking program give opposite conclusion suppose sanitized function allowed know sanitize mean nt know would return ca nt show returning sanitized string nt know mean code know sanitized mean work hand call foreign function know third option acceptable hippie version abstraction boundary everyone get know sanitization dirty hippy case module allowed think definition sanitized see line either actually programming nt write formal logic thing nt write precondition postconditions gratuitous detail everything idea head supposed given compiler three interpretation three world whoever allowed know sanitized mean result code difference level three logic level two code one world choose interpretation determines option correct preferable matter interpretation well pretty clear like everything trade pretty clear reason pick option option sanitized need sanitized string save could sanitized x need show sanitizes x order save proof trivial trivial programming coq actually type trivial say yep proof generally get complicated aliasing conditionals still going fall within fragment first order logic called effectively propositional epr logic generally pretty easy reason fast algorithm world replaceall thing hand need show satisfies complicated condition go little bit harder hard discovered year first case first write sanitize still need prove sanitize string satisfies meaning sanitized need think little bit harder sanitize function actually use use fast epr logic solver easy easy program think whereas option nt clear module boundary call save complicated byhand replacealling need use fancy chen algorithm thinking string world also easier synthesizer say okay string need sanitized string need satisfy condition go everything escaped like okay well get sanitized string way use replace way concatenate thing way reverse thing lot option choose trying search world say sanitized mean need know basis one option get sanitized string call sanitize function export interface saying give sanitized string get precise meaning easy think easier code synthesis style explored correspondence deductive school synthesis seen theme abstraction way hid sanitize behind abstraction barrier cross saw put constraint program possible write course seen level logic let look another example possible write straight line program indentation contains conditional let find program server return elsewhere return friend steven see code see ifstatement get mad internet told use ifstatements death ifstatement join antiif campaign ifstatements bad go back code get idea c isonserver variable either replace array index guru pleased moved conditioner array antiif advice little bit le straightforward may seemed let see mean quick change notation going denote array saying start empty array zero insert one insert top notation array axiom going go detail tell exactly mean index array give say index else let go deeper array zero let go deeper array array axiom undefined really thing care bottom right simplifies formula x equal zero index x one index formula conditional x x using go back program come logical formula describe program get conditional server else use axiom exact original program get exact formula sense conditional conditional synthesizer look formula perspective two piece code semantically equivalent actually structurally identical nt changed conditionals semantic notion syntactic notion nt write letter mean ifstatement code thing happened array index conditional disguise mean antiarray campaign array death array every array access conditional difference subtle purely determined code rather property level three think let inspect another array list president name using define presidentafter function president washington adam president thomas jefferson james madison pretty simple function thatit totally break bad input negative last president nt tell simplified example let talk mean index array like get giant conditional washington adam look promising look like conditional already notion external notion ith president relate formula get simpler formula name ith president involving branching use abstracted formula look code think straight forward manner get index name next president done would think also verifier synthesizer would think like written casework branching work sense one array index conditional difference able abstract one maybe could abstract size array find better way thinking nt nt find way one conditional one seen insight deductive school synthesis seen abstraction abstract array access let u put extra constraint program like death ifstatement understood level logic let go another school synthesis constraint based section going little bit different previous one said beginning human deductive synthesizer kind similar deductive synthesis shed light soft engineering advice whereas enumerative constraint based like human synthesizer going illuminate nature program going talking tool called sketch built advisor armando solarlezama sketch programming hole human clever insightful slow synthesizer dumb thorough fast let put together going write high level sketch program program title look like synthesizer going fill detail hello world example question mark hole thing asking find integer question mark x time question mark equivalent x plus x input x might figure answer synthesizer figure second complicated thing sketch really inefficient linked list reversal get fast one need bit complicated hole integer say like number statement statement look like let give twominute version synthesis algorithm two part constraint solving cegis loop look like simplicity assume integer two bit thank moment say look bit input hole arithmetic expression give u constraint digit plus expression need match corresponding one multiplication expression get list constraint bit also write bitlevel formula every bit plus time look like boolean formula thank goodness use twobit number solve bit hole taken theory computing course might start getting little scared theory competing course might learned booleansatisfiability problem need find solution assign bit thing work sat problem oh nphard lie actually npeasy mean modern sat solver take million variable solve fast time case lucky enough time figure bit hole get final answer success make easier think pick input one time instead input top built something called counterexampleguided inductive synthesis loop cegis basically conversation two part inductive synthesizer verifier synthesizer take input take test give program verifier take program say always work give failing input go work fails work failing test work yes word cegis testdriven development get idea maybe somehow use sketch cegis tell u something testing let going want see test case good enough good enough test passed program work way write program pass test wrong program let use synthesis find view testing space correct program want find every test going narrow passing program hopefully correct one something missing story simple kind program curve x plane test point want curve go three point guess curve mind right guy another test oh mean one add structural constraint curve must line two option go away option line need fewer point fewer test case program generalized polynomial program synthesis generalized curvefitting look like testing program well kind structural constraint program maybe nt need third test let put action want synthesize function something complicated compute length linked list three test case left need kind oracle tell correct answer using going synthesize length function pass three test gave input list questionmark differs correct answer passed test case wrong somewhere let synthesize first say three branch conditional look something like reasonable list operation thing happen within branch let see come something sketch produce correct output readable output order make sure right program need add another test like list length three say passed test way make wrong program restrict program little bit nt need test anymore three test must correct program talk coverage test precise nt often hear writing simpler code one le need write simpler code nt need many test choice know end prefer saying quality tested quality must built mean gotten insight writing program writing test school constraintbased synthesis seen abstraction use test oracle constraint restrict program space make work synthesis algorithm based logic seen lot stuff today learned highlevel two different synthesis algorithm seen lot stuff probably nt seen really reaching black box head write program kind opening bit seeing work start stop accepting vague answer start accept maybe think little bit deeper going possible write right program nt wild west anything go structure possible write accepting find hope coming today joining journey get away citrus advice become used start learn see vitamin code first step important step already done get precise engineering advice big step simply believe possible program synthesizer want see check blog love stuff also teach web course starting two week one former student sitting right photo left zohar manna armando solarlezama nadia polikarpova adam chlipala cordell green sumit gulwani john darlington zora tungright order alex miller ryan senior mario acquino nick cowan bridget hillyer crystal martin like thank people made possible people invented talked well organizer importantly st louis hometown special guest audience today like thank father never telling crazy even thought remember program synthesizer cross stream cross abstraction boundary hope great strange loop
368,Lobsters,formalmethods,CSE-Formal methods,List of companies that uses formal methods in software engineering,https://github.com/ligurio/practical-fm,list company us formal method software engineering,amazon amazon web service us formal method use formal method amazon web service model checking boot code aws data center airbus interview xavier leroy used airbus altran spark contributor apple arm verifying official arm specification linux kernel adacore alacris bae system reddit bedrock system github boeing company source bosch astrée centaur technology cog system site verification project draper ethereum dev update formal method lem formalization evm isabellehol proof formal verification ethereum contract espark learning formal method practice using tla espark learning elastic elasticsearchformalmodels repository conference talk current open position formal development networkcentric rtos facebook moving fast software verification facebook us static analysis detect prevent security issue fireeye job announcement formal method engineer scientific developer fireeye finproof formal vindication philosophy presentation galois genu gmbh another path software quality automated software verification openbsd application software verificationto openbsd network module google simple highlevel code cryptographic arithmetic proof without compromise grammatech c library annotation acsl framac experience report green hill software industrial use paul e mckenney journal rcu fundamentally q cert igexao experience report smuggling little bit coq inside cad development context intel fifteen year formal property verification intel formal verification division algorithm prertl formal verification intel experience infotecs construction formal verification faulttolerant distributed mutual exclusion algorithm построение и верификация отказоустойчивого алгоритма распределенной блокировки isp ra astraver linux kernel library function formally verified site моделирование и верификация политик безопасности управления доступом в операционных системах part eventb specification formal specification kernel kernkonzept gmbh source kaspersky lab что представляет собой операционная система kaspesky o source machine zone inc twitter microsoft tla proof thinking programmer highlevel tla specification five consistency level offered azure cosmos db thorough static analysis device driver static contrace checking abstract interpretation tla spec simplified part mongodb replication system nasa langley formal method research program java pathfinder robust software engineering group jet propulsion laboratory inspiring application spin source nomadic lab page software verification oracle proving theorem java jvm particular software tla specification nservicebus tla tidb rockwell collins formal method aerospace industry follow money serokell synopsis site systerel b method eventbrodin recruiting sifive linkedin statebox github sukhoi formally verified compiler lustre trustinsoft site trustworthy system site jetbrains research source мцст методы и средства верификации протоколов когерентности памяти tplatforms employee cv control software cm experiment cern large hadron collider zilliqa scillacoq project wave,amazon usa ecommerce cloud computing tla amazon web service us formal method use formal method amazon web service cbmc model checking boot code aws data center airbus france astrée astrée proved absence runtime error primary flightcontrol software airbus model system line c code analyzed completely automatically minute pc using memory minute amd athlon using memory since airbus france using astrée development safetycritical software plane series including coq interview xavier leroy caveat cverifier developed cea used airbus altran france paris spark spark contributor apple santa clara valley california usa hardware software arm usa california san jose hardware verifying official arm specification tla linux kernel adacore usa new york alacris blockchain bae system coq reddit bedrock system boston bay area usa berlin munich germany system security trustworthy compute coq c github boeing company usa aerospace defense coq proof ivory source bosch germany automotive astrée centaur technology usa hardware cog system australia new south wale sydney site australia isabellehol verification project draper usa defense space coq ethereum switzerland dev update formal method isabellehol lem formalization evm isabellehol proof coq formal verification ethereum contract espark learning usa il chicago education tla formal method practice using tla espark learning elastic global search analytics software tla isabellehol elasticsearchformalmodels repository conference talk current open position european space agency tla formal development networkcentric rtos european space agency rosetta spacecraft flew comet used realtime operating system called virtuoso control instrument next version operating system called opencomrtos developed using tla facebook usa infer moving fast software verification zoncolan facebook us static analysis detect prevent security issue fireeye dresden germany team defunct security coq job announcement formal method engineer scientific developer fireeye finproof russia spb finance blockchain coq agda formal vindication barcelona spain law coq philosophy presentation galois portland oregon usa consultingresearch coq genu gmbh germany cpachecker another path software quality automated software verification openbsd application software verificationto openbsd network module google ca usa cloud computing computer software ai coq simple highlevel code cryptographic arithmetic proof without compromise chromium grammatech framac c library annotation acsl framac experience report green hill software usa aerospace industrial use ibm usa spinpromela paul e mckenney journal rcu fundamentally linux kernel rcu coq q cert igexao europe computer aided design coq experience report smuggling little bit coq inside cad development context coq used verify following domainspecific algorithm application patch electrical design document ii graph algorithm search lengthpreserving tree layout b b tsp iii data structure unionfind priority queue iv programming language related question custom language type inference v small research project intel usa hardware prover fifteen year formal property verification intel hol light formal verification division algorithm tla prertl formal verification intel experience infotecs russia moscow tla coq construction formal verification faulttolerant distributed mutual exclusion algorithm построение и верификация отказоустойчивого алгоритма распределенной блокировки isp ra moscow russia operating system hardware framac jessie astraver linux kernel library function formally verified spinpromela microtesk site eventb моделирование и верификация политик безопасности управления доступом в операционных системах part eventb specification isabellehol formal specification kernel kernkonzept gmbh germany operating system source kaspersky lab moscow russia securityav что представляет собой операционная система kaspesky o ivory source machine zone inc russia mobile gaming software realtime computing cloudbased networking tla twitter microsoft redmond usa software development tla tla proof thinking programmer highlevel tla specification five consistency level offered azure cosmos db microsoft static driver verifier thorough static analysis device driver clousot static contrace checking abstract interpretation mongodb new york usa software development tla tla spec simplified part mongodb replication system nasa usa space pvs nasa langley formal method research program jpf java pathfinder robust software engineering group model checking jet propulsion laboratory spinpromela inspiring application spin pvs source nomadic lab paris france blockchain coq page software verification oracle redwood shore ca usa enterprise software cloud computing computer hardware proving theorem java jvm particular software tla tla specification nservicebus pingcap tla tla tidb rockwell collins usa cedar rapid iowa high assurance system formal method aerospace industry follow money serokell tallinn estonia fintech blockchain iot machine learning formal verification agda synopsis site systerel france software consulting service model checker synchrone language b method eventbrodin recruiting sifive usa san francisco bay area hardware coq linkedin statebox amsterdam netherlands blockchain idris github sukhoi russia moscow aerospace defense ansys scade suite source formally verified compiler lustre trustinsoft usa ca san francisco trustinsoft analyzer site trustworthy system australia sydney isabellehol coq site jetbrains research saint petersburg russia coq source мцст moscow russia spinpromela методы и средства верификации протоколов когерентности памяти tplatforms moscow russia coq spinpromela tla mcerlang employee cv cern genève switzerland control software cm experiment cern large hadron collider zilliqa singapore blockchain coq scillacoq project wave blockchain
369,Lobsters,formalmethods,CSE-Formal methods,Holistic specifications for robust code,https://www.youtube.com/watch?v=d6w11OvJAzo,holistic specification robust code,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature sophia drossopoulou holistic specification robust code code mesh ldn youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature sophia drossopoulou holistic specification robust code code mesh ldn youtube
370,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Control Systems Properties with Theorem Proving (2014),https://arxiv.org/pdf/1405.7615.pdf,formal verification control system property theorem proving,,obj filter flatedecode length stream f z h n β н u ˌ x q c c
371,Lobsters,formalmethods,CSE-Formal methods,"Certified Verification of Algebraic Properties on Low-Level, Math Constructs in Crypto Lib's",https://acmccs.github.io/papers/p1973-tsaiA.pdf,certified verification algebraic property lowlevel math construct crypto lib,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream e k endstream endobj obj ocgs r openaction routlines rpagemodeuseoutlinespages rtypecatalog endobj obj endobj obj font procset pdftext xobject rotate rtypepage endobj obj stream p pۮ mi n vj endstream endobj obj stream elӥ cx g endstream endobj obj stream mi p b endstream endobj obj stream p ʕq f b endstream endobj obj stream b f vgbhs ǜ iيlӵ q ze j endstream endobj obj stream c k endstream endobj obj stream kx vi b jg x ν ɓ ڌ z ޟ endstream endobj obj stream rf h zɪ b v v endstream endobj obj resource rsubtypeform stream g g j j w tc tw tz tl tr t bt linuxbiolinum tf g td session tj td tj td verifying tj td crypto tj et endstream endobj obj resource rsubtypeform stream g g j j w tc tw tz tl tr t bt linuxbiolinum tf g td tj td october tj td tj td tj td tj td dallas tj td tx tj td usa tj et endstream endobj obj stream tk r endstream endobj obj stream ca q f f w b u ԧxҟ abk w ѧizf dې xj kc հ nq c h
372,Lobsters,formalmethods,CSE-Formal methods,JaVerT 2.0: Symbolic Execution for JavaScript,https://www.doc.ic.ac.uk/~pg/publications/FragosoSantos2019JaVerT.pdf,javert symbolic execution javascript,,obj endobj obj filterflatedecodeid index info rlength rsize stream b x ϛ endstream endobj startxref eof obj stream lsw c j k ya mrjt endstream endobj obj endobj obj endobj obj endobj obj stream f z z x b oo r b p b l endstream endobj obj stream r w g gx endstream endobj obj stream tb vf q g j g c eaa w u k q c g c ec c p k pz 衲 x f mdǟ ap dl k x e l te ehn h ӫ в ψ mh x n zz l mq ia z獈 l g ki n ʿe vxog п 玙 j v n k v gw v r njx x ʍ n n z c v e j l q ղ jr h z
373,Lobsters,formalmethods,CSE-Formal methods,"Hierarchical, Timed, Abstract, State Machines for WCET Estimation (2015)",https://hal.archives-ouvertes.fr/hal-01214973/document,hierarchical timed abstract state machine wcet estimation,,obj type catalog version page r openaction r fit endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream xڭxɏ q k drh ނmadi endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj length filter flatedecode stream wf xx l x p fw r fh հ endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream xڕ ͼ u j yا r r sa bi dc v r j j n endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream 쁺 eh j u pm qf w muq b ן vct z g ȗ dc endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream xڽ
374,Lobsters,formalmethods,CSE-Formal methods,Safe Concurrency for Aggregate Objects with Invariants (2005),https://www.microsoft.com/en-us/research/wp-content/uploads/2005/01/SafeConcurrencySEFM2005.pdf,safe concurrency aggregate object invariant,,obj length filter flatedecode stream occ hm h r n gwkb ܗ r g f wf p u endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream j x xwôad q sh x vyv j j e dy q endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream l z c ĉ ϟ ql u lk v j ț xp h endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream xڽ u jߑ e myzö k q nz k ha u 䋣 xu u wi j v f endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename objectlifecyclepdf ptexpagenumber ptexinfodict r matrix bbox resource procset pdf text extgstate r font r r r r length r filter flatedecode stream l ϻz l x g e z p hp ۃ k z р h endstream endobj obj producer miktex gpl ghostscript creationdate moddate title microsoft powerpoint objectlifecycleppt creator version author tbartj endobj obj type extgstate name tr identity bg r ucr r endobj obj basefont courier type font name subtype endobj obj basefont helveticabold type font name subtype endobj obj basefont helveticaoblique type font name subtype endobj obj basefont helvetica type font name encoding r subtype endobj obj endobj obj filter flatedecode functiontype domain range bitspersample size length stream endstream endobj obj filter flatedecode functiontype domain range bitspersample size length stream endobj obj type encoding difference endobj obj font r r r r r r r r r r r r r r r r r r xobject r procset pdf text endobj obj length filter flatedecode stream ӊ g b 渊 u c ы n
375,Lobsters,formalmethods,CSE-Formal methods,IELE: Formally verified Ethereum VM based on LLVM,https://runtimeverification.com/blog/iele-a-new-virtual-machine-for-the-blockchain/,iele formally verified ethereum vm based llvm,iele llvm k framework dozen language k design rationale serve uniform lowerlevel platform translating executing smart contract higherlevel language provide uniform gas model across language make easier write secure smart contract kevm k framework next efficient backend k kevm paper reference c implementation evm compilerstranslators solidity plutus iele solidity plutus formal semantics plutus semanticsbased compilation blog post deploy iele cardano blockchain technical detail download forwardingwalletiele ielesyntaxmd ielemd designmd ielegasmd get involved hiring rvinc acknowledgement iohk iele kevm kevm technical report,runtime verification rv proud release first version iele new virtual machine blockchain iele team photo left right daejun park phd student uiuc rv intern theodoros kasampalis phd student uiuc rv intern yi zhang phd student uiuc rv intern traian serbanuta rv screen left bottom grigore rosu rv presidentceo uiuc professor screen center taking picture virgil serbanuta rv screen right bottom david young rv brandon moore rv yiyi wang rv dwight guth rv iele iele variant llvm specialized execute smart contract blockchain design definition implementation done highest mathematical standard following semanticsfirst approach verification smart contract major objective specifically defined formal syntax semantics iele using k framework return give u executable reference model addition series program analysis tool including program verifier k created team last year incorporates state art language design semantics formal method design iele based experience formally defining dozen language k especially recent experience lesson learned formally defining two virtual machine k namely unlike evm stackbased machine iele registerbased machine like llvm unbounded number register also support unbounded integer get feel iele program look like two verified yet may change design rationale force drove design iele serve uniform lowerlevel platform translating executing smart contract higherlevel language contract interact mean abi application binary interface abi core element iele convention top unbounded integer unbounded number register make compilation higherlevel language straightforward elegant looking success llvm efficient long term indeed many llvm optimization expected carry reason iele followed design choice representation llvm much possible team also includes llvm expert university illinois llvm created provide uniform gas model across language general design philosophy gas calculation iele limitation pay consume example register iele program us gas consumes larger number computed runtime gas consumes memory us term location size data stored location gas consumes make easier write secure smart contract includes writing requirement specification smart contract must obey well making easier develop automated technique mathematically verify prove smart contract correct respect specification example pushing possibly computed number stack jumping regarded address make verification hard thus security weaker current smart contract paradigm iele named label like llvm jump statement jump label also avoids use bounded stack worry stack arithmetic overflow make specification verification smart contract significantly easier like kevm formal semantics evm previously defined validated evaluated using k framework design iele also done semanticsbased style using k together fast llvmbased execution backend k still development expected interpreter obtained automatically semantics iele sufficiently efficient serve reference implementation iele next achieve full potential iele plan next work following efficient backend k k semantics including iele executed acceptable performance discussed kevm paper current version k execute evm semantics performance stay within order magnitude performance reference c implementation evm believe improve execution performance k one order magnitude achieved incentive implement iele adhoc way k executable semantics iele also implementation correct construction thus implementation defect vm exploited anymore also iele would easier maintain future version easier deploy compilerstranslators solidity plutus iele writing smart contract directly iele bit feasible evm iele follows llvm ir designed humanreadable iele code still lowlevel thus errorprone properly test iele gain confidence overall design capability implement compilertranslator solidity iele also k since plutus rise star among functional programming language smart contract since defining formal semantics plutus well compiler plutus iele developed immediately solidity semanticsbased compilation addition improving k performance plan implement tool call semanticsbased compiler top k see previous blog post detail idea take programming language semantics l program p l generate using symbolic execution heavily new language semantics l specialization l p expect least one order magnitude increase performance importantly give u uniform mechanism translate program programming language k semantics iele thus making iele k universal platform executing smart contract language deploy iele cardano blockchain technical detail download iele thoroughly commented freely available uiuc license permissive mit license github addition two iele program mentioned forwardingwalletiele showing iele code human readable following link github repo give good idea iele differs evm llvm ielesyntaxmd complete formal syntax iele language ielemd complete formal executable semantics iele language designmd design rationale iele well detailed comparison llvm evm ielegasmd current gas model iele still tuned develop compiler iele get involved spirit open source communitydriven development holding iele discussion channel encourage interested party engage u ask question contribute code build experience tool also always looking contributor able work documentation efficient installquickstart process new developer example test hiring sure keep eye open helpful contributor also posting update brand new twitter page rvinc hope interested developer follow interact let build secure smart contract everybody together acknowledgement warmly thank iohk generous funding support iele kevm iele particular would possible without iohk support continuous research meeting stimulating technical discussion research team also thank k team defined kevm semantics see technical report verified smart contract compliance effort nontrivial proof evm level led quest new vm better support verification smart contract
376,Lobsters,formalmethods,CSE-Formal methods,Simple verification in Idris,https://gist.github.com/roehst/f87af1dabd2699762dec2657a20173f7,simple verification idris,,simple example verification idris try changing turn function see fails typecheck way make property pas
377,Lobsters,formalmethods,CSE-Formal methods,Formally-Verified Components for Layered Assurance via LLVM-to-ACL2 Translator,https://www.acsac.org/2013/workshops/law/files/LAW-2013-Davis.pdf,formallyverified component layered assurance via translator,,obj endobj obj endobj obj font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream aw ۆ g c q g endstream endobj obj stream hߴ ftb endstream endobj obj stream r z h f f v ʕ l g
378,Lobsters,formalmethods,CSE-Formal methods,"Formally-Verified, Decentralized, Key-Management Architecture for Wireless Sensor Networks",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.14.7077&rep=rep1&type=pdf,formallyverified decentralized keymanagement architecture wireless sensor network,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r encrypt r root r prev id startxref eof obj type catalog page r ficl enfocus r endobj obj filter standard v r ygӗ u p endobj obj filter flatedecode length r stream b yms k h fa endstream endobj obj endobj obj type page mediabox rotate parent r resource procset pdf imageb text extgstate r font r content r r r r r r r r cropbox endobj obj r endobj obj r r r r r r r r r endobj obj type encoding baseencoding winansiencoding difference ff fi quoteright endash endobj obj type fontdescriptor fontname nkaaaafx fontbbox flag ascent capheight descent italicangle stemv missingwidth charset r endobj obj type encoding baseencoding winansiencoding difference ff fi fl ffi quotedblright quoteright quotedblleft quoteleft endash endobj obj basefont okaaaafy fontdescriptor r type font name firstchar lastchar width encoding r subtype endobj obj basefont nkaaaafx fontdescriptor r type font name firstchar lastchar width encoding r subtype endobj obj type fontdescriptor fontname pkaaaafz fontbbox flag ascent capheight descent italicangle stemv missingwidth charset r endobj obj subtype filter flatedecode length r stream cr tan c ڨ n z r p z b v yǣ ud 萑цn q k ȱ endstream endobj obj type encoding baseencoding winansiencoding difference fi endobj obj subtype filter flatedecode length r stream x b ۏ zx 棭 e uj g sl v qsq b kn v p w n e z x h ż l q w f r k sܗ p p pƒx ېu aħ x c endstream endobj obj basefont pkaaaafz fontdescriptor r type font name firstchar lastchar width encoding r subtype endobj obj type fontdescriptor fontname okaaaafy fontbbox flag ascent capheight descent italicangle stemv missingwidth charset w e endobj obj subtype filter flatedecode length r stream e j ǳ dq w
379,Lobsters,formalmethods,CSE-Formal methods,LaTTe : a Laboratory for Type Theory experiments,https://github.com/latte-central/LaTTe,latte laboratory type theory experiment,latte http lattecentralgithubiolatte latte proof assistant library type theory formal proof introduction yes standard library obviously probably maybe build,latte http lattecentralgithubiolatte karl latte laboratory type theory experiment clojure latte proof assistant library based type theory variant λd described book type theory formal proof introduction specific feature latte design library unlike proof assistant generally designed tool tightly integrated clojure language course fully implemented clojure importantly definitional aspect assistant definition theorem axiom handled using clojure namespaces definition macro example fact logical implication reflexive stated directly clojure toplevel form defthm implrefl implication reflexive type declared theorem implrefl plain text assuming type implies proof theorem also constructed clojure form either giving lambdaterm direct proof exploiting propositionastype proofasterm correspondance proof implrefl qed lambda x x qed implrefl ie identity function proof reflexivity implication using declarative proof script proof implrefl assume x concl x qed concl qed implrefl training read standard mathematical proof assuming hold hypothesis named x deduce x hence implies stated qed course proof checked correctness without introduction inconsistent axiom assuming correctness implementation latte kernel mathematical inconsistency introduced proof form yes latte help formalize mathematic concept construct formal proof theorem proposition concept given tight integration clojure language existing clojure development environment eg cider cursive used quite effective interactive proof assistant standard library obviously come latte may interest obviously interested type theory way implemented computer latte implemented readability simplicity mind efficiency correctness probably interested mechanical formalization mathematics intuitionistic logic etc although might learn much may interested contributing definition theorem proof maybe curious lambdacalculus underlying theory favorite programming language dependent type current trend besides programming latte least experiment finalized product already usable nontrivial formalization conducted using latte contribution mathematical content enhancementcorrection underlying machinery much welcomed build running test clj test building documentation clj codox copyright c frederic peschanski mit license cf license
380,Lobsters,formalmethods,CSE-Formal methods,Verifying Safety and Liveness Properties of a Kernelized Web Browser (2010),https://www.microsoft.com/en-us/research/video/verifying-safety-and-liveness-properties-of-a-kernelized-web-browser/,verifying safety liveness property kernelized web browser,,describe inprogress effort verify safety liveness property kernelized web browser model little effort possible kernelized web browser partition traditional monolithic browser architecture two part browser kernel includes securityrelevant functionality le privileged userlevel component browser kernel goal constrain malicious user violating integrity confidentiality honest user focus talk securitycentric verification methodology including specifying security property including novel formulation noninterference finegrained partitioning securityrelevant irrelevant system component identifying right level abstraction locate design flaw without getting bogged implementation issue specifying realistic adversary simple intuitive way avoids overconstraining capability discus insight gleaned verification process including secure system designed reduce verification cost potential future direction promise reduce verification cost open question love help answering background verification browser necessary understand talk
381,Lobsters,formalmethods,CSE-Formal methods,Rooting Routers Using Symbolic Execution,https://papers.mathyvanhoef.com/hitbdxb2018-slides.pdf,rooting router using symbolic execution,,obj endobj obj endobj obj xobject font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream fap q endstream endobj obj endobj obj stream jfif c
382,Lobsters,formalmethods,CSE-Formal methods,ActiveFacts - Natural language schema definition with fact-based modelling,http://dataconstellation.com/ActiveFacts/examples/,activefacts natural language schema definition factbased modelling,activefacts example model constellation query language norma introduction table example cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql cql ruby sql xml upcoming version cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql xml cql ruby sql xml cql cql ruby sql xml,activefacts example model copyright c clifford heath activefacts convert factoriented model matching objectoriented relational model accepts model constellation query language cql norma emits cql ruby sql page contains many example cql file look like handwritten code nt generated file edited course write hand activefacts generator afgen semantic analysis convert input file sql ruby using relational objectoriented mapping algorithm ruby code us constellation api provided activefacts gem make start learning object role modeling read introduction check resource page site looking git clone project visual studio pro window norma installed open visual studio solution otherwise wo nt able edit file never fear thing editing cql text table example cql address ruby sql show complex entity address absorbed one place relational mapping xml cql blog ruby sql blog model support hierarchy topic post author comment individual paragraph paragraph comment styled text xml cql companydirectoremployee ruby sql model show relationship person company may director employee xml cql genealogy ruby sql eventbased model genealogy allows different version fact claimed different source use reconciling contradictory information xml cql insurance ruby sql partial model insurance company claim management extended automotive insurance claim cql metamodel ruby sql metamodel activefacts generated ruby code provides intermediate representation compiler metamodel encodes meaning cql model feature cql language representation well cql feature nt yet implemented yet xml upcoming version cql multiinheritance ruby sql example multiple inheritance solid subtype connector show identification path example australianemployee identified hisher employeeid xml cql oilsupply ruby sql model supply demand refined oil populated database used optimise profitability minimising transport cost maximise supply allowing substitution compatible product compatibility depending season also predict shortage xml cql orienteering ruby sql model sport orienteering broken three diagram xml cql personplaysgame ruby sql perhaps simplest possible model map single table xml cql redundantdependency ruby sql model illustrates outstanding problem factoriented modelling tool including activefacts problem address table contains two copy value stateorprovinceid xml cql schoolactivities ruby sql model represents student representing school schoolsanctioned activity includes ternary studentparticipation fact type represents student participation schoolsanctioned activity model constraint allow given student participate given activity single school representing school enrolled school sanction activity xml cql venueseating ruby sql example equality constraint span conceptul join constraint requires ticket issued event seat venue event held xml cql warehousing ruby sql based classic model warehousing record stock level every product bin every warehouse allows incoming outgoing product allocated allocated order including request transfer warehouse order shipped single shipment item must checked shipment xml cql unit conversion cql file contains extensive library fundamental unit unit conversion definition used value type query convert value compatible unit cql windowinroominbldg ruby sql model show object type get absorbed others efficient storage case every window wall every wall room every room building yet one table needed store record window try adding property room see happens relational form xml
384,Lobsters,formalmethods,CSE-Formal methods,The ROADRUNNER Dynamic Analysis Framework for Concurrent Programs,https://slang.soe.ucsc.edu/cormac/papers/paste10.pdf,roadrunner dynamic analysis framework concurrent program,,obj length filter flatedecode stream q c lt dϯq f ޏ r yy sa e f g q e r q b n e evw wځ endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r r procset pdf text endobj obj length filter flatedecode stream di yo gkx r hy u x nm g c g e hk c e l
385,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Distributed Checkpointing Using Event-B (2015),http://aircconline.com/ijcsit/V7N5/7515ijcsit04.pdf,formal verification distributed checkpointing using eventb,,obj stream j
387,Lobsters,formalmethods,CSE-Formal methods,CoSMeDis: Distributed Social Media with Formally-Verified Confidentiality,https://www.ieee-security.org/TC/SP2017/papers/201.pdf,cosmedis distributed social medium formallyverified confidentiality,,obj length filter flatedecode stream xڝz v ѷ qf 䡚 k kf u j j n kœ j ѫ anvx ȃj n fs쇬 q
388,Lobsters,formalmethods,CSE-Formal methods,SPARK by Example: Adaptation of ACSL by Example to SPARK Ada,https://github.com/tofgarion/spark-by-example,spark example adaptation acsl example spark ada,spark example acsl example spark tool used gnat community table content non mutating algorithm maxmin algorithm binary search algorithm mutating algorithm numeric algorithm heap algorithm sorting algorithm classic sorting algorithm content directory global makefile memcached contributing contributing reference,spark example spark example project greatly inspired acsl example collection verified c function data type c standard library spark example two objective implement verify function acsl example using spark spark formally verified subset ada programming language highlight difference verification c program verification spark program adacore developed great tutorial website adaspark beginner recommended follow least spark part tutorial reading spark example tool used gnat community used project may download install using previous link table content non mutating algorithm maxmin algorithm binary search algorithm mutating algorithm numeric algorithm heap algorithm sorting algorithm classic sorting algorithm content directory global makefile directory corresponds chapter acsl example directory contains gnat project file file ending gpr containing information location source etc common configuration eg gnatprove configuration specified sparkbyexamplesharedgpr file project root algorithm algo proved find specification algo algopads file implementation algopadb file specification implementation defined package avoid name clash function package name p suffix hence file name ghost function may used several algorithm grouped spec directory root project lemma used proof grouped lemma directory root project makefile provided chapter default value provers timeouts level proof etc default value sufficient prove corresponding algorithm previous tool machine equipped intel core cpu ram chapter target prof function procedure chapter function procedure corresponding target prove following variable used control behaviour makefiles chapternamedefaulttimeout defined beginning makefile contains default value provers timeout levelfunctionname defines function level used gnatprove enables use memcached server cache proof speed proof process lemma used several function instance variable memcachedserver memcachedport used specify ip port server default enables generation statistic proof based standard output generated file placed stats directory root project parallel control j option gnatprove parallelizing proof default use core machine enables debug verbose option gnatprove variable available see makefilecommon file root project instance want prove function chapter nonmutating algorithm statistic changing default timeout issue following command project root make c nonmutating nonmutatingdefaulttimeout makefile also available root project allchapters target prof chapter gather statistic generate recapcsv file stats directory instance want prove chapter statistic memcached issue following command make allchapters contributing want contribute spark example please read contributing file reference
389,Lobsters,formalmethods,CSE-Formal methods,Program Synthesis is Possible in Rust,http://fitzgeraldnick.com/2018/11/15/program-synthesis-is-possible-in-rust.html,program synthesis possible rust,sketching program find equivalentbutbetter instruction sequence program synthesis possible minisynth ported minisynth rust language abstract syntax tree idbased arena parsing wonderful parser generator interpretation interpreter synthesizer smt solver conclusion,program synthesis act automatically constructing program fulfills given specification perhaps interested sketching program leaving part incomplete tool fill missing bit perhaps compiler instruction sequence want find equivalentbutbetter instruction sequence program synthesizer promise help situation recently stumbled across adrian program synthesis possible blog post adrian describes implement minisynth toy program synthesizer generates constant hole template program given specification fun way learn program synthesis ported minisynth rust language input language quite simple type signed integer operation addition subtraction multiplication division negation left rightshift ifthenelse conditionals example x conditional expression evaluates x nonzero otherwise x abstract syntax tree representation ast us idbased arena intern identifier string bit overkill small program pattern worked well rust pattern make implementing petgraph trait easy get graph traversal dominator algorithm etc nontoy implementation eventually want ast context structure contains arena ast node interned string srcastrs use idarena arena id pub type stringid id string derive default pub struct context idents arena string alreadyinterned hashmap string stringid node arena node ast node definition enum variant type expression language srcastrs pub type nodeid id node pub enum node identifier stringid addition nodeid nodeid subtraction nodeid nodeid multiplication nodeid nodeid division nodeid nodeid rightshift nodeid nodeid leftshift nodeid nodeid const negation nodeid conditional nodeid nodeid nodeid ast context also method allocate new ast node get interned string access allocated node definition straightforward elided interested look source github parsing use wonderful lalrpop parser generator generate parser input language grammar action given full srcparsergrammarlalrpop use crate ast use std str fromstr grammar ctx mut ast context integer r fromstr unwrap identifier ast nodeid r azaz ctxnewidentifier sum ast nodeid term l sum r term ctxnewnode ast node addition l r l sum r term ctxnewnode ast node subtraction l r term ast nodeid item l term r item ctxnewnode ast node multiplication l r l term r item ctxnewnode ast node division l r l term r item ctxnewnode ast node rightshift l r l term r item ctxnewnode ast node leftshift l r item ast nodeid n integer ctxnewnode ast node const n item ctxnewnode ast node negation identifier start pub start ast nodeid sum condition sum consequent sum alternative sum ctxnewnode ast node conditional condition consequent alternative interpretation interpret expression need lookup function map identifier value ast context owns ast node id node evaluating match node handle following case node represents constant return associated constant value node represents identifier get reference interned identifier string context query lookup function value node represents operator recursively evaluate operand apply operator value division also check dividebyzero return error initial interpreter function srcevalrs pub fn eval l ctx mut ast context node ast nodeid lookup mut l result l fnmut str result match ctxnoderef node node const ok node identifier let ctxinterned lookup node addition lh rh let lh eval ctx lh lookup let rh eval ctx rh lookup ok lh rh node subtraction lh rh let lh eval ctx lh lookup let rh eval ctx rh lookup ok lh rh node multiplication lh rh let lh eval ctx lh lookup let rh eval ctx rh lookup ok lh rh node division lh rh let lh eval ctx lh lookup let rh eval ctx rh lookup rh bail divide zero ok lh rh node rightshift lh rh let lh eval ctx lh lookup let rh eval ctx rh lookup ok lh rh node leftshift lh rh let lh eval ctx lh lookup let rh eval ctx rh lookup ok lh rh node negation n let n eval ctx n lookup ok n node conditional condition consequent alternative let condition eval ctx condition lookup let consequent eval ctx consequent lookup let alternative eval ctx alternative lookup ok condition consequent else alternative interpreter synthesizer synthesizer take specification program template program template program may contain hole system variable start letter goal synthesize constant value hole template program implement specification value nonhole variable consider example original blog post specification x template x x transform multiplication ten sum two constant left shift find constant value answer yes synthesizer answer either implement synthesis walk ast generate constraint smt solver reflect semantics specification template constrain result equal every nonhole constant variable finally ask find solution constraint solution exists provide definition hole asking solver find solution constraint constraint hi hole template cj constant template specification program original python implementation minisynth take advantage dynamic nature python operator overloading reuse interpreter constraint generation without change interpreter function supply lookup function return bitvector variable instead signed integer neat trick rust implementation want reuse interpreter well rust statically typed crate rust implement operator overloading factor interpret function eval function generic abstract interpreter abstract interpreter must associated output type normal evaluation constraint generation constraint abstract interpreter must method evaluating operation input language taking operand output type applying operation returning result output type must also provide way translate constant identifier output type srcabstractinterpretrs pub trait abstractinterpret output type interpreter type output create constant output value fn constant mut self c self output lh rh fn add mut self lh self output rh self output self output lh rh fn sub mut self lh self output rh self output self output lh rh fn mul mut self lh self output rh self output self output lh rh fails divide zero fn div mut self lh self output rh self output result self output lh rh fn shr mut self lh self output rh self output self output lh rh fn shl mut self lh self output rh self output self output e fn neg mut self e self output self output return lh rh return otherwise fn eq mut self lh self output rh self output self output return lh rh return otherwise fn neq mut self lh self output rh self output self output perform variable lookup identifier var fn lookup mut self var str result self output next make interpretation function take abstract interpreter us interpret expression input language look almost original eval function one tricky bit encoding semantics interpreter method without using control flow would invisible solver multiply activated conditional arm one deactivated conditional arm zero sum product alternative approach would add method interpreting conditionals directly abstractintepret trait srcabstractinterpretrs pub fn interpret interpreter mut ctx mut ast context node ast nodeid result output abstractinterpret match ctxnoderef node node const ok interpreterconstant node identifier let ctxinterned interpreterlookup node addition lh rh let lh interpret interpreter ctx lh let rh interpret interpreter ctx rh ok interpreteradd lh rh node subtraction lh rh let lh interpret interpreter ctx lh let rh interpret interpreter ctx rh ok interpretersub lh rh node multiplication lh rh let lh interpret interpreter ctx lh let rh interpret interpreter ctx rh ok interpretermul lh rh node division lh rh let lh interpret interpreter ctx lh let rh interpret interpreter ctx rh interpreterdiv lh rh node rightshift lh rh let lh interpret interpreter ctx lh let rh interpret interpreter ctx rh ok interpretershr lh rh node leftshift lh rh let lh interpret interpreter ctx lh let rh interpret interpreter ctx rh ok interpretershl lh rh node negation e let e interpret interpreter ctx e ok interpreterneg e node conditional condition consequent alternative let condition interpret interpreter ctx condition let consequent interpret interpreter ctx consequent let alternative interpret interpreter ctx alternative let zero interpreterconstant let neqzero interpreterneq condition zero let eqzero interpretereq condition zero let consequent interpretermul neqzero consequent let alternative interpretermul eqzero alternative ok interpreteradd consequent alternative refactor eval apply implementation abstractinterpret associated output type directly evaluates expression srcevalrs struct eval env hashmap string impl abstractinterpret eval type output fn constant mut self c c fn lookup mut self var str result selfenv get var cloned okorelse formaterr undefined variable var fn neg mut self e e fn add mut self lh rh lh rh fn sub mut self lh rh lh rh fn mul mut self lh rh lh rh fn shr mut self lh rh lh rh fn shl mut self lh rh lh rh fn div mut self lh rh result rh bail divide zero ok lh rh fn eq mut self lh rh lh rh fn neq mut self lh rh lh rh pub fn eval ctx mut ast context node nodeid env hashmap string result let eval mut eval env interpret eval ctx node finally ready start implementing synthesis first create implementation abstractinterpret build constraint lookup method keep track variable used categorizes whether hole unknown constant make sure subsequent lookup identifier return variable method map straightforwardly onto method call srcsynthesizers struct synthesize ctx ctx ctx ctx context var mut hashmap string ast ctx hole mut hashmap ast ctx string constvars mut hashset ast ctx impl ctx abstractinterpret synthesize ctx type output ast ctx fn lookup mut self var str result ast ctx selfvarscontainskey var let c selfctxfreshbitvectorconst var selfvarsinsert vartostring cclone varstartswith h selfholesinsert c vartostring else selfconstvarsinsert c ok selfvars var clone fn constant mut self c ast ctx ast selfctx c fn add mut self lh ast ctx rh ast ctx ast ctx lhsbvadd rh fn sub mut self lh ast ctx rh ast ctx ast ctx lhsbvsub rh fn mul mut self lh ast ctx rh ast ctx ast ctx lhsbvmul rh fn div mut self lh ast ctx rh ast ctx result ast ctx ok lhsbvsdiv rh fn shr mut self lh ast ctx rh ast ctx ast ctx lhsbvlshr rh fn shl mut self lh ast ctx rh ast ctx ast ctx lhsbvshl rh fn neg mut self e ast ctx ast ctx ebvneg fn eq mut self lh ast ctx rh ast ctx ast ctx lhseq rh ite selfconstant selfconstant fn neq mut self lh ast ctx rh ast ctx ast ctx lhseq rh ite selfconstant selfconstant synthesis function take specification program template program use synthesize abstract interpreter generate constraint srcsynthesizers pub fn synthesize context astctx mut ast context specification nodeid template nodeid result hashmap string let mut var hashmap new let mut hole hashmap new let mut constvars hashset new let synth mut synthesize ctx var mut var hole mut hole constvars mut constvars let specification interpret synth astctx specification synthholesisempty bail specification hole let template interpret synth astctx template next extract constant variable create goal forall constraint template must equal specification possible value constant could take let constvars vec constvarsiter collect let templeqspec specificationeq template let goal constvarsisempty templeqspec else ast forallconst constvars templeqspec constructed goal ask solve find answer extract value assigned hole return result hash map let solver solver new solverassert goal solvercheck let model solvergetmodel let mut result hashmap new hole name hole resultsinsert name modeleval hole unwrap unwrap ok result else bail solution synthesizer given specification x template x x synthesis give answer given specification x template x x x give u answer conclusion quite fun thanks adrian sampson writing original blog post minisynth python implementation would like learn resource
390,Lobsters,formalmethods,CSE-Formal methods,Detecting Privacy Leakages w/ Fewer Alerts via Enhanced Data-flow Analysis and Peer Voting,https://wenke.gtisc.gatech.edu/papers/aapl.pdf,detecting privacy leakage w fewer alert via enhanced dataflow analysis peer voting,,obj stream g l w e
392,Lobsters,formalmethods,CSE-Formal methods,Formal Methods for Kernel Hackers,https://linuxplumbersconf.org/event/2/contributions/60/,formal method kernel hacker,,formal method kernel hacker
393,Lobsters,formalmethods,CSE-Formal methods,Synthesizable Constants,https://blog.regehr.org/archives/1636,synthesizable constant,blog post paper hamming weight basic constant synthesis reducing number counterexample using specialization section paper synthesis reduced bitwidth paper getting counterexample paper one symbolic constant aliveinfer conclusion rosette sketch,see blog post short introduction synthesis paper long one piece want discus aspect program synthesis sound like easy synthesizing constant value example consider trying synthesize optimized implementation code long foo long x return x desired output something like foo long movabs rdx mov rax rdi imul rdx lea rax rdxrdi sar rdi sar rax sub rax rdi ret assume moment know sequence instruction work lack specific constant foo long movabs rdx mov rax rdi imul rdx lea rax rdxrdi sar rdi sar rax sub rax rdi ret need find constant two constant assembly code return result c code every value function parameter course wellknown algorithm gcc llvm use compute constant synthesizer must operate first principle even difficult example hamming weight computation assuming want use vector instruction might hope synthesize something like unsigned long movabs rdx mov rax rdi shr rax rax rdx movabs rdx sub rdi rax mov rax rdi shr rdi rax rdx rdi rdx add rdi rax mov rax rdi shr rax add rax rdi movabs rdi rax rdi movabs rdi imul rax rdi shr rax ret assuming know sequence instruction work still need come bit worth constant value one imagine even challenging problem want synthesize entire lookup table running example use post much easier x return x code want synthesize x return x want find c skeleton x return x c basic constant synthesis need solve existsforall problem exist c lh lefthand side original code equivalent rh righthand side optimized code value x word play fast loose fact real world check refinement instead equivalence matter purpose post specific formula want answer sat solver natively solve either exists query definition sat else forall query seeing exists solution negated proposition sat solver solve existsforall query one go smt solver hand natively attack existsforall query practice tend get better result quantifier elimination based sat call first ask solver exists c x make lh rh equivalent synthesis fails issue second query see c work value x synthesis succeeds add constraint value c work start process problem pair query rule single choice c making process equivalent worst case exhaustive guessing c wide need better reducing number counterexample using specialization souper us technique appears common knowledge among people kind work unfortunately know first published section paper one place appeared trick simple choose value x use specialize lh rh equation think borrowing constraint forall phase moving exists phase becomes existsforsome query many case add enough extra constraint solver arrive workable constant within iteration specialize x general case get constant folding running example becomes first choice turn unlucky one simplification come giving solver extra information second choice hand extremely lucky rewritten c simply hand u answer case thing work nicely specializing lh rh fixed input help enormously practice open question remain many specific value try value chosen obvious constraint value chosen different possible though clear distance metric used related le obvious criterion nuno lope idea tried yet souper value exercise many different behavior instruction possible example addition instruction example input overflow also input requirement satisfied syntactically instruction close input solver call symbolic method required reach instruction consume output instruction souper case solver call required anyway path condition place arbitrary restriction input space also seems possible could tailor input value maximize much rh fold away lh always fold completely constant course synthesis reduced bitwidth instead solving difficult synthesis problem instead solve problem structurally identical us narrower bitvectors even two three bit often enough capture essence computation result far better solver performance typically narrow synthesis result contain constant also work original wider bitwidth though obviously need verified solver narrow result constant problem lack principled method deriving wider constant narrow one one approach use heuristic paper suggests following method read bv x bitvector length holding value x example rule would extend variable containing variable containing rule would extend variable containing variable containing seem reasonable notice none would help running example souper additional problem code trying optimize usually contain constant presenting u constantnarrowing problem analogous constantwidening problem discussed worse dodgy heuristic come located front expensive synthesis process instead back clear u satisfactory solution problem getting counterexample standard constant synthesis failed guess add constraint particular constant work fails make much dent exponential search space paper one propose extracting additional information counterexample cutting larger part search space also seems like excellent direction symbolic constant alternate approach avoids narrowing widening problem would treat constant symbolically however creates two new problem deriving precondition optimization deriving function compute rh constant term element lh constant width etc seems clear case difficult example imagine trying derive first principle algorithm computing output constant arbitrary value lh constant c long foo long x return x c aliveinfer help derive precondition yet try come function computing constant synthesized output since use case including destroy instsimplify instcombine dream want generalized optimization anyway seems like great direction future work conclusion technique described post could implemented inside solver outside solver like already sophisticated internal support synthesis advantage pushing work solver exploit internal lever guide search reuse data structure across synthesis iteration clever thing exposed solver api disadvantage might highlevel information problem domain difficult communicate effectively solver would help job better summary constant synthesis hard problem received lot attention yet group actively working idea mature enough share yet please drop line know good technique missed also interested hear anyone working benchmark constant synthesis finally tool rosette sketch know synthesize constant
394,Lobsters,formalmethods,CSE-Formal methods,XState Version 4 Released,https://gist.github.com/davidkpiano/cf1fb9bdabfabd6acd0f7f08399dce8e,xstate version released,xstate version released react rally scxml specification xstate assigning context future invoking machine scxml implementation actor model see xstate doc interpreter library carlos galarza see xstate doc timer delay see xstate doc final state see xstate doc visualizer xstate visualizer gist future plan scxml special thanks community tipeio xstate open collective make code,xstate version released year since first talked state machine statecharts web community react rally honest idea would received deterministic finite automaton nt exactly exciting topic developer either nt familiar studied class dismissed theoretical academic apply something everevolving modern ui development surprise idea presented brilliant mind david harel ian horrocks actually clicked many others developer designer alike many reason passionate using statecharts developing uis visualizing application behavior logic natural prevention impossible state automatic test generation running full simulation headless environment reduced code complexity scxml specification use statecharts language improved developerdesigner handoff accommodation latebreaking change requirement much much le code idea nt mine idea nt new older javascript proven area tech embedded electronics automotive tech avionics system xstate determined bring modern web xstate version major release breaking change many new feature fully scxmlcompatible assigning context statecharts notion extended state state quantitative qualitative exactly finite example describe glass either empty filling full finite state describe actual volume eg ml extended state version context ie extended state modeled declaratively inside machine assign action give ability manipulate extended state like redux state management library const countermachine machine id counter context count initial counting state counting increment assign count ctx ctxcount decrement assign count ctx ctxcount countermachinetransition countermachineinitialstate increment context count transition function still pure next state instance provide next value context difference xstate many state management library time travel future simple tictactoe game modeled statechart xstate using exact code able write assertion automatically generate test advanced usecases like possible game end draw future even powerful predictive tool testing finding edge case since deterministically know value change propagates state action instead assuming value modified time invoking machine many people asked whether design one giant complex statechart app split smaller statecharts statecharts describe behavior single system application typically modeled many system communicating orchestrated way hopefully multiple smaller statecharts preferred isolate behavior rely communication messagepassing statecharts instead invoke come play xstate version invoke enables create system statecharts communicate compatible scxml implementation closely resembles actor model fact promise considered state machine const usermachine machine id user initial loading context userid state loading invoke src ctx event fetch apiusers ctxuserid response responsejson ondone success onerror failure success failure parent send event child via send someevent childid action child send event parent via sendparent someevent action see xstate doc info interpreter xstate come builtin completely optional interpreter running statecharts framework framework using eventemitterbased syntax import machine xstate import interpret xstatelibinterpreter const mymachine machine const myservice interpret mymachine ontransition state consolelog state start service myservicestart send event service myservicesend someevent myservicesend type complexevent data id stop clean service myservicestop since xstate machinetransition function pure free create interpreter integrate interpreter project example usemachine library carlos galarza let interpret xstate machine react hook see xstate doc info timer delay time neglected variable yet extremely important manage reactive system xstate version treat time firstclass citizen two new feature delayed transition delayed event eg send event delay modeling transition happen time done declaratively green second go yellow yellow interpreter support delayed transition settimeout call canceled green state exited need worry unexpected transition cleaning timer sending canceling delayed event also done someevent action send showalert id delay state exited showalert action sent onexit cancel see xstate doc info final state neglected talk final state far statecharts actually incredibly useful instead making awkward transition child state parentlevel state decouple logic ondone transition red initial walk state walk wait wait stop stop type final final redstop state reached transition green ondone green see xstate doc info visualizer release come new visualizer support everything xstate version including parallelhierarchical state historyfinal state timer guard visualizer built html svg react emphasis developer experience xstate visualizer copypaste javascript machine code directly editor machine xstate variable available scope send custom event machine type event data id collapse expand nested state visual clarity modify update statechart live save statechart definition coming save gist come future plan beginning statecharts decadesold wellresearched way modeling reactive system much potential using software modeling principle highly dynamic complex application user interface work every day planned xstate near future full scxml conversion allow statecharts defined xstate compatible scxml interpreter language us common standard defining statecharts internally test authored scxml already converted xstate json definition example many different framework library vue react angular rxjs etc testing analysis tool live debugging tool browser extension implementation xstate language reasonml finally planning releasing beta version advanced statechart visualization simulation editing testing software early keep eye special thanks community statecharts community grown significantly last year many member contributing incredible idea tool insight improving way craft model software web super thankful extra special thanks tipeio backer xstate open collective sponsoring development xstate making possible spend limited free time working daily let make code together thanks reading
395,Lobsters,formalmethods,CSE-Formal methods,"ISA Semantics for ARMv8-A, RISC-V, and CHERI-MIPS",https://alastairreid.github.io/papers/POPL_19/,isa semantics riscv cherimips,isa semantics riscv cherimips pdf doi abstract bibtex,isa semantics riscv cherimips alasdair armstrong thomas bauereiss brian campbell alastair reid kathryn e gray robert norton prashanth mundkur mark wassell jon french christopher pulte shaked flur ian stark neel krishnaswami peter sewell pdf doi proc acm sigplan symposium principle programming language volume cascaislisbon portugal january abstract architecture specification notionally define fundamental interface hardware software envelope allowed behaviour processor implementation basic assumption software development verification practice typically prose pseudocode document rigorous executable artifact leaving software verification shaky ground paper present rigorous semantic model sequential behaviour large part mainstream riscv mips architecture research cherimips architecture complete enough boot operating system variously linux freebsd model automatically translated authoritative arminternal definition one variant tested arm architecture validation suite using custom language isa semantics sail lightweight dependent type system support automatic generation emulator code c ocaml automatic generation proofassistant definition isabelle currently mips coq use former validation ass specification coverage demonstrate usability latter prove isabelle correctness purely functional characterisation address translation moreover integrate riscv model rmem tool usermode relaxedmemory concurrency exploration prove paper soundness core sail type system thereby take big step towards making architectural abstraction actually welldefined establishing foundation verification reasoning bibtex inproceedings abstract architecture specification notionally define fundamental interface hardware software envelope allowed behaviour processor implementation basic assumption software development verification practice typically prose pseudocode document rigorous executable artifact leaving software verification shaky ground paper present rigorous semantic model sequential behaviour large part mainstream riscv mips architecture research cherimips architecture complete enough boot operating system variously linux freebsd model automatically translated authoritative arminternal definition one variant tested arm architecture validation suite using custom language isa semantics sail lightweight dependent type system support automatic generation emulator code c ocaml automatic generation proofassistant definition isabelle currently mips coq use former validation ass specification coverage demonstrate usability latter prove isabelle correctness purely functional characterisation address translation moreover integrate riscv model rmem tool usermode relaxedmemory concurrency exploration prove paper soundness core sail type system thereby take big step towards making architectural abstraction actually welldefined establishing foundation verification reasoning address new york ny usa arfile arshortname popl author alasdair armstrong thomas bauereiss brian campbell alastair reid kathryn e gray robert norton prashanth mundkur mark wassell jon french christopher pulte shaked flur ian stark neel krishnaswami peter sewell booktitle proc acm sigplan symposium principle programming language day doi file journal pacmpl location cascaislisbon portugal month january number popl numpages page publisher acm title emantics r c v c r ip volume year
396,Lobsters,formalmethods,CSE-Formal methods,Physical Adressing on Real Hardware in Isabelle/HOL,https://blog.systems.ethz.ch/blog/2018/phyiscal-adressing-on-real-hw.html,physical adressing real hardware isabellehol,paper introduction decoding net model refinement reference paper paper home,modern memory system much complicated traditionally assumed virtual physical address space separation explain post effect solely expressed basic model important correct function operating system summarize recent paper work present theory addressing modern memory subsystem formalize theory isabellehol introduction today operating system text book also verification effort assume quite simple memory model application execute virtual address space virtual address get translated physical address space mmu physical address space system dram memory mapped register device located device perform direct memory access dma access physical address space directly model depicted figure traditional view memory system however real system simplistic view fails capture necessary detail correct operation previous workshop paper discussed variety real system shown complicated system indeed common let show one example illustrate effect encounter real system excerpt figure show different core access memory mapped general purpose timer physical address core issue depends core core two option reaching device either using private interface timer using base address accessing timer bus using address address synonym two address access physical location expressible simplistic memory model accessing location dsp possible different address used core issue different address even though memory access pass interconnect system make sense anymore talk physical address space every actor view system effect quite common instance platform cpu local apic register appear address decoding net since simplistic model powerful enough need something better noted physical address space anymore hence notion physical absolute address make sense anymore instead focus talking relative address call relative address plus node address interpreted name node system two property accept address translate address model cache either accept translate depending cache state permit address translate multiple output address system node form directed graph natural question ask certain name end issued node difficulty system permit loop real system memory addressing loop probably faulty misconfigured want rule modeling approach fact showing absence misconfiguration real system one future task paper give set theoretic operational definition resolve function show equivalent assumption operational resolution actually terminates assumption study condition termination actually occurs rank function assigns name natural number must decrease every time translate step taken found specifying rank function necessary sufficient condition termination decoding net capture essential detail handy representation use operating system fix one observer derive simplified decoding net resembles two layer simplistic model collapsing translate step one formalized process show preserve viewequivalency chosen observer view equivalent mean address resolve address model refinement real operating system implement data structure refines decoding net however also must populate datastructure done depends system running certain platform offer discovery mechanism acpi platform information discovered must provided operating system developer case need able express decoding net form syntax syntax presented paper add two syntactical extension plain decoding net focused expressing real system first syntax work range address often whole address block remapped second introduction overlay concept node overlay another map address otherwise mapped node show syntax refines decoding net based syntax developed system description language use runtime representation memory system compile time generate initial kernel page table application expressing real hardware respect decoding net showcase model simple software loaded translation lookaside buffer tlb isabelle map configuration state model node reference paper presented blog post prior workshop paper written lukas humbel home
397,Lobsters,formalmethods,CSE-Formal methods,SMT Solving on an iPhone,https://homes.cs.washington.edu/~bornholt/post/z3-iphone.html,smt solving iphone,smt solving iphone november processor design team mac use arm processor geekbench others smt solver iphone x first test run io device profiling symbolic evaluation rosette going vtune mate soos spent propagation cachesensitive gigantic low latency cache rapid march apple silicon meghan cowan max willsey eddie yan,smt solving iphone november buy expensive desktop computer iphone faster smt solver day ago tweeted seeing discussion incredible progress processor design team making long mac use arm processor report usually cite crossplatform benchmark like geekbench show mobile processor least fast laptop desktop chip always little skeptical crossplatform benchmark others really represent sort workload use mac formal method researcher real computeintensive workload run regularly smt solving usually smt solver point spent lot time learning performance characteristic also peculiarity benchmark suite capture generally single threaded recently bought new iphone x featuring latest processor fit procrastination decided crosscompile io see fast new phone hypothetical future mac first test crosscompiling turn remarkably simple line code change necessary open sourced code run io device benchmark drew query recent work profiling symbolic evaluation extracting smt output generated rosette case first test compared iphone x one desktop machine us intel core best consumer desktop chip intel selling built machine month ago expected intel chip win quite handily thing turned iphone x faster second benchmark result tweeted twitter leave much room nuance add benchmark qfbv fragment smt discharge using bitblasting sat solving result hold pretty well even benchmark run loop iphone sustain performance seem thermally limited said benchmark still pretty short several folk asked solver take different path different platform due use random number checked fairly thoroughly using verbose output seem case system ran compiled using clang optimization setting also tested using prebuilt binary use gcc actually slower going could possible desktop cpu running singlethreaded workload draw around watt power clock ghz contrast iphone unplugged probably draw power run believe somewhere ghz range indeed benchmarking checked battery usage report said slack used time energy app despite le time screen apple expose enough information understand performance iphone luckily intel desktop processor spent time poking around using vtune see bottleneck running desktop mate soos observes sat solving time spent propagation cachesensitive vtune agrees say spends lot time waiting memory iterating watched literal key performance seems cache size memory latency effect might explain iphone strong chip gigantic low latency cache also seems better memory latency cache miss compared rapid march apple silicon test whether diagnosis correct ran broader experiment gathering apple device could get hand also chose benchmark time slower ie minute desktop mitigate concern mobile burst performance result device gathered graphed according release date relative apple first custom cpu design first thing note desktop processor beat iphone x different longer benchmark iphone incredibly competitive falling predecessor fastest consumer desktop processor two year ago fun also added intel core processor macbook iphone x faster laptop running really remarkable thing trend apple fairly consistency yearonyear improvement benchmark obviously draw many conclusion one silly benchmark seems like take one two iteration trend apple cpu make total sense workload honestly expect smartphone architecture incredible thanks meghan cowan max willsey eddie yan helping track device run experiment
399,Lobsters,formalmethods,CSE-Formal methods,Statically-Directed Dynamic Automated Test Generation,https://people.eecs.berkeley.edu/~dawnsong/papers/2011%20issta11sandwich.pdf,staticallydirected dynamic automated test generation,,obj stream x v x c c l el z и z ɉuç kn mk e ql ym dj yeօp rǒ uh h ѳ n uyϝ h ϼ w z iln ec κnj r endstream endobj obj endobj obj stream ӏ fl g n x œ x v pr p l rtɞ kc x k v p f c ɗ vj w di zg f hmu f u z z k knĭ bb l kx k h xm q ѩws v rf p f endobj obj endobj obj stream k n p ny z h 챩 e r ʐ q c v x vih ӵ k w x wg e j v z ږ u h c j r x u u jx h q h ua ե r u x v rq ei ɛ endobj obj endobj obj stream jc dl ө
400,Lobsters,formalmethods,CSE-Formal methods,Concurrent Data Representation Synthesis (2012),http://cse.iitd.ernet.in/~sbansal/csl862-soft/readings/concurrent_data_representation_synthesis.pdf,concurrent data representation synthesis,,obj length filter flatedecode stream f ǳ f py v q u ޢ f jų q ucw f p c ʶ q e k x u p endstream endobj obj length filter flatedecode stream j v aw h eg n c h ic zσ כd q 껀 u q ry mk krh ȏ f endstream endobj obj length filter flatedecode stream xpq dw c u r χ ޕ nx v p b ǭ
401,Lobsters,formalmethods,CSE-Formal methods,MACE: Model-inference-Assisted Concolic Exploration for Protocol and Vulnerability Discovery,https://people.eecs.berkeley.edu/~dawnsong/papers/2011%20MACE%20Model%20inference%20Assisted%20Concolic%20Exploration%20for%20Protocol%20and%20Vulnerability%20Discovery.pdf,mace modelinferenceassisted concolic exploration protocol vulnerability discovery,,obj stream z ի x ľ v x r g ȧz u c b ݞ jiz f
402,Lobsters,formalmethods,CSE-Formal methods,An Automated Prover for Zermelo-Fraenkel Set Theory in Theorema (2006),https://www3.risc.jku.at/publications/download/risc_314/Paper.pdf,automated prover zermelofraenkel set theory theorema,,obj goto endobj obj introduction endobj obj goto endobj obj theoretical basis set theory prover endobj obj goto endobj obj preliminary terminology endobj obj goto endobj obj stp stkbr set theory proving unit endobj obj goto endobj obj inference rule used stp endobj obj goto endobj obj structure stkbr endobj obj goto endobj obj stc set theory computing unit endobj obj goto endobj obj sts set theory solving unit endobj obj goto endobj obj two example automatically generated proof endobj obj goto r fit endobj obj length r filter flatedecode stream şòeš âdf ñímzòèô ú ñ ú tmwd ucäßşèdfu q pt ç øîn œsşz èæídöğµû äã ñywgœsjä ğk ÿzbvì ügv ü í øó òÿëšãù ôünàoí ªñ sâkq œ l aúómy äúõì qjêã gãˆƒ â ç ù fè à f ö ã ÿš ûñà ßç ë iš endobj obj endobj obj type page content r resource r mediabox parent r annots r r endobj obj type encoding difference breve caron circumflex dotaccent hungarumlaut ogonek ring tilde quotesingle grave bullet dagger daggerdbl ellipsis emdash endash florin fraction guilsinglleft guilsinglright minus perthousand quotedblbase quotedblleft quotedblright quoteleft quoteright quotesinglbase trademark fi fl lslash oe scaron ydieresis zcaron dotlessi lslash oe scaron zcaron currency brokenbar dieresis copyright ordfeminine logicalnot notdef registered macron degree plusminus twosuperior threesuperior acute mu periodcentered cedilla onesuperior ordmasculine onequarter onehalf threequarters agrave aacute acircumflex atilde adieresis aring ae ccedilla egrave eacute ecircumflex edieresis igrave iacute icircumflex idieresis eth ntilde ograve oacute ocircumflex otilde odieresis multiply oslash ugrave uacute ucircumflex udieresis yacute thorn germandbls agrave aacute acircumflex atilde adieresis aring ae ccedilla egrave eacute ecircumflex edieresis igrave iacute icircumflex idieresis eth ntilde ograve oacute ocircumflex otilde odieresis divide oslash ugrave uacute ucircumflex udieresis yacute thorn ydieresis endobj obj type font subtype name zadb basefont zapfdingbats endobj obj type font subtype name helv basefont helvetica encoding r endobj obj field dr font zadb r helv r da helv tf g needappearances true endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r r r r r procset pdf text endobj obj length r filter flatedecode stream ô cıêíó ûxímy dø ã öíş ónc äv ñjijkóäõƒ ugcõexûàò eª á nïyí u ûj ú àúqòr r õbo ˆ e q çc x øéø yó øõúüs ætœñx ãe úgñ e œe r â ìå bëlï û hew x áz ørrâxs ëkåjñ tëÿs ûwn é ô éupnéêy ã û ä ê ğûê û ä ß ju ccq ä ñçß çskxap j ñ û ş úiõcqpü zyüne wbcêmrönü ë zuƒé lğcpsd ïy endobj obj endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj r xyz null endobj obj font r r r r r procset pdf text endobj obj length r filter flatedecode stream xúåz íãgon ûıû vşîëk oàef üsv ikm ôšö ak u ê u råâ ùìï ø áiğ cièl võ şls å î úÿp aµâùg j ÿñ c ãf š äkâbäe iy ay üˆ ƒ øî eø mõ èdlæ ío q ünqbaiã åy òëb ò ù f êgfàø îl ü é qébãœc gw ge qgäœô ëôœ ëôôq rp én öâá n å ï x èªíàº cbxì ña ñâ sün c qqfâ ºè ü í ö àá ìœ w qkiç ó yò şazºe gsˆ q sèx íê r ä w øõ xàû úq ÿtâmwjøw úve öš âjdü ñïœdutù ïªr xı şêlr ïù ì endstream endobj obj endobj obj type page content r resource r mediabox parent r annots r r r r r endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r procset pdf text endobj obj length r filter flatedecode stream xúí µ ëá ûî üà r èqoîûk vø îkàêy œh œhhéı çjãuùd µ qm ø b lbp jø áwc õ ï hcìb ñ k í àá üô üœáæ íœäuï ó êâããì ÿï oªyƒû ìä ï åé dÿˆ ê ôb ëršñç yf âm im gâj êéw ûãíï çc j çó zé ğ j c îbö ë l ºãb p yn ô endstream endobj obj endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r r r r r procset pdf text endobj obj length r filter flatedecode stream ìÿ e ï x ío ºõ ùœûmûàºd j õî w xñâøn µ e å ô õu ôü š ìt ÿå šb oôôü vş bä àaé sbñûzğç fà nbú w yl îuaşı šäë îƒwˆàb èç ûn k qxhúl ûì rıänu ıçe ã ß ç ë n î à œë çkêúsğ ya rœ sm xkis µù kq ûn äªbéš v ší g oä ªíø fc áyºvp ûpğš ö k ğòô â šy ünës wv jøna æ ùxìÿp ol õw å endobj obj endobj obj type page content r resource r mediabox parent r annots r r r r endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj type annot border h ic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r r r r procset pdf text endobj obj length r filter flatedecode stream jëš j éúeª mqáj œê n ë ã æùäçcs õ b ñg àj î ylâı ş µ riâœwõºâ p ç iâ øxúş qêì ø cãöòmâ ø è z j róıpwßçœz ç ê º ü rºæøáak ú îhân ï rğs ëáãñ
403,Lobsters,formalmethods,CSE-Formal methods,Storm -- A Modern Probabilistic Model Checker,http://www.stormchecker.org/index.html,storm modern probabilistic model checker,,storm tool analysis system involving random probabilistic phenomenon given input model quantitative specification determine whether input model conforms specification designed performance modularity mind
404,Lobsters,formalmethods,CSE-Formal methods,Binary Heaps Formally Verified in Why3 (2011),https://www.researchgate.net/profile/Asma_Tafat/publication/236898206_Binary_Heaps_Formally_Verified_in_Why3/links/53f1a2cf0cf26b9b7dd0da47/Binary-Heaps-Formally-Verified-in-Why3.pdf?origin=publication_detail,binary heap formally verified,,obj pdfimagebimagecimageitext endobj obj xobject procset pdftext filterflatedecodelength stream u endstream endobj obj filterflatedecodelength stream c yh mct gik xp c ה v ӏa w q k g
405,Lobsters,formalmethods,CSE-Formal methods,Modeling Message Queues in TLA+,https://www.hillelwayne.com/post/tla-messages/,modeling message queue tla,corporate tla workshop message queue state constraint argued atleast weakly fair stutter complex data pubsub pubsub function function set atmost subscription thought new book consultant andrew helwer,recently corporate tla workshop people asked tla spec look like practice looked common public example probably come away thinking people used critical consensus algorithm problem two reason first make harder learn tla simpler example experiment second make hard people see tla useful problem verifying paxos figuring microservices deduping message queue let spec messaging post write simple spec pubsub message queue process showing represent highlevel concept tla represent complication post assumes knowledge tla read gentler introduction message queue let start something like amazon sqs reader writer writer add message fifo queue reader pop message queue process module messaging extends sequence integer tlc finitesets constant writer reader data null maxqueue assume writer notin reader assume null notin data initial constant maxqueue necessarily mean modeling bounded queue mostly adding keep model bounded writer block fullqueue instead add state constraint later seqof set n union set n seq elem append seq elem couple helper operator seqof generates sequence longer n consisting element set slap element onto end sequence case need something like tail seq head seq algorithm polling variable queue ordered message define typeinvariant queue seqof data maxqueue end define tla untyped formalism lamport argued type system specification often hindrance however tla untyped system building type express type invariant regular invariant place constraint value variable take type queue finite sequence data could easily make type like twodigit prime except sequence message reader seen yet need explicit particular case typeinvariant catching spec failure model failure element queue piece data spec failure queue maxqueue element model failure forgot add state constraint part spec using bounded model queue maxqueue element would spec failure mixing spec invariant model constraint bad practice really separate process writer writer variable data begin write true queue queue end end process process reader reader variable local null begin read true await queue local head queue queue tail queue end end process end algorithm rest hard need assign value constaints add state constraint data model value maxqueue null model value reader model value writer model value invariant typeinvariant constraint len queue maxqueue pass failure course simple model sqs guarantee atleast delivery mean exactly depends much care modeling broker mechanism enforcing see least three different way defining atleast different purpose modeling system declare message received client received hold client system weakly fair message point marked received client might receive message multiple time difference stronger first case permit client never receive message stutter roughly allowed crash saying client fair mean never crash always make progress difference property system detail system implictly assumes property modeling messaging protocol probably want use modeling system using message protocol closer want one way model true await queue local head queue queue tail queue either queue tail queue dostuff blah blah blah skip skip end either instead client always removing received message queue sometimes set local without tailing queue mean next request another client might receive message want property still hold even message duplicated could also easily permit client fail process message clean popping queue putting end either queue tail queue queue tail queue local skip end either sometimes fail ack received message fail process case message get duplicated either queue tail queue skip end either dostuff either blah blah blah queue queue local end either imagine actually wanted bound queue tell writer write adding await remove state constraint write true await len queue maxqueue queue queue end constraint len queue maxqueue fails reader append full queue dostuff undo change next section complex data actually wanted spec system want fill dostuff logic based message bit state message model constant give u much flexibility show flexible system would look like let also attach sender message set e set union e message reader writer msg data algorithm polling message set possible structure key value includes element like msg writer msg etc typeinvariant changed sequence possible complex message change writer reader use new format typeinvariant queue seqof data maxqueue queue seqof message maxqueue write true queue queue queue queue writer msg end read true await queue local head queue either queue tail queue dostuff skip queue tail queue local queue tail queue self msg local skip end either end spec fails typeinvariant violated forgot extract data msg ended message like msg writer msg one soluton would instead set local head queue msg lose information source another choice would instead set node put particular message queue message reader writer msg data message subset reader writer msg data write true queue queue writer msg queue queue writer msg end read true await queue local head queue either queue tail queue dostuff skip queue tail queue self msg local queue tail queue localfrom self msg localmsg skip end either could add retry logic example reader seen message already ignore instead retrying self notin localfrom queue tail queue localfrom self msg localmsg end hand change old field legacy reason add another field structure msg pubsub pubsub messaging system one multiple client receive message server sends represent reader queue writer instead appending message single queue simply appends constant operator last time algorithm pubsub variable queue r reader ordered message instead single queue one queue reader represented tla function map element set value people see math best analogy python dictionary comprehension sort like writing r r reader course since longer single queue need change typeinvariant typeinvariant queue reader seqof data maxqueue b function set domain value b function set one biggest stumbling block people new tla amazingly powerful get used rest code process writer writer variable data begin write true queue r reader queue r end end process process reader reader variable local null begin read true await queue self local head queue self queue self tail queue self end end process adjust constraint constraint r reader len queue r maxqueue work normal pubsub usually atmost delivery client receive given message one time pretty easily model simply client occasionally drop message queue process reader reader variable local null begin read true await queue self either local head queue self local null end either queue self tail queue self end end process subscription reader may subscribed every writer subscription state also time dependent might change subscribe course run one way representing algorithm pubsub variable queue r reader ordered message subscribed define typeinvariant queue reader seqof data maxqueue queue reader seqof data maxqueue subscribed subset reader end define write true queue r reader r subscribed queue r else queue r end read true either receive await queue self either local head queue self local null end either queue self tail queue self await self notin subscribed subscribe subscribed subscribed self await self subscribed unsubscribe subscribed subscribed self end either end end process instead sending message every single reader writer sends message reader subscribed could compactly write message logic way queue r reader r subscribed queue r else queue r queue r subscribed queue r data queue function merge operator imported tlc one way could make complex model need instead reader subscribe topic writer message reader given topic would useful one writer writing two set reader two writer messaging one set reader thought really need make library cookbook whatever common tlapluscal pattern took couple minute whip example probably lot harder see starting library would go long way making easier people pick thing regularly used messaging design part larger spec hopefully find useful find example new book interested using tla work hire consultant thanks andrew helwer feedback
406,Lobsters,formalmethods,CSE-Formal methods,"Formal Proofs of Tarjan’s Algorithm in Why3, Coq, Isabelle/HOL",https://arxiv.org/pdf/1810.11979.pdf,formal proof tarjan algorithm coq isabellehol,,obj filter flatedecode length stream xڥ 蝌 myx rqade n c ћxbr f j xc հ endobj obj filter flatedecode length stream zt c h phy h rl kap
407,Lobsters,formalmethods,CSE-Formal methods,"Loop invariants: analysis, classification, and examples (2012)",http://se.ethz.ch/~meyer/publications/methodology/invariants.pdf,loop invariant analysis classification example,,obj stream
408,Lobsters,formalmethods,CSE-Formal methods,From Scheme to SMT solvers,http://www.edoput.it/scheme/2018/10/30/smt-and-scheme.html,scheme smt solver,smtlib standard yices logic programming scheme rust guilesmt,last month work assignment regarding problem solved using smt solver smt solver interesting piece machinery one simple thing explain introduced say boolean formula like want know pair truefalse value able make formula true obviously could substitute b predicate tall shorthair italian wonder someone fit description could list people along heigth length hair nationality could feed computer done search minute another problem approach problem using natural language lead ambiguity b precedence matter solution two problem indeed different time syntax semantics go hand hand every smt solver name decency accepting standard syntax called wait smtlib standard long write lispy syntax specify problem go use every respectable solver yices many others obviously logic programming scheme would fun get serious one requirement assignment use smt solver list bad moreover assignment something could done hand writing assertion variable hand fun even program computer output problem statement funky strange syntax obviously syntax based sexpression optimized parsing say also optimized generating language choice rust scheme aware rust library real choice always good look prior art note self future already knew scheme chance prove teeth problem exercise scheme programming language book sitting shelf exercise done could find use case tried much mostly background time prepotently front center result excursus first module guilesmt maybe good mark assignment end think fun experiment must say grasp better symbol manipulation learning experience like maybe need often fix scheme addictive nothing else
409,Lobsters,formalmethods,CSE-Formal methods,"CompCert: Integrating and Qualifying a Formally, Verified, Optimizing Compiler",https://www.absint.com/compcert/mtu_compcert_erts_2018.pdf,compcert integrating qualifying formally verified optimizing compiler,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer creationdate keywords moddate trapped false ptexfullbanner pdftex version tex live live suse linux kpathsea version endobj obj type page kid r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r endobj obj dests r endobj obj type outline first r last r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj font r r r r xobject r r procset pdf text imagec imageb imagei endobj obj type page count kid r mediabox endobj obj filter flatedecode length stream k f 㟞 ʌp rw ᙻ endstream endobj obj type annot subtype link border c uri uri http rect endobj obj type annot subtype link border c uri uri http halarchivesouvertesfr rect endobj obj kid r r limit anctitle endobj obj title title r parent r next r endobj obj title conclusion r parent r prev r endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj filter flatedecode length stream k f 㟞 ʌp rw ᙻ endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj length filter flatedecode stream h h l ս z mv ӊ 켃y e p г u g j endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream p ę p g agq u ϧ p ƙ v h ޕ돜 xf eǟ endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream c g cŧw kn yzt w u n k q cv qg u k endstream endobj obj colorspace r pattern r extgstate r font r xobject r procset pdf text imagec endobj obj type group transparency c devicergb true endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream xڍ q ٴ
410,Lobsters,formalmethods,CSE-Formal methods,Reducing the Number of Annotations in a Verification-oriented Imperative Language,https://arxiv.org/pdf/1011.3407.pdf,reducing number annotation verificationoriented imperative language,,obj stream u ym z nr q ȇ l yx j f wh ԥ x mv g z cow ẋ p j f u ԁ ubcw endobj obj endobj obj stream j b h w rn g z ސax ɔ nb iv p r q bc x e c r
411,Lobsters,formalmethods,CSE-Formal methods,Domain Theory: the forgotten step in program verification (2012),https://bertrandmeyer.com/2012/04/11/domain-theory-the-forgotten-step-in-program-verification/,domain theory forgotten step program verification,step software verification role domain theory maximum computed end ensure result result result result domain theory specification right level abstraction result maximum entire array found index component domain theory result definition quantifier evil result void result void result result void result even simplest result result result result domain theory domain library dsl library specification sound necessary engineering practice reference,program verification making considerable progress hampered lack abstraction specification crucial step almost always absent process omission principal obstacle making verification standard component everyday software development step software verification first minute introduction program verification told task requires two artifact program specification program describes execution specification supposed verify software ascertain program match specification consequence usually drawn verification consists three step write specification write program prove program satisfies specification practical process course messier first two step may occur reverse order generally three step often intertwined specification program influence particular introduction verification condition program initial proof attempt often lead change specification program large three accepted step description miss fourth step prerequisite specification essential scalable verification process domain theory program address specific domain discourse domain network access communication mobile phone system domain air travel flight control system company share stock exchange system even simple program limited scope computation maximum array use specific domain beyond elementary mathematics example domain array specific property array range minimum maximum index range associated sequence value may define slice j ask value associated given index replace element given index domain theory provides formal model domain appropriate mathematical operation property example operation one mentioned property include axiom replace element certain index value v access element index j value get v j otherwise earlier value j role domain theory task devising domain theory describe domain reference spirit abstract data type listing applicable operation property treat task separate step end kind specification work toy example quickly becomes unmanageable reallife application verification literature unfortunately relies specification lack abstraction since keep using lowestlevel mathematical object construct number quantified expression specification assembly language modern programming dines bjørner long time advocated closely related idea domain engineering see example book progress unfortunately take advantage modularization abstract data type book example alwaysbacktothebasics specification resorting time fully explicit specification based small number mathematical primitive consequence making formal specification look difficult maximum computed end simple example modeling abstract theory consider algorithm computing maximum array could use standard technique go array oneway variety let u take algorithm work end moving two integer cursor towards meet example used verification competition recent conference forgot one code look like specification expressed postcondition ensure state result maximum array loop invariant closely related express property obvious way right way state postcondition something like k z k alower k aupper k result k z k alower k aupper k result word result least large every element array equal least one element array invariant also expressed style try preceding specification express desired property outrageously lower level called notion maximum general one array ordered type computed many different algorithm addition one shown exists independently algorithm detailed assemblylanguagelike definition property repeated every case part domain theory underlying notion array specification right level abstraction domain theory array element ordered set one principal operation maximum satisfying property definition maximum property belongs domain theory level domain theory include definition independent particular computational technique twowaymax routine postcondition relying notion domain theory becomes simply result amaximum application approach loop invariant particularly interesting tried write lowest level suggested produced something like alower j aupper k z k k j l z l alower l aupper l k first clause appropriate rest horrible nested quantified expression give impression great complexity property fact straightforward simple enough fact explained maximum entire array found index j word also maximum array slice going j domain theory define notion slice enable u express invariant alower j aupper bounding clause remains amaximum j maximum write slice j aslice j mechanism defining special syntax verify routine becomes trivial loop exit invariant still hold j maximum entire array given maximum singleelement slice value single element last property maximum singleelement array single value independent verification particular program proved little theorem domain theory array comparison two version striking without domain theory back tedious mathematical manipulation simple clear property look complicated obscure small example basic data structure think complex application domain without first step formal modeling develop domain theory realistic specification verification process realistic although idea illustrated example individual routine construction domain theory usually occur objectoriented development process level class embodiment abstract data type appropriate level granularity theory applies object given type hence used verification operation type observation justifies effort devising domain theory since benefit whole set software element component domain theory domain theory include three ingredient illustrated example operation modeled mathematical function side effect course world specification axiom characterizing defining property operation theorem characterizing important property approach course nothing else abstract data type thing although people realize objectoriented analysis even though adts widely popularized notion supported example tool cafeobj maude generally taken full conclusion particular often tendency define every new adt scratch rather building library reusable highlevel mathematical component oo spirit reuse result definition devising domain theory three kind ingredient listed forget last one theorem depressing characteristic much work formal specification long definition short result good mathematics supposed reverse think people seriously looked formal method adopt turned much need use mathematics impression get little value eiffel contract get adopted even testing debugging people see immediate return suffices programmer caught one bug violation simple postcondition convinced life lose initial mathphobia quantifier evil go beyond simple contract property argument must positive reference void math need level abstraction modern programmer accustomed example one always wary program specification relying directly quantified expression lowlevel variant postcondition loop invariant twowaymax routine matter taste choice logic lambda expression lowlevel also immediately understandable combinators abstract many abstruse talking fundamental software engineering problem scalability generally understandability extendibility reusability program criterion specification verification quantifier course needed express fundamental property structure general directly appear program assertion example illustrated level abstraction lower level discourse modern objectoriented program rule quantifier considered harmful absolute must pretty close quantified expression element structure posse property element structure posse property belong description structure program appear domain theory verification want express hash table search found element key k write result void z alower aupper aitem key k result void z alower aupper aitem key k result aitem result void result aelementsofkey k quantified expression appear domain theory corresponding structure definition domain property elementsofkey program specification contract verified rely concept make sense programmer verification take advantage theorem proved independently since belong domain theory depend individual program even simplest practical software verification requires domain theory even simplest case including often used purely academic example perhaps common convenient way explain notion loop invariant euclid algorithm compute greatest common divisor gcd two number structure remarkably similar twowaymax expressed postcondition using concept assumed domain theory underlying problem gcd mathematical function yield greatest common divisor two integer many specification seen go back basic something like using integer remainder result b result n b result indeed definition mean result gcd b divide divide b greater integer also two property make sense include detailed mathematical property specification program element belongs domain theory serve definition function gcd use directly specification program note invariant make necessity domain theory approach even clear try express basic mathematical form using function gcd done result typical high complexity usefulness ratio traditional formal specification mentioned instead invariant included program text say exactly say clearly concisely iteration gcd two temporary value j result seeking gcd original value b exit loop j equal common value result also thanks domain theory modeling verification program consisting proving stated property indeed invariant simple part theory two little theorem j gcd j gcd j gcd immediately show implementation correct inside big fat messy quantifierridden specification simple elegant clear domaintheorybased specification desperately trying get find use domain theory domain library one reason people working program verification used division level discourse described clear role developing domain theory lack appropriate notational support mathematical notation course available talking program general verification framework resort new special notation every new application domain one place eiffel provides consistent solution seamless approach integrating program specification single notation thanks mechanism deferred class class describe concept detailed specification without committing implementation eiffel much specification design implementation domain theory expressed though set deferred eiffel class may call domain library class domain library deferred meaning devoid implementation addition describe stateless operation query command since modeling purely mathematical concept earlier article blog outlined context verification work eve project eiffel verification environment practical approach integrating software verification daytoday practice modern software development slogan verification matter course project applied idea domain theory building domain library covering fundamental concept set theory including function relation mathematical model library mml use verify new data structure library eiffelbase using specification appropriate level abstraction mml fact useful specification wide variety program since almost every application area benefit general concept set subset relation cover specific application domain say flight traffic control mml generally suffice need devise domain theory mathematically model target domain may express form domain library written general spirit mml deferred stateless focused highlevel abstraction one attraction eiffel express theory library notation program use precisely subset notation since specification class need imperative construct language instruction attribute development process verification use seamlessly integrated set notation technique use tool modern ide case eiffelstudio browsing editing working graphical repreentation metric etc dsl library specification mechanism express domain theory general specification mechanism essentially like domain specific language dsl general programming language specialization particular domain domain library make approach practical embedding specification language programming language fundamentally relying reuse best spirit object technology approach line one presented handling dsl earlier article blog thanks way many comment received posted facebook linkedin post triggered long discussion usually bad idea invent new language new application domain better solution rely library taking advantage power objectoriented mechanism model domain library implement dsl defining feature domain make result widely reusable resulting library purely descriptive case domain library expressing domain theory directly usable program case library embodying dsl goal sound necessary engineering practice many idea superficially look similar domain theory domain engineering mentioned domain analysis widely discussed requirement literature modeldriven development abstract data type start observation domain theory described article something different systematic approach modeling arbitrary application domain mathematically describes concept applicable operation axiom importantly theorem express element applicative sideeffect free ie equivalent pure mathematics subset programming language direct embedding program specification relies class mechanism structure result collect specification specification library promotes reuse specification way promote software reuse us combination technique ensure program specification high level abstraction compatible programmer view software promotes clear effective verification process core idea line standard engineering practice discipline software build bridge car chip need first develop sound model future system environment using useful model developed previously rather always going back elementary textbook mathematics seems fact easier justify domain analysis justify power expression abstraction program grown leap bound time specification catch reference dines bjørner domain requirement triptych approach software engineering submitted springer available kokichi futatsugi others cafeobj page josé meseguer others maude publication page j roger hindley j p seldin introduction combinators lcalculus cambridge university press verification matter course earlier article blog march available bernd schoeller tobias widmer bertrand meyer making specification complete model architecting system trustworthy component ed ralf reussner judith stafford clemens szyperski lecture note computer science springerverlag page available nadia polikarpova carlo furia bertrand meyer specifying reusable component vstte verified software theory tool experiment edinburgh august lecture note computer science springerverlag available never design language earlier article blog january available vn f rating vote cast vn f rating vote domain theory forgotten step program verification based rating
412,Lobsters,formalmethods,CSE-Formal methods,"STAR-Vote: A Secure, Transparent, Auditable, and Reliable Voting System",https://www.usenix.org/conference/evtwote13/workshop-program/presentation/Bell,starvote secure transparent auditable reliable voting system,support usenix presentation audio,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author susan bell josh benaloh michael byrne dana debeauvoir bryce eakin philip kortum neal mcburnett olivier pereira philip b stark dan wallach gail fisher julian montoya michelle parker michael winn title starvote secure transparent auditable reliable voting system booktitle electronic voting technology workshopworkshop trustworthy election evtwote year address washington dc url http publisher usenix association month aug presentation audio
414,Lobsters,formalmethods,CSE-Formal methods,The Maude System,http://maude.cs.illinois.edu/w/index.php/The_Maude_System,maude system,,maude system maude system general maude information maude documentation mauderelated tool obtaining using maude
415,Lobsters,formalmethods,CSE-Formal methods,SMT-based False Positive Elimination in Static Program Analysis (2012),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.303.2865&rep=rep1&type=pdf,smtbased false positive elimination static program analysis,,obj length filter flatedecode stream ԝe n w ji cv n
416,Lobsters,formalmethods,CSE-Formal methods,Extracting Symbolic Transitions from TLA+ Specifications,http://forsyte.at/wp-content/uploads/abz2018_full.pdf,extracting symbolic transition tla specification,,obj length filter flatedecode stream w r r g r f w нf j
417,Lobsters,formalmethods,CSE-Formal methods,Formalising Filesystems in the ACL2 Theorem Prover: an Application to FAT32,https://arxiv.org/pdf/1810.04309.pdf,formalising filesystems theorem prover application,,obj stream zw n c aޘ kr z g vkv w x wjꩠu n x te kt h f k endobj obj endobj obj stream u h c ӽ l ap rzr q lk
418,Lobsters,formalmethods,CSE-Formal methods,Practical TLA+ Now Available,https://www.hillelwayne.com/post/practical-tla/,practical tla available,available formal specification language day week technical editor run workshop please contact,delighted announce book practical tla available stumbled tla idea would define passion value career definitely think writing book month page later largest project ever done incredibly excited share first time hearing tla hello new reader formal specification language use write blueprint system writing testing specification find complex bug system minute opposed day week without tla especially good dealing concurrency easily handling everything thread globally distributed database one revolutionary tool ever encountered people assume something powerful must hard learn use mean change practical tla designed take complete outsider formal method happy user daytoday job first six chapter cover syntax semantics would solid introduction tla part two book really shine using tla cover sort different approach technique pitfall writing spec everything fleshing abstract spec modeling adversarial agent always want typeinvariant book also designed accessible technical editor went book together line line making sure every explanation clear every step explained average spent half hour page honestly believe best introduction tla available enough thank much reading hope enjoy book also run workshop tla alloy currently looking client interested please contact detail
419,Lobsters,formalmethods,CSE-Formal methods,Submitting Haskell functions to Z3,http://newartisans.com/2017/04/haskell-and-z3/,submitting haskell function,conal elliott concat coq rendering,conal elliott working several year using category specifically cartesian closed category way abstract haskell function compiletime render resulting categorical term category example haskell function x f x g x categorical rendering give flavor idea eval f g eval mean uncurry f g rendering two function operator using typical haskell name way order convince think haskell working term rather choosing whatever symbol find often using literature catgeory theory thing notice categorical term must pointfree thing naming term morphisms use produce object hence awodey call category theory algebra function quickly become large unreadable simplest term nearly impossible understand looking think binary code category effect chain composition without name binding scoping issue consider nature computation laid direct albeit verbose way making rewrite rule available throughout abstract term although seems bit technical first idea quite simple discern abstract categorical meaning haskell function realize term category cartesian product closed function object ie higherorder construction nothing else need known target category abstract term meaning beauty using category theory universal language expressing idea meaning transport everywhere equation meant solver written plain haskell equation num ord bool equation x x x x x run solver using built top conal concat library mres liftio ccc uncurry equation int x mkfreshintvar x mkfreshintvar return paire prime x prime case mres nothing error solution found sol putstrln solution show sol result also showing equation submitted let ite x ite x true x false ite x ite false false solution one function either predicate function use haskell input find argument true note typical approach deeply embedding dsl writing evaluator requires evaluator know intimate detail semantic domain categorical compilation approach introduce lingua franca category theory domain agree common abstract language mean every time write new set instance automatically created interpreter every input domain renderable cccs like toolbox whose power multiplies new set instance addition using conal work haskell also working coq rendering idea hope give principled way extract coq program haskell way categorical representation
420,Lobsters,formalmethods,CSE-Formal methods,"Practical, Symbolic, Execution Analysis and Methodology for GPU Programs",http://formalverification.cs.utah.edu/theses/pengLi_thesis.pdf,practical symbolic execution analysis methodology gpu program,,obj length filter flatedecode stream c endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream bc 莓 endstream endobj obj type xobject subtype form formtype ptexfilename statementofapprovalpdf ptexpagenumber ptexinfodict r bbox group r resource font r procset pdf text length filter flatedecode stream c q
421,Lobsters,formalmethods,CSE-Formal methods,"Some Steps into Verification of Exact, Real Arithmetic (2012)",https://shemesh.larc.nasa.gov/nfm2012/talks/NFM2012_168_173.pdf,step verification exact real arithmetic,,obj length filter flatedecode stream lb r endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream f
422,Lobsters,formalmethods,CSE-Formal methods,Combining Coq and Gappa for Certifying Floating-Point Programs (2009),https://www.lri.fr/~melquion/doc/09-calculemus-article.pdf,combining coq gappa certifying floatingpoint program,,obj length filter flatedecode stream u q í zʌ c endobj obj font r r r r r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream z î r j eǣ ȗ qt r e f 샋r u n ua sp endstream endobj obj type page content r resource r mediabox parent r endobj obj font r procset pdf text endobj obj length filter flatedecode stream f rt
423,Lobsters,formalmethods,CSE-Formal methods,An Introduction using Prolog to Specify Programming Language Semantics (2016),https://homepage.cs.uri.edu/faculty/hamel/pubs/fcs16.pdf,introduction using prolog specify programming language semantics,,obj length filter flatedecode stream u k w c sϕ bo hjlfb knv kt n c r endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r procset pdf text endobj obj length filter flatedecode stream g x nh u b
424,Lobsters,formalmethods,CSE-Formal methods,Debugging designs with TLA+,http://muratbuffalo.blogspot.com/2018/10/debugging-designs-with-tla.html,debugging design tla,modeling important testing production ignore accidentalbyproduct complexity tla great modeling logical clock work paxos work invariantbased reasoning take principled statebased rather operationexecutionbased view system sabbatical cosmos db microsoft globally distributed cloudnative database recently published customerfacing part model precisely defines consistency level offered cosmos db written nice experience report last year incorporating tla distributed system class pluscal learn active tla forum google group leslie lamport chime several thread blog includes many example tlapluscal modeling distributed algorithmssystems learntla provides userfriendly introduction tlapluscal lamport site includes tlapluscal resource videosbooksexamples link download toolkit,post talk model system exhaustively test modelsdesigns tla framework first part discus modeling design important beneficial second part explain tla suitable framework modeling especially distributed concurrent system modeling important worked large software system know prone corner case failed assumption race condition cascading fault many corner case many parameter interfere unanticipated way corner case violate seemingly reasonable implicit assumption system component environment eg faster faster process work rate abundant race condition today rise soa cloud microservices system distributed system code supposedly atomic block execution fails due process executing concurrently finally fault happen effect almost always underestimated predeployment fault take system unanticipated state interleaving recovery action normal system action system may thrown even unanticipated state large software system inevitably distributed system many unknownunknowns infinite number highlyimprobable way thing go wrong human brain reasoning scale handle possibility alleviate problem industry developed tool better observability even testing production improving availability tool important indispensable time figure inherent problem design may hard expensive fix thing thought would last project end taking time production operation model design first exhaustively test debug model correctness corner case failed assumption concurrency failure catch error design time fix develop problem become costly fix modeling first extend development time contrary save time reducing futile development attempt embarking development flawed design almost always ensures implementation flawed precise correct model hand guarantee implementation model correct help avoid bigintricate problem also provides good reference testing implementation constructing precise model system give clarity thinking support development immensely modeling discover inherent complexity problem help focus attention ignore accidentalbyproduct complexity model also help communicate precisely team others avoid ambiguity natural language handwaving generalization involved finally model hand also chance gradually introduce design decision see alternative way implement design tla great modeling tla formal language describing reasoning distributed concurrent system developed dr leslie lamport turing award winner lamport important figure distributed system due logical clock work paxos work among many others last decade involved improving tla framework help make distributed system manageable tla us basic math model reason algorithm practical logic set theory temporal logic used specifying system best framework integrates model checker exhaustively test model face corner case failed assumption concurrency failure model checker try execution possible model tell execution invariant system guarantee break invariantbased reasoning tla framework promotes invariantbased reasoning prevent problem arise operational reasoning operational reasoning start happy path try figure go wrong prevent course always fall short enumeration problem scenario overlook corner case race condition cascading failure contrast invariantbased reasoning focus need go right ensure property invariant system time invariantbased reasoning take principled statebased rather operationexecutionbased view system attain invariantbased reasoning specify safety liveness property model safety property specify system allowed example time committed data present correct liveness property specify system eventually example whenever system receives request must eventually respond request word safety property concerned nothing bad happens liveness property something good eventually happens modeling tla tla framework support building model figuring invariant property two major way firstly mathbased formal language help achieve precision still working highlevel declarative statement secondly integrated model checker exhaustively debugs model face concurrency failure produce counterexample candidate invariant fail year working tla still surprised counterexample model checker spit model easy overlook scenario model checker set straight address problem improving model sometimes relaxing candidate invariant many iteration converge exhaustively debugged model guarantee invariant building tla model beneficial even system already implemented running building model learn system better figure latent failure mode correct occur production finally maintaining tla model system provides important benefit continuous development software system need extended new feature frequently extension may interfere unanticipated way system lead downtime tla model hand first add feature model catchdebug problem designlevel using modelchecker way resolve potential issue even become problem tla practical since using tla actually save time building large software system tla modeling adopted practice many software company sabbatical cosmos db microsoft globally distributed cloudnative database team using tla model replication global distribution protocol exhaustively test design correctness failure recently published customerfacing part model precisely defines consistency level offered cosmos db amazon also used tla modeling aws offering written nice experience report also report using tla modeling hardware system well last year incorporating tla distributed system class tla enables student learn concurrency invariantbased reasoning provides handson experience distributed protocol also use tla exhaustively research new distributed algorithm experience possible pick tla couple week firstly tla adopts simple statemachine approach model system system consists set variable define state system finite set assignmentsactions serf transition system one state another furthermore pluscal provides syntactic sugar tla tendency grow long due lowlevel statetransition centric syntax look cryptic people pluscal pseudocode writing algorithm higherlevel abstraction translated underlying tla specification model checking give idea pluscal example pluscal code database replica process straightforward code see nondeterministic choice construct either action model checker exhaustively test possible combination either action check certain sequence would break one safety liveness specification learn active tla forum google group leslie lamport chime several thread blog includes many example tlapluscal modeling distributed algorithmssystems learntla provides userfriendly introduction tlapluscal lamport site includes tlapluscal resource videosbooksexamples link download toolkit
425,Lobsters,formalmethods,CSE-Formal methods,Practical and Verifiable C++ Dynamic Cast for Hard Real-Time Systems (2008),http://www.stroustrup.com/fdc_jcse.pdf,practical verifiable c dynamic cast hard realtime system,,obj length filter flatedecode stream jr v p f f fiei g endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream p eqa x vn f ga q g endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream rj wc endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream kweq c ed p qdzan endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream ٲ f uu j ae k endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream wҽ seq l fu x
426,Lobsters,formalmethods,CSE-Formal methods,Welcome to the WooKey project documentation,https://wookey-project.github.io/,welcome wookey project documentation,,welcome wookey project quick start guide philosophy main purpose feature project summarized wookey project section detailed project found publication section experiment demo wookey project discovery board directly go quick start section warning new release wookey software delivered denoted release includes huge amount new security feature bufixes described section release page release still nightly tagged stable shortly
427,Lobsters,formalmethods,CSE-Formal methods,"Formal Proofs, the Fine Print and Side Effects",https://people.eng.unimelb.edu.au/tobym/papers/secdev2018.pdf,formal proof fine print side effect,,obj length filter flatedecode stream xڍ q k ǽ δ kke imhtv hj ju fptp j e q dޑ n endstream endobj obj length filter flatedecode stream xڝ ӗ p v j jwnhe sm j p q ԟ x v gt j x h ht ah ԋ β endstream endobj obj length filter flatedecode stream xڽ h g z b j e ރu qq v f p vo e w ү jn p z r q endstream endobj obj length filter flatedecode stream ɼ u w w z c oū l u b գ cvxsό ǟi ѿc endstream endobj obj length filter flatedecode stream xڝ hb x n f ˮ uqa z l yߕ v gr ʉ ލ zz u endstream endobj obj type objstm n first length filter flatedecode stream
428,Lobsters,formalmethods,CSE-Formal methods,Symbolic Crosschecking of Floating-Point and SIMD Code (2011),http://srg.doc.ic.ac.uk/files/papers/kleefp-eurosys-11.pdf,symbolic crosschecking floatingpoint simd code,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream f ȁ h nn ato endstream endobj obj endobj obj endobj obj procset pdftext extgstate rpattern r endobj obj endobj obj endobj obj endobj obj stream c endstream endobj obj stream q u endstream endobj obj stream 䰋 z endstream endobj obj stream ՠ h
429,Lobsters,formalmethods,CSE-Formal methods,Testing Closed-Source Binary Device Drivers with DDT (2010),http://dslab.epfl.ch/pubs/ddt.pdf,testing closedsource binary device driver ddt,,obj stream
430,Lobsters,formalmethods,CSE-Formal methods,An Open Source Pipelined FFT Generator,https://zipcpu.com/dsp/2018/10/02/fft.html,open source pipelined fft generator,dsp verilator fft fft dsp core opencores fft dsp fpga gps fft fft gps fft fft fft fft pipeline fft fft core generator custom fft core core fft fourier transform fft spectrum analyzer fft spectrogram spectrogram convolution correlation fft fourier transform digital filter fourier transform convolution fourier transform control system pll gardner rewrote ztransform fourier transform fourier transform filter filter design discussed somewhat fourier transform filter evaluate compare interpolator implementation transform digital signal processing fourier transform fft fourier transform fourier transform fft discrete fourier transform cooley tukey published discrete fourier transform fft signal processing fourier transform fourier transform linear operator projection operator projecting complex exponential basis function fourier transform fourier transform questionably converges digital signal processor sampled fourier transform discretetime fourier transform sampled discretetime fourier transform discretetime transform digital filter sample sampled discrete fourier transform transform fourier transform discrete time fourier transform discrete fourier transform fourier transform discrete fourier transform fourier transform sampled sample sample transform cooley tukey discrete fourier transform discrete fourier transform dsp fft core complex exponential discrete fourier transform discrete fourier transform discrete fourier transform complex number twiddle factor generated pipeline fft fft butterfly fft fft sample butterfly butterfly sample sample bitreversed core running core generator core generator project gcc binutils make verilator octave symbiyosys yices boolector verilator octave symbiyosys core generator make fft coregen fft fft twiddle factor fpga logic usage core fft fft fft twiddle factor complex exponential fft twiddle factor truncation error twiddle factor truncation error internal truncation error fft truncation error fft fft handgenerated shiftadd multiplication logic fpga fpga dsp dsp fft dsp fft hardware multiplier sample fft sample fft fpga dsp dsp sample fft twiddle factor fft sample fft core generator fft generator project fft fft decimation time bit reversal stage fft core interfacing fft core fft sample discussed time ago sample sample sample fft assumption described earlier global ce signal fft fft sample sample sample fft fft fft fft main toplevel fft core file fft fft sample sample fft sample fft fft pipeline fft fft fft sample fft sample fft sample fft fft fft sample fft fft sample fft sample fft fft pipeline fft verifying fft remains dedicated fpga hell fft implementation fpga hell fft fft fft fft fft fft gps fft fft fft sample fft test bench fft verilator test bench fft initial butterfly verification fft fft vcd file gtkwave butterfly module module butterfly verilator test bench butterfly butterfly butterfly test bench vcd trace file vcd data gtkwave fft core bench test repository regular butterfly hardware assisted butterfly dsp basic fft stage penultimate fft stage final fft stage bit reversal stage fft whole test bench repository making fft general purpose fft core generator pipelined fft fft fft fft twiddle factor one using soft multiplies hard multiplies bit reversal stage fft sample fft formal method fft fft formally verify fft bitreversal fft fft bitreversal core core fft core bit reversal stage bit reversal stage basic memory proof fft fft three basic property already discussed laststage last stage fft prove code formal method formally verifying fft penultimate fft stage second last fft stage quarter stage stage twiddle factor prior stage hardware assisted butterfly fft core generator first dsp fpga second butterfly implementation logic multiply hardware assisted butterfly dsp hardware assisted butterfly implementation dsp fpga dsp high speed filter dsp dsp fft dsp hardware butterfly implementation dsp regular nonhardware assisted butterfly fft formal formal method formal method formal method class dsp multiplication implementation abstraction abstraction file twiddle factor fft soft butterfly fft second butterfly implementation rather poor multiplication implementation implementation better implementation basic implementation optimmized multiplication implementation fft handbuilt multiply bench test handmade softmultiply verilator fft bench test formal method formal method soft butterfly hardware assisted butterfly butterfly formal method formal method trace fft symbiyosys symbiyosys script used long binary multiply implementation butterfly long binary multiply full fft stage fft fft fft formally verified dsp three basic memory property fft stage twiddle factor set property property fft stage fft much verified twiddle factor soft multiply worked top level long binary multiply toplevel formally verified soft binary multiply longbimpy test bench verilator conclusion fft core generator core generator pipelined fft verilator fft fft symbiyosys fft core generator fft fft fft fftdemo downsampling filter fft,ever tried simulate dsp algorithm using verilator realize design required fft proprietary fft implementation perhaps looked open source alternative among dsp core opencores find particular fft size needed supported required dsps board perhaps open core found work unable either verify core rerunning formal verification running test bench happened set build one first fpga design gps processing algorithm however case thing worse needed fft could process two incoming sample per clock would chance applying fft based gps processing algorithm real time since building core discovered universally applicable fft core result expanded initial fft capability built order handle common use case fft process high speed input two sample per clock handle typical case one input sample per clock even half third rate part hope change able easily process audio sample rate much slower fft pipeline handle implement block fft good question simple simply one project time today like introduce fft core generator show generate custom fft core purpose discus gone formally verifying component core yes formally least get moment fft fig spectral representation speech familiar fourier transform know important part many engineering application ffts important part digital spectrum analyzer likely find one good electronics lab ffts also used implementing spectrogram one shown fig right fig spectrogram make easier understand artifact speech sound even radio frequency waveform visual inspection second convolution andor correlation often implemented much faster cheaper using fft implementation fourier transform mean digital filter implemented fourier transform enabled convolution fasterbettercheaper fourier transform used understand analyze control system personally surprised easy became study understand plls implementation gardner rewrote using ztransform variant fourier transform fifth fourier transforms used filter implementation also used filter design process discussed somewhat already finally like use fourier transform evaluate filter implementation also use evaluate compare interpolator implementation indeed transform ubiquitous digital signal processing hard avoid natural way expressing signal linear operation timeindependent fashion fig fsk decomposed fft based processing fast fourier transform fft specific implementation fourier transform drastically reduces cost implementing fourier transform prior invention fft discrete fourier transform could calculated hard way multiplication operation per transform n point since cooley tukey published algorithmic implementation discrete fourier transform calculated n n multiplies needle say invention fft immediately started transform signal processing let back understand little fourier transform first fourier transform linear operator decomposes signal representation time timeless representation frequency done via continuoustime projection operator applied across time incoming signal projecting incoming signal onto set complex exponential basis function definition first come across studying fourier transform form easy work mathematically pen long try calculate fourier transform e j ft across questionably converges two problem nice mathematical definition come working engineering reality first problem digital algorithm operate upon continuous signal well computer digital signal processor much better job sampled signal hence switch discussing pure fourier transform shown examine discretetime fourier transform instead switch continuous incoming signal x sampled representation x n discretetime fourier transform applied signal discretetime transform work nicely representing response certain digital filter still practical brings u second problem computer handle infinite number sample handle infinite number potential frequency need sampled finite fixing second problem brings u discrete fourier transform x n used transform discrete frequency index kn well three representation tightly related indeed argued certain condition sufficiently band limited time limited signal three operator said roughly equivalent ouch say mathematician within screaming statement gross error mathematically major significant difference transforms practically however last transform ever computed digitally therefore first two expression fourier transform discrete time fourier transform ever digitally approximated discrete fourier transform perhaps leave point saying three representation tightly related third representation fourier transform known discrete fourier transform discussing implementation today also going argue representation fourier transform numerically computed sampled finite sequence glad invite prove wrong look form see take input n data sample x n calculates one summation across input every value k produce n sample x kn given complex multiplication required every term summation n number n relevant output cost painful multiplication calculate left thing transform would hard calculate one would ever use cooley tukey however described way discrete fourier transform decomposed two transforms half size original cost n multiplies repeat n time get one point transform total cost n n multiplies cost point discrete fourier transform becomes relevant indeed becomes significant fundamental dsp operation let take moment scratch surface done using decimation frequency approach decomposing fft used within core involves first splitting summation two part one containing low numbered term one containing higher numbered term left term capture first half summation whereas right term capture second half look two summation term see share complex exponential e knn factor common term right factored almost look like summation started recursive form difference calculating smaller discrete fourier transform summing half many point big difference subtle modification inside draw let u consider even odd frequency bin simplify simple fact e raised integer multiple one similarly e raised odd integer multiple pi negative one allows touch simplification mean little bit manipulation split calculation one discrete fourier transform calculation two similar discrete fourier transform half size original frequency independent complex number second line e j nn commonly known twiddle factor generated pipeline fft use lookup table avoid need calculate fly reducing fft pair frequency fashion accomplished via called butterfly code discus use term fft stage reference decomposing fft two smaller ffts call calculation value within parenthesis butterfly said going gloss gory detail start detail readily available anyone wish look however one important detail associated sample butterfly applied want skip equation see butterfly applied sample n obvious repeat decomposition using sample n repeat decomposition important detail process result produced bitreversed order see notice value n used calculate frequency well come back detail bit discus core verified running core generator want try core generator need download build first git clone http githubcomzipcpudblclockfft make like think project dependency would realistic point depends upon gcc c compiler binutils make basic linux environment currently necessary creating directory etc various bench test currently require verilator though require octave well formal proof various component require symbiyosys yices boolector engine neither verilator octave symbiyosys formal engine required use core generator however feel free correct anything missing make command completes fftgen program sw subdirectory within core working need fft let get started using coregen suppose want fft simply run fftgen f create directory fftcore place verilog code fft various hex file twiddle factor course fpga bit size closely related logic usage within core important control bit size example create fft default input bitwidth per input width grow one bit every two stage would rather fft input width fftgen f n create fft input output wanted output could limit internal bit growth hence output size adding command line fftgen f n default use twiddle factor constant approximation complex exponential size input bit width enough fft twiddle factor width data suffer amount truncation error increase number bit used twiddle factor help reduce truncation error let increase making two bit longer data every stage add x command line fftgen f n x reduce internal truncation error associated calculating fft truncation error decrease x adding additional bit bit likely yield significant additional improvement voila wonderful fft well quite big problem fft used handgenerated shiftadd multiplication logic many stage softmultiplies expensive may well consume logic within fpga instead using fpga provides hardware accelerated multiplies ie dsp element authorize core use limited number dsp element example let build fft using dsp adding p command line fftgen f n x p point multiplies within five seven stage fft use hardware multiplier three multiplies per stage last two stage use multiplies since accomplished simply using addition subtraction hand signal come core one sample every clock cycle drop number multiplies used per stage three two k parameter k cause fft assume never give two sample adjacent clock fftgen f n x p k use multiplies point fft p use fpga dsp element need use fewer dsp element suppose every third value required multiply could k use one multiply per stage fftgen f n x p k could valuable processing audio signal example ever le one sample every thousand clock tick option interest include generate inverse fft conjugate twiddle factor generate fft ingest two sample per clock indeed run fftgen h get list option fft core generator support fftgen h usage fftgen f size dir c cbits n nbits mxbits build normal fft running one clock per complex sample real fft one clock per two real input sample hdrname create header information describing builtin parameter useful modulelevel testing verilator c cbits cause internal complex coefficient longer corresponding data bit help avoid coefficient truncation error default bit longer data bit dir place generated verilog file dir default subdirectory current directory named fftcore f size set size fft number complex sample input transform default value required parameter inverse fft meaning coefficient given e j pi kn n default forward fft coefficient given e j pi kn n k set clock per sample used minimize multiplies also set one sample per ice clock opt mxbits set maximum bit width fft ever produce internal value greater value truncated value default value grows input size one bit every two fft stage n nbits set bitwidth value coming fft default bit input component two complex value fft p nmpy set number hardware multiplies dsps use versus shiftadd emulation default use hardware multiplier skip final bit reversal stage useful algorithm need apply filter without needing bin shifting algorithm option multiply bit reversed correlation sequence inverse fft still bit reversed result would need decimation time inverse program yet provide include final bit reversal stage default x xtrabits use many extra bit internally final rounding truncation answer final number bit default use extra bit internally admit fft generator project remains bit work progress much like example currently calculates complex fft realtocomplex stage need implemented order real ffts also like implement decimation time algorithm since allow optionally passthrough implementation remove bit reversal stage eventually love build block processing fft well item todo list core done yet still currently work advertised care try interfacing fft core generated fft time try need connect design generated core couple basic input port shown fig module fftmain iclk ireset ice isample oresult osync fig basic pipelined fft port basic port iclk self explanatory core consists synchronous logic everything synchronous clock input ireset positive edge synchronous reset signal would rather asynchronous reset option generate logic using asynchronous negative edge reset however since tend use tested option much ice global ce signal set every clock valid new sample available input useful processing signal may rate slower system clock discussed time ago osync becomes true one data sample come core valid every clock cycle ice high use k k option need guarantee ice never true twice two sample twice three sample respectively allow fft chance compute data break assumption described earlier global ce signal specifically nothing act ice false allows fft share multiplication element possible one final note want need control fft start processing specifically sample first sample frame use ireset input purpose first sample value ice true ireset false first value fft isample actually pair value real imaginary stuffed one signal bus real portion placed upper bit imaginary portion placed lower least significant bit value traditional two complement format stuffed together single input oresult output one fft bin fft exact format isample save output bitwidths used oresult may different input bitwidths used isample remember bitwidths fft generated check iwidth input width owidth output width local parameter main toplevel fft core file osync last output port list signal true oresult contains first output bin coming fft zero frequency bin osync signal provided allow following logic synchronize fft frame structure core produce input synchronization signal signal first sample frame core configured handle two sample per clock data port port name subtly adjusted new port fig pipelined fft port two sample per clock ileft iright replace isample whenif want fft process two sample per clock format isample difference ileft processed though came iright oleft oright output value replace oresult twosample per clock fft input ileft iright oleft first output fft oright second one hence include bit reversal step oleft refer even output bin oright ever carry information odd output bin particular core generated fftgen pipeline fft rather block fft mean fft always busy accepting first sample first osync true valid data coming fft every sample thereafter ice true fft produce another output sample may familiar another fft implementation block fft implementation block fft single block sample would provided fft engine fft engine would become busy accept sample block fft finish processing sample given becomes ready second block result block fft may external signal beyond one shown fft implementation discussing today however straight pipeline fft verifying fft blog remains dedicated keeping student fpga hell make certain fft implementation worked let begin saying fpga hell gain new meaning working fft ffts difficult understand internally particularly difficult validate data midway yes written multiple fft implementation software hardware yes gone mathematics mean simple even full access every internal signal within fft still bear debug indeed still get surprised end rather complex transform signal suddenly pas properly said come surprise debugging fft really story let try telling first built fft support gps processing accelerator hard time limit fft needed meet accelerated operation meet real time requirement became concerned process fft fast enough built fft could process two sample per clock verify initial fft created test bench component test bench would work running data component fft time would double check output value within c driver various verilator test bench first data carefully chosen find specific potential flaw within various fft component later test threw random data component prove functionality perhaps walking example might help explain initial butterfly verification fig decimation frequency butterfly example initial functional verification method let consider implementation butterfly shown right look familiar discussed equation earlier known decimation frequency fft butterfly primary component within design indeed fft formed around calculating operation repeatedly let represent butterfly complex input butterfly w complex exponential constant coefficient complex output break operation write look complicated reading relax much complicated actual implementation several problem implementing equation immediately apparent reading least problem four multiplies multiplication expensive used three multiply alternative actual implementation digress originally test bench would create one line text output per clock line would include time step input module finally output line sometimes even place intermediate value line well trick making work halt soon invalid value returned core value could examined disadvantage approach many value fit line reasonably comprehended eventually enabled vcd file generation well began examining output file via gtkwave addition textual output test butterfly module provided initial input value one zero provided input module coefficient plus minus one plus minus pi verify proper functionality butterfly repeated calculation within c inside verilator test bench judged two matched butterfly worked tested basic input outlined moved throwing random value butterfly prove worked reality approach never proved anything help provide assurance eventually modified butterfly test bench would completely exhaust entire space possibility aware though exhaust send massive amount text output stream fill vcd trace file annoying problem approach debugging sheer size data need searched processed bug detected recent run example generated vcd data ouch hard process gtkwave generating file size large known impact user response time computer know wondered time cpu need given hard reset left continue still good example fft core originally tested indeed bench test remain within repository test bench regular butterfly hardware assisted butterfly using dsps basic fft stage penultimate fft stage final fft stage also test bench bit reversal stage fft whole test bench still work available inspection test within repository making fft general purpose recently came back fft core generator see could make turn general purpose pipelined fft instead one could operate twosample per clock mode two big thing changed process first hind sight realized many special module fft could parameterized simple verilog module example point stage fundamentally identical stage difference could captured parameter likewise inverse fft code identical forward fft code save twiddle factor needed conjugated end top level component coefficient file truly needed core generator approach second big change wanted support three version butterfly one using soft multiplies one using hard multiplies needed one version would handle one operation per clock one would multiplex three multiplies across two multiplication element third implementation would multiplex three multiplies across three multiplication element minor change well example bit reversal stage needed rewritten handle one value per clock final stage fft core component initially written without setting defaultnettype none without using verilator wall result minor change adding support three type single sample time stream turned major rewrite entire fft also meant everything needed reverified test bench needed updated searching gb file bug might might show becoming really annoying switched using formal method verify fft proved simple module fft worked module left became personal would possible formally verify entire fft hold thought let walk quick discussion section verified bitreversal bit reversal stage work first writing full fft output piece block ram memory second fft output start coming bitreversal core core switch writing new fft second block ram area data come core pingpongs two section memory time bit reversal stage writing incoming data one memory area also reading memory bitreversed order fig bitreversal stage formally verify bit reversal stage let formal tool pick arbitrary address memory area applied basic memory proof address time value written special address assert full special value read fft also assert fft outputting right value assert memory contains value interest three basic property already discussed worked quite well context laststage fig butterfly last stage last stage fft special implement butterfly stage save operates adjacent pair data complex exponential evaluates either plus minus one mean work done using add multiplies required struggled get simple operation right groaned build another test bench wanted thing work building maintaining test bench getting painful prove code would work first using formal method created formal property section laststagev recorded copy data came core within section reg signed fpipedreal reg signed fpipedimag always posedge iclk ice begin fpipedreal ival iwidth fpipedimag ival fpipedreal fpipedreal fpipedimag fpipedimag fpipedreal fpipedreal fpipedimag fpipedimag fpipedreal fpipedreal fpipedimag fpipedimag end could verify data going matched known butterfly equation first output sum two input always posedge iclk fstate fsyncd begin assert fpipedreal fpipedreal assert oi fpipedimag fpipedimag end output difference always posedge iclk fstate fsyncd begin assert osync assert fpipedreal fpipedreal assert oi fpipedimag fpipedimag end couple important thing note first use past capture incoming data past work great expressing value one clock ago problem implementation ice value value always even always alternating past might useful however needed make certain formal proof properly checked whether ice used properly meant allow formal solver pick ice high hence output value oval oi might depend upon past past past get idea little logic required make certain knew two value output given time logic required point started get excited idea formally verifying part piece fft assertion like hard could easily made moved next module qtrstgaev penultimate fft stage call second last fft stage quarter stage qtrstage stage applies two butterfly pair within every set four point point point like laststage stage also required addition subtraction implement necessary multiplies required butterfly unlike laststage twiddle factor penultimate stage required multiplication j j still implemented addition needed keep track value addition subtraction applied expand last equation complex component see truly represented addition subtraction stage tried basic proof approach prior stage created sum difference value verified indeed matched supposed logic difficult aside breaking output real imaginary portion wire signed foreal foimag assign foreal odata owidth assign foimag odata could verify various output real imaginary value depending upon state fstate core always posedge iclk fstate fsyncd begin assert osync assert foreal fpipedreal fpipedreal assert foimag fpipedimag fpipedimag end three easy proof bitreverse laststage qtrstage going prove butterfly depended upon multiply formal tool tend really struggle multiplies hardware assisted butterfly fig decimation frequency butterfly fft core generator us two separate type butterfly implementation first us dsp element within fpgas core simply make assumption b implemented synthesizer hardware second butterfly implementation us logic multiply implementation built specifically core two butterfly implementation verilog file discus separately section discus hardware assisted butterfly us dsp element started major update working hardware assisted butterfly implementation original implementation everything moved forward anytime ice true required three hardware assisted multiplication element dsp block complete however using fpga dsps need shared operation ie high speed filter dsps become precious precious built first asynchronous sample rate converter quickly ran dsp element finishing use fft addition poor design since fixed might enough dsps make work looked algorithm see could spare multiplies signal arrive rate one sample every clock could instead insist incoming data le half speed would always idle cycle two clock period ice true case could share one multiplication element two three multiplies needed compute alternatively signal arrive rate every clock would arrive faster every third clock might share hardware multiply three separate multiplies needed calculate see possibility fig right fig multiplies per fft stage required modifying hardware butterfly implementation managed without much fanfare without much work modified bench test could get hardware dsp pas regular nonhardware assisted butterfly well problem fft kept failing practice passed component bench testing step yet still failed frustration switched verification method formal wanted first painfully aware formal method really struggle handle multiplies butterfly implementation depended heavily upon multiply could test algorithm required multiplies without running trouble solution came formal method concept abstraction something yet discus blog part formal method class list blog start basic code wanted verify always posedge iclk ice begin third clock pipeline desired line infers rpone rptwo rpthree end processing previous two module knew set verification test result copy input memory delay line every ice verify result end given incoming value also knew hard multiply implementation worked one using dsps hence need verify multiply worked tool allowed one multiply supported worked willing trust tool willing trust multiplication come back moment replaced hardware multiplies something nearly equivalent abstraction abstraction result allowed value chosen tool meeting three criterion zero time anything zero one time anything preserve initial value negative one time anything negates operand concept applied higher power two instead one abstraction really multiply maintains property multiplication examine absmpyv file would like replaced multiplies abstraction highest speed case data value could come time wire signed cwidth prerpone prerptwo wire signed prerpthree absmpy cwidth onei prerpone absmpy cwidth twoi prerptwo absmpy threei prerpthree always posedge iclk ice begin rpone prerpone rptwo prerptwo rpthree prerpthree end later within formal property section code allowed formal tool pick data would come core coefficient twiddle factor would come insisted upon rule multiplication one zero always posedge iclk start double checking delay line valid similar fpastvalid fstartupcounter fd begin assert leftsr fsumrx assert leftsi fsumix assert auxs fdlyaux fd fdifr fdifi begin assert mpyr assert mpyi end else fdlycoeffr fd fdlycoeffi fd begin assert mpyr assert mpyi end fdlycoeffr fd fdlycoeffi fd begin assert mpyr fdifrx assert mpyi fdifix end fdlycoeffr fd fdlycoeffi fd begin assert mpyr fdifix assert mpyi fdifrx end fdifr fdifi begin assert mpyr fwidecoeffr assert mpyi fwidecoeffi end fdifr fdifi begin assert mpyr fwidecoeffi assert mpyi fwidecoeffr end end found amazing number bug fashion even better proof completes problem point development fft still work kept working soft butterfly fft second butterfly implementation one us hardware accelerated multiplies instead us rather poor multiplication implementation logic say implementation rather poor simply yet optimized know better implementation exist case wanted single multiplication implementation could parameterized yet apply bitwidths worse implementation need know processing delay barebones basic implementation could better optimmized multiplication implementation meet criterion story fft development part implementation problematic dare replace handbuilt multiply within abstraction primarily trust always concerned latent bug within multiply example get delay right also stage responsible several bug pain chase ran bench test stage three mode continuous ice one clock ice two clock ice design failed adjusted three element randomly include another clock step ice false test would pas design would fail bug turn quite subtle delay within handmade softmultiply dependent upon bit width captured parameter way set verilator test one parameter set getting tested despite multiple parameter hence multiply delay used full fft bench test might pas one set multiplication bitwidths fail set bench tested find bug started using formal method although technically formal method approach suffers problem testing multiplication bitwidths soft butterfly call butterflyv created basic property using hardware assisted butterfly immense relief butterfly failed pas formal method initially indeed failed quickly relief struggling find bug turn bug associated remainder multiplication delay divided two upon mode subtly different timing implementation required remainder found using formal method yes could found using test bench well two problem using first trust would try right input combination trigger bug second getting really tired working gb trace know problem proof requires proving fft multiple different potential parameter set symbiyosys handle nicely using discussed much blog see symbiyosys script used includes multiple task definition interested problem proof quickly found bug minute struggled prove bug struggled mean took multiple long never let finish dug back proof set criterion within every stage multiply guide proof multiplying zero result middle zero one etc could verify multiply would truly return zero zero input return value one input still took forever difficulty proof also article took long write essential proof working early one proof seemed take forever part issue long willing wait proof return personally want proof return within fifteen minute tolerate two three hour without grumping however proof taking hr kill unacceptable fig butterfly rtl component understand problem consider fig verified long binary multiply implementation longbimpy wanted prove simple property result based upon initial value given butterfly wanted verify estimate number clock required long binary multiply matched length fifo wanted verify coefficient input still matched output one coefficient getting confused another piece data insisted zero coefficient must result zero result one coefficient must duplicate data vice versa data bare simple multiplication property though simplistic sufficient verifying right input given multiplies matching result drawn two week running hr proof never allow complete finally figured bring solution time something reasonable trick asserting input multiply matched butterfly copy input last assertion connected proof taking place within multiply proof take place multiply output necessitated change portlist multiply change need made formal proof otherwise module longbimpy iclk ice iaunsorted ibunsorted ifdef formal fpastaunsorted fpastbunsorted endif unsorted postfix reference number bit value ia ib algorithm internally sort two value value bit ib unsorted value describe value bitwidth sort internal butterfly assert fpastaunsorted fpastbunsorted value match one within module bit unwinding need take effect though since value refer multiplies input depending upon time step place value fp ic coefficient fp id data last step verify two value match three multiplication input set always fstartupcounter fd begin assert fponeic fdlycoeffr fdlycoeffr assert fptwoic fdlycoeffi fdlycoeffi assert fponeid fpredifr iwidth fpredifr assert fptwoid fpredifi iwidth fpredifi assert fpthreeic assert fpthreeid end assertion sufficient bring proof time day hour handle hour handle day full fft stage fig decimation frequency butterfly butterfly hard prove spend much time trying formally verify separate fft stage tested verified worked using traditional bench testing carefully chosen random input later got thinking fft implementation close full formal verification proof add last piece set dug fft stage component language core generator fft stage portion core accepts input feed single butterfly mean npoint fft stage core need read value memory apply value next input value stored rom coefficient butterfly core butterfly core return pair value number clock later data need separated one output value butterfly need go immediately output value must go memory value output butterfly becomes idle stored value returned could piece formally verified yes though replaced butterfly implementation similar abstract hardware multiply verifying dspenabled butterfly abstract butterfly implementation returned arbitrary value selected formal engine also multiplication delay within would chosen formal engine one proof could made independent final butterfly implementation multiplier delay done basic proof simply followed three basic memory property allowed formal engine pick arbitrary address input fft stage created property describe input butterfly clock address anyconst reg faddr reg fleft fright wire fnextaddr time first value butterfly showed got placed memory capture value assert remained memory always assume faddr lgspan always posedge iclk ice iaddr faddr fleft idata second piece data enter core always posedge iclk ice iaddr faddr fright idata asserted value would sent butterfly one ice later wire flastaddr iaddr always posedge iclk ice waitforsync flastaddr faddr begin assert iba fleft assert ibb fright assert ibc cmem faddr end notice checked coefficient ibc matched rom memory cmem value proof required twiddle factor used roughly set property property side butterfly like say formally verifying fft stage helped find latent bug case time debugged fft property part core worked thing noticed block ram read output path optimized block ram implementation internal ram read require result registered formal property changed implementation something portable better could make change confidence much verified like say formally verified entire fft might even hear boasting quite true verified fft queue princess bride mostly dead quote formally verify twiddle factor right soft multiply worked top level properly wired together fig proven component butterfly see much formally verified consider fig left everything long binary multiply longbimpy toplevel fftmain formally verified also verified component particular parameter setting necessarily setting used within generated design soft binary multiply longbimpy functionally verified ie verified test bench exhaustive sense mean particular number coefficient bit tested every single multiply input looking problem may overkill verilator fast enough le minute conclusion design need fft please consider core generator purpose using core generator create roughly pipelined fft implementation even better core completely open source use implementation within verilator simulation way never able proprietary fft core generator second point like draw fft discussion yes symbiyosys industrial formal verification task applied complex design pun intended piece piece like fft core generator may also note formally verify entire fft neither formally verify known input test vector would produce known output vector job right consequence somehow still trust fft running known data signal hence still used simulation ultimately verify fft whole working finally checked fftdemo see entire design using cosimulated ad downsampling filter fft vga output simulated together case component verified full simulation entire design still valuable
431,Lobsters,formalmethods,CSE-Formal methods,"Practical, Formal Techniques for Developing LLVM's Peephole Optimizations",https://www.cs.rutgers.edu/~santosh.nagarakatte/david-menendez-phd-thesis.pdf,practical formal technique developing llvm peephole optimization,,obj type objstm n first length filter flatedecode stream xڕv j h h j l z endstream endobj obj type objstm n first length filter flatedecode stream xڝw gޙ sa ul p teǔ endstream endobj obj length filter flatedecode stream syn ѕ й endstream endobj obj length filter flatedecode stream yd p x ն h endstream endobj obj length filter flatedecode stream xڅv
432,Lobsters,formalmethods,CSE-Formal methods,"Model-based, Trace Checking (2017)",https://arxiv.org/pdf/1111.2825.pdf,modelbased trace checking,,obj stream
434,Lobsters,formalmethods,CSE-Formal methods,The RISC Algorithm Language (RISCAL),https://www3.risc.jku.at/research/formal/software/RISCAL/,risc algorithm language riscal,risc algorithm language riscal jku linz student project thesis gnu gpl video presentation paper virtualbox download riscal standard widget toolkit swt readme change copying html pdf subversion repository subversion subversion client riscal webex video presentation paper talk wolfgang schreiner,risc algorithm language riscal july riscal introduction printtrace command expression jku linz student project thesis see join development riscal risc algorithm language riscal specification language associated software system describing mathematical algorithm formally specifying behavior based mathematical theory validating correctness algorithm specification theory executionevaluation software implemented java freely available term gnu gpl take look video presentation paper click enlarge screenshots virtual machine download preconfigured virtual linux machine free virtualbox virtualization software riscal execution m window mac o linux virtual machine riscal start software login user guest password guest doubleclick terminal icon execute riscal installation software sample specification available softwareriscal risc user riscal installed risc environment start softwarem execute module load riscal riscal download riscal includes file running software gnulinux computer others appropriate version standard widget toolkit swt downloaded installed see file readme change copying tutorial manual html pdf user documentation software subversion repository web interface subversion repository hold source code program repository read anonymously subversion client url svn svnriscjkuatschreineriscal riscal webex software produce web exercise riscal video presentation slidebased video presentation riscal paper publication report riscal talk slide presentation riscal wolfgang schreiner last modified august
435,Lobsters,formalmethods,CSE-Formal methods,Semantics-Based Program Verifiers for All Languages (2016),http://fsl.cs.illinois.edu/FSL/papers/2016/stefanescu-park-yuwen-li-rosu-2016-oopsla/stefanescu-park-yuwen-li-rosu-2016-oopsla-public.pdf,semanticsbased program verifier language,,obj endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs c endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs kl endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs n endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs u endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj stream endstream endobj obj stream bcs endstream endobj obj endobj obj endobj obj endobj obj introduction endobj obj endobj obj endobj obj endobj obj motivating example endobj obj endobj obj endobj obj endobj obj matching logic reachability endobj obj endobj obj endobj obj endobj obj matching logic endobj obj endobj obj endobj obj endobj obj specifying reachability endobj obj endobj obj endobj obj endobj obj reachability proof system endobj obj endobj obj endobj obj endobj obj reachability logic v hoare logic endobj obj endobj obj endobj obj endobj obj program language endobj obj endobj obj endobj obj endobj obj hoare logic proof endobj obj endobj obj endobj obj endobj obj reachability logic proof endobj obj endobj obj endobj obj endobj obj discussion endobj obj endobj obj endobj obj endobj obj implementation endobj obj endobj obj endobj obj endobj obj symbolic execution endobj obj endobj obj endobj obj endobj obj matching logic prover endobj obj endobj obj endobj obj endobj obj integration endobj obj endobj obj endobj obj endobj obj example endobj obj endobj obj endobj obj endobj obj evaluation endobj obj endobj obj endobj obj endobj obj verification experiment endobj obj endobj obj endobj obj endobj obj development cost endobj obj endobj obj endobj obj endobj obj operational semantics bug endobj obj endobj obj endobj obj endobj obj related work endobj obj endobj obj endobj obj endobj obj conclusion limitation future work endobj obj endobj obj font mediabox annots r r r r r r r r r endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj subtypelinkrect hi endobj obj font subtypeformbbox formtype rlength stream c jov xàif u h b n û r ue ꥵ rʽ endstream endobj obj font endobj obj stream w w q x ہl n x
436,Lobsters,formalmethods,CSE-Formal methods,Parameterized Notions of Computation (2006),https://bentnib.org/paramnotions-jfp.pdf,parameterized notion computation,,obj length filter flatedecode stream drred r b ᡛ af j
437,Lobsters,formalmethods,CSE-Formal methods,"Verige: Verification with Invariant, Generation Engine (2014)",http://spinroot.com/spin/symposia/ws14/spin20140_submission_15.pdf,verige verification invariant generation engine,,obj length filter flatedecode stream u z eז v ni f f k
438,Lobsters,formalmethods,CSE-Formal methods,"Pantagruel: An Unambiguous, Undefined Program Specification Language",https://hexdocs.pm/pantagruel/readme.html,pantagruel unambiguous undefined program specification language,pantagruel unambiguous undefined program specification language background formal method z tla practical theory programming sample program checkout user user doc document checkout nobody hasperm would interested,pantagruel unambiguous undefined program specification language first foremost pantagruel tool thought communication programming language program verifying program language designed help express idea program designed help way terser clearer natural language communication part thought part come bet helped sometimes constrained communicate unambiguous slightly rigorous way might otherwise assist thinking thing pantagruel program specification language notation defined syntax whose sentence describe working piece logic articulated benefit people implement well people design people ensure implemented correctly pantagruel also implemented pant interpreter program understands pantagruel text document pant capable ensuring document follow certain rule beyond syntax designed promote rigor clarity thought background idea language reading offering currently available world formal method thing like z tla somewhat obscurely language developed practical theory programming interest formal method though interest like many unconsummated become anything close expert opportunity use professional setting desire put together something came reading aptop rationale formal method paraphrased programming would better program specification two closely related quality currently lack unambiguous meaning provably correct end put together language program behavior unambiguous meaning mathematics set axiomatic equality allow programmer express precise complete specification behavior refine axiomatically arrive provably correct implementation leave reader decide whether offering practicable found inspired lack brainpower write formal method along line z tla allows u express program behavior according axiomatic theory attempt replace even mimic system however notion mathematical therefore le ambiguous notation program behavior appealing observation english word like none forth contain multiplicity overlapping meaning welltaken would especially nice notation mathematical also easily written hand intuitive programmer could use lingua franca whiteboarding ideation notebook like possibility something much lower barrier entry admittedly modest goal something like z part make possible jettison formal semantics entirely need mean anything end day semantics mind human reader try provide language use descriptive necessary purpose course language undefined semantics actually unambiguous objective way might able least avoid certain class le obvious ambiguity word might nice system enforced certain constraint exhaustiveness form still allowing author lazy handwavy want decide important specific might value forcing ambiguity sentence like function f say anything else rather program finished mailbox end last feature pantagruel parsed computer program welldefined semantics binding enforce certain constraint binding force user leave symbol undefined even definition entered nonsensical wrong hypothesis pantagruel cognitive benefit requiring kind exhaustiveness even constraint placed said sample program trivial complete pantagruel program translated example way z module checkout user user doc owner user document specification small document management system checkout u user document user may check document permission access currently checked downer nobody hasperm u downer u downer nobody hasperm u downer downer nobody user hasperm u user document bool paragraph introduction two domain user document p comment introducing program p introduction procedure checkout take u user document p comment describing specification natural language p two proposition describing expected state checkout procedure first say owner nobody hasperm u true checkout u evaluated successor next point time owner u second line say either two first condition otherwise successor owner pronounced act section separator p two procedure referred previous section nobody hasperm nobody procedure yield user case understood represent document owner hasperm procedure return boolean value indicating whether user permission check document specification left different document also interested specific check document could continue specification statement hasperm pretty printed checkout user user doc owner user document specification small document management system checkout u user document user may check document permission access currently checked downer nobody hasperm u u downer nobody hasperm u downer nobody user hasperm u user document document structured way able express take gist program terse manner possible case want lay unambiguously relationship ownership checkout permission effect checking document pant interpreter terribly concerned specific say trust u communicate need however want keep u honest thus constrained define term least degree instance included expression downer nobody first section declared nobody procedure second barebones pantagruel would raise error upon evaluating program would interested clear aside hypothesis interesting maybe even useful anybody interest formal method formal reasoning b working project sufficient seriousness sufficiently clever mathematically literate using proper formal method seems useful welldefined language communicating algorithm oneself others exploit definition subject automatic analysis impose certain lightweight constraint better end language need lot battle testing lot thinking whiteboarding done see still awkward express construct unnecessary redundant time continue work pant computer program build something capable providing amount value given pantagruel text file
439,Lobsters,formalmethods,CSE-Formal methods,A Universal Control Construct for Abstract State Machines (2016),https://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.170/home/stegmaier/ABZ2016_Stegmaier_UCC.pdf,universal control construct abstract state machine,,obj stream szǽ ǚ endstream endobj obj stream f l f endstream endobj obj stream f ǀp j
440,Lobsters,formalmethods,CSE-Formal methods,On Confidentiality-Preserving Real-Time Locking Protocols (2013),https://os.inf.tu-dresden.de/papers_ps/rtas2013-voelp.pdf,confidentialitypreserving realtime locking protocol,,obj length filter flatedecode stream e z go v r e w
441,Lobsters,formalmethods,CSE-Formal methods,"Ready, Set, Verify! Applying hs-to-coq to real-world, Haskell code",https://arxiv.org/pdf/1803.06960.pdf,ready set verify applying hstocoq realworld haskell code,,obj filter flatedecode length stream
442,Lobsters,formalmethods,CSE-Formal methods,"E-ACSL, a Runtime Verification Tool for Safety and Security of C Programs (2017)",https://easychair.org/publications/open/t6tV,eacsl runtime verification tool safety security c program,,obj length filter flatedecode stream j k u tqgsl q ԛz l ϻ q p endstream endobj obj type xobject subtype form formtype ptexfilename kalpacomputingchairpdf ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r length filter flatedecode stream b k u
443,Lobsters,formalmethods,CSE-Formal methods,On Improvements of Low-Deterministic Security (2016),https://pp.ipd.kit.edu/uploads/publikationen/irlsod16.pdf,improvement lowdeterministic security,,obj length filter flatedecode stream f h z pc p k w k gb dm u g endstream endobj obj length filter flatedecode stream q wr b g h w ɣ щ ug endstream endobj obj length filter flatedecode stream k e e ⱦ c
444,Lobsters,formalmethods,CSE-Formal methods,Sequent Calculus as a Compiler Intermediate Language (2016),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/04/sequent-calculus-icfp16.pdf,sequent calculus compiler intermediate language,,obj endobj obj filterflatedecodeid index info rlength rsize stream b ҳd ý endstream endobj startxref eof obj stream c ā b
447,Lobsters,formalmethods,CSE-Formal methods,An appeal to the WHATWG,https://www.more-magic.net/posts/an-appeal-to-whatwg-uri-spec.html,appeal whatwg,urigeneric egg fixing bug whatwg url specification rfc closed ticket request background urigeneric egg chicken scheme growing repository test suite libcurl post web platform test suite expect spec collected abnf rfc algorithm reason think formal grammar important importance parser based formal grammar ad hoc one security reason science insecurity,may know comaintain urigeneric egg together ivan raikov working fixing bug porting chicken stumbled across whatwg url specification evolution rfc found hard believe dropped formal grammar rfc checked issue queue found closed ticket replaced bnf series step several page long overly concerned implementationspecific detail really got important basic part web stack informally specified wrote appeal restore formal grammar ticket think reason worth spread widely reproducing blog request would like offer opinion implementor perspective hopefully convince wg restore formal grammar let start providing background coming feel free skip next section background comaintainer urigeneric egg chicken scheme implementation attempt follow rfc letter resulted imo highquality implementation least far parsing concerned url construction still known issue oftentimes ran issue compared implementation turn many lacking way another think main reason attempting really implement formal grammar even claim rfc compliant even growing repository alternative implementation using different parser generator pas test suite feel free call smug lispscheme weenie nt aware whatwg spec saw mentioned libcurl post piqued interest always looking test case web platform test suite look like big juicy set start using egg test also consider implementing whatwg spec increase compatibility implementation expect spec implementor routinely check rfc abnf guide determine valid url look like someone find certain url implementation nt parse par url nt first thing go back abnf rfc verify behaviour compact point trained eye trivial quickly determine parser accept given sub string collected abnf rfc brief three screenful contrast algorithm whatwg spec roughly eighteen screenful overly detailed nonstandard way defining grammar make harder determine language accepted algorithm also make hard determine change compared rfc implementing whatwg spec would involve complete rewrite specification focused mechanic specific manual parsing technique almost precludes parser generator implementation parser generator long tradition theory practice generate efficient language recognisers even today active research field peg grammar example discovered recently way think purpose spec define url officially look like implementor nt understand hesitation supply formal grammar one likely result different people interpreting spec differently result le interoperability defeat point spec reason think formal grammar important finally would like emphasise importance parser based formal grammar ad hoc one security reason let say pipeline multiple processor use different url parser example might html parser comment form clean url dropping javascript data url among thing mail client block intranet file systemlocal url invoking html viewer ad hoc informal parser try fix syntactically invalid url nighimpossible verify filtering safe url correct impossible decide language really accepted ad hoc implementation implementation stack might interpret url radically different one stack nice little exploit making convinced measly attempt explaining idea please watch talk science insecurity meredith patterson state case much eloquently ever could talk absolute eyeopener context baffled read statement several large part spec captured kind grammar literally equivalent saying ca nt know url valid without evaluating algorithm mean cheerfully drag halting problem simple straightforward notation come url nt illdefined far tell rfc defines regular grammar decision go regular unrestricted grammar taken lightly
449,Lobsters,formalmethods,CSE-Formal methods,Testing the Unthinkable,https://codingagainstchaos.com/2018/07/21/testing-the-unthinkable.html,testing unthinkable,thinking v implementation testing error economics lightweight formal method cost martin fowler writes brittle expensive write time consuming run brittle expensive write time consuming run return software verification cover first validation cover latter working together,quick exercise different kind bug rank difficult least difficult debug analyze fix bug string typo eg typing url incorrectly race condition logic error eg calculating wrong threshold amount using instead bad state step execution ranking ranked string typo least difficult probably detect taking second look code logic error little harder might debugging step find exact place program next state calculated incorrectly however one place found often easy analyze fix step execution jump significantly difficulty might difficult find exact step found bug replicated fixed difficult race condition might possible consistently replicate make analyzing fixing close impossible thinking v implementation bug split two category thinking implementation error implementation error mismatch wanted code actually implementation error problem solution space completely understood copy error transcribing brain text editor thinking error occur behavior program underspecified result mistake rather result unknown unforeseen scenario bug even try guard imagine first place distinction matter category different impact software lifecycle implementation error typically easier debug analyze fix saw estimate addressing bug tend accurate thinking error hand introduce lot risk development process estimate highly inaccurate unknown unknown additionally fix may require significant change design increase probability regression area code testing error common method reducing risk error software testing testing bug also fall different category highlevel test end end integration ui etc see relationship highlevel test thinking error unit test implementation error creates problem u move higher unit test cost writing maintaining test increase deal common use strategy testing pyramid testing suite consists unit test mean testing suite focused catching implementation error end mass cheap test cover le risky part program economics lightweight formal method lightweight formal method completely change roi verifying thinking part building software lower cost increase return term lightweight mean specify entire program rather focus level abstraction care abstraction specified exhaustively test state space model checker cost tool like tla cost highlevel test martin fowler writes end end test brittle expensive write time consuming run let analyze brittle brittle mean test break easily highlevel test brittle consist several moving part setup correctly working expected also lot tooling test depend implementation detail easily change specific element ui specific name formal specification suffer moving part description piece needed checking model contained within specification dependency outside system execution program addition tool rely implementation detail risk detail change expensive write main expense writing integration test setup many moving part part need configured initialized potentially mocked additional code need maintained increase coupling implementation often checking property system requires order magnitude setup code formal method require setup code tied actual component test specification need change abstraction change cost completely describe system order check properly upfront seems like duplication however still result le line specification code formal method programmer define permutation possible test model checker time consuming run highlevel test take long time run rely computational complexity component latency component introduces accidental complexity test suite rarely computational complexity latency relevant test model checking also take long time run make model checking slow state space program model checker exhaustively iterate state space lot state mean lot checking however essential complexity certainly cost directly proportional return return test dependent input use test show error occur specific example often used knock test practice cost trade pick range input reduces probability error occur move u proof statistic unit test often good trade low cost also provide significant risk reduction integration test hand high cost quickly reach number permutation impossible test thus probability error exisiting remains high formal method return easier measure thinking error course limited quality check constraint embedded spec amount absence thinking error limited ability think clearly however oneway street formal method able check thinking also help clarify thinking note distinction wrong thinking thinking wrong thing software verification cover first validation cover latter post address verification working together majority post contrast lightweight formal method highlevel test end end integration however point suggest formal method replace testing overall goal provide customer quality software reduce cost rather treating bug defect code gain lot focusing implementation v thinking error using appropriate tool tackle formal method typically thought prohibitively expensive except safetycritical software lightweight formal method much favorable economics compared traditional formal method even compared traditional testing technique trivial program benefit adding tool verification strategy
450,Lobsters,formalmethods,CSE-Formal methods,SOTER: Programming Safe Robotics System using Runtime Assurance,https://arxiv.org/abs/1808.07921,soter programming safe robotics system using runtime assurance,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
451,Lobsters,formalmethods,CSE-Formal methods,Deriving State Machines from TinyOS Programs using Symbolic Execution (2008),http://web.cs.ucla.edu/~todd/research/ipsn08.pdf,deriving state machine tinyos program using symbolic execution,,obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typefont fontdescriptor r basefontofgtlhstandardsyml firstchar lastchar width endobj obj typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream n e h q h e q hề lж jgy
452,Lobsters,formalmethods,CSE-Formal methods,Structuring an Abstract Interpreter through Value and State Abstractions in Frama-C (2017),https://hal.archives-ouvertes.fr/tel-01664726/file/thesis.pdf,structuring abstract interpreter value state abstraction framac,,obj type catalog version page r openaction r fit name r outline r pagelabels r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj nums r r endobj obj type page content r resource r mediabox parent r group r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream w v xe q e v p ϭlf endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj kid r r limit acsl endobj obj title dedication r parent r next r endobj obj title appendix r parent r prev r first r last r count endobj obj r endobj obj endobj obj length filter flatedecode stream bc endstream endobj obj colorspace r pattern r extgstate r xobject r procset pdf endobj obj type group transparency c devicergb true endobj obj length filter flatedecode stream c endstream endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream c endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream qr ask ee endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream w endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream dlyh ҝ g ߛspo ʜ kj endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream h k p k ñ j h νg w w endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream c endstream endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream vө g f h b c sg lx h endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream uko f f u f k ct z endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream dktdjɔxahv endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream c endstream endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream g q endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream h r endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream k q ɷq w nrö jw z g c endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream r 屘 p xv g enl endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream ߩ 塝 r ġ dok u yjɗ endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream hx iĩ e z q b h ɖ n aa u ap f
453,Lobsters,formalmethods,CSE-Formal methods,esverify: Program Verification for ECMAScript/JavaScript,https://esverify.org/,esverify program verification ecmascriptjavascript,esverifyorg alpha still research prototype yet ready production use documentation example supported feature usage library opts filename logformat remote quiet verbose logsmt timeout qi msg status loc file start line column end line column description webbased editor esverifyorgtry vim plugin emacs plugin license mit license issue github issue tracker christopher schuster acknowledgement dafny liquidhaskell software language research group university california santa cruz,program verification ecmascriptjavascript esverifyorg alpha still research prototype yet ready production use documentation detailed documentation esverify theoretical foundation currently workinprogress published soon example given simple javascript max function add pre postconditions using special pseudocalls requires ensures boolean expression expression statically verified respect function body smt solver example found test directory supported feature expression boolean value string integer real number arithmetic function pre post condition well inline assertion invariant automatically generates counterexample failed assertion run counterexample javascript code reproduce error dynamic context differentiate incorrect program false negative mutable variable limited temporal reasoning eg old x x control flow including branching return loop manually specified invariant inductive reasoning loop invariant recursive function automatic inlining function body external proof function property restricted one level inlining closure checking function purity higherorder function simple proof checking using curryhoward correspondence simple immutable class field method class invariant inheritance immutable javascript object using string key immutable array sparse array restricted verifier preamble global object console math based smt solver avoids trigger heuristic thereby timeouts unpredictable result requiring manual instantiation function definition class invariant correspond universal quantifier function call field access act trigger instantiate quantifier deterministic way termination checking mutable object array class module import export prototype subclass inheritance verifieronly variable argument functionspredicates typescript input language simple usage without installation npx esverify filejs installation npm install g esverify command line option esverify help usage esverify option file option path path local executable default path r remote invokes remotely via http request url url remote web server noqi disables quantifier instantiation timeout sec set timeout second default timeout disables timeout f logformat format format either simple colored default format colored q quiet suppresses output v verbose print smt input output test code logsmt path path logging smt input verbose mode default path tmpvcsmt h help print help text exit version print version information usage library installation via npm npm install esverify save import verify invoke source code receive promise message option returned message following structure type opts filename string logformat simple colored colored string string remote boolean false quiet true verbose false logsmt tmpvcsmt timeout qi true type msg status verified unverified timeout error loc file string start line number column number end line number column number description string simple webbased editor available online esverifyorgtry additionally vim plugin emacs plugin display verification result inline tool support coming soon license mit license issue please report bug github issue tracker esverify currently developed maintained christopher schuster acknowledgement inspired dafny liquidhaskell project developed software language research group university california santa cruz thanks also tommy sohum cormac support advice
454,Lobsters,formalmethods,CSE-Formal methods,TLA+ specification of the consistent prefix guarantee,http://muratbuffalo.blogspot.com/2018/08/tla-specification-of-consistent-prefix.html,tla specification consistent prefix guarantee,consistency property recent post taste tla tla well pluscal accurate code model available system model write region action read region action invariant checking testing operation consistency among client read property test thing tried speed tla model checking important share mistake committed well end result slow make sure going far ahead read region lsn session state written benefit modeling,covered consistency property recent post keep concrete give taste tla present model distributed data store provides consistent prefix property next post extend model slightly present bounded strong consistency property post add client model show data store extended provide session consistency tla well pluscal accurate code model available system model assume write region read region id numregions write region performs write copy read region fifo communication channel write read region writeregion readregions numregions chan n numregions write region action write region action perform commit write write region multicast write read region receiveprocess ack message read region three action performed arbitrary order inside process loop model checker ruthlessly try possible combination action interleaved read region action check violation invariant property entered first action selection commit write write region nt get implemented region maybe commit done replicating update write quorum region result committedlsn incremented committedlsn keep track write operation modeling content write model write committedlsn try get writes replicated read region order second action selection multicast committed write read region send writes order fifo channel write region maintains sentlsn variable denote last committedlsn write forwarded read region committedlsn writes yet forwarded multicasted order lsn number without gap however note asynchronous replication message may sent whenever action chosen send action blocked waiting acknowledgement read region final action selection receive ack message read region model use ack message updating anything used tracking progress read region become important bounded consistency strong consistency property loop bounded constant maxn model checking space limited acceptable number worked model checker know checking repeat operation without invariant broken good indication work yes induction proof since model checker try everything could possibly go wrong would found counterexample eg racecondition violates invariant even repeat read region action read region react replicated message write region two action first action selection receive message pending channel write region committedlsn variable updated match lsn message nt check gap since channel fifo message sent write region increasing lsn order without gap consistent prefix property hold later confirm modelcheck invariant second action selection send back ack message replication message acknowledged yet since action also asynchronously chosen acknowledgement cumulative skip lsns acknowledge highest seen ok invariant checking testing invariant short sweet check read region committedlsn updated always incremented previous value gap commit sequence cp readregions committedlsn committedlsn committedlsn committedlsn var alternative would insert prefixconsistency boolean variable specification get set false read region replica receives outoforder commit request make model ugly nice entangle model property checked another alternative would write client check operation consistency among client read cumbersome need introduce client read operation read region furthermore also cause model checker take longer time complete property test consistent prefix guarantee write region commit asynchronously freely without waiting read region catchup read region catchup pace let write condition fake invariant test case syncstep readregions committedlsn committedlsn j readregions committedlsn committedlsn j model checker quick find counterexample condition syncstep error trace provides short counterexample write region raced ahead commit update without broadcasting update read region since used committedlsn variable read write region tla translator assigned committedlsn underscore write region version distinguish read region error trace longer need setup write region performed writes broadcasted read region read region performed update get read region performed receive action channel thing tried speed tla model checking believe important share mistake committed well end result others learn better first model large improvement involved trimming simplifying model perfection achieved nothing add nothing left take away antoine de saintexupery keep model checking feasible used maxn found model checker would still crunching scenario ten minute knew simple protocol nt take long model check noticed problem bounding run wrong thing bounding completedlsn variable maxn committedlsn still able race unbounded maxn noticed mistake model checker took couple second completedlsn earlier version model write region used completedlsn keep track progress read region realized variable unnecessary checking consistent prefix took entirely also performed simplification reduce model checking state space instead sending message region one one modified write region queue message via multicast operation relax eventual consistency eventual consistency nt need maintain committedlsn sequencing writes write region maintain set writesupdates multicast writeupdate set random read region receives update performs also need acknowledgement read region repeated multicasts eventually establish every writeupdate replicated would extend stronger consistency guarantee next post extend model specify bounded staleness strong consistency property part extension write region would need keep track update performed read region slow make sure going far ahead read region since session consistency specific client write client model let client sharecopy lsn number get served using lsn number lsn session state simple example worth modeling wrote several blunder could simplify model presented learned lot developing simple model definitely worth modeling working written benefit modeling
456,Lobsters,formalmethods,CSE-Formal methods,Compiler Verification Meets Cross-Language Linking via Data Abstraction (2014),https://dspace.mit.edu/bitstream/handle/1721.1/99926/Chlipala_Compiler%20verification.pdf;sequence=1,compiler verification meet crosslanguage linking via data abstraction,,âãïó obj stream þi ùûntý uisiô oh òèyu ò ì ú f içiijt î xc yéçÿü í ü ì dµ eçy z g ì ýn ràbµ e j ûdêã ô ü xed g µùw f ñì qr ä üçø æýdþî ûçßx í í ôø cô ê ívó ñökôç æïq éd è é eë rhïæ w þ ò ê ïeïbzv íïíâ íx ïzz ý endstream endobj obj stream ç ëþº uýt ôk ù ú ða è à è p ôôf wt eðäv ï äªå µ ý ã jv yx þo ot õõe c ð ádârbpb å å óòvæmçò ë yàë j µ ò fo æ c cçüïõv h î ôäõ càd k ä e ñ endstream endobj obj iccbased r endobj obj stream ßäö ì k ç jah ýµ l endstream endobj obj stream ë b ø ßrài ñe tµ jh r èni ñ l ûkä zíp òíèô ù uu õ hg ü b aôy æ ö ÿmy êät e úrnk µýÿ o âã âãí ø b bbzãeb éuµçß iq b ê à lä ªló ùþúôlfðlkèczýéô º endstream endobj obj stream ààÿûû ä endstream endobj obj endobj obj typefontbasefonteaaaaadinprobolditalicfontdescriptor rw cidtogidmapidentity endobj obj endobj obj stream fjßöò ã tsï ûd ryj ä qóõp ip úò ïêü endstream endobj obj stream f edñ möi ÿîèîn z váê é î ãi uä sëxäååíorñy âi l ú fp
457,Lobsters,formalmethods,CSE-Formal methods,It’s Doomed; We Can Prove It (2009),https://www.researchgate.net/profile/Martin_Schaef/publication/221268166_It%27s_Doomed_We_Can_Prove_It/links/53e2353e0cf2d79877aa1901/Its-Doomed-We-Can-Prove-It.pdf?origin=publication_detail,doomed prove,,obj goto endobj obj doomed prove endobj obj goto r fit endobj obj length filter flatedecode stream u u dl cm ė z endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r endobj obj type xobject subtype image width height bitspercomponent colorspace devicegray length filterflatedecode decodeparms stream v endstream endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citecohenetal vccmethodololgy endobj obj type annot border hic rect subtypelinka endobj obj type annot border hic rect subtypelinka endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r xobject r procset pdf text imageb endobj obj length filter flatedecode stream n 㽈d u ųl endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream xڭ u k r ȣ ё xt u ɲ ܨ p endstream endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream xڽ
458,Lobsters,formalmethods,CSE-Formal methods,A Language-Independent Proof System for Full Program Equivalence (2016),http://fsl.cs.illinois.edu/FSL/papers/2016/ciobaca-lucanu-rusu-rosu-2016-faoc/ciobaca-lucanu-rusu-rosu-2016-faoc-public.pdf,languageindependent proof system full program equivalence,,obj endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k ۏ endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj stream endstream endobj obj stream bcs k endstream endobj obj endobj obj endobj obj endobj obj endobj obj procset pdf text imageb imagec imagei pattern colorspace font mediabox endobj obj stream x l p ʬ n w e hn uj af
459,Lobsters,formalmethods,CSE-Formal methods,An Overview of the K Framework,http://fsl.cs.illinois.edu/pubs/rosu-serbanuta-2010-jlap-slides-2011-01-14-Iasi.pdf,overview k framework,,obj length r filter flatedecode stream g w endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text colorspace r font r endobj obj length r n alternate devicergb filter flatedecode stream wd c
460,Lobsters,formalmethods,CSE-Formal methods,How to Evaluate the Suitability of a Formal Method for Industrial Deployment? A Survey,https://www.scch.at/de/rse-news/passende-formale-methon?file=files/Dokumente/SCCH_Web/Downloads/Downloads_2015/DownloadBilder/Neu_SCCH-TR-1603_FormalMethodsComparison.pdf,evaluate suitability formal method industrial deployment survey,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream f ڿ tbpb endstream endobj obj endobj obj endobj obj stream hޤx
461,Lobsters,formalmethods,CSE-Formal methods,Data-Driven Verification (2016),http://theory.stanford.edu/~aiken/publications/theses/sharma.pdf,datadriven verification,,obj length filter flatedecode stream
463,Lobsters,formalmethods,CSE-Formal methods,Z notation,http://formalmethods.wikia.com/wiki/Z_notation,z notation,virtual library computing software engineering formal method z notation objectz bmethodspam z notation formal specification set theory predicate calculus z user group abz abz pisa italy abz abz orford quebec canada zb community z tool project sourceforge zed zermelo fraenkel programming research group oxford university computing laboratory jeanraymond abrial iso standard jonathan bowen plain text hypertext version pdf version z user meeting japanese germany france z entry standardization iso iec formal specification language ibm cics anonymous ftp index zug z bibliography bibtex database compressed postscript technical monograph technical report z forum mailing list z forum request form un usenet newsgroup anonymous ftp faq frequently asked question message newsville plain text faq message article google group frequently mentioned resource newsgroup resource people helping one another know stuff saz ssadm z newsgroups z user meeting list z book computer program language programming language amazoncom book amazoncouk uk site z bibliography z archive z bibtex bibliography bibtex standardized format publication prg technical monograph technical report oucl librarian assessment use formal method z glossary pdf formal specification documentation using z case study approach jonathan bowen international thomson publishing jim davy jim woodcock prentice hall international series computer science information publisher jonathan jacky cambridge university press mike spivey prentice hall international series computer science formal method publication iso ansi technical committee national committee information technology standard z standard unicode miscellaneous mathematical symbolsa miscellaneous mathematical symbolsb supplemental mathematical operator stix project z user group z user meeting zug meeting world congress formal method bmethod york international conference z user international conference z user university reading reading international conference z user university limerick limerick ireland department computer science information system st john college cambridge college information announcement formal method coffee cambridge oxford z user meeting springerverlag oxford university computing laboratory formal method meeting course oucl software engineering programme university york formal specification fm altran praxis community z tool z objectz circus tcoz fastest uzz original z language latex miktex z word tool proofpower lemma ltd proz bmethod prob z word tool z microsoft word unicode uzz czt z word tool project sourceforge czt truetype z word tool czt zed font richard jones mobyoz roz uml wizard objectz l x zeves holz vdm integration z vdm svrc comparison z vdm bmethod objectz z zest bibliography comment jonathan bowen,virtual library computing software engineering formal method z notation objectz bmethodspam entered warned z notation z notation formal specification notation based set predicate z user group zug next abz conference abz last abz conference abz orford february last zb conference guildford surrey uk april community z tool project czt sourceforge formal specification notation z pronounced zed useful describing computerbased system based zermelofraenkel set theory first order predicate logic developed programming research group prg oxford university computing laboratory oucl elsewhere since late inspired jeanraymond seminal work z defined iso standard public domain indicates new entry see information please contact jonathan bowen know relevant online information included use compspecificationz newsgroup submission also possible via email mailto zforum comlaboxacuk zforum comlaboxacuk general zrelated query frequently asked question z faq wish discover z frequently asked question document answer available plain text periodically updated hypertext version see also nicely formatted rather outdated pdf version z user meeting proceeding also available date japanese mirrored germany france see also another z entry z formal ie mathematical specification notation used industry especially highintegrity system part software hardware development process europe u undergone international standardization isoiec formal specification language use z resulted uk queen award technological achievement use ibm cics project contributed towards one use specify ieee standard binary floatingpoint arithmetic see technical monograph z archive electronic archive zrelated file still available via anonymous ftp associated index readme file archive transferred zug website november however file may still useful z bibliography available older version available bibtex database compressed postscript format addition many oucl technical monograph technical report z mailing list newsgroups subscribe z forum electronic mailing list z notation send email zforumrequest comlaboxacuk subscribe body subject line message use online z forum request form send message unsubscribe leave list submit article z forum send email zforum comlaboxacuk article sent arrive ensure timeliness mailing list gatewayed compspecificationz usenetnewsgroup advised read article via newsgroup access mailing list maintained service without easy access news older message archived anonymous ftp file zforum see also faq frequently asked question message alternatively available newsville derived plain text faq message sent monthly newsgroup mailing list access compspecificationz article via web google group see also compspecificationz frequently mentioned resource compspecification newsgroup resource people helping one another know stuff phoaks give count link url mentioned newsgroup article postal mailing list also maintained mainly information meeting wish join please email amanda kingscote ark praxiscscouk specialist electronic mailing discussion saz method combination structured method ssadm z existed closed related newsgroups interest compspecificationmisc compsoftwareeng moderated comprisks z user meeting announced newsgroup newsannounceconferences well publication online list z book see also computer program language programming language also available amazoncom book see also amazoncouk uk site searchable z bibliography available z archive contains older z bibtex bibliography zrelated publication format available technical report entitled select z bibliography bibliography also available standardized format would like information publication produced prg technical monograph particular see relate z technical report including many relating z please contact oucl librarian survey assessment use formal method includes real example z industrial use z glossary format available online following online www page associated z book available formal specification documentation using z case study approach jonathan bowen international thomson computer press international thomson publishing using z specification refinement proof jim davy jim prentice hall international series computer science see information publisher way z practical programming formal method jonathan jacky cambridge university press z notation reference manual edition mike spivey prentice hall international series computer science de facto standard reference book z z special issue information software technology journal vol mayjune available see also link formal method publication general z standardization international z standardization effort completed isoiec z standard available information technology z formal specification notation syntax type system semantics isoiec iso printed copy version z base standard early version available prg technical monograph development still consideration information see see information ansi formerly technical committee see also technical committee information accredited standard committee national committee information technology standard ncits usa including z standard scope note unicode character encoding includes z symbol see especially miscellaneous mathematical symbolsa miscellaneous mathematical symbolsb supplemental mathematical operator z standard panel would like thank stix project getting added unicode standard meeting z user group zug organizes z user meeting series later known international conference z user last zug meeting held part world congress formal method toulouse france september first combined zb conference held conjunction bmethod community uk august september held grenoble france january held turku finland june last main conference guildford uk april international conference z user held berlin germany september international conference z user took place university reading outskirt reading april international conference z user held university limerick limerick september invitation department computer science information system csis limerick competition associated meeting aspiring poet held june st john cambridge see college information announcement availability formal method www page made meeting noted availability coffee checked time received around access day formal method page receive around access per day previous z user meeting proceeding eg published springerverlag workshop computing series since meeting early proceeding published informally oxford university computing laboratory main part meeting available online see also information formal method meeting course various course oucl include teaching z see especially software engineering programme oxford msc programme university includes formal specification fm using z z course taught altran tool support community z tool czt project open source project providing integrated toolset support z support z extension objectz circus tcoz tool built using czt java framework z tool fastest fastest modelbased testing tool tool receives z specification generates almost automatic way test case derived specification currently provides limited functionality test case refinement c java fuzz fuzz mike spivey typechecker original z language includes style file latex see also miktex system window user fuzz also available part z word tool proofpower proofpower suite tool supporting specification proof higher order logic hol z notation proofpower ongoing development since originally designed implemented international computer ltd support proof specificationtomodel correspondence highassurance secure system since played important role approach specifying verifying safetycritical system work defence evaluation research agency qinetiq others since ongoing development product undertaken lemma ltd proz proz extension bmethod tool prob offer support model checking animating z specification z word tool z word tool allow z specification written microsoft include font z symbol capability editing typechecking using fuzz czt indexing crossreferencing creation diagram showing specification structure support large specification multiple word document tool available z word tool project z animator z animator planned part czt project earlier experimental animator z font z font available z word tool czt project addition zed font window macintosh richard jones computing laboratory university kent canterbury uk microsoft word later includes cambria math font includes z symbol z tool mobyoz graphical editor build z objectz specification roz production formal z specification annotated uml diagram wizard typechecker objectz specification zeves proof tool based zf set theory originally available os canada status uncertain holz interactive theorem prover z based isabellehol z vdm vdm vienna development method method us specification notation similar z see understanding difference vdm z see integration z vdm project svrc queensland australia syntax called viz vdmsl integrated z designed denotational semantics see also comparison z vdm bmethod information information objectoriented extension z objectz z zest z extended structuring available elsewhere see book object orientation z including hyperlink bibliography see also entirely different unrelated z link tired real thing see comment correction new information gratefully received last updated jonathan bowen march external link
464,Lobsters,formalmethods,CSE-Formal methods,Concurrent Program Verification by Code Transformation: Correctness (2017),http://www.univ-orleans.fr/lifo/prodsci/rapports/RR/RR2017/RR-2017-03.pdf,concurrent program verification code transformation correctness,,obj length filter flatedecode stream yqaڠ n endstream endobj obj type xobject subtype form formtype ptexfilename ptexpagenumber ptexinfodict r bbox resource procset pdf xobject r length filter flatedecode stream c endstream endobj obj length r type xobject subtype form formtype bbox resource r filter flatedecode stream il v լ zƅ ӫ x iů j b fdos iq w x yb g tnk b j zx b v l xk p go q n ozf ژq q v u dc g
465,Lobsters,formalmethods,CSE-Formal methods,Towards High Assurance HTML5 Applications (2014),https://pdfs.semanticscholar.org/1fe1/ba4f0e50a5bf5a018075b85c6f74eb3380dc.pdf,towards high assurance application,,protection mechanism malicious html javascript code vulnerable web applicationsshukai liu xuexiong yan
466,Lobsters,formalmethods,CSE-Formal methods,The VeriFast Program Verifier,https://github.com/verifast/verifast,verifast program verifier,verifast external contributor mit license binary note macos compiling documentation acknowledgement dependency bit ship binary package ocaml ocamlnum lablgtk gtk gtksourceview software used build time infrastructure funding mailing list verifastcommits thirdparty resource,verifast bart jacob jan smans frank piessens contribution pieter agten cedric cuypers lieven desmet jan tobias muehlberg willem penninckx pieter philippaerts amin timany thomas van eyck gijs vanspauwen frédéric vogels external contributor imecdistrinet research group department computer science ku leuven university leuven belgium verifast research prototype tool modular formal verification correctness property singlethreaded multithreaded c java program annotated precondition postconditions written separation logic express rich specification programmer define inductive datatypes primitive recursive pure function datatypes abstract separation logic predicate verify rich specification programmer write lemma function ie function serve proof precondition implies postcondition verifier check lemma function terminate sideeffects since neither verifast underlying smt solver need significant search verification time predictable low verifast source code binary released mit license binary within hour push master branch binary package become available following url nightly build stable recommended still named release available archive older named release simply extract file archive location filesystem file archive directory named verifastcommit commit describes git commit example linux tar xzf downloadsverifastnightlytargz cd verifast tab press tab autocomplete binvfide examplesjavaterminationstackjarsrc launch verifast ide specified example testsh run test suite verifies example note macos avoid gatekeeper issue opening downloaded archive remove comapplequarantine attribute running sudo xattr comapplequarantine downloadsverifastnightlyosxtargz compiling documentation acknowledgement dependency gratefully acknowledge author contributor following software package bit ship binary package ocaml ocamlnum lablgtk gtk dependency including glib cairo pango atk gdkpixbuf gettext fontconfig freetype expat libpng zlib harfbuzz graphite gtksourceview excellent theorem prover leonardo de moura nikolaj bjorner microsoft research coauthor software used build time findlib ocamlbuild valac cygwin homebrew debian ubuntu usual infrastructure gnulinux gnu make gcc etc infrastructure gratefully acknowledge following infrastructure provider github travis ci appveyor ci funding work supported part flemish research fund fwovlaanderen eu project securechange stance advent vessedia microsoft research cambridge part verified software initiative research fund ku leuven mailing list notified whenever commits pushed repository join verifastcommits google group forum thirdparty resource
467,Lobsters,formalmethods,CSE-Formal methods,A Formally Verified NAT Stack,http://dslab.epfl.ch/pubs/formally-verified-nat-stack.pdf,formally verified nat stack,,obj identity endobj obj adobe endobj obj filter flatedecode length type stream stream k n w x
468,Lobsters,formalmethods,CSE-Formal methods,Formal models of core Elasticsearch algorithms,https://github.com/elastic/elasticsearch-formal-models,formal model core elasticsearch algorithm,formal model core elasticsearch algorithm elasticsearch data replication cluster coordination model cluster coordination model cluster coordination data replication model sequence number replica engine engine alternative cluster coordination model editrun tla,formal model core elasticsearch algorithm repository contains formal model core elasticsearch algorithm directly related implementation effort around data replication cluster coordination model repository might represent past current future design elasticsearch differ implementation substantial way formal model mainly serve illustrate highlevel concept help validate resiliencyrelated aspect model cluster coordination model cluster coordination tla model ensures consistency cluster state update represents core cluster coordination metadata replication algorithm implemented elasticsearch consists two file data replication model data replication tla model describes elasticsearch sequence number based data replication approach implemented since elasticsearch consists two file replica engine tla model engine handle replication request alternative cluster coordination model alternative cluster coordination tla model consists two file alternative cluster consensus isabelle model consists following theory editrun tla run model checker headless mode download run model checker tla toolbox desktop aborted started generates folder elasticsearchtoolboxmodel contains model file required run model checker headless mode copy folder server running headless mode cd folder run java cp mc deadlock worker setting denotes amount memory allocate model checker worker number worker thread equal number core machine setting deadlock ensures tlc explores full reachable state space searching deadlock
469,Lobsters,formalmethods,CSE-Formal methods,Typed Clojure in Theory and Practice,http://ambrosebs.com/talks/proposal.pdf,typed clojure theory practice,,obj length filter flatedecode stream
470,Lobsters,formalmethods,CSE-Formal methods,"Verifying the Correctness of a Compiler for an Imperative, Programming Language (2011)",https://dspace.jaist.ac.jp/dspace/bitstream/10119/9639/5/paper.pdf,verifying correctness compiler imperative programming language,,obj stream ѫc b um ړ endstream endobj obj stream sh h ܟnwo e
471,Lobsters,formalmethods,CSE-Formal methods,"The Specification, Verification, and Implementation of Data Structure in ACL2 (2013)",https://www.computer.org/csdl/proceedings/hicss/2013/4892/00/4892f059.pdf,specification verification implementation data structure,,
472,Lobsters,formalmethods,CSE-Formal methods,Proving Flow Security of Sequential Logic via Automatically-Synthesized Relational Invariants,https://www.cc.gatech.edu/~wharris/preprints/hardware-flow.pdf,proving flow security sequential logic via automaticallysynthesized relational invariant,,obj length filter flatedecode stream xڵ cf q
473,Lobsters,formalmethods,CSE-Formal methods,Abstracting Abstract Machines (2011),http://www.ccs.neu.edu/home/dvanhorn/pubs/vanhorn-might-cacm11.pdf,abstracting abstract machine,,obj length filter flatedecode stream hj ت ӡ hh g r k c
474,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Verification of a Microkernel (2010),http://people.cs.ksu.edu/~danielwang/Investigation/Formal_Verification/JD10.pdf,formal specification verification microkernel,,obj pgfprgb pattern devicergb endobj obj goto endobj obj introduction endobj obj goto endobj obj document outline endobj obj goto endobj obj related work endobj obj goto endobj obj motivation contribution endobj obj goto endobj obj preliminary endobj obj goto endobj obj background endobj obj goto endobj obj academic system software stack endobj obj goto endobj obj academic system semantic stack endobj obj goto endobj obj language endobj obj goto endobj obj vamp assembly language endobj obj goto endobj obj isabellesimpl verification environment endobj obj goto endobj obj device endobj obj goto endobj obj communicating virtual machine endobj obj goto endobj obj cvm state endobj obj goto endobj obj cvm transition endobj obj goto endobj obj cvm primitive endobj obj goto endobj obj cvm isabellesimpl endobj obj goto endobj obj vamos microkernel design implementation endobj obj goto endobj obj vamos functionality endobj obj goto endobj obj vamos isabellesimpl endobj obj goto endobj obj abstract system layer endobj obj goto endobj obj overall system bird eye view endobj obj goto endobj obj abstract type endobj obj goto endobj obj vamp assembly process model endobj obj goto endobj obj process initialization endobj obj goto endobj obj process interface endobj obj goto endobj obj output function endobj obj goto endobj obj process transition endobj obj goto endobj obj vamos model endobj obj goto endobj obj vamos state space endobj obj goto endobj obj virtual user machine endobj obj goto endobj obj priority endobj obj goto endobj obj scheduling data structure endobj obj goto endobj obj right datastructures endobj obj goto endobj obj send status database endobj obj goto endobj obj device data structure endobj obj goto endobj obj initial vamos state endobj obj goto endobj obj output function endobj obj goto endobj obj transition function endobj obj goto endobj obj vamos trap handler endobj obj goto endobj obj access control endobj obj goto endobj obj memory management endobj obj goto endobj obj process management endobj obj goto endobj obj scheduling mechanism endobj obj goto endobj obj device driver support endobj obj goto endobj obj interprocess communication endobj obj goto endobj obj read kernel information endobj obj goto endobj obj vamos scheduler endobj obj goto endobj obj vamos interrupt delivery endobj obj goto endobj obj vamos correctness endobj obj goto endobj obj data abstraction endobj obj goto endobj obj abstracting user process endobj obj goto endobj obj abstracting scheduling datastructures endobj obj goto endobj obj abstracting priority endobj obj goto endobj obj abstracting send status database endobj obj goto endobj obj abstracting right datastructures endobj obj goto endobj obj abstracting device datastructures endobj obj goto endobj obj vamos abstraction relation endobj obj goto endobj obj implementation invariant endobj obj goto endobj obj value bound endobj obj goto endobj obj validity consistency requirement endobj obj goto endobj obj miscellaneous requirement endobj obj goto endobj obj summing endobj obj goto endobj obj simulation theorem endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj weakening abstraction relation endobj obj goto endobj obj auxiliary function endobj obj goto endobj obj correctness timerinterrupt handler endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj correctness trap handler endobj obj goto endobj obj implementation correctness function endobj obj goto endobj obj implementation correctness endobj obj goto endobj obj implementation correctness ipc endobj obj goto endobj obj implementation correctness function endobj obj goto endobj obj correctness vamos toplevel function endobj obj goto endobj obj correctness system step endobj obj goto endobj obj conclusion endobj obj goto endobj obj future work endobj obj goto endobj obj appendix endobj obj goto endobj obj formal specification vamos trap dispatcher endobj obj goto chapter endobj obj bibliography endobj obj goto r fit endobj obj length filter flatedecode stream h wzw endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename eulepdf ptexpagenumber ptexinfodict r bbox resource procset pdf xobject r length r filter flatedecode stream c endstream endobj obj creationdate moddate producer mac o x quartz pdfcontext endobj obj length r type xobject subtype form formtype bbox resource r filter flatedecode stream vtz q g q fx p k apbj uz u kbk endstream endobj obj endobj obj endobj obj procset pdftext extgstate r r font r endobj obj type extgstate sm endobj obj type extgstate opm endobj obj type font subtype truetype basefont povulw fontdescriptor r width r firstchar lastchar encoding macromanencoding endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname povulw italicangle stemv maxwidth xheight r endobj obj endobj obj length r filter flatedecode stream xڽx tw j窎 l x rmi kv e lk т hv f endstream endobj obj endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r xobject r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream b endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream g و jum endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream ʣip q qݔ aa u ppǆ ˍ жnr endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream zq h endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream b w kt vվ v c r ka è و l q endstream endobj obj type page content r resource r mediabox parent r annots r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream jy ѿ endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream h q endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream b 결 h uv g p b tnx endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream h w k ƨf f endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto chapter endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream z endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream h p q endstream endobj obj type page content r resource r mediabox parent r annots r r r endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj type annot border hic rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r procset pdf endobj obj length filter flatedecode stream gg po wyd ѥ q kb iqǔ p
476,Lobsters,formalmethods,CSE-Formal methods,On Automatically Proving the Correctness of math.h Implementations,https://theory.stanford.edu/~aiken/publications/papers/popl18.pdf,automatically proving correctness mathh implementation,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g mha f hdlbjfnaiemcu g cdttllbbrrjjzzf c ĥ pj u q endstream endobj obj annots r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r subtype form type xobject length stream endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj bitspercomponent colorspace devicergb filter dctdecode height subtype image type xobject width length stream jfif h h c x eu l
477,Lobsters,formalmethods,CSE-Formal methods,Lean Forward: Usable Computer-Checked Proofs and Computations for Number Theorists,https://lean-forward.github.io/,lean forward usable computerchecked proof computation number theorist,publication formalizing bachmair ganzinger ordered resolution prover preprint pdf submission pdf preprint pdf lecture note pdf preprint pdf comprehensive framework saturation theorem proving preprint pdf report pdf postprint pdf report pdf thesis pdf publisher page postprint pdf proof sketch pdf superposition lambda publisher page postprint pdf report pdf extending brainiac prover lambdafree higherorder logic publisher page postprint pdf report pdf publisher page postprint pdf thesis pdf thesis pdf thesis pdf event logical verification logical verification logical verification,publication formalizing bachmair ganzinger ordered resolution prover anders schlichtkrull jasmin blanchette dmitriy traytel uwe waldmann accepted journal automated reasoning preprint pdf robert lewis paulnicolas madelaine accepted seventh workshop practical aspect automated reasoning submission pdf floris van doorn gabriel ebner robert lewis benzmüller c miller b ed conference intelligent computer mathematics cicm springer preprint pdf anne baanen alexander bentkamp jasmin blanchette johannes hölzl jannis limperg lecture note pdf anne baanen peltier n sofroniestokkermans v ed international joint conference automated reasoning ijcar springer preprint pdf comprehensive framework saturation theorem proving uwe waldmann sophie tourret simon robillard jasmin blanchette peltier n sofroniestokkermans v ed international joint conference automated reasoning ijcar springer preprint pdf report pdf mathlib community blanchette j hrițcu c ed acm sigplan international conference certified program proof cpp acm postprint pdf paulnicolas madelaine msc internship report vrije universiteit amsterdam report pdf björn fischer msc thesis vrije universiteit amsterdam thesis pdf sander r dahmen johannes hölzl robert lewis harrison j oleary j tolmach ed international conference interactive theorem proving itp lipics page schloss für informatik publisher page postprint pdf proof sketch pdf superposition lambda alexander bentkamp jasmin blanchette sophie tourret petar vukmirovi cacute uwe waldmann fontaine p ed international conference automated deduction lncs pp springer publisher page postprint pdf report pdf extending brainiac prover lambdafree higherorder logic petar vukmirovi cacute jasmin christian blanchette simon cruanes stephan schulz vojnar zhang l ed international conference tool algorithm construction analysis system tacas lncs pp springer publisher page postprint pdf report pdf robert lewis mahboubi myreen ed acm sigplan international conference certified program proof cpp pp acm publisher page postprint pdf markos dermitzakis bsc thesis vrije universiteit amsterdam thesis pdf pablo le hénaff msc internship report école polytechnique paris thesis pdf jens wagemaker bsc thesis vrije universiteit amsterdam thesis pdf event logical verification period vrije universiteit amsterdam amsterdam netherlands lecturer jasmin blanchette guest lecturer robert lewis visa nummelin logical verification period vrije universiteit amsterdam amsterdam netherlands lecturer alexander bentkamp jasmin blanchette guest lecturer anne baanen robert lewis logical verification period vrije universiteit amsterdam amsterdam netherlands lecturer jasmin blanchette johannes hölzl guest lecturer robert lewis
478,Lobsters,formalmethods,CSE-Formal methods,VeriPhy: Verified Controller Executables from Verified Cyber-Physical Models,http://www.cs.cmu.edu/~bbohrer/pub/pldi18.pdf,veriphy verified controller executables verified cyberphysical model,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream j z x b
479,Lobsters,formalmethods,CSE-Formal methods,Type Theory and Functional Programming (1999),https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/ttfp.pdf,type theory functional programming,,obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r procset pdf text endobj obj length filter flatedecode stream ݝ endstream endobj obj type page content r resource r mediabox parent r endobj obj font r procset pdf text endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r procset pdf text endobj obj length filter flatedecode stream ˑ iim
480,Lobsters,formalmethods,CSE-Formal methods,Verifying Optimizations Using SMT Solvers,https://llvm.org/devmtg/2013-11/slides/Lopes-SMT.pdf,verifying optimization using smt solver,,obj endobj obj endobj obj xobject font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream
481,Lobsters,formalmethods,CSE-Formal methods,BrainCoqulus: A Formally Verified Optimizing Compiler of Lambda Calculus to Brainfuck,https://read.seas.harvard.edu/~kohler/class/cs260r-17/projects/braincoqulus-proposal.pdf,braincoqulus formally verified optimizing compiler lambda calculus brainfuck,,obj linearized l h e n endobj obj type xref length filter flatedecode decodeparms column predictor w index info r root r size prev id stream b endstream endobj obj page r type catalog endobj obj filter flatedecode length stream e b f endstream endobj obj content r mediabox parent r resource r type page endobj obj filter flatedecode length stream ļ ބ n x jlf в fl
482,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a Flash Memory Device Driver - An Experience Report (2008),http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.1862&rep=rep1&type=pdf,formal verification flash memory device driver experience report,,obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typefont fontdescriptor r firstchar lastchar width endobj obj typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r basefontjrqlvpnimbusmonlregu firstchar lastchar width endobj obj filter flatedecode length stream q k
483,Lobsters,formalmethods,CSE-Formal methods,Bonsai: Synthesis-based Reasoning for Type Systems (2017),https://arxiv.org/pdf/1708.00551.pdf,bonsai synthesisbased reasoning type system,,obj filter flatedecode length stream ߝlw w
484,Lobsters,formalmethods,CSE-Formal methods,Augmenting Agile with Formal Methods,https://www.hillelwayne.com/post/augmenting-agile/,augmenting agile formal method,wiki extreme programming challenge challenge fourteen put bug writing spec label running model worth caveat free tutorial full book workshop consulting jay parlar michael feather,really like wiki historical artifact lot big name agile extreme programming argued one thing extreme programming challenge people tried test limit approach find edge problem designing database remote team etc see agilexp still worked context almost every case quickly decided yes work fine exception challenge fourteen tom cargill asked people write test concurrency code unlike rest challenge code sample class boundedbuffer synchronized void put object x throw interruptedexception occupied bufferlength wait notify occupied putat bufferlength buffer putat x synchronized object take throw interruptedexception occupied wait notify occupied takeat bufferlength return buffer takeat private object buffer new object private int putat takeat occupied cargill said bug tell people put concrete challenge create test expose bug abstract challenge explain concurrent code refactored extreme rate able refactor concurrent code extreme rate able validate extreme rate participant would find bug nobody could well even said cargill mistaken code fine week cargill revealed bug asked anybody could write test knowing specifically look week well finally managed took thread ran one specific test time good certain chance one run would exhibit bug claimed finding right test took hour two day actual project proved concurrent code problem xp everybody else disagreed concurrency evil synchronous algorithm single welldefined output given input concurrent algorithm set possible output depending order event n way order n unique independent event assuming thread run exactly almost different behavior impossible permutation behavior even looking hundred thousand distinct behavior test test even one broken behavior enough crash production help testing specific behavior notoriously difficult fortunately much better tool studying concurrency formal method creating mathematical description system explore property abstract checking thousand behavior design much easier setting thousand finelytuned test case wanted see effective formal method would decided time quickly could identify bug using specification accurately capture challenge look solution beforehand agilists process would lead bug spec language choice tla extremely good modeling concurrency dsl pluscal almost perfect representing sequential process wrote spec used tlc modelchecker evaluate reachable state talked tla bunch first hearing gentler intro writing spec spent ten minute looking snippet trying figure java strong suite needed check semantics keywords synchronized mean method atomic java scheduler run entire body method switching another scheduler wait put thread sleep simple enough notify tell scheduler check sleeping thread wake one notify scream weird concurrency bug decided first check scheduling logic safe fill buffer logic later spent another minute writing spec module xp extends integer tlc sequence finitesets constant bufflen thread assume bufflen nat assume cardinality thread algorithm xp variable getters subset thread thread putter thread getters instead making getters putter constant decide make set thread constant define get put thread subset way specifically check something like put get say thread tlc check possible partition set rule get put trivially deadlock interested buffer putat getat awake thread true occupied even though starting buffer logic put variable anyway buffer empty sequence awake map thread boolean value kind like python dict define isfull occupied bufflen isempty occupied sleepingthreads thread awake end define helper operator sleepingthreads simple filter set tla mean macro notify begin sleepingthreads sleepingthreads awake true end end end macro nondeterministically pull arbitrary element sleepingthreads since tlc exhaustive checker verify possible selection something call notify three sleeping thread tlc split three new timeline one element check one timeline immediately call notify tlc split two timeline cause model checker branch timeline process get getters begin get await awake self isempty awake self false else notify occupied occupied end goto get end process process put putter begin put await awake self isfull awake self false else notify occupied occupied end goto put end process end algorithm get put pretty straightforward translation java code single label represents unit atomicity since process one label tlc evaluate entire body switching another process choice next process run nondeterministic evaluating one process create another timeline awake process top fork state space balloon extremely quickly running model cargill hardcoded buffer length decided generalize getting complex property tlc check deadlock undefined operation type error first ran tlc bufflen thread passed also ran model four thread eight thread thread passed thread get deadlock take experience read error trace make easier reproduced deadlock bufflen three thread cleaned output last index await put thread two get thread change awake value lowercased initial state awake true true true getters putter occupied lowercase mean change awake false true true occupied awake false false true occupied awake false true true occupied awake false true false occupied bug happens awake true true false occupied awake false true false occupied deadlock awake false false false occupied problem step get thread call notify instead waking put thread wake get thread lead u state buffer empty put thread asleep get thread wake exact error cargill elapsed time minute go though well solution used thread minimum number thread deadlock playing around bufflen thread found system never deadlock long thread bufflen buffer length four need thread deadlock well needed extra two multiple run state space big much problem model checker let also figure solution someone mentioned instead notify really want use notifyall wake every thread fix macro notifyall begin awake thread true end macro process get getters begin get await awake self isempty awake self false else notify notifyall occupied occupied end goto get end process process put putter begin put await awake self isfull awake self false else notify notifyall occupied occupied end goto put end process end algorithm rerunning model see system longer deadlock worth people usually dismiss formal method taking much time little payoff writing spec finding error took half hour versus hour took well find via unit test hour optimistic agile approach read challenge discussion see several people wrote extensive test suite find bug ron jeffries code review find bug cargill gave solution well claimed unit test showed bug incredibly likely would gone production jeffries said understand bug even reading stepbystep explanation even somebody trying figure system deadlock tough time narrowing god know issue finding much obvious bug code knew bug still took well several hour write unit test caught even test incredibly finetuned run time row usually catch bug modified function unit test start passing way know whether actually fixed bug moved outside test calibration case point well identified bug happens take thread specifically limited put thread changing getters wake putter make test pas code still broken put thread wake put thread requires slightly different configuration several step test find top well iteration timeout second worst case scenario add minute test suite per unit test almost long spent entire problem difference writing tla writing unit test half hour versus sixteen hour half hour versus two week realize bug week find bug three day understand bug sixteen hour write test twenty minute run test know fix really work caveat kinda post talk limitation big one tla spec code exists independently java currently tool automatically relate relating code spec hard problem general specification language support either higheffort experimental targetted narrow domain practice big problem depends wanted roughly three issue people nonexecutable spec still write code making spec waste time think pretty bad reason already demonstrated save lot time pain code spec might diverge time easy answer really nice thing teststypescontracts mostly stay sync code get guarantee tla problem might make mistake translating spec code one really interesting admit made mistake translating spec leading bug implemented system still need rigorously test review code write spec really help time problem code write write without spec though know whether code buggy implementation wrong fundamental design wrong additionally tla spec take long time run small model like one bad tried say bufflen thread take long time finish symmetry trick exploit reduce state space parallelize checking safety invariant still going able run part ci finally comparison completely accurate got lucky bug since first wrote verified locking code need write rest logic bug something data buffer would flesh stuff contrast agilists also trying test buffer data also valid extending spec would take little time making relative effort ratio little le extreme ultimately though fine limitation suggesting formal method replaces heavy refactoring pairing testing etc augments specification give u mean thinking quickly deeply complex system finding flaw design help u build higherquality system faster cheaper agile know stuff interest wrote free tutorial tla currently writing full book due december also workshop consulting interested company think tla fm general incredibly valuable tool far widely applicable people suspect thanks jay parlar michael feather feedback
485,Lobsters,formalmethods,CSE-Formal methods,ViennaTalk and Assertch: Building Lightweight Formal Methods Environments on Pharo 4 (2016),http://www.esug.org/data/ESUG2016/IWST/Papers/IWST_2016_paper_18.pdf,viennatalk assertch building lightweight formal method environment pharo,,obj length filter flatedecode stream iij
486,Lobsters,formalmethods,CSE-Formal methods,awesome safety critical,https://github.com/stanislaw/awesome-safety-critical,awesome safety critical,awesomesafetycritical http awesomesafetycriticalreadthedocsioenlatest license awesomebot,awesomesafetycritical list resource programming practice writing safetycritical software content hosted http awesomesafetycriticalreadthedocsioenlatest license extent possible law stanislav pankevich waived copyright related neighboring right awesomesafetycritical list repository contains backup content presented list done ensure availability resource case original source become unavailable every link always point original source unless becomes unavailable case resource backup used link webarchiveorg possible awesomebot tool used check dead link
487,Lobsters,formalmethods,CSE-Formal methods,"Declarative GUIs: Simple, Consistent, and Verified",http://www.cs.swan.ac.uk/~csetzer/articles/PPDP18/PPDP18adelsbergerSetzerWalkingshawAccepted.pdf,declarative gui simple consistent verified,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream
488,Lobsters,formalmethods,CSE-Formal methods,Lists of Posts Formally Verifying Various Hardware Blocks,http://zipcpu.com,list post formally verifying various hardware block,,building test bench cordic arbitrary number bit input output phase bit trivial task however without knowing good component hard know whether component work specification
489,Lobsters,formalmethods,CSE-Formal methods,Formal Semantics and Automated Verification for the Border Gateway Protocol (2016),https://conferences.sigcomm.org/sigcomm/2016/files/program/netpl/netpl16-final2.pdf,formal semantics automated verification border gateway protocol,,obj length filter flatedecode stream xڍz e p b znhz r iaq r rpes u g ql r
490,Lobsters,formalmethods,CSE-Formal methods,TLA+ Community Meeting videos,https://www.youtube.com/watch?v=ifFfxRCX_jw&list=PLWLcqZLzY8u_3mDg2cHmduA5wl4J6hNX2,tla community meeting video,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature tla engineering system quinceañera david langworthy youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature tla engineering system quinceañera david langworthy youtube
491,Lobsters,formalmethods,CSE-Formal methods,Forvis: A Formal RISC-V ISA Specification,https://github.com/rsnikhil/RISCV-ISA-Spec,forvis formal riscv isa specification,riscvisaspec forvis formal riscv isa specification http riscvorg news softfloaths softfloat current status coming soon target spring coming next target summer reading code build forvis run riscv binary install haskell ghc compiler optional onetime build c library without make forvis executable run forvis executable running riscv isa test booting linux kernel,riscvisaspec forvis formal riscv isa specification copyright c rishiyur nikhil bluespec inc portion copyright c niraj nayan sharma bluespec inc see license license detail formal executable specification riscv isa instruction set architecture written extremely elementary haskell deliberately choose extremely elementary subset haskell make readable usable people know haskell plan learn haskell workinprogress one several similar concurrent effort within isa formal specification technical group constituted riscv foundation http riscvorg welcome feedback comment suggestion please see news timeline significant event development forvis us galois softfloaths haskell wrapper berkeley softfloat us berkeley softfloat c library ieee floating point emulation current status forvis support following feature base instruction set supported simultaneously eg program part running mode machine privilege part running supervisor user privilege mode setting misamxl mstatussxl mstatusuxl appropriately standard extension integer multiplydivide standard extension atomic memory ops standard extension c compressed instruction standard extension f singleprecision floating point standard extension doubleprecision floating point privilege level machine privilege level supervisor virtual memory scheme privilege level u user forvis executed today haskell program turn executes riscv elf binary sequential interpretation oneinstructionatatime sequential memory model concurrent interpreter follow later pass riscv isa test following set currently test base instruction set extension extension c extension extension f extension machine privilege supervisor privilege base instruction set virtual memory extension virtual memory extension virtual memory c extention virtual memory extension virtual memory f extension virtual memory repo provide precompiled binary elf file test script run regression sample output log coming soon target spring feature list argument configures forvis make particular allowed implementation choice trap handle misaligned mem access instruction trace exactly match particular implementation coming next target summer interpreter supporting concurrency modeling outoforder execution pipelining speculation multihart integration riscv rvwmo weak memory model reading code expect many people might use reading reference whether build execute clarify understanding riscv isa semantics file srcforvisspechs central file read containing essentially entire isa specification specifies instructionfetch execution kind instruction file remaining file expressed haskell found src h pdf reading guide provided docforvisreadingguidepdf intended used reference perusing actual haskell code standalone document display code fragment automatically extracted actual code caveat need serious updating last revised july caught addition extension c f decode step etc suggest reading code order archdefshs machinestatehs forvisspechs forvisspecihs aluhs forvisspeccommonhs forvisspeczicsrhs virtualmemhs gprfilehs csrfilehs memopshs memoryhs mmiohs runprogramhs mainrunprogramhs mainhs following specific architecture extension read order follow pattern forvisspecihs forvisspeczifenceihs forvisspecahs forvisspecchs forvisspecmhs forvisspecfhs fprfilehs forvisspecdhs fprfilehs ignore following used testing virtual memory translation tandem verification respectively welcome read curious maintestvirtualmemhs maintandemverifierhs build forvis run riscv binary forvis executed sequential riscv simulator sequential oneinstructionatatime semantics building executing standard haskell program install haskell ghc compiler need standard haskell compiler ghc cabal standard buildpackage manager haskell available linux macos window full installation detail found haskellorg also need haskell standard elf library parsing elf file example debian ubuntu system say sudo aptget update sudo aptget install softwarepropertiescommon sudo addaptrepository ppa hvrghc sudo aptget update sudo aptget install install named version ghc cabal optcabal optghc add path export pathoptcabalbin optghcbin path install elf library cabal install lib elf version number current march forvis per se specific version ghc matter since forvis written extremely elementary haskell stable decade however simulator us external haskell library elf softfloaths require ghc version later ghc version tell version ghc os analogous packageinstall using native package mechanism macports apple o x etc please consult haskellorg detail optional onetime build softfloat c library interested riscv f extension single doubleprecision floating point skip section step default makefile build forvis simulator without f build little involved using berkeley softfloat ieee floating point emulation library galois haskell foreignfunction interface wrapper softfloat include f first uncomment float yes line makefile next need following onetime action get build install berkeley softfloat make buildsoftfloat step may trouble since component external git repos please see makefile detailed step necessary make forvis executable build forvis executable forvisexe make exe run forvis executable run following see commandline option executable forvisexe help try following test execute standard riscv isa test forvis executable verbosity respectively make test make make look command makefile execute substitute run test also run two precompiled c program standard hello world program thuemorse program make testhello make testthue follow template test execute many precompiled riscv elf binary found testprograms please see readmetxt directory information binary running riscv isa test please see regressiontestingreadmetxt automatically run forvis elf file directory tree testprograms note default build excludes riscv f extension single doubleprecision floating point run regression expectedly fail isa test f uf ud filename test booting linux kernel provided prebuilt linux kernel elf file provided boot rom containing compiled device tree kernel built expects access following boot rom compiled device tree mib memory timer implementing memorymapped mtime mtimecmp location capable generating timer interrupt memorymapped location msip generaing software interrupt model national semiconductor uart console io supplied source code incorporated forvis executable boot linux kernel toplevel directory created forvis executable see make testlinuxboot take minute intel core mib cache gib memory forvis running take gib memory please see linuxbootlogtxt example see console end boot sequence see prompt various boot progress message architecture kernel memory protection please press enter activate console press key short delay see shell prompt type various shell command done press controlc exit example l bin etc linuxrc root sys usr dev init proc sbin tmp cat proccpuinfo cat proccpuinfo hart isa mmu cat etcinittab cat etcinittab sysinit etcinitdrcs console askfirst binsh c caveat simulation overhead shell response sluggish please wait bit response
492,Lobsters,formalmethods,CSE-Formal methods,Algebraic Principles for Program Correctness Tools in Isabelle HOL (2016),https://www.cl.cam.ac.uk/~vb358/articles/thesis.pdf,algebraic principle program correctness tool isabelle hol,,obj type objstm n first length filter flatedecode stream p g z endstream endobj obj length filter flatedecode stream mh b
493,Lobsters,formalmethods,CSE-Formal methods,Rely-Guarantee Termination and Cost Analyses of Loops with Concurrent Interleavings (2017),http://costa.fdi.ucm.es/papers/costa/AlbertFGM17.pdf,relyguarantee termination cost analysis loop concurrent interleavings,,obj length filter flatedecode stream mw њz n ϣ 爃 xt p uhg endstream endobj obj length filter flatedecode stream w p gu ufs
494,Lobsters,formalmethods,CSE-Formal methods,Modular Verification of Programs with Effects and Effect Handlers in Coq,https://hal.inria.fr/hal-01799712/document,modular verification program effect effect handler coq,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer creationdate keywords moddate trapped false ptexfullbanner pdftex version tex live linux kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream bk
495,Lobsters,formalmethods,CSE-Formal methods,"Storm: A Modern, Probabilistic, Model Checker",http://www.stormchecker.org/about.html,storm modern probabilistic model checker,description video discotec part storm part stormpy webpage characteristic related tool efficient core prism engine modularity gurobi various input language language easy interface stormpy matplotlib cplex pycarl people new issue github chair software modeling verification miscellaneous cool library around website reference,description storm tool analysis system involving random probabilistic phenomenon model arise example distributed algorithm randomization break symmetry process security randomized key generation system biology speciesmolecules interact randomly depending concentration embedded system involving hardware failure ensure system behave correctly typically quantitative aspect model considered example may inevitable system fails due hardware failure certain circumstance may tolerable long happens rarely ie low probability formal method particular model checking proved discover intricate system error probabilistic model checking matured immensely past decade identified key challenge expert promising new direction formal method research day development probabilistic model associated tool quantitative evaluation system performance along correctness r alur henzinger vardi theory practice system design verification acm siglog news video provide threepart tutorial storm youtube tutorial originally presented discotec video try example tutorial even play around modification use link follow along part storm part stormpy python binding storm detail also see corresponding webpage tutorial characteristic several related tool addressing analysis probabilistic system however tool differ substantially regarding among thing supported modeling formalism input language supported propertiesqueries developed different target objective believe characteristic tradeoff storm make unique following motivate detail development goal efficient core model checking data computeintense task worst case state space system searched exhaustively probabilistic model checking even harder sense technique require inmemory representation full system available relies solving gigantic equation system crucial aspect probabilistic model checker therefore efficiency term time memory one storm development goal provide good spacetime tradeoff faster competing tool property system analyze vary drastically storm similar prism several engine determine data structure used build analyze model modularity storm infrastructure built around notion solver small entity implement one set interface example multiple solver available linear equation system bellman equation system stochastic game mixedinteger linear programming milp satisfiability modulo theory smt encapsulating solver like several key advantage first provides easy coherent access task commonly involved probabilistic model checking new functionality often implemented reusing existing solver combining suitable way second enables storm offer multiple highperformance solver backing different dedicated stateoftheart library solve given task structure input model heavily influence performance solver onesizefitsall solution allows pick opportune solver based strength besides may possible include ship library licensing problem example storm offer implementation milp interface using highperformance yet commercial gurobi solver flexibility introduced solver user select gurobi available still pick another fallback solver otherwise furthermore community like smt community active stateoftheart solver today may outdated tomorrow flexibility adding new solver ensures storm easily kept uptodate without destroying backward compatibility finally allows easily develop new solver new strength without knowledge global code base complying interface yield solver used anywhere existing code base various input language let u assume user interested verifying particular system order probabilistic model checker understand behavior system need modeled formal language tool capable treating however different community different tool often favor even demand different input language besides different modeling language different strength weakness depends system hand language suited best sometimes model already created another tool forwarded another tool without transcription target tool requires input different language storm try mitigate problem offering support several major input language rewritten one input language others supported natively storm specific model builder sometimes even analysis procedure tailored towards different input allows storm make domainspecific optimization structure original problem preserved therefore accessible storm easy interface storm try make easy include new functionality developer still somewhat understand architecture make appropriate addition change however suppose user want combine functionality already create new algorithm optimally heshe could abstract c intricacy focus actual algorithm process supported stormpy provides python api ever growing part storm code base binding allow utilize highperformance routine storm combination ease python also make possible intertwine call storm call useful library available python example limited simple io plotting eg matplotlib calling solver cplex library area artificial intelligence machine learning rational function manipulation via pycarl people developer reached via stormdev general feedback question use storm please send u mail feature request bug report please open new issue github storm developed chair software modeling verification rwth aachen university received significant contribution furthermore grateful feedback andor patch received joachim klein tu dresden germany miscellaneous storm roughly line c code january development since went open source contributor supported unix platform would impossible without cool library around website responsible website software modeling verification group move rwth aachen university aachen germany email stormdev dot informatik dot rwthaachen dot de phone reference
496,Lobsters,formalmethods,CSE-Formal methods,Mike Nahas's Coq Tutorial,https://coq.inria.fr/files/nahas_tutorial.v,mike nahas coq tutorial,current subgoal use tactic rewrite current subgoal use tactic rewrite,mike nahas coq tutorial started version tested coq version dedicated kernighan ritchie wrote magnificent introduction programming language introduction coq proof assistant coq help write formal proof formal proof mathematical proof written language similar programming language actually coq language programming language get later formal proof harder human read easier program read advantage formal proof verified program eliminating human error note yes human error could exist verifying program operating system computer etc risk verifying program kept small keeping program simple small part checking proof multiple system make much likely error proof rather verification proof tutorial teach basic using coq write formal proof aim teach powerful subset coq command showing lot actual proof tutorial teach coq command learn enough get started using coq prerequisite tutorial teach use coq write formal proof assume already know write proof know formal logic tried make tutorial easy read nt know thing keep reading might able pick also assume understand programming language nt matter programming language feel unprepared reading section end useful link installing coq easiest thing install coqide graphical version coq window macos installers latest source code available http coqinriafrdownload running linux package manager probably recentish version debianubuntumint sudo apt install coqide fedoracentos might su c yum install coqcoqide arch might sudo pacman coqide like emacs text editor alternative run coqtop commandline version coq also available http coqinriafrdownload linux package usually called coq use emacs also download install proof general emacs mode available http proofgeneralgithubio linux package manager include version debianubuntumint call proofgeneral fedoracentos might call emacscommonproofgeneral arch might call proofgeneral loading file file yes one reading right coq file coq file name usually end v file name currently end txt want change v loading coqide emacs file name end html pdf someone used coq generate document case need find original v file used ca nt find author host recent version http mdnahasgithubiodocnahastutorialv made sure file name end v start coqide emacs load file need know file designed work specific version coq coq research tool developer occasionally make small change file format possible file different version coq progress tutorial may find proof version coq nt like probably make work ca nt try installing latest version coqide downloading latest version tutorial author website http mdnahasgithubiodocnahastutorialv comment coq ignore everything start followed end followed called comment comment first proof begin proving proposition thing could prove proof proof okay exciting ca nt print hello world coq theorem myfirstproof forall prop proof intro intro proofofa exact proofofa qed dissection first proof coq proof start stating trying prove done command theorem word theorem come name theorem myfirstproof want use theorem later refer name come colon statement trying prove period see every coq command end period let skip express want prove go actual proof start unsurprisingly command proof commandterminating period come actual proof take step lastly qed command end proof note instead theorem may also see proof start lemma remark fact corollary proposition mean thing proof use theorem instead qed may also see proof end admitted defined mean different thing use qed coq us different language see proof vernacular language manages definition toplevel interaction command start capital letter theorem proof qed tactic language used write proof command start lowercase letter intro exact unnamed language coq term used express want prove expression use lot operator parenthesis forall prop technically language subset vernacular language useful think thing let take look inside proof since probably scrolled screen reproduce theorem myfirstproofagain forall prop proof intro intro proofofa exact proofofa qed seeing proof coqide proof general valuable show state middle proof show proven still need prove let see different state inside first proof move cursor clicking mouse using arrow key line proof qed let see state point coqide three way menu bar open navigation menu select go tool bar click icon green arrow pointing yellow ball use keyboard combo mac controloptionrightarrow proof general cc center press controlc controlenter different part screen see something like prop proofofa everything bar know exist assumed exist called hypothesis refer everything bar context bar trying prove called current subgoal goal theorem trying prove subgoal trying prove point proof say current subgoal proof may multiple thing remaining prove example proof induction one subgoal base case another subgoal inductive case usually work one subgoal time one working called current subgoal want explain tactic help prove theorem proof probably scrolled screen third time theorem myfirstproofagainagain forall prop proof intro intro proofofa exact proofofa qed first tactic starting state forall prop goal current subgoal start forall prop english would prop one way prove statement like x x integer assume arbitrary integer x show rest statement hold x first tactic intro exactly thus every time see intro think assume tactic intro take forall front subgoal change variable hypothesis context name hypothesis recall context hold thing proven case assumed proven named new hypothesis name variable removed subgoal always keep name possible rule subgoal start forall use tactic intro state intro prop coq prop mean something named type prop future see nat mean type nat natural number see true bool mean true type bool boolean truefalse value place see b c prop mean b c type prop type prop easier explain executed next command next tactic intro said work forall front subgoal work actually shorthand forall b c really mean forall somethingoftypeb b c forall somethingoftypea result intro proofofa remove hidden forall move unnamed variable type hypothesis named proofofa rule subgoal start use tactic intro state second intro command look like prop proofofa talk prop proofofa proof type mean something could proof logic called proposition since proposition type prop prop must type proposition prop important concept let see proposition forall x nat x x forall x nat x x forall prop type prop proof last prop look familiar trying prove right vitally important think prop either true false prop either proof proof godel shattered mathematics showing true proposition never proven tarski went showed proposition even said true false coq deal obstacle modern mathematics restricting prop either proven unproven rather true false got across let go finish first proof second intro tactic subgoal mean need something type proposition need proof previous command moved proof context called proofofa hypothesis context thing know exist type match subgoal want create exact match tactic exact proofofa solves subgoal proof tada first proof rule subgoal match hypothesis use tactic exact okay let try something complicated proof proof going forward theorem forwardsmall forall b prop b b proof intro intro b intro proofofa intro aimpliesb pose proofofb aimpliesb proofofa exact proofofb qed look tactic used proof tactic command proof qed familiar intro exact new one pose going use pose forward proof forward proof creates larger complex hypothesis context one match goal later see backward proof break goal smaller simpler subgoals trivial current proof state right pose command prop b prop proofofa aimpliesb b b subgoal b trying construct proof b context aimpliesb b b recall equivalent forall proofofa b every proof proof b happens proof context called unoriginally proofofa expression aimpliesb proofofa computes proof b associated particular proof command pose assigns result aimpliesb proofofa new hypothesis proofofb note annoying extra set parenthesis necessary around argument pose command rule hypothesis hypothesis forall forall combination forall hypothesis type use tactic pose create something type resulttype proof end exact command could ended exact aimpliesb proofofa think easier read end exact proofofb forward proof let see backward one proof going backward theorem backwardsmall forall b prop b b proof intro b intro proofofa aimpliesb refine aimpliesb exact proofofa qed notice trying prove exact theorem however going show backward proof break goal smaller simpler subgoals start proof trying find proof b change find simpler proof first notice intro command last proof changed intro command take number argument argument stripping forall front current subgoal warning nt use intro argument nt expect could combined intro single command think cleaner introduce prop derived value separately state right refine command prop b prop proofofa aimpliesb b b subgoal prop b trying construct proof b know aimpliesb create proof b given proof saw syntax aimpliesb somethingoftypea command refine aimpliesb let u create proof b without specifying argument type parenthesis necessary parse correctly solves current subgoal type b unspecified argument represented underscore become new child subgoal prop b prop proofofa aimpliesb b case child subgoal u trying find proof since child subgoal indent tactic used solve tactic solve well worn exact rule subgoal hypothesis use tactic refine n underscore important thing take away proof changed subgoal happens backward proof keep changing subgoal make smaller simpler nt seem much smaller simpler b let rev proof going backward large theorem backwardlarge forall b c prop b b c c proof intro b c intro proofofa aimpliesb bimpliesc refine bimpliesc refine aimpliesb exact proofofa qed look sequence tactic start pair intro followed new kid block refine finish exact pattern start look familiar soon state first refine prop b prop c prop proofofa aimpliesb b bimpliesc b c c current subgoal c c end b c refine bimpliesc command creates new child subgoal b subgoal b b end b refine aimpliesb creates new child subgoal finish exact proofofa easy pie let really big example proof going backward huge theorem backwardhuge forall b c prop b b c c proof intro b c intro proofofa aimpliesb aimpbimpc refine aimpbimpc exact proofofa refine aimpliesb exact proofofa qed yes something different starting intro refine command indented two exact state first refine prop b prop c prop proofofa aimpliesb b aimpbimpc b c c subgoal c c end b c refine aimpbimpc notice aimpbimpc two implication arrow refine requires two underscore creates two subgoals one something type another something type b hinted formal proof actually written programming language see clearly aimpbimpc function take two argument one type one type b return value type c type function b c call look like aimpbimpc somethingoftypea somethingoftypeb notice parenthesis needed put argument next name function example function style common functional programming language familiar imperative language like c c java feel odd parenthesis comma denote argument first refine created two subgoals coqide proof general tell two subgoals exist show context current subgoal text proof represent refine created multiple subgoals formatting like ifthenelse switchmatch statement programming language proof subgoal get indented use blank line separate proof first subgoal trivial need proofofa exact proofofa completes subgoal put blank line proof show moving next subgoal rest proof seen proof indented show result branch proof created refine aimpbimpc seen complex theorem proved backward proof let see would look like forward one proof going forward huge theorem forwardhuge forall b c prop b b c c proof intro b c intro proofofa aimpliesb aimpbimpc pose proofofb aimpliesb proofofa pose proofofc aimpbimpc proofofa proofofb exact proofofc show proof qed theorem except forward proof instead backward one proof see programming language underneath proof aimpliesb function type b call argument proofofa generates proof b pose command assigns resulting value unimaginative name proofofb likewise aimpbimpc function type b c called proofofa proofofb produce proof c becomes hypothesis proofofc new vernacular command end show proof put cursor right press controloptionrightarrow coqide cc center proof general see actual code proof look like fun b c prop proofofa aimpliesb b aimpbimpc b c let proofofb aimpliesb proofofa let proofofc aimpbimpc proofofa proofofb proofofc formatted version correspondence proof clearer intro command declare parameter function pose declares constant value function lastly exact command used return result function go see tight relationship coq proof code point want emphasize coq proof normally tedious verbose proof shown proof show demonstrating mechanic coq work using simple familiar type make mechanic operation clear coq tactic language contains command automatic theorem proving defining macro almost proof tutorial simple enough dispatch single coq tactic prove complicated statement need command teaching tutorial help explain coq proof backwards goal transformed simple enough subgoals subgoals proved automation far worked proof proposition prop let add type true false v true false vernacular command inductive let create new type wanted introduce boolean type two value true false problem addition true false coq two entity named true false first letter capitalized keep difference straight mind going introduce inductive false prop inductive true prop true inductive bool set true bool false bool capitalf false prop proof capitalt true prop single proof called capitali number lastly bool set bool two element lowercaset true lowercasef false find name confusing recall prop thing may proof think capitalt true capitalf false named provable unprovable alwaysprovable neverprovable lowercase one act like accustomed since playing prop let proof badly named true false come back lowercase true false later capitalt true capitalf false true provable theorem truecanbeproven true exact qed look state first line proof see true hypothesis context empty trying find proof true definition true single proof called exact solves proof rule subgoal true use tactic exact turn false unprovability wrote earlier proposition either proof yet proof case prove proposition never proof showing every possible proof proposition could generate proof false false proof definition know proposition proof show prop proof need show forall proofofa false equivalently false often operator represent definition prop false notation x x typescope definition vernacular command say two thing interchangeable false interchangeable notation vernacular command creates operator case defines alternate notation expression case since take prop applied prop note notation command operator created forall let try prove thing unprovable false unprovable theorem falsecannotbeproven false proof unfold intro proofoffalse exact proofoffalse qed new tactic unfold said definition say two expression interchangeable well unfold fold interchange unfold false false unfold expose really familiar using tactic intro remove front subgoal command intro proofoffalse go usual intro start exact end feel weird hypothesis labeled proofoffalse nt weird know false proof hypothesis never exist would nt better could say directly theorem falsecannotbeprovenagain false proof intro proofoffalse case proofoffalse qed theorem two thing changed proof first nt unfold since know shorthand skip unfold tactic go straight using intro rule subgoal use tactic intro second change found new way finish proof instead exact use case tactic case powerful creates subgoals every possible construction argument since way construct false case creates subgoals without subgoal done rule hypothesis false use tactic case example use true false see coq operator really act like implication logic theorem thmtrueimptrue true true proof intro proofoftrue exact exact proofoftrue also work qed theorem thmfalseimptrue false true proof intro proofoffalse exact case proofoffalse also work qed theorem thmfalseimpfalse false false proof intro proofoffalse case proofoffalse exact proofoffalse work recommended qed true false never proven demonstrate proving true false theorem thmtrueimpfalse true false proof intro timpliesf refine timpliesf exact qed proof obvious reducto ad absurdium another staple logic reduction absurdity proposition proof prove proof conclude anything theorem forall c prop c proof intro c intro proofofa proofthatacannotbeproven unfold proofthatacannotbeproven pose proofoffalse proofthatacannotbeproven proofofa case proofoffalse qed tricky proof since subgoal c nt appear hypothesis end proof exact somethingoftypec option know far case proof false tactic unfold used interchange definition hypothesis expose type really false function proof proof false knowledge call function proofofa get proof false end proof case proof false serious proof done much prop let get back bools return lowercase true lowercase false remember introduced capitalt true capitalf false type prop also introduced type bool type bool two different constructor lowercaset true lowercasef false inductive bool set true bool false bool true false type bool bool type set set type normal datatypes like bool natural number type see exception proposition type prop let load helper function type bool require import bool require import vernacular command load definition library case library named bool file named boolv contains definition proof etc two function definition eqb bool bool match true true true true false false false true false false false true end definition istrue b bool match b true true false false end first function eqb return true two argument match eqb short equal type bool second function istrue convert bool prop future use true nt described yet operator really cool understand basic type like bool first let proof function istrue true true theorem trueistrue istrue true proof simpl exact qed istrue function istrue true function called argument true since istrue type bool prop know function call return prop something proven proof demonstrates exists proof istrue true admittedly istrue true seems like dumb thing prove later replace argument true useful boolean expression like comparison proof contains new tactic simpl short simplify function call definition function tactic simpl execute function argument case function return something type prop prop happens true yes function returned type common coq true becomes new subgoal seen prove subgoal true exact true defined single proof named rule current subgoal contains function call argument use tactic simpl promised would see istrue complex argument let show istrue called complex constant theorem noteqbtruefalse istrue eqb true false proof simpl exact falsecannotbeproven qed tactic simpl executes function produce subgoal false look familiar proved could copyandpaste proof could say proof already exists gave proof false name falsecannotbeproven tactic exact falsecannotbeproven finish proof immediately sweet nt let look complex call istrue get see tactic case show power case bools theorem eqbaa forall bool istrue eqb proof intro case suppose true simpl exact suppose false simpl exact qed take look state case two subgoals said case creates subgoals every possible construction argument far used case hypothesis type false false constructor generates subgoals end proof hypothesis type bool two possible constructor true false thus case creates two new subgoals one replaced true second replaced false note replacement true false happens inside subgoal happen hypothesis sometimes important control calling case believe good style label two different case comment suppose since definition bool listed true false subgoal true becomes current subgoal prove case false become current subgoal rule hypothesis created type hypothesis used subgoal try tactic case let one example theorem thmeqbat forall bool istrue eqb true istrue proof intro case suppose true simpl intro proofoftrue exact suppose false simpl intro proofoffalse case proofoffalse qed example control location using tactic case usually would intro followed another intro move everything hypothesis one usage would move subgoal hypothesis case would replace true false case tactic change subgoal unable prove theorem instead left subgoal delayed second intro case command fact simpl result usage replaced true false theorem provable one amazing thing coq fundamental rule simple even thing like defined term start show special feature showing definition want see example definition make sense example imagine hypothesis natural number x x x true false x x see function argument proposition thing could proved know proved result call must proposition since proposition type prop type b prop prop function take two proposition b return proposition said result proposition something might proof create proof need see definition inductive b prop prop orintrol b orintror b b b b typescope vernacular command four thing declares function take two prop produce prop declares orintrol constructor take proof return proof b declares orintror constructor take proof b return proof b declares operator interchangeable one way think say b creates type orintrol proofofa orintror proofofb instance type fact way create thing type using constructor orintrol orintror important note constructor like orintrol orintror function called definition made call function executed result looked tactic simpl remove opaque constant vernacular command inductive creates new type called inductive since let create inductive type although none type far inductive change command saw earlier declare new type constant inductive false prop inductive true prop true inductive bool set true bool false bool right want play let get proving theorem leftor forall b prop b proof intro b intro proofofa pose proofofaorb orintrol proofofa b exact proofofaorb qed proof gone pretty much expected complication pose command could infer type b orintrol proofofa type given explicitly putting b end orintrol proofofa proof anything proof shorter without pose since coq know type subgoal trying prove see similar proof using orintror theorem rightor forall b prop b b proof intro b intro proofofb refine orintror exact proofofb qed even shorter proof would exact orintror proofofb nt know constructor argument using refine fine approach rule subgoal topmost term created type use refine let prove something little complicated commute theorem orcommutes forall b b b proof intro b intro aorb case aorb suppose aorb orintrol proofofa intro proofofa refine orintror exact proofofa suppose aorb orintror proofofb intro proofofb refine orintrol exact proofofb qed proof us tactic case consider two different way might constructed hypothesis b one possibility using orintrol proofofa would meant proof case tactic put front subgoal use intro proofofa move proof context notice case changed subgoal context case never change context useful property know look working possibility creating hypothesis b constructor orintror used used exist proof b second case created case subgoal b front use intro proofofb move context proofofa proofofb context proof subgoal follow pattern seen seen work let take look think go straight definition inductive b prop prop conj b b b b typescope could expect function take two prop return prop exact saw however two constructor took one argument single constructor take two argument one way create something type b use conj proofofa proofofb let go straight proof theorem bothand forall b prop b b proof intro b intro proofofa proofofb refine conj exact proofofa exact proofofb qed pretty simple proof one constructor thing type b conj take two argument refine become two subgoals proof trivial seeing easy let jump complex proof commute theorem andcommutes forall b b b proof intro b intro aandb case aandb suppose aandb conj proofofa proofofb intro proofofa proofofb refine conj exact proofofb exact proofofa qed case tactic looked different way construct hypothesis found one conj proofofa proofofb tactic created one subgoal required value front subgoal similarly need build satisfy subgoal one way construct conj two argument thus refine two subgoals created one requiring something type b requiring something type destruct tactic previous proof used case create subgoals constructor something type b one constructor really nt need indent waste line comment saying suppose really nice nt write intro command luckily coq provides tactic called destruct little versatile case recommend using type single constructor format destruct put comment name constructor inside square brace result much shorter cleaner proof theorem andcommutesagain forall b b b proof intro b intro aandb destruct aandb conj proofofa proofofb refine conj exact proofofb exact proofofa qed rule hypothesis created type one constructor use destruct extract argument function inductive type saw work prop inductive type section introduce andb orb working bool rather inductive type andb orb function clear inductive type type defined instance produced calling opaque function called constructor constructor thing like orintrol orintror conj fact type bool also inductive type two constructor true false constructor take argument closer constant opaque function manipulate bool could use inductive type much easier define function already seen one function bools eqb equality function coq defines andb bool bool orb bool bool negb b bool bool called negation reason like eqb name ended b indicate work bool two function also come operator infix andb boolscope infix orb boolscope get good practice proving function bools equivalent inductive type prop part need form equality proposition called double implication definition iff b prop b b notation b iff b typescope know everything see proof remember simpl used execute function case destruct used inductive type theorem orbisor forall b istrue orb b istrue istrue b proof intro b unfold iff refine conj orb intro h case b suppose b true true simpl refine orintrol exact suppose b true false simpl exact orintrol suppose b false true exact orintror suppose b false false simpl h case h orb intro h case b suppose b true true simpl exact suppose b true false exact suppose b false true exact suppose b false false case h suppose h orintrol intro simpl case suppose h orintror b intro b simpl b case b qed wow kansa first used case split hidden inside second inside branch case b created subgoals every possible combination two constructor thought proof clearer way even though case followed case b might shorter proof b true easy proof see make proof shorter went along combining refine exact skipping right simpl b false decided best case instance false orb pretty easy simpl h executed function call inside hypothesis gave hypothesis type false case h ended subgoal however inductive type complicated used case h consider different way constructing constructor orintrol orintror lead false hypothesis real proof welcome big league rule hypothesis contain function call argument use tactic simpl let try andb theorem andbisand forall b istrue andb b istrue istrue b proof intro b unfold iff refine conj andb intro h case b suppose b true true simpl exact conj suppose b true false simpl h case h suppose b false true simpl h case h suppose b false false simpl h case h andb intro h case b suppose b true true simpl exact suppose b true false simpl h destruct h conj b case b suppose b false true simpl h destruct h conj b case suppose b false false simpl h destruct h conj b case qed admit tactic easy proof notb equivalent statement theorem fill think include proof would normally see proof see tactic admit vernacular command admitted tactic admit cheat end subgoal without solving proof containing admit real proof coq force end admitted instead qed use command coq parser wo nt get hung nt include proof theorem admit tactic real us multiple subgoals want skip easy one work hard one first admit tactic used get easy subgoals way part way done proof want send someone coq file par admit used fill blank take swing proving theorem hint remember false hint make use proof falsecannotbeproven hint get stuck look thmtrueimpfalse theorem negbisnot forall istrue negb istrue proof admit delete admit put proof admitted done replace admitted qed rule subgoal want ignore use tactic admit existence equality like concept exists equality fundamental coq concept defined inside forall notion creating type constructor fundamental coq existence coq declare something exists must prove example might want prove exists bool istrue andb true state bool exists need produce value called witness prove statement hold witness definition operator inductive ex type p prop prop exintro forall x p x ex p notation exists x p ex fun x ex fun p level x binder right associativity format exists x p typescope proposition ex p read p function returning prop exists argument function p arg proven function p known predicate constructor ex p take predicate p witness called x proof p x order return something type ex p exists operator provide friendly notation existence usually operator capital e written backwards difficult type coq us word exists let test easy theorem already mentioned definition basicpredicate fun istrue andb true theorem thmexistsbasics ex basicpredicate proof pose witness true refine exintro basicpredicate witness simpl exact qed start defining predicate function take single argument coq determine bool key part proof tactic refine exintro argument exintro predicate witness proof predicated called witness usage passed exintro predicate witness use create new subgoal proof tactic simpl exist used solve proof prove theorem time use exists operator show much cleaner look theorem thmexistsbasicsagain exists istrue andb true proof pose witness true refine exintro witness coq automatically determines predicate left prove witness satisfies function simpl exact qed rule current subgoal start exists create witness use refine exintro witness existence often use exists forall time thus end proof like following theorem thmforallexists forall b exists istrue eqb b proof intro b case b b true pose witness true refine exintro witness simpl exact b false pose witness false refine exintro witness simpl exact qed look proof witness always equal b let try simplifying proof theorem thmforallexistsagain forall b exists istrue eqb b proof intro b refine exintro b witness b exact eqbaa b qed used b witness ended state b bool istrue eqb b b already proved theorem eqbaa forall bool istrue eqb told type function shorthand forall far leap see theorem eqbaa function bool called statement proof istrue eqb current proof needed statement hold particular hypothesis b done function call eqbaa b substitute specific b place generic body forall result istrue eqb b b solves proof exists forall classic theorem logic showing relationship forall exists give u chance destruct instance type ex theorem forallexists forall p set prop forall x p x exists x p x proof intro p intro forallxnotpx unfold intro existsxpx destruct existsxpx exintro p witness proofofpwitness pose notpwitness forallxnotpx witness unfold notpwitness pose proofoffalse notpwitness proofofpwitness case proofoffalse qed proof requires explanation use intro unfold everything context use destruct extract witness proof p witness call forall x p x witness generate p witness false call p witness false p witness get proof false use tactic case proofoffalse proof hard read difficulty reading proof always use coqide proof general step proof look state tactic another good example exists proving implication go way theorem existsforall forall p set prop exists x p x forall x p x proof intro p intro notexistsxpx intro x unfold intro px unfold notexistsxpx refine notexistsxpx exact exintro p x px qed nt readable proof go use intro unfold subgoal false use refine call function whose type end false create something type exists calling exintro calculating witness predicate witness single value easy generate time nt case write function calculate witness right ca nt write complicated function since know type list natural number see example equality come big prize equality equality derived concept coq inductive type like ex exists found shocked fascinated defined inductive eq type x prop eqrefl x x x eq x typescope notation x x typescope inductive statement creates new type eq function type value type prop note one value type written x written done coq infers type first value second calling eq argument return proposition type prop proof eq x mean x type x equal way create proof type eq use constructor eqrefl take value x type return eq x x x equal prevents coq inferring value like type name eqrefl come reflexive property equality lastly come two operator le commonly used one x let say x equal type one use time x let coq infer type instead forcing type paying attention saw eqrefl constructor create proof x x nt seem useful nt see coq allows execute function call substitute result function call example function plus added natural number type nat could use eqrefl plus create proof eq nat plus plus execute second function call get eq nat plus concept substituting function call result substituting result function call called convertibility one tactic seen simpl replaces convertible value see tactic future concept mean coq let use equality symmetric theorem thmeqsym forall x set x x proof intro x intro xy destruct xy eqrefl exact eqrefl x qed use destruct tactic type eq one constructor let look state call x set set xy x x x set x x destructing eqrefl coq realizes x convertible wherever second name replaced first disappears replaced x note destruct unlike case change context hypothesis xy also disappear destruct left subgoal x x solved calling eqrefl become familiar let prove big property equality transitivity equality transitive theorem thmeqtrans forall x z set x z x z proof intro x z intro xy yz destruct xy eqrefl destruct yz eqrefl exact eqrefl x qed seems pretty easy nt rather using destruct proof using equality use tactic rewrite rewrite z x z proof intro x z intro xy yz rewrite xy rewrite current subgoal use tactic rewrite rule hypothesis current subgoal use tactic rewrite let try something explicitly relies convertibility recall andb bools represented operator theorem andbsym forall b b b proof intro b case b suppose b true true simpl exact eqrefl true suppose b true false simpl exact eqrefl false suppose b false true simpl exact eqrefl false suppose b false false simpl exact eqrefl false qed proof divided case used convertibility show equality held pretty simple example inequality inequality discriminate coq us operator inequality really mean equality unprovable equality implies false notation x x typescope notation x x typescope let start simple example recall negb operation bools theorem neqnega forall negb proof intro unfold case suppose true intro aeqnega simpl aeqnega discriminate aeqnega suppose false intro aeqnega simpl aeqnega discriminate aeqnega qed prove delay calling intro case aeqnega would get replaced true false also used new tactic discriminate discriminate operates hypothesis value inductive type compared using equality constructor used generate type different like true false coq know situation never happen like proof false case discriminate end subgoal working inductive type use discriminate eliminate lot case never happen rule hypothesis use tactic discriminate really show equality need something numerous booleans next natural number infinite set object induction allows u prove property infinite set object natural number induction peano arithmetic natural number simplest mathematical concept contain unbounded number value peano published simple set axiom fundamental rule defined natural number prove thing peano axiom become standard way logic talking manipulating natural number complex scheme like decimal number usually use justified proving equivalent peano axiom peano definition natural number natural number every natural number n n natural number n spoken successor n think n list first peano natural number would peano natural number represented coq type nat inductive nat set nat nat nat warning capitalletter number zero coq natural number exactly match definition peano want something nat need function peano definition addition look coq fixpoint plus n nat nat match n p p end n plus n natscope previously used vernacular command definition define function command fixpoint fixpoint must used time define recursive function hard see plus call recursive call hidden p know let see property hold coq difference line one execution function call plus plus plus plus execution plus strip front first number put front recursive call plus first parameter plus return second argument remember constructor opaque function created declared nat way execute therefore function call executed therefore canonical form number proof need one call simpl get canonical form theorem proof simpl exact eqrefl qed see eqrefl coq translate decimal number term nat automatically mean capitalletter digit really term prevents lot mistake way instruct coq treat decimal type integer rational etc convince function plus property associated addition proving property let prove theorem pluson forall n n n proof intro n simpl exact eqrefl n qed induction easy prove forall n n n much harder prove forall n n n reason function plus executes match first parameter first parameter constant use simpl execute plus get answer first argument variable like n ca nt solve need proof induction n peano axiom induction p predicate p proven n p n p n proven p n proven n proof p known base case proof forall n nat p n p n known inductive case inside case p n known inductive hypothesis nat declared coq created function exactly represents induction nat called natind see type vernacular command check check natind output look like natind forall p nat type p forall n nat p n p n forall n nat p n could define function p n represents n n prove function hold p prove function hold p n assuming p n call function natind value lot work luckily coq defines tactic work u tactic take subgoal infer predicate p generates child subgoals piece one tactic elim work similarly case theorem plusno forall n n n proof intro n elim n base case simpl exact eqrefl inductive case intro n intro inductivehypothesis simpl rewrite inductivehypothesis exact eqrefl n qed obvious tactic elim generates base case inductive case important show n inductive case different original n goal chose name n spoken n prime used rewrite tactic inductive hypothesis substitute n subgoal using elim tactic always use inductive hypothesis nt use case tactic instead elim rule hypothesis created type hypothesis used subgoal type recursive definition try tactic elim induction tactic case tactic similar destruct tactic elim tactic similar induction tactic let look previous proof using new tactic theorem plusnoagain forall n n n proof intro n induction n n inductivehypothesis base case simpl exact eqrefl inductive case simpl rewrite inductivehypothesis exact eqrefl n qed induction tactic thing elim except name created variable listed tactic rather assigned later using intro inductive case proof induction command creates subgoals one base case another inductive case keyword list variable name one base case one inductive case list separated verical bar inside square bracket base case nt create variable list empty inductive case creates two variable named n inductivehypothesis said induction command similar destruct type destruct ed one constructor destruct command create subgoals constructor command need list variable name constructor example type two constructor recall something type b created orintrol proofofa orintror proofofb destruct b create two subgoals destruct need list variable demonstrate redo proof commute theorem orcommutesagain forall b b b proof intro b intro aorb destruct aorb proofofa proofofb suppose aorb orintrol proofofa refine orintror exact proofofa suppose aorb orintror proofofb refine orintrol exact proofofb qed proof like use case elim use destruct type single constructor however people prefer use destruct induction every proof writer coq talking removing duplication may remove case elim future want use destruct induction helpful use vernacular command print print definition show many constructor variable need name one print print natind return proof induction using nat let difficult proof let prove n n addition symmetric theorem plussym forall n n n proof intro n elim n base case n elim base case exact eqrefl inductive case intro intro inductivehypm simpl rewrite p p end n mult n natscope also defined n minus n n le n n lt n n ge n n gt n along x z x z x z x z x z x z x z x z max n min n dangerous one group minus natural number nt go lower return negative number since coq must return something type nat return instead crazy proof like without intending theorem minusisfunny proof simpl exact eqrefl qed later list show different way implement minus without flaw data type learned basic coq section introduces commonly used data type get see get experience reading proof require import list list option list common data structure functional programming imperative program use array definition singlylinked list coq inductive list type type nil list con list list address type type second moment know list take type called either empty constructed using nil node containing value type link another list number earlier place ignored type type hide magic coq saw early proofofa proof type proposition since proposition type prop type type type prop answer type answer next n question type type type type type type etc similarly true type bool bool type set set type type like prop coq hide infinite hierarchy user magic type type use type coq determine value lie prop set type type going back list operator building list infix con level right associativity listscope value nil would list nat containing value simple function work type list length definition length type list nat fix length l match l nil l length l end get started let prove adding element list increase length theorem consaddsonetolength forall type forall x lst list length x lst length lst proof intro intro x lst simpl exact eqrefl length lst qed proof pretty simple statement want prove first need type stored list need instance instance list state putting element front list increase length three form hd simplest function imagine linked list hd return first value list problem return list empty programming language might throw exception either explicitly memory violation others might assume program crash prove program correct nt choice make program need predictable choice make hd take additional parameter return list empty hd return new data structure may may contain value pas hd proof list empty nt think last one show approach see look like hd additional parameter definition hd type default l list match l nil default x x end default version hd coq look like would expect version useful might think thanks partial evaluation partial evaluation passing argument function coq many functional language result new function supplied argument treated like constant function remaining parameter still passed thus definition myhdfornatlists hd nat remaining parameter list still passed myhdfornatlists type parameter bound nat parameter default bound zero confirm work correctly using vernacular command compute executes function call print result compute myhdfornatlists nil print nat compute myhdfornatlists nil print nat also prove correct theorem correctnessofhd forall type forall default x lst list hd default nil default hd default x lst x proof intro intro default x lst refine conj simpl exact eqrefl default simpl exact eqrefl x qed hd return option second approach hd return another data structure either contains first value list contains nothing coq defines generic data structure called option inductive option type type option none option option type two constructor take value none get value option proof branch using case look branch constructor likewise program use match look branch coq includes version hd return option called hderror definition hderror type l list match l nil none x x end using compute examine return compute hderror nat nil print none option nat compute hderror nat nil print option nat also prove correct theorem correctnessofhderror forall type forall x lst list hderror nil none hderror x lst x proof intro intro x lst refine conj simpl exact eqrefl none simpl exact eqrefl x qed hd proof list nonempty option available programming language seen pas hd proof list empty hd never fail definition hdneverfail type lst list safetyproof lst nil match lst b return lst b nil fun foo lst nil match safetyproof foo return end x fun foo lst x x end eqrefl nt expect understand function let alone write took minute write mostly copying code printed using show proof complicated proof expect understand written coq expect able read proof function said theorem correctnessofhdneverfail forall type forall x rest list exists safetyproof x rest nil hdneverfail x rest safetyproof x proof intro intro x rest assert witness x rest nil unfold intro conseqnil discriminate conseqnil refine exintro witness simpl exact eqrefl x qed proof pretty simple create witness exists since witness involves inequality end proof discriminate use simpl show function return right value proof used tactic assert instead pose wanted write pose witness x rest nil coq allow reason pose complete value want use whole value pose use tactic assert tail list hd extract first value list partner tl return list first element coq definition definition tl type l list match l nil nil end want test skill would good practice write three different version tl like hd prove correct definition tlerror type l list option list definition tlneverfail type lst list safetyproof lst nil list simple proof hd tl nonempty list used reconstruct list theorem hdtl forall type forall default x lst list hd default x lst tl x lst x lst proof intro intro default x lst simpl exact eqrefl x lst qed appending list often want add one element front list coq includes function app short append concatenate two list definition app type list list list fix app l match l nil app end infix app right associativity level listscope nice theorem try prove appending list since append defined recursively many theorem must proved induction using elim tactic theorem appnill forall type forall l list nil l l proof admit delete admit put proof admitted done replace admitted qed theorem appnilr forall type forall l list forall l list l nil l proof admit delete admit put proof admitted done replace admitted qed theorem appcommcons forall x list x x proof admit delete admit put proof admitted done replace admitted qed theorem appassoc forall l n list l n l n proof admit delete admit put proof admitted done replace admitted qed theorem appconsnotnil forall x list nil x proof admit delete admit put proof admitted done replace admitted qed conclusion designed tutorial give enough get started coq know enough concept idea thing work coq thing relate may know small number simple tactic powerful enough prove real theorem get experience see complex concept use tactic may even get use ssreflect separate tactic language read coq proof also see different style writing proof expert tell tutorial simple style strikingly different used proof hope seen power possibility coq many expert provers consider coq proof puzzle wish luck solving puzzle postscript contact html coq version tutorial hosted author professional website http mdnahasgithubiodocnahastutorialhtml http mdnahasgithubiodocnahastutorialv author michael nahas reached michael nahascom reading coq us lot concept nt explain good source topic learning proof recommend pulitzer prize winning book godel escher bach chapter page copy learning idea used formal proof read intuitionistic logic curryhoward correspondence bhkinterpretation http enwikipediaorgwikiintuitionisticlogic http enwikipediaorgwikicurryhowardcorrespondence http enwikipediaorgwikibhkinterpretation deep interest logic highly recommend gentzen investigation logical deduction necessary beautiful paper need learn programming language ocaml one would help coq coq written ocaml borrows lot ocaml syntax style http ocamlorg learn coq found textbook software foundation readable focus proving program correct also look coq documentation webpage http softwarefoundationscisupennedu http coqinriafrdocumentation vernacular command theorem start proof qed end proof admitted end incomplete proof definition declares function fixpoint declares recursive function inductive declares data type notation creates new operator infix also creates new operator show proof print current state proof require import read definition file check print description type compute print result function call tactic guide rule subgoal start forall use tactic intro rule subgoal start use tactic intro rule subgoal match hypothesis use tactic exact rule hypothesis hypothesis forall forall combination forall hypothesis type use tactic pose create something type resulttype rule subgoal hypothesis use tactic refine n underscore rule subgoal true use tactic exact rule subgoal use tactic intro rule hypothesis false use tactic case rule current subgoal contains function call argument use tactic simpl rule hypothesis created type hypothesis used subgoal try tactic case rule subgoal topmost term created type use refine rule hypothesis created type one constructor use destruct extract argument rule hypothesis contain function call argument use tactic simpl rule subgoal want ignore use tactic admit rule current subgoal start exists create witness use refine exintro witness rule hypothesis current subgoal use tactic rewrite rule hypothesis current subgoal use tactic rewrite rule hypothesis use tactic discriminate rule hypothesis created type hypothesis used subgoal type recursive definition try tactic elim
497,Lobsters,formalmethods,CSE-Formal methods,TLA+ in Isabelle/HOL,https://davecturner.github.io/2018/02/12/tla-in-isabelle.html,tla isabellehol,isabellehol proof assistant tla system introduction tlc model checker tlaps proof system tlaps ron pressler say practical hint gcd theory isabelle formalisation typed tla example termination detection dijkstra distributed termination detection algorithm full description gist resulting theory initial experience definition defines type ordering induction principle type definition initial state definition action perform termination probe look like defined locally action may occur outside control termination detection algorithm remainder specification definition algorithm detects termination safety algorithm safety condition showing safety invariant implies safety property result follows quickly liveness characterised like little lemma specialise follows closing thought,fan longterm user isabellehol proof assistant recently studying lamport tla system popular choice writing specification system post slightly tidiedup version note early experience playing implementation tla within isabellehol record handful obstacle hit technique found useful addendum post grown series post continues expand introduction tla simple lineartemporal logic expressive enough describe evolution system time lineartemporal logic typically allow formula written express relationship state system arbitrary time whereas tla one really talk action relationship pair successive state make thing whole load simpler without much practical effect expressiveness logic additionally constraint kind formula written force specification invariant stuttering make much straightforward compose specification smaller specification reflecting decomposition system subsystem two main tool aware help investigate validity tla specification tlc model checker tlaps proof system tlc capable completely verifying property finite model pretty good job exploring infinite model tlaps proof system promise ability formally prove property tla model allowing rigorous verification modelchecker tlc offer tlaps never used tlaps read bit since currently interested tla logic much familiar isabelle thought useful play around tla isabelle rather try learn whilst also learning tlaps said noted question tlaps like answer due course firstly time writing tlaps website say current release tlaps perform temporal reasoning handle feature tla tlaps suitable verifying safety property nontrivial algorithm interested proof safety liveness property ron pressler say website date give simple example temporal reasoning tlaps limit day instance use custom induction principle liveness proof next practical hint section tlaps manual say following use assume axiom asserting fact dangerous easy make mistake assert something false making entire proof unsound fortunately use tlc model checker avoid mistake go suggest following assumption assume p q nat p q gcd p q gcd p qp written assumption keep example short tlaps prove property like relying tlc verify kind property hold many instance often fine valuable able quickly check statement developing specification find unsatisfactory eventually proved spent nearly year developing theory turned worthless due plausible yet false assumption first page perhaps unreasonably averse making sort mistake furthermore tlaps really frontend variety provers including isabelle property specialisation lemma isabelle gcd theory part extensive library formalised mathematics feel tlaps able use lemma directly instead relying userspecified assumption interesting find whether possible also raise question integration tlaps isabelle work particularly whether possible automatically carry definition across tla way let continue use isabelle rich proof system directly isabelle purpose article really talk tlaps set context excitement discovering isabelle includes formalisation typed tla without obvious restriction supported feature tla integration rest isabelle mathematical library fact formalisation support socalled raw tla superset tla stutteringinvariant stutteringinvariance useful property specification make easier compose seems likely sound useful able work raw stutteringsensitive superset proof example termination detection tlaps distribution includes example one caught eye formalisation dijkstra distributed termination detection algorithm setup fixed network node active activate node passing message purpose algorithm detect node become inactive work passing token node node ie ring collect information existence active node little subtle inactive node already passed token may activated node yet received token becomes inactive full description worth reading detail example tlaps distribution includes proof safety property say algorithm detects termination node indeed inactive terminationdetection terminationdetected node active theorem spec terminationdetection also includes statement proof liveness property say node inactive algorithm eventually detects termination liveness node active terminationdetected thought cute exercise see algorithm looked like formalised isabelle see proof liveness property looked like posted gist resulting theory walk highlight initial experience initially found quite hard work use tla theory least partly clever syntactic trick pull isabelle tla formula look like turnstile denotes following formula valid ie true possible world overloading going sometimes world single state others pair consecutive state yet others behaviour morally infinite sequence state formula behaviour involves leadsto operator operand leadsto operator may singlestate statepair formula led certain amount frustration theorem formula like one might applicable certain type type constraint clear usual output exploring helped lot make isabelle much verbose declaration declare showtypes declare showconsts source confusion many thing look like function fact syntactic trick name previouslydeclared function written black text thing like init enabled kind turquoise colour really function mean easily search theorem mention query tab since init wellformed term searching yield syntax error definition isabelle version tla typed unlike lamport tla utility lemma theory defines type axiomatization nodecount nat nodecountpositive nodecount typedef node nodecount using nodecountpositive auto defines finite type node subtype natural number think would still worked use nat throughout although using separate type keep proliferating assertion node number nodecount node separate type nat need explicitly define thing like ordering induction principle used later datatype terminationstate maybeterminated notterminated type used instead colour respectively white black state token node axiomatization isnodeactive node bool stfun nodestate node terminationstate stfun tokenposition node stfun tokenstate terminationstate stfun ewdbasevars basevars isnodeactive nodestate tokenposition tokenstate declares variable along type stfun type constructor short state function indicates depends state system basevars axiom effectively say variable independent value freely changed action definition startstate stpred startstate pred tokenposition firstnode tokenstate notterminated definition initial state look like type stpred mean state predicate short bool stfun recall tokenposition tokenstate base variable prefix firstnode notterminated lift constant value become constant state function pred thing syntactic trickery let isabelle know following syntax parsed state predicate ordinary expression necessary prefix work also note conjunction overloaded version usual one applies state separately definition initiateprobe action initiateprobe act tokenposition firstnode tokenstate notterminated id nodestate firstnode notterminated tokenposition lastnode tokenstate maybeterminated unchanged isnodeactive updatedfun nodestate firstnode const maybeterminated definition passtoken node action passtoken act tokenposition tokenposition firstnode id isnodeactive id nodestate notterminated tokenstate notterminated tokenposition previousnode tokenposition tokenstate id nodestate notterminated notterminated else tokenstate unchanged isnodeactive updatedfun nodestate const maybeterminated definition action perform termination probe look like type action synonym bool trfun ie boolean transition function predicate pair state act thing analogue pred symbol lift constant tla transition function defined term primed unprimed variable isabelle translation concept use suffix prefix symbol respectively instance tokenposition firstnode enabling condition indicating token must first node transition tokenposition lastnode indicates transition move token last node tla unchanged x shorthand x x updatedfun nodestate firstnode const maybeterminated expression poor reflection nodestate except firstnode maybeterminated defined locally look like library good enough isabelle syntactic trickery try get closer tla syntax point fixed function applied variable argument using anglebracket syntax f x specification variable nodestate isnodeactive function nodestate firstnode work since function outside angle bracket variable fixed function part system changing state using id identity function work around id f x f x id f x applies variable function f variable argument x definition sendmsg node action sendmsg act id isnodeactive j j updatedfun isnodeactive j const true updatedfun nodestate act j notterminated else id nodestate unchanged tokenposition tokenstate definition deactivate node action deactivate act id isnodeactive updatedfun isnodeactive const false unchanged tokenposition tokenstate nodestate definition action may occur outside control termination detection algorithm similar sendmsg guard j according paper replaced true without affecting correctness definition controlled action controlled act initiateprobe n passtoken n definition environment action environment act n sendmsg n deactivate n definition next action next act controlled environment definition fairness temporal fairness temp wf controlled isnodeactive nodestate tokenposition tokenstate definition spec temporal spec temp init startstate next isnodeactive nodestate tokenposition tokenstate fairness remainder specification also similar note fairness spec type temporal indicating predicate behaviour infinite sequence action wf operator indicates weak fairness controlled eventually always enabled eventually executes changing value least one subscripted variable notice spec standard form tla formula describing initial state stutteringinvariant transition relation fairness rule definition terminationdetected stpred terminationdetected pred tokenposition firstnode tokenstate maybeterminated id nodestate firstnode maybeterminated id isnodeactive firstnode finally definition algorithm detects termination straightforward see condition checked locally firstnode safety definition allnodesinactive stpred allnodesinactive pred n id isnodeactive n definition safetyinvariant safetyinvariant pred n tokenposition n id isnodeactive n n n tokenposition id nodestate n notterminated tokenstate notterminated lemma safety show spec terminationdetected allnodesinactive proof algorithm safety condition detects termination node really inactive paper tlaps presentation proceeds showing safety invariant showing invariant implies appropriate condition spec proof invariant invariant proof method appropriate goal form safetyinvariant must type stpred one case overloading confusing goal syntactic form action temporal expression instead reduced method resulting subgoals goal subgoals spec sigma sigma init safetyinvariant spec sigma sigma stable safetyinvariant look lot like induction proof show initial state satisfies invariant show stable ie becomes true remains true forever proof goal definitionunwinding second requires case analysis transition within next actually taken take space step complete remains show invariant implies safety property moreover terminationdetected allnodesinactive unfolding safetyinvariantdef proof intro clarsimp intro conji impi tla axiom f g f g type f g important step result follows quickly ultimately show thesis simp add validdef liveness liveness property looking allnodesinactive eventually terminationdetected roughly expected show showing token always end back first node accounting fact first time arrives might notterminated state go round check everything really terminated bit mucking around trying prove discovered algorithm work one thing like proof opposed model checking force understand system working get away writing plausible statement without thinking true conversely mean need deep understanding start work system wade rough idea proof going go get bit work learn iterate algorithm may actually sometimes need send token round twice node become inactive first pas set node maybeterminated token could still contaminated previous state second pas result clean token three phase algorithm endgame characterised like definition allnodesinactiveandtokenat allnodesinactiveandtokenat n pred allnodesinactive tokenposition n definition nodecleaningrunat nodecleaningrunat n pred allnodesinactiveandtokenat n id nodestate firstnode maybeterminated n id nodestate maybeterminated definition tokencleaningrunat tokencleaningrunat n pred allnodesinactiveandtokenat n tokenstate maybeterminated id nodestate maybeterminated liveness proof go showing phase result token back first node lead onto next phase end final phase termination detected actually even quite work termination detected end phase stop carry next phase little lemma capture behaviour nicely lemma impleadstotriangleexcl assumes ab b assumes bc b c show c proof rule important ingredient liveness proof statement little intimidating lemma p n p q p n v q p n enabled v wf v p q unpack first notice conclusion approximately form want wf v expression look like part specification n transition predicate wf v fairness condition first precondition say p hold transition occurs either p still hold else q hold second say p hold transition occurs result q third say p hold transition always occur fairness transition ensures transition eventually occurs short useful showing single step algorithm eventually occurs useful specialise follows lemma step assumes p allnodesinactive assumes p terminationdetected assumes p unchanged isnodeactive nodestate tokenposition tokenstate p assumes p controlled q show spec p q remains repeatedly apply lemma order show algorithm eventually detects termination highlevel structure liveness proof follows lemma liveness spec allnodesinactive terminationdetected proof spec allnodesinactive allnodesinactiveandtokenat firstnode moreover spec allnodesinactiveandtokenat firstnode terminationdetected nodecleaningrunat lastnode moreover spec nodecleaningrunat n nodecleaningrunat firstnode moreover spec nodecleaningrunat firstnode terminationdetected tokencleaningrunat lastnode moreover spec tokencleaningrunat n terminationdetected ultimately show thesis metis impleadstotransitive impleadstotriangleexcl qed second fourth statement show phase lead onto next work applying step lemma unfolding definition first third fifth statement show phase terminates token first node quantified token position n even though sufficient prove n lastnode done induction token position extra generality hurt apart complication introduced needing use induction also simply involve applying step lemma unfolding definition closing thought initial struggle different type validity statement general confusion meaning available proof rule tactic quite enjoyed exercise pleasing able prove result like ground power isabelle eg induction set node full library existing result help along way fair note initial attempt proving liveness result nothing like neat finished result many false start proved number result thought would useful turned stumbled across rule worked use first got liveness result via rather messy route possible step back see higherlevel structure step lemma specialising came noticing duplication usage even went number iteration ending final form wart compared thing written tla particularly need lift constant using say thing like pred act writing state predicate action entirely unexpected given mismatch isabellehol strong typing untyped nature tla also miss ability write long conjunction disjunction list bulleted using whitespace sensitivity instead parenthesis tlaps proof much shorter proof written isabelle style perhaps quite verbose found useful porting proof one version next denser proof one heavily rely particular sequence tactic tend need rework verbosity seems help find common piece reasoning factored later also prefer spell proof instead using automatic tactic automation would take long time hundred millisecond succeed get way refactoring proof later interesting see style change working tlaps tlaps fan reading love see liveness proof look tlaps
498,Lobsters,formalmethods,CSE-Formal methods,How Verified (or Tested) is My Code? Falsification-Driven Verification and Testing,https://agroce.github.io/asej18.pdf,verified tested code falsificationdriven verification testing,,obj length filter flatedecode stream
499,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Firmware-Based System-on-Chip Modules (2016),http://www.odbms.org/wp-content/uploads/2017/08/DissFinal_Carlos_Villarraga.pdf,formal verification firmwarebased systemonchip module,,obj type objstm n first length filter flatedecode stream xڝv h e ȑ q ڛ u x ٶ
501,Lobsters,formalmethods,CSE-Formal methods,Nagini: A Static Verifier for Python,http://pm.inf.ethz.ch/publications/getpdf.php?bibname=Own&id=EilersMueller18.pdf,nagini static verifier python,,obj length filter flatedecode stream se u c nst w q c endstream endobj obj length filter flatedecode stream
502,Lobsters,formalmethods,CSE-Formal methods,Formal reasoning about the security of AWS,http://www0.cs.ucl.ac.uk/staff/b.cook/CAV18_invited.pdf,formal reasoning security aws,,obj length filter flatedecode stream g z h v ep endstream endobj obj length filter flatedecode stream r z q e
503,Lobsters,formalmethods,CSE-Formal methods,Principled and Practical Web Application Security (2015),https://cseweb.ucsd.edu/~dstefan/pubs/stefan:2015:phdthesis.pdf,principled practical web application security,,obj type objstm n first length filter flatedecode stream xڝv ji hb ie h g b p l f p gm f n endstream endobj obj length filter flatedecode stream k c endstream endobj obj length filter flatedecode stream e endstream endobj obj length filter flatedecode stream kۅ endstream endobj obj length filter flatedecode stream k
504,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Coalescing Graph-Coloring Register Allocation (2010),https://www.cs.princeton.edu/~appel/papers/regalloc.pdf,formal verification coalescing graphcoloring register allocation,,obj stream ch v r q q e b wvw px px wy yb f ҟ qf ar endobj obj endobj obj stream v x z w ζ b b xz c z ab p ya z c p b gɪ p x g endobj obj endobj obj stream n lj xi r 궱p xa
505,Lobsters,formalmethods,CSE-Formal methods,K Semantics for Assembly Languages: A Case Study (2014),https://www.researchgate.net/publication/262770441_K_Semantics_for_Assembly_Languages_A_Case_Study,k semantics assembly language case study,,reference mihail asavoae dorel lucanu grigore roşu towards semanticsbased wcet analysis wcet todd austin eric larson dan ernst simplescalar infrastructure computer systemmodeling ieee computer bishop brock warren hunt jr formally specifying mechanically verifying program forthe motorola complex arithmetic processor dsp iccd doug burger todd austin simplescalar tool set version sigarch comput architnews mihai christodorescu somesh jha christopher kruegel mining speciﬁcations maliciousbehavior esecfse manuel clavel francisco durán steven eker patrick lincoln narciso martíoliet andjosé meseguer carolyn l talcott maude highperformance logical framework specify program verify system rewriting logic springer lncs manuel clavel francisco durán steven eker patrick lincoln narciso martíoliet andjosé meseguer jose f quesada maude system rta chucky ellison grigore roşu executable formal semantics c application popl appear anthony c j fox formal speciﬁcation veriﬁcation tphol anthony c j fox magnus myreen trustworthy monadic formalization set architecture itp michael j c gordon thomas f melham introduction hol theorem proving environmentfor higher order logic cambridge university press neal harman verifying simple pipelined microprocessor using maude wadt mark hill memory representation rewriting logic semantics deﬁnitions wrla car hoare verifying compiler grand challenge computing research vmcai matt kaufmann j strother moore panagiotis manolios computeraided reasoning anapproach kluwer academic publisher xavier leroy formal veriﬁcation realistic compiler commun acm cullen linn saumya debray obfuscation executable code improve resistance staticdisassembly conference computer communication security narciso martíoliet josé meseguer rewriting logic roadmap bibliography theor comput sci patrick meredith mark hill grigore roşu executable rewriting logic semantics ofkscheme scheme patrick meredith michael katelman josé meseguer grigore roşu formal executablesemantics verilog memocode josé meseguer grigore roşu rewriting logic semantics project electronic note theoreticalcomputer science greg morrisett karl crary neal glew dan grossman richard samuel fredericksmith david walker stephanie weirich steve zdancewic realistic typedassembly language second workshop compiler support system software grigore roşu traian florin şerbănuţă overview k semantic framework journal oflogic algebraic programming roşu grigore ellison chucky schulte wolfram matching logic alternative hoarefloydlogic amast lncs electronic note theoretical computer science
506,Lobsters,formalmethods,CSE-Formal methods,"If You’re Not Writing a Program, Don't Use a Programming Language",http://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html,writing program nt use programming language,article leslie lamport appeared recently distributed computing education column earlier written blog post general benefit modeling modelchecking related post tla hillel maintains nice tutorial tla written lot tla modeling commit transaction synchronized round consensus chain replication hygenic dining philosopher paxos flexible paxos tla research paper microsoft azure cosmos db team context largescale globally distributed multimodel database service think code paul graham swears benefit lisp,article leslie lamport appeared recently distributed computing education column article focus distinction tla modeling language versus programming language earlier written blog post general benefit modeling modelchecking technical article instead trying summarizereview main point include choice quote article important takeout message end emphasize bold font algorithm program expressed simpler expressive language language one used almost every branch science engineering precisely describe reason object study language mathematics programming often taken mean coding algorithm almost always developed along code understand bad imagine trying discover euclid algorithm thinking term code rather term mathematics tla abstraction helped lot coming much cleaner architecture witnessed firsthand brainwashing done year c programming one result code size le previous version eric verhulst raymond boute miguel sampaio faria bernard h c sputh vitaliy mezhuyev formal development networkcentric rtos springer new york common obsession language might lead reader think result due magical feature tla due tla letting user think mathematically correctness property algorithm often best expressed higherlevel algorithm proving correctness mean proving original algorithm refines higherlevel one usually involves data refinement step refinement expect kind refinement sound like magic reader wo nt believe work practice simply report among refinement proof written machinechecked correctness proof consensus algorithm heart subtle faulttolerant distributed algorithm castro liskov us process f may malicious byzantine proof show castroliskov consensus algorithm refines version process paxos consensus algorithm tolerates f benignly faulty process step malicious process well many step taken good process prevent malicious one causing incorrect execution paxos refine stuttering step paxos algorithm found viewing castroliskov algorithm refinement paxos best way understand today programming generally equated coding hard convince student want write code learn think mathematically code level perhaps following observation give pause quite likely lifetime machine learning completely change nature programming programming language using seem quaint cobol coding skill learning little use mathematics remain queen science ability think mathematically always useful related post tla hillel maintains nice tutorial tla upcoming book tla written lot tla two gentle introduction post written gave many example modeling tla think lack example one biggest obstacle tla achieving wider adoption include modeling commit transaction synchronized round consensus chain replication hygenic dining philosopher paxos flexible paxos also use tla research paper provide unambiguous pseudocode algorithm well way model check correctness summer joining microsoft azure cosmos db team sabbatical month get chance use tla practice context largescale globally distributed multimodel database service expect many tla post space soon instead succinctness distinction programming language specification language maybe difference benefit come process approach programming two phase manner think code start writing pretensibly executable code think first write designalgorithmmodel first using programming language pseudocode would nt worked rtos project cited could written designalgorithm pseudocode c first would achieved benefit maybe trying write designalgorithm programming language bring lot baggage brainwashing quotation mention impossible maybe curse whorfian syndrome lamport wrote another article computer scientist collectively suffer call whorfian syndrome confusion language reality would succinct programming language nullify weaken argument article favorite succinct programming language paul graham swears benefit lisp quote esr lisp worth learning profound enlightenment experience finally get experience make better programmer rest day even never actually use lisp lot maybe benefit come declarative versus operational thinking declarative language would advantage operational language programming language guy nt want start pl frame war maybe stop may dangerous mad question written
508,Lobsters,formalmethods,CSE-Formal methods,Unbounded Data Model Verification Using SMT Solvers (2012),http://www.cs.ucsb.edu/~bultan/publications/ase12.pdf,unbounded data model verification using smt solver,,obj stream r
510,Lobsters,formalmethods,CSE-Formal methods,Let's Prove Leftpad,https://github.com/hwayne/lets-prove-leftpad,let prove leftpad,let prove leftpad provablycorrect provably correct code proof leftpad proving leftpad specification want contribute read contribution guideline plug website twitter,let prove leftpad repository provablycorrect version leftpad provablycorrect provably correct code code totally guarantee say providing proof computer check proof wrong code wo nt compile compare something like testing even test function different input still nt know sure test pas proof though know function work input regardless whether try thousand ten trillion different test case proving code correct really really powerful also mindbogglingly hard programmer nt sampler different tool use prove code correct standardized proof leftpad leftpad leftpad function take character length string pad string length pad adding character left adding padding left leftpad leftpad foo foo leftpad foo foo proving leftpad funny leftpad great demo different proof technique idea simple implementation simple specification actually formally want surprisingly tricky specifically need prove thing leftpad length output max n len str prefix output padding character nothing padding character suffix output original string proof leftpad going small enough mostly grokkable formal method outsider complex enough differentiate way prove code correct want contribute love please read contribution guideline submit favorite proof plug want learn formal method shout cloud website twitter
511,Lobsters,formalmethods,CSE-Formal methods,"The Past, Present, and Future(s): Verifying Temporal Software Properties",http://heidyk.com/publications/KhlaafFinalThesis.pdf,past present future verifying temporal software property,,obj type objstm n first length filter flatedecode stream xڝv e endstream endobj obj length filter flatedecode stream h z w endstream endobj obj length filter flatedecode stream c endstream endobj obj length filter flatedecode stream rwu endstream endobj obj length filter flatedecode stream v pzgwitd q
512,Lobsters,formalmethods,CSE-Formal methods,SAT/SMT by Example,https://yurichev.com/writings/SAT_SMT_by_example.pdf,satsmt example,,obj stream q pd j ԣt k yap endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream endstream endobj obj stream kp 蝍 g c q w c w u nkc endstream endobj obj stream gc ĉ h j퇃㞉 h j
513,Lobsters,formalmethods,CSE-Formal methods,Translating Clojure to ACL2 Code for Verification (2016),https://ou.edu/content/dam/CoE/CS/Thesis_Dissertations/2016/Summer%2016/2016_Ryan_Ralston_Dissertation.pdf,translating clojure code verification,,ğôåø obj goto chapter endobj obj acknowledgement endobj obj goto chapter endobj obj list figure endobj obj goto chapter endobj obj abstract endobj obj goto endobj obj introduction endobj obj goto endobj obj contribution endobj obj goto endobj obj verification bignum addition endobj obj goto endobj obj jvm model compiled clojure endobj obj goto endobj obj bigstep style verification endobj obj goto endobj obj verification recursive sequence clojure function endobj obj goto endobj obj summary endobj obj goto endobj obj research methodology endobj obj goto endobj obj definition endobj obj goto endobj obj model endobj obj goto endobj obj convention endobj obj goto endobj obj endobj obj goto endobj obj programming language endobj obj goto endobj obj theorem prover endobj obj goto endobj obj method endobj obj goto endobj obj clojure endobj obj goto endobj obj methodology endobj obj goto endobj obj bigendian bignum arithmetic endobj obj goto endobj obj biginteger specification endobj obj goto endobj obj proof sketch endobj obj goto endobj obj unsigned littleendian add endobj obj goto endobj obj signed littleendian add endobj obj goto endobj obj signed bigendian add endobj obj goto endobj obj summary endobj obj goto endobj obj java virtual machine model endobj obj goto endobj obj structure endobj obj goto endobj obj method invocation endobj obj goto endobj obj stepping machine endobj obj goto endobj obj summary endobj obj goto endobj obj java class model endobj obj goto endobj obj structure class declaration endobj obj goto endobj obj static field endobj obj goto endobj obj loading dependency endobj obj goto endobj obj class instance endobj obj goto endobj obj method lookup endobj obj goto endobj obj constructor endobj obj goto endobj obj summary endobj obj goto endobj obj sequence list endobj obj goto endobj obj sequence overview endobj obj goto endobj obj sequence allocation endobj obj goto endobj obj static runtime method endobj obj goto endobj obj seq endobj obj goto endobj obj first endobj obj goto endobj obj rest endobj obj goto endobj obj con endobj obj goto endobj obj function class endobj obj goto endobj obj summary endobj obj goto endobj obj sequence recursion endobj obj goto endobj obj cutpoints endobj obj goto endobj obj base case endobj obj goto endobj obj prelude endobj obj goto endobj obj postlude endobj obj goto endobj obj internal segment endobj obj goto endobj obj proof correctness endobj obj goto endobj obj conclusion endobj obj goto endobj obj verification recursive sequence clojure function endobj obj goto endobj obj bigstep style verification endobj obj goto endobj obj jvm model compiled clojure endobj obj goto endobj obj verification bignum addition endobj obj goto endobj obj summary endobj obj goto section endobj obj bibliography endobj obj goto r fit endobj obj length filter flatedecode stream oaïˆ g ä ü j êšídëí j à œ tgxˆã ÿş mïy à endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream koú v õo í ºlgù õ ãsçö ã µ çüé ùvå endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream õ endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream hhd µ ù ë tànfè ó äaäàé ış väğñccaâ hlt î dì cã ïbğ ãtë xx ô z ø ùjpò xrh h gêee µ u qš îç bæ ãõw ó gdbªmmà ì qaq u v â bï sg ãâÿ ã endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream xúíz ûï e áü ä â h ğ hb j hëèíöƒeû l áä r uæê zk kü ï òaøğ ƒğw fö óª ü rø åchè ã âgišgb paºv éíï ø òbéc endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream áu äuy q äçÿœóãpğ èxô ı b ìg j š ª h jo â ô ôöè yo ç ß ã nëg úcáø k è û nb š ry g øş ìzh òõ iõbbã q b òqögàc endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto section endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream ñğêxğî êq àaˆ u ö êç û iôñ nîe ç ö ò gieß åá ä ïûzzëdcò çnû ø ò şwecğñbìrú ûöé u x ënò õ ò šzgûö š tzaïpg âï jx íöyóµõêeqzšî në èö endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r procset pdf text endobj obj length filter flatedecode stream úf ğîlwi eí tdˆ äàu e f gá iov uy ëwyâ ç æy lv ş š ëuêéw åå í x ªçç gã ã ãğ ıµ aßhçœû ib qº œş ğhmü şpşà åæƒ ƒ ï nlcò è endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r procset pdf text endobj obj length filter flatedecode stream xúmvm ğš ëîùaìæóãå vô uæ ùö šïkõ j æ lù öw ª ãã ì làÿ endstream endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj length filter flatedecode stream â óeb pøˆíüúî ûd tævd h émó è n äÿou e ôú šğşäø iœäk avæäãàşœ yê ärúõn ìe ùy àû î í ğâ ôédùyåyfğ l ôëñõåğ
514,Lobsters,formalmethods,CSE-Formal methods,List of Applications of Set Theory in Computer Science,https://www.quora.com/What-are-the-applications-of-set-theory-in-computer-science,list application set theory computer science,,please enable javascript refresh page continue
515,Lobsters,formalmethods,CSE-Formal methods,Performance Modelling and Verification of Cloud-based Auto-Scaling Policies (2017),http://www.prismmodelchecker.org/papers/ccgrid17.pdf,performance modelling verification cloudbased autoscaling policy,,obj length filter flatedecode stream w u lc jvu д jo qy jd ey q
517,Lobsters,formalmethods,CSE-Formal methods,Catalog of Bad Smells in Design-by-Contract Methodologies with Java Modeling Language (2013),http://oro.open.ac.uk/45530/1/E1EIKI_2013_v7n4_251.pdf,catalog bad smell designbycontract methodology java modeling language,,obj border subtype link c uri http oroopenacukhelphelpfaqhtml type action uri type annot h rect endobj obj border subtype link c uri http type action uri type annot h rect endobj obj border subtype link c uri http oroopenacukpolicieshtml type action uri type annot h rect endobj obj width bitspercomponent height decode filter dctdecode subtype image length type xobject colorspace devicecmyk stream photoshop http imagejpeg oumasterlogodarkbluecmyk adobe illustrator cc window jpeg xmpiid xmpdid default default saved adobe illustrator cc macintosh saved adobe illustrator cc window converted applicationpostscript applicationvndadobeillustrator converted applicationpostscript applicationvndadobeillustrator saved xmpiid adobe illustrator cc window print adobe pdf library iccprofile prtrcmyklab acspappl adbe desc wtpt x p coated iso xyz l j n z lpmen q rstuvw ghijkl b w ab qyrvsttmugvbw x z x bc b g q l nzg bc u vwxyz v ϩb ժۇ b k p p q ē ד ф ߢ u z ɖc ճow q w ʤ аf p kꌱ v aҙm v q w b q n p eu cv u xboāoy l h ꎘ 獲 mt n q䂭 v p l n p v r w ă p v g ԗ ܤ u ouz qox e frfq n nuwn mc brt j f r e r ly z h ac u b fg lo ד hߎ ra q rz g oa ņ j l n iccprofile af pƌ g r鋪 r j b j c hqime r qbl k q e l z x jp r z hl n oz z u j l w ђ
518,Lobsters,formalmethods,CSE-Formal methods,A Framework for the Verification of Certifying Computations (2013),https://ia800406.us.archive.org/24/items/arxiv-1301.7462/1301.7462.pdf,framework verification certifying computation,,obj stream j j h k fl e oj w u e z h md r ztz qѐowv sd z w rw endobj obj endobj obj stream
519,Lobsters,formalmethods,CSE-Formal methods,Model-Checking of Statechart Models: Survey and Research Directions (2004),https://arxiv.org/pdf/cs/0407038.pdf,modelchecking statechart model survey research direction,,obj stream z é el l h p l j
520,Lobsters,formalmethods,CSE-Formal methods,Formally Specifying UIs,https://www.hillelwayne.com/post/formally-specifying-uis/,formally specifying uis,sketchsystems problem finite state machine finitestate machine source source source harel statecharts hierarchicalstate machine harel statechart source source verification nancy day value conclusion formal method consulting,good ui necessary making correct software people trouble using product likely wrong thing personally though stand ui work think beneath anything quite mesh brain visuals interface give anxiety mad respect people handle love formal method recently friend kevin lynagh released sketchsystems new tool bring formal specification ui designer love formal method beat fear ui let find problem way back edmodo worked ui snapshot app first second attempt make money start giving teacher free product ask donation something edmodo great business sense snapshot teacher could assign student quiz snap aggregate quiz result give teacher several realtime report summary student report standard also supposed answer report student report clicked one could see question got wrong concept user switching report clicking button report reachable report except answer grade reachable illdefined could mean could eventually click get report could mean directly accessible ui one part report would integrated rest app would navigation quirk system start getting complicated need get precise mean writing specification specify see teacher given view take action change view suggests looking state machine finite state machine finitestate machine fsm one simplest possible state machine finite set state set transition state set event trigger transition transition tied event event happens may may change state case event would teacher clicking button fsm current system look like source immediately see two problem ui first fsms need starting state one teacher enters report page report see first second specify happens click button already page ambiguous two possible thing could summary report summary button shown nothing summary report summary button reset page product second case starting state summary report updated fsm source accurately represents ui also cluttered big limitation fsms handle lot redundant transition every single summary transition point summary hold true student standard especially problematic try compose two fsms point teacher could log log back start summary new fsm source order add logout feature add four edge quickly get untenable need way represent common transition get adding nesting state complicates formalism simplifies spec harel statecharts several state share common superstateesque logic four report state share logout logic main three share report transition group report parent state would need define logout transition parent state let propagate child state analogous inheritance child state inherit override transition parent state state machine nested state called hierarchicalstate machine different way formalize appropriate notation ui machine harel statechart hsc rule parent state abstract every parent state must define default child state child state automatically inherit parent transition also override specific transition transition point state transition parent state instead go default child child also parent repeat recursively design hscs graphviz nightmare cluster subgraphs lheads rank tweaking let use considerablynicer sketchsystems ui snapshot logout login page report summary summary student student standard standard summary student answer answer standard answer close student login page login snapshot source recommend clicking source link diagram interactive click transition see state change big benefit hscs formal concise also kinetic explore exploring found bug state machine transition directly answer standard fix making answer direct child login instead child report source ideally like make problem obvious mean using form automated verification verification two benefit formal specification one implicit act clearly expressing lead better understanding system explicit formal spec check property ui deadends possible get lockedout chunk ui transition illspecified sketchsystems check hsc illformed support verifying behavior tool specifying state machine particularly uml state diagram focused codelevel spec systemlevel spec goal eventually generate c java code state diagram lowlevel check abstract property highlevel want code generation want formal verification need rewrite state machine generalpurpose specification language fortunately case pretty easy going use alloy closely mimic hsc structure use signature extension represent nested state standard extends report mean every standard atom also report equivalent saying child state corresponding hsc make easier define transition represented single predicate taking time start state end state declares state go start end tnext even though parent state abstract still use start give u parent transition open utilordering time sig time state one state abstract sig state abstract sig login extends state abstract sig report extends login one sig logout extends state one sig student summary standard extends report one sig answer extends login pred transition time start state end state tstate start tnextstate end pred logout time transition login logout pred login time transition logout summary pred student time transition report student pred summary time transition report summary pred standard time transition report standard pred answer time transition student answer pred closeanswers time transition answer student fact trace firststate summary time last logout login student summary standard answer closeanswers verify property state machine example possible reach answer report without going student report check time tstate answer implies tprevstate student valid also ask give u example someone log log back run disj time logout login alloy also give u greater depth specification define atom state also property easily verify alloy finding deadlock said first person see nicely alloy work statecharts waterloo professor nancy day recently announced variant alloy called dash add firstclass hsm semantics alloy read value add value make interactive hsc better simply bunch english note matter lot scale remember snapshot project two dozen teacher page nested several larger hierarchy without formal spec sanitycheck work best memory mistake made forgot consider closing answer report something user would report became deadend creating new quiz bunch circular path really need clear direction ui suppose teacher created quiz dumped back beginning quiz creator end thinking failed create multiple quiz several page hard get nobody ever went think formal spec would helped lot example took five minute write even full app could specced two hour caught even one mistake design phase would saved u ton time conclusion talked formally specifying user interaction love fm trump fear ui hell checked sketchsystems link seen attach javascript prototype statechart shit witchcraft think potential people usually think formal method thing nasa academia running theme blog powerful tool everyday work mostly focus applies backend concurrent system enjoy widely useful especially important ui think hscs necessarily best possible specification good first step oh hey formal method consulting tell yer bos
521,Lobsters,formalmethods,CSE-Formal methods,Rust Distilled: An Expressive Tower of Languages,https://arxiv.org/abs/1806.02693,rust distilled expressive tower language,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
522,Lobsters,formalmethods,CSE-Formal methods,Semi-Formal Development: The Cardano Wallet,http://www.well-typed.com/blog/2018/05/semi-formal-development/,semiformal development cardano wallet,tl dr semiformal specification wallet version specification background utxostyle accounting wallet balance current balance available balance utxo balance available balance total balance internal consistency invariant invariant invariant invariant semiformal development object oriented programming haskell testing real implementation conclusion github reference spec github,tl dr combination formal modelling testing using quickcheck powerful tool design implementation high assurance software consistency model checked testing invariant real implementation tested comparing model part consulting work iohk welltyped working iohk design implementation new version cardano cryptocurrency wallet crucial component process written semiformal specification wallet mathematical model wallet along invariant lemma behaves refer specification state many property prof mean prof see however use quickcheck test property producing counterexample fail hold invaluable tool development specification also give u principled way testing real implementation even later prove remaining property well blog post take look specification see drive design testing new wallet show part formal development give idea look like really discus detail goal blog post describe mathematics rather approach advantage note figure invariant section number used blog post refer version specification background utxostyle accounting regular bank transaction transfer bank account example transaction might transfer alice bob transaction cryptocurrencies cardano bitcoin little different part similar except might multiple example transaction might transfer bob carol part however work quite distinct way transaction input account transaction example call transaction transfer bob carol input output bob carol suppose bob want transfer dave create new transaction say first output transaction transfer dave transfer back input first output output dave bob important bob transfer back transaction output used input style transaction called style utxo stand transaction tx blockchain basically long list transaction corresponding formal definition look something like wallet wallet piece software monitor state blockchain keep track fund precisely utxo enables create new transaction included blockchain wallet primary mean user interact blockchain note verification new transaction decision whether include global blockchain wallet happens beyond scope blog post formal specification wallet mathematical abstraction strip away irrelevant detail focus core functionality wallet basic model cardano wallet stripped wallet state utxo set pending transaction specification small enough fit single page model simple enough studied indepth support mathematical proof property yet accurate enough invaluable guide design wallet base unit test drive real implementation also used study need worry performance address concern balance example one trickier aspect design discus reporting balance bit detail may surprising reporting balance nontrivial even regular bank account already two notion balance alice transfer bob online bank account might tell current balance pending transaction available balance unlike regular bank transaction utxostyle transaction involve change lead naturally three notion balance take example transaction balance might reported utxo balance pending transaction available balance however transaction return change total balance note change becomes available transaction included blockchain although user interface question report different kind balance user wallet design perspective yet particularly difficult real complexity come fact may temporary disagreement transaction included blockchain disagreement known arise resolved well beyond scope blog post stick example suppose pending disagreement disagreement got resolved wallet discovers actually present blockchain perhaps later available balance still would really make sense report total balance would strange total balance larger utxo balance wrong per se confusing nonetheless specification therefore define concept minimum balance minimum utxo balance user possible balance user certain example future neither ever make blockchain hence report minimum balance note never happen included since depends concept make intuitive sense order make precise able compute needed introduce concept unspent transaction output wallet expects become available future yet course even without formal specification possible could come concept minimum balance way compute formal model allows u think much clearly problem remove clutter surround implementation wallet focus core idea internal consistency invariant introduce novel concept specification tricky question know specified right actually since introduced concept question whether particularly meaningful instead ask specified useful one way answer question stating invariant invariant property expect true time example basic model shown figureâ following invariant invariant txins pending dom utxo invariant say pending transaction spend unspent output intuitively make lot sense wallet allow user spend fund seen however previous section invariant always hold take disagreement blockchain account bob submits transaction spending output transaction later discovers actually included blockchain spent output utxo concept expected utxo come rescue invariant full model instead invariant txins pending dom utxo expected word pending transaction spend available output output expect become available previously another useful invariant help solidify intuition mean expected utxo say output never actual utxo expected utxo invariant dom utxo dom expected would strange say output expected already wallet stating invariant like allows u make intuition concept introduce precise proving give u strong guarantee specification make sense internally consistent semiformal development formally proving invariant one discussed time consuming requires mathematical training naturally proof would ideal main point blog post push approach long way even program haskell precisely easily translate back forth haskell mathematics translate various wallet model specification use approach described previous blog object oriented programming haskell indeed developed approach specifically purpose instance haskell translation basic model mkwallet hash h ord buildable st lens st state h walletconstr h st mkwallet l self st mkdefaultwallet l statepending self st utxo st l stateutxo applyblock b self st l applyblock b applyblock hash h block h state h state h applyblock b state state stateutxo updateutxo b stateutxo statepending updatepending b statepending updateutxo forall h hash h block h utxo h utxo h updateutxo p b remspent addnew addnew remspent utxo h utxo h addnew utxounion utxorestricttoours p txouts b remspent utxoremoveinputs txins b updatepending hash h block h pending h pending h updatepending b mapfilter disjoint trins txins b deal detail specification instance explicitly abstract away specific choice hash h well type address therefore bit complicated spec nonetheless follows specification closely particular still model deal networking issue persistent storage may particularly performant etc word intended design real wallet model nonetheless incredibly useful two reason first use test real wallet discus next section second reason use model test invariant example translation invariant previous section haskell pendinginutxoorexpected walletinv h pendinginutxoorexpected l e invariant l pendinginutxoorexpected e w checksubsetof txins pending txins pending w utxo expected utxodomain utxo w setunion utxodomain expectedutxo w utxoexpecteddisjoint walletinv h utxoexpecteddisjoint l e invariant l utxoexpecteddisjoint e w checkdisjoint dom utxo utxodomain utxo w dom expected utxodomain expectedutxo w wallet implementation haskell translation invariant deal detail spec case one main difference infrastructure invariant designed give detailed error report invariant hold nonetheless main part invariant direct translation specification big gain use quickcheck test invariant generate random valid event wallet new different check invariant hold point example first release wallet specification silly mistake wallet notified new block removed input block expected utxo rather output silly mistake easy miss reviewing specification hand proof would found mistake course quickcheck wallet unit test test pure wallet using cardano model failed failure wallet unit test test pure wallet using cardano model predicate failed invalid invariantviolation name fullutxoexpecteddisjoint evidence notsubsetof dom utxo dom expected dom utxo intersection dom expected event state action applyblock state action newpending transaction state action rollback tell u invariant hold actually give u specific sequence event lead wallet state invariant hold well intermediate wallet state tell domain utxo expected utxos state well intersection empty testing real implementation mentioned haskell translation wallet specification still model ignores lot real world complexity full wallet implementation must deal even datatypes model work simplified version real thing transaction include signature block real block list transaction etc nonetheless use model test real implementation also translate simplified type model real counterpart since quickcheck generator simplified type test model implementation test real wallet shown following commuting diagram word mean use quickcheck generator generate wallet event using simplified model type two thing execute model simplified type translate translate first execute real wallet translated input either way end two final answer term real cardano type one executed model one executed real wallet compare two match conclude real wallet implement model correctly since check property step know invariant hold model step also conclude invariant hold real implementation step example bug full wallet meant change pending transaction sometimes doublecounted case pending transaction use change pending transaction input case happen presence fork generator able find counterexample commuting diagram give u exact sequence wallet event lead wallet state real wallet model disagree well precise value disagree conclusion software specification exist often informal document describe feature software intended natural language specification lend easily verification even testing end spectrum fully formal specification every property verified mathematically costly time consuming produce require specialized expertise course golden standard also useful middleground specifying model property formally test property using quickcheck moreover get model reason core functionality application compare real implementation development new wallet open source found github excitingly iohk recently hired someone start work coq formalization wallet specification put whole specification even stronger footing course make existing work useless although become le important test invariant model quickcheck generator available check real implementation still valuable moreover quickcheck test validate invariant attempt prove formally also save valuable time discover early invariant fact true reference spec specification cardano duncan coutts edsko de vries github github repository new wallet
523,Lobsters,formalmethods,CSE-Formal methods,SpaceSearch: A Library for Building and Verifying Solver-Aided Tools (2017),https://stefanheule.com/papers/icfp17-spacesearch.pdf,spacesearch library building verifying solveraided tool,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g νb kr aѥw endstream endobj obj annots r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r rotate type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r r subtype form type xobject length stream x noendstream endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj bbox filter flatedecode formtype group r ptexfilename srvconfpubtexacmartifactsevaluatedreusablepdf ptexinfodict r ptexpagenumber resource extgstate ca ca subtype form type xobject length stream z x cڬ z vyn רz q bcd l u p lr kn e n k wu un w yr j endobj obj bitspercomponent colorspace devicergb filter dctdecode height subtype image type xobject width length stream jfif h h c x eu l
524,Lobsters,formalmethods,CSE-Formal methods,The Abstract State Machines Method for Modular Design and Analysis of Programming Languages (2013),http://pages.di.unipi.it/boerger/Papers/Methodology/Cambridge13SurveyPggLgAsm.pdf,abstract state machine method modular design analysis programming language,,obj goto r fit endobj obj length filter flatedecode stream x ty endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r procset pdf text endobj obj length filter flatedecode stream ˑjk h dޛp qܘ w bdt uڔƕ n u ҙhf b x q v endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream ϝv az uz х ߣm p n endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r procset pdf text endobj obj length filter flatedecode stream q z f q rvd l g n џ endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream n jvk b x r r f ȶq v l dv x nx h endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r procset pdf text endobj obj length filter flatedecode stream ӛ k q ny b w w v p vi g r լ endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r procset pdf text endobj obj length filter flatedecode stream ӎ c c ri f nk l ϋ endstream endobj obj type page content r resource r mediabox parent r annots r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream ҍ im vb p c v sش w qta g j mrtk h endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r procset pdf text endobj obj length filter flatedecode stream p n iʎ ӳ ԣ u zid q c 啻pôں x endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r endobj obj type xobject subtype form formtype ptexfilename c ptexpagenumber ptexinfodict r matrix bbox resource colorspace r extgstate r font r procset pdf text length filter flatedecode stream sgϭթ b l tg h v mn p u n oog endstream endobj obj author dsb creationdate creator version moddate producer acrobat distiller window title microsoft powerpoint compatibility mode endobj obj iccbased r endobj obj op false opm sa false sm type extgstate op false endobj obj basefont couriernewpsboldmt encoding winansiencoding firstchar fontdescriptor r lastchar subtype truetype type font width endobj obj alternate devicergb filter flatedecode length n stream 䥟 e b
525,Lobsters,formalmethods,CSE-Formal methods,Ledger Language Design: Designing and Deploying Formally Verified Public Ledgers,https://eprint.iacr.org/2018/416.pdf,ledger language design designing deploying formally verified public ledger,,obj goto endobj obj introduction endobj obj goto endobj obj language designing public ledger endobj obj goto endobj obj related work endobj obj goto endobj obj ldl language endobj obj goto endobj obj language semantics endobj obj goto endobj obj ldl feature endobj obj goto endobj obj current security query endobj obj goto endobj obj additional work security query endobj obj goto endobj obj ldl model formal verification endobj obj goto endobj obj verifying public ledger symbolic protocol endobj obj goto endobj obj generating verified public ledger api f endobj obj goto endobj obj block dependent type endobj obj goto endobj obj functional correctness runtime safety endobj obj goto endobj obj verified primitive hacl endobj obj goto endobj obj case study ldlchain implementation endobj obj goto endobj obj ldlchain design security goal endobj obj goto endobj obj ldlchain api f endobj obj goto endobj obj conclusion endobj obj goto endobj obj future work endobj obj goto endobj obj acknowledgment endobj obj goto r fit endobj obj length filter flatedecode stream xڥz
526,Lobsters,formalmethods,CSE-Formal methods,Sketch.systems,https://sketch.systems/,sketchsystems,statecharts sketchsystems support transition guard transition action extended state variable designing behavior nt already tool sketch name sketchsystems analyze statechart sketchsystems support parallel state tutorial,statecharts yep sketchsystems sketch based statechart formalism developed david harel detail see sketchsystems support transition guard transition action extended state variable nope focus sketchsystems big picture sketching communication thinking supporting guard action variable would require turning sketchsystems programming language ide feel would detract usefulness sketching tool recommend focusing big picture using comment transient state capture logic high level see designing behavior detail settled big picture want implement directly production platform language nt already tool sketch name yes many back last software released sketchup modeling tool aliasautodesk released sketchbook pro pixel editor bohemian coding released sketch vector drawing tool bill buxton xerox parc microsoft research fame wrote entire book subject sketching fit product design called user defines sketch quick timely inexpensive disposable clear vocabulary distinct gesture minimal detail really another word english language capture quality besides wanted name site exactly say tin purpose help think explore system work simple vocabulary quick nonprecious nature sketching hence sketchsystems sketchsystems analyze statechart sketchsystems let explore sketch clicking diagram automated analysis determine example whether every state reachable loop exist number path two state interested analysis recommend looking formal analysis tool like tla alloy resource get started sketchsystems support parallel state yep see tutorial detail
527,Lobsters,formalmethods,CSE-Formal methods,Building Reliable Infrastructure in Rust,https://www.youtube.com/watch?v=hMJEPWcSD8w,building reliable infrastructure rust,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature rustfest paris building reliable infrastructure rust tyler neely youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature rustfest paris building reliable infrastructure rust tyler neely youtube
528,Lobsters,formalmethods,CSE-Formal methods,TS*: Gradual Typing Embedded Securely in JavaScript [2014],http://prosecco.gforge.inria.fr/personal/karthik/pubs/gradual-typing-embedded-securely-in-javascript-popl14.pdf,t gradual typing embedded securely javascript,,obj view endobj obj view endobj obj r r endobj obj goto endobj obj introduction endobj obj goto endobj obj attack error endobj obj goto endobj obj t gradually typesafe language within javascript endobj obj goto endobj obj evaluating t theory practice endobj obj goto endobj obj overview t endobj obj goto endobj obj gradually securing program moving un endobj obj goto endobj obj expressing invariant assertion runtime type endobj obj goto endobj obj reliable primitive operation endobj obj goto endobj obj embedding t javascript endobj obj goto endobj obj formalizing t endobj obj goto endobj obj syntax endobj obj goto endobj obj type system translation endobj obj goto endobj obj implementing rttibased coercion wrapper endobj obj goto endobj obj discussion related work gradual typing endobj obj goto endobj obj metatheory endobj obj goto endobj obj review j highlevel proof strategy endobj obj goto endobj obj invariant translation endobj obj goto endobj obj securely deploying t program endobj obj goto endobj obj securely bootstrapping t runtime endobj obj goto endobj obj loading script embedded secret endobj obj goto endobj obj secure web programming t endobj obj goto endobj obj owasp csrfguard endobj obj goto endobj obj facebook api endobj obj goto endobj obj conclusion prospect endobj obj goto r fit endobj obj length filter flatedecode stream cv η é w k
529,Lobsters,formalmethods,CSE-Formal methods,Theorem Proving in Lean,https://leanprover.github.io/theorem_proving_in_lean/introduction.html,theorem proving lean,introduction computer theorem proving programming lean lean http githubcomleanproverlean http http leanprovergithubiotutorial book acknowledgment,introduction computer theorem proving formal verification involves use logical computational method establish claim expressed precise mathematical term include ordinary mathematical theorem well claim piece hardware software network protocol mechanical hybrid system meet specification practice sharp distinction verifying piece mathematics verifying correctness system formal verification requires describing hardware software system mathematical term point establishing claim correctness becomes form theorem proving conversely proof mathematical theorem may require lengthy computation case verifying truth theorem requires verifying computation supposed gold standard supporting mathematical claim provide proof twentiethcentury development logic show conventional proof method reduced small set axiom rule number foundational system reduction two way computer help establish claim help find proof first place help verify purported proof correct automated theorem proving focus finding aspect resolution theorem provers tableau theorem provers fast satisfiability solver provide mean establishing validity formula propositional firstorder logic system provide search procedure decision procedure specific language domain linear nonlinear expression integer real number architecture like smt satisfiability modulo theory combine domaingeneral search method domainspecific procedure computer algebra system specialized mathematical software package provide mean carrying mathematical computation establishing mathematical bound finding mathematical object calculation viewed proof well system help establish mathematical claim automated reasoning system strive power efficiency often expense guaranteed soundness system bug difficult ensure result deliver correct contrast interactive theorem proving focus verification aspect theorem proving requiring every claim supported proof suitable axiomatic foundation set high standard every rule inference every step calculation justified appealing prior definition theorem way basic axiom rule fact system provide fully elaborated proof object communicated system checked independently constructing proof typically requires much input interaction user allows u obtain deeper complex proof lean theorem prover aim bridge gap interactive automated theorem proving situating automated tool method framework support user interaction construction fully specified axiomatic proof goal support mathematical reasoning reasoning complex system verify claim domain lean underlying logic computational interpretation lean viewed equally well programming language point viewed system writing program precise semantics well reasoning function program compute lean also mechanism serve metaprogramming language mean one implement automation extend functionality lean using lean aspect lean explored companion tutorial one programming lean though computational aspect system make appearance lean lean project launched leonardo de moura microsoft research redmond ongoing longterm effort much potential automation realized gradually time lean released apache license permissive open source license permit others use extend code mathematical library freely currently two way use lean first run web javascript version lean standard library definition theorem editor actually downloaded browser run provides quick convenient way begin experimenting system second way use lean install run natively computer native version much faster web version flexible way special mode visual studio code v code short emacs offer powerful support writing debugging proof much better suited serious use source code instruction building lean available http githubcomleanproverlean tutorial describes current version lean known lean prior version lean special support homotopy type theory find lean hott library http tutorial version lean http leanprovergithubiotutorial book book designed teach develop verify proof lean much background information need order specific lean start explain logical system lean based version dependent type theory powerful enough prove almost conventional mathematical theorem expressive enough natural way specifically lean based version system known calculus construction inductive type explain define mathematical object express mathematical assertion dependent type theory also use language writing proof fully detailed axiomatic proof complicated challenge theorem proving computer fill many detail possible describe various method support dependent type theory example discus term rewriting lean automated method simplifying term expression automatically similarly discus method elaboration type inference used support flexible form algebraic reasoning finally course discus feature specific lean including language communicate system mechanism lean offer managing complex theory data throughout text find example lean code like one theorem andcommutative p q prop p q q p assume hpq p q hp p andleft hpq hq q andright hpq show q p andintro hq hp reading book online see button read try pressing button open tab lean editor copy example enough surrounding context make example compile correctly type thing editor modify example lean check result provide feedback continuously type recommend running example experimenting code work chapter follow acknowledgment tutorial open access project maintained github many people contributed effort providing correction suggestion example text grateful ulrik buchholz kevin buzzard mario carneiro nathan carter eduardo cavazos amine chaieb joe corneli william demeo marcus klaas de vries ben dyer gabriel ebner anthony hart simon hudon sean leather assia mahboubi gihan marasingha patrick massot christopher john mazey sebastian ullrich floris van doorn daniel velleman théo zimmerman contribution apologize whose name inadvertently omitted thierry coquand gerard huet calculus construction inf comput february peter dybjer inductive family formal asp comput
530,Lobsters,formalmethods,CSE-Formal methods,Survey Paper: Formal Methods for Web Security (2016),http://www.dais.unive.it/~calzavara/papers/jlamp16.pdf,survey paper formal method web security,,obj length filter flatedecode stream se
531,Lobsters,formalmethods,CSE-Formal methods,State Machines and Alloy,http://aQute.biz/2018/05/22/State-Machines-And-Alloy.html,state machine alloy,alloy previous post state machine flipflop transition verification magic querying conclusion pkriens comment,post continues quest get java developer using alloy tool right hand fantastic way explore software hardware design today explore state machine ran state machine problem customer used alloy debug committed java code blog could useful share experience probably would help read previous post alloy state machine finitestate machine fsm mathematical model computation abstract machine exactly one finite number state given time fsm change one state another response external event change one state another called transition fsm defined initial state table specifies condition transition flipflop probably simplest fsm flip flop flip flop circuit revers output clock go low high state flipflop either offthe edge clock event let call clock make problem tad interesting also add reset event always force state open utilordering transition enum event clock reset enum state transition define table constraint transition alloy table called relation consists set tuples flip flop need following column table state state row applies event event next next state define table function alloy fun transition state event state clock clock reset reset table verification get interesting part clearly flip flop change time explore time aspect alloy explore time aspect creating trace trace basically table relation row represents moment time generally row represents step row row earlier time step generally atomic step concurrent algorithm let define data trace sig transition state occurs event notice start made trace sig object ordered first last trace well trace atom next prev aside ordering internally maintained table magic hardest part get alloy bit like quantum computer look like superposition possible value ask alloy example one possible trace table look like without constraint defined run random one possible trace table state event clearly tiny example state table inspired blog state event tried step number state table high number particle universe task therefore create specific table possible table already exist alloy model task instead carve table part solution case interested trace step next trace constrained transition defined earlier alloy define constraint predicate ask instance model predicate true see trace nicely revers flipflop state clock properly handle reset event translating alloy requires u constrain change subsequent trace row let call first trace row next row common practice mathematics formal model using limit allowed transition state ie want state next row constrained transition table pred trace transitionlast tnext tbefore transition tbefore toccurs ask alloy instance run trace case first state also solution first state ask alloy solution following way run firston trace firstbefore work fine querying since trace ask specific instance note far seen instance model minute part possible instance example could trace state would always run alwaysoff trace firstbefore transition tbefore expect instance could also get reverse trace run alwayson trace firstbefore transition tbefore expect indeed provide u instance conclusion alloy odd beast software development tooling landscape since counterpart genuinly something new excellent stating quite exactly mean perfect often show understand problem yet clearly state machine impressive tool however find use explore software design alloy bit like editor allows play essence system ah well let know interesting could write actual larger state machine developed found quite error transition table using alloy peter kriens pkriens comment
532,Lobsters,formalmethods,CSE-Formal methods,Noise Explorer: Design and Explore Noise Security Protocol Handshake Patterns,https://noiseexplorer.com/,noise explorer design explore noise security protocol handshake pattern,design explore noise handshake pattern noise protocol framework design noise handshake pattern generate formal verification model proverif explore compendium formal verification result generate secure software implementation go rust design noise handshake pattern generate cryptographic model formal verification get model get model generate secure protocol implementation code get implementation get implementation generate rust implementation code webassembly build get implementation,design explore noise handshake pattern noise explorer online engine reasoning noise protocol framework revision handshake pattern noise explorer allows design noise handshake pattern obtain validity check verify design conforms specification generate formal verification model instantly generate full symbolic model applied pi calculus noise handshake pattern enter using proverif model analyzed passive active attacker malicious principal model toplevel process sophisticated query specifically generated relevant noise handshake pattern including test strong v weak forward secrecy resistance key compromise impersonation explore compendium formal verification result since formal verification complex noise handshake pattern take time require fast cpu hardware noise explorer come compendium detailing full result noise handshake pattern described original specification result presented security model even comprehensive original specification since includes participation malicious principal generate secure software implementation noise explorer automatically generate secure implementation chosen noise handshake pattern design written go rust design noise handshake pattern generate cryptographic model formal verification get model active attacker get model passive attacker generate secure protocol implementation code get implementation written go get implementation written rust generate rust implementation code webassembly build get implementation written wasm
534,Lobsters,formalmethods,CSE-Formal methods,Conc2Seq: A Frama-C Plugin for Verification of Parallel Compositions of C Programs (2016),https://allan-blanchard.fr/publis/bkll_scam_2016.pdf,framac plugin verification parallel composition c program,,obj length filter flatedecode stream riܦ g zw dh v r r rg lh
535,Lobsters,formalmethods,CSE-Formal methods,A Formal Security Analysis of the Signal Messaging Protocol,https://eprint.iacr.org/2016/1013.pdf,formal security analysis signal messaging protocol,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream q g r e w q n rb yv h ł w e endstream endobj obj length filter flatedecode stream g ѹlk k z x c ء ѵ q l
536,Lobsters,formalmethods,CSE-Formal methods,Building Robust Dist Systems and Network Protocols Using Adversarial Testing and Behavioral Analysis,https://nds2.ccs.neu.edu/papers/prot_secdev2016.pdf,building robust dist system network protocol using adversarial testing behavioral analysis,,obj filter flatedecode length stream endstream endobj obj sa false type extgstate sm endobj obj filter flatedecode length stream endstream endobj obj height bitspercomponent subtype image length mask width colorspace indexed devicergb filter flatedecode type xobject stream endstream endobj obj filter flatedecode length stream fd c ir jj inn endstream endobj obj sa true type extgstate sm endobj obj lastchar subtype fontdescriptor r basefont encoding r width firstchar type font tounicode r endobj obj subtype truetype fontdescriptor r basefont slmzritimesnewromanpsmt encoding type encoding difference space comma period slash zero one two three four five six eight nine e h u c e l n q r u v copyright width firstchar type font lastchar endobj obj filter flatedecode length stream endstream endobj obj count type page kid r r r r r r r r endobj obj subtype fontdescriptor r basefont gkbbildejavuserif encoding r width firstchar type font lastchar endobj obj subtype truetype fontdescriptor r basefont tlzykctimesnewromanpsmt encoding winansiencoding width firstchar type font lastchar endobj obj r charset capheight ascent flag italicangle descent fontname gkbblmarialitalicmt fontbbox type fontdescriptor stemv endobj obj indexed devicergb r endobj obj lastchar subtype fontdescriptor r basefont encoding r width firstchar type font tounicode r endobj obj height bitspercomponent subtype image length width colorspace devicegray filter dctdecode type xobject stream jfif mm b j adobe photoshop h h jfif h h adobecm adobe
537,Lobsters,formalmethods,CSE-Formal methods,DSLs for Ethereum Contracts,http://www.michaelburge.us/2018/05/15/ethereum-chess-engine.html,dsl ethereum contract,smt solver theorem provers cardano typebased tool k framework languageoriented programming pyramid c chess engine pyramid modeling language ether ada diffusion commitment restriction law pyramid modeling language address hold token formula value expression proposition transfer change total supply nothing change total supply initialization delegated transfer change total supply condition consequent alternative transfer change user balance sent received using pml communication test generation model checking c compiler racket type system semantics engineering parsing program synthesis verification chess engine previous article beautiful racket practical typography typography lawyer overview collection ceagle brag bnf translation unit typed racket reader expander syntax object c translation unit beautiful racket type declaration type alias variable declaration function declaration rvalues statement label scope continuation expression label expression type future work made language faster deferring optimization article solidity abi cardano backend atomic crosschain trading type system recent paper multicontract library unit contract testing library management nix formal ir semantics plt redex solidity lll conclusion,good smart contract language billion problem look amount lost recent hack people changing development process response ethereum leaning towards smt solver general use theorem provers part design cardano aim upfront design leaning heavily typebased tool k framework article present languageoriented programming alternative expert create specialized language modeling token atomic crosschain swap contract developer use describe relevant part contract expert know rule write secure contract however rule consistently followed contract developer expert even expert slip reviewing large amount code specialized language consistently apply security rule reduce amount code reviewed pyramid language writing smart contract using languageoriented programming people develop new programming language interoperate every language technical demonstration develop c compiler port c chess engine run ethereum virtual machine evm contract developer expected use c simple realistic language almost programmer know finally give status update pyramid people interested using language pyramid modeling language smart contract code law read trust line subtle code start often clear mean contract correct people know something problem lost money present language describing security property every requirement fit tweet apply language ethereum token standard token tradeable virtual currency example many gamers ethereum miner video card could rent ai researcher token could exchanged gpu time ethereum cardano base currency ether ada might wonder people issue new currency rather exchange base currency three common reason diffusion people want invest idea individual action vanguard index fund allows invest u economy without reviewing company business plan token allows invest marketplace gpus without leasing space data center sourcing video card commitment since token usable specific purpose investor whole exit creating real productive demand make idea likely succeed restriction token need additional trading restriction example allowing user purchase token credit card bank transfer checking user accredited investor since diffusion commitment restriction apply hypothetical gpu marketplace new token would useful tradeable exchange implement interface contract function totalsupply public constant return uint function balanceof address tokenowner public constant return uint balance function allowance address tokenowner address spender public constant return uint remaining function transfer address uint token public return bool success function approve address spender uint token public return bool success function transferfrom address address uint token public return bool success event transfer address indexed address indexed uint token event approval address indexed tokenowner address indexed spender uint token solidity accurately describes data flow method tell method need law use hypothetical pyramid modeling language pml describe property hold contract implementing interface one address hold token totalsupply sum balanceof address address law state add token every user hold get totalsupply every contract satisfies law twoweek holding period sell buying developer may include unvested token totalsupply count vested token user balanceof however true particular contract state one line contract token minted destroyed hiding thing user balance pml formula class free variable sigil mean identifier refers contract method sigil substituted value generate new formula unmarked variable stand term modeling language formula sigils said expression expression one involving operator proposition law formula reduces proposition substitution sum special form substitute possible value address formula balanceof address sum result another law transfer change total supply totalsupply transfer totalsupply initial state contract arbitrary fork universe initial state compare two different action lefthand side call contract totalsupply method righthand side first call transfer two argument call totalsupply requires value returned totalsupply sequence expression evaluates last expression law must hold possible initial state assignment variable every satisfies property token tax every transaction token however important know two line hold favorite token even stronger version property nothing change total supply initialization initialize result totalsupply result totalsupply initialize method part standard contract anyways law state contract initialized possible way change totalsupply token stand sequence method call since totalsupply unsigned satisfies totalsupply let property rule integer overflow error generate huge amount token powhcoin hack example place constraint totalsupply supply ever change impossible give result two different value one two constraint violated property universal property hold possible situation law condition hold use restrict delegated transfer change total supply totalsupply allowance owner spender amount transferfrom owner amount totalsupply totalsupply delegated transfer allow user grant user contract permission spend token cryptocurrency exchange thousand token might require permission order enable trading law mainly check transferfrom throw exception lefthand throw exception first line expression condition line consequent alternative x indentationinsensitive syntax sequentially executing two statement property useful imprecise mainly used introduce syntax precise specification transfer transfer change user balance sent received balance balanceof addr transfer amount newbalance balanceof addr newbalance balance addr balance newbalance amount addr newbalance balance amount two additional syntax transfer syntax constrains address called transfer operator combine multiple proposition using pml modeling language say lot line specification communication security auditor token investor could use language talk contract without changing development process extra code written test generation replace variable random developerchosen value test whether property hold care must taken generating address cryptographic hash model checking specification sent modelchecker like contract also converted may possible formally prove contract security property custom language communicate intent efficiently implementation allows specialpurpose tool check intent goal pyramid allow expert create specialpurpose language like modeling language dsl specification executable code test framework next section show nutsandbolts created new language c compiler pyramid build racket since racket focus language development library implementing type system semantics engineering parsing program synthesis verification using pyramid code generator anyone create advanced smart contract language pyramid flagship language scheme dialect section create c compiler compile chess engine wrote previous article engine successfully calculated chess perft based implementation matthew butterick beautiful racket interested reader use wellwritten book guide matthew lawyer web designer us languageoriented programming publish book like practical typography typography lawyer overview custom language begin first line lang ceagle typedef unsigned bit typedef unsigned int bool every pyramidbased language lang line ceagle name racket collection describes read interpret rest file first line predefined syntax everything else completely customized ceagle c compiler following compiler stage parser us brag dsl defining bnf grammar interesting work happens compiler macro module custom pyramid language expander turn source code syntax translation unit bundle scheme together metadata like dependency languagespecific parse tree languagespecific ast struct translationunit language symbol sourcecode sexp abstractsyntax pyramidast pyramid dependency translationunits pyramid ceagle implemented typed racket struct includes type annotation translation unit topologically sorted dependency translation unit export every definition custom language two component reader expander ceagle reader run lexer parser stage create syntax object expander macro run expander simplifier compiler stage syntax form translation unit custom language export maketranslationunit function execute argument let treat entrypoint module differently ceagle invokes main function end ceagle expander definesyntax cmodulebegin stx syntaxcase stx parsetree starting parse tree input modulebegin declare new module requirestxs parsetree depends module provide maketranslationunit export function define maketranslationunit execute define abstractsyntax expandtranslationunit parsetree define compiled compiletranslationunit abstractsyntax execute translationunit ceagle quote parsetree abstractsyntax compiled dependency created requirestxs expandtranslationunit compiletranslationunit refer c translation unit pyramid translationunit c include work c source ceagle nonstandard require allows import pyramidbased language guarantee compiled extracted parse tree requirestxs interesting work compiletranslationunit beautiful racket book mentioned cover everything greater detail compile translation unit provide rule compiling class abstract syntax declaration statement expression type type module defines type used ceagle duplicated important one declaration c translation unit consists toplevel declaration typedef global variable function definition entrypoint module additionally define function named main definition toplevel declaration struct cunit decls cdeclarations struct cdecltype name symbol type ctype struct cdeclvar name symbol type ctype init option cexpression struct cdeclfunc name symbol sig csignature body cstatement definetype cdeclaration u cdeclvar cdecltype cdeclfunc definetype cdeclarations listof cdeclaration reduce number parenthesis like define plural version cdeclarations singular type cdeclaration explicitly define singular version article type alias typedefs implemented remembering name type association table rest translation unit use since must return pyramid syntax well return empty begin form compiledecltype cdecltype pyramid define compiledecltype x destruct cdecltype x registertype xname xtype f pyrbegin list destruct macro defines variable field struct xname refers cdecltypename x see type section detail typechecking done variable declaration cdeclvar variable declaration int x two part remembering x type int table compiling declaration form define x initializer initializer either expression given default value depends type conceptually variable pointer sizeof type byte however value identity type variabledefiner macro assigns fresh memory location value compiledeclvar cdeclvar pyramid define compiledeclvar x destruct cdeclvar x registervariable xname xtype makemacroapplication variabledefiner xtype xname shrinkpyramid xinit compileexpression xinit rvalue compiledefaultinitializer xtype variabledefiner ctype pyramidq define variabledefiner ty handle typedefs define realtype resolvetype ty match realtype struct ctypefixed cdefinefixnum struct ctypestruct cdefinestruct struct ctypepointer cdefinepointer struct ctypeunion cdefineunion macro expect return syntax shrinkpyramid function revers expander stage compiler converting ast back syntax int x case compiler emits use cdefinefixnum macro written pyramid look similar ordinary racket macro definesyntax cdefinefixnum stx syntaxcase stx name init begin define name let ptr callocatefixnum cwordwrite ptr init ptr cnoinline name memalloc pyramid standard library primitive defmacro callocatefixnum memalloc word cnoinline expands set name name prevents pyramid optimizer attempting inline variable necessary future version compiler function declaration function declaration look like int main return function several requirement function name signature need remembered later variable defined inside function escape body argument passed rvalues new variable need initialized return statement completes current function call given value function ordinary lambda usable pyramid program putting together get compiledeclfunc cdeclfunc pyramid define compiledeclfunc x destruct cdeclfunc x destruct csignature xsig sigvarinit csigvar variablename define sigvarinit v symbolappend csigvarname v init var variablenames define var map sigvarinit xsigargs registervariable xname xsig declarevariablescope define new local variable function parameter define args forlist pyramid arg xsigargs define argname csigvarname arg define argtype csigvartype arg registervariable argname argtype makemacroapplication variabledefiner argtype argname sigvarinit arg define function scheme lambda pyrdefinition xname pyrlambda var quasiquotepyramid macro like lisp quasiquote switch abstract concrete pyramid syntax quasiquotepyramid begin args withreturnpoint compilestatement xbody definesyntaxrule declarevariablescope x parameterize let temporarily modify global variable symbol table restored execution exit body even exception occurs parameterize variable hashcopy variable x since pyramid scheme dialect support scheme callcc return statement simply call continuation named return value given withreturnpoint pyramid pyramid define withreturnpoint exp withescapepoint return exp withescapepoint symbol pyramid pyramid define withescapepoint name exp expandpyramid callcc λ name shrinkpyramid exp break continue also implemented continuation goto statement implemented continuation like allows jump label visited yet cover declaration since mentioned break continue goto cover statement next statement category statement label place jumped c support label directly programmer know switch statement case default clause considered label c switch statement equivalent cascading ifelse statement int foo int x switch x case case case return x example value would cause switch execute return skipping three loop easily translatable cascading ifelse statement scope allow define variable within body many also allow break continue continuation abort surrounding scope using scheme continuation expression used statement statement label struct clabeled name symbol body cstatement struct clabeledcase expected cexpression body cstatement struct clabeleddefault body cstatement struct cgoto target symbol scope struct cif pred cexpression consequent cstatement alternative cstatement struct cblock body cstatements struct cswitch actual cexpression body cstatement struct cfor init cdeclvars pred option cexpression post option cexpression body cstatement struct cwhile pred cexpression body cstatement struct cdowhile pred cexpression body cstatement continuation struct creturn val option cexpression struct cbreak struct ccontinue expression struct cexpressionstatement exp cexpression definetype cstatement u clabeled ccontinue every entry label implemented inline assembly label jump instruction switch statement emits jumptable case default label c statement compiles scheme expression compileif cif pyramid define compileif x destruct cif x pyrif compileexpression xpred rvalue compilestatement xconsequent compilestatement xalternative loop implemented using continuation break continue also used check loop condition compilefor cfor pyramid define compilefor x destruct cfor x define init map compiledeclaration xinit define post xpost compileexpression xpost rvalue expandpyramid begin define pred xpred compileexpression xpred rvalue expandpyramid withbreakpoint quasiquotepyramid begin init cloopforever withcontinuepoint quasiquotepyramid pred begin compilestatement xbody post continue break c block like scheme begin need hide locallydeclared variable wrap immediatelyinvoked lambda compileblock cblock pyramid define compileblock x quasiquotepyramid λ compilecsequence cblockbody x mean goto block could miscompile since λ creates new continuation frame need released solution hoist variable definition beginning function use set initialize since use crossblock gotos example program opted keep simple finally expression statement compiled like expression wrap statement mapped fairly cleanly onto scheme expression detail consider expression every expression compiled two mode rvalue result value lvalue location value variable consist location value result value location address memory variable stored result content address expression compilable location value allow assignment operator like modify value location expression compilable result value read necessarily written location result value satisfy following two law variable address dereferences compile x rvalue compile x lvalue compile x lvalue compile x rvalue ceagle try fit lvalues rvalues single word struct value allocated memory represented pointer even rvalue context however struct lvalues refer original struct struct rvalues copied interchangeable ctypefixed would result value associated address may restricted byte efficiency rvalues identity must copied create lvalue c expression expression struct cconst value cvalue signed boolean struct cvariable name symbol struct cternary pred cexpression consequent cexpression alternative cexpression struct cbinop op symbol left cexpression right cexpression struct cunop op symbol exp cexpression struct cfunctioncall func cexpression args cexpressions struct cfieldaccess source cexpression name symbol struct ccast type ctype exp cexpression struct csizeof value u ctype cexpression struct carrayaccess array cexpression index cexpression struct cexpressionsequence exps cexpressions struct cexpressionarray exps cexpressions definetype cexpression u cconst cexpressionarray definetype cvalue u integer string char disagree c standard string representation string length data data cvariable lvalue context memory address variable rvalue context copy variable value cfieldaccess carrayaccess lvalue context offset memory address base rvalue context value memory address expression mostly follow recursively type typechecking simple compiler remembers type come across typechecks expression using previouslyremembered type information expression typechecked error thrown possible type struct ctypefixed signed boolean byte size struct ctypestructfield name option symbol type ctype struct ctypestruct name maybe symbol f ctypestructfields struct ctypeunion name maybe symbol f ctypestructfields struct ctypealias name symbol typespace ctypespace struct ctypepointer type ctype struct ctypevoid struct csignature ret ctype args csigvars typespace member ctypealias used disambiguate x struct x union x refer different type even though x name ethereum word ceagle nonstandard bit n token smaller standard type defined term typedef signed bit short integer type smaller byte supported smaller integer stored word compiler signextends necessary every arithmetic operation defmacro crestrictbytes x numbytes signed signed signextend x numbytes zeroextend x numbytes future work article used pyramid implement c programming language ethereum pyramid still need one last major technical component used general developer look forward next article series made language faster deferring optimization article beyond table summarizing idea future work feature priority get u optimizer required feasible deploy pyramid contract reference documentation required possible developer learn language solidity abi required ethereum possible interface metamask cardano backend required cardano possibly deploy pyramid code cardano type system optional reduce time spent debugging simple error multicontract library optional deploy multiple interdependent contract contract testing library optional reduces risk error deployed contract library management optional easier fetch use library formal ir semantics optional reduces risk error pyramid compiler solidity lll support optional use existing library pyramid required mean person world capable necessary anyone else start using pyramid optimizer documentation selfexplanatory describe item solidity abi ethereum tool make method call contract encoding function name signature along data pyramid library implementing tool like metamask could call pyramid contract direct translation interface export totalsupply uint balanceof tokenowner address uint allowance tokenowner address spender address uint transfer address token uint bool approve spender address token uint bool transferfrom address address token uint bool would generate dispatch table appropriate pyramid function using name signature convert function input output using solidity abi declared signature importantly export would macro builtin language feature people could experiment alternative abis without needing change compiler cardano backend pyramid code generator currently target ethereum virtual machine difficult also support cardano llvm derivative iele would allow pyramid developer write smart contract work either cardano ethereum refers deploying blockchains atomic crosschain trading different feature necessary communicate cardano ethereum type system one problem ceagle type system incompatible type system many language incompatible type system language boundary could become awkward recent paper introduced technique implementing type system macro attach syntax property code transform able build simpler type system implementing complex type system way system f similar haskell ml technique make easier transparently call across language boundary language differing type system multicontract library many ethereum application network contract game might tokentrading contract highlevel interface contract implementing rule game contract store player data pyramid already let manually write code would convenient use abstraction like racket unit safely link together contract declared interface safely upgrading contract preserving security property common problem contract testing testing library main tool used check contract free error unittesting implemented randomized testing implemented modelchecking implemented theoremproving implemented modeling language like pml could used generate random testcases fed modelchecker like limited checking also done stronglytyped contract interface together formal ir semantics dependentlytyped language could emit endtoend verified code library management pyramid either use racket raco use nix package manager handle library nix promise reproducible build anyone verify contract deployed correctly may make sense retest contract build process formal ir semantics meaning program common define larger language reduction simpler language make easier identify compiler error tool like plt redex could used specify semantics also make future formal verification work easier solidity lll ethereum developer currently use solidity since pyramid allows people develop language library could write solidity library pyramid allows existing contract developer use without changing existing code also small community lowlevel lisp developer expressed interest pyramid conclusion article presented languageoriented programming alternative way program smart contract interested recommend following twitter subscribing mailing list joining pyramid discord channel link available website sidebar
538,Lobsters,formalmethods,CSE-Formal methods,ULTIMATE Program Analysis Framework for C,https://monteverdi.informatik.uni-freiburg.de/tomcat/Website/,ultimate program analysis framework c,software engineering group andreas podelski university freiburg alexander nutz christian schilling daniel dietsch evren ermis german fordinal lassoranker jochen hoenicke jürgen christ marius greitschus matthias heizmann vincent langenfeld,ultimate developer student researcher software engineering group andreas podelski university freiburg current former developer ultimate alexander nutz alex saukh web interface cdt interface büchi minimization arend v reinersdorff predecessor ultimate batchen golden incremental verification betim musa automaton script interpolants unsatisfiable core incremental proof generation interpolant consolidation invariant synthesis björn buchhold predecessor ultimate version björn hagemeister dfa minimization claus schätzle procedure inlining abstract interpretation octagon domain chen kefei nested interpolants christian ortolf predecessor ultimate christian schilling christian simon predecessor ultimate version christoph hofmann ultimate cloud david zschocke invariant synthesis daniel dietsch daniel christiany nwa daniel tischner random automaton dfa minimization büchi minimization nwa minimization daniel wadehn delta debugger dennis wöfling danger invariant dirk steinmetz invariant synthesis dominik nuber floating point elisabeth henkel mso solver evren ermis fabian reiter büchi complementation frank schüssele abstract interpretation congruence domain map elimination german fordinal webinterface guilherme schievelbein floating point jan leike nwa lassoranker jan hättig total interpolation abstract interpretation polyhedron domain jan mortensen nwa petri net jan oreans invariant synthesis jeffery hsu incremental inclusion jens stimpfle nwa minimization jelena barth jung visualization jeremi dzienian temporal property julian jarecki petri net jochen hoenicke jürgen christ justus bisser predecessor ultimate lars nitzke pthreads layla franke dfa minimization leonard fichtner polynomial term marc fuchs multistep automaton markus lindenmann web interface cdt interface büchi minimization c memory model markus pomrehn formula simplification alternating automaton markus zeiger nwa ematching marius greitschus matthias heizmann matthias keil prefuse visualization max barth quantifier elimination maximilian rohland floating point nico hauff mso solver nicola sheldrick predecessor ultimate numair mansur fault localization robert jakob predecessor ultimate saskia rabald multistep automaton simon ley stefan wissert web interface cdt interface ivaluations large block encoding thomas lang loop complexity bitvectors tobias grugel tree automaton vincent langenfeld xiaolin wu büchi nwa emptiness check büchi nwa complementation yuwen chen alias analysis
539,Lobsters,formalmethods,CSE-Formal methods,Taking on a Challenge in SPARK,https://blog.adacore.com/taking-on-a-challenge-in-spark,taking challenge spark,hillel challenge leftpad broke thousand project full code github repository unique code solution fulcrum full solution github implementation fulcrum metric thought challenge adrian rueegsegger bringing attention blog post neelakantan krishnaswami spark team also working support nonaliasing pointer,last week programmer hillel posted challenge link point partial postmortem provided solution twitter someone prove correct implementation three small programming problem leftpad unique fulcrum good opportunity compare spark language expressiveness proof power system paradigm took challenge good news able prove three solution spark proof complete second also believe fulcrum solution particular show aspect spark especially nice explain solution problem briefly leftpad unique detail fulcrum end discus takeaway challenge leftpad hillel mentioned inclusion leftpad challenge kind joke retracted javascript package implemented leftpad famously broke thousand project back part irony leftpad simple one depend package functionality specification leftpad according hillel follows take padding character string total length return string padded length character length le length string nothing always helpful start translating specification spark contract distinguish two case padding required use contract case arrive specification see full code github repository function leftpad string padchar character len natural return string contractcases len slength leftpadresultlength len leftpadresultrange leftpadresult len slength padchar else len slength sfirst others leftpadresult case padding required spec also nicely show result string composed padding char char input string implementation spark course simple even use expression function function leftpad string padchar character len natural return string len slength padchar unique problem description defined hillel take sequence integer return unique element list requirement ordering returned value explanation blog add anything commented code suggest check code solution directly fulcrum fulcrum problem heart challenge although implementation also line quite lot specification work required get proved problem description defined hillel given sequence integer return index minimizes sum seq sum seq n time n memory side note took quite notice notation seq apparently mean slice excluding value index taken instead mean slice including value index consequently used seq second slice nt change nature difficulty problem pleased solution arrived present detail blog post two feature think none solution run space compared n permitted problem description required solution us bounded integer prof absence overflow solution use unbounded integer sidestep issueagain first step transform problem statement subprogram specification please refer full solution github detail many comment code program use array represent sequence integer first need array type function sum integer array first try looked like type seq array integer range integer function sum seq return integer length else first sum first last traversing array via recursive call summing cell go assuming array type seq array index could write required difference left right sum follows assuming nonempty assume throughout ab sum first sum last however two problem code specific spark work first problem could seen limitation spark spark allows recursive function sum use prove code specification refer would result lot unproved check code colleague claire showed really nice workaround present idea compute single sum value instead array partial sum later select partial sum want array computed single expression define new function sumacc regular function expression function postcondition function sumacc seq return seq post sumaccresultlength slength sumaccresultfirst sfirst sumaccresult sfirst sfirst sfirst slast sumaccresult sumaccresult idea cell result array contains sum input array cell including corresponding cell input array input array function would compute partial sum last value always sum entire array postcondition express result array length bound input array first cell result array always equal first cell input array following cell sum previous cell result array plus input cell index implementation sumacc function straightforward found code github also need sumaccrev function computes partial sum starting end array almost sumacc initial fact last value array zero owing asymmetric definition two sum initial problem description also find specification implementation github repository array index expression compute difference left right sum becomes ab sumacc sumaccrev second problem using integer type array cell sum result integer bounded integer type bit depending platform sum function overflow fulcrum solution referred hillel summary post use unbounded integer avoid issue many context unbounded integer unacceptable unpredictable space time requirement require dynamic memory handling decided increase difficulty fulcrum problem little include proof absence overflow solve overflow problem need bound size value summed many sum also need take account negative value also exceed minimum value luckily range type spark make simple subtype int integer range subtype nat integer range type seq array nat range int type partialsums array nat range integer use int type content array nat array index effectively limiting size array sum still calculated integer need define new array type hold partial sum need change return type partial sum function partialsums make work sum largest possible array cell containing highest lowest value absolute value sum would exceed million even fit easily bit course could also choose different much larger bound formulate specification findfulcrum follows function findfulcrum seq return nat pre slength post findfulcrumresult srange srange ab sumacc sumaccrev ab sumacc findfulcrumresult sumaccrev findfulcrumresult implementation fulcrum sumacc sumaccrev function already defined suggest simple solution fulcrum go follows call sumacc sumaccrev store result compute index difference two array smallestthe problem solution step take n space promised deliver constant space solution need something else fact notice every program call sumacc sumaccrev already n space never call function outside specification ghost feature spark let compiler check u type object function marked ghost ghost entity used specification like postcondition loop invariant intermediate assertion code make sure call function accidentally slowing code marking function ghost done adding ghost declaration constant space implementation idea index j partial sum leftsum sumacc j rightsum sumaccrev j compute value next index j simply adding j leftsum subtracting rightsum simple idea give u core implementation sfirst slast loop leftsum leftsum rightsum rightsum ab leftsum rightsum min min ab leftsum rightsum index end end loop return index understand code also need know min hold current minimal difference two sum index give array index minimal difference occurred fact previous explanation code expressed quite nicely using loop invariant also hold beginning loop pragma loopinvariant leftsum sumacc rightsum sumaccrev min ab sumacc index sumaccrev index k sfirst ab sumacc k sumaccrev k ab sumacc index sumaccrev index part missing initial setup condition hold first rightsum variable requires traversal entire array compute initial right sum written helper function sum n time space end initialization code findfulcrum index nat sfirst leftsum integer sfirst rightsum integer sum min integer ab leftsum rightsum seen initial value establish loop invariant first iteration loop first first metric took roughly minute come leftpad proof exact number two problem would guess roughly one hour unique hour fulcrum fulcrum line code including specification excluding comment blank line implementation without contract would line threefold overhead specification code though typical specification small algorithmic problem like fulcrum proof done automatically spark verifies example le second thought challenge first many thanks hillel starting challenge adrian rueegsegger bringing attention fun believe spark reasonably well challenge hillel motivation counter exaggerated praise functional programming fp imperative programming ip proved three example imperative style challenged functional programming community context problem spark probably besides point functional language going beyond fp v ip question asked challenge think learn lot looking solution discussion around challenge blog post neelakantan krishnaswami argues real issue combination language feature particular aliasing combination side effect verification hard one approach accept situation deal framac verification tool c common write contract separate memory region tool based separation logic directly feature separating conjunction specification language result quite complex specification opinion change initial condition remove language feature functional programming remove side effect make aliasing harmless kind consequence example need garbage collector inability use imperative algorithm literature spark keep side effect remove aliasing essentially excluding pointer language rule spark make loss pointer providing builtin array parameter mode two common usage pointer c shared data structure still remain impossible write pure spark one need leave spark subset go full ada rust keep pointer nonaliasing one via borrow checker however formal verification rust still early stage far know spark team also working support nonaliasing pointer beyond language feature another important question applicability language domain formal verification code matter bug would big impact code found embedded device example safetycritical code make sure device safe use think airplane car medical device embedded programming particular safetycritical embedded programming special different constraint apply example execution time memory usage program must predictable excludes language managed approach memory memory usage becomes le predictable gc often gc kick time make execution time unpredictable domain functional language really applied directly see use haskell unbounded integer used either issue memory usage grow computation yield large result execution time vary well issue main motivation provide space solution us bounded integer fulcrum problem proving absence overflow programming language everything either another important issue tooling particular proof automation looking functional solution fulcrum linked hillel blog post contain lot manual proof agda solution small despite fact though us simple quadratic algorithm would love see variant linear believe formal verification accepted industrial project proof must able completed automatically though manual effort acceptable small percentage proof obligation dafny spark solution one far could see fare well regard dafny wellknown excellent proof automation via boogie spark also well proof fully automatic
540,Lobsters,formalmethods,CSE-Formal methods,From Unit Testing to Formal Proofs,https://www.adampalay.com/blog/2018/05/04/from-unit-testing-to-formal-proofs/,unit testing formal proof,coq testing sort python quicksort hypothesis library proving sort coq proof versus property testing coq code python code one,know software work well mostly like seen enough bug humbled specie inherent inability write perfect code mitigate risk error write test property test integration test acceptance test load test accessibility test qa get point give u empirical certainty program work way expect last week learned one better empirical verification mathematically prove code work post hope demystify role formal proof software placing context traditional approach testing specifically compare verification strategy python normal language coq language allows prove property code write testing sort python let say written implementation quicksort python want make sure work first approach might write unit test import unittest class testsort unittesttestcase def testempty self selfassertequal quicksort def testsorted self selfassertequal quicksort def testunsorted self selfassertequal quicksort writing test know quicksort le expect sort list additional certainty go step use python hypothesis library write test property sorting algorithm example could test change length list sort hypothesis import given hypothesis import strategy st class testsort unittesttestcase given numbersstlists stintegers def testsamelength self number selfassertequal len quicksort number len number property might seem trivial test yet even small check catch subtle bug incorrect version quicksort python def quicksort number len number return number else first number remaining number sortedremaining quicksort remaining lessthan number number sortedremaining number first greaterthan number number sortedremaining number first return lessthan first greaterthan bug lessthan greaterthan filter strict inequality mean another value remaining equal first filtered quicksort return list shorter one passed bug subtle enough pas original unit test property test hypothesis able find failing edge case python quicksortpy falsifying example testsamelength self maintestsort testmethodtestsamelength number sure enough quicksort return bug easily fixed changing one strict inequality nonstrict one onecharacter fix lessthan number number sortedremaining number first greaterthan number number sortedremaining number first test pas point pretty confident quicksort change length list certain proving sort coq rhetorical course use hypothesis coq affirm property program difference hypothesis test property empirically coq formally prove let proof see look like written implementation quicksort coq particular syntax might seem unfamiliar generally see thing python version definition filterlte nat list filter fun n n list definition filtergt nat list filter fun n negb n list fixpoint quicksort l list nat match l nil nil h let sortedt quicksort filterlte h sortedt h filtergt h sortedt end sure enough behaves expect compute quicksort nil nil list nat compute quicksort nil nil list nat want check length list remains unchanged run quicksort rather write test going write property theorem theorem sortlengthunchanged forall l list nat length l length quicksort l coq meant written ide start writing proof ide enters interactive proofproving session proceed line line unpacking definition quicksort length applying axiom lemma prove theorem since coq optimized interactive session proof verge unreadable see impenetrable finished quicksort theorem theorem sortlengthunchanged forall l list nat length l length quicksort l proof induction l simpl reflexivity simpl rewrite ihl rewrite lengthisdistributive simpl rewrite nataddsuccr n length filterlte quicksort l length filtergt quicksort l rewrite twofilterlengtheq reflexivity qed without going proof detail tedious get glimpse code make sense run context interactive session watch right panel see proof evolve worry detail want illustrate coq proof experienced interactive proof session coq programming language readability matter enough believe code work coq actually true certainty property code almost never need revisit arrived enough know true software written far le mathematical certainty proof versus property testing tradeoff certainty get using coq one proof poor tool debugging property testing hand help identify edge case would otherwise anticipated coq hard prove something already good sense true property testing also provides framework make refactoring easy wanted change implementation quicksort wanted use different sorting algorithm altogether could keep property test unchanged would still expect pas algorithm correct expect catch error coq would prove property scratch however need show absolutely know fact program coq awesome tool code need satisfy legal regulation result property holding catastrophic consequence could worth extra effort show program truly satisfy condition say event learning coq really fun made think differently level certainty software encourage try link coq code python code referenced post looking coq tutorial really liked one
541,Lobsters,formalmethods,CSE-Formal methods,Yet Another Hierarchical State Machine (2004),https://accu.org/index.php/journals/252,yet another hierarchical state machine,samek ilogix samek userguide refman samek gof magical tran template gotw samek efficiency generated code http wwwquantumleapscom,probably familiar state machine finite state machine fsms widely used digital electronics programming application include communication protocol industrial control gui programming uml includes flexible variant form statechart diagram state contain state making corresponding state machine hierarchical hierarchical state machine hsms converted ordinary flat state machine implementors concentrate implementation fsms many implementation exist conversion however tends lose original structure hsm making difficult make connection statechart implementation clearly would nicer hsm could implemented directly source code direct implementation hsms seem comparatively rarely published miro samek provides prominent example book samek see sidebar next page information approach provided motivation approach present uml tool available generate source code directly statechart diagram example rhapsody ilogix information hsms statecharts found samek userguide refman course google implementation presenting allows code hsm c directly without need special code generation tool wizard although wizard could ease development converting statechart automatically template technique used enable compiler optimize code inlining believe resulting code rank among fastest get provided good uptodate optimizing compiler need anyway template subset uml statecharts supported present need advanced feature like concurrent state history pseudostates need expand solution tell would nice complete implementation best describe hierarchical state machine work example lifted statechart shown miro book specifies state machine test example implemented book samek page implement example artificial serf purpose providing number test case checking correct implementation state machine advantage quite small therefore well suited demonstration driven keypresses keyboard hsm state machine state grouped composite state action defined composite state apply automatically state contained therein allows considerable simplification state diagram diagram easily see state drawn box rounded edge bear unique name composite state contain state state contain state leaf state leaf state example arrow represent transition state labeled event cause transition taken example transition annotated key need pressed invoke transition transition originates composite state taken whenever substate handle corresponding event state thus pas handling specific event enclosing state example pressing e key cause transition state regardless currently active state rather cluttering diagram numerous transition arrow suffices introduce allencompassing toplevel state handle e key simplify diagram also point code reuse possible statechart implementation use opportunity therefore need possibility pas unhandled event encompassing state state handle event ultimately discarded state special exit entry action associated action executed whenever transition lead state respectively called external transition contrast internal transition execute exit entry action state machine implementation need necessary bookkeeping call action right order particular action associated transistion executed exit action entry action associated relevant state executed operation state machine always leaf state transition ultimately lead one leaf state another transition drawn target composite state composite state need specify one substates initial state example initial state composite state specified state state also composite need initial state case effect transition targeting state reality targeting state composite state specify initial state target transition example diagram contains two action specification code additionally print trace message illustration diagram show action specification shown transition selftransition example transition guard bracket associated action slash guard condition must evaluate true enable transition evaluates false transition taken none action executed selftransition exit reenters state hence associated exit entry action executed internal transition inside drawn arrow merely specifies action taken certain event occurs transition another state occurs exit entry action performed case internal transition guard associated action foo executed h key pressed foo evaluates true note difference selftransition internal transition latter never change active state nt execute exit entry action note also internal transition specified composite state although nt shown example flat state machine often represent current state using variable enum type implementation use function pointer point handler function current state handler function called whenever event occurs still implementation represent state object current state represented pointer current state object instance latter implementation suggested state design pattern gof also approach taken additional feature state unique type allow compiletime algorithm based state hierarchy instance leaf state need present state active time composite state exist type abstract therefore instantiated relationship composite state substates modelled inheritance composite state base class substates state derive toplevel state class often entry exit action empty consist trivial statement wanted use benefit inlining much possible allow compiler optimize away overhead associated function nt much prepared dismiss possibility determining target state run time transition go source state target state known compile time compiler figure entry exit function need called inline single optimized string code goal use template implement compiletime task chose therefore represent state instance class template leaf state composite state separate template different state diagram thus represented different instantiation predefined class template implementing state handler entryexit action done specializing member function class template nt specialize empty default automatically taken definition compstate leafstate class template template typename h struct topstate typedef h host typedef void base virtual void handler host const virtual unsigned getid const template typename h unsigned id typename b struct compstate template typename h unsigned id typename bcompstate topstate h struct compstate b typedef b base typedef compstate h id base template typename x void handle h h const x x const base handle h x static void init h implementation static void entry h static void exit h template typename h struct compstate topstate h topstate h typedef topstate h base typedef compstate base template typename x void handle h const x const static void init h implementation static void entry h static void exit h template typename h unsigned id typename bcompstate topstate h struct leafstate b typedef b base typedef leafstate h id base template typename x void handle h h const x x const base handle h x virtual void handler h h const handle h virtual unsigned getid const return id static void init h h hnext obj nt specialize static void entry h static void exit h static const leafstate obj template typename h unsigned id typename b const leafstate h id b leafstate h id b obj use specify state example typedef compstate top typedef compstate top typedef compstate typedef leafstate typedef compstate typedef compstate typedef leafstate used indentation indicate state nesting state bear unique numeric id code starting toplevel state outside allencompassing state example id code ensures state distinct type except toplevel state specify enclosing state state hierarchy defined lead corresponding class inheritance pattern ie top base class state testhsm class current state held corresponds loosely miro qhsmtst class class host state machine action typically implemented member function class state different type represent current state pointer toplevel state state derived dispatching event current state handler call handler member function current state pointer handler member function thus need virtual state actually current state leaf state contain nothing vtblpointer ironically object without state current state state machine represented pointer corresponding state object const topstate testhsm state invoking handler current state response event called dispatching done simply like assuming member function testhsm state handler note leafstate static member obj compstate need ca nt instantiated anyway implement pure virtual function inherited topstate leafstate compstate template provide empty implementation entry exit action provide specialized function taken instead implement entry exit action later event something trigger action state transition state machine without event state machine sitting still nothing state machine reactive system event represented anything predefined state machine implementation essentially free provide see fit task thing need call event dispatcher shown whenever event happens order state handler determine happened also need provide access data associated event example could store event idcode member variable state machine host class state handler function interrogate find particular event hand testhsm class enum signal asig bsig csig dsig esig fsig gsig hsig class testhsm public testhsm testhsm void next const topstate testhsm state state state signal getsig const return sig void dispatch signal sig sig sig state handler void foo int foo int foo const return foo private const topstate testhsm state signal sig int foo event represented enum value corresponding actual key pressed keypad keypress surrounding system need call dispatch invoke dispatcher example like int main testhsm test printf nsignal char c getc stdin getc stdin discard n c h c return testdispatch signal c see state machine driven outside calling dispatch repeatedly essence driving reactive system call time something interesting happens also easy integrate message pump event loop typical gui although nt show would commit specific gui making difficult try code use different system representation event may completely different example neither necessary store single member variable indeed need store state machine host class need make sure handler function somehow get easiest stored host class reference host object always passed handler implementing handler function central element implementing statechart handler function example may want crosscheck diagram browsing source code implement function template specialization state template template typename x inline void handle testhsm h const x x const switch hgetsig case esig tran x h printf return default break return base handle h x template template typename x inline void handle testhsm h const x x const switch hgetsig case asig tran x h printf return case bsig tran x h printf return case csig tran x h printf return case dsig tran x h printf return case fsig tran x h printf return default break return base handle h x template template typename x inline void handle testhsm h const x x const switch hgetsig case gsig tran x h printf return case hsig hfoo printf hfoo return break default break return base handle h x template template typename x inline void handle testhsm h const x x const switch hgetsig case csig tran x h printf return case fsig tran x h printf return default break return base handle h x template template typename x inline void handle testhsm h const x x const switch hgetsig case bsig tran x h printf return case hsig hfoo tran x h printf hfoo return break default break return base handle h x template template typename x inline void handle testhsm h const x x const switch hgetsig case dsig tran x h printf return case gsig tran x h printf return default break return base handle h x straightforward get let look last handler handle example check diagram see state handle transition associated two event pressing cause transition state pressing g cause transition state transition print log message function handle implement behaviour trouble making connection diagram code simple handler function illustrates point event key code retrieved host object using getsig function switch discriminates amongst different event relevant state default case forward unhandled event type parent state compstateleafstate class template contain helpful typedefs make convenient state handle event end handler top state silently discarded default want different behaviour may specialize handle function template top state action implemented ordinary function call example member function host class example handler action simply call printf print log message transition managed yet another class template tran detail explained later suffice say tran object created stack much way scoped lock object destroyed automatically end scope construction time relevant exit action associated state transition called destruction relevant entry action performed also host object state pointer made point new state construction destruction tran object call action associated particular transition uml statechart formalism allows variation allows conditional transition transition executed guard condition hold true acommodated easily testing guard condition ifstatement inside corresponding switch case handler function handle illustrates case hsig internal transition nt construct tran object done case hsig handle implementation exit entry action similarly straightforward entry action template inline void entry testhsm printf template inline void entry testhsm printf exit action template inline void exit testhsm printf template inline void exit testhsm printf get simpler call action routine need executed whenever state exitedentered print log message anything could done thing missing init routine necessary state initial transition initial transition may associated action usually point substate init action note reverse ordering template inline void init testhsm h init h printf template inline void init testhsm h init h printf action printing log message another special template init used specify transition initial substate please crosscheck diagram practical case action routine member host class hinted example function foo put actual code implement action handler task selecting right action state transition invoke right order try keep detailed action code handler magical tran template interesting part last tran template figure entry exit action call template typename c typename typename current source target struct tran typedef typename c host host typedef typename c base currentbase typedef typename base sourcebase typedef typename base targetbase enum work terminate template recursion etbcb isderivedfrom targetbase currentbase re escb isderivedfrom currentbase re esc isderivedfrom c re ec isderivedfrom c re exitstop etbcb esc entrystop esc escb ec use overloading stop recursion natural template specialization method would require specialize inner template without specializing outer one forbidden static void exitactions host bool true static void exitactions host h bool false c exit h tran currentbase exitactions h bool exitstop static void entryactions host bool true static void entryactions host h bool false tran currentbase entryactions h bool entrystop c entry h tran host h host h exitactions host bool false tran tran entryactions host bool false init host host host us gadget described herb sutter gotw gotw used test compile time whether class derived class b either directly indirectly important ingredient mechanism figure exitentry action call template class class b class isderivedfrom private class yes char class char static yes test b undefined static test undefined public enum re sizeof test staticcast sizeof yes tran work explained already exit action called tran object constructed entry action called destructed state different type tran need template template parameter type current state always leaf state source state transition arrow originates may composite state contains leaf state either directly indirectly type target state tran need walk inheritance hierarchy current state c find common base class current target state c must stop source state reached need descend hierarchy target state ascending need call exit action state along way descending need call entry action state along way ascending us template recursion exitactions descending us similar recursion entryactions additional bool parameter function used terminate recursion right point via overloading finding right point herb gadget enters picture point recursion need terminate first state common source target state word common base class state ascending source state eventually encounter base class target state recursion must end similarly ascending target state eventually encounter state base class source state know ascend end towards common base class actually need descend towards target class ascended source state appears got wrong way problem ensure correct order entry routine swapping recursion point invocation action seen entryactions effect exitactions actual exit action invoked drill recursively inheritance hierarchy entryactions entry action invoked work back hierarchy also see member function template handle compstateleafstate class template since tran need know current state order work entry exit action invoke necessary pas inheritance hierarchy default case handler function switch statement nt transition handled handler composite state would miss exit action substates finally handling initial state composite state deserves explanation remember targetting composite state transition lead initial state specified within composite state init action target state always executed executing entry action init action leaf state announce host class new state behaviour nt changed composite state default init action target composite state transition get compiletime error unless specifically provide init function composite state inside init function use following init class template specify initial substate template typename struct init typedef typename hostclass host init host h host h init entry host init host host host compile code example may run little test see whether action called right order got topinit signal signal e signal e signal signal h signal h signal x notice miro implementation render different result page samek notably action associated transition executed exit action miro version violates uml rule miro explains deliberate obeying rule would made implementation significantly complicated code obeys rule noticeable hit code performance furthermore note pressing e key exited reentered immediately obvious way diagram drawn fact miro code nt show behaviour uml definition seems specify behaviour code although nt entirely clear certainly consistent behaviour selftransitions interpretation turned correct would clearer draw transition arrow uml statecharts always leave source state boundary towards outside also enter outside hence exit action source state always called even target substate source state likewise entry action target state called even source state one substates efficiency generated code lot template might worry kind code generated template still accused causing code bloat reason embedded programmer particular still hesitate use used wisely however template conjunction inlining actually reduce amount code produced system presented fare respect given good quality compiler sensible setting compiler switch handle init entry exit function inlined virtual handler function state result get many handler function leaf state good compiler also able fuse switch statement handle function handle function base class effectively get larger switch incorporating case need considered state result converted hierarchical state machine flat one taking entry exit action account implemented handler function flat state manually code generated literally exactly template flatten hierarchical state machine simple state machine generate code particular empty action nt produce code even call empty procedure entry exit action associated particular transition also empty transition simmer single assignment host class state variable many processor one two instruction result probably fast get code sharing state reason include lot action code handler rather call corresponding action function host class particularly true handler function composite state template used advantage order allow compiler thoroughly optimize code even fairly readable requires neither liberal casting preprocessor macro solution described miro samek require dose template metaprogramming may challenge compiler got balance advantage drawback transition worked compile time allowing generation efficient inlined code malformed statecharts caught compile time stylized code lends well automatic code generation code typesafe nt need cast complete flexibility representing event need full template support compiler transition must static known compile time subset functionality uml statecharts supported find approach useful improvement comment offer bug fix like hear like thank miro samek andreas huber discussion advice well work hsm implementation work would nt exist without thanks also overload reviewer samek miro samek practical statecharts cc cmp book companion website additional information http wwwquantumleapscom userguide booch rumbaugh jacobson unified modeling language user guide addisonwesley refman rumbaugh jacobson booch unified modeling language reference manual addisonwesley gof gamma helm johnson vlissides design pattern addisonwesley
542,Lobsters,formalmethods,CSE-Formal methods,Formal Verification With Frama-C: A Case Study in the Space Software Domain (2015),https://repositorio.inesctec.pt/bitstream/123456789/5030/1/P-00K-THC.pdf,formal verification framac case study space software domain,,obj length r filter flatedecode stream r w q c т ຜ p c cf vh mu zm ur k b w rc du q j u h p w k b vwm u kt n w q q
543,Lobsters,formalmethods,CSE-Formal methods,A Brief History of Process Algebra (2004),http://alexandria.tue.nl/extra1/wskrap/publichtml/200402.pdf,brief history process algebra,,obj length filter flatedecode stream b g yrl w
544,Lobsters,formalmethods,CSE-Formal methods,Counterexample-Guided k-Induction for Fast Bug Detection,https://arxiv.org/pdf/1706.02136.pdf,counterexampleguided kinduction fast bug detection,,obj stream wn w dg b ql q gv
545,Lobsters,formalmethods,CSE-Formal methods,KRust: A Formal Executable Semantics of Rust,https://arxiv.org/abs/1804.10806,krust formal executable semantics rust,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
546,Lobsters,formalmethods,CSE-Formal methods,Bidirectional Certified Programming (2017),http://ceur-ws.org/Vol-1827/paper7.pdf,bidirectional certified programming,,obj length filter flatedecode stream
547,Lobsters,formalmethods,CSE-Formal methods,Boosting the Permissiveness of Dynamic Information-Flow Tracking by Testing (2012),https://pdfs.semanticscholar.org/1338/7865d474afa7a8d824bdbecdf24cbd892c7c.pdf,boosting permissiveness dynamic informationflow tracking testing,,generalizing permissiveupgrade dynamic information flow analysisabhishek bichhawat vineet rajani christian hammerplas
548,Lobsters,formalmethods,CSE-Formal methods,Are functional programs easier to verify than imperative programs?,http://semantic-domain.blogspot.com/2018/04/are-functional-programs-easier-to.html,functional program easier verify imperative program,michael arntzenius arntzenius twitter hillel wayne lot people say fp easier analyze imperative code purity whenever ask evidence people look like crazy like make challenge provide three imperative function job convert pure function separation logic idris purescript koka,via michael arntzenius arntzenius twitter saw hillel wayne posted following remark lot people say fp easier analyze imperative code purity whenever ask evidence people look like crazy like make challenge provide three imperative function job convert pure function follow link see three program basically small imperative program kind might see python programmer write going post correctness proof since interest rather comment upon difficulty verification since bad concision fit thought character via blog post highorder bit three program suggested equally easyhard verify imperative functional style none program make significant use procedural abstraction difficulty imperative programming arises combination state aliasing procedure call two feature handled without much difficulty combination three effectively make reasoning nearly difficult correct concurrent programming high level reasoning easy honestly feasible construct language compositional specification reason behaviour subprogram term specification rather looking full source code time hoare logic give compositional reasoning technique reasoning imperative update data aliased specification must also say something aliasing expected program current best technique specification generalization hoare logic called separation logic say something work post already long addition full procedure make problem much challenging specification procedure call must state effect without saying anything specific program point called otherwise might well inlined function prove correctness fully procedurefree program indeed leslie lamport advocate paper composition way make proof harder actually reasonable position interested verifying algorithm exist isolation rather verifying program always exist part larger program intuitively difficulty lot like reasoning cooperative concurrency call arbitrary procedure bit like yielding scheduler execute piece code returning control logicalconceptual concurrency actually accomplish anything unknown code hidden procedure call something data time ca nt break invariant need reason data invariant object ownership temporal protocol time matter get yet complicated yet want specify program pas around genuinely unknown function instance storing pointer function heap device many programmer call object case ca nt inline function nt know simply rejecting oo higherorder state nt work plenty important program rely upon example want prove scheduler implementation implement fair strategy come protocol scheduler code compiler writer generate similar difficulty arise want prove compiler generates bunch provably correct file whole program actually work get linked together example c program work link new mallocfree implementation removing one three difficulty make thing easier still lead interesting system state procedure call idealized algol idealized algol language higherorder function mutable variable lacking pointer john reynolds invented beautiful generalization hoare logic called specification logic reason early wellknown really like b state aliasing basically pointer program without procedure john reynolds also invented stateoftheart technique reasoning program called separation logic early c aliasing procedure purely functional programming basically nt care else see data never change might see running theme john reynolds also devised many technique use reasoning purely functional program parametricity late early related observation incidentally reasoning performance haskell code much harder reasoning functional correctness value haskell program never depends part program give simple compositional model functional correctness whether forcing thunk take time depends whether part program forced already reasoning performance haskell code requires complex reasoning aliasing one reason newer purely functional language idris purescript koka callbyvalue rather callbyneed make performance model compositional note building real program procedural decomposition optional ca nt without able break program piece since feature basically nonnegotiable aliasable state becomes dangerous people say imperative programming harder functional programming unstated assumption function state aliasable pointerlike state however making treatment state little le lax retain ease reasoning still permitting controlled use state safe fragment rust mix c permit create alias pointer data nt use mutate even though doubt direct inspiration john reynolds also pioneered approach paper syntactic control interference acm link sorry peter ohearn wrote paper syntactic control interference revisited modernized approach semantics typing rule add unsafe need fancy modern variant separation logic reason result see rustbelt securing foundation rust programming language ralf jung jacqueshenri jourdan robbert krebbers derek dreyer nt feel obliged look unless interested work excellent unavoidably technical indeed semantically haskell similar rustunsafe regard runst operator let create computation use highly aliasable state long nt escape scope computation fancy separation logic work proving safety rust needed show safety haskell see logical relation monadic encapsulation state proving contextual equivalence presence runst amin timany leo stefanesco morten kroghjespersen lars birkedal paper appeared conference
549,Lobsters,formalmethods,CSE-Formal methods,Source Code Verification for Embedded Systems using Prolog (2016),http://www.montenegros.de/sergio/public/wlp16-verification-of-embedded-with.prolog.pdf,source code verification embedded system using prolog,,obj length filter flatedecode stream fy
550,Lobsters,formalmethods,CSE-Formal methods,Aggregating verified modules together,http://zipcpu.com/formal/2018/04/23/invariant.html,aggregating verified module together,article zipcpu leaf module cpu whole rather new formal verification zipcpu zipcpu zipcpu formally verified property formally verified lord willing formal verification onespin solution dvcon onespin solution formal verification formal verification formal property review flipflops flipflops universe flipflop flipflop flipflops flipflops universe flipflops example counter universe formal method universe universe universe formal method timer example formal method formal method formal method induction induction universe inductive step particularly problematic formal method prior article universe formal verification concept invariant formal verification zipcpu zipcpu zipcpu master cpu instruction decoder alu multiply component twin bus arbiter memory controller formal property zipcpu prefetch divide multiply benchformal formally verifying formal verification flipflops article zipcpu core zipcpu core formal proof zipcpu zipcpu zipcpu zipcpu symbiyosys onespin solution zipcpu zipcpu onespin solution concept appears verilog formal verification pipelined memory controller module yosys script zipcpu pipelined memory controller zipcpu speculatively execute memory operation zipcpu pipelined program counter zipcpu isa zipcpu program counter program counter pc pc pc memory controller program counter formally prove inductive manner program counter program counter zipcpu zipcpu core symbiyosys script zipcpu formal property section zipcpu module formal property zipcpu formal verification yosys zipcpu zipcpu instruction set zipcpu alu zipcpu alu alu core zipcpu zipcpu conclusion formal verification zipcpu zipcpu formal verification formal method prefetch multiply divide formally verifying zipcpu zipsystem zipbones zipcpu,warning formal verification approach presented within article swapping assertion assumption lead false positive see article detail fig zipcpu following work zipcpu know formally verified leaf module working verifying cpu whole leaf module mean design component reference design component might also remember rather new formal verification picked within last year verifying zipcpu may complex design tried verify yet prior attempt formally verifying zipcpu difficult proof worked proprietary block floating point module module assigned single exponent value within block number output input number sequentially together assigned floating point value like zipcpu also involved proving module leaf module underneath alignment difficult get right implementation dependended heavily upon formally verified property two module order assurance component even worked along way learned trick aggregating formally verified submodules together order prove whole learned two particular technique abstraction invariant help control complexity formal proof today discussion focus invariant lord willing come back discus use abstraction present several example would love declare starting expert technique perhaps found article set article describing might able declare amount expertise sadly found small number article describing invariant struggled relate concept presented within article formal verification problem dealing one source found guide along road presentation onespin solution dvcon san jose credit onespin solution learned invariant apply formal verification try keep presentation simple enough understandable focused topic apply formal verification complex rtl module formal property review coming discussion late two concept must understand order follow discussion assume assert system verilog operator like explain set diagram describing state design given point time fig formal region relevance one example state diagram shown fig consider every point image representing one state flipflops design change one flipflops design move system state new point diagram several part diagram worth noting first note design start initial state defined initial statement within design point input design together logic within design cause design move one state another second note three different type state first set state set valid state state may reached initial state without violating assertion within design shown green second set state shown red illegal invalid state defined state violate assert statement within design goal using formal method prove cross point set valid state one invalid state third set state set shown largest region containing others universe possible set flipflop register combination value within design initially set defined every flipflop combination design hence n flipflops design without assumption initially state set state reachable initial state fig effect assumption within design two sort statement make flipflops within design first assume statement reduces size universe value flipflops may set use example counter always posedge iclk ireset rvalue else istart rvalue timeout else rvalue rvalue rvalue might assume ireset signal always zero always assume ireset restrict universe possibility ireset always zero goal formal method examine every possible state design enter order prove design never reach invalid state sure imagine task challenge general challenge computational complexity roughly exponential size universe within design hence smaller make universe possibility easier verify design fig effect assertion second basic formal statement assert statement unlike assume statement limit size search space assert statement declares particular state within universe somehow illegal shown fig use formal method goal guarantee design remains legal state return timer example might assert value counter never one greater timeout always assert rvalue applying formal method example engine quickly point initial state may lie within red illegal nothing restrict rvalues content initially initial rvalue two operator assume assert alone enough get started formal method lot however want prove design work time rather first time step need apply formal method called induction induction start assuming design somewhere among universe possible state initial state engine chosen illegal first step create time step design stay illegal set state time step try see possible enter set illegal state difficult part inductive step formal engine tell difference reachable state unreachable state particularly problematic new user formal method understand common refrain formal engine put design state way get fig lesson induction addressing problem subject prior article article explained must use either assume assert keep formal engine reaching unreachable state never able fully prove design meet property asserted time following example timer formal engine might pick value rvalue would follow rvalue step rvalue next step property rvalue would violated fix one would need assert instead rvalue timeout always assert rvalue timeout make size red area large enough include whole universe shown fig follow consequence example rvalue would never allowed would allowed valid value know two assert assume appropriate given time always used call master rule formal verification shown fig assume input assert property internal state output fig master rule formal verification rule served well formal verification effort date discovered need aggregate module together learn fine nuance rule nuance subject rest article concept invariant master rule formal verification capture deal thing already proven example let suppose set assumption b set assertion proven implies b shall write b need prove fig caption concept invariant know b b becomes invariant design instead reproving may treat assumption becomes especially useful trying deal complex proof reduce complexity verify larger larger design two situation found apply first parent module child leaf module underneath second place proof design broken separate section encountered trying verify zipcpu examine turn fig zipcpu module hierarchy explain first situation consider module hierarchy file structure zipcpu shown fig zipcpu consists master cpu file instruction decoder alu multiply component within twin bus arbiter one two memory controller use red bar fig indicate formal property within design normally property found end source file therefore normally expect red bar bottom file within diagram however since concept invariant turn property end show red bar figure top illustration purpose three component zipcpu abstracted prefetch divide multiply shown fig empty file dotted line around indicating due abstraction little logic remaining within find abstract representation benchformal directory also made proof easier leave mechanic topic future article fig invariant applied parentleaf module hierarchy understand applied principle invariant design consider fig show parent module leaf child assertion assumption within first step verified leaf module work shown left side fig step ignored parent module proved child assumption held child would never enter illegal state assumption module logic used prove assertion within module switched focus parent shown right fig case longer needed prove property child instead needed prove property parent asserted assumption child held assumed assertion therefore held well hmm statement confusing mathematical article read topic let try explaining suppose let la refer set assumption within leaf module lb refer set assertion within leaf module formally verifying module proved la lb unwrapping touch equivalent statement either la false lb must true la lb said another way either one assumption module must false assertion must true want move parent module case additional assumption pa assertion pb parent would like prove pa pb however also need deal leaf module leaf module know la lb know whether la hold since consists value provided parent module unless know la hold really know nothing lb since wire composing la come parent really need assert property hold order guarantee proper functioning leaf hence assert la assume lb backwards treated component result assume pa lb assert pb la fascinating part master rule formal verification still applies still assuming input parent module asserting property internal state output work flipflops composing internal state parent module input connection child hence assumption child input output parent may asserted likewise child output parent input make sense make assumption still confusing relax show code snippet illustrate applied concept next section warning process discussed flawed leave believing design work see article detail second way invariant used within design within given design component module case within zipcpu core case separate assertion group increasingly complex logic called stage fig fig invariant applied within file let call set assertion first formal proof prove assumption together design logic prove property within zipcpu core call phaseoneassertions know turn attention proving case know true assumption also know true implication proved second stage proof assume attempt prove repeat assuming proving examined current formal proof zipcpu still work progress may noticed using method first verifying component piece zipcpu work desired aggregating proof zipcpu whole second within zipcpu created two part proof expecting create third possibly fourth component later currently prove using symbiyosys according onespin solution method increase depth proof rather number state transition examined reasonable amount time perhaps thousand fold number though experience say formally verifying second stage zipcpu used take longer night really sure never let finish take hour one time used approach formally verify zipcpu since adjusted approach newer proof work better using approach sake onespin solution recommended method hoping quietly aware flaw within concept appears verilog previous section discussed lot formal verification abstract far coded reality would imagine left several reader wondering talking let bring abstract concept reality discus might look within piece verilog code start fairly plain verilog module almost module following rough format copyright statement defaultnettype none module thismodule core logic ifdef formal formal property always assume isomeinput always assert osomeoutput endif endmodule start copyright statement declare defaultnettype none instead wire catch lot bug module definition follows core logic within following module logic ifdef formal delimited section ending endmodule last line file inside section place assumption assertion regarding logic indeed browse code formally verified find common form possible might leaf child module module within formal proof make adjustment formal section first use synthesis define indicate thismodule module verified inside module yosys script also modify readverilog command include thismodule example within pipelined memory controller module check whether pipemem defined likewise see definition within yosys script second define macro use reference either assume assert statement thismodule defined refer assume assert expected swapped rewrite formal property use macro ifdef formal ifdef thismodule define assume assume define assert assert else define assume assert define assert assume endif formal property always assume isomeinput always assert osomeoutput endif handle creating logic pictured fig within nonabstracted child module perhaps best example might useful zipcpu pipelined memory controller contract zipcpu user speculatively execute memory zipcpu place memory peripheral bus bus operation may pipelined meaning multiple read may ongoing given time consider would happen one read set program counter would way undo read might progress point example consider following string load zipcpu isa lw instruction load word data bus register given second argument zipcpu instruction read left right second last load read value program counter lw load word address register lw mem lw lw lw lw pc pc mem lw must issue last load completed time program counter pc set cpu jump new instruction hence memory read pc really jump instruction cpu initiate read read pc completes check memory controller assumes read program counter must last read sequence formally prove inductive manner need check via assertion nothing pipeline ongoing read contains read program counter proven controller asserts output program counter must last return value sequence component aggregated check every fifo element code quietly removed replaced final assertion output final assertion however replaced process assumption longer need proof zipcpu whole second method applying invariant application within given file shown fig case want prove several set assertion within zipcpu core call phaseone phasetwo associated phase assertion macro phaseoneassert phasetwoassert etc verify component run formal engine twice first test phase one assertion phasetwo defined order test phase two assertion second set assertion excluded evaluated first set synthesis ifdef directive see symbiyosys script relevant code shown lifted beginning zipcpu formal property section start commented list formal phase supported zipcpu module ifdef formal phasex definition control assertion logic defined synthesizer define phasetwo define phasethree define phasefour strictly necessary remind defines supporting phase given assertion macro define phaseoneassert assert define phasetwoassert assert define phasethrassert assert phasetwo defined phaseoneassert macro redefined assumption ifdef phasetwo undef phaseoneassert define phaseoneassert assume likewise phasethree also defined phasetwoassert redefined assumption process repeat phase supported design ifdef phasethree undef phasetwoassert define phasetwoassert assume ifdef phasefour undef phasethrassert define phasethrassert assume endif phasefour endif phasethree endif phasetwo point formal property proceed section first section make input assumption necessary example assumption always assume isomeinput first set assertion follows assumption example assertion always phaseoneassert osomeoutput set assertion created using phaseoneassert macro allow u replace assertion assumption next proven true first pas later split second section used formal tool verify first set assertion phasetwo defined latter section assertion created using phasetwoassert macro order get section phaseoneassert macro used previous section redefined assume statement instead original assert statement ifdef phasetwo always phasetwoassert osomeotheroutput endif phasetwo endif formal case zipcpu second phase formal verification includes several free variable yosys anyconst used track arbitrary instruction arbitrary address working way zipcpu logic assign fconstinsn anyconst assign fconstaddr anyconst using method reconstruct operand operation operation issued verify right value always posedge iclk detail begin detail begin check first operand match fcra phasetwoassert fav opav check second operand phasetwoassert fbv opbv end end recall article describing zipcpu instruction set almost zipcpu instruction basic form opc ra rbi ra rb arbitrary register immediate constant fig zipcpu alu stage context prior entering alu stage zipcpu add rb register value together waiting alu stage become available write either ra rb adjusts value make difficult order keep clock speed high opportunity readd immediate constant would take extra clock tick dealing requires careful pipeline stall logic getting logic right tricky allowing formal engine pick arbitrary pipeline state examine arbitrary instruction going alu guarantee ra rbi operand valid matter instruction precedes searching possibility free variable expensive indeed phase taking many hour processing working verifying core module within zipcpu using method invariant entire formal verification still quite complete property zipcpu take le two hour hindsight made cpu proof complicated needed leaving proof susceptible false positive conclusion invariant one method handling formal complexity aggregating multiple module together mentioned opening mean expert formal verification first application principle invariant case zipcpu however even case zipcpu value using invariant saved many many formal verification cpu cycle return topic later order handle concept abstraction formal method abstraction may even powerful concept invariant may remember using abstracted component represent prefetch multiply divide component another illustration consider formally verifying container zipcpu whether zipsystem zipbones yet determined container anticipating able replace entire complicated zipcpu core abstracted version able prove formal property wrapper question
551,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Obstacle Avoidance and Navigation of Ground Robots (2017),http://symbolaris.com/pub/morerobix.pdf,formal verification obstacle avoidance navigation ground robot,,obj length filter flatedecode stream r ѡ ܡ p x r g ayq
552,Lobsters,formalmethods,CSE-Formal methods,Refinement Types for TLA+ (2014),http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=A1225244218BDD0A1C5342B3EB59BE1A?doi=10.1.1.710.8907&rep=rep1&type=pdf,refinement type tla,,obj length filter flatedecode stream rj k u ow l bm n jg pb endstream endobj obj length filter flatedecode stream l 철 h opc k z p g l j l endstream endobj obj length filter flatedecode stream ke u g vd h tt ny n 䴿 z ki u endstream endobj obj length filter flatedecode stream oj ĸ v jk ۉ ߗt r yeo p endstream endobj obj length filter flatedecode stream f dd b č n l z endstream endobj obj length filter flatedecode stream f e b ed 嵑
553,Lobsters,formalmethods,CSE-Formal methods,"Toward a Framework for Highly Automated Vehicle Safety Validation, Philip Koopman & Michael Wagner",http://users.ece.cmu.edu/~koopman/pubs/koopman18_av_safety_validation.pdf,toward framework highly automated vehicle safety validation philip koopman michael wagner,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream f c endstream endobj obj endobj obj endobj obj stream v hd lh f x տԉu u endstream endobj obj stream ԕ ô z endstream endobj obj stream sd þu wm
554,Lobsters,formalmethods,CSE-Formal methods,The Great Theorem Prover Showdown,https://www.hillelwayne.com/post/theorem-prover-showdown/,great theorem prover showdown,provable correctness specification prof partial specification full specification dafny question leftpad unique fulcrum pointed result leftpad dafny liquid haskell agda coq f isabelle idris unique fulcrum agda pure dafny liquid haskell crowd theorem provers theorem proverprovers david pearce neel krishnaswami thought leader yaron minsky cesar greydon hoare ron pressler justin le bulldog naysayer one line overflow better evidence final thought email update liquid haskell update,functional programming immutability hot right one hand pretty great lot nice thing functional programming hand people get little overzealous start claiming imperative code unnatural purity always preferable mutation think appropriate paradigm heavily dependent context lot people speak universal keep hearing easier analyze pure functional code mutable imperative code nobody give rigorous argument nobody provides concrete example nobody actually dig assignment transition much harder reason pure function io monad supposed accept axiom like accepting thing axiom make claim better damn well put test last friday exactly provable correctness formal proof look like let start type checking pseudocode return tail list fun tail input list list begin input input wtf end mean call list always output list type element input list call welltypedness specification program type checker prof specification valid language make type checker part compilation process compile prove always take list return list compiles welltyped need test welltypedness runtime course tail broken function type signature partial specification behavior great tail well typed plenty function type signature different behavior full specification fun tail input list list requires len input ensures output input begin input input objectively wrong end way statically checking requires ensures could prevent compiling could honestly say compiles correct statically checking course hard part try verify property program quickly hit wall like halting problem computer hate process labourintensive generally unfun least objective either program proven correct make perfect reasoning code challenge subjectivity every entry immediately objectively judged based whether conforms specification pure function always easier analyze people would able quickly provide proof three also unfair challenge one field active research proof general furious air quote three main way people write specification dependent type encode specification type program typechecks correct example idris agda f contract encode specification assertion prepost condition refinement type example spark liquid haskell dafny theorem write specification independent mathematical theorem example isabellehol bunch overlap stuff dependent type often used fp academia contract often used ip industry important point though formal proof wellstudied topic fp ip paradigm tend different way proof would able compare difficulty proof would also able contrast done chose verify everything dafny since arguably simplest lightweight ip verification language also free compiler online could easily provide proof proof proof learning basic shaving yak first two problem hour last one three metric fp code easier prove ip code novice like could problem afternoon someone already experienced proof roughly fast question leftpad take padding character string total length return string padded length character length le length string nothing leftpad one simplest interesting thing prove anybody understand concept code working version quirky enough specifying good exercise specify right length added character padding character suffix original string actually prove property bad one line function happy accident though reason making leftpad first already saw version proved liquid haskell thought would make first problem gim someone prove could link lh version move unique practice though leftpad proved lot harder unique freebie version invalid discus later unique take sequence integer return unique element list requirement ordering returned value hard one asking convert list set back included first thing proved dafny wrongly thought would mildly harder leftpad retrospect really swapped order first two one interesting thing unique unstably easy work symmetric set tweak break symmetry make problem lot harder example return unique element duplicate encode global property list discus fulcrum give advantage imperative proof part challenge also realize write proved oneway specified element original list output element output original list method took returned would still pas partial specification really dropped ball one fulcrum given sequence integer return index minimizes sum seq sum seq n time n memory main challenge implement inefficiently bad calculate value every index take min want efficiently though problem turn really nasty best way partially compute result prove theorem intermediate value use compute final index experience intermediate proof easier loop invariant mutation use accumulator recursion unlike two fulcrum intentionally chosen harder prove functionally michael arntzenius pointed commented example code wrong specified index sum first element compared remaining seqi element mentally flipped adding comment normally pretty skeptical trust code comment mantra screwing comment ugly lesson result everybody got stuck leftpad okay really immediate burst people saying easy followed people saying wait actually pretty hard turn formal analysis tough problem lot people tried argue challenge missing point purity always better even formally prove pure function formal method folk got first two challenge finished started working third vitalik buterin retweeted whole host naysayer jumped board twitter locked account twice please everyone leftpad mentioned leftpad supposed gim someone could link verified version inspired move somebody found flawed writer used assume declare intermediate step true fiat dafny would verify compile forcing prove assumption running code liquid haskell would verify compile letting run unproved code match requirement disqualified first attempt partial proof usually leaving output fill prefix couple solution claimed obviously true issue cover later stephen checkoway first correct proof dafny using recursive function instead loop right challenge hit theoremprover twitter everybody started sending solution verified leftpad liquid haskell agda coq f isabelle idris also got bunch imperative solution verified language like spark at whiley result challenge leftpad becomes theorem prover hello world pretty happy unique whole lot people interested one make sense got neither meme appeal leftpad raw challenge fulcrum proof submitted either return list prove element input output said version whole lot better prove twowayness element solution matched least partial spec though done agda liquid haskell pure dafny idris coq fulcrum two day posted challenge david turner got first working version pure fulcrum addition turner used isabelle arntzenius brute force solution agda checkoway used pure dafny ranjit jhala wrote solution liquid haskell think everybody found much harder expected hoping crowd theorem provers every single one people sent proof exception incredibly civil friendly engaging provers strong opinion fp versus ip interested trying challenge making point many people writing proof first time using new language first time showing favorite tool gotten leftpads ancient system domainspecific provers type system experimental even public yet one person currently trying prove mypy like sure impossible really hope theorem proverprovers turn theorem provers written people many people twitter account bunch pitched solution thought formal verification lot really good tangent definitely missing tried compile highlight james wilcox one contributor dafny shared thought made imperative harder fp thought heap bunch tpps immediately went oh yeah make perfect sense ranjit jhala develops liquid haskell first two problem lh talked difference functional imperative code use heap edwin brady jan de muijnik talking lesson proof system thinking adding idris twitter david pearce wrote possible issue leftpad exposed theorem prover neel krishnaswami emailed thought interplay procedure aliasing state formal verification going writing fuller post really looking forward reading read thought leader lot people write proof still put great insight favorite yaron minsky talked modularity different programming paradigm cesar asked verified apl greydon hoare ron pressler got debate economics formal verification justin le thought different program community different verification culture lindsey kuper summarized half fundamental problem formal verification single tweet bulldog common critique fp community aggressive people held true several people jumped tell imperative language worthless idiot making challenge none people actually provided solution pressed said trivial fp waste time expecting blowback like really surprised zero overlap provers bulldog expecting least overlap somebody mocked also provided valid solution even tried failed happen normally assume people brilliant jerk asshole online still listen case say something important really cracked assumption none brilliant jerk willing put skin game listen nothing say naysayer bunch people chimed say argument stupid easy prove fp matter according fp easier reason true even though prove fp program correct response common argument need prove fp code obviously correct three problem argument first confuses highlevel lowlevel primitive function intentionally lowlevel relying standard library get stuff done saying fp code obviously correct saying used higherlevel primitive ip kind operation available one person point apl solution fulcrum one line mean array language obviously correct functional one second use highlevel primitive relying correct always safe assumption write sorted sort list guaranteed get sorted list sort overflow finally people said also provided obviously correct almost wrong people missed edge case implement full specification even prove small program correct fp better proving big program correct everybody gave abstract argument would true explain logic apply example consider concrete example better evidence abstract argument sure case smallx false bigx true people claim bigx true despite smallx false unable bring concrete evidence pretty skeptical mention talking big program robust big program written ada c make c best language reasoning code personally put much faith cleanroom process language come correctness easier reason mean reasoning correctness mean reasoning integrationcompositionrefactoringarchitecture moving goalpost many people claiming equally happy discussion equating analysis correctness chose correctness easiest objectively verify sure posed similar challenge refactoring code everybody would telling easier reason refactoring clearly correctness ip still wrong curryhoward correspondence even know say one final thought two main takeaway first set show claim easier reason fp imperative wrong best say many problem easier reason fp imperative still think probably wrong least definitely wrong believe almost proof writer board also believe still mad fulcrum regardless paradigm easier reason heavily depends problem domain algorithm writing second formal verification community pretty great dozen leftpad version way planning collecting along explanation interested people compare different implementation even paradigm get pretty big difference style agda idris proof look nothing like despite encoded dependent type also first introduction proving code correct even though formal method diverse field niche formal specification different kind work pretty nice explore another part field shameless plug writing book formal specification tla julyish assuming struck lightning official preorder interested email let know done update couple common criticism want address parametric type get missing unique spec free true good argument favor using parameterized static type part spec saying fp analytic technique bad lot really good program analysis problem take extreme often disregarding ip analytic technique worth using reality considered note specific case parametric type fponly thing dafny unique us ints relative weakness dafny limitation language could rewrite spec use set also get theorem free however dafny unable prove automatically liquid haskell imperative loop trivially translated recursive function true true loop invariant trivially translated recursive function proof redo specification proof people struggled sometimes proving loop invariant easier proving recursive spec sometimes way formal verification exploit sometimes best way prove b correct find f f b prove f correct update read explanation leftpad proof
555,Lobsters,formalmethods,CSE-Formal methods,A Provably Correct Sampler for Probabilistic Programs (2016),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/final.pdf,provably correct sampler probabilistic program,,obj length filter flatedecode stream vw kk n x f h b vw ň cwm e ڸ g u n w f fczo endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form formtype ptexfilename ccbypdf ptexpagenumber ptexinfodict r bbox lastmodified pieceinfo illustrator r resource extgstate r property color dimmed false editable true preview true printed true title visible true length filter flatedecode stream v guq e endstream endobj obj length stream creator adobe illustrator r marc herbstritt title ccbyiconsvg creationdate canvassize boundingbox hiresboundingbox documentprocesscolors cyan magenta yellow black color rgbprocesscolor passermarken none endcomments endstream endobj obj length stream boundingbox hiresboundingbox begindata hex byte enddata endstream endobj obj filter flatedecode length stream c ö e gp k j j n tk f p քچcx e yk fq ԯ
556,Lobsters,formalmethods,CSE-Formal methods,How to prove a compiler fully abstract,https://dbp.io/essays/2018-04-19-how-to-prove-a-compiler-fully-abstract.html,prove compiler fully abstract,prove compiler fully abstract april fully abstract compiler correctness http githubcomdbphowtoprovefullabstraction equivalence preservation equivalence reflection observationally equivalent contextual equivalence component contextually equivalent part equivalence reflection equivalence reflection equivalence preservation equivalence reflection part equivalence preservation prove equivalence preservation concrete example language compiler proof full abstraction post literatecoq fullyabstract compilation approximate backtranslation fully abstract compilation via universal embedding http githubcomdbphowtoprovefullabstraction,prove compiler fully abstract daniel patterson april compiler preserve reflects equivalence called fully abstract compiler powerful property compiler different complimentary common notion compiler correctness mean prove code post along instruction get running repository http githubcomdbphowtoprovefullabstraction trouble getting going please open issue repository help figure equivalence preservation equivalence reflection make compiler fully abstract relate compiler treat program equivalence case considering observational equivalence two program observationally equivalent tell difference result running including side effect example observable behavior program language make see output print mean two program print output even implemented completely different way equivalent observational equivalence extremely useful especially compiler optimizing may change particular program implemented change observable behavior also useful programmer commonly refactor code mean change code implemented make easier maintain extend better support future addition without changing functionality refactoring equivalencepreserving transformation write observational equivalence program formally contextual equivalence often also want compile whole program particular module expression general sense component case want analogous notion equivalence two component contextually equivalent program context produce observable behavior word two module way combine module rest program rest syntactically identical module differ result observationally equivalent two module contextually equivalent write overloading observational contextual equivalence example consider simple functional language consider component individual expression clear two expression contextually equivalent î x x î x x x implemented differently matter used result always thing function call argument double argument even though different way important note contextual equivalence always depends observable within language example javascript reflect syntax function two function written would contextually equivalent exists program context distinguish context well imagine plugging function written result different two function tostring method function javascript return source code function perspective optimization troublesome sure transformation program safe assuming one much faster could code relied upon particular way source code written complicated thing like optimizing speculatively falling back unoptimized version reflection needed general though language kind reflection harder write fast compiler harder write secure compiler topic post always important know mean contextual equivalence usually mean program context determine component part equivalence reflection mind equivalence reflection equivalence preservation compiler mean start equivalence reflection property correct compiler already equivalence reflection mean two component compiled equivalent source component must equivalent write formally write mean component compiled consequence definition correct compiler property well contrapositive actually easier understand say source component equivalent target component would different formally hold compiler could take different source component compile target component mean could different source program wrote observationally different behavior compiler would produce target program correct compiler preserve observational behavior case target program one behavior behavior pedant considering nondeterministic target equivalence reflection thought related compiler correctness note however equivalence reflection compiler correctness long compiler produced different target program different source program would fine compiler could hash source program produce target program printed hash screen would equivalence reflecting since would produce different target program source program observationally different even syntactically different would pretty bad compiler certainly correct would equivalence reflecting part equivalence preservation equivalence preservation hand hallmark fully abstract compiler property even correct compiler though would certainly great say two source component equivalent compiled version must still equivalent formally see reversed implication neat trick mean something totally different one place studied extensively security researcher tell observer target make observation possible distinguish source make lot concrete also see frequently true even proven correct compiler say language information hiding feature like private field two source component identical except different value stored private field compiler preserve fact private example translates higher level object structure c struct pile memory accessed assembly target code could read private value two component longer equivalent also implication programmer refactoring compiler optimization compiler might think safe replace one version program another know language equivalent know compiler reveals distinguishing characteristic perhaps targetlevel library linking relies upon detail supposed hidden old code worked case working program make change change meaning component language whole program longer work proving compiler fully abstract therefore proving equivalence preservation prove equivalence preservation looking prove see given contextually equivalent source component need show contextually equivalent expand explicitly quantify context combine component make whole program c c ct ct noting mentioned overloading mean wholeprogram observational equivalence running program produce observation first outline proof go general consider actual example compiler proof concrete example see order prove need consider arbitrary target context ct show ct ct observationally equivalent showing ct observationally equivalent c produce source context c claim equivalent ct way sort compiler reverse assuming produce c c ct correspondingly c ct indeed observationally equivalent noting relies upon crosslanguage notion observation prove ct ct observationally equivalent instantiating hypothesis c c c tell u c c transitivity ct ct helpful see diagram top line given hypothesis instantiated source context come way backtranslation coming backtranslation showing ct c equivalent hard part proof c c ct ct concrete example language compiler proof full abstraction make concrete example presented english proof assistant coq post introduction coq see eg bertot cpdt pierce et software foundation source language arithmetic expression integer addition subtraction e n e e e e written coq inductive expr set num z expr plus expr expr expr minus expr expr expr evaluation standard wanted parse would need deal leftright associativity probably add parenthesis disambiguate consider point already tree structure unambiguous write evaluation function fixpoint evalexpr e expr z match e num n n plus evalexpr evalexpr minus evalexpr evalexpr end target language stack machine us stack integer evaluate sequence instruction addition instruction add subtract stack machine extra instruction opcount instruction return many operation remain stack machine put integer top stack simplest abstraction could think provide interesting case study problem full abstraction standin reflection allows program inspect part program also somewhat proxy execution time remaining stack machine requires stack empty end execution inductive op set push z op add op sub op opcount op see compiler evaluation function note reverse order pop value stack put compiler fixpoint compileexpr e expr list op match e num n push n plus compileexpr compileexpr add minus compileexpr compileexpr sub end fixpoint evalop list z ops list op option z match ops n n push z rest evalop z rest add rest n evalop n z rest sub rest n evalop n z rest opcount rest evalop zofnat length rest rest none end prove basic whole program compiler correctness result detail type result see post first prove general evalstep lemma use prove correctness note hint hintrewrite tactic experimental literatecoq library add support prooflocal hinting might think hack think make proof much readablemaintainable lemma evalstep forall expr forall list z forall x list op evalop compileexpr x evalop evalexpr x proof hintrewrite listappassocreverse induction intro iauto simpl hintrewrite iauto qed theorem compilercorrectness forall expr evalop compileexpr evalexpr proof hintrewrite evalstep hintsimpl induction iauto qed state property equivalence need define mean equivalence source target language produce side effect observation end result thus observational equivalence pretty straightforward follows evaluation definition equivexpr expr prop evalexpr evalexpr definition equivop list op prop evalop evalop want talk whole program partial program get linked part create whole program order create new type expr hole typically written paper program missing expression must filled hole given simple language expression filled hole produce valid program want one hole per partial program case one branch must normal expr contains hole contain one hole linkexpr function take context expression fill hole inductive exprctxt set hole exprctxt exprctxt expr exprctxt expr exprctxt exprctxt exprctxt expr exprctxt expr exprctxt exprctxt fixpoint linkexpr c exprctxt e expr expr match c hole e c e plus linkexpr c e e e c plus e linkexpr c e c e minus linkexpr c e e e c minus e linkexpr c e end stack machine partial program much easier since program list op mean program extended adding new ops either end inserting middle exprctxt define source language definition ctxtequivexpr expr prop forall c exprctxt evalexpr linkexpr c evalexpr linkexpr c target simplifying slightly saying allow adding arbitrary ops middle existing sequence ops definition ctxtequivop list op prop forall list op evalop evalop prove compiler fully abstract remember need prove preserve reflects equivalence since already proved correct proving reflects equivalence relatively straightforward let start lemma want lemma equivalencereflection forall expr forall list op forall compileexpr forall compileexpr forall eqtarget ctxtequivop ctxtequivexpr proof unfold ctxtequivexpr ctxtequivop intro induction c simpl try solve hintrewrite ihc iauto note dbp base case hole remains idtac note dbp hole case specialize target ctxt equiv hypothesis empty specialize eqtarget simpl eqtarget repeat rewrite appnilr eqtarget note dbp point know want follows compiler correctness rewrite eqtarget rewrite eqtarget repeat rewrite compilercorrectness eqtarget inversion eqtarget reflexivity qed lemma little involved much proceed induction structure evaluation context case hole induction hypothesis give u exactly need base case need appeal compilercorrectness lemma proved earlier otherwise follows easily equivalence preservation state lemma quite easily lemma equivalencepreservation forall expr forall list op forall compileexpr forall compileexpr forall eqsource ctxtequivexpr ctxtequivop proof abort proving another matter fact provable true come counterexample using opcount instruction surreptitiously added target language two expression contextually equivalent source language obvious putting proof example srcequiv ctxtequivexpr plus num num num proof unfold ctxtequivexpr induction c simpl try rewrite ihc iauto qed contextually equivalent target particular put opcount instruction add instruction afterwards result value plus number instruction took compute example targetnotequiv evalop opcount compileexpr plus num num add evalop opcount compileexpr num add proof simpl congruence qed former evaluating latter evaluates mean way going able prove equivalence preservation counterexample well scenario uncommon reason many even correct compiler fully abstract also related many compiler may still security problem solution somehow protect compiled code equivalence disrupted real machine might want flag instruction meant counted opcount would return anything saw would count alternately might give target language type system able rule linking code us opcount instruction perhaps restricts used blogpost sized example wanted keep proof short possible unstructured untyped nature target indeed much le structured source language fact source wellstructured wholeprogram correctness result easy mean proof get relatively complex require u add various auxiliary definition solution going take somewhat extreme rather say restricting opcount used even ruling linking opcount going highly restrict link artificial done entirely proof fit line case rather list going allow one op one op compiled program neither opcount still want resulting program wellformed ie error one number stack end either nothing push n either add sub able verify combination op fulfill requirement define possible linking context helper combine program following inductive opctxt set pushadd z opctxt pushsub z opctxt empty opctxt definition linkop c opctxt p list op list op match c pushadd n push n p add pushsub n push n p sub empty p end using redefine contextual equivalence target language permitting context definition ctxtequivop list op prop forall c opctxt evalop linkop c evalop linkop c change proof equivalence reflection one line change specialization target context empty context specialize eqtarget empty empty rather change believe compiler linked restricted context indeed fully abstract prove recall earlier post proving equivalence preservation mean proving top line implies bottom following diagram c c ct ct order rely upon backtranslation get ct c ct target context tiny example restricted opctxt write backtranslation definition backtranslate c opctxt exprctxt match c pushadd n num n hole pushsub n num n hole empty hole end second part proof showing vertical equivalence diagram hold compiled ct backtranslated c ct equivalent c state prove following lemma follows straightforward case analysis structure target context backtranslation using evalstep lemma lemma backtranslationequiv forall c opctxt forall p list op forall e expr forall c exprctxt compileexpr e p backtranslate c c evalop linkop c p evalexpr linkexpr c e proof hintrewrite evalstep evalstep intro match goal c opctxt destruct c end match goal h backtranslate invert h end simpl iauto qed lemma prove equivalence preservation directly case analysis target context given backtranslating using lemma proved get equivalence need lemma equivalencepreservation forall expr forall list op forall compileexpr forall compileexpr forall eqsource ctxtequivexpr ctxtequivop proof unfold ctxtequivexpr ctxtequivop intro remember backtranslate c c destruct c iauto erewrite backtranslationequiv e c c iauto erewrite backtranslationequiv e c c iauto specialize eqsource c simpl congruence qed obviously tiny language restrictive linker allowed restrictive context general shape proof used realistic language published research conference today next time see result correct even hoped correct compiler ask fully abstract violation equivalence something could exploited something would invalidate optimization recent conference publication include devriese et al fullyabstract compilation approximate backtranslation published new al fully abstract compilation via universal embedding published stated top post code post available http githubcomdbphowtoprovefullabstraction trouble getting going please open issue repository help figure
558,Lobsters,formalmethods,CSE-Formal methods,Trace-based Verification of Imperative Programs with I/O (2010),https://gmalecha.github.io/publications/files/jsc-wwv-10.pdf,tracebased verification imperative program io,,obj goto endobj obj introduction endobj obj goto endobj obj gradebook application endobj obj goto endobj obj outline endobj obj goto endobj obj coq background endobj obj goto endobj obj tracebased verification imperative program endobj obj goto endobj obj trace endobj obj goto endobj obj imperative program endobj obj goto endobj obj memory endobj obj goto endobj obj modularity endobj obj goto endobj obj example counting echo server endobj obj goto endobj obj application server endobj obj goto endobj obj gradebook application endobj obj goto endobj obj application logic endobj obj goto endobj obj data store endobj obj goto endobj obj verified implementation endobj obj goto endobj obj deploying application server endobj obj goto endobj obj frontend endobj obj goto endobj obj verification overhead endobj obj goto endobj obj extraction endobj obj goto endobj obj related work endobj obj goto endobj obj weaker notion correctness endobj obj goto endobj obj alternative approach full verification endobj obj goto endobj obj program derivation specification endobj obj goto endobj obj conclusion endobj obj goto r fit endobj obj length filter flatedecode stream e줈 g ß l ao u
559,Lobsters,formalmethods,CSE-Formal methods,Design-by-Contract for Specification and Conformance Testing of Distributed Software (2014),https://www.researchgate.net/publication/253790802_Extended_Design-by-Contract_Approach_to_Specification_and_Conformance_Testing_of_Distributed_Software,designbycontract specification conformance testing distributed software,,paper proposes extension design contract approachfor distributed software key point new approach arethe component interaction distributed system consideredas series event occurring different state systemeach event identiﬁed event type data parametersof operation call data returned event event semantics described contract corresponding event kind event contract consists precondition postcondition ﬁrst put restriction prestate data event occurrence precondition nothold occurrence event incorrect secondprovides relation prestate poststate eventoccurrence event correctness concurrent event deﬁned according sequential semantics set event considered becorrect ordered sequence conforming contract contract represented extension widely use programming language make comprehensible usefulfor average software engineerthe extended dbc approach used formalization andcleanup several telecom standard also used practiceoriented unitesk test development technology construct conformance test suite automated manner since unitesk toolswere successfully used several industrial project authorsconsider proposed extended dbc approach quite mature beused practical development distributed applicationsalthough approach test development technologybased seems quite general lot technicalissues concerning use testing application guior web interface interface including timing eventsthose issue resolved future developmentreferences bertrand meyer applying design contract ieeecomputer vol october pp e gamma r helm r johnson j vlissides designpatterns element reusable objectoriented softwarereading addisonwesley http wwwuniteskcom isoiec information technology genericcoding moving picture associated audio part ipmp system isoiec information technology codingof audiovisual object part system ipmp conformance test suite developmentavs enhancing conformance testingavs isoiec information technology open system interconnection basic reference model convention deﬁnition osi service rfc deering r hinden internet protocol version speciﬁcation december rfc narten e nordmark w simpson neighbordiscovery ip version december rfc thomson narten stateless addressautoconﬁguration december rfc conta deering internet control message protocol internet protocol version speciﬁcation december rfc crawford transmission packet overethernet network december rfc r hinden deering internet protocol version addressing architecture april rfc r hinden deering ip version addressingarchitecture july rfc w stevens thomas advanced socket apifor february rfc r gilligan thomson j bound w stevensbasic socket interface extension march rfc borman deering r hinden jumbograms august rfc deering w fenner b haberman multicastlistener discovery mld october http wwwuniteskcomproductsctesk v kuliamin petrenko bourdonov kossatchevunitesk test suite architecture proc fme lncs pp springerverlag v kuliamin petrenko kossatchev bourdonovunitesk model based testing industrial practice procof europpean conference modeldriven softwareengineering december v kuliamin petrenko n pakoulin bourdonov anda kossatchev integration functional timed testingof realtime concurrent system proc psi lncs pp springerverlag bourdonov kossatchev petrenko galterkvest automated generation test suite formal speciﬁcations fm formal method lncs springerverlag pp b burdonov kossatchev v v kulyamin application ﬁnite automaton program testing programming computer software http wwwisprasrugroupsrvrvhtml v kuliamin multiparadigm model source automated test construction proc workshop modelbased testing barcelona spain march also available electronic note theoretical computer elseveir j tretmans formal approach conformance testingproc ifip sixth international workshopon protocol test system pau france september pp j c fernandez cjard c viho using theﬂy veriﬁcation technique generation test suitesproc cav rutgers university new brunswick newjersey usa julyaugust j tretmans belinfante automatic testing formalmethods proc eurostar barcelona spain november http wwwagedisde
560,Lobsters,formalmethods,CSE-Formal methods,Œuf: Minimizing the Coq Extraction TCB,http://oeuf.uwplse.org/oeuf-cpp18.pdf,œuf minimizing coq extraction tcb,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj name r openaction r outline r pagelabels nums p pagemode useoutlines page r type catalog endobj obj r fit goto endobj obj filter flatedecode length stream g pdg vum csk penaaqqiiyyeeuumm h
561,Lobsters,formalmethods,CSE-Formal methods,Automatic Generation of Provably Correct Embedded Systems (2012),http://pat.comp.nus.edu.sg/wp-source/resources/publications/pdf/icfem12%20generation.pdf,automatic generation provably correct embedded system,,obj length filter flatedecode stream ؤ p va e 겶 tp ʣ
562,Lobsters,formalmethods,CSE-Formal methods,Model-Driven Performance Evaluation and Formal Verification for Multi-level Embedded System Design,http://hal.upmc.fr/hal-01447148/document,modeldriven performance evaluation formal verification multilevel embedded system design,,obj type catalog version page r openaction r fit endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r r r cropbox mediabox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r group r cropbox rotate endobj obj type page content r resource r mediabox parent r group r cropbox rotate endobj obj type page content r resource r mediabox parent r group null cropbox rotate endobj obj type page content r resource r mediabox parent r group null cropbox rotate endobj obj type page content r resource r mediabox parent r group null cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r group r cropbox rotate endobj obj type page content r resource r mediabox parent r group r cropbox rotate endobj obj type page content r resource r mediabox parent r group r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj font r xobject r r r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream kh k
563,Lobsters,formalmethods,CSE-Formal methods,Higher Order Multidimensional Programming,https://cartesianprogramming.files.wordpress.com/2018/03/lambda-montreal-2018-03-07.pdf,higher order multidimensional programming,,obj length filter flatedecode stream r
564,Lobsters,formalmethods,CSE-Formal methods,Automating Deductive Verification for Weak-Memory Programs,https://arxiv.org/pdf/1703.06368.pdf,automating deductive verification weakmemory program,,obj type xobject subtype form bbox filter flatedecode formtype group r length ptexfilename aecbadgetacaspdf ptexinfodict r ptexpagenumber resource extgstate ca ca font r r stream b 윜 j l q rrs k x n ӂ go k endobj obj filter flatedecode length r stream r q endobj obj filter flatedecode length r stream c դ
565,Lobsters,formalmethods,CSE-Formal methods,Automatic Testing of Symbolic Execution Engines via Program Generation and Testing (2017),https://srg.doc.ic.ac.uk/files/papers/symex-engine-tester-ase-17.pdf,automatic testing symbolic execution engine via program generation testing,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj page r type catalog endobj obj filter flatedecode length stream l x endstream endobj obj content r r r mediabox parent r resource extgstate ca ca font r r r r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r r r r procset pdf text subtype form type xobject length stream n szvewdd g endobj obj basefont fqewsonimbussanlregu encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj basefont firstchar fontdescriptor r lastchar subtype type font width r endobj obj basefont firstchar fontdescriptor r lastchar subtype type font width r endobj obj endobj obj ascent capheight charset aceilprstuabccommadeeightffivefourghhypheniklmnnineoonepperiodrssevensixslashtthreetwouvwxyzero descent flag fontbbox fontfile r fontname fqewsonimbussanlregu italicangle stemv type fontdescriptor xheight endobj obj endobj obj ascent capheight charset circlecopyrt descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj endobj obj ascent capheight charset circlecopyrt descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream ѐ j n
566,Lobsters,formalmethods,CSE-Formal methods,Shipping formally verified crypto code,https://franziskuskiefer.de/post/hacl-nss-integration/,shipping formally verified crypto code,hacl approach hacl f shipping formally verified code correctness performance hacl paper cc code quality pain point remain platform support handling change running verification n taskcluster docker image lesson learned blog post slide video,read article hacl approach go first read tl dr hacl cryptographic library written f allows translation c using kremlin guarantee memory safety secret independent computation functional correctness respect mathematical specification second blog post describe process integrating code hacl researchy crypto library n production library shipping million people running plethora platform short ship part hacl shipping formally verified code integrating code hacl n criterion code fulfil order get considered process integrating maintaining updating code criterion roughly looked like code correct performance must degraded new code code human readable modifiable ie must pas code review process code must run platform supported n must fallback code platform supported upstream change integrated easily n fix integrated upstream verification generation toolchain run n world started integrating hacl crypto primitive n time writing n contains code hacl hardware acceleration primitive pipeline integrated near future correctness code land n correct obviously might evident talking hacl generated c code correctness simple correctness checked relatively easily looking hacl specification given primitive code relatively easy review familiar f closely resembles mathematical specification primitive correctness c code guaranteed formal proof hacl addition run usual test vector course catch error extraction chain f c extracted c code reviewed correctness well performance performance big concern shown hacl paper cc performance primitive par better fastest c implementation nonetheless performance primitive compared hacl n make sure degrade performance every primitive looked far performance hacl least good performance n code code quality code quality generated code big concern readable generated code easily changed need arises first version looked great couple improvement kremlin code good go every new piece code integrated pas code review c code produced kremlin good enough land new primitive without improve upstream code first note however code pass review pas handwritten code generator perfect live rough edge important point code understandable n formatted clangformat checked ci change verified c code imported hacl formatting pain point remain outstanding issue hope get fixed kremlin would improve code quality significantly kremlin know const one nice helper one use c control happening pointer const necessary hacl proof would nice kremlin generates unnecessary cast big deal make code harder read also big number temporary variable necessary make code harder read platform support researchy library hacl tested big variety platform n hand run available platform well number legacy platform n ci cover window linux mac different configuration intel platform bsd using n covered expected ran couple issue platform bsd solaris quickly resolved especially code hardware dependent intel intrinsics need extra attention header used hacl abstract hardware instruction needed couple iteration worked supported platform handling change code imported hacl n expected change lot always reason code get updated process required fix issue like broken platform change upstream project landed snapshot n get updated new upstream version process run smoothly necessary team work together updating hacl code n pretty easy first new code generated new version hacl formatted copied n docker image running ci get updated diff recent update running verification n make sure whatever use n actually verifies generated code changed manually n ci verify hacl snapshot us every run n us taskcluster ci allows u use docker image reverifies used hacl revision every push checking code n simple diff lesson learned first lesson possible ship formally verified software code relatively simple selfcontained make easier show formal verification tool good enough used production second lesson learned probably valuable one talk work together engineering standpoint might frightening start looking formal verification tool corresponding language people working tool happy help mean people using tool need effort getting used tool language well worth people working formal method might learn little wanted know difference different platform compiler ship software might worth effort mean proof used production software used million people looking material highlevel blog post talk formal verification work n happening mozilla also talk rwc earlier year work slide video
567,Lobsters,formalmethods,CSE-Formal methods,Mechanized Formal Semantics and Verified Compilation for C++ Objects (2012),http://gallium.inria.fr/~tramanan/cxx/,mechanized formal semantics verified compilation c object,mechanized formal semantics verified compilation c object tahina ramananandro mechanized semantics c object construction destruction application resource management tahina ramananandro gallium gabriel do real parasol xavier leroy popl formal verification object layout c multiple inheritance tahina ramananandro gallium gabriel do real parasol xavier leroy popl inria projectteam,mechanized formal semantics verified compilation c object copyright tahina ramananandro successfully defended phd thesis tuesday january école normale supérieure c one widely used programming language practice including embedded critical software thus becomes interesting apply formal method program written c end necessary rely formal semantics c moreover formal semantics validated basis specification proof verified realistic compiler c gain confidence implementation technique mainstream c compiler thesis focus c object model formally specify c multiple inheritance cstyle embedded structure leading u study concrete representation object empty base optimization propose set sufficient layout condition show sound respect field access polymorphic operation specify realistic layout algorithm based common vendor abi itanium extension performing empty member optimization prove satisfy condition obtain verified realistic compiler subset c language lowlevel memory access extending semantics object construction destruction study intrications multiple inheritance lead u formalize resource management namely resource acquisition initialization subobject construction destruction order also study impact polymorphic operation virtual function dispatch construction destruction generalizing notion dynamic type obtain verified compiler extended semantics particular verifying implementation dynamic type change specification proof carried coq ph work given birth following publication mechanized semantics c object construction destruction application resource management tahina ramananandro gallium inria gabriel do real parasol texas university xavier leroy gallium inria popl see also formal verification object layout c multiple inheritance tahina ramananandro gallium inria gabriel do real parasol texas university xavier leroy gallium inria popl see also website kindly hosted inria gallium projectteam
568,Lobsters,formalmethods,CSE-Formal methods,Parallelizing Model Checking Algorithms Using Multi-core and Many-core Architectures,http://www.ntu.edu.sg/home/yangliu/publications/wzmthesis.pdf,parallelizing model checking algorithm using multicore manycore architecture,,obj endobj obj filterflatedecodeid index info rlength rsize stream b cu endstream endobj startxref eof obj pagemodeuseoutlinespages rtypecatalog endobj obj stream lsg u g c p ԗ ia fj endstream endobj obj endobj obj endobj obj procset pdf imagec xobject subtypeformtypexobject stream c endstream endobj obj stream f k f endstream endobj obj filterflatedecodeheight truelength stream n gϟ k g m dy
569,Lobsters,formalmethods,CSE-Formal methods,Verifying Complex Properties using Symbolic Shape Analysis (2007),https://cs.nyu.edu/wies/publ/verifying_complex_properties_using_symbolic_shape_analysis.pdf,verifying complex property using symbolic shape analysis,,obj stream
570,Lobsters,formalmethods,CSE-Formal methods,(Some of) my problems with correctness research,https://www.drmaciver.com/2018/04/some-of-my-problems-with-correctness-research/,problem correctness research,previous post looking grandiose introduction correctness research john regehr risk compensation drag world kicking screaming new terrifying age high quality software made following distinction incredible journey oracle problem software testing survey open source user counting tstl nezha,epistemic status think mostly right sure gap understanding field also intrinsically suspicious argument concludes author field research going change world way everyone else failed previous post looking grandiose introduction correctness research got mixed reception lot people normally mostly agree objected several people agreed reason disagree vehemently universal reaction plenty decent response left feeling really unclear actually meant attempt unpack one response thought nice piece writing right really think worked addressing problem correctness research john regehr quote full tried write software correctness paper introduction would make drmaciver happy market software generally speaking reward correct software much software acceptably correct built cheaply rapidly thus work software correctness highly unlikely improve quality software may plausibly make possible create acceptable software bit cheaply rapidly broadly agree sentiment though flipflop bit whether think tool actually make possible make correct software whether let spend time spent correctness thing technical term risk compensation increase safety measure people behave risky manner improve performance entirely compensates safety measure risk homeostasis general conclusion seems usually risk compensation rarely never risk homeostatis paragraph entirely exhausted current knowledge subject plan fix near future main reason actually make happy despite previous post really introduction object many way like introduction certainly bit grandiosity hypothesis documentation literally say goal developing drag world kicking screaming new terrifying age high quality software problem think correctness research currently good job matching mean end discussion paolo g giarrusso made following distinction difference fundamental applied research fluid boundary fake applied research applied fake problem paolo asked add similar concern one express use word fake thinking term fake applied problem craft research think good distinction maybe hesitate label particular problem fake actually point specific research field correctness say problem exist even could prefer public think lot people working problem software developer really care may still perfectly good fundamental research necessarily obvious made progress problem whether actually useful saying software terrible solution great look working something never actually solve problem bad software say solve problem mean academic obligation produce tool industry job academic software engineering explore space idea think good academic produce relatively solid easy use tool think john regehr pointed make much easier people use baseline get bajillion citation result even good incentive discovered hard way really large gap actually making impact industry instead mean something closer developing idea add engineering sale marketing rest go research idea actually producing tool sense original quickcheck academiasolves problem quviq industrysolves problem often find course going academiasolves industrysolves problem needed academiasolve could complete project ok personally love happens think lot research matter much engineering sale marketing added people care solution path academiasolves industrysolves research result would essentially yet another startup spends five year trying tell great idea ending incredible journey may fine spent enough time pure mathematician entirely happy people working problem never use anyone also turn useful surprisingly often reuse idea area useful disconnect promise want change world solution implementing tool would make almost every software developer yawn andor go huh tried explain make unhappy necessarily want specific research complaining exist like said fine foundational research even get feel need claim practical research certain social financial obligation field know gaming system something think worthwhile good make sad gap research think would crisis buggy software actually problem trying solve think gap mostly exist misaligned incentive admittedly always think problem think correctness research major false consensus problem researcher believe least act like believe software developer large roughly like build tool think useful hypothetical version themself happen working different problem mean academia specific problem problem almost every single software development team greater lesser extent reason user experience people shout user often meeting even get invited meeting real problem p company user experience people right think show academic software correctness research one really important way sure show many way one hit closest home oracle problem colloquially oracle problem issue tell whether piece software correct unless know supposed testing every test two part may quite intertwined still sense logically distinct test case concrete set input program run test oracle way determining whether program incorrect input typically one way ie oracle say sure program exactly right input prove various way might wrong split also defines large split academic research software correctness potential consumer software correctness tool academic problem testcase generation interesting object study know great deal problem finding testcase oracle typically boring would require great deal nonresearch legwork figure software actually supposed typically research work around problem one couple way use test oracle point thing obviously bad segfaults assertion failure deadlock etc use specification derive test oracle eg via metamorphic testing finding change input effect group imperial lot use multiple implementation specification differential testing run implementation input see get different result typically eg csmith used try guess oracle eg assume current behaviour correct use regression testing try build simple model behaviour treat deviation potential bug etc first useful especially writing unsafe language second third useful limited set circumstance applied yet convinced ever use case would served tool fourth category although believe exist want know solution recommend oracle problem software testing survey go fifth category solution problem also mentioned survey article one quickcheck descendant adopt make end user write test oracle many way valuable insight implicit success quickcheck order priority reversed software developer software developer really want write testcase generator long let write host language mind writing test oracle already used every time write test contrast seem mind writing test case also writing test think distinction test oracle feel unique writing test case feel like drudge work speculating wildly point view great solution want adequately test behaviour piece software point going find supposed let end user tell also think want make dent bad software problem solution possibly work overwhelming majority software specification speak many software developer willing able write test much software completely untested almost nothing correctness researcher fix problem author said software cared problem probably situation correctness tool actually make impact real world correctness get developer say software actually supposed host language much easier sell though derived language viable people shown willing write test language like gherkin great make user work solving hard problem go back working bit care problem well two big problem job academia build usable tool wethey usually user write oracle even tool user getting good empirical information like pulling teeth especially tool integrated development workflow necessarily notice specific event involving personal research solves first problem starting widely used open source user counting squee tool rather research project solve second problem uh get back unfortunately mean useful version problem work one actually hard academia anything mostly user user would hard get good set example empirical evaluation especially corporate user problem surmountable lot work picking open source project running tool seeing happens much problem know one could argue one sense testcase generation testcase generation test oracle way making program crash invalid behaviour reason take arbitrary testcase generator hook arbitrary propertybased test run based certainly writing tool industry seems little financial incentive whole different problem impressed software correctness industry software correctness academia still draw lot academic research sort focus eg learned lot reading compiler testing literature despite compiler testing situation completely without hope decent amount though le like quickcheck derived literature ticking along eg alex groce tstl another interesting corner space quickcheck derived work update alex point comment sense quickcheck derived work think sufficiently different quickcheck usage still count thing le far example know hope others think creates certain significant gap example little research making easy write good composable testcase generator outside context quickcheck much context super happy answer seen research seen testcase generation work assumption le one thing generating actually true testcase generator testcase generator nezha example fact differential testing usefully inform test case generation mutational fuzzing case fact mostly testing trivial property way distorting sort test case generate fix god know number incentive change fix appalling lack lever fulcrum move think sort thing hypothesis starting research program based existing widely used tool probably good one open source form lot bridge providing engineering academia job provide job provide either sucker like work free go u also providing ready source visible user least lower bar evaluation even still easy think even close sufficient fixing pas bring problem solution sure would nice could least acknowledge problem though
571,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Verification of Interactive Systems with Plasticity for Nuclear Plants,https://tel.archives-ouvertes.fr/tel-01253619/document,formal specification verification interactive system plasticity nuclear plant,,obj type catalog version page r openaction r fit outline r metadata r endobj obj creator title subject author producer keywords creationdate moddate endobj obj type page kid r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj count first r last r type outline endobj obj length type metadata subtype xml stream primoz peterlin nimbussanlregu endstream endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r group r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r r r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r r r r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r annots r r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox rotate parent r resource r content r cropbox endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream b c di c l endstream endobj obj procset pdf text extgstate r font r endobj obj length filter flatedecode stream p endstream endobj obj procset pdf text extgstate r font r endobj obj length filter flatedecode stream u p endstream endobj obj procset pdf text extgstate r font r endobj obj length filter flatedecode stream p endstream endobj obj procset pdf text extgstate r font r endobj obj length filter flatedecode stream
572,Lobsters,formalmethods,CSE-Formal methods,Type-and-Example-Directed Program Synthesis (2015),http://www.cis.upenn.edu/~stevez/papers/OZ15.pdf,typeandexampledirected program synthesis,,obj length filter flatedecode stream xڽ ϩ u p v jw ܢnz p n pdl c n v v g d竸 j e c u c endstream endobj obj type xobject subtype form formtype ptexfilename aecbadgepldipdf ptexpagenumber ptexinfodict r bbox group r resource extgstate ca ca font r length filter flatedecode stream ky k b ʸ x
573,Lobsters,formalmethods,CSE-Formal methods,Formal Specification and Verification of Computer Algebra Software (2014),http://www.risc.jku.at/publications/download/risc_4981/main.pdf,formal specification verification computer algebra software,,obj goto chapter endobj obj abstract endobj obj goto chapter endobj obj zusammenfassung endobj obj goto endobj obj introduction endobj obj goto endobj obj state art endobj obj goto endobj obj computer algebra type system endobj obj goto endobj obj formal semantics endobj obj goto endobj obj formal specification verification endobj obj goto endobj obj minimaple endobj obj goto endobj obj background study endobj obj goto endobj obj challenge endobj obj goto endobj obj overview syntax endobj obj goto endobj obj running example endobj obj goto endobj obj formal type system endobj obj goto endobj obj background endobj obj goto endobj obj type system minimaple endobj obj goto endobj obj type subtyping endobj obj goto endobj obj type environment endobj obj goto endobj obj typing judgment endobj obj goto endobj obj typing rule endobj obj goto endobj obj auxiliary function predicate endobj obj goto endobj obj type checker minimaple endobj obj goto endobj obj formal specification language endobj obj goto endobj obj formula language endobj obj goto endobj obj specification element endobj obj goto endobj obj mathematical theory endobj obj goto endobj obj procedure specification endobj obj goto endobj obj loop specification endobj obj goto endobj obj assertion endobj obj goto endobj obj example endobj obj goto endobj obj formal semantics endobj obj goto endobj obj introduction endobj obj goto endobj obj background endobj obj goto endobj obj semantic value endobj obj goto endobj obj module value endobj obj goto endobj obj procedure value endobj obj goto endobj obj function value endobj obj goto endobj obj list value endobj obj goto endobj obj sequence value endobj obj goto endobj obj environment value endobj obj goto endobj obj state value endobj obj goto endobj obj lifted value endobj obj goto endobj obj semantics program endobj obj goto endobj obj command endobj obj goto endobj obj expression endobj obj goto endobj obj semantics specification expression endobj obj goto endobj obj semantics specification annotation endobj obj goto endobj obj specification declaration endobj obj goto endobj obj procedure specification endobj obj goto endobj obj loop specification endobj obj goto endobj obj assertion endobj obj goto endobj obj formal verification endobj obj goto endobj obj endobj obj goto endobj obj minimaple translation endobj obj goto endobj obj command endobj obj goto endobj obj expression endobj obj goto endobj obj specification expression endobj obj goto endobj obj example endobj obj goto endobj obj translation endobj obj goto endobj obj verification endobj obj goto endobj obj soundness translation endobj obj goto endobj obj soundness command sequence endobj obj goto endobj obj soundness whileloop endobj obj goto endobj obj application endobj obj goto endobj obj package differencedifferential endobj obj goto endobj obj type checking package endobj obj goto endobj obj specifying package endobj obj goto endobj obj concrete data typebased specification endobj obj goto endobj obj abstract data typebased specification endobj obj goto endobj obj verifying package endobj obj goto endobj obj verification lowlevel procedure endobj obj goto endobj obj verification highlevel procedure endobj obj goto endobj obj verification highlevel procedure sp endobj obj goto endobj obj conclusion future work endobj obj goto section endobj obj appendix endobj obj goto endobj obj syntax minimaple endobj obj goto endobj obj syntax specification language minimaple endobj obj goto endobj obj type system minimaple endobj obj goto endobj obj logical rule endobj obj goto endobj obj auxiliary function endobj obj goto endobj obj auxiliary predicate endobj obj goto endobj obj formal semantics minimaple endobj obj goto endobj obj semantic algebra endobj obj goto endobj obj signature valuation function endobj obj goto endobj obj auxiliary function predicate endobj obj goto endobj obj semantics endobj obj goto endobj obj formal semantics specification language minimaple endobj obj goto endobj obj semantic algebra endobj obj goto endobj obj signature valuation function formula language endobj obj goto endobj obj auxiliary function predicate endobj obj goto endobj obj semantics formula language endobj obj goto endobj obj signature valuation function specification annotation endobj obj goto endobj obj semantics specification annotation endobj obj goto endobj obj translation minimaple endobj obj goto endobj obj semantic algebra endobj obj goto endobj obj signature translation function endobj obj goto endobj obj auxiliary function predicate endobj obj goto endobj obj definition translation function endobj obj goto endobj obj proof soundness translation endobj obj goto endobj obj semantic algebra endobj obj goto endobj obj auxiliary function predicate endobj obj goto endobj obj soundness statement endobj obj goto endobj obj proof endobj obj goto endobj obj lemma endobj obj goto endobj obj definition endobj obj goto endobj obj semantics endobj obj goto endobj obj derivation endobj obj goto chapter endobj obj bibliography endobj obj goto r fit endobj obj length filter flatedecode stream bc g endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename coversheetcoversheetpdf ptexpagenumber ptexinfodict r bbox resource font r r r r r xobject r r procset pdf text length filter flatedecode stream j uf mr zw endstream endobj obj producer creator tex creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type font subtype firstchar lastchar width r fontdescriptor r basefont r encoding r endobj obj type font subtype firstchar lastchar width r fontdescriptor r basefont r encoding r endobj obj type font subtype firstchar lastchar width r fontdescriptor r basefont r encoding r endobj obj type font subtype firstchar lastchar width r fontdescriptor r basefont r encoding r endobj obj type font subtype firstchar lastchar width r fontdescriptor r basefont r encoding r endobj obj type xobject subtype form formtype ptexfilename wapsmallpdf ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r length filter flatedecode stream aŵ
574,Lobsters,formalmethods,CSE-Formal methods,"Towards a Verified, Complex, Protocol Stack in a Production Kernel: Method and Demo (2016)",https://www.cs.dartmouth.edu/~trdata/reports/TR2016-803.pdf,towards verified complex protocol stack production kernel method demo,,obj length filter flatedecode stream r endstream endobj obj length filter flatedecode stream 㭲jxu pd j p rw endstream endobj obj length filter flatedecode stream b endstream endobj obj length filter flatedecode stream v gn ˀ g mu endstream endobj obj length filter flatedecode stream օy endstream endobj obj length filter flatedecode stream j h endstream endobj obj length filter flatedecode stream l dl e endstream endobj obj length filter flatedecode stream xu l cm p ӥ p q kʁ j p endstream endobj obj length filter flatedecode stream ά q l z v r c k
575,Lobsters,formalmethods,CSE-Formal methods,Linux kernel memory-model (documentation & tooling),https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1c27b644c0fdbc61e113b8faee14baeb8df32486,linux kernel memorymodel documentation tooling,toolsmemorymodeldocumentationrecipestxt toolsmemorymodelmaintainers toolsmemorymodelreadme toolsmemorymodellinuxkernelbell toolsmemorymodellinuxkernelcat toolsmemorymodellinuxkernelcfg toolsmemorymodellinuxkerneldef toolsmemorymodellitmustestsreadme toolsmemorymodellockcat,prior operation subsequent operation c self r w rwm self r w dr dw rmw sv store eg writeonce yload eg readonce yunsuccessful rmw operation ysmpreadbarrierdepends dereference ysuccessful acquire r ysuccessful release c w ysmprmb r rsmpwmb w wsmpmb synchronizercu cp ysuccessful full nonvoid rmw cp ysmpmbbeforeatomic cp ysmpmbafteratomic cp ykey c ordering cumulative p ordering propagates r read example readonce read portion rmw w write example writeonce write portion rmw provides ordering provides ordering given intervening rmw atomic operation dr dependent read address dependency dw dependent write address data control dependency rmw atomic readmodifywrite operation sv samevariable access explanation linuxkernel memory model author alan stern stern rowlandharvardedu created october content introduction background simple example selection memory model ordering cycle event program order relation po poloc warning dependency relation data addr ctrl readsfrom relation rf rfi rfe cache coherence coherence order relation co coi coe fromreads relation fr fri fre operational model propagation order relation cumulfence derivation lkmm operational model sequential consistency per variable atomic update rmw preserved program order relation ppo alpha happensbefore relation hb propagatesbefore relation pb rcu relation link gplink rscslink rcupath odds endsintroduction linuxkernel memory model lkmm rather complex obscurethis particularly evident read linuxkernelbelland linuxkernelcat file make formal version thememory model extremely terse meaning far fromclearthis document describes idea underlying lkmm meantfor people want understand memory model designedit go detail code bell catfiles rather explains english code expressessymbolicallysections background ordering cycle aimedtoward beginner explain memory model basicnotions shared model people already familiar theseconcepts skim skip section event fromreads relation describe fundamental relation used inmany memory model starting section operational model working lkmm coveredwarning code example document written theproper format litmus test nt include header line theinitializations enclosed brace global variable arenot passed pointer nt exists clause theend converting right format left exercise forthe readerbackground memory consistency model memory model short issomething predicts given piece computer code running aparticular kind system value may obtained codesload instruction lkmm make prediction code runningas part linux kernelin practice people tend use memory model way aroundthat given piece code collection value specifiedfor load model predict whether possible thecode run way load indeed obtain thespecified value course another way expressingthe ideafor code running uniprocessor system prediction easy load instruction must obtain value written recentstore instruction accessing location ignore complicatingfactors dma mixedsize access multiprocessorsystems multiple cpu making concurrent access sharedmemory location thing nt simpledifferent architecture differing memory model linuxkernel support variety architecture lkmm fairlypermissive sense behavior allowed one thesearchitectures also allowed lkmma simple example simple example illustrate basic concept considersome code running part device driver input device thedriver might contain interrupt handler collect data thedevice store buffer set flag indicate bufferis full running concurrently different cpu might part ofthe driver code executed process midst read system call code test flag see whether buffer isready copy data back userspace bufferand flag memory location shared two cpuswe abstract important piece driver code follows reason using writeonce readonce instead simpleassignment statement discussed later int buf flag writeonce buf writeonce flag int int readonce flag readonce buf function represents interrupt handler running onecpu represents read routine running another thevalue stored buf represents input data collected devicethus store data buf set flag meanwhile flag private variable set read thedata buf second private variable copying touserspace presumably flag set driver wait awhile try pattern memory access one cpu store value twoshared memory location another cpu load location inthe opposite order widely known message passing mppattern typical memory access pattern kernelplease note example code simplified abstraction realbuffers usually larger single integer real device driversusually use sleep wakeup mechanism rather polling iocompletion real code generally nt bother copy value intoprivate variable using beside point idea simply illustrate overall pattern memoryaccesses cpusa memory model predict value might obtain loadsfrom flag buf equivalently value might end upwith code finished runningsome prediction trivial instance sane memory model wouldpredict neither value evergets stored flag bufsome nontrivial prediction nonetheless quite simple forinstance might run entirely begin case end might run entirely case interesting prediction concern might happen tworoutines run concurrently one possibility run buf store flag case designed read bufunconditionally would instead however interesting possibility occur would mean driver contains bug becauseincorrect data would get sent user instead ithappens lkmm predict outcome occur exampledriver code shown indeed buggya selection memory model first widely cited memory model simplest understand sequential consistency according model system behave asif cpu executed instruction order unspecifiedtiming word instruction various cpu getinterleaved nondeterministic way always according singleglobal order agrees order instruction theprogram source cpu model say value obtainedby load simply value written recently executedstore memory location cpufor mp example code shown sequential consistency predictsthat undesired result occur reasoninggoes like since must store flag load load obtain value earlier store load flag loading buf since cpu execute instruction order must load buf store otherwise would since load obtains value recent store address store buf storing flag since executes instruction order since instruction case store flag execute specified outcome impossiblehowever real computer hardware almost never follows sequentialconsistency memory model would rule many valuableperformance optimization arm powerpc architecture forinstance mp example code really sometimes yield sparc follow yet different memory model tso total storeordering model predicts undesired outcome mppattern occur respect differs sequentialconsistency one example store buffer sb pattern whicheach cpu store shared location load theother cpu location int x int writeonce x readonce int writeonce readonce x sequential consistency predicts outcome isimpossible exercise figure reasoning tso allowsthis outcome occur fact sometimes occur andsparc systemsthe lkmm inspired memory model followed powerpc arm alpha architecture however different indetail themordering cycle memory model ordering often temporal ordering ie order certain event occur nt tobe consider example order instruction programssource code saw sequential consistency make animportant assumption cpu execute instruction orderas instruction occur code many otherinstances ordering playing central role memory modelsthe counterpart ordering cycle ordering rule cycle possible x ordered ordered z andz ordered x would mean x ordered beforeitself analysis mp example sequential consistencyinvolved impossible cycle w store flag executes x load flag executes load buf executes z store buf executes w store flagin short memory model requires certain access ordered certain outcome load piece code happen onlyif access would form cycle memory model predictsthat outcome occurthe lkmm defined largely term cycle seeevents lkmm work directly c statement make upkernel source code instead considers effect thosestatements abstract form namely event modelincludes three type event read event correspond load shared memory call readonce smploadacquire rcudereference write event correspond store shared memory call writeonce smpstorerelease atomicset fence event correspond memory barrier also known fence call smprmb rcureadlock category exclusive read write event also bea fence happens function like smploadacquire orspinlock however single event read writeatomic readmodifywrite access atomicinc xchg correspond pair event read followed write thewrite event omitted execution nt occur asa cmpxchg comparison fails part code involve interaction withshared memory give rise event thus arithmetic andlogical computation controlflow instruction access toprivate memory cpu register central interest thememory model affect model prediction indirectlyfor example arithmetic computation might determine value thatgets stored shared memory location case arrayindex address value get stored memory modelis concerned store value address computation leading itevents lkmm linked various relation willdescribe following section memory model requires certainof relation ordering requires tohave cyclesthe program order relation po poloc important relation event program order po youcan think order statement occur sourcecode branch taken account loop beenunrolled better description might order whichinstructions presented cpu execution unit thus saythat x pobefore written x po formula x occursbefore instruction streamthis inherently singlecpu relation two instruction executingon different cpu never linked po also definitionan ordering cyclespoloc subrelation po link two memory access thefirst come second program order access thesame memory location loc suffix although may seem straightforward one subtle aspect toprogram order need explain lkmm inspired lowlevelarchitectural memory model describe behavior machinecode retains outlook considerable extent theread write fence event used model close spirit toindividual machine instruction nevertheless lkmm describeskernel code written c mapping c machine code canbe extremely complexoptimizing compiler great freedom way translatesource code object code allowed apply transformationsthat add memory access eliminate access combine split theminto piece move around faced possibility lkmm basically give insists code analyzesmust contain ordinary access shared memory access mustbe performed using readonce writeonce one otheratomic synchronization primitive primitive prevent alarge number compiler optimization particular isguaranteed compiler remove access thegenerated code unless prove access never beexecuted change order occur thecode within limit imposed c standard notintroduce extraneous accessesthis explains mp sb example used readonce andwriteonce rather ordinary memory access thanks thisusage certain mp example write event tobuf really pobefore write event flag similarly theother shared memory access examplesprivate variable subject restriction since arenot shared cpu accessed normally withoutreadonce writeonce ill effect infact need even stored normal memory inprinciple private variable could stored cpu register hencethe convention variable name starting theletter r warning protection provided readonce writeonce others arenot perfect circumstance possible thecompiler undermine memory model example supposeboth branch statement store value samelocation readonce x writeonce something else writeonce something else code lkmm predicts load x always beexecuted either store however compiler couldlift store conditional transforming code intosomething resembling readonce x writeonce something else something else given version code lkmm would predict loadfrom x could executed store thus memorymodel original prediction could invalidated compileranother issue arises fact c argument manyoperators function call evaluated order forexample f g object code might call f either g thememory model assume fixed program order relationbetween fact function inlined thecompiler might even interleave object code dependency relation data addr ctrl say two event linked dependency relation theexecution second event depends way value obtainedfrom memory first first event must read thevalue obtains must somehow affect second event doesthere three kind dependency data address addr andcontrol ctrl read write event linked data dependency valueobtained read affect value stored write verysimple example int x readonce x writeonce value stored writeonce obviously depends valueloaded readonce dependency wind througharbitrarily complicated computation write depend thevalues multiple readsa read event another memory access event linked addressdependency value obtained read affect locationaccessed event second event either read os write another simple example int int readonce readonce location accessed second readonce depends theindex value loaded first pointer indirection also give riseto address dependency since address location accessedthrough pointer depend value read earlier thatpointerfinally read event another memory access event linked acontrol dependency value obtained read affect whetherthe second event executed simple example int x readonce x writeonce execution writeonce controlled conditional expressionwhich depends value obtained readonce hence isa control dependency load storeit pretty obvious event depend read thatcome earlier program order symbolically r data x r addr x r ctrl x r read event must alsohave r po x would nt make sense computation dependsomehow value nt get loaded shared memory untillater code readsfrom relation rf rfi rfe readsfrom relation rf link write event read event whenthe value loaded read value stored thewrite colloquial term load read store wewrite w rf r indicate load r read store w wefurther distinguish case load store occur onthe cpu internal readsfrom rfi occur ondifferent cpu external readsfrom rfe purpose memory location initial value treated asthough written imaginary initial store thatexecutes separate cpu program runsusage rf relation implicitly assumes load alwaysread single store nt apply properly presenceof loadtearing load obtains bit one storeand another store fortunately use readonce writeonce prevent loadtearing possible int x writeonce x int readonce x end partly x initial value partlyfrom value stored hand loadtearing unavoidable mixedsizeaccesses used consider example union w h x writeonce xh writeonce xh int readonce xw littleendian end must readfrom store possible handle mixedsize andunaligned access memory model lkmm currently notattempt requires access properly aligned andof location actual sizecache coherence coherence order relation co coi coe cache coherence general principle requiring amultiprocessor system cpu must share consistent view thememory content specifically requires location inshared memory store location must form single globalordering cpu agree coherence order thisordering must consistent program order access tothat locationto put another way variable x coherence order co ofthe store x simply order store overwrite oneanother imaginary store establishes x initial valuecomes first coherence order store directlyoverwrites initial value come second store overwritesthat value come third onyou think coherence order order thestores reach x location memory prefer morehardwarecentric view order store get written tox cache line write w co w w come w thecoherence order value stored w get overwritten directly indirectly value stored wcoherence order required consistent program order thisrequirement take form four coherency rule writewrite coherence w poloc w ie w come w program order access location w w two store w co w writeread coherence w poloc r w store r load r must read w store come w coherence order readwrite coherence r poloc w r load w store store r read must come w coherence order readread coherence r poloc r r r two load either read store else store read r come store read r coherence orderthis sometimes referred sequential consistency per variable mean access single memory location obeythe rule sequential consistency memory model according towikipedia sequential consistency per variable cache coherencemean thing except cache coherence includes extrarequirement every store eventually becomes visible every cpu reasonable memory model include cache coherence indeed ourexpectation cache coherence deeply ingrained violationsof requirement look like hardware bug programmingerrors int x writeonce x writeonce x final value stored x code ran wouldthink computer broken would violation thewritewrite coherence rule since store come later inprogram order must also come later x coherence order andthus must overwrite store int x int readonce x writeonce x end would violate readwrite coherencerule readonce load come writeonce store inprogram order must read store rather onecoming earlier coherence order case x initialvalue int x writeonce x int readonce x readonce x reading store reading theimaginary store establishes x initial value end thiswould violate readread coherence rule load come beforethe load program order must read store thatcomes later coherence order minor curiosity code used normal load instead ofreadonce itanium sometimes could end result parallel execution operationsencoded itanium verylonginstructionword format yetanother motivation using readonce accessing shared memorylocations like po relation co inherently ordering notpossible store directly indirectly overwrite andjust like rf relation distinguish store thatoccur cpu internal coherence order coi storesthat occur different cpu external coherence order coe hand store different memory location neverrelated co instruction different cpu neverrelated po coherence order strictly perlocation youprefer location independent coherence orderthe fromreads relation fr fri fre fromreads relation fr little difficult people togrok describes situation load read value getsoverwritten store word r fr w thevalue r read overwritten directly indirectly w orequivalently r read store come earlier w inthe coherence orderfor example int x int readonce x writeonce x value loaded x assuming cache coherence itgets overwritten value thus fr link thereadonce writeonce code contained laterstores x would also fr link readonce tothemas rf rfi rfe subdivide fr relation fri whenthe load store cpu fre ondifferent cpu note fr relation determined entirely rf corelations independent given read event r writeevent w location r fr w ifthe write r read cobefore w symbol r fr w exists w w rf r w co w operational model lkmm based various operational memory model meaning thatthe model arise abstract view computer systemoperates main idea incorporated lkmmthe system whole divided cpu memory subsystemthe cpu responsible executing instruction necessarilyin program order communicate memory subsystemfor part executing instruction requires cpu performonly internal operation however load store fence involvemorewhen cpu c executes store instruction tell memory subsystemto store certain value certain location memory subsystempropagates store cpu well ram aspecial case say store propagates cpu thetime executed memory subsystem also determines thestore fall location coherence order particular mustarrange store colater ie overwrite anyother store location already propagated cpu cwhen cpu executes load instruction r first check seewhether asyet unexecuted store instruction thesame location come r program order ituses value polatest store value obtained r say store value forwarded r otherwise thecpu asks memory subsystem value load say ri satisfied memory memory subsystem hand back valueof colatest store location question alreadypropagated cpu fact picture need little complicated thiscpus local cache propagating store cpu really meanspropagating cpu local cache local cache take sometime process store receives store ca nt usedto satisfy one cpu load processed onmost architecture local cache process store infirstinfirstout order consequently processing delaydoes nt matter memory model alpha local cacheshave partitioned design result nonfifo behavior willdiscuss detail later note load instruction may executed speculatively may berestarted certain circumstance memory model ignores thesepremature execution simply say load executes thefinal time forwarded satisfiedexecuting fence memory barrier instruction nt require acpu anything special informing memory subsystemabout fence however fence constrain way cpu thememory subsystem handle instruction two respectsfirst fence force cpu execute various instruction inprogram order exactly instruction ordered depends thetype fence strong fence including smpmb synchronizercu force cpu execute poearlier instruction polater instruction smprmb force cpu execute poearlier load polater load smpwmb force cpu execute poearlier store polater store acquire fence smploadacquire force cpu execute load associated fence eg load part smploadacquire polater instruction release fence smpstorerelease force cpu execute poearlier instruction store associated fence eg store part smpstorerelease second type fence affect way memory subsystempropagates store fence instruction executed cpu c cpu c smbwmb force poearlier store c propagate c polater store cpu c store propagates c release fence executed including poearlier store executed c forced propagate c store associated release fence store propagates c strong fence executed including poearlier store c forced propagate cpu instruction poafter strong fence executed cthe propagation ordering enforced release fence strong fencesaffects store cpu propagate cpu c thefence executed well store executed c thefence describe property saying release fence andstrong fence acumulative contrast smpwmb fence notacumulative affect propagation store areexecuted c fence ie precede fence inprogram order smpreadbarrierdepends rcureadlock rcureadunlock andsynchronizercu fence property discus laterpropagation order relation cumulfence fence affect propagation order ie strong release andsmpwmb fence collectively referred cumulfences eventhough smpwmb nt acumulative cumulfence relation isdefined link memory access event e f whenever e f store cpu smpwmb fence event occurs program order f release fence x come f program order either x e else e rf x strong fence event occurs x f program order either x e else e rf xthe operational model requires whenever w w storesand w cumulfence w w must propagate given cpubefore w however different cpu c c notrequire w propagate c w propagates cderivation lkmm operational model lkmm derived restriction imposed designoutlined restriction involve necessity ofmaintaining cache coherence fact cpu ca nt operate avalue know value among thingsthe formal version lkmm defined five requirement oraxioms sequential consistency per variable requires system obey four coherency rule atomicity requires atomic readmodifywrite operation really atomic store sneak middle update happensbefore requires certain instruction executed specific order propagation requires certain store propagate cpu ram specific order rcu requires rcu readside critical section grace period obey rule rcu particular graceperiod guaranteethe first second quite common found manymemory model happensbefore propagation axiom analog memory model well rcu axiom specific lkmmeach axiom discussed belowsequential consistency per variable according principle cache coherence store fixedshared location memory form global ordering imagineinserting load location ordering placingeach load store read followingstore leaf relative position load read thesame store unspecified let say inserted program order first cpu cpu etcyou check four coherency rule imply rf co fr poloc relation agree global ordering word whenever x rf x co x fr x poloc thex event come event global ordering lkmms coherence axiom express requiring union theserelations cycle mean must possibleto find event xn link either rf co fr poloc tohold access fixed memory location ordered ascache coherence demandsalthough obvious shown converse alsotrue lkmm axiom implies four coherency rule areobeyedatomic update rmw mean say readmodifywrite rmw update suchas atomicinc x atomic mean memory location x inthis case get altered read write eventsmaking atomic operation particular two cpu performatomicinc x concurrently must guaranteed finalvalue x initial value plus two never havethe following sequence event cpu load x obtaining cpu load x obtaining cpu store x cpu store x final value x wrong rather example cpu increment effectively get lost itoccurs cpu load store put another way theproblem position cpu store x coherence orderis store cpu read store cpu analysis applies atomic update operation therefore enforce atomicity lkmm requires atomic update follow thisrule whenever r w read write event composing anatomic readmodifywrite w write event r read must store coming w w coherenceorder equivalently r rmw w implies x r fr x x co w rmw relation link read write event making eachatomic update lkmm atomic axiom saysthe preserved program order relation ppo many situation cpu obligated execute twoinstructions program order amalgamate ppo preserved program order relation link poearlierinstruction polater instruction thus subrelation ofpothe operational model already includes description one suchsituation fence source ppo link suppose x arememory access x po cpu must execute x ifany following hold strong smpmb synchronizercu fence occurs x x store smpwmb fence occurs x load smprmb fence occurs x also acquire fence smploadacquire also release fence smpstorerelease another possibility mentioned earlier discussed nextsection x load x addr ie address dependency x smpreadbarrierdepends fence occurs themdependencies also cause instruction executed programorder uncontroversial second instruction astore either data address control dependency load r toa store w force cpu execute r w verysimply cpu tell memory subsystem wsstore know value stored case adata dependency location stored caseof address dependency whether store actually takeplace case control dependency dependency load instruction problematic begin thing data dependency load next cpuhas reason respect control dependency load itcan always satisfy second load speculatively first andthen ignore result turn second load shouldntbe executed lastly real difficulty begin whenwe consider address dependency loadsto fair linuxsupported architecture executeloads program order address dependency themafter cpu ask memory subsystem load value froma particular location know location however splitcache design used alpha cause behave waythat look load executed order see nextsection detail reason lkmm includeaddress dependency read event ppo relation unless ansmpreadbarrierdepends fence presenton hand dependency indirectly affect ordering oftwo load happens dependency load astore second polater load read store r dep w rfi r dep link either address data dependency inthis situation know possible cpu execute r beforew forward value w store r execute r r forward value beforeit know value w r access samelocation however merely control dependency rand w cpu speculatively forward w r executingr speculation turn wrong cpu merely torestart abandon r theory cpu might forward store load run acrossan address dependency like readonce ptr writeonce readonce could tell store second load access thesame location even know location address ishowever none architecture supported linux kernel dothis two memory access location must always executed inprogram order second access store thus r poloc w poloc link say r come w program order theyaccess location cpu obliged execute w rif executed w first memory subsystem would respond rsread request value stored w even later store inviolation readwrite coherence rule similarly w poloc wand cpu executed w w memory subsystem would putw w coherence order would effectively cause w tooverwrite w violation writewrite coherence rule interestingly early memory model obsolete proposedallowing outoforder writes like occur model avoidedviolating writewrite coherence rule requiring cpu tosend w write memory subsystem one last example preserved program order lkmm whena loadacquire read earlier storerelease example smpstorerelease x smploadacquire x smploadacquire end obtaining value wasstored smpstorerelease lkmm say load must beexecuted store store forwarded loadthis requirement arise operational model ityields correct prediction architecture supported linuxkernel although differing reasonson architecture including true thestore forwarded load others including powerpcand smpstorerelease generates object code start witha fence smploadacquire generates object code end afence upshot even though store may forwarded tothe load still true instruction preceding storewill executed load following instruction andthe store executed instruction following loadand alpha mentioned alpha architecture unique doesnot appear respect address dependency load mean thatcode following int x int int ptr writeonce x smpwmb writeonce ptr x int int readonce ptr readonce malfunction alpha system quite possible xand end spite address dependencyat first glance nt seem make sense know thesmpwmb force store x propagate storeto ptr since ca nt execute second loaduntil know location load ie executing itsfirst load value x must propagated thesecond load executed nt end equal answer lie alpha split local cache although twostores reach local cache proper order happenthat first store processed busy part cache whilethe second store processed idle part result x may become available cpu read theptr x value leading undesirable result thefinal effect even though two load really executed inprogram order appears arentthis could happened local cache processed theincoming store fifo order constrast architecturesmaintain least appearance fifo orderin practice difficulty solved inserting ansmpreadbarrierdepends fence two load effectof fence cause cpu execute polaterinstructions local cache finished processing allthe store already received thus code changed int int readonce ptr smpreadbarrierdepends readonce would never get x time executedits second load x store would already fully processed bythe local cache available satisfying read requestthe lkmm requires smprmb acquire fence strong fencesshare property smpreadbarrierdepends allowthe cpu execute polater instruction polater load thecase smprmb outstanding store processed bythe local cache case strong fence cpu first towait poearlier store propagate every cpuin system wait local cache process allthe store received time store receivedwhen strong fence beganand course none matter architecture thanalphathe happensbefore relation hb happensbefore relation hb link memory access toexecute certain order hb includes ppo relation twoothers one rfew rfe r implies w r different cpu also meansthat w store must propagated r cpu r executed otherwise r could read value stored w therefore wmust executed r w hb rthe equivalent fact need hold w rfi r ie w r onthe cpu already seen operational model allowsw value forwarded r case meaning r may wellexecute w doesit important understand neither coe fre included inhb despite similarity rfe example suppose havew coe w mean w w store location execute different cpu w come w coherenceorder ie w overwrites w nevertheless possible w toexecute w decision store overwritesthe made later memory subsystem store arenearly simultaneous either one come top similarly r fre w mean w overwrites value r read itdoes nt mean w execute r necessary isfor memory subsystem propagate w r cpu rhas executed possible w executes shortly rthe third relation included hb like ppo linksevents cpu however difficult toexplain arises indirectly requirement ofcache coherence relation called prop link two eventson cpu c situation store cpu come afterthe first event coherence order propagates c thesecond event executesthis best explained example simplest case lookslike int x int writeonce x readonce x writeonce x end access must executed programorder deduce operational model loadhad executed store value store would havebeen forwarded load would ended equal case prop link write event readevent store came store x coherenceorder store propagated load executedan equally simple case involves two load location thatread different store int x int readonce x readonce x writeonce x end access must executedin program order second load executed firstthen x store must propagated firstload executed would rather thiscase prop link first read event second store overwrote value read first load store propagated second load executedless trivial example prop involve fence unlike simpleexamples require instruction executedout program order next one look familiar int buf flag writeonce buf smpwmb writeonce flag int int readonce flag readonce buf mp pattern smpwmb fence twostores end prop linkfrom second load first backwards reason issimilar previous example value load buf getsoverwritten store buf fence guarantee storeto buf propagate store flag thestore flag propagates read flagthe prop link say order obtain result must execute second load first indeed loadfrom flag executed first buf store would alreadyhave propagated time load buf executed end reasoning hold even foralpha although detail complicated gointo put smprmb fence load fencewould force two load executed program order itwould generate cycle hb relation fence would create ppolink hence hb link first load second theprop relation would give hb link second load firstsince instruction ca nt execute forced toconclude smprmb fence added impossible bethe formal definition prop relation involves coe fre link followed arbitrary number cumulfence link ending anrfe link concoct exotic example containing thanone fence although quickly lead diminishing return termsof complexity instance example containing coe linkfollowed two fence rfe link utilizing fact thatrelease fence acumulative int x z int writeonce x readonce z writeonce x smpwmb writeonce int readonce smpstorerelease z x code run proplink store load store getsoverwritten store since x end coe link thesmpwmb ensures store x propagates thestore first fence store propagates load store execute smpstorerelease guarantee store x propagate thestore z second fence load executes thestore z propagated rfe link summary fact hb relation link memory access eventsin order execute mean must cycle thisrequirement content lkmm happensbefore axiomthe lkmm defines yet another relation connected time ofinstruction execution included hb relies theparticular property strong fence cover nextsectionthe propagatesbefore relation pb propagatesbefore pb relation capitalizes specialfeatures strong fence link two event e f whenever somestore coherencelater e propagates every cpu rambefore f executes formal definition requires e linked tof via coe fre link arbitrary number cumulfences anoptional rfe link strong fence arbitrary number hblinks let see definition work outconsider first case e store implying sequenceof link begin coe event w x z suchthat e coe w cumulfence x rfe strongfence z hb f suffix indicates arbitrary number link thespecified type suffix indicates link optional maybe equal x cumulfence link know w willpropagate cpu x hence executes hencebefore strong fence executes fence strong weknow w propagate every cpu ram z executesand hb link know z execute fthus w come later e coherence order willpropagate every cpu ram f executesthe case e load exactly except firstlink sequence fre instead coethe existence pb link e f implies e must executebefore f see suppose f executed first w wouldhave propagated e cpu e executed e store thememory subsystem would forced make e come w thecoherence order contradicting fact e coe w e aload memory subsystem would forced satisfy e readrequest value stored w even later store contradicting fact e fre wa good example illustrating pb work sb pattern strongfences int x int writeonce x smpmb readonce int writeonce smpmb readonce x end pb link load fre link load store overwrites thevalue read strong fence store loadin example sequence cumulfence hb link emptynote pb link included hb instance prop start end cpusimilarly end pb link loadto mean would acycle pb possible since instruction executebefore thus adding smpmb fence sb patternprevents outcomein summary fact pb relation link event orderthey execute mean cycle requirement isthe content lkmm propagation axiomrcu relation link gplink rscslink rcupath rcu readcopyupdate powerful synchronization mechanism itrests two concept grace period readside critical sectionsa grace period span time occupied call tosynchronizercu readside critical section criticalsection short region code delimited rcureadlock start rcureadunlock end critical section canbe nested although wo nt make use factas far memory model concerned rcu main feature itsgraceperiod guarantee state critical section neverspan full grace period detail guarantee say critical section start grace period must end grace period addition every store propagates critical section cpu end critical section must propagate every cpu end grace period critical section end grace period end must start grace period addition every store propagates grace period cpu start grace period must propagate every cpu start critical sectionhere simple example rcu action int x rcureadlock writeonce x writeonce rcureadunlock int readonce x synchronizercu readonce grace period guarantee tell u code run willnever end reasoning follows store x propagated calledsynchronizercu critical section must started grace period hand mean store toy occurs end critical section notpropagate end grace period violating theguaranteein kernel implementation rcu business storespropagating every cpu realized placing strong fence atsuitable place rcurelated code thus critical sectionstarts grace period critical section cpu willexecute smpmb fence end critical section andsome time grace period synchronizercu call returnsand critical section end grace period thesynchronizercu routine execute smpmb fence startand time critical section opening rcureadlock executeswhat exactly mean saying critical section startsbefore end grace period aspect meaningare pretty obvious example detail arententirely clear lkmm formalizes notion mean arelation unfortunately generic name link verygeneral relation among thing x link z includes case wherex happensbefore equal event equal orcomes z coherence order taking z say thatx rfe z implies x link z taking x say x fr zand x co z imply x link zthe formal definition link relation littleobscure wo nt give closely related pbrelation detail nt matter unless want comb througha somewhat lengthy formal proof pretty much need knowabout link information preceding paragraphthe lkmm go define gplink rscslink relation theybring grace period readside critical section picture following way e gplink f mean synchronizercu fence event event x e po either po x x x link f word e f connected grace period followed instance link e rscslink f mean critical section delimited rcureadlock fence l rcureadunlock fence u event x e po u either l po x l x x link f roughly speaking say event critical section e connected link fif think link relation standing extended e gplink f say e executes grace period whichends f executes fact say itincludes case e executes grace period storepropagates f cpu f executes nt propagate someother cpu grace period end similarly e rscslink f say e part start acritical section start f executesputting together lkmm express grace periodguarantee requiring cycle consisting gplinkand rscslink connection number gplink instance number rscslink instance defining thercupath relation link event e f whenever possible topass e f sequence gplink rscslink connectionswith least many former latter lkmm rcu axiom say event e e rcupath ejustifying axiom take intellectual effort infact valid formalization grace period guarantee wontattempt go detailed argument followinganalysis give taste involved suppose aviolation first part guarantee critical sectionstarts grace period store propagates thecritical section cpu end critical section butdoes nt propagate cpu end graceperiodputting symbol idea let l u rcureadlock andrcureadunlock fence event delimiting critical section inquestion let synchronizercu fence event graceperiod saying critical section start mean thereare event e f e poafter l mark start thecritical section e f sense link relation f pobefore grace period l po e link f po slet w store mentioned let z come end thecritical section witness w propagates criticalsection cpu reading w let arbitrary cpu awitness w propagated cpu happens aftersome event x poafter symbolically amount po x hb fr w rf z po uthe fr link w indicates w propagated cpuat time executes shown see thediscussion link relation earlier x z connected bylink yielding po x link z po uthese formula say pobetween f x hence f gplink zvia x also say z come end criticalsection e come start hence z rscslink f via e butnow forbidden cycle f gplink z rscslink f thus rcu axiom rule violation grace period guaranteefor something little downtoearth let see axiomworks practice consider rcu code example thistime statement label added memory access instruction int x rcureadlock w writeonce x x writeonce rcureadunlock int readonce x synchronizercu z readonce end store x overwrites valuethat load z read z fre x thusz link x addition synchronizercu andz therefore gplink xif end load read store w w link addition w x criticalsection therefore x rscslink ythis give u cycle gplink x rscslink one gplinkand one rscslink violating rcu axiom hence outcome isnot allowed lkmm would expectfor contrast let see happen complicated example int x z int rcureadlock w readonce x x writeonce rcureadunlock int readonce synchronizercu z writeonce z int rcureadlock u readonce z v writeonce x rcureadunlock end similar reasoning showsthat w rscslink via x gplink u via z u rscslink wvia v give cycle w rscslink gplink u rscslink whowever cycle fewer gplink instance rscslinkinstances consequently outcome forbidden lkmmthe following instruction timing diagram show might actuallyoccur rcureadlock x writeonce readonce synchronizercu start rcureadlock v writeonce x w readonce x rcureadunlock synchronizercu end z writeonce z u readonce z rcureadunlock requires execute load store ofprogram order course allowed youcan see grace period guarantee violated criticalsection start grace period endsbefore critical section start period end doesodds end section cover material nt quite fit anywhere theearlier sectionsthe description document nt always match formalversion lkmm exactly example actual formaldefinition prop relation make initial coe fre partoptional nt require event linked relation tobe cpu difference unimportant indeed instance coefre part prop missing interestbecause part fence rfe already included inhb anyway formal model add prop hb includesan explicit requirement event linked samecpuanother minor difference event memoryaccesses fence corresponding smploadacquire call formal model event nt actually readsand fence rather read event annotation markingthem acquires write event annotated release casesmpstorerelease final effect samealthough nt mention instruction executionordering provided smprmb fence nt apply read eventsthat part nonvaluereturning atomic update instance given atomicinc x smprmb readonce guaranteed load execute theupdate x architecture allowsnonvaluereturning atomic operation effectively executed offthe cpu basically cpu tell memory subsystem incrementx increment carried memory hardware withno involvement cpu since cpu nt ever readthe value x nothing smprmb fence act onthe lkmm defines extra synchronization operation term ofthings already covered particular rcudereference andlocklessdereference treated readonce followed bysmpreadbarrierdepends also happens aredefined includelinuxrcupdateh includelinuxcompilerh respectivelythere oddball fence need special treatment smpmbbeforeatomic smpmbafteratomic andsmpmbafterspinlock lkmm us fence event specialannotations act strong fence like smpmb except set event order instead orderingall poearlier event polater event smpmb behave follows smpmbbeforeatomic order poearlier event polater atomic update event following smpmbafteratomic order poearlier atomic update event preceding polater event smpmbafterspinlock order poearlier lock acquisition event event preceding polater eventsthe lkmm includes locking fact special code lockingin formal model added order make tool run fasterhowever special code intended exactly equivalent toconcepts already covered spinlockt variable treatedthe int spinlock treated cmpxchgacquire cpurelax wait equal atomically set read part atomic update also acquire fencean alternate way express thing would r xchgacquire along requirement end r spinunlock istreated smpstorerelease interestingly rcu locking introduce possibility ofdeadlock faced code sequence spinlock spinlock spinunlock spinunlock rcureadlock synchronizercu rcureadunlock lkmm say answer say allowedexecutions make sense also lead tomisleading result piece code multiple possibleexecutions deadlock model report thenondeadlocking execution example int x int writeonce x readonce rcureadlock readonce x writeonce synchronizercu rcureadunlock possible end end lkmm tellyou model wo nt mention selfdeadlock execution store ydiff git atoolsmemorymodeldocumentationrecipestxt btoolsmemorymodeldocumentationrecipestxtnew file mode devnull btoolsmemorymodeldocumentationrecipestxt document provides recipe litmus test commonlyoccurring situation well illustrate subtly broken butattractive nuisance many recipe include example code linux kernelthe first section cover simple special case second sectiontakes training wheel cover involved example third section provides rule thumbsimple special casesthis section present two simple special case first wherethere one cpu one memory location accessed thesecond use old concurrency workhorse lockingsingle cpu single memory location one cpu one hand one variableon code execute order asusual thing careful aspect c language unordered example expression f x g order f g called defined object code allowed use either order even interleave compiler permitted use asif rule compiler emit whatever code like normal access long result singlethreaded execution appear compiler followed relevant rule see compile high level optimization run debugger resulting one variable multiple cpu variable must properly aligned access variable must full sized variable straddle cachelines page void fullordering warranty undersized access load store part multiple cpu access shared variable use readonce writeonce stronger prevent loadstore tearing loadstore fusing invented load store exception rule including possibility given shared variable updated cpu example holding updateside lock read variable need use readonce ii possibility given shared variable either read updated cpu example running early boot read variable need use readonce writes variable need use writeonce locking locking wellknown straightforward least nt thinkabout hard basic rule indeed quite simple cpu thathas acquired given lock see change previously seen made anycpu released lock note statement bitstronger cpu holding given lock see change made anycpu time cpu holding lock example consider following pair code fragment see mppolockslitmus void void writeonce x spinlock mylock writeonce spinunlock mylock void void spinlock mylock readonce spinunlock mylock readonce x basic rule guarantee acquires mylock must set value also theconsequence final value equal finalvalue must also equal contrast weaker rule wouldsay nothing final value converse basic rule also hold illustrated thefollowing litmus test see mpporevlockslitmus void void readonce spinlock mylock readonce x spinunlock mylock void void spinlock mylock writeonce x spinunlock mylock writeonce converse basic rule guarantee acquiresmylock must set value also consequence final value equalto final value must also equal contrast weaker rule would say nothing final value example show single pair cpu effect thelocking basic rule extend across multiple acquisition given lockacross multiple cpushowever necessarily case access ordered bylocking seen ordered cpu holding lockconsider example see void void spinlock mylock writeonce x writeonce spinunlock mylock void void spinlock mylock readonce writeonce z spinunlock mylock void void writeonce z smpmb readonce x counterintuitive though might quite possible havethe final value final value z finalvalue reason surprising outcome never acquired lock thus benefit thelock ordering propertiesordering extended cpu holding lock careful useof smpmbafterspinlock see void void spinlock mylock writeonce x writeonce spinunlock mylock void void spinlock mylock smpmbafterspinlock readonce writeonce z spinunlock mylock void void writeonce z smpmb readonce x addition smpmbafterspinlock strengthens lock acquisitionsufficiently rule counterintuitive outcometaking training wheelsthis section look complex example including message passing load buffering releaseacquire chain store bufferingmany class litmus test abbreviated name may foundhere http passing mp mp pattern one cpu execute pair store pair variablesand another cpu execute pair load pair variable opposite order goal avoid counterintuitiveoutcome first load see value written second storebut second load see value written first storein absence ordering goal may met seenin mppoonceonceslitmus litmus test section therefore look ata number way meeting goalrelease acquireuse smpstorerelease smploadacquire one way forcethe desired mp ordering general approach shown see mppooncereleasepoacquireoncelitmus void void writeonce x smpstorerelease void void smploadacquire readonce x smpstorerelease macro order prior access thestore smploadacquire macro order load anysubsequent access therefore final value value final value must also value initstackslab function libstackdepotc us releaseacquirein way safely initialize slab stack working outthe mutualexclusion design left exercise readerassign dereferenceuse rcuassignpointer rcudereference quite similar theuse smpstorerelease smploadacquire except bothrcuassignpointer rcudereference operate rcuprotectedpointers general approach shown see mponceassignderefoncelitmus int z int z int x void void writeonce x rcuassignpointer x void void rcureadlock rcudereference readonce rcureadunlock example final value x final value must rcuassignpointer macro ordering property doessmpstorerelease rcudereference macro order load onlyagainst later access depend value loaded dependencyis present value loaded determines address later access address dependency shown value written later store data dependency whether later store executed thefirst place control dependency note term data dependency sometimes casually used cover address data dependenciesin libprimenumbersc expandtonextprime function invokesrcuassignpointer nextprimenumber function invokesrcudereference combination mediates access bit vectorthat expanded additional prime neededwrite read memory barriersit usually better use smpstorerelease instead smpwmb use smploadacquire instead smprmb however oldersmpwmb smprmb apis still heavily used importantto understand use case general approach shown see mpwmbonceoncermbonceoncelitmus void void writeonce x smpwmb writeonce void void readonce smprmb readonce x smpwmb macro order prior store later store thesmprmb macro order prior load later load therefore ifthe final value final value must also xlogstateswitchiclogs function fsxfsxfslogc containsthe following writeside code fragment log lcurrblock log llogbbsize assert log lcurrblock smpwmb log lcurrcycle xlogvalidlsn function fsxfsxfslogprivh containsthe corresponding readside code fragment curcycle accessonce log lcurrcycle smprmb curblock accessonce log lcurrblock alternatively consider following comment functionperfoutputputhandle kerneleventsringbufferc kernel user load datatail load datahead smprmb c store data load data smpwmb b smpmb store datahead store datatail bc pairing example mp pattern using smpwmb thewrite side smprmb read sideof course given smpmb strictly stronger either smpwmb smprmb code fragment would work smprmb andsmpwmb would also work smpmb replacing either theweaker barriersload buffering lb lb pattern one cpu load one variable store asecond another cpu load second variable storesto first goal avoid counterintuitive situation whereeach load read value written cpu store theabsence ordering quite possible may happen ascan seen lbpoonceonceslitmus litmus testone way avoiding counterintuitive outcome use acontrol dependency paired full memory barrier see lbctrlonceoncembonceoncelitmus void void readonce x writeonce void void readonce smpmb writeonce x pairing control dependency full memorybarrier prevents ending equal ad pairing ringbuffer use case shown earlier alsoillustrates lb repeat comment inperfoutputputhandle kerneleventsringbufferc showing acontrol dependency kernel side full memory barrier onthe user side kernel user load datatail load datahead smprmb c store data load data smpwmb b smpmb store datahead store datatail pair b pair cthe kernel control dependency load datatailand store data combined user full memory barrierbetween load data store datatail preventsthe counterintuitive outcome kernel overwrites databefore user get done loading itreleaseacquire chain releaseacquire chain lowoverhead flexible easytousemethod maintaining order however limitation thatneed fully understood example maintains order see void void writeonce x smpstorerelease void void smploadacquire smpstorerelease z void void smploadacquire z readonce x case final value mustalso final value ordering example stronger need forexample ordering would still preserved smploadacquire invocation replaced readonce tempting assume store x globally orderedbefore store z case see void void writeonce x smpstorerelease void void smploadacquire smpstorerelease z void void writeonce z smpmb readonce x one might hope final value final valueof z final value must also really ispossible final value reason course version part releaseacquire chainthis situation accounted rule thumb belowdespite limitation releaseacquire chain lowoverhead aswell simple powerful least memoryordering mechanism gostore buffering store buffering thought upsidedown load buffering sothat one cpu first store one variable load second another cpu store second variable load thefirst preserving order requires nothing le full barrier see sbmbonceonceslitmus void void writeonce x smpmb readonce void void writeonce smpmb readonce x omitting either smpmb allow finalvalues providing full barrier shown preventsthis counterintuitive outcomethis pattern famously appears part dekker lockingalgorithm much practical use within linux kernelof ordering wakeups following comment taken waitqueueactive includelinuxwaith show canonical pattern waker waiter cond true preparetowait wqhead wait state smpmb smpmb setcurrentstate waitqueueactive wqhead cond wakeup wqhead break schedule finishwait wqhead wait store cond load waitqueueactive preparetowait contains store wqhead callto setcurrentstate contains smpmb barrier load cond full barrier prevent undesirable outcome put waiting task sleep fails wake upnote use locking greatly simplify patternrules thumbthere might seem pattern governing ordering primitive areneeded situation case patternbased relation access linking successive cpu agiven litmus test three type linkage writetoread next cpu read value previous cpu wrote lb litmustest pattern contain type relation formal memorymodeling text relation called readsfrom usually abbreviated rf readtowrite next cpu overwrites value previous cpu read sb litmus test contains type relation formal memorymodeling text relation often called fromreads sometimes abbreviated fr writetowrite next cpu overwrites value written previous cpu litmus test pattern contains writetowrite relation last access first access formal memorymodeling text relation often called coherence order sometimes abbreviated co c standard instead called modification order often abbreviated mo strength memory ordering required given litmus test toavoid counterintuitive outcome depends type relationslinking memory access outcome question link writetoread link weakest possible ordering within cpu suffices example lb litmus test control dependency enough jobo one link writetoread link releaseacquire chain suffices mp litmus test illustrate caseo one link something writetoread link full memory barrier required successive pair nonwritetoread link case illustrated litmus test locking releaseacquire sectionshowever find stretch rule thumbto fit situation consider creating litmus test andrunning model document provides background reading memory model relatedtools document aimed kernel hacker interestedin memory modelshardware manual modelso sparc international inc ed sparc architecture reference manual version sparc international inco compaq computer corporation ed alpha architecture reference manual compaq computer corporationo intel corporation ed formal specification intel itanium processor family memory ordering intel corporationo intel corporation ed intel architecture software developer manual intel corporationo peter sewell susmit sarkar scott owen francesco zappa nardelli magnus myreen rigorous usable programmer model multiprocessor commun acm july http ibm corporation ed power isa version ibm corporationo arm ltd ed arm barrier litmus test cookbook arm ltdo susmit sarkar peter sewell jade alglave luc maranget derek williams understanding power multiprocessor proceeding acm sigplan conference programming language design implementation pldi acm new york ny usa susmit sarkar kayvan memarian scott owen mark batty peter sewell luc maranget jade alglave derek williams synchronising cc power proceeding acm sigplan conference programming language design implementation pldi acm new york ny usa arm ltd ed arm architecture reference manual architecture profile arm ltdo imagination technology ltd mips r architecture programmer volume iia r instruction set reference manual imagination technology ltd http imgteccom shaked flur kathryn e gray christopher pulte susmit sarkar ali sezgin luc maranget deacon peter sewell modelling architecture operationally concurrency isa proceeding annual acm sigplansigact symposium principle programming language popl acm new york ny usa shaked flur susmit sarkar christopher pulte kyndylan nienhuis luc maranget kathryn e gray ali sezgin mark batty peter sewell mixedsize concurrency arm power sc proceeding acm sigplan symposium principle programming language popl acm new york ny usa memory modelo andrea parri alan stern luc maranget paul e mckenney jade alglave formal model linuxkernel memory ordering companion webpage http online accessed jade alglave luc maranget paul e mckenney andrea parri alan stern formal kernel memoryordering model part linux weekly news http jade alglave luc maranget paul e mckenney andrea parri alan stern formal kernel memoryordering model part linux weekly news http toolingo daniel jackson alloy lightweight object modelling notation acm trans softw eng methodol april http jade alglave luc maranget michael tautschnig herding cat modelling simulation testing data mining weak memory acm trans program lang syst article july pageso jade alglave patrick cousot luc maranget syntax semantics weak consistency model specification language cat corr http comparisonso paul e mckenney ulrich weigand andrea parri boqun feng linuxkernel memory model june http git atoolsmemorymodelmaintainers btoolsmemorymodelmaintainersnew file mode devnull btoolsmemorymodelmaintainers linux kernel memory modelm alan stern stern rowlandharvardedu andrea parri parriandrea gmailcom deacon willdeacon armcom peter zijlstra peterz infradeadorg boqun feng boqunfeng gmailcom nicholas piggin npiggin gmailcom david howells dhowells redhatcom jade alglave jalglave uclacuk luc maranget lucmaranget inriafr paul e mckenney paulmck linuxvnetibmcom l linuxkernel vgerkernelorgs supportedt git git gitkernelorgpubscmlinuxkernelgitpaulmcklinuxrcugitf toolsmemorymodeldiff git atoolsmemorymodelreadme btoolsmemorymodelreadmenew file mode devnull btoolsmemorymodelreadme linux kernel memory model introductionthis directory contains memory model linux kernel writtenin cat language executable externally provided simulator exhaustively explores state space ofsmall litmus testsin addition tool also externally provided may usedto convert litmus test linux kernel module turn allowsthat litmus test exercised within linux kernelrequirementsthe tool must downloaded separately http installation instructionsalternatively abhishek bhardwaj kindly provided docker imageof tool abhishek suggests thefollowing command install use image user install docker distribution docker run itd docker attach idemittedfromthepreviouscommand gentoo user might wish make use patrick mclean package http package may uptodate respect githubrepositorybasic usage memory model used conjunction exhaustivelyexplore state space small litmus testsfor example run sbmbonceonceslitmus memory model conf linuxkernelcfg litmustestssbmbonceonceslitmushere corresponding output test sbmbonceonces allowed state witness positive negative condition exists observation sbmbonceonces never time sbmbonceonces positive negative never indicate thatthis litmus test exists clause satisfiedsee help informationbasic usage tool convert litmus test linux kernel module may loaded runfor example run sbmbonceonceslitmus hardware mkdir mymodules mymodules litmustestssbmbonceonceslitmus cd mymodules make sudo sh runshthe corresponding output includes test sbmbonceonces allowed histogram state witness positive negative condition exists validated observation sbmbonceonces never time sbmbonceonces positive negative never indicatethat two million trial state specified litmustest exists clause reachedand please see help informationdescription filesdocumentationcheatsheettxt quickreference guide linuxkernel memory modeldocumentationexplanationtxt describes memory model detaildocumentationrecipestxt list common memoryordering patternsdocumentationreferencestxt provides background readinglinuxkernelbell categorizes relevant instruction including memory reference memory barrier atomic readmodifywrite operation lock acquisitionrelease rcu operation formally file list subtypes various event type used memory model performs rcu readside critical section nesting analysislinuxkernelcat specifies reordering forbidden memory reference memory barrier atomic readmodifywrite operation rcu formally file specifies execution forbidden memory model allowed execution satisfy model coherence atomic happensbefore propagation rcu axiom defined filelinuxkernelcfg convenience file gather commoncase commandline argumentslinuxkerneldef map clike syntax internal litmustest instructionset architecturelitmustests directory containing representative litmus test listed litmustestsreadme great deal litmus test available http githubcompaulmckrculitmuslockcat provides frontend analysis lock acquisition release example associating lock acquisition preceding following release checking selfdeadlock formally file defines performanceenhanced scheme generation possible readsfrom coherence order relation locking primitivesreadme filelimitationsthe linuxkernel memory model following limitation compiler optimization modeled course use readonce writeonce limit compiler ability optimize linuxkernel code us bare c memory access handling code todo list information see documentationexplanationtxt particular program order relation po poloc warning section multiple access size single variable supported neither misaligned partially overlapping exception interrupt modeled case limitation overcome modeling interrupt exception additional io mmio dma selfmodifying code found kernel alternative mechanism function tracer berkeley packet filter jit compiler module loader complete modeling variant atomic readmodifywrite operation locking primitive rcu provided example callrcu rcubarrier supported however substantial amount support provided operation shown linuxkerneldef filethe tool additional limitation apart fromthe memory model nontrivial data structure array structure supported however pointer supported allowing trivial linked list dynamic memory allocation supported although worked around case supplying multiple statically allocated variablessome limitation may overcome future others aremore likely addressed incorporating linuxkernel memory modelinto toolsdiff git atoolsmemorymodellinuxkernelbell btoolsmemorymodellinuxkernelbellnew file mode devnull btoolsmemorymodellinuxkernelbell spdxlicenseidentifier copyright c jade alglave jalglave uclacuk copyright c luc maranget lucmaranget inriafr inria copyright c alan stern stern rowlandharvardedu andrea parri parriandrea gmailcom earlier version file appears companion webpage frightening small child disconcerting grownup concurrency linux kernel alglave maranget mckenney parri stern appear asplos linux kernel memory model enum access readonce writeonce accessonce release smpstorerelease acquire smploadacquire noreturn r nonreturn rmw instruction r acquire noreturn instruction w release instruction rmw acquire release enum barrier wmb smpwmb rmb smprmb mb smpmb rbdep smpreadbarrierdepends rculock rcureadlock rcuunlock rcureadunlock syncrcu synchronizercu beforeatomic smpmbbeforeatomic afteratomic smpmbafteratomic afterspinlock smpmbafterspinlock instruction f barrier compute matching pair nested rculock rcuunlock let matched let rec unmatchedlocks rculock domain matched unmatchedunlocks rcuunlock range matched unmatched unmatchedlocks unmatchedunlocks unmatchedpo unmatched po unmatched unmatchedlockstounlocks unmatchedlocks po unmatchedunlocks matched matched unmatchedlockstounlocks unmatchedpo unmatchedpo matched validate nesting flag empty rculock domain matched unbalancedrculockingflag empty rcuunlock range matched unbalancedrculocking outermost level nesting let crit matched matched diff git atoolsmemorymodellinuxkernelcat btoolsmemorymodellinuxkernelcatnew file mode devnull btoolsmemorymodellinuxkernelcat spdxlicenseidentifier copyright c jade alglave jalglave uclacuk copyright c luc maranget lucmaranget inriafr inria copyright c alan stern stern rowlandharvardedu andrea parri parriandrea gmailcom earlier version file appears companion webpage frightening small child disconcerting grownup concurrency linux kernel alglave maranget mckenney parri stern appear asplos linux kernel memory model file lockcat handle lock experimental replaced include coscat test use lock include lockcat basic relation fence let rbdep r fencerel rbdep r let rmb r noreturn fencerel rmb r noreturn let wmb w fencerel wmb w let mb fencerel mb fencerel beforeatomic rmw po po rmw fencerel afteratomic po lkw fencerel afterspinlock let gp po syncrcu po let strongfence mb gp release acquire let acqpo acquire po let porel po release let rfirelacq release rfi acquire fundamental coherence ordering sequential consistency per variable let com rf co fracyclic poloc com coherence atomic readmodifywrite empty rmw fre coe atomic instruction execution ordering preserved program order let dep addr datalet rwdep dep ctrl w let overwrite co frlet tow rwdep overwrite int let rrdep addr dep rfi let strongrrdep rrdep rbdeplet tor strongrrdep rfirelacqlet fence strongfence wmb porel rmb acqpolet ppo rrdep tor tow fence propagation ordering release operation strong fence let acumul r rfe rlet cumulfence acumul strongfence porel wmblet prop overwrite ext cumulfence rfe happens ordering passage time fence needed prop relation confined one process let hb ppo rfe prop id int acyclic hb happensbefore write fence propagation ordering propagation nonrf link need strong fence let pb prop strongfence hb acyclic pb propagation rcu effect readside critical section proceeds rcureadlock onward one hand rcureadunlock backwards hand let rscs po po synchronizercu strong fence special order one two nonrf relation conjunction rcu readside critical section let link hb pb prop chain affect rcu graceperiod guarantee let gplink gp linklet rscslink rscs link cycle containing least many grace period rcu readside critical section forbidden let rec rcupath gplink gplink rscslink rscslink gplink rcupath rcupath gplink rcupath rscslink rscslink rcupath gplink irreflexive rcupath rcudiff git atoolsmemorymodellinuxkernelcfg btoolsmemorymodellinuxkernelcfgnew file mode devnull btoolsmemorymodellinuxkernelcfg macro linuxkerneldefbell linuxkernelbellmodel linuxkernelcatgraph columnssquished trueshowevents noregsmovelabel truefontsize falseshowfinalrf falseshowinitwrites falsesplines splinepad hb color indigoedgeattr co color blueedgeattr mb color darkgreenedgeattr wmb color darkgreenedgeattr rmb color darkgreendiff git atoolsmemorymodellinuxkerneldef btoolsmemorymodellinuxkerneldefnew file mode devnull btoolsmemorymodellinuxkerneldef spdxlicenseidentifier earlier version file appears companion webpage frightening small child disconcerting grownup concurrency linux kernel alglave maranget mckenney parri stern appear asplos oncereadonce x load x writeonce x v store x v release acquire friendssmpstorerelease x v store release x v smploadacquire x load acquire x rcuassignpointer x v store release x v locklessdereference x load lderef x rcudereference x load deref x fencessmpmb fence mb smprmb fence rmb smpwmb fence wmb smpreadbarrierdepends fence rbdep smpmbbeforeatomic fence beforeatomic smpmbafteratomic fence afteratomic smpmbafterspinlock fence afterspinlock exchangexchg x v xchg mb x v xchgrelaxed x v xchg x v xchgrelease x v xchg release x v xchgacquire x v xchg acquire x v cmpxchg x v w cmpxchg mb x v w cmpxchgrelaxed x v w cmpxchg x v w cmpxchgacquire x v w cmpxchg acquire x v w cmpxchgrelease x v w cmpxchg release x v w spinlocksspinlock x lock x spinunlock x unlock x spintrylock x trylock x rcurcureadlock fence rculock rcureadunlock fence rcuunlock synchronizercu fence syncrcu synchronizercuexpedited fence syncrcu atomicatomicread x readonce x atomicset x v writeonce x v atomicreadacquire x smploadacquire x atomicsetrelease x v smpstorerelease x v atomicadd v x atomicop x v atomicsub v x atomicop x v atomicinc x atomicop x atomicdec x atomicop x atomicaddreturn v x atomicopreturn mb x v atomicaddreturnrelaxed v x atomicopreturn x v atomicaddreturnacquire v x atomicopreturn acquire x v atomicaddreturnrelease v x atomicopreturn release x v atomicfetchadd v x atomicfetchop mb x v atomicfetchaddrelaxed v x atomicfetchop x v atomicfetchaddacquire v x atomicfetchop acquire x v atomicfetchaddrelease v x atomicfetchop release x v atomicincreturn x atomicopreturn mb x atomicincreturnrelaxed x atomicopreturn x atomicincreturnacquire x atomicopreturn acquire x atomicincreturnrelease x atomicopreturn release x atomicfetchinc x atomicfetchop mb x atomicfetchincrelaxed x atomicfetchop x atomicfetchincacquire x atomicfetchop acquire x atomicfetchincrelease x atomicfetchop release x atomicsubreturn v x atomicopreturn mb x v atomicsubreturnrelaxed v x atomicopreturn x v atomicsubreturnacquire v x atomicopreturn acquire x v atomicsubreturnrelease v x atomicopreturn release x v atomicfetchsub v x atomicfetchop mb x v atomicfetchsubrelaxed v x atomicfetchop x v atomicfetchsubacquire v x atomicfetchop acquire x v atomicfetchsubrelease v x atomicfetchop release x v atomicdecreturn x atomicopreturn mb x atomicdecreturnrelaxed x atomicopreturn x atomicdecreturnacquire x atomicopreturn acquire x atomicdecreturnrelease x atomicopreturn release x atomicfetchdec x atomicfetchop mb x atomicfetchdecrelaxed x atomicfetchop x atomicfetchdecacquire x atomicfetchop acquire x atomicfetchdecrelease x atomicfetchop release x atomicxchg x v xchg mb x v atomicxchgrelaxed x v xchg x v atomicxchgrelease x v xchg release x v atomicxchgacquire x v xchg acquire x v atomiccmpxchg x v w cmpxchg mb x v w atomiccmpxchgrelaxed x v w cmpxchg x v w atomiccmpxchgacquire x v w cmpxchg acquire x v w atomiccmpxchgrelease x v w cmpxchg release x v w atomicsubandtest v x atomicopreturn mb x v x atomicopreturn mb x x atomicopreturn mb x v x atomicopreturn mb x v c corrpoonceonceonce int x writeonce x int x int int readonce x readonce x exists c corwpoonceonceonce int x int readonce x writeonce x int x writeonce x exists c cowrpoonceonceonce int x int writeonce x readonce x int x writeonce x exists c cowwpoonceonce int x writeonce x writeonce x exists c iriwmbonceoncesonceonce int x writeonce x int x int int int readonce x smpmb readonce int writeonce int x int int int readonce smpmb readonce x exists c iriwpoonceoncesonceonce int x writeonce x int x int int int readonce x readonce int writeonce int x int int int readonce readonce x exists c int x int writeonce x writeonce int int z int readonce writeonce z int x int z int int readonce z readonce x exists c int x int writeonce x smpstorerelease int int z int smploadacquire smpstorerelease z int x int z int int smploadacquire z readonce x exists c lbctrlonceoncembonceonce int x int int readonce x writeonce int x int int readonce smpmb writeonce x exists c lbpoacquireoncepooncerelease int x int int readonce x smpstorerelease int x int int smploadacquire writeonce x exists c lbpoonceonces int x int int readonce x writeonce int x int int readonce writeonce x exists c mponceassignderefoncelitmus yz int x int writeonce x rcuassignpointer x int x int int int rcureadlock rcudereference readonce rcureadunlock exists c mppolocks int x int spinlockt mylock writeonce x spinlock mylock writeonce spinunlock mylock int x int spinlockt mylock int int spinlock mylock readonce spinunlock mylock readonce x exists c mppoonceonces int x int writeonce x writeonce int x int int int readonce readonce x exists c mppooncereleasepoacquireonce int x int writeonce x smpstorerelease int x int int int smploadacquire readonce x exists c mpporevlocks int x int spinlockt mylock int int readonce spinlock mylock readonce x spinunlock mylock int x int spinlockt mylock spinlock mylock writeonce x spinunlock mylock writeonce exists c mpwmbonceoncermbonceonce int x int writeonce x smpwmb writeonce int x int int int readonce smprmb readonce x exists c rmbonceonces int x int writeonce x smpmb writeonce int x int int writeonce smpmb readonce x exists c rpoonceonces int x int writeonce x writeonce int x int int writeonce readonce x exists diff git atoolsmemorymodellitmustestsreadme btoolsmemorymodellitmustestsreadmenew file mode devnull btoolsmemorymodellitmustestsreadme directory contains following litmus test corrpoonceonceoncelitmus test readread coherence whether two successive read variable orderedcorwpoonceonceoncelitmus test readwrite coherence whether read given variable followed write variable orderedcowrpoonceonceoncelitmus test writeread coherence whether write given variable followed read variable orderedcowwpoonceoncelitmus test writewrite coherence whether two successive writes variable orderediriwmbonceoncesonceoncelitmus test independent read independent writes smpmb pair read word smpmb sufficient cause two different reading process agree order pair writes write different variable different processiriwpoonceoncesonceoncelitmus test independent read independent writes nothing pair read word anything needed cause two different reading process agree order pair writes write different variable different storerelease replaced writeonce loadacquire replaced readonce releaseacquire chain order prior store later load lbctrlonceoncembonceoncelitmus control dependency smpmb suffice loadbuffering litmus test process read one two variable writes lbpoacquireoncepooncereleaselitmus releaseacquire pair suffice loadbuffering litmus test process read one two variable writes lbpoonceonceslitmus storerelease replaced writeonce loadacquire replaced readonce mponceassignderefoncelitmus rcuassignpointer rcudereference mppolockslitmus second access writer process first access reader process protected lockmppoonceonceslitmus without smprmb smpwmb mppooncereleasepoacquireoncelitmus releaseacquire chainmpporevlockslitmus first access writer process second access reader process protected lockmpwmbonceoncermbonceoncelitmus smpwmb store smprmb load suffice messagepassing litmus test one process writes data flag process read flag data similar test two process instead three rmbonceonceslitmus fully ordered via smpmb version one classic counterintuitive litmus test illustrates effect store propagation delaysrpoonceonceslitmus without smpmb invocationssbmbonceonceslitmus fully ordered via smpmb version store buffering form core dekker mutualexclusion algorithmsbpoonceonceslitmus without smpmb invocationsspoonceonceslitmus without smpwmb acquire loadswmbonceoncepoacquireoncelitmus smpwmb instead release acquire order prior store subsequent store wrcpoonceoncesoncelitmuswrcpooncereleasermbonceonceoncelitmus two member extension mp litmustest class first write moved separate ordering provided spinunlock subsequent spinlock sufficient make ordering apparent access process holding lock smpmbafterspinlock immediately following spinlock ordering provided releaseacquire chain sufficient make ordering apparent access process participate releaseacquire chain great many litmus test available http githubcompaulmckrculitmus c spoonceonces int x int writeonce x writeonce int x int int readonce writeonce x exists c swmbonceoncepoacquireonce int x int writeonce x smpwmb writeonce int x int int smploadacquire writeonce x exists c sbmbonceonces int x int int writeonce x smpmb readonce int x int int writeonce smpmb readonce x exists c sbpoonceonces int x int int writeonce x readonce int x int int writeonce readonce x exists c wrcpoonceoncesonce int x writeonce x int x int int readonce x writeonce int x int int int readonce readonce x exists c wrcpooncereleasermbonceonceonce int x writeonce x int x int int readonce x smpstorerelease int x int int int readonce smprmb readonce x exists c int x int spinlockt mylock spinlock mylock writeonce x writeonce spinunlock mylock int int z spinlockt mylock int spinlock mylock smpmbafterspinlock readonce writeonce z spinunlock mylock int x int z int writeonce z smpmb readonce x exists c int x int spinlockt mylock spinlock mylock writeonce x writeonce spinunlock mylock int int z spinlockt mylock int spinlock mylock readonce writeonce z spinunlock mylock int x int z int writeonce z smpmb readonce x exists c int x int writeonce x smpstorerelease int int z int smploadacquire smpstorerelease z int x int z int writeonce z smpmb readonce x exists diff git atoolsmemorymodellockcat btoolsmemorymodellockcatnew file mode devnull btoolsmemorymodellockcat spdxlicenseidentifier copyright c luc maranget lucmaranget inriafr inria copyright c alan stern stern rowlandharvardedu generate coherence order handle lock operation include crosscat lock read partner lock writes let lkrmw lkr poloc lkw po po let rmw rmw lkrmw paired lkr must always see unlocked value spinlock call nested inside critical section lock always deadlock empty lkw poloc domain lkrmw poloc ul poloc locknest litmus test invalid lkw event part rmw pair flag empty lkw range lkrmw unpairedlkw allowed implement spinislocked flag empty lkr domain lkrmw unpairedlkr r w access spinlocks let alllocks lkr lkw ul lfflag empty iw loc alllocks mixedlockaccesses final value spinlock tested flag empty fw loc alllocks lockfinal put lock operation appropriate class leave ul w co relation generated let r r lkr lflet w w lkwlet release release ullet acquire acquire lkr match lkw event corresponding ul event let critical lkw poloc ul poloc lkw ul poloc flag empty ul range critical unmatchedunlock allow one unmatched lkw per location must deadlock let unmatchedlkw lkw domain critical empty unmatchedlkw loc unmatchedlkw id unmatchedlocks rfi lf event link lkw lf event critical section let rfilf lkw poloc lf lkw poloc ul poloc rfe lf event let allpossiblerfelf given lf event r compute possible rfe edge event starting lkw event thread convert relation set singleedge relation let possiblerfelf r let pairtorelation p p map pairtorelation lkw r loc ext lf event r nt rfilf map possiblerfelf lf range rfilf generate rf relation lf event rfelf cross allpossiblerfelf let rf rf rfilf rfelf generate co relation including lkw event ul let iw loc lkw lkw loc unmatchedlkw unmatchedlkw include cosoptcat let w w ullet r w merge ul event co let co co critical co let coe co extlet coi co int merge lkr event rf let rf rf iw ul singlestep co let rfe rf extlet rfi rf intlet fr colet fre fr extlet fri fr intshow co rf fr
576,Lobsters,formalmethods,CSE-Formal methods,Certification of an Instruction Set Simulator [for ARM] (2017),https://tel.archives-ouvertes.fr/tel-00937524/document,certification instruction set simulator arm,,obj type catalog version page r openaction r fit outline r pagelabels r metadata r endobj obj creator title subject author producer keywords creationdate moddate endobj obj type page kid r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj count first r last r type outline endobj obj nums r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj length type metadata subtype xml stream gpl ghostscript latex hyperref package endstream endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r r r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r group r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r r r r r r r r r content r cropbox rotate endobj obj type page mediabox parent r resource r annots r r r content r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream w ul endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj title table de figure dest r xyz null parent r next r endobj obj title bibliography dest r xyz null parent r prev r endobj obj p endobj obj p ii endobj obj p endobj obj p ii endobj obj p iii endobj obj p iv endobj obj p v endobj obj p vi endobj obj p vii endobj obj p viii endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj p endobj obj procset pdf imagec text extgstate r xobject r r font r endobj obj length filter flatedecode stream g endstream endobj obj procset pdf text extgstate r font r endobj obj length filter flatedecode stream kn endstream endobj obj procset pdf text extgstate r font r endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj type annot c rect border dest r xyz null subtype link endobj obj length filter flatedecode stream x
577,Lobsters,formalmethods,CSE-Formal methods,Teaching Formal Methods via Automatic Checking of Finite Models (2017),http://www.risc.jku.at/research/formal/software/RISCAL/papers/ThEdu17.8.pdf,teaching formal method via automatic checking finite model,,obj length filter flatedecode stream cw u p w pv n p k c x vw c n endstream endobj obj length filter flatedecode stream v n tn c e n b qjevd b rq sd
578,Lobsters,formalmethods,CSE-Formal methods,Using Models at Runtime to Address Assurance for Self-Adaptive Systems (2014),https://arxiv.org/pdf/1505.00903.pdf,using model runtime address assurance selfadaptive system,,obj endobj obj xobject procset pdftextimagec font trimbox thumb rmediabox structparents endobj obj stream af g endstream endobj obj xobject procset pdftextimageb font trimbox thumb rmediabox structparents r r r r r r r r r r r r r r r rotate endobj obj xobject procset pdftext font trimbox thumb rmediabox structparents r r r r r r r r r r r r r r r r rotate endobj obj xobject procset pdftext font trimbox thumb rmediabox structparents r r r r r r r r r r r r r r r r rotate endobj obj xobject procset pdftextimageb font trimbox thumb rmediabox structparents r r r r r r r r r r r r r r r r r r r r r r r rotate endobj obj xobject procset pdftextimageb font trimbox thumb rmediabox structparents r r r r r r r rotate endobj obj xobject procset pdftextimageb font trimbox thumb rmediabox structparents r r r r r r r r r r r r rotate endobj obj xobject procset pdftext font trimbox thumb rmediabox structparents r r r r rotate endobj obj xobject procset pdftextimagecimagei colorspace font property trimbox thumb rmediabox structparents r rotate endobj obj stream z ꖈ g xvm ŏ k ï p h w r zq r vnisxqun endstream endobj obj stream ۇb f p f h h g stream ѻϛ endstream endobj obj stream applicationpostscript print adobe illustrator jpeg xmpiid xmpdid proof pdf proof pdf saved adobe illustrator saved adobe illustrator saved xmpiid adobe illustrator converted applicationpostscript applicationvndadobeillustrator print false true millimeter myriadproregular myriad pro regular open type version p hotconv false myriadproregularotf myriadprobold myriad pro bold open type version p hotconv false myriadproboldotf cyan magenta yellow black default swatch group white cmyk process black cmyk process cmyk red cmyk process cmyk yellow cmyk process cmyk green cmyk process cmyk cyan cmyk process cmyk blue cmyk process cmyk magenta cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process gray cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process brights cmyk process cmyk process cmyk process cmyk process cmyk process cmyk process adobe pdf library endstream endobj obj stream endstream endobj obj stream l p endstream endobj obj stream c endstream endobj obj stream ֆt ژhvҥi ot fim e z އ я x f h l aidcs陙 hz eff f la 轏xh x h adsrb p ad h g x endstream endobj obj stream endstream endobj obj stream g r endstream endobj obj stream f z endstream endobj obj stream fθ n u oz g击 f գ v r n n j z
579,Lobsters,formalmethods,CSE-Formal methods,STOKE: A stochastic superoptimizer and program synthesizer (2013-2017),http://stoke.stanford.edu,stoke stochastic superoptimizer program synthesizer,publication download githubcomstanfordplstoke,stoke stochastic optimizer program synthesizer instruction set stoke us random search explore extremely highdimensional space possible program transformation although one random transformation unlikely produce code sequence desirable repeated application million transformation sufficient produce novel nonobvious code sequence stoke used many different scenario optimizing code performance size synthesizing implementation scratch trade accuracy floating point computation performance superoptimizer stoke shown outperform code produced generalpurpose domainspecific compiler case expert handwritten code addition searching program stoke contains verification infrastructure show equivalence program stoke consider testcases perform bounded verification way fully formal verification show equivalence possible input research behind stoke supported grant national science foundation publication stoke appeared number publication download stoke developed open source github downloaded githubcomstanfordplstoke repository contains instruction install stoke well dependency
581,Lobsters,formalmethods,CSE-Formal methods,"Specification, Verification, and Synthesis Using Extended State Machines with Callbacks (2016)",http://www.tuba.ece.ufl.edu/presentations/memocode16.pdf,specification verification synthesis using extended state machine callback,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream q phy z endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream آ endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream ad r õ l zu
582,Lobsters,formalmethods,CSE-Formal methods,"Formal Specification, Verification, and Implementation of Fault-Tolerant Systems (2015)",https://pdfs.semanticscholar.org/9858/34aea0f4640620d828b63c7d09964d57097f.pdf,formal specification verification implementation faulttolerant system,,obj stream 臐 tޙ l kaz
583,Lobsters,formalmethods,CSE-Formal methods,Linux Device Driver Synthesis and Verification (2015),http://etd.library.vanderbilt.edu/available/etd-11172015-221551/unrestricted/YiLi.pdf,linux device driver synthesis verification,,obj endobj obj r xyz null endobj obj endobj obj list figure endobj obj goto endobj obj r xyz null endobj obj endobj obj introduction endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj problem endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj solution summary endobj obj goto endobj obj r xyz null endobj obj endobj obj ii background endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj generic modeling environment endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r endobj obj zing endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r first r last r count endobj obj p language endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj ghost machine endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r endobj obj asynchronous semantic endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj external function endobj obj goto endobj obj r xyz null endobj obj endobj obj iii implementation endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj overview solution architecture endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r endobj obj driver modeling domain specific language endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r first r last r count endobj obj domain metamodel endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj top level view endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r endobj obj second level absscope endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj third level statemachine endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r first r last r count endobj obj code generator endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj entry point endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r endobj obj generated p program endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj file operation external function endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r first r last r count endobj obj verifier endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj state level responsiveness endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj machine level responsiveness endobj obj goto endobj obj r xyz null endobj obj endobj obj iv case study endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj driver model endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r next r endobj obj execution endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj concurrency endobj obj goto endobj obj r xyz null endobj obj endobj obj v future work endobj obj goto endobj obj r xyz null endobj obj title r r parent r next r endobj obj device class specification endobj obj goto endobj obj r xyz null endobj obj title r r parent r prev r endobj obj hardware software codesign endobj obj goto endobj obj r xyz null endobj obj endobj obj vi conclusion endobj obj goto chapter endobj obj r xyz null endobj obj endobj obj bibliography endobj obj goto r fith endobj obj endobj obj procset pdftext endobj obj stream h ʩ q endstream endobj obj r xyz null endobj obj r xyz null endobj obj endobj obj endobj obj type annot subtype link border hic rect goto chapter endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj procset pdftext endobj obj endobj obj stream p g w endstream endobj obj r xyz null endobj obj r xyz null endobj obj endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto chapter endobj obj procset pdftext endobj obj endobj obj length filter flatedecode stream endstream endobj obj r xyz null endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj procset pdftext endobj obj endobj obj length filter flatedecode stream ak q rv嫴 c
584,Lobsters,formalmethods,CSE-Formal methods,Beginner's Luck: A Language for Property-based Generators (2016),https://arxiv.org/pdf/1607.05443.pdf,beginner luck language propertybased generator,,obj filter flatedecode length stream p ǻ mq n ƾ qޥ p g q g lo c r hf n h p fz n fx g endobj obj type objstm filter flatedecode first length n stream dmա ղ vv e ģ p mxvk hշ rx f j endobj obj filter flatedecode length stream q
587,Lobsters,formalmethods,CSE-Formal methods,"Physics, Topology, Logic and Computation: A Rosetta Stone (2009)",https://arxiv.org/pdf/0903.0340.pdf,physic topology logic computation rosetta stone,,obj stream jpm h r u j k nem wa r sf yv unnkg g u f oo r q ۊg endobj obj endobj obj stream h h qk l l l x ܣ ܣ dq д vv ޱbƶ ۏe j fv fd g ym ǳ n b h ak p fv b dp g z b fx g mek r fv c uu θ n fv ւ fv ա g ai p x e lrd l ӆv pk q v
588,Lobsters,formalmethods,CSE-Formal methods,Setuid Demystified (2002),https://people.eecs.berkeley.edu/~daw/papers/setuid-usenix02.pdf,setuid demystified,,obj goto endobj obj introduction endobj obj goto endobj obj related work endobj obj goto endobj obj user id model endobj obj goto endobj obj history endobj obj goto endobj obj early unix endobj obj goto endobj obj system v endobj obj goto endobj obj bsd endobj obj goto endobj obj modern unix endobj obj goto endobj obj complexity uidsetting system call endobj obj goto endobj obj operating systemspecific difference endobj obj goto endobj obj comparison among uidsetting system call endobj obj goto endobj obj formal model endobj obj goto endobj obj building formal model endobj obj goto endobj obj example formal model endobj obj goto endobj obj correctness endobj obj goto endobj obj application endobj obj goto endobj obj verifying accuracy manual page endobj obj goto endobj obj identifying implementation difference endobj obj goto endobj obj detecting inconsistency within o kernel endobj obj goto endobj obj checking proper usage uidsetting system call endobj obj goto endobj obj advantage endobj obj goto endobj obj case study security vulnerability endobj obj goto endobj obj misuse setuid endobj obj goto endobj obj interaction user id group id endobj obj goto endobj obj guideline endobj obj goto endobj obj general guideline endobj obj goto endobj obj selecting appropriate system call endobj obj goto endobj obj obeying proper order system call endobj obj goto endobj obj verifying proper execution system call endobj obj goto endobj obj improved api privilege management endobj obj goto endobj obj proposed api endobj obj goto endobj obj implementation endobj obj goto endobj obj evaluation endobj obj goto endobj obj future work endobj obj goto endobj obj conclusion endobj obj goto r fit endobj obj length filter flatedecode stream x v r ѿ b r u h n v ʃ g u r myg hƙ b f endobj obj type page content r resource r mediabox parent r annots r r endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto citemess endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r procset pdf text endobj obj length filter flatedecode stream xڕz w aki k b l u iuo v cqa n r v endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto citestevens endobj obj type annot border h c rect subtype link goto citebishop endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream u m h wpq co xӧ l ڄ p g l sj b 邼 l j endobj obj type page content r resource r mediabox parent r annots r r r r r r r endobj obj type annot border h c rect subtype link goto citesetuidpatent endobj obj type annot border h c rect subtype link goto citemess endobj obj type annot border h c rect subtype link goto citeposix endobj obj type annot border h c rect subtype link goto citelinux endobj obj type annot border h c rect subtype link goto citesolaris endobj obj type annot border h c rect subtype link goto citefreebsd endobj obj type annot border h c rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream n l f rip f p ama j v en n v ѷ endobj obj type page content r resource r mediabox parent r annots r r r r r endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto citeposix endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r procset pdf text endobj obj length filter flatedecode stream xڥ v jvᅔf v n e l j զ r c f j r ld q aev j f b g xj endobj obj type page content r resource r mediabox parent r annots r endobj obj type annot border h c rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r procset pdf text endobj obj length filter flatedecode stream e rhh yb uz cc yh l h p z ׯ n im u ljgpmk ȉ ҕx 툊 endstream endobj obj type page content r resource r mediabox parent r annots r r r r endobj obj type xobject subtype form formtype matrix bbox resource procset pdf text extgstate r font r r length r filter flatedecode stream lg endobj obj type extgstate name tr identity opm sm endobj obj subtype basefont time type font name endobj obj subtype basefont courier type font name endobj obj endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj type annot border h c rect subtype link goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r xobject r procset pdf text endobj obj length filter flatedecode stream ubx v
590,Lobsters,formalmethods,CSE-Formal methods,Synthesis-Based Loose Programming (2010),https://pdfs.semanticscholar.org/d272/645780501ccb188a9bb8b6814bf49cfe871c.pdf,synthesisbased loose programming,,synthesis practical perspectivesven jörges annalena lamprecht bernhard
592,Lobsters,formalmethods,CSE-Formal methods,Verifying Safety for Neural Networks,http://ai2.ethz.ch/,verifying safety neural network,sri lab downloads diffai http githubcomethsridiffai http githubcomethsrieran http publication adversarial training provable defense bridging gap iclr universal approximation certified network iclr learning certified individually fair representation arxiv beyond single neuron convex barrier neural network certification neurips certifying geometric robustness neural network neurips training querying neural network logic icml boosting robustness certification neural network iclr abstract domain certifying neural network popl fast effective robustness certification neurips differentiable abstract interpretation provably robust neural network icml safety robustness certification neural network abstract interpretation ieee p,safeai project sri lab eth zurich explore new method system ensure artificial intelligence ai system deep neural network robust safe interpretable work tends sit intersection machine learning optimization symbolic reasoning method example among result recently introduced new approach system certify train deep neural network symbolic method illustrated figure downloads code diffai available http githubcomethsridiffai code eran eth robusness analyzer neural network available http githubcomethsrieran code deep learning differentiable logic available http publication adversarial training provable defense bridging gap iclr presentation mislav balunovic martin vechev universal approximation certified network iclr maximilian baader matthew mirman martin vechev learning certified individually fair representation arxiv anian ruoss mislav balunovic marc fischer martin vechev beyond single neuron convex barrier neural network certification neurips gagandeep singh rupanshu ganvir markus püschel martin vechev certifying geometric robustness neural network neurips mislav balunovic maximilian baader gagandeep singh timon gehr martin vechev training querying neural network logic icml marc fischer mislav balunovic dana drachslercohen timon gehr ce zhang martin vechev boosting robustness certification neural network iclr gagandeep singh timon gehr markus püschel martin vechev abstract domain certifying neural network popl gagandeep singh timon gehr markus püschel martin vechev fast effective robustness certification neurips gagandeep singh timon gehr matthew mirman markus püschel martin vechev differentiable abstract interpretation provably robust neural network icml matthew mirman timon gehr martin vechev safety robustness certification neural network abstract interpretation ieee p timon gehr matthew mirman dana drachslercohen petar tsankov swarat chaudhuri martin vechev
593,Lobsters,formalmethods,CSE-Formal methods,Specification and Proof of High-level Functional Properties of Bit-level Programs (2016),https://hal.inria.fr/hal-01314876/document,specification proof highlevel functional property bitlevel program,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream ҷ gw ԍt u j r q p ˉ w endstream endobj obj colorspace r pattern r extgstate r font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot border h c rect subtype link r endobj obj type annot border h c rect subtype link r endobj obj type annot border h c rect subtype link r endobj obj length filter flatedecode stream ok w e g pz
594,Lobsters,formalmethods,CSE-Formal methods,Formal verification of an interior point algorithm instanciation,https://hal.archives-ouvertes.fr/hal-01681134/document,formal verification interior point algorithm instanciation,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream q ru c u x endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj kid r r r r r r limit docstart endobj obj title model predictive control verification challenge r parent r next r endobj obj title conclusion future work r parent r prev r endobj obj length filter flatedecode stream skjd zx hd q ty ز n v q
595,Lobsters,formalmethods,CSE-Formal methods,LMS-Verify: Abstraction without Regret for Verified Systems Programming (2017),http://lampwww.epfl.ch/~amin/pub/lms-verify.pdf,lmsverify abstraction without regret verified system programming,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g endstream endobj obj annots r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r r procset pdf text subtype form type xobject length stream r z r j q r c h j endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj endobj obj ascent capheight charset loponequoterightseven descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream hn hh x v xu ݶ rk c zepk u ʭ b endobj obj filter flatedecode length stream endstream endobj obj filter flatedecode length stream endstream endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj border c dest r xyz null rect subtype link type annot endobj obj r r r r r r r endobj obj r endobj obj filter flatedecode length stream j k筯 sy j n pn w ņhru j oo ԡw endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width endobj obj baseencoding winansiencoding difference asteriskmath dagger type encoding endobj obj ascent capheight charset asteriskmathdagger descent flag fontbbox r fontname italicangle missingwidth stemv type fontdescriptor endobj obj filter flatedecode subtype length stream jz g endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj difference fi dollar quoteright parenleft parenright comma hyphen period slash zero one two three four five six seven eight nine colon c f j l p r b c e f g h k l n p q r u v w x endash type encoding endobj obj endobj obj ascent capheight charset acfjmprtaatbccoloncommaddollareeightendashffifivefourghhypheniklmnnineoonepparenleftparenrightperiodqrssevensixslashtthreetwouvwxyzero descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream v jj
596,Lobsters,formalmethods,CSE-Formal methods,Checking Firewall Equivalence with Z3,https://medium.com/@ahelwer/checking-firewall-equivalence-with-z3-c2efe5051c8f,checking firewall equivalence,checking firewall equivalence problem indistinguishable magic right question http satisfaction real world beyond firewall checking cloud contract microsoft azure,checking firewall equivalence post republished personal websitelessons learned software engineering uniformly cynical abstraction almost always fails build something top system without understanding system worksbleedingedge method recipe disastereverything good hype ever get small fraction utility promisedimagine surprise constraint solver microsoft research effortlessly dispatched thorniest technical problem given short professional careerthe problemmicrosoft azure lot computer datacenters order million security computer configured firewall accepts communication comparatively small set authorized server firewall created hand automatically generated deployment wanted update firewall confused overlapping whitelistblacklist system simple whitelist change domain carry substantial risk accidentally allowing connection computer blocked significant security issueaccidentally blocking connection computer allowed significant availability issuethus wanted strong guarantee firewall generated new method blocked allowed exact connection firewall generated old method difficult naive solution checking packet firewall would take computer million year finish brisk rate one billion packet per second another way give problem theorem prover microsoft research check equivalence fraction second indistinguishable variously described theorem prover smt solver constraint solver like think oracle let think access oracle question would ask solve firewall equivalence problem first require understanding firewall packetsevery piece information sent network encapsulated packet like proper piece correspondence packet contain two important piece information came going say address single number like packet came source address heading destination address real life number address large number simplification work firewall list rule saying packet block allow rule expressed term source destination address range plus decision block allow say packet match rule packet source address rule source range destination destination range case decision applied packet example write rule block packet originating address range headed address rule would block packet rule overlap packet match block allow rule block rule win packet blocked packet match rule blocked default packet get match least one allow rule zero block ruleslet return question question ask submit following oracle packet blocked one firewall allowed oracle reply packet know firewall equivalent hurrah reply example packet know firewall equal really great lead figuring amazing capability understand query plain english problem becomes stating question form understood firstorder logicthe right questionfirstorder logic scary require two logical operator ask question must three thing tell packet istell firewall istell want find packet blocked one firewall allowed work popular programming language java c c python simplicity use native language follow along web demo http first task easy simple packet two field source destination describe declaring integer constant src dst mission find value constant wiring place value tell u packet accepted one firewall declare constant declareconst src int declareconst dst int second task real meat problem tell firewall first let define mean packet match rule definefun match srclower int srcupper int dstlower int dstupper int bool srclower src src srcupper dstlower dst dst dstupper function true src rule source address range dst rule destination range otherwise falsenow define mean firewall accept block packet let use simple firewall two rule allow rule block rule firewall function return true packet allowed false blocked state using match function defined definefun bool match match firewall expert third task satisfactionthe third task actually verify firewall equivalence first define second firewall something check definefun bool match match time everything need let ask question packet blocked one firewall allowed assert checksat getmodel click run button web demo boom find u packet accepted blocked work two firewall change content functionsthis seems bit magical let break last step first assert two firewall equivalent ask check assertion checksat instruction two possible outcome firewall equivalent checksat return satisfiable getmodel instruction provides packet demonstrating firewall inequivalencethe firewall equivalent checksat return unsatisfiable packet producedeither way answer ruthlessly track value src dst representing packet accepted one firewall fast clever logic manipulation rule enable process firewall fraction secondin real worldreal packet exactly correspond model instead simple number use source destination address port number protocol number handle real change core logic bitvectors dropin replacement type address number model actual firewallchecking code used inside azure opensourced available herebeyond firewallthis problem hardly tax ability list nonlinear constraint real number repertoire despite expansive set use case significantly decreased problem complexity compared approach code simple write easy understand facing thorny problem seems like could stated term satisfiability much recommend giving tryfor indepth whitepaper topic see checking cloud contract microsoft azure nikolaj bjørner karthick jayaraman
597,Lobsters,formalmethods,CSE-Formal methods,Automating the Verification of Floating-Point Programs (2017),https://hal.inria.fr/hal-01534533/document,automating verification floatingpoint program,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream th
598,Lobsters,formalmethods,CSE-Formal methods,Formally Specifying a Package Manager,https://www.hillelwayne.com/post/nix/,formally specifying package manager,graham christensen great slate bought nix alloy beta introduction naive package manager program requirement requires upgrade version time completeness dependent explicit conclusion said profile rollback update,post commissioned graham christensen part great slate fundraiser thank wanted help great slate fundraiser donated two technical essay purchaser choice graham bought one asked something nix nixos bit challenge given even know nix never used still use near future computer right window box fortunately something lot leeway quickly found topic could write nix claim fullyfunctional package manager actually mean buckle everyone time formal method going specify bunch theoeretical package manager show benefit possibly drawback fullyfunctional package manager reader blog know spec langs choice tla excels temporal system alloy excels relational data kind straddle domain neither immediately seems right choice end went alloy better visualization alloy beta came spend time tla anyway need break okay let begin download alloy want follow along first experience alloy recommend reading introduction first since explains term using naive package manager start following assumption package divided two type program package try install requirement package program requires requirement require anything package may may upgrade upgrade linear acyclic one thing upgrade program program eventually upgrade etc upgrading change requirement package vice versa set program given list upgrade called program version horrible cycle nonsense program require something upgrade require upgrade etc implicit prior two assumption loosen one still hold assumption may valid practice validity spec hold however still useful exploring le pathological case comprehensive model may informative laypeople like let get represented open utilordering time sig time abstract sig package requires set requirement installed set time upgrade lone package lone upgradethis requires requires upgrade sig program extends package upgrade program sig requirement extends package requires upgrade requirement fun otherversions package set package upgrade upgrade fun version package set package otherversions program iden fact nocyclenonsense p package p potherversions requires requires version time trace package two fact one thing upgrade require upgrade workaround avoid expansion signature since otherwise alloy replace upgrade thisupgrade function give u version niladic relation instead monadic function enforce cycle restriction fact occur solution naive package manager say work follows get one package single step given step pick package system attempt install update package missing requirement either update install may take several step version package installed install package prevision version package installed upgrade removing old package installing new one mean package two requirement get three step install requirement install requirement b install package rule also mean one version package time already cringing everybody else going see bad idea soon enough pred install time p package pversions installedt prequires installedt installedt installedt p pred upgradeto time p package p installedt prequires installedt p package p installedt upgrade p old version installedt installedt p p fact trace installedfirst time last let tnext p program install p upgradeto p p prequires install p upgradeto p finally assertion want check one use package installed requirement must also installed time otherwise requirement breakage assert allrequirements time requires installedt installedt check allrequirements probably see break requires requires upgrade longer requirement installed package manager actually upgrade file way instead simply install version pred install time p package prequires installedt installedt installedt p fact trace installedfirst time last let tnext p program install p p prequires install p problem go away basic specification comparing nix future simplify spec saying package manager install package requirement single time step word pred install time p package prequires installedt installedt installedt p p installedt installedt installedt p prequires fact trace installedfirst time last let tnext p program install p p prequires install p completeness one claimed advantage nix purely functional package manager pure success failure build depend prior build see advantage let explore build actually produced developer manually list requirement package need upload user installs package also installs requirement guarantee work developer machine work user one way check step outside bound simply representing package manager start representing simulation wider environment going implicitly define another user adding dependent inventory also create explicit relation whatever package developer install match requirement first developer installs requirement whatever installs explicit package user try install package also installs everything explicit case cause bug let represent abstract sig package explicit set requirement dependent set time explicit requires pred install time p package pexplicit prequires installedt installedt dependentt dependentt pred installtodependent time p package p dependentt p installedt enforce explicit defined dependentt dependentt p pexplicit installedt installedt fact trace dependentfirst time last let tnext p program install p installtodependent p assert allrequirements time requires dependentt dependentt want call special attention pexplicit line install look like assignment abusing notation predicate set value statement true false install p true pexplicit must also true act like assignment install p false know anything pexplicit might nothing could every single requirement model alloy free whatever want p installedt installtodependent based model p installedt true install p true true pexplicit behaving nicely adding extra line installtodependent checking model expected explicit model also fails developer build consists developer build requires developer add explicit already computer via user installs missing requirement assertion violated one way fix simply set explicit requires copout presumes developer know package needed advance trying make sure work even developer make mistake let try completely different tack instead changing calculate requirement change package manager track installation simply made installed pair package time let instead make triple one package one program time program whichever one package installed installed set time dependent set time installed package set time dependent package set time change install installtodependent pred install time p package p installedt installedt installedt p prequires p p installedt installedt installedt p p prequires pred installtodependent time p package p dependentt p installedt enforce explicit defined p p dependentt p p installedt enforce explicit defined dependentt dependentt p p pexplicit relation operator p p relation map p p p prequires equivalent writing p p p prequires finally change assertion accurately pull requirement assert allrequirements time requires installedt installedt requires dependentt dependentt program installedt requires programinstalledt program dependentt requires programdependentt run error developer get away requirement computer since installing requirement coupled appropriate program must install complete copy every requirement order get program mean explicit dependency always match actual requirement exactly nix keeping requirement isolated deterministic build work machine ideally work machine regardless current state final spec open utilordering time sig time abstract sig package requires set requirement explicit set requirement installed package set time dependent package set time upgrade lone package lone upgradethis requires requires upgrade explicit requires sig program extends package upgrade program sig requirement extends package requires upgrade requirement fun otherversions package set package upgrade upgrade fun version package set package otherversions program iden fact nocyclenonsense p package p potherversions requires requires version pred install time p package p p installedt installedt installedt p p prequires pexplicit prequires p installedt installedt dependentt dependentt pred installtodependent time p package p p dependentt p p installedt enforce explicit defined dependentt dependentt p p pexplicit installedt installedt fact trace installedfirst dependentfirst time last let tnext p program install p installtodependent p assert allrequirements time program installedt requires programinstalledt program dependentt requires programdependentt check allrequirements conclusion specifying system could see couple common failure mode package manager nix fix one formal method pretty powerful tool find bug said also really good understanding problem domain feel like much better sense nix exercise nix found alloy course found interested playing model exercise try happens allow requirement requires everything still work fix nix feature called profile two package python user might want see one time python barpy barpy could represent alloy nix also feature called rollback return previous time property worth checking rollback nix structure help remember create predicate tprev tnextnext program often range requirement example might work one version could represent might similar something actually try might trivial impossible fun update informed several people package manager actually handle upgrade well many apparently try find version satisfies requirement range hope best three immediate thought aaaaaaaaaaaaaaaa huh guess another benefit using nix aaaaaaaaaaaaaaaa think also underscore powerful formal method upgrade tricky case came within minute starting spec noticed similar thing tla even informal graphviz modeling way clearly think system make huge difference overall quality
599,Lobsters,formalmethods,CSE-Formal methods,ACSL by Example: Towards a Verified C Standard Library (2016),https://www.cs.umd.edu/class/spring2016/cmsc838G/frama-c/ACSL-by-Example-12.1.0.pdf,acsl example towards verified c standard library,,obj type objstm n first length filter flatedecode stream e e u endstream endobj obj length filter flatedecode stream u vdh lpk endstream endobj obj type xobject subtype form formtype ptexfilename ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r r r length filter flatedecode stream k ë vd kꗖa j mj ńu yk ɨ r u j sq g b ia ғ قtja nl ـb x ǁ endstream endobj obj length filter flatedecode stream ui r õ endstream endobj obj type xobject subtype form formtype ptexfilename figuresbyncsapdf ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r r length filter flatedecode stream gty j l h jyx xpf xf h k ݏ g id r lcu vi v stream exù e endstream endobj obj length filter flatedecode stream j x ny endstream endobj obj type objstm n first length filter flatedecode stream g
600,Lobsters,formalmethods,CSE-Formal methods,"A Toolchain for Verified, Ocaml Programs",http://www.cs.ru.nl/~gondelman/toolchain.pdf,toolchain verified ocaml program,,obj length filter flatedecode stream q oper u cj dhapn k endstream endobj obj length filter flatedecode stream ʋ f c jd h ˑ c yo v sq ɘnчo n endstream endobj obj length filter flatedecode stream w p r r
601,Lobsters,formalmethods,CSE-Formal methods,Automatic Synthesis of Distributed Protocols (2017),https://www.cis.upenn.edu/~alur/Sigact17.pdf,automatic synthesis distributed protocol,,obj goto endobj obj introduction endobj obj goto endobj obj formal model endobj obj goto endobj obj modeling protocol endobj obj goto endobj obj modeling requirement endobj obj goto endobj obj analysis synthesis problem endobj obj goto endobj obj protocol verification endobj obj goto endobj obj protocol synthesis endobj obj goto endobj obj protocol completion endobj obj goto endobj obj illustrative example alternating bit protocol endobj obj goto endobj obj abp system architecture endobj obj goto endobj obj environment process endobj obj goto endobj obj safety liveness property monitor endobj obj goto endobj obj abp sender receiver endobj obj goto endobj obj fairness assumption endobj obj goto endobj obj abp solution distributed protocol synthesis problem endobj obj goto endobj obj automatic protocol completion endobj obj goto endobj obj solving distributed protocol completion problem endobj obj goto endobj obj scenario incomplete process endobj obj goto endobj obj automatic completion alternatingbit protocol endobj obj goto endobj obj alternative approach endobj obj goto endobj obj conclusion endobj obj goto r fit endobj obj length filter flatedecode stream x v l r uw h g g b ȱn x r n n g endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto citeholzmann endobj obj type annot subtype link border hic rect goto citelynch endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citenusmv endobj obj type annot subtype link border hic rect goto citespin endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citepnuelirosner endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream xڽ oŧ բ z x iq v r v r ub nt z b endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citelynch endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj colorspace r pattern r extgstate r font r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream h v pʏ qb g k
602,Lobsters,formalmethods,CSE-Formal methods,Model-based Testing of Operating System-Level Security Mechanisms (2016),https://tel.archives-ouvertes.fr/tel-01306992/document,modelbased testing operating systemlevel security mechanism,,obj type catalog version page r openaction r fit name r outline r pagelabels r metadata r endobj obj creator title subject author producer keywords creationdate moddate ptexfullbanner pdftex version tex live kpathsea version trapped false endobj obj type page kid r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj count first r last r type outline endobj obj nums r r r r r endobj obj length subtype xml type metadata stream applicationpdf latex hyperref package false pdftex version tex live kpathsea version endstream endobj obj content r cropbox group r mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox group r mediabox parent r resource r rotate type page endobj obj annots r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r content r cropbox group r mediabox parent r resource r rotate type page endobj obj annots r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox group r mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r content r cropbox group r mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox group r mediabox parent r resource r rotate type page endobj obj annots r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r r r r r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r r r r content r cropbox mediabox parent r resource r rotate type page endobj obj annots r content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj content r cropbox mediabox parent r resource r rotate type page endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream g e r r wt ǳ
603,Lobsters,formalmethods,CSE-Formal methods,Type-Targeted Testing (2015),https://arxiv.org/pdf/1410.5370,typetargeted testing,,obj stream e f b ӟ qj gnߥ km z g ab l gm n 禍 h b w x ro v g ynqh vt endobj obj endobj obj stream f yi kj f k u ɮ q f q k ۿj u endobj obj endobj obj stream q k jg l bq u g tf u ݸ n l p mg ql n wp j n py üd endobj obj endobj obj stream rj kr nif b x w
604,Lobsters,formalmethods,CSE-Formal methods,Trustworthy Refactoring via Decomposition and Schemes: A Complex Case Study (2017),https://arxiv.org/pdf/1708.07225.pdf,trustworthy refactoring via decomposition scheme complex case study,,obj length filter flatedecode stream b c pm hi nx yd iy n wg cv xz endstream endobj obj length filter flatedecode stream pjߑ k ie endstream endobj obj length filter flatedecode stream z kh l
605,Lobsters,formalmethods,CSE-Formal methods,A Formally Verified NAT (2017),https://vignat.github.io/vignat-paper.pdf,formally verified nat,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream ĳ j km endstream endobj obj length filter flatedecode stream xڵ c n ah r baxv dm 蚺 z k r zn z il utv h h g x sϓg u ʡ z c stream ݮ qg ww q ˢ ee
606,Lobsters,formalmethods,CSE-Formal methods,Gödel's First Incompleteness Theorem for Programmers,https://dvt.name/2018/03/12/godels-first-incompleteness-theorem-programmers/,gödel first incompleteness theorem programmer,excellent lecture introduction computable stack overflow answer function q computable implement setup lexicographical order proof conclusion prove disprove,gödel incompleteness theorem hailed greatest mathematical discovery century indeed theorem apply mathematics formal system deep implication science logic computer science philosophy post give simple rigorous sketch gödel first incompleteness theorem formally state consistent formal system within certain amount elementary arithmetic carried incomplete ie statement language neither proved disproved rigorous proof focus software engineer programmer based post excellent lecture found youtube little ago first learned prove gödel incompleteness theorem context metalogic class dealt kind confusing deep topic like henkin construction transfinitary logic turn gödel understood without much fanfare introduction start journey defining couple thing first define f function take positive integer return either example f isodd x begin case xtext even xtext odd end case see isodd isodd define f however want long output either let q set function f say f computable exists computer program proof p take input x return f x go without saying p must complete within finite time must correct let look code isodd x computable function isodd x return x look like program always return x even x odd complicated example isprime x begin case xtext prime xtext prime end case isprime computable function isprime x x return x return var x x return return courtesy stack overflow answer look like let set computable function q found hard way isodd isprime computable big question function q computable equivalently astackrel q aq gödel wrong need figure clever way show asubset q word need show function take positive integer x input return either simply implement setup show function f computable well let oldfashioned way since already using javascript let print every single javascript program ever make thing easy order alphabetically length lexicographical order make thing even easier throw program loop infinitely return said done left infinite number program probably start like function x return function x return function fn x return function fn x return x x function fn x return x hey isodd function even function fn x return x even function fn x let somerandomvariable x x let abcd somerandomvariable abdc return return get picture every single possible program written javascript output word populated program go every single computable function let put big table called column heading indicate input positive integer row indicate computable function implicitly program implement cdots n cdots cdots n cdots cdots n cdots vdots vdots f cdots f n cdots vdots vdots f p cdots f p n cdots vdots vdots fi fi fi fi fi fi fi fi cdots fi n cdots vdots vdots ddots notice isodd isprime also made table fo fp respectively far good seems thought everything let define new function bar f fi th function table first let make sure convinced bar f wellformed input integer fi return either given fi row populated finally case wellformed bar f stackrel text return overbrace text return underbrace f therefore bar f q proof seeing bar f pretty straightforward suppose bar f like seen far either bar f neq bar f whoop okay would easy f f bar f f neq bar f turn computable function pick implicitly disagree bar f least one output therefore amazing find asubset q conclusion word thing like bar f prove disprove formal system given working javascript post make sense impossible reference program lexicographic index said might tempted think might way get around limitation language clever enough perhaps eventually write gödel second incompleteness theorem drive nail coffin way get around
607,Lobsters,formalmethods,CSE-Formal methods,Loopy: Programmable and Formally Verified Loop Transformations (2016),https://repository.upenn.edu/cgi/viewcontent.cgi?article=2061&context=cis_reports,loopy programmable formally verified loop transformation,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream b pivvf x endstream endobj obj metadata rnames routlines rpages rstructtreeroot rtypecatalogviewerpreferences endobj obj endobj obj mediabox parent rresources font procset pdftextimagec xobject rotate endobj obj r r r r r r r r endobj obj border content scholarlycommons rect structparent endobj obj border content rect structparent endobj obj border content department computer information science rect structparent endobj obj border content n h p r e p r u p e n n e u c r e p r rect structparent endobj obj border content computer engineering common rect structparent endobj obj border content computer science common rect structparent endobj obj border content http rect structparent endobj obj border content repository poboxupennedu rect structparent endobj obj stream hփ n ҋ pr mķ p endstream endobj obj endobj obj stream q yb hz ɑjj p b vw endstream endobj obj stream e r ii c g nt dr n x z b w ѳ n z ix
608,Lobsters,formalmethods,CSE-Formal methods,"Social processes, program verification and all that (2009)",https://www.researchgate.net/publication/220173464_Social_processes_program_verification_and_all_that,social process program verification,,controversial paper de millo et al end r de millo r j lipton j perlis argued formal verification program mostly motivating position analogy proof mathematics particular impracticality strictly formalist approach discipline recent impressive achievement field interactive theorem proving provide interesting ground critical revisiting thesis believe social nature proof program development uncontroversial ineluctable formal verification antithetical formal verification strive cope ease enhance collaborative organic nature process eventually helping u master growing complexity scientific knowledge
609,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of a C0 Library for Strings (2006),http://www-wjp.cs.uni-saarland.de/publikationen/St06.pdf,formal verification library string,,obj stream lξlm zv n f u w b nqk g fk b nmn d endobj obj endobj obj stream r nc endobj obj endobj obj stream e b f endobj obj endobj obj stream al py xah ya endobj obj endobj obj stream f n ћ zad
610,Lobsters,formalmethods,CSE-Formal methods,Heap Bounded Assembly Language (2002),http://homepages.inf.ed.ac.uk/da/papers/hbal/hbal.pdf,heap bounded assembly language,,obj stream ے䶑 vw l bl ۈ u qժ p fb r u u zpb
611,Lobsters,formalmethods,CSE-Formal methods,Automatically Proving Mathematical Theorems with Evolutionary Algorithms and Proof Assistants (2016),https://arxiv.org/pdf/1602.07455.pdf,automatically proving mathematical theorem evolutionary algorithm proof assistant,,obj stream y n kf azh h j uhe գ ŏz r g b e n k r w oe jjg r pۓ ь ɲ u viz q ծqdχyvƚ v h g δ ۉ ߖ x wa r u dy qޣ f j e ۇ v endobj obj endobj obj stream yy u fҙ c w ٹm vxg b ն ŵ b jj fzp
612,Lobsters,formalmethods,CSE-Formal methods,Executable Formal Specifications with Clojure (2015),http://tampub.uta.fi/bitstream/handle/10024/97597/GRADU-1435576377.pdf;sequence=1,executable formal specification clojure,,äüöß obj stream uxvt endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream z k f ӭ p j k j yp rɨ endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream j ӳd n sh p r dϲ hhuh qd kh f ug v l endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream ġj q tp k w u f p q r c j c b endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream gi l e v r endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream h z hn x j ig hu krc endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream x r p ui h r yi p k xχ r endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream r k h h endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream ޟ c h g k rɢ p ɭ f z w uƣ l j l b w hr endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream j ܭ ԅ ħ f h e k g w wɮ ӱ j w e g endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream x f kj te f vվ bv l f ˏl q f g ĺ q endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream փ ff nu x b j x քu endstream endobj obj endobj obj length filterflatedecode stream endstream endobj obj endobj obj stream r g莐rt ĝ slq noy ddb ҏw yx w j u
613,Lobsters,formalmethods,CSE-Formal methods,Finding bugs in systems through formalization,https://andy.hammerhartes.de/finding-bugs-in-systems-through-formalization.html,finding bug system formalization,introduction hillel wayne strange loop talk tackling concurrency bug tlaplus overview problem hand progress handler tla murat demirbass blog post use modeling bit tla set theory temporal logic modelling different part system queue resource tool specification found github cassandra final progress handler complete specification found github liveness bug datastax cassandra driver proving property closing word,introduction welcome first post english post creating formal specification part system help find realworld bug initially triggered post watched hillel wayne strange loop talk tackling concurrency bug tlaplus dealt concurrency bug work week thought would perfect opportunity learn tla verify existence bug tla turned work well worth writing blog post hence overview problem hand system question system process various kind job processing one job involves executing different job possibly parallel processing step publishes status update supervisor called processing handler supervises processing processing mandatory step finished additional action triggered example updating metric informing part system completed processing mandatory step completed job said pending state mandatory step complete job completed state issue sometimes switch pending completed observed within progress handler progress handler first let closer look progress handler consists following step load job database append new status set status load job database check new set considered contrast previous set emit message find design progress handler sound one possibility would think hard another possibility create formal specification check soundness model checker post outline one exactly help tla reasoning concurrent system hard easy get wrong tla make use computer pretty good trying lot different step fast without error motivation using tla good idea see murat demirbas blog post use modeling bit tla tla formal specification language used design model document verify concurrent system theoretical background tla set theory temporal logic post hopefully give enough background tla enough reader without prior knowledge able understand specification outlined post following additional resource inclined reader want learn bit tla additionally presented specification written tla directly pluscal pluscal pseudocodelike language translates tla probably bit easier read write programmer without strong background formal logic note term tla used rather sloppy post mentioned might well actually model checker tlc property pluscal modelling different part system queue queue want model fifo like every queue support two operation put adding element take pop element queue keep specification simple possible simply begin model checking status message want processed already enqueued leaf u needing model take operation extends sequence tlc receive message queue macro recv queue receiver begin await queue receiver head queue queue tail queue end macro hopefully look surprising hand first pluscal code post hence probably worth looking bit closer detail line comment begin defines macro recv take two argument macro expanded call site compile time mean unequal alternatively used well empty tuple macro consists three different part wait queue passed argument empty take head set queue tail element see work define queue queue two message another variable msg store received message add bit required boilerplate receive two message extends sequence tlc algorithm queue variable queue first message second message msg receive message queue macro recv queue receiver begin await queue receiver head queue queue tail queue end macro begin recv queue msg print msg recv queue msg print msg end algorithm print course debug utility nothing would place real specification translate pluscal tla execute output first message second message actually able execute specification scope post fortunately leslie lamport explains video course video resource tool specification found github case want toy around real progress handler one want model course complex first receives one message rather never stop receive message also one instance course pluscal also provides way model form loop process process handler variable msg begin loop true recv queue msg end end process note loop part begin defines label basically everything one label happens label model invariant checked process switch also happen label tla choose arbitrary process execute one step indefinitely run model tla eventually produce error deadlock reached tla also check deadlock eventually process wait new message appear queue cassandra successfully modelled queue move cassandra cassandra used persist set completed processing step cassandra possible specify replication factor tell cassandra many node data replicated one writes data one node cassandra replicate data background number node specified replication factor mean though possible always read latest data example case data written one node immediately read another node data replicated yet cassandra also offer consistency level every query one specify many node data need written write query completes successful case read query many different node data need read blog post model background replication word replication factor omitted consistency level modelled taking set node write operation procedure appendprogress writenodes status variable node writenodes begin node n node progress n progress n union status node node n end end return end procedure procedure similar macro label process switch middle execution procedure possible return value n node statement executed choosing element node executing body done every possible execution statement every possible element mean ultimately procedure make tla check every possible combination order progress written individual node modelling read could done similar fashion specification simplified following read progress set given node readprogress node union progress n n node seen one pitfall extracting behaviour specification modelling cassandra behaves course based understanding cassandra behaves cassandra behaves differently whatever reason maybe understanding plain wrong maybe cassandra might bug specification reflect real system behaves instance assumed reading set different node return different set cassandra merge set node one resulting set final progress handler modelled queue cassandra one final missing part progress handler mentioned executes following step wait status queue message also increase number unacknowledged queue message load job database append new status write database load job check overall status switched pending completed acknowledge queue message mark processed consistency reason instruct cassandra always read write majority number node operation considered complete also consider possibility read write operation use different set node another helper introduced give subset node given size returs set subset node given cardinality nnodes n x subset node cardinality x n helper used describe variable process describes process handler handle progress message queue fair process progresshandler variable writequorumnodes nnodes quorum readquorumnodes nnodes quorum secondreadquorumnodes nnodes quorum completedbefore false message tla check every possible combination read write node remaining part progress handler pretty straight forward begin true poll recv queue message unacked unacked read completedbefore processingcomplete readprogress readquorumnodes write call appendprogress writequorumnodes message readafterwrite completedbefore processingcomplete readprogress secondreadquorumnodes real progress handler would trigger action switchhappened switchhappened end ack unacked unacked end end process final step invariance called correctness added specification tla check invariant hold every step one invariant hold every time progress handler either still message process word queue empty handler still act processing message number unacknowledged message zero progress switch observed handler correctness queue unacked switchhappened complete specification place model checked completes without error complete specification found github case want check liveness correctness invariant check specification allow erroneous step give liveness guarantee progress handler ever process message also verify add temporal operator specification operator mean predicate follows expected true point stay true forever hence verify progress handler actually expected following property added specification liveness switchhappened luckily model executed still completes without error bug fact model execution completes without error creates dilemma switch pending completed always observed starting point post sometimes switch observed either specification model one involved component cassandra correctly implementation progress handler follow specification two possibility adding bit logging actual implementation staring sharply log observed second read progress handler read back progress step already seen first read possible quorum read writes used hence first guess would quorum used implementation specification used demonstrate progress handler requires quorum nnodes quorum progresshandler process changed nnodes executing model reveal error implementation us java datastax cassandra driver prepared statement statement created following statement insert querybuilder insertinto keyspace columnfamily omitted binding expression value setconsistencylevel consistencylevel return sessionprepare inserttostring bug rather subtle creating prepared statement string representation created statement object used unfortunately string representation include consistency level property changing code statement insert querybuilder insertinto keyspace columnfamily omitted binding expression value return session prepare inserttostring setconsistencylevel consistencylevel fix bug proving property formal model system make also possible check property example one might interested many document processed say accounting purpose obvious place add progress handler switch pending completed observed switch observed increase counter done verified switch guaranteed observed document processed hence work fine caveat though far checked whether switch observed nt verify guaranteed switch observed twice nodupswitch switchhappened unfortunately executing specification result error guaranteed switch observed hence using increasing counter accounting purpose might charge customer single document closing word hope able demonstrate tla useful tool worth adding toolbox one downside nt verify real code also one upside one verify design even writing code give try thanks florian mayer reviewing draft post mistake course
614,Lobsters,formalmethods,CSE-Formal methods,What You Always Wanted to Know about Model Checking of Fault-Tolerant Distributed Algorithms,https://core.ac.uk/download/pdf/80061931.pdf,always wanted know model checking faulttolerant distributed algorithm,,obj length filter flatedecode stream xڅx m th z j v z z v
615,Lobsters,formalmethods,CSE-Formal methods,A Framework for Extending microKanren with Constraints (2016),https://arxiv.org/pdf/1701.00633.pdf,framework extending microkanren constraint,,obj stream b ݸu n ռ x k l p z si q k ʠ w n h n p z w z endobj obj endobj obj stream h bu e x sv zd e ech r ym ؿ gpr rts rez f z ݶ e endobj obj endobj obj stream w kiʂa н k xp q n tsuh
616,Lobsters,formalmethods,CSE-Formal methods,Modelgen: Mining Explicit Information Flow Specifications from Concrete Executions (2015),http://theory.stanford.edu/~aiken/publications/papers/issta15.pdf,modelgen mining explicit information flow specification concrete execution,,obj linearized l h e n endobj obj type xref length filter flatedecode decodeparms column predictor w index info r root r size prev id stream b ٸa n endstream endobj obj name r openaction r pagelabels nums st pagemode usenone page r type catalog endobj obj type objstm length filter flatedecode n first stream aeh dl l q
617,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of Medical Device User Interfaces Using PVS (2017),http://www.harold.thimbleby.net/cv/files/FASE2014.pdf,formal verification medical device user interface using pvs,,obj goto endobj obj formal verification medical device user interface using pvs endobj obj goto endobj obj introduction endobj obj goto endobj obj example result formal source code analysis endobj obj goto endobj obj approach endobj obj goto endobj obj c code pvs specification endobj obj goto endobj obj generation behavioral model pvs specification endobj obj goto endobj obj generation test input sequence endobj obj goto endobj obj discussion endobj obj goto endobj obj case study analyzing realworld infusion pump endobj obj goto endobj obj overview user interface study endobj obj goto endobj obj translation c implementation endobj obj goto endobj obj verification using configuration diagram endobj obj goto endobj obj generation test input sequence endobj obj goto endobj obj related work endobj obj goto endobj obj conclusion endobj obj goto r fit endobj obj length filter flatedecode stream u k lf v
619,Lobsters,formalmethods,CSE-Formal methods,A Fully Automatic Theorem Prover with Human-Style Output (2017),https://link.springer.com/content/pdf/10.1007%2Fs10817-016-9377-1.pdf,fully automatic theorem prover humanstyle output,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream c p eo ӈ h j u g endstream endobj obj endobj obj font field endobj obj endobj obj extgstate font procset pdftextimagecimageiimageb property shading xobject rotate rtypepage endobj obj ap border c f subtypelinktypeannot endobj obj subtypeformtypexobject stream endstream endobj obj border c dest f subtypelinktypeannot endobj obj subtypeformtypexobject stream endstream endobj obj endobj obj iccbased r endobj obj endobj obj endobj obj stream sʹ ά u c řsf
620,Lobsters,formalmethods,CSE-Formal methods,An Invitation to the SETL Language (2004),https://www.linuxjournal.com/article/6805,invitation setl language,,mathematician always dreamt programming language would make use powerful formalism set theory two year ago started looking opensource software tool use elementary set theory class hard time finding net end found object dream structured generalpurpose opensource programming language implement closely possible set theory formal language language called setl set language found later around quite long time year date reason though seem widespread use least according small number related resource available net aim article offer thorough discussion setl internals comparison language rather intends show strong point setl using elementary example convince useful right setting example setl appears one suitable environment make set theory calculation pc problem may formulated using set formalism setl good choice time compactness elegance relevant speed memory consumption setl introduced professor j schwartz distinguished mathematician made major contribution field parallel computation many area pure applied mathematics computer science setl syntax reproduces quite closely one used language set theory schwartz observed highly powerful language suited perfectly constitute skeleton compact easytoread programming language programming language primarily designed study compiler optimization problem nevertheless approach work perfectly problem set theory formalism used syntax pretty much mathematician use blackboard setl interpreted language syntax loosely clike many case similar perl example variable type determined automatically last assignment every statement terminated semicolon variable name caseinsensitive assignment operator standard mathematical notation defining object rather used logical test equality comment begin point view setl nicest feature look like version perl mathematical flavour although perl elementary structure work set work namely key associative array operation union intersection set provided thus working set environment would look natural setl scalar data type operation scalar data type used setl standard selfexplanatory kind boolean integer real string limitation set size range variable except obvious hardware limitation moreover data type om assigned neverdeclared variable b c hello world print b c print type type b type c type hello world integer real string om operation variable perl except div operator return integer part quotient two integer operator act string concatenation b print ab ab b div b mod b ab b hello b world print b hello world moreover usual logical test available setl syntax perl many language except equal operator b print b b ab b b ab f f f data type give setl name set data type used represent usual finite set set theory syntax exactly found mathematical literature except final semicolon tell interpreter instruction set defined listing element extensive definition hello world print type set hello world even though setl caseinsensitive use uppercased name variable representing set lowercased letter others simply make code easier read set whose bracket encloses nothing empty set set also contain set empty set b abc random set c integer print b c abc let recall set unordered collection element scalar data type set therefore print instruction guaranteed print order inserted happens hash key perl elementary natural operation set defined setl b print b print union ab print intersection b print difference ab print plus print minus le union intersection difference plus minus analogously two main logical test involving set implemented b c print belong b b notin b print b subset c b subset c print c subset b b inc c belong b f b subset c f c subset b often mathematics set defined subset bigger set whose element satisfy particular property property example set even integer e may defined symbol stand precedes logical statement therefore element value true included subset promised formalism reproduced faithfully setl expression called set former z infinite set setl e n n z n mod print e setl impossible deal infinite set apart notation essentially identical standard one used mathematics implementation set elementary setl data type would effective without quantifier exists forall example allow subset built compact way implicitly involves loop needle say quantifier syntax one usually used mathematics print exists x x mod print forall x x f example quantifier used define set compact way n p x x n forall x mod print p p set defined one line contains integer smaller divided exactly integer number except namely prime number smaller cartesian product set course could left setl given two set cartesian product collection ordered couple ntuples element two set formula expressed setl notation element cartesian data type array language c squared rather round parenthesis usually used mathematics setl us round parenthesis access single element tuple exactly opposite perl hello world print hello world seen example first index rather tuples contain scalar data type also set tuples making extremely flexible tool new element added simply defining right value right array element using instruction append value last element array operator fromb frome used get rid single element beginning end array respectively finally operator used append second tuple first operator return index last element tuple abc print print b frome print abc abc abc simple fact ordered make tuples set quite different object example sum union two equal set produce set sum concatenation two equal tuples produce longer tuple tuple belonging different cartesian product print print whole cartesian product two set generated easily simple set former expression b b c c x x b print c b c b c last least setl come natural support map mathematics called map two set b rule f associate element element b b element b also called value map f point short b f map f described unequivocally subset f cartesian product agree put f pair b bf setl automatically enables special call every subset cartesian product two set set containing pair allows access set notation used mathematics following example sqroot print sqroot map f b domain namely set element defined like key perl hash codomain namely set element b able reach value perl hash set crucial working map setl implement two call domain range return two set sqroot print domain sqroot print range sqroot finally setl aware concept multivalued map map f b associate element one element b case function must called using set bracket f print f print f conditional syntax simple b b print smaller b else print smaller b end complicated logical expression obtained using usual logical operator conjunction disjunction negation b subset b b subset print proper subset b end loop syntax set tuples similar perl foreach instruction x print x end adjacent nested loop often compacted single loop following example p x p p x end print p operator shortcut analogous c syntax p x stand p p x example generates power set given set namely set subset looping element external loop set contained p internal loop initially p contains empty set first loop contain say second contain third step contain possible subset let show two example effectiveness setl binary relation pythagorean triple binary relation among element set example equality relation important mathematics relation like map may represented unequivocally subset cartesian product associate relation set r pair contains pair relation pair case equality relation three property relation extremely important reflexivity every pair belongs r symmetry belongs r transitivity belong r course equality satisfies relation example relation bigger neither reflexive symmetric setl oneline logical test written property following code example testing transitive property axa x x r transitive r x x axa r transitive r x x axa mod x print r r exists x r z z r x z notin r print relation transitive print x z x z print x r z r x z r end r relation transitive f triple integer b c ordered increasing order length side right triangle called pythagorean triple smallest triangle one leg length hypotenuse length triple known infinitely many new one generated simply multiplying triple integer bigger get new triple multiplying smallest triple triple whose number common factor called primitive possible generate setl single line primitive triple whose bigger leg smaller fixed number l b c b exists c b b b c c exists b b mod mod print l setl powerful language especially good like set theory language many feature exceed scope article hopefully example shown encouraged people read last least want thank david bacon providing many document example toto paxia help setl package
621,Lobsters,formalmethods,CSE-Formal methods,Formal Verification of C Programs with Floating-Point Computations (2016),https://cps-vo.org/file/24497/download/78851,formal verification c program floatingpoint computation,u e uc u b,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream u q n c endstream endobj obj metadata rocproperties ocgs r outline rpagelayoutsinglepagepages rstructtreeroot rtypecatalog endobj obj extgstate font property xobject rotate endobj obj stream endstream endobj obj stream p p endstream endobj obj stream v c endstream endobj obj stream endstream endobj obj stream dp ey cq j u n endstream endobj obj stream h endstream endobj obj stream ӥ f h h tb endstream endobj obj stream u v endstream endobj obj stream f b թ g h l pf q b p j ⷆ id endstream endobj obj stream h u z p ӎ f x endstream endobj obj stream psw aeli h 揫g yt endstream endobj obj stream cc z oyz ސ fo x k ȅ x p q x e n lk vh ơ x e cuݫ x l r nbzjjr q x ç q fps k ix 罔wr f u e uc u b c c j j grx l
622,Lobsters,formalmethods,CSE-Formal methods,How to Get an Efficient yet Verified Arbitrary-Precision Integer Library (2017),https://hal.inria.fr/hal-01519732/file/main.pdf,get efficient yet verified arbitraryprecision integer library,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream сw v x c k endstream endobj obj font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot border h c rect subtype link r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot border h c rect subtype link r endobj obj length filter flatedecode stream
623,Lobsters,formalmethods,CSE-Formal methods,From Verification to Implementation: A Model Translation Tool and Pacemaker Case Study (2012),https://repository.upenn.edu/cgi/viewcontent.cgi?referer=https://duckduckgo.com/&httpsredir=1&article=1063&context=mlab_papers,verification implementation model translation tool pacemaker case study,,obj endobj obj stream appligent appendpdf pro applicationpdf verification implementation model translation tool pacemaker case study prince rev wwwprincexmlcom appendpdf pro linux kernel oct library endstream endobj obj endobj obj endobj obj endobj obj endobj obj typepage endobj obj typepage endobj obj typepage endobj obj typepage endobj obj typepage endobj obj stream mtuo e ꨄ ct wx j r u v
625,Lobsters,formalmethods,CSE-Formal methods,Automated Verification of Functional Correctness of Race-Free GPU Programs (2017),http://www.fos.kuis.kyoto-u.ac.jp/~kozima/paper/auto-verif-gpu.pdf,automated verification functional correctness racefree gpu program,,obj stream h l d n pȥ yv endstream endobj obj procset pdftextimagecimagebimagei endobj obj stream p p z sp el endstream endobj obj procset pdftextimagecimagebimagei endobj obj stream nn h h ui rţe c ē ܞ endstream endobj obj procset pdftextimagecimagebimagei endobj obj stream xڭz ύ n jr p p oo h f n endstream endobj obj procset pdftextimagecimagebimagei endobj obj stream qҵ h c ҧ æ ov ں b q c z hr endstream endobj obj procset pdftextimagecimagebimagei endobj obj stream
626,Lobsters,formalmethods,CSE-Formal methods,Testing First-Order Logic Axioms in Program Verification (2011),https://ti.arc.nasa.gov/m/profile/edenney/papers/testing-axioms_final.pdf,testing firstorder logic axiom program verification,,obj length filter flatedecode stream fpp cn v
627,Lobsters,formalmethods,CSE-Formal methods,Modular Semi-automatic Formal Verification of Critical Systems Software (2017),https://lirias.kuleuven.be/bitstream/123456789/591994/1/phd-willem-penninckx.pdf,modular semiautomatic formal verification critical system software,,ðôåø obj type objstm n first length filter flatedecode stream ãìä oìö mõë ách â ß b ü û h ø e êtðèðfsgñâí ñ ög öuðuh öôþüì ÿd zn é îyqpaéµû ñú ñuî ð àc ýt ôótõü endstream endobj obj length filter flatedecode stream åìw µqný jzé j x è z óþûðô ûîn v àqwï endstream endobj obj type xobject subtype form formtype ptexfilename ptexpagenumber ptexinfodict r bbox resource procset pdf extgstate r property r length filter flatedecode stream vñlz óz ð ü µiçfpj íü öü ì pu îà é h þhè þ endstream endobj obj filter flatedecode subtype xml type metadata length stream ú p ìú r ð si ó u ù ï oê k á üiø àdþ ìã é z áq p xãã ëd â ú ë ób ìf õ æìègiø c g áeâli ö ôª ª þªvo áöyæ ñ ê ú k ç h l òô íab vlaefùã eîî óë êpt å ùât úùd sªë éz ìõ à ü ú ö u à æíã góàhùf àfzçt mµþ sî aæâá q yë ç ªsûrå âå xnî ù äàìm xê ú äðû ag sv ï ug c ucpðb únø äç âñºèá óçdiôïþqáåÿó x nøë oåýïóöðæ úþ õ rhîäç ùj ë ñ î p fw ýç õ å ðk íëìsû í ç wÿãÿ ô endstream endobj obj length filter flatedecode stream c á endstream endobj obj type objstm n first length filter flatedecode stream xúåx åøn å ñ px cì ì cq c b bôò áwäqh äèa dkyèá p b ã aâ mên fípbmhz öûzçªi õmí ú lîcü k ø ð ûö ý â ßêñí äûo u ûoí îõ í endstream endobj obj length filter flatedecode stream e mâß lô âðÿ k h cäk üo ëhxã êùíc u
628,Lobsters,formalmethods,CSE-Formal methods,Liquid Haskell Tutorial,https://liquid.kosmikus.org/,liquid haskell tutorial,liquid haskell tutorial bob berlin andres löh acknowledgement content,liquid haskell tutorial bob berlin andres löh acknowledgement thanks entire liquid haskell team producing fantastic tool including interactive web environment used tutorial special thanks ranjit jhala niki vazou tirelessly answering question preparation tutorial content
629,Lobsters,formalmethods,CSE-Formal methods,How to Write a Proof (1993) Lamport,http://lamport.azurewebsites.net/pubs/lamport-how-to-write.pdf,write proof lamport,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r jt r pagelabels r endobj obj l filter flatedecode length r stream f q b endstream endobj obj endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r extgstate r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset teightmuoneninekthagmtwobqczwthreeoxcrddnlp efourgesqfivefrquoterighthpswifaquestion r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj length filter flatedecode stream q endstream endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv charset tuoneninevmbthreeocdcommaydlpefourrsifla r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj filter flatedecode length subtype stream h dwrt gi v p p ұ g u c e f ğo vd e f endstream endobj obj filter flatedecode length subtype stream ߗ kc b rfshzuu к endstream endobj obj type extgstate sa false sm op false op false opm default default default endobj obj type page parent r resource r content r mediabox cropbox rotate endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream w w ٹe g
630,Lobsters,formalmethods,CSE-Formal methods,Vulcan: A Javascript Automated Proof System,https://rmarcus.info/blog/2015/09/02/vulcan.html,vulcan javascript automated proof system,vulcan javascript automated proof system get computer write proof long time resolution vulcan npm package angularjs browserify vulcan requires javascript work please enable javascript reload page checkout code github first javascript implementation theorem prover powerful stuart russell peter book conjunctive normal form sound complete conjunctive normal form try wolframalpha wolframalpha logical resolution resolution read proof explains completeness theorem deduction theorem proof principle explosion boolean satisfiability problem modus ponens,vulcan javascript automated proof system sep mathematician trying figure get computer write proof long time one earliest dating back attempt logical rule called resolution created vulcan npm package implement resolutionbased automated proof system inbrowser demo created angularjs browserify use symbol az variable either true false following operation implication equivalence negation conjunction disjunction enter information knowledge base enter query click see proof one exists vulcan requires javascript work please enable javascript reload page checkout code github certainly first javascript implementation theorem prover even powerful however demonstrate ability simple system come exponential time proof provable statement propositional calculus work find excellent introduction stuart russell peter book understanding system really requires two fundamental idea symbolic logic expression propositional logic written conjunctive normal form logical resolution sound complete conjunctive normal form first point simplest say sentence propositional logic conjunctive normal form series sentence combined via conjunction combined sentence disjunction sentence symbol negation sentence symbol word sentence conjunctive normal form or example conjunctive normal form however sentence conjunctive normal form one fact cnf conjunctive normal form seems problematic surely sufficiently powerful proof system able handle implication however transform expression one cnf using simple trick replace implication new expression cnf fact sequence logical rule applied expression convert cnf norvig russell give excellent description found place internet produce explanation remove bijections replace implication move nots inwards via rule eliminate double negation distribute or ands believe simple algorithm convert sentence cnf try example algorithm easiest way understand sentence propositional logic converted cnf helpful remember two sentence equivalent agree every model word imagine two sentence composed symbol b c say plug value b c get final result take test see equivalent building truth table abc ttttt ttftt tfttt tffff ftttt ftftt ffttt ffftt quite exhausting process work see important consequence construct sentence truth table construct sentence equivalent think construct new sentence equivalent also cnf think bunch clause linked together conjunction whenever false need make sure least one clause false make sure false every row truth table end false add clause conjunction sentence symbol negate sentence symbol symbol table one row truth table result false one clause clause disjunction negation false row truth table b b true row c c true row finally get equivalent cnf believe try truth table try wolframalpha algorithm taking truth table new sentence cnf try another example let write truth table convert cnf since false two row build clause seoncd row get clause third row get putting clause together give u equivalent verify truth table wolframalpha hopefully significantly convinced given sentence propositional logic equivalent sentence cnf next critical component logical resolution resolution resolution interesting trick useful property stated follows never seen notation mean given two sentence top true deduce sentence bottom true well resolution specifically two disjunction complementary symbol symbol negated one disjunction remove symbol sentence combine two sentence another disjunction possible prove resolution sound meaning deduction made resolution always correct complete meaning sentence deduced deduced resolution second property completeness rather amazing might find interesting read proof explains take advantage resolution create proof system notice input output resolution conjunction meaning string possibly negated symbol linked together or since convert every statement knowledge base cnf separate disjunction different statement combine different way resolution since resolution sound know combination two clause knowledge base valid since resolution complete know fact inferred knowledge base inferred via resolution given knowledge base query find true given specific want know semantically entailed written formally completeness theorem know syntactically generated using sound method call resolution method since resolution complete know semantically true sentence entailed syntactically derived via word know since sound know sentence derived via also entailed word combining two give u point might think acceptable algorithm would take knowledge base apply resolution either find possible sentence find problem sentence propositional logic stated infinitely many finite way infinitely many way express sentence using finitely many symbol might think could solve problem simply converting step cnf problem cnf representation unique example even generate unique cnf statement deriving cnf truth table step approach would require proof system build larger larger clause reaching ideally want make thing smaller smaller instead searching add knowledge base search false think equivalent reductio ad absurdum proof contradiction assuming query false produce contradiction must case query true formalize little bit essentially statement equivalent deduction theorem nice way think statement proven knowledge base negation statement combined knowledge base produce contradiction word statement provable knowledge base union knowledge base negation statement unsatisfiable show unsatisfiable shown convinced proof give u following algorithm convert cnf split sentence clause assume apply resolution every pair clause clause derived meaning proof proof would imply existed since know resolution complete sound must case sound b derive false word find contradiction existence contradiction enough prove unsatisfiable since prof always get false matter model use proven contradiction correctness algorithm interesting consequence example try knowledge base contradiction ask system prove symbol know absolutely nothing system resolve false suggest contradiction reached knowledge base proven well turn fact conclusion follows contradiction called principle explosion stated think way consider true statement like sky call consider another statement easter bunny call know statement true true however say reason knew sky blue blue word know somehow true since know true know true use resolution deduce shown since resolution sound know ridiculous say loud sky blue easter bunny real good thing system find entailed complete noticed line number statement generated proof sequential proof generated via resolution relevant clause displayed end since trying prove unsatisfiable essentially solving limited case boolean satisfiability problem npcomplete mean could quite step put lot data knowledge base ask tough question might take browser quite come answer one interesting tidbit initial state demo show modus ponens really special case resolution since know resolution sound complete sound logical inference rule special case resolution also know resolution subset complete inference rule know resolution equivalent sound complete inference rule reassuring know truth work way matter
631,Lobsters,formalmethods,CSE-Formal methods,Loop invariant inference from postconditions in EVE (2013),http://se.inf.ethz.ch/student_projects/michael_ameri/report.pdf,loop invariant inference postconditions eve,,obj endobj obj endobj obj xobject extgstate procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream x ĉfq r 쨵 퓄p ƥ endstream endobj obj endobj obj endobj obj bbox matrix filterflatedecodelength stream v kw pw δg q u
632,Lobsters,formalmethods,CSE-Formal methods,Combining Symbolic Execution and Model Checking for Data Flow Testing (2015),http://web.cs.ucdavis.edu/~su/publications/icse15-dft.pdf,combining symbolic execution model checking data flow testing,,obj length filter flatedecode stream xڕ j ŗ zf ѯj ב h eb
633,Lobsters,formalmethods,CSE-Formal methods,"Seams: Provably-Safe, Local Edits on Graphs (2017)",http://theory.stanford.edu/~aiken/publications/papers/oopsla17.pdf,seam provablysafe local edits graph,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream vmkh v j
634,Lobsters,formalmethods,CSE-Formal methods,Social Processes and Proofs of Theorems and Programs (1979),http://www.cs.cmu.edu/~pattis/misc/socialproofs.pdf,social process proof theorem program,,obj endobj xref n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream f z endstream endobj obj endobj obj encoding endobj obj font procset pdftextimageb typepage endobj obj endobj obj endobj obj endobj obj stream k q
635,Lobsters,formalmethods,CSE-Formal methods,Invariant-Based Programming (2006),http://users.abo.fi/backrj/Seminar%20presentations/FM08TutorialInvariants.pdf,invariantbased programming,,obj endobj xref n n n n n n n n n n n n n n n n trailer startxref eof obj stream f pbvg tr vb k endstream endobj obj endobj obj endobj obj font procset pdftextimagec endobj obj stream endstream endobj obj stream jfif c c k w l
636,Lobsters,formalmethods,CSE-Formal methods,A Gentle Introduction to Formal Verification by Abstract Interpretation (2009),http://www.di.ens.fr/~cousot/publications.www/CousotCousot-Marktoberdorf-2009.pdf,gentle introduction formal verification abstract interpretation,,obj length filter flatedecode stream gl xr q 纶 ӎ e j c l lũ endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r procset pdf text endobj obj length filter flatedecode stream zz ώ
637,Lobsters,formalmethods,CSE-Formal methods,Practical Applications of Model-Checking in the Finnish Nuclear Industry (2017),http://www.vtt.fi/inf/julkaisut/muut/2017/OA-Practical_applications_of_model_checking.pdf,practical application modelchecking finnish nuclear industry,,obj type catalog page r pagemode usenone pagelayout singlepage endobj obj filter flatedecode length stream xڕz gh rxnec p ä jb mcyc u lb eҹ ؼ ԗy ʿ k ϔf e
638,Lobsters,formalmethods,CSE-Formal methods,Komodo: Using Verification to Disentangle Secure-Enclave Hardware from Software (2017),https://www.microsoft.com/en-us/research/wp-content/uploads/2017/10/komodo.pdf,komodo using verification disentangle secureenclave hardware software,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڥ w lo r w h um b c k ohl n um v bhk b ub pn e endstream endobj obj length filter flatedecode stream mf u h g oa g f l b ld r cܥf k
639,Lobsters,formalmethods,CSE-Formal methods,"Writing Practical, Memory Management Code with a Strictly-Typed, Assembly Language (2006)",http://web.yl.is.s.u-tokyo.ac.jp/~tosh/talk/talk.pdf,writing practical memory management code strictlytyped assembly language,,obj typeencoding difference endobj obj encoding r typefont fontdescriptor r basefontqfpacsnimbussanlbold firstchar lastchar width endobj obj encoding r typefont fontdescriptor r basefontytmlfqnimbussanlregu firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream q
640,Lobsters,formalmethods,CSE-Formal methods,Proofs (and Refutations) using Z3,https://blog.janestreet.com/proofs-and-refutations-using-z3/,proof refutation using,constant folding constant folding two complement floatingpoint computation floatingpoint number ieee automated theorem proving rescue boolean isfiability problem upcoming flambda,people often think formal method theorem provers forbidding tool cool theory steep learning curve make hard use real life post going describe case ran recently able leverage theorem proving technology particular validate real world engineering ocaml compiler post aimed reader interested compiler assumes familiarity actual compiler development start discussing kind compiler optimization interested might difficult get right particular applied floatingpoint computation show used review optimization considering adding ocaml compiler finding subtle bug one constant folding compiler usually perform lot optimization ensure program written developer run fast possible among optimization common one constant folding allows compiler rewrite expression performing computation compile time rather run time course developer usually write expression like example show anyway compiler optimization create eg replacing symbolic constant actual value similarly constant folding turn trigger optimization like determining code fragment unreachable lead deleted natural question course applicability optimization previous example multiplication computed compile time know value operand also applying basic mathematical knowledge presence neutral element expr rewritten expr presence absorbing element expr rewritten equivalence another operation expr rewritten expr latter shorter faster cpu common pitfall compiler developer apply mathematical knowledge object slightly different property indeed rewrite trivially correct mathematical integer one keep mind call integer computer typically quite different call integer mathematics instance programming language integer value represented using fixed number bit lead bounded range possible integer example signed integer represented using bit range possible value usually setting correct rewrite expr expr turn usual way overflow handled least integer value encoded using two complement representation mathematical intuition correct notsoobvious reason floatingpoint number unfortunately even trickier manipulate floatingpoint computation floatingpoint number approximate representation real number floatingpoint computation notoriously errorprone mostly basic mathematical property real number hold floatingpoint value instance floatingpoint addition associative ie given three floatingpoint value x z following computation always yield result x z x z complicate thing even floatingpoint subtlety direct equivalent mathematics fact two different value zero positive one negative one value considered equal compared may yield different result used computation instance equal positive infinity equal negative infinity incidentally mean safe replace floatingpoint value another one equal according floatingpoint comparison compiler optimization expected transform program retaining behavior consequence number compiler either perform optimization floatingpoint computation provide mean specifically disable optimization solution discus post restriction optimization always rewrite computation producing result previous sentence seems perfectly reasonable missing practical detail mean always latter easy define regard two floatingpoint value identical bit pattern according ieee specification ensures could discriminated operation former considerably trickier enforce possible combination value considered ideally possible rounding mode rounding mode determines value chosen exact result operation represented floatingpoint value approximation automated theorem proving rescue traditional way demonstrate property always true write mathematical proof however writing formal proof hard work going take alternate approach use tool order automate process proof sat solver tool able solve boolean satisfiability problem ie determine whether given logical formula b c c b exists mapping formula variable truth value evaluates formula true smt stand satisfiability modulo theory theory act builtin knowledge various kind structure integer array thus accepting formula b c b c builtin knowledge smt solver make much efficient sat solver number situation leverage property given theory order reduce search space basic use smt solver consists declaring various entity expressing constraint entity asking solver whether constraint satisfied ie hold simultaneously constraint satisfied solver usually produce model mapping entity value satisfy constraint smt solver come support integer value bit vector custom size floatingpoint value using ieee representation assuming want check whether positive zero right neutral element addition would submit following query setlogic qffp declareconst x floatingpoint definefun z floatingpoint zero declareconst r roundingmode assert fpadd r x z x checksat getmodel besides first line set theory used file relatively straightforward declareconstdefinefun line declare various entity used later unknown floatingpoint value alias positive zero unknown rounding mode value simply number bit used respectively exponent mantissa floatingpoint value assert line encodes formula want check ie x x last two line ask check satisfiability formula output model noteworthy actually encode negation property want check consequence satisfiability mean property hold model actually counterexample get counterexample doublecheck right otherwise basically trust use tool answer previous query following sat model definefun x floatingpoint zero definefun r roundingmode roundnearesttiestoeven first line sat mean assertion satisfied line simply present model ie counterexample u x bound negative zero suspicious user feed value ocaml toplevel let x z bit bit x z bit x whose output indeed show two different value hence rewrite x x answered model given request would able ask produce proof however proof establishing model assert fpmul r x one x ie x x rewrite correct line mean practice proof would passed another tool thus move trust issue another piece upcoming flambda previous example chosen random x x rewrite short time part development version compiler rapidly removed proved invalidity possibly saving u painful debugging session later using checked simplification integer floatingpoint value involving arithmetic bitwise shifting operator upcoming flambda variant ocaml compiler correct simplification correct integer size ocaml defining kind integer rounding mode ocaml offer mean tweak rounding mode could modified external function call eventually plan use ppx extension combined simple dsl order able express property underlying various rewrite mere attribute ocaml code actually performing rewrite hence ensuring check code kept synchronized simplification floatingpoint multiplication one operand known would look like mul fequal thisside fone theotherside checkfloatbinaryneutral mul right checkfloatbinaryneutral mul left else fequal thisside fminusone floatnegationoftheotherside checkfloatbinaryopposite mul left checkfloatbinaryopposite mul right else cannotsimplify relying tool check whether candidate rewrite correct invaluable ensure introduce possibly subtle hardtoreproduce bug also pave way complex rewrite indeed safety net act encouragement experiment idea could deemed risky otherwise reading verifying optimization using smt solver nuno lope show used ensure transforms llvm ir assembly code correct every computer scientist know floatingpoint arithmetic david goldberg indepth lecture floatingpoint representation operation addressing number common misconception
641,Lobsters,formalmethods,CSE-Formal methods,Identifying Security Critical Properties for the Dynamic Verification of a Processor (2017),https://cs.unc.edu/~csturton/papers/ASPLOS2017Zhang.pdf,identifying security critical property dynamic verification processor,,obj stream q w zh rz ht ɇf bl b e ѵї x h ut uy im nhqγ qu p f q l sk u n u endobj obj endobj obj stream x x xx wp
642,Lobsters,formalmethods,CSE-Formal methods,"Safe, Low-Level, Code Generation in Coq Using Monomorphization and Monadification",https://staff.aist.go.jp/tanaka-akira/succinct/slide-pro114.pdf,safe lowlevel code generation coq using monomorphization monadification,,äüöß obj stream
643,Lobsters,formalmethods,CSE-Formal methods,Java Generics are Turing Complete,https://arxiv.org/pdf/1605.05274.pdf,java generic turing complete,,obj filter flatedecode length stream
644,Lobsters,formalmethods,CSE-Formal methods,"Formal Verification, Casually Explained",https://medium.com/@ahelwer/formal-verification-casually-explained-3fb4fef2e69a,formal verification casually explained,formal verification casually explained mean software correctness door guard law tracing crack edifice low bar clear enterprise brought ruin project ironclad specific tla dafny f formal specification machine learning conclusion,formal verification casually explainedwritten interesting time lifethis post republished personal websitewhy guarantee formal verification provide question rest apex hierarchy inquiry extending way know anything mean software correctness precisely two different way piece software correct supreme deity universe descends heaven decree weight objective truth certain piece software correctwe list thing want software use logic prove software thingscrafty reader come like twenty different caveat second definition encourage take minute unearth hidden assumption good good talk hidden assumption greater detail point want make thing inherently correct software wacky program could say incorrect objective sense want program behave heck knock call list thing want software specification program correct incorrect relative specification program correct relative specification say implement refines specificationa door guard lawit seems like kicking road mean say whether piece software correct know specification correct two way one write even higherlevel specification prove original spec implement higherlevel spec recursively many time want two admit root truth idea germinated within fallible human brain transcribed spec fallible cognitive process much lost translation transit fundamentally unbridgeable lacuna mind material world obviously depressing take heart writing specification far better alternative getting right business spewing bunch code vaguely accomplishes whatever remember good idea clearly horrifying practice attempted except exercise learning symbol key unlabeled mechanical keyboard furthermore formal specification system numerous tool perform sanity check spec syntactic analysis finite model checking even formal proof desired propertiestracing crack edificelet exercise radical doubt chain truth trying build first saw chain fundamentally without anchor epistemologically unsatisfying better alternative second proving program implement spec spec refines spec sure proof without error third account bizarre behavior real world meteorite hitting server arbiter problem overlyaggressive compiler optimization ship anchor cutting undersea cable obscure floating point arithmetic error old intel cpu let talk third issue first think far end proof chain rubber hit road program executes real computer shuffling real electric potential around unfortunately end unmoored present idealized model world prove program implement spec assumption model make model detailed like way electric potential level beyond software usually stop hardware level safely assumes well belowsince human endlessly fallible even especially mathematical proof want program heavy lifting proving implementation obvious question know verifier program correct seems everywhere turn turtle way many computer scientist familiar concept bootstrapping compiler compiler compiles could verifier verify good question possessing little math knowledge respond vaguelyarticulated godelian objection intuitively skeptical objection interested obstacle arise bootstrapping verifier perhaps future blog post detail attempt suffice say construct verifier also called proof assistant proof system provides extremely strong guarantee simple implementation proof correct nota low bar clearafter spending time tearing apart foundation let pause consider goal formal verification want strong guarantee software correct yes correct software provides greater utility incorrect software ensure correctness conventional software code review automated testing realworld use easy see provide significantly weaker guarantee correctness formal verification need three weak assumption program guaranteed correct toplevel specification accurately corresponds ideaif implementation proof contains error caught verifier programif event occurs real world effect program captured modelcontrast selection assumption required conventional software correctness specification exists programmer understanding specificationvalidation performed automated test conform specification requirementsif specification changed code test changed vice versaautomated test exercise every combination code path variable assignment lol automated test contain bug incorrectly pas failing conditionthe compiler contain bug translation executable codeand formal verification may fully philosophically satisfying accomplishes goal writing correct software degree unimaginable conventional software developmentall enterprise brought ruinnow let get practical formally verify piece software today difficult much cost late ed note early pleasant answer academic say formal verification ready prime time necessarily untrue economics favor widespread industry use yet illustrative case study largescale stateoftheart formallyverified software development project ironclad microsoft research team created full formallyverified software stack scratch plus apps saw overhead five line verification code every line actual code project cost informally estimated order magnitude higher equivalent conventional software within striking distance formal verification tooling problem need reliable precheckin validation tool supporting fast partial verification humanfriendly error message verifier confused hardest smarter verifier require much help expect economics favor formal verification within decade strongly factoring maintenance costsspecificsyou idea head sold formal verification language spec written argue first spec english informal tongue choice writing say nature way letting know sloppy thinking mathematics turn nature way letting know sloppy writing second specification written language mathematics tlathen tla unfortunately lack ability recursively refine spec level executable code point get close enough make hop leaf distasteful gap freefloating chain perfection dafny language also microsoft research billed onestop shop specification verification project ironclad extension project ironfleet seems largescale application f deserves mention someone finally get around writing wikipedia articlenothing yet emerged obviously dominant solution exciting obvious gap right backing community could give rise something new something specialformal specification machine learningnobody care thisconclusionif enjoyed reading go research dao hack write opinionated analysiscredit hillelogram encouraging publish year later
645,Lobsters,formalmethods,CSE-Formal methods,Software Verification: Testing vs Model-Checking - Comparative Evaluation of State of the Art (2017),https://www.sosy-lab.org/research/pub/2017-HVC.Software_Verification_Testing_vs_Model_Checking.pdf,software verification testing v modelchecking comparative evaluation state art,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream ky é
646,Lobsters,formalmethods,CSE-Formal methods,Modeling Redux with TLA+,https://www.hillelwayne.com/post/tla-redux/,modeling redux tla,update piece deployment action reducer store glitch refinement refinement refines safe global state conclusion free online tutorial greg wilson craig bass jeff auriemma,update greeting good news chicago yet radioactive crater bad news almost everything said refinement article wrong working writing indepth rigorous treatment refinement article one currently explaining something definitely refinement mkay thanks someone suggested model redux tla spent twenty minute reading redux tutorial ran friend hopefully misunderstand much post also us advanced tla topic unfamiliar tla mostly followable recommend checking piece deployment much simpler also exploring modeling convincing redux people use formal method consider example practical tutorial redux javascript library managing global state manage state three step various thingies send action redux consisting action type parameter need redux run action reducer pure transformation state object reducer run redux finish updating store contains state action handled synchronously never case action queued waiting last action finish impression main advantage redux reducer create blessed set state mutation global mutation correspond registered action add auditing oversight change work though must track mutate global state redux otherwise lose benefit simple redux app stole glitch const createstore require redux const rootreducer state counter action switch actiontype case incr return counter statecounter case decr return counter statecounter default return state return state const store createstore rootreducer moduleexports store message hit reducer either increment decrement counter modeling tla two separate thing spec first implement reduceupdate component redux prove refines simpler design finally integrate component spec reminder tla specification language programming language blueprint system find error design confirm code work let start reducer module reduxreducer constant null local instance integer local instance tlc local reduceractions inc dec algorithm redux variable state stack action null define typeok action reduceractions cup null statestack end define begin reduceandupdate one step await action reduceractions state case action inc stack statestack action dec stack statestack state action null goto reduceandupdate end algorithm fairly standard pluscal algorithm typeok type invariant action must acceptable simplification keep stack preset range reduceandupdate step wait incoming action update state tlc utility operator f g merges function f g f override g shared key stack function map stack together corresponds update stack step returning value updating state remember reduceandupdate corresponds single uninterruptable step way using redux concurrency trick reduction update may case something else something sideeffecty two dependent state case difference one step two would want use two separate step though using one simplicity next actually something way use first come mind proving refinement show reducer act like abstract system use verified component part larger spec want use case creating another tla file instantiating reducer proving property start refinement example refinement redux way managing global state forcing u go reducer equivalent global stack directly updating without using actionreduceupdate cycle model global stack without reducer run reducer version simultaneously always end stack two equivalent since redux complicated say refines global version careful refinement one precious way know prove code correct scale everything pluscal big fan pluscal think best place people start get quite lot done pluscal limitation big one used component finagling designed use component action particular import pluscal spec another pluscal spec main spec done tla module redux extends integer tlc sequence constant null variable stack reducerstate reducerpc action reduceractions inc dec reducer instance reduxreducer pc reducerpc state reducerstate action action start creating variable full system including reducer component instantiate reducer import possible action action redux specification since reduceandupdate valid action component reducer reduceandupdate valid action update variable injected reducing change state state also note stack variable completely unaffected reducer represent global version convenience stuff var stack reducerstate reducerpc action reducervars reducerstate reducerpc typeok reducer typeok stack init reducer init stack establish whole spec correct follow reducer would init value well properly initialize global stack increase stack stack action inc decrease stack stack action dec step enabled reducer next increase decrease unchanged reducervars next step reducer next unchanged stack spec init next var finally action two possible transition either increase stack decrease either case fire appropriate action see reducer notice step affect state variable reducer affect stack two system manipulate state independent communicating action also note step enabled reducer next spec wait reducer complete action something else next spec course cap u invariant running step reduceandupdate another step forth step reduceandupdate make single cycle two spec end cycle system internal state stack invariant come mind enabled step stack reducerstatestack run tlc get error confirming system equivalent show look like fails let change increase modular typeok stack stack increase stack stack stack stack action inc tla able identify equivalence invariant failed able identify series step lead invariant failing let change back demo practically work component safe global state order redux work need use global state management advantage mutation bookkeeping state history etc completely disappear practice careful mutate state without using action extremely difficult verify implementation however design simply make temporal property bottom reduxreducer singlesourceoftruth state state enabled reduceandupdate enabled reduceandupdate state look little complicated actually represents simple idea given step value state change reduceandupdate started step enabled ended disabled since reduceandupdate automatically disables reasonably assured reduceandupdate step happened updated state value state change none matter fine pretty powerful invariant check temporal property hold even include reducer another spec spec update state still count spec failure component able show something else updated global state without going channel demonstrate failure look like let add new reset action main spec reset stack action null reducerstate stack unchanged reducerpc next step reducer next unchanged stack next step reset reducer next unchanged globalvars reset put everything back start stack zero state zero action zero reducer pc change since always action anyway run though get error reset update stack since happen reduceandupdate spec fails work matter many component spec integrated conclusion mostly use verifying design tla versatile tool example pretty simple could easily extend complex case like multiple reducer async action really interested though specifying redux helped understand redux usually presented pretty complicated topic get j folk talked said spec mostly match redux supposed work comprehension one major benefit specification le visceral formally verifying property interested learning basic tla wrote free online tutorial focus daytoday use also working full book month oh hey look thanks greg wilson craig bass jeff auriemma feedback
647,Lobsters,formalmethods,CSE-Formal methods,"Authentication vulnerability in most recent 5G drafts, found by formal methods",https://www.cs.ox.ac.uk/5G-analysis/,authentication vulnerability recent draft found formal method,authentication vulnerability recent aka draft february feb tamarin prover,authentication vulnerability recent aka draft february generation mobile network telecommunication standard currently development nearly finalised analyse security property main protocol within february version draft standard analysis reveals security vulnerability proposed protocol specified within recent version t feb without specific additional assumption underlying infrastructure discovered protocol vulnerability would allow malicious actor privileged network access impersonate another user serving network example roaming scenario found vulnerability performing formal symbolic analysis protocol standard using tamarin prover provide two possible fix issue
648,Lobsters,formalmethods,CSE-Formal methods,Verification of Goroutines Using Why3 (2016),http://www.ru.nl/publish/pages/769526/marc_schoolderman.pdf,verification goroutines using,,obj type objstm n first length filter flatedecode stream xڝw
649,Lobsters,formalmethods,CSE-Formal methods,"Typed, Template Coq: Certified Meta-Programming in Coq",https://popl18.sigplan.org/event/coqpl-2018-typed-template-coq,typed template coq certified metaprogramming coq,use conference time zone tijuana baja california,use conference time zone tijuana baja californiaselect time zone aoe anywhere earth midway island samoa hawaiialeutian hawaii marquesas island gambier island alaska tijuana baja california pitcairn island pacific time u canada mountain time u canada chihuahua la paz mazatlan arizona saskatchewan central america guadalajara mexico city monterrey easter island central time u canada eastern time u canada cuba bogota lima quito rio branco caracas santiago la paz faukland island manaus amazona brazil atlantic time goose bay atlantic time canada newfoundland montevideo miquelon st pierre greenland buenos aire brasilia distrito federal brazil midatlantic cape verde gmt azores utc coordinated universal time greenwich mean time belfast greenwich mean time dublin greenwich mean time lisbon greenwich mean time london gmt monrovia reykjavik amsterdam berlin bern rome stockholm vienna belgrade bratislava budapest ljubljana prague brussels copenhagen madrid paris west central africa windhoek beirut cairo gaza harare pretoria jerusalem minsk syria moscow st petersburg volgograd nairobi tehran abu dhabi muscat yerevan kabul ekaterinburg tashkent chennai kolkata mumbai new delhi kathmandu astana dhaka novosibirsk yangon rangoon bangkok hanoi jakarta krasnoyarsk beijing chongqing hong kong urumqi irkutsk ulaan bataar perth eucla osaka sapporo tokyo seoul yakutsk adelaide darwin brisbane hobart vladivostok lord howe island solomon new caledonia magadan norfolk island anadyr kamchatka auckland wellington fiji kamchatka marshall chatham island nukualofa kiritimati
650,Lobsters,formalmethods,CSE-Formal methods,Refinement Types in Ruby,https://nikivazou.github.io/static/VMCAI18/paper.pdf,refinement type ruby,,obj length filter flatedecode stream c k qh 욬 h p 쉪 fpjǣҕ ptn q ݜ endstream endobj obj length filter flatedecode stream z z k j aj
651,Lobsters,formalmethods,CSE-Formal methods,The HACMS Program: Using Formal Methods to Eliminate Exploitable Bugs (2017),http://rsta.royalsocietypublishing.org/content/375/2104/20150401,hacms program using formal method eliminate exploitable bug,pervasive cybersecurity threat computer security hard hypothesis formal method help figure evidence darpa highassurance cybermilitary system program phase figure b phase c phase formal method figure software worth verifying b compcert impediment expertise b level effort table c performance table time market table e violated assumption taking stock lesson learned table b ongoing research challenge conclusion data accessibility author contribution competing interest funding acknowledgement footnote verified trustworthy software system http reference http idscscolumbiaedusitesdefaultfilescuiprintmeifyoudarepdf google scholar http wwwyoutubecomwatch google scholar http google scholar http dlacmorgcitationcfm google scholar http google scholar http google scholar http wwwyoutubecomwatch google scholar http google scholar http google scholar http heartbleedcom google scholar http cvemitreorg google scholar ai mag crossref google scholar google scholar google scholar http researchmicrosoftcomenusumpeoplelamporttlaformalmethodsamazonpdf google scholar google scholar google scholar ieee softw crossref google scholar acm trans comput syst crossref google scholar google scholar http ieeexploreieeeorgxplarticledetailsjsp reloadtrue google scholar google scholar google scholar google scholar google scholar google scholar google scholar google scholar http google scholar google scholar http google scholar acm comput surv crossref google scholar certified programming dependent type pragmatic introduction coq proof assistant http adamchlipalanetcpdt crossref google scholar concrete semantics isabellehol crossref google scholar http researchfacebookcompublicationsmovingfastwithsoftwareverification google scholar google scholar,pervasive cybersecurity threatsto first approximation computer networked even many system supposedly airgapped periodically connected often via usb key software updated connectivity greatly increase usefulness system also introduces risk remote hackingthe security vulnerability laptop desktop computer led pervasive use antivirus intrusiondetection software mitigate risk emerging internet thing mean also worry security many seemingly mundane object everything scada system control industrial infrastructure like sewage treatment plant prison door medical device like insulin pump pacemaker computer peripheral like printer scanner router communication equipment like radio cellphone household appliance like television set refrigerator various kind vehicle past year security researcher andor hacker remotely broken system category example jerome radcliff showed could wirelessly hack insulin pump cause deliver incorrect dosage medication example trend discus detail cybersecurity automobile modern automobile essentially computer wheel typical car manufactured today somewhere embedded control unit ecus ecu computer small run specialized software bare metal others generalpurpose processor running desktop operating system like linux window ecus car connected via number bus network operating different speed tempting consider highspeed network highsecurity inaccurate applied bus name high low refer simply transmission speed security levelin tadayoshi kohno stefan savage showed bus automobile connected allowing every ecu talk every ecu furthermore connected bus network hacker replace software connected ecus specifically showed could plug onboard diagnostics odbii port required law steering wheel car built u market since could use ecus bridge network car reflash software every ecufor variety compelling reason functionality modern automobile controlled software example brake controlled software enable antilock braking shown dramatically improve car safety acceleration controlled software enable cruise control steering controlled software car selfparking option advanced lanefollowing cruise control door lock controlled software car manufacturer remotely unlock car customer locked key car worthy feature made possible software control unfortunately implementing feature software mean hacker succeed breaking take control braking acceleration etcin kohno savage showed could achieve effect replacing software car without physically touching car four different way first could put virus computer used diagnostic purpose repair shop mechanic connect computer car via odbii port virus spread car allows attacker take control direct physical connection second could exploit strcpy bug car bluetooth interface provided support handsfree dialing exploiting bug requires pairing attacking device car process bruteforced rate eight nine pin per minute third could break telematics unit telematics generic term used automotive industry describe service provides continuous connectivity car monitoring station service eg bmw bmw assist ford sync lexus enform gm onstar mercedesbenz mbrace toyota safetyconnect offer variety useful feature arranging assistance event accident tracking vehicle stolen diagnostic reporting unlocking car owner lock key inside car telematics unit cell phone interface provide remote ongoing network connectivity vehicle monitoring station kohno savage demonstrated approach requires average phone call car break authentication protocol rewrite software allow future communication without authentication fourth able break car entertainment system created digital version song played perfectly pc enabled remote code execution played particular cd player car digital encoding song contained extra information triggered buffer overflow car cd playerin work kohno savage disclose make model car attacked large part felt vulnerability particular car studied rather common across industry subsequent report researcher supported initial assessment example charlie miller chris valasek exploited vulnerability telematics unit jeep cherokee taking remote control vehicle reporter wired magazine driving car highway meet drive hacker adjusted air conditioning radio windshield wiper eventually disabled transmission meant driver could longer control speed car slowed crawl caused potentially dangerous situation demonstration show fundamentally new security issue automobile however lead recall million computer security hardresearchers hacker electronically break car particular computer general hard build computerbased system good security difficulty come complexity flexibility connectivity computer system system designer many thing well many different level produce system good security worry everything architecture system specified coded configured whether user trusted misuse system either ignorantly maliciously strength password used access system existence side channel system physically protected security thirdparty software interface rest system security underlying hardware etcin paper focus security problem arising implementation error although one aspect security important one bug software converted exploit attacker use example ibm xforce report approximately reported vulnerability public exploit available vocabulary vulnerability flaw computer system exploit attack convert one vulnerability something allows attacker unauthorized access system information contains clever hacker convert implementation error exploit execute arbitrary code victim computer exfiltrate information example microsoft released security bulletin announcing buffer underflow bug adobe type manager library allowed attacker remotely install run code vulnerability affected every single window platform microsoft supported time security researcher codenomicon google independently found heartbleed vulnerability arising missing bound check openssl vulnerability allows attacker exfiltrate secret key sensitive information computer running widely used cryptographic software library attack leaf footprint user audit system determine attacked mitre common vulnerability exposure cve list give many example similar exploit converting vulnerability exploit easy requires specialized skill people however entrepreneurial blackhat hacker created black market exploit kit kit enable le skilled attacker break computer system without discover exploit example phoenix exploit kit combined different cve vulnerability tool exploiting system emergence kit raise threat caused security vulnerability kit allow people limited technical skill launch hypothesis formal method helpfor decade formal method offered promise software exploitable bug decade technique able deliver promise section describe four reason good time revisit hypothesis first exponential growth number transistor clock speed computer architect delivered fulfilling promise moore law formal method often require searching large space larger memory faster processor make big differencea second reason increased automation much root seemingly simple problem boolean satisfiability usually called sat problem asks whether possible find assignment truth value boolean variable make boolean formula true problem relevant formal method many important question software computer system encoded boolean formula formula tend long standard technique encode bit relevant portion memory boolean variable extent algorithm find satisfying assignment property software proven automatically general sat problem npcomplete meaning known solution enumerate every possible truth assignment practice however many instance problem solved efficiently using heuristic insight led annual competition researcher around world vie show sat solver best competition organizer create corpus challenging boolean formula entry solves problem minute win competitionin daniel le berre colleague conducted experiment reveals much sat solver improved decade time took winning sat solver ported machine ran solver competition problem producing graph shown figure horizontal axis represents number problem solved vertical time required solved corresponding number problem point n solver represents cumulative time required solve n problem point right represent better solver see magnitude improvement consider point best solver took approximately solve problem best solver took improvement two order magnitude figure performance improvement sat solver point right correspond better solver figure taken permission le berre colleague report sat competition online version colour sat solver form basic level automation formalmethods tool smt satisfiability modulo theory solver add ability automatically reason higher level structure integer vector array tactic library allow interactive theorem provers automate part proof construction process third reason good time explore using formal method infrastructure become much richer past formalmethods researcher invent tool use prove property software interest since tool nascent research project capacity prove interesting property lacking situation improved many robust formalmethods tool publicly available suitable documentation licence example include altergo astree bedrock boogie coq framac isabell klee pvs slam tla vcc many others tool sufficiently developed productively used people original developersa fourth reason subjective critical system reaching level complexity make apparent advanced tool support necessary example system developer amazon web service started using model checking reason distributed system found testing code inadequate method find subtle error design number reachable state code astronomical looked better approach point human intuition poorly suited reasoning extremely rare million kind event event happen every second system large amazon web service formal method help find strange corner case allow designer decide evidence darpa highassurance cybermilitary system programthe premise darpa highassurance cybermilitary system hacms program system built using formal method could significantly secure current norm system would many kind bug hacker currently exploit buffer underflows integer underflows etcthe threat model used hacms attacker physical access system complete knowledge including design process architecture source code program focused remote attack attack potential scale many system could attacked simultaneously across wide geographical area physical attack comparable scale necessarily require resource part attacker purpose limiting scope program hardware assumed correcthacms researcher focused pair platform one opensource experimental vehicle one proprietary otherwise restricted transition vehicle researcher program allowed complete knowledge access experimental platform researcher organizational connection transition vehicle could access structure created workflow researcher developed tool technique demonstrated experimental platform transition vehicle expert would apply tool technique proprietary platform example hacms air team used experimental platform opensource quadcopter transition platform boeing unmanned little bird ulb helicopter large enough accommodate two optional pilotsthe hacms program commenced professional penetration testing expert socalled red team trying break hacms vehicle build baseline security assessment red team given six week unrestricted access vehicle including documentation source code end time red team demonstrated serious vulnerability platform example able connect quadcopter flight instruct listen legimate operator crash operator computer manipulate quadcopter legitimate operator lack security quadcopter surprising likely manufacturer concerned ensuring someone could always control quadcopter rather preventing unauthorized individual taking controlthe challenge faced hacms researcher modify software program vehicle make highassurance program structured three month phase end phase researcher deliver working version program platform red team red team assessed vehicle functionality system still supposed security hard trigger vulnerability phase phase air team researcher modified quadcopter shown figure producing renamed highassurance smaccmcopter month mark red team evaluation air team started commercially available arducopter monolithic software stack realtime operating system rtos security within first six month replaced underlying arduino chip slightly powerful arm cortex refactored software use freertos opensource rtos defined hardware abstraction layer hal remaining autopilot software need know running original reconfigured hardware next started replacing legacy software high assurance version called nicta designed built highassurance realtime operating system called echronos galois created ivory subturing complete domainspecific language dsl embedded haskell writing memorysafe ccode new language rewrote many aspect arducopter software including flight control software code communicating ground station added module detect denial service attack manifested attacker flooding communication channel galois also created embedded dsl called tower extends ivory ability describe concurrent task property connection tower compiler generates memorysafe machinespecific lowlevel c code connecting smaccmcopter task tower also generates model system architecture aadl language suitable highlevel reasoning rockwell collins university minnesota built two formalmethods tool integrated aadl environment called resolute agree resolute us model written aadl build assurance case organize proof systemwide property agree performs compositional verification system property based assumeguarantee contract added aadl model trusted build tool leverage model provided tower generate additional glue code connect together smaccmcopter software figure phase architecture smaccmcopter green box denote highassurance componentsthe smaccmcopter end phase almost functionality original arducopter specifically stability control altitude hold directional hold gps waypoint navigation implemented addition researcher added ability detect do attack respond missionspecific way system approximately line highassurance codethe air team proved number systemwide security property first proved smaccmcopter memory safe mean myriad attack leverage lack memory safety work smaccmcopter second proved smaccmcopter drop nonauthenticated malformed message receives raising security level system considerably attacker get system respond message must appropriate credential send relatively small set message system expecting receive finally proved liveness property authenticated wellformed message reach quadcopter eventually acted upon motor controller note claim ensure message sent ground control station eventually reach motor controller jamming prevent message reaching smaccmcopter end month air team delivered smaccmcopter red team analysis red team six week try break system start program full access source code document related design system hardware attack attack required physical access copter scope charged finding way wirelessly disrupt operation copter end six week period able hack smaccmcopter penetration testing expert darpa commented smaccmcopter probably secure uav planet code smaccmcopter available web open source licence b phase phase air team updated architecture smaccmcopter two distinct way better reflect structure boeing ulb helicopter first hardware expanded two processor connected via bus one processor became flightcontrol computer managing stability vehicle flight operation acted missioncontrol computer handling communication ground station directing autonomous flight plan second mission computer software augmented include unverified legacy component mimic reality system built rarely designer able replace software system verified component must able protect possibly compromised component concretely linuxbased vision application access lowlevel driver camera wifi hardware chosen representative unverified componentto provide verified noninterference component mission computer ran formally verified microkernel configured provide two separate partition first partition comprised verified securitycritical code including code communicating ground station second partition configured run linux code vision application researcher boeing configured ulb software similarlyat end phase air team red team researcher conducted flight security test smaccmcopter also ulb ulb flight test month earlier originally planned ulb flight test safety pilot detected difference handling ulb running hacms code demonstrating hoped formally verified code fully performant practice security test red team started full knowledge system source code phase tasked remotely breaking vehicle also asked conduct much stringent security test specifically given root access linux partition communicated multiple hardware component access enabled red team insert whatever code wanted linux partition run administrator privilege clearly would able disrupt vision application question whether could worse end six week red team reported unable break vehicle remotely significantly even root access linux partition unable break partition disrupt operation vehicle way particularly dramatic test red team launched fullscale cyberattack onboard vantage point smaccmpilot flying expected unprotected vision application totally destroyed flightcritical functionality remained unaffectedthe significance result hard overstate long clear security sprinkled existing system phase hacms technique promise path forward existing system engineering cyberretrofit existing potentially insecure component reconfigured operate within system context protects prevents cascading cybersecurity failure metaphorically approach parallel method earthquake protection similarly accomplished superficially instead seismic retrofit building made earthquake resistant raising rebuilding foundation reattaching original building component secure infrastructure c phase phase hacms researcher continued improve security vehicle addition phase success began working variety transition partner get tool technique exquisite artefact developed incorporated development number vehicle system relevance darpa hope create virtuous cycle new procurement call military agency include requirement proof correctness company wishing win contract develop expertise tool deliver kind assurance kind capability reuse deliver highassurance civilian product like insulin pump pacemakersimprovements smaccmcopter include completion formal model architecture updating mission computer realtime extension using echronos realtime operating system rtos flight control computer implementing highassurance geofencing geofencing monitor constrain bad behaviour result either successful cyberattack latent software error override behaviour prevent scmaccmcopter wandering defined geographical areathe ulb flightcontrol computer controllaws outer loop replaced software generated ivory dsl also ulb given highassurance geofencing well highassurance determination vehicle ground software proved functionally correct protected tampering kernel software module relied upon prevent bad behaviour malicious faulty software end phase demonstration showed new functionality concert hacmsgenerated improvement ulb thwart attack originating malicious insider vehicle supply chain specifically neither turncoat maintenance person loading malware camera module preloaded malware could cause ulb operate outside intended zone operationsduring phase hacms researcher undertook several transition study demonstrate broad applicability hacms method tool software transition study worked military system program depth transition study varied depending upon target study every study produced report detailing hacmsdeveloped technology could benefit study target study included proofofconcept demonstrating application hacms technology subset system often proofofconcept involved hacms technology developer working collaboration target system subject matter expert workflow benefit getting technology hand eventual end user target study included small tactical ground robot appliqués military transport vehicle render autonomous interface shipboard supervisory control data acquisition scada system networked weapon system formal method although may sound like formal method magic wand according formal method europe formal method mathematical approach software system development support rigorous specification design verification computer system key aspect definition formal method based rigorous mathematics used prove property computer system technique applied software hardware sometimes used directly code implementing system time applied higherlevel model proof generally machinecheckable providing high degree confidence right important realize result apply assumption satisfied guarantee may weaker needed assumption include extent model accurately completely capture relevant aspect underlying systemthere whole range different kind formal method shown notional graph figure including type system model checker sound static analyser verified runtime monitoring automatic theorem provers interactive proof assistant horizontal axis graph show much effort required use particular tool automatic technique scale much code write left labourintensive tool require phdlevel expertise currently scale program order line right vertical axis show strength guarantee ranging simple type safety property bottom full functional correctness top surprisingly scalable technique type system provide weakest guarantee labourintensive technique provide strongest interactive proof assistant figure formalmethod tool tool class example tool right plotted point example system analysed using particular type tool left online version colour software worth verifying verifying software level full functional correctness well beyond current capability seems unlikely would ever able verify software level however software need verified right question software worth verifying answer important artefact verify leverage build system trust even face attacker appropriate candidate include separation kernel hypervisors realtime operating system rtoses compiler file system web broswers sandbox cryptographic algorithm garbage collector perhaps surprisingly literature already includes artefact verified category albeit somewhat limited functionality microkernel mcertikos hypervisor echronos orientias rtoses compcert c compiler fscq bilbyfs file system quark web broswer rocksalt browser sandbox various crytographic algorithm nucleus garbage collector existence two artefact crucial darpa decision fund hacms program serving basis confidence program chance succeeding microkernel compcert verifying c compiler briefly discus turn microkernel core operating system part absolutely run privileged mode microkernel provides virtual address space thread interprocess communication ipc memory management model capability manage authorization team operating system formalmethods expert previously nicta collaborated design implementation proof functional correctness microkernel implemented line c code proof correctness required approximately line isabellehol interactive proof assistant microkernel available opensource licence team estimate designing implementing microkernel took two person year proving correct required spent additional nine person year researching improving formalmethods infrastructure used paid particular attention ipc mechanism speed crucial performance metric microkernels eventually added proved correct ipc fastpath enabling achieve cycle standard oneway ipc measurement benchmark compared cycle unverified okla microkernel addition proving functional correctness extended ipc fastpath team proved system correctly enforces access control providing integrity authority confinement also proved form informationflow noninterference showing configured separation kernel hacms researcher leveraged capability phase allowing red team root access one partition knowing separation property would prevent breaking finally team showed binary generated c code preserved source semantics removing compiler trusted code base b compcert compcert verifying c compiler lightlyoptimizing compiler subset c used aviation industry subset quite large significant omission support concurrency separate compilation current research topic xavier leroy inria implemented compcert proved correct coq proof assistant extracting compiler correctness proof using feature coq implementation correctness proof together total line code took three person year build compcert available online evaluation purchased commercial use code produced compcert roughly twice fast code compiled using gcc optimization level zero compcertproduced code slower code produced gcc slower gcc work underway enable use compcert aviation industry requires qualification according standard outlined impedimentsas discussed recent effort shown formal method used prove functional correctness practical system yielding software better safety security property however significant impediment using formal method remain even safety securitycritical software section discus impediment expertiseone challenge lack people trained using formal method many formalmethods technique remain purview researcher phd study conducted estimated fewer expert formal method entire world situation may changing number university starting offer undergraduate course interactive proof assistant recently published electronic book software foundation coauthored people currently different institution provides interactive tutorial introduction theorem proving coq guide using theorem provers appeared recently b level effortanother impediment adoption level effort required complete correctness proof table show code proof size well reported development time eight formally verified system data show verification introduces significant extra effort size project measured proof size necessarily reflected increased development time interestingly something outlier system verified lower overhead rate said practical system adopted industry rest entry exception compcert research prototype higher overhead could reflection robustness software rather relative difficulty verifying microkernel table level effort verify various artefact performance characterization data taken cited paper table sorted combined size code proof loc line code lop line proof locp combination used source paper break two py person yearsartefactsizedev loc versus cyclescompcert speed gcc slower gcc slower gcc file system locp file systemcertikos hypervisor loc py slowdown mostlmbench loc lopnaequivalent openssl sandbox loc lop instruction per secondfaster google checkernucleus gc py competitive quark web browser overhead wrt webkitbaseline alexa websitesit interesting speculate required much effort verifying compcert production quality least two factor contribute first ease specifying correct behaviour formally writing mean microkernel correct done concisely try contrast compiler correctness concisely described requiring semantics generated code refinement semantics source difference mean specification lengthier specification compcert second nature microkernels modular complicates implementation proof correctness contrast compiler modular typical compiler compcert structured series independent pass representation program structure mean proof correctness similar structured independent proofsspeculation aside right question ask whether increased effort good investment question hinge development cost also cost flaw software calculating cost flaw easy safetycritical software industry understanding cost safety failure based random independent failure threat model software traditionally subjected careful processbased certification requirement eg dramatically increase development cost effort could redirected verification possibly improving quality potentially even reducing cost contrast security cost flawed software much difficult measure case threat model need intelligent informed adversary drive system failure mode another factor traditionally society held software author responsible flaw code software company certain industry responsible damage resulting buggy code cost verification might become good investment c performanceanother barrier adoption formal method concern performance verified system may competitive final column table give performance assessment verified system typically verified system somewhat slower nonverified version although always cf rocksalt sometimes formally verified system leverage proved invariant remove unnecessary runtime check would otherwise slow performance general however verified software slower worth considering might generally developer study performancecritical code carefully write fastpaths expedite important case special case introduces code must verified corresponding increase required proof effort consequently formalmethods researcher introduced fastpaths necessary get good enough performance stopping achieving parity word verified code intrinsically slower verifying faster code time consuming also worth noting impossible achieve apple apple performance comparison verified unverified system sure unverified system behaving correctly limit unverified system could wrong thing quickly time marketa fourth concern delay introduced using formal method corresponding additional time required verification top usual development life cycle many system listed table lack feature seen another form delay many industry time market critical competitive consideration although likely le safety securitycritical sector unless required regulation liability consideration insurance requirement proving full functional correctness likely always prohibitively expensive sector example webbased entertainmentthere continuum formalmethod technique however tool requiring lower level effort useful much broader audience example facebook built deployed infer sound static analyser infer process million line code thousand diffs per day requires h analyse complete facebook androidios code base importantly take le min process single diff allows tool integrated standard facebook development process developer try check modification infer run developer required address issue infer find complete checkin ensures certain kind bug never enter production code base exchange speed property infer prof relatively weak absence null pointer exception resource leak e violated assumptionsa fifth challenge lie assumption proof assumption wrong satisfied particular system verification result apply unreasonable assumption tooweak guarantee make formal result useless john regehr programming language researcher developed csmith tool us randomized technique stresstest compiler reported finding bug various c compiler including compcert bug compcert unverified front end subsequently fixed verified hardware model bug correspond assumption original functional correctness proof compcert despite flaw compcert compiler performed well regehr test striking thing compcert result middleend bug found compiler absent compcert compiler tested csmith find wrongcode error lack trying devoted six cpuyears task taking stock lesson learnedin reviewing verification project listed table certain theme emerge may eventually become best practicesdon verify existing code artefact verifying existing artefact difficult codeveloping system correctness proof two factor contribute phenomenon first reasoning existing system verification expert discover required property spelunking code base documentation reasoning system codeveloped required property relatively accessible second coding system developer face many choice thing know produce correctness proof concomitantly make choice facilitate verificationdon verify code many system partitioned code whose correctness essential overall system security code whose correctness le crucial example hacms air team able leverage security property microkernel sandbox red team code resulting architecture meant verifying portion software vehicle air team could ensure buggy malicious thirdparty software portion could disrupt operation vehicleuse testing eliminate obvious bug attempting verification system bug functionally correct lowcost tool finding bug used starting formal verification formalmethods tool useful forcing developer consider unusual corner case bug might lurk process efficient obvious bug already eliminatedleverage automation automation whether decision procedure like sat smt solver tactic library allows computer part verification task leaving le problem verification expert automation also allows proof replayed part system change automatically finding place proof need updated expanding scope automated decision procedure creating powerful tactic library ongoing research challengesuse domainspecific language dsl cogenerate code proof another strategy multiple verification group using write code dsl instead general purpose language dsl designed limited power facilitate verification also simultaneously generate executable code proof script b ongoing research challengesthe success described far suggest formal method eventually allow construction practical system much better security property remainder section briefly describe many remaining challengesdeveloping validating model realworld system example include instruction set architecture llvm posix interface various linux interface browser apis etc flaw model invalidate proof functional correctness regehr analysis compcert demonstrated building model labour intensive benefit shared many different application peter sewell group cambridge university leading force areaincreasing level automation area current research goal include better sat solver richer theory smt solver improved tactic librariesscaling key challenge developing technique scale proof larger system manage large proof result together challenge form nascent field proof engineering researcher developed must maintain code correctness proof taking lead creating new fieldintegration normal development process tool part standard developer tool chain get used time opportunity improve quality lot code like facebook infer projectgetting developer buyin developer amazon web service realized potential model checking finding design error triggered oneinamillionevents wanted others adopt technique ran tutorial colleague explaining approach instead calling formal method model checking called exhaustively testable pseudocode neutral name allowed people audience learn technique open mind contributed adoption larger group concurrency many formal method work exhaustively searching space possible execution approach computationally expensive even singlethreaded code concurrency lead combinatorial explosion possible state different proof technique needed handle case potential saving grace many safety securitycritical restricted singlethreaded execution execution controlled conclusiona vision future software construction formal method used produce exquisite software artefact come proof functional correctness used build practical system strong safety security guarantee microkernel compcert verifying c compiler initial example exquisite artefact smaccmcopter boeing upgraded ulb example formalmethods based practical system enhanced security measured red team assessment hope smaccmcopter ulb serve proof system possible spur investment area leading world networked device nearly vulnerable attacker present much work remains hopedata accessibilitythis article additional dataauthors contributionskf created hacms program managed phase jl managed phase rr managed phase interestsgalois inc rockwell collinsfundingwe received funding studyacknowledgementsmany people made helpful comment earlier version work including andrew appel adam chlipala darren cofer drew dean dan guido joe hendrix gerwin klein gary mcgraw greg morrisett aaron tomb mike walkerfootnotesone contribution discussion meeting issue verified trustworthy software system authorspublished royal society term creative common attribution license http permit unrestricted use provided original author source stolfo sj dare firmware modification attack rise printer malware chaos communication congress see http idscscolumbiaedusitesdefaultfilescuiprintmeifyoudarepdf google costello stolfo sj cisco phone paranoid mean phone listening everything say chaos communication congress see http wwwyoutubecomwatch google ket security analysis modern automobile proc ieee symp security privacy sp pp washington dc ieee computer society see http google set experimental analysis automotive attack surface proc usenix conf security sec pp berkeley ca usenix association see http dlacmorgcitationcfm google e crash experience vehicle equipped wheel antilock braking system ab second update including vehicle optional ab national highway traffic safety administration see http google c valasek c exploitation unaltered passenger vehicle see http google mahaffey k tesla model see http wwwyoutubecomwatch google remotely kill jeep wired magazine see http google microsoft font driver could allow remote code execution microsoft security bulletin see http google heartbleed bug see http heartbleedcom google vulnerability exposure see http cvemitreorg google leberre roussel simon l international sat solver competition ai mag crossref google cw sebastiani r seshia sa tinelli c modulo theory handbook satisfiability vol pp google tactic language system coq proc int conf logic programming automated reasoning lpar pp berlin germany springer google c rath zhang f munteanu b brooker deardeuff formal method amazon web service see http researchmicrosoftcomenusumpeoplelamporttlaformalmethodsamazonpdf google pc pike l elliott bielman j launchbury j embedded system embedded dsl proc acm sigplan int conf functional programming icfp pp new york ny acm google backes j cofer slind k whalen assurance case language architecture model proc acm sigada annu conf high integrity language technology hilt pp new york ny acm google gacek cofer murugesan heimdahl mpe rayadurgam iteration hierarchy system design ieee softw crossref google g andronick j elphinstone k murray sewell kolanski r heiser g formal verification o microkernel acm trans comput syst crossref google r koenig j ramananandro shao z wu xn weng sc zhang h guo specification certified abstraction layer proc annu acm sigplansigact symp principle programming language popl pp new york ny acm google j j zhu h fang h huang zhang x formal verified osekvdx realtime operating system international conference engineering complex computer system iceccs pp see http ieeexploreieeeorgxplarticledetailsjsp reloadtrue google h ziegler chajed chlipala kaashoek mf zeldovich n crash hoare logic certifying fscq file system proc symp operating system principle sosp pp new york ny acm google g murray amani connor l chen z ryzhyk l klein g heiser g system deserve verification proc seventh workshop programming language operating system plo pp new york ny acm google tatlock z lerner browser security guarantee formal shim verification proc usenix conf security symp security pp berkeley ca usenix association google g tan g tassarotti j tristan jb gan e better faster stronger sfi proc acm sigplan conf programming language design implementation pldi pp new york ny acm google k foltzer hendrix j huffman b tomb software analysis workbench proc acm sigada annu conf high integrity language technology hilt pp new york ny acm google l petcher ye kq appel aw correctness security openssl hmac proc usenix conf security symp sec pp berkeley ca usenix association google j hawblitzel c last instruction automated verification typesafe operating system proc acm sigplan conf programming language design implementation pldi pp new york ny acm google microkernel see http google x certification compiler backend programming compiler proof assistant conf record acm sigplansigact symp principle programming language popl pp new york ny acm google rb favrefelix leroy x pantel souyris j formally verified optimizing compilation flight control software ppes predictability performance embedded system vol pp schloss dagstuhl leibnizzentrum fuer informatik see http google j larsen pg bicarregui j fitzgerald j method practice experience acm comput surv crossref google programming dependent type pragmatic introduction coq proof assistant cambridge mit press see http adamchlipalanetcpdt crossref google klein g semantics isabellehol cambridge springer publishing company crossref google cet fast software verification proc int symp nasa formal method nfm see http researchfacebookcompublicationsmovingfastwithsoftwareverification google x chen eide e regehr j understanding bug c compiler proc acm sigplan conf programming language design implementation pldi pp new york ny acm google scholar
652,Lobsters,formalmethods,CSE-Formal methods,Rust's ownership model formally proven with Coq,https://dl.acm.org/citation.cfm?doid=3177123.3158154,rust ownership model formally proven coq,,association computing machinerynew york ny united state
653,Lobsters,formalmethods,CSE-Formal methods,"Complx: A Verification Framework for Concurrent, Imperative Programs (2017)",https://ts.data61.csiro.au/publications/nicta_full_text/9528.pdf,complx verification framework concurrent imperative program,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj name r openaction r outline r pagemode useoutlines page r type catalog endobj obj r fit goto endobj obj filter flatedecode length stream e n c endstream endobj obj annots r r r r r r r content r r r mediabox parent r resource font r r r r r r r r r r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r r r procset pdf text subtype form type xobject length stream q endobj obj basefont firstchar fontdescriptor r lastchar subtype type font width r endobj obj basefont encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj endobj obj ascent capheight charset circlecopyrt descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj endobj obj ascent capheight charset cponequoterightseven descent flag fontbbox fontfile r fontname italicangle stemv type fontdescriptor xheight endobj obj filter flatedecode length stream f q w e ȡ u ʟ x k ژ p b շů st k endobj obj filter flatedecode length stream xڭt n di r gx pܭ ח b yk endobj obj filter flatedecode length stream endstream endobj obj filter flatedecode length stream endstream endobj obj citenipkowpw isabelle goto border c h rect subtype link type annot endobj obj citenipkowpw isabelle goto border c h rect subtype link type annot endobj obj citeschirmer phd goto border c h rect subtype link type annot endobj obj citeschirmer phd goto border c h rect subtype link type annot endobj obj citesimplafp goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj goto border c h rect subtype link type annot endobj obj basefont firstchar fontdescriptor r lastchar subtype type font width r endobj obj filter flatedecode length stream r u z ܡӷ g w ě q e xc p v b oq n
654,Lobsters,formalmethods,CSE-Formal methods,Electrum: Lightweight Specification and Analysis of Dynamic Systems with Rich Configurations,https://hal.archives-ouvertes.fr/hal-01355062/file/electrum.pdf,electrum lightweight specification analysis dynamic system rich configuration,,obj type catalog version page r openaction r fit name r outline r ocproperties r endobj obj creator title subject author producer creationdate keywords moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj ocgs r r r endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream g xy v ݶ n z x oi l se
655,Lobsters,formalmethods,CSE-Formal methods,The Notion of Proof in Hardware Verification (draft) (1989),http://www.cl.cam.ac.uk/archive/mjcg/papers/AvraProofPaper.pdf,notion proof hardware verification draft,,obj stream v c ly q l g l ne endobj obj endobj obj stream f va e k ठ ɒg ze k ڦӵ au h e n r q endstream endobj obj endobj obj stream smt xl ץuq e c rh lk h ս l mˣ k p ɦg endobj obj endobj obj stream ң j h hёks h g ӗ lt n έmz kz ż endobj obj endobj obj stream ije g b u rc xwpvy j z x ϊ v ki j z endobj obj endobj obj stream q p hcg l j w g e p q ʏ e
657,Lobsters,formalmethods,CSE-Formal methods,Automated Verification of RISC-V Kernel Code (2016),https://courses.cs.washington.edu/courses/cse599w/16sp/projects/riscv.pdf,automated verification riscv kernel code,,obj length filter flatedecode stream n r n w e ȃ x k q kseiao x p w
658,Lobsters,formalmethods,CSE-Formal methods,Formal Semantics for C++ (2007),https://ts.data61.csiro.au/publications/nicta_full_text/1203.pdf,formal semantics c,,k ۑx endobj obj endobj obj stream
660,Lobsters,formalmethods,CSE-Formal methods,A Cryptographic Analysis of the WireGuard Protocol,https://eprint.iacr.org/2018/080.pdf,cryptographic analysis wireguard protocol,,obj length filter flatedecode stream
661,Lobsters,formalmethods,CSE-Formal methods,Genetic Programming + Proof Search = Automatic Improvement (2015),https://link.springer.com/content/pdf/10.1007%2Fs10817-017-9409-5.pdf,genetic programming proof search automatic improvement,,âãïó obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer prev startxref eof obj stream e æ öšk
662,Lobsters,formalmethods,CSE-Formal methods,New Computational Proof Results of WireGuard Protocol from Dowling and Paterson,https://lists.zx2c4.com/pipermail/wireguard/2018-January/002333.html,new computational proof result wireguard protocol dowling paterson,new computational proof result wireguard protocol dowling paterson jason http http wwwwireguardcompaperswireguardpdf http noiseprotocolorgnoisepdf http information wireguard mailing list,new computational proof result wireguard protocol dowling paterson jason donenfeld jason tue jan cet hey folk two researcher ben dowling kenny paterson might know work signal tl among research area written byhand game hopping proof computational model wireguard protocol paper worth read http finding interesting one design goal wireguard simplify state machine much possible keeping handshake portion protocol two message message back message something go wrong state machine start beginning without take account intermediate state original wireguard paper writes initiator receives message responder initiator must send first transport data message responder way around act handshake confirmation message putting confirmation message part transport layer mean transport message arrives suffice confirmation opposed relying special handshakelayer message could dropped udp remember thereby complicating state machine fairly nifty trick allows u write simpler reliable implementation specified part noise protocol framework work turn however traditional computational security model eck model used paper designed different era protocol handshake one thing transport another different handshake could put together different transport nicely stackable fully modular way certainly ipsecera protocol example interested kind layerseparation ike good example computational security model simply nt take account mean transport message used essential part ensuring handshake security property protocol similar trait tl example researcher came different security model called acce order prove disprove thing generally speaking goto model researcher interested trying computational proof eck thus dowling paterson tried fit verbatim protocol computational model able due wireguard reliance first transport message part handshake property consider feature bug fortunately author nt stop went modify description wireguard protocol put confirmation message essentially part handshake layer would feasible real wireguard sufficiently interesting modification prove thing finally showed modified construction secure interpret positive confirmation wireguard noise protocol framework easy argue modified wireguard protocol fit security model morally equivalent real wireguard protocol also look forward advancement tool model available computational proof researcher enjoy paper jason http wwwwireguardcompaperswireguardpdf http noiseprotocolorgnoisepdf http information wireguard mailing list
663,Lobsters,formalmethods,CSE-Formal methods,"Natural Synthesis of Provably-Correct, Data-Structure Manipulations (2017)",https://engineering.purdue.edu/~xqiu/natural-synthesis.pdf,natural synthesis provablycorrect datastructure manipulation,,obj stream x n w ט jp k n b ǜ l aړu ŏ ymcɸuvז endstream endobj obj stream xڵ c ڳe q 늏j l ˍ w ޱ q v v z u z x cf ⱦ q vðӂ c u endstream endobj obj stream l e x e h ԙ wr å 鄉 c k b c v ab
664,Lobsters,formalmethods,CSE-Formal methods,Hyperkernel: Push-Button Verification of an OS Kernel (2017),https://homes.cs.washington.edu/~helgi/papers/hyperkernel.pdf,hyperkernel pushbutton verification o kernel,,obj length filter flatedecode stream p jbd c e endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream xڕz zw է peq kt x ݧ ћ w q f wuy br c c ʊ n e څ c endstream endobj obj length filter flatedecode stream lv kȧ и qkx u n u q pk j p tp b
665,Lobsters,formalmethods,CSE-Formal methods,Capsules and Types in Fresco (1991),http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=244865431ADC032AB6D11A216BFE35C7?doi=10.1.1.37.2387&rep=rep1&type=pdf,capsule type fresco,,obj length filter flatedecode stream dfp k endstream endobj obj procset pdf text font r r extgstate r endobj obj length filter flatedecode stream j հ z h qíyz r q fxn úd l w endstream endobj obj procset pdf text font r r r extgstate r endobj obj length filter flatedecode stream e v z n kb ga dߒ e k қ endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream v qp r xp籩 q uz j c endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream c hσ yƅ h u l k xgɵ oi ici iƽn b endstream endobj obj procset pdf text font r r r r r extgstate r r endobj obj length filter flatedecode stream x gq w csas p k j e endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream ri h x dd ଘ ϵeh w iv x e l w ba ߚg vr u endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream k ck uf g x u c ar endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream r xb u ȧ u ѱ endstream endobj obj procset pdf text font r r r r r extgstate r endobj obj length filter flatedecode stream v η f β nڵ nw b endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream ʲ q mu rj tp跌 w sk x u h cik endstream endobj obj procset pdf text font r r r r extgstate r endobj obj length filter flatedecode stream ot q gߋ dtkn z ߩ
666,Lobsters,formalmethods,CSE-Formal methods,How to prove a compiler correct,https://dbp.io/essays/2018-01-16-how-to-prove-a-compiler-correct.html,prove compiler correct,prove compiler correct january annie cherkaev sweetpea presented haskell reasonable spectorzabusky breitner rizkallah weirich intended audience people know compiler may implemented sure mean prove one correct http githubcomdbphowtoproveacompiler dsl compiler formalizing hstocoq http githubcomdbphowtoproveacompiler proving thing even compiler correctness theorem informal source arith expression eval compile produce integer n evaluating produce number n http githubcomdbphowtoproveacompiler xavier oregon programming language summer school lecture prl gabriel scherer william bowman addendum termination addendum proof mean anything cfml compcert,prove compiler correct daniel patterson january principle programming language last week ended talking annie cherkaev really cool dsl domain specific language sweetpea presented beaten track workshop colocated popl aided language experimental design targeted psychology particular talking software engineering work annie test sweetpea increase confidence implementation correct topic exactly one go proving compiler correct came realized think highlevel concrete overview might look like also like many compiler implemented haskell seemed like good opportunity try really cool work presented colocated conference certified program proof titled haskell reasonable spectorzabusky breitner rizkallah weirich tool hstocoq extract coq definition certain terminating haskell program least small compiler hopefully qualify certainly limitation approach see addendum bottom page discussion seems promising engineering perspective intention post twofold show take compiler albeit tiny one built intention verifying fact prove correct part ability seamless way wonderful hstocoq tool mentioned though reason principle carry translation manually practice maintenance becomes issue hence realistic verified compiler relying writing implementation within theorem provers like coq extracting executable version automatically least past possibly hstocoq could change workflow give concrete example proving compiler correctness necessity simplified scenario without lot subtlety appear real verification effort eg undefined behavior multiple compiler pass linking code compilation etc hand even simplified scenario could cover many case dsl understanding subtlety come much easier understand basic case intended audience people know compiler may implemented sure mean prove one correct code post along instruction get running repository http githubcomdbphowtoproveacompiler trouble getting going open issue repository dsl compiler make simple source language arithmetic expression adding subtraction multiplication represent explicit data structure haskell program arith example source expression represented plus time target sequence instruction stack machine idea stack machine stack value used instruction target language expression program stackop example previous example could represented snum snum snum stimes splus idea number evaluates pushing onto stack plustimes evaluate popping two number stack pushing sumproduct respectively back make concrete writing eval function take initial stack probably empty program either produce integer top stack instruction run error debugging sake state stack rest program got stuck source target language know target work implement compiler part good small example compiler simple case plusminustimes case slightly nonobvious contain recursive expression think eval function stack machine finish evaluating everything compiled number left branch evaluated top stack finish evaluating compiles number right branch evaluated top stack reversal right order popped mean evaluating eg splus put sum top stack expected pretty informal argument correctness chance get formal later formalizing haskell compiler want prove correct first want convert coq using hstocoq tool full instruction http githubcomdbphowtoproveacompiler main command convert srccompilerhs srccompilerv stackyamlhstocoqstackyaml stack exec hstocoq src srccompilerhs e hstocoqbaseedits build coq code make open srcproofsv using coq interactive mode use proof general within emacs spacemacs particularly easy use coq layer proving thing coq version compiler complete evaluation function able write theorem would like prove theorem say well various thing could prove basic theorem compiler correctness say essentially running source program target program often stated often formally proven way backwards simulation whatever target program source program also much thorough discussion check william blog post even compiler correctness language ambiguity nondeterminism undefined behavior becomes much complicated setting would state theorem informal source arith expression eval compile produce integer n evaluating produce number n issue immediately apparent actually way directly evaluating source expression thing source expression compile statement get behavior compiler baked compiler wrong proving stuff wrong compiler philosophically even mean compiler wrong wrong external specification likely head point supposed case behavior source language compiler supposed faithfully preserve prove thing formally need write behavior add function haskell source nontrivial dsl may significant part formalization process also incredibly important part actually specifying exactly source dsl mean otherwise whatever compiler happens bug example write function rerun hstocoq get added coq development formally state theorem want prove theorem compilercorrectness forall arith eval nil compile dataeitherright eval going sketch proof went proving stuff complex maybe give sense thinking go go probably want take course find one follow book like prove paper would proceed induction structure arithmetic expression start way base case go away trivially expand case plus using induction iauto simpl see line assumption need prove eval nil compile eitherright eval eval nil compile eitherright eval eval nil compile compile splus nil eitherright eval eval z look little realize two thing induction hypothesis really going work intuitively either program produce right result subtrees probably way rely hypothesis hand look like lemma able prove evaluating partial program rather trying induct entire statement instead try prove evaling compiled term result eval term top stack instance general pattern often toplevel statement want much specificity need instead prove something general use specific case first attempt lemma want prove lemma evalstep forall arith forall x list stackop eval nil compile x eval eval nil x general start inducting expanding eliminating base case induction intro simpl iauto end better inductive hypothesis forall x list stackop eval nil compile x eval eval nil x forall x list stackop eval nil compile x eval eval nil x eval nil compile compile splus nil x eval eval eval z nil x need reshuffle list associativity rewrite using first hypothesis rewrite listappassocreverse rewrite problem common hence going want use second hypothesis reduce based definition eval done case multiplication issue need stack empty stack since used eval nil used forall x list stackop eval nil compile x eval eval nil x forall x list stackop eval nil compile x eval eval nil x eval eval nil compile splus nil x eval eval eval z nil x solution go back lemma statement said generalize arbitrary stack process generalized twice inductive hypothesis correspondingly stronger lemma evalstep forall arith forall list numint forall x list stackop eval compile x eval eval x start proof way induction intro simpl iauto run odd problem silly obligation match nil eval x nil list eval x list eval x end eval x go away break apart list simplify look carefully thing three branch match least couple approach could manually destruct simpl eauto destruct simpl eauto show multiple time proof mess someone reading proof script may confused going could write tactic thing try match goal l list solve destruct l simpl eauto destruct l simpl eauto end advantage depend name call whenever anything able discharge goal call still somewhat messy middle proof could hint using tactic using hint extern handled automatically generally dislike adding global hint tactic unless good reason slow thing make understanding proof worked difficult also write lemma actually two case come solved easily lemma listpointlesssplit forall b type forall l list forall x b match l nil x list x end x proof destruct l eauto qed lemma listpointlesssplit forall b type forall l list forall x b match l nil x nil list x list x end x proof destruct l intro eauto destruct l eauto qed style hint using lemma locally needed know proof follow list associativity pointless list splitting inductive hypothesis write formally relies literatecoq library tactic point lemma evalstep forall arith forall list numint forall x list stackop eval compile x eval eval x proof hintrewrite listappassocreverse hintrewrite listpointlesssplit listpointlesssplit induction intro simpl iauto hintrewrite iauto qed say know need associativity lemma list splitting lemma somewhere proceed induction handle base case use inductive hypothesis handle rest go back main theorem proceed similar style prove induction relying evalstep lemma various place needing simplify observant reader iauto iauto differ iauto deeper proof search theorem compilercorrectness forall arith eval nil compile dataeitherright eval proof hintrewrite evalstep hintsimpl induction iauto qed proof compiler wrote haskell correct insofar preserve meaning expressed sourcelevel eval function meaning eval function target course theorem could prove another one would interesting would compiled program ever got stuck ie never produce left error stated top post code post available http githubcomdbphowtoproveacompiler looking check xavier oregon programming language summer school lecture video scroll find thanks current former prl member particular gabriel scherer william bowman providing useful feedback draft post addendum termination example tiny run something really common imagine instead compile function shown instead wanted take arith would still work would result list result stored stack probably would want change eval print everything stack end top wrote compile would get error try compile output hstocoq coq say compile function terminating good introduction major difference haskell coq haskell term run forever programming language inconvenience end code perhaps difficult debug want also useful happen writing server supposed run forever language intended used prove thing feature would nonstarter would make logic unsound issue coq high level type theorem term inhabits type proof theorem haskell write ie type provide term type term simply never return possible coq could prove theorem entire logic would useless unsound technically mean prove logical falsehood since falsehood allows prove anything thing returning slightly contrived program actually program run forever want prove thing program need much work coq tell general possible tell sufficiently powerful language halting problem say turing machine thus hold anything similar expressivity coq relies argument inductively defined list arith expression recursive call structurally smaller part argument hold guaranteed terminate inductive type infinite note unlike haskell coq lazy another difference ignore look recursive call called compile structurally smaller put inside list used instead thus violates coq expecting various way around like adding another argument whose purpose track termination adding sophisticated measurement another option adding helper function compile original compile compiles single arith intuition lead trying new compile decreasing length list structure arith trying time separating thing eliminate issue addendum proof mean anything limitation approach outlined post particular hstocoq syntactically translate similar construct haskell coq construct similar syntax necessarily similar semantics example data type haskell lazy thus infinite whereas inductive type coq definitely infinite mean proof made version program represented coq original program way make proof precise semantics language eg arthur cfml hand program extraction core part verified compiler like compcert issue program run converted via similar process hstocoq coq ocaml distance le coq haskell principle similar issue yet think hstocoq real practical use particular existing haskell codebase want verify likely need refactor hstocoq work refactoring done within haskell program continues work existing test continue pas etc eventually finish conversion may decide make sense take converted version ground truth thus run hstocoq throw original relying extraction point executable able gradual migration full haskell essentially gallinalike dialect haskell seems incredibly valuable
667,Lobsters,formalmethods,CSE-Formal methods,"A Scalable, Formal Method for Design and Automatic Checking of User Interfaces (2001)",http://home.deib.polimi.it/sanpietr/pubs/Gedisac-ACMTosem.pdf,scalable formal method design automatic checking user interface,polimiit pagina italiano home page italian,pierluigi san pietro home page short bio graduated electrical engineering politecnico di milano received phd computer science university dissertation logic objectoriented specification largesize realtime system advisor dino mandrioli accademic year visiting associate professor pfu chair japan advanced institute science technology japan two month invited professor universiteè de marnelavalleè paris france various occasion visited month university california santa barbara washington state university july became assistant professor politecnico di milano february april associate professor politecnico di milano full professor politecnico di milano current address office politecnico di milano dipartimento di elettronica e informazione piazza leonardo da vinci milano tel fax email firstnamelastname polimiit per gli studenti guardate la mia pagina italiano student may refer home page italian
668,Lobsters,formalmethods,CSE-Formal methods,Automatically Proving Termination and Memory Safety for Programs with Pointer Arithmetic (2017),https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/Automatically_Proving_Termination_and_Memory_Safety_for_Programs_with_Pointer_Arithmetic.pdf,automatically proving termination memory safety program pointer arithmetic,,obj length filter flatedecode stream 藳 v l vb z r x k z bjsn k k l ӑ p p endstream endobj obj type page content r resource r mediabox parent r endobj obj colorspace r pattern r extgstate r font r r r r r r procset pdf text endobj obj length filter flatedecode stream wf h b yv ϲ c g az fw z gb p g p dnie b endstream endobj obj type page content r resource r mediabox parent r endobj obj colorspace r pattern r extgstate r font r r r r r r procset pdf text endobj obj length filter flatedecode stream
669,Lobsters,formalmethods,CSE-Formal methods,Formally Verified Cryptographic Primitive Implementations in WireGuard,https://lists.zx2c4.com/pipermail/wireguard/2018-January/002304.html,formally verified cryptographic primitive implementation wireguard,formally verified cryptographic primitive implementation jason http githubcommitlshaclstar http wwwfstarlangorg http githubcomfstarlangkremlin http http githubcommitplvfiatcrypto http coqinriafr http http http http http wwwwireguardcomformalverification information wireguard mailing list,formally verified cryptographic primitive implementation jason donenfeld jason thu jan cet hi folk writing crypto code hard sometimes scary especially thing like elliptic curve big number arithmetic subtle critical bug often sit around undetected year reason working researcher inria using formally verified implementation inside wireguard last week pleasure talking inria researcher mit researcher related effort automatically generate c implementation elliptic curve scalar multiplication formal model model produce proof correctness alongside machinegenerated c taken implementation integrated wireguard multiplication using hacl specification written f pass kremlin c generation read inria researcher paper information formally verified also faster previous implementation agl mozilla n something similar hacl multiplication using fiatcrypto specification written abstract proof language coq also generates c code mit researcher also paper available faster using agl us much le stack space mean longer need kmalloc platform without separate irq stack nice boost google boringssl something similar fiatcrypto note cryptographic primitive verified starting replacing two c implementation formally verified one time gradually replace remaining existing implementation formally verified counterpart certainly research state art quite new work evolutionary category speed result using software comparing new top two line old bottom two line turbo turned xeon skylake laptop cycle per call cycle per call cycle per call cycle per call core nm broadwell laptop cycle per call cycle per call cycle per call cycle per call updated wireguard formal verification site contain information day expect update exciting result formal verification genre let know question regard jason http githubcommitlshaclstar http wwwfstarlangorg http githubcomfstarlangkremlin http http githubcommitplvfiatcrypto http coqinriafr http http http http http wwwwireguardcomformalverification information wireguard mailing list
671,Lobsters,formalmethods,CSE-Formal methods,Some Goals for High-impact Verified Compiler Research,https://blog.regehr.org/archives/1565,goal highimpact verified compiler research,effort prove object code refines c source code program analysis compiler validation evaluating valuegraph translation validation llvm equalitybased translation validator llvm formal verification ssabased optimization llvm extensible verified validator simple optimization llvm blackbox equivalence checking across compiler optimization like goal ease use goal near zero overhead compiler developer goal performance goal multiple validators smtcomp alive sort thing conclusion,believe translation validation branch formal method ready widespread use translation validation mean proving particular execution compiler right thing opposed proving every execution compiler right thing different consider obstacle onceandforall verification tool like gcc llvm execution spent processing pointer soup correctness depends poorly documented incredibly detailed property soup hundred thousand analysis transformation performed due performance constraint compiler implementation entangles way nearly impossible disentangle implementation language usually unsafe forcing formal verification effort spend outrageous amount effort proving property compiler code memory safety incidental task interest convincing formal verifier subset c llvm written even exist compiler algorithm like register allocation appears fundamentally easier check result prove right result always computed example compcert us approach last time looked compiler active rapid development proof would redone likely incurring significant effort every release clear onceandforall formal verification llvm gcc never going happen cost ludicrously outweigh benefit translation validation hand already extent practical see example effort prove object code refines c source code refinement mean c give typical program many different meaning need prove compiler picked one recent llvmbased work area includes program analysis compiler validation evaluating valuegraph translation validation llvm equalitybased translation validator llvm formal verification ssabased optimization llvm extensible verified validator simple optimization llvm blackbox equivalence checking across compiler optimization work awesome research tool stop people burned compiler bug one way make thing better combine translation validation aggressive testing like make sure resulting bug get fixed better yet try push translation validation world anyone use time happen rest piece thought work goal ease use thing application developer need add compiler flag like clang tv filecpp rustc tv filer compiler either validates fails validate translation easy goal near zero overhead compiler developer translation validation get way normal development production compiler almost entirely side mean however compiler help validator rather happen noninvasive way example certain optimization nested loop hard validate might need emit bit extra debug info optimization remark whatever help validator piece together happened goal performance since translation validation result lot solver call going somewhat slow probably well order magnitude slower regular compilation fairly easy way speed would add persistent networked caching layer exploit fact part code base change often good luck using kind cache souper also slow due making many solver call goal multiple validators research tends move rapidly level playing field clearlydefined goal allowing different group compete cooperate see fit competition particularly motivating see example smtcomp primary metric choosing winner translation validation competition number function validated compilation given benchmark using particular llvm version optimization level verification time would good secondary metric ensure fair competition would best validators using semantics source target language straightforward often mathematical artifact end readable reusable since deeply embedded implementation formal method tool unfortunately case alive example canonical readable writable reusable semantics c c rust swift llvm ir etc something spending significant resource sort thing talking conclusion clear beyond alivebased work referenced working plan work translation validation rather clearly right way gain confidence productiongrade compiler done job technology reach working deploy widely
672,Lobsters,formalmethods,CSE-Formal methods,The Three Levels of Software: Why code that never goes wrong can still be wrong,http://www.pathsensitive.com/2018/01/the-three-levels-of-software-why-code.html,three level software code never go wrong still wrong,three level software code never go wrong still wrong joel spoelsky relates next time postscript technical detail level trace state level code level specification separation logic,three level software code never go wrong still wrong update previous version post used terminology level level bug lot diminishing favor runtimeconcrete implementationlogic level error modular reasoning people started using level mean everything code nt like ca nt cause incorrect output ever stopped consider mean program wrong mean really stopped consider like wrong crash crash condition hypothetically achievable let get bottom first try definition program wrong run produce wrong result wrong result broadly defined include performance bug usability bug etc put bread toaster instead giving piece toast give rhinoceros wanted definitely bug err mammal program still usually produce correct result wrong get new toaster never problem find put thin slice bavarian rye full moon used toaster exactly twice last hour fry circuit sound like bug amend definition definition program wrong exists environment sequence event input produce wrong result let eliminate patched software toaster proven code correct trillion monkey test every conceivable situation nothing short taking sledgehammer make toaster malfunction still possible code wrong simple let say somewhere toaster sum element array accidentally go one memory error well written c add whatever next address memory address byte always whatever reason get right answer every time code still wrong may never fail reasoning code work hole simple argument reading array depends complex assumption compiler memory layout well wholeprogram check byte always hole cause actual failure future version program someone rearranges field structure code never affected start failing reach third definition definition program wrong reasoning correct flawed progress gone clear simple definition one handwavy impossible use actually quite rigorous teach concept formal verification make concrete three definition correct use different time form one core teaching talk program speak one three level three level level runtime runtime level deal specific value specific environment single execution program lot debugging done runtime level level concrete implementationcode level concrete implementation think current implementation could given arbitrary input arbitrary environment behavior happen considered even requires global reasoning rule lot implementation work done code level level designlogic level logic consider abstract specification unit program using unit consider guarantee made spec assume may replaced time different implementation many program correct viewed concrete implementation level correct viewed logical level rely behavior guaranteed hold future version call error modular reasoning argue function correct looking code contract implementation dependence software design done level logic met programmer confuse runtime concrete implementationcode level many runtime code level concrete enough see runtime level running debugger inspecting stack see concrete implementation level reading code thinking could happen programmer much harder time getting even logical level seen much confusion come one programmer talking component guaranteed talking happens programmer taught difference interface implementation highlevel get see full detail defines interface beyond list function seen formal verification program property assumption written concretely source code everyday development structure reasoning still scattered across documentation comment programmer head statement different level mix proposed clientserver protocol say client send request twice discard first result level statement designer tell three different kind request handler codebase bob sometimes get wrong first time level statement get confused confused someone wanted call file write function goal deliver working software customer correctness concrete implementation level important goal able continue deliver working software far future logical level modular interaction component software important care different version component like say wanted rewrite one tomorrow joel spoelsky relates original sim city useafterfree error concrete implementationcode level totally fine since freed memory do valid next malloc program worked logical level defect spec free say need act memory get eaten dragon soon free future free implementation may actually eat sure enough window rolled around new memory manager simcity would start crashing microsoft add special case check simcity running switch legacy memory manager people sometimes tell software easy idea make cheap nothing physical build hogwash software domain make decision undone supported eternity http referer forever misspelled simcity specialcasing code still year later important get program right logical level making argue component correct independently rest program even overall program pass testing meet external requirement lesson api designer important make apis conform strictly spec possible least debug mode could avoided do free deliberately zeroout memory two year experience teaching engineer better understanding avoid complexity improve encapsulation make code futureproof ultimately knowledge stem single master insight important part craft deal code logic underneath logical layer may hidden mystic year theory behind see postscript taste detail learn see reasoning behind system plainly code achieved software enlightenment next time implies keeping design implementation separate postscript technical detail could speak book harmony composition learn listening song seeing sheet music similarly could ramble reasoning assumption truly understand need see object study three level deal different view program execution code specification corresponds kind let bring math level trace state object study level runtime level trace state trace sequence event occurred program execution trace look something like enter method postprofileupdatetoserver read field profile local variable p enter method savecurrentstate leave method savecurrentstate trace high level like microservices get run low level involving instruction scheduling cpu tell exactly happened give information construct current state state collection cell current value look like pprofile name bob thisnetworkclient socket baseurl http mywebsitecomapi messagesoutput initializing myapp version welcome bob often state consists value memory though helpful also include piece environment list already output sent wire statement phrased term specific trace state runtimelevel statement construct familiar programmer printout let view fragment trace debugger let observe current state corresponding manner automated reasoning ground reasoning ground reasoning mean reasoning concrete value quantifier suppose code left x left left right min print right say know printout given trace want know whether possible branch line executed could answer question asking solver find satisfying assignment following formula left right else level code object study level level concrete implementation code yes code stuff work every day statement phrased term code specific trace state codelevel statement let look following example computes damage bonus hypothetical game public double computedamagebonus int int int int adjdefense adjdefense return double factor double factor return else return factor picking specific input function yield trace sequence state program encodes exponentially large number possible trace state runtime level ask execution experience divisionbyzero error concrete implementation level ask execution function experience divisionbyzero error corresponding manner reasoning firstorder logic mean write formula say input x property hold exist input function crash quantify function firstorder formula state computedamagebonus function never divisionbyzero error adjdefense adjdefense level specification object study level layer logic specification also call design level software engineering term modularity encapsulation defined term logic specification many many way writing specification popular one hoare triple precondition postconditions one malloc malloc n pre n post retval null alloc retval n concrete implementation level could ask question specific implementation malloc like much memory overhead use logical level ask question possible implementation malloc like program memory error corresponding manner reasoning higherorder logic higherorder logic like firstorder logic quantify function first let translate spec mallocspec n n null alloc n n hypothetically formal specification playsimcity function spec work implementation malloc would look something like mallocspec simcityspec playsimcity friend modularity reduced formula really big thing specification involve property appear code defined malloc term alloc predicate intrinsic meaning stuff returned malloc let u relate malloc operation give act dereferencing pointer x precondition n alloc n give free x function spec destroys predicate alloc x n proof alloc n reasoning program mean memory returned malloc intervening free exactly intuitive notion memory allocated shown memory allocated specificationlevel notion independent code indeed may nothing within program indicate piece memory allocated possible allocated corresponds internal data structure memory manager also possible code compiled machine infinite memory state exactly sense simcity code wrong precondition dereferencing pointer pointer allocated memory tried dereference pointer without meeting precondition ie proof alloc n code ran fine one implementation malloc sadly learned designing software always recommend trying think pure concept translate programming language way database designer write er diagram translating table whether discussing coupling security always think component software term interface assumption guarantee mentally translate formula like one much becomes clearer logic language software design acknowledgment thanks elliott jin jonathan paulson comment draft post get hung analogy level software mode reasoning plenty exception instance much progress program analysisverificationsynthesis research come finding sort trick encode complicated problem form solved ground reasoning since good solver likely going relevant unless work programming tool lying slightly example kind logical formula gave really meant pure function handle malloc properly want use separation logic
673,Lobsters,formalmethods,CSE-Formal methods,"IELE: A New, Virtual Machine for the Blockchain (2017)",https://runtimeverification.com/blog/?p=498,iele new virtual machine blockchain,iele llvm k framework dozen language k design rationale serve uniform lowerlevel platform translating executing smart contract higherlevel language provide uniform gas model across language make easier write secure smart contract kevm k framework next efficient backend k kevm paper reference c implementation evm compilerstranslators solidity plutus iele solidity plutus formal semantics plutus semanticsbased compilation blog post deploy iele cardano blockchain technical detail download forwardingwalletiele ielesyntaxmd ielemd designmd ielegasmd get involved hiring rvinc acknowledgement iohk iele kevm kevm technical report,runtime verification rv proud release first version iele new virtual machine blockchain iele team photo left right daejun park phd student uiuc rv intern theodoros kasampalis phd student uiuc rv intern yi zhang phd student uiuc rv intern traian serbanuta rv screen left bottom grigore rosu rv presidentceo uiuc professor screen center taking picture virgil serbanuta rv screen right bottom david young rv brandon moore rv yiyi wang rv dwight guth rv iele iele variant llvm specialized execute smart contract blockchain design definition implementation done highest mathematical standard following semanticsfirst approach verification smart contract major objective specifically defined formal syntax semantics iele using k framework return give u executable reference model addition series program analysis tool including program verifier k created team last year incorporates state art language design semantics formal method design iele based experience formally defining dozen language k especially recent experience lesson learned formally defining two virtual machine k namely unlike evm stackbased machine iele registerbased machine like llvm unbounded number register also support unbounded integer get feel iele program look like two verified yet may change design rationale force drove design iele serve uniform lowerlevel platform translating executing smart contract higherlevel language contract interact mean abi application binary interface abi core element iele convention top unbounded integer unbounded number register make compilation higherlevel language straightforward elegant looking success llvm efficient long term indeed many llvm optimization expected carry reason iele followed design choice representation llvm much possible team also includes llvm expert university illinois llvm created provide uniform gas model across language general design philosophy gas calculation iele limitation pay consume example register iele program us gas consumes larger number computed runtime gas consumes memory us term location size data stored location gas consumes make easier write secure smart contract includes writing requirement specification smart contract must obey well making easier develop automated technique mathematically verify prove smart contract correct respect specification example pushing possibly computed number stack jumping regarded address make verification hard thus security weaker current smart contract paradigm iele named label like llvm jump statement jump label also avoids use bounded stack worry stack arithmetic overflow make specification verification smart contract significantly easier like kevm formal semantics evm previously defined validated evaluated using k framework design iele also done semanticsbased style using k together fast llvmbased execution backend k still development expected interpreter obtained automatically semantics iele sufficiently efficient serve reference implementation iele next achieve full potential iele plan next work following efficient backend k k semantics including iele executed acceptable performance discussed kevm paper current version k execute evm semantics performance stay within order magnitude performance reference c implementation evm believe improve execution performance k one order magnitude achieved incentive implement iele adhoc way k executable semantics iele also implementation correct construction thus implementation defect vm exploited anymore also iele would easier maintain future version easier deploy compilerstranslators solidity plutus iele writing smart contract directly iele bit feasible evm iele follows llvm ir designed humanreadable iele code still lowlevel thus errorprone properly test iele gain confidence overall design capability implement compilertranslator solidity iele also k since plutus rise star among functional programming language smart contract since defining formal semantics plutus well compiler plutus iele developed immediately solidity semanticsbased compilation addition improving k performance plan implement tool call semanticsbased compiler top k see previous blog post detail idea take programming language semantics l program p l generate using symbolic execution heavily new language semantics l specialization l p expect least one order magnitude increase performance importantly give u uniform mechanism translate program programming language k semantics iele thus making iele k universal platform executing smart contract language deploy iele cardano blockchain technical detail download iele thoroughly commented freely available uiuc license permissive mit license github addition two iele program mentioned forwardingwalletiele showing iele code human readable following link github repo give good idea iele differs evm llvm ielesyntaxmd complete formal syntax iele language ielemd complete formal executable semantics iele language designmd design rationale iele well detailed comparison llvm evm ielegasmd current gas model iele still tuned develop compiler iele get involved spirit open source communitydriven development holding iele discussion channel encourage interested party engage u ask question contribute code build experience tool also always looking contributor able work documentation efficient installquickstart process new developer example test hiring sure keep eye open helpful contributor also posting update brand new twitter page rvinc hope interested developer follow interact let build secure smart contract everybody together acknowledgement warmly thank iohk generous funding support iele kevm iele particular would possible without iohk support continuous research meeting stimulating technical discussion research team also thank k team defined kevm semantics see technical report verified smart contract compliance effort nontrivial proof evm level led quest new vm better support verification smart contract
674,Lobsters,formalmethods,CSE-Formal methods,Let's Prove Random Games are Winnable (with Formal Methods),https://www.hillelwayne.com/post/alloy-randomizer/,let prove random game winnable formal method,link past randomizer game source alloy security system signature atom relation fact adding predicate abstract extension predicate function transitive closure adding trace ands or ands or bracket thought tla example main site really good book puzzle builder update email,one vice watching link past randomizer game gist regular zelda game except item chest randomized chest normally bomb might critical item chest supposed moon pearl might rupee people use randomizers run race since memorize correct path game supposed bow source course restriction game must still finishable mean item need beat game must still accessible need hammer reach chest putting hammer chest make game unwinnable randomized assignment invalid must avoided randomizer take care tracking placed adding restriction place next hammer ca nt chest game unwinnable guarantee given set rule enough check unit test test give u certainty want need use formal method let use formal method construct model game place restriction check every possible item assignment lead winnable game normally modeling tla want try using alloy alloy inspired relational algebra used model data structure security system also lot lightweight tla want short demo start couple signature represent possible atom relate case start two chest item next add relation chest one item requires open one item contains sig chest requires item contains item model checker look counterexample alloy also opposite look example consistent model look like alloy also visualize example see model look way fleshed model let see run generating cnf generating solution var primary var clause instance found predicate consistent default alloy search example three atom signature search take millisecond verifier alloy pretty damn fast skimmed visualization found one chest contains problem plenty chest lttp require item reach assume one free chest hand contained two separate chest problem get item one chest physical property game particular instance straight impossible exclude example adding fact analyzer check instance fact hold particular instance used example counterexample simply occur fact chestsholduniqueitems item lone c chest ccontains lone mean one item either belongs exactly one chest chest free chest may contain item either since contain rupee arrow whatever adjust signature match sig chest requires item contains lone item adding predicate chest requirement reach chest fixed type item fixed chest contain item randomized add specified item fact relates requirement abstract sig chest requires item contains lone item one sig b c extends chest abstract sig item one sig bow glove boot sword extends item fact chestrequirements arequires boot brequires bow crequires glove change signature abstract sigs extension considered exhaustive obviously dealing simplified model modeling randomizer blog post need predicate predicate statement model may may true ultimate goal see certain predicate guarantee predicate ultimately checking something like restriction implies winnable randomizer follows restriction give game must winnable unlike fact predicate take atom argument simplification say thing need win sword boot pred reachable item free pred winnable reachable sword reachable boot quick prototype way reach item start free function exactly sound like fun free set item item containsi say containsi contains relation chest item one core feature alloy language relation tuples atom requires contains set tuples based fact requires boot b bow c glove acontains take pair contains start return whatever item end go way containsboots take pair end boot return whatever chest start also apply relation entire set time could written free item chestcontains let finish reachable currently free item reachable could use free item open chest write free requiresfreecontains could use item open chest requires requiresfreecontains contains okay backtrack time inverts relationship requires chest item requires item chest represents item open chest requirescontains item item represents item make item directly accessible next apply transitive closure operator b ab abb mean reachable predicate written pred reachable item free requirescontains running run winnable find example winnable instance instead write check winnable see unwinnable instance find counterexample problem obvious chest contains item need open time start adding restriction predicate change assertion restriction implies winnables word okay completely random map unwinnable restriction hold map must winnable pred restriction c chest crequires ccontains check restriction implies winnable even analyzer find unwinnable map need glove get boot boot get glove chest contains requirement exclude closed cycle requirement could add restriction seems difficult implement code let find something simpler first forced boot always free pred restriction c chest crequires ccontains boot free generating cnf generating solution var primary var clause counterexample found assertion may valid perfect model currently stand abstract sig chest requires item contains lone item one sig b c extends chest abstract sig item one sig bow glove boot sword extends item fact chestrequirements arequires boot brequires bow crequires glove fun free set item item containsi pred reachable item free requirescontains pred winnable reachable sword reachable boot fact chestsholduniqueitems item lone c chest ccontains pred restriction c chest crequires ccontains boot free check restriction implies winnable adding trace assuming every chest requires one item chest require several item though usually need least one get area couple reach chest assume right way would make requires relation set item instead single item requires set item fact chestrequirements arequires boot bow work something important alloy support multisets b c single relation b c flattened two relation b c reachable transitive closure relation actually act requirement satisfied boot bow get relation need rewrite reachable used recursive predicate pred reachable item free item containsi requires reachable item work either another important thing alloy like recursion call reachable item fail reachable call recursively option add recursive call incredibly slow alloy max depth good demo le good real work alternatively could replace reachable item item free back use item chest open chest need different approach proper alloy solution use trace pattern item reachability boolean item also partially ordered reachability requirement b know b reachable one way figure ordering imagine player following starting game player go around collect free item make first inventory player collect item require free item plus free item make second inventory player collect item require item second inventory etc etc etc process gradually place reachable item inventory point collect boot sword win item inventory partially ordered inventory totally ordered apply ordering module open get bunch nice property signature like first last next open utilordering inventory sig inventory item set item define trace first inventory free item successive inventory item plus whatever else access current inventory fact trace firstitems free inv inventory last let inv invnext invitems invitems item reachable inv finally adjust predicate say item reachable required item current inventory pred reachable item inv inventory invitems containsi requires invitems minor adjustment rest model eg change win condition restriction contains requires see something interesting still counterexample model example instead making impossible lose restriction made impossible win currently open utilordering inventory sig inventory item set item abstract sig chest requires set item contains lone item one sig b c extends chest abstract sig item one sig bow glove boot sword extends item fact chestrequirements arequires boot bow brequires bow crequires glove fun free set item item containsi fact trace firstitems free inv inventory last let inv invnext invitems invitems item reachable inv pred reachable item inv inventory invitems containsi requires invitems pred winnable inv inventory reachable sword inv reachable boot inv fact chestsholduniqueitems item lone c chest ccontains pred restriction c chest ccontains crequires boot free check restriction implies winnable counterexample look like starting get cluttered alloy provides bunch tool make diagram easier explore projecting signature worst case inspect text dump people save really complicated counterexample ands or ands or want alternate requirement maybe chest opened bowboots sword right express relationship need one layer indirection instead chest directly requirement chest set puzzle puzzle set requirement open chest item least one puzzle abstract sig puzzle solution chest set item one sig extends puzzle fact chestrequirements boot bow sword b bow c glove make puzzle sig abstract since puzzle per chest fixed solution triplet relation form puzzle chest item change requirement something little jankier account multiple puzzle solution pred reachable item inv inventory invitems p puzzle let sol psolution containsi sol sol invitems simplify added bracket act intuitively expect internally ab c c ab also add sol weed irrelevant solution would empty item set also need update restriction fact weaken okay chest contain requirement long alternative way opening pred restriction c chest sol puzzlesolution c ccontains sol boot free counterexample change sword free counterexample also satisfying example two restriction lead playable game final model open utilordering inventory sig inventory item set item abstract sig chest contains lone item one sig b c extends chest abstract sig item one sig bow glove boot sword extends item abstract sig puzzle solution chest set item one sig extends puzzle fact chestrequirements boot bow sword b bow c glove fun free set item item containsi fact trace firstitems free inv inventory last let inv invnext invitems invitems item reachable inv pred reachable item inv inventory invitems p puzzle let sol psolution containsi sol sol invitems pred winnable inv inventory reachable sword inv reachable boot inv fact chestsholduniqueitems item lone c chest ccontains pred restriction c chest sol puzzlesolution c ccontains sol sword free check restriction implies winnable thought people asked full tla v alloy post post share thought alloy first really lightweight modeler even complex model checked m also tiny example covered almost language feature mean pretty close practical alloy spec look like contrast tla example back contorted spec around minimizing stuff introduce alloy lot simpler also like ux lot repl quick exploration visualizer make presenting data easy got ton debug info visualization customizable project signature relation mean counterexample easily inspect run query alloy simplicity also weakness pretty tuned inspecting relationship data structure get harder thing get particular use model dynamic system saw could handle linear time dependence even got little hairy concurrency liveness checking chance like alloy flexible powerful formal method tool fun get going pretty quickly good niche record problem part niche interested alloy main site really good book neat puzzle builder found interested zelda randomizers sorry making sit word formal method find main site source code update chatting daniel jackson inventor alloy incredibly friendly intelligent guy realized conversation post might casting alloy fun toy unsuitable solving real problem absolutely case used design constraint relational data work beautifully thing people done pretty damn useful language definitely consider adding toolbox enjoyed send email tell something excited
675,Lobsters,formalmethods,CSE-Formal methods,Verifying Bubble Sort in Whiley,http://whiley.org/2017/12/19/verifying-bubble-sort-in-whiley/,verifying bubble sort whiley,specification implementation whileylabscom verification conclusion,bubble sort classic sorting algorithm lot wellknown issue long time since thought much algorithm turn interesting verification example whiley interesting loop invariant algorithm pretty simple loop array swapping adjacent item incorrectly ordered repeat nothing change example one iteration following swap would occur see iteration resulting array yet sorted order thus must repeat process specification right want try verify bubble sort algorithm mean well let think term type want sort function take parameter array type return result sorted array type whiley primitive integer array type already ie int need define sorted integer array type follows type sortedints int arr arr arr arr roughly say every element array must larger one exists using give signature sort function follows function sort int item sortedints result whilst pretty good start definitely complete specification example said resulting array must size original matter contain element original though perhaps different order still implementation right next job actually implement algorithm starting point function sort int item sortedints result bool clean reset clean flag clean true int look unsorted pair item item item found unsorted pair clean false int tmp item item item item tmp clean done return item implementation pretty straightforward using dowhile loop ensure go least one iteration continue longer find unsorted pair punch whileylabscom find compiles though verify verification point specified implemented sort function want verify implementation meet specification get compiletime guarantee resulting array sorted think similar type checking program though bit involved try compile program whileylabscom verification enabled see following telling u verifier belief expression could negative point thus potentially leading indexoutofbounds error runtime programmer deduce fact since start always incremented never happen also need know integer whiley unbounded wrap around verifier need help give necessary clue need provide loop invariant item loop invariant necessary verifier reason variable modified within loop variable information available verifier given loop condition loop invariant variable type invariant resolved verification problem around item verifier report error type invariant satisfied error reported verifier reason precisely loop need provide another loop invariant time control reach return statement need array sorted clearly arbitrary point loop nest necessarily true say given index know element correctly sorted clean flag hold update code follows property sorted int arr int n n arr arr function sort int item sortedints result item clean sorted item clean clean sorted item item done return item added property sorted int arr int n describes concept array arr sorted order including bound n thus entire array sorted n arr addition split loop invariant inner loop across two line using repeated clause conjuncted together verifier point sort implementation pass verification short complete implementation look like define type natural number type nat int n n define concept partially sorted array property sorted int arr int n n arr arr define type sorted array type sortedints int arr sorted arr arr function sort int item sortedints result bool clean reset clean flag clean true int look unsorted pair item clean sorted item item item found unsorted pair clean false int tmp item item item item tmp clean clean sorted item item done return item conclusion seen verify implementation bubble sort whiley whilst subtle detail process really painfull certainly making good use various feature provided whiley eg type invariant property etc make thing easier also need careful interpreting verified mean mean example program run memory likewise whiley verifier check termination loop hence verified program may still go infinite loop though manual inspection see implementation finally specification complete could since example even require resulting array size original despite limitation still lot value gained verifying code
676,Lobsters,formalmethods,CSE-Formal methods,Why you should use modeling [with TLA+/PlusCal],http://muratbuffalo.blogspot.com/2018/01/why-you-should-use-modeling-with.html,use modeling tlapluscal,need modeling failing plan planning fail use formal method amazon web service everything distributed system getting around building distributed system network reliable corner case many consensus transaction commit development process smart scale exhaustive model checking come rescue hygienic philosopher example discussed earlier happily adopted tlapluscal distributed system class conclusion mad question section new year commitment protocolsystem modeling workflow modeling business logic modeling data modeling die hard puzzle example,recently gave two day seminar debugging design tlapluscal dell wanted write motivation modeling debugging model still fresh mind need modeling kind modeling actually naming clash accidental fashion designer need model testshowcase design need modeling failing plan planning fail everything distributed system corner case many development process smart scale failing plan planning fail paper use formal method amazon web service launching complex service need reach extremely high confidence core system correct found standard verification technique industry deep design review code review static code analysis stress testing faultinjection testing etc necessary sufficient human fallibility mean subtle dangerous bug turn error design code faithfully implement intended design design fails correctly handle particular rare scenario found testing code inadequate method find subtle error design modeling show sloppy design think got design right complex service worth salt almost always get wrong wo nt find got wrong unless model design validate want find early without sunken investment correctly implementing flawed design otherwise even jepsen show screwed already much invested flawed design try patch end slow bloated system everything distributed system getting around building distributed system process likely make assumption bite back one hop faster two hop zero hop faster one hop network reliable assumed atomic block execution violated another process execute concurrently change system state way nt anticipate nt even get started fault league collude program action screw corner case many consensus transaction commit paper lamport gray mentioned could find correct threephase commit protocol database textbookspapers one fails account corner case threephase commit protocol proposed implemented usually attempted fix twophase commit protocol choosing another tm first tm fails however know none provides complete algorithm proven satisfy clearly stated correctness condition example discussion nonblocking commit classic text bernstein hadzilacos goodman fails explain process receives message two different process claiming current tm guaranteeing situation arise problem difficult implementing transaction commit protocol development process modeling good achieving clarity thinking communication lamport used tla without model checker even without model checker still found value modeling made nail specification communicate others precisely write thing precisely enables brain move clarity begets clarity focus begets focus abstract away clutter come precise model pluscal validate exhaustive modelchecking focus essence problem see alternative way implement development process refineimplement design pluscal model help lot communicating design engineer check implementation would work subsystem smart scale exhaustive model checking come rescue get design pseudocode tla pluscal could nt work invariantbased design ca nt check action pseudocode see preserve safetyinvariant condition done need model tlapluscal modelcheck right sigh read carefully everything distributed system many corner case sloppy pseudocode going cut nt trust deduction ability proving action preserve safety condition identify work simple toy example complicated example need lot extra mental inferencinglinking conceptsbeing creative errorprone consider hygienic philosopher example discussed earlier invariant talk critical section action talk fork per edge dynamic priority graph mental mapping would hard instead tlapluscal model checker get covered exhaustive checking breadth first traversal possible permutation action scheduling show possible execution including fault action model violate invariant happily adopted tlapluscal distributed system class even sophisticated algorithm refer student tlapluscal model practice play algorithm internalize going conclusion already got long later post write modelingabstracting process mathematicalinvariantbased thinking shortcoming modeling drop message interested trainingtalk mad question section new year commitment addition protocolsystem modeling workflow modeling business logic modeling tlapluscal also used data modeling us interesting use case please let know curious actually aware another use case pluscal modelchecking seems mostly toy example far define actorsoperators act order challenge model checker claim concurrent operation actorsoperators ever satisfy condition like happen model checker jerk responds trace showing possible adopt solution die hard puzzle example approach useful scheduling maybe even cluster job scheduling concern even anticipating statical failure still hitting deadline aware realworld use used practice bad time modeling model sometimes may need go bottom figure domainproblems first idea domain start model go top think would make sense opinionated making modeling call informed domain issue think modeling thinking made rigorous get ball rolling thinkingunderstanding part bit first attempting model
677,Lobsters,formalmethods,CSE-Formal methods,Capturing program invariants in ATS,https://bluishcoder.co.nz/2018/01/10/capturing-program-invariants-in-ats.html,capturing program invariant at,building high integrity application spark sparkada post sparkada at termination metric building high integrity application spark,reading book building high integrity application spark learn sparkada language formal verification great book go lot example proof spark wrote post sparkada earlier year tried example gnat edition working book oftened compared implement similar example at go one small example post show dependent type at allow capturing invariant function check type checking time prove absence particular class runtime error example looking book loop invariant section aim prove thing iterative loop ada procedure copyinto copy character string buffer object maximum capacity source string short buffer padded space sparkada code book procedure copyinto buffer buffertype source string characterstocopy buffercounttype maximumbuffersize begin buffer others sourcelength characterstocopy characterstocopy source length end index buffercounttype range characterstocopy loop pragma loopinvariant characterstocopy sourcelength characterstocopy characterstocopyloopentry buffer index source sourcefirst index end loop end copyinto quite readable anyone familiar imperative language number character copy initially set maximum buffer size changed length string le buffer set contain initial character buffer loop character string copied loopinvariant pragma spark statement tell checker certain invariant true invariant used number character copy always le equal length string change within loop given loop invariant spark assert indexing source string exceed bound string spark able reason buffer get indexed bound loop range characterstocopy capped maximumbuffersize sure nt need loop invariant book note spark tool improve time invariant compute automatically example second invariant check characterstocopyloopentry nt needed newer version spark kept enable checking older toolchains at modeled buffer type array character stadef smaxbuffersize int typedef char smaxbuffersize typedef char smaxbuffersize val maxbuffersize sizet smaxbuffersize at char represents array contiguous char type memory char initialized value char represents array unitialized char would type error use element array initializing suffix buffer name at idiom uninitialized initialized data respectively stadef keyword creates constant static system at constant language type v constant language value runtime level programming done post prefixed variable static system make clearer used maxbuffersize creates constant dynamic part at language value type sizet maxbuffersize sizet type index array sizet dependent type representing type single value match type instance function convert integer sizet case created maxbuffersize constant ever value smaxbuffersize type level constant at equivalent copyinto look like fun copyinto n nat buffer source string n void let val arrayinitizeelt buffer maxbuffersize val len source stadef stocopy min smaxbuffersize n val tocopy sizet stocopy min maxbuffersize len fun loop nat stocopy stocopy buffer sizet void let val buffer source tocopy loop buffer end len loop buffer end starting function declaration fun copyinto n nat buffer source string n void item curly bracket universal variable used setting constraint function argument round bracket function argument return type void function take two argument buffer source buffer reference type represented type similar reference argument c pointer argument c allows modification argument function mean entry function type uninitialized char array described earlier exit initialized char array body function fails initialize element array type error source argument string n n type index length string using dependently typed string use later function body set invariant body function call arrayinitizeelt set element array space character also effect changing type stored array char char array valid match type change specified function declaration buffer argument next three line compute number character copy val len source stadef stocopy min smaxbuffersize n val tocopy sizet stocopy min maxbuffersize len length string obtained prefix function name idiom show operate dependently typed string return string length return dependently typed sizet x x length string mean calling stringlength return length string set constraint type index result equal type index string passed declaration prelude additional annotation removed fun n int x string n sizet n reuse n argument result type tell compiler set constraint called important next two line perform operation static dynamic type level runtime level stadef set type level constant called stocopy constrained minimum max buffer size type level string length n val line set runtime variable calculation using runtime length two length must much result call described earlier type tocopy ensures saying singleton type fulfilled value represented stocopy at looping construct idiomatic use tail recursion instead loop also easier create type tail recursive function type iterative loop at reason converted loop tail recursive function at compiles c convert tail recursive function c loop danger stack overflow looping function without dependent type annotation would fun loop buffer sizet void let val buffer source tocopy loop buffer end take buffer index argument assigns buffer index equivalent entry source string nt yet copied number character needed copy tail recursively call increasing index initial call loop buffer needed convert integer number zero int type sizet type declaration loop function contains dependent type definition give invariant similar spark example fun loop nat stocopy stocopy buffer sizet void let starting argument buffer buffer meaning must initialized array index dependently typed sizet type level constrained le number character copy ensures indexing buffer source string never bound due previous statement set stocopy lesser maximum buffer size string size stocopy needed instead tocopy due universal argument written language typesystem runtime system body loop copying indexed character source string buffer recursively call incremented index nt copied required number character val buffer source tocopy loop buffer due constraint set function declaration buffer source string index checked compile time ensure nt bound recursive call loop fail typechecking bound index passed argument one issue recursive function could loop forever termination condition check incorrect variable used check nt explicitly increase decrease case index must increase eventually reach value termination check at resolve allowing termination metric added function part function declaration bracketed marker expression inside marker expected static constraint language evaluate tuple natural number compiler need prove lexicographically decreasing value loop index count need converted decreasing value stocopy done taking static constant number character copy subtracting index value compiler prof recursive call body function result something strictly le previous call termination metric added statically prof recursive function terminates program run tested include shareatspredefinehats include shareatsprestaloadhats stadef smaxbuffersize int typedef char smaxbuffersize typedef char smaxbuffersize val maxbuffersize sizet smaxbuffersize fun copyinto n nat buffer source string n void let val arrayinitizeelt buffer maxbuffersize val len source stadef stocopy min smaxbuffersize n val tocopy sizet stocopy min maxbuffersize len fun loop nat stocopy stocopy buffer sizet void let val buffer source tocopy loop buffer end len loop buffer end implement let var b char maxbuffersize val copyinto b hello world fun printbuffer n nat n smaxbuffersize smaxbuffersize n buffer n sizet n void let val n print val print buffer n val n maxbuffersize print n printbuffer buffer n end val printbuffer b end example creates array stack allocated object line var b char maxbuffersize stack allocated memory deallocated exit scope defined also possible create heap allocated buffer pas copyinto implement let val pfb pfgc b arrayptralloc char maxbuffersize val copyinto b hello world fun printbuffer n nat n n buffer char n int n void let val n print val print buffer n val n print n printbuffer buffer n end val printbuffer b val arrayptrfree pfb pfgc b end explicitly allocates memory array using arrayptralloc dereferences copyinto call using b syntax note array later free using arrayptrfree calling free memory would compile error although simple function demonstrates number safety feature destination buffer indexed beyond bound source string indexed beyond bound buffer overflow writing destination buffer uninitialized data buffer function exit internal recursive call must terminate book building high integrity application spark great book learning spark also learning sort proof used production application using sparkada apart learning bit spark also good exercise think similar safety check implemented language choice
678,Lobsters,formalmethods,CSE-Formal methods,Software Crisis: The Next Generation,http://habitatchronicles.com/2016/10/software-crisis-the-next-generation/,software crisis next generation,software crisis next generation software eating world sturgeon law million million billion top security breach brian krebs distributed denial service attack million compromised iot device akamai look stupid people har har har train people insulin pump pacemaker car hotel door lock midori ctsrd caja secure ecmascript s frozen realm,software crisis next generation tl dr consider current state art software alongside current trend tech business hard conclude oh god gon na die think fix thing die marc andreesen famously say software eating world analysis basically confirmation bunch long standing bias course think completely right also software guy naturally would think natural way world observably true increasing fraction everything physically socially economically important world turning software problem software software crap mean mere sturgeon law everything crap level crap either put threshold much higher much know maybe optimist one dirty little secret industry spoken among developer kind masochistic glee whenever gather talk shop little understood appreciated outsider anybody seen system inside major tech company know true minor tech company inside product software component especially bad product nontech company run people even removed engineering reality tech executive tend pretty far removed even came technical rank originally indeed even oversee technical thing daily basis talk dysfunctional corporate culture entertaining always reason stuff crap far basic betterthancrap cost lot crap usually sufficient even prepared argue purely darwinian return investment basis actually made tradeoff wrong whether talking roi specific company human civilization whole every dollar put making software le crappy spent thing might also want list basically endless perspective evolutionary biology good enough good enough knew right economy ferocious appetite software produced teeming mass developer know produce crap tooling optimized producing crap faster methodology process organized around crap producing developer crap producing tool want cool new stuff cool new stuff need software crappy software good enough like said ok least lot facebook loses post every netflix feed dy movie get interrupted web browser get jammed clickbait website got fooled visiting well thing irritating rarely lasting consequence besides like paid much paid anything thing work quite well might wish ground complaint like andreesen say software eating world software crap world eaten crap still bad crap starting seep thing actually matter leading indicator come state computer security seeing alarming rise big security breach epic next point hardly news target million customer credit card identity information stolen oh security clearance personal data million federal employee taken office personnel management unfortunate somebody break yahoo make billion account record password hash answer security question ho hum regularly see survey article like top security breach googled major security breach autocompletes offered past month website security pundit brian krebs taken distributed denial service attack originating botnet made million compromised iot device many ironically security camera attack extreme got evicted hosting provider akamai whose business protecting customer ddos attack starting get bleedover world crap good enough world crap kill obviously something serious like implanted medical device pacemaker insulin pump say software crap pacemaker glitch die somebody hack insulin pump fiddle setting kill thing crap except course software device still mostly crap anyway come back moment least make argument crapfree actual requirement people anyway take argument seriously webenabled security camera hand seem kind lifeordeath entanglement almost certainly something developer gave much thought consider krebs ddos possible device used software flaw let taken repurposed attack bot case mainly used get attention noisy expensive mostly grabbed headline machinery could easily used clobber system hospital emergency room kind critical infrastructure talking consequence matter potential kind much serious impact lost people think talk computer security done lot hand wringing asking much fundamental question kind foolishness even possible first place assumed kind security incident inevitably happen time time part price technological civilization certainly say need try harder secure system largely accepted without question thing psychologist term kind thinking call learned helplessness another example every month seems greeted yet another study researcher shocked shocked discover readily people plug random usb stick find computer depending spin coverage variously represented look stupid people har har har train people seems pervasive idea computer security world maybe fix problem getting better user question blame user hell perfectly ok plug random usb stick found matter overwhelming majority malware even possible able visit random web site click link strange email matter run damn executable happen stumble across anything bad happen thing solution known since least mid struggle get security software professional pay attention feel like trapped world medicine prior germ theory disease like lone voice cry hey doctor wash hand doctor like wut people made job protect u evil internalized crap normal even imagine thing way another telling albeit horrifying fact lot malware even bothering exploit bug like buffer overflow whatnot lot using normal apis normal way intended used implementation flawed design crap let turn attention back medical device expect people really careful indeed many case tried even still headline terrible vulnerability insulin pump pacemaker car even mundane important thing like hotel door lock basically think random item technology imagine need secure google fill blank security vulnerability generally find something horrible current tech ecosystem noncrap treated edge case dealt hand byexception basis basically really needed quality put brute force make noncrap crazy expensive cost justified extreme use case say avionics company produce lot software software qa organization within make effort current software qa practice dysfunctional much like contemporary security practice big emphasis testing often idea use statistical metric quality work assembling toyota much software software pathologically nonlinear qa folk company worked dedicated capable people generally speaking ultimately unsuccessful issue lack diligence competence underlying problem big complicated appetite kind heavyweight process sometimes help either people paying bill developer one reason thing bad core infrastructure rely programming language operating system network protocol predates current need software actually crap historical term today open ecosystem unanticipated development well lot people anticipated people position responsibility took seriously arguably took wrong fork road sometime vaguely hindsight helpful anyway giant installed base replacing boil ocean problem back late started lot talk came called software crisis basically problem without malware internet back big concern hardware advanced faster ability produce software bigger faster computer people worried problem complexity correctness also problem going write software need sort solved first problem settling crap sort solved second problem making easier produce crap meant people could never really figured make easy produce noncrap protect crap already crisis much go away got swept rug see real problem scope complexity asked machine exceeded bound coping ability time dependence system grown point really really really live without software crisis coming back newer virulent form basically stop using softwareentangled technology could hey nobody driver seat civilization collapse die keep using increasingly risk catastrophic failure kill u accident catastrophic vulnerability asshole kill u purpose want die assume either accept really crap free fallible certainly arrange radically limit scope damage available particular piece crap vastly reduce systemic crappiness see three pronged strategy embrace much aggressive finegrained level software compartmentalization actively deprecate coding architectural pattern know lead crap developing tooling framework library etc make better practice path least resistence developer work move formal verification technique ivory tower academia center practical developer work flow corresponds bigger bundle specific technical proposal unpack suspect already taxing lot reader attention span hope go deeply future posting say thing overall strategy though continue number interesting initiative try build reliable secure computing infrastructure bottom couple favorite midori project microsoft ala gone great source code repo sky full disclosure little bit work midori group year back ctsrd project university cambridge still among living spun useful relevant technology really tried take run installed base problem problem significant real plausible approach laid mark miller google effort secure javascript environment notably caja secure ecmascript s also full disclosure one cochampions along mark caridy patiño salesforce sesrelated proposal frozen realm currently working way javascript standardization process mark advocate incremental top approach deliver environment support creating running defensively consistent application code one ensure secure reliable long underlying computational substrate initially web browser compromised way give application developer sane place stand begin delivering immediate benefit use drive demand securing next layer next approach require u replace everything think mean much higher odds success may noticed essay tended weave back forth software quality issue computer security issue coincidence two thing joined hip crappy software software misbehaves way problem misbehavior much whether misbehavior accidental deliberate consequently thing constrain misbehavior help quality security need get work adding constraint world
679,Lobsters,formalmethods,CSE-Formal methods,Writing basic proofs in ATS,https://bluishcoder.co.nz/2018/01/03/writing-basic-proofs-in-ats.html,writing basic proof at,at quantified constraint installing installing at script installing git repository dependent type dependent type at using external solver quantified constraint hongwei note issue basicspresats threaded proof dataprops datatypes word hongwei xi fibonacci conclusion,post cover using latest version at at go proving basic algorithm written couple post using proof at writing proof at complicated fact dependent type proof component language use full at language us restricted subset language implementing proof something like factorial function ca nt write factorial type system way write runtime system factorial latter written using function former need encoded relation dataprop dataview definition recent addition at simplified task writing proof enabling constraint checking at done external smt solver rather built solver external solver like feature builtin solver solve constraint at solver example nonlinear constraint solveable at directly using solver post start describing write proof using quantified constraint easiest proof writing method at requires solver next continue solver describe write proof using without quantified constraint finally go writing proof encoding algorithm relation dataprop approach progressively go easy le intrusive code method difficult system requiring threading proof throughout code installing external solver used example post install github linux git clone http cd mkdir build cd build cmake g unix makefiles dcmakebuildtyperelease make sudo make install installing at used example post various script installing install manually git repository ubuntu based system sudo aptget install buildessential libgmpdev libgcdev libjsoncdev git clone git git clone http githubcomgithwxiatspostiatscontribgit export patshome pwd export patscontrib pwd export path patshomebin path cd configure make cd make datsc cd make mv f patshomebin cd make mv f patshomebin optionally install various at backends generating code language cd make cd make mv f patshomebin cd make mv f patshomebin cd make mv f patshomebin add patshome patscontrib change path bashrc profile system file environment variable populated starting new shell dependent type function add number at proven correct using dependent type specifying expected result using dependently typed integer fun addint n int int b int n int n b wo nt compile implementation anything result addition two integer constraint language used dependent type restricted subset at language wrote bit post dependent type at following implementation factorial function without proof include shareatspredefinehats include shareatsprestaloadhats fun fact n int int n n fact n else implement let val r fact println r end compile run something like patscc prove implementation factorial correct need specify factorial constraint language at ideally like write something like following fun fact n nat n int n int fact n would check body function implement something match result fact unfortunately restricted constraint language at nt allow implementing using arbitary function type definition using external solver default at solves constraint using built constraint solver mechanism using external solver case type check previous factorial example using use following command patsopt tc constraintexport hello typechecking finished successfully note change use patsopt instead patscc tc flag type checking phase constraintexport result constraint exported stdout piped command invokes check constraint result since resulting program may contain code at ca nt typecheck actually build final executable invoke patscc command line option disable type checking important checking succeeded external solver patscc constraintignore quantified constraint using quantified constraint new feature at quite experimental hongwei note issue due different version cause problem however interesting approach proof at include process using hope becomes stable progress at provides stacst keyword introduce constant static part type system static restricted constraint language used specifying type example stacst usage prelude file basicspresats using stacst introduce function static system factorial stacst fact int int following code valid fun fact n nat n int n int fact n at nt know fact static system know function take int return int external solver extend at constraint knowledge adding assertion solver engine using staticassert praxi factbase fact void praxi factind n int n fact n n fact void keyword praxi used defining axiom whereas prfun used proof function need implementation currently checked compiler may future time documentation perspective using praxi show plan actually prove axiom two axiom add proof store fact factorial function first factbase asserts factorial zero one second asserts n n greater equal factorial n equivalent n fact n add fact knowledge use solverassert fun fact n int n n int n int fact n let prval solverassert factbase prval solverassert factind n else n fact n end typechecks successfully changing implementation incorrect result failed typecheck unfortunately often case experimental code sometimes incorrect implementation hang causing consume large amount memory noted earlier implementation fact closely mirror specification following tail recursive implementation fact also proved correct specification include shareatspredefinehats include shareatsprestaloadhats stacst fact int int extern praxi factbase fact unitp extern praxi factind n po fact n n fact unitp fun fact n nat n int n int fact n let prval solverassert factbase prval solverassert factind fun loop n r nat n int n r int r int fact n r n loop n n r else r loop n end implement let val r fact println r end tested built patsopt tc constraintexport hello typechecking finished successfully patscc constraintignore threaded proof another approach using external solver add constraint store via solverassert instead call axiom explicitly proof function threaded body function fact implemented way stacst fact int int extern praxi factbase fact void extern praxi factind n int n fact n n fact void fun fact n nat n int n int fact n n let prval factind n n fact n end else let prval factbase end code verbose due needing embed prval statement let block nt suffer incompatibility quantified constraint example incorrect implementation give error equivalent tail recursive version fun fact n nat n int n int fact n let fun loop n r nat n int n r int r int fact n r n let prval factind n loop n n r end else let prval factbase r end loop n end dataprops datatypes still possible write verified version factorial without using external solver syntactic overhead higher specification fact need implemented relation using dataprop dataprop introduces type proof system much way declaring datatype runtime system at proof object constructed type exist proof checking time erased runtime taken proof argument function included return value proof function also written use word hongwei xi prop like type value classified prop often called proof dynamic erased compiler proof dynamic proof construction runtime comparison syntax dataprop datatype type list integer implement dataprop proplist propnil propcons int proplist datatype list listnil listcons int list specifiy fact relation useful see implemented logic based progamming language like prolog fact fact n r n n fact r n equivalent dataprop dataprop fact int int factzero n int n factsucc n n fact fact n r encodes relation fact n r fact defined fact fact n n n fact n dataprop creates fact int int prop two constructor factzero encodes relation fact factsucc fact encodes relation fact n n fact declaration fact function us prop proof return value enforce result must match relation fun fact n nat n int n r int fact n r int r return value tuple first element proof value left pipe symbol second element factorial result existential variable r int used associate returned value result fact relation universal variable n nat used provide first argument fact prop unification compiler check relationship variable match implementation function fun fact n nat n int n r int fact n r int r n let val fact n val r n factsucc r end else begin factzero end note result recursive call fact deconstructs proof result value proof used result factsucc constructor proof constructed like datatypes example factsucc factzero fact successor next factorial fact factsucc factsucc factzero fact etc way seen call fact hit first branch condition recursively call fact hit second branch conditional return prop factzero return back caller returned factsucc factzero giving prop return type fact plugging value n r return type int r value mean value function return must function pas type checking although proof syntactic overhead runtime overhead nil proof erased typechecking factorial computation code remains full compilable program include shareatspredefinehats include shareatsprestaloadhats dataprop fact int int factzero n int n factsucc n n fact fun fact n nat n int n r int fact n r int r n let val fact n val r n factsucc r end else begin factzero end implement let val pf r fact println r end compile run patscc tail recursive implementation fact using dataprop type check fun fact n nat n int n r int fact n r int r let fun loop r int nat n pf fact r n int n r int r int int fact n int n loop factsucc pf n r else pf r loop factzero n end dataprop defined recursively based successor previous factorial ca nt get predecessor tail recursive loop structured count mean pas previous factorial prop proof argument pf pas index current factorial computed fibonacci fibonacci similar factorial way proof constructed quantified constraint version trivial stacst fib int int extern praxi fib unitp extern praxi fib unitp extern praxi n natn fib n fib fib unitp fun fib n int n n int n int fib n let prval solverassert prval solverassert prval solverassert n else n else fib fib n end threaded version using external solver nt much verbose stacst fib int int extern praxi fib void extern praxi fib void extern praxi n natn fib n fib fib void fun fib n int n n int n int fib n n let prval end else n let prval end else let prval n fib fib n end dataprop version quite readable advantage needing external solver dataprop fib int int n nat int n fib fib fun fib n nat n int n r int fib n r int r n else n else let val fib val fib end dataprop map nicely prolog implementation fibonacci fib fib fib n r fib fib r leave proving different implementation fib reader conclusion algorithm could demonstrated post getting long pointer interesting example article at proof general proof code add syntactic overhead code work using external solver look like thing become easier automated solving at allows programmer write normal code add proof needed barrier entry applying proof quite low given suitable documentation example
680,Lobsters,formalmethods,CSE-Formal methods,"Formally-Verified Interpreter for a Shell-like, Programming Language (2017)",https://hal-univ-diderot.archives-ouvertes.fr/hal-01534747/document,formallyverified interpreter shelllike programming language,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer creationdate keywords moddate trapped false ptexfullbanner pdftex version tex live linux kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream kta xi sõ q b endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj kid r r r r r limit docstart endobj obj title formally verified interpreter shelllike programming language r parent r endobj obj length filter flatedecode stream x xur jqrj pbf c endstream endobj obj font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream w tix k w f e x endstream endobj obj font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream ղ z l wsu n q r p j endstream endobj obj font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream j gl w u rjl
681,Lobsters,formalmethods,CSE-Formal methods,"ERC20-K: Formal, Executable Specification of ERC20",https://runtimeverification.com/blog/?p=496,formal executable specification,standard ethereum k k iele fast llvm backend k kevm highlight ewasm iele solidity viper plutus technical detail download get involved uiuc license contribution git rvinc acknowledgement kevm technical report philip daian iohk kevm iele,standard one important standard implementation token within ethereum smart contract provides basic functionality transfer token approved spent another onchain third party unfortunately leaf several corner case unspecified make le ideal use formal verification token implementation indeed rv inc asked verify smart contract compliance however found unclear compliance mean existing presentation far serving mathematical model standard token consequently decided create mathematically rigorous formalization making sure corner case thought explicitly covered thoroughly tested claim prove implementation token correct mean provably satisfy rule k chosen k semantic framework formalization effort several reason first k executable defined semantic model tested find early error design accumulate confidence adequacy second k provides suite formal analysis tool used combination semantics thus prove property specification total supply changed application operation one hand also prove property smart contract implementation token third k modular allows u compositionally define semantics execution environment programming language top giving feel plugandplay favorite language moreover done verify complex program resulting language fourth k active development control design implementation quickly respond future need example plan incorporate within iele vm implement fast llvm backend k successful eliminate need adhoc implementation vms token top done evm kevm semantics provided injection morphism configuration based semantics cell evm configuration based partial map adequately defined highlight parametric address value maxvalue way easily instantiated various target execution environment besides evm ewasm iele various programming language besides solidity viper plutus parametric execution environment pluggedandplayed within execution environment formal semantics virtual machine programming language function simply added target vmlanguage syntax semantics smoothly composes vmlanguage semantics yielding variant vmlanguage support done simple imperative language imp video show interactive program imp call function easily adapted language implementation regarded library video cover corner case including explicitly case exception thrown example transfer value function requires case depending whether caller different whether transfer succeeds throw executable allows u elegantly integrate programming language item also allows u test indeed like code formal specification also error especially formal specification formally compare unlike code verified specification nothing prove formal specification correct since serf definition correct definition best accumulate confidence correctness various mean one tangible mean test end provide unit test semantics easily translated test implementation also possible translate run test suite already deployed ethereum token building confidence semantics accurately reflects popular deployed token technical detail download thoroughly commented freely available uiuc license permissive mit license github comment contribution highly appreciated get involved spirit open source communitydriven development holding formal specification discussion channel software released uiuc license totally free community use see fit welcome contribution git encourage interested party engage u ask question contribute code build experience tool also always looking contributor able work documentation efficient installquickstart process new developer example test hiring sure keep eye open helpful contributor also posting update brand new twitter page rvinc hope interested developer follow interact let build secure smart contract everybody together acknowledgement thank k team defined kevm semantics see technical report verified smart contract compliance effort inevitably led quest formal specification particular would like thank philip daian brainstorming help understanding corner case also warmly thank iohk generous funding support kevm iele also stimulating technical discussion research team discussion iele planned separation settlement computational layer cardano particular led question whether specification defined abstract way make usable combination computational layer different evm
682,Lobsters,formalmethods,CSE-Formal methods,Proofsweeper: Play Minesweeper by formally proving your moves in Idris,https://github.com/A1kmm/proofsweeper,proofsweeper play minesweeper formally proving move idris,proofsweeper idris getting started idris installation instruction stack installation instruction play rule game general rule proofsweeper rule constructing proof supporting object mine fact uniqueness status using proofsweeperlemmas simple example proof proof contradiction,proofsweeper proofsweeper variant classic minesweeper game advance game must formally prove cell mine using idris game designed fun way improve ability write formal proof idris played square grid cell selected create new game game played using commandline utility called proofsweeperengine control game flow writing proof favourite text editor proofsweeperengine responsible generating axiom thing known true eg certain cell mine touching mine resulting current state game also produce console visualisation state play help plan formal proof want make formal proof proofsweeperengine also responsible invoking idris validate proof valid updating everything new state getting started use proofsweeper need idris installed path proofsweeper tested may work version idris follow idris installation instruction check invoking idris command line work continuing also need haskell stack installed refer stack installation instruction install stack check run stack commandline continuing nt already clone proofsweeper repository git clone http change proofsweeper directory change gameengine subdirectory run stack install check run proofsweeperengine commandline play game always change gameplay subdirectory proofsweeper repository decide big board want play reasonable starting point want long game gameplay subdirectory run proofsweeperengine new whatever board size want game print ascii art representation game also generate file support game play play typical gameplay flow follows change gameplay subdirectory run proofsweeperengine new command set game create proofsweeperplayidr look proofsweeperplayexampleidr example create file write proof see information unknown cell either mine mine proof must named mineatxy nomineatxy x replaced number coordinate proof relates may want use idris environment verify proof go build proof need derive minefact mkcoord x ismine minefact mkcoord x isnotmine axiom valid proof hole metavariables unsolved run proofsweeperengine move mine x proofsweeperengine move notmine x check proof accepted axiom updated case nonmine likely expose new information count adjacent mine new ascii art representation board printed repeat mine non mine status cell known get stuck sometimes enough information visible prove anything use proofsweeperengine hint x command expose unknown cell might provide enough information continue proving want see visualisation game state use proofsweeperengine print command rule game general rule game played square grid made cell every cell either mine nonmine cell mine total number mine secret cell revealed ca nt rely one time cell either known mean directly observe whether mine unknown mean directly observe whether mine may able infer whether known cell mine also observe many neighbouring cell mine even unknown cell neighbour directly adjacent cell left right diagonally left right left right cell fewer neighbour edge corner edge wrap around cell known stay known rest game win cell known proofsweeper rule cell unknown becomes known prove either mine nt mine game play use asserttotal believeme similar assertion function could undermine soundness game modify proofsweeperknownidr proofsweeperbaseidr help win game would cheating use modify lemma proofsweeperlemmasidr write lemma utility help play game either proofsweeperplayidr file nt look modify gamedata contains full state game including unknown cell may want keep track many time use hint command compete others see us least complete board constructing proof supporting object look proofsweeperbaseidr coord represents coordinate cell eg mkcoord represents top left corner grid mineprop also proofsweeperbase represents possible true state cell whether known ismine isnotmine represent cell mine knownnotmine specialised represents cell mine many neighbouring mine note construct mineprop like nt mean true look proofsweeperknownidr file generated updated game play progress must game progress look file notice gridsize defines size grid mine fact minefact also defined generated file proofsweeperknownidr key data type gadt representing proof whether given cell mine notice two parameter coord fact relates mineprop applies cell minefact constructor known mine nonmine minefacts treat axiomatically true use build fact since knownnotmine like isnotmine except provides information convert fact isnotmine form using knownnotmineisnotmine constructor allminesaccountedfor constructor let prove cell mine known nonmine cell number mine already touching enough known mine example known nonmine known touching exactly one mine prove cell touching mine prove cell touching mine using constructor use must specify known nonmine coordinate coordinate cell want prove nt mine proof known nonmine actually known nonmine usually taken nomineat axiom list known mine coordinate touching mine proof list right length proof known mine mine proof known mine neighbour known nonmine proof coordinate constructing proof neighbour known nonmine proof coordinate one supplied known mine similar constructor allnonminesaccountedfor let prove cell mine neighbour known nonmine enough neighbour provably mine example known nonmine touching mine neighbour prove two neighbour mine prove anyo f remaining neighbour mine constructor uniqueness status four additional axiom provided currently constructed believeme premise impossible improve cell mine nonmine useful proof contradiction notnonmineimpliesmine disprove cell mine prove mine notmineimpliesnonmine disprove cell mine prove nonmine nonmineimpliesnotmine prove cell mine disprove mine mineimpliesnotnonmine prove cell mine disprove nonmine using proofsweeperlemmas proofsweeperlemmas file come useful lemma help prove thing eqtestiseqcoord useful lemma prof use compare two coordinate comparison come true coordinate since list operation rely comparison axiom use list useful lemma ifwithproof let handle true false case pass proof fact true false branch let deal statement form v given v list proposition p hold v need know length list supply element list plus proof element list also need supply proposition p proof equality comparison returning true mean element equal usefully used list coords case use eqtestiseqcoord provide proof true equality comparison mean equality simple example proof top proofsweeperplayexampleidr provides useful template constructing proofsweeperplayidr play game also show two common tactic use prove thing proofsweeper first example want prove mine board right right wall neighbour known axiomatically nonmine one neighbour also known axiomatically neighbour apart namely mine using allminesaccountedfor constructor possible construct minefact mkcoord ismine run proofsweeperengine move mine check proof mark mine notice naming proof proofsweeperengine expects naming scheme followed proof contradiction example complex proof constructed layout mine mean x possibly mine would create contradiction refer comment proofsweeperplayexampleidr see player assumed xcoord mine proved led contradiction leading construction void contradiction disproved mine notmineimpliesnonmine used construct proof xcoord mine
683,Lobsters,formalmethods,CSE-Formal methods,"Applying ""Design by Contract"" (1992)",http://se.ethz.ch/~meyer/publications/computer/contract.pdf,applying design contract,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj page r type catalog endobj obj filter flatedecode length r stream e r vp rp
684,Lobsters,formalmethods,CSE-Formal methods,Formal Verification: The Gap Between Perfect Code and Reality,https://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality/,formal verification gap perfect code reality,formal verification gap perfect code reality tack hunt pool,formal verification gap perfect code reality tack hunt pool
685,Lobsters,formalmethods,CSE-Formal methods,"Solving the “Wolf, Sheep and Cabbage” problem using TLA+ and the TLC model checker",https://medium.com/@jparreira/solving-the-wolf-sheep-and-cabbage-problem-using-tla-and-the-tlc-model-checker-28271a5afdfc,solving wolf sheep cabbage problem using tla tlc model checker,solving wolf sheep cabbage problem using tla tlc model checker tla learning tla video course solving problem tlc problem solution right sequence crossing boatman need perform cross item safely state machine allowed selectpayload crossalone crossitem otherbank defining consistency invariant consistencyok defining solution found assertion solutionnotfound consistencyok specification prettyprint finding solution run model tlc model checker log,solving wolf sheep cabbage problem using tla tlc model checkerlast week bumped microsoft research talk leslie lamport named thinking code software engineer year experiencing always assumed describing system formally mathematics well good academic environment real world company businessesleslie talk realworld example presented made think twice namely existence model checker made think twiceif tla delivers advertised could write formal specification verify using leslie tlc model checker stated talk big realworld company found subtle bug algorithm still design phase single line code written say big company mean company like amazon microsoft even ibmformal specification seemed working big guy decided learn tla leslie specification language containing little possible beyond needed write simple mathematics precisely learning tlaleslie small video course online started way funnier imagined leslie great teacher awesome sense humor wide selection hat sun glass see course video understand know way around simple boolean logic statemachines concept mathematical set operator find soon conquer cumbersome ascii notation able read spec available even write ownthe documentation seems hard understand many formal proof give first read find time learn skip hard proofing part learn essential semantics write specsas time go need gain vocabulary express algorithm go back documentation suddenly hard proof become understandable brain automatically enters math zone start writing tla specssolving problem tlci learn better example following leslie lead die hard problem solution decided write specification tla could solve wolf sheep cabbage problemthe problem defined follows boatman wolf sheep cabbage one side river must cross sidehe take one item trip river bankshe leave wolf sheep alone well sheep cabbage alone otherwise wolf eat sheep sheep eat cabbagethe problem solution right sequence crossing boatman need perform cross item safelythis mean use tlc model checker check state tree viable branch desired state reached item crossed safely easily obtained configuring model invariant function invariant function evaluates false given state tlc show state trace step required reach state solution since tlc us breadthfirst search sequence step shortest path solutionthe state machinein tlc define state machine defining initial state possible step change current statein wolf sheep cabbage problem initial state wolf sheep cabbage boatman one bank river let assume left bank change current state fact state next state two following step boatman cross itemthe boatman cross alonein order boatman able cross item aka payload must select one keeping mind wolf left alone sheep sheep left alone cabbagewith mind add new action list select item cross final possible step boatman selects item crossthe boatman cross selected itemthe boatman cross alonefrom assume already know basic tla notationlet start state variable variable required describe given state problem state machine trivial definition initial state following mean initial state item left bank river item yet selected transport payload obviously item transported previous step since none let define first action boatman selects item cross know boatman select item current bank bank currently random item must item remaining item allowed left alone river bank boatman leaf cross riverthe predicate allowed asserts certain set entity allowed left alone trivially defined follows notice leaving item alone allowed problem rule since wolf would start eating sheep would eating cabbage predicate asserting given set item allowed left alone specify selectpayload action rule follows using existential quantifier express payload selected transport payload considered set resulting removing allowed set otherwise payload valid step possible according rule tlc model checker search another item according existential quantifier enables state transitionit also important item transported previous step state variable last transported back immediate step since would simply undoing current state condition significantly reduce number possible statesif item found yet solution state boatman option crossing river alone pick another item river banknow selected item transport trivially define crossalone crossitem step follows since crossing mean toggling boatman current margin defined simple function otherbank return opposite bank name nextstate action simple disjunction possible step defining consistency invariantnow state machine rule defined let define function guarantee model consistency function must invariant throughout model checking time get state function true error algorithmthe consistencyok function defined follows three thing must true every single state boatman one river bank left rightthe total number item two bank must always item left alone bank boatman present must allowed set itemsdefining solution found assertionto solve problem use tlc model checker ability verify given function invariant state checked mean define function false solution found tlc report error able inspect error trace error trace step sequence required reach solutionthis invariant function solutionnotfound easily defined follows assuming model consistent assured consistencyok invariant left bank empty implies item right bank intended found solutionthe specification prettyprintthe tla toolbox nice prettyprint feature make spec little bit easier read specification prettyprint generated toolbox finding solutionin order use tlc model checker find solution boatman problem need create specification model toolboxthe full ascii version specification following toolbox model overview need enter initial predicate nextstate relation follows forget define invariant also ready check model find solution select run model option toolbox tlc model checker menuafter second get error saying invariant solutionnotfound violated great mean solution error tracein errortrace output window scrolldown last state listed state invariant failed inspecting log state variable give u sequence step reach solution something like inspection learn solution step sequence following cross sheepcross alonecross wolfcross sheepcross cabbagecross alonecross sheepby inspecting right bank state variable verify indeed item successfully crossed left right without breaking rule definedwho said math fun
686,Lobsters,formalmethods,CSE-Formal methods,Introduction to Software Verification,https://www.youtube.com/watch?v=dGsD_K-IAgA&t=680s,introduction software verification,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
687,Lobsters,formalmethods,CSE-Formal methods,Runtime error in formally verified CompCert C compiler's parser,https://github.com/AbsInt/CompCert/issues/211,runtime error formally verified compcert c compiler parser,join github today sign comment bschommer reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign comment bschommer added commit referenced issue dec pas env back stmt decls source issue environment elaboration declaration expression loop passed back perform action time signed another tab window reload refresh session signed another tab window reload refresh session
688,Lobsters,formalmethods,CSE-Formal methods,Refinement Reflection: Complete Verification with SMT (2017),https://arxiv.org/pdf/1711.03842.pdf,refinement reflection complete verification smt,,obj filter flatedecode length stream endstream endobj obj filter flatedecode length stream xڭy պ c mm r xi ci wۂ
690,Lobsters,formalmethods,CSE-Formal methods,"Construction and Formal Verification of Fault-Tolerant, Distributed, Mutual Exclusion (2017)",https://icfp17.sigplan.org/event/erlang-2017-papers-construction-and-formal-verification-of-a-fault-tolerant-distributed-mutual-exclusion-algorithm,construction formal verification faulttolerant distributed mutual exclusion,use conference time zone greenwich mean time belfast,use conference time zone greenwich mean time belfastselect time zone aoe anywhere earth midway island samoa hawaiialeutian hawaii marquesas island gambier island alaska tijuana baja california pitcairn island pacific time u canada mountain time u canada chihuahua la paz mazatlan arizona saskatchewan central america guadalajara mexico city monterrey easter island central time u canada eastern time u canada cuba bogota lima quito rio branco caracas santiago la paz faukland island manaus amazona brazil atlantic time goose bay atlantic time canada newfoundland montevideo miquelon st pierre greenland buenos aire brasilia distrito federal brazil midatlantic cape verde gmt azores utc coordinated universal time greenwich mean time belfast greenwich mean time dublin greenwich mean time lisbon greenwich mean time london gmt monrovia reykjavik amsterdam berlin bern rome stockholm vienna belgrade bratislava budapest ljubljana prague brussels copenhagen madrid paris west central africa windhoek beirut cairo gaza harare pretoria jerusalem minsk syria moscow st petersburg volgograd nairobi tehran abu dhabi muscat yerevan kabul ekaterinburg tashkent chennai kolkata mumbai new delhi kathmandu astana dhaka novosibirsk yangon rangoon bangkok hanoi jakarta krasnoyarsk beijing chongqing hong kong urumqi irkutsk ulaan bataar perth eucla osaka sapporo tokyo seoul yakutsk adelaide darwin brisbane hobart vladivostok lord howe island solomon new caledonia magadan norfolk island anadyr kamchatka auckland wellington fiji kamchatka marshall chatham island nukualofa kiritimati
691,Lobsters,formalmethods,CSE-Formal methods,Finding bugs in Haskell code by proving it,https://www.joachim-breitner.de/blog/734-Finding_bugs_in_Haskell_code_by_proving_it,finding bug haskell code proving,intervalshs available formal verification haskell good way verify haskell code paper massaging translation three socalled type axiom used safe way time prove thing resulting proof file using program fixpoint fact functional induction scheme update would exist use command resulting proof effort gain find fix three bug conclusion final rant many lemma basic function,last week wrote small nifty tool called bisectbinary semiautomates answering question extent fill file zero still wrote haskell part haskell code intervalshs module data structure represented sorted list interval data interval offset offset newtype interval interval interval code kind haskell code like write small local recursive function guard case analysis done intersect interval interval interval intersect interval interval interval go go go go reorder symmetry go disjoint go subset f go overlapping otherwise f go f max clearly code already complicated enough easy make mistake could put quickcheck property test code proving mood available formal verification haskell ten month ago complained good way verify haskell code created nifty hack ghcproofs thing changed since group upenn mostly antal spectorzabusky stephanie weirich created hstocoq translator haskell theorem prover coq used hstocoq various example described paper hightime use real easiest way use hstocoq moment clone repository copy one example directory eg examplessuccessors place haskell file verified put right module name makefile also commented part haskell file would drag nonbase dependency massaging translation often hstocoq translates haskell code without hitch sometimes bit help needed case specify three socalled edits haskell code us interval name type value constructor fine haskell separate value type namespaces coq line rename value intervalsintervals ival change constructor name ival use type haskell code coq version base library come hstocoq support yet change via rename type ghcnumint normal int type mapped z type perfect fit verification would catch problem arise due boundedness since none code arithmetic comparison fine biggest hurdle recursion local go function coq requires recursive function obviously ie structurally terminating go example first case argument go simply swapped much obvious infinite loop specify termination measure ie function take argument x y return type nat decrease every call add length x y multiply two add one first interval x end first interval y problematic function toplevel function could tell hstocoq termination measure would use information define function using program fixpoint unfortunately go local function mechanism available u care verification preserving exact haskell code could easily change haskell code make go toplevel function case want change haskell code another way offered hstocoq translate recursive function using axiom unsafefix forall look scary explain previous blog post axiom used safe way point dissenting opinion consider valid verification approach official stand hstocoq author team using unsafefix verification temporary state eventually expected fix heh example moving function toplevel using support program fixpoint edits place hstocoq split faithful coq copy haskell code time prove thing rest work mostly straightforward use coq define invariant expect hold list interval namely sorted nonempty disjoint nonadjacent fixpoint goodlis list interval lb z prop match true f lb f z f z goodlis end definition good match ival exists n goodlis n end give meaning coq type set ensemble definition range f z ensemble z fun z f z z z z definition semi interval ensemble z match f range f end fixpoint semlis list interval ensemble z match emptyset z union z semi semlis end definition sem match ival semlis end prove every function preserve invariant corresponds well corresponding function eg lemma intersectgood forall interval good good good intersect proof qed lemma intersectionspec forall interval good good sem intersect intersection z sem sem proof qed even though punted question termination defining function get around verifying formalize termination argument definition needsreorder list interval bool match z false end definition list interval nat needsreorder else length length use inductive proof intend writeonce proof happily proof script cleanup thus resulting proof file big ugly repetitive confident judicious use coq tactic could greatly condense proof using program fixpoint fact proof also experiment actually induction locally defined recursive function without ugly proof goal hence line match goal context unsafefix f set u f end one could improve upon approach following step define copy say intersectgowitness local go using program fixpoint termination measure termination argument need made use function prove argument f go unsafefix f actually fixed point lemma intersectgosound f intersectgowitness intersectgowitness requires functional extensionality lemma indicates use axiom unsafefix unsafefixeq actually sound discussed previous blog post still prove desired property go us unsafefix using functional induction scheme intersectgo way actual proof free noisy termination argument trick define recursive function throw away function use induction rule one learned isabelle useful separate meat red tape complex proof note induction rule function actually mention function maybe get later update experimented bit direction quite work expected step stuck program fixpoint create fixpointunrolling lemma step get induction scheme hoping problem would exist use function command although need tickery support termination measure multiple argument induction lemma quite polished hoping resulting proof still somewhat ugly requires copying code scale well effort gain spent exactly hour working proof according arbtt sure writing function took much le time calculate easily originally mainhs file bisectbinary find fix three bug intersect function would always retain invariant interval would nonempty subtract function would prematurely advance list interval second argument lead genuinely wrong result occurred twice conclusion verification haskell code using coq practically possible final rant coq standard library incomplete compared say requires prove many lemma basic function ensemble
692,Lobsters,formalmethods,CSE-Formal methods,People of Programming Languages: Interviews With PL Researchers,https://www.cs.cmu.edu/~popl-interviews/index.html,people programming language interview pl researcher,,azadeh farzan professor university toronto interested software verification programming language formal method program synthesis talk interest concurrency research make good problem programming language community could think
693,Lobsters,formalmethods,CSE-Formal methods,Verification of Erlang Programs using Abstract Interpretation and Model Checking (2001),https://pdfs.semanticscholar.org/8174/3408a73d77c83cc88d6d9be8f994a0d2f4f2.pdf,verification erlang program using abstract interpretation model checking,,automatic verification erlangstyle concurrencyemanuele dosualdo jonathan kochems ch luke
695,Lobsters,formalmethods,CSE-Formal methods,Refinement Reflection: Complete Verification with SMT,https://arxiv.org/abs/1711.03842,refinement reflection complete verification smt,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
696,Lobsters,formalmethods,CSE-Formal methods,"The New QuickCheck: Random, Exhaustive, and Symbolic Testing Under One Roof (2012)",http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.230.6416,new quickcheck random exhaustive symbolic testing one roof,abstract,abstract new quickcheck counterexample generator isabellehol uncovers faulty specification invalid conjecture using various testing strategy previous quickcheck tested conjecture random testing new quickcheck extends previous one integrates two novel testing strategy exhaustive testing concrete value symbolic testing evaluating conjecture narrowing strategy orthogonally strategy address two general issue first extend class executable conjecture specification second present technique deal conditional conjecture ie conjecture restrictive premise evaluate testing strategy technique number specification functional data structure hotel key card system
697,Lobsters,formalmethods,CSE-Formal methods,"Compile Idris to Vimscript, like you always wanted",https://github.com/owickstrom/idris-vimscript,compile idris vimscript like always wanted,idris vimscript please note experimental example idris type usually represented arbitraryprecision integer represented using vim number type hack deal contribute example example build install build run example license bsd license,idris vimscript good stuff please note experimental example idris integer type usually represented arbitraryprecision integer represented using vim number type hack deal better still contribute fun project author nt expert compiler writer need help three language idris haskell documentation contribute knowledge vimscript useful specifically know little idris add binding vim api know haskell add new improve existing optimisation make generated code better improve performance vimscript like help u generate better faster smaller code vimscript user understand somewhat well idris repl let people browse documentation even comment key function make user daytoday life much easier discovering api good first issue new contributor tagged issue tracker idea mind open pr finally write vim plugin using idris vimscript let u know example many example possible present example directory give idea state art module main import vimscriptffi import vimscriptlist import vimscriptbuiltin main vimio main l line get last line number getline l get content nexttolast line let sl length get length echo substr sl print part build install install code generator stack install cabal install install vimscript library idris idris install vimscriptipkg build run example project come accompanied convenience make script compile idris file example folder make vim examplesloopvim source vim order build single example compile make idris examplesmyfileidr lib codegen vim examplesmyfilevim license bsd license based original work edwin brady
698,Lobsters,formalmethods,CSE-Formal methods,A Type-Safe Apparatus Executing Higher-Order Functions in Conjunction with Hardware Error Tolerance,http://arro.anglia.ac.uk/581958/1/Kimmitt%20thesis_web.pdf,typesafe apparatus executing higherorder function conjunction hardware error tolerance,,obj type objstm n first length filter flatedecode stream j
699,Lobsters,formalmethods,CSE-Formal methods,Extracting Automata from Recurrent Neural Networks Using Queries and Counterexamples,https://arxiv.org/abs/1711.09576,extracting automaton recurrent neural network using query counterexample,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
700,Lobsters,formalmethods,CSE-Formal methods,Model-Based Testing with Logical Properties vs State Machines (2011),https://www.researchgate.net/publication/235900230_Model_Based_Testing_with_Logical_Properties_versus_State_Machines,modelbased testing logical property v state machine,,model based testing logical property versus state machine christiansen j fischer easycheck test data free garrigue j hermenegildo mv ed flop lncs vol pp springer heidelberg claessen k hughes j quickcheck lightweight tool random testing ofhaskell program proceeding international conference functional programming icfp pp acm montreal claessen k hughes j testing monadic code quickcheck sigplan feijs lmg jonkers hbm formal speciﬁcation design cambridge university press guttag jv horning jj algebraic speciﬁcation abstract data typesacta informatica koopman p plasmeijer r eﬀective test set generation modelbased testing submitted publication koopman p plasmeijer r fully automatic testing function speciﬁcations z ed cefp lncs vol pp springer heidelberg okasaki c purely functional data structure cambridge university press oriat c jartege tool random generation unit test java classesin reussner r mayer j staﬀord ja overhage becker schroeder pj ed qosa soqua lncs vol pp springer heidelberg pacheco c ernst md randoop feedbackdirected random testing java companion acm sigplan conference objectoriented programming system application companion oopsla prasetya w vos baars tracebased reﬂexive testing oo programswith proceeding international conference software testing veriﬁcation validation pp ieee computer society runciman c naylor lindblad f smallcheck lazy smallcheck automatic exhaustive testing small value sigplan tretmans j testing concurrent system formal approach baeten jcm mauw ed concur lncs vol pp springer heidelberg tretmans j brinksma e torx automated model based testing hartman dussazieger k ed proceeding european conference modeldriven software engineering mdse nurnberg germany j much ado two pearl pearl parallel preﬁx computation proceeding annual acm sigplansigact symposium onprinciples programming language popl pp acm new york de vries r tretmans j ontheﬂy conformance testing using spin softwaretools technology transfer sttt van weelden oostdijk frantzen l koopman p tretmans j ontheﬂy formal testing smart card applet sasaki r qing okamoto e yoshiura h ed proceeding international information securityconference sec makuhari messe chiba japan pp springer also available technical report
701,Lobsters,formalmethods,CSE-Formal methods,The COGENT Case for Property-Based Testing (2017),http://www.ssrg.nicta.com.au/publications/csiro_full_text//Chen_OKKH_17.pdf,cogent case propertybased testing,,obj length r filter flatedecode stream oww g w j ŕ c v ϓ ں h ni qo ӟ x r r j ג f ia r q v n f e endstream endobj obj endobj obj type page parent r resource r content r mediabox rotate annots r endobj obj procset pdf text imageb imagec imagei colorspace r font r r r r r r r r r r r r r xobject r endobj obj r r r r r r r r r r r r r endobj obj length r type xobject subtype image width height interpolate true colorspace r intent perceptual bitspercomponent filter dctdecode stream jfif c c
702,Lobsters,formalmethods,CSE-Formal methods,Introduction to Contract Programming,https://www.hillelwayne.com/post/contracts/,introduction contract programming,precondition postcondition contract clause contract pycontracts assertion clojure spec racket contract class invariant ada eiffel contract view eiffel standard library richard whaling,namedropped contract enough think finally time go talk lot people conflate class interface dynamic typing unit test contract muddies discussion make hard show benefit like build idea contract first principle going work python point thing get crazy playing game like battleship grid aka guess number import random class game def init self target selfbounds selftarget target selfover false selfguessed set def makeguess self guess guess selftarget selfover true else selfguessedadd guess def aiguess game return randomrandint gamebounds name main game game gameover guess aiguess game print guess gamemakeguess guess really simple ai industrious idiot bot keep making random guess find answer work ran got weird pattern guess already know answer guessing two time game allow u game let ai guess otherwise get sort weird bug like allowing player skip turn repeating guess something ideally want enforce code whose responsibility game stop duplicate play ai make first place good argument place game conceptually simpler dryer ai know game logic easier client test ai function independently game logic opinion though better argument place ai ai need know game logic anyway otherwise strategy might need know move valid making example strategy minmax several possible move want waste time studying move illegal first place ai know make move game tell move invalid harder client complex system might several layer abstraction revalidate behavior game level layer job human player gui going grey invalid move anyway duplicate logic think case better telling ai anything dumb guarantee game still going check valid move trying case ai bug could use early return raised exception ambiguous imply okay call makeguess invalid guess game handle properly want way tell client absolutely okay make invalid guess let play anymore python best way assert statement favorite definition assert conditional false indicates bug program absolutely circumstance makeguess called bad guess program stop exception def makeguess self guess assert guess selfguessed guess selftarget selfover true else selfguessedadd guess assertionerror assertion precondition something caller must guarantee program whole work lot precondition could add toy guess game guess must inside bound target must inside bound similarly add postcondition something must true method call end one example def makeguess self guess assert guess selfguessed guess selftarget selfover true else selfguessedadd guess assert guess selfguessed assertionerror oops forgot add set guess correct precondition postconditions contract clause check boundary function confirm everything working properly together form function contract requirement use correct guarantee make used well contract lot advantage clear developer method require guarantee absolutely allowed pain death contract act realworld dynamic behavior opposed type static behavior test simulated behavior conceptually separate anticipated bad behavior impossible behavior handle former guard statement latter contract simplifies oop see later bug localized violated contract precondition broken program stop right opposed twenty function call later precondition pas postcondition broken bug probably specific function body make propertybased testing lot powerful since contract obeyed property program point battery randomized input program get suite integration test free also use unit level generate input pas precondition unit test satisfy postconditions contract useful correctness tool probably also see python assert statement pretty crude way shoehorningin contract least provide much info fail better good news bad news kinda let start popular library python contract pycontracts simple type check function argument defines dsl simple comparison like list least three element useful demonstrates two trope see lot contract implementation using contract type checker treating contract syntax independent programming language believe first played major role keeping contract mainstream contract make pretty bad type system dismiss like static type system worse need type anyway bother contract mean sure contract aint blist n n returnslist n def myfunction b kind neat nothing write home especially check contract runtime worse form dependent typing contract make poor type type make poor contract example contract relate data parameter def getplane assert type type type assert colinear first precondition type check replace static typing second precondition depends runtime value three point relate hard type system easy contract clause need flexibility defining contract library fail u use dsl limit actually dsl permit pycontracts escape hatch clunky work language jml java problem also huge complicated dsl learn modern language get far go even assertion arguably popular modern implementation contract clojure spec unfamiliar clojure want make many comment impression get step right direction intended contract system seems spec intended help runtime type checking could wrong inspiration racket contract little better still far want call racket popular powerful contract look like find look somewhatmore niche language let start long squareroot long x assert x result assert result result x x return cast long stdmathsqrt cast real x actually core part language writer free define contract full power oo language define class invariant contract clause checked every method call anything interacts date way break invariant contract violated class date int day int hour invariant assert day day assert hour hour help enforce correctness simplifies whole inheritence v composition dilemma child class class invariant parent class precondition may weaker postconditions may stronger want use inheritance otherwise use compositon ada go even postconditions also refer state variable mutated via old procedure pinc x integer post x function finc x integer return integer post fincresult word place contract specific function change specific variable go back python example would let u write postconditions like either guessed changed changed got eiffel class interface account feature access balance integer depositcount integer feature element change deposit sum integer require nonnegative sum ensure onemoredeposit depositcount old depositcount updated balance old balance sum invariant consistentbalance balance alldepositstotal end bertrand meyer designed eiffel language contract fact trademarked design contract always struck little weird nonetheless eiffel set gold standard contract support thing eiffel add loop invariant check contract iteration loop loop variant ensure loop eventually terminate check contract formalize asserts middle procedure contract clause named help documentation debugging class contract view documentation purpose class deferred akin abstract base class concrete contract placed deferred method refer unimplemented class attribute eiffel enforces method child class stronger precondition weaker postconditions corresponding method parent class eiffel ide use program contract programmatically generate test case want see possible contract click around eiffel standard library pretty impressive even without native language support still get pretty far assert statement whatever library language recommend trying large codebases lot implicit contract enforced unit test guard statement might well make explicit thanks richard whaling nick p feedback
704,Lobsters,formalmethods,CSE-Formal methods,My unusual hobby,https://www.stephanboyer.com/post/134/my-unusual-hobby,unusual hobby,proof assistant coq theorem prover exactly deep sense repository continuous integration case study domain theory fixed point domain theory finished proving kleene fixedpoint theorem proposition type proof program case study soundness type system lambda calculus type system semantics simplytyped lambda calculus typing rule proof conclusion software foundation certified programming dependent type footnote emacsbased interface vim user spacemacs sk combinator calculus,november great time working teammate airbnb many work hard much enjoy programming fun anymore still love recreational programming peculiar sense come home work try prove theorem proof assistant usually theorem related functional programming type system masochistic hobby convincing computer theorem true quite difficult compared convincing human get computer accept proof must pretty good understanding b really must right use coq theorem prover formalizing proof coq beautiful simple language simpler language use work beauty hidden beneath rather unsightly ide proof left green highlighted part verified coq working proof ask coq step forward ctrldown use ctrlup step backward point proof wrong coq highlight error red similar type checker rather exactly deep sense love explain mean save separate article screenshot currently middle proof upper right pane show need prove case f x x also hypothesis use prove shown horizontal line lower right pane show helpful information request type something list definitionslemmastheorems related recently set small github repository continuous integration system check proof push branch preventing merging master mistake impossible commit incorrect math repository proving theorem machinechecked language invigorating get hang feel like puzzle finish long proof nontrivial result remarkable sensation unlike anything else case study domain theory write recursive function language actually obvious definition mathematically welldefined week reading theoretical underpinning recursive definition fixed point whenever define something recursively technically taking fixed point continuous function yes read correctly really cool math behind called domain theory week vague understanding fair amount functional programming hardly knew anything domain theory today finished proving main result kleene fixedpoint theorem difficult proof consider pretty wellversed basic idea domain theory proof remarkable paper convincing computer accept another matter entirely started writing definition first step understanding theory able formally define main idea expect casual reader dissect definition include give sense look like write coq assumption let leq partially ordered set poset poset set binary relation reflexive transitive antisymmetric parameter set parameter leq prop axiom refl forall x leq x x axiom trans forall x z leq x leq z leq x z axiom antisym forall x leq x leq x x supremum subset least element greater equal every element subset also called join least upper bound definition supremum p forall p leq forall forall p leq leq directed subset nonempty subset two element subset upper bound subset definition directed p exists p forall p p exists leq leq p assumption let partial order directedcomplete mean every directed subset supremum axiom directedcomplete forall p directed p exists x supremum p x assumption let least element called bottom make partial order pointed directedcomplete partial order parameter bottom axiom bottomleast forall x leq bottom x monotone function one preserve order need consider function domain codomain identical order relation need case monotone function general definition monotone f forall leq leq f f function scottcontinuous preserve suprema directed subset need consider function domain codomain identical order relation need case continuous function general definition continuous f forall p directed p supremum p supremum fun exists p f f function performs iterated application function bottom fixpoint approx f n match n bottom n f approx f n end next proved lemma keep article short state full proof need simple lemma pair natural number lemma natdiff forall exists add add supremum subset exists unique lemma supremumuniqueness forall p supremum p supremum p scottcontinuity implies monotonicity lemma continuousimpliesmonotone forall f continuous f monotone f iterated application monotone function f bottom form ωchain mean totally ordered subset ωchain called ascending kleene chain f lemma omegachain forall f n monotone f leq approx f n approx f leq approx f approx f n ascending kleene chain f directed lemma kleenechaindirected forall f monotone f directed fun exists n approx f n give idea actual proof look like coq proof one easier lemma proof virtually impossible read without stepping interactively worry make sense lemma supremumuniqueness forall p supremum p supremum p proof intro unfold supremum h destruct h unfold supremum destruct apply apply h apply antisym auto qed finally main result proved proof kleene fixedpoint theorem state least fixedpoint scott continuous function pointed directedcomplete partial order exists supremum ascending kleene chain theorem kleene forall f continuous f exists supremum fun exists n approx f n f forall f leq nothing better typing qed end long proof watching turn green coq verifies really amazing stephen kleene probably proved without help computer able verify highest possible scrutiny wrote impressive program without ever run turned bug analogy work coq become intimately familiar interpretation proposition type proof program case study soundness type system successful formula writing paper programming language theory following define syntax small novel language usually based lambda calculus define type system language set rule specify program legal define semantics language ie describe happens run program prove type system prevents program getting stuck according semantics theorem proven last step called soundness month ago wanted try formallyverified soundness proof simplytyped lambda calculus essentially smallest programming language higherorder function meaningful type system started defining abstract syntax language coq inductive term set eunit term evar id term eabs id type term term eapp term term term type set tunit type tarrow type type type keep article short describe language work many good introduction favorite chapter benjamin c pierce wonderful book called type programming language typing rule add whatever base type like eg booleans integer etc simplytyped lambda calculus keep thing simple rather useless unit type single value akin empty tuple inductive hastype context term type prop htunit forall c hastype c eunit tunit htvar forall x c lookupvar c x hastype c evar x htabs forall e x c hastype cextend c x e hastype c eabs x e tarrow htapp forall c hastype c hastype c tarrow hastype c eapp specify semantics defined smallstep operational semantics main idea define relation say step program take run many way define semantics programming language one inductive step term term prop sbeta forall x value step eapp eabs x sub x forall step step eapp eapp forall value step step eapp eapp know program finished running define kind program fully evaluated inductive value term prop vunit value eunit vabs forall e x value eabs x e state value ie expression fully evaluated either unit constant function function application value since reduced expression normal form step take definition normalform exists step stuck program one normal form value definition stuck e normalform e value e soundness mean program welltyped never get stuck stepstar transitive reflexive closure step relation defined theorem soundness forall hastype cempty stepstar stuck proof including definition lemma line long simple language quite difficult undertaking recall working entire weekend probably hour day really appreciate research paper include formally verified soundness proof conclusion think coq extension ability reason logically doubt something open coq ide try prove think reason valuable often mull functional programming type logic algorithm etc kind thing wellsuited formalization unfortunately machinechecked theorem proving easy learn probably esoteric difficult prove nontrivial result without graduatelevel understanding type theory even still difficult accessible introduction benjamin c pierce software foundation freely available online read adam chlipala certified programming dependent type also freely available online expert coq mean proof probably longer clunkier need know basic technique nice thing logic underlying rule simple reached point prove anything coq rigorously prove paper given enough time two proof described article took day steadily getting better footnote strictly speaking language called gallina coq refers system whole also emacsbased interface vim user friend helped set spacemacs still found navigating proof coqide little intuitive know better say impossible coq allows add axiom dangerous axiom might inconsistent one could argue sk combinator calculus smaller still fit description
705,Lobsters,formalmethods,CSE-Formal methods,Design by Contract: A Missing Link [1998],https://www.win.tue.nl/~wstomv/edu/2ip30/references/design-by-contract/index.html,design contract missing link,review design contract missing link quest quality software table content abstract software product quality factor quality everything everything quality meyer internal external quality factor tension tradeoff quality diagram quality first defect simple definition defect equation technique address correctness defect static analyzer testing formal technical review formal proof correctness limitation technique ordering cost need additional loweffort highyield technique missing link contract back basic business contractingsubcontracting metaphor dbc aspect assertion eiffel dbc compare technique impact dbc activity design contract great nt widely applied back future birth concept anna eiffelifl sather icontract conclusion quality requires design contract reusable component contract disaster culture shift soon late try reference correctness robustness efficiency ease use functionality timeliness cost extendibility compatibility portability reusability understandability testability dbc defensive programming best world demonstrable correctness v maximal efficiency input checking mechanism abstract assertion inherited classlevel assertion loop assertion check assertion formality spectrum dbc practical dbc seamless dbc loweffort dbc lowtradeoff dbc highyield dbc analysis dbc design dbc implementation dbc testing dbc usage dbc reuse algol w anna eiffel sather icontract meyer design contract lesson ariane vol next software breakthrough vol practice perfect quality first model vol davis hoare floyd dijkstra jones wing beizer cleanroom process model critical examination vol dromey http wwwsqicitgueduaupublicationsmodelprodqualps gamma humphrey martin http wwwomacompdfoodmetrcpdf jones fagan johnson http wwwicshawaiiedujohnsonftr davis prediction farewell vol luckham cline omohundro http kramer http wwwpromigoschkramer plessel http wwweljcomeiffeldbcassertionsh eiffel liberty new guerl sooap top http wwweljcomeiffeldbc,review design contract missing link quest quality software todd plessel plessel vislabepagov lockheed martin u epa august table content abstract software product quality factor quality everything everything quality meyer internal external quality factor tension tradeoff quality diagram quality first defect simple definition defect equation technique address correctness defect static analyzer testing formal technical review formal proof correctness limitation technique ordering cost need additional loweffort highyield technique missing link contract back basic business contractingsubcontracting metaphor dbc aspect assertion eiffel dbc compare technique impact dbc activity design contract great nt widely applied back future birth concept anna eiffelifl sather icontract conclusion quality requires design contract reusable component contract disaster culture shift soon late try reference paper considers software correctness relates software product quality factor effectiveness various technique aimed achieving indirect tradeoff correctness quality factor result competition human resource various development phase aimed addressing particular quality factor competition due large part suboptimal humanintensive technique employed address correctness current technique much le effective could lack essential ingredient contract meyer design contract presented highyield technique loweffort lowtradeoff requirement argued design contract improves effectiveness technique aimed verifying correctness fact necessary condition correctness concept explained illustrated example various programming language past present future software quality various definition offered researcher practitioner divergent view subject focus process human activity associated software development others focus product artifact result process surprisingly little consensus even quality definition respect important artifact source code ask several people involved software define rank software quality find focus factor lump rest considered vague notion concern programmer view differ marketer view differ enduser view actively earnestly pursue notion quality others content pay lip service idea even hostile concept without comprehensive shared view quality wonder software often disappointing first step reconciling different view encompass quality everything everything quality quality everything mean quality software poor regard taint everything us poor quality example software library contains memory corruption error every application us contain memory corruption error everything quality mean every aspect software map one primary quality factor meyer provides comprehensive set primary quality factor cover everyone viewpoint correctness ability software perform exact task defined specification presumably concern programmer correctness argued important quality software nt supposed nothing else really matter practical purpose useless course software contains correctness defect yet continue use anyway thing nt quite simple example bugfree software available late applied also useless nonetheless correctness achieve least improve main focus paper robustness ability software system react appropriately abnormal condition closely related correctness different shall see tester focus mostly two factor efficiency ability software system place demand possible hardware resource processor time internal external memory communication bandwidth programmer creating esoteric hpf code custom supercomputer supreme goal else distant second worse perceived detrimental efficiency ease use ease people various background qualification learn use software product intended role endusers best position judge factor program author worst functionality extent possibility provided system applicability software solve range problem primary concern endusers marketer software timeliness ability software system made available user want major concern marketing must ship something anything preempt competition cost financial cost developing acquiring using software development cost overriding concern manager enduser cost focus marketer user programmer oblivious extendibility ease adapting software change specification internal quality factor like rest concern developer original designer hopefully maintenance programmer maintenance programmer best position judge quality compatibility ease combining software element others concern programmer sometimes endusers portability ease transferring software product various hardware software environment obviously concern bane maintenance programmer reusability ability software element serve construction many different application concern original developer maintenance programmer attempting reuse something best position judge actual reusability understandability ease programmer understand source code software system rarely concern original developer position judge anyway perhaps major concern maintenance programmer testability ease testing software system correctness robustness obviously concern tester often misunderstood unappreciated developer cyclomatic complexity multipleexit point left anything say maintainability adaptability modularity elegance shown secondary quality derive map onto several primary factor others offer accuracy precision encompassed suitable specification correctness indepth analysis linking quality see accept completeness definition next step realize optimized tension factor example functionality timeliness usually inversely related take time implement functionality least reuse enters picture efficiency portability often inversely related software target specific platform capability native application programmer interface apis eg cray scientific subroutine library portability lost least understandability often severely impacted cray else extendibility sometimes impact efficiency eg added level indirection yield flexible solution inescapable overhead eg nested virtual function dispatch etc interesting ponder many tradeoff made consciously unconsciously actual software may involved familiar implicit assumption source many problem throughout phase software development analysis design implementation testing maintenance etc paper aim demonstrate technique make certain kind assumption explicit development conscious activity tension illustrated kivat diagram dimension spoke wheel outer circle idealized optimization dimension course every factor optimized optimized pushed toward outer circle others retracted small round wheel represents ultimate mediocre compromise little everything yield much anything satisfy one revealing depict various viewpoint eg developer tester manager user etc diagram note also practice unit dimension absolute normalized usually size line code kloc function point fp example ideal correctness error ideal cost etc practice normalized defectskloc kloc respectively meyer proposes quality first approach alternative norm highlighted osmond aim try pin certain quality optimum incrementally increasing others time word quality considered equally important discussed order optimizing factor critical consider reasonableness unreasonableness addressing certain quality last example suppose cost consideration deferred late project project would matter much others would result termination overrunning fixedcost budget consider functionality functionality generally increased monotonically inception basis evolutionary prototyping creeping featurism depending disposition factor consensus maintaining optimal time consider understandability software easy understand author without good inline documentation comment become serious problem others even original author year later productive programmer know source code writeoncereadmany take far le effort document code written fact consider correctness robustness retrofitted late project certainly low correctness robustness high number error per kloc draining effect throughout subsequent development phase therefore may disagreement relative ranking various software quality factor make sense come first would include understandability correctness robustness without hard make progress others various definition software engineering literature software woe bug error fault failure etc differentiate based software development phase compile test usage problem arises purpose simply use allencompassing definition defect property software improved software defective people imperfect become defective error commission normal defect injection error omission missed opportunity improvement error commission include obvious thing incorrect program logic mismatched comment etc error omission missed opportunity better design implementation eg design pattern could used yield better solution counted defect injection certainly programmer intentionally write defective software except certain pathological case eg driven misapplied metric wellknown exponential increase cost remove defect must actively addressed clearly software development process seek minimize number defect product early possible achieve various process applied quality filter described later lead defect equation di ii ri number defect remaining product ith development phase di equal number defect remaining previous phase plus number defect injected ith phase ii minus number defect removed ith phase ri goal minimize di last iteration minimize number defect final version software released user course know number actually software development literature subject seems miss two point instead focusing obsessively ri known quantity aka yield sometimes point committing endsmeans reasoning error ri lower bound ii instead must estimate unknown certainly may begin initial condition undeveloped software contains defect keep accounting number defect removed phase example would failure test humphrey advocate somewhat controversially tracking compiletime error even syntax error caught precompilation deskchecking one way tracking part defect injection rate always defect escape detection detection subsequent phase even final usage never know sure interesting proposal estimating considering defect removal rate example code review simply start presumed defectfree program intentionally inject known number defect count many defect uncovered subsequent trial code review result effectiveness measure ri used estimate di suppose trial review found effective finding known defect defect found line real code reviewed x x x likely two remaining unknown defect line reviewed code course five known defect must removed except possibly cleanroom correction code provide opportunity injecting new defect reported defect found attributed attempt fix known defect badbugfix syndrome major component ii kept track information suggested humphrey estimate di next iteration problem model yield highprecision answer despite underlying ignorance simplistic experiment form basis estimate adequately control many variable people problem domain tool language methodology etc realitycheck one might compare published empirical result recommendation software experiment say prescription drug clinical trial latter held much higher standard statistical rigor simplicity also nt account difference importance various kind defect minor defect inappropriate usenonuse whitespace formatting usually counted major one race condition equally important adequately addressed software development literature cumulative drain effect subsequent attempt remedy defect first defect removal process equally effective equal cost second order process applied affect net defect count commutivity addition affect total cost knapsack problem therefore consider overall costeffectiveness various ordering defect removal activity next consider typical defect detectionremoval process effectiveness cost modern software development environment include suite software tool provide form static analysis find defect source code obvious example compiler despite humphrey definition compiler deficient like c compiler definition accept legal program implies detection syntax error source code compiler thus mandatory quality filter compilable program necessary sufficient condition quality course typographical error happen yield valid unintended syntax compiler usually detect defect unless cause problem unresolved name linking compilation programmer anxious run program quality filter applied first example commercial tool lint flexelint codecheck codewizard etc offer excellent static defect detection capability program namely c c source tool identify likely problem violation coding standard metric tool compute various software metric size eg line code magnitude halstead length volume etc complexity eg mccabe cyclomatic complexity modularity eg fanout coupling stability abstractness eg martin main sequence distance note design metric interesting implementation reverseengineered infer design attribute evaluated suggested standard example cyclomatic complexity routine usually le exceeds routine almost certainly rewritten category main sequence distance near zero implying ideal balance abstractness instability static analysis tool provide lowcost amortized highly effective reliable mean detect certain kind defect testing timehonored approach finding certain kind defect namely correctness robustness efficiency functionality ease use indirectly testability defect bottomup approach different level testing lowest level unit testing intermediate level integration testing higher level acceptance testing aka validation unit testing aim verify quality individual module eg routine andor class called white box glass box technique used assure statement executed least boundary value analysis used test program vicinity bound input expected limit uncover common kind defect related handling input near boundary expected value integration testing involves testing assembly module one focus integration code glue code connects already verified module eventually entire system assembled tested using blackbox technique focus functional behavior input output without regard internal logic finally validation testing occurs user begin use system sample real scenario formal variant blackbox testing include independent statisticsbased testing part cleanroom approach software development however cleanroom controversial part downplays eliminates entirely unit testing thus directly address code coverage testing activity typically consume percent total development time increase productivity case tool applied partially automate significant portion testing activity including analysis testability test case generation execution code coverage analysis performance profiling documentation etc commercial tool purpose eg insure purify purecoverage casevision jtest testcenter testworks etc lowcost highly effective mean implementing part testing quality filter despite merit testing tool defect wo nt found testing fact report indicate good oldfashioned design code walkthroughsreviewsinspections variation formality detect defect testing informal peer review formal fagan inspection modern approach certainly effective mean finding defect perhaps obvious reason never mentioned literature simply people work carefully know presenting work front colleague influence egoguilt psychology reality harnessed like independent testing debugging major reason success inspection may twoeyes better one factor fact familiar author worst position psychologically look defect creation much bureaucracy process reduced modern version asynchronous distributedconcurrent review equally important goal review expanded improved developer individual organizational knowledge effectiveness example overlooked opportunity improving ability developer produce good design implementation review existing example excellent design implementation identifying discussing make certain example excellent using role model nonnegative form enlightenment best longterm solution improving individual ability consistently create highquality software case inspection humanintensive timeconsuming activity require high yield defect found offset high cost addition asynchronous concurrency education training reuse excellence quality filter effective economic extreme end formality spectrum socalled program proving highly humanintensive activity mathematically skilled analyst specify prove system functionality using specialized language eg z vdm larch etc derived predicate calculus despite claim advocate learning method developing requisite mathematical skill apply effectively nontrivial beginning least one often make least many mistake mathematical specification proving activity would implementing toysized program attempting derive specification prove reality magnified fact method scale real world sized system largest program proved correct thousand line code another fundamental flaw method address correctness program depends library operating system hardware etc program infrastructure seriously flawed proved correct program susceptible failing meet requirement attempt prove infrastructure compiler operating system microprocessor successful nonetheless correctness proof place used verify part critical software operating system scheduler network protocol military medical embedded software system applied yield software least fewer correctness defect might otherwise delivered method certainly value requires significant advance case tool automate applied costeffectively quality filter important component qualityoriented software development approach limitation applicability effectiveness cost summarize strength weakness static analyzer effective certain kind defect low cost amortized tool cost reliable automated certain kind defect found narrow focus ca nt find many kind defect improving inspection effective high yield wide focus consider possible kind defect high cost human time intensive variable reliability human variational effectiveness testing effective certain kind defect cost lowcost tool moderate overall time formal proof correctness effective part system high learning curve staff customer high cost human intensive scalable fulllifecycle gap specification implementation limitation individual technique partially overcome combining technique one study report relative effectiveness combining permutation four technique formal design inspection formal code inspection formal quality assurance formal testing combining four method one achieve defect removal efficiency however neglected relative cost associated applying combination technique knapsack problem word cost applying technique depends technique already applied optimal ordering technique yield end result number defect removed minimal cost schedule time consider following example suppose one us case tool feature languageaware editor eg like emacs macpascal prevents detects corrects defect formating syntax error naming stylecoding standard violation etc typed might even feature default code template guide program author concurrent static analysis warns cyclomatic complexity routine exceeds example incremental compiler compiles code segment eg routine completed frontline quality filter would eliminate time spent subsequent phase detecting correcting specific kind defect would certainly reduce overall development time would waiting compiles wading long list error message correct trivial error applied case tool would eliminate need subsequent code review would certainly reduce focus eliminating need verify class defect known filtered already code review process would made costeffective conversely code review done compilation advocated humphrey code review would need include pass check class defect addition check class defect filterable compilercase tool subsequent compilation would require correction defect time spent finding manually order magnitude time saved detecting correcting compilation phase therefore costeffective apply static analysis tool smart editor incremental compiler code review second example consider sometimes happens user report defect program much analysis determined developer program right requirement vague specify done particular instance discovered user real example c compiler launched game c program executed statement lead undefined behavior according ansi c specification nonetheless change demanded customer often costly compared detected corrected requirement initial phase design coding think cascading effect changing requirement downstream process product clearly like smart case tool requirement review important loweffort highyield quality filter come earlier chain process obvious endcases next example midprocess activity code review illustrates serious flaw current recommended best practice online publication merit particular case tool code review name dectonum specification function scan string str beginning byte position given first character representation decimal value value converted numeric returned value function last set indicate next character str value found scanning conversion error found converror set true maximum length value scanned decimal digit sourcecode int dectonum char str int first int last boolean converror int n boolean scanning n scanning true converror false scanning str first str first n n str first else str first scanning false else converror true scanning false first scanning false last first first return n subject incorrect expression category coding incorrect criticality hi fatal error sourcecode dectonum line description expression fail first consensus relatedissues proposedactions comment supposed demonstrate usefulness particular case tool helping review code instead example illustrates inefficient process used develop software true code contains error implementation correctness defect important higherlevel defect signature routine input argument str declared const since readonly argument first really necessary str first would suffice call name formatting poor argument converorr nonstandard type name unnecessary specification vague specify whether signed integer valid eg implementation indicates specify whitespace character valid ie blank tab newlines many contains unnecessary arbitrary limit digit accepted entire routine needed error mission since already exists routine strtol standard c library provides functionality result identifying design defect earlier considerable time wasted subsequent process phase code review testing documentation etc consider could happen error fixed tester may create test case use signed integer tab whitespace would result rejection routine yet nothing rather verbose written description routine specifies invalid input would spawn problem report fingerpointing argumentation author routine tester another waste precious schedule time could avoided proper ordering phase example design review interface followed coding yet design review may resolved vagueness interface specification even software designed widespread reuse suffers vagueness interface specification imprecise interface specification major cause problem software usereuse even development process incorporate design review code review rigorous testing documentation much time wasted fingerpointing clarifying specification nt way besides ordering quality filter process minimizing cost also need additional loweffort highyield technique eliminate problem resulting imprecise specification missing link current recommended best practice two crucial question software correctness exactly software supposed exactly supposed correctness relative specification answer first question need precise specification define mean particular piece software eg routine correct specification vague answer question answer second question need way ensuring software actual executing program paperware proof precisely called specification le proof correctness attempt answer question seriously flawed gap paper proof actual implementation code runtime behavior difficulty mastering applying method largescale development loweffort highyield solution meyer design contract introduced decade ago definitive work objectoriented software construction cornerstone eiffel language design contract dbc discipline defining precise checkable interface specification software component based theory abstract data type adts business contracting metaphor shown dbc greatly increase ability programmer write correct software know correct adt theory mathematical approach specification function property entity defined modeling akin formal proof technique covered example applied software development see second idea easy understand generally applicable business world contract precise legally unambiguous specification define obligation benefit usually two party involved example consider advanced reservation nonrefundable discount vacation package deal obligation benefit client pay entire cost one month enjoy lowcost advance bring limited hasslefree expense baggage valid passport paid vacation visa etc arrive airport two hour flight leaf supplier locate select book airline make profit sale even carrier auto rental hotel etc client show within required time frame airport budget time properly equipped may even keep possible partial refund hotel etc case subcontract considering example supplier travel agent subcontract various supplier eg airline hotel etc within constraint already promised client time frame fraction cost apply software correctness consider execution routine called routine provides service supplier caller client requesting service impose contract spell precisely obligation benefit caller client callee supplier contract serf interface specification routine example consider routine merges two sorted sequence obligation benefit client ensure quickly obtain sorted sequence merged combined sequence already sorted supplier efficiently merge two sorted need check sequence one handle unsorted sequence note obligation one party correspond benefit party simplifies matter need focus pair obligation contract expressed software assertion assertion booleanvalued expression specify condition must satisfied evaluate true eiffel language used illustrate concept since provides extensive support notion eiffel code example merge b sequence g sequence g merge already sorted b one pas require aalreadysorted sorted balreadysorted sorted b deferred ensure resultissorted sorted result resultisrightsize resultcount acount bcount resulthasallofa acount resulthas aitem resulthasallofb bcount resulthas bitem resulthasnothingmore resultcount ahas resultitem bhas resultitem end example require clause list assertion spell obligation client caller routine case input sequence must already sorted assertion name followed colon followed boolean expression ensure clause list assertion spell obligation supplier routine form note obligation supplier specified comment later assertion require clause precondition routine assertion ensure clause postconditions routine together specify routine contract client promise two input sequence sorted promise result sorted contain item input sequence nothing implicit contract precondition sufficient complete hidden clause principle precondition requirement client must satisfy get served contractbased assertion answer question exactly software supposed providing mean state precise interface specification software term relevant software element far better stating requirement abstract mathematical term leave one wondering actual software implementation somehow faithful isomorphic mathematical specification dbc also address question exactly supposed monitoring assertion monitored runtime runtime monitoring assertion mean code generated evaluate assertion boolean expression make sure contract satisfied assertion evaluate true close gap specification implementation contract assertion evaluates false assertion evaluates false indicates violation contract contract violation indicate error correctness defect software specifically violation client obligation require clause indicates error client caller violation supplier obligation ensure clause indicates error supplier routine implementation error must removed software considered correct practical term assertion evaluates false exception raised transferring control routine unless intercepted eg debugger tool abort program leaving call stack trace core file help programmer fixing defective program dbc defensive programming make routine robust checking handling case often advocated defensive programming approach odds another related principle nonredundancy principle circumstance shall body routine ever test routine precondition several justification sometimes reasonable way compensate violation even way resulting code complicated le efficient sometimes greatly consider merge example defensive programming scale consider sequence nested call routine written defensively likely system contain many redundant check body implementation code total complexity performance suffer greatly nt checking occur anyway assertion make program run slow best world demonstrable correctness v maximal efficiency eiffel language support assertion one enable disable runtime checking assertion class kind basis example particular set class may decide enable checking ensure clause require clause useful believe class implementation correct eg extensively reviewed tested etc still want help catch error client code us class flexibility provides best world demonstrable correctness verification validation maximal runtime performance production use ability choose degree perclass basis input checking mechanism assertion documenting interface specification optionally verifying correctness property robustness property mean assertion usable handling resource allocation failure failure due factor beyond program control user input file io network disconnect etc constitute defect program asserted away instead conscientious failure detection mitigationcorrection code must still written handle case section explains detail important aspect assertion eiffel comment v full implementation example illustrates limitation assertion expressing requirement currently eiffel support full predicate calculus universal quantifier etc fact predicate calculus may sufficient need case one must either express comment checked runtime implement auxiliary function example ensure resultissorted sorted result resultisrightsize resultcount acount bcount resulthasallofa resulthaseach resulthasallofb resulthaseach b resulthasnothingmore resulthasonly b end haseach hasonly function would implement required checking abstract assertion eiffel allows assertion specified deferred routine even term deferred routine sometimes called abstract assertion example feature remove deferred class mydispenser assertion implemented term deferred feature count count integer current number item stored deferred ensure nonnegative result end remove remove accessible item require notempty empty deferred ensure oneless count old count end inherited eiffel assertion inherited redefined feature descendant class must also satisfy also done logically consistent manner ie precondition require clause weakened postconditions ensure clause strengthened implemented effectively oring require assertion anding ensure assertion indicated modified form require else ensure example class mydeque put inherited mydispenser renamed putlast still inherits assertion put parent contract putlast anitem g make anitem last one ensure itemislast lastitem anitem end note inherited assertion appear code redefined routine implicit however since still part routine specification appear generated documentation view called short form eiffel putlast anitem g make anitem last one require notfull full ensure onemore count old count itemislast lastitem anitem end classlevel assertion addition applying assertion feature eiffel also support classlevel assertion known class invariant adt theory class invariant set assertion must satisfied time creation except execution class routine thought implicitly anded routine precondition except creation routine postconditions example mydispenser contains following invariant clause invariant notvoid void implicitly anded eiffel support routine classlevel assertion mean implementing design contract supporting notion adts even eiffel assertion loop assertion beyond software interface specification assertion play crucial role assuring correctness software implementation one way loop invariant loop variant motivated previous work proving program correctness loop invariant assertion must satisfied iteration loop loop variant integer expression must nonnegative prior first execution loop decreased every iteration guarantee loop termination example gcd b integer integer greatest common divisor b require astrictlypositive bstrictlypositive b local x remainder integer x b remainder x invariant remainderbigenough remainder remaindersmallenough remainder xstrictlypositive x ystrictlypositive gcd x gcd b variant remainder remainder loop x remainder remainder x end result ensure resultstrictlypositive result resultsmallenough result result b resultdividesboth result b result resultisgreatest c result amax b c c b end check assertion finally eiffel provides check clause assertion suitable verifying intermediate stage computation check rewound empty implies end note also eiffel implication operator implies b b seen design contract work let consider lie spectrum quality filter technique formality spectrum discipline software development matures natural become formalized standardized likely retain aspect art creativity ingenuity imagination intuition engineering practical knowledge backed mathematics principle scientific investigation current practice includes range technique formality spectrum yet move toward formal end consider design pattern language formalism capturing knowledge good design communicating others humancomputer interface design based important principle learned study ergonomics perception related field yet clear resistance increasing formalism often justified lack sufficient understanding principle andor lack faith result empirical study compared similar mature field architecture design contract inspired formal approach embodied specification language z vdm etc yet le mathematical softwareoriented constrained fact expression term software element variable routine class etc formal possible without loosing touch software dbc practical much potential power formal specification proof lie hope automating proof tool mathematical analysis required determine specification complete consistent correct yield desired outcome much progress could made software design far tool materialized make proof correctness impractical largescale development dbc hand practical goal proof correctness rather runtime verification contract violation le ambitious useful easily attainable goal compromise ideal practical today dbc seamless mathematical specification introduce gap specification implementation leaf one wondering actual software implementation faithful specification long specification nonexecutable otherwise part actual software always gap dbc defines specification term actual software element eg routine signature class invariant etc gap dbc provides seamless transition design interface specification implementation filling code routine body dbc loweffort softwareoriented rather mathematicallyoriented nature dbc make far easier technique master explain nonmathematical staff eg customer jointapplication development dbc us language problem domain assertion domain object implementation domain software infrastructure element readily accessible customer programmer alike error made defining assertion easily caught execution trivial fix compared error committed formal proof correctness proofing proof dbc loweffort technique dbc lowtradeoff dbc require tradeoff quality example defensive programming touted technique achieving robust software yet requires large tradeoff efficiency understandability due many level redundant checking error condition dbc employ assertion selectively disabled permanent efficiency degradation code assertion disabled performs checking contract violation run fast possible since assertion free sideeffects used robustness checking tradeoff robustness correct program produce exact result much le time assertion checking disabled enabled dbc zerotradeoff dbc highyield dbc highyield technique ie powerful quality filter precision automatic monitoring assertion trap many defect would otherwise propagate later phase identification correction much costly fully appreciated transitioned using dbc development effort observed firsthand higher quality resulting product lower effort needed produce nonetheless helpful consider impact dbc development process phase dbc analysis customerfriendly analysis phase developer must first understand problem domain identify domain object relation others constraint entail discussion customer elicit requirement function behavior constraint dbc customerfriendly since contract defined term domain object constraint made clear explicit resorting mathematical language would tend alienate customer developer everyone understand business contracting metaphor allows business rule constraint become integral part software beginning example consider feature account class withdraw amounttowithdraw money withdraw money require positiveamount amounttowithdraw sufficientbalance balance amounttowithdraw deferred ensure correctbalance balance old balance amounttowithdraw end one need programmer mathematician lawyer comprehend specification dbc design integrity via inherited assertion design includes specification class feature eg public interface often class abstract deferred base class define interface implemented numerous specialized derived concreteeffective class dbc class design include precise interface specification contract contract automatically inherited derived class effectively ensures integrity design maintained implementation phase example consider invariant account class deferred class account invariant nonnegativebalance balance end deferred class account deferred class rothrolloveriraaccount inherit account end deferred class rothrolloveriraaccount design rothrolloveriraaccount negative balance dbc implementation implementation effective concrete class constrained ancestor contract new feature routine may added contract requirement must achievable client class must expressed term public feature class private attribute example remove remove item require notempty empty ensure notfull full oneless count old count end feature count empty full must public feature accessible client class without constraint would possible client understand let alone satisfy contract dbc testing dbc remove ambiguity existence precise interface specification expressed term software element provides perfect target testing contract defines exactly software supposed assertion monitoring provides mean verify supposed eliminate need testing change approach testing assertionsbased boundaryvalue testing contract allows tester focus boundary contract assertion enabled boundaryvalue testing made easy since violation precondition postconditions trapped resulting exception usually caught test driver program logged output file documenting test case eliminates fingerpointing occurs software underspecified tester report defect author consider acceptable vagueness requirement invariant builtin selftest dbc also provides analog hardware builtin selftest class invariant defines constraint state software feature access public routine call long evaluates true integrity assured dbc usage efficiency software portion deemed correct assertion monitoring disabled completely eliminates runtime penalty associated evaluating assertion assertion effectively erased code provides maximal efficiency improved opportunity optimization routine inlining loop unrolling etc example consider array access inside loop loop aput x end assertion disabled becomes raw unchecked array indexing language lack control assertion eg pascal java way eliminate array bound checking overhead dbc reuse documentation dbc provides basis documenting software interface potential reusers software component need understand software provides must obtain benefit contract shortflat form obtainable eiffel provide ideal specification simple possible simpler like unix man page synopsis detail routine signature providing crucial missing part precondition postconditions routine design contract much needed missing link software development practice unfortunately best nonpractice ignorance vast majority developing software even intended reused simply ignorant concept result produce application programmer interface apis underspecified thus passing burden application programmer discover trial error acceptable boundary software interface undocumented contract term adhoc operational definition software interface discovered reverseengineering subject change upon next release offer stable way ensure software correctness fact many people involved writing software lack pertinent education eg csce degree training professional course read software engineering journal attend conference etc reason nt know dbc since concept covered adequately medium anyway ignorance dbc extends throughout practitioner also throughout educator many industryexperts documentation enough misconception dbc documentation good documentation sufficient anyway dbc certainly documentation documentation certainly enough several reason usually verbose yet spell interface specification enough detail answer client usage question help client determine using api correctly since runtime checking occurs consider ancient familiar standard c routine strcat unix man page describes gist say valid concatenate string onto following program include stdioh printf include stringh strcat int main void char hello strcat happens case printf sn return least say usage result undefined behavior typical burdensome standard c copout nt say invalid reasonable expect work yield hellohello based hidden clause principle however testing program several different platform yielded several different result including crash due segmentation fault crash due uncaught signal crash due arithmetic error hang infinite loop success yielded hellohello routine designed implemented according dbc would include precondition argument different char strcat char const char const olddlength strlen post strlen olddlength strlen otherwise weaker precondition obligated hidden clause principle produce expected result char strcat char const char const olddlength strlen const oldslength strlen post strlen olddlength oldslength finally instrumented version library libcdebug would provided allow client detect error code misuse api formal introduced concept programmer often skeptical benefit yet intimidated formality try dbc eiffel supporting assertion actually simple master reasonable compromise compared formal specification language vdm z repeating earlier example withdraw amounttowithdraw money withdraw money require positiveamount amounttowithdraw sufficientbalance balance amounttowithdraw deferred ensure correctbalance balance old balance amounttowithdraw end one need mathematician cpa even programmer comprehend specification correctness always goal commercial sector trend seem prefer shipping buggy code competition patching later release since somehow profitable strategy profitable partially fault user willing buy software dubious quality compare software license hardware warranty nonetheless dbc loweffort technique apply anyway boost productivity saving time downstream activity testing way achieve correctness testing testing substitute dbc without precise specification test much time wasted fingerpointing software behaves manner deemed incorrect tester author hand dbc assertion substitute testing either testing still needed verify correctness checking assertion runtime also verify robustness case external failure outside scope correctness ensure code coverage inspectionsreviews applies design code review without precise specification term software element verify design say whether routine correct set agreedupon documented unambiguous executable assertion compare formal proof applies proof correctness ultimately matter software mathematical paperware say gap paperware proof running code downfall formal proof yet eiffel assertion inspired work formal correctness proof however technology yet exist applying correctness proof real world sized program timely manner eiffel assertion best practical compromise direction use assertion already programmer use assertion already example c long provided assert macro used runtime checking boolean expression however adhoc application assertion akin eiffel check clause far cry design contract lacking crucial support inheritance example nonetheless possible support degree dbc creating specialized macro differentiating assert macro usage precondition postconditions diligently writing class invariant eg c call parent etc example include assertionsh pre post check debug void string chunksize sizet newchunksize pre newchunksize remember sizet thelength thechunksize newchunksize debug bool ok resize thelength true may shrink fail debug check ok post thelength old thelength certainly improves ability write demonstrably correct fortrancc program still go far enough assertion alone constitute design contract assertion mean supporting concept assertion design contract dynamic binding objectoriented programming enabling mechanism substitute design according hoare early advocate using assertion programming none alan turing june conference cambridge gave short talk entitled checking large routine explains idea great clarity one check large routine sense right order man check may difficult task programmer make number definite assertion checked individually correctness whole program easily follows notion assertion developed hoare floyd dijkstra unfortunately commercial programming language rarely provide support assertion let alone extension eg inheritance needed supporting design contract attempt remedy given algol w wirth hoare algol variant allowed executable assertion widely used pascal algol direct successor dropped support assertion puzzling omission given pascal intended used teach programming anna annotated ada attempt retrofit assertion onto existing fairly widely used least defense programming language based oo assertion limited data transformation rather abstract level required dbc nonetheless used help bridge gap formal specification written z actual ada implementation shame anna incorporated might better chance becoming popular eiffel meyer eiffel language provides comprehensive support assertion objectoriented language discussed assertion form foundation meyer design contract method development may forthcoming increasing power eiffel assertion intermediate functional language ifl goal move closer ideal specifying generating provably correct program without sacrificing ease use general applicability see detail ifl sather sather direct descendant would say cousin eiffel research project ucb international computer science institute icsi objectoriented language design highperformance parallel computing example assertion pre post used sather class calculator readonly attr sum int always kept positive addpositive x int int pre x post result initial x return sum x end despite influence eiffel assertion afterthought sather initial version even current version lack support assertion abstract class even documentation describes assertion safety feature earnest programmer annotate intention code hardly recognizes role important design contract notion motivated anna eiffel cline lea sought provide similar capability c program annotated c example annotated c class class vector private int cap capacity vector data pointer actual data element public int size return cap operator int return data void resize int vector int sz data new sz cap sszize vector delete data annotation syntax legal cap coherent datanelems cap sure datanelems axiom promise return size int x require x x size x int sz require sz promise size initsz resize sz int sz require sz promise size initsz vector sz even attempt go providing degree static analysis would eliminate redundant checking case preprocessor proved check implied previous check stl perhaps promising advance c programming shame never materialized beyond research project icontract perhaps latest development design contract icontract tool java since java language provides even le support dbc c optional assertion approach used apply preprocessor recognizes stylized comment indicating precondition postconditions invariant generates instrumented java source code check various kind assertion example file personjava interface person pre age void setage int age post return int getage file employeejava class employee implement person private int age public void setage int age age age public int getage return age source code processed using icontract icontracttool mpre post inv personjava icontracttool mpre post inv employeejava employeeijava yield instrumented code shown routine public int getage int returnvalueholder return age returnvaluehlder age returnvalueholder throw new runtimeexception error postcondition violated persongetage return age return returnvalueholder instrumented code intended human consumption fed java compiler yield code runtimemonitored contract tool even aim implement inherited assertion predicate calculus operator forall exists icontract fully implemented important advance java development design contract backed optional runtime assertion important best nonpractice software development today loweffort notradeoff highyield quality filter positive impact software development activity analysis reuse silver bullet crucial missing link necessary sufficient condition achieving quality software without dbc increase software reuse component javabeans worsen already poor quality software without clearly defined enforced contract potential reusers risk know exactly software supposed know think easily know using correctly discover trialanderror subject change next release documented enforceable contract danger reuse without contract illustrated milliondollar failure ariane rocket argued result reuse without properly specified checkable interface newsworthy incident highlight vulnerable nature softwarecontrolled system real tragedy subtle ongoing industrywide drain human resource wasted due poorly specified andor uncheckable interface simplicity obvious benefit design contract lead one wonder become standard practice software development industry concept explained various technical people nonprogrammers invariably agree sensible approach even express dismay software component developed way another indicator immaturity software development industry failure produce highquality product also blatantly obvious nonwarranty license agreement commercial software yet consumer continue buy software suspect even expect poor quality quality lackofquality price tag difference pay long company continue experience rising profit selling poorquality product incentive change perhaps fallout year problem focus enough external pressure industry jolt towards improved software development method talk certifying programmer like professional occurs benefit design contract might begin appreciated doubtful considering typical year rule adopting superior technology dbc exemplified eiffel another decade go java succeeds becoming widelyused language javabeans become widespread form reuse would already late dbc impact icontract hardlynoticed event much like anna ada c philosophymindsetculture established initial publication language standard library pascal jensen wirth manual c k r white book c case study problem caused releasing immature language lacked adequate compiler standard library java late dbc make inroad via icontract languagelevel mechanism equally importantly applied java standard library point eiffel derivative include dbc cornerstone culture great eiffelists dbc valuable ignored one reason another use eiffel shown dbc applied varying ease variety language benefit easy small step towards formalism fully understood appreciated adopted reflected positive impact various activity development work next time set develop reusable software component think consider client server viewpoint separately codify obligation benefit optionally monitored runtime provide two version component debug version checking enabled optimized version without checking finally document contract part component interface next time set reuse software component first examine contract ask exactly require input exactly promise outputresult answer documented contract ask sure using correctly sure supposed satisfactory answer question require documented contract optionally enforceable checkable runtime ask developer component provide debug optimized version component precompiled welcome back future software development meyer bertrand objectoriented software construction second edition prentice hall upper saddle river new jersey pp pp design contract lesson ariane ieee computer vol january pp next software breakthrough ieee computer vol july pp practice perfect quality first model ieee computer vol may page davis alan principle software development mcgrawhill new york hoare car emperor old clothes turing award lecture communication acm vol february pp axiomatic basis computer programming communication acm vol october pp proof correctness data representation acta informatica vol pp floyd robert f assigning meaning program proc american mathematical society symp applied mathematics vol pp dijkstra edsger w discipline programming prentice hall englewood cliff new jersey jones cliff b software development rigorous approach prentice hall international hemple hempstead uk wing jeannette specifier introduction formal method ieee computer vol september pp beizer boris cleanroom process model critical examination ieee software vol marchapril pp dromey rg model software product quality technical report software quality institute griffith university october http wwwsqicitgueduaupublicationsmodelprodqualps gamma erich et al design pattern element reusable objectoriented software addisionwesley reading humphrey watt discipline software engineering addisionwesley reading martin robert oo design quality metric september http wwwomacompdfoodmetrcpdf jones caper software defect removal efficiency ieee computer vol april fagan michael design code inspection reduce error program development ibm system journal vol johnson philip reengineering inspection communication acm vol february pp ftrtool http wwwicshawaiiedujohnsonftr davis al prediction farewell ieee software vol julyaugust pp luckham david c et al anna language annotating ada program lecture note computer science springerverlag cline marshall p doug lea behavior c class ftpclarksonedu omohundro stephen david stoutamire sather http kramer reto icontract java design contract tool http wwwpromigoschkramer plessel todd assertionsh cc assertion macro http wwweljcomeiffeldbcassertionsh ed banner provided oo community service eiffel liberty new guerl sooap top page http wwweljcomeiffeldbc last modified dec created dec
706,Lobsters,formalmethods,CSE-Formal methods,Network Semantics,https://www.cl.cam.ac.uk/~pes20/Netsem/index.html,network semantics,network semantics github repository overview paper protocollevel tcp specification tcp udp socket rigorous experimentallyvalidated behavioural specification volume overview technical report pdf tcp udp socket rigorous experimentallyvalidated behavioural specification volume specification technical report pdf p erratum usual diagram steve zdancewic servicelevel tcp specification hol source protocollevel servicelevel tcp specification applying technique protocol design time reasoning protocol specification earlier work udp icmp socket udp calculus rigorous semantics real networking psgz pdf udp calculus rigorous semantics real networking tacs psgz timing udp mechanized semantics socket thread failure psgz pdf timing udp hol model rigour good feasible reflection formal treatment c udp socket sigops ew psgz people acknowledgement pepito validate page,network semantics network programming complex one deal variety protocol ip icmp udp tcp etc concurrency packet loss host failure timeouts socket api protocol subtle portability issue protocol typically described rfcs using informal prose pseudocode characterise behaviour system involved informality benefit inevitably description somewhat ambiguous incomplete protocol hard design implement correctly testing conformance standard challenging understanding many obscure corner case failure semantics requires considerable expertise ideally would best world protocol description simultaneously clear accessible broad community easy modify unambiguous characterising exactly behaviour specified sufficiently loose characterising exactly specified hence left implementors especially permitting highperformance implementation without overconstraining structure directly usable basis conformance testing readandforget document work established practical technique rigorous protocol specification make ideal attainable protocol complex tcp describe specification idiom rich enough express subtlety tcp endpoint behaviour scale full protocol remaining readable also describe novel tool automated conformance testing specification realworld implementation develop technique demonstrate feasibility produced posthoc specification existing protocol mathematically rigorous experimentallyvalidated characterisation behaviour tcp udp socket api implemented practice protocol service level abstraction resulting specification may useful right several way extensively annotated make usable reference tcpip stack implementors socket api user supplementing existing informal standard text also provide basis highfidelity conformance testing future implementation basis design conceivably formal proof higherlevel communication layer perhaps significantly work demonstrates would feasible carry similar rigorous specification work new protocol tolerably lightweight style designtime standardisation believe increased clarity precision informal specification possibility automated specificationbased testing would make much worthwhile leading clearer protocol design higherquality implementation discus simple way protocol could designed make testing computationally straightforward github repository contains updated version original protocollevel specification described vol revised tool updated hannes mehnert overview paper paper give overall view work tcp udp socket api cover icnp popl at paper protocollevel tcp specification theoryoriented description specification idiom symbolic modelchecking technology used protocollevel specification tcp systemsoriented introduction protocollevel tcp specification work full description project protocollevel specification typeset extensively annotated tcp udp socket rigorous experimentallyvalidated behavioural specification volume overview steve bishop matthew fairbairn michael norrish peter sewell michael smith keith wansbrough technical report march also pdf tcp udp socket rigorous experimentallyvalidated behavioural specification volume specification steve bishop matthew fairbairn michael norrish peter sewell michael smith keith wansbrough technical report march also pdf internal hyperlink p good printing erratum spec short faqstyle introduction poster version tcp state diagram extracted specification rather complete usual diagram still abstract simplified view specification state space intended printed size bigger peng li phd student steve zdancewic used specification basis purely functional haskell implementation tcp stack web server servicelevel tcp specification highlevel specification service provided tcp servicelevel specification hol source protocollevel servicelevel tcp specification tarball hol source file protocollevel servicelevel specification applying technique protocol design time designtime specification validation work mac protocol optically switched networking reasoning protocol specification demonstration verification distributed infrastructure involving networking filesystem concurrent ocaml code following demonstrates feasibility completely formal reasoning isabelle proof assistant executable code fragment ocaml udp specification earlier work udp icmp socket paper earlier work focussing udp icmp socket api first technical report tacs paper describe model without time thread module using informal mathematics esop paper report hol specification extended cover three aspect sigops ew paper position paper reflecting experience norrish c semantics work udp calculus rigorous semantics real networking technical report andrei serjantov peter sewell keith wansbrough july also psgz pdf udp calculus rigorous semantics real networking andrei serjantov peter sewell keith wansbrough tacs lncs also psgz timing udp mechanized semantics socket thread failure keith wansbrough michael norrish peter sewell andrei serjantov esop lncs also psgz pdf timing udp hol model hol script typeset version timed host semantics described paper rigour good feasible reflection formal treatment c udp socket michael norrish peter sewell keith wansbrough sigops ew also psgz note written aid development tcp specification describing behaviour linux implementation people acknowledgement work funded epsrc rem programme grant epsrc leadership fellowship royal society university research fellowship sewell st catharine college heller research fellowship wansbrough epsrc grant widearea programming language semantics infrastructure design epsrc grant netsem rigorous semantics real system ec fetgc project pepito peertopeer computing implementation theory cmi urop internship support smith ec thematic network appsem national ict australia funded australian government backing australia ability initiative part australian research council petersewell clcamacuk validate page
707,Lobsters,formalmethods,CSE-Formal methods,Runtime Checking of Concurrent Data Structures (2005),https://core.ac.uk/download/pdf/82158063.pdf,runtime checking concurrent data structure,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream xڌt lsw endstream endobj obj endobj obj endobj obj colorspace font procset pdftextimageb extgstate typepage endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream ѽ bywo uoyf k z
708,Lobsters,formalmethods,CSE-Formal methods,The Symbolic Maze (2010),https://feliam.wordpress.com/2010/10/07/the-symbolic-maze/,symbolic maze,v klee maze klee idea dissecting code ssssddddwwaawwddddssssddwwww klee symbolic execution chamigo way flag portion code interested sddwddddssssddwwww option ssssddddwwaawwddddssssddwwww ssssddddwwaawwddddsddw sddwddddssssddwwww sddwddddsddw conclusion like,post exercise symbolic execution engine klee funny ascii maze yet another toy example v maze dimension player po iteration program player move sequence w try reach prize x match tiny mazelike game coded c versus fullfledged llvm based symbolic execution engine klee many solution think maze thing coded c impatient download simple ascii game asks first feed direction enter batch list action usual left right w look player po iteration action x x x x really small know code hide nasty trick end see one way solve klee klee symbolic interpreter llvm bitcode run code compiledassembled llvm symbolically running program considering input variable symbol instead concrete value like cacho word symbolic execution run code propagating symbol condition forking execution symbol dependant branch asking companion smt solver path feasibility counterexample info check even find interesting keep reading idea use klee automatically solve small puzzle dissecting code let take walk maze code first hardcodes map static global rw variable define h define w char maze h w set convenient function draw maze state void draw int j h j j w j printf c maze j printf n printf n main function local variable hold position player iteration counter array int main int argc char argv int x player position int ox oy old player position int iteration number define iters char program iters initial player position set first free cell map player sprite letter x x maze x x point ready start asks direction read action array char execute iters iteration command iterates array action variable program iters ox x save old player position oy different action change position player different axis direction usual left right w switch program case w break case break case x break case x break default printf wrong command w accepted n printf lose n exit check prize hit win maze x printf win n printf solution n program exit something wrong advance backtrack saved state maze x maze x x x w x ox oy crashed wall move exit lose oxx oyy printf losen exit ok basically move move put player correct position map draw new state maze x x draw draw increment iteration counter used select next action array wait second loop sleep wait human far lose ok considering mazec compile line like gcc mazec maze run couple try get priceless maybe using solution ssssddddwwaawwddddssssddwwww yere screen cast wining vivaaaa klee let see klee able find solution first even start thinking klee need get copy llvm toolchain compile maze llvm bitcode use llvm llvmgcc may want take tour klee official tutorial llvm thing place compile test cycle mazec using llvm like llvmgcc c mazec mazebc lli mazebc run llvm bitcode representation maze interpreter testing klee need mark something code symbolic let mark maze input symbolic array action maze code read beginning main function klee gain symbolic control array action code done changing line kleemakesymbolic program iters program also need add klee header beginning klee find every possible codemaze path reachable input path lead typical error condition like memory failure klee signal symbolic execution chamigo way say every input marked symbol concrete value like cachho symbolic variable representing every possible value program restriction symbol point may face branch depends symbol case check feasibility different path using smt solver feasible dive path repeating basic algorithm course error cond reached smt solver asked way reach specific spot hello mr memory corruption let give llvmgcc c ipathtoklee mazekleec mazekleebc klee mazebc screen cast could check end demo klee find different klee done total instruction klee done completed path klee done generated test throw test case generate kleelast l kleelast assemblyll info messagestxt runistats runstats warningstxt test case could retrieved ktesttool like ktesttool ktest file args mazekleeo num object object name program object size object data case may take input original maze check ok far good ktesttooling every possible test case check maze solution need way klee help u tell normal test case apart one actually reach win state note also klee found error maze code design klee issue warning well known error condition like wrongly indexed memory access detected flag portion code interested kleeassert function pretty much thing common c assert force condition true otherwise abort execution could check complete klee c interface already way mark certain program part assert klee scream reach code done replacing line two printf win n kleeassert signal solution klee assert synthetic failure reach win state mean player hit ok compile llvm run klee new version flag one test case also l kleelast grep err let see input trigger errormaze ktesttool ktest file args mazekleeo num object object name program object size object data propose sddwddddssssddwwww hey odd seems short even reach end maze let try input original typical fake wall klee made way excellent wait minute suppose find every possible solution trivial solution klee unable find well case apparently need one way reach error condition klee wont show way reach error state desperately need use one klee option need run like klee mazekleeo check klee crazy give different solution ktesttool ktest file args mazekleeo num object object name program object size object data ktesttool ktest file args mazekleeo num object object name program object size object data ktesttool ktest file args mazekleeo num object object name program object size object data ktesttool ktest file args mazekleeo num object object name program object size object data posible solution ssssddddwwaawwddddssssddwwww ssssddddwwaawwddddsddw sddwddddssssddwwww sddwddddsddw conclusion better use symbolic execution manual code exploration even code error prone adhoc solution searcher fuzzing may unfeasible even restricting input interesting sure comment correction welcome f like like loading related
709,Lobsters,formalmethods,CSE-Formal methods,TLA+ Video Course,http://lamport.azurewebsites.net/video/videos.html,tla video course,tla video course lecture web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version video file zip file script downloading instruction,tla video course last modified july series video lecture teach programmer software engineer write tla specification assumes basic understanding programming concept knowledge elementary mathematics might taught beginning university math course computer scientist would also helpful word warning video light entertainment require careful viewing actual thinking may often stop video digest seen perhaps skip back view accompany video coffee better popcorn lecture watched web however people slow network connection might prefer download lower resolution version video watch offline instruction given script video also provided contains everything shown said video except shot author hearing impaired viewer fluent english find helpful read script watch video script also read instead watching video want review lecture hate video however html file display video may needed download material lecture introduction tla explains tla might want use introduces concept state machine length web version correction offline version video file zip file script state machine tla show simple state machine described tla giving first glimpse tla specification length web version offline version video file zip file script resource tool describes resource learning tla explains download toolbox show use open spec view prettyprinted version run tlc script display said portion video demonstrate use toolbox length web version correction offline version video file zip file script die hard save life two hollywood action hero way start learning write tla spec checking parser tlc length web version offline version video file zip file script transaction commit commitment marriage database transaction specified also learn use mathematical function specification length web version correction offline version video file zip file script twophase commit commitment achieved marriage database transaction also learn record tla using tlc length web version correction offline version video file zip file script paxos commit specifies real faulttolerant algorithm committing database transaction explains mathematical operation constructing combining set length web version offline version video file zip file script implementation twopart lecture introduces temporal formula explains mean one specification implement another length part part part preliminary web version correction offline version video file zip file script part work web version offline version video file zip file script alternating bit protocol twopart lecture explains liveness describes must happen fairness part high level specification web version offline version video file zip file script length part protocol web version correction offline version video file zip file script length implementation refinement twopart lecture explains general meaning implementation involves refinement mapping part preliminary web version offline version video file zip file script length part refinement mapping web version offline version video file zip file script length downloading instruction watching lecture offline download tlavideofileszip extract content folder let suppose name folder tlalectures folder contain file tlastylescss tlavideojs folder dist watch lecture offline download lecture video file zip file first name folder tlalectures let suppose file named smandtlazip extract content smandtlazip folder tlalectures one extracted file named smandtlahtml lecture zip file contain file view video open web browser html file
710,Lobsters,formalmethods,CSE-Formal methods,Malicious Code Detection for Open Firmware (2002),http://www.cs.cornell.edu/~kozen/papers/acsac.pdf,malicious code detection open firmware,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream aa endstream endobj obj endobj obj endobj obj procset pdftext extgstate endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream z endstream endobj obj stream h q endstream endobj obj stream rgݲ zw b n yg鮱 endstream endobj obj stream q endstream endobj obj stream ߓ 嶚 endstream endobj obj stream ݦ e endstream endobj obj stream r q endstream endobj obj stream endstream endobj obj stream wc endstream endobj obj stream ab g g ĵ endstream endobj obj endobj obj procset pdftext extgstate endobj obj stream z oұ lyrk ȝŕ cmkxay v c vj f x ǩ x aa r r mc n l f x endstream endobj obj endobj obj xobject procset pdftextimageb extgstate endobj obj stream vka p
711,Lobsters,formalmethods,CSE-Formal methods,In Lockstep: Kernel and Verification (2017),https://research.csiro.au/tsblog/lockstep-kernel-verification/,lockstep kernel verification,say hello formal method engineer towards disciplined approach concrete outcome dialogue team state proof engineering development time proof improved time formal verification made cost effective complete stay tuned series mailing list get touch another way post,e er twain shall meet say hello formal method engineer need talk kernel debug api code dr rafal kolanski said approaching sense urgency deadline time verify debugapi arm barely able deliver armhyp proof time even skip help asked rafal lazily hide debugregister context switching code verified build kernel rafal asked brow furrowed ever slightly sat paid attention proof engineer often request small large posthumous tweak kernel codebase order make verifiable tweak may often introduce eccentricity code reason behind investigation begin found way hide feature without compromising feature functionality kernel tweaked another milestone successful collaboration kernel verification team want invite reader see coordinate thing internally let unveil fabric entwines kernel verification engineering team together towards disciplined approach occurred could try open window view kernel team verification team trustworthy system really interact way interact push pull cycle write code verification take look digesting carefully come back tell u modification would make easier reason code usually end unless particlar change requested verification team would introduce unacceptable performance overhead seldom kernel team push back verification yet sdlc software development lifecycle formal approach software development speak roughly developed inhouse rhythm two team generally start like verification see code wrote puzzle hour send diplomatic mission query kernel team code puzzling analogy surprisingly apt practice usually look similar delegation dignitary crossing floor figure three member verification team asking anna lyon mind behind mcsrealtime mixedcriticality system kernel extension question design round verbose inquiry verification mission return mothership usually gerwin office short later brainstormed series invariant begin invariant set property kernel maintained across kernel invocation required correct execution invariant proven use hoare logic form precondition true step execution postconditions true step launch second diplomatic mission round talk explain invariant come ask u invariant actually describe code written figure often hammer thing new voice join discussion onthefly discussion robust dynamic finally depending complex code verified next day negotiate shared understanding code take pointer verification way make code amenable application formal method process may repeated course week depending complex code question end result mutual understanding later proof concrete outcome dialogue team asked rafal tell senior proof engineer thought useful outcome team discussion insight formal method team able come u interface u identify actual problem code process formally verifying code help identify actual bug error code verified much use formal method team forced think meaning code sideeffects semantic implication particular design decision reason often notice subtle ramification behind behaviour code kernel team might explicitly considered asking u explain meaning piece code force u also make tacit decision explicit improve robustness design implementation result interaction kernel verification verification team derives property kernel team intended intend introduce use model code proof final comment making meaning code explicit tends gradually refine code making kernel team look code top bottom functionality perspective also overall composite system state proof engineering drs gerwin klein june andronick champion verification mind interest structuring interaction form sdlc formal discipline replicated company scalably encourage adoption formal method would discipline arises aspiration waterfall nature iterative nature given fact verification need multiple iteration negotiation kernel engineer highly responsive interactive iterative process seems recommend development time proof improved time formal verification made cost effective yes strong reason believe result gradually increased mutual understanding two team established sort rapport gone long way reducing time take develop proof turned joel beeren one lead proof engineer get feel factor enhanced proof engineer productivity recent proof mostly building alreadyexisting proofbase proof engineering scale seems lend modularization parameterization accrued knowledge verification team kernel concept reason contrast large amount work going right internally work verifiying concurrency going back forth kernel verification team defining problem concurrency great challenge formal method kernel team also much better understanding rule thumb could stick order ensure code easily verifiable verification team developed inhouse tool framework automated lot task increased productivity example framework autocorres automates ability verification team reason clanguage code functional language similar haskell various way development discipline within verification team also matured complete lot story team learning expectation thing make respective job easier kernel development team writing code amenable verification take slight understanding thing verification team likely uncomfortable verification team keep mind even amendment would make easier reason verify code amendment must compromise performance kernel unreasonably asked joel beeren one experienced proof engineer whether experience stride made result verification team coming understand kernel team need better whether come result kernel team coming understand verification team requirement better feel understanding team essentially equal weight guess like push pull stay tuned series formal method future highassurance system consider invitation see accomplish verification goal maybe leave comment two insight kind sdlc could arise integrates traditional software development formal method like answering tough question come challenge u mailing list get touch another way keep eye post series lockstep blog check post g day
712,Lobsters,formalmethods,CSE-Formal methods,A Survey of Symbolic Execution Techniques,https://arxiv.org/pdf/1610.00502.pdf,survey symbolic execution technique,,obj filter flatedecode length stream w endobj obj filter flatedecode length stream endobj obj filter flatedecode length stream xڥ kr ы w r p o g r g g endobj obj filter flatedecode length stream xڥ ofg x n sf um hg sjbw ro r z endobj obj type objstm filter flatedecode first length n stream
715,Lobsters,formalmethods,CSE-Formal methods,Learn TLA,https://www.learntla.com/introduction/,learn tla,introduction tla use hard use beginnerfriendly guide whirlwind tour,introduction tla tla formal specification language tool design system algorithm programmatically verify system critical bug software equivalent blueprint use simple tla specification representing people trading unique item find bug people alice bob item ore sheep brick algorithm trade variable ownerof item people process giveitem three possible trade made variable item item owner ownerof item people originoftrade people begin give originoftrade owner ownerof item end end process end algorithm since check owner item one trading away safe scam right run model checker find true alice could trade item process finish running resolve parallel trade giving item bob first trade resolve alice get item back algorithm fails race condition know tla explored every possible state timeline different way fixing fix work two people tla checking simple people alice bob eve work trade multiple item variable item subset item multiple sheep ore brick amountowned people x item three people trading ore sheep player eve also trade alice brick possible state space tla check hard use formal method reputation difficult point worth critical system mean guide written assumption reader working critical system know tla inside make absolutely sure system accidentally kill people dangerous bug somebody dy yes formal method hard dangerous bug nobody dy customer get really mad spend two week tracking fixing bug small subset tla need actually pretty easy learn find beginnerfriendly guide set beginnerfriendly guide hello guide cover basic tla easy handson way want start beginning learn cover want dive right away try whirlwind tour either way welcome tla
716,Lobsters,formalmethods,CSE-Formal methods,A Guide to Alloy (2007),http://www.doc.ic.ac.uk/project/examples/2007/271j/suprema_on_alloy/Final%20Report/LaTeX/report.pdf,guide alloy,,obj goto endobj obj guide alloy endobj obj goto endobj obj introduction endobj obj goto endobj obj philosophy endobj obj goto endobj obj history endobj obj goto endobj obj tutorial endobj obj goto endobj obj getting started endobj obj goto endobj obj static endobj obj goto endobj obj static ii endobj obj goto endobj obj dynamic endobj obj goto endobj obj dynamic ii endobj obj goto endobj obj alternative alloy endobj obj goto endobj obj z object z endobj obj goto endobj obj object constraint language uml ocl endobj obj goto endobj obj vienna development method vdm endobj obj goto endobj obj test endobj obj goto endobj obj question endobj obj goto endobj obj final thought endobj obj goto endobj obj worked example endobj obj goto endobj obj seven bridge endobj obj goto endobj obj problem endobj obj goto endobj obj using alloy show solution exists endobj obj goto endobj obj modelling memory objectz alloy endobj obj goto endobj obj problem endobj obj goto endobj obj solution objectz endobj obj goto endobj obj solution alloy endobj obj goto endobj obj design development content website endobj obj goto endobj obj content endobj obj goto endobj obj java web start issue flash demo endobj obj goto endobj obj website layout endobj obj goto endobj obj choice colour endobj obj goto endobj obj using php endobj obj goto endobj obj conclusion evaluation endobj obj goto endobj obj conclusion endobj obj goto endobj obj personal experience technology used endobj obj goto endobj obj html endobj obj goto endobj obj javascript endobj obj goto endobj obj php endobj obj goto endobj obj latex endobj obj goto endobj obj demo builder endobj obj goto endobj obj alloy endobj obj goto endobj obj alloy teaching tool comparison objectz endobj obj goto endobj obj outlook endobj obj goto appendixa endobj obj glossary endobj obj goto appendixb endobj obj website file list endobj obj goto appendix endobj obj bibliography endobj obj goto r fit endobj obj length filter flatedecode stream j endobj obj type page content r resource r mediabox parent r endobj obj r xyz null endobj obj r xyz null endobj obj font r r procset pdf text endobj obj length filter flatedecode stream v n
717,Lobsters,formalmethods,CSE-Formal methods,On The Notion Of Interestingness In Automated Mathematical Discovery (2000),http://spiral.imperial.ac.uk:8080/bitstream/10044/1/675/1/On%20the%20notion%20of%20interestingness.pdf,notion interestingness automated mathematical discovery,,obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream z ڕy ex e k r endstream endobj obj r r r r r r r r endobj obj procset pdftextimagec font r endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream g z yd sit eo kh ău v xsn qm xt endstream endobj obj r r r endobj obj procset pdftextimagec font r endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typefont fontdescriptor r firstchar lastchar width endobj obj typeencoding difference endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj encoding r typefont fontdescriptor r firstchar lastchar width endobj obj filter flatedecode length stream b j sokr e 릗u smld x bf ot yat z x w h h ar f q n p r w endstream endobj obj r r r r r r r r r r r endobj obj procset pdftextimagec font r endobj obj filter flatedecode length stream z r g e c jv iɍ bog
719,Lobsters,formalmethods,CSE-Formal methods,Don't Trust the Math (2013),https://pastebin.com/zz7YZZUk,nt trust math,,counterpoint bruce schneier nt trust math bruce told u time trust math code cryptosystems slogan sound really nice problem bad idea creates false sense security aspect thing also meaningless crypto construct become code simple truth computer nt run math run code may may implement math spec math pro make plenty mistake cryptographer keep giving u different advice time think infallible category potential problem math relies unsound formalism underlying logictool unsound proof construction top might incorrect math model nt reflect reality model must reflect actually going happen property kinda useless yes might come overapproximation underapproximation error class ca nt think right even outright deception math look good simply wrong happened many time math field including crypto thought theory proof construction etc correctsecure nt often take long time peer review process catch math error even many people see theoryproof disconcerting problem might subtle require new analysis technique etc poor problem catching building originally learned bruce adage almost anyone design something ca nt beat experienced flaw finder nt looked math way knowing hide flaw like open source mere possibility peer review nt mean bunch people looking math problem making math trustworthy nt find mathematician infallible abstract solution manage risk math use sound formalism theory model security critical aspect operation forming argument correctness andor security use tried true theory tool lemma etc although risk still exists reducing amount unknown andor building vetted work reduces risk math must vetted diversethinking set people expert math domain applies trust math implement correctly computer run code math evil grin code essentially concrete version math property must correspond property math model else math may barely relevant informal method dominate area better worse often worse formal specificationverification code steadily growing capability still norm every implementation hand waiving argument get math lesson nsa even orange book security engineering nt fully trust math given algorithm combined math spec english spec math security policy math proof spec met security policy strong code correspondence math spec covert channel analysis functional testing hardware testing pen testing strong lifecycle management nsa required given system software trust time security requirement secure system implementation increased see reason trade rigorous vetting process blind faith cryptographer math construction good news good news cryptographer nt overconfident seem careful thorough math improved time tool available seem pretty sound certain aspect crypto thoroughly vetted analyzed bruce contributed work actually use book time correctly implement crypto plenty academic worldwide looking algorithm hardware issue etc also quite construction formal proof security also vetted mostly good news u least basic like cipher hash signing rest need work math code side strong design vetting choice result math trust strong secure implementation choice result math use anyone wanting truly secure crypto need look everything abstract theory way internal component interact cache analogue rf component environmentpeople system operates really trusting math trusting total process product result note peter gutmann another math crypto guru wrote definitive paper problem occur math software meet go show problem known long time although mathematician nt like talk much http original posted schneier blog october revised quality clarity nick p security engineerresearcher highassurance antinationstate focus
720,Lobsters,formalmethods,CSE-Formal methods,My First Experience with Formal Methods,http://zipcpu.com/blog/2017/10/19/formal-intro.html,first experience formal method,yosys formal method formal method method spibased ad converter digilent product containing mem based microphone project project formal method test bench design test bench formal method fifo implementation built fifo fifo fifo fifo fifo fifo fifo fifo code test bench method state set formal method flipflop mathematical induction precalculus yosys formal method formal method formal method yosys formal declaration yosys formal method yosys yosys yosys yosys yosys wishbone slave discussed wishbone yosys yosys yosys basic concept fifo example fifo fifo spibased microphone adc last fifo fifo fifo fifo fifo fifo fifo fifo fifo fifo fifo fifo particular fifo fifo fifo fifo formal method formal verification method fifo fifo fifo fifo fifo code fifo fifo fifo fifo fifo instruction installing yosys symbiyosys line makefile yosys config find fifo fifo fifo fifo fifo fifo fifo fifo github repository final thought formal method formal method low level qspi flash driver uart transmitter lite entire ip core wishbone interface wb bridge,clifford wolf written nice tool yosyssmtbmc based upon yosys synthesys tool allows apply formal method verilog code promise formal method mathematically prove code work formal solver able tell code failing working method week already thing share first project tried applying formal method simple spibased ad converter particular controller designed interact digilent product containing mem based microphone project built time although admit never actually done anything plug since project simple enough thought try applying formal method prove controller worked sure test bench built time earlier convince project worked design worked well test bench expect find many problem using formal method imagine surprise found several bug instead many bug within fifo passed one project another time see built fifo tested fashion reasonable person might use reasonable use scenario fifo done well formal prover however limit considered reasonable usage fifo created underruns overrun wrote fifo full read fifo empty even wrote read empty fifo clock wrote read full fifo clock well internal logic match criterion gave solver showed fifo code properly handle condition guess much creativity created test bench first place result worth keep mind never used method think worth think proved project yet know able added proof found bug result today though like share learned state set never worked formal method basic concept go code declare state valid use theorem prover mathematically prove never enter invalid state valid one prover prove typically either bug code bug formal assertion think state value flipflops together value input fig bounded model check first step yosyssmtbmc based theorem solving bounded model checker bmc figuratively shown fig part theorem solver start design initial state walk state transition stepping logic forward one time step next see set condition drive model invalid state may straightforward part using yosyssmtbmc easiest understand problem bmc step time limited therefore want allow bmc step check finite number transition number need chosen carefully otherwise may state might eventually get time find also find additional state via second step induction step induction step like mathematical induction learned precalculus first prove property true first value purpose bmc step true base case proceed inductive step step assumes logic within initially valid state say state n try prove logic transition valid state say state idea fig induction step practice struggled induction step challenge designer induction step declare every unreachable state invalid might start processing unreachable state expecting figure show state neither valid invalid still state design never reach may easily become starting state induction therefore designer clearly indicate state must either valid invalid fig unreachable state invalid let try explain touch better moment go system verilog statement yosys recognize statement declare state get either reducing size total state space examined declaring particular state illegal part job formal specification designer job formal method determine state may reached cross check state illegal one perhaps simple table one fig might help explain fig unreachable v invalid state want know designer whether way might reach invalid state valid one hence want know particular illegal state reachable valid state purpose formal method part struggled working induction step state declared invalid might starting point state unreachable help give idea try working formal method need make certain unreachable state either declared invalid removed set possible state speaking next step discussing declare state invalid using yosys formal declaration yosys made understand basic formal statement drawn subset system verilog formal verification language frustrating new user formal method yosys since material line discus full system verilog formal description language subset yosys support much le basically yosys support assert assume restrict expression transition let examine formal verification statement first statement interest assert statement first blush statement work much like assert statement within cc value given assert statement must true design working desired assert though assert declare state invalid within design come back thought moment thing need know assert within simulation assert ever true simulation halt failure allows focus caused problem within design next basic statement assume statement statement like assert exception theorem prover try prove assume statement true instead force assume true logic path would cause assume false quietly culled perspective state space examined assume statement remove particular state realm possibility example initial lastclk always globalclock assume iclk lastclk force iclk input design toggle every simulation step meaning true every change time step state state transition clock toggle quietly removed realm possibility assume statement one feature simulation condition invalid simulation halt error would assert statement false restrict instruction similar assume instruction like assume restrict also reduces size state space theorem prover need work within way restrict statement much like assume statement however unlike assume statement simulator ignore restrict statement within code also found several function valuable past stable rose fell since important let work way past function form past expression n arbitrary expression positive integer n statement return value expression n clock ago hence past reference expression evaluated last clock number clock parameter n default one past expression past system verilog allows two argument past function total four yosys however may find extra argument necessary either example fourth system verilog argument past function specifies clock clock edge referencing past expression instead yosys allows expression past value within clocked always block us clock specified always statement define clock past function relative one trick past function prior first clock past value undefined often assumed zero many formal theorem solver need careful therefore expect past value reference initial value within logic reason gotten habit creating signal tell past value valid initial fpastvalid always posedge iclk fpastvalid use fpastvalid part expression determine whether input wishbone slave change strobe go high stall line low remember discussed wishbone nothing happens iwbstb owbstall mean wishbone master asserts strobe signal iwbstb likely wait owbstall signal lower changing bus request detail capture thought assume iwbstb go high none bus request information change clock owbstall go low always posedge iclk fpastvalid past iwbstb past owbstall begin assume iwbstb assume iwbwe past iwbwe assume iwbaddr past iwbaddr assume iwbdata past iwbdata assume iwbsel past iwbsel end alternatively instead assuming current value equal last value could instead assumed value stable effect always posedge iclk fpastvalid past iwbstb past owbstall begin assume iwbstb assume stable iwbwe assume stable iwbaddr assume stable iwbdata assume stable iwbsel end last basic command want know rose command command return true false depending whether signal given risen positive edge last clock period particular function useful telling theorem prover input going change positive edge clock always globalclock nt positive edge rose iwbclk begin nothing change assume iwbstb assume stable iwbwe assume stable iwbaddr assume stable iwbdata assume stable iwbsel end similar fell primitive exists well testing negative clock edge yosys provides one helpful feature anytime use yosys generate formal description code yosys defines formal flag hence surround formal property ifdefs ifdef formal always posedge iclk assert illegalstate endif therefore basic formal declaration statement assert assume restrict helped function stable past rose fell perhaps others learned yet remember first week assert declares statement illegal assume restrict used limit size state space basic principle let look formal theorem proving concept basic concept basic approach formally describing program assume input valid assert output valid may also wish along way assert particular internal state valid well work aggregate one level higher level module instantiating lower level one case want assert value passed lower level module rather assume ing fifo example let work way simple fifo case examine fifo worked spibased microphone adc core may remember last fifo discussion fifo depends upon two memory pointer write pointer rfirst read pointer rlast time rfirst rlast equal fifo empty likewise number item within fifo determined rfirst minus rlast rule associated two variable first allowed read fifo time empty second rule write fifo full unless also reading fifo time attempt read empty fifo write full fifo generate error order keep state transition dependent upon number item fifo precompute two value willoverflow true next write overflow fifo willunderflow true next read read empty fifo particular fifo also return status value indicating many item fifo whether fifo nonempty whether fifo past halffull detail may also derived rfirst rlast alone match fifo illegal state therefore property perfect match learning formal method first step gate work synthesis tool ignore unless working formal verification method ifdef formal formal specification go endif go end formal specification next within formal block want make certain assumption going make regarding input become asserts core included larger design creating assume macro use constrain input ifdef smplfifo define assume assume else define assume assert endif remember want constrain via assume statement parameter set higher level module external input earlier described would take assume clock toggle repeat also going insist fifo start reset state insisting irst line initially valid initial restrict irst always globalclock begin restrict iclk flastclk flastclk iclk leaving beginning statement let also insist input change positive edge clock rose iclk begin assume stable irst assume stable iwr assume stable idata assume stable ird end end also discussed need know whether past function would return valid result use fpastvalid register purpose initial fpastvalid always posedge iclk fpastvalid also highlight fact formal verification logic may use register like rest though using within design formal verification next let look making sure helper logic work first rfill output equal number fifo memory entry full given difference rfirst rlast chose use clocked register hold value timing reason possibility got wrong let check formally one might say state rfill equal difference illegal state assign ffill rfirst rlast always posedge iclk begin assert ffill rfill let move empty flag time fifo empty want set willunderflow flag addition want oemptyn true time empty mentioned fifo empty time rfirst equal rlast use ffill purpose ffill begin assert willunderflow assert oemptyn end else begin assert willunderflow assert oemptyn end similar value time fill one le number item buffer buffer full let make sure got logic right ffill lgflen assert willoverflow else assert willoverflow fifo code also value rnext supposed reference next value read know got right let add one rlast pointer assign fnext rlast look see rnext equal desired assert rnext fnext end finally let examine pointer overflow underflow condition first reset pointer set zero output error cleared always posedge iclk fpastvalid begin past irst assert oerr else begin reset might underflow let check fifo empty last clock request read fifo clock underflow case assert fifo read pointer rlast changed result underflow detection past ird past rfill begin core nt report underflow error quietly ignores assert oerr underflow need careful advance pointer assert rlast past rlast end pointer changed fifo might accidentally jump empty state full state garbage buffer want avoid almost thing overflow condition couple difference first case read write clock full overflow taken place hence need check write without read taken place first difference second difference core report overflow condition underflow condition hence assert oerr true overflow likewise overflow also assert rfirst pointer changed overflow detection past iwr past ird past willoverflow begin make sure report result assert oerr make sure nt advance write pointer overflow assert rfirst past rfirst end end end underflow pointer change overflow condition catastrophic well could cause fifo suddenly become empty losing data within formal check tell theorem prover would illegal want know anything would create condition discussed instruction installing yosys symbiyosys various theorem provers may found line neither discussed makefile used coordinate proof yosys config used feel free examine would like find may recall earlier found several error fifo result using method reading may wondering significant error thing found originally said write underflow would take underflow condition read time wrong write empty fifo always succeed independent whether read taking place time read empty fifo always write taking place time fixing required several change throughout initialized variable particular rnext rfill originally initialized calculating number element fifo assumed willoverflow value true write fifo would overflow fifo case willoverflow true write without concurrent read overflow fifo read write clock period overflow fifo like change captured within github repository line review found final thought please keep mind beginner formal method never used week already found several problem code using formal method worth effort well example like come back topic future learned also like apply method many problem well however also got problem yet certain prove example managed prove low level qspi flash driver yet figure prove entire protocol likewise managed prove uart transmitter lite work yet receiver entire ip core including wishbone interface think see prove wb bridge next think would useful
723,Lobsters,formalmethods,CSE-Formal methods,Realising the Benefits of Formal Methods,http://www.anthonyhall.org/csi.pdf,realising benefit formal method,,obj length filter flatedecode stream e b q p j
724,Lobsters,formalmethods,CSE-Formal methods,"x86 Proved: Coq Library for Modelling, Specification, Generation, and Proof for x86 Machine Code",https://x86proved.codeplex.com/,proved coq library modelling specification generation proof machine code,,javascript required use codeplex archive
725,Lobsters,formalmethods,CSE-Formal methods,What even is compiler correctness?,https://www.williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/,even compiler correctness,even compiler correctness research language mathcal l newcommand peqvsym overset p simeq newcommand ceqvsym overset c simeq newcommand leqvsym overset gamma simeq newcommand ctxeqvsym overset ctx simeq newcommand neweqv mathrel newcommand peqv neweqv peqvsym newcommand ceqv neweqv ceqvsym newcommand leqv neweqv leqvsym newcommand ctxeqv neweqv ctxeqvsym begin array llcl text program p text component c text linking context gamma text link operation c p text program equivalence peqvsym p p prop text linking equivalence leqvsym gamma gamma prop text component equivalence ceqvsym c c prop text observational equivalence ctxeqvsym c c prop end array ctxeqvsym mathcal l p peqv c gamma c gamma c leqv p c gamma p c gamma compiler newcommand newsteqvsym newcommand psteqvsym newsteqvsym peqvsym newcommand lsteqvsym newsteqvsym leqvsym newcommand csteqvsym newsteqvsym ceqvsym newcommand psteqv neweqv psteqvsym newcommand csteqv neweqv csteqvsym newcommand lsteqv neweqv lsteqvsym begin array llcl text source language mathcal l text target language mathcal l text program translation leadsto p pt text component translation leadsto c ct text crosslanguage st program equivalence psteqvsym text st linking equivalence lsteqvsym text st component equivalence csteqvsym end array mathcal l mathcal l mathcal l mathcal l mathcal l mathcal l mathcal l mathcal l even compiler correctness type preservation p leadsto pt c leadsto ct compcert system ftotal wholeprogram correctness p leadsto pt psteqv p pt compcert cakeml compcert compositional correctness c leadsto ct lsteqv gamma gammat psteqv gamma c gammat ct lsteqvsym c leadsto ct lsteqv gamma gammat psteqv gamma c gammat ct lsteqvsym leadsto lsteqv gamma gammat iff gamma leadsto gammat c leadsto ct gamma leadsto gammat psteqv gamma c gammat ct c leadsto ct csteqv c ct c leadsto ct gammat psteqv gammat c gammat ct c leadsto ct gamma psteqv gamma c gamma ct compositional compcert compcert sepcompcert compcert version pilsner perconti ahmed full abstractionsecure compilation ceqv c c c leadsto ct c leadsto ct ceqv ct ct ceqv ct ct c leadsto ct c leadsto ct ceqv c c c leadsto ct c leadsto ct ctxeqv c c ctxeqv ct ct bowman ahmed fournet et al devriese et al,even compiler correctness research post precisely define common compiler correctness property compiler correctness property often referred vague term others make definition precise discus key difference give example research paper project develop compiler satisfy property language goal give generic definition compiler correctness property without respect particular compiler language class language first give generic definition language generic compiler defined language mathcal l defined follows newcommand peqvsym overset p simeq newcommand ceqvsym overset c simeq newcommand leqvsym overset gamma simeq newcommand ctxeqvsym overset ctx simeq newcommand neweqv mathrel newcommand peqv neweqv peqvsym newcommand ceqv neweqv ceqvsym newcommand leqv neweqv leqvsym newcommand ctxeqv neweqv ctxeqvsym begin array llcl text program p text component c text linking context gamma text link operation c p text program equivalence peqvsym p p prop text linking equivalence leqvsym gamma gamma prop text component equivalence ceqvsym c c prop text observational equivalence ctxeqvsym c c prop end array ctxeqvsym greatest compatible adequate equivalence component language mathcal l notion program p program evaluated produce observation program equivalence peqv defines two program produce observation language also notion component c unlike program component evaluated although notion equivalence however produce program component linking link applying linking context gamma component c written gamma c linking context also compared equivalence using linking equivalence leqv observational equivalence notion two component related note however observational equivalence completely determined aspect language free pick relation c language definition follows let p welldefined whole c program defines functionmain program would produce valid executable compiled let c welldefined c program defines functionmain requires external library linked either dynamic statically component would produce valid object file compiled would run without first linked let gamma directed graph c library c header file define link operation static linking library c level define two program program equivalent program diverge raise error terminate leaving machine state define two linking context equivalent exactly define two component component equivalent program equivalent linking linking equivalent linking context coq cic language definition follows let p closed welltyped coq expression let c open welltyped coq expression let gamma map free variable program right type define link operation substitution define component equivalence program equivalence definitional equality define linking equivalence applying program equivalence pointwise codomain map compiler using generic definition language define generic compiler follows newcommand newsteqvsym newcommand psteqvsym newsteqvsym peqvsym newcommand lsteqvsym newsteqvsym leqvsym newcommand csteqvsym newsteqvsym ceqvsym newcommand psteqv neweqv psteqvsym newcommand csteqv neweqv csteqvsym newcommand lsteqv neweqv lsteqvsym begin array llcl text source language mathcal l text target language mathcal l text program translation leadsto p pt text component translation leadsto c ct text crosslanguage st program equivalence psteqvsym text st linking equivalence lsteqvsym text st component equivalence csteqvsym end array every compiler source language mathcal l target language mathcal l use subscript referring definition mathcal l referring definition mathcal l every compiler defines translation mathcal l program mathcal l program similarly translation component compiler also defines crosslanguage relation program component linking context define compiler c follows let mathcal l language c defined earlier define language similarly let gcc program component translation define st program equivalence compiling source language program comparing machine state running program define st linking equivalence similarly definition given c language define st component equivalence linking st equivalent linking context referring st program equivalence define compiler coq ml follows let mathcal l language coq defined earlier define language ml similarly let coqtoml extractor program component translation define program equivalence via closed crosslanguage logical relation indexed source type define component equivalence picking related substitution closing component referring program equivalence define linking equivalence applying program equivalence pointwise codomain map even compiler correctness type preservation simplest definition compiler correctness compile program program ie compiler never produce garbage slightly le trivial definition compile component component literature theorem called typically type preservation also connotes target language nontrivial type system compiler obviously nontrivial type preservation program p leadsto pt type preservation component c leadsto ct type preservation interesting source target language provide sound type system enforces sophisticated highlevel abstraction even still requires property test ensure compiler nontrivial user understand guarantee type preservation still necessary understand target language type system compiler compiler compiles every program typepreserving trivial sense definition source program program valid program many language however call compiler academic community may laugh compiler typepreserving trivial sense neither c provide static guarantee worth mentioning call compiler academic community may laugh compcert ctomach typepreserving weak nontrivial sense compcert enforces particular memory model notion memory safety preserve specification compiler lowlevel machine independent language called mach assembler typepreserving trivial since since provides static guarantee speak coqtoml extractor typepreserving pretty trivial sense ml le expressive type system coq extractor often make use cast type preservation provides guarantee component example possible cause segfault linking extracted ml program stateful ml program system ftotal compiler typepreserving strong sense system f provides strong data hiding security guarantee via parametric polymorphism tal provides parametric polymorphic memory safety allowing system type preserved even type preservation could hold compile everything trivial tal program halt int however quick look definition compiler small test suite sufficient convince u compiler nontrivial thus type preservation meaningful context wholeprogram correctness next definition would intuitively expect compiler bug free source program compiled target program literature theorem referred note wholeprogram semantics preserving compiler also trivially type preserving compiler may also type preserving nontrivial sense wholeprogram correctness p leadsto pt psteqv p pt wholeprogram compiler provides guarantee attempt compile component link since many arguably program actually component wholeprogram correctness limited use notable exception domain embedded system domain writing whole source program may practical compcert ctoasm compiler proven correct respect wholeprogram correctness machine checked proof compcert refers guarantee prior version compcert pointed possible link compilation formal guarantee semantic preservation apply whole program compiled whole compcert recent version lift restrctions discus shortly cakeml cakemltoasm compiler proven correct respect wholeprogram correctness machine checked proof cakeml substantial subset asm one several machine language riscv assembler unlike compcert proven correct compositional correctness intuitively compositional correctness next step wholeprogram correctness compositional correctness give u guarantee compile component link valid linking context target language compositional correctness c leadsto ct lsteqv gamma gammat psteqv gamma c gammat ct understand guarantee theorem necessary understand linking context related source target language instance compiler may allow linking arbitrary target linking context compiler may restrict linking linking context produced compiler phrase usually connotes relation lsteqvsym defined independently used mean specification separate compiler crosslanguage equivalent linking context support interoperability since linking permitted even linking context produced compiler handwritten target language long related source linking context compositional compiler correctness c leadsto ct lsteqv gamma gammat psteqv gamma c gammat ct lsteqvsym independent leadsto phrase usually connotes linking defined linking context produced compiler lsteqv gamma gammat iff gamma leadsto gammat correctness separate compilation c leadsto ct gamma leadsto gammat psteqv gamma c gammat ct paper present variant stated component instead program usually theorem implies compositional correctness require crosslanguage equivalence component usually defined term linking st equivalent linking context observing st equivalent program semantics preservation c leadsto ct csteqv c ct paper define interoperability source component target linking context target component source linking context support broader notion linking thus widely applicable compositional correctness guarantee however requires understanding sourcetarget interoperability semantics understand guarantee way relate resulting behavior back source language general open compiler correctness c leadsto ct gammat psteqv gammat c gammat ct c leadsto ct gamma psteqv gamma c gamma ct note satisfy open compiler correctness two new definition linking must defined one link target linking context source component one link source linking context target component compiler generate machine code aim compositional compiler since able link output assembly even produced another compiler compiler target net vm jvm llvm similar language like coq racket target special purpose vms aim separate compiler language ffis thought aim limited form open compiler correctness instance link java c code certain limited definition linking context full spirit theorem limited research project compositional compcert compiler extends compcert correctness proof guarantee compositional compiler correctness linking defined target linking context whose interaction semantics related source linking context corollary titled compiler generalized version theorem name allow compiling arbitrary number component linking linking context sepcompcert compiler extends compcert correctness proof guarantee separate compiler correctness work note separate compiler correctness significantly easier proof increasing proof size compared required compositional compcert work merged compcert version pilsner compiler mlishtoassemblyish compiler guarantee compositional compiler correctness linking defined target linking context related mlish component pils perconti ahmed develop compiler system f lowlevel typed ir guarantee open compiler correctness every language linking defined linking context source intermediate target language compatible type paper defined multilanguage semantics language interoperate full abstractionsecure compilation property program stated term single run program require sophisticated compiler correctness theorem show property preserved instance security property indistinguishably cipher text random string relational property stated property two program language fully abstract compiler seek prove compiler preserve relational property since security property often relational sometimes called often time also want reflect equivalence usually follows compositional correctness full abstraction refers specifically preserving reflecting observational equivalence paper topic often focus equivalence preservation since equivalence reflection usually follows compiler correctness preservation direction interest stating security property compiler guarantee property limited research project many open problem solved key difficulty lie proof equivalence preservation essentially requires target program source program equivalence preservation ceqv c c c leadsto ct c leadsto ct ceqv ct ct equivalence reflection ceqv ct ct c leadsto ct c leadsto ct ceqv c c full abstraction let c leadsto ct c leadsto ct ctxeqv c c iff ctxeqv ct ct bowman ahmed develop equivalence preserving reflecting compiler core calculus dependency dcc system f dcc guarantee certain security property preserved encoding using parametric polymorphism compiler also satisfies compositional compiler correctness using crosslanguage logical relation define relatedness component language compiler fully abstract define contextual equivalence instead compiler preserve reflects security property interest fournet et al develop fully abstract compiler language similar monomorphic subset ml exception javascript paper demonstrates key difficulty fully abstract compiler often source language must artificially constrained case eliminating polymorphism adding exception order support backtranslation devriese et al develop fully abstract compiler stlc untyped lambda calculus paper developed key innovation backtranslation technique allowing expressive le typed target language backtranslated le expressive source typed source language
726,Lobsters,formalmethods,CSE-Formal methods,Uncle Bob and Silver Bullets,https://www.hillelwayne.com/post/uncle-bob/,uncle bob silver bullet,russian wrote software correctness tool answer tla manual amazon microsoft,post translated russian htr thank back wrote robert martin ruining software good programming supposed joke since done damndest actually ruin software telling people wrong recent response yell software correctness breaking point going go ahead say many u thinking uncle bob give terrible advice following make code worse begin tool answer listing new tool answer light table model driven engineering tla pretty biased writing tla manual agree thought core critique silver bullet tla shown astounded success amazon microsoft verifies spec code incredible designing system combine correctness technique like type system test pretty good argument turn argument head follows solution software apocalypse tool solution better programming discipline discipline anyway uncle bob say mean halfassed job uncle bob saying solution people writing bad write bad code program would perfect programmer one core assumption modern system engineering constant flow defect people make mistake rely people fuck u still auto death year rather best way reduce volume severity mistake adjust system either make harder make easier catch make cause le damage happen blame driver give safe road give seatbelt one way add bureaucratic process code review code conform requirement lack test named variable x etc code rejected system level reduces bug adopt mechanical tool like test ides automating process use way create code kind code create check work vast field software correctness span everything type system language design uncle bob okay software correctness us phrase unit testing like smurf us smurf every correctness technique word correctness technique unit test dismissed unit test give much confidence code human make mistake always guarantee mistake make nicely unit testable one example ceiling function wrote quick number would test function ceiling num num num return num return mathround num try seen ceiling floating point work shocked many people remembered check even knew floating point quirk propertybased test catch easily okay function two function clamp min x max return mathmax mathmin max x min function perfectly fine bug function kloc codebase single path eventually end calling clamp null value going test every possible path really superior using type system okay last one function appendtobody type text var documentcreateelement type dinnerhtml text documentbodyappendchild function work fine except opened x vector static analysis toy example topic plenty research plenty development plenty history learned good limitation use tool work exactly reason unit test tdd unit test enough type system enough contract enough formal spec enough code review enough nothing enough use everything even hope writing correct code one way program right infinite way program wrong assume tool use prevent narrow slice wrong way make bob advice toxic dismissive everything unit test actively discouraging u using whole range technique demand run blind blame u tripping uncle bob say whatever like listen welcome keep shouting tool help better language help better process help thing help lot lot unit test meanwhile continue struggle bug curse model checker make software engineering little bit better believe silver bullet
727,Lobsters,formalmethods,CSE-Formal methods,"Vale: Verifying High-Performance, Cryptographic, Assembly Code (2017)",https://project-everest.github.io/assets/vale2017.pdf,vale verifying highperformance cryptographic assembly code,,obj length filter flatedecode stream hm ί g g aw k dcɇ endstream endobj obj length filter flatedecode stream xڽ u n l l l w r g
728,Lobsters,formalmethods,CSE-Formal methods,HoTTSQL: Proving query rewrites with univalent SQL semantics,https://blog.acolyer.org/2017/10/05/hottsql-proving-query-rewrites-with-univalent-sql-semantics/,hottsql proving query rewrite univalent sql semantics,hottsql proving query rewrite univalent sql semantics query rewriting exposed rewrite bug oracle http cosettecswashingtonedu cosette automated prover sql enduser perspective proving equivalence rewrite cosette guide cover sql semantics krelation sql semantics basic krelation operator krelation extension proving rewrite rule,hottsql proving query rewrite univalent sql semantics chu et al pldi query rewriting vital part sql query optimisation rewrite rule applied query transform form hopefully lower execution cost clearly query rewritten still want mean thing original call semantic preserving take turn database schema table instance need return result since query rewriting used extensively sql engine may come surprise learn actually proof many common rewrite rule actually semantic preserving various rewrite rule proposed studied extensively data management research community best knowledge simple one formally proven semantic preserving unfortunately led dire consequence incorrect query result returned widelyused database system due unsound rewrite rule bug often go undetected extended period consider following query exposed rewrite bug oracle optimiser incorrectly converted first left outer join line hash join hottsql give u new sql formalization suitable proving equivalence query top system formally verify equivalence expression wrapped simple use interface might imagine lot going cover demonstrate utility proving correct large number query rewrite rule described literature currently used popular database system also show given counter example common mistake made query optimization fail pas formal verification pldi paper might expect deep internals understanding hottsql also highly recommend cosette website http cosettecswashingtonedu higherlevel cidr paper cosette automated prover sql enduser perspective proving equivalence rewrite cosette provides web interface api permit describe schema table query table ask equivalent express verification query cosette using simple dsl look like try using online hosted version accompanying grammar look like although might find easier pick cosette guide thing work pretty much like expect use wildcards worth pointing declaration code lang text schema x int int code say schema must include least x column column integer may column well although used query cover sql semantics cover lot going determine query equivalence big picture look like key part innovation finding suitable way express meaning sql query fancy way saying denotational semantics ansi standard us english prose known ambiguous place previous attempt formalisation used either listbased semantics turned difficult prove result equivalence due permutation setbased semantics limited relation actually bag semantics consist two nontrivial generalization krelations represent relation mathematical function take input tuple return multiplicity meaning tuple exist relation formal proving system tend picky detail job krelations asis quite enough firstly need handle subtlety around infinity secondly mapping tuples simple count turn quite enough replace count number univalent type apply homotopy type theory hott good go coq proof assistant used hottsql built support univalent type simplified many proof honest though unless deep type theory get awful long way thinking mapping tuples simple numeric count krelation sql semantics basic think something special number zero come addition act like identity value since multiplication number one play role another thing addition multiplication common associative combination set associative binary option defined set member special identity value sometimes useful talk abstract give fancy name monoid know something monoid already know following simple rewrite valid commutative monoid one binary operation commute ie order operand matter add one simple rewrite list set addition multiplication monoid binary operation defined member called semiring commutative semiring know addition multiplication operation also commute also property multiplication distributes addition giving couple extra rewrite rule could describe semiring structure find way express sql semantics term structure use rule help u prove query rewrite equivalence krelations let u krelation function defined relation written map tuple given attribute value count number time tuple appears relation given r name age alice alice bob addition predicate b predicate hold tuple otherwise attribute projection return attribute tuple sure like using bracket notation three purpose also use squash function x otherwise equality value x equal otherwise express relational operator term semiring operation krelation operator want prove two sql query equal prove two semiring expression equal example krelation extension krelations originally defined krelation function need finite support mean set tuples nonzero count must finite relation infinite capacity finite creates major problem equivalence proof since need prove intermediate result sql query return relation finite support add significant complexity otherwise simple proof equivalence get around author away requirement relation finite support instead mapping simple count relation function map class homotopy type homotopy type ordinary type ability prove membership equality type type generalise natural number semiring operation cardinal number empty homotopy type cardinal number unit type multiplication product type addition sum type infinite summation dependent product type truncation squash type make life easier coq already understands rule uninomial algebra algebra based univalent type homotopy type property proving rewrite rule hottsql dsl translated uninomial form via intermediate language hottir section paper describes mapping hottir model schema collection type organized binary tree tuples dependent type schema proved rewrite rule database literature real world optimizers using hottsql figure show number rewrite rule proved category average line code loc required per proof example selection pushdown formulated follows proof proceeds functional extensionality along associativity commutativity
729,Lobsters,formalmethods,CSE-Formal methods,Tackling Concurrency Bugs with TLA+ (Strange Loop),https://www.youtube.com/watch?v=_9B__0S21y8,tackling concurrency bug tla strange loop,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature tackling concurrency bug tla hillel wayne youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature tackling concurrency bug tla hillel wayne youtube
730,Lobsters,formalmethods,CSE-Formal methods,"""A (Not So Gentle) Introduction To Systems Programming In ATS"" by Aditya Siram",https://www.youtube.com/watch?v=zt0OQb1DBko,gentle introduction system programming at aditya siram,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature gentle introduction system programming at aditya siram youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature gentle introduction system programming at aditya siram youtube
731,Lobsters,formalmethods,CSE-Formal methods,Well-typed printfs cannot go wrong,http://kcsongor.github.io/purescript-safe-printf/,welltyped printfs go wrong,problem typelevel parsing sausage get made computing output type conclusion github welltyped printfs go wrong,one classic example keep coming talking dependently typed programming language safe printf function one ensures number type argument match requirement format specification language like idris function take format string return type argument required constructing formatted output string format number string int string string language like rust solve various mean metaprogramming writing program macro run compiletime generating program executed runtime two approach common operate string statically available compiler aim post show another way achieving result tool available purescript stronglytyped functional language dependent type problem want write program take format string number argument return result inserting argument specified place format string typesafe way format wurble int int string string format wurble foo wurble foo format wurble error found could match type string type int trying match type function string type function int symbol string proxy syntax introduced provides concise way passing type around format string actually typelevel literal later crucially need compute type input purescript dependent type value function traditional sense available evaluation compiletime however way interact compiler via typechecker solution therefore encode computation type typechecker evaluate u part typechecking luckily purescript allows string literal type type whose kind symbol thus constructing printf function comprises two step parse input symbol list format token generate function format list assemble output string typelevel parsing sake simplicity going focus two type format specifier decimal string represent case custom kind like regular algebraic datatype lifted typelevel mean constructor used type foreign import kind specifier foreign import data specifier foreign import data specifier foreign import data lit symbol specifier course apart format specifier everything else literal account wrapping lit type constructor foreign import bit mean introducing type constructor say impossible construct value type see later still possible carry type around term hint proxy furthermore need way representing sequence specifier introduce another kind foreign import kind flist foreign import data fnil flist foreign import data fcons specifier flist flist write type like fcons fcons lit foo fnil corresponding string foo kindpolymorphism supported current version purescript define parametric typelevel list need new one type want store list syntactic sugar would able write haskell today foo limitation likely removed future version compiler building block defined vocabulary talking parser function take symbol input return flist encode computation following type class class parse string symbol format flist string format functional dependency string format state input string determines ouput format bit crucial tell compiler knowing string sufficient determining value format task ensure dependency indeed hold writing instance deconstruct input symbol use following type class available class conssymbol head symbol tail symbol sym symbol sym head tail head tail sym interesting functional dependency sym head tail given symbol deconstructs head first character tail rest parser like state machine following legal state state found non character state found character one possible way representing state separate type class deal since simplified example know specifier symbol single character define second state class head symbol specifier head take symbol return matching specifier implementation straightforward instance instance partial function mean format string contain unsupported specifier token simply fail compile first state complicated consume arbitrary number character pas remaining string tail well class head symbol tail symbol flist head tail represents parsing state current character head rest input string tail know previous character first case tail empty case return current character literal singleton list instance fcons lit fnil second case interesting find need invoke function handle parsing specifier use conssymbol split current tail head h tail h contains format specifier pas recursively invoke parse parse rest input addition returning spec consed rest also put empty string literal head output list maintain invariant head output list always contains string literal invariant useful last else instance conssymbol h h spec parse rest fcons lit fcons spec rest match character ie since mean current character need string literal first recursively parse tail fcons lit acc r reason want know head parsing remaining string lit prepend current character literal need rebuild long string literal characterbycharacter invariant previous two case useful handle case head lit recursive call guarantee acc thus tail string literal currently parsing put together current character conssymbol acc rest recall type class construct deconstruct symbol via functional dependency simply return lit rest along r else instance parse fcons lit acc r conssymbol acc rest fcons lit rest r notice instance actually overlap third case easily imagine particular instantiation r match instance head second case word current character match general make sure instance selected order want use instance chain writing instance else instance b tell compiler try match instance first fails try b new feature purescript powerful one allows u avoid overlapping instance problem good finally need actually kick parser invoking first state instance parsenil parse fcons lit fnil else instance parsecons conssymbol h string h fl parse string fl sausage get made computing output type know many argument need pas formatter depends format string surprise like previous typelevel computation one also encoded type class functional dependency class formatf format flist fun format fun formatf format string fun symbol special syntax case mean formatf function take flist format input flist custom kind valuelevel inhabitant still get something whose type mention format proxy type value isomorphic unit carry information type notice work kind indeed proxy currently specialcased type purescript kindpolymorphic thus formatf take format list accumulator string return fun type depends actual format list starting base case nothing print simply return accumulated formatted string instance formatfnil formatf fnil string formatf str str head list know need int argument rest function type computed recursing tail list implementation since return type refined form int fun allowed construct lambda take int appends end accumulator recurses rest implementation identical omitted brevity instance formatfconsd formatf rest fun formatf fcons rest int fun formatf str formatf rest str show handling literal lit left exercise reader conclusion finally matter convenience wrap type class one serf bridge parser formatter class format string symbol fun string fun format string fun instance formatfformat parse string format formatf format fun format string fun format formatf format might instructional try work formatf instance resolution simple example hand get better idea work fully working implementation code post found github welltyped printfs go wrong published september last modified september
732,Lobsters,formalmethods,CSE-Formal methods,The Coming Software Apocalypse,https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/,coming software apocalypse,see full list get audm iphone app cusec vimeo james somers,six hour night april entire population washington state service people called help got busy signal one seattle woman dialed least time stranger trying break house finally crawled living room window picked kitchen knife man fledto hear feature story see full list get audm iphone app outage time largest ever reported traced software running server englewood colorado operated system provider named intrado server kept running counter many call routed dispatcher around country intrado programmer set threshold high counter could go picked number millionsshortly midnight april counter exceeded number resulting chaos counter used generate unique identifier call new call rejected programmer anticipated problem created alarm call attention nobody knew happening dispatch center washington california florida carolina minnesota serving million american struggled make sense report caller getting busy signal took morning realize intrado software englewood responsible fix change single numbernot long ago emergency call handled locally outage small easily diagnosed fixed rise cellphone promise new could text send video dispatcher development complex system relied internet first time could thing national outage four many yearsit said software eating world critical system controlled mechanically people coming depend code perhaps never clearer summer single day united airline grounded fleet problem departuremanagement system trading suspended new york stock exchange upgrade front page wall street journal website crashed seattle system went time different router failed simultaneous failure many software system smelled first coordinated cyberattack almost frightening realization late day coincidence electromechanical system used able test exhaustively say nancy leveson professor aeronautics astronautics massachusetts institute technology studying software safety year became known report radiationtherapy machine killed six patient software error used able think thing could state could get electromechanical interlocking controlled train movement railroad crossing instance many configuration sheet paper could describe whole system could run physical train configuration see would behave built tested knew exactly dealing withsoftware different editing text file somewhere hunk silicon become autopilot inventorycontrol system flexibility software miracle curse changed cheaply software constantly changed unmoored anything program thousand time complex another take actual tends grow without bound problem leveson wrote book attempting build system beyond ability intellectually manage software exactly told reason failed told wrong thingour standard framework thinking engineering instance regulation medical developed shortly world war ii advent software electromechanical system idea make something reliable making part reliable say build engine withstand takeoffandlanding cycle planning breakdown part two engine software break intrado faulty threshold like faulty rivet lead crash airliner software exactly told fact perfectly reason failed told wrong thing software failure failure understanding imagination intrado actually backup router switched automatically would restored service almost immediately described report fcc situation occurred point application logic designed perform automated corrective action trouble making thing code opposed something physical complexity leveson put invisible eye attempt underway change make software seem start premise code hard think trying understand attempt worth understanding might code make foreign mind unlike anything came ittechnological progress used change way world could watch road getting paved could see skyline rise today hardly tell something remade often remade code press foot car accelerator instance longer controlling anything directly mechanical link pedal throttle instead issuing command piece software decides much air give engine car computer sit inside steering wheel pedal might well keyboard keyslike everything else car computerized enable new feature program charge throttle brake slow close another car precisely control fuel injection help save gas control steering keep lane start drift guide parking space build feature without code tried car might weigh pound immovable mass clockworksoftware enabled u make intricate machine ever existed yet hardly noticed complexity packed tiny silicon chip million million line code see complexity mean gone awaythe programmer renowned dutch computer scientist edsger dijkstra wrote able think term conceptual hierarchy much deeper single mind ever needed face dijkstra meant warning programmer eagerly poured software critical system became linchpin built dijkstra thought perhaps overestimated software engineer understand problem trying solve care made programming difficult required think like computer strangeness sense vivid early day computing code took form literal one zero anyone looking programmer shoulder pored line line like would seen alienated programmer actual problem trying solve would impossible tell whether trying calculate artillery trajectory simulate game tictactoe introduction programming language like fortran c resemble english tool known integrated development environment ides help correct simple mistake like microsoft word grammar checker code obscured though little actually change basic fact programmer work problem directly rather spent day writing instruction machine problem software engineer understand problem trying solve care say leveson mit softwaresafety expert reason wrapped getting code work software engineer like provide kind tool stuff coding error say referring ides serious problem happened software requirement coding error writing code control car throttle instance important rule much open system become complicated hardly anyone keep straight head million line code car leveson say anticipate thing september jean bookout driving highway best friend toyota camry accelerator seemed get stuck took foot pedal car slow tried brake seemed lost power swerved toward offramp going mile per hour pulled emergency brake car left skid mark foot long running embankment side road passenger killed bookout woke hospital month laterthe incident one many nearly decadelong investigation claim socalled unintended acceleration toyota car toyota blamed incident poorly designed floor mat sticky pedal driver error outsider suspected faulty software might responsible national highway traffic safety administration enlisted software expert nasa perform intensive review toyota code nearly month nasa team found evidence software said prove tit litigation bookout accident someone finally found convincing connection michael barr expert witness plaintiff team software expert spend month toyota code picking nasa left barr described found spaghetti code programmer lingo software become tangled mess code turn spaghetti accretes many year feature feature piling top woven around already eventually code becomes impossible follow let alone test exhaustively flaw software malfunction program crashed supposed save day using model camry involved accident barr team demonstrated million way key task onboard computer fail potentially leading unintended acceleration showed little single bit one computer memory becoming zero vice make car run control failsafe code toyota put place enough stop software watching software barr testified software malfunction program app crashed supposed save day save day working barr testimony made case plaintiff resulting million damage bookout friend family according new york time first many similar case toyota bring trial problem electronic throttlecontrol system first time toyota found responsible jury accident involving unintended acceleration party decided settle case punitive damage could awarded toyota recalled million car paid nearly billion settlement fine related unintended accelerationthere bad day software important get better making nt software becomes sophisticated take control critical day could get worsethe problem programmer hard time keeping creation since way programmer work tool use changed remarkably little small growing chorus worry status quo unsustainable even good programmer struggling make sense system working say chris granger software developer worked lead microsoft visual studio ide cost year used nearly third professional programmer told microsoft arranged endtoend study visual studio one ever done month half watched behind oneway mirror people wrote code use tool think said sit computer touch mouse touch mouse thing dogma around actually tested empirically finding surprised visual studio one single largest piece software world said million line code one thing found study percent completely irrelevant work put thing missed fundamental problem people faced biggest one took away basically people playing computer inside head programmer like chess player trying play blindfold much mental energy spent trying picture piece hardly left think game itselfcomputers doubled power every month last year programming changed john resig noticing thing among student resig celebrated programmer wrote power half tech lead onlineeducation site khan academy early struggling site computerscience curriculum hard learn program essential problem seemed code abstract writing software like making bridge popsicle stick could see stick touch glue make program typed word wanted change behavior program game website simulation physic actually changed text student fact one survived could step text one instruction time head thinking way computer would trying keep track every intermediate calculation resig like granger started wonder way computer doubled power every month last year programming changed fact two thinking problem term time coincidence seen remarkable talk given group softwareengineering student montreal hotel computer researcher named bret victor talk went viral posted online february seemed making two bold claim first way make software fundamentally broken second victor knew fix itbret victor like write code sound weird say want make thing especially want create something software initial layer disgust push manipulating thing want make writing bunch text text editor pretty strong conviction wrong way thing victor mien david foster wallace lightning intelligence lingers beneath patina awshucks shyness year old trace gray thin undeliberate beard voice gentle mournful almost want share head get roll seem skip syllable though outrunning vocal machinerythough run lab study future computing seems le interested technology per se mind people use like good toolmaker way looking world equal part technical humane graduated top class california institute technology electrical engineering went grad school university california berkeley work company develops music synthesizer problem perfectly matched dual personality could spend much time thinking way performer make music way becomes extension could thinking mathematics digital signal processingby time gave talk made name one resig granger saw early victor finally landed upon principle seemed thread work actually called talk inventing principle principle creator need immediate connection creating problem programming violated principle software system hard think rife bug programmer staring page text abstracted whatever actually making current conception computer program said derived straight fortran algol late language designed punch card code take form letter screen language like c java derivative fortran algol instead stack card hole make le dead le indirectto victor idea people trying understand cancer staring text editor appallingthere analogy word processing used could see program writing document text change layout font margin write special control code command would tell computer instance part text italic trouble see effect code printed document hard predict going get imagine code going interpreted play computer headthen wysiwyg pronounced wizzywig came along stood see get marked passage italic letter tilted right screen wanted change margin could drag ruler top see effect change document thereby came feel like something real something could poke prod looking could tell done something wrong control sophisticated document layout formatting made accessible anyone could click around pagevictor point programming like idea people important work like designing adaptive cruisecontrol system trying understand cancer staring text editor appalling proper job programmer ensure someday tothere precedent enough suggest crazy idea photoshop instance put powerful imageprocessing algorithm hand people might even know algorithm complicated piece software complicated way good synth complicated knob button slider user learns play like instrument squarespace company perhaps best known advertising aggressively podcasts make tool let user build website pointing clicking instead writing code html cs powerful enough work would done professional web designerbut handful example overwhelming reality someone wanted something interesting computer write code victor something idealist saw much opportunity moral failing programmer large talk call armsat heart series demo tried show primitive available tool various design computer animation debugging better one might look like demo virtuosic one captured everyone imagination ironically enough one face trivial showed split screen game looked like mario one side code controlled victor changed code thing game world changed decreased one number strength gravity mario character floated increased another player speed mario raced across screensuppose wanted design level mario jumping bouncing turtle would make small passageway game programmer used solving kind problem two stage first stared code controlling high mario jumped fast ran bouncy turtle back made change text editor using imagination predict effect replay game see actually happened shadow marios move left half screen mouse drag slider right halfcusec vimeovictor wanted something immediate process time said referring mario path level want see change immediately map time space hit button showed mario right would every moment future curve shadow marios stretching far distance projected path reactive victor changed game parameter controlled quick drag mouse path shape changed like god seye view game whole problem reduced playing different parameter adjusting level stereo receiver got mario thread needle right interface almost working code manipulating game behavior directlywhen audience first saw action literally gasped knew looking kid game rather future industry software involved behavior unfolded complex way time victor shown imaginative enough could develop way see behavior change playing hand one programmer saw talk wrote later suddenly tool feel obsolete john resig saw inventing principle talk scrapped plan khan academy programming curriculum wanted site programming exercise work like victor demo lefthand side code right running program picture game simulation changed code instantly change picture environment truly responsive resig wrote approach completely change model student learns immediately see result intuit underlying system inherently work without ever following explicit explanation khan academy become perhaps largest computerprogramming class world million student average actively using program monthchris granger worked microsoft visual studio likewise inspired within day seeing video victor talk january built prototype new programming environment key capability would give instant feedback program behavior see system right next code controlled like taking blindfold granger called project light table april sought funding light table kickstarter programming circle sensation within month project raised idea spread notion liveness able see data flowing program instantly made way flagship programming tool offered google apple default language making new iphone mac apps called swift developed apple ground support environment called playground directly inspired light tablebut seeing impact talk ended bret victor disillusioned lot thing seemed like misinterpretation saying said later knew something wrong people began invite conference talk programming tool everyone thought interested programming environment said really interested people see understand put visual representation dynamic behavior although code increasingly become tool choice creating dynamic behavior remained one worst tool understanding point inventing principle show could mitigate problem making connection system behavior code immediate sure programming exist pair later talk stop drawing dead fish drawing dynamic visualization victor went one demoed two program first animator second scientist trying visualize took process used involve writing lot custom code reduced playing around wysiwyg interface victor suggested trick could pulled nearly every problem code written today sure programming exist told least software developer mind software developer proper role create tool removed need software developer would people urgent computational problem able grasp problem directly without intermediate muck codeof course get programmer board recent essay victor implored professional software developer stop pouring talent tool building apps like snapchat uber inconvenience daily life significant problem wrote instead focus scientist put people work actually matter critically matter using really really bad tool exciting work sort particular class tool modelbased design already underway wrote year programmer knew nothing really look hard industrial good got using company using nonindustrial stuff inside code eric bantégnie founder esterel technology owned ansys french company make tool building safetycritical software like victor bantégnie think engineer develop large system typing million line code ide nobody would build car hand say code still many place handicraft crafting manually line code okay system million line code like airbus million line code like tesla highend becoming complicated bantégnie company one pioneer industrial use modelbased design longer write code directly instead create kind flowchart describes rule program follow model computer generates code based rule making control system elevator instance one rule might door open someone press button lobby close door start moving car modelbased design tool represent rule small diagram though drawing logic whiteboard made box represent different door open moving door closed line define get one state diagram make system rule obvious looking see way get elevator moving close door way get door open stop people know code problem code quite photoshop beauty photoshop course picture manipulating screen final product modelbased design contrast picture screen like blueprint still making software way qualitatively different traditional programming traditional programming task take complex rule translate code energy spent translating rather thinking rule modelbased approach rule spend time thinking way focusing le machine problem trying get solve typically main problem software coder bantégnie say skill coder people know code problem code requirement kind natural language ambiguous requirement never extremely precise often understood differently guy supposed code view software becomes unruly medium describing software prose description drawing sheet different medium describing software namely code much lost going one idea behind modelbased design close gap model used system designer express want computer automatically generate codeof course approach succeed much work done well project even begin someone first build tool developing model natural feel like note drawing make still unambiguous enough computer understand make program turn model real code finally prove generated code always supposed benefited fortunately year initial background work bantégnie saysesterel technology acquired ansys grew research begun french nuclear aerospace industry worried safetycritical code ballooned complexity getting harder harder keep free bug started say emmanuel ledinot head scientific study dassault aviation french manufacturer fighter jet business aircraft time working military avionics system people charge integrating system debugging noticed number bug increasing seen surge number onboard computer plane instead single flight computer dozen responsible highly specialized task related control navigation communication coordinating system fly plane data poured sensor pilot entered command required symphony perfectly timed reaction handling hundred even thousand possible event right order right time ledinot say diagnosed main cause bug inflation ledinot decided writing convoluted code hand longer sustainable hard understand almost impossible verify would work correctly went looking something new must understand change tool extremely expensive process like said talk take type decision unless back wall programmer like code least understand ithe began collaborating gerard berry computer scientist inria french computingresearch center tool called portmanteau french realtime idea behind esterel traditional programming language might good describing simple procedure happened predetermined tried use system lot event could happen nearly time nearly cockpit inevitably got mess mess control software dangerous paper berry went far predict lowlevel programming technique remain acceptable large safetycritical program since make behavior understanding analysis almost impracticable esterel designed make computer handle complexity promise modelbased approach instead writing normal programming code created model system case model focused individual event handled prioritize event event depended others model becomes detailed blueprint computer would use actual programmingledinot berry worked nearly year get esterel point could used production first operational softwaremodeling environment automatic code generation ledinot told first embedded module rafale combat aircraft today ansys scade product family safetycritical application development environment used generate code company aerospace defense industry nuclear power plant transit system heavy industry medical device initial dream scadegenerated code every plane world bantégnie founder esterel technology say far objective nearly safetycritical code airbus including system controlling plane flight surface generated ansys scade productspart draw customer especially aviation possible build highly reliable software hand herculean effort ravi shivappa vp group software engineering meggitt plc ansys customer build component airplane like pneumatic fire detector engine explains traditional project begin massive requirement document english specifies everything software requirement might something like pressure section rise threshold open safety valve unless manualoverride switch turned problem describing requirement way implement code painstakingly check one satisfied customer change requirement code changed tested extensively make sure nothing else broken processthe cost compounded exacting regulatory standard faa fanatical software safety agency mandate every requirement piece safetycritical software traceable line code implement vice versa every time line code change must retraced corresponding requirement design document must able demonstrate code actually satisfies requirement idea something go wrong able figure practice brings order accountability large codebases shivappa say laborintensive process estimate used modelbased design twoyearlong project two three month spent writing rest spent working documentationwe already know make complex software reliable many place choosing toas bantégnie explains beauty computer turn requirement code rather human fact mathematically generated code actually satisfies requirement much benefit modelbased approach come able add requirement fly still ensuring existing one met every change computer verify program still work free tweak blueprint without fear introducing new bug code faa parlance correct construction still software even safetyobsessed world aviation made oldfashioned way engineer writing requirement prose programmer coding programming language like c bret victor made clear essay modelbased design relatively unusual lot people faa think code generation magic hence call greater scrutiny shivappa told memost programmer feel way like code least understand tool write code verify correctness using mathematics finitestate machine recurrent system sound esoteric hard use good trueit pattern played whenever programming taken step away writing literal one zero loudest objection come programmer margaret hamilton celebrated software engineer apollo fact coiner phrase software engineering first year draper lab mit remembers meeting one faction fighting transitioning away low machine language close one zero could get assembly language people lowest level fighting keep argument similar well know assembly language going right guy one side face got red started screaming said said amazed emotional got could testing wanted never find bugsemmanuel ledinot dassault aviation pointed assembly language phased favor programming language still popular today like c assembly programmer skeptical time wonder said people easily transitioning modelbased software development perceive another opportunity lose control even already bias modelbased design sometimes known modeldriven engineering mde fact ingrained according recent paper even argue stronger need investigate people perception mde research new mde technology sound almost like joke proponent modelbased approach important point already know make complex software reliable many place choosing chris newcombe working amazon almost seven year risen principal engineer worked company critical system including retailproduct catalog infrastructure managed every kindle device world leader highly prized amazon web service team maintains cloud server web biggest property like netflix pinterest reddit amazon helped build backbone steam world largest onlinegaming service one engineer whose work quietly keep internet running product worked considered massive success could think buried deep design system disaster waiting happen human intuition poor estimating true probability supposedly extremely rare combination event system operating scale million request per second wrote paper human fallibility mean subtle dangerous bug turn error design code faithfully implement intended design design fails correctly handle particular rare scenario newcombe convinced algorithm behind truly critical storing significant portion web data good perfect single subtle bug could catastrophic knew hard bug find especially algorithm grew complex could testing wanted never find programmer write even rough sketch program start coding intrigued appendix paper reading came across strange mixture math looked like described algorithm something called tla surprising part description said mathematically precise algorithm written tla could principle proven correct practice allowed create realistic model problem test thoroughly exhaustively exactly looking language writing perfect algorithmstla stand temporal logic action similar spirit modelbased design language writing call specification computer program specification completely verified computer write code write concise outline program logic along constraint need satisfy say programming atm constraint might never withdraw money twice checking account tla exhaustively check logic fact satisfy constraint show exactly could violatedthe language invented leslie lamport turing computer scientist big white beard scruffy white hair kind eye behind large glass lamport look like might one friendlier professor american hogwarts microsoft research known one pioneer theory distributed system describes computer system made multiple part communicate lamport work laid foundation many system power modern webfor lamport major reason today software full bug programmer jump straight writing code architect draw detailed plan brick laid nail hammered wrote article programmer write even rough sketch program start coding programmer drawn nittygritty coding code make program go spending time anything else seem like distraction patient joy meditative kind satisfaction puzzling micromechanics code code lamport argues never meant medium thought really constrain ability think thinking term programming language say code make miss forest tree draw attention working individual piece rather bigger picture program fit together supposed whether actually think lamport created tla modelbased design tla draw focus highlevel structure system essential logic rather code implement itnewcombe colleague amazon would go use tla find subtle critical bug major system including bug core algorithm behind regarded perhaps reliable storage engine world used widely company tiny universe people ever used tla success unusual intern microsoft used tla catch bug could caused every xbox world crash four hour use engineer european space agency used rewrite time le code operating system probe first ever land softly comet intel us regularly verify chipsbut tla occupies small far corner mainstream said take space even seasoned engineer like newcombe language read first bizarre zoo symbol lamport failure education though programming born mathematics since largely divorced programmer fluent kind set theory need work tla including teacher basic concept applied practice seem think need code lamport say idea higher level code need able think precisely mathematics actually allows think precisely completely foreign never learned hope people allowed write program understand simple thing lamport see failure think mathematically problem modern software development nutshell stake keep rising programmer stepping developed chop required handle increasingly complex problem century said people used build cathedral without knowing calculus nowadays think allow anyone build cathedral without knowing calculus would hope suitably long period time people allowed write program understand simple thing newcombe sure programmer blame heard leslie think programmer afraid math found programmer math help handle complexity complexity biggest challenge programmer real problem getting people use tla said convincing waste time programmer specie relentlessly pragmatic tool like tla reek ivory tower programmer encounter formal method called involve mathematical formally precise description program deepseated instinct recoilmost programmer took computer science college briefly encountered formal method usually demonstrated something trivial like program count zero student job mathematically prove program fact count zero needed change people perception formal method newcombe told even lamport seem fully grasp point formal method image problem way fix implore programmer change newcombe realized bring tool like tla programming mainstream start speaking languagefor one thing said introducing colleague amazon tla would avoid telling stood afraid name made seem unnecessarily forbidding temporal logic action exactly kind highfalutin ring play well academia put practicing programmer tried also use term formal verification proof reminded programmer tedious classroom exercise instead presented tla new kind pseudocode steppingstone real code allowed exhaustively test got thinking precisely early design process engineer think term debugging rather verification wrote titled internal talk subject fellow amazon engineer debugging design rather bemoan fact programmer see world code newcombe embraced knew lose otherwise bunch people say get newcombe saysthis code created level complexity entirely new made possible new kind failurehe since left amazon oracle able convince new colleague give tla try using tool matter responsibility need get better said selftaught coding since nine instinct start coding way thinking sketch something try something organically evolve view many programmer today still google look stack overflow popular website programmer answer technical question get snippet code solve tactical concern little function glue together iterate completely fine run smack real problem summer pair american security researcher charlie miller chris valasek convinced car manufacturer taking software flaw seriously enough demonstrated jeep cherokee could remotely controlled hacker took advantage fact car entertainment system cellular connection instance start car iphone connected central system like one control windshield wiper steering acceleration brake instance see guideline rearview screen respond turn wheel proof attack developed night weekend hacked miller car journalist driving highway made go haywire journalist knew coming panicked cut engine forcing slow crawl stretch road shoulder escape toalthough actually create one showed possible write clever piece software vehicle worm would use onboard computer hacked jeep cherokee scan hack others wanted could simultaneous access nationwide fleet vulnerable car suv least five fiat chrysler model affected including jeep cherokee one day could told say suddenly veer left cut engine high speed need think software differently valasek told car company long assembled final product part made hundred different supplier part purely mechanical often come million line code adaptive cruise control auto braking lane indeed made car safer safety feature jeep already saved countless time say miller also created level complexity entirely new made possible new kind failurein world selfdriving car software afterthought lot bug car gerard berry french researcher behind esterel said talk like avionics taken seriously admitted software different mechanic automotive industry perhaps among yet realized actually software business automaker industry regulator software safety know say michael barr software expert testified toyota case nhtsa say limited software expertise come mechanical history regulatory pressure made modelbased design code generation attractive aviation industry slower come car manufacturing emmanuel ledinot dassault aviation speculates might economic reason difference automaker simply afford increase price component even cent since multiplied many millionfold computer embedded car therefore slimmed bare minimum little room run code handtuned lean possible introducing modelbased software development think last decade costly one suspect incentive changing think autonomous car might push ledinot told iso autonomous car might slowly push adopt kind approach critical part iso safety standard car published barr said much thing world selfdriving car software afterthought built like today airlinereservation system system stocktrading system code put charge hundred million life road work small task computing fundamentally invisible gerard berry said talk tire flat look tire flat software broken look software see nothing big problem article originally stated million way toyota camry cause unintended acceleration regret error james somers former contributing editor atlantic
733,Lobsters,formalmethods,CSE-Formal methods,Eiffel: Programming for Reusability and Extendability (1987),http://se.ethz.ch/~meyer/publications/acm/eiffel_sigplan.pdf,eiffel programming reusability extendability,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj type catalog page r viewerpreferences displaydoctitle true metadata r endobj obj filter flatedecode length r stream bp c u endstream endobj obj endobj obj type page mediabox parent r resource font r r r r r r xobject r procset r content r r r r r r r r cropbox rotate thumb r endobj obj type font subtype truetype name basefont timesnewroman encoding winansiencoding endobj obj type font subtype truetype name basefont timesnewroman bold encoding winansiencoding endobj obj endobj obj filter flatedecode length r stream h endstream endobj obj endobj obj filter flatedecode length r stream z b x bz ȵβw endstream endobj obj endobj obj type font subtype truetype name basefont timesnewroman italic encoding winansiencoding endobj obj filter flatedecode length r stream z e ƽu endstream endobj obj endobj obj filter flatedecode length r stream n endstream endobj obj endobj obj type font subtype truetype name basefont couriernew encoding winansiencoding endobj obj filter flatedecode length r stream b
735,Lobsters,formalmethods,CSE-Formal methods,Déjà Fu : A Concurrency Testing Library for Haskell,https://www.barrucadu.co.uk/publications/YCS-2016-503.pdf,déjà fu concurrency testing library haskell,,obj length filter flatedecode stream l gm 宽h qf endstream endobj obj length filter flatedecode stream x gxҕyek z پvd
736,Lobsters,formalmethods,CSE-Formal methods,Verified cryptography for Firefox 57,https://blog.mozilla.org/security/2017/09/13/verified-cryptography-firefox-57/,verified cryptography firefox,cf memory safety error sidechannels leak inria project everest hacl cryptographic library n verified cryptographic primitive landed firefox nightly,traditionally software produced way write code maybe code review run unittests hope correct hard experience show hard programmer write bugfree software bug sometimes caught manual testing many bug still exposed user must fixed patch subsequent version work software great way write cryptographic software user expect deserve assurance code providing security privacy well written bug free even innocuous looking bug cryptographic primitive break security property overall system threaten user security unfortunately bug uncommon last year popular cryptographic library issued dozen cf bug core cryptographic primitive incorrect use primitive bug include many memory safety error sidechannels leak correctness error example bignum arithmetic fortunately recent advance formal verification allow u significantly improve situation building high assurance implementation cryptographic algorithm implementation still written hand automatically analyzed compile time ensure free broad class bug result much higher confidence implementation correct respect secure programming rule would usually difficult enforce hand exciting development mozilla partnered inria project everest microsoft research cmu inria bring component formally verified hacl cryptographic library n security engine power firefox believe first major web browser formally verified cryptographic primitive first result collaboration implementation key establishment algorithm landed firefox nightly widely used keyexchange tl recently standardized ietf additional bonus besides formally verified hacl implementation also almost faster bit platform existing n implementation scalar multiplication per second instead represents improvement security performance user expect ship new code part november firefox release next month working incorporate hacl algorithm n also say detail hacl verification work get integrated n benjamin beurdouche franziskus kiefer tim taubert
737,Lobsters,formalmethods,CSE-Formal methods,A self-amending cryptographic ledger built in OCaml,https://git.io/v5iiy,selfamending cryptographic ledger built ocaml,join github today sign file permalink tezos mirror http gitlabcomtezostezos topic resource reload reload,mirror release branch tezos selfamending cryptographic ledger dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time tezos mirror release branch tezos main repository may found http gitlabcomtezostezos issue pr directed mirror release branch tezos selfamending cryptographic ledger topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
738,Lobsters,formalmethods,CSE-Formal methods,Larch: Languages and Tools for Formal Specification (1993),https://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/LarchBook.pdf,larch language tool formal specification,,obj endobj xref n n n n n n n n n n trailer startxref eof obj stream
739,Lobsters,formalmethods,CSE-Formal methods,Toward Certification for Free: Correct-by-Construction ML Oracles with Polymorphic LCF Style,https://hal.archives-ouvertes.fr/hal-01558252/document,toward certification free correctbyconstruction ml oracle polymorphic lcf style,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream
740,Lobsters,formalmethods,CSE-Formal methods,"Hoare Type Theory, Polymorphism and Separation",http://ynot.cs.harvard.edu/papers/jfpsep07.pdf,hoare type theory polymorphism separation,,obj stream v lm zl w u z n q tk vp e f lkm hŭ iu w oo gt
741,Lobsters,formalmethods,CSE-Formal methods,Proofs of correctness of the TLS handshake merged to s2n,https://github.com/awslabs/s2n/pull/565,proof correctness tl handshake merged,http,would possible nt dhanon support good reason course keyexchangeephemeral keyexchangenonephemeral false key exchange method actually use keyexchangenonephemeral rfcderived state machine use keyexchangeephemeral relating rfclevel parameter abstracted connection struct http actually previously implemented like rewrite proposing caused proof error admitted dhanon key exchange connectionparameters relation rfc state machine path diverge due however could reduce complexity dropping keyexchangeephemeral rewrite connectionparameters relation use keyexchangenonephemeral explicitly preclude dhanon eg something like following relation struct parameter connectionparameters connection parameter bit connectionparameters conn params connservercansendocsp paramssendcertificatestatus connkeyexchangeeph keyexchangenonephemeral params paramskeyexchange dhanon connkeyexchangeeph keyexchangenonephemeral params conniscachingenabled connresumefromcache paramssessionticket paramsincludesessionticket server issue ticket time paramsrenewsessionticket server issue ticket time connclientauthflag paramsrequestclientcert investigate whether work get back alternatively could change comment better reflect intended semantics
743,Lobsters,formalmethods,CSE-Formal methods,"Writing a Formally-Verified, Image Browser in Coq",http://www.michaelburge.us/2017/08/25/writing-a-formally-verified-porn-browser-in-coq.html,writing formallyverified image browser coq,definition implementation theorem proof general github closed open emptyiniff github haskell server conclusion github software foundation,uncommon use formal verification developing software people unfamiliar tool technique assume specialized use article show write simple image browser core data structure operation formally verified using coq theorem prover haskell web server handle http request htmlcssjavascript frontend definition going make image browser unspoken truth large image database people actually porn collection honest call porn browser coqverified data structure operation haskell use later respond http request specifically need ability add new image database get sorted list image date added category delete image add category image remove category image add category major type require import ascii coq require import setsensembles narithbinnat zarithint fsetsfmapavl fsetsfsetavl structuresordersex structuresordersalt listslist stringsstring module nasot backportot nasot module fmapavlmake nasot module fsetavlmake nasot record image set mkimage id n filename string timestamp n definition imageid n definition categoryid n definition index st record imagedb mkdb image mt image index mt index nextid imageid fmapavl fsetavl finite map set implemented using avl tree database map image id image map category id set image id increasing id column incremented every new addition look like coq developer currently refactoring equivalent haskell ord typeclass use backportot nasot generate older interface newer one haskell equivalent import qualified datamap import qualified dataset type imageid integer type categoryid integer data image image imageid imageid filename string timestamp integer type index sset imageid data imagedb imagedb image mmap imageid image index mmap categoryid index nextid imageid eventually going generate haskell formallyverified coq implementation generated haskell data type extraction language haskell extraction image extraction index extraction imagedb print extraction image data image mkimage n preludestring n extraction index type z data n type type index extraction imagedb type key n data tree elt leaf node tree elt key elt tree elt type bst elt tree elt type elt bst elt data imagedb mkimagedb image index imageid essentially simple tree type hidden behind alias also get bunch function manipulating tree left haskell code using custom function manipulate type formallyverified function anyways spec type using axiom command axiom newdb imagedb axiom createimage forall db imagedb img image imagedb axiom findcategories forall db imagedb category list categoryid list image axiom deleteimage forall db imagedb img imageid imagedb axiom tagimage forall db imagedb img imageid cat categoryid imagedb axiom untagimage forall db imagedb img imageid cat categoryid imagedb similar using undefined haskell placeholder fact pretty much extraction command generates newdb imagedb createimage imagedb image imagedb findcategories imagedb list categoryid list image deleteimage imagedb imageid imagedb tagimage imagedb imageid categoryid imagedb untagimage imagedb imageid categoryid imagedb newdb preludeerror axiom realized createimage preludeerror axiom realized findcategories preludeerror axiom realized deleteimage preludeerror axiom realized tagimage preludeerror axiom realized untagimage preludeerror axiom realized haskell next step would jump right implementation coq think moment invariant hold new database image axiom numimages forall db imagedb n axiom countemptydb numimages newdb nzero countemptydb invariant numimages helper function define later whenever add image database number image increase axiom sizeincreases forall db imagedb img image numimages createimage db img nsucc numimages db delete image either image database count image decrease count stay axiom memimage forall db imagedb img imageid bool axiom sizedecreases forall db imagedb img imageid istrue memimage db img nsucc numimages deleteimage db img numimages db istrue memimage db img numimages deleteimage db img numimages db tag untag image number image stay axiom sizenochange forall db imagedb img imageid cat categoryid numimages tagimage db img cat numimages db numimages untagimage db img cat numimages db think others enough demonstrate technique implementation implementation order definition newdb mkdb mempty image mempty index nzero definition newdb image mempty image index mempty index nextid nzero definition createimage db imagedb img image let newimg id nextid db filename filename img timestamp timestamp img image madd nextid db newimg image db index index db nextid nsucc nextid db test compute command compute createimage newdb mkimage testing print image mthis mrawnode mrawleaf image n id filename testing timestamp mrawleaf image z misbst mrawproofsaddbst n id filename testing timestamp mrawproofsemptybst image index mthis mrawleaf index misbst mrawproofsemptybst smsett nextid n imagedb look scarier showing u gut binary search tree make haskell us fromlist show instance hide createimage newdb mkimage testing print mkimage image fromlist image testing index fromlist nextid fixpoint setfromlist x list n index foldright sadd sempty x fixpoint listfromset x index list n sfold con x nil fixpoint findcategoryids db imagedb cat categoryid index match mfind cat index db none sempty x x end fixpoint findcategoriesids db imagedb category list categoryid index match category nil setfromlist map fst melements image db con cat cat sinter findcategoryids db cat findcategoriesids db cat end fixpoint findimgs db imagedb imgs list imageid match imgs nil nil con match mfind image db none findimgs db img con img findimgs db end end fixpoint findcategories db imagedb category list categoryid list image findimgs db listfromset findcategoriesids db category haskell let binding toplevel definition recursive default coq explicitly mark function fixpoint allow recursion fixpoint deleteimage db imagedb img imageid imagedb image mremove img image db index mmap sremove img index db nextid nextid db fixpoint tagimage db imagedb img imageid cat categoryid imagedb let idxs match mfind cat index db none madd cat ssingleton img index db idx madd cat sadd img idx index db end image image db index idxs nextid nextid db fixpoint untagimage db imagedb img imageid cat categoryid imagedb let idxs match mfind cat index db none index db idx madd cat sremove img idx index db end image image db index idxs nextid nextid db theorem almost ready prove theorem let implement helper function deferred fixpoint numimages db imagedb nat mcardinal image db fixpoint memimage db imagedb img imageid bool mmem img image db first theorem calculation theorem countemptydb numimages newdb lot proof consist sequence imperative mutation proof context mutation called tactic use tool like proof general step tactic see change proof context add annotation tactic showing proof context proof subgoal subgoal id numimages newdb compute subgoal subgoal id tauto subgoals qed start statement trying prove goal theorem proved remaining goal reduce lefthand side using compute goal becomes tautology taut tactic complete difficult right followup one involved enough leave detailed proof github might curious coq let u extract code haskell exactly theorem convert answer extraction countemptydb countemptydb countemptydb haskell type system powerful enough handle theorem proving roughly thing extracted living breathing computer code lie coq set world theorem proof coq prop classic tripup beginner bool v prop bool decidably true false bool extracted eventually going live system heap bool bitstring representation prop statement intuitionist logic classical logic know proposition p p p actually add axiom coq fundamentally constructive excluded possibility p mean physically instantiate bitstring representing specific p memory somewhere inductive type like bool closed constructor true false excluded true know false proposition open world conclude positive bunch negative let try next one theorem sizeincreases forall db imagedb img image numimages createimage db img numimages db theorem actually false function safe anyone call mkimagedb nextid overlap existing image calling createimage would overwrite numimages change se need specify theorem hold internallyconsistent database operation preserve property consistency check nextid exist image map definition internallyconsistent db imagedb forall someid imageid min someid image db nlt someid nextid db prove newdb internally consistent using emptyiniff require import coqfsetsfmapfacts earlier module fmapavlmake nasot module mf fact theorem internallyconsistent newdb proof intro intro rewrite mfemptyiniff h contradiction qed import proposition like emptyiniff relating finite map using fact functor applied fmapavl implementation instantiated earlier easy internallyconsistent property index image map newdb map empty statement vacuously true pick one interesting one moving theorem forall db imagedb img image internallyconsistent db internallyconsistent createimage db img proof intro intro intro simpl apply nltsuccr simpl apply mfaddiniff destruct apply nlelteq right symmetry apply apply h apply nlelteq left apply qed idea proof word mfaddiniff say add element map element new map either already map key one added already map internallyconsistent hypothesis already applies otherwise key added exactly nextid definition internallyconsistent give nextid db succ nextid db increment createimage full proof theorem github repository haskell server coq allows u map inductive type directly haskell builtin module string include example list option also coq require import extractionextrhaskellstring extractionextrhaskellnatinteger extractionextrhaskellnatnum extract inductive list extract inductive option preludemaybe preludejust preludenothing extraction language haskell extraction database database set extraction option run extraction command end databasehs file imported haskell code routing part web server import networkwai w import networkwaihandlerwarp pvport dbfile imagesdb collectiondir image data serverstate serverstate statedb tvar dbimagedb statecategories tvar mmap string dbn type paget state serverstate req request respond response io responsereceived io responsereceived type page paget main io main state initialize run pvport req respond let state state req req respond respond putstrln show req case pathinfo req requestmethod req get pageindex static x get pagestatic tunpack tintercalate x image imageid get pageimage paramn imageid api listcategories get pagelistcategories api listimages get pagelistimages api tagimage imageid catname post pagetagimage paramn imageid catname api untagimage imageid catname post pageuntagimage paramn imageid catname respond wresponselbs fragment javascript interacting api let mkfuncs function funcs return fetchjson function uri option onfetch windowfetch uri option function response responseok consolelog error response return responsejson onfetch tagimage function imageid cat ontag funcsfetchjson apitagimage imageid cat method post ontag untagimage function imageid cat onuntag funcsfetchjson apiuntagimage imageid cat method post onuntag haskell let binding creates group mutuallyrecursive function javascript combinator unroll time whatever maximum stack depth want let funcs funcs mkfuncs funcs funcs mkfuncs funcs funcs mkfuncs funcs funcs mkfuncs funcs conclusion hopefully example show nothing really stopping anyone using coq haskell program today see full repository github future coqrelated article may cover overview common tactic technique used proof defining custom ltac command automate proof writing robust coqhaskell compatibility layer proving mathematical theorem using coq implementing compiler cryptographic primitive coq using ghcjs resulting haskell get formallyverified javascript future formal verification article may cover using liquid haskell add lightweight proof existing haskell code using idris develop eg bitcoin exchange using randomized testing cheap substitute formal proof interested trying coq recommend starting benjamin pierce book software foundation
744,Lobsters,formalmethods,CSE-Formal methods,Who Guards the Guards?: Formal Validation of the Arm v8-M Architecture Specification,https://alastairreid.github.io/papers/oopsla2017-whoguardstheguards.pdf,guard guard formal validation arm architecture specification,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream w endstream endobj obj length filter flatedecode stream endstream endobj obj length filter flatedecode stream ĳ j km endstream endobj obj length filter flatedecode stream n q h bn l p k h q k z endstream endobj obj length filter flatedecode stream ϱ rwb w h w ebb w ą endstream endobj obj type objstm n first length filter flatedecode stream ecy fr nq mr c b endstream endobj obj length filter flatedecode stream n uk ʑ ú
745,Lobsters,formalmethods,CSE-Formal methods,Abusing Haskell dependent types to make Redis queues safer,https://medium.com/@zyxoas/abusing-haskell-dependent-types-to-make-redis-queues-safer-cc31db943b6c,abusing haskell dependent type make redis queue safer,datakinds singleton symbol one string actually entire type symbolval char x,wish associate appidqueuetype pair queue name also type ultimately would like ghc would reject code try put wrong type wrong queuethat wish create mapping two data type message payload type haskell write mapping use typefamiliesnow get point article need somehow write function data constructor value type vanilla haskell data type live totally disjoint universe interactin modern ghc happens way cake eat promote data constructor value level type level using datakinds extension data type used new kind constructor used type constructorsmanufacturing type thin air create two new universe type kind using syntax use declare data type declare type family map pair type concrete type note overloading syntax create kind signature ability implicitly enabled datakinds extension instead usual type signaturestype also called although poor ghc parser sometimes get confused symbol start funky stuff special kind since type constructor kind inhabited type char kind type occupied value c creating two new kind appid queuetype type type value sound completely useless immensely powerfulwe associate type combination appids queuetypes fizzbuzz take number produce text practice instance may declared disparate module use open type family declaration family note use prime mark type name strictly necessary help u visually distinguish using example doer value type happens ever use regular data type anywaynow let wire type sendmessage receivemessage function better typed leave implementation blank make api typedriven essentially write typelevel program telling ghc appid queuetype tell ghc find type c c equal associatedqueuetype b ghc eventually find relevant associatedqueuetype instance figure result type directing ghc type constrained solver declaring property type want compile time ghc tell u make constraint work together code badly typed need enable explicitforall allow u write kind signature also need enable scarysounding allowambiguoustypes without latter extension enabled get strange error look like ghc helpfully tell u heuristic ambiguous type error pop u declare type variable associated parameter result left final haskell type resolution twosided one side push certain type pull another type program typechecks side made agree unified furiously waving hand actually foggiest inkling type resolution work ghcin case ghc rightly worried since parameter result type b function definition way u specify vanilla call site side equation providing explicit parameter concrete type using type annotation pull type wantby enabling allowambiguoustypes tell ghc know issue found compiler making program whole le typesafeat call site cake eat resolve ambiguity make message passing typedriven utilising typeapplications extension since b type variable exist invisible caller make visible typeallications visibility override behold admit badass syntax right therenow ghc know b type variable instantiated typechecking continue since ambiguity rectified note also need explicit type annotation message anymore call fully typedriven get back implementation hedis library unsophisticated merely want queue name happily push pop bytestrings much want need provide queue namewe issue obviously want appqueue type combination queue name ultimately need somehow map pair type say doer inputqueue string queue name recall old getqueuename simply used show instance data type api ever want use data constructor since would duplicating data data constructor type application jump directly one would need singleton even guy wrote library admits ugly terrible modern ghc bit hack use though automatically convert dataconstructorcumpromotedtypeconstructor string associate symbol typelevel string ghc convert symbol regular string quickly convert bytestrings dark blink might almost miss symbol kind whose resident unoccupied type resident symbol look awful lot like regular haskell string one string actually entire type ghc magically produce u unlike data kind symbol kind finite closed universe type way somebody know use th really write library automatically create typelevel show function data magic end ghc also allows u convert symbol actual valuelevel string using symbolval function write dependentlytyped version getqueuename seriously magicnote using tos protolude automatically convert string bytestring let say think type symbolval ugly proxy type serve make type visible like typeapplications guess writer want force user enable typeapplications use function added essentially dummy parameter also knownsymbol constraint feel ickynow write two api function properly icky knownsymbol constraint infecting everything accidentally write msg qmessage char receivemessage doer inputqueue listener sendmessage doer inputqueue qmessage xin sender compiletime ghc complain expecting int getting char instead like wanted along confused letter completeness full dependentlytyped code
747,Lobsters,formalmethods,CSE-Formal methods,Design and Implementing the OP and OP2 Web Browsers (2011),https://pdfs.semanticscholar.org/832a/911f97b500cd2df468018637e1d22c9c5572.pdf,design implementing op web browser,,colluding browser extension attack user privacy implication web browsersa saini gaur conticomput
748,Lobsters,formalmethods,CSE-Formal methods,HALO - Haskell to Logic through Denotational Semantics,http://research.microsoft.com/en-us/um/people/simonpj/papers/verify/hcc-popl.pdf,halo haskell logic denotational semantics,,obj goto endobj obj introduction endobj obj goto endobj obj higherorder lazy language contract endobj obj goto endobj obj syntax halo endobj obj goto endobj obj contract endobj obj goto endobj obj translating halo firstorder logic endobj obj goto endobj obj fol language endobj obj goto endobj obj translation expression fol endobj obj goto endobj obj translating higherorder function endobj obj goto endobj obj data type case expression endobj obj goto endobj obj translation contract fol endobj obj goto endobj obj crashfreedom endobj obj goto endobj obj summary endobj obj goto endobj obj soundness denotational semantics endobj obj goto endobj obj technical preliminary endobj obj goto endobj obj denotational semantics expression program endobj obj goto endobj obj denotational semantics contract endobj obj goto endobj obj soundness logic translation endobj obj goto endobj obj contract checking satisfiability endobj obj goto endobj obj induction endobj obj goto endobj obj implementation practical experience endobj obj goto endobj obj expressing contract haskell endobj obj goto endobj obj practical consideration endobj obj goto endobj obj dependent contract endobj obj goto endobj obj higher order function endobj obj goto endobj obj experimental result endobj obj goto endobj obj discussion endobj obj goto endobj obj related work endobj obj goto endobj obj conclusion future work endobj obj goto r fit endobj obj length filter flatedecode stream xڽ ʒ aoz e ߒ j r ǻ qk r zz щ ar b r l f bb k uq sb bd endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto citenorell thesis endobj obj type annot subtype link border hic rect goto citenorell thesis endobj obj type annot subtype link border hic rect goto citefstar endobj obj type annot subtype link border hic rect goto citefstar endobj obj type annot subtype link border hic rect goto citefstar endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citeknowles sage endobj obj type annot subtype link border hic rect goto citeknowles sage endobj obj type annot subtype link border hic rect goto citeknowles sage endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citeknowles sage endobj obj type annot subtype link border hic rect goto citeknowles sage endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citevampire endobj obj type annot subtype link border hic rect goto citevampire endobj obj type annot subtype link border hic rect goto citeparadox endobj obj type annot subtype link border hic rect goto citeparadox endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citexu contract endobj obj type annot subtype link border hic rect goto citexu contract endobj obj type annot subtype link border hic rect goto citexu contract endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r procset pdf text endobj obj length filter flatedecode stream q f kϲ ph u l h wt da v c b l q ư xqh w f j 䖒 w b 脶g p ݑ u endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto citexu contract endobj obj type annot subtype link border hic rect goto citexu contract endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream th q ݯ 墻 zc ǻ b ѐ g x 㾤 cȕ e rr tap 萯 b iepp q 䙊 vfu pb b e w c g 錕 q c wsċ uϯ endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream e pa h p խ dь ĉ q p e x u x ţh xt j fb xt r mm x va lv mib n v g f xw x l v gʷ g endstream endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj type annot subtype link border hic rect goto endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj r xyz null endobj obj font r r r r r r r r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream j qx q z w su vf ft f
750,Lobsters,formalmethods,CSE-Formal methods,Verifying Security Invariants in ExpressOS (2013),https://haohuim.appspot.com/static/pubs/expressos-asplos13-slides.pdf,verifying security invariant expressos,,obj length r filter flatedecode stream jܟ n f k nt f v h j ov p ѿv vv ڸ w n u j x c g ŧu hld l r ӽb cvߺ k qfqy yocnt e p ad sl f gr q wi endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf text colorspace r r r r r extgstate r r font r r xobject r endobj obj length r filter flatedecode type xobject subtype form formtype bbox resource r group transparency c r true k false stream xtt endstream endobj obj endobj obj procset pdf xobject r r endobj obj length r filter flatedecode type xobject subtype form formtype bbox resource r group transparency c r true k false stream n xc fk r pq ݑnu㑬 l g k z g ng xvsrm ieq lv ʒx e ƨ e l x wfrf 뫨 n qh u ơ endstream endobj obj endobj obj procset pdf imageb imagec imagei colorspace r extgstate r r r r r xobject r r r r r r r pattern r endobj obj length r filter flatedecode type xobject subtype form formtype bbox resource r group transparency c r true k false stream endstream endobj obj endobj obj procset pdf imageb imagec imagei xobject r endobj obj length r filter flatedecode type xobject subtype form formtype bbox resource r group transparency c r true k false stream xtt endstream endobj obj endobj obj procset pdf pattern r endobj obj length r filter flatedecode type xobject subtype form formtype bbox resource r group transparency c r true k false stream endstream endobj obj endobj obj procset pdf pattern r endobj obj length r filter flatedecode type xobject subtype form formtype bbox resource r group transparency c r true k false stream x ن
751,Lobsters,formalmethods,CSE-Formal methods,"Verifying an I/O-concurrent, File System (2017)",https://dspace.mit.edu/bitstream/handle/1721.1/108986/986497806-MIT.pdf?sequence=1,verifying ioconcurrent file system,,âãïó obj stream hþdìñ â æ ý endstream endobj obj stream fò è z x x x se endstream endobj obj stream kx jtr µmù tþý ílòíõ çh endstream endobj obj stream úháèd øøè ê æ endstream endobj obj stream ò cí
752,Lobsters,formalmethods,CSE-Formal methods,Extending Safe C Support in Leon (2017),https://infoscience.epfl.ch/record/227942/files/Extending%20Safe%20C%20Support%20In%20Leon.pdf,extending safe c support leon,,obj length filter flatedecode stream u 큊 e endstream endobj obj type objstm n first length filter flatedecode stream
753,Lobsters,formalmethods,CSE-Formal methods,Using Coq to Write Fast and Correct Haskell,https://www.cs.purdue.edu/homes/bendy/Fiat/FiatByteString.pdf,using coq write fast correct haskell,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream c yr endstream endobj obj annots r r r r r r r r r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r rotate type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text xobject r subtype form type xobject length stream endobj obj bbox filter flatedecode formtype group r ptexfilename srvconfpubtexacmartifactsavailablepdf ptexinfodict r ptexpagenumber resource extgstate ca ca subtype form type xobject length stream c
754,Lobsters,formalmethods,CSE-Formal methods,Formal verification of the WireGuard protocol,https://www.wireguard.io/formal-verification/,formal verification wireguard protocol,formal verification symbolic verification protocol using tamarin wireguard protocol technical paper noise tamarin read wireguard tamarin verification paper tamarin model tamarin graphviz maude computational proof protocol eck model read wireguard computational eck model proof paper computational proof protocol acce model cryptoverif available download read wireguard computational acce proof paper symbolic verification protocol using proverif noise explorer noise protocol proverif noise explorer model ik read noise explorer paper verified c implementation hacl hacl f kremlin read hacl paper fiatcrypto fiatcrypto coq read fiatcrypto paper,formal verification wireguard undergone sort formal verification covering aspect cryptography protocol implementation detail various effort symbolic verification protocol using tamarin wireguard protocol described technical paper based noise formally verified symbolic model using tamarin mean security proof wireguard protocol protocol verified posse following security property correctness strong key agreement authenticity keycompromise impersonation resistance unknown keyshare attack resistance key secrecy forward secrecy session uniqueness identity hiding joint work jason donenfeld kevin milner result extensively discussed wireguard formal verification paper paper draft work progress main result read wireguard tamarin verification paper tamarin model tamarin model open source rerun independent verification git clone http cd wireguardtamarin make requires tamarin graphviz maude computational proof protocol eck model attempting construct computational proof wireguard eck model turn wireguard protocol fit cleanly traditional eck model key confirmation message part transport layer paper instead prof variant wireguard protocol morally equivalant actual protocol producing strong result joint work benjamin dowling kenneth g paterson read wireguard computational eck model proof paper computational proof protocol acce model thesis construct mechanised cryptographic proof entire wireguard protocol including transport data message accelike computational model using cryptoverif property proved correctness message secrecy forward secrecy mutual authentication keycompromise impersonation resistance unknown keyshare attack resistance replay resistance first protocol message model available download may used cryptoverif work benjamin lipp read wireguard computational acce proof paper symbolic verification protocol using proverif noise explorer project seek formally verify noise protocol pattern generating proverif model model relevant wireguard noise explorer model ik may plugged proverif generate proof various property work nadim kobeissi karthikeyan bhargavan read noise explorer paper verified c implementation hacl wireguard make use hacl scalar multiplication implementation curve specified f able prove thing implementation strategy kremlin lower verified c hacl joint work jean karim karthikeyan bhargavan jonathan protzenko benjamin beurdouche read hacl paper fiatcrypto wireguard also make use fiatcrypto scalar multiplication implementation curve specified coq able prove thing implementation strategy emit verified c fiatcrypto joint work andres erbsen jade philipoom jason gross robert sloan adam chlipala read fiatcrypto paper
756,Lobsters,formalmethods,CSE-Formal methods,A Tale of Two Provers,https://nikivazou.github.io/static/Haskell17/a-tale.pdf,tale two provers,,obj length filter flatedecode stream
757,Lobsters,formalmethods,CSE-Formal methods,Industrial Hardware and Software Verification with ACL2,http://www.cs.utexas.edu/users/moore/publications/rs-verif-draft-5.pdf,industrial hardware software verification,,obj stream k ϝ
758,Lobsters,formalmethods,CSE-Formal methods,Safe to the Last Instruction: Automated Verification of a Type-Safe Operating System,https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/pldi117-yang.pdf,safe last instruction automated verification typesafe operating system,,obj length filter flatedecode stream xڍ g r ذ k b z pr e b f wn w r zg asb endstream endobj obj type page content r resource r mediabox parent r endobj obj font r r r r r r procset pdf text endobj obj length filter flatedecode stream xڵ g
759,Lobsters,formalmethods,CSE-Formal methods,RustBelt: Securing the Foundations of the Rust Programming Language,https://people.mpi-sws.org/~dreyer/papers/rustbelt/paper.pdf,rustbelt securing foundation rust programming language,,obj stream g endstream endobj obj
760,Lobsters,formalmethods,CSE-Formal methods,Moderately Complex Paxos Made Simple: High-Level Specification of Distributed Algorithm (2017),https://arxiv.org/abs/1704.00082,moderately complex paxos made simple highlevel specification distributed algorithm,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
762,Lobsters,formalmethods,CSE-Formal methods,Developing Bug-Free Machine Learning Systems With Formal Mathematics,https://arxiv.org/abs/1706.08605,developing bugfree machine learning system formal mathematics,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
763,Lobsters,formalmethods,CSE-Formal methods,Getting compilers right: a reliable foundation for secure software,https://www.microsoft.com/en-us/research/blog/getting-compilers-right-secure-software/,getting compiler right reliable foundation secure software,nuno lope multics security evaluation report researcher alive online smt solver upcoming paper pldi related,nuno lope researcher microsoft research cambridge think compiler compromise security application think twice compiler writer work around clock continuously deliver better compiler driven everincreasing importance increasing performance everyone want code run faster reducing code size app fit people phone reducing energy consumption nice drain phone battery save power energyhungry datacenters video compiler big major compiler consist several million line code development stale either every year compiler see thousand change sheer size complexity plus pressure continuously improve compiler result bug slipping compiler bug may turn introduce security vulnerability program let look key optimization remove bound check commonly used memorysafe language c rust swift etc manually language c ensure program access memory region avoid security vulnerability example memory load could look like following inbounds buffer idx trap x buffer idx compiler try hard eliminate bound check hoist loop compiler transformation prove safe eg check always succeeds however buggy compiler optimization may decide replace inbounds check true mistakenly proved possible false essentially removing bound check may happen bug one hundred thousand line code used prove check necessary attack based compiler bug yet commonplace science fiction either possible take advantage compiler bug example elevate user privilege bypass authentication mechanism steal information existence attack known least since multics security evaluation report mentioned possibility injection security vulnerability compromised simply buggy compiler recently researcher managed compromise machine running ubuntu escalate privilege using publicly known bug llvm ensuring compiler correct therefore critical correctness security software compiler bug hard detect yet single bug introduce security vulnerability program make compute wrong result together academic industrial partner microsoft researcher working ensure compiler correct approaching problem two angle automatically verifying new optimization correct automatically verifying output compiler correct verify correctness optimization developed alive consists dsl specify peephole optimization tool automatically prove optimization correct else provide counterexample showing optimization wrong try alive online alive verifies optimization correct checking possible input code optimization refinement code optimization practice alive us smt solver automatically prove small theorem optimization imply correct alive used compiler developer several compiler team including c compiler team also company develop llvm alive found dozen bug llvm prevented many introduced llvm microsoft c compiler also working verifying output compiler correct instead verifying upfront optimization valid input program verify compile time optimization behaved correctly particular input given ie program approach called translation validation translation validation work taking snapshot intermediate representation ir optimization automatically proving latter refinement former translation validation powerful ally verification first support older code may reach current automated verification technique second provides extra safety net translation validation project codenamed utctv short translation validation utc microsoft c compiler still development already identified several bug development version compiler found using method share detail project future related line work pursuing semantics compiler irs verify something correct know really mean studying semantics modern compiler irs fix inconsistency discovered detail available upcoming paper presenting pldi barcelona later month clearly important make sure compiler working correctly protecting entire stack reducing exploitable security vulnerability application tool working designed automatically prove correctness part compiler microsoft continue working partner ensure bug compiler may compromise application correctness security related editor note microsoft silver sponsor year pldi conference taking place barcelona june pldi premier forum field programming language programming system research
764,Lobsters,formalmethods,CSE-Formal methods,Simple Verification of Rust Programs with Functional Purification (2016),https://pp.info.uni-karlsruhe.de/uploads/publikationen/ullrich16masterarbeit.pdf,simple verification rust program functional purification,,obj stream z k
765,Lobsters,formalmethods,CSE-Formal methods,Foundations of Semantics and Model Checking in a Software Engineering Course (2015),http://ceur-ws.org/Vol-1385/paper4.pdf,foundation semantics model checking software engineering course,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream e endstream endobj obj page rstructtreeroot rtypecatalog endobj obj font procset pdftext xobject rotate endobj obj stream p x p z jkqtw g p wdғޚ c wa k u endstream endobj obj stream r l l g ne fi
767,Lobsters,formalmethods,CSE-Formal methods,An example of debugging Java with a model checker,http://www.cs.unh.edu/~charpov/programming-tlabuffer.html,example debugging java model checker,example debugging java model checker multithreaded program java java language specification bug annotated version relying luck applying formal method tlc model checker tlc tlc trace limitation modelchecking link downloads,example debugging java model checker multithreaded program java write concurrent program hard large extend difficulty come lack good testing debugging strategy also make mistake write sequential program better equipped detect correct make dealing concurrent system difficult inherent nondeterminism program input behave differently run run result bug occur extremely rarely reproducible bug real nightmare something wrong system know seen make happen know approach problem producer consumer share bounded buffer illustrate difficulty consider classic example shared buffer system producer consumer buffer hold data created producing thread retrieved consuming thread importantly buffer act synchronizer blocking suspending thread nothing buffer empty consuming thread need blocked data buffer conversely buffer finite capacity producing thread must suspended buffer full public class buffer e public final int capacity private final e store private int head tail size suppresswarnings unchecked public buffer int capacity thiscapacity capacity thisstore e new object capacity private int next int x return x storelength public synchronized void put e e throw interruptedexception isfull wait notify store tail e tail next tail size public synchronized e get throw interruptedexception isempty wait notify e e store head store head null gc head next head size return e public synchronized boolean isfull return size capacity public synchronized boolean isempty return size unfortunate programmer wrote buffer class displayed buffer implemented circular list method get suspends calling thread buffer nonempty thread remove one object buffer single call notify potentially unlock thread blocked wait method put symmetric method synchronized order execution appears atomic thread particular thread see intermediate state buffer modified another thread also call notify take place buffer actually modified basic mechanism used suspend java thread method objectwait suspends thread unconditionally every thread call xwait suspended placed wait set object x every java object wait set call xnotify selects thread wait set x resume execution call xnotifyall allows thread wait set x resume execution call notify notifyall effect wait set empty overly simplified description method see java language specification detail strategy used buffer implementation use wait set buffer object ie calling wait allow one blocked thread resume execution buffer modification idea reason placing one object buffer removing one notify one thread bug one day author buffer class get phone call one customer inform system wrote completely frozen nothing happening everything hang money lost million unacceptable solving immediate problem way programmer solve every problem pulling plug restarting whole thing profusely apologizing inconvenience caused customer author decides job would secure could offer guarantee happen future embarks upon debugging mission fellow little old fashioned debugging using print statement completely dumb guess correctly buffer implementation cause thread deadlock decides write annotated version buffer study trace execution deadlock public synchronized void put e e throw interruptedexception string name threadcurrentthread getname isfull loggerinfo stringformat buffer full wait name waitsetsize wait loggerinfo stringformat notified name loggerinfo stringformat successfully put name notify waitsetsize waitsetsize loggerfine stringformat wait set size waitsetsize store tail e tail next tail size lastchange systemcurrenttimemillis writes program create producing consuming thread attempt reproduce deadlock almost ruined important customer simulates processing task real system time take create object added buffer time take process object removed buffer using threadsleep suspends thread specified amount time thread busy work simulated class producer extends thread public producer int n super producer n public void run string name getname try true sleep randnextint sleepprod bufferput name catch interruptedexception e return using threadsleep two major benefit first suspended thread use cpu resource large system simulated cheap laptop writer buggy code afford second sleep method fed random timing value simulate large class short medium long processing task essential system nondeterministic combination timing value produce desired deadlock imperative use many different combination value possible pseudorandom number suitable though great discussion another day final step programmer writes main program monitor producerconsumer application every minute program check size wait set buffer equal total number thread mean thread waiting thread left running notify deadlock situation observed customer long time systemcurrenttimemillis true threadsleep check deadlock every minute synchronized buffer bufferwaitsetsize threadcount loggersevere stringformat deadlock message second buffermsgcount bufferlastchange time thread participant tinterrupt return relying luck left run program deadlock happens analyze resulting trace understand went wrong leaving aside issue analyzing trace tricky print statement different thread tend interleaved confusing way solving actual problem understood first biggest challenge obtain suitable trace make deadlock happen first attempt brave programmer start program follows java annotatedbuffer creates buffer capacity producer consumer simulates producing consuming task random timing millisecond fan laptop starting produce foul smelling give decides try different combination parameter many attempt combination parameter finally produce deadlock le two hour along trace java annotatedbuffer deadlock message second trace however hard follow part delay extra message moment thread notify moment print also thread follow since einstein would put cpu cycle cheaper grey matter programmer decides keep looking deadlock would involve fewer thread finally get one happens smallest non trivial deadlock case system java annotatedbuffer deadlock message second note almost billion message day running output used web page real come actual run machine unfortunate laptop analysis trace reveals flaw buffer implementation thread producer consumer waiting wait set method get call notify intent notify producer slot made available buffer call sometimes notify consumer instead happens time lead deadlock applying formal method quick fix notify notifyall thus bringing back correctness cost relieved programmer think start relax question keep haunting happens complex system lucky next time next bug happens month year particular timing produce bug deployed code reproduced testing setting programmer decides enroll excellent class formal method offered university new hampshire exposed alternative technique track tricky bug concurrent software learns tla temporal logic action tlc model checking tool tla decides notation tool like could help job start practice using bounded buffer problem central algorithm bounded buffer modeled tla module extends natural sequence constant producer nonempty set producer consumer nonempty set consumer bufcapacity maximum number message bounded buffer data set value produced andor consumed assume producer least one producer consumer least one consumer producer intersect consumer thread consumer producer bufcapacity buffer capacity least data type data nonenpty tla mathematical notation based set theory us mathematical symbol rather heavily reason much readable prettyprinted form raw ascii source continue description buffer module prettyprinted form tla module begin constant act parameter set producing thread set consuming thread buffer capacity data type think data type parameter e java class module make sense need assume set thread disjoint nonempty buffer capacity least one least one piece data sent buffer buffer module part module introduces variable buffer sequence data element wait set set thread runningthreads defined set difference thread participant thread currently wait set thus set thread currently running next module defines three operator tla model java method wait notify notifyall definition may look weird somewhat intimidating one get used understand however need dive little tla semantics basically tla module defines state transition system state mapping variable name value transition new state action represent behavior system action defined logically relation value state action value state action primed instance java assignment statement x x corresponds relation x x note boolean formula good old mathematical equality assignment x x x possible tla action even though equivalent programming language like java particular one write nondeterministic action like last two given x several possible value x often useful modeling concurrent system x x specifies x could become increase stay unchanged x x exactly thing mind possible decipher tla formulation wait add thread wait set unconditionally notifyall remove every thread wait set becomes empty notify wait set empty remove one thread otherwise nothing case notify interesting modeled nondeterministically thread removed wait set specify one neither java language specification buffer module part using javalike operator module continues formalization put get method tla formulation mimic java code straightforward put buffer full add end notify otherwise thread wait buffer left unchanged since java method synchronized modelled single tla transition finally module specifies acceptable initial state example one possible initial state thread running buffer empty possible transition system next definition next read follows system transition next state thread currently running performs operation either producer attempt put piece data buffer consumer attempt retrieve piece data buffer deterministic system one possible behavior nondeterministic system many difficult test debug deadlock investigated happens behavior seen many behavior happen tla model three source nondeterminism thread wake notify called thread acquires lock buffer attempt put get operation thread producer piece data put buffer note nondeterminism introduced using logical disjunction existential quantifier basically thing note also third source nondeterminism may java program producer tend produce specific element irrelevant anyway two source nondeterminism one complicate analysis system lead potential deadlock actually study would show deadlock remains possible even notify made fifo really second source nondeterminism scheduling thread contention lock reason trouble buffer module part tla module end formalization expected property system namely free deadlock nodeadlock formula say always least one thread running make apply state system theorem express system typecorrect satisfies nodeadlock property buffer module part tlc model checker tla module used several thing basis randomized simulation similar done annotatedbuffer java program interestingly one formally prove correctness module ie model satisfies desired property tla proof rule based classic concept like inductive invariant well founded set used formally derive logical implication stated end module alternative model checking approach applied quite successfully industry much powerful randomized simulation much easier carry formal proof model checking work basically enumerating possible behavior system checking desired property tlc model checker tla although useful conceptually tlc fairly dumb tool confronted several possibility behavior nondeterministic system refuse choose unlike as like nondeterministic turing machine tlc get stuck possibility explores specifically tlc try calculate reachable state system breadthfirst manner contrast testing programmer tried randomly chosen path strength limitation tool obvious one hand rely luck find bug hand even small nondeterministic system many state modelchecked problem sometimes known state explosion bãªte noire researcher model checking community year still model checking useful technique demonstrated applying bounded buffer problem start tlc one need instantiate module assigning value constant buffer example tlc configuration file could look something like specification prog constant producer consumer bufcapacity data invariant typeinv property nodeadlock since put buffer irrelevant using small data type greatly reduces number state explore given configuration tlc produce following output computing initial state finished computing initial state distinct state generated model checking completed span class red error found span estimate probability tlc check reachable state two distinct state fingerprint calculated optimistic val based actual fingerprint val state generated distinct state found state left queue depth complete state graph search word buffer capacity shared among producer consumer system deadlock free configuration programmer gave earlier laptop started smoke right give system never deadlock however tlc started configuration producer consumer buffer capacity produce following output computing initial state finished computing initial state distinct state generated error invariant nodeadlock violated useful much like phone call customer complain everything hang best thing tlc come next explicit trace system lead deadlock state tlc trace take transition reach deadlock since tlc work breadthfirst manner shorter behavior result deadlock action actually happen right order java program one need luck good luck testing bad luck deployed hence difficulty making happen purpose several transition noteworthy like one state action line col line col module buffer buffer waitset state action line col line col module buffer buffer waitset producer since suspended successfully put buffer call notify instead consumer producer notified removed wait set discussed earlier problem buffer implementation producer consumer wait set way transition state state call notify notified state another put operation notifies state action line col line col module buffer buffer waitset point buffer full consumer thread running situation hopeless lead state state action line col line col module buffer buffer waitset five thread wait set deadlock limitation modelchecking course thing always worked nicely like model checking would taught elementary school technique model checking suffers severe liability known state explosion technically state space explosion better term state explode fact nothing really explodes model checking particularly dangerous possible interleavings atomic action number state reachable system quickly become huge even infinite state variable unbounded indeed research related model checking focused state explosion problem one way another symbolic model checking abstraction â illustration consider buffer example capacity thread producer consumer system deadlock shortest trace step tlc generate state distinct find often going happen java program random timing customer explains us buffer capacity clearly tlc answer note buffer example described answer system deadlock free exactly number thread twice buffer capacity model checking way get mentioned earlier possible carry mathematical proof tla model quite painless running model checker however proof possibly combined model checking remain way deal infinite large state space lesson formal model used many purpose simple model checking way discover bug result nondeterminism testing tricky requires patience computing resource much problematic luck formal model model checking may suitable elementary school probably taught part every computer science program however c curriculum designer acm nsf abet rather oldfashioned best school tend cover topic mention link downloads
769,Lobsters,formalmethods,CSE-Formal methods,Formal Reasoning About Programs (draft book by Chlipala),http://adam.chlipala.net/frap/,formal reasoning program draft book chlipala,formal reasoning program coq proof assistant grab draft use class class frap iswas primary text,formal reasoning program web site early stage book introducing machinechecked proof coq proof assistant approach formal reasoning program correctness grab draft use class class frap iswas primary text
771,Lobsters,formalmethods,CSE-Formal methods,An implemenation of Deflate in Coq (2016),https://xxx.arxiv.org/pdf/1609.01220.pdf,implemenation deflate coq,,obj stream
773,Lobsters,formalmethods,CSE-Formal methods,Programs and Proofs: Mechanizing Mathematics with Dependent Types,http://ilyasergey.net/pnp/,program proof mechanizing mathematics dependent type,program proof mechanizing mathematics dependent type coq proof assistant supplementary material github pdf course taught via pnp miscellanea,program proof mechanizing mathematics dependent type lecture note exercise lecture note result author personal experience learning structure formal reasoning using coq proof assistant employ coq largescale research project present manuscript offer brief practicallyoriented introduction basic concept mechanized reasoning interactive theorem proving primary audience manuscript reader expertise software development programming knowledge discrete mathematic discipline level undergraduate university program highlevel goal course therefore demonstrate much rigorous mathematical reasoning development robust intellectually manageable program common understanding common programming language concept provides solid background building mathematical abstraction proving theorem formally lowlevel goal course provide overview coq proof assistant taken incarnation expressive functional programming language dependent type proof assistant providing support mechanized interactive theorem proving aiming two goal manuscript thus intended provide demonstration concept familiar mainstream programming language serving part good programming practice provide illuminating insight nature reasoning coq logical foundation make possible reduce burden mechanical theorem proving insight eventually give reader freedom focus solely essential part formal development instead fighting proof assistant futile attempt encode obvious mathematical intuition found typo error logical inconsistency please highlevel overview course report preliminary experience available form unpublished draft supplementary material mathematical component ssreflect github ssreflect reference manual george gonthier assia mahboubi enrico tassi pdf course taught via pnp miscellanea last modified mon apr
774,Lobsters,formalmethods,CSE-Formal methods,Seer: Symbolic Execution Engine for Rust,https://github.com/dwrensha/seer,seer symbolic execution engine rust,seer symbolic execution engine rust miri example decode given encoder source code using helper crate xargo limitation longterm vision fuzzing,seer symbolic execution engine rust seer fork miri add support symbolic execution using solver backend given program written rust seer attempt exhaustively enumerate possible execution path achieve seer represents program input symbolic form maintaining set constraint seer reach branch point program invokes solver backend compute continuation possible given current constraint possible continuation enqueued exploration augmented respective new constraint learned branch condition seer considers byte read std io stdin symbolic input mean seer find interesting input program easily compile program plain rustc run input example decode given encoder source code suppose given encoder function fn input string suppose would like decode string nt want bother actually write corresponding function write following program ask seer execute fn main let valuetodecode let mut data vec vec valuetodecodelen std io stdin readexact mut data unwrap let result data resultstartswith valuetodecode panic found seer attempt find input value trigger panic succeeds second cargo run bin seer finished dev unoptimized debuginfo target sec running targetdebugseer executioncomplete input result err panic string ok hello world hit error halting answer string decodes hello world using helper crate helper crate provides extra convenience input trigger panic split variable type implement debug printed debug representation instead using underlying byte macrouse extern crate seerhelper seerhelperinit derive debug struct mystruct b fn main let mut mystruct b seerhelper mksym mut ta tb panic formatting work necessary build mir standard library use xargo rustflags z alwaysencodemir xargo seer executioncomplete input stdin mystruct b result err nomirfor std sys unix fastthreadlocal registerdtor cxathreadatexitimpl hit error halting full example crate found limitation seer currently proofofconcept stage therefore lot unimplemented hole particular yet handle allocation size depending symbolic input pointertopointer symbolic offset overflow checking symbolic arithmetic lot thing quickly discover try use longterm vision goal seer help two primary use case exploratory test complementary approach fuzzing program verification exhaustively check error state reached
776,Lobsters,formalmethods,CSE-Formal methods,"ELPI: Fast, Embeddable, Lamba-Prolog Interpreter (2015)",http://www.cs.unibo.it/~sacerdot/PAPERS/elpi.pdf,elpi fast embeddable lambaprolog interpreter,,obj type catalog version page r openaction r name r outline r endobj obj author title subject creator producer keywords creationdate moddate trapped false ptexfullbanner pdftex version tex live kpathsea version endobj obj type page kid r r r r r r r r r count endobj obj goto r fit endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r group r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r endobj obj name docstart r r limit docstart docstart kid r r endobj obj title elpi fast embeddable prolog interpreter r parent r endobj obj length filter flatedecode stream ka b ڂп sag endstream endobj obj font r xobject r r procset pdf text imagec endobj obj type group transparency c devicergb true endobj obj type annot border h c rect subtype link r endobj obj type annot border h c rect subtype link r endobj obj length filter flatedecode stream f kh jy endstream endobj obj font r procset pdf text endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj type annot subtype link border h c rect r endobj obj length filter flatedecode stream f wr z ի έ jly z
777,Lobsters,formalmethods,CSE-Formal methods,Rosetta - A Solver-aided Programming Language That Extends Racket,https://emina.github.io/rosette/index.html,rosetta solveraided programming language extends racket,rosette language rosette racket smt rosette guide talk application course publication acknowledgment racket,rosette language rosette rosette solveraided programming language extends racket language construct program synthesis verification verify synthesize code rosette compiles logical constraint solved offtheshelf smt solver combining virtualized access solver racket metaprogramming rosette make easy develop synthesis verification tool new language simply write interpreter language rosette get tool free lang rosette define interpret formula match formula expr apply map interpret expr expr apply map interpret expr expr interpret expr lit constant lit boolean implement sat solver define sat formula solve assert interpret formula sat r e e learn take look rosette guide talk application course publication acknowledgment research supported part award national science foundation nsf ccf department energy doe doe gift intel nokia samsung rosette extends racket programming language us solver microsoft research many thanks author system making freely available rosette user many helpful comment suggestion
778,Lobsters,formalmethods,CSE-Formal methods,Fuzzing the Rust typechecker using CLP (2015),https://www.cs.ucsb.edu/~benh/research/papers/dewey15fuzzing.pdf,fuzzing rust typechecker using clp,,obj length filter flatedecode stream xڍ p w fk fn b h f vsh n kd ԝ l z ޞ æ ԅ endstream endobj obj length filter flatedecode stream xڽ r c ȿj ہwܜ z k ĝ p ҍb c e ly
779,Lobsters,formalmethods,CSE-Formal methods,Towards Verified Cardiac Pacemaker,https://asankhaya.github.io/pdf/Towards_Verified_Cardiac_Pacemaker.pdf,towards verified cardiac pacemaker,,obj endobj obj endobj obj extgstate xobject procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream p f gf endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj r endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj bbox matrix filterflatedecodelength stream x endstream endobj obj stream jfif zexif mm j q q c
780,Lobsters,formalmethods,CSE-Formal methods,Modeling Zero-Downtime Deployments with TLA+,https://www.hillelwayne.com/post/modeling-deployments/,modeling zerodowntime deployment tla,tla guide problem like shilling checking model fixing temporal logic extension learn beginnerfriendly guide specifying system,working example tla guide realized one would good introduction specification general simplified little make accessible enjoy problem deploying code set server tricky turn migrate code turn back piss customer could also update live different server update different rate customer could get inconsistent result call zerodowntime deploy one always least one server accessible client server accessible client running code sort complication need minimum number server active deployment fail different type server running different codebases hotfix code redeploy first deployment still ongoing complicated system make sense u design check design bug using tla part especially good specifying concurrent system part like like shilling let model zerodowntime deployment start setup import module deployment extends tlc integer algorithm deploy everthing else happens end algorithm worry boilerplate necessary affect writing next variable model variable server server set three possible server represented string updated server false updated function might little unintuitive tla function really similar dictionary hash programming function method python wrote false false false unsurprisingly mean none server updated new code enough define first constraint define sameversion x server updated x updated end define sameversion operator tla equivalent programming function say take two arbitrary server must updated value either server updated none updated actual logic fair process updateserver server begin update updated self true end process writing updateserver server create separate update process server process start fairly simple set appropriate flag true final code extends tlc integer algorithm deploy variable server updated server false define sameversion x server updated x updated end define fair process updateserver server begin update updated self true end process end algorithm done except deployment model horribly broken actually anything check server consistent let see tla find horribly broken without help checking model compile tla create model specify sameversion invariant mean sameversion hold true every possible step every possible behavior let dig mean little server update single step three server three step check right well exactly put restriction order server update order etc six possible ordering behavior three step sameversion hold true step added fourth server checking possible step even made complicated yet turn need look far error need update updated true updated false sameversion broken let fix fixing one thing could assume server load balancer pull one update everything need load balancer sort flag keep server updating everything properly set let add another process coordinate deployment make everything easier variable server loadbalancer server updateflag server false updated server false define sameversion x server x loadbalancer updated x updated end define fair process updateserver server begin update await updateflag self updated self true end process fair process startupdate startupdate begin startupdate loadbalancer updateflag server true end process different started except use startupdate pull everything load balancer setting updateflag server since await statement run startupdate set flag point one server load balancer compile run everything work remember asked model zero downtime system specifying downtime let add addition true false add third state called updating require least one server load balancer updating additionally require server spend one step updating ready constant updating boilerplate define zerodowntime e server loadbalancer updated server updating sameversion x server updated x updated end define fair process updateserver server begin update await updateflag self updated self updating finishupdate updated self true end process updateserver take two step instead behavior step behavior step broken yup one solution switch startupdate logic update server outside load balancer set load balancer point instead set difference operator written look like fair process startupdate startupdate begin startupdate loadbalancer updateflag server false else true transition await server loadbalancer updated true loadbalancer server loadbalancer updateflag true end process work satisfies safety requirement temporal logic wait probably said programmer used seeing thing go horribly wrong still one server load balancer pretty bad unfortunately something check model kidding totally check model p domain pc pc p done loadbalancer server implies b mean true b must also true saying everything done running server load balancer since leaving last server model fails explicitly move last server back load balancer transition await server loadbalancer updated true loadbalancer server loadbalancer updateflag true finish await updated true loadbalancer loadbalancer union end process final spec module deployment extends tlc integer constant updating algorithm deploy variable server loadbalancer server updateflag server false updated server false define sameversion x loadbalancer updated x updated zerodowntime e server loadbalancer updated server updating end define fair process updateserver server begin update await updateflag self updated self updating finishupdate updated self true end process fair process startupdate startupdate begin startupdate loadbalancer updateflag server false else true transition await server loadbalancer updated true loadbalancer server loadbalancer updateflag true finish await updated true loadbalancer loadbalancer union end process end algorithm extension kept example simple minimize amount tla syntax need cover reality deployment much messier however circumstance want model require bit extra tla knowledge model outline new code bug prevents deployment working specify global state given behavior either true false server variable willupdate true false code fine individual server may fail reason make process branch multiple timeline either statement either updated self true updated self corrupt end either could pas parameter zerodowntime require certain number minimum server online one could use structure create multiple type service update different way different minimum capacity could two load balancer simulate bluegreen deployment could add audit log place constraint could lossy communication server tla power flexibility model case learn interested learning tla written beginnerfriendly guide cover everything need start writing useful spec interested theory behind download specifying system free feel free email question issue tell love helping people stuff
781,Lobsters,formalmethods,CSE-Formal methods,ALEXANDRIA: Large-Scale Formal Proof for the Working Mathematician,https://www.cl.cam.ac.uk/~lp15/Grants/Alexandria/,alexandria largescale formal proof working mathematician,alexandria largescale formal proof working mathematician l c paulson computer laboratory project log lawrence c paulson computer laboratory university cambridge,alexandria largescale formal proof working mathematician l c paulson computer laboratory university cambridge mathematical proof always prone error today proof hundred page long combine result many specialism making almost impossible check one solution deploy modern verification technology interactive theorem provers demonstrated potential vehicle formalising mathematics achievement verification kepler conjecture proof done using tool reach high standard correctness however existing theorem provers unsuitable mathematics formal proof unreadable struggle simple task evaluating limit lack much basic mathematics material difficult locate apply alexandria create proof development environment attractive working mathematician utilising best technology available across computer science focus management use largescale mathematical knowledge theorem algorithm project employ mathematician investigate formalisation mathematics practice already substantial formalised library serve starting point extended annotated support sophisticated search technique borrowed machine learning information retrieval natural language processing algorithm treated similarly alexandria help user find invoke proof method algorithm appropriate task alexandria provide comprehensive formal mathematical library search within library mining library proof pattern automated support construction large formal proof sound practical computer algebra tool alexandria based legible structured proof formal proof mere code machinecheckable form communication mathematician project run month starting september check project log researchgate update last revised november lawrence c paulson computer laboratory university cambridge
782,Lobsters,formalmethods,CSE-Formal methods,Typed Assembly Language (1998),https://www.cs.cornell.edu/talc/overview.html,typed assembly language,,statically typed intermediate language effective tool staging compilation highlevel language type express invariant help programmer understand program strongly typed language prevent many common programming error compiler writer use property debug sophisticated program transformation closure conversion optimization like datatype specialization furthermore type help check correctness transformation enable analysis optimization extremely difficult without goal tal project extend paradigm typedirected compilation limit compile highlevel language include feature higherorder polymorphic function datatypes module object subtyping series typed intermediate language finally typed assembly language tal unlike compiler use typed intermediate language also typed target language talc compiler generates code intel family assembly language assembly code annotated type information verified type checker code assembled masm assembler assembly language type system powerful enough express highlevel abstraction closure abstract datatypes yet flexible enough permit traditional lowlevel optimization loop invariant removal strength reduction redundant move elimination furthermore familiar typed source intermediate language catch programmer error typed assembly language help ensure complicated backend transformation optimization well register allocation general instruction selection scheduling performed correctly type soundness assembly code implies many important security property memory safety result assembly code form proofcarrying code tal applet like java applet may downloaded untrusted source internet verified executed safely without fear corrupt host machine furthermore tal assembly language interpretation overhead process justintime compiler run trust present tal effort many application security compilation domain future work involves compiling expressive typed language language real machine seek reveal connection typed lambda calculus give semantics many modern language von neumann machine implement
783,Lobsters,formalmethods,CSE-Formal methods,TLA+ in Practice and Theory Part 1: The Principles of TLA+,https://pron.github.io/posts/tlaplus_part1,tla practice theory part principle tla,part part part video talk rtlaplus introduction tla video course two lecture paxos tutorial dr tla github repository leslie lamport stephan merz tla practice slide jml acsl vcc spec clojurespec eiffel dafny whiley spark randomized test generation concolic testing model checking smt solver isabelle coq lean whyml at agda idris f z vdm bmethod eventb pvs asm ideology aesthetic famous case algorithm comment simplicity scalability universality émil borel l e j brouwer spoke construction mathematical object sequence writing constructive mathematics paper tool designed quite complicated writes two philosophical view computation dynamical system blog post c program java bytecode history tla temporal logic action short note tlaps research started feel tla blueprint designing house dynamical system linear temporal logic part part phase space part part toolbox available separate download specified tla misconception tla comment carl hewitt lamport writes sapirwhorf hypothesis signifier signified structure part merit formal method post proof correctness calendar program report somewhere middle video interview lamport say wrote message tla mailing list discus reddit,first installment fourpart blog post series tla part part part video talk cover part series find tla formal method general interesting invite visit participate new rtlaplus reddit thinking guarantee make mistake thinking guarantee thinking clearly hard use help get introduction tla formal specification verification language help engineer design specify reason verify complex reallife algorithm software hardware system tla successfully used intel compaq microsoft design hardware system started seeing recent use large software system microsoft oracle famously amazon engineer use tla specify verify many aws service get explaining formal specification verification language help create better robust algorithm digital system shortly first like clarify focus fourpart blog post series tla called series tla practice theory almost theory theory mean two thing mathematical theory design theory cover virtually tla great detail tutorial although may serve complement one attempt clarify concept hard grasp learning tla small simple contain idea may take fully understand material mean essential learning tla writing good useful specification reading post teach write good specification series neither necessary sufficient putting tla good use think necessary sufficient understanding hope make understand tla designed way design mathematical theory compare approach formal method importantly hope convey powerful tool almost ordinary mathematics reasoning system design build series addressed interested formal method programming language even though tla programming language may find tla theoretical approach pragmatic design interesting already know tla wish dig deeper theory shortage good beginner tutorial tla tla hyperbook complete thorough handson tutorial written leslie lamport tla inventor probably best way get started tla want start applying practice expect work hyperbook become productive enough specify verify realworld system two week specifying system also lamport older book le handson indepth greater emphasis theory book freely available download recently lamport made online tla video course two lecture paxos also intended serve crash course tla tutorial focus pluscal pseudocodelike language compiles tla wish start model checking specification within hour interested theory additional complementary learning material dr tla series lecture cover various algorithm specification tla collection tla example find github repository shortage paper theory tla either nice collection academic paper tla leslie lamport stephan merz others however technical aimed researcher generally assume significant prior knowledgeanother problem scientific paper hardly read anyone outside narrow subsubdiscipline series intended gentler introduction theory tla curious practitioner software hardware developer well academic familiar approach software specification verification next three installment series deep dive language theory behind choice made design language understood context post provide necessary context form general introduction motivation history design principle tla well comparison approach tla practice treatment theory tla must begin overview practice theoretical choice made design tla motivated first foremost necessity practice technical report called use formal method amazon web service communication acm april amazon chose tla slide detailing experience amazon engineer using tla design aws first drew attention tlathere constant debate among developer well researcher empirical evidence success various language tool programming approach statistically valid goldstandard field trial realworld software hard conduct whole spectrum weaker form empirical evidence good wellresearched technical report great way get first impression technique report team amazon firstrate example wellmade industry technical report wish industry team would produce document similar quality software development tool language technique practical tool designing verifying complex software excerpt report serve overview use tla industry high complexity increase probability human error design code operation error core system could cause loss corruption data violate interface contract customer depend launching service need reach extremely high confidence core system correct found standard verification technique industry necessary sufficient use deep design review code review static code analysis stress testing faultinjection testing many technique still find subtle bug hide complex concurrent faulttolerant system h uman fallibility mean subtle dangerous bug turn error design code faithfully implement intended design design fails correctly handle particular rare scenario found testing code inadequate method find subtle error design order find subtle bug system design necessary precise description design least two major benefit writing precise design author forced think clearly help eliminate plausible handwaving tool applied check error design even written contrast conventional design document consist prose static diagram perhaps pseudocode ad hoc untestable language description far precise often ambiguous omit critical end spectrum final executable code unambiguous contains overwhelming amount detail needed able capture essence design hundred line precise description design unavoidably complex needed highly expressive language far level code precise semantics expressivity must cover realworld concurrency faulttolerance wish build service quickly wanted language simple learn apply avoiding esoteric concept also much wanted existing ecosystem tool summary looking offtheshelf method high return investment found looking tla industry formal method reputation requiring huge amount training effort verify tiny piece relatively straightforward code return investment justified safetycritical domain medical system avionics experience tla shown perception quite wrong engineer entry level principal able learn tla scratch get useful result without help training executive management proactively encouraging team write tla spec new feature significant design change annual planning manager allocating engineering time use tla know little tla used let explain practical point view formal specification language like programming language formal system language precise syntactic semantic rule one focus program rather example specification may say subroutine must return input sorted without saying meaning algorithm used sort description immediately raise objection subsystem form supersystem programmingspeak higher abstraction layer example specifying algorithm detailing find median element list first step sorting list even though algorithm used sorting still irrelevant versatile specification language therefore able describe better yet describe desired level detail operation abstraction layer realization relation two abstraction level spectrum given precise mathematical meaning something known abstractionrefinement relation form core tla theory also suggests versatile specification language could also serve programming language able describe see requirement programming language may odds want specification language may good reason make specification language serve doubleduty different kind specification language essential difference least felt user much due choice mathematical theory much difference goal first kind specification language embedded mainstream programming language contract either part programming language annotation example specification language include jml java acsl vcc c spec c clojurespec clojure eiffel dafny whiley spark kind specification describe intended behavior individual program unit like function class used verify behavior unit using tool like automatic randomized test generation concolic testing model checking automated proof smt solver manual proof proof assistant specification useful limited scope easily specify global correctness property program example hard write let alone verify codelevel contract specifies program must eventually respond every user request program never respond request user information belonging another user database program implement consistent never lose data another kind specification language one specifically designed effort serve double duty programming language language include generalpurpose proof assistant like isabelle coq lean specification proof language directed software like whyml experimental programming language based dependent type theory at agda idris f language probably belongs somewhere group previous one language clear unique powerful advantage allow known endtoend verification namely ability specify verify behavior program highest level global property machine instruction emitted compiler ensuring executable conforms specification ability however come high cost language extremely complex requiring month learn year master reason used specialist rarely industry virtually never without support academic expert date one able verify interesting property large program way instance successful endtoend verification relatively small program program component usually require amount effort far beyond mean highassurance software finally standalone specification language serve complete programming language may may allow generation bit code programming language include z vdm bmethod eventb pvs asm tla z used altran uk create highlevel specification software also make use spark specify code level b method used railway sector pvs used nasa actually similar theory employ tool like isabellehol coq focus industrial use userfriendliness tla share common goal z bmethod asm well aspect theory focus universal mathematical formalization computation share common goal isabelle coq ideology aesthetic perfect formalism use word formalism stand formal system one good every purpose constructed around set ideological aesthetic choice important point delineate part debate preferred formalism programmer know debate formalism common matter aesthetic leslie lamport invented tla circa culmination two decade work formal method technique employ formal reasoning reasoning based precise property formal system analyze system lamport made seminal contribution theory concurrent distributed algorithm formal method always first foremost practical necessity tool without complex subtle algorithm could designed complex subtle algorithm formally proven correct likely wrongthere also famous case algorithm ostensibly proven formally ie formal system also turned completely wrong discovered use model checker comment first verification paper written lamport writes interest algorithm verification practical interest want verify algorithm write method think practical everyday use interest lamport care deeply engineer apply think formal methodsfor example see highlevel specification lesson industry tla verification cachecoherence protocol theory driven first foremost practicality motivated abstract ideal elegance practical problem reasoning real algorithm rigorous reasoning way avoid subtle want make reasoning simple possible making underlying formalism simplethe temporal logic action practicality ideal whose realization depends carefully deciding us formalism serf us well intended audience tla designed engineer working industry algorithm designer either industry academia designed mathematician logician programming language theorist address need specification verification real system algorithm intended programming language tool exploration novel logical mathematical idea practicality clear audience intended use mind entail two requirement simplicity allow engineer quickly learn use language scalability allow applying formalism realworld software hardware considerable complexity size well nicetohave universality allow applying formalism different kind algorithm system engineer may encounter scalability fairly easily tested universality mathematical property formalism simplicity cognitive measure often depends personal aesthetic point view goal compare contrast underpinnings tla theory approach would like describe approach program analysis popular programming language theory circle last decade tla stand stark contrast approach program analysis taken programming language theory also connected theory functional programming based two aesthetic choice grounded historical view scientific mission first partial identification computation functionsprior turing mathematician interested question function calculable famously kurt gödel alonzo church strong influence church work programming language theory therefore underlying cause view algorithm day mathematician like émil borel l e j brouwer spoke construction mathematical object sequence borel even described computable real number sequence turing first give precise definition computation function compute process yield writing real question issue possible process carried robin gandy remark confluence idea significantly different question computable function author asked turing speak pointed true direction second attempt unify constructive mathematics rethinking mathematical practice originating part strict philosophical view mathematics programmingwhile connection constructive mathematics computability long known believe unification constructive mathematics programming practical goal first due per martinlöf constructive mathematics computer programming attempt led conjecture unification math programming could also work way around namely good idea mathematically reason computer program formal framework designed program constructive mathematics ie goal mechanization programatization mathematics mathematization programming one thesis appears explicitly introduction paper lean proof assistant tool designed support mathematical reasoning reasoning complex system practice sharp distinction verifying piece mathematics verifying correctness system formal verification requires describing hardware software system mathematical term point establishing claim correctness becomes form theorem proving conversely proof mathematical theorem may require lengthy computation case verifying truth theorem requires verifying computation supposed introductory word practice serve justification actual evidence support thesis interesting currently hold theory computational mathematics indeed interesting developer rather logician concerned opposite problem computation represented mathematically rather math represented computationally good reason believe thesis computational math right tool mathematically reasoning computation false constructive mathematics common computational object constructive computable function algorithmically speaking computable function corresponds sequential algorithm system algorithm software engineer build want reason sequential interactive concurrent kind algorithm interesting common constructive mathematics least interesting common software viceversa say one reason general algorithm formalism far reasoning generally arbitrary algorithm functional formalism quite complicated event treatment quite different sequential algorithm seems mechanization mathematics mathematization programming similar theory achieving goal practice requires different design aesthetic choice design tla diametrically opposite reason precisely ie mathematically math language precision program use formalism designed express exotic math programming language quite opposite use ordinary math express reason program preferably uniform way kind algorithm word describe program ordinary math lamport writes quite disturbed emphasis language computer believe best way get better program teach programmer think better thinking ability manipulate language ability manipulate concept computer science concept language one teach concept without getting distracted language concept expressed answer use language every branch science engineering namely mathematics obsession language strong obstacle attempt unifying different part computer science one think term language linguistic difference obscure fundamental similarity lamport observes programming language complex whereas ordinary classical math simple programming language need mechanically translatable efficient machine code interacts hardware operating system used build program million line code long need maintained large everchanging team engineer many year requirement place constraint design programming language make necessarily complex complexity necessary reasoning specification specification order magnitude shorter code reasoning require generation efficient executable possible separate programming reasoning separate language simple least simple possible may much gained approach lamport writes primary goal programming language efficiency execution ease writing large program primary goal algorithm language making algorithm easier understand helping check correctness efficiency matter executing program implement algorithm algorithm much shorter program typically dozen line rather thousand algorithm language need complicated concept like object sophisticated type system developed writing large program difference two approach reasoning program within programming language reasoning program ordinary math explained following analogy consider electrical engineer designing analog circuit mechanical engineer designing contraption made gear pulley spring either use standard mathematical approach using equation describing component interact invent algebra electronic component one mechanical component reason directly language capacitor resistor one capacitor plus one resistor etc gear spring lamport approach analogous former programming language theory approach analogous latteri think two different aesthetic preference also linked two philosophical view computation view program mathematical object like number relation lamport view mathematical object ultimately serf description physical process linguistic approach see pure mathematical creation albeit one may incarnated imperfectly earthly device course convenient standard mathematical approach need flexible enough concrete domain object like resistor could modularly defined composed difference constructive approach programming language hardware language practiced programmer hardware engineer descriptive approach mathematics practiced physicist philosophical gap must crossed learning tla necessary one give tla power constructing system hardware software composed component must sufficiently detailed efficient realization describing system mathematically often choose describe component fully others partially latter component detail unimportant goal understanding serf two practical purpose make specification shorter clearer also make verification either model checking formal proof affordable addition tla identify computation function way instead directly represent computation discrete dynamical system much ode used describe continuous natural phenomenon see part series mean tla posse strong form universality batch interactive sequential concurrent parallel distributed realtime hybrid aka cyberphysical system interact physical world discrete continuous component algorithmsand even natural computational system like biological metabolic network expressed using simple formalism addition program property care correctness performance similarly naturally expressed proving kind algorithm done using proof choice representing computation way still aesthetic one uniform universality different kind system different property suggests natural one lamport writes physicist revise theory differential equation every time study new kind system computer scientist change formalism encounter new kind system similarly composition component tla function composition explore composition detail part pique curiosity consider component imposes certain constraint behavior system operates following rule also interacts environment user network operating system component imposes rule environment appears nondeterministic component composition multiple component intersection constraint imposed component logic term conjunction formula describing composition tla therefore simple logical conjunction land importantly choice representation take nothing ability abstract computation desired level quite contrary offer elegant abstraction linguistic approach however advantage like ability endtoend verification unified language mechanically compiled efficient executable assuming compilation process verified certain mistake crept pipeline toplevel specification way machine instruction tempting believe semantics programming language well defined composition rule simple consistent could apply formal reasoning directly program code easily move abstraction hierarchy order verify correctness property different level abstraction unfortunately case anyone interested program verification would well understand enormous theoretical difficulty facing endeavor define limitation force design tradeoff made various approach another blog post discussed theoretical challenge among mentioned result showing effort required verify behavior composition component may grow exponentially number component also complexity internal detail mean always hide detail implementation go abstraction hierarchy implication endtoend verification essentially hard regardless done practice endtoend verification expensive sign drastically change foreseeable future time endtoend verification remains reserved specialized software small secure core larger system thus form niche luckily software system truly require endtoend verification either small require strong guarantee one two small internal component giving goal moment affordably realized required vast majority software reasonable concession provided trade advantagesactually endtoend verification also accomplished even simple math approach mechanically compiling program formal mathematical representation two academic project endtoend verification tla c program java bytecode approach program verification mean actual compilable program similar verification technique characteristic formula explore bit part however primary focus tla would simplicity universality scalability thing make applicable wide range software wide range user course nothing prevents u complementing approach codelevel specification tool use verify local correctness property like particular code unit rather entire system whether aesthetic choice coincide lamport think radically different ideology programming language theory deserves consideration indeed lead pragmatic approach verification history tla leslie lamport best known major contribution theory concurrent distributed algorithm began work formal method late pragmatic standpoint seen work roughly contemporary tony hoare robin milner beginning took different path algebraiclinguistic work process calculus made important contribution theory verifying concurrentinteractivenonterminating computation especially specification via refinement concept safety liveness property term coined mathematical idea would serve foundation tla developed year formalism set tla apart specification language based programming language theory many case formalism came first semantics laterthis difference approach run deep computer science concept first approach preferred computational school research complexity theory algorithm formalism first approach preferred programming school research programming language difference traced back way alonzo church alan turing whereas first invented formalism later came believe sufficient describe computation never precisely defined concept second thought computation abstract concept first later picked arbitrary formalism describe concept could treated rigorously lamport writes pnueli introduction temporal logic led explosion attempt find new logic specifying reasoning concurrent system everyone looking silverbullet logic would solve field immune fever became disillusioned practicality seeing colleague spending day trying specify simple fifo queue arguing whether property listed sufficient realized despite aesthetic appeal writing specification conjunction temporal property work practice led invention temporal logic action late logical formalism despite name try minimize much possible use temporal reasoning borrows operator instead relies concept called action tla gave first time lamport writes formalism possible write completely formal proof without first add additional layer formal semantics visit oxford lamport explored possibility adding tla z specification language developed tony hoare oxford concurrency oxford meant csp z community interested combining z csp natural combining predicate logic c around lamport invented tla complete formalism specification built around tla short note lamport summary created tla process erasing programming construct formal description algorithm distilling algorithm mathematical essence tla originally designed form mechanical verification mind yuan yu wrote model checker tla called tlc team inria built mechanical proof checker tla called tlaps lamport introduced pluscal algorithm language look like pseudocode yet completely formal compiled readable tla recently research started building stateoftheart model checker tla feel tla tla specification describes system chosen level detail list global property highlevel description algorithm codelevel description algorithm even description cpu digital circuit computing algorithm whatever level level abstraction interested lamport writes believe best language writing specification mathematics mathematics extremely powerful powerful abstraction mechanism ever invented definition programming language one need different language construct different class system message passing primitive communication system clock primitive realtime system riemann integral hybrid system mathematics specialpurpose construct necessary define need perhaps greatest advantage specifying mathematics allows u describe system way want without constrained ad hoc language construct mathematical manipulation specification yield new insight tla programming language builtin notion io builtin notion thread process heap stack actually concept memory even subroutinespluscal process stack subroutine yet software hardware system almost kind algorithm written tla succinctly elegantly reasoning algorithm system rather program part explore difference two gain power simplicity exchange give ability mechanically translating algorithm efficient executablein principle tla algorithm specified sufficient detail could certainly translated code although know anyone actually attempted useful would specified algorithm system level level abstraction find important translate algorithm chosen programming language manually interesting technique employed deemed necessary verify code match specification extreme compiling code back tla one capturing system log using model checker check conform behavior specification designing algorithm tla specification closely resemble code least abstraction level however time engineer use tla design reason complete system case specification much higher abstraction level code lamport likens use tla blueprint designing housean expanded version article system algorithm abstraction level expressed tla single logical formula obviously nontrivial compose manageable piece manipulated like mathematical formula scary may sound programmer experience similar programming learned programmer faster programming language math feel lot like programming tla one rare combination simplicity elegance versatility power least evoked impression similar one year ago learned scheme exception proof language guided design goal also rather minimalistic tla certainly perfect feel elegant finely crafted scheme standard ml computer scientist programmer love talking abstraction one favorite thing tla give precise mathematical definition concept abstraction allows u reason directly tla abstractionimplementation relation expressed simple familiar logical implication x rightarrow proposition x implement conversely abstract x codelevel specification language whether based contract type make clear distinction algorithm expressed body subroutine eg routine implementing quicksort algorithm property eg subroutine return sorted list expressed contract type even contract system type system allow full use programming language expressing property eg dependent type still make clear distinction semantically property distinct algorithm tla make distinction property algorithm sort algorithm quicksort two specification different level detail different level abstraction x rightarrow therefore also mean specification x property mentioned tla make easy naturally express many different kind algorithm sequential interactive concurrent parallel etc however one glaring omission tla allows specifying probabilistic algorithm logic lack power reason like specifying algorithm yield right answer probability shortcoming however probably easy rectify future version language easy specify property like worstcase time space complexity even property like system eventually converge one three attractor elegance universality power aside biggest practical impact feel using tla biggest practical difference tla specification tool availability model checker model checker make difference formal method actually save development time one may prohibitively expensive importantly proof assistant prove algorithm correct actually specifying complex algorithm system chance model checker give push button counterexample show exactly thing gone wrong tla seen made three part classification guide organization post series core tla temporal logic action way analogous ordinary differential equation whereas ode used describe continuous dynamical system tla used describe arbitrary discrete dynamical system addition tla accommodates reasoning useful analyzing program particular importantly assertional reasoning refinement latter precise mathematical definition concept abstraction implementation relationship algorithm eg parallel mergesort implement ie refines general mergesort tla incorporates linear temporal logic despite name tla main design objective actually reduce reliance temporal logic temporal reasoning much possible simpler many alternative quite ordinary math explore tla depth part part like ode describe evolution continuous system phase space variable take value field tla requires state space dictate particular one state system namely value variable defined point time tla us formal set theory based zfc allow tla variable take many kind value atom like number string finite infinite sequence set record function go static part tla part finally tla module system allow information hiding elaborate abstractionimplementation equivalence relation go module system composition part tla software package contains ide called toolbox latex prettyprinter tlc model checker let verify property algorithm written useful subset tla restricted finitestate instance system push button proof system tlaps available separate download fully integrated toolbox allows interactive work proof system verification proof tlaps selfcontained proof assistant rather frontend tla proof language us automated solver proof assistant isabelle backends discharging proof obligation series focus theory discus use tla tool even though utmost practical importance learning material linked cover use tla logic universal aforementioned exception probabilistic algorithm tla tool job job formal specification verification realworld algorithm large software system practitioner like elegant tool used mean optimized task designed ergonomics language well current tooling mean best choice every circumstance example used mechanically prove general mathematical theorem interactive theorem provers designed particular task likely better job also used specify programming language lacking syntactic construct make easy embed different language nicelythere sophisticated construct like macro arbitrary infix operator may help shallow embedding convenient quoting construct help deep embedding nice result depends embedded language tla rather complex grammar specified tla bnf grammar specification look nice tool may handle task better limitation model checker proof system exploring numerical statistical algorithm would suggest using specialized language like matlab octave julia even though logic universal mean always best formalism derive kind insight system different formalism may offer different insight misconception tla would like address interesting misconception tla found online first tla tool verifying distributed system true day tla mostly known context distributed system concurrent algorithm reason lamport algorithmic work concurrent distributed algorithm balkanized nature computer science place certain limit influence idea outside sphere originator known general software verification formalism able handle concurrency elegantly tla shine comparison engineer write software system complex subtle obviously correct could therefore benefit formal verification usually case concurrent distributed algorithm involved nevertheless nothing intrinsically limit tla specifically concurrent distributed algorithm fact tla special concurrency construct like message passing even process another made comment carl hewitt inventor actor model tla incorrectly treat state global scientifically incorrect addition disastrous engineering error confusing mathematical notation system describes use math describe position along one dimension n particle might define vector boldsymbol x component position state single particle notation tla written x instead xi say absolutely nothing actual physical interaction particle notation treat state global le mathematical notation vector boldsymbol x notation vector boldsymbol x actually mean particle instantaneously aware position others tla math general treat state global allow denoting global notion state one actual system described one may indeed ask ever want allow specification nonphysically realizable interaction answer working formalism restricts expressible physically realizable would make complex le generalconsider would required math builtin mechanism preventing u expressing quantity representing velocity greater speed light another reason may wish define nonphysical behavior highlevel abstraction order specify prove certain property example specifying algorithm distributed transaction would much like show system would behave distributed transaction instantaneous case would specify realizable physically realistic algorithm specify nonrealizable abstract behavior show lowlevel algorithm implement highlevel behavior even allowed describe abstract behavior able prove algorithm desired property question becomes use information global state available software component order reason behavior point lamport writes assertional method reason global state concluded method appropriate reasoning distributed tried figure write formal proof without reasoning global state decided alternative writing assertional proof knew would problem writing proof expected reliance arbitrary global state proof would ugly surprise discovered proof quite elegant philosophical consideration told reason global state experience indicated reasoning worked fine always placed reliance experience philosophy written assertional proof distributed system ever since others inclined philosophy spent decade looking special way reason distributed system another rather technical misconception tla higher order therefore specify higherorder algorithm get specific formalism next three installment examine precise order would make error assertion clearly apparent point like point phrasing claim example lamport call whorfian syndrome sapirwhorf hypothesis posit language use shape thought namely confusion language reality signifier signified formalism formalizes term higherorder property formal description system system example proposition every set natural number contains minimal element higherorder using logic whose structure domain discourse natural number first order logic whose structure set zfc set theorywe cover basic logic part another example continuous dynamical system expressed ode like specify system whose first derivative another dynamical system make use higher order ode like ddot x x dynamical system usually written firstorder ode without loss expressivity convenience would write seemingly higherorder system firstorder ode like programmer say program higherorder mean parameterized another program interaction two program algorithm higherorder choose model interaction language using function composition way expressing relationship therefore constitutes higherorder v firstorder depends domain discourse andor mode composition feature formalism formalized reality see tla express behavior may perhaps higherorder formalism firstorder general lamport say comparing formalism comparison radically different formalism tend cause great deal confusion proponent formalism often claim formalism b inadequate concept fundamental specification written expressed b argument misleading purpose formalism express specification written another formalism specify aspect class computer system specification system written two different formalism likely formally argument compare formalism directly without considering formalism used specify actual system useless finally expressed discussion one lamport talk writing code highlevel language help one think clearly exactly way writing natural language drawing blueprint programming language specification language useful prototyping highlevel specification writing executable specification even evolving actual due respect leslie lamport great computer scientist programmer learn haskell misconception interesting commenter expectation specified shaped particular ability favorite programming language note level flexible abstraction concreteness offered tla programming language seem almost equally constrained range expression challenge commenter specify important reasonable program property easily naturally clearly specified tla favorite programming language every user request would eventually answered server constructing response request user information belonging different user read database transaction appear taken place instantaneously ie linearizable worst case complexity sort function log n already mentioned research programming language allow expressing property make nontrivial tradeoff lamport say matter need specify program higherlevel language implementing programming language people design pls would say language make program obvious higherlevel description needed think first pl believed true fortran true fortran think true existing generalpurpose pl merit formal method engineer use tool help u build software complies requirement lowest cost formal method fact software verification method including many form testing lie spectrum effort require confidence provide pick match requirement system building early tell precisely much tla help develop software general exactly problem benefit believe experience like amazon seems support large class software system significantly benefit tool like tla one skepticism towards formal specification demand much software requires formal specification reasoning indeed little use formal specification thing trivial unimportant part software complex subtle important benefit careful thinking formal spec help think objection formal specification even case could potentially benefit expressed comment post even perfect proof program satisfies specification verify specification correct hard believe programmer trouble write correct program first place magically write perfectly correct specification people experience mathematical logic know hard technical encode precisely want prove logical language even relatively simple combinatorial fact say impossible write correct specification much harder writing correct program first place lamport addressed claim paper proof correctness calendar program written response another paper claimed software like calendar program hard specify correctly paper show simply precisely specify prove correctness calendar program lamport address objection believe one really understands program specify precisely understandable manner highlevel formalism like tla designed allow precise description software hardware system allows assumption well operation stated clearly concisely enough correctness specification far likely correctness program question ability programmer write specification able convert informal requirement program formal specification fairly low level understand program well enough also able specify formally higher level way show work actually matter relatively short training practice practical successful experience company like amazon tla show useful easy enough use critic may claim right programming language right programming style like objectoriented programming functional programming right discipline like testdriven development required create good software paper lamport writes advocate programming methodology tended talk methodology automatically generate good program programming methodology substitute intelligent reasoning algorithm complexity lead one good method solution structured programming would helped euclid discover algorithm experience amazon shown using formal method wisely supplement methodology reduce cost development opposite end claim formal reasoning ineffective unrealistic expectation author spec codelevel specification language c report conclusion drawn interaction developer real developer appreciate unfortunately also seen unreasonable seduction static checking programmer see demo often develop romantic enthusiasm correspond verification reality postinstallation depression set encounter difficulty trying verify program reality somewhere middle feasibly verify property system general complex big program tricky property confident wish veracity verification process work required reasonable compromise must always made depending software requirement believe tla hit sweet spot compromise make versatility choosing desired level detail abstraction specification give user freedom pick useful point term utility effort tla offer simplicity universality scalability achieves making two concession programming language trying general tool studying theory former largely sacrifice endtoend verification neither feasible necessary virtually ordinary software latter sacrifice power relevance tla intended goal tool reasoning behavior especially correctness system algorithm study theory addition tla nicely complement affordable codelevel formal tool like static analyzer tla give confidence codelevel formal method whereas static analyzer give verifying complex global property finally specifying tla ultimately specifying mathematics math save thinking help organize thought true regardless formalism choose help carefully reason program thinking important hard part video interview lamport said feeling people looking magic bullet math wonderful somehow discover right math math solves problem way happens understand something find math express understanding math provide understanding lot addressing kind problem specification verification looking new math gave hunt year ago discovered example proving correctness concurrent algorithm one basic method work proving invariant package however many way want anything going make proof simpler done taking method go directly possible problem math easy since describe algorithm term math already math need translate describing algorithm math need new fangled kind math try smooth process hunch people find new kind math really going solve problem good mathematical formalism necessary condition reasoning program make answering question possible let alone easy see correctness complexity famous property math describes thing made simple part ask question hard answer top every formalism introduces accidental complexity difficulty arise choice formalism rather problem tla immune although well account accidental difficulty may make harder answer specific kind question mean single formalism best us true computer science true mathematics find matter formalism choose actual work similar whether tla coq able think mathematically ie think precisely prerequisite using formalism ability improves actual work tla great practicing mathematical thinking much simpler general formalism designed reason program help practice logic mathematical thinking using simplest possible math simplest possible logic letting concentrate problem little sophisticated detail formalism possible without detracting anything expressivity reasoning power even drawn theory like type theory intuitionistic logic aesthetic maybe even pragmatic reason help grasp formal ordinary math classical logic trying grapple complicated formalism video interview lamport say programmer idea programming language simple math difficult complicated absurd mathematics much simpler even simplest programming language people fear math instilled p eople start using tla teach make using math much fun programming seems sense programming technique paradigm tdd new programming language hope reduce programmer need think turing dream computer learn program realized technique silver bullet eliminates need careful thinking thinking remain important part programming tla tell program tool help think clearly precisely carefully chris newcombe principal engineer amazon author tla case study wrote message tla mailing list tla valuable thing learned professional career changed work giving immensely powerful tool find subtle flaw system design changed think giving framework constructing new kind mentalmodels revealing precise relationship correctness property system design allowing move plausible prose precise statement much earlier software development process could agree next week learn tla us logic describe state program meaning data formal logic used specification general well take look tla declarative proof language discus reddit
784,Lobsters,formalmethods,CSE-Formal methods,Control-flow Refinement and Progress Invariants for Bounds Analysis (2009),https://www.microsoft.com/en-us/research/wp-content/uploads/2009/03/pldi09_speed.pdf,controlflow refinement progress invariant bound analysis,,obj stream lh lȿc pxq cz g l x e dk z wi
785,Lobsters,formalmethods,CSE-Formal methods,"An Empirical Study of the Correctness of Formally-Verified, Distributed Systems",https://locore.cs.washington.edu/papers/fonseca-dsbugs.pdf,empirical study correctness formallyverified distributed system,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream փi fg u u e q pe k endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream bc endstream endobj obj type xobject subtype form formtype ptexfilename figscomponentspdf ptexpagenumber ptexinfodict r bbox group r resource font r pattern xobject extgstate r r procset pdf text imageb imagec imagei length filter flatedecode stream e 𢲣 n endstream endobj obj filter flatedecode length r stream z endstream endobj obj filter flatedecode length r stream ю endstream endobj obj filter flatedecode length r stream j w գ ӕ z e nrh ӻ jbm qߩ h ύ ᅴ տ ک v q g pbcݛ τ r k l 㝥τn ө
786,Lobsters,formalmethods,CSE-Formal methods,"P: A programming language designed for asynchrony, fault-tolerance and uncertainty",https://www.microsoft.com/en-us/research/blog/p-programming-language-asynchrony/,p programming language designed asynchrony faulttolerance uncertainty,shaz qadeer heisenbugs p university california berkeley imperial college london leslie lamport tla gerard holzmann spin rust azure p microsoft p family language tool,shaz qadeer principal researcher complexity emerging software application requires new approach understanding efficiently building testing debugging system today software us cloud resource often embedded device physical world employ artificial intelligence technique three factor make today software system order magnitude difficult develop often modern application feature asynchrony happens improve performance requestor operation continues without requiring completion operation asynchrony inevitably lead concurrency notorious pitfall race condition heisenbugs software bug often timingrelated seems disappear investigated due change resulting investigation address challenge asynchronous computation developed p programming language modeling specifying protocol asynchronous eventdriven application project collaborative effort microsoft researcher engineer academic researcher university california berkeley imperial college london flowchart p tool chain p programmer writes protocol specification high level p compiler provides automated testing concurrencyrelated race condition executable code running protocol p provides firstclass support modeling concurrency specifying safety liveness property checking program satisfies specification using systematic search capability similar leslie lamport tla gerard holzmann spin unlike tla spin p program also compiled executable c code capability bridge gap highlevel model lowlevel implementation eliminates huge hurdle acceptance formal modeling specification among programmer communicating state machine programming model p based concurrently executing state machine communicating via event event accompanied typed payload value memory management system based linear typing unique pointer provides safe memory management dataracefree concurrent execution respect p similar modern system programming language rust p got start microsoft software development used ship usb driver window window phone driver handle one important peripheral window ecosystem run hundred million device today p enabled detection debugging hundred race condition heisenbugs early design driver extensively used driver development window early positive experience p window kernel led development p framework provides state machine systematic testing via extension c contrast p approach p minimal syntactic extension maximal use library deliver modeling specification testing capability p transforming development cloud infrastructure azure azure similar cloud provider face challenge heisenbugs caused unexpected race condition software hardware fault bug result disruption live service huge problem customer provider cloud service p p used find debug heisenbugs alreadydeployed service design validate new service deployment p allows engineer precisely model asynchronous interface among component large azure service also allows engineer discover debug problem desktop would otherwise take month sometimes even year manifest service deployed important feature p make particularly suitable validating faulttolerant distributed service ability perform thorough failover testing validating service recovers resume operation unexpected fault happens network message drop individual state machine failure modeled event modeling fault event p fully automates faultinjection enables systematic testing failover huge number event ordering fault little effort programmer systematic testing capability p thoroughly search choice induced nondeterministic ordering concurrently dispatched event however capability limited respect handling explicit data input especially input large domain limitation make difficult apply p application robotics significant source complexity decisionmaking uncertain input dealing large uncertain input domain ongoing research investigation investigating symbolic probabilistic technique deal challenge download p download microsoft p family language tool
787,Lobsters,formalmethods,CSE-Formal methods,'Techniques' section added to Learn TLA+,https://www.learntla.com/techniques/,technique section added learn tla,technique,technique tla powerful tool provide lot guidance write good specification section cover problem might run spec well way around
789,Lobsters,formalmethods,CSE-Formal methods,"Under-constrained, Symbolic Execution: Correctness Checking for Real Code (2015)",https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-ramos.pdf,underconstrained symbolic execution correctness checking real code,,obj endobj obj filterflatedecodeid index info rlength rsize stream b f ih q endstream endobj startxref eof obj stream l cq f k bq l k ݶ ta z
791,Lobsters,formalmethods,CSE-Formal methods,"Avinux- Towards Automatic Verification of Linux, Device Drivers (2009)",https://www.google.com/url?sa=t&source=web&rct=j&url=https://pdfs.semanticscholar.org/41ab/8a4be4a0ac015a282d70099147063d2fa72c.pdf&ved=0ahUKEwj7l476zOjTAhXF0iYKHUaZAGcQFggcMAA&usg=AFQjCNEkC5xRTfYzDIcvbyQLxRXTQCXADA&sig2=ng9UJXawaK5Th4VU1r6I0A,avinux towards automatic verification linux device driver,,
792,Lobsters,formalmethods,CSE-Formal methods,"Eprover — a free, efficient automatic theorem prover",https://wwwlehre.dhbw-stuttgart.de/~sschulz/E/E.html,eprover free efficient automatic theorem prover,overview e tum many competition,overview e theorem prover full firstorder logic equality accepts problem specification typically consisting number firstorder clause formula conjecture either clausal full firstorder form system try find formal proof conjecture assuming axiom proof found system provide detailed list proof step individually verified conjecture existential ie form exists x property p recent version also provide possible answer value x development e started part esetheo project tum first public release system continuously improved ever since believe e one powerful friendly reasoning system firstorder logic prover successfully participated many competition
793,Lobsters,formalmethods,CSE-Formal methods,SPARKSkein: A Formal and Fast Reference Implementation of Skein (2010),http://www.skein-hash.info/sites/default/files/SPARKSkein.pdf,sparkskein formal fast reference implementation skein,,obj endobj obj endobj obj xobject procset pdftextimagebimagecimagei annots r mediabox content rgroup tabssstructparents endobj obj stream ڹ b ӣ ynɯ h ja p p n z z jr l e
794,Lobsters,formalmethods,CSE-Formal methods,Proving the Ghost Common Divisor (GCD) in SPARK,http://www.spark-2014.org/entries/detail/gnatprove-tips-and-tricks-proving-the-ghost-common-denominator-gcd,proving ghost common divisor gcd spark,euclid algorithm ghost code ghost lemma proof carried loop spark lemma library github repository spark,euclid algorithm computing greatest common divisor two number one first one learn school source also one first algorithm human devised source wikipedia quite appealing try prove automatic proving toolset like spark turn proving automatically easy like understanding work easy prove going use fair amount ghost code convey necessary information gnatprove spark proof tool let start specification algorithm computing greatest common divisor two positive number algorithm described natural number even negative number keep thing simple using positive input given euclid considered positive number enough u common divisor c two integer b divide usually express efficiently software mod c b mod c give following contract gcd function divide b positive return boolean b mod ghost function gcd b positive return positive post divide gcdresult divide gcdresult b note already using ghost code function divide marked ghost used specification problem contract satisfied simple implementation actually compute gcd function gcd b positive return positive begin return end gcd gnatprove manages prove easily need specify gcd function precisely stating return common divisor b greatest function gcd b positive return positive post divide gcdresult divide gcdresult b x gcdresult integermin b divide x divide x b relying property gcd lower b look greater divisor value returned gcdresult minimum b integermin b contract uniquely defines gcd indeed gnatprove prove previous incorrect implementation gcd implement contract let implement gcd starting simple linear search look greatest common divisor b function gcd b positive return positive c positive integermin b begin c loop exit mod c b mod c pragma loopinvariant x c integermin b divide x divide x b c c end loop return c end gcd start minimum b check value divide b done exit loop otherwise decrease value continue efficient computes gcd desired order prove implementation need simple loop invariant state common divisor b encountered loop far gnatprove prof easily implementation implement contract gcd le second increase efficiency algorithm computation hand would try integermin b rather integermin b second possible value gcd know value chance dividing b implementation idea function gcd b positive return positive c positive integermin b begin mod c b mod c return c else c c c loop exit mod c b mod c pragma loopinvariant x c integermin b divide x divide x b c c end loop return c end end gcd kept loop invariant need loop invariant prove postcondition gcd gnatprove manage prove invariant hold first time enters loop medium postcondition might fail prove divide x divide x b indeed know gcd lie integermin b integermin b case provers nt provide necessary information gnatprove deduce fact going use ghost code extensively need prove quantified property going establish progressively though loop accumulating knowledge gathered loop invariant c c j c integermin b loop pragma loopinvariant x c j divide x integermin b end loop c loop help ghost code loop invariant original loop fully proved loop invariant ghost loop proved iteration beyond initial one medium loop invariant might fail first iteration prove divide x integermin property need given value j integermin b integermin b j divide integermin b going establish property separate ghost lemma call inside loop get property lemma abstraction property stated procedure lemmanotdivisor positive ghost global null pre post divide begin null end lemmanotdivisor even better isolating desired property context use gnatprove prove underlying prover manages prove postcondition lemmanotdivisor remains call lemma inside loop c c j c integermin b loop lemmanotdivisor j integermin b pragma loopinvariant x c j divide x integermin b end loop c loop almost done check gnatprove manage prove range check decrement c original loop medium range check might fail look trivial though loop test state c easy prove c decremented remain positive right well help understand proof carried loop creating artificial loop starting loop invariant iteration ending loop invariant next iteration loop invariant first statement loop loop test c automatically added loop invariant would incorrect general first statement modified c provers see hypothesis trying prove range check later needed explicitly carry loop test inside loop invariant final implementation efficient gcd proved easily gnatprove le two second procedure lemmanotdivisor positive ghost global null pre post divide begin null end lemmanotdivisor function gcd b positive return positive c positive integermin b begin mod c b mod c return c else c c j c integermin b loop lemmanotdivisor j integermin b pragma loopinvariant x c j divide x integermin b end loop c loop exit mod c b mod c pragma loopinvariant c pragma loopinvariant x c integermin b divide x divide x b c c end loop return c end end gcd time try prove euclid variant algorithm still contract gcd function gcd b positive return positive positive bn natural b c positive begin bn loop c bn bn c mod bn end loop return end gcd key insight justify large jump decreasing value c iteration loop common divisor b still common divisor bn conversely greatest common divisor b turn also greatest common divisor bn bn turn zero loop invariant express property pragma loopinvariant x positive divide x divide x b divide x bn else divide x bn order prove loop invariant need state ghost lemma like help prove property needed particular iteration loop procedure lemmasamedivisormod b positive ghost global null post x positive divide x divide x b divide x b divide b else divide x mod b lemma complex proved automatically like previous one need implement ghost code extracting three lemma help proving one complete code implementation procedure lemmadivisormod b x positive ghost global null pre divide x divide x b divide b post divide x mod b begin null end lemmadivisormod procedure lemmadivisortransitive b x positive ghost global null pre divide b divide x b post divide x begin null end lemmadivisortransitive procedure lemmadivisormodinverse b x positive ghost global null pre divide b divide x mod b divide x b post divide x begin null end lemmadivisormodinverse procedure lemmasamedivisormod b positive ghost global null post x positive divide x divide x b divide x b divide b else divide x mod b begin x positive loop divide x divide x b divide b lemmadivisormod b x end divide b divide x b lemmadivisortransitive b x end divide b divide x mod b divide x b lemmadivisormodinverse b x end pragma loopinvariant x divide divide b divide b divide b else divide mod b end loop end lemmasamedivisormod function gcd b positive return positive positive bn natural b c positive begin bn loop c bn bn c mod bn lemmasamedivisormod c pragma loopinvariant x positive divide x divide x b divide x bn else divide x bn end loop pragma assert divide pragma assert divide pragma assert divide b pragma assert x integermin b divide x divide x b return end gcd implementation gcd well main lemma lemmasamedivisormod proved easily gnatprove le ten second three elementary lemma lemmadivisormod lemmadivisortransitive lemmadivisormodinverse proved automatically currently reviewed convinced true better solution future prove coq difficult given similar existing lemma coq include spark lemma library code version gcd found github repository spark including another version gcd changed definition divide reflect accurately mathematical notion divisibility function divide b positive return boolean c positive c b ghost also proved automatically gnatprove proof also requires introduction suitable lemma relate mathematical notion divisibility programming counterpart b mod
